id isNSString(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;

  v1 = a1;
  if (v1 && (v2 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v1, v2) & 1) != 0))
    v3 = v1;
  else
    v3 = 0;

  return v3;
}

id dataMigrationCompleted(void *a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;

  v1 = data_ark_copy(a1, 0, CFSTR("DataMigrationCompleted"));
  v2 = isNSNumber(v1);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v1, "BOOLValue");

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id isNSNumber(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;

  v1 = a1;
  if (v1 && (v2 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v1, v2) & 1) != 0))
    v3 = v1;
  else
    v3 = 0;

  return v3;
}

void __data_ark_copy_block_invoke(uint64_t a1)
{
  id v2;
  void *v3;
  __CFString *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  __CFString *v13;
  __CFString *v14;
  id v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[4];
  id v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;

  v2 = objc_msgSend(*(id *)(a1 + 32), "store");

  if (v2)
  {
    v3 = *(void **)(a1 + 40);
    if (v3)
    {
      v4 = _create_mapkey(*(void **)(a1 + 48), v3);
      v5 = objc_msgSend(*(id *)(a1 + 32), "store");
      v6 = objc_msgSend(v5, "objectForKeyedSubscript:", v4);
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = *(void **)(v7 + 40);
      *(_QWORD *)(v7 + 40) = v6;

      v9 = v5;
    }
    else
    {
      v10 = objc_msgSend(*(id *)(a1 + 32), "store");
      v11 = *(void **)(a1 + 48);
      v4 = (__CFString *)v10;
      v12 = v11;
      v21 = 0;
      v22 = &v21;
      v23 = 0x3032000000;
      v24 = __Block_byref_object_copy__0;
      v25 = __Block_byref_object_dispose__0;
      v26 = objc_alloc_init((Class)NSMutableDictionary);
      if (v4)
      {
        if (v12)
          v13 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-"), v12);
        else
          v13 = CFSTR("-");
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3254779904;
        v18[2] = ___copy_domain_block_invoke;
        v18[3] = &__block_descriptor_48_e8_32s40r_e15_v32__0_8_16_B24l;
        v14 = v13;
        v19 = v14;
        v20 = &v21;
        -[__CFString enumerateKeysAndObjectsUsingBlock:](v4, "enumerateKeysAndObjectsUsingBlock:", v18);
        if (!objc_msgSend((id)v22[5], "count"))
        {
          v16 = (void *)v22[5];
          v22[5] = 0;

        }
        v15 = (id)v22[5];

      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      _Block_object_dispose(&v21, 8);

      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = *(void **)(v17 + 40);
      *(_QWORD *)(v17 + 40) = v15;
    }

  }
}

void sub_1000055C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *_create_mapkey(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  NSString *v6;
  __CFString *v7;
  uint64_t v9;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 && v4)
  {
    v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@"), v3, v4);
  }
  else if (v3)
  {
    v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-"), v3, v9);
  }
  else
  {
    if (!v4)
    {
      v7 = CFSTR("-");
      goto LABEL_9;
    }
    v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("-%@"), v4, v9);
  }
  v7 = v6;
LABEL_9:

  return v7;
}

id data_ark_copy(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v16 = 0;
  v17 = &v16;
  v18 = 0x3032000000;
  v19 = __Block_byref_object_copy__0;
  v20 = __Block_byref_object_dispose__0;
  v21 = 0;
  if (v5)
  {
    v8 = objc_msgSend(v5, "queue");
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3254779904;
    v11[2] = __data_ark_copy_block_invoke;
    v11[3] = &__block_descriptor_64_e8_32s40s48s56r_e5_v8__0l;
    v12 = v5;
    v13 = v7;
    v14 = v6;
    v15 = &v16;
    dispatch_sync(v8, v11);

    v9 = (id)v17[5];
  }
  else
  {
    v9 = 0;
  }
  _Block_object_dispose(&v16, 8);

  return v9;
}

void sub_100005800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id __copy_helper_block_e8_32s(uint64_t a1, uint64_t a2)
{
  return *(id *)(a2 + 32);
}

void __destroy_helper_block_e8_32s(uint64_t a1)
{

}

void *copyLoggingHandle()
{
  if (copyLoggingHandle_onceToken != -1)
    dispatch_once(&copyLoggingHandle_onceToken, &__block_literal_global_40);
  return copyLoggingHandle_logHandle;
}

id __copy_helper_block_e8_32s40s(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = *(id *)(a2 + 32);
  return *(id *)(a2 + 40);
}

void __destroy_helper_block_e8_32s40s(uint64_t a1)
{

}

void maLog(uint64_t a1, uint64_t a2, id a3, ...)
{
  id v5;
  NSString *v6;
  NSString *v7;
  id v8;
  va_list va;

  va_start(va, a3);
  v5 = a3;
  v6 = (NSString *)objc_msgSend(objc_alloc((Class)NSMutableString), "initWithFormat:arguments:", v5, va);

  if (a1 && gPersistentLogFunctionNameLoggingEnabled)
  {
    v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s: %@"), a1, v6);

    v6 = v7;
  }
  v8 = +[MALog getSharedInstance](MALog, "getSharedInstance");
  objc_msgSend(v8, "logMessage:toSyslog:", v6, a2);

}

NSError *createAndLogError(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, id a5, void *a6, ...)
{
  id v11;
  id v12;
  id v13;
  NSString *v14;
  NSError *v15;
  NSString *v16;
  NSString *v17;
  id v18;
  uint64_t v20;
  va_list va;

  va_start(va, a6);
  v11 = a5;
  v12 = a6;
  v13 = a3;
  v14 = (NSString *)objc_msgSend(objc_alloc((Class)NSMutableString), "initWithFormat:arguments:", v12, va);

  v15 = createMobileActivationError(a1, a2, v13, a4, v11, CFSTR("%@"), v14);
  if (a1 && gPersistentLogFunctionNameLoggingEnabled)
  {
    if (v11)
      v16 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s: %@ // %@"), a1, v14, v11);
    else
      v16 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s: %@"), a1, v14, v20);
    v17 = v16;

    v14 = v17;
  }
  v18 = +[MALog getSharedInstance](MALog, "getSharedInstance");
  objc_msgSend(v18, "logMessage:toSyslog:", v14, 0);

  return v15;
}

void deleteExpiredPersistentLogFiles()
{
  id v0;

  v0 = +[MALog getSharedInstance](MALog, "getSharedInstance");
  objc_msgSend(v0, "deleteExpiredLogFiles");

}

void __copyLoggingHandle_block_invoke(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.mobileactivationd", "daemon");
  v2 = copyLoggingHandle_logHandle;
  copyLoggingHandle_logHandle = v1;

}

id copyRTCResetSerialQueue()
{
  if (copyRTCResetSerialQueue_onceToken != -1)
    dispatch_once(&copyRTCResetSerialQueue_onceToken, &__block_literal_global_0);
  return (id)copyRTCResetSerialQueue_queue;
}

void __copyRTCResetSerialQueue_block_invoke(id a1)
{
  NSObject *v1;
  dispatch_queue_t v2;
  void *v3;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = dispatch_queue_create("com.apple.mobileactivationd.rtcreset", v1);
  v3 = (void *)copyRTCResetSerialQueue_queue;
  copyRTCResetSerialQueue_queue = (uint64_t)v2;

}

id copyMobileActivationSerialQueue()
{
  if (copyMobileActivationSerialQueue_onceToken != -1)
    dispatch_once(&copyMobileActivationSerialQueue_onceToken, &__block_literal_global_2);
  return (id)copyMobileActivationSerialQueue_queue;
}

void __copyMobileActivationSerialQueue_block_invoke(id a1)
{
  NSObject *v1;
  dispatch_queue_t v2;
  void *v3;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = dispatch_queue_create("com.apple.mobileactivationd", v1);
  v3 = (void *)copyMobileActivationSerialQueue_queue;
  copyMobileActivationSerialQueue_queue = (uint64_t)v2;

}

uint64_t certificatePublicKeyMatchesSystemPublicKey(uint64_t a1, uint64_t a2, __SecCertificate *a3, NSError **a4)
{
  __SecCertificate *v5;
  __SecKey *v8;
  id v9;
  NSError *v10;
  CFDataRef v11;
  uint64_t v12;
  NSError *v13;
  __SecKey *v14;
  NSError *MobileActivationError;
  NSError *v16;
  NSError *v17;
  id v19;
  id v20;
  id v21;
  CFErrorRef error;

  v5 = a3;
  error = 0;
  if (a3)
  {
    if ((_DWORD)a2 == 2)
    {
      v20 = 0;
      v21 = 0;
      v8 = security_copy_system_key(a1, (const __CFData **)&v21, &v20);
      v9 = v21;
      v10 = (NSError *)v20;
      if (!v8)
      {
        MobileActivationError = createMobileActivationError((uint64_t)"certificatePublicKeyMatchesSystemPublicKey", 204, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v10, CFSTR("Failed to copy UIK."));
        goto LABEL_17;
      }
      if (v9)
      {
LABEL_10:
        v14 = SecCertificateCopyKey(v5);
        v5 = v14;
        if (v14)
        {
          v11 = SecKeyCopyExternalRepresentation(v14, &error);
          if (v11)
          {
            if ((objc_msgSend(v9, "isEqualToData:", v11) & 1) != 0)
            {
              v12 = 1;
              goto LABEL_24;
            }
            v17 = createMobileActivationError((uint64_t)"certificatePublicKeyMatchesSystemPublicKey", 235, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Certificate public key does not match systemKey public key."));
          }
          else
          {
            v17 = createMobileActivationError((uint64_t)"certificatePublicKeyMatchesSystemPublicKey", 228, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to encode certificate public key as data."));
          }
          v16 = v17;

LABEL_22:
          v10 = v16;
          if (a4)
            goto LABEL_23;
LABEL_7:
          v12 = 0;
          goto LABEL_24;
        }
        v16 = createMobileActivationError((uint64_t)"certificatePublicKeyMatchesSystemPublicKey", 222, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve certificate public key."));

LABEL_18:
        v11 = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = 0;
      v8 = 0;
    }
    v13 = v10;
    v19 = v10;
    v9 = libaks_system_key_get_public(a2, a1, (NSError **)&v19);
    v10 = (NSError *)v19;

    if (v9)
      goto LABEL_10;
    MobileActivationError = createMobileActivationError((uint64_t)"certificatePublicKeyMatchesSystemPublicKey", 213, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v10, CFSTR("Failed to query systemKey (%d / %d) public key."), a2, a1);
LABEL_17:
    v16 = MobileActivationError;

    v5 = 0;
    goto LABEL_18;
  }
  v10 = createMobileActivationError((uint64_t)"certificatePublicKeyMatchesSystemPublicKey", 196, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
  v9 = 0;
  v8 = 0;
  v11 = 0;
  if (!a4)
    goto LABEL_7;
LABEL_23:
  v10 = objc_retainAutorelease(v10);
  v12 = 0;
  *a4 = v10;
LABEL_24:
  if (v8)
    CFRelease(v8);
  if (v5)
    CFRelease(v5);
  if (error)
    CFRelease(error);
  error = 0;

  return v12;
}

void scheduleXPCActivity(void *a1, const char *a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, void *a7)
{
  id v13;
  id v14;
  xpc_object_t v15;
  id v16;
  id v17;
  _QWORD handler[4];
  id v19;
  id v20;
  const char *v21;

  v13 = a1;
  v14 = a7;
  v15 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v15, XPC_ACTIVITY_REPEATING, 0);
  xpc_dictionary_set_int64(v15, XPC_ACTIVITY_DELAY, a3);
  xpc_dictionary_set_string(v15, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_BOOL(v15, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_BOOL(v15, XPC_ACTIVITY_POWER_NAP, 1);
  xpc_dictionary_set_int64(v15, XPC_ACTIVITY_GRACE_PERIOD, 30);
  xpc_dictionary_set_BOOL(v15, XPC_ACTIVITY_REQUIRES_CLASS_C, 0);
  if (a4)
  {
    xpc_dictionary_set_BOOL(v15, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
    xpc_dictionary_set_int64(v15, XPC_ACTIVITY_NETWORK_UPLOAD_SIZE, a5);
    xpc_dictionary_set_int64(v15, XPC_ACTIVITY_NETWORK_DOWNLOAD_SIZE, a6);
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3254779904;
  handler[2] = __scheduleXPCActivity_block_invoke;
  handler[3] = &__block_descriptor_56_e8_32s40bs_e33_v16__0__NSObject_OS_xpc_object__8l;
  v20 = v14;
  v21 = a2;
  v19 = v13;
  v16 = v13;
  v17 = v14;
  xpc_activity_register(a2, v15, handler);

}

void __scheduleXPCActivity_block_invoke(uint64_t a1, id a2)
{
  _xpc_activity_s *v3;
  NSObject *v4;

  v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3))
      goto LABEL_9;
    v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __scheduleXPCActivity_block_invoke_cold_1(a1, v4);

  }
  if (xpc_activity_get_state(v3) == 2)
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_9:

}

void __copy_helper_block_e8_32s40b(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = *(id *)(a2 + 32);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 7);
}

id copyDCRT(void *a1, __SecCertificate **a2, SecCertificateRef *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  __CFString *v12;
  NSError *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  NSArray *v24;
  unsigned int v25;
  const __CFString *v26;
  const __CFString *v27;
  int v28;
  id v29;
  unsigned int v30;
  __CFString **v31;
  id v32;
  NSFileManager *v33;
  unsigned __int8 v34;
  id v35;
  id v36;
  id v37;
  const __CFData *v38;
  __SecCertificate *v39;
  const __CFData *v40;
  SecCertificateRef v41;
  char v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  void *v47;
  NSError *v48;
  void *v49;
  id v50;
  NSError *v51;
  NSError *MobileActivationError;
  id v53;
  NSError *v55;
  __CFString *v56;
  _QWORD *v57;
  SecCertificateRef *v58;
  const __CFString *v59;
  id v60;
  unsigned int v61;
  id v62;
  const __CFString *v63;
  __SecCertificate **v64;
  void *v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  NSArray *obj;
  id v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  id v77;
  id v78;
  _BYTE v79[128];

  v9 = a1;
  v10 = a4;
  if (platform_supports_activation())
  {
    v11 = data_ark_copy(v9, 0, CFSTR("ActivationState"));
    v12 = (__CFString *)isNSString(v11);

    if (!v12)
      v12 = CFSTR("Unactivated");
    if ((-[__CFString isEqualToString:](v12, "isEqualToString:", CFSTR("Activated")) & 1) == 0)
    {
      v13 = createMobileActivationError((uint64_t)"copyDCRT", 359, CFSTR("com.apple.MobileActivation.ErrorDomain"), -8, 0, CFSTR("Device is not activated (%@)."), v12);
      v70 = 0;
      v66 = 0;
      v67 = 0;
      v14 = 0;
      v68 = 0;
      v15 = 0;
LABEL_47:
      v69 = 0;
      goto LABEL_52;
    }
  }
  else
  {
    v12 = 0;
  }
  v16 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CanonicalizeDcrtOIDs"));
  v15 = v16;
  if (v16)
  {
    v17 = isNSNumber(v16);

    if (!v17)
    {
      v13 = createMobileActivationError((uint64_t)"copyDCRT", 366, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid option (%@)."), CFSTR("CanonicalizeDcrtOIDs"));
      v70 = 0;
      v66 = 0;
      v67 = 0;
      v14 = 0;
      v68 = 0;
      goto LABEL_47;
    }
  }
  v18 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("ValidateCriticalDcrtOIDs"));
  v19 = v18;
  v69 = v18;
  if (v18)
  {
    v20 = isNSNumber(v18);

    if (!v20)
    {
      v13 = createMobileActivationError((uint64_t)"copyDCRT", 372, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid option (%@)."), CFSTR("ValidateCriticalDcrtOIDs"));
      v70 = 0;
      v66 = 0;
      v67 = 0;
      v14 = 0;
      v68 = 0;
      goto LABEL_52;
    }
  }
  v64 = a2;
  v21 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("sdcrtAttestation"));
  v22 = v21;
  v68 = v21;
  if (v21)
  {
    v23 = isNSNumber(v21);

    if (!v23)
    {
      v13 = createMobileActivationError((uint64_t)"copyDCRT", 378, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid option (%@)."), CFSTR("sdcrtAttestation"));
      v70 = 0;
      v66 = 0;
      v67 = 0;
      v14 = 0;
LABEL_52:
      obj = 0;
      v39 = 0;
      v41 = 0;
      v43 = 0;
      if (!a5)
        goto LABEL_64;
      goto LABEL_62;
    }
  }
  v65 = v15;
  if ((objc_msgSend(v22, "BOOLValue") & 1) != 0 || objc_msgSend(v15, "BOOLValue"))
  {
    v24 = copy_required_dcrt_oids();
LABEL_16:
    obj = v24;
    goto LABEL_17;
  }
  if (objc_msgSend(v19, "BOOLValue"))
  {
    v24 = copy_critical_dcrt_oids();
    goto LABEL_16;
  }
  obj = 0;
LABEL_17:
  v25 = objc_msgSend(v22, "BOOLValue");
  if (v25)
    v26 = CFSTR("SDCRT");
  else
    v26 = CFSTR("DCRT");
  v27 = CFSTR("SDAK");
  if (!v25)
    v27 = CFSTR("DAK");
  v59 = v27;
  if (v25)
    v28 = 10;
  else
    v28 = 9;
  v61 = v28;
  v29 = copy_dcrt_path();
  v30 = objc_msgSend(v22, "BOOLValue");
  v31 = &SDCRT_FILENAME;
  if (!v30)
    v31 = &DCRT_FILENAME;
  v32 = objc_msgSend(v29, "stringByAppendingPathComponent:", *v31);

  if (!v32)
  {
    v13 = createMobileActivationError((uint64_t)"copyDCRT", 406, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create %@ file path."), v26);
    v70 = 0;
    v67 = 0;
LABEL_59:
    v66 = 0;
    v14 = 0;
    v39 = 0;
LABEL_60:
    v41 = 0;
    v43 = 0;
    goto LABEL_61;
  }
  v63 = v26;
  v58 = a3;
  v33 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v34 = -[NSFileManager fileExistsAtPath:](v33, "fileExistsAtPath:", v32);

  v67 = v32;
  if ((v34 & 1) == 0)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"copyDCRT", 411, CFSTR("com.apple.MobileActivation.ErrorDomain"), -10, 0, CFSTR("%@ is unavailable."), v26);
LABEL_58:
    v13 = MobileActivationError;
    v70 = 0;
    goto LABEL_59;
  }
  v35 = objc_msgSend(objc_alloc((Class)NSData), "initWithContentsOfFile:", v32);
  if (!v35)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"copyDCRT", 417, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to encode %@."), v26);
    goto LABEL_58;
  }
  v78 = 0;
  v70 = v35;
  v36 = parseDERCertificatesFromChain(v35, &v78);
  v37 = v78;
  if (!v36)
  {
    v13 = createMobileActivationError((uint64_t)"copyDCRT", 423, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v37, CFSTR("Failed to query certificate(s) from DER data."));

    goto LABEL_59;
  }
  v38 = (const __CFData *)objc_msgSend(v36, "objectAtIndexedSubscript:", 0);
  v39 = SecCertificateCreateWithData(kCFAllocatorDefault, v38);

  v66 = v36;
  if (!v39)
  {
    v13 = createMobileActivationError((uint64_t)"copyDCRT", 429, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v37, CFSTR("Failed to create certificate from pem data."));

    v14 = 0;
    goto LABEL_60;
  }
  v57 = a5;
  v40 = (const __CFData *)objc_msgSend(v36, "objectAtIndexedSubscript:", 1);
  v41 = SecCertificateCreateWithData(kCFAllocatorDefault, v40);

  if (!v41)
  {
    v13 = createMobileActivationError((uint64_t)"copyDCRT", 435, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v37, CFSTR("Failed to create certificate from pem data."));

    v14 = 0;
    v43 = 0;
    goto LABEL_75;
  }
  v77 = v37;
  v42 = certificatePublicKeyMatchesSystemPublicKey(2, v61, v39, (NSError **)&v77);
  v13 = (NSError *)v77;

  if ((v42 & 1) == 0)
  {
    v55 = createMobileActivationError((uint64_t)"copyDCRT", 440, CFSTR("com.apple.MobileActivation.ErrorDomain"), -10, v13, CFSTR("%@ does not match committed %@."), v63, v59);

    v14 = 0;
    v43 = 0;
LABEL_74:
    v13 = v55;
    goto LABEL_75;
  }
  v43 = objc_alloc_init((Class)NSMutableArray);
  if (!v43)
  {
    v55 = createMobileActivationError((uint64_t)"copyDCRT", 446, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate array."));

    v14 = 0;
    goto LABEL_74;
  }
  v56 = v12;
  v60 = v10;
  v62 = v9;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  obj = obj;
  v44 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v73, v79, 16);
  if (v44)
  {
    v45 = v44;
    v46 = *(_QWORD *)v74;
    do
    {
      v47 = 0;
      v48 = v13;
      do
      {
        if (*(_QWORD *)v74 != v46)
          objc_enumerationMutation(obj);
        v49 = *(void **)(*((_QWORD *)&v73 + 1) + 8 * (_QWORD)v47);
        v72 = v48;
        v50 = lockcrypto_query_certificate_properties((uint64_t)v39, v49, &v72);
        v13 = (NSError *)v72;

        if (!v50)
          objc_msgSend(v43, "addObject:", v49);
        v47 = (char *)v47 + 1;
        v48 = v13;
      }
      while (v45 != v47);
      v45 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v73, v79, 16);
    }
    while (v45);
  }

  if (objc_msgSend(v43, "count"))
  {
    v51 = createMobileActivationError((uint64_t)"copyDCRT", 457, CFSTR("com.apple.MobileActivation.ErrorDomain"), -10, 0, CFSTR("Existing %@ is missing required OID(s) (%@)."), v63, v43);

    v14 = 0;
    v13 = v51;
    v10 = v60;
    v9 = v62;
    v12 = v56;
LABEL_75:
    a5 = v57;
LABEL_61:
    v15 = v65;
    if (!a5)
      goto LABEL_64;
    goto LABEL_62;
  }
  v10 = v60;
  v9 = v62;
  v12 = v56;
  v15 = v65;
  if (v64)
  {
    *v64 = v39;
    v39 = 0;
  }
  a5 = v57;
  if (v58)
  {
    *v58 = v41;
    v41 = 0;
  }
  v14 = v70;
  v70 = v14;
  if (v57)
  {
LABEL_62:
    if (!v14)
      *a5 = objc_retainAutorelease(v13);
  }
LABEL_64:
  if (v39)
    CFRelease(v39);
  if (v41)
    CFRelease(v41);
  v53 = v14;

  return v53;
}

uint64_t storeDCRT(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  _QWORD *v12;
  SecCertificateRef v13;
  id v14;
  id v15;
  _BOOL4 v16;
  NSError *v17;
  uint64_t v18;
  __SecCertificate *v19;
  __SecCertificate *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  unsigned int v26;
  const __CFString *v27;
  const __CFString *v28;
  int v29;
  NSFileManager *v30;
  id v31;
  NSDictionary *v32;
  unsigned __int8 v33;
  id v34;
  id v35;
  unsigned int v36;
  __CFString **v37;
  char v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  _BOOL4 is_legacy;
  id v46;
  void *v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  id v52;
  id v53;
  id v54;
  const __CFData *v55;
  const __CFData *v56;
  uint64_t v57;
  char v58;
  id v59;
  char v60;
  NSError *v61;
  void *v62;
  id v63;
  id v64;
  void *v65;
  NSError *v66;
  void *v67;
  id v68;
  NSError *v70;
  char v71;
  NSError *v72;
  void *v73;
  NSFileManager *v74;
  NSError *v75;
  id v76;
  NSError *v77;
  NSArray *obj;
  int v79[2];
  id v80;
  id v81;
  const __CFString *v82;
  const __CFString *v83;
  int v84;
  int v85[2];
  unsigned int v86;
  id v87;
  void *v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  NSError *v95;
  id v96;
  id v97;
  id v98;
  id v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  NSFileAttributeKey v110;
  _UNKNOWN **v111;
  _BYTE v112[128];

  v6 = a1;
  v7 = a2;
  v8 = a3;
  v9 = v8;
  if (!v7)
  {
    v17 = createMobileActivationError((uint64_t)"storeDCRT", 514, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v18 = 0;
    v19 = 0;
    v13 = 0;
    v20 = 0;
    v92 = 0;
    v93 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v87 = 0;
    v88 = 0;
    v21 = 0;
    goto LABEL_8;
  }
  if (!v8)
  {
    v90 = 0;
    v22 = 0;
    v11 = 0;
    v23 = 0;
    v84 = 0;
    v12 = a4;
    goto LABEL_17;
  }
  v10 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("UseCommittedDAK"));
  v11 = v10;
  v12 = a4;
  if (v10)
  {
    v13 = (SecCertificateRef)isNSNumber(v10);

    if (!v13)
    {
      v92 = v11;
      v17 = createMobileActivationError((uint64_t)"storeDCRT", 521, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid value for option (%@)."), CFSTR("UseCommittedDAK"));
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v93 = 0;
      v89 = 0;
      v90 = 0;
LABEL_74:
      v91 = 0;
      v87 = 0;
      v88 = 0;
      goto LABEL_75;
    }
  }
  v14 = objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("ServerResponseDate"));
  v15 = isNSDate(v14);

  v16 = v15 != 0;
  if (v15)
    v90 = objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("ServerResponseDate"));
  else
    v90 = 0;
  v24 = objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("SkipCertificateValidation"));
  v22 = v24;
  if (v24)
  {
    v13 = (SecCertificateRef)isNSNumber(v24);

    if (!v13)
    {
      v89 = v22;
      v92 = v11;
      v17 = createMobileActivationError((uint64_t)"storeDCRT", 532, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid value for option (%@)."), CFSTR("SkipCertificateValidation"));
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v93 = 0;
      goto LABEL_74;
    }
  }
  v25 = objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("sdcrtAttestation"));
  v23 = v25;
  if (v25)
  {
    v13 = (SecCertificateRef)isNSNumber(v25);

    if (!v13)
    {
      v92 = v11;
      v93 = v23;
      v89 = v22;
      v17 = createMobileActivationError((uint64_t)"storeDCRT", 538, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid option (%@)."), CFSTR("sdcrtAttestation"));
      v18 = 0;
      v19 = 0;
      goto LABEL_73;
    }
  }
  v84 = v16;
LABEL_17:
  v93 = v23;
  v26 = objc_msgSend(v23, "BOOLValue");
  if (v26)
    v27 = CFSTR("SDAK");
  else
    v27 = CFSTR("DAK");
  if (v26)
    v28 = CFSTR("SDCRT");
  else
    v28 = CFSTR("DCRT");
  v109 = 0;
  if (v26)
    v29 = 10;
  else
    v29 = 9;
  v86 = v29;
  v18 = (uint64_t)parseDERCertificatesFromChain(v7, &v109);
  v21 = v109;
  v92 = v11;
  v89 = v22;
  if (!v18)
  {
    v17 = createMobileActivationError((uint64_t)"storeDCRT", 551, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v21, CFSTR("Failed to decode certificates."));

    v19 = 0;
    v13 = 0;
LABEL_73:
    v20 = 0;
    goto LABEL_74;
  }
  v91 = (id)v18;
  v82 = v27;
  v83 = v28;
  if ((objc_msgSend(v22, "BOOLValue") & 1) != 0)
  {
    v80 = v7;
    *(_QWORD *)v85 = v6;
    v87 = 0;
    v88 = 0;
    v20 = 0;
    v13 = 0;
    v19 = 0;
    goto LABEL_29;
  }
  if (is_internal_build())
  {
    v39 = objc_alloc((Class)NSUserDefaults);
    v40 = objc_msgSend(v39, "persistentDomainForName:", CFSTR("com.apple.mobileactivationd"));

    v41 = objc_msgSend(v40, "objectForKeyedSubscript:", CFSTR("UseQACertificates"));
    v42 = isNSNumber(v41);

    v88 = v40;
    if (v42)
    {
      v43 = objc_msgSend(v40, "objectForKeyedSubscript:", CFSTR("UseQACertificates"));
      LODWORD(v42) = objc_msgSend(v43, "BOOLValue");

    }
  }
  else
  {
    v88 = 0;
    LODWORD(v42) = 0;
  }
  v108 = v21;
  is_legacy = security_committed_uik_is_legacy(&v108);
  v46 = v108;

  if (!is_legacy && v46)
  {
    v17 = createMobileActivationError((uint64_t)"storeDCRT", 568, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v46, CFSTR("Failed to query legacy UIK support."));
    v47 = v46;
LABEL_87:

    v18 = 0;
    v19 = 0;
    v13 = 0;
    v20 = 0;
    v87 = 0;
    goto LABEL_75;
  }
  v48 = platform_supports_activation() ^ 1 | is_legacy;
  v49 = objc_msgSend(v93, "BOOLValue");
  if (v48)
    v50 = 2;
  else
    v50 = 1;
  if (v49)
    v51 = 5;
  else
    v51 = v50;
  v107 = v46;
  v52 = copyRootCertificate(v51, (int)v42, (NSError **)&v107);
  v53 = v107;

  if (!v52)
  {
    v17 = createMobileActivationError((uint64_t)"storeDCRT", 589, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v53, CFSTR("Failed to load BAA root CA certificate."));
    v47 = v53;
    goto LABEL_87;
  }
  v106 = v53;
  v20 = lockcrypto_cert_from_pem_data(v52, (NSError **)&v106);
  v54 = v106;

  v87 = v52;
  if (v20)
  {
    v81 = v54;
    v55 = (const __CFData *)objc_msgSend(v91, "objectAtIndexedSubscript:", 0);
    v13 = SecCertificateCreateWithData(kCFAllocatorDefault, v55);

    if (v13)
    {
      v56 = (const __CFData *)objc_msgSend(v91, "objectAtIndexedSubscript:", 1);
      v19 = SecCertificateCreateWithData(kCFAllocatorDefault, v56);

      if (v19)
      {
        if (objc_msgSend(v92, "BOOLValue"))
          v57 = 2;
        else
          v57 = 3;
        v105 = v81;
        v58 = certificatePublicKeyMatchesSystemPublicKey(v57, v86, v13, (NSError **)&v105);
        v59 = v105;

        if ((v58 & 1) != 0)
        {
          v104 = v59;
          v60 = evaluateBAATrustWithCerts(v13, v19, v20, v48, v84, v90, &v104);
          v61 = (NSError *)v104;
          v62 = v59;
          v17 = v61;

          if ((v60 & 1) == 0)
          {
            v95 = createMobileActivationError((uint64_t)"storeDCRT", 621, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v17, CFSTR("Failed to verify %@."), v83);

            v18 = 0;
            v21 = 0;
            v17 = v95;
            if (!v12)
              goto LABEL_78;
            goto LABEL_76;
          }
          v80 = v7;
          *(_QWORD *)v85 = v6;
          v102 = 0u;
          v103 = 0u;
          v100 = 0u;
          v101 = 0u;
          obj = copy_required_dcrt_oids();
          v63 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v100, v112, 16);
          if (v63)
          {
            v64 = v63;
            *(_QWORD *)v79 = *(_QWORD *)v101;
            while (2)
            {
              v65 = 0;
              v66 = v17;
              do
              {
                if (*(_QWORD *)v101 != *(_QWORD *)v79)
                  objc_enumerationMutation(obj);
                v67 = *(void **)(*((_QWORD *)&v100 + 1) + 8 * (_QWORD)v65);
                v99 = v66;
                v68 = lockcrypto_query_certificate_properties((uint64_t)v13, v67, &v99);
                v17 = (NSError *)v99;

                if (!v68)
                {
                  v77 = createMobileActivationError((uint64_t)"storeDCRT", 629, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v17, CFSTR("%@ is missing required OID: %@"), v83, v67);

                  v17 = v77;
                  goto LABEL_102;
                }
                v65 = (char *)v65 + 1;
                v66 = v17;
              }
              while (v64 != v65);
              v64 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v100, v112, 16);
              if (v64)
                continue;
              break;
            }
          }
LABEL_102:

          v21 = 0;
          if (v17)
          {
            v18 = 0;
            goto LABEL_43;
          }
LABEL_29:
          v30 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
          v31 = copy_dcrt_path();
          v110 = NSFilePosixPermissions;
          v111 = &off_100271580;
          v32 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v111, &v110, 1);
          v98 = v21;
          v33 = -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:](v30, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v31, 1, v32, &v98);
          v34 = v98;

          if ((v33 & 1) != 0)
          {
            v35 = copy_dcrt_path();
            v36 = objc_msgSend(v93, "BOOLValue");
            v37 = &SDCRT_FILENAME;
            if (!v36)
              v37 = &DCRT_FILENAME;
            v21 = objc_msgSend(v35, "stringByAppendingPathComponent:", *v37);

            v7 = v80;
            if (v21)
            {
              v97 = v34;
              v38 = store_data(v21, v80, &v97);
              v17 = (NSError *)v97;

              v6 = *(id *)v85;
              if ((v38 & 1) != 0)
              {
                if ((objc_msgSend(v92, "BOOLValue") & 1) != 0)
                {
                  v18 = 1;
                }
                else
                {
                  v96 = v17;
                  v71 = libaks_system_key_operate(v86, 2, (NSError **)&v96);
                  v72 = (NSError *)v96;

                  if ((v71 & 1) != 0)
                  {
                    v18 = 1;
                    v17 = v72;
                  }
                  else
                  {
                    v17 = createMobileActivationError((uint64_t)"storeDCRT", 663, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v72, CFSTR("Failed to commit %@."), v82);

                    v18 = 0;
                  }
                }
                if (v17)
                {
                  v74 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
                  -[NSFileManager removeItemAtPath:error:](v74, "removeItemAtPath:error:", v21, 0);

                }
              }
              else
              {
                v70 = createMobileActivationError((uint64_t)"storeDCRT", 653, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v17, CFSTR("Failed to store %@ at %@."), v83, v21);

                v18 = 0;
                v17 = v70;
              }
            }
            else
            {
              v17 = createMobileActivationError((uint64_t)"storeDCRT", 648, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create %@ file path."), v83);

              v18 = 0;
              v6 = *(id *)v85;
            }
LABEL_8:
            v12 = a4;
            if (!a4)
              goto LABEL_78;
            goto LABEL_76;
          }
          v44 = copy_dcrt_path();
          v17 = createMobileActivationError((uint64_t)"storeDCRT", 642, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v34, CFSTR("Failed to create %@."), v44);

          v18 = 0;
          v21 = 0;
LABEL_43:
          v6 = *(id *)v85;
          v7 = v80;
          goto LABEL_8;
        }
        v75 = createMobileActivationError((uint64_t)"storeDCRT", 614, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v59, CFSTR("%@ public key does not match %@ public key."), v83, v82);
        v76 = v59;
        v17 = v75;
        v73 = v76;
      }
      else
      {
        v17 = createMobileActivationError((uint64_t)"storeDCRT", 607, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create certificate."));
        v73 = v81;
      }

      v18 = 0;
    }
    else
    {
      v17 = createMobileActivationError((uint64_t)"storeDCRT", 601, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create certificate."));

      v18 = 0;
      v19 = 0;
    }
  }
  else
  {
    v17 = createMobileActivationError((uint64_t)"storeDCRT", 595, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v54, CFSTR("Failed to create certificate from pem data."));

    v18 = 0;
    v19 = 0;
    v13 = 0;
  }
LABEL_75:
  v21 = 0;
  if (!v12)
    goto LABEL_78;
LABEL_76:
  if ((v18 & 1) == 0)
    *v12 = objc_retainAutorelease(v17);
LABEL_78:
  if (v13)
    CFRelease(v13);
  if (v19)
    CFRelease(v19);
  if (v20)
    CFRelease(v20);

  return v18;
}

uint64_t deleteDCRT(uint64_t a1, void *a2, NSError **a3)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  unsigned int v8;
  __CFString **v9;
  id v10;
  NSFileManager *v11;
  unsigned int v12;
  NSFileManager *v13;
  unsigned __int8 v14;
  NSError *v15;
  NSError *v16;
  uint64_t v17;
  id v19;

  v4 = objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("sdcrtAttestation"));
  v5 = v4;
  if (v4 && (v6 = isNSNumber(v4), v6, !v6))
  {
    v15 = createMobileActivationError((uint64_t)"deleteDCRT", 697, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid option (%@)."), CFSTR("sdcrtAttestation"));
    v10 = 0;
    if (a3)
      goto LABEL_13;
  }
  else
  {
    v7 = copy_dcrt_path();
    v8 = objc_msgSend(v5, "BOOLValue");
    v9 = &SDCRT_FILENAME;
    if (!v8)
      v9 = &DCRT_FILENAME;
    v10 = objc_msgSend(v7, "stringByAppendingPathComponent:", *v9);

    if (v10)
    {
      v11 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
      v12 = -[NSFileManager fileExistsAtPath:](v11, "fileExistsAtPath:", v10);

      if (v12)
      {
        v13 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
        v19 = 0;
        v14 = -[NSFileManager removeItemAtPath:error:](v13, "removeItemAtPath:error:", v10, &v19);
        v15 = (NSError *)v19;

        if ((v14 & 1) == 0)
        {
          v16 = createMobileActivationError((uint64_t)"deleteDCRT", 709, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v15, CFSTR("Failed to delete %@."), v10);

          v15 = v16;
          if (!a3)
            goto LABEL_11;
LABEL_13:
          v15 = objc_retainAutorelease(v15);
          v17 = 0;
          *a3 = v15;
          goto LABEL_16;
        }
      }
      else
      {
        v15 = 0;
      }
      v17 = 1;
      goto LABEL_16;
    }
    v15 = createMobileActivationError((uint64_t)"deleteDCRT", 703, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create DCRT file path."));
    if (a3)
      goto LABEL_13;
  }
LABEL_11:
  v17 = 0;
LABEL_16:

  return v17;
}

uint64_t deleteUCRT(uint64_t a1, NSError **a2)
{
  NSFileManager *v3;
  id v4;
  unsigned int v5;
  NSFileManager *v6;
  id v7;
  unsigned __int8 v8;
  NSError *v9;
  id v10;
  NSError *v11;
  uint64_t v12;
  id v14;

  v3 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v4 = copy_ucrt_path();
  v5 = -[NSFileManager fileExistsAtPath:](v3, "fileExistsAtPath:", v4);

  if (!v5)
  {
    v9 = 0;
    goto LABEL_6;
  }
  v6 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v7 = copy_ucrt_path();
  v14 = 0;
  v8 = -[NSFileManager removeItemAtPath:error:](v6, "removeItemAtPath:error:", v7, &v14);
  v9 = (NSError *)v14;

  if ((v8 & 1) != 0)
  {
LABEL_6:
    v12 = 1;
    goto LABEL_7;
  }
  v10 = copy_ucrt_path();
  v11 = createMobileActivationError((uint64_t)"deleteUCRT", 733, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v9, CFSTR("Failed to delete %@."), v10);

  if (a2)
  {
    v9 = objc_retainAutorelease(v11);
    v12 = 0;
    *a2 = v9;
  }
  else
  {
    v12 = 0;
    v9 = v11;
  }
LABEL_7:

  return v12;
}

uint64_t storeUCRT(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  NSError *v12;
  id v13;
  uint64_t v14;
  id v15;
  __SecCertificate *v16;
  id v17;
  NSObject *v18;
  NSMutableString *v19;
  id v20;
  const __CFData *v21;
  uint64_t v22;
  char v23;
  id v24;
  char v25;
  id v26;
  NSFileManager *v27;
  id v28;
  NSDictionary *v29;
  id v30;
  id v31;
  char v32;
  char v33;
  id v34;
  char v35;
  id v36;
  void *v37;
  NSError *MobileActivationError;
  unsigned __int8 v40;
  id v41;
  NSError *v42;
  NSFileManager *v43;
  id v44;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  NSFileAttributeKey v53;
  _UNKNOWN **v54;
  uint8_t buf[4];
  NSMutableString *v56;

  v44 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!v6)
  {
    v12 = createMobileActivationError((uint64_t)"storeUCRT", 770, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v13 = 0;
    v14 = 0;
    v11 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v10 = &__kCFBooleanFalse;
    goto LABEL_33;
  }
  if (v7)
  {
    v9 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("UseCommittedUIK"));
    v10 = v9;
    if (v9)
    {
      v11 = isNSNumber(v9);

      if (!v11)
      {
        v12 = createMobileActivationError((uint64_t)"storeUCRT", 777, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid option (%@)."), CFSTR("UseCommittedUIK"));
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v16 = 0;
        v17 = 0;
        goto LABEL_33;
      }
    }
  }
  else
  {
    v10 = &__kCFBooleanFalse;
  }
  v18 = copyLoggingHandle();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v19 = formatURLResponse(v6, 200, 0);
    *(_DWORD *)buf = 138412290;
    v56 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Activation message:\n%@", buf, 0xCu);

  }
  v13 = objc_msgSend(v8, "mutableCopy");
  objc_msgSend(v13, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("UseEnhancedValidation"));
  objc_msgSend(v13, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("UseEnhancedValidationWithVersionCheck"));
  v52 = 0;
  v17 = lockcrypto_decode_pems(v6, "CERTIFICATE", (NSError **)&v52);
  v20 = v52;
  if (!v17)
  {
    v12 = createMobileActivationError((uint64_t)"storeUCRT", 790, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v20, CFSTR("Failed to query certificate(s) from pem data."));

    v14 = 0;
    v11 = 0;
    v15 = 0;
    v16 = 0;
    goto LABEL_33;
  }
  v21 = (const __CFData *)objc_msgSend(v17, "objectAtIndexedSubscript:", 0);
  v16 = SecCertificateCreateWithData(kCFAllocatorDefault, v21);

  if (!v16)
  {
    v12 = createMobileActivationError((uint64_t)"storeUCRT", 796, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v20, CFSTR("Failed to create certificate from pem data."));
    v37 = v20;
LABEL_32:

    v14 = 0;
    v11 = 0;
    v15 = 0;
    goto LABEL_33;
  }
  if (objc_msgSend(v10, "BOOLValue"))
    v22 = 2;
  else
    v22 = 3;
  v51 = v20;
  v23 = certificatePublicKeyMatchesSystemPublicKey(v22, 2, v16, (NSError **)&v51);
  v24 = v51;

  if ((v23 & 1) == 0)
  {
    v12 = createMobileActivationError((uint64_t)"storeUCRT", 801, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v24, CFSTR("UCRT public key does not match UIK public key."));
    v37 = v24;
    goto LABEL_32;
  }
  v50 = v24;
  v25 = verify_ucrt(v6, v13, &v50);
  v26 = v50;

  if ((v25 & 1) == 0)
  {
    v12 = createMobileActivationError((uint64_t)"storeUCRT", 806, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v26, CFSTR("Failed to verify UCRT."));
LABEL_31:
    v37 = v26;
    goto LABEL_32;
  }
  v27 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v28 = copy_ucrt_path();
  v53 = NSFilePosixPermissions;
  v54 = &off_100271580;
  v29 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v54, &v53, 1);
  v49 = v26;
  v40 = -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:](v27, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v28, 1, v29, &v49);
  v41 = v49;

  if ((v40 & 1) == 0)
  {
    v26 = copy_ucrt_path();
    v12 = createMobileActivationError((uint64_t)"storeUCRT", 863, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v41, CFSTR("Failed to create %@."), v26);

    goto LABEL_31;
  }
  v30 = v41;
  v31 = copy_ucrt_path();
  v15 = objc_msgSend(v31, "stringByAppendingPathComponent:", CFSTR("ucrt.pem"));

  if (!v15)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"storeUCRT", 869, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create UCRT file path."));
LABEL_41:
    v12 = MobileActivationError;

    v14 = 0;
    v11 = 0;
    goto LABEL_33;
  }
  v48 = v41;
  v32 = store_data(v15, v6, &v48);
  v30 = v48;

  if ((v32 & 1) == 0)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"storeUCRT", 874, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v30, CFSTR("Failed to store UCRT at %@."), v15);
    goto LABEL_41;
  }
  if ((objc_msgSend(v10, "BOOLValue") & 1) == 0)
  {
    v47 = v30;
    v33 = libaks_system_key_operate(2, 2, (NSError **)&v47);
    v34 = v47;

    if ((v33 & 1) == 0)
    {
      v12 = createMobileActivationError((uint64_t)"storeUCRT", 882, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v34, CFSTR("Failed to commit UIK."));

      v11 = 0;
      v14 = 0;
      goto LABEL_46;
    }
    v30 = v34;
  }
  v46 = v30;
  v35 = security_delete_legacy_uik(&v46);
  v12 = (NSError *)v46;

  if ((v35 & 1) != 0)
  {
    v36 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
    v11 = objc_msgSend(v36, "copyAnswer:", CFSTR("BuildVersion"));

    v14 = (uint64_t)isNSString(v11);
    if (v14)
    {
      v14 = 1;
      data_ark_set(v44, 0, CFSTR("LastActivated"), v11, 1);
      data_ark_set(v44, 0, CFSTR("ActivationState"), CFSTR("Activated"), 1);
      goto LABEL_46;
    }
    v42 = createMobileActivationError((uint64_t)"storeUCRT", 896, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve build version."));

  }
  else
  {
    v42 = createMobileActivationError((uint64_t)"storeUCRT", 889, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v12, CFSTR("Failed to delete legacy UIK."));

    v11 = 0;
    v14 = 0;
  }
  v12 = v42;
LABEL_46:
  if (v12)
  {
    v43 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
    -[NSFileManager removeItemAtPath:error:](v43, "removeItemAtPath:error:", v15, 0);

  }
LABEL_33:
  if (a4 && (v14 & 1) == 0)
    *a4 = objc_retainAutorelease(v12);
  if (v16)
    CFRelease(v16);

  return v14;
}

uint64_t verify_ucrt(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  unsigned int v11;
  unsigned int v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  int v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  NSError *v25;
  const __CFData *v26;
  SecCertificateRef v27;
  const __CFData *v28;
  __SecCertificate *v29;
  NSError *v30;
  id v31;
  id v32;
  id v33;
  NSError *v34;
  NSError *v35;
  id v36;
  uint64_t v37;
  NSError *MobileActivationError;
  NSError *v39;
  char v40;
  id v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  unsigned __int8 v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  unsigned __int8 v56;
  id v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  unsigned __int8 v62;
  uint64_t v63;
  __SecCertificate *v64;
  __SecCertificate *v65;
  SecCertificateRef v66;
  id v68;
  id v69;
  id v70;
  id v71;
  void *v72;
  unsigned __int8 v73;
  id v74;
  id v75;
  id v76;
  id v77;
  void *v78;
  unsigned __int8 v79;
  id v80;
  id v81;
  id v82;
  void *v83;
  unsigned __int8 v84;
  id v85;
  id v86;
  void *v87;
  unsigned __int8 v88;
  unsigned int v89;
  NSError *v90;
  _QWORD *v91;
  id v92;
  id v93;
  SecCertificateRef cf;
  id v95;
  id v96;
  id v97;
  SecCertificateRef v98;
  id v99;
  id v100;
  id v101;
  id v102;
  unsigned int v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  __SecCertificate *v110;
  __SecCertificate *v111;
  NSError *v112;
  NSError *v113;
  NSError *v114;
  NSError *v115;
  NSError *v116;
  NSError *v117;
  NSError *v118;
  NSError *v119;
  NSError *v120;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  v91 = a3;
  if (v6)
  {
    v8 = objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("UseEnhancedValidation"));
    v9 = isNSNumber(v8);

    if (v9)
    {
      v10 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("UseEnhancedValidation"));
      v11 = objc_msgSend(v10, "BOOLValue");

    }
    else
    {
      v11 = 0;
    }
    v13 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("UseEnhancedValidationWithVersionCheck"));
    v14 = isNSNumber(v13);

    if (v14)
    {
      v15 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("UseEnhancedValidationWithVersionCheck"));
      v12 = objc_msgSend(v15, "BOOLValue");

    }
    else
    {
      v12 = 0;
    }
    v16 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("ServerResponseDate"));
    v17 = isNSDate(v16);

    if (v17)
    {
      v109 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("ServerResponseDate"));
      v18 = 1;
      goto LABEL_13;
    }
    v109 = 0;
  }
  else
  {
    v109 = 0;
    v11 = 0;
    v12 = 0;
  }
  v18 = 0;
LABEL_13:
  if (is_internal_build())
  {
    v19 = objc_alloc((Class)NSUserDefaults);
    v20 = objc_msgSend(v19, "persistentDomainForName:", CFSTR("com.apple.mobileactivationd"));

    v21 = objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("UseQACertificates"));
    v22 = isNSNumber(v21);

    if (v22)
    {
      v23 = objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("UseQACertificates"));
      LODWORD(v22) = objc_msgSend(v23, "BOOLValue");

    }
  }
  else
  {
    v20 = 0;
    LODWORD(v22) = 0;
  }
  v120 = 0;
  v24 = lockcrypto_decode_pems(v5, "CERTIFICATE", &v120);
  v25 = v120;
  v100 = v20;
  v101 = v5;
  v99 = v24;
  if (!v24)
  {
    v30 = createMobileActivationError((uint64_t)"verify_ucrt", 3151, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v25, CFSTR("Failed to query certificate(s) from pem data."));
    v98 = 0;
    v110 = 0;
    v111 = 0;
    cf = 0;
LABEL_23:
    v96 = 0;
    v97 = 0;
    v92 = 0;
    v93 = 0;
    v102 = 0;
    v104 = 0;
    v31 = 0;
    v32 = 0;
    v95 = 0;
    v107 = 0;
    v108 = 0;
    v105 = 0;
    v106 = 0;
LABEL_24:
    v33 = 0;
    v27 = 0;
    goto LABEL_59;
  }
  v103 = v11;
  v89 = v12;
  v26 = (const __CFData *)objc_msgSend(v24, "objectAtIndexedSubscript:", 0);
  v27 = SecCertificateCreateWithData(kCFAllocatorDefault, v26);

  v111 = v27;
  if (!v27)
  {
    v30 = createMobileActivationError((uint64_t)"verify_ucrt", 3157, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v25, CFSTR("Failed to create certificate from pem data."));
    v98 = 0;
    v111 = 0;
    goto LABEL_54;
  }
  if ((unint64_t)objc_msgSend(v24, "count") >= 2)
  {
    v28 = (const __CFData *)objc_msgSend(v24, "objectAtIndexedSubscript:", 1);
    v27 = SecCertificateCreateWithData(kCFAllocatorDefault, v28);

    v110 = v27;
    if (v27)
    {
      v29 = 0;
      goto LABEL_29;
    }
    v30 = createMobileActivationError((uint64_t)"verify_ucrt", 3168, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v25, CFSTR("Failed to create intermediate certificate from pem data."));
    v98 = 0;
LABEL_54:
    v110 = 0;
LABEL_55:
    v93 = 0;
    cf = 0;
    v96 = 0;
    v97 = 0;
    v92 = 0;
    v102 = 0;
    v104 = 0;
    v24 = 0;
    v31 = 0;
    v32 = 0;
    v95 = 0;
    v107 = 0;
    v108 = 0;
    v105 = 0;
    v106 = 0;
    v33 = 0;
    goto LABEL_59;
  }
  v119 = v25;
  v24 = copyRootCertificate(9, (int)v22, &v119);
  v34 = v119;

  if (!v24)
  {
    v30 = createMobileActivationError((uint64_t)"verify_ucrt", 3178, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v34, CFSTR("Failed to load UCRT intermediate CA certificate."));
    v97 = 0;
    v98 = 0;
    v110 = 0;
    v93 = 0;
    cf = 0;
    v96 = 0;
    v92 = 0;
    v102 = 0;
    v104 = 0;
LABEL_35:
    v31 = 0;
    v32 = 0;
    v95 = 0;
    v107 = 0;
    v108 = 0;
    v105 = 0;
    v106 = 0;
    v33 = 0;
    v27 = 0;
    v25 = v34;
    goto LABEL_59;
  }
  v118 = v34;
  v27 = lockcrypto_cert_from_pem_data(v24, &v118);
  v25 = v118;

  v110 = v27;
  if (!v27)
  {
    v98 = (SecCertificateRef)v24;
    v30 = createMobileActivationError((uint64_t)"verify_ucrt", 3184, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v25, CFSTR("Failed to create certificate from pem data."));
    goto LABEL_54;
  }
  v29 = (__SecCertificate *)v24;
LABEL_29:
  v35 = v25;
  v117 = v25;
  v36 = lockcrypto_extract_public_key_size(v111, &v117);
  v25 = v117;

  if (!(_DWORD)v36)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"verify_ucrt", 3193, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v25, CFSTR("Failed to query UCRT public key size."));
LABEL_58:
    v30 = MobileActivationError;
    v93 = 0;
    cf = 0;
    v96 = 0;
    v97 = 0;
    v92 = 0;
    v102 = 0;
    v104 = 0;
    v24 = 0;
    v31 = 0;
    v32 = 0;
    v95 = 0;
    v107 = 0;
    v108 = 0;
    v105 = 0;
    v106 = 0;
    v33 = 0;
    v27 = 0;
    v98 = v29;
    goto LABEL_59;
  }
  if ((_DWORD)v36 == P256_PUBKEY_BYTES_LEN)
  {
    v37 = 7;
    goto LABEL_38;
  }
  if ((_DWORD)v36 != P384_PUBKEY_BYTES_LEN)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"verify_ucrt", 3202, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid key size: %d"), v36);
    goto LABEL_58;
  }
  v37 = 8;
LABEL_38:
  v116 = v25;
  v27 = (SecCertificateRef)copyRootCertificate(v37, (int)v22, &v116);
  v39 = v116;

  if (!v27)
  {
    v30 = createMobileActivationError((uint64_t)"verify_ucrt", 3208, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v39, CFSTR("Failed to load UCRT root CA certificate."));
    v97 = 0;
    v98 = 0;
    v93 = 0;
    cf = 0;
    v95 = 0;
    v96 = 0;
    v92 = 0;
    v102 = 0;
    v104 = 0;
    v24 = 0;
    v31 = 0;
    v32 = 0;
    v107 = 0;
    v108 = 0;
    v105 = 0;
    v106 = 0;
    v33 = 0;
    v25 = v39;
    goto LABEL_59;
  }
  v115 = v39;
  v98 = v27;
  v27 = lockcrypto_cert_from_pem_data(v27, &v115);
  v25 = v115;

  if (!v27)
  {
    v30 = createMobileActivationError((uint64_t)"verify_ucrt", 3214, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v25, CFSTR("Failed to create certificate from pem data."));
    goto LABEL_55;
  }
  v114 = v25;
  cf = v27;
  v40 = evaluateUCRTTrustWithCerts(v111, v110, v27, v18, v109, &v114);
  v34 = v114;

  if ((v40 & 1) == 0)
  {
    v30 = createMobileActivationError((uint64_t)"verify_ucrt", 3221, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v34, CFSTR("Failed to verify UCRT."));
    v96 = 0;
    v97 = 0;
    v92 = 0;
    v93 = 0;
    v102 = 0;
    v104 = 0;
    v24 = 0;
    goto LABEL_35;
  }
  v113 = v34;
  v24 = lockcrypto_query_certificate_properties((uint64_t)v111, CFSTR("1.2.840.113635.100.10.1"), &v113);
  v25 = v113;

  if (!v24)
  {
    v30 = createMobileActivationError((uint64_t)"verify_ucrt", 3233, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v25, CFSTR("Failed to query UCRT device identifiers."));
    goto LABEL_23;
  }
  v41 = objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("srnm"));
  v108 = objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("udid"));
  v107 = objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("meid"));
  v106 = objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("imei"));
  v105 = objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("ime2"));
  v42 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v43 = objc_msgSend(v42, "copyAnswer:", CFSTR("SerialNumber"));

  v44 = isNSString(v41);
  v96 = v43;
  v97 = v24;
  v95 = v41;
  if (!v44)
    goto LABEL_72;
  v45 = v44;
  v46 = isNSString(v43);
  if (!v46)
  {

    goto LABEL_72;
  }
  v47 = v46;
  v48 = objc_msgSend(v43, "isEqualToString:", v41);

  if ((v48 & 1) == 0)
  {
LABEL_72:
    v30 = createMobileActivationError((uint64_t)"verify_ucrt", 3245, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid Serial."));
    v93 = 0;
LABEL_73:
    v92 = 0;
    goto LABEL_74;
  }
  v49 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v50 = objc_msgSend(v49, "copyAnswer:", CFSTR("UniqueDeviceID"));

  v51 = isNSString(v108);
  v93 = v50;
  if (!v51)
    goto LABEL_79;
  v52 = v51;
  v53 = isNSString(v50);
  if (!v53)
  {

    goto LABEL_79;
  }
  v54 = v50;
  v55 = v53;
  v56 = objc_msgSend(v54, "isEqualToString:", v108);

  if ((v56 & 1) == 0)
  {
LABEL_79:
    v30 = createMobileActivationError((uint64_t)"verify_ucrt", 3251, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid UDID."));
    goto LABEL_73;
  }
  if ((v103 | v89) != 1)
  {
    v92 = 0;
    v102 = 0;
    v104 = 0;
LABEL_81:
    v24 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v27 = 0;
    v63 = 1;
    v30 = v25;
    goto LABEL_82;
  }
  v57 = isNSString(v107);

  if (v57)
  {
    v58 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
    v59 = objc_msgSend(v58, "copyAnswer:", CFSTR("MobileEquipmentIdentifier"));

    v60 = isNSString(v59);
    if (!v60
      || (v61 = v60,
          v62 = objc_msgSend(v59, "isEqualToString:", v107),
          v61,
          (v62 & 1) == 0))
    {
      v92 = v59;
      v30 = createMobileActivationError((uint64_t)"verify_ucrt", 3259, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid MEID."));
LABEL_74:
      v104 = 0;
LABEL_75:
      v102 = 0;
LABEL_76:
      v24 = 0;
LABEL_77:
      v31 = 0;
      v32 = 0;
      goto LABEL_24;
    }
  }
  else
  {
    v59 = 0;
  }
  v68 = isNSString(v106);

  v92 = v59;
  if (v68)
  {
    v69 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
    v70 = objc_msgSend(v69, "copyAnswer:", CFSTR("InternationalMobileEquipmentIdentity"));

    v104 = v70;
    v71 = isNSString(v70);
    if (!v71
      || (v72 = v71,
          v73 = objc_msgSend(v70, "isEqualToString:", v106),
          v72,
          (v73 & 1) == 0))
    {
      v30 = createMobileActivationError((uint64_t)"verify_ucrt", 3267, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid IMEI."));
      goto LABEL_75;
    }
  }
  else
  {
    v104 = 0;
  }
  v74 = isNSString(v105);

  if (v74)
  {
    v75 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
    v76 = objc_msgSend(v75, "copyAnswer:", CFSTR("xRyzf9zFE/ycr/wJPweZvQ"));

    v102 = v76;
    v77 = isNSString(v76);
    if (!v77
      || (v78 = v77,
          v79 = objc_msgSend(v76, "isEqualToString:", v105),
          v78,
          (v79 & 1) == 0))
    {
      v30 = createMobileActivationError((uint64_t)"verify_ucrt", 3275, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid IMEI2."));
      goto LABEL_76;
    }
  }
  else
  {
    v102 = 0;
  }
  if (!v89)
    goto LABEL_81;
  v112 = v25;
  v24 = lockcrypto_query_certificate_properties((uint64_t)v111, CFSTR("1.2.840.113635.100.8.7"), &v112);
  v90 = v112;

  if (!v24)
  {
    v25 = v90;
    v30 = createMobileActivationError((uint64_t)"verify_ucrt", 3286, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v90, CFSTR("Failed to query UCRT device OS information."));
    goto LABEL_77;
  }
  v33 = objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("1400"));
  v27 = (SecCertificateRef)objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("1403"));
  v80 = isNSString(v33);

  if (!v80)
  {
    v31 = 0;
LABEL_102:
    v32 = isNSString(v27);

    if (v32)
    {
      v85 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
      v32 = objc_msgSend(v85, "copyAnswer:", CFSTR("BuildVersion"));

      v86 = isNSString(v32);
      if (!v86
        || (v87 = v86,
            v88 = objc_msgSend(v32, "isEqualToString:", v27),
            v87,
            (v88 & 1) == 0))
      {
        v30 = createMobileActivationError((uint64_t)"verify_ucrt", 3304, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid BuildVersion."));
        goto LABEL_107;
      }
    }
    v63 = 1;
    v30 = v90;
LABEL_82:
    v65 = v110;
    v64 = v111;
    v66 = cf;
LABEL_62:
    CFRelease(v64);
    goto LABEL_63;
  }
  v81 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v31 = objc_msgSend(v81, "copyAnswer:", CFSTR("ProductVersion"));

  v82 = isNSString(v31);
  if (v82)
  {
    v83 = v82;
    v84 = objc_msgSend(v31, "isEqualToString:", v33);

    if ((v84 & 1) != 0)
      goto LABEL_102;
  }
  v30 = createMobileActivationError((uint64_t)"verify_ucrt", 3296, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid ProductVersion."));
  v32 = 0;
LABEL_107:
  v25 = v90;
LABEL_59:

  if (v91)
    *v91 = objc_retainAutorelease(v30);
  v63 = 0;
  v65 = v110;
  v64 = v111;
  v66 = cf;
  if (v111)
    goto LABEL_62;
LABEL_63:
  if (v65)
    CFRelease(v65);
  if (v66)
    CFRelease(v66);

  return v63;
}

SecCertificateRef copyUCRT(void *a1, NSError **a2)
{
  id v3;
  __CFString *v4;
  id v5;
  id v6;
  NSFileManager *v7;
  unsigned __int8 v8;
  id v9;
  void *v10;
  id v11;
  NSError *v12;
  const __CFData *v13;
  SecCertificateRef v14;
  NSError *v15;
  NSError *MobileActivationError;
  NSError *v17;
  id v19;

  v3 = data_ark_copy(a1, 0, CFSTR("ActivationState"));
  v4 = (__CFString *)isNSString(v3);

  if (!v4)
    v4 = CFSTR("Unactivated");
  if ((-[__CFString isEqualToString:](v4, "isEqualToString:", CFSTR("Activated")) & 1) == 0)
  {
    v12 = createMobileActivationError((uint64_t)"copyUCRT", 940, CFSTR("com.apple.MobileActivation.ErrorDomain"), -8, 0, CFSTR("Device is not activated (%@)."), v4);
    v10 = 0;
    v6 = 0;
    goto LABEL_14;
  }
  v5 = copy_ucrt_path();
  v6 = objc_msgSend(v5, "stringByAppendingPathComponent:", CFSTR("ucrt.pem"));

  if (!v6)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"copyUCRT", 946, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create UCRT file path."));
LABEL_13:
    v12 = MobileActivationError;
    v10 = 0;
    goto LABEL_14;
  }
  v7 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v8 = -[NSFileManager fileExistsAtPath:](v7, "fileExistsAtPath:", v6);

  if ((v8 & 1) == 0)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"copyUCRT", 951, CFSTR("com.apple.MobileActivation.ErrorDomain"), -4, 0, CFSTR("UCRT is unavailable."));
    goto LABEL_13;
  }
  v9 = objc_msgSend(objc_alloc((Class)NSData), "initWithContentsOfFile:", v6);
  v10 = v9;
  if (!v9)
  {
    v12 = createMobileActivationError((uint64_t)"copyUCRT", 957, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to encode UCRT."));
LABEL_14:
    v11 = 0;
    if (!a2)
    {
LABEL_19:
      v14 = 0;
      goto LABEL_20;
    }
    goto LABEL_15;
  }
  v19 = 0;
  v11 = lockcrypto_decode_pems(v9, "CERTIFICATE", (NSError **)&v19);
  v12 = (NSError *)v19;
  if (!v11)
  {
    v15 = createMobileActivationError((uint64_t)"copyUCRT", 963, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v12, CFSTR("Failed to query certificate(s) from pem data."));
LABEL_18:
    v17 = v15;

    v12 = v17;
    if (!a2)
      goto LABEL_19;
LABEL_15:
    v12 = objc_retainAutorelease(v12);
    v14 = 0;
    *a2 = v12;
    goto LABEL_20;
  }
  v13 = (const __CFData *)objc_msgSend(v11, "objectAtIndexedSubscript:", 0);
  v14 = SecCertificateCreateWithData(kCFAllocatorDefault, v13);

  if (!v14)
  {
    v15 = createMobileActivationError((uint64_t)"copyUCRT", 969, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create certificate from pem data."));
    goto LABEL_18;
  }
LABEL_20:

  return v14;
}

NSDictionary *create_ucrt_info(void *a1, void *a2, _QWORD *a3)
{
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  NSData *v9;
  NSError *v10;
  __SecKey *v11;
  id v12;
  id v13;
  NSMutableDictionary *v14;
  uint64_t v15;
  id v16;
  SecAccessControlRef v17;
  __SecKey *v18;
  id v19;
  id v20;
  __SecKey *v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  _BOOL8 v27;
  uint64_t v28;
  id v29;
  NSDictionary *v30;
  NSDictionary *v31;
  void *v33;
  NSDictionary *v34;
  CFDataRef v35;
  NSError *v36;
  SecAccessControlRef cf;
  __SecKey *v38;
  __SecKey *v39;
  id v40;
  id v41;
  id v42;
  __SecKey *v43;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  CFErrorRef error;
  _QWORD v54[3];
  _QWORD v55[3];
  _QWORD v56[3];
  _QWORD v57[3];

  v4 = a1;
  v5 = a2;
  error = 0;
  v41 = v5;
  v42 = v4;
  if (!v4)
  {
    v10 = createMobileActivationError((uint64_t)"create_ucrt_info", 1023, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v8 = 0;
    v9 = 0;
    v11 = 0;
    v43 = 0;
    v40 = 0;
LABEL_25:
    v21 = 0;
    v18 = 0;
    v17 = 0;
LABEL_26:
    v14 = 0;
    goto LABEL_27;
  }
  v6 = v5;
  if (v5)
  {
    v7 = objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("UseCommittedUIK"));
    v8 = v7;
    if (v7)
    {
      v9 = (NSData *)isNSNumber(v7);

      if (!v9)
      {
        v10 = createMobileActivationError((uint64_t)"create_ucrt_info", 1038, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid option (%@)."), CFSTR("UseCommittedUIK"));
        v11 = 0;
        v43 = 0;
        v40 = 0;
LABEL_24:
        v4 = 0;
        goto LABEL_25;
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v12 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v13 = objc_msgSend(v12, "copyAnswer:", CFSTR("HasPKA"));

  v14 = (NSMutableDictionary *)isNSNumber(v13);
  v40 = v13;
  if (!v14)
  {
    v10 = createMobileActivationError((uint64_t)"create_ucrt_info", 1045, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve PKA state."));
    v9 = 0;
    v11 = 0;
    v43 = 0;
    v4 = 0;
    v21 = 0;
    v18 = 0;
    v17 = 0;
LABEL_27:
    v30 = 0;
    goto LABEL_28;
  }
  if (objc_msgSend(v8, "BOOLValue"))
    v15 = 2;
  else
    v15 = 3;
  v52 = 0;
  v11 = security_copy_system_key(v15, 0, &v52);
  v16 = v52;
  if (!v11)
  {
    v10 = createMobileActivationError((uint64_t)"create_ucrt_info", 1054, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v16, CFSTR("Failed to copy UIK."));

    v9 = 0;
    v43 = 0;
    goto LABEL_24;
  }
  v17 = SecAccessControlCreateWithFlags(0, kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate, 0x40000000uLL, &error);
  if (!v17)
  {
    v10 = createMobileActivationError((uint64_t)"create_ucrt_info", 1063, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to create access control."));

    CFRelease(v11);
    v9 = 0;
    v11 = 0;
    v43 = 0;
    v4 = 0;
    v21 = 0;
    v18 = 0;
    goto LABEL_26;
  }
  v51 = v16;
  v18 = (__SecKey *)createReferenceKeyBlob(v17, (char)objc_msgSend(v13, "BOOLValue"), 0, &v51);
  v19 = v51;

  cf = v17;
  v38 = v11;
  v39 = v18;
  if (!v18)
  {
    v10 = createMobileActivationError((uint64_t)"create_ucrt_info", 1069, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v19, CFSTR("Failed to create ref key."));
    v33 = v19;
LABEL_37:

    v30 = 0;
    v14 = 0;
    v17 = 0;
    v21 = 0;
    v4 = 0;
    v43 = 0;
    goto LABEL_42;
  }
  v50 = v19;
  v18 = (__SecKey *)security_create_attestation((uint64_t)v18, (uint64_t)v11, (NSError **)&v50);
  v20 = v50;

  if (!v18)
  {
    v10 = createMobileActivationError((uint64_t)"create_ucrt_info", 1077, CFSTR("com.apple.MobileActivation.ErrorDomain"), -11, v20, CFSTR("Failed to attest ref key to UIK."));
    v33 = v20;
    goto LABEL_37;
  }
  v49 = v20;
  v21 = copy_uik_certificate_info(v6, &v49);
  v22 = v49;

  v43 = v18;
  if (!v21)
  {
    v10 = createMobileActivationError((uint64_t)"create_ucrt_info", 1112, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v22, CFSTR("Failed to copy UIK certification info."));

    v30 = 0;
    v14 = 0;
    v17 = 0;
LABEL_40:
    v18 = 0;
LABEL_41:
    v4 = 0;
    goto LABEL_42;
  }
  v48 = v22;
  v17 = (SecAccessControlRef)copy_device_id_info(v23, (NSError **)&v48);
  v24 = v48;

  if (!v17)
  {
    v10 = createMobileActivationError((uint64_t)"create_ucrt_info", 1120, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v24, CFSTR("Failed to copy device id info."));

    v30 = 0;
    v14 = 0;
    goto LABEL_40;
  }
  v47 = v24;
  v18 = (__SecKey *)copy_device_info(v25, (NSError **)&v47);
  v26 = v47;

  if (!v18)
  {
    v10 = createMobileActivationError((uint64_t)"create_ucrt_info", 1128, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v26, CFSTR("Failed to copy device info."));

    v30 = 0;
    v14 = 0;
    goto LABEL_41;
  }
  v27 = is_product_cellular();
  if (v27)
  {
    v46 = v26;
    v4 = copy_baseband_request_info(v27, v28, (NSError **)&v46);
    v29 = v46;

    if (v4)
    {
      v26 = v29;
      goto LABEL_47;
    }
    v10 = createMobileActivationError((uint64_t)"create_ucrt_info", 1139, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v29, CFSTR("Failed to copy baseband request info."));

    v30 = 0;
    v14 = 0;
LABEL_42:
    v11 = 0;
    v9 = 0;
    goto LABEL_43;
  }
  v4 = 0;
LABEL_47:
  v56[0] = CFSTR("DeviceID");
  v56[1] = CFSTR("DeviceInfo");
  v57[0] = v17;
  v57[1] = v18;
  v56[2] = CFSTR("UIKCertification");
  v57[2] = v21;
  v34 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v57, v56, 3);
  v14 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v34);

  if (v4)
    -[NSMutableDictionary setObject:forKeyedSubscript:](v14, "setObject:forKeyedSubscript:", v4, CFSTR("BasebandRequestInfo"));
  v45 = 0;
  v9 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v14, 100, 0, &v45);
  v10 = (NSError *)v45;

  if (v9)
  {
    v35 = SecKeyCreateSignature(v39, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, (CFDataRef)v9, &error);
    v11 = v35;
    if (v35)
    {
      v54[0] = CFSTR("ActivationInfoXML");
      v54[1] = CFSTR("RKCertification");
      v55[0] = v9;
      v55[1] = v43;
      v54[2] = CFSTR("RKSignature");
      v55[2] = v35;
      v30 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v55, v54, 3);
      goto LABEL_43;
    }
    v36 = createMobileActivationError((uint64_t)"create_ucrt_info", 1180, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to sign activation data with ref key."));

    v30 = 0;
  }
  else
  {
    v36 = createMobileActivationError((uint64_t)"create_ucrt_info", 1171, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v10, CFSTR("Could not convert dictionary to xml data."));

    v30 = 0;
    v11 = 0;
  }
  v10 = v36;
LABEL_43:
  CFRelease(cf);
  CFRelease(v38);
  if (v39)
    CFRelease(v39);
LABEL_28:
  if (error)
    CFRelease(error);
  error = 0;
  if (a3 && !v30)
    *a3 = objc_retainAutorelease(v10);
  v31 = v30;

  return v31;
}

__SecKey *copy_uik_certificate_info(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  __SecKey *v7;
  NSError *v8;
  id v9;
  id v10;
  __SecKey *v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  NSDictionary *v24;
  NSError *v25;
  __SecKey *v26;
  NSError *MobileActivationError;
  _QWORD *v29;
  __SecKey *v30;
  id v31;
  id v32;
  id v33;
  _QWORD v34[5];
  _QWORD v35[5];

  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    v6 = 0;
LABEL_6:
    if (objc_msgSend(v6, "BOOLValue"))
      v14 = 2;
    else
      v14 = 3;
    v33 = 0;
    v11 = security_copy_system_key(v14, 0, &v33);
    v15 = v33;
    v16 = v15;
    if (!v11)
    {
      v8 = createMobileActivationError((uint64_t)"copy_uik_certificate_info", 2719, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v15, CFSTR("Failed to copy UIK."));

      v9 = 0;
      v31 = 0;
      v10 = 0;
      v12 = 0;
      v13 = 0;
      v7 = 0;
      goto LABEL_23;
    }
    v32 = v15;
    v7 = (__SecKey *)security_create_system_key_attestation((uint64_t)v11, 0, 0, &v32);
    v8 = (NSError *)v32;

    v29 = a2;
    v30 = v7;
    if (v7)
    {
      v17 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
      v18 = objc_msgSend(v17, "copyAnswer:", CFSTR("BluetoothAddress"));

      v31 = v18;
      v12 = isNSString(v18);

      if (v12)
      {
        v19 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
        v9 = objc_msgSend(v19, "copyAnswer:", CFSTR("WifiAddress"));

        v12 = isNSString(v9);
        if (v12)
        {
          v20 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
          v10 = objc_msgSend(v20, "copyAnswer:", CFSTR("EthernetMacAddress"));

          v12 = isNSString(v10);
          if (v12)
          {
            v21 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
            v13 = objc_msgSend(v21, "copyAnswer:", CFSTR("BoardId"));

            v12 = isNSNumber(v13);
            if (v12)
            {
              v22 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
              v12 = objc_msgSend(v22, "copyAnswer:", CFSTR("ChipID"));

              v23 = isNSNumber(v12);
              if (v23)
              {
                v34[0] = CFSTR("UIKCertification");
                v34[1] = CFSTR("BluetoothAddress");
                v35[0] = v7;
                v35[1] = v31;
                v34[2] = CFSTR("WifiAddress");
                v34[3] = CFSTR("BoardId");
                v35[2] = v9;
                v35[3] = v13;
                v34[4] = CFSTR("ChipID");
                v35[4] = v12;
                v24 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v35, v34, 5);
                v7 = (__SecKey *)-[NSDictionary mutableCopy](v24, "mutableCopy");

                -[__SecKey setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v10, CFSTR("EthernetMacAddress"));
LABEL_22:
                CFRelease(v11);
                a2 = v29;
                v11 = v30;
                goto LABEL_23;
              }
              MobileActivationError = createMobileActivationError((uint64_t)"copy_uik_certificate_info", 2775, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve chip id."));
            }
            else
            {
              MobileActivationError = createMobileActivationError((uint64_t)"copy_uik_certificate_info", 2769, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve board id."));
            }
            v25 = MobileActivationError;

            v7 = 0;
          }
          else
          {
            v25 = createMobileActivationError((uint64_t)"copy_uik_certificate_info", 2761, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve ethernet mac address."));

            v7 = 0;
            v13 = 0;
          }
        }
        else
        {
          v25 = createMobileActivationError((uint64_t)"copy_uik_certificate_info", 2751, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve WiFi address."));

          v7 = 0;
          v13 = 0;
          v10 = 0;
        }
LABEL_21:
        v8 = v25;
        goto LABEL_22;
      }
      v25 = createMobileActivationError((uint64_t)"copy_uik_certificate_info", 2745, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve bluetooth address."));

      v7 = 0;
      v13 = 0;
      v10 = 0;
    }
    else
    {
      v25 = createMobileActivationError((uint64_t)"copy_uik_certificate_info", 2727, CFSTR("com.apple.MobileActivation.ErrorDomain"), -11, v8, CFSTR("Failed to attest UIK to SIK."));

      v13 = 0;
      v12 = 0;
      v10 = 0;
      v31 = 0;
    }
    v9 = 0;
    goto LABEL_21;
  }
  v5 = objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("UseCommittedUIK"));
  v6 = v5;
  if (!v5)
    goto LABEL_6;
  v7 = (__SecKey *)isNSNumber(v5);

  if (v7)
    goto LABEL_6;
  v8 = createMobileActivationError((uint64_t)"copy_uik_certificate_info", 2709, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid option (%@)."), CFSTR("UseCommittedUIK"));
  v9 = 0;
  v31 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
LABEL_23:
  if (a2 && !v7)
    *a2 = objc_retainAutorelease(v8);
  v26 = v7;

  return v26;
}

id copy_device_id_info(uint64_t a1, NSError **a2)
{
  id v3;
  id v4;
  id v5;
  BOOL v6;
  NSError *v7;
  id v8;
  id v10;

  v3 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v10 = 0;
  v4 = objc_msgSend(v3, "copyDeviceIDInfo:", &v10);
  v5 = v10;

  if (v4)
    v6 = v5 == 0;
  else
    v6 = 0;
  if (v6)
  {
    v8 = v4;
    v7 = 0;
  }
  else
  {
    v7 = createMobileActivationError((uint64_t)"copy_device_id_info", 2641, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy device ID info: %@"), v5);
    if (a2)
    {
      v7 = objc_retainAutorelease(v7);
      v8 = 0;
      *a2 = v7;
    }
    else
    {
      v8 = 0;
    }
  }

  return v8;
}

id copy_device_info(uint64_t a1, NSError **a2)
{
  id v3;
  id v4;
  id v5;
  BOOL v6;
  NSError *v7;
  id v8;
  id v10;

  v3 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v10 = 0;
  v4 = objc_msgSend(v3, "copyDeviceInfo:", &v10);
  v5 = v10;

  if (v4)
    v6 = v5 == 0;
  else
    v6 = 0;
  if (v6)
  {
    v8 = v4;
    v7 = 0;
  }
  else
  {
    v7 = createMobileActivationError((uint64_t)"copy_device_info", 2666, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy device info: %@"), v5);
    if (a2)
    {
      v7 = objc_retainAutorelease(v7);
      v8 = 0;
      *a2 = v7;
    }
    else
    {
      v8 = 0;
    }
  }

  return v8;
}

id copy_baseband_request_info(uint64_t a1, uint64_t a2, NSError **a3)
{
  id v4;
  MATelephonyInfo *v5;
  id v6;
  id v7;
  NSError *v8;
  id v9;
  id v10;
  NSMutableDictionary *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  NSError *MobileActivationError;
  NSError *v17;
  id v18;
  id v20;
  id v21;
  id v22;

  if (!is_product_cellular())
  {
    v8 = createMobileActivationError((uint64_t)"copy_baseband_request_info", 1972, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("BasebandInfo does not exist for non cellular devices."));
    v4 = 0;
    goto LABEL_11;
  }
  v4 = objc_alloc_init((Class)NSMutableDictionary);
  if (!v4)
  {
    v8 = createMobileActivationError((uint64_t)"copy_baseband_request_info", 1978, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create BasebandRequestInfo dictionary."));
LABEL_11:
    v6 = 0;
    v7 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v5 = 0;
    if (!a3)
      goto LABEL_31;
    goto LABEL_22;
  }
  v5 = +[MATelephonyInfo sharedInstance](MATelephonyInfo, "sharedInstance");
  if (!v5)
  {
    v8 = createMobileActivationError((uint64_t)"copy_baseband_request_info", 1984, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy telephony instance."));
    v6 = 0;
    v7 = 0;
    v9 = 0;
LABEL_20:
    v10 = 0;
    goto LABEL_21;
  }
  objc_msgSend(v4, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("ActivationRequiresActivationTicket"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("SupportsPostponement"));
  v6 = -[MATelephonyInfo copyPhoneNumberWithSlotID:error:](v5, "copyPhoneNumberWithSlotID:error:", 1, 0);
  if (v6)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, CFSTR("PhoneNumber"));
  if (-[MATelephonyInfo dualSIMCapable](v5, "dualSIMCapable"))
  {
    v7 = -[MATelephonyInfo copyPhoneNumberWithSlotID:error:](v5, "copyPhoneNumberWithSlotID:error:", 2, 0);
    if (v7)
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, CFSTR("PhoneNumber2"));
  }
  else
  {
    v7 = 0;
  }
  v22 = 0;
  v9 = -[MATelephonyInfo copySIMStatusWithSlotID:error:](v5, "copySIMStatusWithSlotID:error:", 1, &v22);
  v12 = v22;
  if (!v9)
  {
    v8 = createMobileActivationError((uint64_t)"copy_baseband_request_info", 2008, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v12, CFSTR("Failed to retrieve SIM status."));

    goto LABEL_20;
  }
  if (-[MATelephonyInfo dualSIMCapable](v5, "dualSIMCapable"))
  {
    v21 = v12;
    v10 = -[MATelephonyInfo copySIMStatusWithSlotID:error:](v5, "copySIMStatusWithSlotID:error:", 2, &v21);
    v13 = v21;

    if (v10)
    {
      v12 = v13;
      goto LABEL_24;
    }
    v8 = createMobileActivationError((uint64_t)"copy_baseband_request_info", 2015, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v13, CFSTR("Failed to retrieve SIM status."));

LABEL_21:
    v11 = 0;
    if (!a3)
      goto LABEL_31;
    goto LABEL_22;
  }
  v10 = 0;
LABEL_24:
  v20 = v12;
  v11 = copy_postponement_info(&v20);
  v8 = (NSError *)v20;

  if (v11)
  {
    v15 = -[NSMutableDictionary objectForKey:](v11, "objectForKey:", CFSTR("InternationalMobileEquipmentIdentity"));

    if (v15)
    {
      -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v9, CFSTR("SIMStatus"));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v10, CFSTR("SIMStatus2"));
      -[NSMutableDictionary removeObjectForKey:](v11, "removeObjectForKey:", kCTPostponementStatus);
      -[NSMutableDictionary removeObjectForKey:](v11, "removeObjectForKey:", kCTPostponementStatusErrorReason);
      -[NSMutableDictionary removeObjectForKey:](v11, "removeObjectForKey:", kCTPostponementInfoUniqueID);
      objc_msgSend(v4, "addEntriesFromDictionary:", v11);
      v14 = v4;
      v4 = v14;
      goto LABEL_32;
    }
    MobileActivationError = createMobileActivationError((uint64_t)"copy_baseband_request_info", 2027, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Postponement info is missing required identifiers (%@ / %@) : %@"), v9, v10, CFSTR("InternationalMobileEquipmentIdentity"));
  }
  else
  {
    MobileActivationError = createMobileActivationError((uint64_t)"copy_baseband_request_info", 2022, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v8, CFSTR("Failed to retrieve postponement info (%@ / %@)."), v9, v10);
  }
  v17 = MobileActivationError;

  v8 = v17;
  if (!a3)
  {
LABEL_31:
    v14 = 0;
    goto LABEL_32;
  }
LABEL_22:
  v8 = objc_retainAutorelease(v8);
  v14 = 0;
  *a3 = v8;
LABEL_32:
  v18 = v14;

  return v18;
}

id copyUCRTVersionInformation(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  SecCertificateRef v5;
  NSError *v6;
  id v7;
  NSError *v8;
  id v9;
  id v10;
  id v11;
  int v12;
  NSError *v13;
  NSError *v14;
  id v15;
  NSError *v16;
  NSError *v17;
  _QWORD *v19;
  id v20;
  id v21;

  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    v14 = createMobileActivationError((uint64_t)"copyUCRTVersionInformation", 1262, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid input."));
    v15 = 0;
    v5 = 0;
    goto LABEL_14;
  }
  v20 = 0;
  v5 = copyUCRT(v3, (NSError **)&v20);
  v6 = (NSError *)v20;
  if (!v5)
  {
    v14 = createMobileActivationError((uint64_t)"copyUCRTVersionInformation", 1268, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v6, CFSTR("Failed to copy UCRT."));

    v15 = 0;
    goto LABEL_14;
  }
  v21 = 0;
  v7 = lockcrypto_query_certificate_properties((uint64_t)v5, CFSTR("1.2.840.113635.100.8.7"), &v21);
  v8 = (NSError *)v21;
  v19 = a2;
  if (!v7)
  {
    v16 = createAndLogError((uint64_t)"copy_ucrt_version_info", 122, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v8, CFSTR("Failed to query UCRT device OS information."));

    v10 = 0;
    v9 = 0;
    v8 = v16;
    goto LABEL_9;
  }
  v9 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("1400"));
  v10 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("1403"));
  v11 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v9, CFSTR("ProductVersion"));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v10, CFSTR("BuildVersion"));
  if (!v11)
  {
LABEL_9:
    v8 = objc_retainAutorelease(v8);
    v11 = 0;
    v12 = 1;
    v13 = v8;
    goto LABEL_10;
  }
  v12 = 0;
  v13 = v6;
LABEL_10:

  v14 = v13;
  if (v12)
  {
    v17 = createMobileActivationError((uint64_t)"copyUCRTVersionInformation", 1274, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v14, CFSTR("Failed to copy UCRT version info."));

    v15 = 0;
    v14 = v17;
  }
  else
  {
    v15 = v11;
  }
  a2 = v19;
LABEL_14:
  if (a2 && !v15)
    *a2 = objc_retainAutorelease(v14);
  if (v5)
    CFRelease(v5);

  return v15;
}

char *create_cert_request(void *a1, _QWORD *a2)
{
  id v3;
  NSObject *v4;
  NSUUID *v5;
  NSError *v6;
  NSError *v7;
  id v8;
  NSString *v9;
  char *v10;
  NSUUID *v12;
  NSString *v13;
  void *v14;
  void *v15;
  id *v16;
  id v17;
  id obj;
  _QWORD block[4];
  id v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  id v35;
  uint64_t v36;
  id *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t);
  id v41;

  v3 = a1;
  v36 = 0;
  v37 = (id *)&v36;
  v38 = 0x3032000000;
  v39 = __Block_byref_object_copy_;
  v40 = __Block_byref_object_dispose_;
  v41 = 0;
  v30 = 0;
  v31 = &v30;
  v32 = 0x3032000000;
  v33 = __Block_byref_object_copy_;
  v34 = __Block_byref_object_dispose_;
  v35 = 0;
  v24 = 0;
  v25 = &v24;
  v26 = 0x3032000000;
  v27 = __Block_byref_object_copy_;
  v28 = __Block_byref_object_dispose_;
  v29 = 0;
  if (create_cert_request_onceToken != -1)
    dispatch_once(&create_cert_request_onceToken, &__block_literal_global_127);
  v4 = create_cert_request_queue;
  if (!create_cert_request_queue)
  {
    v6 = createMobileActivationError((uint64_t)"create_cert_request", 1768, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create queue."));
LABEL_7:
    v7 = v6;
    v5 = 0;
LABEL_8:
    v8 = v37[5];
    v37[5] = v7;

    goto LABEL_9;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904;
  block[2] = __create_cert_request_block_invoke_2;
  block[3] = &__block_descriptor_64_e8_32s40r48r56r_e5_v8__0l;
  v21 = &v30;
  v20 = v3;
  v22 = &v24;
  v23 = &v36;
  dispatch_sync(v4, block);

  if (v37[5])
  {
    v5 = 0;
LABEL_9:
    v9 = 0;
    goto LABEL_10;
  }
  v12 = +[NSUUID UUID](NSUUID, "UUID");
  v5 = v12;
  if (!v12)
  {
    v6 = createMobileActivationError((uint64_t)"create_cert_request", 1808, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create UUID."));
    goto LABEL_7;
  }
  v13 = -[NSUUID UUIDString](v12, "UUIDString");
  v9 = v13;
  if (!v13)
  {
    v7 = createMobileActivationError((uint64_t)"create_cert_request", 1814, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create UUID string."));
    goto LABEL_8;
  }
  v14 = (void *)v31[5];
  v15 = (void *)v25[5];
  v16 = v37;
  obj = v37[5];
  v10 = lockcrypto_create_cert_request(v13, v14, v15, &obj);
  objc_storeStrong(v16 + 5, obj);
  if (v10)
    goto LABEL_12;
  v17 = createMobileActivationError((uint64_t)"create_cert_request", 1820, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v37[5], CFSTR("Failed to create cert request."));
LABEL_10:
  v10 = 0;
  if (a2)
    *a2 = objc_retainAutorelease(v37[5]);
LABEL_12:
  _Block_object_dispose(&v24, 8);

  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v36, 8);

  return v10;
}

void sub_10000BFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void __create_cert_request_block_invoke(id a1)
{
  NSObject *v1;
  dispatch_queue_t v2;
  void *v3;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = dispatch_queue_create("com.apple.mobileactivationd.fairplay", v1);
  v3 = (void *)create_cert_request_queue;
  create_cert_request_queue = (uint64_t)v2;

}

void __create_cert_request_block_invoke_2(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  NSError *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  id obj;

  v2 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("PublicKey"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("PrivateKey"));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  v8 = isNSData(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  if (!v8
    || (v9 = v8,
        v10 = isNSData(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40)),
        v10,
        v9,
        !v10))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = 0;

    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = 0;

    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v16 = *(void **)(v15 + 40);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v24 = *(id *)(v17 + 40);
    obj = v16;
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v23 = *(id *)(v18 + 40);
    v19 = lockcrypto_genenerate_keypair(1024, &obj, (char **)&v24, &v23);
    objc_storeStrong((id *)(v15 + 40), obj);
    objc_storeStrong((id *)(v17 + 40), v24);
    objc_storeStrong((id *)(v18 + 40), v23);
    if ((v19 & 1) != 0)
    {
      data_ark_set(*(void **)(a1 + 32), 0, CFSTR("PublicKey"), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), 0);
      data_ark_set(*(void **)(a1 + 32), 0, CFSTR("PrivateKey"), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), 0);
    }
    else
    {
      v20 = createMobileActivationError((uint64_t)"create_cert_request_block_invoke_2", 1782, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), CFSTR("Failed to generate public/or private key."));
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v22 = *(void **)(v21 + 40);
      *(_QWORD *)(v21 + 40) = v20;

    }
  }
}

void __copy_helper_block_e8_32s40r48r56r(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = *(id *)(a2 + 32);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 8);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
}

void __destroy_helper_block_e8_32s40r48r56r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 56), 8);
  _Block_object_dispose(*(const void **)(a1 + 48), 8);
  _Block_object_dispose(*(const void **)(a1 + 40), 8);

}

uint64_t deliver_baseband_ticket(int a1, id a2, void *a3, _QWORD *a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  const void *v18;
  unint64_t v19;
  NSError *v20;
  NSError *MobileActivationError;
  NSError *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v27;

  v6 = a2;
  v7 = a3;
  v8 = objc_alloc_init((Class)NSMutableDictionary);
  v27 = v7;
  if (!v6 || !v7)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"deliver_baseband_ticket", 1847, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
LABEL_20:
    v22 = MobileActivationError;
    v9 = 0;
    v18 = 0;
    v12 = 0;
    goto LABEL_21;
  }
  if ((objc_msgSend(v7, "isEqualToString:", CFSTR("Activated")) & 1) == 0
    && (objc_msgSend(v7, "isEqualToString:", CFSTR("FactoryActivated")) & 1) == 0)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"deliver_baseband_ticket", 1852, CFSTR("com.apple.MobileActivation.ErrorDomain"), -8, 0, CFSTR("Device is not activated: %@"), v7);
    goto LABEL_20;
  }
  v9 = objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("ActivationTicket"));
  v10 = isNSString(v9);

  if (!v10)
  {
    v11 = objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("WildcardTicket"));

    v9 = v11;
  }
  v12 = isNSString(v9);

  if (!v12)
  {
    v22 = createMobileActivationError((uint64_t)"deliver_baseband_ticket", 1865, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Account token missing activation ticket."));
    v18 = 0;
LABEL_21:
    v15 = 0;
    v13 = 0;
    goto LABEL_22;
  }
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v9, CFSTR("ActivationTicket"));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, CFSTR("ActivationState"));
  v13 = objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("PhoneNumberNotificationURL"));
  if (v13)
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v13, CFSTR("PhoneNumberNotificationURL"));
  v12 = objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("ActivityURL"));
  v14 = isNSString(v12);

  if (v14)
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v12, CFSTR("ActivityURL"));
  v15 = objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("PostponementInfo"));
  v16 = isNSDictionary(v15);

  if (v16)
    objc_msgSend(v8, "addEntriesFromDictionary:", v15);
  v17 = _CTServerConnectionCreate(kCFAllocatorDefault, 0, 0);
  v18 = (const void *)v17;
  if (v17)
  {
    v19 = _CTServerConnectionSetPostponementTicket(v17, v8);
    if (!HIDWORD(v19))
    {
      v23 = v8;
      v22 = 0;
      v24 = 1;
LABEL_25:
      CFRelease(v18);
      v25 = v24;
      goto LABEL_26;
    }
    v20 = createMobileActivationError((uint64_t)"deliver_baseband_ticket", 1895, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to issue baseband ticket: %d.%d"), v19, HIDWORD(v19));
  }
  else
  {
    v20 = createMobileActivationError((uint64_t)"deliver_baseband_ticket", 1889, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to connect to CommCenter."));
  }
  v22 = v20;
LABEL_22:
  v23 = v8;
  if (a4)
    *a4 = objc_retainAutorelease(v22);
  v24 = 0;
  v25 = 0;
  if (v18)
    goto LABEL_25;
LABEL_26:

  return v25;
}

NSMutableDictionary *copy_postponement_info(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  BOOL v5;
  NSError *MobileActivationError;
  NSError *v7;
  NSMutableDictionary *v8;
  void *v9;
  void *v10;
  NSError *v11;
  const void *Value;
  CFDictionaryRef theDict;

  theDict = 0;
  v2 = _CTServerConnectionCreate(kCFAllocatorDefault, 0, 0);
  v3 = (const void *)v2;
  if (!v2)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"copy_postponement_info", 1923, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to connect to CommCenter."));
LABEL_9:
    v7 = MobileActivationError;
    v8 = 0;
    v9 = 0;
    if (!a1)
      goto LABEL_20;
    goto LABEL_18;
  }
  v4 = _CTServerConnectionCopyPostponementStatus(v2, &theDict);
  if (HIDWORD(v4))
    v5 = 1;
  else
    v5 = theDict == 0;
  if (v5)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"copy_postponement_info", 1929, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy postponement status: %ld.%ld"), (int)v4, v4 >> 32);
    goto LABEL_9;
  }
  v10 = (id)CFDictionaryGetValue(theDict, kCTPostponementStatus);
  v9 = v10;
  if (!v10)
  {
    v11 = createMobileActivationError((uint64_t)"copy_postponement_info", 1935, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("No postponement status in postponement info."));
LABEL_15:
    v7 = v11;
    v8 = 0;
    if (!a1)
      goto LABEL_20;
    goto LABEL_18;
  }
  if (objc_msgSend(v10, "isEqualToString:", kCTPostponementStatusError))
  {
    Value = CFDictionaryGetValue(theDict, kCTPostponementStatusErrorReason);
    v11 = createMobileActivationError((uint64_t)"copy_postponement_info", 1940, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("CommCenter reported an error: %@"), Value);
    goto LABEL_15;
  }
  v8 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", theDict);
  v7 = 0;
  if (!a1)
    goto LABEL_20;
LABEL_18:
  if (!v8)
    *a1 = objc_retainAutorelease(v7);
LABEL_20:
  if (theDict)
    CFRelease(theDict);
  theDict = 0;
  if (v3)
    CFRelease(v3);

  return v8;
}

NSDictionary *create_activation_info(void *a1, void *a2, _QWORD *a3)
{
  id v4;
  id v5;
  id v6;
  void *v7;
  NSDictionary *v8;
  NSError *v9;
  NSMutableDictionary *v10;
  NSData *v11;
  __SecKey *v12;
  __SecKey *v13;
  char *v14;
  char *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  SecAccessControlRef v21;
  SecAccessControlRef v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  NSDictionary *v32;
  id v33;
  _BOOL8 v34;
  uint64_t v35;
  CFDataRef v36;
  NSDictionary *v37;
  void *v39;
  id v40;
  id v41;
  id v42;
  NSDictionary *v43;
  id v44;
  id v45;
  id v46;
  NSError *MobileActivationError;
  int v48;
  id v49;
  id v50;
  id v51;
  NSError *v52;
  id v53;
  void *v54;
  NSError *v55;
  SecAccessControlRef cf;
  NSMutableDictionary *v57;
  __SecKey *v58;
  id v59;
  id v60;
  id v61;
  id v62;
  __SecKey *v63;
  NSDictionary *v64;
  __SecKey *v65;
  id v66;
  id v67;
  id v68;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  CFErrorRef error;
  unsigned int v82;
  unsigned int v83;
  _QWORD v84[5];
  _QWORD v85[5];
  _QWORD v86[7];
  _QWORD v87[7];
  _BYTE v88[4096];
  _BYTE v89[264];

  v4 = a1;
  v5 = a2;
  memset(v89, 0, 256);
  v83 = 256;
  bzero(v88, 0x1000uLL);
  v82 = 4096;
  error = 0;
  v61 = v5;
  v62 = v4;
  if (!v4)
  {
    v9 = createMobileActivationError((uint64_t)"create_activation_info", 2086, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v8 = 0;
    v10 = 0;
    v11 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v64 = 0;
    v65 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v60 = 0;
    goto LABEL_7;
  }
  if (v5)
  {
    v6 = objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("UseCommittedUIK"));
    v7 = v6;
    if (v6)
    {
      v8 = (NSDictionary *)isNSNumber(v6);

      if (!v8)
      {
        v60 = v7;
        v9 = createMobileActivationError((uint64_t)"create_activation_info", 2093, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid option (%@)."), CFSTR("UseCommittedUIK"));
        v10 = 0;
        v11 = 0;
        v66 = 0;
        v67 = 0;
        v68 = 0;
        v64 = 0;
        v65 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v4 = 0;
LABEL_7:
        v59 = 0;
LABEL_29:
        v63 = 0;
        v36 = 0;
        goto LABEL_30;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v16 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v17 = objc_msgSend(v16, "copyAnswer:", CFSTR("HasPKA"));

  v18 = isNSNumber(v17);
  v59 = v17;
  v60 = v7;
  if (!v18)
  {
    v9 = createMobileActivationError((uint64_t)"create_activation_info", 2100, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve PKA state."));
LABEL_27:
    v8 = 0;
    v10 = 0;
    goto LABEL_28;
  }
  if (objc_msgSend(v7, "BOOLValue"))
    v19 = 2;
  else
    v19 = 3;
  v80 = 0;
  v10 = (NSMutableDictionary *)security_copy_system_key(v19, 0, &v80);
  v20 = v80;
  if (!v10)
  {
    v9 = createMobileActivationError((uint64_t)"create_activation_info", 2108, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v20, CFSTR("Failed to copy UIK."));

    v8 = 0;
LABEL_28:
    v11 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v64 = 0;
    v65 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v4 = 0;
    goto LABEL_29;
  }
  v21 = SecAccessControlCreateWithFlags(0, kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate, 0x40000000uLL, &error);
  if (!v21)
  {
    v9 = createMobileActivationError((uint64_t)"create_activation_info", 2117, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to create access control."));

    CFRelease(v10);
    goto LABEL_27;
  }
  v22 = v21;
  v79 = v20;
  v12 = (__SecKey *)createReferenceKeyBlob(v21, (char)objc_msgSend(v17, "BOOLValue"), 0, &v79);
  v23 = v79;

  cf = v22;
  v57 = v10;
  v58 = v12;
  if (!v12)
  {
    v9 = createMobileActivationError((uint64_t)"create_activation_info", 2123, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v23, CFSTR("Failed to create ref key."));
    v39 = v23;
LABEL_38:

    v8 = 0;
    v10 = 0;
    v11 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v64 = 0;
    v65 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v4 = 0;
    v63 = 0;
LABEL_48:
    v36 = 0;
    goto LABEL_49;
  }
  v78 = v23;
  v12 = (__SecKey *)security_create_attestation((uint64_t)v12, (uint64_t)v10, (NSError **)&v78);
  v24 = v78;

  if (!v12)
  {
    v9 = createMobileActivationError((uint64_t)"create_activation_info", 2131, CFSTR("com.apple.MobileActivation.ErrorDomain"), -11, v24, CFSTR("Failed to attest ref key to UIK."));
    v39 = v24;
    goto LABEL_38;
  }
  v77 = v24;
  v13 = copy_uik_certificate_info(v5, &v77);
  v25 = v77;

  v63 = v12;
  if (!v13)
  {
    v9 = createMobileActivationError((uint64_t)"create_activation_info", 2139, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v25, CFSTR("Failed to copy UIK certification info."));

    v8 = 0;
    v10 = 0;
    v11 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v64 = 0;
    v65 = 0;
    v12 = 0;
LABEL_45:
    v14 = 0;
LABEL_46:
    v15 = 0;
LABEL_47:
    v4 = 0;
    goto LABEL_48;
  }
  v76 = v25;
  v27 = copy_device_id_info(v26, (NSError **)&v76);
  v28 = v76;

  v65 = v13;
  if (!v27)
  {
    v9 = createMobileActivationError((uint64_t)"create_activation_info", 2147, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v28, CFSTR("Failed to copy device id info."));

    v8 = 0;
    v10 = 0;
    v11 = 0;
    v66 = 0;
LABEL_42:
    v68 = 0;
LABEL_43:
    v64 = 0;
    v67 = 0;
    v12 = 0;
LABEL_44:
    v13 = 0;
    goto LABEL_45;
  }
  v66 = v27;
  v75 = v28;
  v30 = copy_device_info(v29, (NSError **)&v75);
  v31 = v75;

  v68 = v30;
  if (!v30)
  {
    v9 = createMobileActivationError((uint64_t)"create_activation_info", 2155, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v31, CFSTR("Failed to copy device info."));

    v8 = 0;
    v10 = 0;
    v11 = 0;
    goto LABEL_42;
  }
  v74 = v31;
  v32 = copy_activation_request_info(v4, v5, &v74);
  v33 = v74;

  if (!v32)
  {
    v9 = createMobileActivationError((uint64_t)"create_activation_info", 2163, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v33, CFSTR("Failed to copy activation request info."));

    v8 = 0;
    v10 = 0;
    v11 = 0;
    goto LABEL_43;
  }
  v34 = is_product_cellular();
  v64 = v32;
  if (v34)
  {
    v73 = v33;
    v15 = (char *)copy_baseband_request_info(v34, v35, (NSError **)&v73);
    v53 = v73;

    v67 = v15;
    if (!v15)
    {
      v9 = createMobileActivationError((uint64_t)"create_activation_info", 2172, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v53, CFSTR("Failed to copy baseband request info."));

      v8 = 0;
      v10 = 0;
      v11 = 0;
      v67 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      goto LABEL_47;
    }
    v33 = v53;
  }
  else
  {
    v67 = 0;
  }
  v72 = v33;
  v12 = (__SecKey *)copy_regulatory_images_request_info((NSError **)&v72);
  v40 = v72;

  if (!v12)
  {
    v9 = createMobileActivationError((uint64_t)"create_activation_info", 2181, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v40, CFSTR("Failed to copy regulatory images request info."));

    v8 = 0;
    v10 = 0;
    v11 = 0;
    goto LABEL_44;
  }
  v13 = copy_software_update_request_info();
  v41 = v40;

  if (!v13)
  {
    v9 = createMobileActivationError((uint64_t)"create_activation_info", 2189, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v41, CFSTR("Failed to copy managed update request info."));

    v8 = 0;
    v10 = 0;
    v11 = 0;
    goto LABEL_45;
  }
  v71 = v41;
  v14 = create_cert_request(v4, &v71);
  v42 = v71;

  if (!v14)
  {
    v9 = createMobileActivationError((uint64_t)"create_activation_info", 2196, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v42, CFSTR("Failed to create certificate request."));

    v8 = 0;
    v10 = 0;
    v11 = 0;
    goto LABEL_46;
  }
  v86[0] = CFSTR("DeviceID");
  v86[1] = CFSTR("DeviceInfo");
  v87[0] = v66;
  v87[1] = v68;
  v86[2] = CFSTR("ActivationRequestInfo");
  v86[3] = CFSTR("RegulatoryImages");
  v87[2] = v32;
  v87[3] = v12;
  v86[4] = CFSTR("SoftwareUpdateRequestInfo");
  v86[5] = CFSTR("DeviceCertRequest");
  v87[4] = v13;
  v87[5] = v14;
  v86[6] = CFSTR("UIKCertification");
  v87[6] = v65;
  v43 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v87, v86, 7);
  v10 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v43);

  if (v67)
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v67, CFSTR("BasebandRequestInfo"));
  v44 = objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("ActivationLockInfo"));
  v45 = isNSString(v44);

  if (v45)
  {
    v46 = objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("ActivationLockInfo"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v46, CFSTR("ActivationLockInfo"));

  }
  v70 = 0;
  v11 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v10, 100, 0, &v70);
  v9 = (NSError *)v70;

  if (!v11)
  {
    v55 = createMobileActivationError((uint64_t)"create_activation_info", 2225, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v9, CFSTR("Could not convert dictionary to xml data."));

    v8 = 0;
    v15 = 0;
    v4 = 0;
    v36 = 0;
LABEL_73:
    v9 = v55;
    goto LABEL_49;
  }
  v36 = SecKeyCreateSignature(v58, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, (CFDataRef)v11, &error);
  if (!v36)
  {
    v55 = createMobileActivationError((uint64_t)"create_activation_info", 2233, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to sign activation data with ref key."));

    v8 = 0;
    v15 = 0;
LABEL_72:
    v4 = 0;
    goto LABEL_73;
  }
  v15 = (char *)malloc_type_malloc(0x23uLL, 0x2643AE04uLL);
  if (!v15)
  {
    v55 = createMobileActivationError((uint64_t)"create_activation_info", 2241, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate sha1 digest memory."));

    v8 = 0;
    goto LABEL_72;
  }
  v11 = objc_retainAutorelease(v11);
  v54 = v15;
  if (CCDigest(8, -[NSData bytes](v11, "bytes"), -[NSData length](v11, "length"), v15 + 15))
  {
    MobileActivationError = createMobileActivationError((uint64_t)"create_activation_info", 2251, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to digest data."));
LABEL_76:
    v52 = MobileActivationError;

    v8 = 0;
    v15 = 0;
LABEL_77:
    v4 = 0;
    goto LABEL_78;
  }
  *(_QWORD *)v15 = 0xE2B050609302130;
  *((_DWORD *)v15 + 2) = 85590531;
  *((_WORD *)v15 + 6) = 1024;
  v15[14] = 20;
  wyjYwk((uint64_t)v15, 35, (uint64_t)v89, (uint64_t)&v83, (uint64_t)v88, (uint64_t)&v82);
  if (v48)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"create_activation_info", 2284, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to compute activation signature: %ld"), v48);
    goto LABEL_76;
  }
  v49 = objc_alloc((Class)NSData);
  v15 = (char *)objc_msgSend(v49, "initWithBytes:length:", v89, v83);
  if (!v15)
  {
    v52 = createMobileActivationError((uint64_t)"create_activation_info", 2291, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to encode activation signature."));

    v8 = 0;
    goto LABEL_77;
  }
  v50 = objc_alloc((Class)NSData);
  v51 = objc_msgSend(v50, "initWithBytes:length:", v88, v82);
  v4 = v51;
  if (v51)
  {
    v84[0] = CFSTR("ActivationInfoXML");
    v84[1] = CFSTR("FairPlaySignature");
    v85[0] = v11;
    v85[1] = v15;
    v84[2] = CFSTR("FairPlayCertChain");
    v84[3] = CFSTR("RKCertification");
    v85[2] = v51;
    v85[3] = v63;
    v84[4] = CFSTR("RKSignature");
    v85[4] = v36;
    v8 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v85, v84, 5);
    goto LABEL_79;
  }
  v52 = createMobileActivationError((uint64_t)"create_activation_info", 2297, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to encode certificate chain."));

  v8 = 0;
LABEL_78:
  v9 = v52;
LABEL_79:
  free(v54);
LABEL_49:
  CFRelease(cf);
  CFRelease(v57);
  if (v58)
    CFRelease(v58);
LABEL_30:
  if (error)
    CFRelease(error);
  error = 0;
  if (a3 && !v8)
    *a3 = objc_retainAutorelease(v9);
  v37 = v8;

  return v37;
}

NSDictionary *copy_activation_request_info(void *a1, id a2, _QWORD *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  NSNumber *v9;
  NSDictionary *v10;
  NSError *v11;
  NSDictionary *v12;
  _QWORD v14[3];
  _QWORD v15[3];

  v5 = a2;
  v6 = data_ark_copy(a1, 0, CFSTR("ActivationState"));
  if (v6)
  {
    v7 = objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("ActivationRandomness"));
    v8 = isNSString(v7);

    if (v8)
    {
      v14[0] = CFSTR("FMiPAccountExists");
      v9 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", FindMyDeviceIsEnabled(0));
      v15[0] = v9;
      v15[1] = v6;
      v14[1] = CFSTR("ActivationState");
      v14[2] = CFSTR("ActivationRandomness");
      v15[2] = v7;
      v10 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 3);

      v11 = 0;
      if (!a3)
        goto LABEL_10;
    }
    else
    {
      v11 = createMobileActivationError((uint64_t)"copy_activation_request_info", 1733, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid nonce."));
      v10 = 0;
      if (!a3)
        goto LABEL_10;
    }
  }
  else
  {
    v11 = createMobileActivationError((uint64_t)"copy_activation_request_info", 1724, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to lookup activation state."));
    v10 = 0;
    v7 = 0;
    if (!a3)
      goto LABEL_10;
  }
  if (!v10)
    *a3 = objc_retainAutorelease(v11);
LABEL_10:
  v12 = v10;

  return v12;
}

id copy_regulatory_images_request_info(NSError **a1)
{
  id v2;
  id v3;
  id v4;
  BOOL v5;
  NSError *v6;
  NSError *v7;
  id v8;
  id v9;
  id v11;

  v2 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v11 = 0;
  v3 = objc_msgSend(v2, "copyRegulatoryImagesInfo:", &v11);
  v4 = v11;

  if (v3)
    v5 = v4 == 0;
  else
    v5 = 0;
  if (v5)
  {
    v8 = v3;
    v7 = 0;
  }
  else
  {
    v6 = createMobileActivationError((uint64_t)"copy_regulatory_images_request_info", 1693, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to regulatory images info: %@"), v4);
    v7 = v6;
    if (a1)
    {
      v7 = objc_retainAutorelease(v6);
      v8 = 0;
      *a1 = v7;
    }
    else
    {
      v8 = 0;
    }
  }
  v9 = v8;

  return v9;
}

NSDictionary *copy_software_update_request_info()
{
  const __CFString *v1;
  void *v2;

  v1 = CFSTR("Enabled");
  v2 = &__kCFBooleanTrue;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v2, &v1, 1);
}

NSDictionary *create_activation_info_legacy(void *a1, void *a2, _QWORD *a3)
{
  id v4;
  id v5;
  id v6;
  void *v7;
  NSData *v8;
  id v9;
  void *v10;
  NSDictionary *v11;
  id v12;
  id v13;
  _BOOL8 v14;
  uint64_t v15;
  id v16;
  id v17;
  NSError *v18;
  char *v19;
  void *v20;
  NSDictionary *v21;
  id v22;
  NSDictionary *v23;
  id v25;
  id v26;
  __CFString *v27;
  uint64_t v28;
  NSError *MobileActivationError;
  int v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  NSError *v35;
  id v36;
  id v37;
  NSDictionary *v38;
  NSData *v39;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  unsigned int v48;
  unsigned int v49;
  _QWORD v50[4];
  _QWORD v51[4];
  _BYTE v52[4096];
  _OWORD v53[16];
  _OWORD v54[3];
  __int128 v55;
  int v56;

  v4 = a1;
  v5 = a2;
  v55 = 0uLL;
  v56 = 0;
  memset(v54, 0, 35);
  memset(v53, 0, sizeof(v53));
  v49 = 256;
  bzero(v52, 0x1000uLL);
  v48 = 4096;
  v36 = v5;
  v37 = v4;
  if (!v4)
  {
    v18 = createMobileActivationError((uint64_t)"create_activation_info_legacy", 2351, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v7 = 0;
    v8 = 0;
    v19 = 0;
LABEL_13:
    v20 = 0;
    v21 = 0;
    v38 = 0;
    v39 = 0;
    v11 = 0;
LABEL_14:
    v16 = 0;
LABEL_15:
    v22 = 0;
    goto LABEL_16;
  }
  v6 = objc_alloc_init((Class)NSMutableDictionary);
  v7 = v6;
  if (!v6)
  {
    v18 = createMobileActivationError((uint64_t)"create_activation_info_legacy", 2358, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create dictionary."));
    v8 = 0;
LABEL_12:
    v19 = 0;
    v4 = 0;
    goto LABEL_13;
  }
  v47 = 0;
  v8 = (NSData *)copy_device_id_info((uint64_t)v6, (NSError **)&v47);
  v9 = v47;
  v10 = v9;
  if (!v8)
  {
    v18 = createMobileActivationError((uint64_t)"create_activation_info_legacy", 2366, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v9, CFSTR("Failed to copy device id info."));

    goto LABEL_12;
  }
  v39 = v8;
  v46 = v9;
  v11 = (NSDictionary *)copy_device_info((uint64_t)v9, (NSError **)&v46);
  v12 = v46;

  if (!v11)
  {
    v18 = createMobileActivationError((uint64_t)"create_activation_info_legacy", 2374, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v12, CFSTR("Failed to copy device info."));

    v8 = 0;
    v19 = 0;
    v4 = 0;
    v20 = 0;
    v21 = 0;
    v38 = 0;
    goto LABEL_14;
  }
  v38 = v11;
  v45 = v12;
  v11 = copy_activation_request_info(v4, v5, &v45);
  v13 = v45;

  if (!v11)
  {
    v18 = createMobileActivationError((uint64_t)"create_activation_info_legacy", 2382, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v13, CFSTR("Failed to copy activation request info."));

    v8 = 0;
    v19 = 0;
    v4 = 0;
    v20 = 0;
    v21 = 0;
    goto LABEL_14;
  }
  v14 = is_product_cellular();
  if (!v14)
  {
    v16 = 0;
    goto LABEL_23;
  }
  v44 = v13;
  v16 = copy_baseband_request_info(v14, v15, (NSError **)&v44);
  v17 = v44;

  if (!v16)
  {
    v18 = createMobileActivationError((uint64_t)"create_activation_info_legacy", 2391, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v17, CFSTR("Failed to copy baseband request info."));

    v8 = 0;
    v19 = 0;
    v4 = 0;
    v20 = 0;
    v21 = 0;
    goto LABEL_15;
  }
  v13 = v17;
LABEL_23:
  v43 = v13;
  v22 = copy_regulatory_images_request_info((NSError **)&v43);
  v25 = v43;

  if (v22)
  {
    v42 = v25;
    v19 = create_cert_request(v4, &v42);
    v26 = v42;

    if (v19)
    {
      objc_msgSend(v7, "addEntriesFromDictionary:", v39);
      objc_msgSend(v7, "addEntriesFromDictionary:", v38);
      objc_msgSend(v7, "addEntriesFromDictionary:", v11);
      objc_msgSend(v7, "addEntriesFromDictionary:", v22);
      if (v16)
        objc_msgSend(v7, "addEntriesFromDictionary:", v16);
      objc_msgSend(v7, "setObject:forKeyedSubscript:", v19, CFSTR("DeviceCertRequest"));
      v41 = 0;
      v8 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v7, 100, 0, &v41);
      v18 = (NSError *)v41;

      if (v8)
      {
        v8 = objc_retainAutorelease(v8);
        if (CCDigest(8, -[NSData bytes](v8, "bytes"), -[NSData length](v8, "length"), &v55))
        {
          v27 = CFSTR("Failed to digest data.");
          v28 = 2435;
        }
        else
        {
          *(_QWORD *)&v54[0] = 0xE2B050609302130;
          DWORD2(v54[0]) = 85590531;
          WORD6(v54[0]) = 1024;
          BYTE14(v54[0]) = 20;
          *(_OWORD *)((char *)v54 + 15) = v55;
          *(_DWORD *)((char *)&v54[1] + 15) = v56;
          wyjYwk((uint64_t)v54, 35, (uint64_t)v53, (uint64_t)&v49, (uint64_t)v52, (uint64_t)&v48);
          if (!v30)
          {
            v31 = objc_alloc((Class)NSData);
            v4 = objc_msgSend(v31, "initWithBytes:length:", v53, v49);
            if (v4)
            {
              v32 = objc_alloc((Class)NSData);
              v33 = objc_msgSend(v32, "initWithBytes:length:", v52, v48);
              v20 = v33;
              if (v33)
              {
                v50[0] = CFSTR("ActivationInfoXML");
                v50[1] = CFSTR("FairPlaySignature");
                v51[0] = v8;
                v51[1] = v4;
                v50[2] = CFSTR("FairPlayCertChain");
                v50[3] = CFSTR("ActivationInfoComplete");
                v51[2] = v33;
                v51[3] = &__kCFBooleanTrue;
                v21 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v51, v50, 4);
                goto LABEL_16;
              }
              v35 = createMobileActivationError((uint64_t)"create_activation_info_legacy", 2482, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to encode certificate chain."));

              goto LABEL_40;
            }
            v35 = createMobileActivationError((uint64_t)"create_activation_info_legacy", 2476, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to encode activation signature."));

LABEL_39:
            v20 = 0;
LABEL_40:
            v21 = 0;
            v18 = v35;
            goto LABEL_16;
          }
          v34 = v30;
          v27 = CFSTR("Failed to compute activation signature: %ld");
          v28 = 2469;
        }
        MobileActivationError = createMobileActivationError((uint64_t)"create_activation_info_legacy", v28, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, v27, v34);
      }
      else
      {
        MobileActivationError = createMobileActivationError((uint64_t)"create_activation_info_legacy", 2426, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v18, CFSTR("Could not convert dictionary to xml data."));
      }
      v35 = MobileActivationError;

      v4 = 0;
      goto LABEL_39;
    }
    v18 = createMobileActivationError((uint64_t)"create_activation_info_legacy", 2407, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v26, CFSTR("Failed to create certificate request."));

    v8 = 0;
  }
  else
  {
    v18 = createMobileActivationError((uint64_t)"create_activation_info_legacy", 2400, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v25, CFSTR("Failed to copy regulatory images request info."));

    v8 = 0;
    v19 = 0;
  }
  v4 = 0;
  v20 = 0;
  v21 = 0;
LABEL_16:
  if (a3 && !v21)
    *a3 = objc_retainAutorelease(v18);
  v23 = v21;

  return v23;
}

NSDictionary *create_baseband_info(void *a1, __SecKey *a2, __SecCertificate *a3, __SecCertificate *a4, void *a5, _QWORD *a6)
{
  id v10;
  id v11;
  CFDataRef v12;
  CFDataRef v13;
  char *v14;
  id v15;
  CFDataRef v16;
  CFDataRef v17;
  char *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  _BOOL8 v24;
  uint64_t v25;
  id v26;
  NSDictionary *v27;
  NSData *v28;
  NSError *v29;
  CFDataRef v30;
  CFDataRef v31;
  NSDictionary *v32;
  NSError *MobileActivationError;
  NSDictionary *v34;
  NSError *v36;
  char *v37;
  CFDataRef v38;
  CFDataRef v39;
  id v40;
  id v41;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  CFErrorRef error;
  _QWORD v50[3];
  _QWORD v51[3];
  _QWORD v52[3];
  _QWORD v53[3];

  v10 = a1;
  error = 0;
  v40 = a5;
  v41 = v10;
  if (!v10 || !a2 || !a3 || !a4)
  {
    v29 = createMobileActivationError((uint64_t)"create_baseband_info", 2520, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    v32 = 0;
    v27 = 0;
    v28 = 0;
    v13 = 0;
    v17 = 0;
    v18 = 0;
    v31 = 0;
    v14 = 0;
    v38 = 0;
    v39 = 0;
    v11 = 0;
    goto LABEL_31;
  }
  v11 = objc_alloc_init((Class)NSMutableData);
  if (!v11)
  {
    v29 = createMobileActivationError((uint64_t)"create_baseband_info", 2528, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create data."));
    v32 = 0;
    v27 = 0;
    v28 = 0;
    v13 = 0;
LABEL_20:
    v17 = 0;
    v18 = 0;
    v31 = 0;
    v14 = 0;
    v38 = 0;
    v39 = 0;
    goto LABEL_31;
  }
  v12 = SecCertificateCopyData(a3);
  v13 = v12;
  if (!v12)
  {
    v29 = createMobileActivationError((uint64_t)"create_baseband_info", 2534, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy certificate data."));
    v32 = 0;
    v27 = 0;
    v28 = 0;
    goto LABEL_20;
  }
  v48 = 0;
  v14 = lockcrypto_create_pem(v12, "CERTIFICATE", &v48);
  v15 = v48;
  v39 = v13;
  if (!v14)
  {
    v29 = createMobileActivationError((uint64_t)"create_baseband_info", 2540, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create PEM data."));

    v32 = 0;
    v27 = 0;
    v28 = 0;
    v13 = 0;
    v17 = 0;
LABEL_23:
    v18 = 0;
    v31 = 0;
    v38 = 0;
    goto LABEL_31;
  }
  objc_msgSend(v11, "appendData:", v14);
  v16 = SecCertificateCopyData(a4);
  v17 = v16;
  if (!v16)
  {
    v29 = createMobileActivationError((uint64_t)"create_baseband_info", 2548, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy certificate data."));

    v32 = 0;
    v27 = 0;
    v28 = 0;
    v13 = 0;
    goto LABEL_23;
  }
  v47 = v15;
  v18 = lockcrypto_create_pem(v16, "CERTIFICATE", &v47);
  v19 = v47;

  v38 = v17;
  if (!v18)
  {
    v29 = createMobileActivationError((uint64_t)"create_baseband_info", 2554, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create PEM data."));

    v32 = 0;
    v27 = 0;
    v28 = 0;
    v13 = 0;
    v17 = 0;
    v31 = 0;
    v14 = 0;
    goto LABEL_31;
  }
  v20 = objc_msgSend(CFSTR("\n"), "dataUsingEncoding:", 4);
  objc_msgSend(v11, "appendData:", v20);

  v46 = v19;
  v17 = (CFDataRef)copy_device_id_info((uint64_t)objc_msgSend(v11, "appendData:", v18), (NSError **)&v46);
  v21 = v46;

  if (!v17)
  {
    v29 = createMobileActivationError((uint64_t)"create_baseband_info", 2565, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v21, CFSTR("Failed to copy device id info."));

    v32 = 0;
    v27 = 0;
    v28 = 0;
    v13 = 0;
    v14 = v18;
    v18 = 0;
    v31 = 0;
    goto LABEL_31;
  }
  v37 = v18;
  v45 = v21;
  v18 = (char *)copy_device_info(v22, (NSError **)&v45);
  v23 = v45;

  if (!v18)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"create_baseband_info", 2573, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v23, CFSTR("Failed to copy device info."));
LABEL_28:
    v29 = MobileActivationError;

    v32 = 0;
    v27 = 0;
    v28 = 0;
    v13 = 0;
LABEL_29:
    v31 = 0;
    goto LABEL_30;
  }
  v24 = is_product_cellular();
  if (!v24)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"create_baseband_info", 2580, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, v23, CFSTR("Device doesn't support telephony."));
    goto LABEL_28;
  }
  v44 = v23;
  v13 = (CFDataRef)copy_baseband_request_info(v24, v25, (NSError **)&v44);
  v26 = v44;

  if (!v13)
  {
    v29 = createMobileActivationError((uint64_t)"create_baseband_info", 2586, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v26, CFSTR("Failed to copy baseband request info."));

    v32 = 0;
    v27 = 0;
    v28 = 0;
    goto LABEL_29;
  }
  v52[0] = CFSTR("BasebandRequestInfo");
  v52[1] = CFSTR("DeviceID");
  v53[0] = v13;
  v53[1] = v17;
  v52[2] = CFSTR("DeviceInfo");
  v53[2] = v18;
  v27 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v53, v52, 3);
  v43 = 0;
  v28 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v27, 100, 0, &v43);
  v29 = (NSError *)v43;

  if (!v28)
  {
    v36 = createMobileActivationError((uint64_t)"create_baseband_info", 2599, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v29, CFSTR("Could not convert dictionary to xml data."));

    v32 = 0;
    v31 = 0;
LABEL_40:
    v29 = v36;
    goto LABEL_30;
  }
  v30 = SecKeyCreateSignature(a2, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, (CFDataRef)v28, &error);
  v31 = v30;
  if (!v30)
  {
    v36 = createMobileActivationError((uint64_t)"create_baseband_info", 2607, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to sign baseband data with ref key."));

    v32 = 0;
    goto LABEL_40;
  }
  v50[0] = CFSTR("ActivationInfoXML");
  v50[1] = CFSTR("RKCertification");
  v51[0] = v28;
  v51[1] = v11;
  v50[2] = CFSTR("RKSignature");
  v51[2] = v30;
  v32 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v51, v50, 3);
LABEL_30:
  v14 = v37;
LABEL_31:
  if (error)
    CFRelease(error);
  error = 0;
  if (a6 && !v32)
    *a6 = objc_retainAutorelease(v29);
  v34 = v32;

  return v34;
}

uint64_t valid_ucrt_and_uik_legacy(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  id v5;
  id v6;
  NSArray *v7;
  __SecKey *v8;
  NSError *v9;
  CFDataRef v10;
  uint64_t v11;
  uint64_t v12;
  NSError *v14;
  NSError *MobileActivationError;
  id v16;
  id v17;
  uint64_t v18;

  if (!a1 || !a2)
  {
    v9 = createMobileActivationError((uint64_t)"valid_ucrt_and_uik_legacy", 2859, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    v5 = 0;
    goto LABEL_10;
  }
  v17 = 0;
  v5 = libaks_ref_key_get_public(a2, (NSError **)&v17);
  v6 = v17;
  if (!v5)
  {
    v9 = createMobileActivationError((uint64_t)"valid_ucrt_and_uik_legacy", 2867, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v6, CFSTR("Failed to retrieve UIK public key."));

LABEL_10:
    v8 = 0;
    v10 = 0;
    if (!a3)
      goto LABEL_12;
    goto LABEL_11;
  }
  v18 = a1;
  v7 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1);
  v16 = v6;
  v8 = lockcrypto_extract_public(v7, (NSError **)&v16);
  v9 = (NSError *)v16;

  if (v8)
  {
    v10 = SecKeyCopyExternalRepresentation(v8, 0);
    if (v10)
    {
      if ((objc_msgSend(v5, "isEqualToData:", v10) & 1) != 0)
      {
        v11 = 1;
LABEL_13:
        CFRelease(v8);
        v12 = v11;
        goto LABEL_14;
      }
      MobileActivationError = createMobileActivationError((uint64_t)"valid_ucrt_and_uik_legacy", 2888, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("UCRT public key does not match UIK public key."));
    }
    else
    {
      MobileActivationError = createMobileActivationError((uint64_t)"valid_ucrt_and_uik_legacy", 2881, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to encode UCRT public key as data."));
    }
    v14 = MobileActivationError;

  }
  else
  {
    v14 = createMobileActivationError((uint64_t)"valid_ucrt_and_uik_legacy", 2875, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v9, CFSTR("Failed to retrieve UCRT public key."));

    v10 = 0;
  }
  v9 = v14;
  if (a3)
LABEL_11:
    *a3 = objc_retainAutorelease(v9);
LABEL_12:
  v11 = 0;
  v12 = 0;
  if (v8)
    goto LABEL_13;
LABEL_14:

  return v12;
}

uint64_t valid_ucrt_and_uik(__SecCertificate *a1, SecKeyRef key, NSError **a3)
{
  __SecCertificate *v4;
  __SecKey *v5;
  __SecKey *v6;
  CFDataRef v7;
  __SecKey *v8;
  CFDataRef v9;
  NSError *v10;
  uint64_t v11;
  NSError *MobileActivationError;
  CFErrorRef error;

  v4 = a1;
  error = 0;
  if (!a1)
  {
    v10 = createMobileActivationError((uint64_t)"valid_ucrt_and_uik", 2924, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid ucrt."));
    v7 = 0;
    v6 = 0;
    goto LABEL_14;
  }
  if (!key)
  {
    v10 = createMobileActivationError((uint64_t)"valid_ucrt_and_uik", 2936, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid UIK."));
    v7 = 0;
    v6 = 0;
LABEL_13:
    v4 = 0;
    goto LABEL_14;
  }
  v5 = SecKeyCopyPublicKey(key);
  v6 = v5;
  if (!v5)
  {
    v10 = createMobileActivationError((uint64_t)"valid_ucrt_and_uik", 2944, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy UIK public key."));
    v7 = 0;
    goto LABEL_13;
  }
  v7 = SecKeyCopyExternalRepresentation(v5, &error);
  if (!v7)
  {
    v10 = createMobileActivationError((uint64_t)"valid_ucrt_and_uik", 2950, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to copy UIK public key buffer."));
    goto LABEL_13;
  }
  v8 = SecCertificateCopyKey(v4);
  v4 = v8;
  if (v8)
  {
    v9 = SecKeyCopyExternalRepresentation(v8, 0);
    if (v9)
    {
      if ((-[__CFData isEqualToData:](v7, "isEqualToData:", v9) & 1) != 0)
      {
        v10 = 0;
        v11 = 1;
        goto LABEL_21;
      }
      MobileActivationError = createMobileActivationError((uint64_t)"valid_ucrt_and_uik", 2972, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("UCRT public key does not match UIK public key."));
    }
    else
    {
      MobileActivationError = createMobileActivationError((uint64_t)"valid_ucrt_and_uik", 2965, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to encode UCRT public key as data."));
    }
    v10 = MobileActivationError;
    if (!a3)
      goto LABEL_20;
LABEL_15:
    v10 = objc_retainAutorelease(v10);
    v11 = 0;
    *a3 = v10;
    goto LABEL_21;
  }
  v10 = createMobileActivationError((uint64_t)"valid_ucrt_and_uik", 2959, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve UCRT public key."));
LABEL_14:
  v9 = 0;
  if (a3)
    goto LABEL_15;
LABEL_20:
  v11 = 0;
LABEL_21:
  if (error)
    CFRelease(error);
  error = 0;
  if (v6)
    CFRelease(v6);
  if (v4)
    CFRelease(v4);

  return v11;
}

BOOL data_ark_register_set_notification(void *a1, void *a2, void *a3, void *a4, int a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  _BOOL8 v14;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 0;
  if (v9)
  {
    v13 = objc_msgSend(v9, "queue");
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3254779904;
    v16[2] = __data_ark_register_set_notification_block_invoke;
    v16[3] = &__block_descriptor_76_e8_32s40s48s56s64r_e5_v8__0l;
    v22 = a5;
    v21 = &v23;
    v17 = v9;
    v18 = v10;
    v19 = v11;
    v20 = v12;
    dispatch_barrier_sync(v13, v16);

    v14 = *((_BYTE *)v24 + 24) != 0;
  }
  else
  {
    v14 = 0;
  }
  _Block_object_dispose(&v23, 8);

  return v14;
}

void sub_10000F824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __data_ark_register_set_notification_block_invoke(uint64_t a1)
{
  id v2;
  id v3;
  id v4;

  if ((*(_BYTE *)(a1 + 72) & 8) != 0)
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "change_notifications");
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = _register_notification(v2, *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56));

  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    if ((*(_BYTE *)(a1 + 72) & 2) == 0
      || (v3 = objc_msgSend(*(id *)(a1 + 32), "set_notifications"),
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = _register_notification(v3, *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56)), v3, !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24)))
    {
      if ((*(_BYTE *)(a1 + 72) & 4) != 0)
      {
        v4 = objc_msgSend(*(id *)(a1 + 32), "remove_notifications");
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = _register_notification(v4, *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56));

      }
    }
  }
}

__CFString *_register_notification(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  __CFString *v12;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = v10;
  if (v7 && v10)
  {
    v12 = _create_mapkey(v8, v9);
    if (v12)
    {
      objc_msgSend(v7, "setObject:forKeyedSubscript:", v11, v12);

      v12 = (__CFString *)1;
    }
    else
    {
      maLog((uint64_t)"_register_notification", 0, CFSTR("failed to create mapkey for %@-%@"), v8, v9);
    }
  }
  else
  {
    maLog((uint64_t)"_register_notification", 0, CFSTR("invalid inputs"));
    v12 = 0;
  }

  return v12;
}

void __copy_helper_block_e8_32s40s48s56s64r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 64), 8);

}

BOOL data_ark_set(void *a1, void *a2, void *a3, void *a4, char a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  _BOOL8 v14;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t *v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 0;
  if (v9)
  {
    v13 = objc_msgSend(v9, "queue");
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3254779904;
    v16[2] = __data_ark_set_block_invoke;
    v16[3] = &__block_descriptor_73_e8_32s40s48s56s64r_e5_v8__0l;
    v17 = v9;
    v18 = v12;
    v19 = v10;
    v22 = a5;
    v20 = v11;
    v21 = &v23;
    dispatch_barrier_sync(v13, v16);

    v14 = *((_BYTE *)v24 + 24) != 0;
  }
  else
  {
    v14 = 0;
  }
  _Block_object_dispose(&v23, 8);

  return v14;
}

void sub_10000FC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __data_ark_set_block_invoke(uint64_t a1)
{
  NSMutableDictionary *v2;
  NSMutableDictionary *v3;
  id v4;
  __CFString *v5;
  __CFString *v6;
  id v7;
  id v8;
  _BOOL4 v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;

  v2 = (NSMutableDictionary *)objc_msgSend(*(id *)(a1 + 32), "path");
  v3 = load_dict(v2);

  if (!*(_QWORD *)(a1 + 40))
  {
    maLog((uint64_t)"data_ark_set_block_invoke", 0, CFSTR("invalid value"));
    goto LABEL_34;
  }
  v4 = objc_msgSend(*(id *)(a1 + 32), "store");

  if (v4)
  {
    if (!v3)
      v3 = (NSMutableDictionary *)objc_alloc_init((Class)NSMutableDictionary);
    v5 = _create_mapkey(*(void **)(a1 + 48), *(void **)(a1 + 56));
    v6 = _create_mapkey(*(void **)(a1 + 48), 0);
    v7 = objc_msgSend(*(id *)(a1 + 32), "store");
    v8 = objc_msgSend(v7, "objectForKeyedSubscript:", v5);

    v9 = !v8 || (objc_msgSend(v8, "isEqual:", *(_QWORD *)(a1 + 40)) & 1) == 0;
    v10 = *(_QWORD *)(a1 + 40);
    v11 = objc_msgSend(*(id *)(a1 + 32), "store");
    objc_msgSend(v11, "setObject:forKeyedSubscript:", v10, v5);

    if (*(_BYTE *)(a1 + 72))
      goto LABEL_11;
    v18 = -[NSMutableDictionary objectForKey:](v3, "objectForKey:", v5);

    if (!v18)
    {
LABEL_13:
      if (v9)
      {
        v13 = objc_msgSend(*(id *)(a1 + 32), "change_notifications");

        if (v13)
        {
          v14 = objc_msgSend(*(id *)(a1 + 32), "change_notifications");
          v15 = objc_msgSend(v14, "objectForKeyedSubscript:", v5);

          if (v15)
            objc_msgSend(*(id *)(a1 + 32), "postNotification:", v15);
          if (v6)
          {
            v16 = objc_msgSend(*(id *)(a1 + 32), "change_notifications");
            v17 = objc_msgSend(v16, "objectForKeyedSubscript:", v6);

            if (v17)
            {
              objc_msgSend(*(id *)(a1 + 32), "postNotification:", v17);
              v15 = v17;
            }
            else
            {
              v15 = 0;
            }
          }

        }
      }
      v19 = objc_msgSend(*(id *)(a1 + 32), "set_notifications");

      if (v19)
      {
        v20 = objc_msgSend(*(id *)(a1 + 32), "set_notifications");
        v21 = objc_msgSend(v20, "objectForKeyedSubscript:", v5);

        if (v21)
          objc_msgSend(*(id *)(a1 + 32), "postNotification:", v21);
        if (v6)
        {
          v22 = objc_msgSend(*(id *)(a1 + 32), "set_notifications");
          v23 = objc_msgSend(v22, "objectForKeyedSubscript:", v6);

          if (v23)
          {
            objc_msgSend(*(id *)(a1 + 32), "postNotification:", v23);
            v21 = v23;
          }
          else
          {
            v21 = 0;
          }
        }

      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;

      goto LABEL_34;
    }
    if (*(_BYTE *)(a1 + 72))
LABEL_11:
      -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", *(_QWORD *)(a1 + 40), v5);
    else
      -[NSMutableDictionary removeObjectForKey:](v3, "removeObjectForKey:", v5);
    v12 = objc_msgSend(*(id *)(a1 + 32), "path");
    store_dict(v12, v3, 0);

    goto LABEL_13;
  }
LABEL_34:

}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void __copy_helper_block_e8_32s40s48s56r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
}

void __destroy_helper_block_e8_32s40s48s56r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 56), 8);

}

void data_ark_remove(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v5)
  {
    v8 = objc_msgSend(v5, "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3254779904;
    block[2] = __data_ark_remove_block_invoke;
    block[3] = &__block_descriptor_56_e8_32s40s48s_e5_v8__0l;
    v10 = v5;
    v11 = v6;
    v12 = v7;
    dispatch_barrier_sync(v8, block);

  }
}

void __data_ark_remove_block_invoke(id *a1)
{
  NSMutableDictionary *v2;
  NSMutableDictionary *v3;
  __CFString *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v2 = (NSMutableDictionary *)objc_msgSend(a1[4], "path");
  v3 = load_dict(v2);

  v4 = (__CFString *)objc_msgSend(a1[4], "store");
  if (v4)
  {
    v4 = _create_mapkey(a1[5], a1[6]);
    v5 = objc_msgSend(a1[4], "store");
    v6 = objc_msgSend(v5, "objectForKey:", v4);

    if (v6)
    {
      v7 = objc_msgSend(a1[4], "store");
      objc_msgSend(v7, "removeObjectForKey:", v4);

      -[NSMutableDictionary removeObjectForKey:](v3, "removeObjectForKey:", v4);
      if (v3)
      {
        v8 = objc_msgSend(a1[4], "path");
        store_dict(v8, v3, 0);

      }
      v9 = objc_msgSend(a1[4], "remove_notifications");

      if (v9)
      {
        v10 = objc_msgSend(a1[4], "remove_notifications");
        v11 = objc_msgSend(v10, "objectForKeyedSubscript:", v4);

        if (v11)
          objc_msgSend(a1[4], "postNotification:", v11);

      }
    }
  }

}

id __copy_helper_block_e8_32s40s48s(uint64_t a1, id *a2)
{
  id v3;
  id v4;

  v3 = a2[4];
  v4 = a2[5];
  return a2[6];
}

void __destroy_helper_block_e8_32s40s48s(id *a1)
{

}

BOOL data_ark_exists(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  _BOOL8 v9;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  if (v5)
  {
    v8 = objc_msgSend(v5, "queue");
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3254779904;
    v11[2] = __data_ark_exists_block_invoke;
    v11[3] = &__block_descriptor_64_e8_32s40s48s56r_e5_v8__0l;
    v12 = v5;
    v13 = v6;
    v14 = v7;
    v15 = &v16;
    dispatch_sync(v8, v11);

    v9 = *((_BYTE *)v17 + 24) != 0;
  }
  else
  {
    v9 = 0;
  }
  _Block_object_dispose(&v16, 8);

  return v9;
}

void sub_100010498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __data_ark_exists_block_invoke(uint64_t a1)
{
  id v2;
  __CFString *v3;
  id v4;
  id v5;

  v2 = objc_msgSend(*(id *)(a1 + 32), "store");

  if (v2)
  {
    v3 = _create_mapkey(*(void **)(a1 + 40), *(void **)(a1 + 48));
    v4 = objc_msgSend(*(id *)(a1 + 32), "store");
    v5 = objc_msgSend(v4, "objectForKey:", v3);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v5 != 0;

  }
}

void ___copy_domain_block_invoke(uint64_t a1, id a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v5, "hasPrefix:", *(_QWORD *)(a1 + 32)))
  {
    v7 = *(void **)(a1 + 32);
    v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v9 = objc_msgSend(v5, "substringFromIndex:", objc_msgSend(v7, "length"));
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v6, v9);

  }
}

void __copy_helper_block_e8_32s40r(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = *(id *)(a2 + 32);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 8);
}

void __destroy_helper_block_e8_32s40r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 8);

}

void sub_1000111B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100012314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose((const void *)(v43 - 256), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void __copy_helper_block_e8_32s40s48r56r64r72r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
}

void __destroy_helper_block_e8_32s40s48r56r64r72r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 72), 8);
  _Block_object_dispose(*(const void **)(a1 + 64), 8);
  _Block_object_dispose(*(const void **)(a1 + 56), 8);
  _Block_object_dispose(*(const void **)(a1 + 48), 8);

}

uint64_t libInFieldCollectionLibraryCore(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v1 = libInFieldCollectionLibraryCore_frameworkLibrary;
  v6 = libInFieldCollectionLibraryCore_frameworkLibrary;
  if (!libInFieldCollectionLibraryCore_frameworkLibrary)
  {
    v7 = *(_OWORD *)off_100259070;
    v8 = 0;
    v1 = _sl_dlopen(&v7, a1);
    v4[3] = v1;
    libInFieldCollectionLibraryCore_frameworkLibrary = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v1;
}

void sub_100012928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t libInFieldCollectionLibrary()
{
  uint64_t v0;
  uint64_t v1;
  void *v3;

  v3 = 0;
  v0 = libInFieldCollectionLibraryCore((uint64_t)&v3);
  if (!v0)
    libInFieldCollectionLibrary_cold_1(&v3);
  v1 = v0;
  if (v3)
    free(v3);
  return v1;
}

void OUTLINED_FUNCTION_0()
{
  void *v0;

}

void reply_and_disconnect(uint64_t a1, id a2, void *a3, void *a4)
{
  id v7;
  id v8;
  NSString *v9;
  NSDictionary *v10;
  uint64_t v11;
  id v12;
  id v13;
  NSString *v14;
  uint64_t v15;
  id v16;
  NSString *v17;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (objc_msgSend(v8, "isEqualToString:", CFSTR("Error")))
    maLog((uint64_t)"reply_and_disconnect", 0, CFSTR("Error occurred processing host request (%@): %@"), v7, v9);
  v10 = (NSDictionary *)&__NSDictionary0__struct;
  if (v8 && v9)
  {
    v11 = objc_opt_class(NSError);
    if ((objc_opt_isKindOfClass(v9, v11) & 1) != 0)
    {
      v12 = -[NSString localizedDescription](v9, "localizedDescription");
      v13 = -[NSString userInfo](v9, "userInfo");
      v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ (%@)"), v12, v13);

      v9 = v14;
    }
    v16 = v8;
    v17 = v9;
    v10 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
  }
  v15 = lockdown_send_message(a1, v10, 100);
  if ((_DWORD)v15)
    maLog((uint64_t)"reply_and_disconnect", 0, CFSTR("Failed to send response message: %d"), v15);
  lockdown_disconnect(a1);

}

BOOL init_lockdown_server(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  _BOOL8 v8;
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  if (v4 && &_lockdown_checkin_xpc)
  {
    v6 = objc_msgSend(CFSTR("com.apple.mobileactivationd.lockdown"), "UTF8String");
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3254779904;
    v10[2] = __init_lockdown_server_block_invoke;
    v10[3] = &__block_descriptor_48_e8_32s40r_e51_v24__0___lockdown_connection__8____CFDictionary__16l;
    v11 = v3;
    v12 = &v13;
    v7 = lockdown_checkin_xpc(v6, 0, v5, v10);
    *((_DWORD *)v14 + 6) = v7;
    if ((_DWORD)v7)
    {
      maLog((uint64_t)"init_lockdown_server", 0, CFSTR("failed to checkin with lockdown: 0x%08x"), v7);
      v8 = *((_DWORD *)v14 + 6) == 0;
    }
    else
    {
      v8 = 1;
    }

  }
  else
  {
    if (v4)
      maLog((uint64_t)"init_lockdown_server", 0, CFSTR("Platform does not support lockdown."));
    else
      maLog((uint64_t)"init_lockdown_server", 0, CFSTR("invalid input"));
    v8 = 0;
  }
  _Block_object_dispose(&v13, 8);

  return v8;
}

void sub_100013460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __init_lockdown_server_block_invoke(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  id v6;
  id v7;
  BOOL v8;
  __CFString *v9;
  id v10;
  NSError *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  NSError *v16;
  NSError *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  _BOOL4 v22;
  id v23;
  _BOOL4 v24;
  id v25;
  id v26;
  _BOOL4 v27;
  id v28;
  id v29;
  id v30;
  unsigned int v31;
  void *v32;
  _QWORD *v33;
  id v34;
  void *v35;
  id *v36;
  NSError *v37;
  id v38;
  _BOOL4 v39;
  NSError *v40;
  void *v41;
  NSDictionary *v42;
  _QWORD *v43;
  id v44;
  _BOOL4 v45;
  void *v46;
  void *v47;
  void *v48;
  NSError *v49;
  id v50;
  id v51;
  _BOOL4 v52;
  id v53;
  _BOOL4 v54;
  void *v55;
  void *v56;
  NSError *v57;
  id v58;
  id v59;
  id v60;
  _QWORD v61[8];
  _QWORD v62[8];
  _QWORD v63[8];
  _QWORD v64[8];
  _QWORD v65[8];
  _QWORD v66[8];
  id v67;
  id v68;
  _QWORD v69[8];
  _QWORD v70[8];
  uint64_t v71;
  id *v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t);
  void (*v75)(uint64_t);
  id v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t);
  void (*v81)(uint64_t);
  id v82;
  void *v83;
  const __CFString *v84;
  id v85;
  const __CFString *v86;
  id v87;

  v82 = 0;
  v83 = 0;
  v77 = 0;
  v78 = &v77;
  v79 = 0x3032000000;
  v80 = __Block_byref_object_copy__2;
  v81 = __Block_byref_object_dispose__2;
  v71 = 0;
  v72 = (id *)&v71;
  v73 = 0x3032000000;
  v74 = __Block_byref_object_copy__2;
  v75 = __Block_byref_object_dispose__2;
  v76 = 0;
  if (!a3
    || (v6 = -[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", CFSTR("ClientName")),
        v7 = isNSString(v6),
        v8 = v7 == 0,
        v7,
        v6,
        v8))
  {
    v9 = CFSTR("unknown");
  }
  else
  {
    v9 = (id)CFDictionaryGetValue(a3, CFSTR("ClientName"));
  }
  v10 = objc_msgSend(*(id *)(a1 + 32), "dark");
  data_ark_set(v10, 0, CFSTR("HostProcessName"), v9, 0);

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = lockdown_receive_message(a2, &v83);
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v59 = v83;
    v21 = isNSDictionary(v83);
    v22 = v21 == 0;

    if (v22)
    {
      objc_storeStrong(v72 + 5, CFSTR("Error"));
      v11 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke", 115, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid request."));
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v58 = 0;
      goto LABEL_7;
    }
    v60 = objc_msgSend(v59, "objectForKeyedSubscript:", CFSTR("Command"));
    v23 = isNSString(v60);
    v24 = v23 == 0;

    if (v24)
    {
      objc_storeStrong(v72 + 5, CFSTR("Error"));
      v11 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke", 122, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Request missing required key: %@"), CFSTR("Command"));
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v58 = 0;
LABEL_33:
      v16 = 0;
      goto LABEL_8;
    }
    v25 = objc_msgSend(v59, "objectForKeyedSubscript:", CFSTR("Options"));
    v58 = v25;
    if (!v25)
      goto LABEL_19;
    v26 = isNSDictionary(v25);
    v27 = v26 == 0;

    if (v27)
    {
      objc_storeStrong(v72 + 5, CFSTR("Error"));
      v37 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke", 130, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid request value for key %@."), CFSTR("Options"));
      goto LABEL_30;
    }
    v28 = objc_msgSend(v58, "objectForKeyedSubscript:", CFSTR("FactoryActivation"));
    v29 = isNSNumber(v28);

    if (v29)
    {
      v30 = objc_msgSend(v58, "objectForKeyedSubscript:", CFSTR("FactoryActivation"));
      v31 = objc_msgSend(v30, "BOOLValue");

    }
    else
    {
LABEL_19:
      v31 = 0;
    }
    maLog((uint64_t)"init_lockdown_server_block_invoke", 0, CFSTR("Host connection (%@): %@"), v9, v60);
    if ((objc_msgSend(v60, "isEqualToString:", CFSTR("CreateActivationInfoRequest")) & 1) != 0
      || objc_msgSend(v60, "isEqualToString:", CFSTR("CreateTunnel1ActivationInfoRequest")))
    {
      if (!v31)
      {
        v34 = objc_msgSend(v59, "objectForKeyedSubscript:", CFSTR("Value"));
        v19 = isNSData(v34);

        v35 = *(void **)(a1 + 32);
        v69[0] = _NSConcreteStackBlock;
        v69[1] = 3254779904;
        v69[2] = __init_lockdown_server_block_invoke_28;
        v69[3] = &__block_descriptor_64_e8_32s40r48r_e34_v24__0__NSDictionary_8__NSError_16l;
        v69[5] = &v71;
        v69[6] = &v77;
        v69[7] = a2;
        v33 = v69;
        v69[4] = v9;
        objc_msgSend(v35, "createTunnel1ActivationInfo:options:withCompletionBlock:", v19, v58, v69);
        v16 = 0;
        v18 = 0;
        v15 = 0;
        v14 = 0;
        v13 = 0;
        goto LABEL_26;
      }
      v32 = *(void **)(a1 + 32);
      v70[0] = _NSConcreteStackBlock;
      v70[1] = 3254779904;
      v70[2] = __init_lockdown_server_block_invoke_2;
      v70[3] = &__block_descriptor_64_e8_32s40r48r_e34_v24__0__NSDictionary_8__NSError_16l;
      v70[5] = &v71;
      v70[6] = &v77;
      v70[7] = a2;
      v33 = v70;
      v70[4] = v9;
      objc_msgSend(v32, "createActivationInfoWithCompletionBlock:", v70);
LABEL_24:
      v16 = 0;
      v18 = 0;
      v15 = 0;
      v14 = 0;
      v13 = 0;
      v19 = 0;
LABEL_26:
      v12 = 0;
LABEL_27:
      v36 = (id *)(v33 + 4);
LABEL_28:

      goto LABEL_10;
    }
    if (objc_msgSend(v60, "isEqualToString:", CFSTR("HandleActivationInfoWithSessionRequest")))
    {
      v13 = objc_msgSend(v59, "objectForKeyedSubscript:", CFSTR("Value"));
      v38 = isNSData(v13);
      v39 = v38 == 0;

      if (!v39)
      {
        v68 = 0;
        v12 = getActivationRecordFromData((uint64_t)v13, &v68);
        v40 = (NSError *)v68;
        if (!v12)
        {
          v49 = v40;
          v67 = v40;
          v12 = getSessionActivationRecordFromData(v13, &v67);
          v16 = (NSError *)v67;

          if (v12)
          {
            v50 = objc_msgSend(v59, "objectForKeyedSubscript:", CFSTR("ActivationResponseHeaders"));
            v14 = v50;
            if (!v50
              || (v51 = isNSDictionary(v50),
                  v52 = v51 == 0,
                  v51,
                  !v52))
            {
              v15 = objc_msgSend(v14, "objectForCaseInsensitiveKey:", CFSTR("ARS"));
              v53 = isNSString(v15);
              v54 = v53 == 0;

              if (v54)
              {
                objc_storeStrong(v72 + 5, CFSTR("Error"));
                v11 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke_2", 217, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Request contains invalid key: %@"), CFSTR("ARS"));
                goto LABEL_8;
              }
              v18 = objc_msgSend(objc_alloc((Class)NSData), "initWithBase64EncodedString:options:", v15, 1);
              if (!v18)
              {
                v57 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke_2", 223, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid activation signature"));
                v17 = v16;
                v16 = v57;
                goto LABEL_9;
              }
              v55 = *(void **)(a1 + 32);
              v66[0] = _NSConcreteStackBlock;
              v66[1] = 3254779904;
              v66[2] = __init_lockdown_server_block_invoke_3;
              v66[3] = &__block_descriptor_64_e8_32s40r48r_e34_v24__0__NSDictionary_8__NSError_16l;
              v66[5] = &v71;
              v66[6] = &v77;
              v66[7] = a2;
              v33 = v66;
              v66[4] = v9;
              objc_msgSend(v55, "handleActivationInfoWithSession:activationSignature:completionBlock:", v13, v18, v66);
              v19 = 0;
              goto LABEL_27;
            }
            objc_storeStrong(v72 + 5, CFSTR("Error"));
            v11 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke_2", 207, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Request contains invalid key: %@"), CFSTR("ActivationResponseHeaders"));
          }
          else
          {
            objc_storeStrong(v72 + 5, CFSTR("Error"));
            v11 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke_2", 196, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, v16, CFSTR("Failed to extract activation record."));
            v12 = 0;
            v14 = 0;
          }
          v15 = 0;
          goto LABEL_8;
        }
        v16 = v40;
        v41 = *(void **)(a1 + 32);
        v86 = CFSTR("ActivationRecord");
        v87 = v12;
        v42 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v87, &v86, 1);
        v65[0] = _NSConcreteStackBlock;
        v65[1] = 3254779904;
        v65[2] = __init_lockdown_server_block_invoke_4;
        v65[3] = &__block_descriptor_64_e8_32s40r48r_e34_v24__0__NSDictionary_8__NSError_16l;
        v65[5] = &v71;
        v65[6] = &v77;
        v65[7] = a2;
        v43 = v65;
        v65[4] = v9;
        objc_msgSend(v41, "handleActivationInfo:withCompletionBlock:", v42, v65);
LABEL_41:
        v36 = (id *)(v43 + 4);

        v18 = 0;
        v15 = 0;
        v14 = 0;
        v19 = 0;
        goto LABEL_28;
      }
      objc_storeStrong(v72 + 5, CFSTR("Error"));
      v11 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke_2", 187, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Request missing required key: %@"), CFSTR("Value"));
      v12 = 0;
      goto LABEL_32;
    }
    if (objc_msgSend(v60, "isEqualToString:", CFSTR("HandleActivationInfoRequest")))
    {
      v12 = objc_msgSend(v59, "objectForKeyedSubscript:", CFSTR("Value"));
      v44 = isNSDictionary(v12);
      v45 = v44 == 0;

      if (!v45)
      {
        v46 = *(void **)(a1 + 32);
        v84 = CFSTR("ActivationRecord");
        v85 = v12;
        v42 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v85, &v84, 1);
        v64[0] = _NSConcreteStackBlock;
        v64[1] = 3254779904;
        v64[2] = __init_lockdown_server_block_invoke_5;
        v64[3] = &__block_descriptor_64_e8_32s40r48r_e34_v24__0__NSDictionary_8__NSError_16l;
        v64[5] = &v71;
        v64[6] = &v77;
        v64[7] = a2;
        v43 = v64;
        v64[4] = v9;
        objc_msgSend(v46, "handleActivationInfo:withCompletionBlock:", v42, v64);
        v16 = 0;
        v13 = 0;
        goto LABEL_41;
      }
      objc_storeStrong(v72 + 5, CFSTR("Error"));
      v11 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke_2", 253, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Request missing required key: %@"), CFSTR("Value"));
      goto LABEL_31;
    }
    if (objc_msgSend(v60, "isEqualToString:", CFSTR("DeactivateRequest")))
    {
      v47 = *(void **)(a1 + 32);
      v63[0] = _NSConcreteStackBlock;
      v63[1] = 3254779904;
      v63[2] = __init_lockdown_server_block_invoke_6;
      v63[3] = &__block_descriptor_64_e8_32s40r48r_e34_v24__0__NSDictionary_8__NSError_16l;
      v63[5] = &v71;
      v63[6] = &v77;
      v63[7] = a2;
      v33 = v63;
      v63[4] = v9;
      objc_msgSend(v47, "deactivateDeviceWithCompletionBlock:", v63);
      goto LABEL_24;
    }
    if (objc_msgSend(v60, "isEqualToString:", CFSTR("CreateTunnel1SessionInfoRequest")))
    {
      v48 = *(void **)(a1 + 32);
      v62[0] = _NSConcreteStackBlock;
      v62[1] = 3254779904;
      v62[2] = __init_lockdown_server_block_invoke_7;
      v62[3] = &__block_descriptor_64_e8_32s40r48r_e34_v24__0__NSDictionary_8__NSError_16l;
      v62[5] = &v71;
      v62[6] = &v77;
      v62[7] = a2;
      v33 = v62;
      v62[4] = v9;
      objc_msgSend(v48, "createTunnel1SessionInfoWithCompletionBlock:", v62);
      goto LABEL_24;
    }
    if (objc_msgSend(v60, "isEqualToString:", CFSTR("GetActivationStateRequest")))
    {
      v56 = *(void **)(a1 + 32);
      v61[0] = _NSConcreteStackBlock;
      v61[1] = 3254779904;
      v61[2] = __init_lockdown_server_block_invoke_8;
      v61[3] = &__block_descriptor_64_e8_32s40r48r_e34_v24__0__NSDictionary_8__NSError_16l;
      v61[5] = &v71;
      v61[6] = &v77;
      v61[7] = a2;
      v33 = v61;
      v61[4] = v9;
      objc_msgSend(v56, "getActivationStateWithCompletionBlock:", v61);
      goto LABEL_24;
    }
    objc_storeStrong(v72 + 5, CFSTR("Error"));
    v37 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke_2", 312, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Received unknown command: %@"), v60);
LABEL_30:
    v11 = v37;
    v12 = 0;
LABEL_31:
    v13 = 0;
LABEL_32:
    v14 = 0;
    v15 = 0;
    goto LABEL_33;
  }
  objc_storeStrong(v72 + 5, CFSTR("Error"));
  v11 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke", 108, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to receive request from host: 0x%08x"), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v58 = 0;
  v59 = 0;
LABEL_7:
  v16 = 0;
  v60 = 0;
LABEL_8:
  v17 = (NSError *)v78[5];
  v78[5] = (uint64_t)v11;
LABEL_9:

  reply_and_disconnect(a2, v9, v72[5], (void *)v78[5]);
  v18 = 0;
  v19 = 0;
LABEL_10:
  v20 = objc_msgSend(*(id *)(a1 + 32), "dark");
  data_ark_remove(v20, 0, CFSTR("HostProcessName"));

  _Block_object_dispose(&v71, 8);
  _Block_object_dispose(&v77, 8);

}

void sub_100014298(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 232), 8);
  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void __init_lockdown_server_block_invoke_2(uint64_t a1, id a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  NSError *v8;
  NSError *v9;
  uint64_t v10;
  void *v11;

  v5 = a2;
  v6 = a3;
  v7 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (!v5 || v6)
  {
    objc_storeStrong(v7, CFSTR("Error"));
    v8 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke_2", 151, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, v6, CFSTR("Failed to retrieve activation info."));
  }
  else
  {
    objc_storeStrong(v7, CFSTR("Value"));
    v8 = (NSError *)objc_msgSend(v5, "copy");
  }
  v9 = v8;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  reply_and_disconnect(*(_QWORD *)(a1 + 56), *(id *)(a1 + 32), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

void __copy_helper_block_e8_32s40r48r(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = *(id *)(a2 + 32);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 8);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
}

void __destroy_helper_block_e8_32s40r48r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 48), 8);
  _Block_object_dispose(*(const void **)(a1 + 40), 8);

}

void __init_lockdown_server_block_invoke_28(uint64_t a1, id a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  NSError *v8;
  NSError *v9;
  uint64_t v10;
  void *v11;

  v5 = a2;
  v6 = a3;
  v7 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (!v5 || v6)
  {
    objc_storeStrong(v7, CFSTR("Error"));
    v8 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke", 167, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, v6, CFSTR("Failed to retrieve activation info."));
  }
  else
  {
    objc_storeStrong(v7, CFSTR("Value"));
    v8 = (NSError *)objc_msgSend(v5, "copy");
  }
  v9 = v8;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  reply_and_disconnect(*(_QWORD *)(a1 + 56), *(id *)(a1 + 32), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

void __init_lockdown_server_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSError *v6;
  uint64_t v7;
  void *v8;

  if (a3)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), CFSTR("Error"));
    v5 = a3;
    v6 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke_3", 230, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v5, CFSTR("Failed to activate device."));

    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

  }
  reply_and_disconnect(*(_QWORD *)(a1 + 56), *(id *)(a1 + 32), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

void __init_lockdown_server_block_invoke_4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSError *v6;
  uint64_t v7;
  void *v8;

  if (a3)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), CFSTR("Error"));
    v5 = a3;
    v6 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke_4", 240, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v5, CFSTR("Failed to activate device."));

    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

  }
  reply_and_disconnect(*(_QWORD *)(a1 + 56), *(id *)(a1 + 32), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

void __init_lockdown_server_block_invoke_5(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSError *v6;
  uint64_t v7;
  void *v8;

  if (a3)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), CFSTR("Error"));
    v5 = a3;
    v6 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke_5", 260, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v5, CFSTR("Failed to activate device."));

    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

  }
  reply_and_disconnect(*(_QWORD *)(a1 + 56), *(id *)(a1 + 32), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

void __init_lockdown_server_block_invoke_6(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSError *v6;
  uint64_t v7;
  void *v8;

  if (a3)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), CFSTR("Error"));
    v5 = a3;
    v6 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke_6", 272, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v5, CFSTR("Failed to deactivate device."));

    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

  }
  reply_and_disconnect(*(_QWORD *)(a1 + 56), *(id *)(a1 + 32), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

void __init_lockdown_server_block_invoke_7(uint64_t a1, id a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  NSError *v8;
  NSError *v9;
  uint64_t v10;
  void *v11;

  v5 = a2;
  v6 = a3;
  v7 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (!v5 || v6)
  {
    objc_storeStrong(v7, CFSTR("Error"));
    v8 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke_7", 284, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v6, CFSTR("Failed to retrieve session info."));
  }
  else
  {
    objc_storeStrong(v7, CFSTR("Value"));
    v8 = (NSError *)objc_msgSend(v5, "copy");
  }
  v9 = v8;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  reply_and_disconnect(*(_QWORD *)(a1 + 56), *(id *)(a1 + 32), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

void __init_lockdown_server_block_invoke_8(uint64_t a1, id a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  NSError *v12;
  uint64_t v13;

  v5 = a2;
  v6 = a3;
  v7 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (!v5 || v6)
  {
    objc_storeStrong(v7, CFSTR("Error"));
    v12 = createMobileActivationError((uint64_t)"init_lockdown_server_block_invoke_8", 299, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v6, CFSTR("Failed to retrieve activation state."));
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = *(id *)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;
  }
  else
  {
    objc_storeStrong(v7, CFSTR("Value"));
    v8 = objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("ActivationState"));
    v9 = objc_msgSend(v8, "copy");
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

  }
  reply_and_disconnect(*(_QWORD *)(a1 + 56), *(id *)(a1 + 32), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));

}

id lockcrypto_query_certificate_properties(uint64_t a1, id a2, _QWORD *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  NSError *v9;
  id v10;
  uint64_t v11;
  NSError *MobileActivationError;
  NSError *v13;
  NSString *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  NSError *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  void *i;
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  NSString *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  NSNumber *v52;
  uint64_t v53;
  int v54;
  int v55;
  id v56;
  unsigned __int8 **v57;
  unsigned __int8 *v58;
  unint64_t *v59;
  void *v60;
  _UNKNOWN **v61;
  uint64_t v62;
  NSNumber *v63;
  unint64_t *v64;
  id v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  NSError *v72;
  NSError *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  id v78;
  unsigned __int8 **v79;
  unsigned __int8 *v80;
  unint64_t *v81;
  NSNumber *v82;
  NSNumber *v83;
  _UNKNOWN **v84;
  uint64_t v85;
  NSNumber *v86;
  uint64_t v87;
  id v88;
  id v89;
  id v90;
  _UNKNOWN **v91;
  uint64_t v92;
  id v93;
  id v94;
  uint64_t v95;
  NSError *v96;
  NSError *v97;
  NSError *v98;
  NSError *v99;
  NSError *v100;
  NSError *v101;
  uint64_t v102;
  NSString *v103;
  NSNumber *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  id v108;
  uint64_t v109;
  NSError *v110;
  uint64_t v111;
  NSError *v112;
  id v113;
  id v114;
  NSNumber *v115;
  NSNumber *v116;
  NSError *v117;
  NSError *v118;
  id v119;
  NSError *v121;
  NSError *v122;
  NSError *v123;
  __CFString *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  void *v128;
  void *v129;
  NSError *v130;
  id v131;
  id v132;
  id v133;
  void *v134;
  id v135;
  unint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  unint64_t v139;
  BOOL v140;
  unint64_t v141;
  int v142;
  __int128 v143;
  unint64_t v144;
  __int128 v145;
  unint64_t v146;
  unint64_t v147[2];
  uint64_t v148;
  id v149;
  id v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  unsigned __int8 *v160;
  unint64_t v161;
  uint64_t v162;
  unsigned __int8 *v163;
  unint64_t v164;

  v5 = a2;
  v6 = v5;
  v149 = 0;
  v150 = 0;
  v147[1] = 0;
  v148 = 0;
  v146 = 0;
  v147[0] = 0;
  v145 = 0uLL;
  v143 = 0uLL;
  v144 = 0;
  v142 = 0;
  v141 = 0;
  v140 = 0;
  if (!a1 || !v5)
  {
    v9 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 229, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    v7 = 0;
    goto LABEL_15;
  }
  v7 = objc_alloc_init((Class)NSMutableDictionary);
  if (!v7)
  {
    v9 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 235, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate dictionary."));
LABEL_15:
    v10 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    if (v9)
      goto LABEL_229;
    goto LABEL_179;
  }
  if (&_SecCertificateCopyExtensionValue)
  {
    v8 = (id)SecCertificateCopyExtensionValue(a1, v6, 0);
    v9 = 0;
    if (v8)
      goto LABEL_6;
LABEL_177:
    v13 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 245, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v9, CFSTR("Failed to query DERSequence data for OID %@."), v6);

    v10 = 0;
LABEL_178:
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v9 = v13;
    if (v13)
      goto LABEL_229;
    goto LABEL_179;
  }
  v17 = v6;
  if (lockcrypto_query_oid_der_sequence_data_onceToken != -1)
    dispatch_once(&lockcrypto_query_oid_der_sequence_data_onceToken, &__block_literal_global_3);
  v18 = (void *)SecCertificateCopyProperties(a1);
  v19 = v18;
  if (v18)
  {
    v128 = v6;
    v157 = 0u;
    v158 = 0u;
    v155 = 0u;
    v156 = 0u;
    v127 = v18;
    v20 = v18;
    v21 = -[NSError countByEnumeratingWithState:objects:count:](v20, "countByEnumeratingWithState:objects:count:", &v155, &v162, 16);
    if (!v21)
    {
      v23 = 0;
      goto LABEL_174;
    }
    v22 = v21;
    v23 = 0;
    v133 = v7;
    v135 = *(id *)v156;
    v130 = v20;
    v131 = v17;
    while (1)
    {
      v24 = 0;
      do
      {
        if (*(id *)v156 != v135)
          objc_enumerationMutation(v20);
        v25 = *(void **)(*((_QWORD *)&v155 + 1) + 8 * (_QWORD)v24);
        v26 = objc_opt_class(NSDictionary);
        if ((objc_opt_isKindOfClass(v25, v26) & 1) != 0)
        {
          v27 = objc_msgSend(v25, "objectForKeyedSubscript:", CFSTR("label"));
          v28 = objc_opt_class(NSString);
          if ((objc_opt_isKindOfClass(v27, v28) & 1) != 0 && objc_msgSend(v27, "isEqualToString:", v17))
          {
            v29 = objc_msgSend(v25, "objectForKeyedSubscript:", CFSTR("value"));

            if (v29)
            {
              v30 = objc_opt_class(NSArray);
              if ((objc_opt_isKindOfClass(v29, v30) & 1) != 0)
              {
                v132 = v22;
                v153 = 0u;
                v154 = 0u;
                v151 = 0u;
                v152 = 0u;
                v23 = v29;
                v31 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v151, &v159, 16);
                if (!v31)
                  goto LABEL_47;
                v32 = v31;
                v33 = *(_QWORD *)v152;
                while (1)
                {
                  for (i = 0; i != v32; i = (char *)i + 1)
                  {
                    if (*(_QWORD *)v152 != v33)
                      objc_enumerationMutation(v23);
                    v35 = *(void **)(*((_QWORD *)&v151 + 1) + 8 * (_QWORD)i);
                    v36 = objc_opt_class(NSDictionary);
                    if ((objc_opt_isKindOfClass(v35, v36) & 1) == 0)
                    {
                      v37 = 0;
LABEL_44:
                      v8 = 0;
                      goto LABEL_45;
                    }
                    v37 = objc_msgSend(v35, "objectForKeyedSubscript:", CFSTR("label"));
                    if (!v37)
                      goto LABEL_44;
                    v38 = objc_opt_class(NSString);
                    if ((objc_opt_isKindOfClass(v37, v38) & 1) == 0
                      || !objc_msgSend(v37, "isEqualToString:", CFSTR("Unparsed Data")))
                    {
                      goto LABEL_44;
                    }
                    v8 = objc_msgSend(v35, "objectForKeyedSubscript:", CFSTR("value"));
                    if (v8)
                    {
                      v39 = objc_opt_class(NSData);
                      if ((objc_opt_isKindOfClass(v8, v39) & 1) != 0
                        && !objc_msgSend(v8, "isEqualToData:", lockcrypto_query_oid_der_sequence_data_ASN1DERNull))
                      {

                        v100 = 0;
                        v6 = v128;
                        v7 = v133;
                        v101 = v130;
                        v17 = v131;
                        v19 = v127;
                        goto LABEL_176;
                      }
                    }
LABEL_45:

                  }
                  v32 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v151, &v159, 16);
                  if (!v32)
                  {
LABEL_47:

                    v22 = v132;
                    v7 = v133;
                    v20 = v130;
                    v17 = v131;
                    goto LABEL_49;
                  }
                }
              }
              v23 = v29;
            }
            else
            {
              v23 = 0;
            }
          }
        }
        else
        {
          v27 = 0;
        }
LABEL_49:

        v24 = (char *)v24 + 1;
      }
      while (v24 != v22);
      v40 = -[NSError countByEnumeratingWithState:objects:count:](v20, "countByEnumeratingWithState:objects:count:", &v155, &v162, 16);
      v22 = v40;
      if (!v40)
      {
LABEL_174:

        v99 = 0;
        v6 = v128;
        v19 = v127;
        goto LABEL_175;
      }
    }
  }
  v99 = createMobileActivationError((uint64_t)"lockcrypto_query_oid_der_sequence_data", 137, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy certificate properties."));
  v23 = 0;
LABEL_175:
  v101 = objc_retainAutorelease(v99);
  v8 = 0;
  v100 = v101;
LABEL_176:

  v9 = v100;
  if (!v8)
    goto LABEL_177;
LABEL_6:
  v10 = objc_retainAutorelease(v8);
  v149 = objc_msgSend(v10, "bytes");
  v150 = objc_msgSend(v10, "length");
  v11 = DERDecodeSeqInit((uint64_t)&v149, &v148, v147);
  if ((_DWORD)v11 == 2)
  {
    v11 = DERDecodeItem((uint64_t)&v149, (unint64_t *)&v145);
    if (!(_DWORD)v11 && (_QWORD)v145 == 4)
      v11 = DERDecodeSeqInit((uint64_t)&v145 + 8, &v148, v147);
  }
  if ((_DWORD)v11)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 267, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to intialize DER sequence: %d"), v11);
LABEL_12:
    v13 = MobileActivationError;

    goto LABEL_178;
  }
  if (v148 == 0x2000000000000010)
  {
    v102 = DERDecodeSeqNext(v147, (unint64_t *)&v145);
    v14 = 0;
    v129 = v6;
    v134 = v7;
    if ((_DWORD)v102 || !*((_QWORD *)&v145 + 1))
    {
      v15 = 0;
      v16 = 0;
LABEL_225:
      if ((_DWORD)v102 != 1)
      {
        v118 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 299, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode DER sequence: %d"), v102);

        v9 = v118;
      }
      v6 = v129;
      goto LABEL_228;
    }
    v16 = 0;
    v15 = 0;
    v14 = 0;
    while (1)
    {
      v103 = v14;
      v104 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (unint64_t)v145 & 0x5FFFFFFFFFFFFFFFLL);
      v14 = -[NSNumber stringValue](v104, "stringValue");

      if (!DERDecodeItem((uint64_t)&v145 + 8, (unint64_t *)&v143))
      {
        v145 = v143;
        v146 = v144;
      }
      v105 = v145 & 0x5FFFFFFFFFFFFFFFLL;
      if ((v145 & 0x5FFFFFFFFFFFFFFFLL) == 1)
      {
        v109 = DERParseBoolean((unsigned __int8 **)&v145 + 1, &v140);
        if ((_DWORD)v109)
        {
          v110 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 353, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode DER encoded ASN1_BOOLEAN: %d"), v109);
          goto LABEL_200;
        }
        v115 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v140);
      }
      else
      {
        if (v105 != 2)
        {
          if (v105 != 4)
            goto LABEL_211;

          if (v146)
          {
            v106 = 0;
            v107 = 0;
            while ((*(char *)(*((_QWORD *)&v145 + 1) + v106) & 0x80000000) == 0)
            {
              v106 = ++v107;
              if (v146 <= v107)
              {
                v108 = objc_alloc((Class)NSString);
                v16 = objc_msgSend(v108, "initWithBytes:length:encoding:", *((_QWORD *)&v145 + 1), v146, 1);
                if (v16)
                {
                  v15 = 0;
                  goto LABEL_204;
                }
                v112 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 326, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode DER encoded ANS1_OCTET_STRING."));

                v15 = 0;
                goto LABEL_201;
              }
            }
          }
          v113 = objc_alloc((Class)NSData);
          v15 = objc_msgSend(v113, "initWithBytes:length:", *((_QWORD *)&v145 + 1), v146);
          if (v15)
          {
            v16 = 0;
LABEL_204:
            if (v16)
              v114 = v16;
            else
              v114 = v15;
            objc_msgSend(v7, "setObject:forKeyedSubscript:", v114, v14);
            goto LABEL_211;
          }
          v112 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 332, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode DER encoded ANS1_OCTET_STRING."));

          v16 = 0;
          goto LABEL_201;
        }
        v111 = DERParseInteger64((char **)&v145 + 1, &v141);
        if ((_DWORD)v111)
        {
          v110 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 343, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode DER encoded ASN1_INTEGER: %d"), v111);
LABEL_200:
          v112 = v110;

LABEL_201:
          v9 = v112;
          goto LABEL_211;
        }
        v115 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v141);
      }
      v116 = v115;
      objc_msgSend(v7, "setObject:forKeyedSubscript:", v115, v14);

LABEL_211:
      v102 = DERDecodeSeqNext(v147, (unint64_t *)&v145);
      if ((_DWORD)v102 || !*((_QWORD *)&v145 + 1))
        goto LABEL_225;
    }
  }
  if (v148 != 0x2000000000000011)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 717, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Expected ASN1_CONSTR_SET or ASN1_CONSTR_SEQUENCE tag."));
    goto LABEL_12;
  }
  v134 = v7;
  v41 = a3;
  v42 = v6;
  v155 = 0uLL;
  v151 = 0uLL;
  v162 = 0;
  v163 = 0;
  v164 = 0;
  v43 = DERDecodeSeqNext(v147, (unint64_t *)&v145);
  v44 = 0;
  if ((_DWORD)v43 || (v45 = *((_QWORD *)&v145 + 1)) == 0)
  {
    v15 = 0;
    v16 = 0;
LABEL_218:
    if ((_DWORD)v43 == 1)
      goto LABEL_222;
    v126 = v43;
    v124 = CFSTR("Failed to decode DER sequence: %d");
    v125 = 468;
    goto LABEL_220;
  }
  v16 = 0;
  v15 = 0;
  v14 = 0;
  while (1)
  {
    *(_QWORD *)&v155 = v45;
    *((_QWORD *)&v155 + 1) = v146;
    v46 = DERDecodeSeqInit((uint64_t)&v155, &v148, &v151);
    if ((_DWORD)v46)
    {
      v121 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 479, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to intialize DER sequence: %d"), v46);

LABEL_241:
      v9 = v121;
      goto LABEL_223;
    }
    v6 = v42;
    a3 = v41;
    if (v148 != 0x2000000000000010)
    {
      v122 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 484, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Expected ASN1_CONSTR_SEQUENCE tag."), v126);
      goto LABEL_239;
    }
    v47 = DERDecodeSeqNext((unint64_t *)&v151, (unint64_t *)&v162);
    if ((_DWORD)v47 || !v163)
    {
      v122 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 492, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode DER sequence: %d"), v47);
      goto LABEL_239;
    }
    if (v162 != 22)
    {
      v122 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 497, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid DER tag."), v126);
      goto LABEL_239;
    }
    v48 = DERParseInteger((char **)&v163, &v142);
    if ((_DWORD)v48)
    {
      v122 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 503, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to parse DER integer: %d"), v48);
      goto LABEL_239;
    }
    if (v164 != 4)
      break;
    v49 = objc_alloc((Class)NSString);
    v44 = (NSString *)objc_msgSend(v49, "initWithBytes:length:encoding:", v163, v164, 1);

    if (!v44)
    {
      v121 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 514, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create string."));

      v14 = 0;
      goto LABEL_241;
    }
    v50 = DERDecodeSeqNext((unint64_t *)&v151, (unint64_t *)&v162);
    if ((_DWORD)v50 || !v163)
    {
      v126 = v50;
      v124 = CFSTR("Failed to decode DER sequence: %d");
      v125 = 520;
LABEL_220:
      v117 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", v125, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, v124, v126);

LABEL_221:
      v9 = v117;
LABEL_222:
      v14 = v44;
LABEL_223:
      v6 = v42;
      a3 = v41;
      goto LABEL_228;
    }
    if (v162 <= 1)
    {
      switch(v162)
      {
        case 0xA000000000000000:
          v60 = v134;
          v61 = &off_1002715B0;
          break;
        case 0xA000000000000001:
          v60 = v134;
          v61 = &off_1002715C8;
          break;
        case 1:
          v51 = DERParseBoolean(&v163, &v140);
          if (!(_DWORD)v51)
          {
            v52 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v140);
LABEL_93:
            v63 = v52;
            objc_msgSend(v134, "setObject:forKeyedSubscript:", v52, v44);

            goto LABEL_149;
          }
          v126 = v51;
          v124 = CFSTR("Failed to decode DER encoded ASN1_BOOLEAN: %d");
          v125 = 559;
          goto LABEL_220;
        default:
          goto LABEL_149;
      }
LABEL_148:
      objc_msgSend(v60, "setObject:forKeyedSubscript:", v61, v44);
      goto LABEL_149;
    }
    if (v162 == 2)
    {
      v62 = DERParseInteger64((char **)&v163, &v141);
      if (!(_DWORD)v62)
      {
        v52 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v141);
        goto LABEL_93;
      }
      v126 = v62;
      v124 = CFSTR("Failed to decode DER encoded ASN1_INTEGER: %d");
      v125 = 551;
      goto LABEL_220;
    }
    if (v162 != 0x2000000000000011)
    {
      if (v162 != 4)
        goto LABEL_149;

      if (v164)
      {
        v53 = 0;
        v54 = 0;
        while (((char)v163[v53] & 0x80000000) == 0)
        {
          v53 = ++v54;
          if (v164 <= v54)
          {
            v55 = DERDecodeItem((uint64_t)&v163, (unint64_t *)&v143);
            v56 = objc_alloc((Class)NSString);
            v57 = (unsigned __int8 **)&v143 + 1;
            if (v55)
              v57 = &v163;
            v58 = *v57;
            v59 = &v144;
            if (v55)
              v59 = &v164;
            v16 = objc_msgSend(v56, "initWithBytes:length:encoding:", v58, *v59, 1);
            if (!v16)
            {
              v124 = CFSTR("Failed to decode DER encoded ANS1_OCTET_STRING.");
              v125 = 536;
              goto LABEL_220;
            }
            goto LABEL_144;
          }
        }
      }
      v93 = objc_alloc((Class)NSData);
      v94 = objc_msgSend(v93, "initWithBytes:length:", v163, v164);

      if (!v94)
      {
        v117 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 542, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode DER encoded ANS1_OCTET_STRING."));

        v15 = 0;
        v16 = 0;
        goto LABEL_221;
      }
      v16 = 0;
      v15 = v94;
LABEL_144:
      if (v16)
        v61 = (_UNKNOWN **)v16;
      else
        v61 = (_UNKNOWN **)v15;
      v60 = v134;
      goto LABEL_148;
    }
    v64 = DERDecodeSeqContentInit((unint64_t *)&v163, (unint64_t *)&v151);
    if ((_DWORD)v64)
    {
      v126 = (uint64_t)v64;
      v124 = CFSTR("Failed to intialize DER sequence: %d");
      v125 = 571;
      goto LABEL_220;
    }
    v65 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(v134, "setObject:forKeyedSubscript:", v65, v44);

    v138 = 0;
    v139 = 0;
    v136 = 0;
    v137 = 0;
    v159 = 0;
    v160 = 0;
    v161 = 0;
    v66 = DERDecodeSeqNext((unint64_t *)&v151, (unint64_t *)&v162);
    if (!(_DWORD)v66)
    {
      v67 = v163;
      if (v163)
      {
        while (1)
        {
          v138 = v67;
          v139 = v164;
          v68 = DERDecodeSeqInit((uint64_t)&v138, &v148, &v136);
          if ((_DWORD)v68)
          {
            v96 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 601, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to intialize DER sequence: %d"), v68);
            goto LABEL_156;
          }
          if (v148 != 0x2000000000000010)
          {
            v96 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 606, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Expected ASN1_CONSTR_SEQUENCE tag."), v126);
            goto LABEL_156;
          }
          v69 = DERDecodeSeqNext(&v136, (unint64_t *)&v159);
          if ((_DWORD)v69 || !v160)
          {
            v96 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 614, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode DER sequence: %d"), v69);
            goto LABEL_156;
          }
          if (v159 != 22)
          {
            v96 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 619, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid DER tag."), v126);
            goto LABEL_156;
          }
          v70 = DERParseInteger((char **)&v160, &v142);
          if ((_DWORD)v70)
          {
            v96 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 625, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to parse DER integer: %d"), v70);
            goto LABEL_156;
          }
          if (v161 != 4)
          {
            v96 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 630, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid property key length: %ld"), v164);
            goto LABEL_156;
          }
          v71 = objc_alloc((Class)NSString);
          v72 = (NSError *)objc_msgSend(v71, "initWithBytes:length:encoding:", v160, v161, 1);
          if (!v72)
          {
            v96 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 636, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create string."), v126);
            goto LABEL_156;
          }
          v73 = v72;
          v74 = DERDecodeSeqNext(&v136, (unint64_t *)&v159);
          if ((_DWORD)v74 || !v160)
          {
            v98 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 644, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode DER sequence: %d"), v74);
LABEL_167:
            v97 = v98;

            goto LABEL_168;
          }
          if (v159 <= 0)
            break;
          switch(v159)
          {
            case 1:
              v85 = DERParseBoolean(&v160, &v140);
              if ((_DWORD)v85)
              {
                v98 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 683, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode DER encoded ASN1_BOOLEAN: %d"), v85);
                goto LABEL_167;
              }
              v86 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v140);
              break;
            case 2:
              v87 = DERParseInteger64((char **)&v160, &v141);
              if ((_DWORD)v87)
              {
                v98 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 675, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode DER encoded ASN1_INTEGER: %d"), v87);
                goto LABEL_167;
              }
              v86 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v141);
              break;
            case 4:

              if (v161)
              {
                v75 = 0;
                v76 = 0;
                while (((char)v160[v75] & 0x80000000) == 0)
                {
                  v75 = ++v76;
                  if (v161 <= v76)
                  {
                    v77 = DERDecodeItem((uint64_t)&v160, (unint64_t *)&v143);
                    v78 = objc_alloc((Class)NSString);
                    v79 = (unsigned __int8 **)&v143 + 1;
                    if (v77)
                      v79 = &v160;
                    v80 = *v79;
                    v81 = &v144;
                    if (v77)
                      v81 = &v161;
                    v16 = objc_msgSend(v78, "initWithBytes:length:encoding:", v80, *v81, 1);
                    if (!v16)
                    {
                      v98 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 660, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode DER encoded ANS1_OCTET_STRING."), v126);
                      goto LABEL_167;
                    }
                    goto LABEL_132;
                  }
                }
              }
              v89 = objc_alloc((Class)NSData);
              v90 = objc_msgSend(v89, "initWithBytes:length:", v160, v161);

              if (!v90)
              {
                v97 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 666, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode DER encoded ANS1_OCTET_STRING."));

                v15 = 0;
                v16 = 0;
LABEL_168:
                v9 = v73;
LABEL_157:

                v9 = v97;
                goto LABEL_149;
              }
              v16 = 0;
              v15 = v90;
LABEL_132:
              if (v16)
                v91 = (_UNKNOWN **)v16;
              else
                v91 = (_UNKNOWN **)v15;
              v82 = (NSNumber *)objc_msgSend(v134, "objectForKeyedSubscript:", v44);
              v83 = v82;
              v84 = v91;
LABEL_136:
              -[NSNumber setObject:forKeyedSubscript:](v82, "setObject:forKeyedSubscript:", v84, v73);
              goto LABEL_137;
            default:
              goto LABEL_138;
          }
          v83 = v86;
          v88 = objc_msgSend(v134, "objectForKeyedSubscript:", v44);
          objc_msgSend(v88, "setObject:forKeyedSubscript:", v83, v73);

LABEL_137:
LABEL_138:
          v92 = DERDecodeSeqNext(&v136, (unint64_t *)&v159);
          if ((_DWORD)v92 != 1)
          {
            v98 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 696, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("DER sequence is invalid: %d"), v92);
            goto LABEL_167;
          }

          v138 = 0;
          v139 = 0;
          v136 = 0;
          v137 = 0;
          v159 = 0;
          v160 = 0;
          v161 = 0;
          v66 = DERDecodeSeqNext((unint64_t *)&v151, (unint64_t *)&v162);
          if (!(_DWORD)v66)
          {
            v67 = v163;
            if (v163)
              continue;
          }
          goto LABEL_154;
        }
        if (v159 == 0xA000000000000000)
        {
          v82 = (NSNumber *)objc_msgSend(v134, "objectForKeyedSubscript:", v44);
          v83 = v82;
          v84 = &off_1002715B0;
        }
        else
        {
          if (v159 != 0xA000000000000001)
            goto LABEL_138;
          v82 = (NSNumber *)objc_msgSend(v134, "objectForKeyedSubscript:", v44);
          v83 = v82;
          v84 = &off_1002715C8;
        }
        goto LABEL_136;
      }
    }
LABEL_154:
    if ((_DWORD)v66 != 1)
    {
      v96 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 590, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode DER sequence: %d"), v66);
LABEL_156:
      v97 = v96;
      goto LABEL_157;
    }
LABEL_149:
    if (v9)
      goto LABEL_222;
    v95 = DERDecodeSeqNext((unint64_t *)&v151, (unint64_t *)&v162);
    if ((_DWORD)v95 != 1)
    {
      v9 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 710, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("DER sequence is invalid: %d"), v95);
      goto LABEL_222;
    }
    v155 = 0uLL;
    v151 = 0uLL;
    v162 = 0;
    v163 = 0;
    v164 = 0;
    v43 = DERDecodeSeqNext(v147, (unint64_t *)&v145);
    v9 = 0;
    if (!(_DWORD)v43)
    {
      v45 = *((_QWORD *)&v145 + 1);
      v14 = v44;
      if (*((_QWORD *)&v145 + 1))
        continue;
    }
    goto LABEL_218;
  }
  v122 = createMobileActivationError((uint64_t)"lockcrypto_query_certificate_properties", 508, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid property key length: %ld"), v164);
LABEL_239:
  v123 = v122;

  v9 = v123;
LABEL_228:
  v7 = v134;
  if (v9)
    goto LABEL_229;
LABEL_179:
  if (!v7)
    goto LABEL_230;
  if (objc_msgSend(v7, "count"))
    goto LABEL_232;
LABEL_229:

LABEL_230:
  v7 = 0;
  if (a3)
    *a3 = objc_retainAutorelease(v9);
LABEL_232:
  v119 = v7;

  return v119;
}

uint64_t lockcrypto_digest_data(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSError *v7;
  NSError *v8;
  NSError *MobileActivationError;
  uint64_t v10;

  v3 = a1;
  if (!v3 || !a2)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_digest_data", 744, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
LABEL_8:
    v8 = MobileActivationError;
    goto LABEL_9;
  }
  v4 = malloc_type_calloc(1uLL, 0x14uLL, 0xA7B68E2DuLL);
  if (!v4)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_digest_data", 750, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate memory."));
    goto LABEL_8;
  }
  v5 = v4;
  v6 = objc_retainAutorelease(v3);
  if (!CCDigest(8, objc_msgSend(v6, "bytes"), objc_msgSend(v6, "length"), v5))
  {
    *a2 = v5;
    v10 = 20;
    goto LABEL_10;
  }
  v7 = createMobileActivationError((uint64_t)"lockcrypto_digest_data", 761, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to digest data."));
  free(v5);
  v8 = v7;
LABEL_9:

  v10 = 0xFFFFFFFFLL;
LABEL_10:

  return v10;
}

char *lockcrypto_create_pem_from_key(__SecKey *a1, const char *a2, NSError **a3)
{
  CFDataRef v5;
  CFDataRef v6;
  char *v7;
  NSError *v8;
  NSError *v9;
  id v11;
  CFErrorRef error;

  error = 0;
  if (a1 && a2)
  {
    v5 = SecKeyCopyExternalRepresentation(a1, &error);
    v6 = v5;
    if (v5)
    {
      v11 = 0;
      v7 = lockcrypto_create_pem(v5, a2, &v11);
      v8 = (NSError *)v11;
      if (v7)
        goto LABEL_11;
      v9 = createMobileActivationError((uint64_t)"lockcrypto_create_pem_from_key", 800, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v8, CFSTR("Failed to create pem data."));

      v8 = v9;
      if (!a3)
        goto LABEL_10;
LABEL_8:
      v8 = objc_retainAutorelease(v8);
      v7 = 0;
      *a3 = v8;
      goto LABEL_11;
    }
    v8 = createMobileActivationError((uint64_t)"lockcrypto_create_pem_from_key", 794, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to convert SecKey to data."));
    if (a3)
      goto LABEL_8;
  }
  else
  {
    v8 = createMobileActivationError((uint64_t)"lockcrypto_create_pem_from_key", 788, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    v6 = 0;
    if (a3)
      goto LABEL_8;
  }
LABEL_10:
  v7 = 0;
LABEL_11:
  if (error)
    CFRelease(error);

  return v7;
}

char *lockcrypto_create_pem(void *a1, const char *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  id v7;
  char *v8;
  int v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  NSError *v14;
  char __src[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char __str[16];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v5 = a1;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  *(_OWORD *)__str = 0u;
  v18 = 0u;
  v19 = 0u;
  *(_OWORD *)__src = 0u;
  v17 = 0u;
  if (v5 && a2)
  {
    v6 = objc_autoreleasePoolPush();
    v7 = objc_msgSend(v5, "base64EncodedDataWithOptions:", 1);
    v8 = (char *)objc_msgSend(v7, "length");
    if (v8)
    {
      v9 = snprintf(__str, 0x50uLL, "-----BEGIN %s-----\n", a2);
      v10 = &v8[v9 + snprintf(__src, 0x50uLL, "\n-----END %s-----", a2)];
      v11 = (char *)malloc_type_malloc((size_t)(v10 + 1), 0xC5163643uLL);
      if (v11)
      {
        v12 = v11;
        v13 = &strcpy(v11, __str)[v9];
        objc_msgSend(v7, "getBytes:range:", v13, 0, v8);
        strcpy(&v8[(_QWORD)v13], __src);
        v8 = (char *)objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:", v12, v10);
        if (v8)
          goto LABEL_6;
        v14 = createMobileActivationError((uint64_t)"lockcrypto_create_pem", 1404, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create pem data."));
        free(v12);
      }
      else
      {
        v14 = createMobileActivationError((uint64_t)"lockcrypto_create_pem", 1391, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate buffer."));
        v8 = 0;
      }
LABEL_11:

      objc_autoreleasePoolPop(v6);
      if (!a3)
        goto LABEL_14;
      goto LABEL_12;
    }
LABEL_6:
    v14 = 0;
    goto LABEL_11;
  }
  v14 = createMobileActivationError((uint64_t)"lockcrypto_create_pem", 1376, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
  v8 = 0;
  if (!a3)
    goto LABEL_14;
LABEL_12:
  if (!v8)
    *a3 = objc_retainAutorelease(v14);
LABEL_14:

  return v8;
}

uint64_t lockcrypto_genenerate_keypair(uint64_t a1, _QWORD *a2, char **a3, _QWORD *a4)
{
  NSNumber *v7;
  NSDictionary *v8;
  __SecKey *v9;
  __SecKey *v10;
  __SecKey *v11;
  __SecKey *v12;
  char *v13;
  NSError *v14;
  NSError *v15;
  char *v16;
  NSError *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSError *v22;
  id v23;
  id v24;
  CFErrorRef error;
  _QWORD v26[2];
  _QWORD v27[2];

  error = 0;
  v27[0] = kSecAttrKeyTypeRSA;
  v26[0] = kSecAttrKeyType;
  v26[1] = kSecAttrKeySizeInBits;
  v7 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1);
  v27[1] = v7;
  v8 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 2);

  v9 = SecKeyCreateRandomKey((CFDictionaryRef)v8, &error);
  v10 = v9;
  if (!v9)
  {
    v17 = createMobileActivationError((uint64_t)"lockcrypto_genenerate_keypair", 835, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to generate private key."));
    v13 = 0;
    v12 = 0;
    if (!a4)
      goto LABEL_15;
    goto LABEL_14;
  }
  v11 = SecKeyCopyPublicKey(v9);
  v12 = v11;
  if (!v11)
  {
    v17 = createMobileActivationError((uint64_t)"lockcrypto_genenerate_keypair", 841, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query public key."));
    v13 = 0;
    if (!a4)
      goto LABEL_15;
    goto LABEL_14;
  }
  v24 = 0;
  v13 = lockcrypto_create_pem_from_key(v11, "RSA PUBLIC KEY", (NSError **)&v24);
  v14 = (NSError *)v24;
  if (!a2)
  {
    v15 = createMobileActivationError((uint64_t)"lockcrypto_genenerate_keypair", 847, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v14, CFSTR("Failed to create public key pem data."));

    v14 = v15;
  }
  v23 = v14;
  v16 = lockcrypto_create_pem_from_key(v10, "RSA PRIVATE KEY", (NSError **)&v23);
  v17 = (NSError *)v23;

  if (!v16)
  {
    v22 = createMobileActivationError((uint64_t)"lockcrypto_genenerate_keypair", 852, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v17, CFSTR("Failed to create private key pem data."));

    v17 = v22;
    if (!a4)
    {
LABEL_15:
      v16 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      if (!v12)
        goto LABEL_17;
      goto LABEL_16;
    }
LABEL_14:
    *a4 = objc_retainAutorelease(v17);
    goto LABEL_15;
  }
  if (a2)
    *a2 = objc_retainAutorelease(v13);
  if (a3)
  {
    v16 = objc_retainAutorelease(v16);
    *a3 = v16;
  }
  v18 = 1;
LABEL_16:
  CFRelease(v12);
  v19 = v16;
  v20 = v18;
LABEL_17:
  if (v10)
    CFRelease(v10);
  if (error)
    CFRelease(error);
  error = 0;

  return v20;
}

id lockcrypto_sign(__SecKey *a1, id a2, NSError **a3)
{
  id v5;
  void *v6;
  int v7;
  unsigned int v8;
  uint8_t *v9;
  OSStatus v10;
  NSError *v11;
  NSError *MobileActivationError;
  NSError *v13;
  void *v14;
  id v15;
  id v16;
  size_t sigLen;
  uint8_t *dataToSign;

  v5 = a2;
  v6 = v5;
  sigLen = 0;
  dataToSign = 0;
  if (!a1 || !v5)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_sign", 891, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    goto LABEL_9;
  }
  v7 = lockcrypto_digest_data(v5, &dataToSign);
  if (v7 <= 0)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_sign", 899, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to digest data."));
LABEL_9:
    v13 = MobileActivationError;
    v9 = 0;
    if (!a3)
      goto LABEL_16;
LABEL_10:
    v13 = objc_retainAutorelease(v13);
    v14 = 0;
    *a3 = v13;
    goto LABEL_17;
  }
  v8 = v7;
  sigLen = SecKeyGetBlockSize(a1);
  v9 = (uint8_t *)malloc_type_malloc(sigLen, 0x60EB051DuLL);
  if (v9)
  {
    v10 = SecKeyRawSign(a1, 0x8002u, dataToSign, v8, v9, &sigLen);
    if (v10)
    {
      v11 = createMobileActivationError((uint64_t)"lockcrypto_sign", 920, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to sign data: %ld"), v10);
    }
    else
    {
      v15 = objc_alloc((Class)NSData);
      v16 = objc_msgSend(v15, "initWithBytesNoCopy:length:", v9, sigLen);
      if (v16)
      {
        v14 = v16;
        v13 = 0;
        v9 = 0;
        goto LABEL_17;
      }
      v11 = createMobileActivationError((uint64_t)"lockcrypto_sign", 928, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to encode signature."));
    }
  }
  else
  {
    v11 = createMobileActivationError((uint64_t)"lockcrypto_sign", 909, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate memory."));
  }
  v13 = v11;
  if (a3)
    goto LABEL_10;
LABEL_16:
  v14 = 0;
LABEL_17:
  if (dataToSign)
    free(dataToSign);
  dataToSign = 0;
  if (v9)
    free(v9);

  return v14;
}

uint64_t lockcrypto_verify(__SecKey *a1, id a2, void *a3, NSError **a4)
{
  id v7;
  id v8;
  void *v9;
  int v10;
  unsigned int v11;
  id v12;
  const uint8_t *v13;
  id v14;
  uint64_t v15;
  __CFString *v16;
  uint64_t v17;
  NSError *MobileActivationError;
  NSError *v19;
  NSError *v20;
  uint64_t v21;
  uint64_t v23;
  uint8_t *signedData;

  v7 = a2;
  v8 = a3;
  v9 = v8;
  signedData = 0;
  if (a1 && v7 && v8)
  {
    v10 = lockcrypto_digest_data(v8, &signedData);
    if (v10 <= 0)
    {
      v16 = CFSTR("Invalid digest length.");
      v17 = 971;
    }
    else
    {
      v11 = v10;
      v12 = objc_retainAutorelease(v7);
      v13 = (const uint8_t *)objc_msgSend(v12, "bytes");
      v14 = objc_msgSend(v12, "length");
      v15 = SecKeyRawVerify(a1, 0x8002u, signedData, v11, v13, (size_t)v14);
      if (!(_DWORD)v15)
      {
        v20 = 0;
        v21 = 1;
        goto LABEL_14;
      }
      v23 = v15;
      v16 = CFSTR("Failed to verify signature: %d");
      v17 = 987;
    }
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_verify", v17, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, v16, v23);
  }
  else
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_verify", 963, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
  }
  v19 = MobileActivationError;
  v20 = v19;
  if (a4)
  {
    v20 = objc_retainAutorelease(v19);
    v21 = 0;
    *a4 = v20;
  }
  else
  {
    v21 = 0;
  }
LABEL_14:
  if (signedData)
    free(signedData);
  signedData = 0;

  return v21;
}

id lockcrypto_extract_public_key_size(__SecCertificate *a1, _QWORD *a2)
{
  __SecKey *v3;
  __SecKey *v4;
  CFDataRef v5;
  CFDataRef v6;
  id v7;
  NSError *v8;
  NSError *MobileActivationError;
  CFErrorRef error;

  error = 0;
  v3 = SecCertificateCopyKey(a1);
  v4 = v3;
  if (v3)
  {
    v5 = SecKeyCopyExternalRepresentation(v3, &error);
    if (v5)
    {
      v6 = v5;
      v7 = -[__CFData length](v5, "length");

      v8 = 0;
      if (!a2)
        goto LABEL_10;
      goto LABEL_8;
    }
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_extract_public_key_size", 1025, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to copy public key data."));
  }
  else
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_extract_public_key_size", 1019, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy public key."));
  }
  v8 = MobileActivationError;
  v7 = 0;
  if (!a2)
    goto LABEL_10;
LABEL_8:
  if (!(_DWORD)v7)
    *a2 = objc_retainAutorelease(v8);
LABEL_10:
  if (error)
    CFRelease(error);
  error = 0;
  if (v4)
    CFRelease(v4);

  return v7;
}

SecKeyRef lockcrypto_extract_public(void *a1, NSError **a2)
{
  id v3;
  SecPolicyRef BasicX509;
  NSError *MobileActivationError;
  NSError *v6;
  SecKeyRef v7;
  SecKeyRef v8;
  SecTrustRef trust;

  v3 = a1;
  trust = 0;
  if (!v3)
  {
    v6 = createMobileActivationError((uint64_t)"lockcrypto_extract_public", 1052, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    BasicX509 = 0;
    if (a2)
      goto LABEL_12;
LABEL_6:
    v7 = 0;
    goto LABEL_13;
  }
  BasicX509 = SecPolicyCreateBasicX509();
  if (BasicX509)
  {
    if (SecTrustCreateWithCertificates(v3, BasicX509, &trust))
    {
      MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_extract_public", 1067, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create trust."));
    }
    else
    {
      v8 = SecTrustCopyPublicKey(trust);
      if (v8)
      {
        v7 = v8;
        v6 = 0;
        goto LABEL_13;
      }
      MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_extract_public", 1076, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy public key."));
    }
  }
  else
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_extract_public", 1058, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create policy."));
  }
  v6 = MobileActivationError;
  if (!a2)
    goto LABEL_6;
LABEL_12:
  v6 = objc_retainAutorelease(v6);
  v7 = 0;
  *a2 = v6;
LABEL_13:
  if (trust)
    CFRelease(trust);
  trust = 0;
  if (BasicX509)
    CFRelease(BasicX509);

  return v7;
}

SecKeyRef lockcrypto_extract_public_with_intermediate(void *a1, NSError **a2)
{
  id v3;
  const void *v4;
  NSError *MobileActivationError;
  NSError *v6;
  SecKeyRef v7;
  OSStatus v8;
  uint64_t v9;
  void *v10;
  SecKeyRef v12;
  SecTrustResultType result;
  SecTrustRef trust;

  v3 = a1;
  trust = 0;
  result = kSecTrustResultInvalid;
  if (!v3)
  {
    v6 = createMobileActivationError((uint64_t)"lockcrypto_extract_public_with_intermediate", 1101, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v4 = 0;
    if (a2)
    {
LABEL_9:
      v6 = objc_retainAutorelease(v6);
      v7 = 0;
      *a2 = v6;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v4 = (const void *)SecPolicyCreateiPhoneActivation();
  if (!v4)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_extract_public_with_intermediate", 1107, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create policy."));
    goto LABEL_8;
  }
  if (SecTrustCreateWithCertificates(v3, v4, &trust))
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_extract_public_with_intermediate", 1112, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create trust."));
    goto LABEL_8;
  }
  v8 = SecTrustEvaluate(trust, &result);
  v9 = result;
  if (v8 || result != kSecTrustResultProceed && result != kSecTrustResultUnspecified)
  {
    v10 = (void *)SecTrustCopyFailureDescription(trust);
    v6 = createMobileActivationError((uint64_t)"lockcrypto_extract_public_with_intermediate", 1120, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to evaluate trust: %d (%@)"), v9, v10);

    if (a2)
      goto LABEL_9;
LABEL_12:
    v7 = 0;
    goto LABEL_13;
  }
  v12 = SecTrustCopyPublicKey(trust);
  if (!v12)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_extract_public_with_intermediate", 1129, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy public key."));
LABEL_8:
    v6 = MobileActivationError;
    if (a2)
      goto LABEL_9;
    goto LABEL_12;
  }
  v7 = v12;
  v6 = 0;
LABEL_13:
  if (trust)
    CFRelease(trust);
  trust = 0;
  if (v4)
    CFRelease(v4);

  return v7;
}

char *lockcrypto_create_cert_request(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  const void *v11;
  id v12;
  void *v13;
  SecKeyRef v14;
  id v15;
  void *CertificateRequestWithParameters;
  void *v17;
  char *v18;
  NSError *v19;
  NSError *v20;
  char *v21;
  id v23;
  id v24;
  id v25;
  _QWORD v26[7];
  uint64_t v27;
  char v28;
  const __CFString *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  const __CFString *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  const __CFString *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  const __CFString *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  const __CFString *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = v9;
  v57 = kSecOidCommonName;
  v58 = SecASN1PrintableString;
  v59 = v7;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v51 = kSecOidCountryName;
  v52 = SecASN1PrintableString;
  v53 = CFSTR("US");
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v45 = kSecOidStateProvinceName;
  v46 = SecASN1PrintableString;
  v47 = CFSTR("CA");
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v39 = kSecOidLocalityName;
  v40 = SecASN1PrintableString;
  v41 = CFSTR("Cupertino");
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v33 = kSecOidOrganization;
  v34 = SecASN1PrintableString;
  v35 = CFSTR("Apple Inc.");
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v26[6] = 0;
  v27 = kSecOidOrganizationalUnit;
  v28 = SecASN1PrintableString;
  v29 = CFSTR("iPhone");
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v26[0] = &v57;
  v26[1] = &v51;
  v26[2] = &v45;
  v26[3] = &v39;
  v26[4] = &v33;
  v26[5] = &v27;
  if (!v8 || !v9)
  {
    v19 = createMobileActivationError((uint64_t)"lockcrypto_create_cert_request", 1166, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    v11 = 0;
LABEL_11:
    v14 = 0;
    goto LABEL_12;
  }
  v25 = 0;
  v11 = (const void *)lockcrypto_public_key_from_pem_data(v8, (NSError **)&v25);
  v12 = v25;
  v13 = v12;
  if (!v11)
  {
    v19 = createMobileActivationError((uint64_t)"lockcrypto_create_cert_request", 1172, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v12, CFSTR("Failed to retrieve public key from data."));

    goto LABEL_11;
  }
  v24 = v12;
  v14 = lockcrypto_private_key_from_pem_data(v10, (NSError **)&v24);
  v15 = v24;

  if (!v14)
  {
    v19 = createMobileActivationError((uint64_t)"lockcrypto_create_cert_request", 1178, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v15, CFSTR("Failed to retrieve private key from data."));

LABEL_12:
    v17 = 0;
    if (!a4)
      goto LABEL_14;
    goto LABEL_13;
  }
  CertificateRequestWithParameters = (void *)SecGenerateCertificateRequestWithParameters(v26, 0, v11, v14);
  v17 = CertificateRequestWithParameters;
  if (!CertificateRequestWithParameters)
  {
    v19 = createMobileActivationError((uint64_t)"lockcrypto_create_cert_request", 1184, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to generate certificate request."));

    if (!a4)
    {
LABEL_14:
      v18 = 0;
      v21 = 0;
      if (!v11)
        goto LABEL_16;
      goto LABEL_15;
    }
LABEL_13:
    *a4 = objc_retainAutorelease(v19);
    goto LABEL_14;
  }
  v23 = v15;
  v18 = lockcrypto_create_pem(CertificateRequestWithParameters, "CERTIFICATE REQUEST", &v23);
  v19 = (NSError *)v23;

  if (!v18)
  {
    v20 = createMobileActivationError((uint64_t)"lockcrypto_create_cert_request", 1190, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v19, CFSTR("Failed to encode the certificate request."));

    v19 = v20;
    if (!a4)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_15:
  CFRelease(v11);
  v21 = v18;
LABEL_16:
  if (v14)
    CFRelease(v14);

  return v21;
}

uint64_t lockcrypto_public_key_from_pem_data(void *a1, NSError **a2)
{
  id v3;
  void *v4;
  id v5;
  NSError *v6;
  uint64_t RSAPublicKey;
  uint64_t v8;
  NSError *MobileActivationError;
  NSError *v10;
  id v12;

  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    v6 = createMobileActivationError((uint64_t)"lockcrypto_public_key_from_pem_data", 1808, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v5 = 0;
    if (!a2)
    {
LABEL_10:
      v8 = 0;
      goto LABEL_11;
    }
LABEL_6:
    v6 = objc_retainAutorelease(v6);
    v8 = 0;
    *a2 = v6;
    goto LABEL_11;
  }
  v12 = 0;
  v5 = lockcrypto_decode_pem(v3, "RSA PUBLIC KEY", (NSError **)&v12);
  v6 = (NSError *)v12;
  if (!v5)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_public_key_from_pem_data", 1814, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v6, CFSTR("Failed to decode data."));
    goto LABEL_9;
  }
  v5 = objc_retainAutorelease(v5);
  RSAPublicKey = SecKeyCreateRSAPublicKey(kCFAllocatorDefault, objc_msgSend(v5, "bytes"), objc_msgSend(v5, "length"), 1);
  if (!RSAPublicKey)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_public_key_from_pem_data", 1820, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create public key from data."));
LABEL_9:
    v10 = MobileActivationError;

    v6 = v10;
    if (!a2)
      goto LABEL_10;
    goto LABEL_6;
  }
  v8 = RSAPublicKey;
LABEL_11:

  return v8;
}

SecKeyRef lockcrypto_private_key_from_pem_data(void *a1, NSError **a2)
{
  id v3;
  void *v4;
  const __CFData *v5;
  NSError *v6;
  NSDictionary *v7;
  SecKeyRef v8;
  SecKeyRef v9;
  NSError *v10;
  id v12;
  CFErrorRef error;
  _QWORD v14[2];
  _QWORD v15[2];

  v3 = a1;
  v4 = v3;
  error = 0;
  if (v3)
  {
    v12 = 0;
    v5 = (const __CFData *)lockcrypto_decode_pem(v3, "RSA PRIVATE KEY", (NSError **)&v12);
    v6 = (NSError *)v12;
    if (v5)
    {
      v14[0] = kSecAttrKeyType;
      v14[1] = kSecAttrKeyClass;
      v15[0] = kSecAttrKeyTypeRSA;
      v15[1] = kSecAttrKeyClassPrivate;
      v7 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 2);
      v8 = SecKeyCreateWithData(v5, (CFDictionaryRef)v7, &error);
      if (v8)
      {
        v9 = v8;
        goto LABEL_11;
      }
      v10 = createMobileActivationError((uint64_t)"lockcrypto_private_key_from_pem_data", 1785, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to create private key from key data."));

    }
    else
    {
      v10 = createMobileActivationError((uint64_t)"lockcrypto_private_key_from_pem_data", 1775, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v6, CFSTR("Failed to decode data."));

      v7 = 0;
    }
    v6 = v10;
    if (a2)
      goto LABEL_10;
LABEL_6:
    v9 = 0;
    goto LABEL_11;
  }
  v6 = createMobileActivationError((uint64_t)"lockcrypto_private_key_from_pem_data", 1769, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
  v5 = 0;
  v7 = 0;
  if (!a2)
    goto LABEL_6;
LABEL_10:
  v6 = objc_retainAutorelease(v6);
  v9 = 0;
  *a2 = v6;
LABEL_11:
  if (error)
    CFRelease(error);
  error = 0;

  return v9;
}

uint64_t lockcrypto_verify_device_cert(uint64_t a1, uint64_t a2, uint64_t a3, NSError **a4)
{
  NSArray *v6;
  const void *FactoryDeviceCertificate;
  NSArray *v8;
  OSStatus v9;
  uint64_t v10;
  void *v11;
  NSError *v12;
  uint64_t v13;
  NSError *MobileActivationError;
  SecTrustResultType result;
  SecTrustRef trust;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  trust = 0;
  result = kSecTrustResultInvalid;
  if (!a1 || !a2)
  {
    v12 = createMobileActivationError((uint64_t)"lockcrypto_verify_device_cert", 1222, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid input(s)."));
    v6 = 0;
    FactoryDeviceCertificate = 0;
    v8 = 0;
    if (a4)
      goto LABEL_9;
LABEL_13:
    v13 = 0;
    goto LABEL_14;
  }
  if (a3)
  {
    v20[0] = a1;
    v20[1] = a2;
    v20[2] = a3;
    v6 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v20, 3);
    FactoryDeviceCertificate = (const void *)SecPolicyCreateiPhoneDeviceCertificate();
    v8 = 0;
    if (!SecTrustCreateWithCertificates(v6, FactoryDeviceCertificate, &trust))
      goto LABEL_5;
    goto LABEL_11;
  }
  v19 = a1;
  v6 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v19, 1);
  v18 = a2;
  v8 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1);
  FactoryDeviceCertificate = (const void *)SecPolicyCreateFactoryDeviceCertificate();
  if (SecTrustCreateWithCertificates(v6, FactoryDeviceCertificate, &trust))
  {
LABEL_11:
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_verify_device_cert", 1236, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to trust."));
    goto LABEL_12;
  }
  if (v8 && SecTrustSetAnchorCertificates(trust, (CFArrayRef)v8))
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_verify_device_cert", 1241, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to set anchor certs."));
LABEL_12:
    v12 = MobileActivationError;
    if (a4)
      goto LABEL_9;
    goto LABEL_13;
  }
LABEL_5:
  v9 = SecTrustEvaluate(trust, &result);
  v10 = result;
  if (v9 || (v12 = 0, v13 = 1, result != kSecTrustResultProceed) && result != kSecTrustResultUnspecified)
  {
    v11 = (void *)SecTrustCopyFailureDescription(trust);
    v12 = createMobileActivationError((uint64_t)"lockcrypto_verify_device_cert", 1249, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to evaluate trust: %d (%@)"), v10, v11);

    if (!a4)
      goto LABEL_13;
LABEL_9:
    v12 = objc_retainAutorelease(v12);
    v13 = 0;
    *a4 = v12;
  }
LABEL_14:
  if (FactoryDeviceCertificate)
    CFRelease(FactoryDeviceCertificate);
  if (trust)
    CFRelease(trust);
  trust = 0;

  return v13;
}

uint64_t lockcrypto_verify_factory_ucrt(__SecCertificate *a1, uint64_t a2, id a3, _QWORD *a4)
{
  id v7;
  void *v8;
  NSArray *v9;
  NSArray *v10;
  const void *AppleFDRProvisioning;
  NSError *MobileActivationError;
  NSError *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  OSStatus v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  NSError *v25;
  NSError *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  CFTypeRef cf;
  SecTrustRef trust;
  SecTrustResultType result;
  uint64_t v33;
  __SecCertificate *v34;

  v7 = a3;
  v8 = v7;
  result = kSecTrustResultInvalid;
  cf = 0;
  trust = 0;
  if (!a1 || !a2 || !v7)
  {
    v13 = createMobileActivationError((uint64_t)"lockcrypto_verify_factory_ucrt", 1289, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    v9 = 0;
    v10 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    AppleFDRProvisioning = 0;
    if (!a4)
      goto LABEL_15;
    goto LABEL_14;
  }
  v34 = a1;
  v9 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v34, 1);
  v33 = a2;
  v10 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v33, 1);
  AppleFDRProvisioning = (const void *)SecPolicyCreateAppleFDRProvisioning();
  if (!AppleFDRProvisioning)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_verify_factory_ucrt", 1298, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create policy."));
    goto LABEL_12;
  }
  if (SecTrustCreateWithCertificates(v9, AppleFDRProvisioning, &trust))
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_verify_factory_ucrt", 1303, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create trust."));
LABEL_12:
    v13 = MobileActivationError;
    goto LABEL_13;
  }
  if (SecTrustSetAnchorCertificates(trust, (CFArrayRef)v10))
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_verify_factory_ucrt", 1308, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to set anchors."));
    goto LABEL_12;
  }
  v20 = SecTrustEvaluate(trust, &result);
  v21 = result;
  if (v20 || result != kSecTrustResultProceed && result != kSecTrustResultUnspecified)
  {
    v22 = (void *)SecTrustCopyFailureDescription(trust);
    v13 = createMobileActivationError((uint64_t)"lockcrypto_verify_factory_ucrt", 1316, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to evaluate trust: %d (%@)"), v21, v22);

LABEL_13:
    v14 = 0;
    v15 = 0;
    v16 = 0;
    if (!a4)
      goto LABEL_15;
    goto LABEL_14;
  }
  v23 = SecCertificateCopyCommonName(a1, (CFStringRef *)&cf);
  if ((_DWORD)v23)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_verify_factory_ucrt", 1322, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy common name: %d"), v23);
    goto LABEL_12;
  }
  v29 = 0;
  v14 = libaks_system_key_get_public(1, 1, (NSError **)&v29);
  v13 = (NSError *)v29;
  if (!v14)
  {
    v25 = createMobileActivationError((uint64_t)"lockcrypto_verify_factory_ucrt", 1328, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v13, CFSTR("Failed to query SIK public key."));

    v15 = 0;
LABEL_35:
    v16 = 0;
    goto LABEL_39;
  }
  v15 = objc_msgSend(v14, "hexString");
  if (!v15)
  {
    v25 = createMobileActivationError((uint64_t)"lockcrypto_verify_factory_ucrt", 1334, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate string from data."));

    goto LABEL_35;
  }
  v24 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("sik-%@-%@"), v8, v15);
  v16 = v24;
  if (!v24)
  {
    v26 = createMobileActivationError((uint64_t)"lockcrypto_verify_factory_ucrt", 1340, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create string."), v27, v28);
LABEL_38:
    v25 = v26;

LABEL_39:
    v13 = v25;
    if (!a4)
    {
LABEL_15:
      v17 = 0;
      v18 = 0;
      if (!AppleFDRProvisioning)
        goto LABEL_17;
      goto LABEL_16;
    }
LABEL_14:
    *a4 = objc_retainAutorelease(v13);
    goto LABEL_15;
  }
  if ((objc_msgSend(v24, "isEqualToString:", cf) & 1) == 0)
  {
    v26 = createMobileActivationError((uint64_t)"lockcrypto_verify_factory_ucrt", 1345, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid factory UCRT common name (actual, expected): %@, %@"), cf, v16);
    goto LABEL_38;
  }
  v17 = 1;
LABEL_16:
  CFRelease(AppleFDRProvisioning);
  v18 = v17;
LABEL_17:
  if (trust)
    CFRelease(trust);
  trust = 0;
  if (cf)
    CFRelease(cf);

  return v18;
}

id lockcrypto_decode_error(void *a1, NSError **a2)
{
  id v3;
  void *v4;
  id v5;
  const char *v6;
  id v7;
  size_t v8;
  int v9;
  char *v10;
  char *v11;
  id v12;
  id v13;
  void *v14;
  NSError *v15;
  NSError *MobileActivationError;
  __CFString *v17;
  uint64_t v18;
  NSError *v19;
  char __little[16];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char __str[16];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v3 = a1;
  v4 = v3;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  *(_OWORD *)__str = 0u;
  v23 = 0u;
  v24 = 0u;
  *(_OWORD *)__little = 0u;
  v22 = 0u;
  if (!v3)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_decode_error", 1435, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    goto LABEL_12;
  }
  v5 = objc_retainAutorelease(v3);
  v6 = (const char *)objc_msgSend(v5, "bytes");
  v7 = objc_msgSend(v5, "length");
  if (!v7)
  {
    v17 = CFSTR("Invalid data length.");
    v18 = 1442;
LABEL_11:
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_decode_error", v18, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, v17);
LABEL_12:
    v15 = MobileActivationError;
    v12 = 0;
    if (!a2)
    {
LABEL_17:
      v14 = 0;
      goto LABEL_18;
    }
LABEL_13:
    v15 = objc_retainAutorelease(v15);
    v14 = 0;
    *a2 = v15;
    goto LABEL_18;
  }
  v8 = (size_t)v7;
  v9 = snprintf(__str, 0x50uLL, "-----BEGIN %s-----\n", "ERROR");
  snprintf(__little, 0x50uLL, "\n-----END %s-----", "ERROR");
  v10 = strnstr(v6, __str, v8);
  v11 = strnstr(v6, __little, v8);
  if (!v10 || !v11)
  {
    v17 = CFSTR("Invalid error data.");
    v18 = 1452;
    goto LABEL_11;
  }
  v12 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", &v10[v9], v11 - &v10[v9], 0);
  if (!v12)
  {
    v19 = createMobileActivationError((uint64_t)"lockcrypto_decode_error", 1460, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode data."));
    goto LABEL_16;
  }
  v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v12, 4);
  if (!v13)
  {
    v19 = createMobileActivationError((uint64_t)"lockcrypto_decode_error", 1466, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create string."));
LABEL_16:
    v15 = v19;
    if (!a2)
      goto LABEL_17;
    goto LABEL_13;
  }
  v14 = v13;
  v15 = 0;
LABEL_18:

  return v14;
}

id lockcrypto_decode_pem(void *a1, const char *a2, NSError **a3)
{
  id v5;
  void *v6;
  id v7;
  const char *v8;
  size_t v9;
  size_t v10;
  int v11;
  char *v12;
  char *v13;
  id v14;
  id v15;
  void *v16;
  NSError *v17;
  NSError *MobileActivationError;
  __CFString *v19;
  uint64_t v20;
  char __little[16];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char __str[16];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v5 = a1;
  v6 = v5;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  *(_OWORD *)__str = 0u;
  v24 = 0u;
  v25 = 0u;
  *(_OWORD *)__little = 0u;
  v23 = 0u;
  if (!v5 || !a2)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_decode_pem", 1489, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid inputs."));
    goto LABEL_12;
  }
  v7 = objc_retainAutorelease(v5);
  v8 = (const char *)objc_msgSend(v7, "bytes");
  v9 = (size_t)objc_msgSend(v7, "length");
  if ((v9 & 0x8000000000000000) != 0)
  {
    v19 = CFSTR("Invalid data length.");
    v20 = 1496;
LABEL_11:
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_decode_pem", v20, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, v19);
LABEL_12:
    v17 = MobileActivationError;
    v14 = 0;
    if (!a3)
    {
LABEL_15:
      v16 = 0;
      goto LABEL_16;
    }
LABEL_13:
    v17 = objc_retainAutorelease(v17);
    v16 = 0;
    *a3 = v17;
    goto LABEL_16;
  }
  v10 = v9;
  v11 = snprintf(__str, 0x50uLL, "-----BEGIN %s-----\n", a2);
  snprintf(__little, 0x50uLL, "\n-----END %s-----", a2);
  v12 = strnstr(v8, __str, v10);
  v13 = strnstr(v8, __little, v10);
  if (!v12 || !v13)
  {
    v19 = CFSTR("Invalid pem data.");
    v20 = 1505;
    goto LABEL_11;
  }
  v14 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", &v12[v11], v13 - &v12[v11], 0);
  v15 = objc_msgSend(objc_alloc((Class)NSData), "initWithBase64EncodedData:options:", v14, 1);
  if (!v15)
  {
    v17 = createMobileActivationError((uint64_t)"lockcrypto_decode_pem", 1516, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode data."));
    if (!a3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v16 = v15;
  v17 = 0;
LABEL_16:

  return v16;
}

id lockcrypto_decode_pems(void *a1, const char *a2, NSError **a3)
{
  id v5;
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  id v10;
  int64_t v11;
  NSError *v12;
  void *v13;
  int v14;
  int v15;
  char *v16;
  char *v17;
  id v18;
  const char *v19;
  NSError **v21;
  char __little[16];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char __str[16];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v5 = a1;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  *(_OWORD *)__str = 0u;
  v24 = 0u;
  v25 = 0u;
  *(_OWORD *)__little = 0u;
  v23 = 0u;
  if (!v5 || !a2)
  {
    v12 = createMobileActivationError((uint64_t)"lockcrypto_decode_pems", 1547, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid input(s)."));
    v10 = 0;
LABEL_13:
    v6 = 0;
    goto LABEL_23;
  }
  v6 = objc_alloc_init((Class)NSMutableArray);
  if (!v6)
  {
    v12 = createMobileActivationError((uint64_t)"lockcrypto_decode_pems", 1553, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate array."));
    v10 = 0;
    goto LABEL_23;
  }
  v7 = objc_retainAutorelease(v5);
  v8 = (const char *)objc_msgSend(v7, "bytes");
  v9 = (uint64_t)objc_msgSend(v7, "length");
  v10 = 0;
  if (v8)
  {
    v11 = v9;
    v12 = 0;
    if (v9 >= 1)
    {
      v21 = a3;
      v13 = 0;
      while (1)
      {
        v14 = snprintf(__str, 0x50uLL, "-----BEGIN %s-----\n", a2);
        v15 = snprintf(__little, 0x50uLL, "\n-----END %s-----", a2);
        v16 = strnstr(v8, __str, v11);
        v17 = strnstr(v8, __little, v11);
        if (!v16)
          break;
        v12 = (NSError *)v17;
        if (!v17)
          goto LABEL_18;
        v18 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", &v16[v14], v17 - &v16[v14], 0);
        v10 = objc_msgSend(objc_alloc((Class)NSData), "initWithBase64EncodedData:options:", v18, 1);

        if (!v10)
        {
          v12 = createMobileActivationError((uint64_t)"lockcrypto_decode_pems", 1582, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode data."));

          goto LABEL_19;
        }
        objc_msgSend(v6, "addObject:", v10);
        v19 = (char *)v12 + v15;
        v11 = &v8[v11] - v19;

        v8 = v19;
        v13 = v10;
        if (v11 <= 0)
        {
          v12 = 0;
          goto LABEL_19;
        }
      }
      v12 = 0;
LABEL_18:
      v10 = v13;
LABEL_19:
      a3 = v21;
    }
  }
  else
  {
    v12 = 0;
  }
  if (!objc_msgSend(v6, "count"))
  {

    if (a3)
    {
      v12 = objc_retainAutorelease(v12);
      v6 = 0;
      *a3 = v12;
      goto LABEL_23;
    }
    goto LABEL_13;
  }
LABEL_23:

  return v6;
}

id lockcrypto_decode_pem_trailing_data(void *a1, uint64_t a2, NSError **a3)
{
  id v5;
  id v6;
  id v7;
  _BYTE *v8;
  uint64_t v9;
  NSError *MobileActivationError;
  NSError *v11;
  void *v12;
  _BYTE *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;

  v5 = a1;
  if (!v5 || !a2)
  {
    v11 = createMobileActivationError((uint64_t)"lockcrypto_decode_pem_trailing_data", 1615, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    v7 = 0;
    v6 = 0;
    if (!a3)
      goto LABEL_10;
    goto LABEL_18;
  }
  v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v5, 4);
  if (!v6)
  {
    v11 = createMobileActivationError((uint64_t)"lockcrypto_decode_pem_trailing_data", 1621, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create string from pem data."));
    v7 = 0;
    if (!a3)
      goto LABEL_10;
LABEL_18:
    v11 = objc_retainAutorelease(v11);
    v12 = 0;
    *a3 = v11;
    goto LABEL_19;
  }
  v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("\n-----END %s-----"), a2);
  if (v7)
  {
    v8 = objc_msgSend(v6, "rangeOfString:", v7);
    if (v8 == (_BYTE *)0x7FFFFFFFFFFFFFFFLL)
    {
      MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_decode_pem_trailing_data", 1633, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("String does not exist."));
    }
    else
    {
      v13 = v8;
      v14 = v9;
      if (v8 >= objc_msgSend(v5, "length") || &v13[v14] >= objc_msgSend(v5, "length"))
      {
        MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_decode_pem_trailing_data", 1638, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid or no trailing data."));
      }
      else
      {
        v15 = objc_alloc((Class)NSData);
        v16 = objc_retainAutorelease(v5);
        v17 = objc_msgSend(v15, "initWithBytes:length:", &v13[(_QWORD)objc_msgSend(v16, "bytes") + v14], (_BYTE *)objc_msgSend(v16, "length") - &v13[v14]);
        if (v17)
        {
          v12 = v17;
          v11 = 0;
          goto LABEL_19;
        }
        MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_decode_pem_trailing_data", 1644, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to encode data."));
      }
    }
  }
  else
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_decode_pem_trailing_data", 1627, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create string."));
  }
  v11 = MobileActivationError;
  if (a3)
    goto LABEL_18;
LABEL_10:
  v12 = 0;
LABEL_19:

  return v12;
}

id lockcrypto_trailing_data_from_cert_pem_data(void *a1, NSError **a2)
{
  id v3;
  void *v4;
  id v5;
  NSError *v6;
  NSError *v7;
  id v9;

  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    v6 = createMobileActivationError((uint64_t)"lockcrypto_trailing_data_from_cert_pem_data", 1664, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    if (!a2)
      goto LABEL_4;
    goto LABEL_6;
  }
  v9 = 0;
  v5 = lockcrypto_decode_pem_trailing_data(v3, (uint64_t)"CERTIFICATE", (NSError **)&v9);
  v6 = (NSError *)v9;
  if (!v5)
  {
    v7 = createMobileActivationError((uint64_t)"lockcrypto_trailing_data_from_cert_pem_data", 1670, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v6, CFSTR("Failed to retrieve trailing pem data."));

    v6 = v7;
    if (!a2)
    {
LABEL_4:
      v5 = 0;
      goto LABEL_7;
    }
LABEL_6:
    v6 = objc_retainAutorelease(v6);
    v5 = 0;
    *a2 = v6;
  }
LABEL_7:

  return v5;
}

uint64_t lockcrypto_identity_from_pem_data(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  SecCertificateRef v8;
  id v9;
  void *v10;
  SecKeyRef v11;
  NSError *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSError *MobileActivationError;
  NSError *v18;
  id v19;
  id v20;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!v5 || !v6)
  {
    v12 = createMobileActivationError((uint64_t)"lockcrypto_identity_from_pem_data", 1692, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    v8 = 0;
    goto LABEL_9;
  }
  v20 = 0;
  v8 = lockcrypto_cert_from_pem_data(v5, (NSError **)&v20);
  v9 = v20;
  v10 = v9;
  if (!v8)
  {
    v12 = createMobileActivationError((uint64_t)"lockcrypto_identity_from_pem_data", 1698, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v9, CFSTR("Failed to get certificate from pem data."));

LABEL_9:
    v11 = 0;
    if (!a3)
      goto LABEL_11;
    goto LABEL_10;
  }
  v19 = v9;
  v11 = lockcrypto_private_key_from_pem_data(v7, (NSError **)&v19);
  v12 = (NSError *)v19;

  if (!v11)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_identity_from_pem_data", 1704, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v12, CFSTR("Failed to get private key from pem data."));
    goto LABEL_18;
  }
  v13 = SecIdentityCreate(0, v8, v11);
  if (!v13)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_identity_from_pem_data", 1710, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create identity from certificate/private key."));
LABEL_18:
    v18 = MobileActivationError;

    v12 = v18;
    if (!a3)
    {
LABEL_11:
      v14 = 0;
      v15 = 0;
      if (!v11)
        goto LABEL_13;
      goto LABEL_12;
    }
LABEL_10:
    *a3 = objc_retainAutorelease(v12);
    goto LABEL_11;
  }
  v14 = v13;
LABEL_12:
  CFRelease(v11);
  v15 = v14;
LABEL_13:
  if (v8)
    CFRelease(v8);

  return v15;
}

SecCertificateRef lockcrypto_cert_from_pem_data(void *a1, NSError **a2)
{
  id v3;
  void *v4;
  const __CFData *v5;
  NSError *v6;
  SecCertificateRef v7;
  SecCertificateRef v8;
  NSError *MobileActivationError;
  NSError *v10;
  id v12;

  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    v6 = createMobileActivationError((uint64_t)"lockcrypto_cert_from_pem_data", 1734, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v5 = 0;
    if (!a2)
    {
LABEL_10:
      v8 = 0;
      goto LABEL_11;
    }
LABEL_6:
    v6 = objc_retainAutorelease(v6);
    v8 = 0;
    *a2 = v6;
    goto LABEL_11;
  }
  v12 = 0;
  v5 = (const __CFData *)lockcrypto_decode_pem(v3, "CERTIFICATE", (NSError **)&v12);
  v6 = (NSError *)v12;
  if (!v5)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_cert_from_pem_data", 1740, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v6, CFSTR("Failed to decode data."));
    goto LABEL_9;
  }
  v7 = SecCertificateCreateWithData(kCFAllocatorDefault, v5);
  if (!v7)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_cert_from_pem_data", 1746, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create certificate with cert data."));
LABEL_9:
    v10 = MobileActivationError;

    v6 = v10;
    if (!a2)
      goto LABEL_10;
    goto LABEL_6;
  }
  v8 = v7;
LABEL_11:

  return v8;
}

NSDate *lockcrypto_copy_certificate_validity_date(uint64_t a1, int a2, NSError **a3)
{
  __CFString *v4;
  uint64_t v5;
  NSError *MobileActivationError;
  NSDate *v7;
  NSDate *v8;
  NSError *v9;
  NSError *v10;

  if (!a1)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_copy_certificate_validity_date", 1842, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    goto LABEL_12;
  }
  if (!a2)
  {
    if (SecCertificateNotValidBefore() == 0.0)
    {
      v4 = CFSTR("Failed to obtain 'not valid before' date.");
      v5 = 1855;
      goto LABEL_11;
    }
LABEL_8:
    v7 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
    if (v7)
    {
      v8 = v7;
      v9 = 0;
      goto LABEL_15;
    }
    v4 = CFSTR("Failed to convert validity date.");
    v5 = 1862;
    goto LABEL_11;
  }
  if (SecCertificateNotValidAfter() != 0.0)
    goto LABEL_8;
  v4 = CFSTR("Failed to obtain 'not valid after' date.");
  v5 = 1849;
LABEL_11:
  MobileActivationError = createMobileActivationError((uint64_t)"lockcrypto_copy_certificate_validity_date", v5, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, v4);
LABEL_12:
  v10 = MobileActivationError;
  v9 = v10;
  if (a3)
  {
    v9 = objc_retainAutorelease(v10);
    v8 = 0;
    *a3 = v9;
  }
  else
  {
    v8 = 0;
  }
LABEL_15:

  return v8;
}

void __lockcrypto_query_oid_der_sequence_data_block_invoke(id a1)
{
  NSData *v1;
  void *v2;

  v1 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &unk_1001FDF6E, 2);
  v2 = (void *)lockcrypto_query_oid_der_sequence_data_ASN1DERNull;
  lockcrypto_query_oid_der_sequence_data_ASN1DERNull = (uint64_t)v1;

}

BOOL device_supports_mfi_certificates()
{
  DeviceType *v0;
  _BOOL8 v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType device_supports_mfi_certificates](v0, "device_supports_mfi_certificates");

  return v1;
}

BOOL device_supports_eda_certificates()
{
  DeviceType *v0;
  _BOOL8 v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType device_supports_eda_certificates](v0, "device_supports_eda_certificates");

  return v1;
}

uint64_t platform_supports_activation()
{
  return os_variant_is_darwinos(objc_msgSend(CFSTR("com.apple.mobileactivationd"), "UTF8String")) ^ 1;
}

BOOL device_supports_dcrt_oob()
{
  DeviceType *v0;
  _BOOL8 v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType device_supports_dcrt_oob](v0, "device_supports_dcrt_oob");

  return v1;
}

BOOL is_prodfused_demoted()
{
  DeviceType *v0;
  _BOOL8 v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType is_prodfused_demoted](v0, "is_prodfused_demoted");

  return v1;
}

BOOL is_devfused_undemoted()
{
  DeviceType *v0;
  _BOOL8 v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType is_devfused_undemoted](v0, "is_devfused_undemoted");

  return v1;
}

BOOL is_dev_board()
{
  DeviceType *v0;
  _BOOL8 v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType is_dev_board](v0, "is_dev_board");

  return v1;
}

BOOL is_product_fpga()
{
  DeviceType *v0;
  _BOOL8 v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType is_fpga](v0, "is_fpga");

  return v1;
}

NSString *get_device_type()
{
  DeviceType *v0;
  NSString *v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType product_type](v0, "product_type");

  return v1;
}

BOOL is_product_pod()
{
  DeviceType *v0;
  _BOOL8 v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType is_ipod](v0, "is_ipod");

  return v1;
}

BOOL is_product_pad()
{
  DeviceType *v0;
  _BOOL8 v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType is_ipad](v0, "is_ipad");

  return v1;
}

BOOL is_product_phone()
{
  DeviceType *v0;
  _BOOL8 v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType is_iphone](v0, "is_iphone");

  return v1;
}

BOOL is_product_cellular()
{
  DeviceType *v0;
  _BOOL8 v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType has_baseband](v0, "has_baseband");

  return v1;
}

BOOL is_product_audio_accessory()
{
  DeviceType *v0;
  _BOOL8 v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType is_audio_accessory](v0, "is_audio_accessory");

  return v1;
}

BOOL is_internal_build()
{
  DeviceType *v0;
  _BOOL8 v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType is_internal_build](v0, "is_internal_build");

  return v1;
}

BOOL has_internal_diagnostics()
{
  DeviceType *v0;
  _BOOL8 v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType has_internal_diagnostics](v0, "has_internal_diagnostics");

  return v1;
}

NSString *get_device_class()
{
  DeviceType *v0;
  NSString *v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType device_class](v0, "device_class");

  return v1;
}

BOOL use_hactivation()
{
  DeviceType *v0;
  _BOOL8 v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType should_hactivate](v0, "should_hactivate");

  return v1;
}

id copy_bootsession_uuid()
{
  DeviceType *v0;
  id v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType copyBootSessionUUID](v0, "copyBootSessionUUID");

  return v1;
}

NSString *copy_soc_generation()
{
  DeviceType *v0;
  NSString *v1;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = -[DeviceType soc_generation](v0, "soc_generation");

  return v1;
}

id copy_trusted_local_policy_hash()
{
  DeviceType *v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  _BYTE *v6;
  _BYTE *v7;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = objc_msgSend(CFSTR("IODeviceTree"), "stringByAppendingString:", CFSTR(":/chosen"));
  v2 = -[DeviceType copyDeviceTreeProperty:key:](v0, "copyDeviceTreeProperty:key:", v1, CFSTR("trusted-boot-policy-measurement"));

  v3 = isNSData(v2);
  if (!v3)
    goto LABEL_8;
  v4 = v3;
  v5 = objc_msgSend(v2, "length");

  if (!v5)
    goto LABEL_9;
  v6 = malloc_type_calloc(1uLL, (size_t)objc_msgSend(v2, "length"), 0xDA89FFE2uLL);
  if (!v6)
  {
LABEL_8:
    v5 = 0;
    goto LABEL_9;
  }
  v7 = v6;
  objc_msgSend(v2, "getBytes:length:", v6, objc_msgSend(v2, "length"));
  if (!*v7 && !memcmp(v7, v7 + 1, (size_t)objc_msgSend(v2, "length") - 1))
    v5 = 0;
  else
    v5 = v2;
  free(v7);
LABEL_9:

  return v5;
}

id copy_sfr_manifest()
{
  DeviceType *v0;
  id v1;
  id v2;
  DeviceType *v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v0 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v1 = objc_msgSend(CFSTR("IODeviceTree"), "stringByAppendingString:", CFSTR(":/chosen/iBoot"));
  v2 = -[DeviceType copyDeviceTreeInt:key:defaultValue:](v0, "copyDeviceTreeInt:key:defaultValue:", v1, CFSTR("sfr-manifest-size"), 0);

  if (!v2 || !objc_msgSend(v2, "unsignedIntValue"))
  {
    v6 = 0;
    goto LABEL_8;
  }
  v3 = +[DeviceType sharedInstance](DeviceType, "sharedInstance");
  v4 = objc_msgSend(CFSTR("IODeviceTree"), "stringByAppendingString:", CFSTR(":/chosen/iBoot"));
  v5 = -[DeviceType copyDeviceTreeProperty:key:](v3, "copyDeviceTreeProperty:key:", v4, CFSTR("sfr-manifest-data"));

  v6 = isNSData(v5);
  if (v6)
  {
    v7 = objc_msgSend(v5, "length");

    if (!v7)
    {
      v6 = 0;
      goto LABEL_9;
    }
    v6 = objc_msgSend(v5, "subdataWithRange:", 0, objc_msgSend(v2, "unsignedIntValue"));

    if (v6)
    {
      v6 = v6;
      v5 = v6;
      goto LABEL_9;
    }
LABEL_8:
    v5 = 0;
  }
LABEL_9:

  return v6;
}

BOOL bridge_init_server(void *a1, void *a2)
{
  id v3;
  id v4;
  dispatch_queue_t v5;
  void *remote_service_listener;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a1;
  v4 = a2;
  v5 = dispatch_queue_create("com.apple.mobileactivationd.bridge", 0);
  remote_service_listener = (void *)xpc_remote_connection_create_remote_service_listener(objc_msgSend(CFSTR("com.apple.mobileactivationd.bridge"), "UTF8String"), v5, 0);
  if (remote_service_listener)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3254779904;
    v8[2] = __bridge_init_server_block_invoke;
    v8[3] = &__block_descriptor_48_e8_32s40s_e33_v16__0__NSObject_OS_xpc_object__8l;
    v9 = v4;
    v10 = v3;
    xpc_remote_connection_set_event_handler(remote_service_listener, v8);
    xpc_remote_connection_activate(remote_service_listener);

  }
  else
  {
    maLog((uint64_t)"bridge_init_server", 0, CFSTR("Failed to create remote listener."));
  }

  return remote_service_listener != 0;
}

void __bridge_init_server_block_invoke(uint64_t a1, id a2)
{
  id v3;
  char *v4;
  id v5;
  id v6;

  v3 = a2;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_remote_connection)
  {
    xpc_remote_connection_set_target_queue(v3, *(_QWORD *)(a1 + 32));
    v5 = *(id *)(a1 + 40);
    v6 = v3;
    xpc_remote_connection_set_event_handler();
    xpc_remote_connection_activate(v6);

  }
  else
  {
    v4 = xpc_copy_description(v3);
    maLog((uint64_t)"bridge_init_server_block_invoke", 0, CFSTR("Unexpected event: %s"), v4);
    if (v4)
      free(v4);
  }

}

void __bridge_init_server_block_invoke_2(uint64_t a1, id a2)
{
  id v3;
  __CFString *v4;
  NSError *MobileActivationError;
  NSError *v6;
  void *v7;
  id v8;
  id v9;
  __CFString *v10;
  NSError *v11;
  BOOL v12;
  NSDictionary *v13;
  NSString *p_isa;
  __CFString *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  char isKindOfClass;
  NSString *v22;
  NSDictionary *v23;
  void *v24;
  uint64_t v25;
  xpc_object_t reply;
  void *v27;
  xpc_object_t v28;
  xpc_object_t v29;
  id v30;
  __CFString *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  NSError *v38;
  id v39;
  id v40;
  id v41;
  __CFString *v42;
  void *v43;
  void *v44;
  __CFString *v45;
  NSString *v46;

  v3 = a2;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_error)
  {
    v10 = 0;
    v11 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    goto LABEL_33;
  }
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_dictionary)
  {
    v4 = CFSTR("Error");
    MobileActivationError = createMobileActivationError((uint64_t)"bridge_init_server_block_invoke_2", 126, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid XPC message."));
LABEL_4:
    v6 = MobileActivationError;
    v44 = 0;
    v7 = 0;
    goto LABEL_5;
  }
  v28 = xpc_dictionary_get_value(v3, (const char *)objc_msgSend(CFSTR("BridgeXPCRequestEncodedDictionary"), "UTF8String"));
  if (!v28)
  {
    v4 = CFSTR("Error");
    MobileActivationError = createMobileActivationError((uint64_t)"bridge_init_server_block_invoke_2", 133, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("XPC message missing key (%@) : %@"), CFSTR("BridgeXPCRequestEncodedDictionary"), v3);
    goto LABEL_4;
  }
  v29 = v28;
  v7 = (void *)_CFXPCCreateCFObjectFromXPCObject();
  v30 = isNSDictionary(v7);

  v44 = v29;
  if (v30)
  {
    v31 = (__CFString *)objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("HostProcessName"));
    v32 = isNSString(v31);

    if (!v32)
    {

      v31 = CFSTR("unknown");
    }
    v33 = objc_msgSend(*(id *)(a1 + 32), "dark");
    data_ark_set(v33, 0, CFSTR("HostProcessName"), v31, 0);

    v34 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("Command"));
    v35 = isNSString(v34);

    v41 = v34;
    v42 = v31;
    if (v35)
    {
      v36 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("Options"));
      v40 = v36;
      if (v36 && (v37 = isNSDictionary(v36), v37, !v37))
      {
        v4 = CFSTR("Error");
        v38 = createMobileActivationError((uint64_t)"bridge_init_server_block_invoke_2", 161, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid key: %@"), CFSTR("Options"));
      }
      else
      {
        maLog((uint64_t)"bridge_init_server_block_invoke_2", 0, CFSTR("Host connection (%@): %@"), v31, v34);
        v4 = CFSTR("Error");
        v38 = createMobileActivationError((uint64_t)"bridge_init_server_block_invoke_2", 432, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Received unknown command: %@"), v34);
      }
      v6 = v38;
    }
    else
    {
      v4 = CFSTR("Error");
      v6 = createMobileActivationError((uint64_t)"bridge_init_server_block_invoke_2", 154, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Request missing required key: %@"), CFSTR("Command"));
      v40 = 0;
    }
    goto LABEL_6;
  }
  v4 = CFSTR("Error");
  v6 = createMobileActivationError((uint64_t)"bridge_init_server_block_invoke_2", 140, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create dictionary from XPC message."));
LABEL_5:
  v40 = 0;
  v41 = 0;
  v42 = 0;
LABEL_6:
  v8 = *(id *)(a1 + 40);
  v9 = v3;
  v10 = v4;
  v11 = v6;
  if (-[__CFString isEqualToString:](v10, "isEqualToString:", v10))
    maLog((uint64_t)"send_reply", 0, CFSTR("Error occurred processing host-bridge request: %@"), v11);
  if (v11)
    v12 = v10 == 0;
  else
    v12 = 1;
  v43 = v7;
  if (v12)
  {
    v13 = (NSDictionary *)&__NSDictionary0__struct;
    p_isa = (NSString *)&v11->super.isa;
  }
  else
  {
    v20 = objc_opt_class(NSError);
    isKindOfClass = objc_opt_isKindOfClass(v11, v20);
    p_isa = (NSString *)&v11->super.isa;
    if ((isKindOfClass & 1) != 0)
    {
      v22 = -[NSError localizedDescription](v11, "localizedDescription");
      v23 = -[NSError userInfo](v11, "userInfo");
      p_isa = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ (%@)"), v22, v23);

    }
    v45 = v10;
    v46 = p_isa;
    v13 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1);
  }
  v24 = (void *)_CFXPCCreateXPCObjectFromCFObject(v13);
  if (v24)
  {
    v25 = a1;
    reply = xpc_dictionary_create_reply(v9);
    if (reply)
    {
      v27 = reply;
      xpc_dictionary_set_value(reply, (const char *)objc_msgSend(CFSTR("BridgeXPCResponseEncodedDictionary"), "UTF8String"), v24);
      xpc_remote_connection_send_message(v8, v27);

    }
    else
    {
      maLog((uint64_t)"send_reply", 0, CFSTR("Failed to create XPC reply."));
    }
    a1 = v25;
  }
  else
  {
    maLog((uint64_t)"send_reply", 0, CFSTR("Failed to create XPC dictionary."));
  }

  v18 = v43;
  v19 = v44;
  v17 = v41;
  v15 = v42;
  v16 = v40;
LABEL_33:
  v39 = objc_msgSend(*(id *)(a1 + 32), "dark");
  data_ark_remove(v39, 0, CFSTR("HostProcessName"));

}

BOOL isAutomaticTimeEnabled()
{
  return &_TMIsAutomaticTimeEnabled && TMIsAutomaticTimeEnabled() != 0;
}

uint64_t copyRTCResetCount()
{
  if (&_TMGetRTCResetCount)
    return TMGetRTCResetCount();
  else
    return 0;
}

double copyMonotonicClockTimeInterval(_QWORD *a1)
{
  double v2;
  double v3;
  NSError *v4;

  if (&_TMGetKernelMonotonicClock && (v2 = TMGetKernelMonotonicClock(), v2 > 0.0))
  {
    v3 = v2;
    v4 = 0;
    if (!a1)
      goto LABEL_8;
  }
  else
  {
    v4 = createMobileActivationError((uint64_t)"copyMonotonicClockTimeInterval", 78, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query monotonic clock time."));
    v3 = 0.0;
    if (!a1)
      goto LABEL_8;
  }
  if (v3 == 0.0)
    *a1 = objc_retainAutorelease(v4);
LABEL_8:

  return v3;
}

id parseDERCertificatesFromChain(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  int v10;
  id v11;
  NSError *v12;
  NSError *MobileActivationError;
  unint64_t v15;
  _OWORD v16[3];

  v3 = a1;
  v4 = v3;
  memset(v16, 0, sizeof(v16));
  v15 = 0;
  if (!v3)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"parseDERCertificatesFromChain", 106, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    goto LABEL_13;
  }
  v5 = objc_retainAutorelease(v3);
  v6 = objc_msgSend(v5, "bytes");
  v7 = CTParseCertificateSet((unint64_t)v6, (unint64_t)objc_msgSend(v5, "length") + (_QWORD)v6, v16, 3, &v15);
  if ((_DWORD)v7 || !v15)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"parseDERCertificatesFromChain", 115, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to parse certificate set: 0x%08x"), v7);
LABEL_13:
    v12 = MobileActivationError;
    v8 = 0;
    if (!a2)
      goto LABEL_16;
    goto LABEL_14;
  }
  v8 = objc_alloc_init((Class)NSMutableArray);
  if (v8)
  {
    if (v15)
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", *(_QWORD *)&v16[v9], *((_QWORD *)&v16[v9] + 1));
        objc_msgSend(v8, "setObject:atIndexedSubscript:", v11, v9);

        v9 = ++v10;
      }
      while (v15 > v10);
    }
    v8 = v8;
  }
  v12 = 0;
  if (a2)
  {
LABEL_14:
    if (!v8)
      *a2 = objc_retainAutorelease(v12);
  }
LABEL_16:

  return v8;
}

uint64_t evaluateUCRTTrust(void *a1, void *a2, NSError **a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  NSError *MobileActivationError;
  NSError *v13;
  uint64_t v14;

  v5 = a1;
  v6 = a2;
  if (v5)
  {
    v7 = objc_retainAutorelease(v5);
    v8 = objc_msgSend(v7, "bytes");
    v9 = objc_msgSend(v7, "length");
    v10 = objc_retainAutorelease(v6);
    v11 = CTEvaluateUcrtTestRoot((unint64_t)v8, (uint64_t)v9, (uint64_t)objc_msgSend(v10, "bytes"), (uint64_t)objc_msgSend(v10, "length"), 0, 0);
    if (!(_DWORD)v11)
    {
      v13 = 0;
      v14 = 1;
      goto LABEL_9;
    }
    MobileActivationError = createMobileActivationError((uint64_t)"evaluateUCRTTrust", 153, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to evaluate trust: 0x%08x"), v11);
  }
  else
  {
    MobileActivationError = createMobileActivationError((uint64_t)"evaluateUCRTTrust", 147, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
  }
  v13 = MobileActivationError;
  if (a3)
  {
    v13 = objc_retainAutorelease(v13);
    v14 = 0;
    *a3 = v13;
  }
  else
  {
    v14 = 0;
  }
LABEL_9:

  return v14;
}

uint64_t evaluateUCRTTrustWithCerts(__SecCertificate *a1, __SecCertificate *a2, __SecCertificate *a3, int a4, id a5, _QWORD *a6)
{
  NSDate *v11;
  NSDate *v12;
  NSError *MobileActivationError;
  id v14;
  CFDataRef v15;
  CFDataRef v16;
  CFDataRef v17;
  __SecKey *v18;
  char v19;
  NSError *v20;
  uint64_t v21;
  uint64_t v22;
  NSError *v24;
  id v25;
  CFErrorRef error;

  v11 = (NSDate *)a5;
  v12 = v11;
  error = 0;
  if (!a1 || !a2 || !a3)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"evaluateUCRTTrustWithCerts", 180, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
LABEL_21:
    v20 = MobileActivationError;
    v14 = 0;
LABEL_22:
    v17 = 0;
LABEL_23:
    v15 = 0;
LABEL_24:
    v16 = 0;
    goto LABEL_25;
  }
  if (v11)
  {
    if (!a4)
      goto LABEL_12;
  }
  else
  {
    v12 = +[NSDate date](NSDate, "date");
    if (!a4)
      goto LABEL_12;
  }
  -[NSDate timeIntervalSinceReferenceDate](v12, "timeIntervalSinceReferenceDate");
  if (!SecCertificateIsValid(a1)
    || (-[NSDate timeIntervalSinceReferenceDate](v12, "timeIntervalSinceReferenceDate"),
        !SecCertificateIsValid(a2))
    || (-[NSDate timeIntervalSinceReferenceDate](v12, "timeIntervalSinceReferenceDate"),
        (SecCertificateIsValid(a3) & 1) == 0))
  {
    MobileActivationError = createMobileActivationError((uint64_t)"evaluateUCRTTrustWithCerts", 192, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Certificate is expired."));
    goto LABEL_21;
  }
LABEL_12:
  v14 = objc_alloc_init((Class)NSMutableData);
  if (!v14)
  {
    v20 = createMobileActivationError((uint64_t)"evaluateUCRTTrustWithCerts", 201, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate data."));
    goto LABEL_22;
  }
  v15 = SecCertificateCopyData(a1);
  if (!v15)
  {
    v20 = createMobileActivationError((uint64_t)"evaluateUCRTTrustWithCerts", 207, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy certificate."));
    v17 = 0;
    goto LABEL_24;
  }
  objc_msgSend(v14, "appendData:", v15);
  v16 = SecCertificateCopyData(a2);

  if (!v16)
  {
    v20 = createMobileActivationError((uint64_t)"evaluateUCRTTrustWithCerts", 215, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy certificate."));
    v17 = 0;
LABEL_37:
    v15 = 0;
    goto LABEL_25;
  }
  objc_msgSend(v14, "appendData:", v16);
  v17 = SecCertificateCopyData(a3);

  if (!v17)
  {
    v20 = createMobileActivationError((uint64_t)"evaluateUCRTTrustWithCerts", 223, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy certificate."));
    goto LABEL_23;
  }
  objc_msgSend(v14, "appendData:", v17);
  v18 = SecCertificateCopyKey(a3);
  v16 = v18;
  if (!v18)
  {
    v20 = createMobileActivationError((uint64_t)"evaluateUCRTTrustWithCerts", 237, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy public key."));
    goto LABEL_37;
  }
  v15 = SecKeyCopyExternalRepresentation(v18, &error);
  if (v15)
  {
    v25 = 0;
    v19 = evaluateUCRTTrust(v14, v15, (NSError **)&v25);
    v20 = (NSError *)v25;
    if ((v19 & 1) != 0)
    {
      v21 = 1;
LABEL_28:
      CFRelease(v16);
      v22 = v21;
      goto LABEL_29;
    }
    v24 = createMobileActivationError((uint64_t)"evaluateUCRTTrustWithCerts", 250, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v20, CFSTR("Failed to verify UCRT."));

    v20 = v24;
  }
  else
  {
    v20 = createMobileActivationError((uint64_t)"evaluateUCRTTrustWithCerts", 243, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to copy public key data."));
  }
LABEL_25:
  if (a6)
    *a6 = objc_retainAutorelease(v20);
  v21 = 0;
  v22 = 0;
  if (v16)
    goto LABEL_28;
LABEL_29:
  if (error)
    CFRelease(error);

  return v22;
}

uint64_t evaluateBAATrust(void *a1, void *a2, int a3, NSError **a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  unint64_t v15;
  NSError *MobileActivationError;
  NSError *v17;
  uint64_t v18;

  v7 = a1;
  v8 = a2;
  if (v7)
  {
    v9 = objc_retainAutorelease(v7);
    v10 = objc_msgSend(v9, "bytes");
    v11 = objc_msgSend(v9, "length");
    v12 = objc_retainAutorelease(v8);
    v13 = objc_msgSend(v12, "bytes");
    v14 = objc_msgSend(v12, "length");
    if (a3)
    {
      v15 = CTEvaluateBAASystemTestRoot((unint64_t)v10, (uint64_t)v11, (uint64_t)v13, (uint64_t)v14, 0, 0, 0);
      if ((_DWORD)v15)
      {
LABEL_4:
        MobileActivationError = createMobileActivationError((uint64_t)"evaluateBAATrust", 286, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to evaluate trust: 0x%08x"), v15);
        goto LABEL_6;
      }
    }
    else
    {
      v15 = CTEvaluateBAAUserTestRoot((unint64_t)v10, (uint64_t)v11, (uint64_t)v13, (uint64_t)v14, 0, 0, 0);
      if ((_DWORD)v15)
        goto LABEL_4;
    }
    v17 = 0;
    v18 = 1;
    goto LABEL_11;
  }
  MobileActivationError = createMobileActivationError((uint64_t)"evaluateBAATrust", 276, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
LABEL_6:
  v17 = MobileActivationError;
  if (a4)
  {
    v17 = objc_retainAutorelease(v17);
    v18 = 0;
    *a4 = v17;
  }
  else
  {
    v18 = 0;
  }
LABEL_11:

  return v18;
}

uint64_t evaluateBAATrustWithCerts(__SecCertificate *a1, __SecCertificate *a2, __SecCertificate *a3, int a4, int a5, id a6, _QWORD *a7)
{
  NSDate *v13;
  NSDate *v14;
  NSError *MobileActivationError;
  id v16;
  CFDataRef v17;
  CFDataRef v18;
  CFDataRef v19;
  CFDataRef v20;
  __SecKey *v21;
  __SecKey *v22;
  char v23;
  NSError *v24;
  uint64_t v25;
  uint64_t v26;
  NSError *v28;
  NSError *v29;
  id v30;
  CFErrorRef error;

  v13 = (NSDate *)a6;
  v14 = v13;
  error = 0;
  if (!a1 || !a2 || !a3)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"evaluateBAATrustWithCerts", 313, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
LABEL_21:
    v24 = MobileActivationError;
    v16 = 0;
LABEL_22:
    v20 = 0;
LABEL_23:
    v19 = 0;
LABEL_24:
    v22 = 0;
    goto LABEL_25;
  }
  if (v13)
  {
    if (!a5)
      goto LABEL_12;
  }
  else
  {
    v14 = +[NSDate date](NSDate, "date");
    if (!a5)
      goto LABEL_12;
  }
  -[NSDate timeIntervalSinceReferenceDate](v14, "timeIntervalSinceReferenceDate");
  if (!SecCertificateIsValid(a1)
    || (-[NSDate timeIntervalSinceReferenceDate](v14, "timeIntervalSinceReferenceDate"),
        !SecCertificateIsValid(a2))
    || (-[NSDate timeIntervalSinceReferenceDate](v14, "timeIntervalSinceReferenceDate"),
        (SecCertificateIsValid(a3) & 1) == 0))
  {
    MobileActivationError = createMobileActivationError((uint64_t)"evaluateBAATrustWithCerts", 325, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Certificate is expired."));
    goto LABEL_21;
  }
LABEL_12:
  v16 = objc_alloc_init((Class)NSMutableData);
  if (!v16)
  {
    v28 = createMobileActivationError((uint64_t)"evaluateBAATrustWithCerts", 334, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate data."));
LABEL_34:
    v24 = v28;
    goto LABEL_22;
  }
  v17 = SecCertificateCopyData(a1);
  if (!v17)
  {
    v28 = createMobileActivationError((uint64_t)"evaluateBAATrustWithCerts", 340, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy certificate."));
    goto LABEL_34;
  }
  v18 = v17;
  objc_msgSend(v16, "appendData:", v17);
  v19 = SecCertificateCopyData(a2);

  if (!v19)
  {
    v24 = createMobileActivationError((uint64_t)"evaluateBAATrustWithCerts", 348, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy certificate."));
    v20 = 0;
    goto LABEL_24;
  }
  objc_msgSend(v16, "appendData:", v19);
  v20 = SecCertificateCopyData(a3);

  if (!v20)
  {
    v24 = createMobileActivationError((uint64_t)"evaluateBAATrustWithCerts", 356, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy certificate."));
    goto LABEL_23;
  }
  objc_msgSend(v16, "appendData:", v20);
  v21 = SecCertificateCopyKey(a3);
  v22 = v21;
  if (v21)
  {
    v19 = SecKeyCopyExternalRepresentation(v21, &error);
    if (v19)
    {
      v30 = 0;
      v23 = evaluateBAATrust(v16, v19, a4, (NSError **)&v30);
      v24 = (NSError *)v30;
      if ((v23 & 1) != 0)
      {
        v25 = 1;
LABEL_28:
        CFRelease(v22);
        v26 = v25;
        goto LABEL_29;
      }
      v29 = createMobileActivationError((uint64_t)"evaluateBAATrustWithCerts", 383, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v24, CFSTR("Failed to verify BAA certificate."));

      v24 = v29;
    }
    else
    {
      v24 = createMobileActivationError((uint64_t)"evaluateBAATrustWithCerts", 376, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to copy public key data."));
    }
  }
  else
  {
    v24 = createMobileActivationError((uint64_t)"evaluateBAATrustWithCerts", 370, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy public key."));
    v19 = 0;
  }
LABEL_25:
  if (a7)
    *a7 = objc_retainAutorelease(v24);
  v25 = 0;
  v26 = 0;
  if (v22)
    goto LABEL_28;
LABEL_29:
  if (error)
    CFRelease(error);

  return v26;
}

uint64_t evaluateAppleSSLTrust(void *a1, void *a2, uint64_t a3, NSError **a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSError *MobileActivationError;
  NSError *v18;

  v7 = a1;
  v8 = a2;
  if (v7)
  {
    v9 = objc_retainAutorelease(v7);
    v10 = objc_msgSend(v9, "bytes");
    v11 = objc_msgSend(v9, "length");
    v12 = objc_retainAutorelease(v8);
    v13 = objc_msgSend(v12, "UTF8String");
    v14 = objc_msgSend(v12, "length");
    v15 = 1;
    v16 = CTEvaluateAppleSSLWithOptionalTemporalCheck((unint64_t)v10, (uint64_t)v11, (uint64_t)v13, (uint64_t)v14, a3, 0, 1);
    if (!(_DWORD)v16)
    {
      v18 = 0;
      goto LABEL_9;
    }
    MobileActivationError = createMobileActivationError((uint64_t)"evaluateAppleSSLTrust", 422, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to evaluate trust: 0x%08x"), v16);
  }
  else
  {
    MobileActivationError = createMobileActivationError((uint64_t)"evaluateAppleSSLTrust", 410, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
  }
  v18 = MobileActivationError;
  if (a4)
  {
    v18 = objc_retainAutorelease(v18);
    v15 = 0;
    *a4 = v18;
  }
  else
  {
    v15 = 0;
  }
LABEL_9:

  return v15;
}

uint64_t evaluateAccessoryTrust(void *a1, void *a2, uint64_t a3, NSError **a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  NSError *MobileActivationError;
  NSError *v14;
  uint64_t v15;

  v6 = a1;
  v7 = a2;
  if (v6)
  {
    v8 = objc_retainAutorelease(v6);
    v9 = objc_msgSend(v8, "bytes");
    v10 = objc_msgSend(v8, "length");
    v11 = objc_retainAutorelease(v7);
    v12 = CTEvaluateBAAAccessory((unint64_t)v9, (uint64_t)v10, (uint64_t)objc_msgSend(v11, "bytes"), (uint64_t)objc_msgSend(v11, "length"), 0, 0, 0, 0);
    if (!(_DWORD)v12)
    {
      v14 = 0;
      v15 = 1;
      goto LABEL_9;
    }
    MobileActivationError = createMobileActivationError((uint64_t)"evaluateAccessoryTrust", 451, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to evaluate trust: 0x%08x"), v12);
  }
  else
  {
    MobileActivationError = createMobileActivationError((uint64_t)"evaluateAccessoryTrust", 445, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
  }
  v14 = MobileActivationError;
  if (a4)
  {
    v14 = objc_retainAutorelease(v14);
    v15 = 0;
    *a4 = v14;
  }
  else
  {
    v15 = 0;
  }
LABEL_9:

  return v15;
}

uint64_t evaluateAccessoryTrustWithCerts(__SecCertificate *a1, __SecCertificate *a2, __SecCertificate *a3, int a4, int a5, id a6, _QWORD *a7)
{
  NSDate *v12;
  NSDate *v13;
  NSError *MobileActivationError;
  id v15;
  CFDataRef v16;
  CFDataRef v17;
  CFDataRef v18;
  __SecKey *v19;
  char v20;
  NSError *v21;
  uint64_t v22;
  uint64_t v23;
  NSError *v25;
  id v26;
  CFErrorRef error;

  v12 = (NSDate *)a6;
  v13 = v12;
  error = 0;
  if (!a1 || !a2 || !a3)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"evaluateAccessoryTrustWithCerts", 478, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
LABEL_21:
    v21 = MobileActivationError;
    v15 = 0;
LABEL_22:
    v18 = 0;
LABEL_23:
    v16 = 0;
LABEL_24:
    v17 = 0;
    goto LABEL_25;
  }
  if (v12)
  {
    if (!a5)
      goto LABEL_12;
  }
  else
  {
    v13 = +[NSDate date](NSDate, "date");
    if (!a5)
      goto LABEL_12;
  }
  -[NSDate timeIntervalSinceReferenceDate](v13, "timeIntervalSinceReferenceDate");
  if (!SecCertificateIsValid(a1)
    || (-[NSDate timeIntervalSinceReferenceDate](v13, "timeIntervalSinceReferenceDate"),
        !SecCertificateIsValid(a2))
    || (-[NSDate timeIntervalSinceReferenceDate](v13, "timeIntervalSinceReferenceDate"),
        (SecCertificateIsValid(a3) & 1) == 0))
  {
    MobileActivationError = createMobileActivationError((uint64_t)"evaluateAccessoryTrustWithCerts", 490, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Certificate is expired."));
    goto LABEL_21;
  }
LABEL_12:
  v15 = objc_alloc_init((Class)NSMutableData);
  if (!v15)
  {
    v21 = createMobileActivationError((uint64_t)"evaluateAccessoryTrustWithCerts", 499, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate data."));
    goto LABEL_22;
  }
  v16 = SecCertificateCopyData(a1);
  if (!v16)
  {
    v21 = createMobileActivationError((uint64_t)"evaluateAccessoryTrustWithCerts", 505, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy certificate."));
    v18 = 0;
    goto LABEL_24;
  }
  objc_msgSend(v15, "appendData:", v16);
  v17 = SecCertificateCopyData(a2);

  if (!v17)
  {
    v21 = createMobileActivationError((uint64_t)"evaluateAccessoryTrustWithCerts", 513, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy certificate."));
    v18 = 0;
LABEL_37:
    v16 = 0;
    goto LABEL_25;
  }
  objc_msgSend(v15, "appendData:", v17);
  v18 = SecCertificateCopyData(a3);

  if (!v18)
  {
    v21 = createMobileActivationError((uint64_t)"evaluateAccessoryTrustWithCerts", 521, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy certificate."));
    goto LABEL_23;
  }
  objc_msgSend(v15, "appendData:", v18);
  v19 = SecCertificateCopyKey(a3);
  v17 = v19;
  if (!v19)
  {
    v21 = createMobileActivationError((uint64_t)"evaluateAccessoryTrustWithCerts", 535, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy public key."));
    goto LABEL_37;
  }
  v16 = SecKeyCopyExternalRepresentation(v19, &error);
  if (v16)
  {
    v26 = 0;
    v20 = evaluateAccessoryTrust(v15, v16, 0, (NSError **)&v26);
    v21 = (NSError *)v26;
    if ((v20 & 1) != 0)
    {
      v22 = 1;
LABEL_28:
      CFRelease(v17);
      v23 = v22;
      goto LABEL_29;
    }
    v25 = createMobileActivationError((uint64_t)"evaluateAccessoryTrustWithCerts", 548, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v21, CFSTR("Failed to verify MFi certificate."));

    v21 = v25;
  }
  else
  {
    v21 = createMobileActivationError((uint64_t)"evaluateAccessoryTrustWithCerts", 541, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to copy public key data."));
  }
LABEL_25:
  if (a7)
    *a7 = objc_retainAutorelease(v21);
  v22 = 0;
  v23 = 0;
  if (v17)
    goto LABEL_28;
LABEL_29:
  if (error)
    CFRelease(error);

  return v23;
}

uint64_t FindMyRemoveActivationLock(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  NSError *v4;
  NSError *v5;

  v4 = createMobileActivationError((uint64_t)"FindMyRemoveActivationLock", 404, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("Operation not supported on this platform."));
  v5 = v4;
  if (a3)
    *a3 = objc_retainAutorelease(v4);

  return 0;
}

id FindMyCopyMaskedActivationLockUserName(_QWORD *a1)
{
  dispatch_semaphore_t v2;
  FMDFMIPManager *v3;
  FMDFMIPManager *v4;
  NSObject *v5;
  id v6;
  NSError *v7;
  void *v8;
  id v9;
  _QWORD v11[4];
  id v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;

  v21 = 0;
  v22 = &v21;
  v23 = 0x3032000000;
  v24 = __Block_byref_object_copy__3;
  v25 = __Block_byref_object_dispose__3;
  v26 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x3032000000;
  v18 = __Block_byref_object_copy__3;
  v19 = __Block_byref_object_dispose__3;
  v20 = 0;
  v2 = dispatch_semaphore_create(0);
  if (!v2)
  {
    v7 = createMobileActivationError((uint64_t)"_FindMyCopyMaskedActivationLockUserNameiOS", 312, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create semaphore."));
LABEL_10:
    v8 = (void *)v22[5];
    v22[5] = (uint64_t)v7;

LABEL_11:
    v6 = 0;
    if (!a1)
      goto LABEL_14;
    goto LABEL_12;
  }
  if (!objc_opt_class(FMDFMIPManager))
  {
    v7 = createMobileActivationError((uint64_t)"_FindMyCopyMaskedActivationLockUserNameiOS", 317, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("FindMyDevice is not supported on this platform."));
    goto LABEL_10;
  }
  v3 = +[FMDFMIPManager sharedInstance](FMDFMIPManager, "sharedInstance");

  if (!v3)
  {
    v7 = createMobileActivationError((uint64_t)"_FindMyCopyMaskedActivationLockUserNameiOS", 322, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to load FMDFMMManager class."));
    goto LABEL_10;
  }
  v4 = +[FMDFMIPManager sharedInstance](FMDFMIPManager, "sharedInstance");
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3254779904;
  v11[2] = ___FindMyCopyMaskedActivationLockUserNameiOS_block_invoke;
  v11[3] = &__block_descriptor_56_e8_32s40r48r_e43_v24__0__FMDActivationLockInfo_8__NSError_16l;
  v13 = &v21;
  v14 = &v15;
  v5 = v2;
  v12 = v5;
  -[FMDFMIPManager activationLockInfoFromDeviceWithCompletion:](v4, "activationLockInfoFromDeviceWithCompletion:", v11);

  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  if (v22[5])
    goto LABEL_11;
  v6 = (id)v16[5];
  if (!a1)
    goto LABEL_14;
LABEL_12:
  if (!v6)
    *a1 = objc_retainAutorelease((id)v22[5]);
LABEL_14:
  v9 = v6;
  _Block_object_dispose(&v15, 8);

  _Block_object_dispose(&v21, 8);
  return v9;
}

void sub_10001C788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

BOOL FindMyDeviceIsActivationLocked(_QWORD *a1)
{
  dispatch_semaphore_t v2;
  FMDFMIPManager *v3;
  FMDFMIPManager *v4;
  NSObject *v5;
  _BOOL8 v6;
  NSError *v7;
  void *v8;
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;

  v18 = 0;
  v19 = &v18;
  v20 = 0x3032000000;
  v21 = __Block_byref_object_copy__3;
  v22 = __Block_byref_object_dispose__3;
  v23 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v2 = dispatch_semaphore_create(0);
  if (!v2)
  {
    v7 = createMobileActivationError((uint64_t)"_FindMyDeviceIsActivationLockediOS", 249, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create semaphore."));
LABEL_10:
    v8 = (void *)v19[5];
    v19[5] = (uint64_t)v7;

LABEL_11:
    v6 = 0;
    if (!a1)
      goto LABEL_14;
    goto LABEL_12;
  }
  if (!objc_opt_class(FMDFMIPManager))
  {
    v7 = createMobileActivationError((uint64_t)"_FindMyDeviceIsActivationLockediOS", 254, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("FindMyDevice is not supported on this platform."));
    goto LABEL_10;
  }
  v3 = +[FMDFMIPManager sharedInstance](FMDFMIPManager, "sharedInstance");

  if (!v3)
  {
    v7 = createMobileActivationError((uint64_t)"_FindMyDeviceIsActivationLockediOS", 259, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to load FMDFMMManager class."));
    goto LABEL_10;
  }
  v4 = +[FMDFMIPManager sharedInstance](FMDFMIPManager, "sharedInstance");
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3254779904;
  v10[2] = ___FindMyDeviceIsActivationLockediOS_block_invoke;
  v10[3] = &__block_descriptor_56_e8_32s40r48r_e20_v20__0B8__NSError_12l;
  v12 = &v18;
  v13 = &v14;
  v5 = v2;
  v11 = v5;
  -[FMDFMIPManager isActivationLockEnabledWithCompletion:](v4, "isActivationLockEnabledWithCompletion:", v10);

  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  if (v19[5])
    goto LABEL_11;
  v6 = *((_BYTE *)v15 + 24) != 0;
  if (!a1)
    goto LABEL_14;
LABEL_12:
  if (!v6)
    *a1 = objc_retainAutorelease((id)v19[5]);
LABEL_14:

  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);

  return v6;
}

void sub_10001CA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

BOOL FindMyDeviceIsEnabled(_QWORD *a1)
{
  FMDFMIPManager *v2;
  FMDFMIPManager *v3;
  id v4;
  _BOOL8 v5;
  NSError *v6;
  NSError *MobileActivationError;

  if (!objc_opt_class(FMDFMIPManager))
  {
    MobileActivationError = createMobileActivationError((uint64_t)"_FindMyDeviceIsEnablediOS", 370, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("FindMyDevice is not supported on this platform."));
    goto LABEL_7;
  }
  v2 = +[FMDFMIPManager sharedInstance](FMDFMIPManager, "sharedInstance");
  if (!v2)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"_FindMyDeviceIsEnablediOS", 376, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate FMIP manager."));
LABEL_7:
    v6 = MobileActivationError;
    v5 = 0;
    if (!a1)
      goto LABEL_10;
    goto LABEL_8;
  }
  v3 = v2;
  v4 = -[FMDFMIPManager fmipAccount](v2, "fmipAccount");
  v5 = v4 != 0;

  v6 = 0;
  if (!a1)
    goto LABEL_10;
LABEL_8:
  if (!v5)
    *a1 = objc_retainAutorelease(v6);
LABEL_10:

  return v5;
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void post_notification(void *a1)
{
  __CFString *v1;
  __CFNotificationCenter *DarwinNotifyCenter;

  if (a1)
  {
    v1 = a1;
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, v1, v1, 0, 1u);

  }
}

uint64_t store_fairplay_blob(void *a1, void *a2, NSError **a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  NSError *v9;
  id v10;
  NSError *v11;
  id v12;
  uint64_t v13;
  char v14;
  id v15;
  char v16;
  NSNumber *v17;
  int v18;
  NSError *MobileActivationError;
  int v20;
  NSNumber *v21;
  char v22;
  id v23;
  uint64_t v24;
  NSError *v25;
  NSError *v26;
  id v28;
  NSError **v29;
  id v30;
  int v31;
  _QWORD v32[3];

  v5 = a1;
  v6 = a2;
  v7 = isNSData(v6);

  if (!v7)
  {
    v11 = createMobileActivationError((uint64_t)"store_fairplay_blob", 103, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v8 = 0;
    goto LABEL_7;
  }
  v30 = 0;
  v8 = lockcrypto_decode_pem(v6, "CONTAINER", (NSError **)&v30);
  v9 = (NSError *)v30;
  if (!v8)
  {
    v11 = createMobileActivationError((uint64_t)"store_fairplay_blob", 109, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v9, CFSTR("Failed to decode fairplay data."));

LABEL_7:
    v12 = 0;
    if (a3)
      goto LABEL_8;
LABEL_24:
    v13 = 0;
    goto LABEL_28;
  }
  v29 = a3;
  v28 = data_ark_copy(v5, CFSTR("com.apple.fairplay"), CFSTR("FairPlayContextID"));
  v10 = isNSNumber(v28);

  if (!v10)
  {
    v14 = 1;
    while (1)
    {
      v15 = v5;
      memset(v32, 0, sizeof(v32));
      v31 = 0;
      if (!is_product_fpga())
        break;
      v16 = 1;
      v17 = (NSNumber *)v9;
LABEL_20:

      v11 = v17;
      v22 = v14 & (v16 ^ 1);
      v9 = v11;
      v14 = 0;
      if ((v22 & 1) == 0)
        goto LABEL_21;
    }
    zxcm2Qme0x(0, 0, (uint64_t)v32);
    if (v18)
    {
      MobileActivationError = createMobileActivationError((uint64_t)"create_fairplay_context", 56, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query fairplay HW info: %ld"), v18);
    }
    else
    {
      v20 = XtCqEf5X(0, (uint64_t)v32, (uint64_t)"/private/var/mobile/Media/iTunes_Control/iTunes", (uint64_t)&v31);
      if (!v20 && v31)
      {
        v21 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
        data_ark_set(v15, CFSTR("com.apple.fairplay"), CFSTR("FairPlayContextID"), v21, 0);
        v16 = 1;
        v17 = (NSNumber *)v9;
LABEL_19:

        goto LABEL_20;
      }
      MobileActivationError = createMobileActivationError((uint64_t)"create_fairplay_context", 62, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to initialize fairplay context: %ld"), v20);
    }
    v21 = objc_retainAutorelease(MobileActivationError);
    v16 = 0;
    v17 = v21;
    goto LABEL_19;
  }
  v11 = v9;
LABEL_21:
  v12 = data_ark_copy(v5, CFSTR("com.apple.fairplay"), CFSTR("FairPlayContextID"));

  v23 = isNSNumber(v12);
  if (!v23)
  {
    v26 = createMobileActivationError((uint64_t)"store_fairplay_blob", 124, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v11, CFSTR("Failed to create fairplay context."));

    v11 = v26;
    a3 = v29;
    if (v29)
      goto LABEL_8;
    goto LABEL_24;
  }
  objc_msgSend(v12, "unsignedIntValue");
  v8 = objc_retainAutorelease(v8);
  objc_msgSend(v8, "bytes");
  objc_msgSend(v8, "length");
  DLHL();
  a3 = v29;
  if (!(_DWORD)v24)
  {
    v13 = 1;
    goto LABEL_28;
  }
  v25 = createMobileActivationError((uint64_t)"store_fairplay_blob", 130, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to import key vault: %d"), v24);

  v11 = v25;
  if (!v29)
    goto LABEL_24;
LABEL_8:
  v11 = objc_retainAutorelease(v11);
  v13 = 0;
  *a3 = v11;
LABEL_28:

  return v13;
}

uint64_t copy_keys_and_certs(id a1, void *a2, _QWORD *a3, unint64_t a4, unint64_t a5, SecIdentityRef *a6, NSError **a7)
{
  int v12;
  NSError *v13;
  char *v14;
  NSError *v15;
  NSError *MobileActivationError;
  NSError *v17;
  char *v18;
  char *v19;
  NSArray *v20;
  __SecKey *v21;
  uint64_t v22;
  char *v23;
  CFDataRef v24;
  NSError *v25;
  NSError *v27;
  SecIdentityRef *v28;
  char *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  SecCertificateRef certificateRef;
  SecKeyRef privateKeyRef;
  SecIdentityRef identityRef;
  SecCertificateRef v38;

  privateKeyRef = 0;
  identityRef = 0;
  v34 = 0;
  certificateRef = 0;
  v12 = load_identity((CFTypeRef *)&identityRef, a1, a2, 0, &v34);
  v13 = (NSError *)v34;
  if (!v12 || !identityRef)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"copy_keys_and_certs", 170, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v13, CFSTR("Failed to load device identity."));
LABEL_8:
    v17 = MobileActivationError;
    v18 = 0;
    v19 = 0;
    v14 = 0;
    v20 = 0;
    v21 = 0;
    goto LABEL_9;
  }
  if (!a3)
  {
    v29 = 0;
    goto LABEL_13;
  }
  SecIdentityCopyPrivateKey(identityRef, &privateKeyRef);
  if (!privateKeyRef)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"copy_keys_and_certs", 177, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy private key."));
    goto LABEL_8;
  }
  v33 = v13;
  v14 = lockcrypto_create_pem_from_key(privateKeyRef, "RSA PRIVATE KEY", (NSError **)&v33);
  v15 = (NSError *)v33;

  v29 = v14;
  if (!v14)
  {
    v17 = createMobileActivationError((uint64_t)"copy_keys_and_certs", 183, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v15, CFSTR("Failed to create pem data for private key."));
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v13 = v15;
    goto LABEL_9;
  }
  v13 = v15;
LABEL_13:
  if (!(a4 | a5))
  {
    v28 = a6;
    v18 = 0;
    v23 = 0;
    v14 = 0;
LABEL_20:
    v20 = 0;
    v21 = 0;
    goto LABEL_21;
  }
  SecIdentityCopyCertificate(identityRef, &certificateRef);
  if (!certificateRef)
  {
    v17 = createMobileActivationError((uint64_t)"copy_keys_and_certs", 191, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy certificate from device identity."));
    v18 = 0;
    v14 = 0;
LABEL_51:
    v20 = 0;
    v21 = 0;
    goto LABEL_56;
  }
  if (!a5)
  {
    v18 = 0;
    v14 = 0;
    goto LABEL_46;
  }
  v24 = SecCertificateCopyData(certificateRef);
  v14 = (char *)v24;
  if (!v24)
  {
    v17 = createMobileActivationError((uint64_t)"copy_keys_and_certs", 198, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy certificate data."));
    v18 = 0;
    goto LABEL_51;
  }
  v32 = v13;
  v18 = lockcrypto_create_pem(v24, "CERTIFICATE", &v32);
  v25 = (NSError *)v32;

  if (!v18)
  {
    v17 = createMobileActivationError((uint64_t)"copy_keys_and_certs", 204, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v25, CFSTR("Failed to create pem data for certificate."));
    v20 = 0;
    v21 = 0;
LABEL_55:
    v13 = v25;
    goto LABEL_56;
  }
  v13 = v25;
LABEL_46:
  v28 = a6;
  if (!a4)
  {
    v23 = 0;
    goto LABEL_20;
  }
  v38 = certificateRef;
  v20 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v38, 1);
  v31 = v13;
  v21 = lockcrypto_extract_public(v20, (NSError **)&v31);
  v25 = (NSError *)v31;

  if (!v21)
  {
    v17 = createMobileActivationError((uint64_t)"copy_keys_and_certs", 217, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v25, CFSTR("Failed to extract public key from certificate chain."));
    goto LABEL_55;
  }
  v30 = v25;
  v27 = v25;
  v23 = lockcrypto_create_pem_from_key(v21, "RSA PUBLIC KEY", (NSError **)&v30);
  v13 = (NSError *)v30;

  if (!v23)
  {
    v17 = createMobileActivationError((uint64_t)"copy_keys_and_certs", 223, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v13, CFSTR("Failed to create pem data for public key."));
LABEL_56:
    v19 = v29;
LABEL_9:

    if (a7)
    {
      v13 = objc_retainAutorelease(v17);
      v22 = 0;
      v23 = 0;
      *a7 = v13;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v13 = v17;
    }
    goto LABEL_33;
  }
LABEL_21:
  if (a3 && v29)
    *a3 = objc_retainAutorelease(v29);
  if (a4 && v23)
    *(_QWORD *)a4 = objc_retainAutorelease(v23);
  if (a5 && v18)
    *(_QWORD *)a5 = objc_retainAutorelease(v18);
  v22 = 1;
  v19 = v29;
  if (v28 && identityRef)
  {
    CFRetain(identityRef);
    *v28 = identityRef;
  }
LABEL_33:
  if (certificateRef)
    CFRelease(certificateRef);
  certificateRef = 0;
  if (privateKeyRef)
    CFRelease(privateKeyRef);
  privateKeyRef = 0;
  if (v21)
    CFRelease(v21);
  if (identityRef)
    CFRelease(identityRef);
  identityRef = 0;

  return v22;
}

id copy_device_certificate(NSError **a1)
{
  id v2;

  v2 = 0;
  copy_keys_and_certs(CFSTR("lockdown-identities"), CFSTR("com.apple.lockdown.identity.activation"), 0, 0, (unint64_t)&v2, 0, a1);
  return v2;
}

id copy_activation_record(void *a1)
{
  id v1;
  id v2;
  id v3;

  v1 = load_activation_records(a1);
  if (objc_msgSend(v1, "count"))
  {
    v2 = objc_msgSend(v1, "allValues");
    v3 = objc_msgSend(v2, "objectAtIndex:", 0);

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t load_and_validate_activation_record(void *a1, _QWORD *a2, char *a3, NSError **a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  NSError *v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  NSError *v21;
  char v22;
  id v24;
  id v25;

  v7 = a1;
  v8 = copy_activation_record(v7);
  if (!v8)
  {
    v16 = createMobileActivationError((uint64_t)"load_and_validate_activation_record", 299, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Could not find an activation record."));
    v12 = 0;
    v10 = 0;
    if (!a4)
      goto LABEL_17;
    goto LABEL_10;
  }
  v9 = objc_alloc_init((Class)NSMutableDictionary);
  v10 = v9;
  if (!v9)
  {
    v16 = createMobileActivationError((uint64_t)"load_and_validate_activation_record", 305, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate dictionary."));
    v12 = 0;
    if (!a4)
      goto LABEL_17;
LABEL_10:
    v16 = objc_retainAutorelease(v16);
    v17 = 0;
    v18 = 0;
    *a4 = v16;
    goto LABEL_18;
  }
  objc_msgSend(v9, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("UseCommittedUIK"));
  if (is_internal_build())
  {
    v11 = objc_alloc((Class)NSUserDefaults);
    v12 = objc_msgSend(v11, "persistentDomainForName:", CFSTR("com.apple.mobileactivationd"));

    v13 = objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("UseQACertificates"));
    v14 = isNSNumber(v13);

    if (v14)
    {
      v15 = objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("UseQACertificates"));
      objc_msgSend(v10, "setObject:forKeyedSubscript:", v15, CFSTR("UseQACertificates"));

    }
  }
  else
  {
    v12 = 0;
  }
  v25 = 0;
  v19 = verify_activation_record(v7, v8, v10, (uint64_t)&v25);
  v16 = (NSError *)v25;
  if ((v19 & 1) != 0)
  {
    v17 = 0;
    v18 = 1;
    goto LABEL_18;
  }
  objc_msgSend(v10, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("UseFactoryCertificates"));
  objc_msgSend(v10, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, CFSTR("UseQACertificates"));
  v24 = v16;
  v20 = verify_activation_record(v7, v8, v10, (uint64_t)&v24);
  v21 = (NSError *)v24;

  if ((v20 & 1) != 0)
  {
    v17 = 1;
    v18 = 1;
    v16 = v21;
    goto LABEL_18;
  }
  v16 = createMobileActivationError((uint64_t)"load_and_validate_activation_record", 336, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v21, CFSTR("Failed to validate activation record."));

  if (a4)
    goto LABEL_10;
LABEL_17:
  v17 = 0;
  v18 = 0;
LABEL_18:
  if (a3)
    *a3 = v17;
  v22 = v18 ^ 1;
  if (!a2)
    v22 = 1;
  if ((v22 & 1) == 0)
    *a2 = objc_retainAutorelease(v8);

  return v18;
}

BOOL send_activation_record_to_mc(void *a1, NSError **a2)
{
  id v3;
  uint64_t v4;
  NSError *v5;
  id v6;
  id v7;
  NSDictionary *v8;
  id v9;
  const __CFString *v11;
  id v12;

  v3 = a1;
  v4 = objc_opt_class(MCProfileConnection);
  if (!v4)
  {
    v5 = createMobileActivationError((uint64_t)"send_activation_record_to_mc", 365, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("ManagedConfirguation is not supported on this platform."));
    if (a2)
    {
      v5 = objc_retainAutorelease(v5);
      v8 = 0;
      v6 = 0;
      *a2 = v5;
      goto LABEL_9;
    }
LABEL_7:
    v8 = 0;
    v6 = 0;
    goto LABEL_9;
  }
  v5 = (NSError *)objc_opt_class(MCProfileConnection);
  if (!v5)
    goto LABEL_7;
  v6 = objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("DeviceConfigurationFlags"));
  v7 = isNSString(v6);

  if (v7)
  {
    v11 = CFSTR("DeviceConfigurationFlags");
    v12 = v6;
    v8 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1);
    v9 = +[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection");
    objc_msgSend(v9, "lockdownDidReceiveActivationRecord:", v8);

    v5 = 0;
  }
  else
  {
    v5 = 0;
    v8 = 0;
  }
LABEL_9:

  return v4 != 0;
}

uint64_t store_software_update_configuration_flags(void *a1, NSError **a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  objc_class *v9;
  id v10;
  void *v11;
  NSError *v12;
  uint64_t v13;
  NSError *MobileActivationError;
  _QWORD v16[5];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("SoftwareUpdate"));

    if (!v5)
    {
      v12 = 0;
      v6 = 0;
      goto LABEL_11;
    }
    v6 = objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("SoftwareUpdate"));
    v7 = isNSDictionary(v6);

    if (v7)
    {
      v17 = 0;
      v18 = &v17;
      v19 = 0x2050000000;
      v8 = (void *)getSUManagerClientClass_softClass;
      v20 = getSUManagerClientClass_softClass;
      if (!getSUManagerClientClass_softClass)
      {
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3254779904;
        v16[2] = __getSUManagerClientClass_block_invoke;
        v16[3] = &__block_descriptor_40_e8_32r_e5_v8__0l;
        v16[4] = &v17;
        __getSUManagerClientClass_block_invoke((uint64_t)v16);
        v8 = (void *)v18[3];
      }
      v9 = objc_retainAutorelease(v8);
      _Block_object_dispose(&v17, 8);
      v10 = objc_alloc_init(v9);
      if (v10)
      {
        v11 = v10;
        objc_msgSend(v10, "setMandatorySoftwareUpdateDictionary:", v6);

        v12 = 0;
LABEL_11:
        v13 = 1;
        goto LABEL_16;
      }
      MobileActivationError = createMobileActivationError((uint64_t)"store_software_update_configuration_flags", 412, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate SUManager."));
    }
    else
    {
      MobileActivationError = createMobileActivationError((uint64_t)"store_software_update_configuration_flags", 406, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid software update record."));
    }
    v12 = MobileActivationError;
    if (!a2)
    {
LABEL_15:
      v13 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v12 = createMobileActivationError((uint64_t)"store_software_update_configuration_flags", 399, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v6 = 0;
    if (!a2)
      goto LABEL_15;
  }
  v12 = objc_retainAutorelease(v12);
  v13 = 0;
  *a2 = v12;
LABEL_16:

  return v13;
}

void sub_10001DE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSUManagerClientClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!SoftwareUpdateServicesLibraryCore_frameworkLibrary)
  {
    v4 = off_100259208;
    v5 = 0;
    SoftwareUpdateServicesLibraryCore_frameworkLibrary = _sl_dlopen(&v4, &v3);
  }
  if (!SoftwareUpdateServicesLibraryCore_frameworkLibrary)
    __getSUManagerClientClass_block_invoke_cold_1(&v3);
  if (v3)
    free(v3);
  result = objc_getClass("SUManagerClient");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSUManagerClientClass_block_invoke_cold_2();
  getSUManagerClientClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void __copy_helper_block_e8_32r(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 8);
}

void __destroy_helper_block_e8_32r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 32), 8);
}

id talkToServerWithError(void *a1, id a2, int a3, void *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  id v7;
  id v11;
  dispatch_semaphore_t v12;
  void *v13;
  MANetworkServiceClientVersion *v14;
  MANetworkServiceClientVersion *v15;
  NSURLSessionConfiguration *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  NSError *v21;
  void *v22;
  NSError *v23;
  void *v24;
  NSError *v25;
  void *v26;
  NSURLSession *v27;
  NSURLSessionDataTask *v28;
  void *v29;
  id v30;
  NSError *v32;
  void *v33;
  NSError *v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  NSError *v40;
  void *v41;
  NSError *v42;
  void *v43;
  id v44;
  id v45;
  NSDictionary *v46;
  NSDictionary *v47;
  id v48;
  _BOOL4 v49;
  unsigned int v50;
  id v53;
  id v54;
  id v56;
  _QWORD v57[4];
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t *v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  _QWORD v69[4];
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t);
  void (*v74)(uint64_t);
  id v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t);
  void (*v80)(uint64_t);
  id v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t);
  void (*v86)(uint64_t);
  id v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t, uint64_t);
  void (*v96)(uint64_t);
  id v97;
  _QWORD v98[3];
  _QWORD v99[3];
  _QWORD v100[2];
  _QWORD v101[2];
  _QWORD v102[2];
  _QWORD v103[2];

  v11 = a1;
  v56 = a4;
  v92 = 0;
  v93 = &v92;
  v94 = 0x3032000000;
  v95 = __Block_byref_object_copy__4;
  v96 = __Block_byref_object_dispose__4;
  v97 = 0;
  v88 = 0;
  v89 = &v88;
  v90 = 0x2020000000;
  v91 = 0;
  v82 = 0;
  v83 = &v82;
  v84 = 0x3032000000;
  v85 = __Block_byref_object_copy__4;
  v86 = __Block_byref_object_dispose__4;
  v87 = 0;
  v76 = 0;
  v77 = &v76;
  v78 = 0x3032000000;
  v79 = __Block_byref_object_copy__4;
  v80 = __Block_byref_object_dispose__4;
  v81 = 0;
  v70 = 0;
  v71 = &v70;
  v72 = 0x3032000000;
  v73 = __Block_byref_object_copy__4;
  v74 = __Block_byref_object_dispose__4;
  v75 = 0;
  v69[0] = 0;
  v69[1] = v69;
  v69[2] = 0x2020000000;
  v69[3] = -1;
  if (!v11)
  {
    v21 = createMobileActivationError((uint64_t)"talkToServerWithError", 175, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v22 = (void *)v71[5];
    v71[5] = (uint64_t)v21;

LABEL_15:
    v53 = 0;
    v54 = 0;
    v19 = 0;
    v20 = 0;
    v15 = 0;
LABEL_16:
    v16 = 0;
    v27 = 0;
    v28 = 0;
    v18 = 0;
    v17 = 0;
    goto LABEL_17;
  }
  v12 = dispatch_semaphore_create(0);
  v13 = (void *)v77[5];
  v77[5] = (uint64_t)v12;

  if (!v77[5])
  {
    v23 = createMobileActivationError((uint64_t)"talkToServerWithError", 181, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create semaphore."));
    v24 = (void *)v71[5];
    v71[5] = (uint64_t)v23;

    goto LABEL_15;
  }
  v14 = objc_alloc_init(MANetworkServiceClientVersion);
  v15 = v14;
  if (!v14)
  {
    v25 = createMobileActivationError((uint64_t)"talkToServerWithError", 187, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create delegate."));
    v26 = (void *)v71[5];
    v71[5] = (uint64_t)v25;

    goto LABEL_15;
  }
  -[MANetworkServiceClientVersion setAllowInvalidCert:](v14, "setAllowInvalidCert:", a2);
  v16 = +[NSURLSessionConfiguration defaultSessionConfiguration](NSURLSessionConfiguration, "defaultSessionConfiguration");
  if (!v16)
  {
    v32 = createMobileActivationError((uint64_t)"talkToServerWithError", 195, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query session configuration."));
    v33 = (void *)v71[5];
    v71[5] = (uint64_t)v32;

    v53 = 0;
    v54 = 0;
    v19 = 0;
    v20 = 0;
    goto LABEL_16;
  }
  if (v56)
  {
    v17 = objc_msgSend(v56, "objectForKey:", CFSTR("NetworkProxyHost"));
    v18 = objc_msgSend(v56, "objectForKey:", CFSTR("NetworkProxyPort"));
    v54 = objc_msgSend(v56, "objectForKey:", CFSTR("SOCKSProxyHost"));
    v53 = objc_msgSend(v56, "objectForKey:", CFSTR("SOCKSProxyPort"));
    v19 = objc_msgSend(v56, "objectForKey:", CFSTR("NetworkServiceType"));
    v20 = objc_msgSend(v56, "objectForKey:", CFSTR("NetworkSecondaryIdentifier"));
    if (v17)
    {
      a2 = isNSString(v17);
      if (!a2)
        goto LABEL_11;
      if (!v18)
      {
LABEL_32:
        if (v19)
        {
          v48 = isNSString(v19);
          if (!v48)
          {
            v49 = 1;
            goto LABEL_52;
          }
          if (!v20)
          {
            v49 = 0;
            goto LABEL_39;
          }
        }
        else if (!v20)
        {
          v49 = 0;
          goto LABEL_52;
        }
        v36 = isNSString(v20);
        v49 = v36 == 0;

        if (v19)
        {
LABEL_39:

          if (!v18)
            goto LABEL_40;
          goto LABEL_53;
        }
LABEL_52:
        if (!v18)
        {
LABEL_40:
          if (!v17)
            goto LABEL_41;
          goto LABEL_54;
        }
LABEL_53:

        if (!v17)
        {
LABEL_41:
          if (v49)
            goto LABEL_55;
LABEL_42:
          if (v54)
          {
            v37 = isNSString(v54);
            a2 = v37;
            if (!v37)
              goto LABEL_59;
            if (v53)
            {
              v38 = v53;
              goto LABEL_48;
            }

          }
          else
          {
            v38 = v53;
            if (v53)
            {
LABEL_48:
              v39 = isNSNumber(v38);

              if (v54)
              {

                if (!v39)
                  goto LABEL_59;
                goto LABEL_63;
              }
              if (v39)
              {
                v54 = 0;
                goto LABEL_63;
              }
LABEL_59:
              v42 = createMobileActivationError((uint64_t)"talkToServerWithError", 213, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid SOCKS proxy dictionary: {%@, %@, %@}"), v54, v53, v19);
              v43 = (void *)v71[5];
              v71[5] = (uint64_t)v42;

              goto LABEL_56;
            }
            v54 = 0;
          }
          v53 = 0;
LABEL_63:
          if (v19)
          {
            -[NSURLSessionConfiguration set_CTDataConnectionServiceType:](v16, "set_CTDataConnectionServiceType:", v19);
            if (objc_msgSend(v19, "isEqualToString:", kCTDataConnectionServiceTypeOTAActivation))
            {
              if (objc_msgSend(v18, "isEqualToNumber:", &off_100271670))
                -[NSURLSessionConfiguration set_requiresSecureHTTPSProxyConnection:](v16, "set_requiresSecureHTTPSProxyConnection:", 1);
            }
          }
          if (v20)
            -[NSURLSessionConfiguration set_sourceApplicationSecondaryIdentifier:](v16, "set_sourceApplicationSecondaryIdentifier:", v20);
          if (v17 && v18)
          {
            v44 = objc_msgSend(v11, "URL");
            v45 = objc_msgSend(v44, "scheme");
            v50 = objc_msgSend(v45, "isEqualToString:", CFSTR("https"));

            if (v50)
            {
              v102[0] = kCFStreamPropertyHTTPSProxyHost;
              v102[1] = kCFStreamPropertyHTTPSProxyPort;
              v103[0] = v17;
              v103[1] = v18;
              v46 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v103, v102, 2);
            }
            else
            {
              v100[0] = kCFStreamPropertyHTTPProxyHost;
              v100[1] = kCFStreamPropertyHTTPProxyPort;
              v101[0] = v17;
              v101[1] = v18;
              v46 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v101, v100, 2);
            }
            -[NSURLSessionConfiguration setConnectionProxyDictionary:](v16, "setConnectionProxyDictionary:", v46);

          }
          if (v54 && v53)
          {
            v98[0] = CFSTR("SOCKSProxy");
            v98[1] = CFSTR("SOCKSPort");
            v99[0] = v54;
            v99[1] = v53;
            v98[2] = CFSTR("SOCKSEnable");
            v99[2] = &__kCFBooleanTrue;
            v47 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v99, v98, 3);
            -[NSURLSessionConfiguration setConnectionProxyDictionary:](v16, "setConnectionProxyDictionary:", v47);

          }
          goto LABEL_27;
        }
LABEL_54:

        if (v49)
          goto LABEL_55;
        goto LABEL_42;
      }
    }
    else if (!v18)
    {
      goto LABEL_32;
    }
    v7 = isNSNumber(v18);
    if (!v7)
    {
      if (!v17)
      {
LABEL_55:
        v40 = createMobileActivationError((uint64_t)"talkToServerWithError", 208, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid proxy dictionary: {%@, %@, %@}"), v17, v18, v19);
        v41 = (void *)v71[5];
        v71[5] = (uint64_t)v40;

        goto LABEL_56;
      }
LABEL_11:

      goto LABEL_55;
    }
    goto LABEL_32;
  }
  v53 = 0;
  v54 = 0;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v17 = 0;
LABEL_27:
  if (a3)
    -[NSURLSessionConfiguration setWaitsForConnectivity:](v16, "setWaitsForConnectivity:", 1);
  objc_msgSend(v11, "timeoutInterval");
  -[NSURLSessionConfiguration setTimeoutIntervalForResource:](v16, "setTimeoutIntervalForResource:");
  v27 = +[NSURLSession sessionWithConfiguration:delegate:delegateQueue:](NSURLSession, "sessionWithConfiguration:delegate:delegateQueue:", v16, v15, 0);
  if (v27)
  {
    v57[0] = _NSConcreteStackBlock;
    v57[1] = 3254779904;
    v57[2] = __talkToServerWithError_block_invoke;
    v57[3] = &__block_descriptor_120_e8_32s40s48s56s64s72r80r88r96r104r112r_e46_v32__0__NSData_8__NSURLResponse_16__NSError_24l;
    v63 = &v88;
    v64 = &v92;
    v65 = v69;
    v66 = &v70;
    v58 = v11;
    v16 = v16;
    v59 = v16;
    v19 = v19;
    v60 = v19;
    v20 = v20;
    v61 = v20;
    v15 = v15;
    v62 = v15;
    v67 = &v82;
    v68 = &v76;
    v28 = -[NSURLSession dataTaskWithRequest:completionHandler:](v27, "dataTaskWithRequest:completionHandler:", v58, v57);

    -[NSURLSessionDataTask resume](v28, "resume");
    dispatch_semaphore_wait((dispatch_semaphore_t)v77[5], 0xFFFFFFFFFFFFFFFFLL);
    goto LABEL_17;
  }
  v34 = createMobileActivationError((uint64_t)"talkToServerWithError", 268, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create session."));
  v35 = (void *)v71[5];
  v71[5] = (uint64_t)v34;

LABEL_56:
  v27 = 0;
  v28 = 0;
LABEL_17:
  -[NSURLSession invalidateAndCancel](v27, "invalidateAndCancel");
  if (a5)
    *a5 = objc_retainAutorelease((id)v93[5]);
  if (a6)
    *a6 = v89[3];
  v29 = (void *)v83[5];
  if (a7 && !v29)
  {
    *a7 = objc_retainAutorelease((id)v71[5]);
    v29 = (void *)v83[5];
  }
  v30 = v29;
  _Block_object_dispose(v69, 8);

  _Block_object_dispose(&v70, 8);
  _Block_object_dispose(&v76, 8);

  _Block_object_dispose(&v82, 8);
  _Block_object_dispose(&v88, 8);
  _Block_object_dispose(&v92, 8);

  return v30;
}

void sub_10001ECB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose((const void *)(v59 - 256), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void __talkToServerWithError_block_invoke(uint64_t a1, id a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  NSData *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  NSError *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  v7 = a2;
  v8 = a4;
  v9 = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = objc_msgSend(v9, "statusCode");
  v10 = objc_msgSend(v9, "allHeaderFields");

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

  if (!v7 || v8)
  {
    if ((mobileactivationErrorHasDomainAndErrorCode(v8, NSURLErrorDomain, (id)0xFFFFFFFFFFFFFC17) & 1) != 0)
    {
      v16 = -18;
    }
    else if ((mobileactivationErrorHasDomainAndErrorCode(v8, NSURLErrorDomain, (id)0xFFFFFFFFFFFFFC19) & 1) != 0)
    {
      v16 = -19;
    }
    else if ((mobileactivationErrorHasDomainAndErrorCode(v8, NSURLErrorDomain, (id)0xFFFFFFFFFFFFFC0FLL) & 1) != 0)
    {
      v16 = -17;
    }
    else if ((mobileactivationErrorHasDomainAndErrorCode(v8, NSURLErrorDomain, (id)0xFFFFFFFFFFFFFC15) & 1) != 0)
    {
      v16 = -20;
    }
    else
    {
      if (!mobileactivationErrorHasDomainAndErrorCode(v8, (void *)kCFErrorDomainCFNetwork, (id)0x136))
      {
LABEL_15:
        v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);
        v15 = objc_msgSend(*(id *)(a1 + 32), "URL");
        v17 = objc_msgSend(*(id *)(a1 + 40), "connectionProxyDictionary");
        v19 = *(_QWORD *)(a1 + 48);
        v18 = *(_QWORD *)(a1 + 56);
        v20 = +[NSURLSessionTask description](NSURLSessionTask, "description");
        v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
        v22 = objc_msgSend(*(id *)(a1 + 64), "lastNetworkError");
        v23 = createMobileActivationError((uint64_t)"talkToServerWithError_block_invoke", 290, CFSTR("com.apple.MobileActivation.ErrorDomain"), v26, v8, CFSTR("Failed to send HTTP request to %@ (proxy settings: %@ // service type: %@ // secondary identifier: %@ // session: %@): %ld (%@)"), v15, v17, v19, v18, v20, v21, v22);
        v24 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
        v25 = *(void **)(v24 + 40);
        *(_QWORD *)(v24 + 40) = v23;

        goto LABEL_16;
      }
      v16 = -21;
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = v16;
    goto LABEL_15;
  }
  v13 = +[NSData dataWithData:](NSData, "dataWithData:", v7);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
  v15 = *(id *)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v13;
LABEL_16:

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 40));
}

void __copy_helper_block_e8_32s40s48s56s64s72r80r88r96r104r112r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  v8 = *(id *)(a2 + 64);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 8);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
  _Block_object_assign((void *)(a1 + 96), *(const void **)(a2 + 96), 8);
  _Block_object_assign((void *)(a1 + 104), *(const void **)(a2 + 104), 8);
  _Block_object_assign((void *)(a1 + 112), *(const void **)(a2 + 112), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72r80r88r96r104r112r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 112), 8);
  _Block_object_dispose(*(const void **)(a1 + 104), 8);
  _Block_object_dispose(*(const void **)(a1 + 96), 8);
  _Block_object_dispose(*(const void **)(a1 + 88), 8);
  _Block_object_dispose(*(const void **)(a1 + 80), 8);
  _Block_object_dispose(*(const void **)(a1 + 72), 8);

}

id copyCellularProxyDictionary(char a1, NSError **a2)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  __CFString *v11;
  NSError *MobileActivationError;
  id v13;
  NSObject *v14;
  id v15;
  id v16;
  id v17;
  NSError *v18;
  NSError *v19;
  id v20;

  v4 = objc_alloc_init((Class)NSMutableDictionary);
  if (!v4)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"copyCellularProxyDictionary", 348, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to dictionary."));
    goto LABEL_18;
  }
  if ((a1 & 1) == 0)
  {
    v13 = objc_alloc((Class)CoreTelephonyClient);
    v14 = dispatch_get_global_queue(0, 0);
    v5 = objc_msgSend(v13, "initWithQueue:", v14);

    if (v5)
    {
      v9 = objc_msgSend(v5, "getCurrentDataSubscriptionContextSync:", 0);
      v15 = objc_msgSend(objc_alloc((Class)CTBundle), "initWithBundleType:", 1);
      v10 = v15;
      v6 = 0;
      v7 = 0;
      v11 = 0;
      if (v9 && v15)
      {
        v6 = objc_msgSend(v5, "copyCarrierBundleValue:key:bundleType:error:", v9, CFSTR("OTAActivationProxyHost"), v15, 0);
        v7 = objc_msgSend(v5, "copyCarrierBundleValue:key:bundleType:error:", v9, CFSTR("OTAActivationProxyPort"), v10, 0);
        v16 = objc_msgSend(v9, "uuid");
        v11 = (__CFString *)objc_msgSend(v16, "UUIDString");

      }
      v8 = kCTDataConnectionServiceTypeOTAActivation;
      if (v8)
        objc_msgSend(v4, "setObject:forKeyedSubscript:", v8, CFSTR("NetworkServiceType"));
      if (!v11)
        goto LABEL_13;
      goto LABEL_12;
    }
    MobileActivationError = createMobileActivationError((uint64_t)"copyCellularProxyDictionary", 357, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create Telephony client."));
LABEL_18:
    v19 = MobileActivationError;
    v18 = v19;
    if (a2)
    {
      v18 = objc_retainAutorelease(v19);
      v10 = 0;
      v9 = 0;
      v11 = 0;
      v8 = 0;
      v7 = 0;
      v6 = 0;
      v5 = 0;
      v17 = 0;
      *a2 = v18;
    }
    else
    {
      v10 = 0;
      v9 = 0;
      v11 = 0;
      v8 = 0;
      v7 = 0;
      v6 = 0;
      v5 = 0;
      v17 = 0;
    }
    goto LABEL_21;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = CFSTR("com.apple.CommCenter.CellularPlanProvisioning");
LABEL_12:
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v11, CFSTR("NetworkSecondaryIdentifier"));
LABEL_13:
  if (v6 && v7)
  {
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, CFSTR("NetworkProxyHost"));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, CFSTR("NetworkProxyPort"));
  }
  v17 = v4;
  v18 = 0;
LABEL_21:
  v20 = v17;

  return v20;
}

uint64_t performMigration(void *a1, _QWORD *a2)
{
  id v3;
  uint64_t v4;
  _QWORD block[4];
  id v7;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904;
  block[2] = __performMigration_block_invoke;
  block[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
  v3 = a1;
  v7 = v3;
  if (performMigration_onceToken != -1)
    dispatch_once(&performMigration_onceToken, block);
  v4 = performMigration_retval;
  if (a2 && (performMigration_retval & 1) == 0)
  {
    *a2 = objc_retainAutorelease((id)performMigration_localError);
    v4 = performMigration_retval;
  }

  return v4;
}

void __performMigration_block_invoke(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  __CFString *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  __CFString *v13;
  id v14;
  NSError *v15;
  char v16;
  NSError *v17;
  NSError *v18;
  char v19;
  NSError *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  __CFString *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  NSError *v31;
  char v32;
  NSError *v33;
  NSError *v34;
  NSError *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  const __CFData *v44;
  SecCertificateRef v45;
  __SecCertificate *v46;
  int v47;
  NSFileManager *v48;
  id v49;
  NSDictionary *v50;
  unsigned __int8 v51;
  id v52;
  NSFileManager *v53;
  NSFileManager *v54;
  unsigned __int8 v55;
  NSFileManager *v56;
  NSError *v57;
  NSFileManager *v58;
  id v59;
  NSDictionary *v60;
  unsigned int v61;
  NSError *v62;
  NSFileManager *v63;
  id v64;
  NSURL *v65;
  NSArray *v66;
  id v67;
  id v68;
  uint64_t v69;
  void *v70;
  void *v71;
  id v72;
  unsigned int v73;
  id v74;
  id v75;
  id v76;
  NSFileManager *v77;
  NSFileManager *v78;
  id v79;
  unsigned __int8 v80;
  NSError *v81;
  NSError *v82;
  NSObject *v83;
  id v84;
  id v85;
  _UNKNOWN **v86;
  NSFileManager *v87;
  id v88;
  NSURL *v89;
  NSArray *v90;
  id v91;
  id v92;
  uint64_t v93;
  void *i;
  void *v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  unsigned __int8 v102;
  NSError *v103;
  NSError *v104;
  NSObject *v105;
  id v106;
  NSError *v107;
  NSError *v108;
  NSError *v109;
  id v110;
  NSError *v111;
  NSError *v112;
  void *v113;
  id v114;
  NSError *v115;
  NSError *v116;
  id v117;
  NSError *v118;
  id v119;
  const char *v120;
  NSError *v121;
  const char *v122;
  NSError *v123;
  const char *v124;
  NSError *v125;
  const char *v126;
  NSError *v127;
  const char *v128;
  NSError *v129;
  const char *v130;
  NSError *v131;
  const char *v132;
  NSError *v133;
  const char *v134;
  NSError *v135;
  const char *v136;
  id v137;
  const char *v138;
  NSError *v139;
  NSError *v140;
  NSError *v141;
  void *v142;
  NSError *v143;
  NSObject *v144;
  NSError *v145;
  __SecCertificate *cf;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  uint64_t v152;
  id v153;
  char v154;
  id v155;
  NSError *v156;
  id v157;
  id v158;
  id v159;
  __CFString *v160;
  __CFString *v161;
  id v162;
  void *v163;
  id v164;
  id obj;
  NSArray *obja;
  NSArray *objb;
  id v168;
  id v169[4];
  id v170;
  id v171[4];
  id v172;
  id v173[4];
  id v174;
  _BYTE handler[24];
  NSError *v176;
  id v177;
  __int128 v178;
  __int128 v179;
  id v180[2];
  __int128 v181;
  uint8_t buf[8];
  uint64_t v183;
  void (*v184)(uint64_t, id);
  void *v185;
  NSError *v186;
  __int128 v187;
  __int128 v188;
  id v189[2];
  __int128 v190;
  _QWORD v191[4];
  NSError *v192;
  id v193[4];
  NSError *v194;
  _BYTE v195[24];
  NSError *v196;
  NSError *v197;

  v2 = copySignpostLoggingHandle();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "PerformMigration", (const char *)&unk_1002533A1, buf, 2u);
  }

  v3 = *(void **)(a1 + 32);
  if (!v3)
  {
    v17 = createMobileActivationError((uint64_t)"performMigration_block_invoke", 2075, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid input(s)."));
    goto LABEL_92;
  }
  v4 = v3;
  v5 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v6 = objc_msgSend(v5, "copyAnswer:", CFSTR("BuildVersion"));

  v7 = isNSString(v6);
  if (!v7)
  {
    v18 = createMobileActivationError((uint64_t)"perform_data_migration", 1730, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve %@."), CFSTR("BuildVersion"));
    v161 = 0;
    v162 = 0;
LABEL_15:
    v160 = 0;
LABEL_76:
    v57 = objc_retainAutorelease(v18);
    v16 = 0;
    v15 = v57;
LABEL_77:

    goto LABEL_78;
  }
  v8 = (__CFString *)data_ark_copy(v4, 0, CFSTR("BuildVersion"));
  v9 = isNSString(v8);

  if (!v9)
  {

    v8 = &stru_1002694A0;
  }
  v10 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v11 = objc_msgSend(v10, "copyAnswer:", CFSTR("ProductVersion"));

  v162 = v11;
  v12 = isNSString(v11);

  v161 = v8;
  if (!v12)
  {
    v18 = createMobileActivationError((uint64_t)"perform_data_migration", 1741, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve %@."), CFSTR("ProductVersion"));
    goto LABEL_15;
  }
  v13 = (__CFString *)data_ark_copy(v4, 0, CFSTR("ProductVersion"));
  v14 = isNSString(v13);

  if (!v14)
  {

    v13 = &stru_1002694A0;
  }
  v160 = v13;
  if ((objc_msgSend(v6, "isEqualToString:", v8) & 1) == 0)
  {
    maLog((uint64_t)"perform_data_migration", 0, CFSTR("Upgrade from %@ (%@) to %@ (%@) detected."), v8, v13, v6, v11);
    v168 = 0;
    v19 = perform_sydro_data_migration_tasks(v4, (NSError **)&v168);
    v20 = (NSError *)v168;
    if ((v19 & 1) == 0)
    {
      v18 = createMobileActivationError((uint64_t)"perform_data_migration", 1759, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v20, CFSTR("Failed to perform data migration task."));
      v34 = v20;
LABEL_75:

      goto LABEL_76;
    }
    v21 = v4;
    v22 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
    v23 = objc_msgSend(v22, "copyAnswer:", CFSTR("BuildVersion"));

    obj = v23;
    v24 = isNSString(v23);

    v157 = v21;
    if (v24)
    {
      v25 = (__CFString *)data_ark_copy(v21, 0, CFSTR("BuildVersion"));
      v26 = isNSString(v25);

      if (!v26)
      {

        v25 = &stru_1002694A0;
      }
      v27 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
      v28 = objc_msgSend(v27, "copyAnswer:", CFSTR("ProductVersion"));

      v151 = v28;
      v29 = isNSString(v28);

      if (v29)
      {
        v30 = obj;
        if ((objc_msgSend(obj, "isEqualToString:", v25) & 1) != 0)
        {
          v163 = 0;
          v159 = 0;
          v31 = 0;
          v153 = 0;
          v155 = 0;
          v32 = 1;
          v33 = v20;
LABEL_37:
          v36 = v151;
          goto LABEL_38;
        }
        v37 = copy_legacy_dcrt_path();
        v38 = objc_msgSend(v37, "stringByAppendingPathComponent:", CFSTR("dcrt.der"));

        v39 = copy_dcrt_path();
        v159 = objc_msgSend(v39, "stringByAppendingPathComponent:", CFSTR("dcrt.der"));

        v163 = v38;
        v40 = objc_msgSend(objc_alloc((Class)NSData), "initWithContentsOfFile:", v38);
        if (!v40)
        {
          v31 = 0;
          v153 = 0;
          v155 = 0;
          v32 = 1;
          v33 = v20;
          v30 = obj;
          goto LABEL_37;
        }
        v41 = v40;
        *(_QWORD *)buf = 0;
        v42 = parseDERCertificatesFromChain(v40, buf);
        v43 = *(id *)buf;
        v155 = v41;
        if (v42)
        {
          v153 = v42;
          v44 = (const __CFData *)objc_msgSend(v42, "objectAtIndexedSubscript:", 0);
          v45 = SecCertificateCreateWithData(0, v44);

          v46 = v45;
          v36 = v151;
          if (v46)
          {
            *(_QWORD *)handler = v43;
            cf = v46;
            v47 = certificatePublicKeyMatchesSystemPublicKey(2, 9, v46, (NSError **)handler);
            v31 = (NSError *)*(id *)handler;

            if (v47)
            {
              v147 = v6;
              v149 = v4;
              v48 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
              v49 = copy_dcrt_path();
              *(_QWORD *)&v178 = NSFilePosixPermissions;
              *(_QWORD *)&v187 = &off_1002716A0;
              v50 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v187, &v178, 1);
              *(_QWORD *)v195 = v31;
              v51 = -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:](v48, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v49, 1, v50, v195);
              v52 = *(id *)v195;

              if ((v51 & 1) != 0)
              {
                maLog((uint64_t)"perform_dawn_data_migration_tasks", 0, CFSTR("Moving DCRT from legacy path to system location."));
                v53 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
                -[NSFileManager removeItemAtPath:error:](v53, "removeItemAtPath:error:", v159, 0);

                v54 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
                v193[0] = v52;
                v55 = -[NSFileManager copyItemAtPath:toPath:error:](v54, "copyItemAtPath:toPath:error:", v163, v159, v193);
                v31 = (NSError *)v193[0];

                if ((v55 & 1) != 0)
                {
                  maLog((uint64_t)"perform_dawn_data_migration_tasks", 0, CFSTR("Successfuly moved DCRT to system location."));
                  v6 = v147;
                  v4 = v149;
                  v36 = v151;
                  goto LABEL_35;
                }
                v145 = createMobileActivationError((uint64_t)"perform_dawn_data_migration_tasks", 1690, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v31, CFSTR("Failed to copy %@ to %@."), v163, v159);
              }
              else
              {
                v31 = (NSError *)copy_dcrt_path();
                v145 = createMobileActivationError((uint64_t)"perform_dawn_data_migration_tasks", 1680, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v52, CFSTR("Failed to create %@."), v31);

              }
              v6 = v147;
              v4 = v149;

              v33 = objc_retainAutorelease(v145);
              v32 = 0;
              v31 = v33;
              v30 = obj;
              v36 = v151;
              goto LABEL_100;
            }
LABEL_35:
            v56 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
            -[NSFileManager removeItemAtPath:error:](v56, "removeItemAtPath:error:", v163, 0);

            v32 = 1;
            v33 = v20;
            v30 = obj;
LABEL_100:
            CFRelease(cf);
            goto LABEL_38;
          }
          v35 = createMobileActivationError((uint64_t)"perform_dawn_data_migration_tasks", 1674, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create certificate."));

LABEL_27:
          v33 = objc_retainAutorelease(v35);
          v32 = 0;
          v31 = v33;
          v30 = obj;
LABEL_38:

          v57 = v33;
          if ((v32 & 1) != 0)
          {
            v156 = v57;
            v158 = v157;
            v58 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
            v59 = copy_splunk_directory_path();
            v191[0] = NSFilePosixPermissions;
            v193[0] = &off_1002716A0;
            v60 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v193, v191, 1);
            v173[0] = 0;
            v61 = -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:](v58, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v59, 1, v60, v173);
            v62 = (NSError *)v173[0];

            v154 = v61;
            if (v61)
            {
              v148 = v6;
              v150 = v4;
              v152 = a1;
              v63 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
              v64 = copy_software_update_splunk_directory_path();
              v65 = +[NSURL URLWithString:](NSURL, "URLWithString:", v64);
              v66 = -[NSFileManager contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:](v63, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v65, 0, 4, 0);

              *(_OWORD *)v189 = 0u;
              v190 = 0u;
              v187 = 0u;
              v188 = 0u;
              obja = v66;
              v67 = -[NSArray countByEnumeratingWithState:objects:count:](obja, "countByEnumeratingWithState:objects:count:", &v187, buf, 16);
              if (v67)
              {
                v68 = v67;
                v69 = *(_QWORD *)v188;
                do
                {
                  v70 = 0;
                  v164 = v68;
                  do
                  {
                    if (*(_QWORD *)v188 != v69)
                      objc_enumerationMutation(obja);
                    v71 = *(void **)(*((_QWORD *)&v187 + 1) + 8 * (_QWORD)v70);
                    v72 = objc_msgSend(v71, "pathExtension");
                    v73 = objc_msgSend(v72, "isEqualToString:", CFSTR("splunklog"));

                    if (v73)
                    {
                      v74 = copy_splunk_directory_path();
                      v75 = objc_msgSend(v71, "lastPathComponent");
                      v76 = objc_msgSend(v74, "stringByAppendingPathComponent:", v75);

                      v77 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
                      -[NSFileManager removeItemAtPath:error:](v77, "removeItemAtPath:error:", v76, 0);

                      v78 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
                      v79 = objc_msgSend(v71, "path");
                      v171[0] = v62;
                      v80 = -[NSFileManager copyItemAtPath:toPath:error:](v78, "copyItemAtPath:toPath:error:", v79, v76, v171);
                      v81 = (NSError *)v171[0];

                      if ((v80 & 1) != 0)
                      {
                        v82 = (NSError *)objc_msgSend(v71, "path");
                        maLog((uint64_t)"performRestoreLogMigrationTasks", 0, CFSTR("Successfully copied %@ to %@."), v82, v76);
                      }
                      else
                      {
                        v83 = copyLoggingHandle();
                        if (os_log_type_enabled(v83, OS_LOG_TYPE_FAULT))
                        {
                          v84 = objc_msgSend(v71, "path");
                          v85 = copy_splunk_directory_path();
                          *(_DWORD *)handler = 138412802;
                          *(_QWORD *)&handler[4] = v84;
                          *(_WORD *)&handler[12] = 2112;
                          *(_QWORD *)&handler[14] = v85;
                          *(_WORD *)&handler[22] = 2112;
                          v176 = v81;
                          _os_log_fault_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_FAULT, "Failed to copy %@ to %@: %@", handler, 0x20u);

                        }
                        v82 = v81;
                        v81 = 0;
                      }
                      v68 = v164;

                      v62 = v81;
                    }
                    v70 = (char *)v70 + 1;
                  }
                  while (v68 != v70);
                  v68 = -[NSArray countByEnumeratingWithState:objects:count:](obja, "countByEnumeratingWithState:objects:count:", &v187, buf, 16);
                }
                while (v68);
              }

              v86 = &CCDigest_ptr;
              v87 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
              v88 = copy_software_update_log_directory_path();
              v89 = +[NSURL URLWithString:](NSURL, "URLWithString:", v88);
              v90 = -[NSFileManager contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:](v87, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v89, 0, 4, 0);

              *(_OWORD *)v180 = 0u;
              v181 = 0u;
              v178 = 0u;
              v179 = 0u;
              objb = v90;
              v91 = -[NSArray countByEnumeratingWithState:objects:count:](objb, "countByEnumeratingWithState:objects:count:", &v178, handler, 16);
              if (v91)
              {
                v92 = v91;
                v93 = *(_QWORD *)v179;
                do
                {
                  for (i = 0; i != v92; i = (char *)i + 1)
                  {
                    if (*(_QWORD *)v179 != v93)
                      objc_enumerationMutation(objb);
                    v95 = *(void **)(*((_QWORD *)&v178 + 1) + 8 * (_QWORD)i);
                    v96 = copy_log_directory_path();
                    v97 = objc_msgSend(v95, "lastPathComponent");
                    v98 = objc_msgSend(v96, "stringByAppendingPathComponent:", v97);

                    v99 = objc_msgSend(v86[72], "defaultManager");
                    objc_msgSend(v99, "removeItemAtPath:error:", v98, 0);

                    v100 = objc_msgSend(v86[72], "defaultManager");
                    v101 = objc_msgSend(v95, "path");
                    v169[0] = v62;
                    v102 = objc_msgSend(v100, "copyItemAtPath:toPath:error:", v101, v98, v169);
                    v103 = (NSError *)v169[0];

                    if ((v102 & 1) != 0)
                    {
                      v104 = (NSError *)objc_msgSend(v95, "path");
                      maLog((uint64_t)"performRestoreLogMigrationTasks", 0, CFSTR("Successfully copied %@ to %@."), v104, v98);
                      v62 = v103;
                    }
                    else
                    {
                      v105 = copyLoggingHandle();
                      if (os_log_type_enabled(v105, OS_LOG_TYPE_FAULT))
                      {
                        v106 = objc_msgSend(v95, "path");
                        *(_DWORD *)v195 = 138412802;
                        *(_QWORD *)&v195[4] = v106;
                        *(_WORD *)&v195[12] = 2112;
                        *(_QWORD *)&v195[14] = v98;
                        *(_WORD *)&v195[22] = 2112;
                        v196 = v103;
                        _os_log_fault_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_FAULT, "Failed to copy %@ to %@: %@", v195, 0x20u);

                      }
                      v62 = 0;
                      v104 = v103;
                    }
                    v86 = &CCDigest_ptr;

                  }
                  v92 = -[NSArray countByEnumeratingWithState:objects:count:](objb, "countByEnumeratingWithState:objects:count:", &v178, handler, 16);
                }
                while (v92);
              }

              v107 = v156;
              v108 = v156;
              v4 = v150;
              a1 = v152;
              v6 = v148;
            }
            else
            {
              v110 = copy_splunk_directory_path();
              v111 = createMobileActivationError((uint64_t)"performRestoreLogMigrationTasks", 138, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v62, CFSTR("Failed to create %@."), v110);

              v62 = objc_retainAutorelease(v111);
              v108 = v62;
              v107 = v156;
            }

            v57 = v108;
            if ((v154 & 1) != 0)
            {
              if (is_dsp_device())
                data_ark_set(v158, 0, CFSTR("ActivationExpired"), &__kCFBooleanTrue, 1);
              v16 = 1;
              data_ark_set(v158, 0, CFSTR("PreSydroDataMigrationCompleted"), &__kCFBooleanTrue, 1);
              data_ark_set(v158, 0, CFSTR("PreDawnDataMigrationCompleted"), &__kCFBooleanTrue, 1);
              data_ark_set(v158, 0, CFSTR("BuildVersion"), v6, 1);
              data_ark_set(v158, 0, CFSTR("ProductVersion"), v162, 1);
              rollSplunkLogUUID(v158);
              v15 = 0;
              goto LABEL_77;
            }
            v109 = createAndLogError((uint64_t)"perform_data_migration", 1769, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v57, CFSTR("Failed to perform restore log migration task."));
          }
          else
          {
            v109 = createMobileActivationError((uint64_t)"perform_data_migration", 1764, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v57, CFSTR("Failed to perform data migration task."));
          }
          v18 = v109;
          v34 = v57;
          goto LABEL_75;
        }
        v35 = createMobileActivationError((uint64_t)"perform_dawn_data_migration_tasks", 1668, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v43, CFSTR("Failed to parse DCRT DER cert chain."));

      }
      else
      {
        v35 = createMobileActivationError((uint64_t)"perform_dawn_data_migration_tasks", 1649, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve %@."), CFSTR("ProductVersion"));
        v163 = 0;
        v159 = 0;
        v155 = 0;
      }
      v153 = 0;
      v36 = v151;
      goto LABEL_27;
    }
    v35 = createMobileActivationError((uint64_t)"perform_dawn_data_migration_tasks", 1638, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve %@."), CFSTR("BuildVersion"));
    v163 = 0;
    v159 = 0;
    v153 = 0;
    v155 = 0;
    v25 = 0;
    v36 = 0;
    goto LABEL_27;
  }
  v15 = 0;
  v16 = 1;
LABEL_78:

  v112 = v15;
  if ((v16 & 1) != 0)
  {
    v113 = *(void **)(a1 + 32);
    if (v113)
    {
      v114 = v113;
      data_ark_register_set_notification(v114, 0, CFSTR("BrickState"), CFSTR("com.apple.mobile.lockdown.brick_state"), 8);
      data_ark_register_set_notification(v114, 0, CFSTR("ActivationState"), CFSTR("com.apple.mobile.lockdown.activation_state"), 8);
      data_ark_register_set_notification(v114, 0, CFSTR("CollectionLastPerformed"), CFSTR("com.apple.mobile.activation.collection_performed"), 2);
      data_ark_register_set_notification(v114, 0, CFSTR("UCRTOOBLastPerformed"), CFSTR("com.apple.mobile.activation.ucrt_oob_performed"), 2);
      data_ark_register_set_notification(v114, 0, CFSTR("DCRTOOBLastPerformed"), CFSTR("com.apple.mobile.activation.dcrt_oob_performed"), 2);
      v115 = v112;
    }
    else
    {
      v117 = 0;
      v115 = objc_retainAutorelease(createMobileActivationError((uint64_t)"register_notifications", 1805, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid intput.")));

    }
    v118 = v115;

    if (v113)
    {
      v119 = *(id *)(a1 + 32);
      if (v119)
      {
        v120 = (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.factoryactivation"), "UTF8String");
        *(_QWORD *)buf = _NSConcreteStackBlock;
        v183 = 3254779904;
        v184 = __register_xpc_activities_block_invoke;
        v185 = &__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        v121 = (NSError *)v119;
        v186 = v121;
        xpc_activity_register(v120, XPC_ACTIVITY_CHECK_IN, buf);
        v122 = (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.collection"), "UTF8String");
        *(_QWORD *)handler = _NSConcreteStackBlock;
        *(_QWORD *)&handler[8] = 3254779904;
        *(_QWORD *)&handler[16] = __register_xpc_activities_block_invoke_511;
        v176 = (NSError *)&__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        v123 = v121;
        v177 = v123;
        xpc_activity_register(v122, XPC_ACTIVITY_CHECK_IN, handler);
        v124 = (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.UCRT.OOB"), "UTF8String");
        *(_QWORD *)&v187 = _NSConcreteStackBlock;
        *((_QWORD *)&v187 + 1) = 3254779904;
        *(_QWORD *)&v188 = __register_xpc_activities_block_invoke_512;
        *((_QWORD *)&v188 + 1) = &__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        v125 = v123;
        v189[0] = v125;
        xpc_activity_register(v124, XPC_ACTIVITY_CHECK_IN, &v187);
        v126 = (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.DCRT.OOB"), "UTF8String");
        *(_QWORD *)&v178 = _NSConcreteStackBlock;
        *((_QWORD *)&v178 + 1) = 3254779904;
        *(_QWORD *)&v179 = __register_xpc_activities_block_invoke_513;
        *((_QWORD *)&v179 + 1) = &__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        v127 = v125;
        v180[0] = v127;
        xpc_activity_register(v126, XPC_ACTIVITY_CHECK_IN, &v178);
        v128 = (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.SDCRT.OOB"), "UTF8String");
        *(_QWORD *)v195 = _NSConcreteStackBlock;
        *(_QWORD *)&v195[8] = 3254779904;
        *(_QWORD *)&v195[16] = __register_xpc_activities_block_invoke_514;
        v196 = (NSError *)&__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        v129 = v127;
        v197 = v129;
        xpc_activity_register(v128, XPC_ACTIVITY_CHECK_IN, v195);
        v130 = (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.DCRT.OOB.LoadSpreading"), "UTF8String");
        v193[0] = _NSConcreteStackBlock;
        v193[1] = (id)3254779904;
        v193[2] = __register_xpc_activities_block_invoke_515;
        v193[3] = &__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        v131 = v129;
        v194 = v131;
        xpc_activity_register(v130, XPC_ACTIVITY_CHECK_IN, v193);
        v132 = (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.SDCRT.OOB.LoadSpreading"), "UTF8String");
        v191[0] = _NSConcreteStackBlock;
        v191[1] = 3254779904;
        v191[2] = __register_xpc_activities_block_invoke_516;
        v191[3] = &__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        v133 = v131;
        v192 = v133;
        xpc_activity_register(v132, XPC_ACTIVITY_CHECK_IN, v191);
        v134 = (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.splunklogging"), "UTF8String");
        v173[0] = _NSConcreteStackBlock;
        v173[1] = (id)3254779904;
        v173[2] = __register_xpc_activities_block_invoke_517;
        v173[3] = &__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        v135 = v133;
        v174 = v135;
        xpc_activity_register(v134, XPC_ACTIVITY_CHECK_IN, v173);
        v136 = (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.splunklogging.daily"), "UTF8String");
        v171[0] = _NSConcreteStackBlock;
        v171[1] = (id)3254779904;
        v171[2] = __register_xpc_activities_block_invoke_518;
        v171[3] = &__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        v137 = v135;
        v172 = v137;
        xpc_activity_register(v136, XPC_ACTIVITY_CHECK_IN, v171);
        v138 = (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.splunklogging.rollidentifier"), "UTF8String");
        v169[0] = _NSConcreteStackBlock;
        v169[1] = (id)3254779904;
        v169[2] = __register_xpc_activities_block_invoke_519;
        v169[3] = &__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        v170 = v137;
        xpc_activity_register(v138, XPC_ACTIVITY_CHECK_IN, v169);

        v139 = v186;
        v140 = v118;
      }
      else
      {
        v139 = objc_retainAutorelease(createMobileActivationError((uint64_t)"register_xpc_activities", 1833, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid intput(s).")));
        v140 = v139;
      }

      v17 = v140;
      if (v119)
      {
        dealwith_activation(*(void **)(a1 + 32), 0);
        performMigration_retval = 1;
      }
      else
      {
        v141 = createAndLogError((uint64_t)"performMigration_block_invoke", 2090, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v17, CFSTR("Failed to register XPC activities."));

        v17 = v141;
      }
      goto LABEL_92;
    }
    v17 = createAndLogError((uint64_t)"performMigration_block_invoke", 2085, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v118, CFSTR("Failed to register notifications."));
    v116 = v118;
  }
  else
  {
    v17 = createAndLogError((uint64_t)"performMigration_block_invoke", 2080, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v112, CFSTR("Data migration failed."));
    v116 = v112;
  }

LABEL_92:
  v142 = (void *)performMigration_localError;
  performMigration_localError = (uint64_t)v17;
  v143 = v17;

  data_ark_set(*(void **)(a1 + 32), 0, CFSTR("DataMigrationCompleted"), &__kCFBooleanTrue, 0);
  v144 = copySignpostLoggingHandle();
  if (os_signpost_enabled(v144))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v144, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "performMigration", (const char *)&unk_1002533A1, buf, 2u);
  }

}

uint64_t dealwith_activation(void *a1, _QWORD *a2)
{
  id v3;
  id v4;
  __CFString *v5;
  id v6;
  id v7;
  id v8;
  NSError *v9;
  uint64_t v10;
  char v11;
  NSError *v12;
  id v13;
  NSFileManager *v14;
  unsigned __int8 v15;
  id v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  id v20;
  id v22;
  id v23;
  char v24;

  v3 = a1;
  v24 = 0;
  v4 = data_ark_copy(v3, 0, CFSTR("ActivationState"));
  v5 = (__CFString *)isNSString(v4);

  if (!v5)
    v5 = CFSTR("Unactivated");
  if (use_hactivation())
  {
    maLog((uint64_t)"dealwith_activation", 0, CFSTR("Hactivation is enabled, short circuiting activation state to Activated."));
    data_ark_set(v3, 0, CFSTR("ActivationState"), CFSTR("Activated"), 0);
    data_ark_set(v3, 0, CFSTR("BrickState"), &__kCFBooleanFalse, 0);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 1;
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v11 = load_and_validate_activation_record(v3, &v23, &v24, (NSError **)&v22);
    v7 = v23;
    v12 = (NSError *)v22;
    if ((v11 & 1) != 0)
    {
      v6 = 0;
      if (data_ark_exists(v3, 0, CFSTR("CollectionLastPerformed")))
      {
        v13 = copy_suinfo_directory_path();
        v6 = objc_msgSend(v13, "stringByAppendingPathComponent:", CFSTR("psc.sui"));

        if (v6)
        {
          v14 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
          v15 = -[NSFileManager fileExistsAtPath:isDirectory:](v14, "fileExistsAtPath:isDirectory:", v6, 0);

          if ((v15 & 1) == 0)
          {
            v16 = data_ark_copy(v3, 0, CFSTR("CollectionLastPerformed"));
            maLog((uint64_t)"dealwith_activation", 0, CFSTR("suinfo from %@ is now missing."), v16);

            data_ark_remove(v3, 0, CFSTR("PCRTToken"));
            data_ark_remove(v3, 0, CFSTR("CollectionLastPerformed"));
          }
        }
      }
      v17 = data_ark_copy(v3, 0, CFSTR("ActivationExpired"));
      v8 = isNSNumber(v17);

      if (objc_msgSend(v8, "BOOLValue"))
      {
        maLog((uint64_t)"dealwith_activation", 0, CFSTR("Activation has expired, deactivating device."));
        handle_deactivate(v3, 1);
        v10 = 0;
      }
      else
      {
        data_ark_set(v3, 0, CFSTR("BrickState"), &__kCFBooleanFalse, 1);
        if (v24)
        {
          data_ark_set(v3, 0, CFSTR("ActivationState"), CFSTR("FactoryActivated"), 0);
          v10 = 1;
        }
        else
        {
          v10 = 1;
          data_ark_set(v3, 0, CFSTR("ActivationState"), CFSTR("Activated"), 1);
        }
      }
      v9 = v12;
    }
    else
    {
      v9 = createAndLogError((uint64_t)"dealwith_activation", 3484, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v12, CFSTR("Failed to load or validate activation record."));

      if (-[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Activated")))
      {
        v18 = copyLoggingHandle();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
          dealwith_activation_cold_1();

        writeSplunkLog(v3, 34, -1, (uint64_t)"dealwith_activation", 3488, 0, CFSTR("%@"), v19, (uint64_t)v9);
      }
      handle_deactivate(v3, 1);
      v10 = 0;
      v6 = 0;
      v8 = 0;
    }
  }
  v20 = data_ark_copy(v3, 0, CFSTR("ActivationState"));
  maLog((uint64_t)"dealwith_activation", 0, CFSTR("Activation State: %@"), v20);

  data_ark_set(v3, 0, CFSTR("ActivationExpired"), &__kCFBooleanFalse, 1);
  if (a2 && (v10 & 1) == 0)
    *a2 = objc_retainAutorelease(v9);

  return v10;
}

id preSydroDataMigrationCompleted(void *a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;

  v1 = data_ark_copy(a1, 0, CFSTR("PreSydroDataMigrationCompleted"));
  v2 = isNSNumber(v1);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v1, "BOOLValue");

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void issueDCRT(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  id v20;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = copyMobileActivationSerialQueue();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3254779904;
  v16[2] = __issueDCRT_block_invoke;
  v16[3] = &__block_descriptor_64_e8_32s40s48s56bs_e5_v8__0l;
  v17 = v9;
  v18 = v7;
  v19 = v8;
  v20 = v10;
  v12 = v10;
  v13 = v8;
  v14 = v7;
  v15 = v9;
  dispatch_async(v11, v16);

}

void __issueDCRT_block_invoke(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  _BOOL4 v5;
  __CFString *v6;
  uint64_t v7;
  const __CFString *v8;
  NSError *v9;
  id v10;
  _BOOL4 v11;
  unsigned __int8 v12;
  char v13;
  id *v14;
  id v15;
  void *v16;
  void *v17;
  const __CFData *v18;
  __SecCertificate *v19;
  id *v20;
  int v21;
  NSError *v22;
  id v23;
  id v24;
  uint64_t *v25;
  void *v26;
  id v27;
  char v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  _BOOL4 v35;
  id v36;
  id v37;
  double v38;
  NSError *v39;
  id *v40;
  char v41;
  id *v42;
  _BOOL4 is_legacy;
  void *v44;
  unsigned int v45;
  void *v46;
  id *v47;
  id *v48;
  id *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id *v53;
  id *v54;
  NSNumber *v55;
  id v56;
  _BOOL4 v57;
  id *v58;
  BOOL v59;
  const char *v60;
  NSError *v61;
  NSError *v62;
  void *v63;
  NSError *v64;
  NSError *v65;
  __CFString *v66;
  NSNumber *v67;
  void *v68;
  NSArray *v69;
  __SecKey *v70;
  unsigned int v71;
  NSNumber *v72;
  SecCertificateRef v73;
  void *v74;
  int v75;
  const __CFString *v76;
  CFTypeRef v77;
  const __CFString *v78;
  id v79;
  id v80;
  __CFString *v81;
  _QWORD v82[4];
  const __CFString *v83;
  id v84;
  id v85;
  id v86;
  id v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id obj;
  CFTypeRef cf;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t, uint64_t);
  void (*v106)(uint64_t);
  id v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t, uint64_t);
  void (*v112)(uint64_t);
  id v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t (*v117)(uint64_t, uint64_t);
  void (*v118)(uint64_t);
  id v119;
  const __CFString *v120;
  id v121;

  v114 = 0;
  v115 = &v114;
  v116 = 0x3032000000;
  v117 = __Block_byref_object_copy__5;
  v118 = __Block_byref_object_dispose__5;
  v119 = 0;
  v81 = CFSTR("DCRTIssuanceInFlight");
  v108 = 0;
  v109 = &v108;
  v110 = 0x3032000000;
  v111 = __Block_byref_object_copy__5;
  v112 = __Block_byref_object_dispose__5;
  v113 = 0;
  v102 = 0;
  v103 = &v102;
  v104 = 0x3032000000;
  v105 = __Block_byref_object_copy__5;
  v106 = __Block_byref_object_dispose__5;
  v107 = 0;
  cf = 0;
  v2 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("sdcrtAttestation"));
  v3 = v2;
  if (v2)
  {
    v4 = isNSNumber(v2);
    v5 = v4 == 0;

    if (v5)
    {
      v9 = createMobileActivationError((uint64_t)"issueDCRT_block_invoke", 2186, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid option (%@)."), CFSTR("sdcrtAttestation"));
      goto LABEL_19;
    }
  }
  if (objc_msgSend(v3, "BOOLValue"))
  {
    v6 = CFSTR("SDCRTIssuanceInFlight");

    v75 = 3;
    v7 = 10;
    v76 = CFSTR("SDAK");
    v81 = v6;
    v8 = CFSTR("SDCRT");
  }
  else
  {
    v75 = 1;
    v7 = 9;
    v76 = CFSTR("DAK");
    v8 = CFSTR("DCRT");
  }
  v78 = v8;
  if (is_virtual_machine())
  {
    v9 = createMobileActivationError((uint64_t)"issueDCRT_block_invoke", 2199, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("%@ not supported on virtual machines."), v78);
LABEL_19:
    v22 = v9;
    v23 = 0;
    v19 = 0;
    v79 = 0;
    v80 = 0;
LABEL_20:
    v24 = 0;
LABEL_21:
    v25 = v115;
    goto LABEL_22;
  }
  v80 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("IgnoreExistingDCRT"));
  if (v80)
  {
    v10 = isNSNumber(v80);
    v11 = v10 == 0;

    if (v11)
    {
      v22 = createMobileActivationError((uint64_t)"issueDCRT_block_invoke", 2207, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid option (%@)."), CFSTR("IgnoreExistingDCRT"));
      v23 = 0;
      v19 = 0;
      v79 = 0;
      goto LABEL_20;
    }
  }
  v79 = copyDCRT(*(void **)(a1 + 40), 0, 0, *(void **)(a1 + 32), 0);
  v12 = objc_msgSend(v80, "BOOLValue");
  if (v79)
    v13 = v12;
  else
    v13 = 1;
  if ((v13 & 1) != 0)
    goto LABEL_31;
  v14 = (id *)v115;
  obj = (id)v115[5];
  v15 = parseDERCertificatesFromChain(v79, &obj);
  objc_storeStrong(v14 + 5, obj);
  v16 = (void *)v109[5];
  v109[5] = (uint64_t)v15;

  v17 = (void *)v109[5];
  if (!v17)
  {
LABEL_31:
    v19 = 0;
  }
  else
  {
    v18 = (const __CFData *)objc_msgSend(v17, "objectAtIndexedSubscript:", 0);
    v19 = SecCertificateCreateWithData(kCFAllocatorDefault, v18);

    if (v19)
    {
      v20 = (id *)v115;
      v99 = (id)v115[5];
      v21 = certificatePublicKeyMatchesSystemPublicKey(2, v7, v19, (NSError **)&v99);
      objc_storeStrong(v20 + 5, v99);
      if (v21)
      {
        v120 = CFSTR("RKCertification");
        v121 = v79;
        v22 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v121, &v120, 1);
        v23 = 0;
        v24 = 0;
        v25 = v103;
LABEL_22:
        v26 = (void *)v25[5];
        v25[5] = (uint64_t)v22;

        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        goto LABEL_23;
      }
    }
  }
  v33 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("UseCellularBootstrapProxy"));
  if (v33
    || (v33 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("UseCellularOTAProxy"))) != 0
    || (v33 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("SOCKSProxyHost"))) != 0)
  {

  }
  else
  {
    v56 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("SOCKSProxyPort"));
    v57 = v56 == 0;

    if (v57)
    {
      v58 = (id *)v115;
      v98 = (id)v115[5];
      v59 = networkReachable();
      objc_storeStrong(v58 + 5, v98);
      if (!v59)
      {
        v22 = createMobileActivationError((uint64_t)"issueDCRT_block_invoke", 2234, CFSTR("com.apple.MobileActivation.ErrorDomain"), -17, (void *)v115[5], CFSTR("Network is unavailable."));
        v23 = 0;
        goto LABEL_20;
      }
    }
  }
  v23 = data_ark_copy(*(void **)(a1 + 40), 0, v81);
  v34 = isNSNumber(v23);
  v35 = v34 == 0;

  if (v35)
  {

    v23 = &__kCFBooleanFalse;
  }
  if (objc_msgSend(v23, "BOOLValue"))
  {
    v22 = createMobileActivationError((uint64_t)"issueDCRT_block_invoke", 2247, CFSTR("com.apple.MobileActivation.ErrorDomain"), -13, 0, CFSTR("Another %@ request is already in flight."), v78);
    goto LABEL_20;
  }
  v36 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:");
  v37 = isNSNumber(v36);

  if (v37)
  {
    v24 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("NetworkTimeoutInterval"));
    objc_msgSend(v24, "doubleValue");
    if (v38 <= 0.0)
    {
      v39 = createMobileActivationError((uint64_t)"issueDCRT_block_invoke", 2256, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid network timeout requested: %@"), v24);
LABEL_50:
      v22 = v39;
      goto LABEL_21;
    }
  }
  else
  {
    v24 = 0;
  }
  v40 = (id *)v115;
  v97 = (id)v115[5];
  v41 = libaks_system_key_operate(v7, 1, (NSError **)&v97);
  objc_storeStrong(v40 + 5, v97);
  if ((v41 & 1) == 0)
  {
    v39 = createMobileActivationError((uint64_t)"issueDCRT_block_invoke", 2264, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, (void *)v115[5], CFSTR("Failed to bump %@."), v76);
    goto LABEL_50;
  }
  v42 = (id *)v115;
  v96 = (id)v115[5];
  is_legacy = security_committed_uik_is_legacy(&v96);
  objc_storeStrong(v42 + 5, v96);
  if (!is_legacy)
  {
    v44 = (void *)v115[5];
    if (v44)
    {
      v39 = createMobileActivationError((uint64_t)"issueDCRT_block_invoke", 2276, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v44, CFSTR("Failed to query legacy UIK support."));
      goto LABEL_50;
    }
  }
  v71 = platform_supports_activation() ^ 1 | is_legacy;
  if ((v71 & 1) != 0)
  {
    v73 = 0;
    v45 = 1;
  }
  else
  {
    v46 = *(void **)(a1 + 40);
    v47 = (id *)v115;
    v95 = (id)v115[5];
    v73 = copyUCRT(v46, (NSError **)&v95);
    objc_storeStrong(v47 + 5, v95);
    if (!v73)
    {
      v39 = createMobileActivationError((uint64_t)"issueDCRT_block_invoke", 2293, CFSTR("com.apple.MobileActivation.ErrorDomain"), -4, (void *)v115[5], CFSTR("UCRT is unavailable."));
      goto LABEL_50;
    }
    v45 = 0;
  }
  v48 = (id *)v115;
  v94 = (id)v115[5];
  v30 = libaks_system_key_collection(v7, 3, v45, 0, (NSError **)&v94);
  objc_storeStrong(v48 + 5, v94);
  if (!v30)
  {
    if (v71)
      v60 = "SIK";
    else
      v60 = "UIK";
    v61 = createMobileActivationError((uint64_t)"issueDCRT_block_invoke", 2300, CFSTR("com.apple.MobileActivation.ErrorDomain"), -11, (void *)v115[5], CFSTR("Failed to attest %@ to %s."), v76, v60);
    goto LABEL_72;
  }
  v49 = (id *)v115;
  v93 = (id)v115[5];
  v29 = libaks_system_key_get_public(v7, 3, (NSError **)&v93);
  objc_storeStrong(v49 + 5, v93);
  if (!v29)
  {
    v61 = createMobileActivationError((uint64_t)"issueDCRT_block_invoke", 2308, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, (void *)v115[5], CFSTR("Failed to query %@ public key."), v76);
LABEL_72:
    v62 = v61;
    v29 = 0;
    goto LABEL_73;
  }
  v50 = SecAccessControlCreate(0, &cf);
  v77 = (CFTypeRef)v50;
  if (v50)
  {
    v51 = kSecAttrAccessibleUntilReboot;
    if ((SecAccessControlSetProtection(v50, kSecAttrAccessibleUntilReboot, &cf) & 1) != 0)
    {
      v52 = *(void **)(a1 + 32);
      v53 = (id *)v115;
      v92 = (id)v115[5];
      v70 = (__SecKey *)createReferenceKeyBlob(v77, 0, v52, &v92);
      objc_storeStrong(v53 + 5, v92);
      if (v70)
      {
        v54 = (id *)v115;
        v91 = (id)v115[5];
        v31 = security_create_external_representation(v70, 0, (NSError **)&v91);
        objc_storeStrong(v54 + 5, v91);
        if (v31)
        {
          v27 = objc_alloc_init((Class)NSMutableDictionary);
          if (v27)
          {
            v69 = copy_required_dcrt_oids();
            objc_msgSend(v27, "setObject:forKeyedSubscript:", v69, CFSTR("OIDSToInclude"));

            objc_msgSend(v27, "setObject:forKeyedSubscript:", v30, CFSTR("ClientAttestationData"));
            objc_msgSend(v27, "setObject:forKeyedSubscript:", v29, CFSTR("ClientAttestationPublicKey"));
            v72 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v71);
            objc_msgSend(v27, "setObject:forKeyedSubscript:", v72, CFSTR("scrtAttestation"));

            objc_msgSend(v27, "setObject:forKeyedSubscript:", v3, CFSTR("sdcrtAttestation"));
            if (objc_msgSend(v3, "BOOLValue"))
              v55 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 2);
            else
              v55 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 0);
            v67 = v55;
            objc_msgSend(v27, "setObject:forKeyedSubscript:", v55, CFSTR("CertType"));

            if (v24)
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v24, CFSTR("NetworkTimeoutInterval"));
            data_ark_set(*(void **)(a1 + 40), 0, v81, &__kCFBooleanTrue, 0);
            v68 = *(void **)(a1 + 40);
            v74 = *(void **)(a1 + 48);
            v82[0] = _NSConcreteStackBlock;
            v82[1] = 3254779904;
            v82[2] = __issueDCRT_block_invoke_2;
            v82[3] = &__block_descriptor_96_e8_32s40s48s56s64bs72r80r88r_e34_v24__0__NSDictionary_8__NSError_16l;
            v88 = &v114;
            v83 = v78;
            v84 = *(id *)(a1 + 32);
            v89 = &v108;
            v85 = *(id *)(a1 + 40);
            v90 = &v102;
            v86 = v81;
            v87 = *(id *)(a1 + 56);
            issueClientCertificateWithReferenceKey(v68, v74, v31, v75, v27, v82);

            v28 = 1;
            v66 = (__CFString *)v83;
            goto LABEL_82;
          }
          v65 = createMobileActivationError((uint64_t)"issueDCRT_block_invoke", 2342, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate dictionary."));
        }
        else
        {
          v65 = createMobileActivationError((uint64_t)"issueDCRT_block_invoke", 2334, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, (void *)v115[5], CFSTR("Failed to encode RK as data."));
          v31 = 0;
        }
LABEL_81:
        v28 = 0;
        v27 = 0;
        v66 = (__CFString *)v115[5];
        v115[5] = (uint64_t)v65;
LABEL_82:

        CFRelease(v77);
        if (v70)
          CFRelease(v70);
        goto LABEL_74;
      }
      v64 = createMobileActivationError((uint64_t)"issueDCRT_block_invoke", 2328, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, (void *)v115[5], CFSTR("Failed to create reference key."));
    }
    else
    {
      v64 = createMobileActivationError((uint64_t)"issueDCRT_block_invoke", 2322, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, (void *)cf, CFSTR("Failed to set ACL protection to %@."), v51);
    }
    v65 = v64;
    v31 = 0;
    v70 = 0;
    goto LABEL_81;
  }
  v62 = createMobileActivationError((uint64_t)"issueDCRT_block_invoke", 2317, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, (void *)cf, CFSTR("Failed to create access control."));
LABEL_73:
  v63 = (void *)v115[5];
  v115[5] = (uint64_t)v62;

  v31 = 0;
  v28 = 0;
  v27 = 0;
LABEL_74:
  if (v73)
    CFRelease(v73);
LABEL_23:
  if (cf)
    CFRelease(cf);
  cf = 0;
  if (v19)
    CFRelease(v19);
  if ((v28 & 1) == 0)
  {
    v32 = *(_QWORD *)(a1 + 56);
    if (v32)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v32, v103[5], v115[5]);
  }
  _Block_object_dispose(&v102, 8);

  _Block_object_dispose(&v108, 8);
  _Block_object_dispose(&v114, 8);

}

void sub_100022344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  _Block_object_dispose(&a45, 8);
  _Block_object_dispose((const void *)(v45 - 224), 8);
  _Block_object_dispose((const void *)(v45 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void issueClientCertificateWithReferenceKey(void *a1, void *a2, void *a3, int a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  int v28;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a5;
  v15 = a6;
  v16 = copyMobileActivationSerialQueue();
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3254779904;
  v22[2] = __issueClientCertificateWithReferenceKey_block_invoke;
  v22[3] = &__block_descriptor_76_e8_32s40s48s56s64bs_e5_v8__0l;
  v23 = v11;
  v24 = v12;
  v25 = v13;
  v26 = v14;
  v28 = a4;
  v27 = v15;
  v17 = v15;
  v18 = v14;
  v19 = v13;
  v20 = v12;
  v21 = v11;
  dispatch_async(v16, v22);

}

void __issueDCRT_block_invoke_2(uint64_t a1, id a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = a2;
  v6 = a3;
  v7 = copyMobileActivationSerialQueue();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3254779904;
  v13[2] = __issueDCRT_block_invoke_3;
  v13[3] = &__block_descriptor_112_e8_32s40s48s56s64s72s80bs88r96r104r_e5_v8__0l;
  v8 = *(_QWORD *)(a1 + 72);
  v14 = v6;
  v21 = v8;
  v15 = *(id *)(a1 + 32);
  v16 = *(id *)(a1 + 40);
  v17 = v5;
  v22 = *(_QWORD *)(a1 + 80);
  v9 = *(id *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 88);
  v18 = v9;
  v23 = v10;
  v19 = *(id *)(a1 + 56);
  v20 = *(id *)(a1 + 64);
  v11 = v5;
  v12 = v6;
  dispatch_async(v7, v13);

}

void __issueDCRT_block_invoke_3(uint64_t a1)
{
  void *v2;
  NSError *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  char v19;
  NSDictionary *v20;
  uint64_t v21;
  NSError *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSError *MobileActivationError;
  uint64_t v27;
  void *v28;
  id obj;
  const __CFString *v30;
  id v31;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v3 = createMobileActivationError((uint64_t)"issueDCRT_block_invoke_3", 2367, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v2, CFSTR("Failed to retrieve %@."), *(_QWORD *)(a1 + 40));
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;
    v6 = v5;
LABEL_9:

    v14 = 0;
    goto LABEL_10;
  }
  v7 = objc_msgSend(*(id *)(a1 + 48), "mutableCopy");
  v8 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("ServerResponseDate"));
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v8, CFSTR("ServerResponseDate"));

  v9 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("RKCertification"));
  v10 = isNSArray(v9);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

  v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
  if (!v13 || objc_msgSend(v13, "count") != (id)2)
  {
    v22 = createMobileActivationError((uint64_t)"issueDCRT_block_invoke_3", 2376, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve %@."), *(_QWORD *)(a1 + 40));
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
    v24 = *(void **)(v23 + 40);
    *(_QWORD *)(v23 + 40) = v22;

    v6 = v7;
    goto LABEL_9;
  }
  v14 = objc_alloc_init((Class)NSMutableData);
  if (!v14)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"issueDCRT_block_invoke_3", 2382, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create data."));
LABEL_15:
    v20 = MobileActivationError;
    v21 = *(_QWORD *)(a1 + 88);
    goto LABEL_16;
  }
  v15 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), "objectAtIndexedSubscript:", 0);
  objc_msgSend(v14, "appendData:", v15);

  v16 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), "objectAtIndexedSubscript:", 1);
  objc_msgSend(v14, "appendData:", v16);

  v17 = *(void **)(a1 + 64);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  obj = *(id *)(v18 + 40);
  v19 = storeDCRT(v17, v14, v7, &obj);
  objc_storeStrong((id *)(v18 + 40), obj);
  if ((v19 & 1) == 0)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"issueDCRT_block_invoke_3", 2390, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), CFSTR("Failed to store %@."), *(_QWORD *)(a1 + 40));
    goto LABEL_15;
  }
  v30 = CFSTR("RKCertification");
  v31 = v14;
  v20 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);
  v21 = *(_QWORD *)(a1 + 104);
LABEL_16:
  v27 = *(_QWORD *)(v21 + 8);
  v28 = *(void **)(v27 + 40);
  *(_QWORD *)(v27 + 40) = v20;

LABEL_10:
  data_ark_set(*(void **)(a1 + 64), 0, *(void **)(a1 + 72), &__kCFBooleanFalse, 0);
  v25 = *(_QWORD *)(a1 + 80);
  if (v25)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v25 + 16))(v25, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40));

}

void __copy_helper_block_e8_32s40s48s56s64s72s80b88r96r104r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  v8 = *(id *)(a2 + 64);
  v9 = *(id *)(a2 + 72);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 7);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
  _Block_object_assign((void *)(a1 + 96), *(const void **)(a2 + 96), 8);
  _Block_object_assign((void *)(a1 + 104), *(const void **)(a2 + 104), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80s88r96r104r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 104), 8);
  _Block_object_dispose(*(const void **)(a1 + 96), 8);
  _Block_object_dispose(*(const void **)(a1 + 88), 8);

}

void __copy_helper_block_e8_32s40s48s56s64b72r80r88r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 7);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 8);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72r80r88r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 88), 8);
  _Block_object_dispose(*(const void **)(a1 + 80), 8);
  _Block_object_dispose(*(const void **)(a1 + 72), 8);

}

void __copy_helper_block_e8_32s40s48s56b(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 7);
}

void __destroy_helper_block_e8_32s40s48s56s(id *a1)
{

}

void issueCollection(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  id v20;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = copyMobileActivationSerialQueue();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3254779904;
  v16[2] = __issueCollection_block_invoke;
  v16[3] = &__block_descriptor_64_e8_32s40s48s56bs_e5_v8__0l;
  v17 = v9;
  v18 = v7;
  v19 = v8;
  v20 = v10;
  v12 = v10;
  v13 = v8;
  v14 = v7;
  v15 = v9;
  dispatch_async(v11, v16);

}

void __issueCollection_block_invoke(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  double v5;
  NSError *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  NSError *v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  NSError *v22;
  id v23;
  id *v24;
  BOOL v25;
  _QWORD v26[4];
  id v27;
  id v28;
  id v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  id obj;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t);
  id v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t);
  id v45;
  uint64_t v46;
  id *v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  void (*v50)(uint64_t);
  id v51;

  v46 = 0;
  v47 = (id *)&v46;
  v48 = 0x3032000000;
  v49 = __Block_byref_object_copy__5;
  v50 = __Block_byref_object_dispose__5;
  v51 = 0;
  v40 = 0;
  v41 = &v40;
  v42 = 0x3032000000;
  v43 = __Block_byref_object_copy__5;
  v44 = __Block_byref_object_dispose__5;
  v45 = 0;
  v34 = 0;
  v35 = &v34;
  v36 = 0x3032000000;
  v37 = __Block_byref_object_copy__5;
  v38 = __Block_byref_object_dispose__5;
  v39 = 0;
  v2 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("NetworkTimeoutInterval"));
  v3 = isNSNumber(v2);

  if (!v3)
  {
    v4 = 0;
LABEL_5:
    v7 = data_ark_copy(*(void **)(a1 + 40), 0, CFSTR("ActivationState"));
    v8 = isNSString(v7);
    v9 = (void *)v41[5];
    v41[5] = (uint64_t)v8;

    if ((objc_msgSend((id)v41[5], "isEqualToString:", CFSTR("Activated")) & 1) == 0)
    {
      v6 = createMobileActivationError((uint64_t)"issueCollection_block_invoke", 2448, CFSTR("com.apple.MobileActivation.ErrorDomain"), -8, 0, CFSTR("Device is not activated (%@)."), v41[5]);
      goto LABEL_12;
    }
    v10 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("IgnoreExistingCollection"));
    v11 = v10;
    if (v10 && (v12 = isNSNumber(v10), v12, !v12))
    {
      v22 = createMobileActivationError((uint64_t)"issueCollection_block_invoke", 2457, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid option (%@)."), CFSTR("IgnoreExistingCollection"));
    }
    else
    {
      if ((objc_msgSend(v11, "BOOLValue") & 1) == 0 && collectionAlreadyPerformed(*(void **)(a1 + 40)))
      {
        v13 = 0;
        goto LABEL_15;
      }
      v17 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("UseCellularBootstrapProxy"));
      if (v17
        || (v17 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("UseCellularOTAProxy"))) != 0
        || (v17 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("SOCKSProxyHost"))) != 0)
      {

LABEL_22:
        v13 = data_ark_copy(*(void **)(a1 + 40), 0, CFSTR("InFieldCollectionInFlight"));
        v18 = isNSNumber(v13);

        if (!v18)
        {

          v13 = &__kCFBooleanFalse;
        }
        if (!objc_msgSend(v13, "BOOLValue"))
        {
          data_ark_set(*(void **)(a1 + 40), 0, CFSTR("InFieldCollectionInFlight"), &__kCFBooleanTrue, 0);
          v20 = *(void **)(a1 + 32);
          v19 = *(void **)(a1 + 40);
          v21 = *(void **)(a1 + 48);
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3254779904;
          v26[2] = __issueCollection_block_invoke_2;
          v26[3] = &__block_descriptor_80_e8_32s40s48bs56r64r72r_e48_v40__0__NSData_8__NSDictionary_16q24__NSError_32l;
          v30 = &v40;
          v27 = v19;
          v31 = &v46;
          v11 = v11;
          v28 = v11;
          v29 = *(id *)(a1 + 56);
          v32 = &v34;
          performInFieldCollection(v27, v20, v21, v26);

          goto LABEL_17;
        }
        v14 = createMobileActivationError((uint64_t)"issueCollection_block_invoke", 2484, CFSTR("com.apple.MobileActivation.ErrorDomain"), -13, 0, CFSTR("Another collection request is already in flight."));
        goto LABEL_14;
      }
      v23 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("SOCKSProxyPort"));

      if (v23)
        goto LABEL_22;
      v24 = v47;
      obj = v47[5];
      v25 = networkReachable();
      objc_storeStrong(v24 + 5, obj);
      if (v25)
        goto LABEL_22;
      v22 = createMobileActivationError((uint64_t)"issueCollection_block_invoke", 2471, CFSTR("com.apple.MobileActivation.ErrorDomain"), -17, v47[5], CFSTR("Network is unavailable."));
    }
    v14 = v22;
    goto LABEL_13;
  }
  v4 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("NetworkTimeoutInterval"));
  objc_msgSend(v4, "doubleValue");
  if (v5 > 0.0)
    goto LABEL_5;
  v6 = createMobileActivationError((uint64_t)"issueCollection_block_invoke", 2439, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid network timeout requested: %@"), v4);
LABEL_12:
  v14 = v6;
  v11 = 0;
LABEL_13:
  v13 = 0;
LABEL_14:
  v15 = v47[5];
  v47[5] = v14;

LABEL_15:
  v16 = *(_QWORD *)(a1 + 56);
  if (v16)
    (*(void (**)(uint64_t, uint64_t, id))(v16 + 16))(v16, v35[5], v47[5]);
LABEL_17:
  _Block_object_dispose(&v34, 8);

  _Block_object_dispose(&v40, 8);
  _Block_object_dispose(&v46, 8);

}

void sub_1000232C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

BOOL collectionAlreadyPerformed(void *a1)
{
  id v1;
  id v2;
  id v3;
  NSFileManager *v4;
  unsigned int v5;
  _BOOL8 v6;

  v1 = data_ark_copy(a1, 0, CFSTR("CollectionLastPerformed"));
  v2 = isNSString(v1);

  v6 = 0;
  if (v2)
  {
    v3 = copy_suinfo_directory_path();
    v2 = objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("psc.sui"));

    if (!v2
      || (v4 = +[NSFileManager defaultManager](NSFileManager, "defaultManager"),
          v5 = -[NSFileManager fileExistsAtPath:isDirectory:](v4, "fileExistsAtPath:isDirectory:", v2, 0),
          v4,
          v5))
    {
      v6 = 1;
    }
  }

  return v6;
}

void performInFieldCollection(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  id v20;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = dispatch_get_global_queue(0, 0);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3254779904;
  v16[2] = __performInFieldCollection_block_invoke;
  v16[3] = &__block_descriptor_64_e8_32s40s48s56bs_e5_v8__0l;
  v17 = v8;
  v18 = v7;
  v19 = v9;
  v20 = v10;
  v12 = v9;
  v13 = v7;
  v14 = v8;
  v15 = v10;
  dispatch_async(v11, v16);

}

void __issueCollection_block_invoke_2(uint64_t a1, id a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  dispatch_block_t v20;
  NSObject *v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v9 = a2;
  v10 = a3;
  v11 = a5;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3254779904;
  v22[2] = __issueCollection_block_invoke_3;
  v22[3] = &__block_descriptor_112_e8_32s40s48s56s64s72bs80r88r96r_e5_v8__0l;
  v29 = *(_QWORD *)(a1 + 56);
  v12 = *(id *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 64);
  v23 = v12;
  v30 = v13;
  v14 = *(id *)(a1 + 40);
  v32 = a4;
  v24 = v14;
  v25 = v11;
  v26 = v10;
  v27 = v9;
  v15 = *(id *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 72);
  v28 = v15;
  v31 = v16;
  v17 = v9;
  v18 = v10;
  v19 = v11;
  v20 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, v22);
  v21 = copyMobileActivationSerialQueue();
  dispatch_async(v21, v20);

}

uint64_t __issueCollection_block_invoke_3(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  __CFString *v8;
  uint64_t v9;
  NSError *MobileActivationError;
  id v11;
  id v12;
  id v13;
  NSError *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  void *v22;
  NSString *v23;
  NSError *v24;
  uint64_t v25;
  NSString *v26;
  NSError *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void *v31;
  NSString *v32;
  NSError *v33;
  uint64_t v34;
  NSString *v35;
  NSError *v36;
  uint64_t v37;
  MACollectionInterface *v38;
  id v39;
  MACollectionInterface *v40;
  id v41;
  MACollectionInterface *v42;
  MACollectionInterface *v43;
  uint64_t v44;
  uint64_t v45;
  MACollectionInterface *v46;
  id v47;
  id v48;
  MACollectionInterface *v49;
  MACollectionInterface *v50;
  uint64_t v51;
  unsigned __int8 v52;
  MACollectionInterface *v53;
  id v54;
  MACollectionInterface *v55;
  NSError *v56;
  uint64_t v57;
  MACollectionInterface *v58;
  NSError *v59;
  NSError *v60;
  uint64_t v61;
  void *v62;
  NSError *v63;
  uint64_t v64;
  void *v65;
  NSError *v66;
  NSError *v67;
  uint64_t v68;
  void *v69;
  MACollectionInterface *v70;
  NSError *v71;
  uint64_t v72;
  void *v73;
  id v74;
  id obj;
  uint8_t buf[4];
  uint64_t v77;

  v2 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("ActivationState"));
  v3 = isNSString(v2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  if ((objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "isEqualToString:", CFSTR("Activated")) & 1) == 0)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"issueCollection_block_invoke_3", 2506, CFSTR("com.apple.MobileActivation.ErrorDomain"), -8, 0, CFSTR("Device is not activated (%@)."), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40));
    goto LABEL_13;
  }
  if ((objc_msgSend(*(id *)(a1 + 40), "BOOLValue") & 1) != 0
    || !collectionAlreadyPerformed(*(void **)(a1 + 32)))
  {
    v6 = *(_QWORD *)(a1 + 104);
    if (v6 != 200)
    {
      if (v6)
      {
        if (v6 != -1)
        {
          v22 = *(void **)(a1 + 48);
          v23 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", *(_QWORD *)(a1 + 104));
          v24 = createMobileActivationError((uint64_t)"issueCollection_block_invoke_3", 2521, CFSTR("com.apple.MobileActivation.ServerErrorDomain"), v6, v22, CFSTR("Server error: %ld (%@)"), v6, v23);

          v25 = *(_QWORD *)(a1 + 104);
          v26 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", v25);
          v27 = createMobileActivationError((uint64_t)"issueCollection_block_invoke_3", 2521, CFSTR("com.apple.MobileActivation.ErrorDomain"), -6, v24, CFSTR("Server error: %ld (%@)"), v25, v26);

          v28 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
          v17 = *(void **)(v28 + 40);
          *(_QWORD *)(v28 + 40) = v27;
          goto LABEL_14;
        }
        v7 = *(void **)(a1 + 48);
        v8 = CFSTR("Internal error.");
        v9 = 2515;
      }
      else
      {
        v7 = *(void **)(a1 + 48);
        v8 = CFSTR("Network communication error.");
        v9 = 2518;
      }
      MobileActivationError = createMobileActivationError((uint64_t)"issueCollection_block_invoke_3", v9, CFSTR("com.apple.MobileActivation.ErrorDomain"), -6, v7, v8);
LABEL_13:
      v14 = MobileActivationError;
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      v16 = *(void **)(v15 + 40);
      *(_QWORD *)(v15 + 40) = v14;
      v17 = v16;
LABEL_14:

      goto LABEL_15;
    }
    v11 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("X-Apple-Invalid-Reason"));
    v12 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("X-Apple-Retry-After"));
    v13 = isNSString(v11);
    if (v13)
    {

LABEL_26:
      v30 = *(_QWORD *)(a1 + 104);
      v31 = *(void **)(a1 + 48);
      v32 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", v30);
      v33 = createMobileActivationError((uint64_t)"issueCollection_block_invoke_3", 2529, CFSTR("com.apple.MobileActivation.ServerErrorDomain"), v30, v31, CFSTR("Server error: %ld (%@) / %@ / %@"), v30, v32, v11, v12);

      v34 = *(_QWORD *)(a1 + 104);
      v35 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", v34);
      v36 = createMobileActivationError((uint64_t)"issueCollection_block_invoke_3", 2529, CFSTR("com.apple.MobileActivation.ErrorDomain"), -6, v33, CFSTR("Server error: %ld (%@) / %@ / %@"), v34, v35, v11, v12);

      v37 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      v38 = *(MACollectionInterface **)(v37 + 40);
      *(_QWORD *)(v37 + 40) = v36;
LABEL_27:

      v17 = v11;
      goto LABEL_14;
    }
    v29 = isNSNumber(v12);

    if (v29)
      goto LABEL_26;
    if (!*(_QWORD *)(a1 + 64))
    {
      v56 = createMobileActivationError((uint64_t)"issueCollection_block_invoke_3", 2534, CFSTR("com.apple.MobileActivation.ErrorDomain"), -6, *(void **)(a1 + 48), CFSTR("Invalid server response."));
      v57 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      v58 = *(MACollectionInterface **)(v57 + 40);
      *(_QWORD *)(v57 + 40) = v56;
      v38 = v58;
      goto LABEL_27;
    }
    v39 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
    v40 = (MACollectionInterface *)objc_msgSend(v39, "copyAnswer:", CFSTR("BuildVersion"));

    v41 = isNSString(v40);
    if (v41)
    {
      v42 = -[MACollectionInterface initWithContext:]([MACollectionInterface alloc], "initWithContext:", *(_QWORD *)(a1 + 32));
      if (v42)
      {
        v43 = v42;
        v44 = *(_QWORD *)(a1 + 64);
        v45 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
        obj = *(id *)(v45 + 40);
        v46 = (MACollectionInterface *)+[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", v44, 0, &obj);
        objc_storeStrong((id *)(v45 + 40), obj);
        if (!v46)
        {
          v63 = createMobileActivationError((uint64_t)"issueCollection_block_invoke_3", 2552, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to deserialize JSON data: %@"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40));
          v64 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
          v65 = *(void **)(v64 + 40);
          *(_QWORD *)(v64 + 40) = v63;

          v38 = v43;
          goto LABEL_27;
        }
        v47 = -[MACollectionInterface objectForKeyedSubscript:](v46, "objectForKeyedSubscript:", CFSTR("suinfo"));
        v48 = isNSString(v47);

        if (v48)
        {
          v49 = (MACollectionInterface *)objc_msgSend(objc_alloc((Class)NSData), "initWithBase64EncodedString:options:", v47, 1);
          if (v49)
          {
            v50 = v49;
            v51 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
            v74 = *(id *)(v51 + 40);
            v52 = -[MACollectionInterface processSUInfo:withError:](v43, "processSUInfo:withError:", v49, &v74);
            objc_storeStrong((id *)(v51 + 40), v74);
            if ((v52 & 1) != 0)
            {
              data_ark_remove(*(void **)(a1 + 32), 0, CFSTR("PCRTToken"));
              v53 = (MACollectionInterface *)objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("x-iservice-token"));
              v54 = isNSString(v53);

              if (v54)
                data_ark_set(*(void **)(a1 + 32), 0, CFSTR("PCRTToken"), v53, 1);
              data_ark_set(*(void **)(a1 + 32), 0, CFSTR("CollectionLastPerformed"), v40, 1);

              v55 = v53;
            }
            else
            {
              v71 = createMobileActivationError((uint64_t)"issueCollection_block_invoke_3", 2569, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to process SUInfo: %@"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40));
              v72 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
              v73 = *(void **)(v72 + 40);
              *(_QWORD *)(v72 + 40) = v71;

              v55 = v40;
            }

            v70 = v50;
            goto LABEL_48;
          }
          v66 = createMobileActivationError((uint64_t)"issueCollection_block_invoke_3", 2564, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode SUInfo."));
        }
        else
        {
          v66 = createMobileActivationError((uint64_t)"issueCollection_block_invoke_3", 2558, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid SUInfo: %@"), v47);
        }
        v67 = v66;
        v68 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
        v69 = *(void **)(v68 + 40);
        *(_QWORD *)(v68 + 40) = v67;

        v70 = v40;
LABEL_48:

        v38 = v46;
        goto LABEL_27;
      }
      v59 = createMobileActivationError((uint64_t)"issueCollection_block_invoke_3", 2546, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create collection interface."));
    }
    else
    {
      v59 = createMobileActivationError((uint64_t)"issueCollection_block_invoke_3", 2540, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve OS build."));
    }
    v60 = v59;
    v61 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
    v62 = *(void **)(v61 + 40);
    *(_QWORD *)(v61 + 40) = v60;

    v38 = v40;
    goto LABEL_27;
  }
LABEL_15:
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40))
  {
    v18 = copyLoggingHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
      *(_DWORD *)buf = 138543362;
      v77 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Failed to perform collection: %{public}@", buf, 0xCu);
    }

    if (*(_QWORD *)(a1 + 104)
      && (mobileactivationErrorHasDomainAndErrorCode(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), CFSTR("com.apple.MobileActivation.ErrorDomain"), (id)0xFFFFFFFFFFFFFFEALL) & 1) == 0)
    {
      writeSplunkLog(*(void **)(a1 + 32), 16, *(_QWORD *)(a1 + 104), (uint64_t)"issueCollection_block_invoke", 2590, 0, CFSTR("%@"), v20, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40));
    }
  }
  data_ark_set(*(void **)(a1 + 32), 0, CFSTR("InFieldCollectionInFlight"), &__kCFBooleanFalse, 0);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40));
  return result;
}

void __copy_helper_block_e8_32s40s48s56s64s72b80r88r96r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  v8 = *(id *)(a2 + 64);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 7);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 8);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
  _Block_object_assign((void *)(a1 + 96), *(const void **)(a2 + 96), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80r88r96r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 96), 8);
  _Block_object_dispose(*(const void **)(a1 + 88), 8);
  _Block_object_dispose(*(const void **)(a1 + 80), 8);

}

void __copy_helper_block_e8_32s40s48b56r64r72r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 7);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
}

void __destroy_helper_block_e8_32s40s48s56r64r72r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 72), 8);
  _Block_object_dispose(*(const void **)(a1 + 64), 8);
  _Block_object_dispose(*(const void **)(a1 + 56), 8);

}

void issueUCRT(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  id v20;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = copyMobileActivationSerialQueue();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3254779904;
  v16[2] = __issueUCRT_block_invoke;
  v16[3] = &__block_descriptor_64_e8_32s40s48s56bs_e5_v8__0l;
  v17 = v9;
  v18 = v7;
  v19 = v8;
  v20 = v10;
  v12 = v10;
  v13 = v8;
  v14 = v7;
  v15 = v9;
  dispatch_async(v11, v16);

}

void __issueUCRT_block_invoke(uint64_t a1)
{
  NSError *v2;
  void *v3;
  id v4;
  id v5;
  id *v6;
  _BOOL4 is_legacy;
  id v8;
  NSError *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id *v15;
  SecCertificateRef v16;
  unsigned int v17;
  int v18;
  id v19;
  id v20;
  id v21;
  NSError *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  char v31;
  id v32;
  NSError *v33;
  id v34;
  id *v35;
  BOOL v36;
  void *v37;
  _QWORD v38[4];
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t *v43;
  uint64_t *v44;
  id v45;
  id v46;
  id obj;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  void (*v52)(uint64_t);
  id v53;
  uint64_t v54;
  id *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  void (*v58)(uint64_t);
  id v59;

  v54 = 0;
  v55 = (id *)&v54;
  v56 = 0x3032000000;
  v57 = __Block_byref_object_copy__5;
  v58 = __Block_byref_object_dispose__5;
  v59 = 0;
  v48 = 0;
  v49 = &v48;
  v50 = 0x3032000000;
  v51 = __Block_byref_object_copy__5;
  v52 = __Block_byref_object_dispose__5;
  v53 = 0;
  if (!is_virtual_machine())
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("IgnoreExistingUCRT"));
    v3 = v4;
    if (v4)
    {
      v5 = isNSNumber(v4);

      if (!v5)
      {
        v9 = createMobileActivationError((uint64_t)"issueUCRT_block_invoke", 2638, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid option (%@)."), CFSTR("IgnoreExistingUCRT"));
        goto LABEL_27;
      }
    }
    v6 = v55;
    obj = v55[5];
    is_legacy = security_committed_uik_is_legacy(&obj);
    objc_storeStrong(v6 + 5, obj);
    if (!is_legacy)
    {
      v8 = v55[5];
      if (v8)
      {
        v9 = createMobileActivationError((uint64_t)"issueUCRT_block_invoke", 2644, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v8, CFSTR("Failed to query legacy UIK support."));
LABEL_27:
        v2 = v9;
        goto LABEL_28;
      }
    }
    v10 = data_ark_copy(*(void **)(a1 + 40), 0, CFSTR("UCRTHealingRequired"));
    v11 = isNSNumber(v10);

    if (!v11)
    {

      v10 = &__kCFBooleanFalse;
    }
    v12 = data_ark_copy(*(void **)(a1 + 40), 0, CFSTR("UIKUpgradeRequired"));
    v13 = isNSNumber(v12);

    if (!v13)
    {

      v12 = &__kCFBooleanFalse;
    }
    v14 = *(void **)(a1 + 40);
    v15 = v55;
    v46 = v55[5];
    v16 = copyUCRT(v14, (NSError **)&v46);
    objc_storeStrong(v15 + 5, v46);
    v17 = objc_msgSend(v3, "BOOLValue");
    if (v16)
      v18 = v17;
    else
      v18 = 1;
    if (((v18 | is_legacy) & 1) == 0
      && (objc_msgSend(v10, "BOOLValue") & 1) == 0
      && !objc_msgSend(v12, "BOOLValue"))
    {
      v20 = 0;
      v31 = 0;
      v25 = 0;
      v24 = 0;
LABEL_40:
      CFRelease(v16);
LABEL_41:
      if ((v31 & 1) != 0)
        goto LABEL_31;
      goto LABEL_29;
    }
    v19 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("UseCellularBootstrapProxy"));
    if (v19
      || (v19 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("UseCellularOTAProxy"))) != 0
      || (v19 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("SOCKSProxyHost"))) != 0)
    {

    }
    else
    {
      v34 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("SOCKSProxyPort"));

      if (!v34)
      {
        v35 = v55;
        v45 = v55[5];
        v36 = networkReachable();
        objc_storeStrong(v35 + 5, v45);
        if (!v36)
        {
          v33 = createMobileActivationError((uint64_t)"issueUCRT_block_invoke", 2674, CFSTR("com.apple.MobileActivation.ErrorDomain"), -17, v55[5], CFSTR("Network is unavailable."));
          v24 = 0;
          v25 = 0;
          v31 = 0;
          v20 = 0;
          goto LABEL_38;
        }
      }
    }
    v20 = data_ark_copy(*(void **)(a1 + 40), 0, CFSTR("UCRTIssuanceInFlight"));
    v21 = isNSNumber(v20);

    if (!v21)
    {

      v20 = &__kCFBooleanFalse;
    }
    if (objc_msgSend(v20, "BOOLValue"))
    {
      v22 = createMobileActivationError((uint64_t)"issueUCRT_block_invoke", 2687, CFSTR("com.apple.MobileActivation.ErrorDomain"), -13, 0, CFSTR("Another UCRT request is already in flight."));
    }
    else
    {
      v27 = objc_alloc_init((Class)NSMutableDictionary);
      if (v27)
      {
        v24 = objc_msgSend(*(id *)(a1 + 32), "mutableCopy");

        objc_msgSend(v24, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, CFSTR("UseCommittedUIK"));
        v28 = objc_alloc_init((Class)NSMutableDictionary);
        v29 = v28;
        if (v28)
        {
          objc_msgSend(v28, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 48), CFSTR("clientName"));
          data_ark_set(*(void **)(a1 + 40), 0, CFSTR("UCRTIssuanceInFlight"), &__kCFBooleanTrue, 0);
          v30 = *(void **)(a1 + 48);
          v37 = *(void **)(a1 + 40);
          v38[0] = _NSConcreteStackBlock;
          v38[1] = 3254779904;
          v38[2] = __issueUCRT_block_invoke_2;
          v38[3] = &__block_descriptor_80_e8_32s40s48s56bs64r72r_e48_v40__0__NSData_8__NSDictionary_16q24__NSError_32l;
          v43 = &v54;
          v24 = v24;
          v39 = v24;
          v40 = *(id *)(a1 + 40);
          v25 = v29;
          v41 = v25;
          v42 = *(id *)(a1 + 56);
          v44 = &v48;
          v31 = 1;
          performUCRTOOB(v37, 1, v30, v24, v38);

          v32 = v39;
          goto LABEL_39;
        }
        v33 = createMobileActivationError((uint64_t)"issueUCRT_block_invoke", 2704, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate dictionary."));
        goto LABEL_37;
      }
      v22 = createMobileActivationError((uint64_t)"issueUCRT_block_invoke", 2695, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate dictionary."));
    }
    v33 = v22;
    v24 = 0;
LABEL_37:
    v25 = 0;
    v31 = 0;
LABEL_38:
    v32 = v55[5];
    v55[5] = v33;
LABEL_39:

    if (!v16)
      goto LABEL_41;
    goto LABEL_40;
  }
  v2 = createMobileActivationError((uint64_t)"issueUCRT_block_invoke", 2630, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("UCRT not supported on virtual machines."));
  v3 = 0;
LABEL_28:
  v23 = v55[5];
  v55[5] = v2;

  v24 = 0;
  v25 = 0;
  v12 = 0;
  v10 = 0;
  v20 = 0;
LABEL_29:
  v26 = *(_QWORD *)(a1 + 56);
  if (v26)
    (*(void (**)(uint64_t, uint64_t, id))(v26 + 16))(v26, v49[5], v55[5]);
LABEL_31:

  _Block_object_dispose(&v48, 8);
  _Block_object_dispose(&v54, 8);

}

void sub_10002498C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 136), 8);
  _Unwind_Resume(a1);
}

void performUCRTOOB(void *a1, int a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  void (*v19)(uint64_t);
  void **v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;

  v9 = a1;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (a2)
  {
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = v12;
    v17 = dispatch_get_global_queue(0, 0);
    v18 = v17;
    v20 = _NSConcreteStackBlock;
    v21 = 3254779904;
    v19 = ___performUCRTHealingOOB_block_invoke;
  }
  else
  {
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = v12;
    v17 = dispatch_get_global_queue(0, 0);
    v18 = v17;
    v20 = _NSConcreteStackBlock;
    v21 = 3254779904;
    v19 = ___performUCRTOOB_block_invoke;
  }
  v22 = v19;
  v23 = &__block_descriptor_64_e8_32s40s48s56bs_e5_v8__0l;
  v24 = v13;
  v25 = v14;
  v26 = v15;
  v27 = v16;
  dispatch_async(v17, &v20);

}

void __issueUCRT_block_invoke_2(uint64_t a1, id a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = copyMobileActivationSerialQueue();
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3254779904;
  v19[2] = __issueUCRT_block_invoke_3;
  v19[3] = &__block_descriptor_112_e8_32s40s48s56s64s72s80bs88r96r_e5_v8__0l;
  v29 = a4;
  v13 = *(_QWORD *)(a1 + 64);
  v20 = v11;
  v21 = v9;
  v27 = v13;
  v22 = v10;
  v23 = *(id *)(a1 + 32);
  v24 = *(id *)(a1 + 40);
  v25 = *(id *)(a1 + 48);
  v14 = *(id *)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 72);
  v26 = v14;
  v28 = v15;
  v16 = v10;
  v17 = v9;
  v18 = v11;
  dispatch_async(v12, v19);

}

uint64_t __issueUCRT_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  __CFString *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  char v19;
  void *v20;
  NSString *v21;
  NSError *v22;
  uint64_t v23;
  NSString *v24;
  NSError *v25;
  uint64_t v26;
  void *v27;
  NSError *MobileActivationError;
  NSError *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  NSError *v35;
  uint64_t v36;
  void *v37;
  NSError *v38;
  uint64_t v39;
  void *v40;
  NSError *v41;
  NSError *v42;
  uint64_t v43;
  void *v44;
  id v45;
  id obj;

  v2 = *(_QWORD *)(a1 + 104);
  switch(v2)
  {
    case 200:
      if (!*(_QWORD *)(a1 + 40))
      {
        v3 = *(void **)(a1 + 32);
        v4 = CFSTR("Invalid server response.");
        v5 = 2733;
        goto LABEL_15;
      }
      v6 = objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("Date"));
      if (!v6)
      {
        MobileActivationError = createMobileActivationError((uint64_t)"issueUCRT_block_invoke_3", 2739, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve server response date."));
        goto LABEL_16;
      }
      v7 = v6;
      v8 = objc_alloc_init((Class)NSDateFormatter);
      if (!v8)
      {
        v35 = createMobileActivationError((uint64_t)"issueUCRT_block_invoke_3", 2745, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate date formatter."));
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
        v37 = *(void **)(v36 + 40);
        *(_QWORD *)(v36 + 40) = v35;

        v27 = v7;
        goto LABEL_17;
      }
      v9 = v8;
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      obj = *(id *)(v10 + 40);
      v11 = objc_msgSend(v8, "dateFromServerString:withError:", v7, &obj);
      objc_storeStrong((id *)(v10 + 40), obj);
      if (!v11)
      {
        v38 = createMobileActivationError((uint64_t)"issueUCRT_block_invoke_3", 2751, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), CFSTR("Failed to convert date string."));
        v39 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
        v40 = *(void **)(v39 + 40);
        *(_QWORD *)(v39 + 40) = v38;

        v27 = v9;
        goto LABEL_17;
      }
      v12 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
      v13 = objc_msgSend(v12, "copyAnswer:", CFSTR("BuildVersion"));

      v14 = isNSString(v13);
      if (v14)
      {
        objc_msgSend(*(id *)(a1 + 56), "setObject:forKeyedSubscript:", v11, CFSTR("ServerResponseDate"));
        v15 = *(void **)(a1 + 40);
        v17 = *(void **)(a1 + 56);
        v16 = *(void **)(a1 + 64);
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
        v45 = *(id *)(v18 + 40);
        v19 = storeUCRT(v16, v15, v17, &v45);
        objc_storeStrong((id *)(v18 + 40), v45);
        if ((v19 & 1) != 0)
        {
          data_ark_set(*(void **)(a1 + 64), 0, CFSTR("UCRTOOBLastPerformed"), v13, 1);
          data_ark_remove(*(void **)(a1 + 64), 0, CFSTR("UCRTOOBForbiddenCount"));
          data_ark_remove(*(void **)(a1 + 64), 0, CFSTR("UCRTOOBRetryAttempt"));
          data_ark_remove(*(void **)(a1 + 64), 0, CFSTR("UCRTUpgradeRequired"));
          data_ark_remove(*(void **)(a1 + 64), 0, CFSTR("UCRTHealingRequired"));
          data_ark_remove(*(void **)(a1 + 64), 0, CFSTR("UIKUpgradeRequired"));
LABEL_29:

          v27 = v13;
          goto LABEL_17;
        }
        v41 = createMobileActivationError((uint64_t)"issueUCRT_block_invoke_3", 2766, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), CFSTR("Failed to store UCRT."));
      }
      else
      {
        v41 = createMobileActivationError((uint64_t)"issueUCRT_block_invoke_3", 2757, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve OS build."));
      }
      v42 = v41;
      v43 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      v44 = *(void **)(v43 + 40);
      *(_QWORD *)(v43 + 40) = v42;

      goto LABEL_29;
    case 0:
      v3 = *(void **)(a1 + 32);
      v4 = CFSTR("Network communication error.");
      v5 = 2725;
      goto LABEL_15;
    case -1:
      v3 = *(void **)(a1 + 32);
      v4 = CFSTR("Internal error.");
      v5 = 2722;
LABEL_15:
      MobileActivationError = createMobileActivationError((uint64_t)"issueUCRT_block_invoke_3", v5, CFSTR("com.apple.MobileActivation.ErrorDomain"), -6, v3, v4);
LABEL_16:
      v29 = MobileActivationError;
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      v31 = *(void **)(v30 + 40);
      *(_QWORD *)(v30 + 40) = v29;
      v27 = v31;
      goto LABEL_17;
  }
  v20 = *(void **)(a1 + 32);
  v21 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", v2);
  v22 = createMobileActivationError((uint64_t)"issueUCRT_block_invoke_3", 2728, CFSTR("com.apple.MobileActivation.ServerErrorDomain"), v2, v20, CFSTR("Server error: %ld (%@)"), v2, v21);

  v23 = *(_QWORD *)(a1 + 104);
  v24 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", v23);
  v25 = createMobileActivationError((uint64_t)"issueUCRT_block_invoke_3", 2728, CFSTR("com.apple.MobileActivation.ErrorDomain"), -6, v22, CFSTR("Server error: %ld (%@)"), v23, v24);

  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  v27 = *(void **)(v26 + 40);
  *(_QWORD *)(v26 + 40) = v25;
LABEL_17:

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40))
  {
    v33 = *(_QWORD *)(a1 + 104);
    if (v33)
      writeSplunkLog(*(void **)(a1 + 64), 32, v33, (uint64_t)"issueUCRT_block_invoke_3", 2784, *(void **)(a1 + 72), CFSTR("%@"), v32, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40));
  }
  data_ark_set(*(void **)(a1 + 64), 0, CFSTR("UCRTIssuanceInFlight"), &__kCFBooleanFalse, 0);
  result = *(_QWORD *)(a1 + 80);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40));
  return result;
}

void __copy_helper_block_e8_32s40s48s56s64s72s80b88r96r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  v8 = *(id *)(a2 + 64);
  v9 = *(id *)(a2 + 72);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 7);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
  _Block_object_assign((void *)(a1 + 96), *(const void **)(a2 + 96), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80s88r96r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 96), 8);
  _Block_object_dispose(*(const void **)(a1 + 88), 8);

}

void __copy_helper_block_e8_32s40s48s56b64r72r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 7);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64r72r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 72), 8);
  _Block_object_dispose(*(const void **)(a1 + 64), 8);

}

void __issueClientCertificateWithReferenceKey_block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  NSError *v6;
  id v7;
  id v8;
  __CFString *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  double v15;
  id v16;
  id v17;
  NSNumber *v18;
  char v19;
  unsigned __int8 v20;
  id v21;
  __SecCertificate *v22;
  id v23;
  NSObject *v24;
  char v25;
  id v26;
  void *v27;
  id *v28;
  id *v29;
  char v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  id *v36;
  char v37;
  id v38;
  NSError *v39;
  NSNumber *v40;
  NSError *v41;
  id v42;
  NSObject *v43;
  NSNumber *v44;
  unsigned __int8 v45;
  NSNumber *v46;
  unsigned __int8 v47;
  NSNumber *v48;
  NSError *v49;
  id v50;
  id *v51;
  BOOL v52;
  NSError *v53;
  id v54;
  unsigned __int8 v55;
  _QWORD block[4];
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t *v63;
  uint64_t *v64;
  int v65;
  unsigned __int8 v66;
  char v67;
  unsigned __int8 v68;
  id v69;
  id v70;
  id v71;
  uint8_t buf[8];
  id obj;
  char v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t);
  void (*v79)(uint64_t);
  id v80;
  uint64_t v81;
  id *v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t);
  void (*v85)(uint64_t);
  id v86;

  v81 = 0;
  v82 = (id *)&v81;
  v83 = 0x3032000000;
  v84 = __Block_byref_object_copy__5;
  v85 = __Block_byref_object_dispose__5;
  v86 = 0;
  v75 = 0;
  v76 = &v75;
  v77 = 0x3032000000;
  v78 = __Block_byref_object_copy__5;
  v79 = __Block_byref_object_dispose__5;
  v80 = 0;
  v74 = 0;
  if (*(_QWORD *)(a1 + 32) && *(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 48))
  {
    v2 = *(void **)(a1 + 56);
    if (v2)
    {
      v3 = objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("scrtAttestation"));
      v4 = isNSNumber(v3);

      if (v4)
      {
        v5 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("scrtAttestation"));
        v55 = objc_msgSend(v5, "BOOLValue");

      }
      else
      {
        v55 = 0;
      }
      v13 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("NetworkTimeoutInterval"));
      v14 = isNSNumber(v13);

      if (v14)
      {
        v7 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("NetworkTimeoutInterval"));
        objc_msgSend(v7, "doubleValue");
        if (v15 <= 0.0)
        {
          v6 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 2838, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid network timeout requested: %@"), v7);
          goto LABEL_8;
        }
      }
      else
      {
        v7 = 0;
      }
      v16 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("CertType"));
      v17 = isNSNumber(v16);

      if (v17)
      {
        v8 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("CertType"));
        v18 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 0);
        if (objc_msgSend(v8, "isEqualToNumber:", v18))
        {

        }
        else
        {
          v40 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 1);
          if (objc_msgSend(v8, "isEqualToNumber:", v40))
          {

          }
          else
          {
            v44 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 2);
            v45 = objc_msgSend(v8, "isEqualToNumber:", v44);

            if ((v45 & 1) == 0)
            {
              v6 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 2847, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid value for option (%@): %@"), CFSTR("CertType"), v8);
              goto LABEL_9;
            }
          }
        }
        v46 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 1);
        v47 = objc_msgSend(v8, "isEqualToNumber:", v46);

        if ((v47 & 1) != 0)
        {
          v20 = 0;
          v19 = 1;
        }
        else
        {
          v48 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 2);
          v20 = objc_msgSend(v8, "isEqualToNumber:", v48);

          v19 = 0;
        }
LABEL_26:
        v21 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("ActivationState"));
        v9 = (__CFString *)isNSString(v21);

        if (!v9)
          v9 = CFSTR("Unactivated");
        if ((v55 & 1) != 0)
        {
          v22 = 0;
          v11 = 0;
          goto LABEL_30;
        }
        if ((-[__CFString isEqualToString:](v9, "isEqualToString:", CFSTR("Activated")) & 1) == 0)
        {
          v6 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 2866, CFSTR("com.apple.MobileActivation.ErrorDomain"), -8, 0, CFSTR("Device is not activated: %@"), v9);
          goto LABEL_10;
        }
        v27 = *(void **)(a1 + 32);
        v28 = v82;
        obj = v82[5];
        v22 = copyUCRT(v27, (NSError **)&obj);
        objc_storeStrong(v28 + 5, obj);
        if (!v22)
        {
          v41 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 2872, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v82[5], CFSTR("Failed to copy UCRT."));
          v42 = v82[5];
          v82[5] = v41;

          if (mobileactivationErrorHasDomainAndErrorCode(v82[5], CFSTR("com.apple.MobileActivation.ErrorDomain"), (id)0xFFFFFFFFFFFFFFFCLL))
          {
            data_ark_remove(*(void **)(a1 + 32), 0, CFSTR("UCRTOOBRetryAttempt"));
            data_ark_set(*(void **)(a1 + 32), 0, CFSTR("UCRTHealingRequired"), &__kCFBooleanTrue, 1);
            v43 = copyLoggingHandle();
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Scheduled UCRT OOB to attempt recovery of missing UCRT.", buf, 2u);
            }

            scheduleXPCActivity(*(void **)(a1 + 32), (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.UCRT.OOB"), "UTF8String"), 5u, 1, 0x3000u, 0x1000u, &__block_literal_global_5);
          }
          goto LABEL_11;
        }
        v29 = v82;
        v71 = v82[5];
        v30 = deleteLegacyUIKIfMismatched(v22, &v74, (NSError **)&v71);
        objc_storeStrong(v29 + 5, v71);
        if ((v30 & 1) != 0)
        {
          if (v74)
          {
            maLog((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_2", 0, CFSTR("Legacy UIK purged."));
            data_ark_remove(*(void **)(a1 + 32), 0, CFSTR("UIKUpgradeRequired"));
          }
          v31 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("UCRTHealingRequired"));
          v32 = (void *)v76[5];
          v76[5] = (uint64_t)v31;

          v33 = isNSNumber((void *)v76[5]);
          if (!v33)
          {
            v34 = (void *)v76[5];
            v76[5] = (uint64_t)&__kCFBooleanFalse;

          }
          v11 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("UCRTOOBForbidden"));
          v35 = isNSNumber(v11);

          if (!v35)
          {

            v11 = &__kCFBooleanFalse;
          }
          if (!objc_msgSend((id)v76[5], "BOOLValue"))
          {
LABEL_30:
            v23 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("UseCellularBootstrapProxy"));
            if (v23
              || (v23 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("UseCellularOTAProxy"))) != 0
              || (v23 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("SOCKSProxyHost"))) != 0)
            {

            }
            else
            {
              v50 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("SOCKSProxyPort"));

              if (!v50)
              {
                v51 = v82;
                v69 = v82[5];
                v52 = networkReachable();
                objc_storeStrong(v51 + 5, v69);
                if (!v52)
                {
                  v53 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_2", 2949, CFSTR("com.apple.MobileActivation.ErrorDomain"), -17, v82[5], CFSTR("Network is unavailable."));
                  v25 = 0;
                  v26 = v82[5];
                  v82[5] = v53;
LABEL_35:

                  if (!v22)
                  {
LABEL_73:
                    if ((v25 & 1) != 0)
                      goto LABEL_14;
                    goto LABEL_12;
                  }
LABEL_72:
                  CFRelease(v22);
                  goto LABEL_73;
                }
              }
            }
            v24 = dispatch_get_global_queue(0, 0);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3254779904;
            block[2] = __issueClientCertificateWithReferenceKey_block_invoke_3;
            block[3] = &__block_descriptor_103_e8_32s40s48s56s64s72bs80r88r_e5_v8__0l;
            v63 = &v81;
            v57 = *(id *)(a1 + 40);
            v58 = *(id *)(a1 + 56);
            v59 = *(id *)(a1 + 48);
            v65 = *(_DWORD *)(a1 + 72);
            v60 = v7;
            v66 = v55;
            v67 = v19;
            v68 = v20;
            v61 = *(id *)(a1 + 32);
            v64 = &v75;
            v62 = *(id *)(a1 + 64);
            dispatch_async(v24, block);

            v25 = 1;
            v26 = v57;
            goto LABEL_35;
          }
          v36 = v82;
          v70 = v82[5];
          v37 = ucrtHealingSupported(&v70);
          objc_storeStrong(v36 + 5, v70);
          v38 = v82[5];
          if (v38)
          {
            v39 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_2", 2924, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v38, CFSTR("Failed to query UCRT healing support."));
          }
          else if ((v37 & 1) != 0)
          {
            if (objc_msgSend(v11, "BOOLValue"))
              v39 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_2", 2934, CFSTR("com.apple.MobileActivation.ErrorDomain"), -16, 0, CFSTR("UCRT healing required but not supported (max failure retries attempted)."));
            else
              v39 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_2", 2938, CFSTR("com.apple.MobileActivation.ErrorDomain"), -16, 0, CFSTR("UCRT healing required but not performed yet (try again later)."));
          }
          else
          {
            v39 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_2", 2929, CFSTR("com.apple.MobileActivation.ErrorDomain"), -16, 0, CFSTR("UCRT healing required but not supported (user signed into non-HSA2 iCloud account)."));
          }
          v49 = v39;
        }
        else
        {
          v49 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_2", 2895, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v82[5], CFSTR("Failed to delete invalid legacy UIK."));
          v11 = 0;
        }
        v54 = v82[5];
        v82[5] = v49;

        v25 = 0;
        goto LABEL_72;
      }
      v8 = 0;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v55 = 0;
    }
    v19 = 0;
    v20 = 0;
    goto LABEL_26;
  }
  v6 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 2826, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid input(s)."));
  v7 = 0;
LABEL_8:
  v8 = 0;
LABEL_9:
  v9 = 0;
LABEL_10:
  v10 = v82[5];
  v82[5] = v6;

LABEL_11:
  v11 = 0;
LABEL_12:
  v12 = *(_QWORD *)(a1 + 64);
  if (v12)
    (*(void (**)(uint64_t, _QWORD, id))(v12 + 16))(v12, 0, v82[5]);
LABEL_14:

  _Block_object_dispose(&v75, 8);
  _Block_object_dispose(&v81, 8);

}

void sub_100025F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 136), 8);
  _Unwind_Resume(a1);
}

void __issueClientCertificateWithReferenceKey_block_invoke_131(id a1, DataArk *a2)
{
  ucrt_oob_activity_handler(a2, 0);
}

void ucrt_oob_activity_handler(void *a1, int a2)
{
  id v3;
  void *v4;
  dispatch_block_t v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  _QWORD v9[4];
  id v10;
  _QWORD block[4];
  id v12;

  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3254779904;
      block[2] = __ucrt_oob_activity_handler_block_invoke;
      block[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
      v12 = v3;
      v5 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
      v6 = copyMobileActivationSerialQueue();
      dispatch_async(v6, v5);

      v7 = v12;
    }
    else
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3254779904;
      v9[2] = __ucrt_oob_activity_handler_block_invoke_3;
      v9[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
      v10 = v3;
      v5 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, v9);
      v8 = copyMobileActivationSerialQueue();
      dispatch_async(v8, v5);

      v7 = v10;
    }

  }
  else
  {
    maLog((uint64_t)"ucrt_oob_activity_handler", 0, CFSTR("Invalid input."));
  }

}

uint64_t deleteLegacyUIKIfMismatched(__SecCertificate *a1, _BYTE *a2, NSError **a3)
{
  _BOOL4 is_legacy;
  NSError *v7;
  NSError *v8;
  NSError *MobileActivationError;
  NSError *v10;
  uint64_t v11;
  char v12;
  NSError *v13;
  char v14;
  id v16;
  id v17;
  id v18;

  v18 = 0;
  is_legacy = security_committed_uik_is_legacy(&v18);
  v7 = (NSError *)v18;
  v8 = v7;
  if (!is_legacy && v7)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"deleteLegacyUIKIfMismatched", 1578, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v7, CFSTR("Failed to query legacy UIK support."));
    goto LABEL_4;
  }
  if (!is_legacy)
  {
LABEL_13:
    v11 = 1;
    goto LABEL_14;
  }
  v17 = v7;
  v12 = certificatePublicKeyMatchesSystemPublicKey(2, 2, a1, (NSError **)&v17);
  v13 = (NSError *)v17;

  if ((v12 & 1) != 0)
  {
    v8 = v13;
    goto LABEL_11;
  }
  v16 = v13;
  v14 = security_delete_legacy_uik(&v16);
  v8 = (NSError *)v16;

  if ((v14 & 1) != 0)
  {
LABEL_11:
    if (a2)
      *a2 = v12 ^ 1;
    goto LABEL_13;
  }
  MobileActivationError = createMobileActivationError((uint64_t)"deleteLegacyUIKIfMismatched", 1589, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v8, CFSTR("Failed to delete legacy UIK."));
LABEL_4:
  v10 = MobileActivationError;

  if (a3)
  {
    v8 = objc_retainAutorelease(v10);
    v11 = 0;
    *a3 = v8;
  }
  else
  {
    v11 = 0;
    v8 = v10;
  }
LABEL_14:

  return v11;
}

uint64_t ucrtHealingSupported(_QWORD *a1)
{
  _BOOL4 IsEnabled;
  id v3;
  void *v4;
  _BOOL4 IsHSA2;
  id v6;
  uint64_t v7;
  id v9;
  id v10;

  v10 = 0;
  IsEnabled = FindMyDeviceIsEnabled(&v10);
  v3 = v10;
  v4 = v3;
  if (IsEnabled)
  {
    v9 = v3;
    IsHSA2 = primaryICloudAccountIsHSA2(&v9);
    v6 = v9;

    if (IsHSA2 && !v6)
      goto LABEL_4;
  }
  else
  {
    v6 = v3;
    if (!v3)
    {
LABEL_4:
      v7 = 1;
      goto LABEL_9;
    }
  }
  if (a1)
  {
    v6 = objc_retainAutorelease(v6);
    v7 = 0;
    *a1 = v6;
  }
  else
  {
    v7 = 0;
  }
LABEL_9:

  return v7;
}

void __issueClientCertificateWithReferenceKey_block_invoke_3(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  NSDictionary *v8;
  NSError *v9;
  uint64_t v10;
  void *v11;
  id v12;
  __SecKey *v13;
  NSString *v14;
  NSDictionary *v15;
  id v16;
  NSDictionary *v17;
  NSError *v18;
  uint64_t v19;
  void *v20;
  dispatch_queue_global_t v21;
  id v22;
  id v23;
  NSDictionary *v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  NSDictionary *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  unsigned int v40;
  NSError *v41;
  uint64_t v42;
  void *v43;
  NSError *v44;
  uint64_t v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  id v52;
  id v53;
  id v54;
  id v55;
  SecAccessControlRef v56;
  SecAccessControlRef v57;
  NSNumber *v58;
  __SecKey *v59;
  __SecKey *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  id v65;
  NSString *v66;
  int v67;
  const __CFString *v68;
  NSError *v69;
  uint64_t v70;
  void *v71;
  NSError *v72;
  uint64_t v73;
  void *v74;
  NSError *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  NSString *v80;
  _BOOL4 v81;
  __CFString **v82;
  NSURL *v83;
  void *v84;
  void *v85;
  id v86;
  id v87;
  void *v88;
  NSURL *v89;
  id v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  id v94;
  __SecKey *v95;
  char v96;
  NSDictionary *v97;
  NSDictionary *v98;
  id v99;
  id v100;
  _QWORD block[4];
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  char v114;
  char v115;
  __int16 v116;
  id v117;
  id v118;
  id v119;
  id obj;
  NSError *v121;
  CFErrorRef error;
  _QWORD v123[5];
  _QWORD v124[5];
  _QWORD v125[2];
  _QWORD v126[2];

  error = 0;
  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v3 = v2;
  if (!v2)
  {
    v18 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3", 2979, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate dictionary."));
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v20 = *(void **)(v19 + 40);
    *(_QWORD *)(v19 + 40) = v18;

    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v99 = 0;
    v100 = 0;
    v17 = 0;
    v8 = 0;
    goto LABEL_8;
  }
  objc_msgSend(v2, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), CFSTR("clientName"));
  v4 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("UseCellularBootstrapProxy"));
  v5 = isNSNumber(v4);

  if (v5)
  {
    v6 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("UseCellularBootstrapProxy"));
    v99 = v6;
    if (is_product_cellular() && objc_msgSend(v6, "BOOLValue"))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      v121 = *(NSError **)(v7 + 40);
      v8 = (NSDictionary *)copyCellularProxyDictionary(1, &v121);
      objc_storeStrong((id *)(v7 + 40), v121);
      if (!v8)
      {
        v9 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3", 2990, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), CFSTR("Failed to query cellular network proxy info."));
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
        v11 = *(void **)(v10 + 40);
        *(_QWORD *)(v10 + 40) = v9;

        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v16 = 0;
        v100 = 0;
        v17 = 0;
LABEL_8:
        LOBYTE(v21) = 0;
        goto LABEL_59;
      }
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = 0;
    v99 = 0;
  }
  v22 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("UseCellularOTAProxy"));
  v23 = isNSNumber(v22);

  if (!v23)
  {
    v98 = 0;
LABEL_17:
    v96 = 0;
    goto LABEL_18;
  }
  v24 = (NSDictionary *)objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("UseCellularOTAProxy"));
  v98 = v24;
  if (!is_product_cellular() || !-[NSDictionary BOOLValue](v24, "BOOLValue"))
    goto LABEL_17;
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  obj = *(id *)(v25 + 40);
  v17 = (NSDictionary *)copyCellularProxyDictionary(0, (NSError **)&obj);
  objc_storeStrong((id *)(v25 + 40), obj);

  if (!v17)
  {
    v44 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3", 3003, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), CFSTR("Failed to query cellular network proxy info."));
    v45 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v46 = *(void **)(v45 + 40);
    *(_QWORD *)(v45 + 40) = v44;

    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v100 = 0;
    goto LABEL_32;
  }
  v96 = 1;
  v8 = v17;
LABEL_18:
  v26 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("SOCKSProxyHost"));
  v27 = isNSString(v26);
  if (!v27)
  {
LABEL_21:

    goto LABEL_23;
  }
  v28 = v27;
  v29 = v3;
  v30 = v8;
  v31 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("SOCKSProxyPort"));
  v32 = isNSNumber(v31);

  if (v32)
  {
    v125[0] = CFSTR("SOCKSProxyHost");
    v26 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("SOCKSProxyHost"));
    v126[0] = v26;
    v125[1] = CFSTR("SOCKSProxyPort");
    v33 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("SOCKSProxyPort"));
    v126[1] = v33;
    v8 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v126, v125, 2);

    v3 = v29;
    goto LABEL_21;
  }
  v8 = v30;
  v3 = v29;
LABEL_23:
  if (!is_internal_build())
  {
    v100 = 0;
    goto LABEL_34;
  }
  v34 = objc_alloc((Class)NSUserDefaults);
  v35 = objc_msgSend(v34, "persistentDomainForName:", CFSTR("com.apple.mobileactivationd"));

  v36 = objc_msgSend(v35, "objectForKeyedSubscript:", CFSTR("UseReverseProxy"));
  v37 = isNSNumber(v36);
  v100 = v35;
  if (!v37)
  {

    goto LABEL_34;
  }
  v38 = v37;
  v17 = v8;
  v39 = objc_msgSend(v35, "objectForKeyedSubscript:", CFSTR("UseReverseProxy"));
  v40 = objc_msgSend(v39, "BOOLValue");

  if (!v40)
  {
    v8 = v17;
    goto LABEL_34;
  }
  if (!v17)
  {
    v8 = (NSDictionary *)copyReverseProxyDictionary(0, 0, 0);
LABEL_34:
    v97 = v8;
    v47 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("SigningKeyAttributes"));
    v48 = isNSDictionary(v47);
    if (v48)
    {
      v49 = v48;
      v50 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("SigningKeyAttributes"));
      v51 = kSecUseSystemKeychain;
      v52 = objc_msgSend(v50, "objectForKeyedSubscript:", kSecUseSystemKeychain);
      v53 = isNSNumber(v52);

      if (!v53)
      {
        v55 = 0;
LABEL_40:
        v56 = SecAccessControlCreateWithFlags(0, kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate, 0x40000000uLL, &error);
        if (!v56)
        {
          v69 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3", 3035, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to create access control."));
          v70 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
          v71 = *(void **)(v70 + 40);
          *(_QWORD *)(v70 + 40) = v69;

          v12 = 0;
          v13 = 0;
          v14 = 0;
          v15 = 0;
          v16 = 0;
          LOBYTE(v21) = 0;
LABEL_57:
          v17 = v97;
          goto LABEL_58;
        }
        v57 = v56;
        v123[0] = kSecAttrIsPermanent;
        v123[1] = kSecAttrTokenID;
        v124[0] = &__kCFBooleanFalse;
        v124[1] = kSecAttrTokenIDAppleKeyStore;
        v123[2] = kSecAttrTokenOID;
        v123[3] = kSecAttrAccessControl;
        v124[2] = *(_QWORD *)(a1 + 48);
        v124[3] = v56;
        v123[4] = kSecUseSystemKeychain;
        v58 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v55);
        v124[4] = v58;
        v15 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v124, v123, 5);

        v59 = SecKeyCreateWithData((CFDataRef)+[NSData data](NSData, "data"), (CFDictionaryRef)v15, &error);
        if (!v59)
        {
          v72 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3", 3050, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, error, CFSTR("Failed to convert RK data blob."));
          v73 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
          v74 = *(void **)(v73 + 40);
          *(_QWORD *)(v73 + 40) = v72;

          v12 = 0;
          v13 = 0;
          v14 = 0;
          v16 = 0;
          LOBYTE(v21) = 0;
LABEL_56:
          CFRelease(v57);
          goto LABEL_57;
        }
        v60 = v59;
        v61 = *(void **)(a1 + 40);
        v62 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
        v119 = *(id *)(v62 + 40);
        v13 = create_baa_info(v59, v61, &v119);
        objc_storeStrong((id *)(v62 + 40), v119);
        if (v13)
        {
          v63 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
          v117 = *(id *)(v63 + 40);
          v118 = 0;
          v64 = createXMLRequest(v13, &v118, (NSError **)&v117);
          v12 = v118;
          objc_storeStrong((id *)(v63 + 40), v117);
          if ((v64 & 1) != 0)
          {
            v65 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
            v16 = objc_msgSend(v65, "copyAnswer:", CFSTR("UniqueDeviceID"));

            v21 = (dispatch_queue_global_t)isNSString(v16);
            if (!v21)
            {
              v75 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3", 3067, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query %@."), CFSTR("UniqueDeviceID"));
              v14 = 0;
              goto LABEL_54;
            }
            v66 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ - %@"), CFSTR("iOS Device Activator (MobileActivation-1006)"), *(_QWORD *)(a1 + 32));
            v14 = v66;
            v67 = *(_DWORD *)(a1 + 96);
            if (v67 == 1)
            {
              v68 = CFSTR(" (DCRT)");
            }
            else
            {
              if (v67 != 3)
              {
LABEL_70:
                if (v14)
                {
                  v95 = v60;
                  objc_msgSend(v12, "setValue:forHTTPHeaderField:", v14, CFSTR("User-Agent"));
                  objc_msgSend(v12, "setValue:forHTTPHeaderField:", v16, CFSTR("x-jmet-deviceid"));
                  v81 = is_virtual_machine();
                  v82 = &VMBAA_URL;
                  if (!v81)
                    v82 = &BAA_URL;
                  v83 = +[NSURL URLWithString:](NSURL, "URLWithString:", *v82);
                  objc_msgSend(v12, "setURL:", v83);

                  v84 = *(void **)(a1 + 56);
                  if (v84)
                  {
                    objc_msgSend(v84, "doubleValue");
                    objc_msgSend(v12, "setTimeoutInterval:");
                  }
                  v85 = v100;
                  if (is_internal_build())
                  {
                    v86 = objc_msgSend(v100, "objectForKeyedSubscript:");
                    v87 = isNSString(v86);

                    v88 = v86;
                    v85 = v100;

                    if (v87)
                    {
                      v94 = objc_msgSend(v100, "objectForKeyedSubscript:", CFSTR("BAAOverrideURL"));
                      v89 = +[NSURL URLWithString:](NSURL, "URLWithString:", v94);
                      objc_msgSend(v12, "setURL:", v89);

                    }
                  }
                  v21 = dispatch_get_global_queue(0, 0);
                  block[0] = _NSConcreteStackBlock;
                  block[1] = 3254779904;
                  block[2] = __issueClientCertificateWithReferenceKey_block_invoke_4;
                  block[3] = &__block_descriptor_128_e8_32s40s48s56s64s72s80s88s96bs104r112r_e5_v8__0l;
                  v113 = *(_DWORD *)(a1 + 96);
                  v90 = *(id *)(a1 + 32);
                  v91 = *(_QWORD *)(a1 + 80);
                  v102 = v90;
                  v111 = v91;
                  v12 = v12;
                  v103 = v12;
                  v104 = v99;
                  v105 = v98;
                  v114 = v96;
                  v106 = v97;
                  v115 = *(_BYTE *)(a1 + 100);
                  v107 = v85;
                  v116 = *(_WORD *)(a1 + 101);
                  v108 = *(id *)(a1 + 64);
                  v92 = v3;
                  v93 = *(_QWORD *)(a1 + 88);
                  v109 = v92;
                  v112 = v93;
                  v110 = *(id *)(a1 + 72);
                  dispatch_async(v21, block);

                  LOBYTE(v21) = 1;
                  v77 = v102;
                  v60 = v95;
                  goto LABEL_55;
                }
                v75 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3", 3083, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create user agent string."));
                goto LABEL_53;
              }
              v68 = CFSTR(" (SDCRT)");
            }
            v80 = -[NSString stringByAppendingString:](v66, "stringByAppendingString:", v68);

            v14 = v80;
            goto LABEL_70;
          }
          v75 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3", 3061, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), CFSTR("Failed to create XML request."));
        }
        else
        {
          v75 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3", 3056, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), CFSTR("Failed to create BAA info."));
          v12 = 0;
        }
        v14 = 0;
        v16 = 0;
LABEL_53:
        LOBYTE(v21) = 0;
LABEL_54:
        v76 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
        v77 = *(void **)(v76 + 40);
        *(_QWORD *)(v76 + 40) = v75;
LABEL_55:

        CFRelease(v60);
        goto LABEL_56;
      }
      v47 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("SigningKeyAttributes"));
      v54 = objc_msgSend(v47, "objectForKeyedSubscript:", v51);
      v55 = objc_msgSend(v54, "BOOLValue");

    }
    else
    {
      v55 = 0;
    }

    goto LABEL_40;
  }
  v41 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_3", 3019, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Cannot set both '%@' override and '%@'/'%@' option."), CFSTR("UseReverseProxy"), CFSTR("UseCellularBootstrapProxy"), CFSTR("UseCellularOTAProxy"));
  v42 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v43 = *(void **)(v42 + 40);
  *(_QWORD *)(v42 + 40) = v41;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
LABEL_32:
  LOBYTE(v21) = 0;
LABEL_58:
  v8 = v98;
LABEL_59:
  if (error)
    CFRelease(error);
  error = 0;
  if ((v21 & 1) == 0)
  {
    if ((mobileactivationErrorHasDomainAndErrorCode(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), CFSTR("com.apple.MobileActivation.ErrorDomain"), (id)0xFFFFFFFFFFFFFFFDLL) & 1) == 0)writeSplunkLog(*(void **)(a1 + 64), 17, -1, (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 3354, v3, CFSTR("%@"), v78, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40));
    v79 = *(_QWORD *)(a1 + 72);
    if (v79)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v79 + 16))(v79, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40));
  }

}

void __issueClientCertificateWithReferenceKey_block_invoke_4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSString *v4;
  NSString *v5;
  id v6;
  id v7;
  NSMutableString *v8;
  id v9;
  MATelephonyInfo *v10;
  uint64_t v11;
  unsigned __int8 v12;
  NSObject *v13;
  MATelephonyInfo *v14;
  uint64_t v15;
  unsigned __int8 v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  MATelephonyInfo *v25;
  uint64_t v26;
  unsigned __int8 v27;
  NSObject *v28;
  MATelephonyInfo *v29;
  uint64_t v30;
  unsigned __int8 v31;
  NSObject *v32;
  void *v33;
  NSMutableString *v34;
  id v35;
  uint64_t v36;
  NSError *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  __SecCertificate *v44;
  NSError *v45;
  uint64_t v46;
  void *v47;
  BOOL v48;
  id v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  void *v56;
  NSObject *v57;
  id v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  NSError *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void *v66;
  uint64_t *v67;
  id v68;
  uint64_t v69;
  id v70;
  id *v71;
  uint64_t v72;
  id v73;
  id v74;
  id v75;
  int v76;
  void *v77;
  NSString *v78;
  id v79;
  id v80;
  NSError *v81;
  uint64_t v82;
  NSString *v83;
  void *v84;
  id v85;
  id v86;
  NSError *v87;
  void *v88;
  NSString *v89;
  uint64_t v90;
  void *v91;
  id v92;
  unsigned int v93;
  NSError *v94;
  uint64_t v95;
  void *v96;
  NSError *v97;
  uint64_t v98;
  void *v99;
  NSError *v100;
  uint64_t v101;
  void *v102;
  NSError *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  NSError *v107;
  uint64_t v108;
  void *v109;
  int v110;
  _BOOL4 v111;
  NSError *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  const __CFData *v118;
  SecCertificateRef v119;
  const __CFData *v120;
  SecCertificateRef v121;
  __SecCertificate *v122;
  uint64_t v123;
  _BOOL4 v124;
  char v125;
  NSError *MobileActivationError;
  uint64_t v127;
  void *v128;
  NSError *v129;
  uint64_t v130;
  void *v131;
  NSError *v132;
  uint64_t v133;
  void *v134;
  NSError *v135;
  uint64_t v136;
  void *v137;
  char v138;
  NSNumber *v139;
  NSError *v140;
  uint64_t v141;
  void *v142;
  id v143;
  void *v144;
  id v145;
  void *v146;
  void *v147;
  int v148[2];
  __SecCertificate *v149;
  __SecCertificate *v150;
  __SecCertificate *cf;
  NSDictionary *v152;
  uint64_t v153;
  id *v154;
  _QWORD block[4];
  id v156;
  uint64_t v157;
  uint64_t v158;
  id v159;
  id v160;
  id v161;
  id v162;
  id v163;
  id obj;
  id v165;
  id v166;
  id v167;
  id v168;
  id v169;
  id v170;
  uint64_t v171;
  _QWORD v172[3];
  _QWORD v173[3];

  v171 = 0;
  v2 = *(unsigned int *)(a1 + 120);
  v3 = v2;
  if (v2 > 3)
    goto LABEL_37;
  v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", off_100259938[(int)v2], *(_QWORD *)(a1 + 32));
  if (!v4)
  {
    v3 = *(unsigned int *)(a1 + 120);
LABEL_37:
    v45 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_4", 3144, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid certificate type: %d"), v3);
    v46 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
    v47 = *(void **)(v46 + 40);
    *(_QWORD *)(v46 + 40) = v45;

    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v150 = 0;
    cf = 0;
    v7 = 0;
LABEL_38:
    v36 = 0;
    v152 = 0;
    v24 = 0;
    v23 = 0;
    v33 = 0;
    goto LABEL_39;
  }
  v5 = v4;
  v6 = copy_log_directory_path();
  v7 = objc_msgSend(v6, "stringByAppendingPathComponent:", v5);

  if (!v7)
  {
    v62 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke_4", 3150, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create log filename."));
    v63 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
    v64 = *(void **)(v63 + 40);
    *(_QWORD *)(v63 + 40) = v62;

    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v150 = 0;
    cf = 0;
    goto LABEL_38;
  }
  if (is_internal_build() || (*(_DWORD *)(a1 + 120) - 1) <= 2)
  {
    v8 = formatURLRequest(*(void **)(a1 + 40));
    v9 = objc_msgSend(v7, "stringByAppendingString:", CFSTR("_request.txt"));
    -[NSMutableString writeToFile:atomically:encoding:error:](v8, "writeToFile:atomically:encoding:error:", v9, 0, 4, 0);

  }
  v147 = v7;
  if (is_product_cellular())
  {
    if (objc_msgSend(*(id *)(a1 + 48), "BOOLValue"))
    {
      v10 = +[MATelephonyInfo sharedInstance](MATelephonyInfo, "sharedInstance");
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
      v170 = *(id *)(v11 + 40);
      v12 = -[MATelephonyInfo setCellularBootstrapAssertion:withError:](v10, "setCellularBootstrapAssertion:withError:", 1, &v170);
      objc_storeStrong((id *)(v11 + 40), v170);

      if ((v12 & 1) == 0)
      {
        v13 = copyLoggingHandle();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
          __issueClientCertificateWithReferenceKey_block_invoke_4_cold_4();

      }
    }
    if (objc_msgSend(*(id *)(a1 + 56), "BOOLValue"))
    {
      v14 = +[MATelephonyInfo sharedInstance](MATelephonyInfo, "sharedInstance");
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
      v169 = *(id *)(v15 + 40);
      v16 = -[MATelephonyInfo setOTAActivationAssertion:withError:](v14, "setOTAActivationAssertion:withError:", 1, &v169);
      objc_storeStrong((id *)(v15 + 40), v169);

      if ((v16 & 1) == 0)
      {
        v17 = copyLoggingHandle();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
          __issueClientCertificateWithReferenceKey_block_invoke_4_cold_3();

      }
    }
  }
  v18 = a1 + 104;
  v19 = *(void **)(a1 + 40);
  v20 = *(unsigned __int8 *)(a1 + 124);
  v21 = *(void **)(a1 + 64);
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
  v167 = *(id *)(v22 + 40);
  v168 = 0;
  v23 = talkToServerWithError(v19, 0, v20, v21, &v168, &v171, &v167);
  v24 = v168;
  objc_storeStrong((id *)(v22 + 40), v167);
  if (is_product_cellular())
  {
    if (objc_msgSend(*(id *)(a1 + 48), "BOOLValue"))
    {
      v25 = +[MATelephonyInfo sharedInstance](MATelephonyInfo, "sharedInstance");
      v26 = *(_QWORD *)(*(_QWORD *)v18 + 8);
      v166 = *(id *)(v26 + 40);
      v27 = -[MATelephonyInfo setCellularBootstrapAssertion:withError:](v25, "setCellularBootstrapAssertion:withError:", 0, &v166);
      objc_storeStrong((id *)(v26 + 40), v166);

      if ((v27 & 1) == 0)
      {
        v28 = copyLoggingHandle();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
          __issueClientCertificateWithReferenceKey_block_invoke_4_cold_2();

      }
    }
    if (objc_msgSend(*(id *)(a1 + 56), "BOOLValue"))
    {
      v29 = +[MATelephonyInfo sharedInstance](MATelephonyInfo, "sharedInstance");
      v30 = *(_QWORD *)(*(_QWORD *)v18 + 8);
      v165 = *(id *)(v30 + 40);
      v31 = -[MATelephonyInfo setOTAActivationAssertion:withError:](v29, "setOTAActivationAssertion:withError:", 0, &v165);
      objc_storeStrong((id *)(v30 + 40), v165);

      if ((v31 & 1) == 0)
      {
        v32 = copyLoggingHandle();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
          __issueClientCertificateWithReferenceKey_block_invoke_4_cold_1();

      }
    }
  }
  v33 = v147;
  if (is_internal_build() || (*(_DWORD *)(a1 + 120) - 1) <= 2)
  {
    v34 = formatURLResponse(v23, v171, v24);
    v35 = objc_msgSend(v147, "stringByAppendingString:", CFSTR("_response.txt"));
    -[NSMutableString writeToFile:atomically:encoding:error:](v34, "writeToFile:atomically:encoding:error:", v35, 0, 4, 0);

  }
  v36 = v171;
  if (v171 == 400)
  {
    v65 = -6;
    v146 = v23;
    v66 = v24;
    if (!*(_BYTE *)(a1 + 125))
    {
      v92 = lockcrypto_decode_error(v23, 0);
      v93 = objc_msgSend(v92, "isEqualToString:", CFSTR("29:ECC signature verification failed: signature incorrect."));

      if (v93)
        v65 = -16;
      v153 = v65;
      v36 = v171;
      goto LABEL_67;
    }
    v36 = 400;
LABEL_66:
    v153 = -6;
LABEL_67:
    v77 = *(void **)(*(_QWORD *)(*(_QWORD *)v18 + 8) + 40);
    v78 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", v36);
    v79 = objc_msgSend(v66, "objectForKeyedSubscript:", CFSTR("HUMBUG_XHEADER_STATUS"));
    v80 = lockcrypto_decode_error(v146, 0);
    v81 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 3206, CFSTR("com.apple.MobileActivation.ServerErrorDomain"), v36, v77, CFSTR("Server error: %ld (%@) // %@ (%@)"), v36, v78, v79, v80);

    v82 = v171;
    v83 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", v171);
    v84 = v66;
    v85 = objc_msgSend(v66, "objectForKeyedSubscript:", CFSTR("HUMBUG_XHEADER_STATUS"));
    v86 = lockcrypto_decode_error(v146, 0);
    v87 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 3206, CFSTR("com.apple.MobileActivation.ErrorDomain"), v153, v81, CFSTR("Server error: %ld (%@) // %@ (%@)"), v82, v83, v85, v86);

    v88 = v85;
    v23 = v146;

    v89 = v83;
    v24 = v84;

    v90 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
    v91 = *(void **)(v90 + 40);
    *(_QWORD *)(v90 + 40) = v87;

    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v150 = 0;
    cf = 0;
    v7 = 0;
    v36 = 0;
    v152 = 0;
    v33 = v147;
    goto LABEL_39;
  }
  if (v171 != 200)
  {
    if (!v171)
    {
      v37 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 3187, CFSTR("com.apple.MobileActivation.ErrorDomain"), -6, *(void **)(*(_QWORD *)(*(_QWORD *)v18 + 8) + 40), CFSTR("Network communication error."));
      v38 = *(_QWORD *)(*(_QWORD *)v18 + 8);
      v39 = *(void **)(v38 + 40);
      *(_QWORD *)(v38 + 40) = v37;

      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v150 = 0;
      cf = 0;
      v7 = 0;
LABEL_76:
      v152 = 0;
      goto LABEL_39;
    }
    v146 = v23;
    v66 = v24;
    goto LABEL_66;
  }
  if (!v23)
  {
    v94 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 3211, CFSTR("com.apple.MobileActivation.ErrorDomain"), -6, *(void **)(*(_QWORD *)(*(_QWORD *)v18 + 8) + 40), CFSTR("Failed to retrieve client certificate."));
    v95 = *(_QWORD *)(*(_QWORD *)v18 + 8);
    v96 = *(void **)(v95 + 40);
    *(_QWORD *)(v95 + 40) = v94;

    v41 = 0;
    v42 = 0;
    v43 = 0;
LABEL_75:
    v44 = 0;
    v150 = 0;
    cf = 0;
    v7 = 0;
    v36 = 0;
    goto LABEL_76;
  }
  v43 = objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("Date"));
  if (!v43)
  {
    v97 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 3217, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve server response date."));
    v98 = *(_QWORD *)(*(_QWORD *)v18 + 8);
    v99 = *(void **)(v98 + 40);
    *(_QWORD *)(v98 + 40) = v97;

    v41 = 0;
LABEL_74:
    v42 = 0;
    goto LABEL_75;
  }
  v67 = (uint64_t *)(a1 + 104);
  v68 = objc_alloc_init((Class)NSDateFormatter);
  v41 = v68;
  if (!v68)
  {
    v100 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 3223, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate date formatter."));
    v101 = *(_QWORD *)(*v67 + 8);
    v102 = *(void **)(v101 + 40);
    *(_QWORD *)(v101 + 40) = v100;

    goto LABEL_74;
  }
  v69 = *(_QWORD *)(*v67 + 8);
  obj = *(id *)(v69 + 40);
  v70 = objc_msgSend(v68, "dateFromServerString:withError:", v43, &obj);
  v71 = (id *)(v69 + 40);
  v42 = v70;
  objc_storeStrong(v71, obj);
  if (!v42)
  {
    v107 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 3229, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, *(void **)(*(_QWORD *)(*v67 + 8) + 40), CFSTR("Failed to convert date string."));
    v108 = *(_QWORD *)(*v67 + 8);
    v109 = *(void **)(v108 + 40);
    *(_QWORD *)(v108 + 40) = v107;

    goto LABEL_75;
  }
  v145 = v42;
  v72 = *(_QWORD *)(*v67 + 8);
  v163 = *(id *)(v72 + 40);
  v36 = (uint64_t)lockcrypto_decode_pems(v23, "CERTIFICATE", (NSError **)&v163);
  objc_storeStrong((id *)(v72 + 40), v163);
  if (!v36 || objc_msgSend((id)v36, "count") != (id)2)
  {
    v103 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 3235, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, *(void **)(*(_QWORD *)(*v67 + 8) + 40), CFSTR("Failed to decode certificates."));
    v104 = *v67;
LABEL_78:
    v105 = *(_QWORD *)(v104 + 8);
    v106 = *(void **)(v105 + 40);
    *(_QWORD *)(v105 + 40) = v103;

    v44 = 0;
    v150 = 0;
    cf = 0;
    v7 = 0;
    v152 = 0;
    v42 = v145;
    goto LABEL_39;
  }
  v144 = (void *)v36;
  if (is_internal_build())
  {
    v73 = objc_msgSend(*(id *)(a1 + 72), "objectForKeyedSubscript:", CFSTR("UseQACertificates"));
    v74 = isNSNumber(v73);

    if (v74)
    {
      v75 = objc_msgSend(*(id *)(a1 + 72), "objectForKeyedSubscript:", CFSTR("UseQACertificates"));
      v76 = objc_msgSend(v75, "BOOLValue");

    }
    else
    {
      v76 = 0;
    }
    v36 = (uint64_t)v144;
  }
  else
  {
    v76 = 0;
  }
  if (*(_BYTE *)(a1 + 126))
  {
    if (is_virtual_machine())
    {
      v103 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 3247, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Certificate type (%d) is not supported on virtual machines."), *(unsigned int *)(a1 + 120));
      v104 = *(_QWORD *)(a1 + 104);
      goto LABEL_78;
    }
    v114 = 3;
  }
  else
  {
    v110 = *(unsigned __int8 *)(a1 + 127);
    v111 = is_virtual_machine();
    if (v110)
    {
      if (v111)
      {
        v112 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 3254, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Certificate type (%d) is not supported on virtual machines."), *(unsigned int *)(a1 + 120));
        v113 = *(_QWORD *)(a1 + 104);
LABEL_104:
        v127 = *(_QWORD *)(v113 + 8);
        v128 = *(void **)(v127 + 40);
        *(_QWORD *)(v127 + 40) = v112;

        v44 = 0;
        v150 = 0;
        cf = 0;
        v7 = 0;
LABEL_106:
        v152 = 0;
        v36 = (uint64_t)v144;
        v42 = v145;
        goto LABEL_39;
      }
      v114 = 5;
    }
    else if (v111)
    {
      v114 = 4;
    }
    else if (*(_BYTE *)(a1 + 125))
    {
      v114 = 2;
    }
    else
    {
      v114 = 1;
    }
  }
  v115 = *(_QWORD *)(*v67 + 8);
  v162 = *(id *)(v115 + 40);
  v116 = copyRootCertificate(v114, v76, (NSError **)&v162);
  objc_storeStrong((id *)(v115 + 40), v162);
  if (!v116)
  {
    v112 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 3269, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, *(void **)(*(_QWORD *)(*v67 + 8) + 40), CFSTR("Failed to load BAA root CA certificate."));
    v113 = *v67;
    goto LABEL_104;
  }
  v117 = *(_QWORD *)(*v67 + 8);
  v161 = *(id *)(v117 + 40);
  v149 = lockcrypto_cert_from_pem_data(v116, (NSError **)&v161);
  objc_storeStrong((id *)(v117 + 40), v161);
  v7 = v116;
  if (!v149)
  {
    v129 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 3275, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, *(void **)(*(_QWORD *)(*v67 + 8) + 40), CFSTR("Failed to create certificate from pem data."));
    v130 = *(_QWORD *)(*v67 + 8);
    v131 = *(void **)(v130 + 40);
    *(_QWORD *)(v130 + 40) = v129;

    v44 = 0;
    v150 = 0;
    cf = 0;
    goto LABEL_106;
  }
  v143 = v116;
  v36 = (uint64_t)v144;
  v118 = (const __CFData *)objc_msgSend(v144, "objectAtIndexedSubscript:", 0);
  v119 = SecCertificateCreateWithData(kCFAllocatorDefault, v118);

  cf = v119;
  if (!v119)
  {
    v132 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 3281, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create certificate."));
    v133 = *(_QWORD *)(*v67 + 8);
    v134 = *(void **)(v133 + 40);
    *(_QWORD *)(v133 + 40) = v132;

    cf = 0;
LABEL_109:
    v150 = 0;
    v152 = 0;
    v42 = v145;
    v7 = v143;
    goto LABEL_114;
  }
  v120 = (const __CFData *)objc_msgSend(v144, "objectAtIndexedSubscript:", 1);
  v121 = SecCertificateCreateWithData(kCFAllocatorDefault, v120);

  if (!v121)
  {
    v135 = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 3287, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create certificate."));
    v136 = *(_QWORD *)(*v67 + 8);
    v137 = *(void **)(v136 + 40);
    *(_QWORD *)(v136 + 40) = v135;

    goto LABEL_109;
  }
  v122 = v121;
  v123 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
  v154 = (id *)(v123 + 40);
  v7 = v143;
  v150 = v122;
  v124 = *(unsigned __int8 *)(a1 + 125) != 0;
  if (*(_BYTE *)(a1 + 126))
  {
    v160 = *(id *)(v123 + 40);
    v125 = evaluateAccessoryTrustWithCerts(cf, v122, v149, v124, 1, v145, &v160);
    objc_storeStrong(v154, v160);
    if ((v125 & 1) == 0)
    {
      MobileActivationError = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 3295, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, *(void **)(*(_QWORD *)(*v67 + 8) + 40), CFSTR("Failed to verify MFi certificate."));
LABEL_113:
      v140 = MobileActivationError;
      v141 = *(_QWORD *)(*v67 + 8);
      v142 = *(void **)(v141 + 40);
      *(_QWORD *)(v141 + 40) = v140;

      v152 = 0;
      v42 = v145;
      goto LABEL_114;
    }
  }
  else
  {
    v159 = *(id *)(v123 + 40);
    v138 = evaluateBAATrustWithCerts(cf, v122, v149, v124, 1, v145, &v159);
    objc_storeStrong(v154, v159);
    if ((v138 & 1) == 0)
    {
      MobileActivationError = createMobileActivationError((uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 3300, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, *(void **)(*(_QWORD *)(*v67 + 8) + 40), CFSTR("Failed to verify BAA certificate."));
      goto LABEL_113;
    }
  }
  v173[0] = v144;
  v172[0] = CFSTR("RKCertification");
  v172[1] = CFSTR("ServerResponseCode");
  v139 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v171);
  v172[2] = CFSTR("ServerResponseDate");
  v42 = v145;
  v173[1] = v139;
  v173[2] = v145;
  v152 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v173, v172, 3);

LABEL_114:
  v44 = v149;
LABEL_39:
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40))
    v48 = v171 == 0;
  else
    v48 = 1;
  if (!v48)
  {
    writeSplunkLog(*(void **)(a1 + 80), 17, v171, (uint64_t)"issueClientCertificateWithReferenceKey_block_invoke", 3312, *(void **)(a1 + 88), CFSTR("%@"), v40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40));
    *(_QWORD *)v148 = v44;
    v49 = v7;
    v50 = v36;
    v51 = v42;
    v52 = v41;
    v53 = v43;
    v54 = v23;
    v55 = v24;
    v56 = v33;
    v57 = copyMobileActivationSerialQueue();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3254779904;
    block[2] = __issueClientCertificateWithReferenceKey_block_invoke_2;
    block[3] = &__block_descriptor_56_e8_32s40r48r_e5_v8__0l;
    v157 = *(_QWORD *)(a1 + 112);
    v58 = *(id *)(a1 + 80);
    v59 = *(_QWORD *)(a1 + 104);
    v156 = v58;
    v158 = v59;
    dispatch_async(v57, block);
    v60 = v57;
    v33 = v56;
    v24 = v55;
    v23 = v54;
    v43 = v53;
    v41 = v52;
    v42 = v51;
    v36 = v50;
    v7 = v49;
    v44 = *(__SecCertificate **)v148;

  }
  v61 = *(_QWORD *)(a1 + 96);
  if (v61)
    (*(void (**)(uint64_t, NSDictionary *, _QWORD))(v61 + 16))(v61, v152, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40));
  if (v44)
    CFRelease(v44);
  if (cf)
    CFRelease(cf);
  if (v150)
    CFRelease(v150);

}

void __issueClientCertificateWithReferenceKey_block_invoke_2(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  uint8_t v9[16];

  v2 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("UCRTHealingRequired"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = isNSNumber(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  if (!v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = &__kCFBooleanFalse;

  }
  if (mobileactivationErrorHasDomainAndErrorCode(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), CFSTR("com.apple.MobileActivation.ErrorDomain"), (id)0xFFFFFFFFFFFFFFF0)&& (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "BOOLValue") & 1) == 0)
  {
    data_ark_remove(*(void **)(a1 + 32), 0, CFSTR("UCRTOOBRetryAttempt"));
    data_ark_set(*(void **)(a1 + 32), 0, CFSTR("UCRTHealingRequired"), &__kCFBooleanTrue, 1);
    v8 = copyLoggingHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Scheduled UCRT OOB to attempt mismatch recovery.", v9, 2u);
    }

    scheduleXPCActivity(*(void **)(a1 + 32), (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.UCRT.OOB"), "UTF8String"), 5u, 1, 0x3000u, 0x1000u, &__block_literal_global_214);
  }
}

void __issueClientCertificateWithReferenceKey_block_invoke_213(id a1, DataArk *a2)
{
  ucrt_oob_activity_handler(a2, 0);
}

void __copy_helper_block_e8_32s40s48s56s64s72s80s88s96b104r112r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  v8 = *(id *)(a2 + 64);
  v9 = *(id *)(a2 + 72);
  v10 = *(id *)(a2 + 80);
  v11 = *(id *)(a2 + 88);
  _Block_object_assign((void *)(a1 + 96), *(const void **)(a2 + 96), 7);
  _Block_object_assign((void *)(a1 + 104), *(const void **)(a2 + 104), 8);
  _Block_object_assign((void *)(a1 + 112), *(const void **)(a2 + 112), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80s88s96s104r112r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 112), 8);
  _Block_object_dispose(*(const void **)(a1 + 104), 8);

}

void __copy_helper_block_e8_32s40s48s56s64s72b80r88r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  v8 = *(id *)(a2 + 64);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 7);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 8);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80r88r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 88), 8);
  _Block_object_dispose(*(const void **)(a1 + 80), 8);

}

void __copy_helper_block_e8_32s40s48s56s64b(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 7);
}

void __destroy_helper_block_e8_32s40s48s56s64s(id *a1)
{

}

uint64_t dcrtOOBAlreadyPerformed(void *a1, int a2, uint64_t a3)
{
  __CFString *v6;
  id v7;
  id v8;
  __CFString *v9;
  NSNumber *v10;
  id v11;
  id v12;
  unsigned int v13;
  id v14;

  v6 = CFSTR("DCRTOOBForbidden");
  v7 = a1;
  v8 = objc_alloc_init((Class)NSMutableDictionary);
  if (a2)
  {
    v9 = CFSTR("SDCRTOOBForbidden");

    objc_msgSend(v8, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("sdcrtAttestation"));
    v6 = v9;
  }
  v10 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a3);
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v10, CFSTR("CanonicalizeDcrtOIDs"));

  v11 = data_ark_copy(v7, 0, v6);
  v12 = copyDCRT(v7, 0, 0, v8, 0);

  if (v12)
  {
    v13 = 0;
  }
  else
  {
    v14 = isNSNumber(v11);
    if (v14)
      v13 = objc_msgSend(v11, "BOOLValue") ^ 1;
    else
      v13 = 1;

  }
  return v13 ^ 1;
}

uint64_t ucrtOOBAlreadyPerformed(void *a1)
{
  id v1;
  id v2;
  SecCertificateRef v3;
  unsigned int v4;
  id v5;

  v1 = a1;
  v2 = data_ark_copy(v1, 0, CFSTR("UCRTOOBForbidden"));
  v3 = copyUCRT(v1, 0);

  if (v3)
  {
    CFRelease(v3);
    v4 = 0;
  }
  else
  {
    v5 = isNSNumber(v2);
    if (v5)
      v4 = objc_msgSend(v2, "BOOLValue") ^ 1;
    else
      v4 = 1;

  }
  return v4 ^ 1;
}

void handle_deactivate(void *a1, int a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  char v10;
  id v11;
  NSObject *v12;
  char v13;
  id v14;
  NSObject *v15;
  void *v16;
  id v17;
  id v18;
  id v19;

  v3 = a1;
  if (a2)
  {
    v4 = copy_activation_records_directory_path();
    delete_an_item(v4);

    v5 = copy_uik_path();
    delete_an_item(v5);

    v6 = copy_regulatory_images_directory_path();
    v7 = objc_msgSend(v6, "stringByAppendingPathComponent:", CFSTR("regulatory_images.plist"));
    delete_an_item(v7);

    v19 = 0;
    LOBYTE(v7) = delete_identity(CFSTR("lockdown-identities"), CFSTR("com.apple.lockdown.identity.activation"), (NSError **)&v19);
    v8 = v19;
    if ((v7 & 1) == 0)
      maLog((uint64_t)"handle_deactivate", 0, CFSTR("Failed to delete device identity: %@"), v8);
    v9 = copy_ucrt_path();
    delete_an_item(v9);

    v18 = v8;
    v10 = libaks_system_key_operate(2, 1, (NSError **)&v18);
    v11 = v18;

    if ((v10 & 1) == 0)
    {
      v12 = copyLoggingHandle();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
        handle_deactivate_cold_2();

    }
    v17 = v11;
    v13 = libaks_system_key_operate(2, 2, (NSError **)&v17);
    v14 = v17;

    if ((v13 & 1) == 0)
    {
      v15 = copyLoggingHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
        handle_deactivate_cold_1();

    }
    data_ark_remove(v3, 0, CFSTR("UCRTOOBForbidden"));
    data_ark_remove(v3, 0, CFSTR("UCRTOOBForbiddenCount"));
    data_ark_remove(v3, 0, CFSTR("DCRTOOBForbidden"));
    data_ark_remove(v3, 0, CFSTR("DCRTOOBForbiddenCount"));
    data_ark_remove(v3, 0, CFSTR("SDCRTOOBForbidden"));
    data_ark_remove(v3, 0, CFSTR("SDCRTOOBForbiddenCount"));
    data_ark_remove(v3, 0, CFSTR("UCRTHealingRequired"));
    data_ark_remove(v3, 0, CFSTR("UCRTUpgradeRequired"));
    data_ark_remove(v3, 0, CFSTR("UIKUpgradeRequired"));
    data_ark_remove(v3, 0, CFSTR("LastActivated"));
    data_ark_remove(v3, 0, CFSTR("ActivationExpired"));
  }
  else
  {
    v14 = 0;
  }
  data_ark_set(v3, 0, CFSTR("BrickState"), &__kCFBooleanTrue, 1);
  data_ark_set(v3, 0, CFSTR("ActivationState"), CFSTR("Unactivated"), 1);
  xpc_activity_unregister((const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.factoryactivation"), "UTF8String"));
  v16 = (void *)gFactoryActivationTransaction;
  gFactoryActivationTransaction = 0;

}

id load_activation_records(void *a1)
{
  id v1;
  id v2;
  id v3;
  id v4;
  NSMutableDictionary *v5;
  __CFString *v6;
  void *v7;
  NSFileManager *v8;
  id v9;
  NSURL *v10;
  NSArray *v11;
  NSDirectoryEnumerator *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  NSURLResourceKey v17;
  void *v18;
  void *v19;
  void *v20;
  NSMutableDictionary *v21;
  NSMutableDictionary *v22;
  id v23;
  id v24;
  id v25;
  __CFString *v26;
  id v27;
  id v28;
  unsigned __int8 v29;
  __CFString *v30;
  id v31;
  id v32;
  unsigned __int8 v33;
  id v34;
  id v35;
  unsigned __int8 v36;
  id v37;
  id v38;
  unsigned __int8 v39;
  id v40;
  id v41;
  unsigned int v42;
  id v43;
  id v44;
  id v46;
  id v47;
  void *v48;
  id v49;
  NSDirectoryEnumerator *obj;
  id v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[128];
  NSURLResourceKey v57;

  v1 = a1;
  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v3 = data_ark_copy(v1, 0, CFSTR("ActivationState"));
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("FactoryActivated")))
  {
    v4 = data_ark_copy(v1, 0, CFSTR("FactoryActivationRecord"));
    if (v4)
      objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("DEFAULT_RECORD"));
    v5 = 0;
    v6 = 0;
    v7 = 0;
    if (!v2)
      goto LABEL_36;
LABEL_34:
    if (!objc_msgSend(v2, "count"))
    {

      v2 = 0;
    }
    goto LABEL_36;
  }
  v48 = v2;
  v47 = v3;
  v8 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v9 = copy_activation_records_directory_path();
  v10 = +[NSURL URLWithString:](NSURL, "URLWithString:", v9);
  v57 = NSURLIsRegularFileKey;
  v11 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v57, 1);
  v12 = -[NSFileManager enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:](v8, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", v10, v11, 0, &__block_literal_global_230);

  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  obj = v12;
  v13 = -[NSDirectoryEnumerator countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v52, v56, 16);
  if (v13)
  {
    v14 = v13;
    v46 = v1;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v15 = 0;
    v16 = *(_QWORD *)v53;
    v17 = NSURLIsRegularFileKey;
    do
    {
      v18 = 0;
      v49 = v14;
      do
      {
        v19 = v15;
        if (*(_QWORD *)v53 != v16)
          objc_enumerationMutation(obj);
        v20 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * (_QWORD)v18);
        v51 = 0;
        objc_msgSend(v20, "getResourceValue:forKey:error:", &v51, v17, 0);
        v15 = v51;

        if (objc_msgSend(v15, "BOOLValue"))
        {
          v21 = (NSMutableDictionary *)objc_msgSend(v20, "path");
          v22 = load_dict(v21);

          if (v22)
          {
            v23 = -[NSMutableDictionary objectForKeyedSubscript:](v22, "objectForKeyedSubscript:", CFSTR("LDActivationVersion"));
            v24 = isNSNumber(v23);

            if (v24 && (uint64_t)objc_msgSend(v24, "integerValue") <= 1)
            {
              maLog((uint64_t)"load_activation_records", 0, CFSTR("Deleting out-of-date activation record"));
              v25 = objc_msgSend(v20, "path");
              delete_an_item(v25);

            }
            else
            {
              v26 = v6;
              v27 = objc_msgSend(v20, "path");
              v28 = objc_msgSend(v27, "lastPathComponent");
              v29 = objc_msgSend(v28, "isEqualToString:", CFSTR("activation_record.plist"));

              v30 = CFSTR("DEFAULT_RECORD");
              if ((v29 & 1) != 0)
                goto LABEL_21;
              v31 = objc_msgSend(v20, "path");
              v32 = objc_msgSend(v31, "lastPathComponent");
              v33 = objc_msgSend(v32, "isEqualToString:", CFSTR("pod_record.plist"));

              v30 = CFSTR("POD_RECORD");
              if ((v33 & 1) != 0)
                goto LABEL_21;
              v34 = objc_msgSend(v20, "path");
              v35 = objc_msgSend(v34, "lastPathComponent");
              v36 = objc_msgSend(v35, "isEqualToString:", CFSTR("unlock_record.plist"));

              v30 = CFSTR("UNLOCK_RECORD");
              if ((v36 & 1) != 0)
                goto LABEL_21;
              v37 = objc_msgSend(v20, "path");
              v38 = objc_msgSend(v37, "lastPathComponent");
              v39 = objc_msgSend(v38, "isEqualToString:", CFSTR("wildcard_record.plist"));

              v30 = CFSTR("WILDCARD_RECORD");
              if ((v39 & 1) != 0
                || (v40 = objc_msgSend(v20, "path"),
                    v41 = objc_msgSend(v40, "lastPathComponent"),
                    v42 = objc_msgSend(v41, "isEqualToString:", CFSTR("care_flag.plist")),
                    v41,
                    v40,
                    v30 = CFSTR("CARE_FLAG_RECORD"),
                    v42))
              {
LABEL_21:
                v6 = v30;

              }
              else
              {
                v6 = v26;
              }
              v17 = NSURLIsRegularFileKey;
              if (v6)
                objc_msgSend(v48, "setObject:forKey:", v22, v6);
            }
            v5 = v22;
            v7 = v24;
          }
          else
          {
            maLog((uint64_t)"load_activation_records", 0, CFSTR("Could not load %@"), v20);
            v5 = 0;
          }
          v14 = v49;
        }
        v18 = (char *)v18 + 1;
      }
      while (v14 != v18);
      v43 = -[NSDirectoryEnumerator countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v52, v56, 16);
      v14 = v43;
    }
    while (v43);

    v1 = v46;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }

  v4 = 0;
  v3 = v47;
  v2 = v48;
  if (v48)
    goto LABEL_34;
LABEL_36:
  v44 = v2;

  return v44;
}

BOOL __load_activation_records_block_invoke(id a1, NSURL *a2, NSError *a3)
{
  return 1;
}

void delete_an_item(void *a1)
{
  id v1;
  NSFileManager *v2;
  unsigned int v3;
  NSFileManager *v4;
  unsigned __int8 v5;
  id v6;
  id v7;

  v1 = a1;
  v2 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v3 = -[NSFileManager fileExistsAtPath:](v2, "fileExistsAtPath:", v1);

  if (v3)
  {
    v4 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
    v7 = 0;
    v5 = -[NSFileManager removeItemAtPath:error:](v4, "removeItemAtPath:error:", v1, &v7);
    v6 = v7;

    if ((v5 & 1) != 0)
      maLog((uint64_t)"delete_an_item", 0, CFSTR("Successfully deleted %@"), v1);
    else
      maLog((uint64_t)"delete_an_item", 0, CFSTR("Failed to delete %@: %@"), v1, v6);

  }
}

uint64_t verify_activation_record_certificates(void *a1, void *a2, void *a3, NSError **a4)
{
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  unsigned int v25;
  id v26;
  void *v27;
  id v28;
  __SecCertificate *v29;
  NSError *v30;
  uint64_t v31;
  char v32;
  NSError *v33;
  char v34;
  uint64_t v35;
  __CFString *v36;
  uint64_t v37;
  uint64_t v38;
  SecCertificateRef v39;
  NSError *v40;
  SecCertificateRef v41;
  NSError *v42;
  SecKeyRef public_with_intermediate;
  NSError *v44;
  SecCertificateRef v45;
  __SecCertificate *v46;
  __SecCertificate *v47;
  id v48;
  NSError *v49;
  id v50;
  NSError *v51;
  id v52;
  NSError *v53;
  id v54;
  id v55;
  void *v56;
  SecCertificateRef v57;
  id v58;
  char v59;
  id v60;
  NSError *v61;
  id v62;
  NSError *MobileActivationError;
  __SecCertificate *v64;
  uint64_t v65;
  id v67;
  void *v68;
  id v69;
  char v70;
  NSError *v71;
  NSError *v72;
  SecCertificateRef v73;
  uint64_t v74;
  NSError *v75;
  NSArray *v77;
  NSArray *v78;
  id v79;
  SecCertificateRef v80;
  id v81;
  SecKeyRef v82;
  void *v83;
  id v84;
  id v85;
  id v86;
  SecCertificateRef cf;
  SecCertificateRef v88;
  __SecCertificate *v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  NSError *v99;
  NSError *v100;
  NSError *v101;
  NSError *v102;
  NSError *v103;
  NSError *v104;
  _QWORD v105[2];
  SecCertificateRef v106;

  v6 = a1;
  v7 = a2;
  v8 = a3;
  v9 = v8;
  if (v8)
  {
    v10 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("UseFactoryCertificates"));
    v11 = isNSNumber(v10);

    if (v11)
    {
      v12 = objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("UseFactoryCertificates"));
      v13 = objc_msgSend(v12, "BOOLValue");

    }
    else
    {
      v13 = 0;
    }
    v16 = objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("UseQACertificates"));
    v17 = isNSNumber(v16);

    if (v17)
    {
      v18 = objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("UseQACertificates"));
      v14 = objc_msgSend(v18, "BOOLValue");

    }
    else
    {
      v14 = 0;
    }
    v19 = objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("UseCommittedUIK"));
    v20 = isNSNumber(v19);

    if (v20)
    {
      v21 = objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("UseCommittedUIK"));
      v15 = objc_msgSend(v21, "BOOLValue");

    }
    else
    {
      v15 = 0;
    }
    v22 = objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("UseEnhancedValidation"));
    v23 = isNSNumber(v22);

    if (v23)
    {
      v24 = objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("UseEnhancedValidation"));
      v25 = objc_msgSend(v24, "BOOLValue");

      goto LABEL_15;
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  v25 = 0;
LABEL_15:
  v26 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("UniqueDeviceCertificate"));
  v84 = v7;
  v85 = v6;
  v83 = v26;
  if (!v26)
  {
    v33 = 0;
    v89 = 0;
    goto LABEL_27;
  }
  v27 = v26;
  v28 = isNSData(v26);

  if (!v28)
  {
    v49 = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3699, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid value for UCRT."));
LABEL_49:
    v80 = 0;
    v41 = 0;
    v45 = 0;
    cf = 0;
    v89 = 0;
LABEL_57:
    public_with_intermediate = 0;
    v88 = 0;
    v47 = 0;
    v78 = 0;
LABEL_58:
    v77 = 0;
    v82 = 0;
    v86 = 0;
LABEL_59:
    v62 = 0;
LABEL_60:
    v39 = 0;
    goto LABEL_61;
  }
  v104 = 0;
  v29 = lockcrypto_cert_from_pem_data(v27, &v104);
  v30 = v104;
  v89 = v29;
  if (!v29)
  {
    v49 = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3705, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v30, CFSTR("Failed to create certificate from pem data."));

    goto LABEL_49;
  }
  if (v25)
  {
    if (v15)
      v31 = 2;
    else
      v31 = 3;
    v103 = v30;
    v32 = certificatePublicKeyMatchesSystemPublicKey(v31, 2, v29, &v103);
    v33 = v103;

    if ((v32 & 1) == 0)
    {
      v36 = CFSTR("UCRT public key does not match UIK public key.");
      v37 = 3711;
      goto LABEL_54;
    }
    v30 = v33;
  }
  v102 = v30;
  v34 = verify_ucrt(v27, v9, &v102);
  v33 = v102;

  if ((v34 & 1) == 0)
  {
    writeSplunkLog(v6, 5, -1, (uint64_t)"verify_activation_record_certificates", 3717, 0, 0, v35, v74);
    v36 = CFSTR("Failed to verify UCRT.");
    v37 = 3718;
LABEL_54:
    MobileActivationError = createMobileActivationError((uint64_t)"verify_activation_record_certificates", v37, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v33, v36);
    goto LABEL_55;
  }
LABEL_27:
  if ((v14 | v13) == 1)
  {
    if (v14)
      v38 = 13;
    else
      v38 = 10;
    v101 = v33;
    v39 = (SecCertificateRef)copyRootCertificate(v38, v14, &v101);
    v40 = v101;

    if (v39)
    {
      v100 = v40;
      v80 = v39;
      v41 = lockcrypto_cert_from_pem_data(v39, &v100);
      v42 = v100;

      if (!v41)
      {
        v49 = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3736, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v42, CFSTR("Failed to create certificate from pem data."));

        goto LABEL_56;
      }
      v106 = v41;
      v99 = v42;
      v78 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v106, 1);
      public_with_intermediate = lockcrypto_extract_public(v78, &v99);
      v44 = v99;

      if (!public_with_intermediate)
      {
        v49 = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3750, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v44, CFSTR("Failed to extract the public key from the factory cert chain."));

        v45 = 0;
        cf = 0;
        v88 = 0;
        v47 = 0;
        goto LABEL_58;
      }
      v75 = v44;
      v45 = 0;
      v46 = 0;
      v88 = 0;
      v47 = 0;
      v77 = 0;
      v82 = 0;
      v48 = 0;
      goto LABEL_83;
    }
    v49 = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3730, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v40, CFSTR("Failed to load activation certificate."));

    v78 = 0;
    v80 = 0;
    v41 = 0;
    v45 = 0;
    cf = 0;
    v88 = 0;
    public_with_intermediate = 0;
    v47 = 0;
    v77 = 0;
    v82 = 0;
    v86 = 0;
LABEL_51:
    v62 = 0;
    goto LABEL_61;
  }
  v50 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("AccountTokenCertificate"));
  v48 = isNSData(v50);

  if (!v48)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3759, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve account token certificate from activation record."));
LABEL_55:
    v49 = MobileActivationError;

    v80 = 0;
    v41 = 0;
LABEL_56:
    v45 = 0;
    cf = 0;
    goto LABEL_57;
  }
  v98 = v33;
  v47 = lockcrypto_cert_from_pem_data(v48, (NSError **)&v98);
  v51 = (NSError *)v98;

  if (!v47)
  {
    v86 = v48;
    v49 = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3765, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v51, CFSTR("Failed to create certificate from pem data."));

    v80 = 0;
    v41 = 0;
    v45 = 0;
    cf = 0;
    public_with_intermediate = 0;
LABEL_94:
    v88 = 0;
    v77 = 0;
    v78 = 0;
    v82 = 0;
    goto LABEL_59;
  }
  if (v25)
  {
    v52 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("DeviceCertificate"));
    public_with_intermediate = (SecKeyRef)isNSData(v52);

    v86 = v48;
    if (public_with_intermediate)
    {
      v97 = v51;
      v53 = v51;
      v45 = lockcrypto_cert_from_pem_data(public_with_intermediate, (NSError **)&v97);
      v54 = v97;

      v88 = v45;
      v82 = public_with_intermediate;
      if (v45)
      {
        v96 = v54;
        v45 = (SecCertificateRef)copyRootCertificate(14, 0, (NSError **)&v96);
        v55 = v96;
        v56 = v54;
        v39 = v45;

        if (!v45)
        {
          v49 = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3790, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v55, CFSTR("Failed to load iPhone CA certificate."));

          v78 = 0;
          v80 = 0;
          v41 = 0;
          cf = 0;
          public_with_intermediate = 0;
          v77 = 0;
          goto LABEL_51;
        }
        v95 = v55;
        v45 = lockcrypto_cert_from_pem_data(v45, (NSError **)&v95);
        v79 = v95;

        cf = v45;
        if (v45)
        {
          v94 = v79;
          v45 = (SecCertificateRef)copyRootCertificate(12, 0, (NSError **)&v94);
          v81 = v94;

          if (v45)
          {
            v93 = v81;
            v57 = v45;
            v45 = lockcrypto_cert_from_pem_data(v45, (NSError **)&v93);
            v58 = v93;

            if (!v45)
            {
              v49 = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3812, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v58, CFSTR("Failed to create certificate from pem data."));

              v41 = 0;
              v73 = v57;
              public_with_intermediate = 0;
              v77 = 0;
              v78 = 0;
              v62 = 0;
              v39 = 0;
              v80 = v73;
              goto LABEL_61;
            }
            v80 = v57;
            v92 = v58;
            v46 = cf;
            v59 = lockcrypto_verify_device_cert((uint64_t)v88, (uint64_t)v45, (uint64_t)cf, (NSError **)&v92);
            v60 = v92;

            if ((v59 & 1) != 0)
            {
              v105[0] = v47;
              v105[1] = cf;
              v91 = v60;
              v77 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v105, 2);
              public_with_intermediate = lockcrypto_extract_public_with_intermediate(v77, (NSError **)&v91);
              v61 = (NSError *)v91;

              if (!public_with_intermediate)
              {
                v49 = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3829, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v61, CFSTR("Failed to extract public key from production cert chain."));

                v41 = 0;
                v78 = 0;
                goto LABEL_59;
              }
              v75 = v61;
              v41 = 0;
              v78 = 0;
              goto LABEL_83;
            }
            v49 = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3819, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v60, CFSTR("Failed to verify device certificate."));

          }
          else
          {
            v49 = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3806, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v81, CFSTR("Failed to load device CA certificate."));

            v80 = 0;
          }
          v41 = 0;
        }
        else
        {
          v80 = v39;
          v49 = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3796, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v79, CFSTR("Failed to create certificate from pem data."));

          v41 = 0;
          cf = 0;
        }
      }
      else
      {
        v49 = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3780, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v54, CFSTR("Failed to create certificate from pem data."));

        v80 = 0;
        v41 = 0;
        cf = 0;
        v88 = 0;
      }
      public_with_intermediate = 0;
      v77 = 0;
      v78 = 0;
      goto LABEL_59;
    }
    v71 = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3774, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve device certificate from activation record."));
    goto LABEL_93;
  }
  public_with_intermediate = SecCertificateCopyKey(v47);
  if (!public_with_intermediate)
  {
    v86 = v48;
    v71 = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3835, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve certificate public key."));
LABEL_93:
    v49 = v71;

    v80 = 0;
    v41 = 0;
    v45 = 0;
    cf = 0;
    goto LABEL_94;
  }
  v75 = v51;
  v78 = 0;
  v80 = 0;
  v41 = 0;
  v45 = 0;
  v46 = 0;
  v88 = 0;
  v77 = 0;
  v82 = 0;
LABEL_83:
  cf = v46;
  v67 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("AccountToken"));
  v68 = v7;
  v62 = isNSData(v67);

  v86 = v48;
  if (!v62)
  {
    v49 = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3845, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Failed to retrieve account token from activation record."));

    goto LABEL_60;
  }
  v69 = objc_msgSend(v68, "objectForKeyedSubscript:", CFSTR("AccountTokenSignature"));
  v39 = (SecCertificateRef)isNSData(v69);

  if (v39)
  {
    v90 = v75;
    v70 = lockcrypto_verify(public_with_intermediate, v39, v62, (NSError **)&v90);
    v49 = (NSError *)v90;

    if ((v70 & 1) != 0)
    {
      v64 = v47;
      v65 = 1;
      if (!v41)
        goto LABEL_64;
LABEL_63:
      CFRelease(v41);
      goto LABEL_64;
    }
    v72 = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3856, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v49, CFSTR("Failed to verify account token signature."));

    v49 = v72;
  }
  else
  {
    v49 = createMobileActivationError((uint64_t)"verify_activation_record_certificates", 3851, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Failed to retrieve account token signature from activation record."));

  }
LABEL_61:
  v64 = v47;
  if (a4)
  {
    v49 = objc_retainAutorelease(v49);
    v65 = 0;
    *a4 = v49;
    if (!v41)
      goto LABEL_64;
    goto LABEL_63;
  }
  v65 = 0;
  if (v41)
    goto LABEL_63;
LABEL_64:
  if (v45)
    CFRelease(v45);
  if (cf)
    CFRelease(cf);
  if (public_with_intermediate)
    CFRelease(public_with_intermediate);
  if (v88)
    CFRelease(v88);
  if (v64)
    CFRelease(v64);
  if (v89)
    CFRelease(v89);

  return v65;
}

uint64_t verify_activation_record(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  unsigned int v13;
  NSError *v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  unsigned int v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  unsigned int v33;
  id v34;
  void *v35;
  id v36;
  _QWORD *v37;
  id v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  unsigned int v44;
  id v45;
  void *v46;
  id v47;
  unsigned int v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  NSError *MobileActivationError;
  NSError *v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  id v63;
  unint64_t v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;

  v63 = a1;
  v7 = a2;
  v8 = a3;
  v9 = isNSDictionary(v7);

  if (!v9)
  {
    maLog((uint64_t)"verify_activation_record", 0, CFSTR("activation record is invalid"));
    v14 = 0;
    v15 = 0;
    v66 = 0;
    v67 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v64 = 0;
    v65 = 0;
    v19 = 0;
    v62 = 0;
    if (!a4)
      goto LABEL_27;
    goto LABEL_26;
  }
  v61 = a4;
  if (v8)
  {
    v10 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("UseFactoryCertificates"));
    v11 = isNSNumber(v10);

    if (v11)
    {
      v12 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("UseFactoryCertificates"));
      v13 = objc_msgSend(v12, "BOOLValue");

    }
    else
    {
      v13 = 0;
    }
    v20 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("UseEnhancedValidation"));
    v21 = isNSNumber(v20);

    if (v21)
    {
      v22 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("UseEnhancedValidation"));
      v23 = objc_msgSend(v22, "BOOLValue");

      goto LABEL_12;
    }
  }
  else
  {
    v13 = 0;
  }
  v23 = 0;
LABEL_12:
  v69 = 0;
  v15 = extract_account_token(v7, &v69);
  v24 = v69;
  if (!v15)
  {
    v14 = createMobileActivationError((uint64_t)"verify_activation_record", 3940, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v24, CFSTR("Failed to retrieve account token."));

    v66 = 0;
    v67 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v64 = 0;
    v65 = 0;
    v19 = 0;
    v9 = 0;
    v62 = 0;
    goto LABEL_25;
  }
  v25 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("ActivationRandomness"));
  v26 = isNSString(v25);

  v60 = v24;
  v56 = v13;
  v57 = v23;
  if (v26)
    v66 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("ActivationRandomness"));
  else
    v66 = 0;
  v27 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v28 = objc_msgSend(v27, "copyAnswer:", CFSTR("SerialNumber"));

  v29 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v16 = objc_msgSend(v29, "copyAnswer:", CFSTR("UniqueDeviceID"));

  v65 = objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("ActivationRandomness"));
  v19 = objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("SerialNumber"));
  v9 = objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("UniqueDeviceID"));
  v64 = (unint64_t)objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("MobileEquipmentIdentifier"));
  v62 = (unint64_t)objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("InternationalMobileEquipmentIdentity"));
  v67 = v28;
  v30 = isNSString(v28);
  if (v30
    && (v31 = v30, v32 = isNSString(v19), v32, v31, v32))
  {
    v33 = objc_msgSend(v28, "isEqualToString:", v19) ^ 1;
  }
  else
  {
    v33 = 1;
  }
  v34 = isNSString(v16);
  if (!v34
    || (v35 = v34, v36 = isNSString(v9), v36, v35, !v36)
    || (v33 | objc_msgSend(v16, "isEqualToString:", v9) ^ 1) == 1)
  {
    v14 = createMobileActivationError((uint64_t)"verify_activation_record", 3973, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid Serial/UDID."));

    v17 = 0;
    v18 = 0;
    goto LABEL_25;
  }
  if (!v57)
  {
    v17 = 0;
    v18 = 0;
    goto LABEL_53;
  }
  v39 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v17 = (unint64_t)objc_msgSend(v39, "copyAnswer:", CFSTR("MobileEquipmentIdentifier"));

  v40 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v18 = (unint64_t)objc_msgSend(v40, "copyAnswer:", CFSTR("InternationalMobileEquipmentIdentity"));

  if (v18 | v62)
  {
    v41 = isNSString((void *)v18);
    if (v41
      && (v42 = v41,
          v43 = isNSString((void *)v62),
          v43,
          v42,
          v43))
    {
      v44 = objc_msgSend((id)v18, "isEqualToString:", v62) ^ 1;
    }
    else
    {
      v44 = 1;
    }
    v58 = v44;
  }
  else
  {
    v58 = 0;
  }
  a4 = v61;
  if (v17 | v64)
  {
    v45 = isNSString((void *)v17);
    if (v45)
    {
      v46 = v45;
      v47 = isNSString((void *)v64);

      if (v47)
        v48 = objc_msgSend((id)v17, "isEqualToString:", v64) ^ 1;
      else
        v48 = 1;
      v55 = v48;
      a4 = v61;
    }
    else
    {
      v55 = 1;
    }
  }
  else
  {
    v55 = 0;
  }
  v49 = isNSString(v66);
  if (!v49)
    goto LABEL_49;
  v50 = v49;
  v51 = isNSString(v65);

  if (!v51)
  {
    LODWORD(v49) = 0;
    a4 = v61;
LABEL_49:
    v52 = v65;
    goto LABEL_50;
  }
  v52 = v65;
  LODWORD(v49) = objc_msgSend(v66, "isEqualToString:", v65);
  a4 = v61;
LABEL_50:
  if (((v56 | v49) & 1) == 0)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"verify_activation_record", 4017, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid Randomness (actual, expected): %@, %@"), v52, v66);
LABEL_57:
    v14 = MobileActivationError;

    if (!a4)
      goto LABEL_27;
    goto LABEL_26;
  }
  if ((v58 | v55) == 1)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"verify_activation_record", 4023, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid IMEI/MEID."));
    goto LABEL_57;
  }
LABEL_53:
  v68 = v60;
  v59 = verify_activation_record_certificates(v63, v7, v8, (NSError **)&v68);
  v14 = (NSError *)v68;

  if ((v59 & 1) != 0)
  {
    a4 = 1;
    goto LABEL_27;
  }
  v54 = createMobileActivationError((uint64_t)"verify_activation_record", 4030, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v14, CFSTR("Failed to verify activation record certificate."));

  v14 = v54;
LABEL_25:
  a4 = v61;
  if (v61)
  {
LABEL_26:
    v14 = objc_retainAutorelease(v14);
    v37 = (_QWORD *)a4;
    a4 = 0;
    *v37 = v14;
  }
LABEL_27:

  return a4;
}

id extract_account_token(void *a1, _QWORD *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  NSError *v7;
  id v8;
  NSError *v9;
  NSError *MobileActivationError;
  id v12;

  v3 = a1;
  v4 = isNSDictionary(v3);

  if (!v4)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"extract_account_token", 350, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
LABEL_7:
    v7 = MobileActivationError;
    v6 = 0;
    goto LABEL_8;
  }
  v5 = objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("AccountToken"));
  v4 = isNSData(v5);

  if (!v4)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"extract_account_token", 356, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Activation record is missing the account token XML."));
    goto LABEL_7;
  }
  v12 = 0;
  v6 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v4, 0, 0, &v12);
  v7 = (NSError *)v12;
  v8 = isNSDictionary(v6);

  if (!v8)
  {
    v9 = createMobileActivationError((uint64_t)"extract_account_token", 362, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v7, CFSTR("Failed to serialize data."));

    v6 = 0;
    v7 = v9;
  }
LABEL_8:
  if (a2 && !v6)
    *a2 = objc_retainAutorelease(v7);

  return v6;
}

uint64_t handle_activate(void *a1, void *a2, void *a3, NSError **a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  NSError *v20;
  SecCertificateRef v21;
  id v22;
  void *v23;
  __CFString *v24;
  void *v25;
  void *v26;
  SecCertificateRef v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  unsigned int v34;
  char v35;
  NSError *v36;
  NSNumber *v37;
  char v38;
  NSError *v39;
  NSError *v40;
  int v41;
  NSNumber *v42;
  NSError *v43;
  NSError *v44;
  NSError *v45;
  NSError *v46;
  id v47;
  unint64_t v48;
  id v49;
  unint64_t v50;
  id v51;
  id v52;
  NSFileManager *v53;
  NSDictionary *v54;
  unsigned __int8 v55;
  NSError *v56;
  id v57;
  id v58;
  id v59;
  id v60;
  char v61;
  NSError *v62;
  char v63;
  NSError *v64;
  NSError *v65;
  void *v66;
  NSError *v67;
  __CFString *v68;
  __CFString *v69;
  char v70;
  NSError *v71;
  NSError *v72;
  BOOL v73;
  NSError *v74;
  char updated;
  NSError *v76;
  char v77;
  id v78;
  unsigned __int8 v79;
  id v80;
  id v81;
  id v82;
  id v83;
  char v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  const __CFData *v90;
  NSDate *v91;
  id v92;
  const __CFString *v93;
  id v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  id v98;
  id v99;
  char v100;
  NSError *v101;
  NSError *MobileActivationError;
  NSError *v103;
  NSError *v104;
  id v105;
  id v106;
  id v107;
  NSError *v108;
  NSError *v109;
  void *v110;
  id v111;
  char v113;
  NSError *v114;
  void *v115;
  id v116;
  id v117;
  id v118;
  char v119;
  id v120;
  char v121;
  void *v122;
  id v123;
  int v124;
  id v125;
  SecCertificateRef v126;
  const __CFString *v127;
  NSError *v128;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  unsigned int v135;
  id v136;
  id v137;
  id v138;
  NSDate *v139;
  id v140;
  __CFString *v141;
  id v142;
  id v143;
  id v144;
  id v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  NSError *v154;
  NSError *v155;
  _QWORD v156[4];
  id v157;
  NSError *v158;
  NSError *v159;
  id v160;
  NSError *v161;
  id v162;
  NSError *v163;
  id v164;
  NSFileAttributeKey v165;
  _UNKNOWN **v166;

  v6 = a1;
  v7 = a2;
  v8 = a3;
  v136 = v8;
  v137 = v7;
  if (!v6 || !v7)
  {
    v20 = createMobileActivationError((uint64_t)"handle_activate", 4075, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    v145 = 0;
    v21 = 0;
    v130 = 0;
    v131 = 0;
    v140 = 0;
    v141 = 0;
    v22 = 0;
    v132 = 0;
    v133 = 0;
    v23 = 0;
    v142 = 0;
    v138 = 0;
    v139 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_121;
  }
  v9 = v8;
  v143 = v6;
  v10 = objc_alloc_init((Class)NSMutableDictionary);
  if (!v10)
  {
    v20 = createMobileActivationError((uint64_t)"handle_activate", 4081, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate dictionary."));
    v145 = 0;
    v21 = 0;
    v130 = 0;
    v140 = 0;
    v141 = 0;
    v22 = 0;
    v132 = 0;
    v133 = 0;
    v23 = 0;
    v142 = 0;
LABEL_13:
    v131 = 0;
    v138 = 0;
    v139 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_121;
  }
  v11 = v10;
  if (v9)
    objc_msgSend(v10, "addEntriesFromDictionary:", v9);
  v12 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("ActivationRecord"));
  v13 = isNSDictionary(v12);

  v145 = v12;
  v142 = v11;
  if (!v13)
  {
    v20 = createMobileActivationError((uint64_t)"handle_activate", 4091, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Message does not contain a valid activation record."));
    v21 = 0;
    v130 = 0;
    v140 = 0;
    v141 = 0;
    v22 = 0;
    v132 = 0;
    v133 = 0;
    v23 = 0;
    goto LABEL_13;
  }
  if (is_internal_build())
  {
    v14 = objc_alloc((Class)NSUserDefaults);
    v15 = objc_msgSend(v14, "persistentDomainForName:", CFSTR("com.apple.mobileactivationd"));

    v16 = objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("UseQACertificates"));
    v17 = isNSNumber(v16);

    if (v17)
    {
      v18 = objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("UseQACertificates"));
      v19 = objc_msgSend(v18, "BOOLValue");

    }
    else
    {
      v19 = 0;
    }
    v28 = objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("DSPExpirationDate"));
    v29 = isNSString(v28);

    v134 = v15;
    if (v29)
      v127 = (const __CFString *)objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("DSPExpirationDate"));
    else
      v127 = 0;
  }
  else
  {
    v134 = 0;
    v127 = 0;
    v19 = 0;
  }
  v30 = objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("UseFactoryCertificates"));
  v31 = isNSNumber(v30);
  if (v31)
  {
    v32 = v31;
    v33 = objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("UseFactoryCertificates"));
    v34 = objc_msgSend(v33, "BOOLValue");

    if (v34)
    {
      objc_msgSend(v11, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, CFSTR("UseQACertificates"));
      objc_msgSend(v11, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("UseEnhancedValidation"));
      objc_msgSend(v11, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("UseEnhancedValidationWithVersionCheck"));
      v162 = 0;
      v12 = v145;
      v35 = verify_activation_record(v143, v145, v11, (uint64_t)&v162);
      v20 = (NSError *)v162;
      if ((v35 & 1) == 0)
      {
        v36 = createMobileActivationError((uint64_t)"handle_activate", 4118, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v20, CFSTR("Failed to validate activation record with factory certificates."));

        if (is_internal_build() && is_virtual_machine())
        {
          objc_msgSend(v142, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, CFSTR("UseFactoryCertificates"));
          v37 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v19);
          objc_msgSend(v142, "setObject:forKeyedSubscript:", v37, CFSTR("UseQACertificates"));

          v161 = v36;
          v38 = verify_activation_record(v143, v145, v142, (uint64_t)&v161);
          v39 = v161;

          if ((v38 & 1) != 0)
          {

            v40 = 0;
            v41 = 0;
            v12 = v145;
            goto LABEL_36;
          }
          v20 = createMobileActivationError((uint64_t)"handle_activate", 4129, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v39, CFSTR("Failed to validate activation record with production certificates."));
          v45 = v39;
LABEL_31:

          v21 = 0;
          v130 = 0;
          v131 = 0;
          v140 = 0;
          v141 = 0;
          v22 = 0;
          v132 = 0;
          v133 = 0;
          v138 = 0;
          v139 = 0;
          v25 = 0;
          v26 = 0;
          v27 = 0;
          v6 = v143;
LABEL_50:
          v23 = v134;
          v24 = (__CFString *)v127;
          goto LABEL_121;
        }
        v20 = v36;
        v12 = v145;
      }
      v40 = 0;
      v23 = v134;
      if (v20)
      {
        v130 = 0;
        v131 = 0;
        v140 = 0;
        v141 = 0;
        v22 = 0;
        v132 = 0;
        v133 = 0;
        v138 = 0;
        v139 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v6 = v143;
        v24 = (__CFString *)v127;
        v21 = 0;
        goto LABEL_121;
      }
      v41 = 1;
      goto LABEL_36;
    }
    v12 = v145;
  }
  else
  {

  }
  objc_msgSend(v11, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, CFSTR("UseFactoryCertificates"));
  v42 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v19);
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v42, CFSTR("UseQACertificates"));

  objc_msgSend(v11, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("UseEnhancedValidation"));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("UseEnhancedValidationWithVersionCheck"));
  v160 = 0;
  LOBYTE(v42) = verify_activation_record(v143, v12, v11, (uint64_t)&v160);
  v43 = (NSError *)v160;
  v44 = v43;
  if ((v42 & 1) == 0)
  {
    v20 = createMobileActivationError((uint64_t)"handle_activate", 4150, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v43, CFSTR("Failed to validate activation record with production certificates."));
    v45 = v44;
    goto LABEL_31;
  }
  v40 = v43;
  v41 = 0;
LABEL_36:
  v159 = v40;
  v27 = (SecCertificateRef)extract_account_token(v12, &v159);
  v46 = v159;

  v126 = v27;
  if (!v27)
  {
    v20 = createMobileActivationError((uint64_t)"handle_activate", 4158, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v46, CFSTR("Failed to retrieve account token."));

    v21 = 0;
    v130 = 0;
    v131 = 0;
    v140 = 0;
    v141 = 0;
    v22 = 0;
    v132 = 0;
    v133 = 0;
    v138 = 0;
    v139 = 0;
    v25 = 0;
    v26 = 0;
    v6 = v143;
    goto LABEL_50;
  }
  v124 = v41;
  v125 = v143;
  v47 = v12;
  v48 = (unint64_t)v47;
  v145 = v47;
  if (!v47)
  {
    v65 = createMobileActivationError((uint64_t)"store_regulatory_images", 241, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid input."));
    v52 = 0;
    v58 = 0;
    v50 = 0;
    goto LABEL_56;
  }
  v49 = objc_msgSend(v47, "objectForKeyedSubscript:", CFSTR("RegulatoryImages"));
  v50 = (unint64_t)isNSArray(v49);

  v51 = objc_msgSend((id)v48, "objectForKeyedSubscript:", CFSTR("RegulatoryInfo"));
  v48 = (unint64_t)isNSData(v51);

  if (v50 | v48)
  {
    v52 = copy_regulatory_images_directory_path();
    if (v52)
    {
      v53 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
      v165 = NSFilePosixPermissions;
      v166 = &off_1002716B8;
      v54 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v166, &v165, 1);
      v164 = 0;
      v55 = -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:](v53, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v52, 1, v54, &v164);
      v56 = (NSError *)v164;

      if ((v55 & 1) != 0)
      {
        v57 = objc_msgSend(v52, "stringByAppendingPathComponent:", CFSTR("regulatory_images.plist"));

        v58 = objc_alloc_init((Class)NSMutableDictionary);
        if (v58)
        {
          v59 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
          v60 = objc_msgSend(v59, "copyAnswer:", CFSTR("ProductVersion"));

          if (v60)
          {
            objc_msgSend(v58, "setObject:forKeyedSubscript:", v60, CFSTR("ProductVersion"));
            if (v50)
              objc_msgSend(v58, "setObject:forKeyedSubscript:", v50, CFSTR("RegulatoryImages"));
            v24 = (__CFString *)v127;
            if (v48)
              objc_msgSend(v58, "setObject:forKeyedSubscript:", v48, CFSTR("RegulatoryInfo"));
            v163 = v56;
            v61 = store_dict(v57, v58, &v163);
            v62 = v163;

            if ((v61 & 1) != 0)
            {
              v63 = 1;
              v64 = v46;
              goto LABEL_59;
            }
            v65 = createMobileActivationError((uint64_t)"store_regulatory_images", 285, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v62, CFSTR("Failed to store regulatory images at %@."), v57);
            v109 = v62;
          }
          else
          {
            v65 = createMobileActivationError((uint64_t)"store_regulatory_images", 270, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve product version."));
            v109 = v56;
          }

        }
        else
        {
          v65 = createMobileActivationError((uint64_t)"store_regulatory_images", 264, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create dictionary."));

          v60 = 0;
        }
        v52 = v57;
        goto LABEL_57;
      }
      v65 = createMobileActivationError((uint64_t)"store_regulatory_images", 256, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v56, CFSTR("Failed to create %@."), v52);

    }
    else
    {
      v65 = createMobileActivationError((uint64_t)"store_regulatory_images", 251, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve regulatory images path."));
    }
    v58 = 0;
LABEL_56:
    v60 = 0;
LABEL_57:
    v64 = objc_retainAutorelease(v65);
    v63 = 0;
    v62 = v64;
    v57 = v52;
    goto LABEL_58;
  }
  v62 = 0;
  v60 = 0;
  v48 = 0;
  v50 = 0;
  v58 = 0;
  v57 = 0;
  v63 = 1;
  v64 = v46;
LABEL_58:
  v24 = (__CFString *)v127;
LABEL_59:

  v66 = v145;
  v67 = v64;

  if ((v63 & 1) == 0)
  {
    v72 = createMobileActivationError((uint64_t)"handle_activate", 4164, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v67, CFSTR("Failed to store regulatory images."));

    v130 = 0;
    v131 = 0;
    v140 = 0;
    v141 = 0;
    v22 = 0;
    v132 = 0;
    v133 = 0;
    v138 = 0;
    v139 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v20 = v72;
LABEL_68:
    v6 = v143;
LABEL_119:
    v23 = v134;
LABEL_120:
    v21 = v126;
    goto LABEL_121;
  }
  if (v124)
    v68 = CFSTR("FactoryActivated");
  else
    v68 = CFSTR("Activated");
  v69 = v68;
  v6 = v143;
  v141 = v69;
  if (-[__CFString isEqualToString:](v69, "isEqualToString:", CFSTR("FactoryActivated")))
  {
    if (!is_product_cellular())
    {
LABEL_93:
      data_ark_remove(v125, 0, CFSTR("LastActivated"));
      v95 = os_transaction_create(objc_msgSend(CFSTR("com.apple.mobileactivationd.factoryactivation"), "UTF8String"));
      v96 = (void *)gFactoryActivationTransaction;
      gFactoryActivationTransaction = v95;

      v97 = (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.factoryactivation"), "UTF8String");
      v156[0] = _NSConcreteStackBlock;
      v156[1] = 3254779904;
      v156[2] = __handle_activate_block_invoke;
      v156[3] = &__block_descriptor_40_e8_32s_e17_v16__0__DataArk_8l;
      v157 = v125;
      scheduleXPCActivity(v157, v97, 0x5460u, 0, 0, 0, v156);

      v132 = 0;
      v133 = 0;
      v139 = 0;
      v140 = 0;
      v131 = 0;
      v25 = 0;
      v26 = 0;
      v138 = 0;
      v27 = 0;
      v23 = v134;
      goto LABEL_94;
    }
    data_ark_set(v125, 0, CFSTR("FactoryActivationRecord"), v145, 0);
    v158 = v67;
    v70 = deliver_baseband_ticket((int)v125, v126, v69, &v158);
    v71 = v158;

    if ((v70 & 1) != 0)
    {
      v67 = v71;
      goto LABEL_93;
    }
    v20 = createMobileActivationError((uint64_t)"handle_activate", 4181, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v71, CFSTR("Failed to deliver baseband ticket."));

    v130 = 0;
    v131 = 0;
    v22 = 0;
    v132 = 0;
    v133 = 0;
    v139 = 0;
    v140 = 0;
    v25 = 0;
    v26 = 0;
    v138 = 0;
    v27 = 0;
    goto LABEL_119;
  }
  v155 = v67;
  v73 = send_activation_record_to_mc(v145, &v155);
  v74 = v155;

  if (!v73
    && (!os_variant_is_darwinos(objc_msgSend(CFSTR("com.apple.mobileactivationd"), "UTF8String"))
     || (mobileactivationErrorHasDomainAndErrorCode(v74, CFSTR("com.apple.MobileActivation.ErrorDomain"), (id)0xFFFFFFFFFFFFFFFDLL) & 1) == 0))
  {
    MobileActivationError = createMobileActivationError((uint64_t)"handle_activate", 4211, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v74, CFSTR("Failed to send activation record to managed configuration."));
    goto LABEL_98;
  }
  v154 = v74;
  updated = store_software_update_configuration_flags(v145, &v154);
  v76 = v154;

  if ((updated & 1) == 0)
  {
    v104 = createMobileActivationError((uint64_t)"handle_activate", 4220, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v76, CFSTR("Failed to store software update configuration flags."));
LABEL_116:
    v20 = v104;
    v103 = v76;
    goto LABEL_117;
  }
  if (is_product_cellular())
  {
    v153 = v76;
    v77 = deliver_baseband_ticket((int)v125, v126, v69, &v153);
    v74 = (NSError *)v153;

    if ((v77 & 1) != 0)
    {
      v76 = v74;
      goto LABEL_76;
    }
    MobileActivationError = createMobileActivationError((uint64_t)"handle_activate", 4227, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v74, CFSTR("Failed to deliver baseband ticket."));
LABEL_98:
    v20 = MobileActivationError;
    v103 = v74;
LABEL_117:

    v130 = 0;
    v22 = 0;
    v132 = 0;
    v133 = 0;
LABEL_118:
    v140 = 0;
    v131 = 0;
    v138 = 0;
    v139 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_119;
  }
LABEL_76:
  if (!is_product_audio_accessory())
  {
    if (!getMSDKManagedDeviceClass()
      || (v78 = objc_msgSend(getMSDKManagedDeviceClass(), "sharedInstance"),
          v79 = objc_msgSend(v78, "clearOwnershipWarning"),
          v78,
          (v79 & 1) == 0))
    {
      v104 = createMobileActivationError((uint64_t)"handle_activate", 4234, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to update demo device ownership warning."));
      goto LABEL_116;
    }
  }
  v80 = objc_msgSend(v145, "objectForKeyedSubscript:", CFSTR("DeviceCertificate"));
  v81 = isNSData(v80);

  if (!v81)
  {
    v104 = createMobileActivationError((uint64_t)"handle_activate", 4243, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Activation record does not contain device certificate."));
    goto LABEL_116;
  }
  v82 = data_ark_copy(v125, 0, CFSTR("PrivateKey"));
  v83 = isNSData(v82);
  v152 = v76;
  v84 = store_pem_as_identity(v83, v81, CFSTR("lockdown-identities"), CFSTR("com.apple.lockdown.identity.activation"), &v152);
  v85 = v152;

  v132 = v82;
  v133 = v81;
  if ((v84 & 1) == 0)
  {
    v20 = createMobileActivationError((uint64_t)"handle_activate", 4249, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v85, CFSTR("Failed to store activation identity."));

    v130 = 0;
    v22 = 0;
    goto LABEL_118;
  }
  post_notification(CFSTR("com.apple.mobile.lockdown.activation_identity_changed"));
  v140 = objc_msgSend(v145, "objectForKeyedSubscript:", CFSTR("UniqueDeviceCertificate"));
  v86 = isNSData(v140);
  if (v86)
  {

    v23 = v134;
  }
  else
  {
    v23 = v134;
    if (!is_internal_build() || !is_virtual_machine())
    {
      v20 = createMobileActivationError((uint64_t)"handle_activate", 4260, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Activation record does not contain a UCRT."));

      v130 = 0;
      v131 = 0;
      v22 = 0;
      v138 = 0;
      v139 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      goto LABEL_120;
    }
  }
  v87 = isNSData(v140);

  if (!v87)
  {
    v131 = 0;
    v138 = 0;
    v139 = 0;
    v25 = 0;
    v123 = 0;
    v27 = 0;
    goto LABEL_132;
  }
  v151 = v85;
  v88 = lockcrypto_decode_pems(v140, "CERTIFICATE", (NSError **)&v151);
  v89 = v151;

  if (!v88)
  {
    v20 = createMobileActivationError((uint64_t)"handle_activate", 4267, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v89, CFSTR("Failed to query certificate(s) from pem data."));

    v130 = 0;
    v131 = 0;
    v22 = 0;
    v138 = 0;
    v139 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v21 = v126;
    goto LABEL_121;
  }
  v131 = v88;
  v90 = (const __CFData *)objc_msgSend(v88, "objectAtIndexedSubscript:", 0);
  v27 = SecCertificateCreateWithData(kCFAllocatorDefault, v90);

  if (!v27)
  {
    v20 = createMobileActivationError((uint64_t)"handle_activate", 4273, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v89, CFSTR("Failed to create certificate from pem data."));
    v115 = v89;
LABEL_138:

    v130 = 0;
    v22 = 0;
    v138 = 0;
    v139 = 0;
    v25 = 0;
    v26 = 0;
    goto LABEL_119;
  }
  v150 = v89;
  v91 = lockcrypto_copy_certificate_validity_date((uint64_t)v27, 0, (NSError **)&v150);
  v92 = v150;

  v139 = v91;
  if (!v91)
  {
    v20 = createMobileActivationError((uint64_t)"handle_activate", 4279, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v92, CFSTR("Failed to copy certificate validity date."));
    v115 = v92;
    goto LABEL_138;
  }
  if (!is_dsp_device())
  {
    v25 = 0;
    v123 = 0;
    goto LABEL_140;
  }
  v93 = v127;
  if (!v127)
    v93 = CFSTR("2025-07-20T12:00:00-0700");
  v94 = objc_alloc_init((Class)NSDateFormatter);
  objc_msgSend(v94, "setDateFormat:", CFSTR("yyyy-MM-dd'T'HH:mm:ssZZZZZ"));
  v25 = v94;
  v127 = v93;
  v123 = objc_msgSend(v94, "dateFromString:", v93);
  if (!v123)
  {
    v24 = (__CFString *)v93;
    v20 = createMobileActivationError((uint64_t)"handle_activate", 4293, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create date from %@ (must be in format '%@')."), v93, v94);

    v130 = 0;
    v22 = 0;
    v26 = 0;
    v138 = 0;
    goto LABEL_68;
  }
  if (objc_msgSend(v123, "compare:", v139) == (id)-1)
  {
    v26 = v123;
    v20 = createMobileActivationError((uint64_t)"handle_activate", 4301, CFSTR("com.apple.MobileActivation.ErrorDomain"), -23, 0, CFSTR("Activation has expired (%@ < %@)."), v123, v139);

    v130 = 0;
    v22 = 0;
    v138 = 0;
    v6 = v143;
    v23 = v134;
    v21 = v126;
    v24 = (__CFString *)v93;
    goto LABEL_121;
  }
LABEL_140:
  v116 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v117 = objc_msgSend(v116, "copyAnswer:", CFSTR("DeviceSupportsBatteryInformation"));

  v138 = v117;
  v118 = isNSNumber(v117);

  if (!v118)
  {
    v20 = createMobileActivationError((uint64_t)"handle_activate", 4313, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve '%@'."), CFSTR("DeviceSupportsBatteryInformation"));
    v122 = v92;
LABEL_150:

    v130 = 0;
    v22 = 0;
    v6 = v143;
    v23 = v134;
    v24 = (__CFString *)v127;
    goto LABEL_151;
  }
  if (objc_msgSend(v117, "BOOLValue"))
  {
    v149 = v92;
    v119 = setBatteryDateOfFirtUse(v139, (NSError **)&v149);
    v120 = v149;

    if ((v119 & 1) == 0)
    {
      v20 = createMobileActivationError((uint64_t)"handle_activate", 4319, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v120, CFSTR("Failed to set battery date of first use."));
      v122 = v120;
      goto LABEL_150;
    }
    v92 = v120;
  }
  v148 = v92;
  v121 = storeUCRT(v125, v140, v142, &v148);
  v85 = v148;

  if ((v121 & 1) == 0)
  {
    v20 = createMobileActivationError((uint64_t)"handle_activate", 4326, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v85, CFSTR("Failed to store UCRT."));
    v122 = v85;
    goto LABEL_150;
  }
  v6 = v143;
  v66 = v145;
  v23 = v134;
  v24 = (__CFString *)v127;
LABEL_132:
  v147 = v85;
  v113 = store_activation_record(v66, (NSError **)&v147);
  v67 = (NSError *)v147;

  if ((v113 & 1) == 0)
  {
    v114 = createMobileActivationError((uint64_t)"handle_activate", 4334, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v67, CFSTR("Failed to store activation record."));

    v130 = 0;
    v22 = 0;
    v20 = v114;
LABEL_151:
    v21 = v126;
    goto LABEL_106;
  }
  v26 = v123;
LABEL_94:
  v98 = objc_msgSend(v66, "objectForKeyedSubscript:", CFSTR("FairPlayKeyData"));
  v99 = isNSData(v98);

  v123 = v26;
  v130 = v99;
  if (!v99)
  {
    v128 = v67;
    v21 = v126;
    goto LABEL_101;
  }
  v146 = v67;
  v100 = store_fairplay_blob(v125, v99, (NSError **)&v146);
  v101 = (NSError *)v146;

  v21 = v126;
  if ((v100 & 1) == 0)
  {
    v20 = createMobileActivationError((uint64_t)"handle_activate", 4343, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v101, CFSTR("Failed to store fairplay blob."));

    v22 = 0;
LABEL_106:
    v26 = v123;
    goto LABEL_121;
  }
  v128 = v101;
  v26 = v123;
LABEL_101:
  v105 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v106 = objc_msgSend(v105, "copyAnswer:", CFSTR("BuildVersion"));

  v144 = v106;
  v107 = isNSString(v106);

  if (v107)
  {
    v108 = v128;
    data_ark_set(v125, 0, CFSTR("ActivationState"), v141, v124 ^ 1);
    data_ark_set(v125, 0, CFSTR("LastActivated"), v106, v124 ^ 1);
    v26 = v123;
    data_ark_set(v125, 0, CFSTR("BrickState"), &__kCFBooleanFalse, v124 ^ 1);
    v135 = 1;
    goto LABEL_124;
  }
  v20 = createMobileActivationError((uint64_t)"handle_activate", 4355, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve build version."));

  v22 = v144;
LABEL_121:
  v144 = v22;
  handle_deactivate(v6, 1);
  if (a4)
  {
    v135 = 0;
    v108 = objc_retainAutorelease(v20);
    *a4 = v108;
  }
  else
  {
    v108 = v20;
    v135 = 0;
  }
LABEL_124:
  v110 = v6;
  v111 = data_ark_copy(v6, 0, CFSTR("ActivationState"));
  maLog((uint64_t)"handle_activate", 0, CFSTR("Activation State: %@"), v111);

  if (v27)
    CFRelease(v27);

  return v135;
}

void __handle_activate_block_invoke(uint64_t a1)
{
  factory_activation_activity_handler(*(void **)(a1 + 32));
}

void factory_activation_activity_handler(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  _QWORD block[4];
  id v5;

  v1 = a1;
  v2 = copyMobileActivationSerialQueue();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904;
  block[2] = __factory_activation_activity_handler_block_invoke;
  block[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
  v5 = v1;
  v3 = v1;
  dispatch_async(v2, block);

}

id getMSDKManagedDeviceClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getMSDKManagedDeviceClass_softClass;
  v7 = getMSDKManagedDeviceClass_softClass;
  if (!getMSDKManagedDeviceClass_softClass)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3254779904;
    v3[2] = __getMSDKManagedDeviceClass_block_invoke;
    v3[3] = &__block_descriptor_40_e8_32r_e5_v8__0l;
    v3[4] = &v4;
    __getMSDKManagedDeviceClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10002CA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t store_activation_record(void *a1, NSError **a2)
{
  id v3;
  id v4;
  NSFileManager *v5;
  NSDictionary *v6;
  unsigned __int8 v7;
  id v8;
  id v9;
  NSMutableDictionary *v10;
  NSNumber *v11;
  NSError *v12;
  uint64_t v13;
  NSError *v14;
  id v16;
  id v17;
  NSFileAttributeKey v18;
  _UNKNOWN **v19;

  v3 = a1;
  v4 = copy_activation_records_directory_path();
  if (!v4)
  {
    v12 = createMobileActivationError((uint64_t)"store_activation_record", 311, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve activation records path."));
    goto LABEL_7;
  }
  v5 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v18 = NSFilePosixPermissions;
  v19 = &off_1002716B8;
  v6 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);
  v17 = 0;
  v7 = -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:](v5, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v4, 1, v6, &v17);
  v8 = v17;

  if ((v7 & 1) == 0)
  {
    v12 = createMobileActivationError((uint64_t)"store_activation_record", 317, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v8, CFSTR("Failed to create %@."), v4);

LABEL_7:
    v10 = 0;
    if (!a2)
    {
LABEL_10:
      v13 = 0;
      goto LABEL_11;
    }
LABEL_8:
    v12 = objc_retainAutorelease(v12);
    v13 = 0;
    *a2 = v12;
LABEL_11:
    v9 = v4;
    goto LABEL_12;
  }
  v9 = objc_msgSend(v4, "stringByAppendingPathComponent:", CFSTR("activation_record.plist"));

  v10 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v3);
  v11 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", 2);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v11, CFSTR("LDActivationVersion"));

  v16 = v8;
  LOBYTE(v11) = store_dict(v9, v10, &v16);
  v12 = (NSError *)v16;

  if ((v11 & 1) == 0)
  {
    v14 = createMobileActivationError((uint64_t)"store_activation_record", 327, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v12, CFSTR("Failed to write activation record to %@."), v9);

    v4 = v9;
    v12 = v14;
    if (!a2)
      goto LABEL_10;
    goto LABEL_8;
  }
  v13 = 1;
LABEL_12:

  return v13;
}

uint64_t handle_unbrick(void *a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v7;

  v7 = 0;
  v3 = dealwith_activation(a1, &v7);
  v4 = v7;
  v5 = v4;
  if (a2 && (v3 & 1) == 0)
    *a2 = objc_retainAutorelease(v4);

  return v3;
}

uint64_t handle_recert(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  char v20;
  id v21;
  id v22;
  __CFString *v23;
  id v24;
  __CFString *v25;
  char v26;
  id v27;
  NSError *v28;
  NSError *MobileActivationError;
  void *v30;
  _QWORD *v31;
  NSError *v33;
  NSError *v34;
  id v35;
  char v36;
  id v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v39 = v9;
  v40 = v7;
  if (!v8)
  {
    v28 = createMobileActivationError((uint64_t)"handle_recert", 4412, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Input invalid."));
    v14 = 0;
    v41 = 0;
    v18 = 0;
    v23 = 0;
    v27 = 0;
    v22 = 0;
    v15 = 0;
    v12 = 0;
    if (!a4)
      goto LABEL_34;
    goto LABEL_33;
  }
  v10 = v9;
  v11 = objc_alloc_init((Class)NSMutableDictionary);
  v12 = v11;
  if (!v11)
  {
    v28 = createMobileActivationError((uint64_t)"handle_recert", 4418, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate dictionary."));
    v14 = 0;
    goto LABEL_22;
  }
  if (v10)
    objc_msgSend(v11, "addEntriesFromDictionary:", v10);
  objc_msgSend(v12, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("UseEnhancedValidation"));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("UseEnhancedValidationWithVersionCheck"));
  v13 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("certify-me"));
  v14 = isNSDictionary(v13);

  if (!v14)
  {
    v28 = createMobileActivationError((uint64_t)"handle_recert", 4431, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Message did not contain a certification record."));
LABEL_22:
    v41 = 0;
    v18 = 0;
    v23 = 0;
    v27 = 0;
    v22 = 0;
    v15 = 0;
    if (!a4)
      goto LABEL_34;
    goto LABEL_33;
  }
  v45 = 0;
  v15 = extract_account_token(v14, &v45);
  v16 = v45;
  if (!v15)
  {
    v28 = createMobileActivationError((uint64_t)"handle_recert", 4437, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v16, CFSTR("Failed to retrieve account token."));

    v41 = 0;
    v18 = 0;
    v23 = 0;
    v27 = 0;
    v22 = 0;
    if (!a4)
      goto LABEL_34;
    goto LABEL_33;
  }
  v38 = a4;
  v41 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("ReCertRandomness"));
  v17 = isNSString(v41);

  if (!v17)
  {
    v28 = createMobileActivationError((uint64_t)"handle_recert", 4443, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid nonce."));

    v18 = 0;
LABEL_31:
    v23 = 0;
    v27 = 0;
    v22 = 0;
    goto LABEL_32;
  }
  v18 = objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("ActivationRandomness"));
  v19 = isNSString(v18);

  if (!v19)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"handle_recert", 4449, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("No activation randomness in the record."));
LABEL_29:
    v28 = MobileActivationError;
    v30 = v16;
LABEL_30:

    goto LABEL_31;
  }
  if ((objc_msgSend(v41, "isEqualToString:", v18) & 1) == 0)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"handle_recert", 4454, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("The randomness does not match."));
    goto LABEL_29;
  }
  data_ark_remove(v7, 0, CFSTR("ReCertRandomness"));
  v44 = v16;
  v20 = verify_activation_record_certificates(v7, v14, v12, (NSError **)&v44);
  v21 = v44;

  if ((v20 & 1) == 0)
  {
    v28 = createMobileActivationError((uint64_t)"handle_recert", 4464, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v21, CFSTR("Could not verify record with production certificates."));
    v30 = v21;
    goto LABEL_30;
  }
  v22 = objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("DeviceCertificate"));
  v23 = (__CFString *)isNSData(v22);

  a4 = v38;
  if (!v23)
  {
    v33 = createMobileActivationError((uint64_t)"handle_recert", 4470, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Activation record does not contain device certificate."));
    goto LABEL_38;
  }
  v23 = (__CFString *)data_ark_copy(v40, 0, CFSTR("ActivationState"));
  v24 = isNSString(v23);

  if (!v24)
  {
    v25 = CFSTR("Unactivated");

    v23 = v25;
  }
  if ((-[__CFString isEqualToString:](v23, "isEqualToString:", CFSTR("Activated")) & 1) == 0)
  {
    v33 = createMobileActivationError((uint64_t)"handle_recert", 4480, CFSTR("com.apple.MobileActivation.ErrorDomain"), -8, 0, CFSTR("Device is not activated: %@"), v23);
LABEL_38:
    v28 = v33;

    v27 = 0;
    if (!v38)
      goto LABEL_34;
    goto LABEL_33;
  }
  v43 = v21;
  v26 = delete_identity(CFSTR("lockdown-identities"), CFSTR("com.apple.lockdown.identity.activation"), (NSError **)&v43);
  v37 = v43;

  if ((v26 & 1) == 0)
  {
    v28 = createMobileActivationError((uint64_t)"handle_recert", 4486, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v37, CFSTR("Failed to delete existing identity."));

    v27 = 0;
    goto LABEL_32;
  }
  v27 = data_ark_copy(v40, 0, CFSTR("PrivateKey"));
  v35 = isNSData(v27);
  v42 = v37;
  v36 = store_pem_as_identity(v35, v22, CFSTR("lockdown-identities"), CFSTR("com.apple.lockdown.identity.activation"), &v42);
  v28 = (NSError *)v42;

  if ((v36 & 1) == 0)
  {
    v34 = createMobileActivationError((uint64_t)"handle_recert", 4492, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v28, CFSTR("Failed to store activation identity."));

    v28 = v34;
LABEL_32:
    a4 = v38;
    if (!v38)
      goto LABEL_34;
LABEL_33:
    v28 = objc_retainAutorelease(v28);
    v31 = (_QWORD *)a4;
    a4 = 0;
    *v31 = v28;
    goto LABEL_34;
  }
  post_notification(CFSTR("com.apple.mobile.lockdown.activation_identity_changed"));
  a4 = 1;
LABEL_34:

  return a4;
}

void __factory_activation_activity_handler_block_invoke(uint64_t a1)
{
  id v1;
  id v2;

  v1 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("ActivationState"));
  v2 = isNSString(v1);

  if (objc_msgSend(v2, "isEqualToString:", CFSTR("FactoryActivated")))
  {
    maLog((uint64_t)"factory_activation_activity_handler_block_invoke", 0, CFSTR("Time's up Cinderella, rebooting!"));
    reboot3(0x8000000000000000);
  }

}

void dcrt_oob_load_spreading_activity_handler(void *a1, char a2)
{
  id v2;
  dispatch_block_t v3;
  NSObject *v4;
  _QWORD v5[4];
  id v6;
  char v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3254779904;
  v5[2] = __dcrt_oob_load_spreading_activity_handler_block_invoke;
  v5[3] = &__block_descriptor_41_e8_32s_e5_v8__0l;
  v7 = a2;
  v6 = a1;
  v2 = v6;
  v3 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, v5);
  v4 = copyMobileActivationSerialQueue();
  dispatch_async(v4, v3);

}

void __dcrt_oob_load_spreading_activity_handler_block_invoke(uint64_t a1)
{
  __CFString **v2;
  __CFString *v3;
  __CFString **v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  NSObject *v8;
  void *v9;
  const char *v10;
  _QWORD v11[4];
  char v12;
  uint8_t buf[4];
  __CFString *v14;
  __int16 v15;
  __CFString *v16;

  v2 = kMASDCRTUpgradeRequired;
  if (!*(_BYTE *)(a1 + 40))
    v2 = kMADCRTUpgradeRequired;
  v3 = *v2;
  v4 = kMASDCRTOOBActivityID;
  if (!*(_BYTE *)(a1 + 40))
    v4 = kMADCRTOOBActivityID;
  v5 = *v4;
  if (*(_BYTE *)(a1 + 40))
    v6 = CFSTR("SDCRT");
  else
    v6 = CFSTR("DCRT");
  v7 = v6;
  if ((dcrtOOBAlreadyPerformed(*(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 40), 1) & 1) == 0)
  {
    data_ark_set(*(void **)(a1 + 32), 0, v3, &__kCFBooleanTrue, 1);
    v8 = copyLoggingHandle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      v14 = v7;
      v15 = 2114;
      v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ is missing 1+ canonical OIDs. Scheduling %{public}@ OOB activity.", buf, 0x16u);
    }

    v9 = *(void **)(a1 + 32);
    v10 = (const char *)-[__CFString UTF8String](objc_retainAutorelease(v5), "UTF8String");
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = __dcrt_oob_load_spreading_activity_handler_block_invoke_341;
    v11[3] = &__block_descriptor_33_e17_v16__0__DataArk_8l;
    v12 = *(_BYTE *)(a1 + 40);
    scheduleXPCActivity(v9, v10, 5u, 1, 0x4000u, 0x1000u, v11);
  }

}

void __dcrt_oob_load_spreading_activity_handler_block_invoke_341(uint64_t a1, void *a2)
{
  dcrt_oob_activity_handler(a2, *(unsigned __int8 *)(a1 + 32), 0);
}

void dcrt_oob_activity_handler(void *a1, int a2, int a3)
{
  id v5;
  __CFString *v6;
  __CFString *v7;
  __CFString *v8;
  __CFString *v9;
  __CFString *v10;
  __CFString *v11;
  __CFString *v12;
  int v13;
  __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  id v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  __CFString *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  __CFString *v26;
  __CFString *v27;
  __CFString *v28;
  __CFString *v29;
  __CFString *v30;
  __CFString *v31;
  _QWORD v32[4];
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  char v42;
  _QWORD block[4];
  id v44;
  id v45;
  id v46;
  char v47;
  uint8_t buf[16];

  v5 = a1;
  v6 = CFSTR("DCRTUpgradeRequired");
  v7 = CFSTR("DCRTOOBRetryAttempt");
  v8 = CFSTR("DCRTIssuanceInFlight");
  v9 = CFSTR("com.apple.mobileactivationd.DCRT.OOB");
  v10 = CFSTR("DCRTOOBForbidden");
  v11 = CFSTR("DCRTOOBLastPerformed");
  v12 = CFSTR("DCRTOOBForbiddenCount");
  if (v5)
  {
    v31 = v11;
    v13 = a3;
    if (a2)
    {
      v30 = CFSTR("SDCRTUpgradeRequired");

      v28 = CFSTR("SDCRTOOBRetryAttempt");
      v26 = CFSTR("SDCRTIssuanceInFlight");

      v14 = CFSTR("com.apple.mobileactivationd.SDCRT.OOB");
      v15 = CFSTR("SDCRTOOBForbidden");
      v16 = v10;
      v17 = v5;
      v18 = v15;

      v19 = CFSTR("SDCRTOOBLastPerformed");
      v20 = CFSTR("SDCRTOOBForbiddenCount");

      v21 = v26;
      v7 = v28;
      v27 = v18;
      v29 = v21;
      v9 = v14;
      v5 = v17;
      v31 = v19;
      v12 = v20;
      v22 = CFSTR("SDCRT");
    }
    else
    {
      v27 = v10;
      v29 = v8;
      v30 = v6;
      v22 = CFSTR("DCRT");
    }
    if (v13)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3254779904;
      block[2] = __dcrt_oob_activity_handler_block_invoke;
      block[3] = &__block_descriptor_57_e8_32s40s48s_e5_v8__0l;
      v44 = v5;
      v7 = v7;
      v45 = v7;
      v9 = v9;
      v46 = v9;
      v47 = a2;
      v23 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
      v24 = copyMobileActivationSerialQueue();
      dispatch_async(v24, v23);

      v8 = v29;
      v6 = v30;
      v10 = v27;
      v11 = v31;
    }
    else
    {
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3254779904;
      v32[2] = __dcrt_oob_activity_handler_block_invoke_342;
      v32[3] = &__block_descriptor_105_e8_32s40s48s56s64s72s80s88s96s_e5_v8__0l;
      v33 = v5;
      v6 = v30;
      v34 = v6;
      v42 = a2;
      v7 = v7;
      v35 = v7;
      v8 = v29;
      v36 = v8;
      v37 = v22;
      v9 = v9;
      v38 = v9;
      v10 = v27;
      v39 = v10;
      v11 = v31;
      v40 = v11;
      v12 = v12;
      v41 = v12;
      v23 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, v32);
      v25 = copyMobileActivationSerialQueue();
      dispatch_async(v25, v23);

    }
  }
  else
  {
    v23 = copyLoggingHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Invalid input.", buf, 2u);
    }
  }

}

void __dcrt_oob_activity_handler_block_invoke(uint64_t a1)
{
  void *v2;
  const char *v3;
  _QWORD v4[4];
  char v5;

  data_ark_remove(*(void **)(a1 + 32), 0, *(void **)(a1 + 40));
  v2 = *(void **)(a1 + 32);
  v3 = (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 48)), "UTF8String");
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = __dcrt_oob_activity_handler_block_invoke_2;
  v4[3] = &__block_descriptor_33_e17_v16__0__DataArk_8l;
  v5 = *(_BYTE *)(a1 + 56);
  scheduleXPCActivity(v2, v3, 5u, 1, 0x4000u, 0x1000u, v4);
}

uint64_t __dcrt_oob_activity_handler_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return dcrt_oob_activity_handler(a2, *(unsigned __int8 *)(a1 + 32), 0);
}

void __dcrt_oob_activity_handler_block_invoke_342(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  _BOOL4 v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  _BOOL4 v13;
  NSNumber *v14;
  void *v15;
  NSNumber *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  long double v21;
  long double v22;
  id v23;
  _BOOL4 v24;
  NSObject *v25;
  void *v26;
  int v27;
  void *v28;
  const char *v29;
  unsigned int v30;
  id v31;
  _BOOL4 v32;
  NSObject *v33;
  void *v34;
  int v35;
  void *v36;
  const char *v37;
  unsigned int v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void ***v40;
  char v41;
  id v42;
  NSObject *v43;
  void *v44;
  const char *v45;
  unsigned int v46;
  NSObject *v47;
  void *v48;
  int v49;
  NSObject *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  char v55;
  id v56;
  void *v57;
  int v58;
  _QWORD v59[4];
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  char v74;
  char v75;
  _QWORD v76[4];
  char v77;
  id v78;
  void **v79;
  void **v80;
  _QWORD v81[4];
  char v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t, uint64_t);
  void (*v87)(uint64_t);
  id v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t);
  void (*v93)(uint64_t);
  id v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t);
  void (*v103)(uint64_t);
  id v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t (*v108)(uint64_t, uint64_t);
  void (*v109)(uint64_t);
  id v110;
  uint8_t buf[4];
  void *v112;
  __int16 v113;
  void *v114;
  __int16 v115;
  int v116;

  v105 = 0;
  v106 = &v105;
  v107 = 0x3032000000;
  v108 = __Block_byref_object_copy__5;
  v109 = __Block_byref_object_dispose__5;
  v110 = 0;
  v99 = 0;
  v100 = &v99;
  v101 = 0x3032000000;
  v102 = __Block_byref_object_copy__5;
  v103 = __Block_byref_object_dispose__5;
  v104 = 0;
  v95 = 0;
  v96 = &v95;
  v97 = 0x2020000000;
  v98 = 0;
  v89 = 0;
  v90 = &v89;
  v91 = 0x3032000000;
  v92 = __Block_byref_object_copy__5;
  v93 = __Block_byref_object_dispose__5;
  v94 = 0;
  v83 = 0;
  v84 = &v83;
  v85 = 0x3032000000;
  v86 = __Block_byref_object_copy__5;
  v87 = __Block_byref_object_dispose__5;
  v88 = 0;
  v2 = data_ark_copy(*(void **)(a1 + 32), 0, *(void **)(a1 + 40));
  v3 = (void *)v84[5];
  v84[5] = (uint64_t)v2;

  v4 = isNSNumber((void *)v84[5]);
  v5 = v4 == 0;

  if (v5)
  {
    v6 = (void *)v84[5];
    v84[5] = (uint64_t)&__kCFBooleanFalse;

  }
  if (dcrtOOBAlreadyPerformed(*(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 104), 0)
    && !objc_msgSend((id)v84[5], "BOOLValue")
    || (v7 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("ActivationState")),
        v8 = isNSString(v7),
        v9 = (void *)v106[5],
        v106[5] = (uint64_t)v8,
        v9,
        v7,
        use_hactivation())
    || is_virtual_machine()
    || (objc_msgSend((id)v106[5], "isEqualToString:", CFSTR("Activated")) & 1) == 0)
  {
    data_ark_remove(*(void **)(a1 + 32), 0, *(void **)(a1 + 40));
    v18 = 0;
    v19 = 0;
    v20 = 0;
    goto LABEL_12;
  }
  v10 = data_ark_copy(*(void **)(a1 + 32), 0, *(void **)(a1 + 48));
  v11 = (void *)v100[5];
  v100[5] = (uint64_t)v10;

  v12 = isNSNumber((void *)v100[5]);
  v13 = v12 == 0;

  if (v13)
  {
    v17 = (void *)v100[5];
    v100[5] = (uint64_t)&off_100271688;
    goto LABEL_14;
  }
  v14 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (char *)objc_msgSend((id)v100[5], "unsignedLongLongValue") + 1);
  v15 = (void *)v100[5];
  v100[5] = (uint64_t)v14;

  if ((unint64_t)objc_msgSend((id)v100[5], "unsignedLongLongValue") > 6)
  {
    v16 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
    v17 = (void *)v100[5];
    v100[5] = (uint64_t)v16;
LABEL_14:

  }
  data_ark_set(*(void **)(a1 + 32), 0, *(void **)(a1 + 48), (void *)v100[5], 1);
  objc_msgSend((id)v100[5], "doubleValue");
  v22 = exp2(v21);
  *((_DWORD *)v96 + 6) = (v22 * 60.0);
  v19 = data_ark_copy(*(void **)(a1 + 32), 0, *(void **)(a1 + 56));
  v23 = isNSNumber(v19);
  v24 = v23 == 0;

  if (v24)
  {

    v19 = &__kCFBooleanFalse;
  }
  if (objc_msgSend(v19, "BOOLValue"))
  {
    v25 = copyLoggingHandle();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      v26 = *(void **)(a1 + 64);
      v27 = *((_DWORD *)v96 + 6);
      *(_DWORD *)buf = 138543874;
      v112 = v26;
      v113 = 2114;
      v114 = v26;
      v115 = 1024;
      v116 = v27;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Another %{public}@ request is already in flight, rescheduling %{public}@ OOB for %d seconds.", buf, 0x1Cu);
    }

    v28 = *(void **)(a1 + 32);
    v29 = (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 72)), "UTF8String");
    v30 = *((_DWORD *)v96 + 6);
    v81[0] = _NSConcreteStackBlock;
    v81[1] = 3221225472;
    v81[2] = __dcrt_oob_activity_handler_block_invoke_344;
    v81[3] = &__block_descriptor_33_e17_v16__0__DataArk_8l;
    v82 = *(_BYTE *)(a1 + 104);
    scheduleXPCActivity(v28, v29, v30, 1, 0x4000u, 0x1000u, v81);
    v18 = 0;
    goto LABEL_36;
  }
  v18 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("UCRTIssuanceInFlight"));
  v31 = isNSNumber(v18);
  v32 = v31 == 0;

  if (v32)
  {

    v18 = &__kCFBooleanFalse;
  }
  if (objc_msgSend(v18, "BOOLValue"))
  {
    v33 = copyLoggingHandle();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      v34 = *(void **)(a1 + 64);
      v35 = *((_DWORD *)v96 + 6);
      *(_DWORD *)buf = 138543618;
      v112 = v34;
      v113 = 1024;
      LODWORD(v114) = v35;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "UCRT request is in flight, rescheduling %{public}@ OOB for %d seconds.", buf, 0x12u);
    }

    v36 = *(void **)(a1 + 32);
    v37 = (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 72)), "UTF8String");
    v38 = *((_DWORD *)v96 + 6);
    v80 = _NSConcreteStackBlock;
    v39 = __dcrt_oob_activity_handler_block_invoke_345;
    v40 = &v80;
LABEL_35:
    v40[1] = (void **)3221225472;
    v40[2] = (void **)v39;
    v40[3] = (void **)&__block_descriptor_33_e17_v16__0__DataArk_8l;
    *((_BYTE *)v40 + 32) = *(_BYTE *)(a1 + 104);
    scheduleXPCActivity(v36, v37, v38, 1, 0x4000u, 0x1000u, v40);
LABEL_36:
    v20 = 0;
    goto LABEL_12;
  }
  if ((ucrtOOBAlreadyPerformed(*(void **)(a1 + 32)) & 1) == 0)
  {
    v47 = copyLoggingHandle();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      v48 = *(void **)(a1 + 64);
      v49 = *((_DWORD *)v96 + 6);
      *(_DWORD *)buf = 138543618;
      v112 = v48;
      v113 = 1024;
      LODWORD(v114) = v49;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "UCRT OOB not performed yet. Rescheduling %{public}@ OOB for %d seconds.", buf, 0x12u);
    }

    v36 = *(void **)(a1 + 32);
    v37 = (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 72)), "UTF8String");
    v38 = *((_DWORD *)v96 + 6);
    v79 = _NSConcreteStackBlock;
    v39 = __dcrt_oob_activity_handler_block_invoke_346;
    v40 = &v79;
    goto LABEL_35;
  }
  v78 = 0;
  v41 = ucrtHealingSupported(&v78);
  v42 = v78;
  if (!v42)
  {
    data_ark_set(*(void **)(a1 + 32), 0, *(void **)(a1 + 56), &__kCFBooleanTrue, 0);
    v50 = copyLoggingHandle();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      v51 = *(void **)(a1 + 64);
      *(_DWORD *)buf = 138543362;
      v112 = v51;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Performing %{public}@ OOB.", buf, 0xCu);
    }

    v52 = os_transaction_create(objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 72)), "UTF8String"));
    v53 = (void *)v90[5];
    v90[5] = v52;

    v54 = *(void **)(a1 + 32);
    v55 = *(_BYTE *)(a1 + 104);
    v59[0] = _NSConcreteStackBlock;
    v59[1] = 3254779904;
    v59[2] = __dcrt_oob_activity_handler_block_invoke_348;
    v59[3] = &__block_descriptor_146_e8_32s40s48s56s64s72s80s88s96s104r112r120r128r136r_e34_v24__0__NSDictionary_8__NSError_16l;
    v69 = &v83;
    v60 = v54;
    v56 = *(id *)(a1 + 40);
    v74 = *(_BYTE *)(a1 + 104);
    v61 = v56;
    v70 = &v105;
    v75 = v41;
    v62 = *(id *)(a1 + 80);
    v63 = *(id *)(a1 + 64);
    v64 = *(id *)(a1 + 88);
    v65 = *(id *)(a1 + 96);
    v66 = *(id *)(a1 + 48);
    v71 = &v99;
    v72 = &v95;
    v67 = *(id *)(a1 + 72);
    v68 = *(id *)(a1 + 56);
    v73 = &v89;
    performDCRTOOB(v60, v55, v59);

    goto LABEL_36;
  }
  v20 = v42;
  v43 = copyLoggingHandle();
  if (os_log_type_enabled(v43, OS_LOG_TYPE_FAULT))
  {
    v57 = *(void **)(a1 + 64);
    v58 = *((_DWORD *)v96 + 6);
    *(_DWORD *)buf = 138543874;
    v112 = v20;
    v113 = 2114;
    v114 = v57;
    v115 = 1024;
    v116 = v58;
    _os_log_fault_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_FAULT, "Failed to query UCRT healing support (%{public}@). Rescheduling %{public}@ OOB for %d seconds.", buf, 0x1Cu);
  }

  v44 = *(void **)(a1 + 32);
  v45 = (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 72)), "UTF8String");
  v46 = *((_DWORD *)v96 + 6);
  v76[0] = _NSConcreteStackBlock;
  v76[1] = 3221225472;
  v76[2] = __dcrt_oob_activity_handler_block_invoke_347;
  v76[3] = &__block_descriptor_33_e17_v16__0__DataArk_8l;
  v77 = *(_BYTE *)(a1 + 104);
  scheduleXPCActivity(v44, v45, v46, 1, 0x4000u, 0x1000u, v76);
LABEL_12:

  _Block_object_dispose(&v83, 8);
  _Block_object_dispose(&v89, 8);

  _Block_object_dispose(&v95, 8);
  _Block_object_dispose(&v99, 8);

  _Block_object_dispose(&v105, 8);
}

void sub_10002E7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose((const void *)(v55 - 240), 8);
  _Block_object_dispose((const void *)(v55 - 208), 8);
  _Block_object_dispose((const void *)(v55 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __dcrt_oob_activity_handler_block_invoke_344(uint64_t a1, uint64_t a2)
{
  return dcrt_oob_activity_handler(a2, *(unsigned __int8 *)(a1 + 32), 0);
}

uint64_t __dcrt_oob_activity_handler_block_invoke_345(uint64_t a1, uint64_t a2)
{
  return dcrt_oob_activity_handler(a2, *(unsigned __int8 *)(a1 + 32), 0);
}

uint64_t __dcrt_oob_activity_handler_block_invoke_346(uint64_t a1, uint64_t a2)
{
  return dcrt_oob_activity_handler(a2, *(unsigned __int8 *)(a1 + 32), 0);
}

uint64_t __dcrt_oob_activity_handler_block_invoke_347(uint64_t a1, uint64_t a2)
{
  return dcrt_oob_activity_handler(a2, *(unsigned __int8 *)(a1 + 32), 0);
}

void performDCRTOOB(void *a1, char a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  char v13;

  v5 = a1;
  v6 = a3;
  v7 = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904;
  block[2] = __performDCRTOOB_block_invoke;
  block[3] = &__block_descriptor_49_e8_32s40bs_e5_v8__0l;
  v11 = v5;
  v12 = v6;
  v13 = a2;
  v8 = v6;
  v9 = v5;
  dispatch_async(v7, block);

}

void __dcrt_oob_activity_handler_block_invoke_348(uint64_t a1, id a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  dispatch_block_t v13;
  NSObject *v14;
  _QWORD block[4];
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int16 v31;

  v5 = a2;
  v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904;
  block[2] = __dcrt_oob_activity_handler_block_invoke_2_349;
  block[3] = &__block_descriptor_162_e8_32s40s48s56s64s72s80s88s96s104s112s120r128r136r144r152r_e5_v8__0l;
  v7 = *(_QWORD *)(a1 + 104);
  v16 = v6;
  v27 = v7;
  v17 = *(id *)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v31 = *(_WORD *)(a1 + 144);
  v28 = *(_QWORD *)(a1 + 112);
  v18 = v8;
  v19 = v5;
  v20 = *(id *)(a1 + 48);
  v21 = *(id *)(a1 + 56);
  v22 = *(id *)(a1 + 64);
  v23 = *(id *)(a1 + 72);
  v24 = *(id *)(a1 + 80);
  v29 = *(_OWORD *)(a1 + 120);
  v25 = *(id *)(a1 + 88);
  v9 = *(id *)(a1 + 96);
  v10 = *(_QWORD *)(a1 + 136);
  v26 = v9;
  v30 = v10;
  v11 = v5;
  v12 = v6;
  v13 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
  v14 = copyMobileActivationSerialQueue();
  dispatch_async(v14, v13);

}

void __dcrt_oob_activity_handler_block_invoke_2_349(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  NSError *v14;
  id v15;
  id v16;
  id v17;
  signed int v18;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  long double v33;
  NSObject *v34;
  uint64_t v35;
  int v36;
  void *v37;
  const char *v38;
  unsigned int v39;
  NSNumber *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  char v46;
  NSObject *v47;
  uint64_t v48;
  NSError *MobileActivationError;
  NSError *v50;
  _QWORD v51[4];
  char v52;
  id v53;
  uint8_t buf[4];
  uint64_t v55;
  __int16 v56;
  NSError *v57;

  if ((mobileactivationErrorHasDomainAndErrorCode(*(void **)(a1 + 32), CFSTR("com.apple.MobileActivation.ErrorDomain"), (id)0xFFFFFFFFFFFFFFFDLL) & 1) != 0)goto LABEL_9;
  v2 = data_ark_copy(*(void **)(a1 + 40), 0, *(void **)(a1 + 48));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  if (dcrtOOBAlreadyPerformed(*(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 160), 0))
  {
    if (!objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40), "BOOLValue"))
      goto LABEL_9;
  }
  v5 = data_ark_copy(*(void **)(a1 + 40), 0, CFSTR("ActivationState"));
  v6 = isNSString(v5);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  if (use_hactivation())
  {
LABEL_10:
    data_ark_remove(*(void **)(a1 + 40), 0, *(void **)(a1 + 48));
    goto LABEL_11;
  }
  if (is_virtual_machine()
    || !objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 40), "isEqualToString:", CFSTR("Activated")))
  {
LABEL_9:
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    goto LABEL_10;
  }
  v15 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("ServerResponseCode"));
  v16 = isNSNumber(v15);

  if (v16)
  {
    v17 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("ServerResponseCode"));
    v18 = objc_msgSend(v17, "intValue");

  }
  else
  {
    v18 = 0;
  }
  v21 = *(void **)(a1 + 32);
  if (v21)
  {
    v14 = v21;
    if (*(_BYTE *)(a1 + 161)
      || !mobileactivationErrorHasDomainAndErrorCode(*(void **)(a1 + 32), CFSTR("com.apple.MobileActivation.ErrorDomain"), (id)0xFFFFFFFFFFFFFFF0))
    {
      v13 = 0;
      v12 = 0;
      v22 = 0;
    }
    else
    {
      v22 = 1;
      data_ark_set(*(void **)(a1 + 40), 0, *(void **)(a1 + 64), &__kCFBooleanTrue, 1);
      v13 = 0;
      v12 = 0;
    }
    v11 = 0;
    v10 = 0;
    v9 = 0;
    goto LABEL_19;
  }
  v12 = objc_alloc_init((Class)NSMutableDictionary);
  if (!v12)
  {
    v14 = createMobileActivationError((uint64_t)"dcrt_oob_activity_handler_block_invoke_2", 4770, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate dictionary."));
    v9 = 0;
    v10 = 0;
    v11 = 0;
    goto LABEL_45;
  }
  v40 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 160));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v40, CFSTR("sdcrtAttestation"));

  v9 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("ServerResponseDate"));
  v11 = isNSDate(v9);

  if (!v11)
  {
    v14 = createMobileActivationError((uint64_t)"dcrt_oob_activity_handler_block_invoke_2", 4778, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve server response date."));
    v10 = 0;
LABEL_45:
    v22 = 0;
    v13 = 0;
    if (!v14)
      goto LABEL_26;
    goto LABEL_19;
  }
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v9, CFSTR("ServerResponseDate"));
  v41 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v13 = objc_msgSend(v41, "copyAnswer:", CFSTR("BuildVersion"));

  v11 = isNSString(v13);
  if (!v11)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"dcrt_oob_activity_handler_block_invoke_2", 4786, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve OS build."));
LABEL_50:
    v14 = MobileActivationError;
    v10 = 0;
LABEL_51:
    v22 = 0;
    if (!v14)
      goto LABEL_26;
    goto LABEL_19;
  }
  v11 = objc_alloc_init((Class)NSMutableData);
  if (!v11)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"dcrt_oob_activity_handler_block_invoke_2", 4792, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create data."));
    goto LABEL_50;
  }
  v42 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("RKCertification"));
  v10 = isNSArray(v42);

  if (!v10 || objc_msgSend(v10, "count") != (id)2)
  {
    v14 = createMobileActivationError((uint64_t)"dcrt_oob_activity_handler_block_invoke_2", 4798, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve %@."), *(_QWORD *)(a1 + 72));
    goto LABEL_51;
  }
  v43 = objc_msgSend(v10, "objectAtIndexedSubscript:", 0);
  objc_msgSend(v11, "appendData:", v43);

  v44 = objc_msgSend(v10, "objectAtIndexedSubscript:", 1);
  objc_msgSend(v11, "appendData:", v44);

  v45 = *(void **)(a1 + 40);
  v53 = 0;
  v46 = storeDCRT(v45, v11, v12, &v53);
  v14 = (NSError *)v53;
  if ((v46 & 1) == 0)
  {
    v50 = createMobileActivationError((uint64_t)"dcrt_oob_activity_handler_block_invoke_2", 4806, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v14, CFSTR("Failed to store %@."), *(_QWORD *)(a1 + 72));

    v22 = 0;
    v14 = v50;
    if (!v50)
      goto LABEL_26;
    goto LABEL_19;
  }
  data_ark_set(*(void **)(a1 + 40), 0, *(void **)(a1 + 80), v13, 1);
  data_ark_remove(*(void **)(a1 + 40), 0, *(void **)(a1 + 88));
  data_ark_remove(*(void **)(a1 + 40), 0, *(void **)(a1 + 96));
  v47 = copyLoggingHandle();
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    v48 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)buf = 138543362;
    v55 = v48;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Successfully performed %{public}@ OOB.", buf, 0xCu);
  }

  v22 = 1;
  if (v14)
  {
LABEL_19:
    v23 = copyLoggingHandle();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)buf = 138543618;
      v55 = v24;
      v56 = 2114;
      v57 = v14;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Failed to perform %{public}@ OOB: %{public}@", buf, 0x16u);
    }

    if (v18)
    {
      if (*(_BYTE *)(a1 + 160))
        v26 = 33;
      else
        v26 = 29;
      writeSplunkLog(*(void **)(a1 + 40), v26, v18, (uint64_t)"dcrt_oob_activity_handler_block_invoke", 4826, 0, CFSTR("%@"), v25, (uint64_t)v14);
    }
  }
LABEL_26:
  if ((v22 & 1) != 0)
    goto LABEL_10;
  v27 = data_ark_copy(*(void **)(a1 + 40), 0, *(void **)(a1 + 96));
  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
  v29 = *(void **)(v28 + 40);
  *(_QWORD *)(v28 + 40) = v27;

  v30 = isNSNumber(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40));
  if (!v30)
  {
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
    v32 = *(void **)(v31 + 40);
    *(_QWORD *)(v31 + 40) = &off_100271688;

  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40), "doubleValue");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 24) = (exp2(v33) * 60.0);
  v34 = copyLoggingHandle();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    v35 = *(_QWORD *)(a1 + 72);
    v36 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 24);
    *(_DWORD *)buf = 138543618;
    v55 = v35;
    v56 = 1024;
    LODWORD(v57) = v36;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Rescheduling %{public}@ OOB for %d seconds.", buf, 0x12u);
  }

  v37 = *(void **)(a1 + 40);
  v38 = (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 104)), "UTF8String");
  v39 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 24);
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472;
  v51[2] = __dcrt_oob_activity_handler_block_invoke_351;
  v51[3] = &__block_descriptor_33_e17_v16__0__DataArk_8l;
  v52 = *(_BYTE *)(a1 + 160);
  scheduleXPCActivity(v37, v38, v39, 1, 0x4000u, 0x1000u, v51);
LABEL_11:
  data_ark_set(*(void **)(a1 + 40), 0, *(void **)(a1 + 112), &__kCFBooleanFalse, 0);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8);
  v20 = *(void **)(v19 + 40);
  *(_QWORD *)(v19 + 40) = 0;

}

uint64_t __dcrt_oob_activity_handler_block_invoke_351(uint64_t a1, uint64_t a2)
{
  return dcrt_oob_activity_handler(a2, *(unsigned __int8 *)(a1 + 32), 0);
}

void __copy_helper_block_e8_32s40s48s56s64s72s80s88s96s104s112s120r128r136r144r152r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  v8 = *(id *)(a2 + 64);
  v9 = *(id *)(a2 + 72);
  v10 = *(id *)(a2 + 80);
  v11 = *(id *)(a2 + 88);
  v12 = *(id *)(a2 + 96);
  v13 = *(id *)(a2 + 104);
  v14 = *(id *)(a2 + 112);
  _Block_object_assign((void *)(a1 + 120), *(const void **)(a2 + 120), 8);
  _Block_object_assign((void *)(a1 + 128), *(const void **)(a2 + 128), 8);
  _Block_object_assign((void *)(a1 + 136), *(const void **)(a2 + 136), 8);
  _Block_object_assign((void *)(a1 + 144), *(const void **)(a2 + 144), 8);
  _Block_object_assign((void *)(a1 + 152), *(const void **)(a2 + 152), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80s88s96s104s112s120r128r136r144r152r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 152), 8);
  _Block_object_dispose(*(const void **)(a1 + 144), 8);
  _Block_object_dispose(*(const void **)(a1 + 136), 8);
  _Block_object_dispose(*(const void **)(a1 + 128), 8);
  _Block_object_dispose(*(const void **)(a1 + 120), 8);

}

void __copy_helper_block_e8_32s40s48s56s64s72s80s88s96s104r112r120r128r136r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  v8 = *(id *)(a2 + 64);
  v9 = *(id *)(a2 + 72);
  v10 = *(id *)(a2 + 80);
  v11 = *(id *)(a2 + 88);
  v12 = *(id *)(a2 + 96);
  _Block_object_assign((void *)(a1 + 104), *(const void **)(a2 + 104), 8);
  _Block_object_assign((void *)(a1 + 112), *(const void **)(a2 + 112), 8);
  _Block_object_assign((void *)(a1 + 120), *(const void **)(a2 + 120), 8);
  _Block_object_assign((void *)(a1 + 128), *(const void **)(a2 + 128), 8);
  _Block_object_assign((void *)(a1 + 136), *(const void **)(a2 + 136), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80s88s96s104r112r120r128r136r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 136), 8);
  _Block_object_dispose(*(const void **)(a1 + 128), 8);
  _Block_object_dispose(*(const void **)(a1 + 120), 8);
  _Block_object_dispose(*(const void **)(a1 + 112), 8);
  _Block_object_dispose(*(const void **)(a1 + 104), 8);

}

id __copy_helper_block_e8_32s40s48s56s64s72s80s88s96s(uint64_t a1, id *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = a2[4];
  v4 = a2[5];
  v5 = a2[6];
  v6 = a2[7];
  v7 = a2[8];
  v8 = a2[9];
  v9 = a2[10];
  v10 = a2[11];
  return a2[12];
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80s88s96s(id *a1)
{

}

void collection_activity_handler(void *a1, int a2)
{
  id v3;
  void *v4;
  dispatch_block_t v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  _QWORD v9[4];
  id v10;
  _QWORD block[4];
  id v12;

  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3254779904;
      block[2] = __collection_activity_handler_block_invoke;
      block[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
      v12 = v3;
      v5 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
      v6 = copyMobileActivationSerialQueue();
      dispatch_async(v6, v5);

      v7 = v12;
    }
    else
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3254779904;
      v9[2] = __collection_activity_handler_block_invoke_3;
      v9[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
      v10 = v3;
      v5 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, v9);
      v8 = copyMobileActivationSerialQueue();
      dispatch_async(v8, v5);

      v7 = v10;
    }

  }
  else
  {
    maLog((uint64_t)"collection_activity_handler", 0, CFSTR("Invalid input."));
  }

}

void __collection_activity_handler_block_invoke(uint64_t a1)
{
  data_ark_remove(*(void **)(a1 + 32), 0, CFSTR("CollectionRetryAttempt"));
  scheduleXPCActivity(*(void **)(a1 + 32), (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.collection"), "UTF8String"), 0x1Eu, 1, 0x5000u, 0x1000u, &__block_literal_global_354);
}

void __collection_activity_handler_block_invoke_2(id a1, DataArk *a2)
{
  collection_activity_handler(a2, 0);
}

void __collection_activity_handler_block_invoke_3(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  _BOOL4 v8;
  NSNumber *v9;
  void *v10;
  NSNumber *v11;
  void *v12;
  id v13;
  long double v14;
  long double v15;
  id v16;
  _BOOL4 v17;
  NSObject *v18;
  int v19;
  void *v20;
  const char *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  _QWORD v27[4];
  id v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t);
  id v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  void (*v47)(uint64_t);
  id v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  void (*v53)(uint64_t);
  id v54;
  uint8_t buf[4];
  int v56;

  v49 = 0;
  v50 = &v49;
  v51 = 0x3032000000;
  v52 = __Block_byref_object_copy__5;
  v53 = __Block_byref_object_dispose__5;
  v54 = 0;
  v43 = 0;
  v44 = &v43;
  v45 = 0x3032000000;
  v46 = __Block_byref_object_copy__5;
  v47 = __Block_byref_object_dispose__5;
  v48 = 0;
  v39 = 0;
  v40 = &v39;
  v41 = 0x2020000000;
  v42 = 0;
  v33 = 0;
  v34 = &v33;
  v35 = 0x3032000000;
  v36 = __Block_byref_object_copy__5;
  v37 = __Block_byref_object_dispose__5;
  v38 = 0;
  if (collectionAlreadyPerformed(*(void **)(a1 + 32))
    || (v2 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("ActivationState")),
        v3 = isNSString(v2),
        v4 = (void *)v50[5],
        v50[5] = (uint64_t)v3,
        v4,
        v2,
        use_hactivation())
    || is_virtual_machine()
    || !objc_msgSend((id)v50[5], "isEqualToString:", CFSTR("Activated")))
  {
    v13 = 0;
    goto LABEL_9;
  }
  v5 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("CollectionRetryAttempt"));
  v6 = (void *)v44[5];
  v44[5] = (uint64_t)v5;

  v7 = isNSNumber((void *)v44[5]);
  v8 = v7 == 0;

  if (v8)
  {
    v12 = (void *)v44[5];
    v44[5] = (uint64_t)&off_100271688;
    goto LABEL_11;
  }
  v9 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (char *)objc_msgSend((id)v44[5], "unsignedLongLongValue") + 1);
  v10 = (void *)v44[5];
  v44[5] = (uint64_t)v9;

  if ((unint64_t)objc_msgSend((id)v44[5], "unsignedLongLongValue") > 6)
  {
    v11 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
    v12 = (void *)v44[5];
    v44[5] = (uint64_t)v11;
LABEL_11:

  }
  data_ark_set(*(void **)(a1 + 32), 0, CFSTR("CollectionRetryAttempt"), (void *)v44[5], 1);
  objc_msgSend((id)v44[5], "doubleValue");
  v15 = exp2(v14);
  *((_DWORD *)v40 + 6) = (v15 * 60.0);
  v13 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("InFieldCollectionInFlight"));
  v16 = isNSNumber(v13);
  v17 = v16 == 0;

  if (v17)
  {

    v13 = &__kCFBooleanFalse;
  }
  if (objc_msgSend(v13, "BOOLValue"))
  {
    v18 = copyLoggingHandle();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *((_DWORD *)v40 + 6);
      *(_DWORD *)buf = 67109120;
      v56 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Collection request is in flight, rescheduling collection for %d seconds.", buf, 8u);
    }

    v20 = *(void **)(a1 + 32);
    v21 = (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.collection"), "UTF8String");
    scheduleXPCActivity(v20, v21, *((_DWORD *)v40 + 6), 1, 0x5000u, 0x1000u, &__block_literal_global_356);
  }
  else
  {
    v22 = copyLoggingHandle();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Performing collection.", buf, 2u);
    }

    v23 = os_transaction_create(objc_msgSend(CFSTR("com.apple.mobileactivationd.collection"), "UTF8String"));
    v24 = (void *)v34[5];
    v34[5] = v23;

    v25 = *(void **)(a1 + 32);
    v26 = copy_current_process_name();
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3254779904;
    v27[2] = __collection_activity_handler_block_invoke_357;
    v27[3] = &__block_descriptor_72_e8_32s40r48r56r64r_e48_v40__0__NSData_8__NSDictionary_16q24__NSError_32l;
    v28 = *(id *)(a1 + 32);
    v29 = &v49;
    v30 = &v39;
    v31 = &v43;
    v32 = &v33;
    performInFieldCollection(v25, 0, v26, v27);

  }
LABEL_9:

  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v43, 8);

  _Block_object_dispose(&v49, 8);
}

void sub_10002FEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

void __collection_activity_handler_block_invoke_355(id a1, DataArk *a2)
{
  collection_activity_handler(a2, 0);
}

void __collection_activity_handler_block_invoke_357(uint64_t a1, id a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  __int128 v13;
  id v14;
  id v15;
  id v16;
  dispatch_block_t v17;
  NSObject *v18;
  _QWORD block[4];
  id v20;
  id v21;
  id v22;
  id v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v9 = a2;
  v10 = a3;
  v11 = a5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904;
  block[2] = __collection_activity_handler_block_invoke_2_358;
  block[3] = &__block_descriptor_104_e8_32s40s48s56s64r72r80r88r_e5_v8__0l;
  v12 = *(id *)(a1 + 32);
  v26 = a4;
  v20 = v12;
  v21 = v11;
  v22 = v10;
  v23 = v9;
  v13 = *(_OWORD *)(a1 + 56);
  v24 = *(_OWORD *)(a1 + 40);
  v25 = v13;
  v14 = v9;
  v15 = v10;
  v16 = v11;
  v17 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
  v18 = copyMobileActivationSerialQueue();
  dispatch_async(v18, v17);

}

void __collection_activity_handler_block_invoke_2_358(uint64_t a1)
{
  id v2;
  NSError *v3;
  id v4;
  id v5;
  id v6;
  MACollectionInterface *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  char v17;
  void *v18;
  NSString *v19;
  NSError *v20;
  uint64_t v21;
  NSString *v22;
  id v23;
  uint64_t v24;
  void *v25;
  NSString *v26;
  NSError *v27;
  uint64_t v28;
  NSString *v29;
  NSError *v30;
  id v31;
  void *v32;
  NSObject *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  void *v40;
  long double v41;
  NSObject *v42;
  int v43;
  uint64_t v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  unsigned __int8 v52;
  id v53;
  NSObject *v54;
  NSError *v55;
  char v56;
  id v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  uint8_t buf[4];
  NSError *v63;

  if (collectionAlreadyPerformed(*(void **)(a1 + 32)))
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    goto LABEL_32;
  }
  v11 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("ActivationState"));
  v12 = isNSString(v11);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v12;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  if (!objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "isEqualToString:", CFSTR("Activated")))goto LABEL_32;
  v10 = *(id *)(a1 + 96);
  if (v10 == (id)200)
  {
    v10 = objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("X-Apple-Invalid-Reason"));
    v15 = objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("X-Apple-Retry-After"));
    v16 = isNSString(v10);
    v58 = v15;
    if (v16)
    {

      goto LABEL_16;
    }
    v23 = isNSNumber(v15);

    if (v23)
    {
LABEL_16:
      v24 = *(_QWORD *)(a1 + 96);
      v25 = *(void **)(a1 + 40);
      v26 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", v24);
      v27 = createMobileActivationError((uint64_t)"collection_activity_handler_block_invoke_2", 4993, CFSTR("com.apple.MobileActivation.ServerErrorDomain"), v24, v25, CFSTR("Server error: %ld (%@) / %@ / %@"), v24, v26, v10, v58);

      v28 = *(_QWORD *)(a1 + 96);
      v29 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", v28);
      v3 = createMobileActivationError((uint64_t)"collection_activity_handler_block_invoke_2", 4993, CFSTR("com.apple.MobileActivation.ErrorDomain"), -6, v27, CFSTR("Server error: %ld (%@) / %@ / %@"), v28, v29, v10, v58);

      v30 = v27;
      v9 = v58;

      v2 = 0;
      v17 = 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      if (!v3)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (*(_QWORD *)(a1 + 56))
    {
      v46 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
      v2 = objc_msgSend(v46, "copyAnswer:", CFSTR("BuildVersion"));

      v47 = isNSString(v2);
      if (v47)
      {
        v7 = -[MACollectionInterface initWithContext:]([MACollectionInterface alloc], "initWithContext:", *(_QWORD *)(a1 + 32));
        if (v7)
        {
          v48 = *(_QWORD *)(a1 + 56);
          v61 = 0;
          v8 = +[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", v48, 0, &v61);
          v49 = v61;
          v50 = v49;
          if (v8)
          {
            v6 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("suinfo"));
            v51 = isNSString(v6);

            if (v51)
            {
              v5 = objc_msgSend(objc_alloc((Class)NSData), "initWithBase64EncodedString:options:", v6, 1);
              if (v5)
              {
                v60 = v50;
                v52 = -[MACollectionInterface processSUInfo:withError:](v7, "processSUInfo:withError:", v5, &v60);
                v3 = (NSError *)v60;

                if ((v52 & 1) != 0)
                {
                  data_ark_remove(*(void **)(a1 + 32), 0, CFSTR("PCRTToken"));
                  v4 = objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("x-iservice-token"));
                  v53 = isNSString(v4);

                  if (v53)
                    data_ark_set(*(void **)(a1 + 32), 0, CFSTR("PCRTToken"), v4, 1);
                  data_ark_set(*(void **)(a1 + 32), 0, CFSTR("CollectionLastPerformed"), v2, 1);
                  data_ark_remove(*(void **)(a1 + 32), 0, CFSTR("CollectionRetryAttempt"));
                  v54 = copyLoggingHandle();
                  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Successfully performed collection.", buf, 2u);
                  }

                  v17 = 1;
                }
                else
                {
                  v55 = createMobileActivationError((uint64_t)"collection_activity_handler_block_invoke_2", 5033, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to process SUInfo: %@"), v3);

                  v17 = 0;
                  v4 = 0;
                  v3 = v55;
                }
              }
              else
              {
                v3 = createMobileActivationError((uint64_t)"collection_activity_handler_block_invoke_2", 5028, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to decode SUInfo."));

                v17 = 0;
                v4 = 0;
              }
            }
            else
            {
              v3 = createMobileActivationError((uint64_t)"collection_activity_handler_block_invoke_2", 5022, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid SUInfo: %@"), v6);

              v17 = 0;
              v4 = 0;
              v5 = 0;
            }
          }
          else
          {
            v3 = createMobileActivationError((uint64_t)"collection_activity_handler_block_invoke_2", 5016, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to deserialize JSON data: %@"), v49);

            v17 = 0;
            v4 = 0;
            v5 = 0;
            v6 = 0;
          }
LABEL_49:
          v9 = v58;
          if (!v3)
            goto LABEL_24;
          goto LABEL_17;
        }
        v3 = createMobileActivationError((uint64_t)"collection_activity_handler_block_invoke_2", 5010, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create collection interface."));
        v17 = 0;
        v4 = 0;
        v5 = 0;
        v6 = 0;
LABEL_48:
        v8 = 0;
        goto LABEL_49;
      }
      v3 = createMobileActivationError((uint64_t)"collection_activity_handler_block_invoke_2", 5004, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve OS build."));
    }
    else
    {
      v3 = createMobileActivationError((uint64_t)"collection_activity_handler_block_invoke_2", 4998, CFSTR("com.apple.MobileActivation.ErrorDomain"), -6, *(void **)(a1 + 40), CFSTR("Invalid server response."));
      v2 = 0;
    }
    v17 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    goto LABEL_48;
  }
  if (v10)
  {
    if (v10 == (id)-1)
    {
      v3 = createMobileActivationError((uint64_t)"collection_activity_handler_block_invoke_2", 4979, CFSTR("com.apple.MobileActivation.ErrorDomain"), -6, *(void **)(a1 + 40), CFSTR("Internal error."));
    }
    else
    {
      v18 = *(void **)(a1 + 40);
      v19 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", *(_QWORD *)(a1 + 96));
      v20 = createMobileActivationError((uint64_t)"collection_activity_handler_block_invoke_2", 4985, CFSTR("com.apple.MobileActivation.ServerErrorDomain"), (uint64_t)v10, v18, CFSTR("Server error: %ld (%@)"), v10, v19);

      v21 = *(_QWORD *)(a1 + 96);
      v22 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", v21);
      v3 = createMobileActivationError((uint64_t)"collection_activity_handler_block_invoke_2", 4985, CFSTR("com.apple.MobileActivation.ErrorDomain"), -6, v20, CFSTR("Server error: %ld (%@)"), v21, v22);

    }
    v2 = 0;
    v17 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    if (!v3)
      goto LABEL_24;
  }
  else
  {
    v3 = createMobileActivationError((uint64_t)"collection_activity_handler_block_invoke_2", 4982, CFSTR("com.apple.MobileActivation.ErrorDomain"), -6, *(void **)(a1 + 40), CFSTR("Network communication error."));
    v2 = 0;
    v17 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (!v3)
      goto LABEL_24;
  }
LABEL_17:
  v56 = v17;
  v57 = v2;
  v31 = v10;
  v32 = v9;
  v33 = copyLoggingHandle();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v63 = v3;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Failed to perform collection: %{public}@", buf, 0xCu);
  }

  if (!*(_QWORD *)(a1 + 96))
  {
    v9 = v32;
    v10 = v31;
    v2 = v57;
    if ((v56 & 1) != 0)
      goto LABEL_32;
    goto LABEL_27;
  }
  v9 = v32;
  if ((mobileactivationErrorHasDomainAndErrorCode(v3, CFSTR("com.apple.MobileActivation.ErrorDomain"), (id)0xFFFFFFFFFFFFFFEALL) & 1) == 0)writeSplunkLog(*(void **)(a1 + 32), 16, *(_QWORD *)(a1 + 96), (uint64_t)"collection_activity_handler_block_invoke", 5059, 0, CFSTR("%@"), v34, (uint64_t)v3);
  v10 = v31;
  v2 = v57;
  v17 = v56;
  if (*(_QWORD *)(a1 + 96) == 403)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 86400;
LABEL_24:
  if ((v17 & 1) != 0)
    goto LABEL_32;
LABEL_27:
  v59 = v9;
  v35 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("CollectionRetryAttempt"));
  v36 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v37 = *(void **)(v36 + 40);
  *(_QWORD *)(v36 + 40) = v35;

  v38 = isNSNumber(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40));
  if (!v38)
  {
    v39 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v40 = *(void **)(v39 + 40);
    *(_QWORD *)(v39 + 40) = &off_100271688;

  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "doubleValue");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = (exp2(v41) * 60.0);
  v42 = copyLoggingHandle();
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    v43 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
    *(_DWORD *)buf = 67109120;
    LODWORD(v63) = v43;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Rescheduling collection for %d seconds.", buf, 8u);
  }

  scheduleXPCActivity(*(void **)(a1 + 32), (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.collection"), "UTF8String"), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24), 1, 0x5000u, 0x1000u, &__block_literal_global_361);
  v9 = v59;
LABEL_32:
  v44 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  v45 = *(void **)(v44 + 40);
  *(_QWORD *)(v44 + 40) = 0;

}

void __collection_activity_handler_block_invoke_360(id a1, DataArk *a2)
{
  collection_activity_handler(a2, 0);
}

void __copy_helper_block_e8_32s40s48s56s64r72r80r88r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 8);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64r72r80r88r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 88), 8);
  _Block_object_dispose(*(const void **)(a1 + 80), 8);
  _Block_object_dispose(*(const void **)(a1 + 72), 8);
  _Block_object_dispose(*(const void **)(a1 + 64), 8);

}

void __copy_helper_block_e8_32s40r48r56r64r(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = *(id *)(a2 + 32);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 8);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
}

void __destroy_helper_block_e8_32s40r48r56r64r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 64), 8);
  _Block_object_dispose(*(const void **)(a1 + 56), 8);
  _Block_object_dispose(*(const void **)(a1 + 48), 8);
  _Block_object_dispose(*(const void **)(a1 + 40), 8);

}

void __ucrt_oob_activity_handler_block_invoke(uint64_t a1)
{
  data_ark_remove(*(void **)(a1 + 32), 0, CFSTR("UCRTOOBRetryAttempt"));
  scheduleXPCActivity(*(void **)(a1 + 32), (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.UCRT.OOB"), "UTF8String"), 5u, 1, 0x3000u, 0x1000u, &__block_literal_global_362);
}

void __ucrt_oob_activity_handler_block_invoke_2(id a1, DataArk *a2)
{
  ucrt_oob_activity_handler(a2, 0);
}

void __ucrt_oob_activity_handler_block_invoke_3(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  _BOOL4 v5;
  void *v6;
  __SecCertificate *v7;
  __SecCertificate *v8;
  char v9;
  id v10;
  NSObject *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  _BOOL4 v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  _BOOL4 v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  _BOOL4 v29;
  NSNumber *v30;
  void *v31;
  NSNumber *v32;
  void *v33;
  NSDictionary *v34;
  id v35;
  void *v36;
  long double v37;
  long double v38;
  id v39;
  _BOOL4 v40;
  NSObject *v41;
  int v42;
  void *v43;
  const char *v44;
  Block_layout *v45;
  int v46;
  id v47;
  NSObject *v48;
  void *v49;
  const char *v50;
  NSObject *v51;
  int v52;
  int v53;
  NSObject *v54;
  uint64_t v55;
  void *v56;
  NSNumber *v57;
  void *v58;
  id v59;
  NSObject *v60;
  _QWORD v61[4];
  id v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  char v70;
  char v71;
  id v72;
  id v73;
  char v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t);
  void (*v79)(uint64_t);
  id v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t);
  void (*v85)(uint64_t);
  id v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t);
  void (*v91)(uint64_t);
  id v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, uint64_t);
  void (*v97)(uint64_t);
  id v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t (*v106)(uint64_t, uint64_t);
  void (*v107)(uint64_t);
  id v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t (*v112)(uint64_t, uint64_t);
  void (*v113)(uint64_t);
  id v114;
  const __CFString *v115;
  NSNumber *v116;
  uint8_t buf[4];
  int v118;

  v109 = 0;
  v110 = &v109;
  v111 = 0x3032000000;
  v112 = __Block_byref_object_copy__5;
  v113 = __Block_byref_object_dispose__5;
  v114 = 0;
  v103 = 0;
  v104 = &v103;
  v105 = 0x3032000000;
  v106 = __Block_byref_object_copy__5;
  v107 = __Block_byref_object_dispose__5;
  v108 = 0;
  v99 = 0;
  v100 = &v99;
  v101 = 0x2020000000;
  v102 = 0;
  v93 = 0;
  v94 = &v93;
  v95 = 0x3032000000;
  v96 = __Block_byref_object_copy__5;
  v97 = __Block_byref_object_dispose__5;
  v98 = 0;
  v87 = 0;
  v88 = &v87;
  v89 = 0x3032000000;
  v90 = __Block_byref_object_copy__5;
  v91 = __Block_byref_object_dispose__5;
  v92 = 0;
  v81 = 0;
  v82 = &v81;
  v83 = 0x3032000000;
  v84 = __Block_byref_object_copy__5;
  v85 = __Block_byref_object_dispose__5;
  v86 = &__kCFBooleanFalse;
  v75 = 0;
  v76 = &v75;
  v77 = 0x3032000000;
  v78 = __Block_byref_object_copy__5;
  v79 = __Block_byref_object_dispose__5;
  v80 = &__kCFBooleanFalse;
  v74 = 0;
  v2 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("UIKUpgradeRequired"));
  v3 = (void *)v76[5];
  v76[5] = (uint64_t)v2;

  v4 = isNSNumber((void *)v76[5]);
  v5 = v4 == 0;

  if (v5)
  {
    v6 = (void *)v76[5];
    v76[5] = (uint64_t)&__kCFBooleanFalse;

  }
  if (objc_msgSend((id)v76[5], "BOOLValue"))
  {
    v7 = copyUCRT(*(void **)(a1 + 32), 0);
    v8 = v7;
    if (v7)
    {
      v73 = 0;
      v9 = deleteLegacyUIKIfMismatched(v7, &v74, (NSError **)&v73);
      v10 = v73;
      if ((v9 & 1) == 0)
      {
        v11 = copyLoggingHandle();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
          __ucrt_oob_activity_handler_block_invoke_3_cold_2();

      }
      if (v74)
      {
        maLog((uint64_t)"ucrt_oob_activity_handler_block_invoke", 0, CFSTR("Legacy UIK purged."));
        if (certificatePublicKeyMatchesSystemPublicKey(2, 2, v8, 0))
        {
          v12 = (void *)v76[5];
          v76[5] = (uint64_t)&__kCFBooleanFalse;

          data_ark_remove(*(void **)(a1 + 32), 0, CFSTR("UIKUpgradeRequired"));
        }
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v13 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("UCRTUpgradeRequired"));
  v14 = (void *)v88[5];
  v88[5] = (uint64_t)v13;

  v15 = isNSNumber((void *)v88[5]);
  v16 = v15 == 0;

  if (v16)
  {
    v17 = (void *)v88[5];
    v88[5] = (uint64_t)&__kCFBooleanFalse;

  }
  v18 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("UCRTHealingRequired"));
  v19 = (void *)v82[5];
  v82[5] = (uint64_t)v18;

  v20 = isNSNumber((void *)v82[5]);
  v21 = v20 == 0;

  if (v21)
  {
    v22 = (void *)v82[5];
    v82[5] = (uint64_t)&__kCFBooleanFalse;

  }
  if (ucrtOOBAlreadyPerformed(*(void **)(a1 + 32))
    && (objc_msgSend((id)v88[5], "BOOLValue") & 1) == 0
    && (objc_msgSend((id)v82[5], "BOOLValue") & 1) == 0
    && !objc_msgSend((id)v76[5], "BOOLValue"))
  {
    v34 = 0;
    v35 = 0;
LABEL_49:
    v36 = 0;
    goto LABEL_28;
  }
  v23 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("ActivationState"));
  v24 = isNSString(v23);
  v25 = (void *)v110[5];
  v110[5] = (uint64_t)v24;

  if (use_hactivation()
    || is_virtual_machine()
    || (objc_msgSend((id)v110[5], "isEqualToString:", CFSTR("Activated")) & 1) == 0)
  {
    data_ark_remove(*(void **)(a1 + 32), 0, CFSTR("UCRTUpgradeRequired"));
    data_ark_remove(*(void **)(a1 + 32), 0, CFSTR("UCRTHealingRequired"));
    data_ark_remove(*(void **)(a1 + 32), 0, CFSTR("UIKUpgradeRequired"));
    v34 = 0;
    v35 = 0;
    v36 = 0;
    goto LABEL_28;
  }
  v26 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("UCRTOOBRetryAttempt"));
  v27 = (void *)v104[5];
  v104[5] = (uint64_t)v26;

  v28 = isNSNumber((void *)v104[5]);
  v29 = v28 == 0;

  if (v29)
  {
    v33 = (void *)v104[5];
    v104[5] = (uint64_t)&off_100271688;
  }
  else
  {
    v30 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (char *)objc_msgSend((id)v104[5], "unsignedLongLongValue") + 1);
    v31 = (void *)v104[5];
    v104[5] = (uint64_t)v30;

    if ((unint64_t)objc_msgSend((id)v104[5], "unsignedLongLongValue") <= 6)
      goto LABEL_34;
    v32 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
    v33 = (void *)v104[5];
    v104[5] = (uint64_t)v32;
  }

LABEL_34:
  data_ark_set(*(void **)(a1 + 32), 0, CFSTR("UCRTOOBRetryAttempt"), (void *)v104[5], 1);
  objc_msgSend((id)v104[5], "doubleValue");
  v38 = exp2(v37);
  *((_DWORD *)v100 + 6) = (v38 * 60.0);
  v35 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("UCRTIssuanceInFlight"));
  v39 = isNSNumber(v35);
  v40 = v39 == 0;

  if (v40)
  {

    v35 = &__kCFBooleanFalse;
  }
  if (objc_msgSend(v35, "BOOLValue"))
  {
    v41 = copyLoggingHandle();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      v42 = *((_DWORD *)v100 + 6);
      *(_DWORD *)buf = 67109120;
      v118 = v42;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "UCRT request is in flight, rescheduling UCRT OOB for %d seconds.", buf, 8u);
    }

    v43 = *(void **)(a1 + 32);
    v44 = (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.UCRT.OOB"), "UTF8String");
    v45 = &__block_literal_global_364;
LABEL_48:
    scheduleXPCActivity(v43, v44, *((_DWORD *)v100 + 6), 1, 0x3000u, 0x1000u, v45);
    v34 = 0;
    goto LABEL_49;
  }
  if (!collectionAlreadyPerformed(*(void **)(a1 + 32)))
  {
    v51 = copyLoggingHandle();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      v52 = *((_DWORD *)v100 + 6);
      *(_DWORD *)buf = 67109120;
      v118 = v52;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Collection not performed yet. Rescheduling UCRT OOB for %d seconds.", buf, 8u);
    }

    v43 = *(void **)(a1 + 32);
    v44 = (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.UCRT.OOB"), "UTF8String");
    v45 = &__block_literal_global_366;
    goto LABEL_48;
  }
  v72 = 0;
  v46 = ucrtHealingSupported(&v72);
  v47 = v72;
  if (v47)
  {
    v36 = v47;
    v48 = copyLoggingHandle();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_FAULT))
      __ucrt_oob_activity_handler_block_invoke_3_cold_1();

    v49 = *(void **)(a1 + 32);
    v50 = (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.UCRT.OOB"), "UTF8String");
    scheduleXPCActivity(v49, v50, *((_DWORD *)v100 + 6), 1, 0x3000u, 0x1000u, &__block_literal_global_368);
    v34 = 0;
    goto LABEL_28;
  }
  if ((objc_msgSend((id)v82[5], "BOOLValue") & 1) != 0)
  {
    if ((v46 & 1) != 0)
    {
      v53 = 1;
LABEL_54:
      v54 = copyLoggingHandle();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Performing UCRT OOB.", buf, 2u);
      }

      v55 = os_transaction_create(objc_msgSend(CFSTR("com.apple.mobileactivationd.UCRT.OOB"), "UTF8String"));
      v56 = (void *)v94[5];
      v94[5] = v55;

      data_ark_set(*(void **)(a1 + 32), 0, CFSTR("UCRTIssuanceInFlight"), &__kCFBooleanTrue, 0);
      v115 = CFSTR("UseCommittedUIK");
      v57 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v53 ^ 1u);
      v116 = v57;
      v34 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v116, &v115, 1);

      v58 = *(void **)(a1 + 32);
      v59 = copy_current_process_name();
      v61[0] = _NSConcreteStackBlock;
      v61[1] = 3254779904;
      v61[2] = __ucrt_oob_activity_handler_block_invoke_369;
      v61[3] = &__block_descriptor_98_e8_32s40r48r56r64r72r80r88r_e48_v40__0__NSData_8__NSDictionary_16q24__NSError_32l;
      v63 = &v75;
      v62 = *(id *)(a1 + 32);
      v64 = &v87;
      v65 = &v81;
      v66 = &v109;
      v70 = v53;
      v71 = v46;
      v67 = &v103;
      v68 = &v99;
      v69 = &v93;
      performUCRTOOB(v58, v53, v59, v34, v61);

      goto LABEL_49;
    }
  }
  else
  {
    v53 = objc_msgSend((id)v76[5], "BOOLValue");
    if (((v53 ^ 1 | v46) & 1) != 0)
      goto LABEL_54;
  }
  v60 = copyLoggingHandle();
  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "UCRT healing not supported.", buf, 2u);
  }

  data_ark_set(*(void **)(a1 + 32), 0, CFSTR("UCRTOOBForbidden"), &__kCFBooleanTrue, 1);
  v34 = 0;
  v36 = 0;
LABEL_28:
  if (v8)
    CFRelease(v8);

  _Block_object_dispose(&v75, 8);
  _Block_object_dispose(&v81, 8);

  _Block_object_dispose(&v87, 8);
  _Block_object_dispose(&v93, 8);

  _Block_object_dispose(&v99, 8);
  _Block_object_dispose(&v103, 8);

  _Block_object_dispose(&v109, 8);
}

void sub_100031910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose((const void *)(v43 - 240), 8);
  _Block_object_dispose((const void *)(v43 - 208), 8);
  _Block_object_dispose((const void *)(v43 - 160), 8);
  _Unwind_Resume(a1);
}

void __ucrt_oob_activity_handler_block_invoke_363(id a1, DataArk *a2)
{
  ucrt_oob_activity_handler(a2, 0);
}

void __ucrt_oob_activity_handler_block_invoke_365(id a1, DataArk *a2)
{
  ucrt_oob_activity_handler(a2, 0);
}

void __ucrt_oob_activity_handler_block_invoke_367(id a1, DataArk *a2)
{
  ucrt_oob_activity_handler(a2, 0);
}

void __ucrt_oob_activity_handler_block_invoke_369(uint64_t a1, id a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  __int128 v14;
  id v15;
  id v16;
  id v17;
  dispatch_block_t v18;
  NSObject *v19;
  _QWORD block[4];
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int16 v30;

  v9 = a2;
  v10 = a3;
  v11 = a5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904;
  block[2] = __ucrt_oob_activity_handler_block_invoke_2_370;
  block[3] = &__block_descriptor_130_e8_32s40s48s56s64r72r80r88r96r104r112r_e5_v8__0l;
  v12 = *(void **)(a1 + 32);
  v25 = *(_QWORD *)(a1 + 40);
  v13 = v12;
  v14 = *(_OWORD *)(a1 + 64);
  v26 = *(_OWORD *)(a1 + 48);
  v27 = v14;
  v29 = a4;
  v21 = v13;
  v22 = v11;
  v30 = *(_WORD *)(a1 + 96);
  v23 = v9;
  v24 = v10;
  v28 = *(_OWORD *)(a1 + 80);
  v15 = v10;
  v16 = v9;
  v17 = v11;
  v18 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
  v19 = copyMobileActivationSerialQueue();
  dispatch_async(v19, v18);

}

void __ucrt_oob_activity_handler_block_invoke_2_370(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  NSNumber *v26;
  id v27;
  void *v28;
  id v29;
  NSError *v30;
  NSError *MobileActivationError;
  id v32;
  id v33;
  id v34;
  id v35;
  NSNumber *v36;
  void *v37;
  void *v38;
  NSObject *v39;
  char v40;
  void *v41;
  NSString *v42;
  NSError *v43;
  uint64_t v44;
  uint64_t v45;
  NSString *v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint64_t v55;
  void *v56;
  long double v57;
  NSObject *v58;
  int v59;
  uint64_t v60;
  void *v61;
  id v62;
  id v63;
  NSError *v64;
  id v65;
  id v66;
  uint8_t buf[4];
  NSError *v68;

  v2 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("UIKUpgradeRequired"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = isNSNumber(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
  if (!v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = &__kCFBooleanFalse;

  }
  v8 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("UCRTUpgradeRequired"));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  v11 = isNSNumber(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40));
  if (!v11)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = &__kCFBooleanFalse;

  }
  v14 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("UCRTHealingRequired"));
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v16 = *(void **)(v15 + 40);
  *(_QWORD *)(v15 + 40) = v14;

  v17 = isNSNumber(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40));
  if (!v17)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v19 = *(void **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = &__kCFBooleanFalse;

  }
  if (ucrtOOBAlreadyPerformed(*(void **)(a1 + 32))
    && (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "BOOLValue") & 1) == 0
    && (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "BOOLValue") & 1) == 0
    && !objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "BOOLValue"))
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    goto LABEL_49;
  }
  v20 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("ActivationState"));
  v21 = isNSString(v20);
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  v23 = *(void **)(v22 + 40);
  *(_QWORD *)(v22 + 40) = v21;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  if (!objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "isEqualToString:", CFSTR("Activated")))
  {
LABEL_49:
    data_ark_remove(*(void **)(a1 + 32), 0, CFSTR("UCRTUpgradeRequired"));
    data_ark_remove(*(void **)(a1 + 32), 0, CFSTR("UCRTHealingRequired"));
    data_ark_remove(*(void **)(a1 + 32), 0, CFSTR("UIKUpgradeRequired"));
    goto LABEL_59;
  }
  v26 = *(NSNumber **)(a1 + 120);
  if (v26 != (NSNumber *)200)
  {
    if (v26)
    {
      if (v26 == (NSNumber *)-1)
      {
        MobileActivationError = createMobileActivationError((uint64_t)"ucrt_oob_activity_handler_block_invoke_2", 5332, CFSTR("com.apple.MobileActivation.ErrorDomain"), -6, *(void **)(a1 + 40), CFSTR("Internal error."));
LABEL_37:
        v30 = MobileActivationError;
        goto LABEL_38;
      }
      v41 = *(void **)(a1 + 40);
      v42 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", v26);
      v43 = createMobileActivationError((uint64_t)"ucrt_oob_activity_handler_block_invoke_2", 5338, CFSTR("com.apple.MobileActivation.ServerErrorDomain"), (uint64_t)v26, v41, CFSTR("Server error: %ld (%@)"), v26, v42);

      v44 = *(_QWORD *)(a1 + 120);
      if (v44 == 403)
        v45 = -5;
      else
        v45 = -6;
      v46 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", *(_QWORD *)(a1 + 120));
      v30 = createMobileActivationError((uint64_t)"ucrt_oob_activity_handler_block_invoke_2", 5338, CFSTR("com.apple.MobileActivation.ErrorDomain"), v45, v43, CFSTR("Server error: %ld (%@)"), v44, v46);

      v47 = *(_QWORD *)(a1 + 120);
      if (v47 != 500)
      {
        if (v47 != 403)
        {
LABEL_38:
          v24 = 0;
LABEL_39:
          v25 = 0;
          v26 = 0;
          goto LABEL_40;
        }
        if (!*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 129))
        {
          data_ark_set(*(void **)(a1 + 32), 0, CFSTR("UCRTHealingRequired"), &__kCFBooleanTrue, 1);
          goto LABEL_38;
        }
        v40 = 1;
        data_ark_set(*(void **)(a1 + 32), 0, CFSTR("UCRTOOBForbidden"), &__kCFBooleanTrue, 1);
        v24 = 0;
        v25 = 0;
        v26 = 0;
LABEL_71:
        v27 = 0;
        v28 = 0;
        goto LABEL_42;
      }
      if (!*(_BYTE *)(a1 + 128))
        goto LABEL_38;
      v62 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("UCRTOOBForbiddenCount"));
      v63 = isNSNumber(v62);

      if (v63)
        v26 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (char *)objc_msgSend(v62, "unsignedLongLongValue") + 1);
      else
        v26 = (NSNumber *)&off_100271688;

      data_ark_set(*(void **)(a1 + 32), 0, CFSTR("UCRTOOBForbiddenCount"), v26, 1);
      if (-[NSNumber unsignedLongLongValue](v26, "unsignedLongLongValue") >= 0xB)
      {
        v40 = 1;
        data_ark_set(*(void **)(a1 + 32), 0, CFSTR("UCRTOOBForbidden"), &__kCFBooleanTrue, 1);
        v24 = 0;
        v25 = 0;
        goto LABEL_71;
      }
    }
    else
    {
      v30 = createMobileActivationError((uint64_t)"ucrt_oob_activity_handler_block_invoke_2", 5335, CFSTR("com.apple.MobileActivation.ErrorDomain"), -6, *(void **)(a1 + 40), CFSTR("Network communication error."));
    }
    v24 = 0;
    v25 = 0;
LABEL_40:
    v27 = 0;
    v28 = 0;
LABEL_41:
    v40 = 0;
LABEL_42:
    v29 = 0;
    goto LABEL_43;
  }
  if (!*(_QWORD *)(a1 + 48))
  {
    MobileActivationError = createMobileActivationError((uint64_t)"ucrt_oob_activity_handler_block_invoke_2", 5375, CFSTR("com.apple.MobileActivation.ErrorDomain"), -6, *(void **)(a1 + 40), CFSTR("Invalid server response."));
    goto LABEL_37;
  }
  v24 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("Date"));
  if (!v24)
  {
    v30 = createMobileActivationError((uint64_t)"ucrt_oob_activity_handler_block_invoke_2", 5381, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve server response date."));
    goto LABEL_39;
  }
  v32 = objc_alloc_init((Class)NSDateFormatter);
  v28 = v32;
  if (!v32)
  {
    v30 = createMobileActivationError((uint64_t)"ucrt_oob_activity_handler_block_invoke_2", 5387, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate date formatter."));
    v25 = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_41;
  }
  v66 = 0;
  v27 = objc_msgSend(v32, "dateFromServerString:withError:", v24, &v66);
  v33 = v66;
  if (!v27)
  {
    v30 = createMobileActivationError((uint64_t)"ucrt_oob_activity_handler_block_invoke_2", 5393, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v33, CFSTR("Failed to convert date string."));

    v25 = 0;
    v26 = 0;
    goto LABEL_41;
  }
  v34 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v29 = objc_msgSend(v34, "copyAnswer:", CFSTR("BuildVersion"));

  v35 = isNSString(v29);
  if (!v35)
  {
    v30 = createMobileActivationError((uint64_t)"ucrt_oob_activity_handler_block_invoke_2", 5399, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve OS build."));

    v25 = 0;
LABEL_74:
    v26 = 0;
    v40 = 0;
    goto LABEL_43;
  }
  v25 = objc_alloc_init((Class)NSMutableDictionary);
  if (!v25)
  {
    v30 = createMobileActivationError((uint64_t)"ucrt_oob_activity_handler_block_invoke_2", 5405, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate dictionary."));

    goto LABEL_74;
  }
  v36 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(_BYTE *)(a1 + 128) == 0);
  objc_msgSend(v25, "setObject:forKeyedSubscript:", v36, CFSTR("UseCommittedUIK"));

  objc_msgSend(v25, "setObject:forKeyedSubscript:", v27, CFSTR("ServerResponseDate"));
  v37 = *(void **)(a1 + 32);
  v38 = *(void **)(a1 + 48);
  v65 = v33;
  LOBYTE(v36) = storeUCRT(v37, v38, v25, &v65);
  v30 = (NSError *)v65;

  if ((v36 & 1) != 0)
  {
    data_ark_set(*(void **)(a1 + 32), 0, CFSTR("UCRTOOBLastPerformed"), v29, 1);
    data_ark_remove(*(void **)(a1 + 32), 0, CFSTR("UCRTOOBForbiddenCount"));
    data_ark_remove(*(void **)(a1 + 32), 0, CFSTR("UCRTOOBRetryAttempt"));
    v39 = copyLoggingHandle();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Successfully performed UCRT OOB.", buf, 2u);
    }

    v26 = 0;
    v40 = 1;
  }
  else
  {
    v64 = createMobileActivationError((uint64_t)"ucrt_oob_activity_handler_block_invoke_2", 5415, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v30, CFSTR("Failed to store UCRT."));

    v26 = 0;
    v40 = 0;
    v30 = v64;
  }
  if (!v30)
    goto LABEL_48;
LABEL_43:
  v48 = copyLoggingHandle();
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v68 = v30;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Failed to perform UCRT OOB: %{public}@", buf, 0xCu);
  }

  if (*(_QWORD *)(a1 + 120)
    && (mobileactivationErrorHasDomainAndErrorCode(v30, CFSTR("com.apple.MobileActivation.ErrorDomain"), (id)0xFFFFFFFFFFFFFFEALL) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 128))
      v50 = 31;
    else
      v50 = 15;
    writeSplunkLog(*(void **)(a1 + 32), v50, *(_QWORD *)(a1 + 120), (uint64_t)"ucrt_oob_activity_handler_block_invoke", 5435, 0, CFSTR("%@"), v49, (uint64_t)v30);
    if ((v40 & 1) != 0)
      goto LABEL_49;
  }
  else
  {
LABEL_48:
    if ((v40 & 1) != 0)
      goto LABEL_49;
  }
  v51 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("UCRTOOBRetryAttempt"));
  v52 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
  v53 = *(void **)(v52 + 40);
  *(_QWORD *)(v52 + 40) = v51;

  v54 = isNSNumber(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40));
  if (!v54)
  {
    v55 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
    v56 = *(void **)(v55 + 40);
    *(_QWORD *)(v55 + 40) = &off_100271688;

  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), "doubleValue");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = (exp2(v57) * 60.0);
  v58 = copyLoggingHandle();
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    v59 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24);
    *(_DWORD *)buf = 67109120;
    LODWORD(v68) = v59;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Rescheduling UCRT OOB for %d seconds.", buf, 8u);
  }

  scheduleXPCActivity(*(void **)(a1 + 32), (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.UCRT.OOB"), "UTF8String"), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24), 1, 0x3000u, 0x1000u, &__block_literal_global_372);
LABEL_59:
  data_ark_set(*(void **)(a1 + 32), 0, CFSTR("UCRTIssuanceInFlight"), &__kCFBooleanFalse, 0);
  v60 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8);
  v61 = *(void **)(v60 + 40);
  *(_QWORD *)(v60 + 40) = 0;

}

void __ucrt_oob_activity_handler_block_invoke_371(id a1, DataArk *a2)
{
  ucrt_oob_activity_handler(a2, 0);
}

void __copy_helper_block_e8_32s40s48s56s64r72r80r88r96r104r112r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 8);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
  _Block_object_assign((void *)(a1 + 96), *(const void **)(a2 + 96), 8);
  _Block_object_assign((void *)(a1 + 104), *(const void **)(a2 + 104), 8);
  _Block_object_assign((void *)(a1 + 112), *(const void **)(a2 + 112), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64r72r80r88r96r104r112r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 112), 8);
  _Block_object_dispose(*(const void **)(a1 + 104), 8);
  _Block_object_dispose(*(const void **)(a1 + 96), 8);
  _Block_object_dispose(*(const void **)(a1 + 88), 8);
  _Block_object_dispose(*(const void **)(a1 + 80), 8);
  _Block_object_dispose(*(const void **)(a1 + 72), 8);
  _Block_object_dispose(*(const void **)(a1 + 64), 8);

}

void __copy_helper_block_e8_32s40r48r56r64r72r80r88r(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = *(id *)(a2 + 32);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 8);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 8);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
}

void __destroy_helper_block_e8_32s40r48r56r64r72r80r88r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 88), 8);
  _Block_object_dispose(*(const void **)(a1 + 80), 8);
  _Block_object_dispose(*(const void **)(a1 + 72), 8);
  _Block_object_dispose(*(const void **)(a1 + 64), 8);
  _Block_object_dispose(*(const void **)(a1 + 56), 8);
  _Block_object_dispose(*(const void **)(a1 + 48), 8);
  _Block_object_dispose(*(const void **)(a1 + 40), 8);

}

id copy_splunk_log_array(uint64_t a1, _QWORD *a2)
{
  id v3;
  id v4;
  id v5;
  NSError *v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  id v10;
  id v11;
  NSError *v12;
  NSObject *v13;
  NSFileManager *v14;
  unsigned __int8 v15;
  NSObject *v16;
  NSError *MobileActivationError;
  void *v18;
  id v19;
  id v20;
  id v22;
  _QWORD *v23;
  id obj;
  id v25;
  id v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  NSError *v35;
  _BYTE v36[128];

  v25 = objc_alloc_init((Class)NSMutableArray);
  if (!v25)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"copy_splunk_log_array", 6034, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate array."));
    goto LABEL_22;
  }
  v3 = copySortedSplunkFileList();
  if (!v3)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"copy_splunk_log_array", 6040, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query splunk file list."));
LABEL_22:
    v6 = MobileActivationError;
    v18 = 0;
    v19 = 0;
    if (!a2)
      goto LABEL_28;
    goto LABEL_26;
  }
  v22 = v3;
  v23 = a2;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  obj = objc_msgSend(v3, "reverseObjectEnumerator");
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v29 != v7)
          objc_enumerationMutation(obj);
        v9 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
        v10 = objc_alloc((Class)NSData);
        v27 = v6;
        v11 = objc_msgSend(v10, "initWithContentsOfFile:options:error:", v9, 0, &v27);
        v12 = (NSError *)v27;

        if (v11)
        {
          objc_msgSend(v25, "addObject:", v11);
        }
        else
        {
          v13 = copyLoggingHandle();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 138412546;
            v33 = v9;
            v34 = 2112;
            v35 = v12;
            _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Failed to load %@: %@", buf, 0x16u);
          }

        }
        v14 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
        v26 = v12;
        v15 = -[NSFileManager removeItemAtPath:error:](v14, "removeItemAtPath:error:", v9, &v26);
        v6 = (NSError *)v26;

        if ((v15 & 1) == 0)
        {
          v16 = copyLoggingHandle();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 138412546;
            v33 = v9;
            v34 = 2112;
            v35 = v6;
            _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Failed to delete %@: %@", buf, 0x16u);
          }

        }
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }

  v19 = v25;
  v18 = v22;
  a2 = v23;
  if (v23)
  {
LABEL_26:
    if (!v19)
      *a2 = objc_retainAutorelease(v6);
  }
LABEL_28:
  v20 = v19;

  return v20;
}

uint64_t perform_sydro_data_migration_tasks(void *a1, NSError **a2)
{
  void *v3;
  __SecKey *v4;
  __SecKey *v5;
  CFDataRef v6;
  CFDataRef v7;
  void *v8;
  __CFString *v9;
  id v10;
  void *v11;
  void *v12;
  NSDictionary *v13;
  id v14;
  void **v15;
  void *v16;
  NSFileManager *v17;
  NSDictionary *v18;
  unsigned __int8 v19;
  id v20;
  id v21;
  void *v22;
  NSError *v23;
  CFDataRef v24;
  CFDataRef v25;
  char *v26;
  NSError *v27;
  NSError *v28;
  char *v29;
  id v30;
  char v31;
  id v32;
  char v33;
  NSError *v34;
  id v35;
  id v36;
  __SecAccessControl *v37;
  id v38;
  id v39;
  NSError *MobileActivationError;
  id v41;
  const __CFData *v42;
  NSError *v43;
  SecCertificateRef v44;
  SecCertificateRef v45;
  char *v46;
  NSError *v47;
  int v48;
  char v49;
  NSError *v50;
  NSError *v51;
  __SecKey *v52;
  NSError *v53;
  void *v54;
  void *v55;
  void *v56;
  const __CFData *v57;
  const __CFData *v58;
  __SecKey *v59;
  void *v60;
  NSDictionary *v61;
  __CFString *v62;
  __SecKey *v63;
  NSError *v65;
  void *v66;
  NSError *v67;
  NSError *v68;
  NSError *v69;
  NSDictionary *v70;
  NSError *v71;
  char v72;
  NSError *v73;
  char v74;
  id v75;
  NSError *v76;
  id v77;
  void *v78;
  void *v79;
  id v80;
  id v81;
  void **v82;
  id v83;
  NSDictionary *v84;
  unsigned __int8 v85;
  NSError *v86;
  id v87;
  id v88;
  uint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  unsigned __int8 v99;
  NSError *v100;
  id v101;
  unsigned int v102;
  id v103;
  void *v104;
  BOOL v105;
  id v106;
  NSError *v107;
  unsigned __int8 v108;
  NSError *v109;
  id v110;
  void *v111;
  unsigned __int8 v112;
  id v113;
  void *v114;
  id v115;
  id v116;
  void *v117;
  unsigned __int8 v118;
  void *v119;
  id v120;
  SecAccessControlRef v121;
  SecKeyRef v122;
  SecKeyRef v123;
  char v124;
  id v125;
  char v126;
  id v127;
  id v128;
  void *v129;
  SecCertificateRef v130;
  NSError *v131;
  id v132;
  unsigned int v133;
  NSString *v134;
  NSString *v135;
  void *v136;
  NSString *v137;
  NSString *v138;
  __CFString *v139;
  NSString *v140;
  uint64_t v141;
  NSString *v142;
  NSString *v143;
  NSString *v144;
  NSString *v145;
  id v146;
  id v147;
  NSError *v148;
  const __CFData *v149;
  SecCertificateRef v150;
  const __CFData *v151;
  __SecCertificate *v152;
  char v153;
  NSError *v154;
  id v155;
  SecAccessControlRef v156;
  NSDictionary *v157;
  __SecKey *v158;
  __SecKey *v159;
  CFDataRef v160;
  CFDataRef v161;
  __SecKey *v162;
  CFDataRef v163;
  NSDictionary *v164;
  char v165;
  NSError *v166;
  char v167;
  NSFileManager *v168;
  NSFileManager *v169;
  CFDataRef v170;
  NSError *v171;
  id v172;
  id v173;
  NSError *v174;
  id v175;
  id v176;
  void *v177;
  id v178;
  NSDictionary *v179;
  unsigned __int8 v180;
  id v181;
  id v182;
  char v183;
  id v184;
  char v185;
  id v186;
  NSError *v187;
  void *v188;
  NSError *v189;
  void *v190;
  NSError *v191;
  void *v192;
  NSError *v193;
  NSError *v194;
  id v195;
  CFDataRef v196;
  CFDataRef v197;
  NSError *v198;
  NSObject *v199;
  id v200;
  id v201;
  void *v202;
  unsigned __int8 v203;
  void *v204;
  id v205;
  NSDictionary *v206;
  char v207;
  NSError *v208;
  NSObject *v209;
  NSFileManager *v210;
  id v211;
  void *v212;
  unsigned __int8 v213;
  id v214;
  void *v215;
  NSDictionary *v216;
  char v217;
  NSError *v218;
  NSObject *v219;
  NSFileManager *v220;
  __SecCertificate *v221;
  id v222;
  uint64_t v223;
  uint64_t v224;
  CFTypeRef protection;
  const __CFData *v226;
  const __CFData *v227;
  id v228;
  CFDataRef v229;
  id v230;
  id v231;
  __SecKey *v232;
  void *v233;
  void *v234;
  void *v235;
  void *v236;
  __SecKey *v237;
  NSError **v238;
  CFDataRef v239;
  const __CFData *v240;
  NSDictionary *v241;
  id v242;
  NSDictionary *v243;
  id v244;
  id v245;
  unsigned int v246;
  __CFString *v247;
  id v248;
  NSString *v249;
  id v250;
  id v251;
  id v252;
  id v253;
  char *v254;
  id v255;
  id v256;
  __SecCertificate *v257;
  NSString *v258;
  __SecKey *v259;
  __SecCertificate *v260;
  NSString *v261;
  __SecKey *v262;
  id v263;
  NSDictionary *v264;
  id v265;
  id v266;
  NSString *v267;
  NSString *v268;
  NSDictionary *v269;
  id v270;
  id v271;
  id v272;
  __SecCertificate *v273;
  CFTypeRef v274;
  id v275;
  id v276;
  id v277;
  id v278;
  id v279;
  id v280;
  id v281;
  id v282;
  id v283;
  id v284;
  id v285;
  NSError *obj;
  id obja;
  NSError *objb;
  id objc;
  SecAccessControlRef cf;
  void *cfa;
  id v292;
  id v293;
  id v294;
  id v295;
  id v296;
  id v297;
  id v298;
  id v299;
  id v300;
  id v301;
  id v302;
  id v303;
  id v304;
  id v305;
  id v306;
  id v307;
  id v308;
  id v309;
  id v310;
  id v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  id v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  id v321;
  id v322;
  id v323;
  id v324;
  id v325;
  id v326;
  id v327;
  id v328;
  int v329;
  CFTypeRef v330;
  SecCertificateRef certificate;
  id v332;
  id v333;
  id v334;
  _QWORD v335[2];
  _QWORD v336[2];
  const __CFString *v337;
  void *v338;
  _QWORD v339[4];
  _QWORD v340[4];
  NSFileAttributeKey v341;
  _UNKNOWN **v342;
  _QWORD v343[4];
  _QWORD v344[4];
  _BYTE v345[128];
  NSFileAttributeKey v346;
  _UNKNOWN **v347;
  _BYTE v348[128];
  _QWORD v349[2];
  _QWORD v350[2];
  NSFileAttributeKey v351;
  _UNKNOWN **v352;

  v270 = a1;
  certificate = 0;
  v330 = 0;
  v329 = -1;
  if ((preSydroDataMigrationCompleted(v270) & 1) != 0)
  {
    v279 = 0;
    v284 = 0;
    cf = 0;
    v292 = 0;
    v3 = 0;
    v4 = 0;
    v259 = 0;
    v260 = 0;
    v5 = 0;
    v261 = 0;
    v262 = 0;
    v257 = 0;
    v258 = 0;
    v272 = 0;
    v273 = 0;
    v267 = 0;
    v268 = 0;
    v248 = 0;
    v249 = 0;
    v264 = 0;
    v265 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v244 = 0;
    v245 = 0;
    v254 = 0;
    v255 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v275 = 0;
    v269 = 0;
    v250 = 0;
    v252 = 0;
    v12 = 0;
    v271 = 0;
    v256 = 0;
    obj = 0;
    v263 = 0;
    v13 = 0;
    v246 = 1;
    goto LABEL_35;
  }
  v14 = copy_ucrt_path();
  v255 = v14;
  v238 = a2;
  if (!v14)
  {
    v34 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1104, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy UCRT path."));
LABEL_17:
    v241 = 0;
    v263 = 0;
    v264 = 0;
    v256 = 0;
    v245 = 0;
    v30 = 0;
    v254 = 0;
    goto LABEL_18;
  }
  v15 = (void **)&CCDigest_ptr;
  v16 = v14;
  v17 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v351 = NSFilePosixPermissions;
  v352 = &off_1002716A0;
  v18 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v352, &v351, 1);
  v328 = 0;
  v19 = -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:](v17, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v16, 1, v18, &v328);
  v20 = v328;

  if ((v19 & 1) == 0)
  {
    v34 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1109, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v20, CFSTR("Failed to create %@."), v16);

    v241 = 0;
    v244 = 0;
    v263 = 0;
    v264 = 0;
    v256 = 0;
    v245 = 0;
    v30 = 0;
    v254 = 0;
    v35 = 0;
    v269 = 0;
    v248 = 0;
    v36 = 0;
    v5 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v284 = 0;
LABEL_30:
    v3 = 0;
    goto LABEL_31;
  }
  v21 = objc_msgSend(v16, "stringByAppendingPathComponent:", CFSTR("ucrt.pem"));
  if (!v21)
  {
    v34 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1115, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create UCRT file path."));

    goto LABEL_17;
  }
  v22 = v21;
  v327 = v20;
  load_certificate((CFTypeRef *)&certificate, CFSTR("lockdown-identities"), CFSTR("com.apple.mobileactivation.ucrt"), &v329, &v327);
  v23 = (NSError *)v327;

  if (v329 != -25300 && v329)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1121, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v23, CFSTR("Failed to query keychain."));
    goto LABEL_27;
  }
  if (certificate)
  {
    maLog((uint64_t)"perform_sydro_data_migration_tasks", 0, CFSTR("Migrating UCRT from the keychain."));
    v24 = SecCertificateCopyData(certificate);
    if (v24)
    {
      v25 = v24;
      v326 = v23;
      v26 = lockcrypto_create_pem(v24, "CERTIFICATE", &v326);
      v27 = (NSError *)v326;
      v28 = v23;
      v29 = v26;

      if (v26)
      {
        v325 = v27;
        v30 = v22;
        v254 = v29;
        v31 = store_data(v22, v29, &v325);
        v32 = v325;

        if ((v31 & 1) != 0)
        {
          v324 = v32;
          v33 = delete_certificate(CFSTR("lockdown-identities"), CFSTR("com.apple.mobileactivation.ucrt"), (NSError **)&v324);
          v23 = (NSError *)v324;

          if ((v33 & 1) != 0)
          {
            maLog((uint64_t)"perform_sydro_data_migration_tasks", 0, CFSTR("Successfully migrated UCRT from the keychain."));
            goto LABEL_21;
          }
          v34 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1146, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v23, CFSTR("Failed to delete UCRT."));

          v241 = 0;
          v263 = 0;
          v264 = 0;
          v256 = 0;
          v245 = 0;
          goto LABEL_29;
        }
        v65 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1141, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v32, CFSTR("Failed to store UCRT at %@."), v22);
        v66 = v32;
        v34 = v65;

        v241 = 0;
        v263 = 0;
        v264 = 0;
        v256 = 0;
        v245 = 0;
LABEL_18:
        v35 = 0;
        v269 = 0;
        v248 = 0;
        v36 = 0;
        v244 = 0;
        v5 = 0;
        v37 = 0;
        v3 = 0;
        v38 = 0;
        v39 = 0;
        v284 = 0;
LABEL_31:
        v275 = v36;
        v279 = v39;
        cf = v37;
        v292 = v38;
        v271 = v30;
        if (v238)
        {
          v52 = v5;
          v53 = objc_retainAutorelease(v34);
          v5 = v52;
          v246 = 0;
          v4 = 0;
          v259 = 0;
          v260 = 0;
          v261 = 0;
          v262 = 0;
          v257 = 0;
          v258 = 0;
          v272 = 0;
          v273 = 0;
          v267 = 0;
          v268 = 0;
          v249 = 0;
          v250 = 0;
          v265 = 0;
          v6 = 0;
          v7 = 0;
          v8 = 0;
          v9 = 0;
          v10 = 0;
          v11 = 0;
          v252 = 0;
          obj = v53;
          *v238 = v53;
        }
        else
        {
          obj = v34;
          v246 = 0;
          v4 = 0;
          v259 = 0;
          v260 = 0;
          v261 = 0;
          v262 = 0;
          v257 = 0;
          v258 = 0;
          v272 = 0;
          v273 = 0;
          v267 = 0;
          v268 = 0;
          v249 = 0;
          v250 = 0;
          v265 = 0;
          v6 = 0;
          v7 = 0;
          v8 = 0;
          v9 = 0;
          v10 = 0;
          v11 = 0;
          v252 = 0;
        }
        v12 = v35;
        v13 = v241;
        goto LABEL_35;
      }
      v34 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1136, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v27, CFSTR("Failed to create UCRT PEM data."));
      v51 = v27;
LABEL_28:

      v241 = 0;
      v263 = 0;
      v264 = 0;
      v256 = 0;
      v245 = 0;
      v254 = 0;
LABEL_29:
      v35 = 0;
      v269 = 0;
      v248 = 0;
      v36 = 0;
      v244 = 0;
      v5 = 0;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v284 = 0;
      v30 = v22;
      goto LABEL_30;
    }
    MobileActivationError = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1130, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy UCRT certificate data."));
LABEL_27:
    v34 = MobileActivationError;
    v51 = v23;
    goto LABEL_28;
  }
  v254 = 0;
LABEL_21:
  v271 = v22;
  v41 = objc_alloc((Class)NSData);
  v334 = 0;
  v42 = (const __CFData *)objc_msgSend(v41, "initWithContentsOfFile:options:error:", v271, 0, &v334);
  v43 = (NSError *)v334;
  if (v42)
  {
    v44 = SecCertificateCreateWithData(kCFAllocatorDefault, v42);
    if (v44)
    {
      v45 = v44;
      v333 = v43;
      v46 = lockcrypto_create_pem(v42, "CERTIFICATE", &v333);
      v47 = (NSError *)v333;

      if (v46)
      {
        v332 = v47;
        v48 = store_data(v271, v46, &v332);
        v43 = (NSError *)v332;

        if (v48)
        {
          CFRelease(v45);
          v49 = 1;
          v50 = v23;
          goto LABEL_64;
        }
        v67 = createMobileActivationError((uint64_t)"convert_ucrt_from_der_to_pem", 210, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v43, CFSTR("Failed to store UCRT at %@."), v271);
        v47 = v43;
      }
      else
      {
        v67 = createMobileActivationError((uint64_t)"convert_ucrt_from_der_to_pem", 205, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v47, CFSTR("Failed to create UCRT PEM data."));
      }

      CFRelease(v45);
      v50 = objc_retainAutorelease(v67);
      v49 = 0;
      v43 = v50;
    }
    else
    {
      v49 = 1;
      v50 = v23;
      v46 = (char *)v42;
    }
  }
  else
  {
    v46 = 0;
    v49 = 1;
    v50 = v23;
  }
LABEL_64:

  v68 = v50;
  if ((v49 & 1) == 0)
  {
    v34 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1156, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v68, CFSTR("Failed to migrate UCRT from DER to PEM."));

    v241 = 0;
    v244 = 0;
    v263 = 0;
    v264 = 0;
    v256 = 0;
    v245 = 0;
    v35 = 0;
    v269 = 0;
    v248 = 0;
    v36 = 0;
    v5 = 0;
    v37 = 0;
    v3 = 0;
    v38 = 0;
    v39 = 0;
    v284 = 0;
    v30 = v271;
    goto LABEL_31;
  }
  v323 = v68;
  v253 = copy_keychain_data(CFSTR("lockdown-identities"), CFSTR("com.apple.mobileactivationd.dcrt"), &v329, &v323);
  v69 = (NSError *)v323;

  if (v329 != -25300 && v329)
  {
    v34 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1164, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v69, CFSTR("Failed to query keychain."));

    v241 = 0;
    v263 = 0;
    v264 = 0;
    v256 = 0;
    v245 = 0;
    v269 = 0;
    goto LABEL_123;
  }
  if (v253)
  {
    maLog((uint64_t)"perform_sydro_data_migration_tasks", 0, CFSTR("Migrating DCRT from the keychain."));
    v349[0] = CFSTR("UseCommittedDAK");
    v349[1] = CFSTR("SkipCertificateValidation");
    v350[0] = &__kCFBooleanTrue;
    v350[1] = &__kCFBooleanTrue;
    v70 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v350, v349, 2);
    v71 = v69;
    v322 = v69;
    v72 = storeDCRT(v270, v253, v70, &v322);
    v73 = (NSError *)v322;

    if ((v72 & 1) != 0)
    {
      v321 = v73;
      v74 = delete_keychain_data(CFSTR("lockdown-identities"), CFSTR("com.apple.mobileactivationd.dcrt"), (NSError **)&v321);
      v69 = (NSError *)v321;

      if ((v74 & 1) != 0)
      {
        maLog((uint64_t)"perform_sydro_data_migration_tasks", 0, CFSTR("Successfully migrated DCRT from the keychain."));
        goto LABEL_74;
      }
      v269 = v70;
      v34 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1187, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v69, CFSTR("Failed to delete DCRT."));
      v100 = v69;
    }
    else
    {
      v269 = v70;
      v34 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1182, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v73, CFSTR("Failed to store DCRT."));
      v100 = v73;
    }

    v241 = 0;
    v263 = 0;
    v264 = 0;
    v256 = 0;
    v245 = 0;
LABEL_123:
    v248 = 0;
    v36 = 0;
    v244 = 0;
    v5 = 0;
    v37 = 0;
    v3 = 0;
    v38 = 0;
    v39 = 0;
    v284 = 0;
    v30 = v271;
    goto LABEL_124;
  }
  v70 = 0;
LABEL_74:
  v269 = v70;
  v319 = 0u;
  v320 = 0u;
  v317 = 0u;
  v318 = 0u;
  v276 = objc_msgSend(&off_100271C08, "countByEnumeratingWithState:objects:count:", &v317, v348, 16);
  v3 = 0;
  if (v276)
  {
    v292 = 0;
    v39 = 0;
    v75 = 0;
    v274 = *(CFTypeRef *)v318;
    v76 = v69;
    do
    {
      v77 = 0;
      v78 = v75;
      do
      {
        if (*(CFTypeRef *)v318 != v274)
          objc_enumerationMutation(&off_100271C08);
        v79 = *(void **)(*((_QWORD *)&v317 + 1) + 8 * (_QWORD)v77);
        v80 = objc_msgSend(v15[72], "defaultManager");
        cfa = v79;
        v75 = objc_msgSend(v80, "contentsOfDirectoryAtPath:error:", v79, 0);

        if (objc_msgSend(v75, "count"))
        {
          v280 = v77;
          v81 = copy_activation_records_directory_path();

          v82 = v15;
          v83 = objc_msgSend(v15[72], "defaultManager");
          v346 = NSFilePosixPermissions;
          v347 = &off_1002716B8;
          v84 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v347, &v346, 1);
          v316 = v76;
          v85 = objc_msgSend(v83, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v81, 1, v84, &v316);
          v86 = (NSError *)v316;

          if ((v85 & 1) == 0)
            maLog((uint64_t)"perform_sydro_data_migration_tasks", 0, CFSTR("Could not create path %@: %@"), v81, v86);
          v314 = 0u;
          v315 = 0u;
          v312 = 0u;
          v313 = 0u;
          v285 = v75;
          obja = v75;
          v87 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v312, v345, 16);
          if (v87)
          {
            v88 = v87;
            v89 = *(_QWORD *)v313;
            do
            {
              v90 = 0;
              v91 = v292;
              v92 = v39;
              do
              {
                if (*(_QWORD *)v313 != v89)
                  objc_enumerationMutation(obja);
                v93 = *(_QWORD *)(*((_QWORD *)&v312 + 1) + 8 * (_QWORD)v90);
                v94 = objc_msgSend(cfa, "stringByAppendingPathComponent:", v93);

                v95 = objc_msgSend(v81, "stringByAppendingPathComponent:", v93);
                maLog((uint64_t)"perform_sydro_data_migration_tasks", 0, CFSTR("Migrating %@ to %@"), v94, v95);
                v96 = objc_msgSend(v82[72], "defaultManager");
                v311 = v86;
                v292 = v95;
                LOBYTE(v95) = objc_msgSend(v96, "copyItemAtPath:toPath:error:", v94, v95, &v311);
                v97 = v311;

                if ((v95 & 1) == 0)
                  maLog((uint64_t)"perform_sydro_data_migration_tasks", 0, CFSTR("Failed to copy %@: %@"), v94, v97);
                v98 = objc_msgSend(v82[72], "defaultManager");
                v310 = v97;
                v99 = objc_msgSend(v98, "removeItemAtPath:error:", v94, &v310);
                v86 = (NSError *)v310;

                if ((v99 & 1) == 0)
                  maLog((uint64_t)"perform_sydro_data_migration_tasks", 0, CFSTR("Failed to delete %@: %@"), v94, v86);
                v90 = (char *)v90 + 1;
                v91 = v292;
                v92 = v94;
              }
              while (v88 != v90);
              v39 = v94;
              v88 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v312, v345, 16);
            }
            while (v88);
          }

          v76 = v86;
          v3 = v81;
          v15 = v82;
          v77 = v280;
          v75 = v285;
        }
        v77 = (char *)v77 + 1;
        v78 = v75;
      }
      while (v77 != v276);
      v276 = objc_msgSend(&off_100271C08, "countByEnumeratingWithState:objects:count:", &v317, v348, 16);
    }
    while (v276);
  }
  else
  {
    v292 = 0;
    v39 = 0;
    v75 = 0;
    v76 = v69;
  }
  v101 = objc_msgSend(v15[72], "defaultManager");
  v102 = objc_msgSend(v101, "fileExistsAtPath:", CFSTR("/private/var/mobile/Library/mad/data_ark.plist"));

  if (v102)
  {
    v241 = +[NSDictionary dictionaryWithContentsOfFile:](NSDictionary, "dictionaryWithContentsOfFile:", CFSTR("/private/var/mobile/Library/mad/data_ark.plist"));
    v263 = -[NSDictionary objectForKeyedSubscript:](v241, "objectForKeyedSubscript:", CFSTR("-LastActivated"));
    v103 = isNSString(v263);
    if (v103)
    {
      v104 = v103;
      v105 = data_ark_exists(v270, 0, CFSTR("LastActivated"));

      if (!v105)
        data_ark_set(v270, 0, CFSTR("LastActivated"), v263, 1);
    }
    v106 = objc_msgSend(v15[72], "defaultManager");
    v309 = v76;
    v107 = v76;
    v108 = objc_msgSend(v106, "removeItemAtPath:error:", CFSTR("/private/var/mobile/Library/mad/data_ark.plist"), &v309);
    v109 = (NSError *)v309;

    if ((v108 & 1) == 0)
      maLog((uint64_t)"perform_sydro_data_migration_tasks", 0, CFSTR("Failed to delete %@: %@"), CFSTR("/private/var/mobile/Library/mad/data_ark.plist"), v109);
    v76 = v109;
  }
  else
  {
    v241 = 0;
    v263 = 0;
  }
  v36 = data_ark_copy(v270, 0, CFSTR("UIKLegacyMigrationCompleted"));
  v110 = isNSNumber(v36);
  v284 = v75;
  if (!v110
    || (v111 = v110, v112 = objc_msgSend(v36, "BOOLValue"), v111, (v112 & 1) == 0))
  {
    v308 = v76;
    v113 = copy_keychain_data(CFSTR("lockdown-identities"), CFSTR("com.apple.mobileactivation.uik"), &v329, &v308);
    v120 = v308;

    if (v329 != -25300 && v329)
    {
      v256 = v113;
      v171 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1250, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v120, CFSTR("Failed to copy UIK from keychain."));
    }
    else
    {
      if (!v113)
      {
        cf = 0;
        v264 = 0;
        goto LABEL_150;
      }
      maLog((uint64_t)"perform_sydro_data_migration_tasks", 0, CFSTR("Converting legacy UIK."));
      v121 = SecAccessControlCreateWithFlags(0, kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate, 0x40000000uLL, (CFErrorRef *)&v330);
      v256 = v113;
      if (v121)
      {
        v343[0] = kSecAttrIsPermanent;
        v343[1] = kSecAttrTokenID;
        v344[0] = &__kCFBooleanFalse;
        v344[1] = kSecAttrTokenIDAppleKeyStore;
        v343[2] = kSecAttrTokenOID;
        v343[3] = kSecAttrAccessControl;
        v344[2] = v113;
        cf = v121;
        v344[3] = v121;
        v264 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v344, v343, 4);
        v122 = SecKeyCreateWithData((CFDataRef)+[NSData data](NSData, "data"), (CFDictionaryRef)v264, (CFErrorRef *)&v330);
        if (v122)
        {
          v281 = v39;
          v233 = v3;
          v307 = v120;
          v123 = v122;
          v124 = store_keychain_item((uint64_t)v122, CFSTR("lockdown-identities"), CFSTR("com.apple.mobileactivationd.uik.v2"), 0, (NSError **)&v307);
          v125 = v307;

          if ((v124 & 1) != 0)
          {
            v306 = v125;
            v126 = delete_keychain_data(CFSTR("lockdown-identities"), CFSTR("com.apple.mobileactivation.uik"), (NSError **)&v306);
            v120 = v306;

            if ((v126 & 1) != 0)
            {
              maLog((uint64_t)"perform_sydro_data_migration_tasks", 0, CFSTR("Successfully converted legacy UIK."));
              CFRelease(v123);
              v39 = v281;
              v3 = v233;
              v113 = v256;
LABEL_150:
              v305 = v120;
              v237 = (__SecKey *)copy_keychain_item(CFSTR("lockdown-identities"), CFSTR("com.apple.mobileactivationd.uik.v2"), 0, &v329, &v305);
              v76 = (NSError *)v305;

              if (v329 != -25300 && v329)
              {
                v256 = v113;
                v187 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1292, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v76, CFSTR("Failed to copy UIK from keychain."));

                v244 = 0;
                v245 = 0;
                v248 = 0;
                v34 = v187;
LABEL_171:
                v30 = v271;
                v38 = v292;
LABEL_172:
                v35 = v253;
                v37 = cf;
                v5 = v237;
                goto LABEL_31;
              }
              if (v237)
              {
                v304 = v76;
                v172 = security_create_external_representation(v237, 0, (NSError **)&v304);
                v173 = v304;
                v174 = v76;
                v175 = v173;

                if (!v172)
                {
                  v189 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1299, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v175, CFSTR("Failed to encode UIK as data."));
                  v190 = v175;
                  v34 = v189;

                  v256 = 0;
                  v245 = 0;
                  v248 = 0;
                  goto LABEL_170;
                }
                v176 = copy_uik_path();
                if (!v176)
                {
                  v191 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1305, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve UIK path."));
                  v192 = v175;
                  v34 = v191;

                  v244 = 0;
                  v245 = 0;
                  v248 = 0;
                  v256 = v172;
                  goto LABEL_171;
                }
                v177 = v176;
                v278 = v36;
                v283 = v39;
                v235 = v3;
                v178 = objc_msgSend(v15[72], "defaultManager");
                v341 = NSFilePosixPermissions;
                v342 = &off_1002716B8;
                v179 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v342, &v341, 1);
                v303 = v175;
                v180 = objc_msgSend(v178, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v177, 1, v179, &v303);
                v181 = v303;

                if ((v180 & 1) != 0)
                {
                  v182 = objc_msgSend(v177, "stringByAppendingPathComponent:", CFSTR("uik.pem"));

                  v302 = v181;
                  objc = v182;
                  v183 = store_data(v182, v172, &v302);
                  v184 = v302;

                  if ((v183 & 1) != 0)
                  {
                    v301 = v184;
                    v185 = delete_keychain_item(CFSTR("lockdown-identities"), CFSTR("com.apple.mobileactivationd.uik.v2"), (NSError **)&v301);
                    v76 = (NSError *)v301;

                    if ((v185 & 1) != 0)
                    {
                      v113 = v172;
                      v36 = v278;
                      v39 = v283;
                      v3 = v235;
                      v15 = (void **)&CCDigest_ptr;
                      v186 = objc;
LABEL_167:
                      v114 = v270;
                      data_ark_set(v270, 0, CFSTR("UIKLegacyMigrationCompleted"), &__kCFBooleanTrue, 1);
                      v245 = v186;
                      goto LABEL_110;
                    }
                    v193 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1322, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v76, CFSTR("Failed to delete UIK from keychain."));

                    v248 = 0;
                    v244 = 0;
                    v34 = v193;
                  }
                  else
                  {
                    v34 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1317, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v184, CFSTR("Failed to store UIK."));

                    v248 = 0;
                    v244 = 0;
                  }
                  v256 = v172;
                  v245 = objc;
                }
                else
                {
                  v245 = v177;
                  v34 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1310, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v181, CFSTR("Failed to create %@."), v177);

                  v248 = 0;
                  v244 = 0;
                  v256 = v172;
                }
                v30 = v271;
                v36 = v278;
                v39 = v283;
                v38 = v292;
                v3 = v235;
                goto LABEL_172;
              }
              v186 = 0;
              goto LABEL_167;
            }
            v34 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1280, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v120, CFSTR("Failed to delete UIK from keychain."));
            v188 = v120;
          }
          else
          {
            v34 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1275, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v125, CFSTR("Failed to store UIK."));
            v188 = v125;
          }

          v244 = 0;
          v245 = 0;
          v248 = 0;
          v30 = v271;
          v39 = v281;
          v37 = cf;
          v38 = v292;
          v3 = v233;
          v35 = v253;
          v5 = v123;
          goto LABEL_31;
        }
        v34 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1270, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, (void *)v330, CFSTR("Failed to convert legacy UIK."));

        v244 = 0;
        v245 = 0;
        v248 = 0;
        v5 = 0;
        v30 = v271;
        v37 = cf;
        v38 = v292;
        goto LABEL_124;
      }
      v171 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1259, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, (void *)v330, CFSTR("Failed to create access control."));
    }
    v34 = v171;

    v264 = 0;
    v244 = 0;
    v245 = 0;
    v248 = 0;
    v5 = 0;
    v37 = 0;
    v30 = v271;
    v38 = v292;
LABEL_124:
    v35 = v253;
    goto LABEL_31;
  }
  v113 = 0;
  v264 = 0;
  v245 = 0;
  v237 = 0;
  cf = 0;
  v114 = v270;
LABEL_110:
  v115 = data_ark_copy(v114, 0, CFSTR("MFIFactoryCertificatesMigrationCompleted"));
  v116 = isNSNumber(v115);
  v256 = v113;
  v248 = v115;
  if (v116)
  {
    v117 = v116;
    v118 = objc_msgSend(v115, "BOOLValue");

    if ((v118 & 1) != 0)
    {
      obj = v76;
      v257 = 0;
      v258 = 0;
      v9 = 0;
      v260 = 0;
      v261 = 0;
      v265 = 0;
      v267 = 0;
      v272 = 0;
      v273 = 0;
      v244 = 0;
      v249 = 0;
      v251 = 0;
      v229 = 0;
      v6 = 0;
      v268 = 0;
      v262 = 0;
      v259 = 0;
      v232 = 0;
      v119 = v270;
      goto LABEL_214;
    }
  }

  v300 = 0;
  v127 = copyRootCertificate(3, 0, (NSError **)&v300);
  v128 = v300;
  v129 = v128;
  if (!v127)
  {
    v34 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1341, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v128, CFSTR("Failed to load BAA root CA certificate."));

LABEL_170:
    v244 = 0;
    goto LABEL_171;
  }
  v299 = v128;
  v130 = lockcrypto_cert_from_pem_data(v127, (NSError **)&v299);
  v131 = (NSError *)v299;

  v244 = v127;
  if (!v130)
  {
    v34 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1347, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v131, CFSTR("Failed to create certificate from pem data."));

    goto LABEL_171;
  }
  v257 = v130;
  v132 = objc_msgSend(v15[72], "defaultManager");
  v133 = objc_msgSend(v132, "fileExistsAtPath:", CFSTR("/private/var/hardware/factory/mfi"));

  if (!v133)
  {
    v258 = 0;
    v259 = 0;
    v9 = 0;
    v260 = 0;
    v261 = 0;
    v265 = 0;
    v267 = 0;
    v272 = 0;
    v273 = 0;
    v249 = 0;
    v251 = 0;
    v229 = 0;
    v239 = 0;
    v268 = 0;
    v262 = 0;
    v232 = 0;
    v119 = v270;
    goto LABEL_213;
  }
  objb = v131;
  v277 = v36;
  v282 = v39;
  v234 = v3;
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v226 = 0;
  v227 = 0;
  v230 = 0;
  v272 = 0;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v141 = 1;
  protection = (CFTypeRef)kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
  v224 = kSecAttrTokenIDAppleKeyStore;
  v223 = kSecAttrTokenOID;
  while (1)
  {
    v142 = v137;
    v247 = CFSTR("com.apple.mfiaccessory");

    v143 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%u"), CFSTR("mfi-baa"), v141);
    v261 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-rk-scrt"), v143);

    v258 = v143;
    v267 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-combined-scrt"), v143);

    v144 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("/private/var/hardware/factory/mfi/mfi%u-cert.der"), v141);
    v145 = v135;
    v135 = v144;

    v268 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("/private/var/hardware/factory/mfi/mfi%u-key.der"), v141);
    v146 = objc_msgSend(objc_alloc((Class)NSData), "initWithContentsOfFile:", v135);

    v272 = v146;
    if (!v146)
    {
      v249 = v135;
      v194 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1364, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to load %@."), v135);
      v273 = 0;
      v259 = 0;
      v260 = 0;
      v262 = 0;
      v232 = 0;
      v3 = v234;
      v154 = objb;
LABEL_188:
      v195 = v230;
LABEL_196:
      v196 = v226;
      v197 = v227;
      goto LABEL_206;
    }
    v298 = objb;
    v147 = parseDERCertificatesFromChain(v146, &v298);
    v148 = (NSError *)v298;

    if (!v147)
    {
      v249 = v135;
      v194 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1370, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v148, CFSTR("Failed to parse certificate chain from data."));
      v136 = 0;
      v273 = 0;
      v259 = 0;
      v260 = 0;
      v262 = 0;
      v232 = 0;
      v154 = v148;
LABEL_187:
      v3 = v234;
      goto LABEL_188;
    }
    v149 = (const __CFData *)objc_msgSend(v147, "objectAtIndexedSubscript:", 0);
    v150 = SecCertificateCreateWithData(0, v149);

    v273 = v150;
    if (!v150)
    {
      v249 = v135;
      v194 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1376, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create leaf certificate from data."));
      v273 = 0;
      v259 = 0;
      v260 = 0;
      v262 = 0;
      v232 = 0;
      v154 = v148;
      v136 = v147;
      goto LABEL_187;
    }
    v266 = v147;
    v151 = (const __CFData *)objc_msgSend(v147, "objectAtIndexedSubscript:", 1);
    v152 = SecCertificateCreateWithData(0, v151);

    if (!v152)
    {
      v249 = v135;
      v194 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1382, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create intermediate certificate from data."));
      v259 = 0;
      v260 = 0;
      v262 = 0;
      v232 = 0;
      v154 = v148;
LABEL_186:
      v136 = v147;
      goto LABEL_187;
    }
    v297 = v148;
    v260 = v152;
    v153 = evaluateAccessoryTrustWithCerts(v273, v152, v257, 0, 0, 0, &v297);
    v154 = (NSError *)v297;

    if ((v153 & 1) == 0)
    {
      v249 = v135;
      v194 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1387, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v154, CFSTR("Failed to verify BAA certificate chain."));
      v262 = 0;
      v259 = 0;
      v232 = 0;
      goto LABEL_186;
    }
    v155 = objc_msgSend(objc_alloc((Class)NSData), "initWithContentsOfFile:", v268);

    v251 = v155;
    if (!v155)
    {
      v249 = v135;
      v194 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1395, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to load %@."), v268);
      v195 = 0;
      v262 = 0;
      v259 = 0;
      v232 = 0;
LABEL_195:
      v136 = v147;
      v3 = v234;
      goto LABEL_196;
    }
    if (cf)
      CFRelease(cf);
    v156 = SecAccessControlCreateWithFlags(0, protection, 0x40000000uLL, (CFErrorRef *)&v330);
    if (!v156)
    {
      v249 = v135;
      v194 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1402, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, (void *)v330, CFSTR("Failed to create access control."));
      v262 = 0;
      v259 = 0;
      v232 = 0;
      cf = 0;
      goto LABEL_194;
    }
    v339[0] = kSecAttrIsPermanent;
    v339[1] = kSecAttrTokenID;
    v340[0] = &__kCFBooleanFalse;
    v340[1] = v224;
    v339[2] = v223;
    v339[3] = kSecAttrAccessControl;
    v340[2] = v155;
    cf = v156;
    v340[3] = v156;
    v157 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v340, v339, 4);

    v158 = SecKeyCreateWithData((CFDataRef)+[NSData data](NSData, "data"), (CFDictionaryRef)v157, (CFErrorRef *)&v330);
    if (!v158)
    {
      v249 = v135;
      v194 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1414, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, (void *)v330, CFSTR("Failed to convert RK data blob."));
      v262 = 0;
LABEL_193:
      v259 = 0;
      v232 = 0;
      v264 = v157;
LABEL_194:
      v195 = v155;
      goto LABEL_195;
    }
    v262 = v158;
    v159 = SecKeyCopyPublicKey(v158);
    if (!v159)
    {
      v249 = v135;
      v194 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1420, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy RK public key."));
      goto LABEL_193;
    }
    v259 = v159;
    v160 = SecKeyCopyExternalRepresentation(v159, (CFErrorRef *)&v330);

    if (!v160)
    {
      v249 = v135;
      v194 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1426, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, (void *)v330, CFSTR("Failed to copy RK public key buffer."));
      v197 = 0;
      v232 = 0;
      v264 = v157;
      v195 = v155;
      goto LABEL_199;
    }
    v161 = v160;
    v162 = SecCertificateCopyKey(v273);
    if (!v162)
      break;
    v232 = v162;
    v163 = SecKeyCopyExternalRepresentation(v162, (CFErrorRef *)&v330);

    if (!v163)
    {
      v249 = v135;
      v194 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1438, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, (void *)v330, CFSTR("Failed to encode certificate public key as data."));
      v196 = 0;
      v264 = v157;
      v195 = v251;
      v197 = v161;
LABEL_205:
      v136 = v266;
      v3 = v234;
      goto LABEL_206;
    }
    v164 = v157;
    if ((-[__CFData isEqualToData:](v161, "isEqualToData:", v163) & 1) == 0)
    {
      v249 = v135;
      v264 = v157;
      v194 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1445, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Certificate public key does not match RK public key."));
      v195 = v155;
      v197 = v161;
      v196 = v163;
      goto LABEL_205;
    }
    v239 = v163;
    v296 = v154;
    v165 = store_keychain_data(v272, v247, v267, (NSError **)&v296);
    v166 = (NSError *)v296;

    if ((v165 & 1) == 0)
    {
      v249 = v135;
      v198 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1452, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v166, CFSTR("Failed to store leaf/intermediate certificates."));
      v154 = v166;
LABEL_204:
      v264 = v157;
      v194 = v198;
      v195 = v251;
      v197 = v161;
      v196 = v239;
      goto LABEL_205;
    }
    v295 = v166;
    v138 = v261;
    v167 = store_keychain_item((uint64_t)v262, v247, v261, 0, (NSError **)&v295);
    objb = (NSError *)v295;

    if ((v167 & 1) == 0)
    {
      v249 = v135;
      v154 = objb;
      v198 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1457, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, objb, CFSTR("Failed to store reference key."));
      goto LABEL_204;
    }
    v168 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
    -[NSFileManager removeItemAtPath:error:](v168, "removeItemAtPath:error:", v135, 0);

    v169 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
    v134 = v268;
    -[NSFileManager removeItemAtPath:error:](v169, "removeItemAtPath:error:", v268, 0);

    CFRelease(v273);
    CFRelease(v260);
    CFRelease(v262);
    CFRelease(v259);
    CFRelease(v232);
    v141 = (v141 + 1);
    v136 = v266;
    v226 = v239;
    v227 = v161;
    v230 = v251;
    v264 = v164;
    v139 = v247;
    v140 = v258;
    v137 = v267;
    if ((_DWORD)v141 == 5)
    {
      v170 = v161;
      v249 = v135;
      v273 = 0;
      v259 = 0;
      v260 = 0;
      v262 = 0;
      v232 = 0;
      v264 = v164;
      v3 = v234;
      v36 = v277;
      v131 = objb;
      v136 = v266;
      goto LABEL_207;
    }
  }
  v249 = v135;
  v194 = createMobileActivationError((uint64_t)"perform_sydro_data_migration_tasks", 1432, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve certificate public key."));
  v232 = 0;
  v264 = v157;
  v195 = v155;
  v197 = v160;
LABEL_199:
  v136 = v266;
  v3 = v234;
  v196 = v226;
LABEL_206:

  v131 = v194;
  v251 = v195;
  v170 = v197;
  v239 = v196;
  v36 = v277;
LABEL_207:
  v265 = v136;
  v39 = v282;
  v229 = v170;
  if (v131)
  {
    v199 = copyLoggingHandle();
    if (os_log_type_enabled(v199, OS_LOG_TYPE_FAULT))
      perform_sydro_data_migration_tasks_cold_3();

    v131 = 0;
  }
  else
  {
    maLog((uint64_t)"perform_sydro_data_migration_tasks", 0, CFSTR("Successfully migrated factory MFi certs/key."));
  }
  v119 = v270;
  v9 = v247;
LABEL_213:
  obj = v131;
  data_ark_set(v119, 0, CFSTR("MFIFactoryCertificatesMigrationCompleted"), &__kCFBooleanTrue, 1);
  v6 = v239;
LABEL_214:
  v200 = data_ark_copy(v119, 0, CFSTR("FactoryDCRTMigrationCompleted"));
  v201 = isNSNumber(v200);
  v275 = v36;
  v279 = v39;
  v236 = v3;
  v240 = v6;
  v231 = v200;
  if (!v201
    || (v202 = v201, v203 = objc_msgSend(v200, "BOOLValue"), v202, (v203 & 1) == 0))
  {
    v205 = objc_msgSend(objc_alloc((Class)NSData), "initWithContentsOfFile:", CFSTR("/private/var/hardware/dcrt/dcrt.der"));

    if (v205)
    {
      v337 = CFSTR("UseCommittedDAK");
      v338 = &__kCFBooleanTrue;
      v206 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v338, &v337, 1);

      v294 = obj;
      v12 = v205;
      v207 = storeDCRT(v270, v205, v206, &v294);
      v208 = (NSError *)v294;

      if ((v207 & 1) == 0)
      {
        v209 = copyLoggingHandle();
        v13 = v241;
        if (os_log_type_enabled(v209, OS_LOG_TYPE_FAULT))
          perform_sydro_data_migration_tasks_cold_2();

        v208 = 0;
        goto LABEL_225;
      }
      maLog((uint64_t)"perform_sydro_data_migration_tasks", 0, CFSTR("Successfully migrated factory DCRT certs/key."));
    }
    else
    {
      v12 = 0;
      v208 = obj;
      v206 = v269;
    }
    v13 = v241;
LABEL_225:
    v210 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
    -[NSFileManager removeItemAtPath:error:](v210, "removeItemAtPath:error:", CFSTR("/private/var/hardware/dcrt/dcrt.der"), 0);

    v204 = v270;
    data_ark_set(v270, 0, CFSTR("FactoryDCRTMigrationCompleted"), &__kCFBooleanTrue, 1);
    obj = v208;
    v269 = v206;
    v8 = v251;
    v6 = v240;
    goto LABEL_226;
  }
  v8 = v251;
  v12 = v253;
  v204 = v270;
  v13 = v241;
LABEL_226:
  v10 = data_ark_copy(v204, 0, CFSTR("FactorySDCRTMigrationCompleted"));
  v211 = isNSNumber(v10);
  v4 = v232;
  if (!v211
    || (v212 = v211, v213 = objc_msgSend(v10, "BOOLValue"), v212, (v213 & 1) == 0))
  {
    v228 = v12;
    v243 = v13;
    v214 = objc_msgSend(objc_alloc((Class)NSData), "initWithContentsOfFile:", CFSTR("/private/var/hardware/sdcrt/sdcrt.der"));
    v252 = v214;
    if (v214)
    {
      v215 = v214;
      v335[0] = CFSTR("UseCommittedDAK");
      v335[1] = CFSTR("sdcrtAttestation");
      v336[0] = &__kCFBooleanTrue;
      v336[1] = &__kCFBooleanTrue;
      v216 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v336, v335, 2);

      v293 = obj;
      v217 = storeDCRT(v270, v215, v216, &v293);
      v218 = (NSError *)v293;

      if ((v217 & 1) == 0)
      {
        v219 = copyLoggingHandle();
        v7 = v229;
        if (os_log_type_enabled(v219, OS_LOG_TYPE_FAULT))
          perform_sydro_data_migration_tasks_cold_1();

        v218 = 0;
        goto LABEL_237;
      }
      maLog((uint64_t)"perform_sydro_data_migration_tasks", 0, CFSTR("Successfully migrated factory SDCRT certs/key."));
    }
    else
    {
      v218 = obj;
      v216 = v269;
    }
    v7 = v229;
LABEL_237:
    v220 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
    -[NSFileManager removeItemAtPath:error:](v220, "removeItemAtPath:error:", CFSTR("/private/var/hardware/sdcrt/sdcrt.der"), 0);

    data_ark_set(v270, 0, CFSTR("FactorySDCRTMigrationCompleted"), &__kCFBooleanTrue, 1);
    obj = v218;
    v269 = v216;
    v6 = v240;
    v13 = v243;
    v12 = v228;
    goto LABEL_238;
  }
  v252 = 0;
  v7 = v229;
LABEL_238:
  v221 = certificate;
  if (certificate || (v221 = copyUCRT(v270, 0), (certificate = v221) != 0))
  {
    v222 = lockcrypto_query_certificate_properties((uint64_t)v221, CFSTR("1.2.840.113635.100.8.7"), 0);
    if (v222)
    {
      v250 = v222;
      goto LABEL_244;
    }
    maLog((uint64_t)"perform_sydro_data_migration_tasks", 0, CFSTR("Existing UCRT does not contain the OID %@."), CFSTR("1.2.840.113635.100.8.7"));
    v246 = 1;
    data_ark_set(v270, 0, CFSTR("UCRTUpgradeRequired"), &__kCFBooleanTrue, 1);
    v250 = 0;
  }
  else
  {
    v250 = 0;
LABEL_244:
    v246 = 1;
  }
  v3 = v236;
  v5 = v237;
  v11 = v231;
LABEL_35:
  if (certificate)
  {
    v242 = v10;
    v54 = v12;
    v55 = v11;
    v56 = v3;
    v57 = v6;
    v58 = v7;
    v59 = v4;
    v60 = v8;
    v61 = v13;
    v62 = v9;
    v63 = v5;
    CFRelease(certificate);
    v5 = v63;
    v9 = v62;
    v13 = v61;
    v8 = v60;
    v4 = v59;
    v7 = v58;
    v6 = v57;
    v3 = v56;
    v11 = v55;
    v12 = v54;
    v10 = v242;
  }
  certificate = 0;
  if (v5)
    CFRelease(v5);
  if (cf)
    CFRelease(cf);
  if (v330)
    CFRelease(v330);
  v330 = 0;
  if (v273)
    CFRelease(v273);
  if (v260)
    CFRelease(v260);
  if (v257)
    CFRelease(v257);
  if (v262)
    CFRelease(v262);
  if (v259)
    CFRelease(v259);
  if (v4)
    CFRelease(v4);

  return v246;
}

void __register_xpc_activities_block_invoke(uint64_t a1, id a2)
{
  _xpc_activity_s *v3;
  NSObject *v4;

  v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3))
      goto LABEL_9;
    v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __register_xpc_activities_block_invoke_cold_1();

  }
  if (xpc_activity_get_state(v3) == 2)
    factory_activation_activity_handler(*(void **)(a1 + 32));
LABEL_9:

}

void __register_xpc_activities_block_invoke_511(uint64_t a1, id a2)
{
  _xpc_activity_s *v3;
  NSObject *v4;
  xpc_object_t v5;

  v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3))
      goto LABEL_11;
    v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __register_xpc_activities_block_invoke_511_cold_1();

  }
  v5 = xpc_activity_copy_criteria(v3);
  if (!v5 || xpc_activity_get_state(v3) == 2)
    collection_activity_handler(*(void **)(a1 + 32), v5 == 0);

LABEL_11:
}

void __register_xpc_activities_block_invoke_512(uint64_t a1, id a2)
{
  _xpc_activity_s *v3;
  NSObject *v4;
  xpc_object_t v5;

  v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3))
      goto LABEL_11;
    v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __register_xpc_activities_block_invoke_512_cold_1();

  }
  v5 = xpc_activity_copy_criteria(v3);
  if (!v5 || xpc_activity_get_state(v3) == 2)
    ucrt_oob_activity_handler(*(void **)(a1 + 32), v5 == 0);

LABEL_11:
}

void __register_xpc_activities_block_invoke_513(uint64_t a1, id a2)
{
  _xpc_activity_s *v3;
  NSObject *v4;
  xpc_object_t v5;
  void *v6;

  v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3))
      goto LABEL_13;
    v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __register_xpc_activities_block_invoke_513_cold_1();

  }
  if (device_supports_dcrt_oob())
  {
    v5 = xpc_activity_copy_criteria(v3);
    v6 = v5;
    if (!v5 || xpc_dictionary_get_BOOL(v5, XPC_ACTIVITY_REPEATING) || xpc_activity_get_state(v3) == 2)
      dcrt_oob_activity_handler(*(void **)(a1 + 32), 0, v6 == 0);

  }
LABEL_13:

}

void __register_xpc_activities_block_invoke_514(uint64_t a1, id a2)
{
  _xpc_activity_s *v3;
  NSObject *v4;
  xpc_object_t v5;
  void *v6;

  v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3))
      goto LABEL_13;
    v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __register_xpc_activities_block_invoke_514_cold_1();

  }
  if (device_supports_dcrt_oob())
  {
    v5 = xpc_activity_copy_criteria(v3);
    v6 = v5;
    if (!v5 || xpc_dictionary_get_BOOL(v5, XPC_ACTIVITY_REPEATING) || xpc_activity_get_state(v3) == 2)
      dcrt_oob_activity_handler(*(void **)(a1 + 32), 1, v6 == 0);

  }
LABEL_13:

}

void __register_xpc_activities_block_invoke_515(uint64_t a1, id a2)
{
  _xpc_activity_s *v3;
  NSObject *v4;

  v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3))
      goto LABEL_10;
    v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __register_xpc_activities_block_invoke_515_cold_1();

  }
  if (device_supports_dcrt_oob() && xpc_activity_get_state(v3) == 2)
    dcrt_oob_load_spreading_activity_handler(*(void **)(a1 + 32), 0);
LABEL_10:

}

void __register_xpc_activities_block_invoke_516(uint64_t a1, id a2)
{
  _xpc_activity_s *v3;
  NSObject *v4;

  v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3))
      goto LABEL_10;
    v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __register_xpc_activities_block_invoke_516_cold_1();

  }
  if (device_supports_dcrt_oob() && xpc_activity_get_state(v3) == 2)
    dcrt_oob_load_spreading_activity_handler(*(void **)(a1 + 32), 1);
LABEL_10:

}

void __register_xpc_activities_block_invoke_517(uint64_t a1, id a2)
{
  _xpc_activity_s *v3;
  NSObject *v4;
  xpc_object_t v5;

  v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3))
      goto LABEL_11;
    v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __register_xpc_activities_block_invoke_517_cold_1();

  }
  v5 = xpc_activity_copy_criteria(v3);
  if (!v5 || xpc_activity_get_state(v3) == 2)
    splunk_activity_handler(*(void **)(a1 + 32), v5 == 0);

LABEL_11:
}

void __register_xpc_activities_block_invoke_518(uint64_t a1, id a2)
{
  _xpc_activity_s *v3;
  NSObject *v4;

  v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3))
      goto LABEL_9;
    v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __register_xpc_activities_block_invoke_518_cold_1();

  }
  if (xpc_activity_get_state(v3) == 2)
    splunk_daily_stats_activity_handler(*(void **)(a1 + 32));
LABEL_9:

}

void __register_xpc_activities_block_invoke_519(uint64_t a1, id a2)
{
  _xpc_activity_s *v3;
  NSObject *v4;

  v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3))
      goto LABEL_9;
    v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __register_xpc_activities_block_invoke_519_cold_1();

  }
  if (xpc_activity_get_state(v3) == 2)
    splunk_roll_uuid_activity_handler(*(void **)(a1 + 32));
LABEL_9:

}

void __performInFieldCollection_block_invoke(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  double v5;
  NSError *v6;
  id v7;
  id v8;
  MACollectionInterface *v9;
  NSDictionary *v10;
  NSDictionary *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  MACollectionInterface *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  NSDictionary *v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  unsigned int v41;
  id v42;
  id v43;
  id v44;
  id v45;
  unint64_t v46;
  id v47;
  id v48;
  NSMutableString *v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  int v55;
  NSMutableString *v56;
  id v57;
  id v58;
  id v59;
  MACollectionInterface *v60;
  NSDictionary *v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  _QWORD v70[2];
  _QWORD v71[2];

  v69 = -1;
  if (!*(_QWORD *)(a1 + 56))
  {
    v6 = createMobileActivationError((uint64_t)"performInFieldCollection_block_invoke", 898, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v60 = 0;
    v61 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v59 = 0;
LABEL_22:
    v58 = 0;
    v22 = 0;
    goto LABEL_23;
  }
  v2 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("NetworkTimeoutInterval"));
  v3 = isNSNumber(v2);

  if (v3)
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("NetworkTimeoutInterval"));
    objc_msgSend(v4, "doubleValue");
    if (v5 <= 0.0)
    {
      v59 = v4;
      v6 = createMobileActivationError((uint64_t)"performInFieldCollection_block_invoke", 905, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid network timeout requested: %@"), v4);
      v60 = 0;
LABEL_20:
      v7 = 0;
      v8 = 0;
      v9 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    v4 = 0;
  }
  v59 = v4;
  if (is_product_cellular())
  {
    v15 = *(_QWORD *)(a1 + 40);
    v68 = 0;
    v14 = copy_baseband_request_info(v15, 0, (NSError **)&v68);
    v16 = v68;

    if (!v14)
    {
      v6 = createMobileActivationError((uint64_t)"performInFieldCollection_block_invoke", 915, CFSTR("com.apple.MobileActivation.ErrorDomain"), -22, v16, CFSTR("Failed to copy baseband info."));

      v60 = 0;
      v61 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      goto LABEL_22;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = -[MACollectionInterface initWithContext:]([MACollectionInterface alloc], "initWithContext:", *(_QWORD *)(a1 + 40));
  v9 = v17;
  if (!v17)
  {
    v6 = createMobileActivationError((uint64_t)"performInFieldCollection_block_invoke", 923, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create collection interface."));

    v60 = 0;
    v7 = 0;
    v8 = 0;
LABEL_21:
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v61 = 0;
    v14 = 0;
    goto LABEL_22;
  }
  v60 = v17;
  if (!-[MACollectionInterface collectionLibraryLoaded](v17, "collectionLibraryLoaded"))
  {
    v6 = createMobileActivationError((uint64_t)"performInFieldCollection_block_invoke", 928, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Collection library not loaded."));

    goto LABEL_20;
  }
  v18 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("UseCellularBootstrapProxy"));
  v19 = isNSNumber(v18);

  if (!v19)
  {
    v61 = 0;
    v57 = 0;
LABEL_28:
    v25 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("UseCellularOTAProxy"));
    v26 = isNSNumber(v25);

    if (v26)
    {
      v27 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("UseCellularOTAProxy"));
      v58 = v27;
      if (is_product_cellular() && objc_msgSend(v27, "BOOLValue"))
      {
        v66 = v16;
        v10 = (NSDictionary *)copyCellularProxyDictionary(0, (NSError **)&v66);
        v28 = v66;

        if (!v10)
        {
          v6 = createMobileActivationError((uint64_t)"performInFieldCollection_block_invoke", 950, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, v28, CFSTR("Failed to query cellular network proxy info."));

          v7 = 0;
          v8 = 0;
          v9 = 0;
          v11 = 0;
          v12 = 0;
          v13 = 0;
          v61 = 0;
LABEL_64:
          v14 = 0;
          goto LABEL_65;
        }
        v55 = 1;
        v16 = v28;
        v61 = v10;
LABEL_35:
        v29 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("SOCKSProxyHost"));
        v30 = isNSString(v29);
        if (v30)
        {
          v31 = v30;
          v32 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("SOCKSProxyPort"));
          v33 = isNSNumber(v32);

          if (!v33)
          {
            v9 = v60;
LABEL_40:
            if (is_internal_build())
            {
              v36 = objc_alloc((Class)NSUserDefaults);
              v13 = objc_msgSend(v36, "persistentDomainForName:", CFSTR("com.apple.mobileactivationd"));

              v37 = objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("UseReverseProxy"));
              v38 = isNSNumber(v37);
              if (v38)
              {
                v39 = v38;
                v40 = objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("UseReverseProxy"));
                v41 = objc_msgSend(v40, "BOOLValue");

                if (v41)
                {
                  if (v61)
                  {
                    v6 = createMobileActivationError((uint64_t)"performInFieldCollection_block_invoke", 966, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Cannot set both '%@' override and '%@'/'%@' option."), CFSTR("UseReverseProxy"), CFSTR("UseCellularBootstrapProxy"), CFSTR("UseCellularOTAProxy"));

                    v7 = 0;
                    goto LABEL_60;
                  }
                  v61 = (NSDictionary *)copyReverseProxyDictionary(0, 0, 0);
                }
                v9 = v60;
              }
              else
              {

              }
            }
            else
            {
              v13 = 0;
            }
            v65 = v16;
            v7 = -[MACollectionInterface copyIngestData:](v9, "copyIngestData:", &v65);
            v42 = v65;

            if (v7)
            {
              v64 = v42;
              v8 = -[MACollectionInterface copyIngestHeaders:withError:](v9, "copyIngestHeaders:withError:", v7, &v64);
              v43 = v64;

              if (v8)
              {
                v44 = objc_alloc((Class)NSMutableURLRequest);
                v45 = +[MACollectionInterface copyIngestURL](MACollectionInterface, "copyIngestURL");
                LODWORD(v46) = NETWORK_TIMEOUT_SECONDS;
                v9 = (MACollectionInterface *)objc_msgSend(v44, "initWithURL:cachePolicy:timeoutInterval:", v45, 0, (double)v46);

                if (v9)
                {
                  v47 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
                  v14 = objc_msgSend(v47, "copyAnswer:", CFSTR("UniqueDeviceID"));

                  v48 = isNSString(v14);
                  if (v48)
                  {
                    v12 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ - %@"), CFSTR("iOS Device Activator (MobileActivation-1006)"), *(_QWORD *)(a1 + 48));
                    if (v12)
                    {
                      v53 = v43;
                      -[MACollectionInterface setAllHTTPHeaderFields:](v9, "setAllHTTPHeaderFields:", v8);
                      -[MACollectionInterface setValue:forHTTPHeaderField:](v9, "setValue:forHTTPHeaderField:", v12, CFSTR("User-Agent"));
                      -[MACollectionInterface setValue:forHTTPHeaderField:](v9, "setValue:forHTTPHeaderField:", v14, CFSTR("x-jmet-deviceid"));
                      -[MACollectionInterface setHTTPMethod:](v9, "setHTTPMethod:", CFSTR("POST"));
                      -[MACollectionInterface setHTTPBody:](v9, "setHTTPBody:", v7);
                      if (v59)
                      {
                        objc_msgSend(v59, "doubleValue");
                        -[MACollectionInterface setTimeoutInterval:](v9, "setTimeoutInterval:");
                      }
                      v49 = formatURLRequest(v9);
                      v50 = copy_log_directory_path();
                      v51 = objc_msgSend(v50, "stringByAppendingPathComponent:", CFSTR("collection_oob_request.txt"));
                      -[NSMutableString writeToFile:atomically:encoding:error:](v49, "writeToFile:atomically:encoding:error:", v51, 0, 4, 0);

                      v62 = v53;
                      v63 = 0;
                      v11 = (NSDictionary *)talkToServerWithError(v9, 0, v55, v61, &v63, &v69, &v62);
                      v10 = (NSDictionary *)v63;
                      v6 = (NSError *)v62;

                      v56 = formatURLResponse(v11, v69, v10);
                      v54 = copy_log_directory_path();
                      v52 = objc_msgSend(v54, "stringByAppendingPathComponent:", CFSTR("collection_oob_response.txt"));
                      -[NSMutableString writeToFile:atomically:encoding:error:](v56, "writeToFile:atomically:encoding:error:", v52, 0, 4, 0);

                    }
                    else
                    {
                      v6 = createMobileActivationError((uint64_t)"performInFieldCollection_block_invoke", 1007, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create user agent string."));

                      v10 = 0;
                      v11 = 0;
                    }
                  }
                  else
                  {
                    v6 = createMobileActivationError((uint64_t)"performInFieldCollection_block_invoke", 1000, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query %@."), CFSTR("UniqueDeviceID"));

                    v10 = 0;
                    v11 = 0;
                    v12 = 0;
                  }
                  goto LABEL_65;
                }
                v6 = createMobileActivationError((uint64_t)"performInFieldCollection_block_invoke", 994, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate request."));

                goto LABEL_63;
              }
              v6 = createMobileActivationError((uint64_t)"performInFieldCollection_block_invoke", 984, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v43, CFSTR("Failed to copy ingest headers."));

LABEL_62:
              v9 = 0;
LABEL_63:
              v10 = 0;
              v11 = 0;
              v12 = 0;
              goto LABEL_64;
            }
            v6 = createMobileActivationError((uint64_t)"performInFieldCollection_block_invoke", 978, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v42, CFSTR("Failed to copy ingest data."));

LABEL_60:
            v8 = 0;
            goto LABEL_62;
          }
          v70[0] = CFSTR("SOCKSProxyHost");
          v29 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("SOCKSProxyHost"));
          v71[0] = v29;
          v70[1] = CFSTR("SOCKSProxyPort");
          v34 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("SOCKSProxyPort"));
          v71[1] = v34;
          v35 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v71, v70, 2);

          v61 = v35;
          v9 = v60;
        }

        goto LABEL_40;
      }
    }
    else
    {
      v58 = 0;
    }
    v55 = 0;
    goto LABEL_35;
  }
  v20 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("UseCellularBootstrapProxy"));
  v57 = v20;
  if (!is_product_cellular() || !objc_msgSend(v20, "BOOLValue"))
  {
    v61 = 0;
    goto LABEL_28;
  }
  v67 = v16;
  v11 = (NSDictionary *)copyCellularProxyDictionary(1, (NSError **)&v67);
  v21 = v67;

  v61 = v11;
  if (v11)
  {
    v16 = v21;
    goto LABEL_28;
  }
  v6 = createMobileActivationError((uint64_t)"performInFieldCollection_block_invoke", 937, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, v21, CFSTR("Failed to query cellular network proxy info."));

  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v12 = 0;
  v13 = 0;
  v61 = 0;
  v14 = 0;
  v58 = 0;
LABEL_65:
  v22 = v57;
LABEL_23:
  v23 = *(_QWORD *)(a1 + 56);
  if (v23)
  {
    v24 = v22;
    (*(void (**)(uint64_t, NSDictionary *, NSDictionary *, uint64_t, NSError *))(v23 + 16))(v23, v11, v10, v69, v6);
    v22 = v24;
  }

}

void ___performUCRTHealingOOB_block_invoke(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  _BOOL4 v7;
  id v8;
  void *v9;
  id v10;
  _BOOL4 v11;
  id v12;
  void *v13;
  id v14;
  _BOOL4 v15;
  id v16;
  id v17;
  id v18;
  double v19;
  NSError *v20;
  id v21;
  NSMutableDictionary *v22;
  void *v23;
  NSDictionary *v24;
  id v25;
  uint64_t v26;
  uint64_t *v27;
  const void *v28;
  id v29;
  id v30;
  _BOOL4 v31;
  uint64_t v32;
  NSError *v33;
  void *v34;
  void *v35;
  id *v36;
  id *v37;
  __SecKey *v38;
  id *v39;
  NSDictionary *v40;
  NSMutableDictionary *v41;
  NSDictionary *v42;
  id v43;
  NSError *v44;
  NSError *v45;
  int v46;
  _BOOL4 v47;
  id v48;
  void *v49;
  id *location;
  id *locationa;
  id v52;
  id v53;
  id *v54;
  id v55;
  NSArray *v56;
  _BOOL4 IsEnabled;
  id v58;
  _QWORD v59[4];
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint64_t *v66;
  uint64_t *v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id obj;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t);
  void (*v89)(uint64_t);
  id v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t);
  void (*v95)(uint64_t);
  id v96;
  _QWORD v97[5];
  id v98;
  uint64_t v99;
  id *v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t);
  void (*v103)(uint64_t);
  id v104;
  _QWORD v105[5];
  _QWORD v106[2];
  _QWORD v107[2];

  v99 = 0;
  v100 = (id *)&v99;
  v101 = 0x3032000000;
  v102 = __Block_byref_object_copy__5;
  v103 = __Block_byref_object_dispose__5;
  v104 = 0;
  v97[0] = 0;
  v97[1] = v97;
  v97[2] = 0x3032000000;
  v97[3] = __Block_byref_object_copy__5;
  v97[4] = __Block_byref_object_dispose__5;
  v98 = 0;
  v91 = 0;
  v92 = &v91;
  v93 = 0x3032000000;
  v94 = __Block_byref_object_copy__5;
  v95 = __Block_byref_object_dispose__5;
  v96 = 0;
  v85 = 0;
  v86 = &v85;
  v87 = 0x3032000000;
  v88 = __Block_byref_object_copy__5;
  v89 = __Block_byref_object_dispose__5;
  v90 = 0;
  v81 = 0;
  v82 = &v81;
  v83 = 0x2020000000;
  v84 = -1;
  v77 = 0;
  v78 = &v77;
  v79 = 0x2020000000;
  v80 = 0;
  if (!*(_QWORD *)(a1 + 32) || !*(_QWORD *)(a1 + 40) || !*(_QWORD *)(a1 + 56))
  {
    v20 = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke", 533, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    v21 = 0;
    v22 = 0;
    v18 = 0;
    v9 = 0;
    v13 = 0;
    v23 = 0;
    v5 = 0;
    v3 = 0;
LABEL_14:
    v24 = 0;
    goto LABEL_15;
  }
  v2 = objc_alloc((Class)NSUserDefaults);
  v3 = objc_msgSend(v2, "persistentDomainForName:", CFSTR("com.apple.mobileactivationd"));

  v4 = objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("PromptForCredentials"));
  v5 = v4;
  if (v4)
  {
    v6 = isNSNumber(v4);
    v7 = v6 == 0;

    if (v7)
    {
      v20 = createAndLogError((uint64_t)"_performUCRTHealingOOB_block_invoke", 541, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid option (%@)."), CFSTR("PromptForCredentials"));
      v21 = 0;
      v22 = 0;
      v18 = 0;
      v9 = 0;
LABEL_23:
      v13 = 0;
      goto LABEL_39;
    }
  }
  v8 = objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("ActivationLockUsername"));
  v9 = v8;
  if (v8)
  {
    v10 = isNSString(v8);
    v11 = v10 == 0;

    if (v11)
    {
      v20 = createAndLogError((uint64_t)"_performUCRTHealingOOB_block_invoke", 547, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid option (%@)."), CFSTR("ActivationLockUsername"));
      v21 = 0;
      v22 = 0;
      v18 = 0;
      goto LABEL_23;
    }
  }
  v12 = objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("ActivationLockPET"));
  v13 = v12;
  if (v12)
  {
    v14 = isNSString(v12);
    v15 = v14 == 0;

    if (v15)
    {
      v20 = createAndLogError((uint64_t)"_performUCRTHealingOOB_block_invoke", 553, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid option (%@)."), CFSTR("ActivationLockPET"));
      v21 = 0;
      v22 = 0;
      v18 = 0;
      goto LABEL_39;
    }
  }
  v16 = objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("NetworkTimeoutInterval"));
  v17 = isNSNumber(v16);

  if (v17)
  {
    v18 = objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("NetworkTimeoutInterval"));
    objc_msgSend(v18, "doubleValue");
    if (v19 <= 0.0)
    {
      v20 = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke", 560, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid network timeout requested: %@"), v18);
      v21 = 0;
      v22 = 0;
LABEL_39:
      v23 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    v18 = 0;
  }
  v29 = objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("UseCommittedUIK"));
  v23 = v29;
  if (v29)
  {
    v30 = isNSNumber(v29);
    v31 = v30 == 0;

    if (v31)
    {
      v33 = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke", 567, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid option (%@)."), CFSTR("UseCommittedUIK"));
      goto LABEL_42;
    }
  }
  if ((objc_msgSend(v23, "BOOLValue") & 1) == 0)
  {
    v32 = aks_system_key_operate(2u, 1u, 0, 0);
    if ((_DWORD)v32)
    {
      v33 = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke", 574, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to bump UIK: 0x%08x"), v32);
LABEL_42:
      v20 = v33;
      v21 = 0;
      v22 = 0;
      goto LABEL_14;
    }
  }
  v34 = *(void **)(a1 + 32);
  v35 = *(void **)(a1 + 48);
  v36 = v100;
  obj = v100[5];
  v24 = create_ucrt_info(v34, v35, &obj);
  objc_storeStrong(v36 + 5, obj);
  if (!v24)
  {
    v33 = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke", 581, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v100[5], CFSTR("Failed to create UCRT info."));
    goto LABEL_42;
  }
  v37 = v100;
  v75 = v100[5];
  v38 = (__SecKey *)createReferenceKeyBlob(0, 1, 0, &v75);
  objc_storeStrong(v37 + 5, v75);
  v78[3] = (uint64_t)v38;
  if (!v38)
  {
    v45 = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke", 587, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v100[5], CFSTR("Failed to create reference key."));
LABEL_50:
    v20 = v45;
    v21 = 0;
    v22 = 0;
    goto LABEL_15;
  }
  v39 = v100;
  v74 = v100[5];
  v21 = security_create_external_representation(v38, 0, (NSError **)&v74);
  objc_storeStrong(v39 + 5, v74);
  if (!v21)
  {
    v45 = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke", 593, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to encode RK as data."));
    goto LABEL_50;
  }
  v106[0] = CFSTR("Validity");
  v106[1] = CFSTR("scrtAttestation");
  v107[0] = &off_1002716D0;
  v107[1] = &__kCFBooleanTrue;
  v40 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v107, v106, 2);
  v41 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v40);
  v42 = v40;
  v22 = v41;

  if (v18)
    -[NSMutableDictionary setObject:forKeyedSubscript:](v22, "setObject:forKeyedSubscript:", v18, CFSTR("NetworkTimeoutInterval"));
  v52 = objc_alloc((Class)NSMutableArray);
  v105[0] = CFSTR("1.2.840.113635.100.8.3");
  v105[1] = CFSTR("1.2.840.113635.100.10.1");
  v105[2] = CFSTR("1.2.840.113635.100.8.4");
  v105[3] = CFSTR("1.2.840.113635.100.8.5");
  v105[4] = CFSTR("1.2.840.113635.100.8.7");
  v56 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v105, 5);
  v53 = objc_msgSend(v52, "initWithArray:", v56);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v22, "setObject:forKeyedSubscript:", v53, CFSTR("OIDSToInclude"));

  v54 = v100 + 5;
  v73 = v100[5];
  IsEnabled = FindMyDeviceIsEnabled(&v73);
  objc_storeStrong(v54, v73);
  if (IsEnabled || (v43 = v100[5]) == 0)
  {
    v46 = objc_msgSend(v5, "BOOLValue");
    location = v100 + 5;
    v72 = v100[5];
    v55 = copyTokenForActivationLock(v9, v13, v46, 0, &v72);
    objc_storeStrong(location, v72);
    v47 = IsEnabled;
    if (v55)
      v47 = 0;
    if (!v47)
    {
      v48 = v100[5];
      v100[5] = 0;

      v49 = *(void **)(a1 + 40);
      locationa = *(id **)(a1 + 32);
      v59[0] = _NSConcreteStackBlock;
      v59[1] = 3254779904;
      v59[2] = ___performUCRTHealingOOB_block_invoke_2;
      v59[3] = &__block_descriptor_128_e8_32s40s48s56s64s72bs80r88r96r104r112r120r_e34_v24__0__NSDictionary_8__NSError_16l;
      v66 = &v99;
      v58 = v55;
      v60 = v58;
      v24 = v24;
      v61 = v24;
      v67 = &v77;
      v68 = v97;
      v62 = *(id *)(a1 + 40);
      v18 = v18;
      v63 = v18;
      v3 = v3;
      v64 = v3;
      v69 = &v85;
      v70 = &v91;
      v71 = &v81;
      v65 = *(id *)(a1 + 56);
      issueClientCertificateWithReferenceKey(locationa, v49, v21, 0, v22, v59);

      goto LABEL_20;
    }
    v44 = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke", 621, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v100[5], CFSTR("Failed to retrieve auth token."));
  }
  else
  {
    v44 = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke", 615, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v43, CFSTR("Failed to query FindMy state."));
  }
  v20 = v44;
LABEL_15:
  v25 = v100[5];
  v100[5] = v20;

  v26 = *(_QWORD *)(a1 + 56);
  if (v26)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, id))(v26 + 16))(v26, v86[5], v92[5], v82[3], v100[5]);
  v27 = v78;
  v28 = (const void *)v78[3];
  if (v28)
  {
    CFRelease(v28);
    v27 = v78;
  }
  v27[3] = 0;
LABEL_20:

  _Block_object_dispose(&v77, 8);
  _Block_object_dispose(&v81, 8);
  _Block_object_dispose(&v85, 8);

  _Block_object_dispose(&v91, 8);
  _Block_object_dispose(v97, 8);

  _Block_object_dispose(&v99, 8);
}

void sub_10003795C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  uint64_t v56;

  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose(&a50, 8);
  _Block_object_dispose(&a56, 8);
  _Block_object_dispose((const void *)(v56 - 216), 8);
  _Unwind_Resume(a1);
}

void ___performUCRTHealingOOB_block_invoke_2(uint64_t a1, id a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v5 = a2;
  v6 = a3;
  v7 = dispatch_get_global_queue(0, 0);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3254779904;
  v10[2] = ___performUCRTHealingOOB_block_invoke_3;
  v10[3] = &__block_descriptor_144_e8_32s40s48s56s64s72s80s88bs96r104r112r120r128r136r_e5_v8__0l;
  v19 = *(_QWORD *)(a1 + 80);
  v11 = v6;
  v12 = v5;
  v13 = *(id *)(a1 + 32);
  v14 = *(id *)(a1 + 40);
  v20 = *(_OWORD *)(a1 + 88);
  v15 = *(id *)(a1 + 48);
  v16 = *(id *)(a1 + 56);
  v17 = *(id *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 104);
  v22 = *(_QWORD *)(a1 + 120);
  v18 = *(id *)(a1 + 72);
  v8 = v5;
  v9 = v6;
  dispatch_async(v7, v10);

}

void ___performUCRTHealingOOB_block_invoke_3(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  NSData *v18;
  id v19;
  void *v20;
  id *v21;
  CFDataRef v22;
  id v23;
  void *v24;
  id v25;
  NSDictionary *v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  NSError *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  NSError *v37;
  uint64_t v38;
  void *v39;
  NSError *v40;
  uint64_t v41;
  void *v42;
  NSError *v43;
  uint64_t v44;
  void *v45;
  NSError *v46;
  uint64_t v47;
  void *v48;
  NSError *v49;
  uint64_t v50;
  void *v51;
  NSError *v52;
  uint64_t v53;
  void *v54;
  NSError *v55;
  uint64_t v56;
  void *v57;
  NSError *MobileActivationError;
  NSError *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  _QWORD *v66;
  uint64_t v67;
  void *v68;
  id v69;
  id v70;
  id v71;
  id v72;
  NSURL *v73;
  unsigned int v74;
  id v75;
  id *v76;
  id v77;
  char v78;
  NSURL *v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id *locationa;
  id *locationb;
  id *locationc;
  id *locationd;
  id *locatione;
  id *location;
  NSMutableString *locationf;
  id *locationg;
  NSMutableString *locationh;
  id *v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id obj;
  CFErrorRef error;
  _QWORD v103[3];
  _QWORD v104[3];

  error = 0;
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), v2);
    v3 = 0;
LABEL_27:
    v12 = 0;
LABEL_28:
    v15 = 0;
LABEL_29:
    v22 = 0;
    v20 = 0;
    v18 = 0;
    v17 = 0;
LABEL_30:
    v26 = 0;
    v24 = 0;
    goto LABEL_31;
  }
  v3 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("RKCertification"));
  v4 = isNSArray(v3);
  if (!v4 || objc_msgSend(v3, "count") != (id)2)
    goto LABEL_25;
  v5 = objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
  v6 = isNSData(v5);
  if (!v6)
  {

LABEL_25:
    goto LABEL_26;
  }
  v7 = v6;
  v8 = objc_msgSend(v3, "objectAtIndexedSubscript:", 1);
  v9 = isNSData(v8);

  if (!v9)
  {
LABEL_26:
    v31 = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke_3", 652, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve BAA certificates."));
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
    v33 = *(void **)(v32 + 40);
    *(_QWORD *)(v32 + 40) = v31;

    goto LABEL_27;
  }
  v10 = objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
  obj = *(id *)(v11 + 40);
  v12 = lockcrypto_create_pem(v10, "CERTIFICATE", &obj);
  objc_storeStrong((id *)(v11 + 40), obj);

  if (!v12)
  {
    v37 = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke_3", 658, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), CFSTR("Failed to create PEM."));
    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
    v39 = *(void **)(v38 + 40);
    *(_QWORD *)(v38 + 40) = v37;

    goto LABEL_28;
  }
  v13 = objc_msgSend(v3, "objectAtIndexedSubscript:", 1);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
  v100 = *(id *)(v14 + 40);
  v15 = lockcrypto_create_pem(v13, "CERTIFICATE", &v100);
  objc_storeStrong((id *)(v14 + 40), v100);

  if (!v15)
  {
    v40 = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke_3", 664, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), CFSTR("Failed to create PEM."));
    v41 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
    v42 = *(void **)(v41 + 40);
    *(_QWORD *)(v41 + 40) = v40;

    goto LABEL_29;
  }
  v16 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v17 = objc_msgSend(v16, "copyAnswer:", CFSTR("UniqueDeviceID"));

  v18 = (NSData *)isNSString(v17);
  if (!v18)
  {
    v43 = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke_3", 670, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query %@."), CFSTR("UniqueDeviceID"));
    v44 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
    v45 = *(void **)(v44 + 40);
    *(_QWORD *)(v44 + 40) = v43;

    v22 = 0;
    v20 = 0;
    goto LABEL_30;
  }
  v19 = objc_alloc_init((Class)NSMutableDictionary);
  v20 = v19;
  if (!v19)
  {
    v46 = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke_3", 676, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate dictionary."));
    v47 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
    v48 = *(void **)(v47 + 40);
    *(_QWORD *)(v47 + 40) = v46;

    v22 = 0;
    v18 = 0;
    goto LABEL_30;
  }
  objc_msgSend(v19, "setObject:forKeyedSubscript:", v17, CFSTR("UniqueDeviceID"));
  objc_msgSend(v20, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 48), CFSTR("ActivationLockToken"));
  objc_msgSend(v20, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 56), CFSTR("UCRTRequestInfo"));
  v21 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
  v99 = 0;
  v18 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v20, 100, 0, &v99);
  objc_storeStrong(v21, v99);
  if (!v18)
  {
    v49 = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke_3", 686, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), CFSTR("Could not convert dictionary to xml data."));
    v50 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
    v51 = *(void **)(v50 + 40);
    *(_QWORD *)(v50 + 40) = v49;

    v22 = 0;
    goto LABEL_30;
  }
  v22 = SecKeyCreateSignature(*(SecKeyRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24), kSecKeyAlgorithmECDSASignatureMessageX962SHA256, (CFDataRef)v18, &error);
  if (!v22)
  {
    v52 = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke_3", 692, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to sign data with ref key."));
    v53 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
    v54 = *(void **)(v53 + 40);
    *(_QWORD *)(v53 + 40) = v52;

    goto LABEL_30;
  }
  v23 = objc_alloc_init((Class)NSMutableData);
  v24 = v23;
  if (!v23)
  {
    v55 = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke_3", 698, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate data."));
    v56 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
    v57 = *(void **)(v56 + 40);
    *(_QWORD *)(v56 + 40) = v55;

    v26 = 0;
    goto LABEL_31;
  }
  objc_msgSend(v23, "appendData:", v12);
  v25 = objc_msgSend(CFSTR("\n"), "dataUsingEncoding:", 4);
  objc_msgSend(v24, "appendData:", v25);

  objc_msgSend(v24, "appendData:", v15);
  v103[0] = CFSTR("UCRTRequestInfoXML");
  v103[1] = CFSTR("BAACertification");
  v104[0] = v18;
  v104[1] = v24;
  v103[2] = CFSTR("BAASignature");
  v104[2] = v22;
  v26 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v104, v103, 3);
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8);
  v28 = *(void **)(v27 + 40);
  locationa = (id *)(v27 + 40);
  v93 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
  v97 = *v93;
  v98 = v28;
  v78 = createXMLRequest(v26, &v98, (NSError **)&v97);
  objc_storeStrong(locationa, v98);
  objc_storeStrong(v93, v97);
  if ((v78 & 1) != 0)
  {
    v29 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ - %@"), CFSTR("iOS Device Activator (MobileActivation-1006)"), *(_QWORD *)(a1 + 64));
    if (v29)
    {
      locationb = *(id **)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 40);
      v94 = v29;
      v79 = +[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("https://albert.apple.com/deviceservices/ucertVend"));
      objc_msgSend(locationb, "setURL:", v79);

      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 40), "setValue:forHTTPHeaderField:", v94, CFSTR("User-Agent"));
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 40), "setValue:forHTTPHeaderField:", v17, CFSTR("x-jmet-deviceid"));
      v30 = *(void **)(a1 + 72);
      if (v30)
      {
        locationc = *(id **)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 40);
        objc_msgSend(v30, "doubleValue");
        objc_msgSend(locationc, "setTimeoutInterval:");
      }
      if (is_internal_build())
      {
        locationd = (id *)objc_msgSend(*(id *)(a1 + 80), "objectForKeyedSubscript:");
        v80 = isNSString(locationd);

        if (v80)
        {
          locatione = *(id **)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 40);
          v81 = objc_msgSend(*(id *)(a1 + 80), "objectForKeyedSubscript:", CFSTR("UCRTOOBHealOverrideURL"));
          v73 = +[NSURL URLWithString:](NSURL, "URLWithString:", v81);
          objc_msgSend(locatione, "setURL:", v73);

        }
        location = (id *)objc_msgSend(*(id *)(a1 + 80), "objectForKeyedSubscript:");
        v82 = isNSNumber(location);
        if (v82)
        {
          v69 = objc_msgSend(*(id *)(a1 + 80), "objectForKeyedSubscript:", CFSTR("UseReverseProxy"));
          v74 = objc_msgSend(v69, "BOOLValue");

          if (v74)
          {
            v83 = copyReverseProxyDictionary(0, 0, 0);
LABEL_50:
            locationf = objc_retainAutoreleasedReturnValue(formatURLRequest(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 112)
                                                                                                 + 8)
                                                                                     + 40)));
            v75 = copy_log_directory_path();
            v70 = objc_msgSend(v75, "stringByAppendingPathComponent:", CFSTR("ucrt_oob_request.txt"));
            -[NSMutableString writeToFile:atomically:encoding:error:](locationf, "writeToFile:atomically:encoding:error:", v70, 0, 4, 0);

            v63 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 40);
            v64 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
            v65 = *(void **)(v64 + 40);
            v76 = (id *)(v64 + 40);
            v66 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 24);
            locationg = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
            v95 = *locationg;
            v96 = v65;
            v71 = talkToServerWithError(v63, 0, 0, v83, &v96, v66, &v95);
            objc_storeStrong(v76, v96);
            objc_storeStrong(locationg, v95);
            v67 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8);
            v68 = *(void **)(v67 + 40);
            *(_QWORD *)(v67 + 40) = v71;

            locationh = formatURLResponse(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 24), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 40));
            v77 = copy_log_directory_path();
            v72 = objc_msgSend(v77, "stringByAppendingPathComponent:", CFSTR("ucrt_oob_response.txt"));
            -[NSMutableString writeToFile:atomically:encoding:error:](locationh, "writeToFile:atomically:encoding:error:", v72, 0, 4, 0);

            v62 = v83;
            goto LABEL_51;
          }
        }
        else
        {

        }
      }
      v83 = 0;
      goto LABEL_50;
    }
    MobileActivationError = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke_3", 717, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create user agent string."));
  }
  else
  {
    MobileActivationError = createMobileActivationError((uint64_t)"_performUCRTHealingOOB_block_invoke_3", 711, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create request."));
  }
  v59 = MobileActivationError;
  v60 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
  v61 = *(void **)(v60 + 40);
  *(_QWORD *)(v60 + 40) = v59;
  v62 = v61;
LABEL_51:

LABEL_31:
  v34 = *(_QWORD *)(a1 + 88);
  if (v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v34 + 16))(v34, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 24), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40));
  if (error)
    CFRelease(error);
  error = 0;
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
  v36 = *(const void **)(v35 + 24);
  if (v36)
  {
    CFRelease(v36);
    v35 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
  }
  *(_QWORD *)(v35 + 24) = 0;

}

void __copy_helper_block_e8_32s40s48s56s64s72s80s88b96r104r112r120r128r136r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  v8 = *(id *)(a2 + 64);
  v9 = *(id *)(a2 + 72);
  v10 = *(id *)(a2 + 80);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 7);
  _Block_object_assign((void *)(a1 + 96), *(const void **)(a2 + 96), 8);
  _Block_object_assign((void *)(a1 + 104), *(const void **)(a2 + 104), 8);
  _Block_object_assign((void *)(a1 + 112), *(const void **)(a2 + 112), 8);
  _Block_object_assign((void *)(a1 + 120), *(const void **)(a2 + 120), 8);
  _Block_object_assign((void *)(a1 + 128), *(const void **)(a2 + 128), 8);
  _Block_object_assign((void *)(a1 + 136), *(const void **)(a2 + 136), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80s88s96r104r112r120r128r136r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 136), 8);
  _Block_object_dispose(*(const void **)(a1 + 128), 8);
  _Block_object_dispose(*(const void **)(a1 + 120), 8);
  _Block_object_dispose(*(const void **)(a1 + 112), 8);
  _Block_object_dispose(*(const void **)(a1 + 104), 8);
  _Block_object_dispose(*(const void **)(a1 + 96), 8);

}

void __copy_helper_block_e8_32s40s48s56s64s72b80r88r96r104r112r120r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  v8 = *(id *)(a2 + 64);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 7);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 8);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
  _Block_object_assign((void *)(a1 + 96), *(const void **)(a2 + 96), 8);
  _Block_object_assign((void *)(a1 + 104), *(const void **)(a2 + 104), 8);
  _Block_object_assign((void *)(a1 + 112), *(const void **)(a2 + 112), 8);
  _Block_object_assign((void *)(a1 + 120), *(const void **)(a2 + 120), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80r88r96r104r112r120r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 120), 8);
  _Block_object_dispose(*(const void **)(a1 + 112), 8);
  _Block_object_dispose(*(const void **)(a1 + 104), 8);
  _Block_object_dispose(*(const void **)(a1 + 96), 8);
  _Block_object_dispose(*(const void **)(a1 + 88), 8);
  _Block_object_dispose(*(const void **)(a1 + 80), 8);

}

void ___performUCRTOOB_block_invoke(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  NSError *v5;
  id v6;
  NSDictionary *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  double v18;
  void *v19;
  void *v20;
  NSDictionary *v21;
  id v22;
  char v23;
  id v24;
  id v25;
  id v26;
  NSURL *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  NSURL *v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  unsigned int v37;
  NSError *MobileActivationError;
  NSMutableString *v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  NSMutableString *v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;

  v55 = -1;
  if (!*(_QWORD *)(a1 + 32) || !*(_QWORD *)(a1 + 40) || !*(_QWORD *)(a1 + 56))
  {
    v5 = createMobileActivationError((uint64_t)"_performUCRTOOB_block_invoke", 786, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    v6 = 0;
    v7 = 0;
    v48 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v3 = 0;
    goto LABEL_8;
  }
  if (is_product_cellular())
  {
    v2 = *(_QWORD *)(a1 + 32);
    v54 = 0;
    v3 = copy_baseband_request_info(v2, 0, (NSError **)&v54);
    v4 = v54;

    if (!v3)
    {
      v5 = createMobileActivationError((uint64_t)"_performUCRTOOB_block_invoke", 795, CFSTR("com.apple.MobileActivation.ErrorDomain"), -22, v4, CFSTR("Failed to copy baseband info."));

      v6 = 0;
      v7 = 0;
      v48 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
LABEL_8:
      v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    v4 = 0;
  }
  v14 = objc_alloc((Class)NSUserDefaults);
  v15 = objc_msgSend(v14, "persistentDomainForName:", CFSTR("com.apple.mobileactivationd"));

  v16 = objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("NetworkTimeoutInterval"));
  v17 = isNSNumber(v16);

  v48 = v15;
  if (v17)
  {
    v12 = objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("NetworkTimeoutInterval"));
    objc_msgSend(v12, "doubleValue");
    if (v18 <= 0.0)
    {
      v5 = createMobileActivationError((uint64_t)"_performUCRTOOB_block_invoke", 806, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid network timeout requested: %@"), v12);

      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v3 = 0;
      goto LABEL_9;
    }
    v47 = v12;
  }
  else
  {
    v47 = 0;
  }
  v19 = *(void **)(a1 + 32);
  v20 = *(void **)(a1 + 48);
  v53 = v4;
  v21 = create_ucrt_info(v19, v20, &v53);
  v22 = v53;

  if (!v21)
  {
    v5 = createMobileActivationError((uint64_t)"_performUCRTOOB_block_invoke", 813, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v22, CFSTR("Failed to create UCRT info."));

    v6 = 0;
    v7 = 0;
LABEL_32:
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v3 = 0;
    goto LABEL_40;
  }
  v51 = v22;
  v52 = 0;
  v23 = createXMLRequest(v21, &v52, (NSError **)&v51);
  v6 = v52;
  v24 = v51;

  if ((v23 & 1) == 0)
  {
    v7 = v21;
    v5 = createMobileActivationError((uint64_t)"_performUCRTOOB_block_invoke", 818, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create request."));

    goto LABEL_32;
  }
  v25 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v26 = objc_msgSend(v25, "copyAnswer:", CFSTR("UniqueDeviceID"));

  v10 = isNSString(v26);
  if (v10)
  {
    v10 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ - %@"), CFSTR("iOS Device Activator (MobileActivation-1006)"), *(_QWORD *)(a1 + 40));
    if (v10)
    {
      v27 = +[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("https://tbsc.apple.com/oob/vend"));
      objc_msgSend(v6, "setURL:", v27);

      objc_msgSend(v6, "setValue:forHTTPHeaderField:", v10, CFSTR("User-Agent"));
      objc_msgSend(v6, "setValue:forHTTPHeaderField:", v26, CFSTR("x-jmet-deviceid"));
      if (v47)
      {
        objc_msgSend(v47, "doubleValue");
        objc_msgSend(v6, "setTimeoutInterval:");
      }
      v45 = v24;
      if (is_internal_build())
      {
        v28 = v15;
        v29 = objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("UCRTOOBOverrideURL"));
        v30 = isNSString(v29);

        if (v30)
        {
          v31 = objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("UCRTOOBOverrideURL"));
          v32 = +[NSURL URLWithString:](NSURL, "URLWithString:", v31);
          objc_msgSend(v6, "setURL:", v32);

        }
        v33 = objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("UseReverseProxy"));
        v34 = isNSNumber(v33);
        if (v34)
        {
          v35 = v34;
          v3 = v26;
          v7 = v21;
          v36 = objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("UseReverseProxy"));
          v37 = objc_msgSend(v36, "BOOLValue");

          if (v37)
          {
            v11 = copyReverseProxyDictionary(0, 0, 0);
LABEL_39:
            v39 = formatURLRequest(v6);
            v40 = copy_log_directory_path();
            v41 = objc_msgSend(v40, "stringByAppendingPathComponent:", CFSTR("ucrt_oob_request.txt"));
            -[NSMutableString writeToFile:atomically:encoding:error:](v39, "writeToFile:atomically:encoding:error:", v41, 0, 4, 0);

            v49 = v45;
            v50 = 0;
            v9 = talkToServerWithError(v6, 0, 0, v11, &v50, &v55, &v49);
            v8 = v50;
            v5 = (NSError *)v49;

            v44 = formatURLResponse(v9, v55, v8);
            v46 = copy_log_directory_path();
            v42 = objc_msgSend(v46, "stringByAppendingPathComponent:", CFSTR("ucrt_oob_response.txt"));
            -[NSMutableString writeToFile:atomically:encoding:error:](v44, "writeToFile:atomically:encoding:error:");

            goto LABEL_40;
          }
        }
        else
        {
          v3 = v26;
          v7 = v21;

        }
      }
      else
      {
        v3 = v26;
        v7 = v21;
      }
      v11 = 0;
      goto LABEL_39;
    }
    v3 = v26;
    v7 = v21;
    MobileActivationError = createMobileActivationError((uint64_t)"_performUCRTOOB_block_invoke", 830, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create user agent string."), v43);
  }
  else
  {
    v3 = v26;
    v7 = v21;
    MobileActivationError = createMobileActivationError((uint64_t)"_performUCRTOOB_block_invoke", 824, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query %@."), CFSTR("UniqueDeviceID"));
  }
  v5 = MobileActivationError;

  v8 = 0;
  v9 = 0;
  v11 = 0;
LABEL_40:
  v12 = v47;
LABEL_9:
  v13 = *(_QWORD *)(a1 + 56);
  if (v13)
    (*(void (**)(uint64_t, id, id, uint64_t, NSError *))(v13 + 16))(v13, v9, v8, v55, v5);

}

Class __getMSDKManagedDeviceClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!MobileStoreDemoKitLibraryCore_frameworkLibrary)
  {
    v4 = off_1002598C0;
    v5 = 0;
    MobileStoreDemoKitLibraryCore_frameworkLibrary = _sl_dlopen(&v4, &v3);
  }
  if (!MobileStoreDemoKitLibraryCore_frameworkLibrary)
    __getMSDKManagedDeviceClass_block_invoke_cold_1(&v3);
  if (v3)
    free(v3);
  result = objc_getClass("MSDKManagedDevice");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getMSDKManagedDeviceClass_block_invoke_cold_2();
  getMSDKManagedDeviceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void __performDCRTOOB_block_invoke(uint64_t a1)
{
  const __CFString *v2;
  uint64_t v3;
  char v4;
  NSError *v5;
  NSError *v6;
  _BOOL8 is_legacy;
  NSError *v8;
  char v9;
  id v10;
  id v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  __SecKey *v15;
  id v16;
  NSError *v17;
  id v18;
  NSArray *v19;
  NSNumber *v20;
  NSNumber *v21;
  NSError *v22;
  uint64_t v23;
  uint64_t *v24;
  const void *v25;
  void *v26;
  const char *v27;
  NSError *v28;
  NSNumber *v29;
  void *v30;
  id v31;
  int v32;
  _QWORD v33[4];
  id v34;
  uint64_t *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  CFTypeRef cf;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;

  v43 = 0;
  v44 = &v43;
  v45 = 0x2020000000;
  v46 = 0;
  cf = 0;
  if (!*(_QWORD *)(a1 + 32) || !*(_QWORD *)(a1 + 40))
  {
    v17 = createMobileActivationError((uint64_t)"performDCRTOOB_block_invoke", 395, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    v10 = 0;
    v16 = 0;
    v13 = 0;
    v11 = 0;
    goto LABEL_30;
  }
  if (*(_BYTE *)(a1 + 48))
    v2 = CFSTR("SDAK");
  else
    v2 = CFSTR("DAK");
  if (*(_BYTE *)(a1 + 48))
    v3 = 10;
  else
    v3 = 9;
  v41 = 0;
  v4 = libaks_system_key_operate(v3, 1, (NSError **)&v41);
  v5 = (NSError *)v41;
  v6 = v5;
  if ((v4 & 1) != 0)
  {
    v40 = v5;
    is_legacy = security_committed_uik_is_legacy(&v40);
    v8 = (NSError *)v40;

    if (v8)
      v9 = is_legacy;
    else
      v9 = 1;
    if ((v9 & 1) == 0)
    {
      v17 = createMobileActivationError((uint64_t)"performDCRTOOB_block_invoke", 419, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v8, CFSTR("Failed to query legacy UIK support."));
      v10 = 0;
      goto LABEL_27;
    }
    v39 = v8;
    v10 = libaks_system_key_collection(v3, 3, is_legacy, 0, (NSError **)&v39);
    v6 = (NSError *)v39;

    if (v10)
    {
      v38 = v6;
      v11 = libaks_system_key_get_public(v3, 3, (NSError **)&v38);
      v8 = (NSError *)v38;

      if (v11)
      {
        v12 = SecAccessControlCreate(0, &cf);
        v13 = (const void *)v12;
        if (v12)
        {
          v14 = kSecAttrAccessibleUntilReboot;
          if ((SecAccessControlSetProtection(v12, kSecAttrAccessibleUntilReboot, &cf) & 1) != 0)
          {
            v37 = v8;
            v15 = (__SecKey *)createReferenceKeyBlob(v13, 0, 0, &v37);
            v6 = (NSError *)v37;

            v44[3] = (uint64_t)v15;
            if (v15)
            {
              v36 = v6;
              v16 = security_create_external_representation(v15, 0, (NSError **)&v36);
              v17 = (NSError *)v36;

              if (v16)
              {
                v18 = objc_alloc_init((Class)NSMutableDictionary);
                if (v18)
                {
                  v19 = copy_required_dcrt_oids();
                  objc_msgSend(v18, "setObject:forKeyedSubscript:", v19, CFSTR("OIDSToInclude"));

                  objc_msgSend(v18, "setObject:forKeyedSubscript:", v10, CFSTR("ClientAttestationData"));
                  objc_msgSend(v18, "setObject:forKeyedSubscript:", v11, CFSTR("ClientAttestationPublicKey"));
                  v20 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", is_legacy);
                  objc_msgSend(v18, "setObject:forKeyedSubscript:", v20, CFSTR("scrtAttestation"));

                  if (*(_BYTE *)(a1 + 48))
                    v21 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 2);
                  else
                    v21 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 0);
                  v29 = v21;
                  objc_msgSend(v18, "setObject:forKeyedSubscript:", v21, CFSTR("CertType"));

                  v30 = *(void **)(a1 + 32);
                  v31 = copy_calling_process_name();
                  if (*(_BYTE *)(a1 + 48))
                    v32 = 3;
                  else
                    v32 = 1;
                  v33[0] = _NSConcreteStackBlock;
                  v33[1] = 3254779904;
                  v33[2] = __performDCRTOOB_block_invoke_2;
                  v33[3] = &__block_descriptor_48_e8_32bs40r_e34_v24__0__NSDictionary_8__NSError_16l;
                  v34 = *(id *)(a1 + 40);
                  v35 = &v43;
                  issueClientCertificateWithReferenceKey(v30, v31, v16, v32, v18, v33);

LABEL_35:
                  CFRelease(v13);
                  v26 = v18;
                  goto LABEL_36;
                }
                v28 = createMobileActivationError((uint64_t)"performDCRTOOB_block_invoke", 471, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate dictionary."));
              }
              else
              {
                v28 = createMobileActivationError((uint64_t)"performDCRTOOB_block_invoke", 463, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v17, CFSTR("Failed to encode RK as data."));
                v16 = 0;
              }
              v6 = v17;
              v17 = v28;
            }
            else
            {
              v17 = createMobileActivationError((uint64_t)"performDCRTOOB_block_invoke", 457, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v6, CFSTR("Failed to create reference key."));
              v16 = 0;
            }
            goto LABEL_29;
          }
          v17 = createMobileActivationError((uint64_t)"performDCRTOOB_block_invoke", 451, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, (void *)cf, CFSTR("Failed to set ACL protection to %@."), v14);
          v16 = 0;
        }
        else
        {
          v17 = createMobileActivationError((uint64_t)"performDCRTOOB_block_invoke", 446, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, (void *)cf, CFSTR("Failed to create access control."));
          v16 = 0;
          v13 = 0;
        }
        goto LABEL_28;
      }
      v17 = createMobileActivationError((uint64_t)"performDCRTOOB_block_invoke", 437, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v8, CFSTR("Failed to query %@ public key."), v2);
LABEL_27:
      v16 = 0;
      v13 = 0;
      v11 = 0;
LABEL_28:
      v6 = v8;
      goto LABEL_29;
    }
    v27 = "UIK";
    if (is_legacy)
      v27 = "SIK";
    v22 = createMobileActivationError((uint64_t)"performDCRTOOB_block_invoke", 429, CFSTR("com.apple.MobileActivation.ErrorDomain"), -11, v6, CFSTR("Failed to attest %@ to %s."), v2, v27);
  }
  else
  {
    v22 = createMobileActivationError((uint64_t)"performDCRTOOB_block_invoke", 407, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v5, CFSTR("Failed to bump %@."), v2);
  }
  v17 = v22;
  v10 = 0;
  v16 = 0;
  v13 = 0;
  v11 = 0;
LABEL_29:

LABEL_30:
  v23 = *(_QWORD *)(a1 + 40);
  if (v23)
    (*(void (**)(uint64_t, _QWORD, NSError *))(v23 + 16))(v23, 0, v17);
  v24 = v44;
  v25 = (const void *)v44[3];
  if (v25)
  {
    CFRelease(v25);
    v24 = v44;
  }
  v18 = 0;
  v26 = 0;
  v24[3] = 0;
  if (v13)
    goto LABEL_35;
LABEL_36:
  if (cf)
    CFRelease(cf);
  _Block_object_dispose(&v43, 8);

}

void sub_1000399D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __performDCRTOOB_block_invoke_2(uint64_t a1, id a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v5, v6);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(const void **)(v8 + 24);
  if (v9)
  {
    CFRelease(v9);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  }
  *(_QWORD *)(v8 + 24) = 0;

}

void __copy_helper_block_e8_32b40r(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 7);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 8);
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_3(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

id copySplunkDeviceIdentifiers(void *a1, _QWORD *a2)
{
  id v2;
  NSObject *v3;
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  __CFString *v22;
  id v23;
  id v24;
  NSNumber *v25;
  NSDictionary *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  NSError *v34;
  id v35;
  int v36;
  id v37;
  NSError *v38;
  NSError *v39;
  id v40;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v48;
  const __CFString *block;
  uint64_t v50;
  void (*v51)(uint64_t);
  const __CFString *v52;
  id v53;
  const __CFString *v54;
  const __CFString *v55;
  const __CFString *v56;
  const __CFString *v57;
  const __CFString *v58;
  const __CFString *v59;
  id v60;
  id *v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  void (*v64)(uint64_t);
  id v65;
  __CFString *v66;
  id v67;
  id v68;
  NSNumber *v69;
  void *v70;

  v2 = a1;
  v60 = 0;
  v61 = &v60;
  v62 = 0x3032000000;
  v63 = __Block_byref_object_copy__6;
  v64 = __Block_byref_object_dispose__6;
  v65 = 0;
  v3 = copySplunkUUIDQueue();
  if (v3)
  {
    block = (const __CFString *)_NSConcreteStackBlock;
    v50 = 3254779904;
    v51 = __copySplunkLogUUID_block_invoke;
    v52 = (const __CFString *)&__block_descriptor_48_e8_32s40r_e5_v8__0l;
    v53 = v2;
    v54 = (const __CFString *)&v60;
    dispatch_sync(v3, &block);

    v4 = v61[5];
  }
  else
  {
    v5 = copyLoggingHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      copySplunkDeviceIdentifiers_cold_1();

    v4 = 0;
  }
  _Block_object_dispose(&v60, 8);

  if (!v4)
  {
    v34 = createMobileActivationError((uint64_t)"copy_splunk_identifier_info", 165, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query %@."), CFSTR("uuidString"));
    v19 = 0;
    v32 = 0;
    v29 = 0;
    v22 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v48 = 0;
LABEL_30:
    v27 = 0;
LABEL_31:
    v34 = objc_retainAutorelease(v34);

    v35 = 0;
    v36 = 1;
    goto LABEL_32;
  }
  v6 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v48 = objc_msgSend(v6, "copyAnswer:", CFSTR("DeviceClass"));

  v7 = isNSString(v48);
  LODWORD(v6) = v7 == 0;

  if ((_DWORD)v6)
  {
    v34 = createMobileActivationError((uint64_t)"copy_splunk_identifier_info", 171, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query %@."), CFSTR("DeviceClass"));
    v19 = 0;
    v32 = 0;
    v29 = 0;
    v22 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    goto LABEL_30;
  }
  v8 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v46 = objc_msgSend(v8, "copyAnswer:", CFSTR("DeviceVariant"));

  v9 = isNSString(v46);
  LODWORD(v8) = v9 == 0;

  if ((_DWORD)v8)
  {
    v34 = createMobileActivationError((uint64_t)"copy_splunk_identifier_info", 177, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query %@."), CFSTR("DeviceVariant"));
    v19 = 0;
    v32 = 0;
    v29 = 0;
    v22 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    goto LABEL_30;
  }
  v10 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v45 = objc_msgSend(v10, "copyAnswer:", CFSTR("HWModelStr"));

  v11 = isNSString(v45);
  LODWORD(v10) = v11 == 0;

  if ((_DWORD)v10)
  {
    v34 = createMobileActivationError((uint64_t)"copy_splunk_identifier_info", 183, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query %@."), CFSTR("HWModelStr"));
    v19 = 0;
    v32 = 0;
    v29 = 0;
    v22 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    goto LABEL_30;
  }
  v12 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v44 = objc_msgSend(v12, "copyAnswer:", CFSTR("ProductType"));

  v13 = isNSString(v44);
  LODWORD(v12) = v13 == 0;

  if ((_DWORD)v12)
  {
    v34 = createMobileActivationError((uint64_t)"copy_splunk_identifier_info", 189, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query %@."), CFSTR("ProductType"));
    v19 = 0;
    v32 = 0;
    v29 = 0;
    v22 = 0;
    v42 = 0;
    v43 = 0;
    goto LABEL_30;
  }
  v14 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v43 = objc_msgSend(v14, "copyAnswer:", CFSTR("BuildVersion"));

  v15 = isNSString(v43);
  LODWORD(v14) = v15 == 0;

  if ((_DWORD)v14)
  {
    v34 = createMobileActivationError((uint64_t)"copy_splunk_identifier_info", 195, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query %@."), CFSTR("BuildVersion"));
    v19 = 0;
    v32 = 0;
    v29 = 0;
    v22 = 0;
    v42 = 0;
    goto LABEL_30;
  }
  v16 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v42 = objc_msgSend(v16, "copyAnswer:", CFSTR("ProductVersion"));

  v17 = isNSString(v42);
  LODWORD(v16) = v17 == 0;

  if ((_DWORD)v16)
  {
    v34 = createMobileActivationError((uint64_t)"copy_splunk_identifier_info", 201, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query %@."), CFSTR("ProductVersion"));
    v19 = 0;
LABEL_29:
    v32 = 0;
    v29 = 0;
    v22 = 0;
    goto LABEL_30;
  }
  v18 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v19 = objc_msgSend(v18, "copyAnswer:", CFSTR("SigningFuse"));

  v20 = isNSNumber(v19);
  LODWORD(v18) = v20 == 0;

  if ((_DWORD)v18)
  {
    v34 = createMobileActivationError((uint64_t)"copy_splunk_identifier_info", 207, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query %@."), CFSTR("SigningFuse"));
    goto LABEL_29;
  }
  v21 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v22 = (__CFString *)objc_msgSend(v21, "copyAnswer:", CFSTR("ReleaseType"));

  v23 = isNSString(v22);
  LODWORD(v21) = v23 == 0;

  if ((_DWORD)v21)
  {

    v22 = CFSTR("Customer");
  }
  v24 = objc_alloc((Class)NSMutableDictionary);
  block = CFSTR("deviceClass");
  v50 = (uint64_t)CFSTR("deviceVariant");
  v60 = v48;
  v61 = (id *)v46;
  v51 = (void (*)(uint64_t))CFSTR("hardwareModel");
  v52 = CFSTR("productType");
  v62 = (uint64_t)v45;
  v63 = (uint64_t (*)(uint64_t, uint64_t))v44;
  v53 = CFSTR("buildVersion");
  v54 = CFSTR("productVersion");
  v64 = (void (*)(uint64_t))v43;
  v65 = v42;
  v55 = CFSTR("releaseType");
  v56 = CFSTR("productionFused");
  v66 = v22;
  v67 = v19;
  v68 = v4;
  v57 = CFSTR("uuidString");
  v58 = CFSTR("hactivationEnabled");
  v25 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", use_hactivation());
  v69 = v25;
  v59 = CFSTR("diagnosticsCheckEnabled");
  v70 = &__kCFBooleanTrue;
  v26 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v60, &block, 11);
  v27 = objc_msgSend(v24, "initWithDictionary:", v26);

  if (!has_internal_diagnostics() && !is_internal_build())
  {
    v29 = 0;
    v32 = 0;
    goto LABEL_41;
  }
  v28 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v29 = objc_msgSend(v28, "copyAnswer:", CFSTR("SerialNumber"));

  v30 = isNSString(v29);
  LODWORD(v28) = v30 == 0;

  if ((_DWORD)v28)
  {
    v34 = createMobileActivationError((uint64_t)"copy_splunk_identifier_info", 233, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query %@."), CFSTR("SerialNumber"));
    v32 = 0;
    goto LABEL_31;
  }
  objc_msgSend(v27, "setObject:forKeyedSubscript:", v29, CFSTR("serialNumber"));
  v31 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v32 = objc_msgSend(v31, "copyAnswer:", CFSTR("UniqueDeviceID"));

  v33 = isNSString(v32);
  LODWORD(v31) = v33 == 0;

  if ((_DWORD)v31)
  {
    v34 = createMobileActivationError((uint64_t)"copy_splunk_identifier_info", 241, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query %@."), CFSTR("UniqueDeviceID"));
    goto LABEL_31;
  }
  objc_msgSend(v27, "setObject:forKeyedSubscript:", v32, CFSTR("uniqueDeviceID"));
LABEL_41:
  v35 = v27;
  v34 = 0;
  if (!v35)
  {
    v27 = 0;
    goto LABEL_31;
  }
  v27 = v35;
  v36 = 0;
LABEL_32:
  v37 = v35;

  v38 = v34;
  if (v36)
  {
    v39 = createAndLogError((uint64_t)"copySplunkDeviceIdentifiers", 828, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v38, CFSTR("Failed to query splunk identifier info."));

    v40 = 0;
    v38 = v39;
  }
  else
  {
    v40 = v37;
  }
  if (a2 && !v40)
    *a2 = objc_retainAutorelease(v38);

  return v40;
}

void sub_10003A59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

id copySplunkDailyStatistics(void *a1, NSError **a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  NSFileManager *v7;
  unsigned int v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  NSFileManager *v13;
  unsigned int v14;
  void *v15;
  id v16;
  id v17;
  NSFileManager *v18;
  unsigned int v19;
  void *v20;
  id v21;
  id v22;
  NSFileManager *v23;
  unsigned __int8 v24;
  void *v25;
  NSError *MobileActivationError;
  NSError *v27;
  NSNumber *v28;
  NSNumber *v29;
  NSNumber *v30;
  NSNumber *v31;
  NSError *v32;
  void *v33;
  NSError *v34;
  id v35;
  void *v36;
  id v37;
  NSError *v38;
  NSError *v39;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  _BOOL8 v51;
  id v52;
  NSNumber *v53;
  _BOOL8 IsHSA2;
  id v55;
  _BOOL8 IsEnabled;
  id v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  NSError **v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;

  v3 = a1;
  v4 = data_ark_copy(v3, 0, CFSTR("ActivationState"));
  v5 = copy_ucrt_path();
  v6 = objc_msgSend(v5, "stringByAppendingPathComponent:", CFSTR("ucrt.pem"));

  v63 = a2;
  v71 = v4;
  if (!v6)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"copy_splunk_daily_statistics_info", 307, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create UCRT file path."));
LABEL_18:
    v27 = MobileActivationError;
    v69 = 0;
    v70 = 0;
    v67 = 0;
    v68 = 0;
    v66 = 0;
    v17 = 0;
LABEL_19:
    v64 = 0;
    v65 = 0;
    v9 = 0;
    v28 = 0;
    goto LABEL_20;
  }
  v7 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v8 = -[NSFileManager fileExistsAtPath:](v7, "fileExistsAtPath:", v6);

  v9 = &__kCFBooleanFalse;
  if (v8)
    v10 = &__kCFBooleanTrue;
  else
    v10 = &__kCFBooleanFalse;
  v11 = copy_dcrt_path();
  v12 = objc_msgSend(v11, "stringByAppendingPathComponent:", CFSTR("dcrt.der"));

  if (!v12)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"copy_splunk_daily_statistics_info", 321, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create DCRT file path."));
    goto LABEL_18;
  }
  v13 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v14 = -[NSFileManager fileExistsAtPath:](v13, "fileExistsAtPath:", v12);

  if (v14)
    v15 = &__kCFBooleanTrue;
  else
    v15 = &__kCFBooleanFalse;
  v62 = v15;
  v16 = copy_dcrt_path();
  v17 = objc_msgSend(v16, "stringByAppendingPathComponent:", CFSTR("sdcrt.der"));

  if (!v17)
  {
    v27 = createMobileActivationError((uint64_t)"copy_splunk_daily_statistics_info", 335, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create SDCRT file path."));
    v69 = 0;
    v70 = 0;
    v67 = 0;
    v68 = 0;
    v66 = 0;
    goto LABEL_19;
  }
  v18 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v19 = -[NSFileManager fileExistsAtPath:](v18, "fileExistsAtPath:", v17);

  if (v19)
    v20 = &__kCFBooleanTrue;
  else
    v20 = &__kCFBooleanFalse;
  v60 = v20;
  v21 = copy_suinfo_directory_path();
  v22 = objc_msgSend(v21, "stringByAppendingPathComponent:", CFSTR("psc.sui"));

  v64 = v22;
  v61 = v10;
  if (v22
    && (v23 = +[NSFileManager defaultManager](NSFileManager, "defaultManager"),
        v24 = -[NSFileManager fileExistsAtPath:isDirectory:](v23, "fileExistsAtPath:isDirectory:", v22, 0),
        v23,
        (v24 & 1) != 0))
  {
    v25 = &__kCFBooleanTrue;
  }
  else
  {
    v25 = &__kCFBooleanFalse;
  }
  v58 = v25;
  v70 = data_ark_copy(v3, 0, CFSTR("CollectionLastPerformed"));
  v41 = data_ark_copy(v3, 0, CFSTR("UCRTOOBLastPerformed"));
  v69 = isNSString(v41);

  v42 = data_ark_copy(v3, 0, CFSTR("DCRTOOBLastPerformed"));
  v68 = isNSString(v42);

  v43 = data_ark_copy(v3, 0, CFSTR("SDCRTOOBLastPerformed"));
  v67 = isNSString(v43);

  v44 = data_ark_copy(v3, 0, CFSTR("LastActivated"));
  v66 = isNSString(v44);

  v45 = data_ark_copy(v3, 0, CFSTR("UCRTHealingRequired"));
  v46 = isNSNumber(v45);

  if (v46)
    v47 = v46;
  else
    v47 = &__kCFBooleanFalse;
  v65 = v47;
  v48 = data_ark_copy(v3, 0, CFSTR("UIKUpgradeRequired"));
  v49 = isNSNumber(v48);

  if (v49)
    v9 = v49;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  if ((os_variant_is_darwinos(objc_msgSend(CFSTR("com.apple.mobileactivationd"), "UTF8String", v58)) & 1) == 0)
  {
    v74 = 0;
    v51 = hasPrimaryICloudAccount(&v74);
    v52 = v74;
    v53 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v51);
    v28 = v53;
    if (!v52)
    {
      if (-[NSNumber BOOLValue](v53, "BOOLValue"))
      {
        v73 = 0;
        IsHSA2 = primaryICloudAccountIsHSA2(&v73);
        v55 = v73;
        v29 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", IsHSA2);
        if (v55)
        {
          v27 = createMobileActivationError((uint64_t)"copy_splunk_daily_statistics_info", 478, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v55, CFSTR("Failed to query primary iCloud account security state."));

          goto LABEL_21;
        }
      }
      else
      {
        v29 = 0;
      }
      v72 = 0;
      IsEnabled = FindMyDeviceIsEnabled(&v72);
      v57 = v72;
      v30 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", IsEnabled);
      if (!v57)
        goto LABEL_40;
      v27 = createMobileActivationError((uint64_t)"copy_splunk_daily_statistics_info", 487, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v57, CFSTR("Failed to query FindMy state."));

LABEL_22:
      v31 = 0;
LABEL_23:
      v32 = objc_retainAutorelease(v27);

      v33 = 0;
      goto LABEL_24;
    }
    v27 = createMobileActivationError((uint64_t)"copy_splunk_daily_statistics_info", 469, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v52, CFSTR("Failed to query primary iCloud account state."));

LABEL_20:
    v29 = 0;
LABEL_21:
    v30 = 0;
    goto LABEL_22;
  }
LABEL_40:
  v31 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", is_dsp_device());
  v50 = objc_alloc_init((Class)NSMutableDictionary);
  if (!v50)
  {
    v27 = createMobileActivationError((uint64_t)"copy_splunk_daily_statistics_info", 498, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate dictionary."));
    goto LABEL_23;
  }
  v33 = v50;
  if (v71)
    objc_msgSend(v50, "setObject:forKeyedSubscript:", v71, CFSTR("activationState"));
  objc_msgSend(v33, "setObject:forKeyedSubscript:", v61, CFSTR("ucrtAvailable"));
  objc_msgSend(v33, "setObject:forKeyedSubscript:", v59, CFSTR("pcrtAvailable"));
  objc_msgSend(v33, "setObject:forKeyedSubscript:", v62, CFSTR("dcrtAvailable"));
  objc_msgSend(v33, "setObject:forKeyedSubscript:", v60, CFSTR("sdcrtAvailable"));
  if (v70)
    objc_msgSend(v33, "setObject:forKeyedSubscript:", v70, CFSTR("collectionLastPerformedBuild"));
  if (v69)
    objc_msgSend(v33, "setObject:forKeyedSubscript:", v69, CFSTR("ucrtOOBLastPerformedBuild"));
  if (v68)
    objc_msgSend(v33, "setObject:forKeyedSubscript:", v68, CFSTR("dcrtOOBLastPerformedBuild"));
  if (v67)
    objc_msgSend(v33, "setObject:forKeyedSubscript:", v67, CFSTR("sdcrtOOBLastPerformedBuild"));
  if (v66)
    objc_msgSend(v33, "setObject:forKeyedSubscript:", v66, CFSTR("activationLastPerformedBuild"));
  objc_msgSend(v33, "setObject:forKeyedSubscript:", v65, CFSTR("ucrtHealingRequired"));
  objc_msgSend(v33, "setObject:forKeyedSubscript:", v9, CFSTR("uikUpgradeRequired"));
  if (v28)
    objc_msgSend(v33, "setObject:forKeyedSubscript:", v28, CFSTR("iCloudEnabled"));
  if (v29)
    objc_msgSend(v33, "setObject:forKeyedSubscript:", v29, CFSTR("iCloudHSA2Enabled"));
  if (v30)
    objc_msgSend(v33, "setObject:forKeyedSubscript:", v30, CFSTR("findMyEnabled"));
  if (v31)
    objc_msgSend(v33, "setObject:forKeyedSubscript:", v31, CFSTR("DSPDevice"));
  v32 = 0;
LABEL_24:

  v34 = v32;
  if (v33)
  {
    v35 = objc_alloc_init((Class)NSMutableDictionary);
    if (v35)
    {
      v36 = v35;
      objc_msgSend(v35, "addEntriesFromDictionary:", v33);
      v37 = v36;
      goto LABEL_32;
    }
    v38 = createAndLogError((uint64_t)"copySplunkDailyStatistics", 911, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate dictionary."));
  }
  else
  {
    v38 = createAndLogError((uint64_t)"copySplunkDailyStatistics", 882, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v34, CFSTR("Failed to query daily splunk info."));
  }
  v39 = v38;

  if (v63)
  {
    v34 = objc_retainAutorelease(v39);
    v37 = 0;
    *v63 = v34;
  }
  else
  {
    v37 = 0;
    v34 = v39;
  }
LABEL_32:

  return v37;
}

id copySortedSplunkFileList()
{
  id v0;
  id v1;
  NSArray *v2;
  NSArray *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  id v9;
  void *v10;
  id v11;
  unsigned int v12;
  id v13;
  id v14;
  NSArray *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v0 = objc_alloc_init((Class)NSMutableArray);
  if (v0)
  {
    v1 = copy_splunk_directory_path();
    v2 = copy_sorted_file_list(v1);

    if (v2)
    {
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v16 = v2;
      v3 = v2;
      v4 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      if (v4)
      {
        v5 = v4;
        v6 = *(_QWORD *)v18;
        do
        {
          for (i = 0; i != v5; i = (char *)i + 1)
          {
            if (*(_QWORD *)v18 != v6)
              objc_enumerationMutation(v3);
            v8 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
            v9 = isNSURL(v8);
            if (v9)
            {
              v10 = v9;
              v11 = objc_msgSend(v8, "pathExtension");
              v12 = objc_msgSend(v11, "isEqualToString:", CFSTR("splunklog"));

              if (v12)
              {
                v13 = objc_msgSend(v8, "path");
                objc_msgSend(v0, "addObject:", v13);

              }
            }
          }
          v5 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        }
        while (v5);
      }

      v2 = v16;
    }
    v14 = v0;

  }
  return v0;
}

void writeSplunkLog(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6, void *a7, uint64_t a8, uint64_t a9)
{
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  NSObject *v19;
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;

  v15 = a1;
  v16 = a6;
  v17 = a7;
  v30 = 0;
  if (DiagnosticLogSubmissionEnabled())
  {
    v18 = copySplunkQueue();
    if (v18)
    {
      v19 = v18;
      if (v17)
      {
        v30 = &a9;
        v20 = objc_msgSend(objc_alloc((Class)NSMutableString), "initWithFormat:arguments:", v17, &a9);
      }
      else
      {
        v20 = 0;
      }
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3254779904;
      v22[2] = __writeSplunkLog_block_invoke;
      v22[3] = &__block_descriptor_84_e8_32s40s48s_e5_v8__0l;
      v23 = v15;
      v26 = a2;
      v27 = a3;
      v29 = a5;
      v24 = v16;
      v25 = v20;
      v28 = a4;
      v21 = v20;
      dispatch_async(v19, v22);

    }
    else
    {
      v19 = copyLoggingHandle();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
        copySplunkDeviceIdentifiers_cold_1();
    }

  }
}

id copySplunkQueue()
{
  if (copySplunkQueue_onceToken != -1)
    dispatch_once(&copySplunkQueue_onceToken, &__block_literal_global_110);
  return (id)copySplunkQueue_splunkQueue;
}

void __writeSplunkLog_block_invoke(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSFileManager *v4;
  NSDictionary *v5;
  unsigned __int8 v6;
  id v7;
  NSDate *v8;
  double v9;
  NSNumber *v10;
  id v11;
  void *v12;
  void *v13;
  NSNumber *v14;
  id v15;
  NSNumber *v16;
  NSNumber *v17;
  NSNumber *v18;
  NSString *v19;
  NSNumber *v20;
  NSNumber *v21;
  NSNumber *v22;
  uint64_t v23;
  NSString *v24;
  NSData *v25;
  NSObject *v26;
  NSData *v27;
  NSObject *v28;
  NSNumber *v29;
  NSObject *v30;
  NSObject *v31;
  void *v32;
  _BOOL8 v33;
  NSNumber *v34;
  NSObject *v35;
  NSNumber *v36;
  NSObject *v37;
  _BOOL8 IsHSA2;
  NSObject *v39;
  NSNumber *v40;
  id v41;
  id v42;
  NSObject *v43;
  NSFileManager *v44;
  id v45;
  _BOOL8 IsEnabled;
  id v47;
  id v48;
  NSDictionary *v49;
  uint64_t v50;
  uint64_t v51;
  NSDictionary *v52;
  void *v53;
  NSFileManager *v54;
  id v55;
  id v56;
  id v57;
  id v58;
  NSFileManager *v59;
  id v60;
  id v61;
  id v62;
  void *v63;
  id v64;
  NSObject *v65;
  NSFileManager *v66;
  void *v67;
  NSObject *v68;
  NSObject *v69;
  const char *v70;
  uint32_t v71;
  NSObject *v72;
  id v73;
  id v74;
  unsigned int v75;
  NSMutableArray *v76;
  id v77;
  void *v78;
  NSMutableArray *v79;
  id v80;
  id v81;
  NSUUID *v82;
  NSString *v83;
  NSData *v84;
  id v85;
  char v86;
  id v87;
  const char *v88;
  void *v89;
  NSObject *v90;
  void *v91;
  NSObject *v92;
  NSObject *v93;
  id v94;
  NSNumber *v95;
  NSNumber *v96;
  NSNumber *v97;
  NSObject *v98;
  NSData *v99;
  NSNumber *v100;
  id v101;
  uint64_t v102;
  NSNumber *v103;
  id obj;
  _QWORD handler[4];
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  uint8_t buf[4];
  void *v124;
  __int16 v125;
  id v126;
  _BYTE v127[128];
  uint8_t v128[4];
  uint64_t v129;
  NSFileAttributeKey v130;
  _UNKNOWN **v131;

  if (!*(_QWORD *)(a1 + 32))
  {
    v3 = copyLoggingHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      __writeSplunkLog_block_invoke_cold_1();
    goto LABEL_59;
  }
  v2 = copy_splunk_directory_path();
  if (!v2)
  {
    v3 = copyLoggingHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      __writeSplunkLog_block_invoke_cold_2();
    goto LABEL_59;
  }
  v3 = v2;
  v4 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v130 = NSFilePosixPermissions;
  v131 = &off_1002716E8;
  v5 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v131, &v130, 1);
  v122 = 0;
  v6 = -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:](v4, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v3, 1, v5, &v122);
  v7 = v122;

  if ((v6 & 1) == 0)
  {
    v28 = copyLoggingHandle();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
      __writeSplunkLog_block_invoke_cold_14();
    v29 = (NSNumber *)v28;
    goto LABEL_57;
  }
  v8 = +[NSDate date](NSDate, "date");
  -[NSDate timeIntervalSince1970](v8, "timeIntervalSince1970");
  v10 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", 1000 * (uint64_t)v9);

  v11 = objc_alloc_init((Class)NSMutableDictionary);
  if (!v11)
  {
    v30 = copyLoggingHandle();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_FAULT))
      __writeSplunkLog_block_invoke_cold_3();

    v29 = v10;
    goto LABEL_57;
  }
  v12 = v11;
  v13 = *(void **)(a1 + 32);
  v121 = v7;
  v14 = (NSNumber *)copySplunkDeviceIdentifiers(v13, &v121);
  v15 = v121;

  if (!v14)
  {
    v31 = copyLoggingHandle();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
      __writeSplunkLog_block_invoke_cold_4();

    v32 = v15;
    goto LABEL_58;
  }
  if (*(_QWORD *)(a1 + 40))
    objc_msgSend(v12, "addEntriesFromDictionary:");
  if ((os_variant_is_darwinos(objc_msgSend(CFSTR("com.apple.mobileactivationd"), "UTF8String")) & 1) != 0)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
  }
  else
  {
    v120 = v15;
    v33 = hasPrimaryICloudAccount(&v120);
    v7 = v120;

    v34 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v33);
    v18 = v34;
    if (v7)
    {
      v35 = copyLoggingHandle();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_FAULT))
        __writeSplunkLog_block_invoke_cold_13();
      v36 = (NSNumber *)v35;
      goto LABEL_56;
    }
    if (-[NSNumber BOOLValue](v34, "BOOLValue"))
    {
      v119 = 0;
      IsHSA2 = primaryICloudAccountIsHSA2(&v119);
      v7 = v119;
      v103 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", IsHSA2);
      if (v7)
      {
        v39 = copyLoggingHandle();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
          __writeSplunkLog_block_invoke_cold_12();
        v40 = (NSNumber *)v39;
        goto LABEL_55;
      }
    }
    else
    {
      v103 = 0;
    }
    v118 = 0;
    IsEnabled = FindMyDeviceIsEnabled(&v118);
    v7 = v118;
    v16 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", IsEnabled);
    if (v7)
    {
      v37 = copyLoggingHandle();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
        __writeSplunkLog_block_invoke_cold_11();
      goto LABEL_53;
    }
    v15 = 0;
    v17 = v103;
  }
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v18, CFSTR("iCloudEnabled"));
  v103 = v17;
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v17, CFSTR("iCloudHSA2Enabled"));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v16, CFSTR("findMyEnabled"));
  objc_msgSend(v12, "addEntriesFromDictionary:", v14);
  v19 = -[NSNumber stringValue](v10, "stringValue");
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v19, CFSTR("eventTime"));

  v20 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 56));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v20, CFSTR("splunkErrorCategory"));

  v21 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 64));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v21, CFSTR("spiErrorCode"));

  objc_msgSend(v12, "setObject:forKeyedSubscript:", CFSTR("1006"), CFSTR("projectVersion"));
  v22 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v22, CFSTR("lineNumber"));

  v102 = a1;
  v23 = *(_QWORD *)(a1 + 48);
  if (v23)
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v23, CFSTR("errorString"));
  if (*(_QWORD *)(a1 + 72))
  {
    v24 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v24, CFSTR("functionName"));

  }
  v117 = 0;
  v25 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v12, 200, 0, &v117);
  v7 = v117;

  if (!v25)
  {
    v37 = copyLoggingHandle();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
      __writeSplunkLog_block_invoke_cold_5();
LABEL_53:
    v27 = (NSData *)v37;
LABEL_54:

    v40 = v16;
LABEL_55:

    v36 = v103;
LABEL_56:

    v29 = v14;
LABEL_57:

    v32 = v7;
LABEL_58:

    goto LABEL_59;
  }
  if (-[NSData length](v25, "length") > 0x100000)
  {
    v26 = copyLoggingHandle();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
      __writeSplunkLog_block_invoke_cold_6(v25, v26);

    v27 = v25;
    goto LABEL_54;
  }
  v99 = v25;
  v41 = copySortedSplunkFileList();
  v100 = v16;
  v95 = v18;
  if (v41)
  {
    v42 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithArray:", v41);
    if ((unint64_t)objc_msgSend(v42, "count") >= 0x15)
    {
      do
      {
        v43 = copyLoggingHandle();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_FAULT))
          __writeSplunkLog_block_invoke_cold_10(v128, v42, &v129, v43);

        v44 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
        v45 = objc_msgSend(v42, "lastObject");
        -[NSFileManager removeItemAtPath:error:](v44, "removeItemAtPath:error:", v45, 0);

        objc_msgSend(v42, "removeLastObject");
      }
      while ((unint64_t)objc_msgSend(v42, "count") > 0x14);
    }
  }
  else
  {
    v42 = 0;
  }
  v94 = v41;
  v96 = v10;
  v97 = v14;
  v101 = v12;
  v98 = v3;
  v116 = 0u;
  v114 = 0u;
  v115 = 0u;
  v113 = 0u;
  obj = v42;
  v47 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v113, v127, 16);
  if (v47)
  {
    v48 = v47;
    v49 = 0;
    v50 = *(_QWORD *)v114;
LABEL_63:
    v51 = 0;
    while (1)
    {
      v52 = v49;
      if (*(_QWORD *)v114 != v50)
        objc_enumerationMutation(obj);
      v53 = *(void **)(*((_QWORD *)&v113 + 1) + 8 * v51);
      v54 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
      v112 = v7;
      v49 = -[NSFileManager attributesOfItemAtPath:error:](v54, "attributesOfItemAtPath:error:", v53, &v112);
      v55 = v112;

      if (v49)
      {
        v56 = -[NSDictionary objectForKeyedSubscript:](v49, "objectForKeyedSubscript:", NSFileSize);
        v57 = isNSNumber(v56);

        if (v57)
        {
          v58 = objc_alloc((Class)NSData);
          v111 = v55;
          v59 = (NSFileManager *)objc_msgSend(v58, "initWithContentsOfFile:options:error:", v53, 0, &v111);
          v60 = v111;

          if (v59)
          {
            v109 = 0;
            v61 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v59, 0, 0, &v109);
            v7 = v109;

            v62 = isNSArray(v61);
            if (v62)
            {
              v63 = v62;
              v64 = objc_msgSend(v61, "count");

              if ((unint64_t)v64 < 0x3E9)
              {
                v74 = -[NSDictionary objectForKeyedSubscript:](v49, "objectForKeyedSubscript:", NSFileSize);
                v75 = objc_msgSend(v74, "integerValue");

                v76 = +[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v61);
                v77 = v53;

                if (v76
                  && -[NSMutableArray count](v76, "count") != (id)1000
                  && -[NSData length](v99, "length") + v75 <= 0x100000)
                {
                  -[NSMutableArray addObject:](v76, "addObject:", v101);
                  goto LABEL_96;
                }
                goto LABEL_95;
              }
            }
            v65 = copyLoggingHandle();
            if (os_log_type_enabled(v65, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 138412546;
              v124 = v53;
              v125 = 2112;
              v126 = v7;
              _os_log_fault_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_FAULT, "Invalid splunk file (%@): %@", buf, 0x16u);
            }

            v66 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
            -[NSFileManager removeItemAtPath:error:](v66, "removeItemAtPath:error:", 0, 0);

            v67 = v61;
          }
          else
          {
            v72 = copyLoggingHandle();
            if (os_log_type_enabled(v72, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 138412546;
              v124 = v53;
              v125 = 2112;
              v126 = v60;
              _os_log_fault_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_FAULT, "Failed to load %@: %@", buf, 0x16u);
            }

            v59 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
            v110 = v60;
            -[NSFileManager removeItemAtPath:error:](v59, "removeItemAtPath:error:", v53, &v110);
            v7 = v110;
            v67 = v60;
          }

          goto LABEL_83;
        }
        v68 = copyLoggingHandle();
        if (os_log_type_enabled(v68, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 138412290;
          v124 = v53;
          v69 = v68;
          v70 = "Failed to retrieve size of %@.";
          v71 = 12;
          goto LABEL_86;
        }
      }
      else
      {
        v68 = copyLoggingHandle();
        if (os_log_type_enabled(v68, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 138412546;
          v124 = v53;
          v125 = 2112;
          v126 = v55;
          v69 = v68;
          v70 = "Failed to retrieve attributes for %@: (%@)";
          v71 = 22;
LABEL_86:
          _os_log_fault_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_FAULT, v70, buf, v71);
        }
      }

      v59 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
      -[NSFileManager removeItemAtPath:error:](v59, "removeItemAtPath:error:", v53, 0);
      v7 = v55;
LABEL_83:

      if (v48 == (id)++v51)
      {
        v73 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v113, v127, 16);
        v48 = v73;
        if (v73)
          goto LABEL_63;
        goto LABEL_94;
      }
    }
  }
  v49 = 0;
LABEL_94:

  v76 = 0;
  v77 = 0;
LABEL_95:
  v78 = v77;
  v79 = v76;
  v80 = objc_alloc((Class)NSString);
  v81 = copy_splunk_directory_path();
  v82 = +[NSUUID UUID](NSUUID, "UUID");
  v83 = -[NSUUID UUIDString](v82, "UUIDString");
  v77 = objc_msgSend(v80, "initWithFormat:", CFSTR("%@/%@.splunklog"), v81, v83);

  v76 = (NSMutableArray *)objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithObjects:", v101, 0);
  if (v76)
  {
LABEL_96:
    v108 = 0;
    v84 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v76, 200, 0, &v108);
    v85 = v108;

    if (v84)
    {
      v107 = v85;
      v86 = store_data(v77, v84, &v107);
      v87 = v107;

      if ((v86 & 1) != 0)
      {
        v88 = (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.splunklogging"), "UTF8String");
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3254779904;
        handler[2] = __writeSplunkLog_block_invoke_34;
        handler[3] = &__block_descriptor_40_e8_32s_e33_v16__0__NSObject_OS_xpc_object__8l;
        v106 = *(id *)(v102 + 32);
        xpc_activity_register(v88, XPC_ACTIVITY_CHECK_IN, handler);

        v89 = v94;
      }
      else
      {
        v93 = copyLoggingHandle();
        if (os_log_type_enabled(v93, OS_LOG_TYPE_FAULT))
          __writeSplunkLog_block_invoke_cold_9();

        v89 = v94;
      }

      v91 = v87;
    }
    else
    {
      v92 = copyLoggingHandle();
      if (os_log_type_enabled(v92, OS_LOG_TYPE_FAULT))
        __writeSplunkLog_block_invoke_cold_8();

      v91 = v85;
    }
  }
  else
  {
    v90 = copyLoggingHandle();
    if (os_log_type_enabled(v90, OS_LOG_TYPE_FAULT))
      __writeSplunkLog_block_invoke_cold_7();

    v91 = v7;
  }

  v3 = v98;
LABEL_59:

}

void __writeSplunkLog_block_invoke_34(uint64_t a1, id a2)
{
  _xpc_activity_s *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t v12;

  v3 = (_xpc_activity_s *)a2;
  if (xpc_activity_get_state(v3) == 2 && xpc_activity_should_defer(v3))
  {
    if (xpc_activity_set_state(v3, 3))
      goto LABEL_11;
    v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __writeSplunkLog_block_invoke_34_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);

  }
  v12 = xpc_activity_copy_criteria(v3);
  if (!v12 || xpc_activity_get_state(v3) == 2)
    splunk_activity_handler(*(void **)(a1 + 32), v12 == 0);

LABEL_11:
}

void splunk_activity_handler(void *a1, int a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  _QWORD block[4];
  id v12;

  v3 = a1;
  v4 = copySplunkQueue();
  if (v4)
  {
    if (a2)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3254779904;
      block[2] = __splunk_activity_handler_block_invoke;
      block[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
      v12 = v3;
      v5 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
      dispatch_async(v4, v5);
      v6 = v12;
    }
    else
    {
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3254779904;
      v8[2] = __splunk_activity_handler_block_invoke_38;
      v8[3] = &__block_descriptor_48_e8_32s40s_e5_v8__0l;
      v9 = v3;
      v7 = v4;
      v10 = v7;
      v5 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, v8);
      dispatch_async(v7, v5);

      v6 = v9;
    }

  }
  else
  {
    v5 = copyLoggingHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      copySplunkDeviceIdentifiers_cold_1();
  }

}

void __splunk_activity_handler_block_invoke(uint64_t a1)
{
  data_ark_remove(*(void **)(a1 + 32), 0, CFSTR("SplunkRetryAttempt"));
  scheduleXPCActivity(*(void **)(a1 + 32), (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.splunklogging"), "UTF8String"), 5u, 1, 0x400u, 0x400u, &__block_literal_global_6);
}

void __splunk_activity_handler_block_invoke_2(id a1, DataArk *a2)
{
  splunk_activity_handler(a2, 0);
}

void __splunk_activity_handler_block_invoke_38(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id *v9;
  id v10;
  id *v11;
  NSFileManager *v12;
  id v13;
  _BOOL4 v14;
  NSObject *v15;
  NSFileManager *v16;
  NSObject *v17;
  id v18;
  id v19;
  id v20;
  NSFileManager *v21;
  id v22;
  NSFileManager *v23;
  NSObject *v24;
  id v25;
  _QWORD block[4];
  id v27;
  NSFileManager *v28;
  id v29;
  id v30;
  id v31;
  uint64_t *v32;
  id v33;
  id obj;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  id *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  void (*v43)(uint64_t);
  id v44;
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  id v48;
  _BYTE v49[128];

  v39 = 0;
  v40 = (id *)&v39;
  v41 = 0x3032000000;
  v42 = __Block_byref_object_copy__6;
  v43 = __Block_byref_object_dispose__6;
  v44 = 0;
  v2 = copySortedSplunkFileList();
  v25 = v2;
  if (!v2)
  {
    v20 = 0;
    v4 = 0;
    goto LABEL_24;
  }
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v3 = objc_msgSend(v2, "reverseObjectEnumerator");
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v35, v49, 16);
  if (!v4)
  {
LABEL_18:
    v20 = 0;
    v21 = 0;
LABEL_22:

    goto LABEL_25;
  }
  v5 = *(_QWORD *)v36;
LABEL_4:
  v6 = 0;
  while (1)
  {
    if (*(_QWORD *)v36 != v5)
      objc_enumerationMutation(v3);
    v7 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * v6);
    v8 = objc_alloc((Class)NSData);
    v9 = v40 + 5;
    obj = v40[5];
    v10 = objc_msgSend(v8, "initWithContentsOfFile:options:error:", v7, 0, &obj);
    objc_storeStrong(v9, obj);
    if (!v10)
    {
      v17 = copyLoggingHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      {
        v19 = v40[5];
        *(_DWORD *)buf = 138412546;
        v46 = v7;
        v47 = 2112;
        v48 = v19;
        _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Failed to load %@: %@", buf, 0x16u);
      }

      v12 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
      -[NSFileManager removeItemAtPath:error:](v12, "removeItemAtPath:error:", v7, 0);
      goto LABEL_16;
    }
    v11 = v40;
    v33 = 0;
    v12 = (NSFileManager *)+[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v10, 0, 0, &v33);
    objc_storeStrong(v11 + 5, v33);
    v13 = isNSArray(v12);
    if (v13)
    {
      v14 = (unint64_t)-[NSFileManager count](v12, "count") > 0x3E8;

      if (!v14)
        break;
    }
    v15 = copyLoggingHandle();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
    {
      v18 = v40[5];
      *(_DWORD *)buf = 138412546;
      v46 = v7;
      v47 = 2112;
      v48 = v18;
      _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Invalid splunk file (%@): %@", buf, 0x16u);
    }

    v16 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
    -[NSFileManager removeItemAtPath:error:](v16, "removeItemAtPath:error:", v7, 0);

LABEL_16:
    if (v4 == (id)++v6)
    {
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v35, v49, 16);
      if (v4)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  v4 = v7;

  if (v12)
  {
    v22 = objc_msgSend(v4, "stringByAppendingString:", CFSTR(".inflight"));
    v23 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
    -[NSFileManager moveItemAtPath:toPath:error:](v23, "moveItemAtPath:toPath:error:", v4, v22, 0);

    v24 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3254779904;
    block[2] = __splunk_activity_handler_block_invoke_41;
    block[3] = &__block_descriptor_80_e8_32s40s48s56s64s72r_e5_v8__0l;
    v20 = v22;
    v27 = v20;
    v21 = v12;
    v28 = v21;
    v4 = v4;
    v29 = v4;
    v32 = &v39;
    v30 = *(id *)(a1 + 32);
    v31 = *(id *)(a1 + 40);
    dispatch_async(v24, block);

    v3 = v27;
    goto LABEL_22;
  }
  v20 = 0;
LABEL_24:
  v21 = 0;
LABEL_25:
  _Block_object_dispose(&v39, 8);

}

void sub_10003CBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void __splunk_activity_handler_block_invoke_41(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  unsigned int v15;
  NSError *v16;
  id v17;
  void *v18;
  NSDate *v19;
  double v20;
  NSNumber *v21;
  NSData *v22;
  NSError *v23;
  NSError *v24;
  id v25;
  NSURL *v26;
  unint64_t v27;
  id v28;
  NSError *v29;
  NSError *v30;
  id v31;
  _BOOL4 v32;
  id v33;
  _BOOL4 v34;
  NSError *v35;
  id v36;
  _BOOL4 v37;
  id v38;
  _BOOL4 v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  char v44;
  NSError *v45;
  id v46;
  id v47;
  NSError *v48;
  NSError *MobileActivationError;
  NSString *v50;
  NSURL *v51;
  NSError *v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  NSError *v58;
  id v59;
  id v60;
  id v61;
  _QWORD v62[2];
  void (*v63)(uint64_t, int, int, uint64_t, id);
  void *v64;
  id v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t);
  void (*v75)(uint64_t);
  id v76;
  NSError *v77;
  id v78;
  uint64_t v79;
  NSError *v80;
  _BYTE buf[12];

  v71 = 0;
  v72 = &v71;
  v73 = 0x3032000000;
  v74 = __Block_byref_object_copy__6;
  v75 = __Block_byref_object_dispose__6;
  v76 = 0;
  v2 = copyLoggingHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Performing splunk logging (%@).", buf, 0xCu);
  }

  v4 = os_transaction_create(objc_msgSend(CFSTR("com.apple.mobileactivationd.splunklogging"), "UTF8String"));
  v5 = (void *)v72[5];
  v72[5] = v4;

  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3254779904;
  v63 = __splunk_activity_handler_block_invoke_42;
  v64 = &__block_descriptor_80_e8_32s40s48s56s64r72r_e48_v40__0__NSData_8__NSDictionary_16q24__NSError_32l;
  v6 = *(void **)(a1 + 40);
  v65 = *(id *)(a1 + 32);
  v7 = *(id *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 72);
  v66 = v7;
  v69 = v8;
  v67 = *(id *)(a1 + 56);
  v70 = &v71;
  v68 = *(id *)(a1 + 64);
  v9 = v6;
  v10 = v62;
  v79 = 0;
  if (!v9)
  {
    v16 = createMobileActivationError((uint64_t)"performSplunkPost", 664, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    v60 = 0;
    v61 = 0;
    goto LABEL_24;
  }
  if (!is_internal_build())
  {
    v60 = 0;
    v61 = 0;
    goto LABEL_12;
  }
  v11 = objc_alloc((Class)NSUserDefaults);
  v61 = objc_msgSend(v11, "persistentDomainForName:", CFSTR("com.apple.mobileactivationd"));

  v12 = objc_msgSend(v61, "objectForKeyedSubscript:", CFSTR("UseReverseProxy"));
  v13 = isNSNumber(v12);
  if (!v13)
  {

    goto LABEL_11;
  }
  v14 = objc_msgSend(v61, "objectForKeyedSubscript:", CFSTR("UseReverseProxy"));
  v15 = objc_msgSend(v14, "BOOLValue");

  if (!v15)
  {
LABEL_11:
    v60 = 0;
    goto LABEL_12;
  }
  v60 = copyReverseProxyDictionary(0, 0, 0);
LABEL_12:
  v17 = objc_alloc_init((Class)NSMutableDictionary);
  v18 = v17;
  if (v17)
  {
    objc_msgSend(v17, "setObject:forKeyedSubscript:", v9, CFSTR("events"));
    v19 = +[NSDate date](NSDate, "date");
    -[NSDate timeIntervalSince1970](v19, "timeIntervalSince1970");
    v21 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", 1000 * (uint64_t)v20);
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v21, CFSTR("postTime"));

    v78 = 0;
    v22 = +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v18, 0, &v78);
    v23 = (NSError *)v78;
    v24 = v23;
    if (v22)
    {
      v25 = objc_alloc((Class)NSMutableURLRequest);
      v26 = +[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("https://init.itunes.apple.com/bag.xml?ix=5"));
      LODWORD(v27) = NETWORK_TIMEOUT_SECONDS;
      v28 = objc_msgSend(v25, "initWithURL:cachePolicy:timeoutInterval:", v26, 0, (double)v27);

      if (!v28)
      {
        v16 = createMobileActivationError((uint64_t)"performSplunkPost", 698, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate request."));
        v29 = 0;
        v46 = 0;
        v28 = 0;
LABEL_43:
        v47 = 0;
        goto LABEL_44;
      }
      objc_msgSend(v28, "setValue:forHTTPHeaderField:");
      v77 = v24;
      v29 = (NSError *)talkToServerWithError(v28, 0, 0, v60, 0, 0, &v77);
      v58 = v77;

      if (v29)
      {
        *(_QWORD *)buf = 0;
        v57 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v29, 0, 0, buf);
        v30 = (NSError *)*(id *)buf;
        v31 = isNSDictionary(v57);
        v32 = v31 == 0;

        if (v32)
        {
          v48 = createMobileActivationError((uint64_t)"copySplunkBaseURLFromStorebag", 607, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v30, CFSTR("Failed to create dictionary from data."));
          v53 = 0;
          v54 = 0;
          v55 = 0;
          v56 = 0;
        }
        else
        {
          v56 = objc_msgSend(v57, "objectForKey:", CFSTR("bag"));
          v33 = isNSData(v56);
          v34 = v33 == 0;

          if (v34)
          {
            v48 = createMobileActivationError((uint64_t)"copySplunkBaseURLFromStorebag", 613, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Storebag data is missing 'bag' key."));
            v53 = 0;
            v54 = 0;
            v55 = 0;
          }
          else
          {
            v80 = 0;
            v55 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v56, 0, 0, &v80);
            v35 = v80;

            v36 = isNSDictionary(v55);
            v37 = v36 == 0;

            if (v37)
            {
              v48 = createMobileActivationError((uint64_t)"copySplunkBaseURLFromStorebag", 622, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v35, CFSTR("Failed to create dictionary from data."));
              v53 = 0;
              v54 = 0;
            }
            else
            {
              v54 = objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("metrics"));
              v38 = isNSDictionary(v54);
              v39 = v38 == 0;

              if (v39)
              {
                v48 = createMobileActivationError((uint64_t)"copySplunkBaseURLFromStorebag", 628, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Storebag data is missing 'metrics' key."));
                v53 = 0;
              }
              else
              {
                v40 = objc_msgSend(v54, "objectForKey:", CFSTR("metricsUrl"));
                v41 = isNSString(v40);
                v53 = v40;
                LODWORD(v40) = v41 == 0;

                if (!(_DWORD)v40)
                {
                  v42 = v53;
                  if (v42)
                  {
                    v43 = v42;
                    v44 = 0;
                    v53 = v42;
                    v45 = v58;
LABEL_36:

                    v24 = v45;
                    if ((v44 & 1) != 0)
                    {
                      MobileActivationError = createMobileActivationError((uint64_t)"performSplunkPost", 712, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v24, CFSTR("Failed to retrieve Splunk base URL from iTunes storebag."));
                    }
                    else
                    {
                      v47 = objc_msgSend(v43, "stringByAppendingPathComponent:", CFSTR("2/xp_coreos_mobile_activation"));

                      if (v47)
                      {
                        v59 = objc_alloc_init((Class)NSMutableURLRequest);

                        if (v59)
                        {
                          objc_msgSend(v59, "setValue:forHTTPHeaderField:", CFSTR("iOS Device Activator (MobileActivation-1006)"), CFSTR("User-Agent"));
                          v50 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("application/json"));
                          objc_msgSend(v59, "setValue:forHTTPHeaderField:", v50, CFSTR("Content-Type"));

                          objc_msgSend(v59, "setHTTPMethod:", CFSTR("POST"));
                          objc_msgSend(v59, "setHTTPBody:", v22);
                          v51 = +[NSURL URLWithString:](NSURL, "URLWithString:", v47);
                          objc_msgSend(v59, "setURL:", v51);

                          v80 = v24;
                          *(_QWORD *)buf = 0;
                          v52 = (NSError *)talkToServerWithError(v59, 0, 0, v60, buf, &v79, &v80);
                          v46 = *(id *)buf;
                          v16 = v80;

                          v24 = v29;
                          v29 = v52;
                          v28 = v59;
                        }
                        else
                        {
                          v16 = createMobileActivationError((uint64_t)"performSplunkPost", 726, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate request."));
                          v46 = 0;
                          v28 = 0;
                        }
                        goto LABEL_44;
                      }
                      MobileActivationError = createMobileActivationError((uint64_t)"performSplunkPost", 718, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create Splunk URL."));
                    }
                    v16 = MobileActivationError;
                    v46 = 0;
                    goto LABEL_43;
                  }
                  v53 = 0;
LABEL_35:
                  v35 = objc_retainAutorelease(v35);
                  v43 = 0;
                  v44 = 1;
                  v45 = v35;
                  goto LABEL_36;
                }
                v48 = createMobileActivationError((uint64_t)"copySplunkBaseURLFromStorebag", 634, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Storebag data is missing 'metricsURL' key."));
              }
            }
            v30 = v35;
          }
        }

        v35 = v48;
        goto LABEL_35;
      }
      v16 = createMobileActivationError((uint64_t)"performSplunkPost", 706, CFSTR("com.apple.MobileActivation.ErrorDomain"), -6, v58, CFSTR("iTunes storebag request failed."));
      v29 = 0;
      v46 = 0;
      v47 = 0;
      v24 = v58;
    }
    else
    {
      v16 = createMobileActivationError((uint64_t)"performSplunkPost", 688, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v23, CFSTR("Failed to serialize data: %@"), v23);
      v29 = 0;
      v46 = 0;
      v28 = 0;
      v47 = 0;
      v22 = 0;
    }
LABEL_44:

    goto LABEL_45;
  }
  v16 = createMobileActivationError((uint64_t)"performSplunkPost", 679, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create post dictionary."));
LABEL_24:
  v29 = 0;
  v46 = 0;
  v28 = 0;
  v47 = 0;
  v22 = 0;
  v18 = 0;
LABEL_45:
  v63((uint64_t)v10, (int)v29, (int)v46, v79, v16);

  _Block_object_dispose(&v71, 8);
}

void sub_10003D7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void __splunk_activity_handler_block_invoke_42(uint64_t a1, int a2, int a3, uint64_t a4, id a5)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  dispatch_block_t v12;
  _QWORD block[4];
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = a5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904;
  block[2] = __splunk_activity_handler_block_invoke_2_43;
  block[3] = &__block_descriptor_88_e8_32s40s48s56s64r72r_e5_v8__0l;
  v20 = a4;
  v14 = *(id *)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 64);
  v15 = v8;
  v16 = v7;
  v9 = *(id *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 72);
  v17 = v9;
  v19 = v10;
  v11 = v7;
  v12 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
  dispatch_async(*(dispatch_queue_t *)(a1 + 56), v12);

}

void __splunk_activity_handler_block_invoke_2_43(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSString *v5;
  NSError *v6;
  uint64_t v7;
  NSString *v8;
  NSError *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  NSFileManager *v13;
  NSFileManager *v14;
  uint64_t v15;
  void *v16;
  NSString *v17;
  NSError *v18;
  uint64_t v19;
  NSString *v20;
  NSError *v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  NSNumber *v26;
  id v27;
  NSNumber *v28;
  unsigned int v29;
  long double v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  void *v34;
  uint8_t buf[4];
  unsigned int v36;

  if (isRunningInRecovery())
    v2 = 2;
  else
    v2 = 6;
  v3 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)(v3 - 200) >= 0x64)
  {
    if ((unint64_t)(v3 - 300) >= 0xC8)
    {
      v14 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
      -[NSFileManager moveItemAtPath:toPath:error:](v14, "moveItemAtPath:toPath:error:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);

      v15 = *(_QWORD *)(a1 + 80);
      v16 = *(void **)(a1 + 48);
      v17 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", v15);
      v18 = createMobileActivationError((uint64_t)"splunk_activity_handler_block_invoke_2", 1382, CFSTR("com.apple.MobileActivation.ServerErrorDomain"), v15, v16, CFSTR("Server error: %ld (%@)"), v15, v17);

      v19 = *(_QWORD *)(a1 + 80);
      v20 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", v19);
      v21 = createMobileActivationError((uint64_t)"splunk_activity_handler_block_invoke_2", 1382, CFSTR("com.apple.MobileActivation.ErrorDomain"), -6, v18, CFSTR("Server error: %ld (%@)"), v19, v20);

      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v23 = *(void **)(v22 + 40);
      *(_QWORD *)(v22 + 40) = v21;

      goto LABEL_11;
    }
    v4 = *(void **)(a1 + 48);
    v5 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", *(_QWORD *)(a1 + 80));
    v6 = createMobileActivationError((uint64_t)"splunk_activity_handler_block_invoke_2", 1387, CFSTR("com.apple.MobileActivation.ServerErrorDomain"), v3, v4, CFSTR("Server error: %ld (%@)"), v3, v5);

    v7 = *(_QWORD *)(a1 + 80);
    v8 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", v7);
    v9 = createMobileActivationError((uint64_t)"splunk_activity_handler_block_invoke_2", 1387, CFSTR("com.apple.MobileActivation.ErrorDomain"), -5, v6, CFSTR("Server error: %ld (%@)"), v7, v8);

    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

    v12 = copyLoggingHandle();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      __splunk_activity_handler_block_invoke_2_43_cold_1(a1, a1 + 64, v12);

  }
  v13 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  -[NSFileManager removeItemAtPath:error:](v13, "removeItemAtPath:error:", *(_QWORD *)(a1 + 32), 0);

  data_ark_remove(*(void **)(a1 + 56), 0, CFSTR("SplunkRetryAttempt"));
LABEL_11:
  v24 = copySortedSplunkFileList();
  v25 = v24;
  if (!v24 || !objc_msgSend(v24, "count"))
    goto LABEL_24;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
  {
    v26 = (NSNumber *)data_ark_copy(*(void **)(a1 + 56), 0, CFSTR("SplunkRetryAttempt"));
    v27 = isNSNumber(v26);

    if (v27)
    {
      v28 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", (char *)-[NSNumber longLongValue](v26, "longLongValue") + 1);

      if (-[NSNumber unsignedLongLongValue](v28, "unsignedLongLongValue") <= v2)
      {
LABEL_20:
        data_ark_set(*(void **)(a1 + 56), 0, CFSTR("SplunkRetryAttempt"), v28, 1);
        -[NSNumber doubleValue](v28, "doubleValue");
        v29 = (exp2(v30) * 60.0);

        goto LABEL_21;
      }
      v26 = v28;
      v28 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v2);
    }
    else
    {
      v28 = (NSNumber *)&off_100271700;
    }

    goto LABEL_20;
  }
  v29 = 5;
LABEL_21:
  v31 = copyLoggingHandle();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v36 = v29;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Rescheduling splunk logging for %d seconds.", buf, 8u);
  }

  scheduleXPCActivity(*(void **)(a1 + 56), (const char *)objc_msgSend(CFSTR("com.apple.mobileactivationd.splunklogging"), "UTF8String"), v29, 1, 0x400u, 0x400u, &__block_literal_global_49);
LABEL_24:
  v32 = copyLoggingHandle();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Successfully performed splunk logging.", buf, 2u);
  }

  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v34 = *(void **)(v33 + 40);
  *(_QWORD *)(v33 + 40) = 0;

}

void __splunk_activity_handler_block_invoke_48(id a1, DataArk *a2)
{
  splunk_activity_handler(a2, 0);
}

void __copy_helper_block_e8_32s40s48s56s64r72r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
}

void __copy_helper_block_e8_32s40s48s56s64s72r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  v8 = *(id *)(a2 + 64);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 72), 8);

}

void splunk_daily_stats_activity_handler(void *a1)
{
  id v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD block[4];
  id v6;
  uint8_t buf[16];

  v1 = a1;
  if (v1)
  {
    v2 = copySplunkQueue();
    if (v2)
    {
      v3 = v2;
      block[0] = _NSConcreteStackBlock;
      block[1] = 3254779904;
      block[2] = __splunk_daily_stats_activity_handler_block_invoke;
      block[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
      v6 = v1;
      v4 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);

      dispatch_async(v3, v4);
    }
    else
    {
      v4 = copyLoggingHandle();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
        copySplunkDeviceIdentifiers_cold_1();
    }
  }
  else
  {
    v4 = copyLoggingHandle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Invalid input.", buf, 2u);
    }
  }

}

void __splunk_daily_stats_activity_handler_block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  id v8;

  v2 = *(void **)(a1 + 32);
  v8 = 0;
  v3 = copySplunkDailyStatistics(v2, (NSError **)&v8);
  v5 = v8;
  if (!v3)
  {
    v6 = copyLoggingHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      __splunk_daily_stats_activity_handler_block_invoke_cold_1();

  }
  writeSplunkLog(*(void **)(a1 + 32), 25, -1, (uint64_t)"splunk_daily_stats_activity_handler_block_invoke", 1469, v3, 0, v4, v7);

}

void splunk_roll_uuid_activity_handler(void *a1)
{
  id v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  uint64_t *v9;
  uint8_t buf[16];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;

  v1 = a1;
  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = __Block_byref_object_copy__6;
  v15 = __Block_byref_object_dispose__6;
  v16 = 0;
  if (v1)
  {
    v2 = copySplunkQueue();
    if (v2)
    {
      v3 = v2;
      v4 = os_transaction_create(objc_msgSend(CFSTR("com.apple.mobileactivationd.splunklogging.rollidentifier"), "UTF8String"));
      v5 = (void *)v12[5];
      v12[5] = v4;

      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3254779904;
      v7[2] = __splunk_roll_uuid_activity_handler_block_invoke;
      v7[3] = &__block_descriptor_48_e8_32s40r_e5_v8__0l;
      v8 = v1;
      v9 = &v11;
      v6 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, v7);

      dispatch_async(v3, v6);
    }
    else
    {
      v6 = copyLoggingHandle();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
        copySplunkDeviceIdentifiers_cold_1();
    }
  }
  else
  {
    v6 = copyLoggingHandle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Invalid input.", buf, 2u);
    }
  }

  _Block_object_dispose(&v11, 8);
}

void sub_10003E2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __splunk_roll_uuid_activity_handler_block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint8_t v5[16];

  rollSplunkLogUUID(*(void **)(a1 + 32));
  v2 = copyLoggingHandle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Successfully rolled splunk logging UUID.", v5, 2u);
  }

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

}

void rollSplunkLogUUID(void *a1)
{
  id v1;
  NSObject *v2;
  NSObject *v3;
  _QWORD block[4];
  id v5;

  v1 = a1;
  v2 = copySplunkUUIDQueue();
  if (v2)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3254779904;
    block[2] = __rollSplunkLogUUID_block_invoke;
    block[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
    v5 = v1;
    dispatch_async(v2, block);
    v3 = v5;
  }
  else
  {
    v3 = copyLoggingHandle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      copySplunkDeviceIdentifiers_cold_1();
  }

}

id copySplunkUUIDQueue()
{
  if (copySplunkUUIDQueue_onceToken != -1)
    dispatch_once(&copySplunkUUIDQueue_onceToken, &__block_literal_global_154);
  return (id)copySplunkUUIDQueue_splunkQueue;
}

void __rollSplunkLogUUID_block_invoke(uint64_t a1)
{
  void *v1;
  NSUUID *v2;
  NSString *v3;

  v1 = *(void **)(a1 + 32);
  v2 = +[NSUUID UUID](NSUUID, "UUID");
  v3 = -[NSUUID UUIDString](v2, "UUIDString");
  data_ark_set(v1, 0, CFSTR("uuidString"), v3, 1);

}

void __copySplunkLogUUID_block_invoke(uint64_t a1)
{
  void *v2;
  NSUUID *v3;
  NSString *v4;
  id v5;
  uint64_t v6;
  void *v7;

  if (!data_ark_exists(*(void **)(a1 + 32), 0, CFSTR("uuidString")))
  {
    v2 = *(void **)(a1 + 32);
    v3 = +[NSUUID UUID](NSUUID, "UUID");
    v4 = -[NSUUID UUIDString](v3, "UUIDString");
    data_ark_set(v2, 0, CFSTR("uuidString"), v4, 1);

  }
  v5 = data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("uuidString"));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void __copySplunkQueue_block_invoke(id a1)
{
  NSObject *v1;
  dispatch_queue_t v2;
  void *v3;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = dispatch_queue_create("com.apple.mobileactivationd.splunk", v1);
  v3 = (void *)copySplunkQueue_splunkQueue;
  copySplunkQueue_splunkQueue = (uint64_t)v2;

}

void __copySplunkUUIDQueue_block_invoke(id a1)
{
  NSObject *v1;
  dispatch_queue_t v2;
  void *v3;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = dispatch_queue_create("com.apple.mobileactivationd.splunk.uuid", v1);
  v3 = (void *)copySplunkUUIDQueue_splunkQueue;
  copySplunkUUIDQueue_splunkQueue = (uint64_t)v2;

}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_4_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

id copyRootCertificate(uint64_t a1, int a2, NSError **a3)
{
  BOOL v4;
  const char *v5;
  unsigned int *v6;
  unsigned int *v7;
  NSError *v8;
  unsigned int v9;
  id v10;
  void *v11;

  switch((int)a1)
  {
    case 1:
      v4 = a2 == 0;
      if (a2)
        v5 = "-----BEGIN CERTIFICATE-----\n"
             "MIICGDCCAZ+gAwIBAgIIMyDS5tjDo60wCgYIKoZIzj0EAwMwUjEmMCQGA1UEAwwd\n"
             "VEVTVCBVQ1JUIEFUVEVTVEFUSU9OIFJPT1QgQ0ExEzARBgNVBAoMCkFwcGxlIElu\n"
             "Yy4xEzARBgNVBAgMCkNhbGlmb3JuaWEwHhcNMTcwMzE3MTg0NzIzWhcNMzIwMzE3\n"
             "MTg0NzIzWjBSMSYwJAYDVQQDDB1URVNUIFVDUlQgQVRURVNUQVRJT04gUk9PVCBD\n"
             "QTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwKQ2FsaWZvcm5pYTB2MBAG\n"
             "ByqGSM49AgEGBSuBBAAiA2IABK8j8XvaJOsMr8X6albKQ1LFlMi3k+b8Jooja8Qs\n"
             "0lsrRmax8FItjsoWcxj3c1sPjPF59FI2sCb+9cUZ8KgTeJ3b5748pO1XRGByMNHp\n"
             "tmIuLYRvqRHhkWl638PWGRUoYKNCMEAwHQYDVR0OBBYEFGnDBpAIQSifJVW2RWKm\n"
             "f6jT3iIXMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMAoGCCqGSM49\n"
             "BAMDA2cAMGQCMBFwSHXop87Ghm50PPMGFHtpB/o3K2Gx5747Q0mlR2qE0DsmrJSu\n"
             "2LO+9QEQL5HZRwIwBMg0g5oYcfMMDWwFSRESii+SqHxFgbmVuzHR5Cu0peL1MiMB\n"
             "nMjKoG3YyhB4geQ9\n"
             "-----END CERTIFICATE-----";
      else
        v5 = "-----BEGIN CERTIFICATE-----\n"
             "MIICGjCCAaGgAwIBAgIIO0EdkA1/e+swCgYIKoZIzj0EAwMwUzEnMCUGA1UEAwwe\n"
             "QmFzaWMgQXR0ZXN0YXRpb24gVXNlciBSb290IENBMRMwEQYDVQQKDApBcHBsZSBJ\n"
             "bmMuMRMwEQYDVQQIDApDYWxpZm9ybmlhMB4XDTE3MDQxOTIxNDE1NloXDTMyMDMy\n"
             "MjAwMDAwMFowUzEnMCUGA1UEAwweQmFzaWMgQXR0ZXN0YXRpb24gVXNlciBSb290\n"
             "IENBMRMwEQYDVQQKDApBcHBsZSBJbmMuMRMwEQYDVQQIDApDYWxpZm9ybmlhMHYw\n"
             "EAYHKoZIzj0CAQYFK4EEACIDYgAE639EEPCGvFOPAbzd5eGJM46/I+N1rpRhPBc2\n"
             "+hvNC5vlVyv1hVNPSTIcF0sLPgCeEEQqGIZsUPO48ECh03YzXUT86015HwktM439\n"
             "bWGKGE/VRepW8S8EDRLh6+83XZ9do0IwQDAPBgNVHRMBAf8EBTADAQH/MB0GA1Ud\n"
             "DgQWBBSD5aMhnrB0w/lhkP2XTiMQdqSj8jAOBgNVHQ8BAf8EBAMCAQYwCgYIKoZI\n"
             "zj0EAwMDZwAwZAIwQol5uLqv1SXY9G1wHSx2EYIULFlLssYTnTwbSlZPj2yF9cgk\n"
             "7xJO8bw6nTklgnHhAjBgMvsir7UEVzw7uxn8y3GGf9KSCFV5scySrYDZnJhETYlc\n"
             "yPYSFsZIerKNPP6v28Y=\n"
             "-----END CERTIFICATE-----";
      v6 = (unsigned int *)&QABAAUCRTRootCAPEMLen;
      v7 = (unsigned int *)&BAAUCRTRootCAPEMLen;
      goto LABEL_48;
    case 2:
      v4 = a2 == 0;
      if (a2)
        v5 = "-----BEGIN CERTIFICATE-----\n"
             "MIIB/zCCAYWgAwIBAgIIMyDS5tjDo6wwCgYIKoZIzj0EAwMwRTEZMBcGA1UEAwwQ\n"
             "VEVTVCBTRVAgUk9PVCBDQTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwK\n"
             "Q2FsaWZvcm5pYTAeFw0xNzAzMTcxNzQ4MzBaFw0zMjAzMTcxNzQ4MzBaMEUxGTAX\n"
             "BgNVBAMMEFRFU1QgU0VQIFJPT1QgQ0ExEzARBgNVBAoMCkFwcGxlIEluYy4xEzAR\n"
             "BgNVBAgMCkNhbGlmb3JuaWEwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAARPM4laW0B+\n"
             "fOrILxB1SgluOqUops+ps7POnbPvuhEZq3A+/zMJpvuA9r81okf3hb2irmpUAuvd\n"
             "pbjz1pDf73/8VC/uMSJsWXEc39kpm2j6DwBOIxJ++OwnhEU7pf0gCQ6jQjBAMB0G\n"
             "A1UdDgQWBBRWyfg8mg8Ak5e1SZm7V0WL85j2NDAPBgNVHRMBAf8EBTADAQH/MA4G\n"
             "A1UdDwEB/wQEAwIBBjAKBggqhkjOPQQDAwNoADBlAjEAiOkQ9WnIfqiQXIKRjOhu\n"
             "eWd+RPxKGQt1XmVQZGiNDwIu6SVQ0UVDGZg4ywsotyLNAjAOQgMucccaDYgsmELm\n"
             "YpYzgzyReDQx/ajwQdc97/unxkOWYP/5TPptimsc9E0u9bU=\n"
             "-----END CERTIFICATE-----";
      else
        v5 = "-----BEGIN CERTIFICATE-----\n"
             "MIICIDCCAaWgAwIBAgIIePhG1bNbWBcwCgYIKoZIzj0EAwMwVTEpMCcGA1UEAwwg\n"
             "QmFzaWMgQXR0ZXN0YXRpb24gU3lzdGVtIFJvb3QgQ0ExEzARBgNVBAoMCkFwcGxl\n"
             "IEluYy4xEzARBgNVBAgMCkNhbGlmb3JuaWEwHhcNMTcwNDIwMDAyMjA5WhcNMzIw\n"
             "MzIyMDAwMDAwWjBVMSkwJwYDVQQDDCBCYXNpYyBBdHRlc3RhdGlvbiBTeXN0ZW0g\n"
             "Um9vdCBDQTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwKQ2FsaWZvcm5p\n"
             "YTB2MBAGByqGSM49AgEGBSuBBAAiA2IABN7OnRlUVkOVlHTw7UF9qForIhvM8pLL\n"
             "WTrHm6Be42c3LZFIM2RNT5FZZDkIgQfYLS6vsRpfrhEMKIHIWomtyuCxp2c/AIxu\n"
             "wEml4f2d8IktTRcNHwqKzUgzPJV3CyKh2KNCMEAwDwYDVR0TAQH/BAUwAwEB/zAd\n"
             "BgNVHQ4EFgQU/tHRwggHA9W5PDSyu/18OpklG48wDgYDVR0PAQH/BAQDAgEGMAoG\n"
             "CCqGSM49BAMDA2kAMGYCMQCmU03bvMmBE4X03P8MdpxEE/LpNcRmsnktIav8tpNh\n"
             "Gmo4mv2FyZKKvaJtO2OhIrwCMQDxMBcXge5NpWx/VBcFTj2Tb2VxQ8zMKbWapLE/\n"
             "HPN4kbBaiIIUl52drBlQjS/c3P8=\n"
             "-----END CERTIFICATE-----\n";
      v6 = (unsigned int *)&QABAASCRTRootCAPEMLen;
      v7 = (unsigned int *)&BAASCRTRootCAPEMLen;
      goto LABEL_48;
    case 3:
      v4 = a2 == 0;
      if (a2)
        v5 = "-----BEGIN CERTIFICATE-----\n"
             "MIICGDCCAZ+gAwIBAgIIMyDS5tjDo60wCgYIKoZIzj0EAwMwUjEmMCQGA1UEAwwd\n"
             "VEVTVCBVQ1JUIEFUVEVTVEFUSU9OIFJPT1QgQ0ExEzARBgNVBAoMCkFwcGxlIElu\n"
             "Yy4xEzARBgNVBAgMCkNhbGlmb3JuaWEwHhcNMTcwMzE3MTg0NzIzWhcNMzIwMzE3\n"
             "MTg0NzIzWjBSMSYwJAYDVQQDDB1URVNUIFVDUlQgQVRURVNUQVRJT04gUk9PVCBD\n"
             "QTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwKQ2FsaWZvcm5pYTB2MBAG\n"
             "ByqGSM49AgEGBSuBBAAiA2IABK8j8XvaJOsMr8X6albKQ1LFlMi3k+b8Jooja8Qs\n"
             "0lsrRmax8FItjsoWcxj3c1sPjPF59FI2sCb+9cUZ8KgTeJ3b5748pO1XRGByMNHp\n"
             "tmIuLYRvqRHhkWl638PWGRUoYKNCMEAwHQYDVR0OBBYEFGnDBpAIQSifJVW2RWKm\n"
             "f6jT3iIXMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMAoGCCqGSM49\n"
             "BAMDA2cAMGQCMBFwSHXop87Ghm50PPMGFHtpB/o3K2Gx5747Q0mlR2qE0DsmrJSu\n"
             "2LO+9QEQL5HZRwIwBMg0g5oYcfMMDWwFSRESii+SqHxFgbmVuzHR5Cu0peL1MiMB\n"
             "nMjKoG3YyhB4geQ9\n"
             "-----END CERTIFICATE-----";
      else
        v5 = "-----BEGIN CERTIFICATE-----\n"
             "MIIB9DCCAZqgAwIBAgIUfK8gpf3d6f7acICzvf5MBWnAVEYwCgYIKoZIzj0EAwIw\n"
             "VzErMCkGA1UEAwwiQXBwbGUgQWNjZXNzb3J5IFJvb3QgQ0EgLSAwMDAwMDAwMTET\n"
             "MBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwKQ2FsaWZvcm5pYTAgFw0yMDA5\n"
             "MTYxODI5MzRaGA8yMDUwMDkxNDAwMDAwMFowVzErMCkGA1UEAwwiQXBwbGUgQWNj\n"
             "ZXNzb3J5IFJvb3QgQ0EgLSAwMDAwMDAwMTETMBEGA1UECgwKQXBwbGUgSW5jLjET\n"
             "MBEGA1UECAwKQ2FsaWZvcm5pYTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABMGo\n"
             "QSB6dmrLAhjkTUVAoAC1RwaOmEmEk7SYEnnm6aBw9HZZQt5pkncuTXxvL6NDvx4D\n"
             "8Wn3frxp+UOTgEalb0ajQjBAMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFAZD\n"
             "Zup+SdTmXls49aokHuK+fHKjMA4GA1UdDwEB/wQEAwIBBjAKBggqhkjOPQQDAgNI\n"
             "ADBFAiEA4HcCYv5+W+1/HOy1v1cYVozNEW4+2WvR84Japg8rabkCIDP9zynWiR60\n"
             "O06J60wrt0rQfBOPnoeY1+ydbP2g8Tiy\n"
             "-----END CERTIFICATE-----";
      v6 = (unsigned int *)&QABAAMFiRootCAPEMLen;
      v7 = (unsigned int *)&BAAMFiRootCAPEMLen;
      goto LABEL_48;
    case 4:
      v4 = a2 == 0;
      if (a2)
        v5 = "-----BEGIN CERTIFICATE-----\n"
             "MIIBgzCCASkCFDjx/NbFt/axSboRZlQvaFKmOM9cMAoGCCqGSM49BAMCMEQxGDAW\n"
             "BgNVBAMMD1JPT1QgVk1Ib3N0IERFVjETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEG\n"
             "A1UECAwKQ2FsaWZvcm5pYTAeFw0yMjEyMjAyMjQ5MjNaFw0zMjEyMTcyMjQ5MjNa\n"
             "MEQxGDAWBgNVBAMMD1JPT1QgVk1Ib3N0IERFVjETMBEGA1UECgwKQXBwbGUgSW5j\n"
             "LjETMBEGA1UECAwKQ2FsaWZvcm5pYTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\n"
             "BFEzB9BX594q7qqyNgDRIB2qQm6uhylOPgS3zX6kVNpCe+IGeuYGVKu+n0oVoUEq\n"
             "ah/zwVwo9xZPJycEbHBhGlAwCgYIKoZIzj0EAwIDSAAwRQIhAJxxz1ciDUVxdnIz\n"
             "34ondjHZD90U6Pzvu9abpIU1TsJxAiAKxVubHXInckv6HidbV1J2RghMPdxOyKnw\n"
             "ZR6YEAfSMQ==\n"
             "-----END CERTIFICATE-----";
      else
        v5 = "-----BEGIN CERTIFICATE-----\n"
             "MIICLDCCAbOgAwIBAgIUfj+NzqI5TD5k+plnCuu7oXn/1NYwCgYIKoZIzj0EAwMw\n"
             "VjEqMCgGA1UEAwwhQmFzaWMgQXR0ZXN0YXRpb24gVk0gUm9vdCBDQSAtIEcxMRMw\n"
             "EQYDVQQKDApBcHBsZSBJbmMuMRMwEQYDVQQIDApDYWxpZm9ybmlhMB4XDTIyMTEx\n"
             "NzE5MjQ0NloXDTQ3MTExNzAwMDAwMFowVjEqMCgGA1UEAwwhQmFzaWMgQXR0ZXN0\n"
             "YXRpb24gVk0gUm9vdCBDQSAtIEcxMRMwEQYDVQQKDApBcHBsZSBJbmMuMRMwEQYD\n"
             "VQQIDApDYWxpZm9ybmlhMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEh+bXFjhVZxpY\n"
             "SW1tUJhQc7Mesr7Ua/2EIJDhZnq1eUV666b7j8V1apF7zQdcVc1GHqBMRfeagBk0\n"
             "ktB5PgRQ4hFX3OAbfjSVnmuPVuHznBbS/1f/ABuTlJJjO592E9JVo0IwQDAPBgNV\n"
             "HRMBAf8EBTADAQH/MB0GA1UdDgQWBBTHKW8b5x+bDXk9PC/lPsufj3wUEzAOBgNV\n"
             "HQ8BAf8EBAMCAQYwCgYIKoZIzj0EAwMDZwAwZAIwXsNPIuolYDriFDkULrsZy81O\n"
             "yAk4v7Y4f1p86Ox2J7g4xdGIwAyLw/JNRKGoHGpVAjBk20GA6ZvKKoO+HvE9v2xu\n"
             "wiVPsqk37xSmgK+RHJDMMy+hrhJVsCsBzeYpI9Cz4sI=\n"
             "-----END CERTIFICATE-----";
      v6 = (unsigned int *)&QABAAVMRootCAPEMLen;
      v7 = (unsigned int *)&BAAVMRootCAPEMLen;
      goto LABEL_48;
    case 5:
      v4 = a2 == 0;
      if (a2)
        v5 = "-----BEGIN CERTIFICATE-----\n"
             "MIIB9jCCAXwCFGyFzDAIXLHwUcHOxFEzhqQrOQOPMAoGCCqGSM49BAMDMF8xMzAx\n"
             "BgNVBAMMKkJhc2ljIEF0dGVzdGF0aW9uIFNFUCBBcHAgRGV2IFJvb3QgQ0EgLSBH\n"
             "MTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwKQ2FsaWZvcm5pYTAeFw0y\n"
             "MzAxMTkyMTEzNTFaFw0zMzAxMTYyMTEzNTFaMF8xMzAxBgNVBAMMKkJhc2ljIEF0\n"
             "dGVzdGF0aW9uIFNFUCBBcHAgRGV2IFJvb3QgQ0EgLSBHMTETMBEGA1UECgwKQXBw\n"
             "bGUgSW5jLjETMBEGA1UECAwKQ2FsaWZvcm5pYTB2MBAGByqGSM49AgEGBSuBBAAi\n"
             "A2IABOnVQFqNs86j5R5dAcjUlpotBUkO2q3+udEnqwkzzcrptPz6FIp5GQagMCQk\n"
             "wDgzXTe3jUqDkGxMNUjLt6DkzbwX7SrHhvIf9RlTXmlgrCUUrR21089VP+FZu8sD\n"
             "38l7PTAKBggqhkjOPQQDAwNoADBlAjEA7qwslEakgN0e+27DzPtrOqbud2pXVdRP\n"
             "qGFmLcklmZWHF1UIn6JlD1TNLVHQlCr3AjBkSmV+m5D/pJVRvg4ewQq+9oeyuYg8\n"
             "JHQGGaubDFMjZXhJ3NXrLHmIWDRQW2lgChA=\n"
             "-----END CERTIFICATE-----";
      else
        v5 = "-----BEGIN CERTIFICATE-----\n"
             "MIICODCCAb2gAwIBAgIUW5y5rEfNQCu9iSCmlQjrP1Rz/tAwCgYIKoZIzj0EAwMw\n"
             "WzEvMC0GA1UEAwwmQmFzaWMgQXR0ZXN0YXRpb24gU0VQIEFwcCBSb290IENBIC0g\n"
             "RzExEzARBgNVBAoMCkFwcGxlIEluYy4xEzARBgNVBAgMCkNhbGlmb3JuaWEwHhcN\n"
             "MjIwOTEyMTc1OTM0WhcNNDcwOTEyMDAwMDAwWjBbMS8wLQYDVQQDDCZCYXNpYyBB\n"
             "dHRlc3RhdGlvbiBTRVAgQXBwIFJvb3QgQ0EgLSBHMTETMBEGA1UECgwKQXBwbGUg\n"
             "SW5jLjETMBEGA1UECAwKQ2FsaWZvcm5pYTB2MBAGByqGSM49AgEGBSuBBAAiA2IA\n"
             "BAXaHBhlPwzGbPrirq+GvLIVTB4ym+88OQOB2Aq3ZuWIDz2DV9EWt7/3tpHL276X\n"
             "WE4ObPymHzrbl5aNpIzjm9W0tgiZRWw8l3YEuoz56dh3sZqVdDxszB3CQw1KX+62\n"
             "YaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUywowhXlxUMVVx846sCHP\n"
             "XQIrUR4wDgYDVR0PAQH/BAQDAgEGMAoGCCqGSM49BAMDA2kAMGYCMQC/AZhw1x8+\n"
             "XBPQw3lTl2A4SxY5UvCMjyseU9uUD0qgFDYlvUzH0qi8KB5BZled0cYCMQClhMgI\n"
             "rl3Txh1EJBb5yoWhvs8Gy+qkov9/SIDIEGpmZ7OUngbjN5zheCyJio90Xig=\n"
             "-----END CERTIFICATE-----";
      v6 = (unsigned int *)&QABAAASMFiOSRootCAPEMLen;
      v7 = (unsigned int *)&BAAASMFiOSRootCAPEMLen;
      goto LABEL_48;
    case 6:
      v9 = *(_DWORD *)"&\b";
      v5 = "-----BEGIN CERTIFICATE-----\n"
           "MIIF2DCCA8CgAwIBAgIBADANBgkqhkiG9w0BAQsFADB9MQswCQYDVQQGEwJVUzET\n"
           "MBEGA1UEChMKQXBwbGUgSW5jLjFZMFcGA1UEAxNQRkRSLUNBMS1ST09ULUNNIDg2\n"
           "QkQ1QkFFQ0JBNEQ5RUM0QzdBOUJGRUZEM0I3QTE0Mzc5QTE1RTVGQjM2MDNCQ0U2\n"
           "OTA1MDczRUMwNjBBM0YwHhcNMTQwNjExMjEwODM5WhcNNDQwNjExMjEwODM5WjB9\n"
           "MQswCQYDVQQGEwJVUzETMBEGA1UEChMKQXBwbGUgSW5jLjFZMFcGA1UEAxNQRkRS\n"
           "LUNBMS1ST09ULUNNIDg2QkQ1QkFFQ0JBNEQ5RUM0QzdBOUJGRUZEM0I3QTE0Mzc5\n"
           "QTE1RTVGQjM2MDNCQ0U2OTA1MDczRUMwNjBBM0YwggIiMA0GCSqGSIb3DQEBAQUA\n"
           "A4ICDwAwggIKAoICAQDRSE8a8Xl+OFgz07qfQf610WJgBhQUMqYqLME8yNW6HRAo\n"
           "ZmRJCZhKzJCW7W77utpo/QZqCs/Tmc8yAuyw06MlLdb/EaFbIJhnd8KvhNO2aBn1\n"
           "0zTF3BrKu/iBj4Cb31nzd+P3BAyIIhnNfqnJ1YDGrXDHApFKs96bRNYfFj/cm55e\n"
           "+5ZaVAE4pGq3I45pO1HMEObvysFnbEw4R5EZ8BsyNaSe+EEprYZQqjfGciVZn+WD\n"
           "nP0g1TONgE8yAplaud+0QQIcLxE82toZqnAEErojrXbb9KYiW6OH+w8p8ITKrA0a\n"
           "byud5ZwU8x2dwJngg2P53vzdaEPgl+oEWm5uTtOBS5kGh9N0Ky3N094qn6Y9OmLD\n"
           "eXsYXGE3Q91AZ6Ps+0cmZYAMvnlTMh6h6TRgIG6kUi/7fIn6umQHgavSMP+XWNET\n"
           "CzbwE7YZnTnhMlW3Oaey40bKDgxZAgVAVKt+qf/B9Exb074GqicYr5RH3MmYYqVo\n"
           "bHZTPkeKykUxUJoNm/jRoyXQnStl0uBclShH3ORMOHL6MeQMSGIEIVbD6AJz3rIX\n"
           "7nidx3ePUeA7QVV/vhL09DU4Q5KKQsbgl4qSGzxA87ClUGworLaWa+AUE+MP5NLJ\n"
           "tSlsY4+Fl3VLq51AJA2oeOwF6KCTRTZWG56anqaSrEU0UKsWgQ6ys+9153eGTwID\n"
           "AQABo2MwYTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4E\n"
           "FgQUESXWmKVwOl5LaoSB35L33xPje14wHwYDVR0jBBgwFoAUESXWmKVwOl5LaoSB\n"
           "35L33xPje14wDQYJKoZIhvcNAQELBQADggIBAJcISq7FqhBfFRpgEAiedVPPzff5\n"
           "rU2uNQLpApMb3A6jFSostHTwypA//pc0PbTPTi5t2CcF14Gznqt4Gf1Ej75C+fgK\n"
           "QoWjcgYPCXkK+6KkTW8EMLsL+n8ZL1tqdOuJCOBTRBTU3Lbwon5uYF98CdBlPIam\n"
           "ZqDEbEiwrp/I5uBMkut1P2sftxu5ysu3+A1bGMDI5T84sXbG0eJU6zmx1p/WUHAc\n"
           "HZy9/S7Ad5vJRMQrWx4JDdLvJ+1PXqdJtZUkp4TNPchxA9OzGsatVJJ5T/5EVDuL\n"
           "QgLaZNiWeAC19+clUREnS247RjLNIZZq0hj2Rk5zO6sSyt8vM+kJZrTVdGaSk++l\n"
           "OFWzSdo0Ev/izPkuL/cH146YZS1UWZJI61mdvbvvxqqQaoTmviuMDqDoCZ7crLu3\n"
           "LRoS6/+w+xir5s6hmAF8D6FzAkVmeAroyd6Hclk6CnhlcQP5GxjTQjA2YGe/9X54\n"
           "30qL4fjiDwdLYqxyL5J28/yxt068aoVaukoRAgiGoZouyieTV9DabenxYBOygijS\n"
           "4G4RVf4qVnQ7wGkQokhz4WIkMr4C4ydWU3GhSuM3T9Tx9ASscch/oLMczDMLKYMe\n"
           "3sdtc60+gxrctSq/B3E/5nddDj9vQ7BdRWcvJ+n/ESsXgwk5z15YZUwU/qW0j5rD\n"
           "4bPy9nox5DLds+/l\n"
           "-----END CERTIFICATE-----";
      goto LABEL_52;
    case 7:
      v4 = a2 == 0;
      if (a2)
        v5 = "-----BEGIN CERTIFICATE-----\n"
             "MIIBtDCCAVqgAwIBAgIBJzAKBggqhkjOPQQDAjBIMRwwGgYDVQQDDBNTRVAgUm9v\n"
             "dCBDQSAoTG9jYWwpMRMwEQYDVQQKDApBcHBsZSBJbmMuMRMwEQYDVQQIDApDYWxp\n"
             "Zm9ybmlhMB4XDTE2MDQyMjIyMTgzOVoXDTI2MDQyMDIyMTgzOVowSDEcMBoGA1UE\n"
             "AwwTU0VQIFJvb3QgQ0EgKExvY2FsKTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEG\n"
             "A1UECAwKQ2FsaWZvcm5pYTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABLbmMPmv\n"
             "ubyAcSjOqIvq+HkYPAn68WV+DopU/kfpNtEo0y0kjdxYGyuiaKC3LPqBmgM8pHlJ\n"
             "pP81SMyx900L5YyjNTAzMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQDAgEGMBMG\n"
             "CSqGSIb3Y2QGLAQGFgR1Y3J0MAoGCCqGSM49BAMCA0gAMEUCIQCz/HH34JCprRWh\n"
             "srjvjvb0vUjLY22yA/3uJS0zZ2LRGgIgahGt0ZuEvMzPDnG9n8wRXEOB46xu7zDy\n"
             "rXK+zQjBPMY=\n"
             "-----END CERTIFICATE-----";
      else
        v5 = "-----BEGIN CERTIFICATE-----\n"
             "MIIB9DCCAXugAwIBAgIIMyDS5tjDo6wwCgYIKoZIzj0EAwMwQDEUMBIGA1UEAwwL\n"
             "U0VQIFJvb3QgQ0ExEzARBgNVBAoMCkFwcGxlIEluYy4xEzARBgNVBAgMCkNhbGlm\n"
             "b3JuaWEwHhcNMTQwNjI0MjE0MzI0WhcNMjkwNjI0MjE0MzI0WjBAMRQwEgYDVQQD\n"
             "DAtTRVAgUm9vdCBDQTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwKQ2Fs\n"
             "aWZvcm5pYTB2MBAGByqGSM49AgEGBSuBBAAiA2IABEBGXhKwc7q3iFvkUoGDP6j2\n"
             "drpxSCxsSCODaDQIqGwd53wZJ0xIJIv0RTf2TS7+/u4KzhrANzb19r+TQzwqFJMp\n"
             "hp3mI3yY4pukIFc/kWS7DLQAx/ftWBXX6vl4ig3wEqNCMEAwHQYDVR0OBBYEFFjv\n"
             "1r7FgrBUzRimhK2i9nt7On/PMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQD\n"
             "AgEGMAoGCCqGSM49BAMDA2cAMGQCMCWRVB9DxwYdXsJ8KVZwbU5y0rfNEWJwpH5B\n"
             "bH3HoiOT/k7TIzlcXWiWAZVVBsDf/gIwC5wq3OepHwBMMCa3Q4ZvpT4Qs0dmc4oa\n"
             "GYxqUZYACJiGD7vRVavVMFnf0s4xG0JG\n"
             "-----END CERTIFICATE-----";
      v6 = (unsigned int *)&QAUCRTRootCAPEMLen;
      goto LABEL_33;
    case 8:
      v4 = a2 == 0;
      if (a2)
        v5 = "-----BEGIN CERTIFICATE-----\n"
             "MIICXjCCAeWgAwIBAgIJAO5ey/a/ZXo9MAoGCCqGSM49BAMDMGQxNzA1BgNVBAMT\n"
             "LmltZzQgdGVzdCBzZWNwMzg0cjEgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkx\n"
             "FDASBgNVBAoTC0FwcGxlLCBJbmMuMRMwEQYDVQQIEwpDYWxpZm9ybmlhMB4XDTE1\n"
             "MDgyNzA0MTk1MloXDTI1MDgyNDA0MTk1MlowZDE3MDUGA1UEAxMuaW1nNCB0ZXN0\n"
             "IHNlY3AzODRyMSBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eTEUMBIGA1UEChML\n"
             "QXBwbGUsIEluYy4xEzARBgNVBAgTCkNhbGlmb3JuaWEwdjAQBgcqhkjOPQIBBgUr\n"
             "gQQAIgNiAARmiQLNit/MHLEymNygtXRdYvZ2V9ujKbG78XPHs815eRetxfbAe0SU\n"
             "3LOKQ0xvpm77RUDARHdFyNzRSkKxTY2iBUGOapBwlwzfZlUmJU4JRXE9ATRwYNco\n"
             "KfVcrL0BFnejYzBhMB0GA1UdDgQWBBTFrjb8IhN7kz3HMYTxcqKeXtGm5DAPBgNV\n"
             "HRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFMWuNvwiE3uTPccxhPFyop5e0abkMA4G\n"
             "A1UdDwEB/wQEAwIBhjAKBggqhkjOPQQDAwNnADBkAjB5ryjJQJlO6BD0fqejchDc\n"
             "HB9su7+GoJMD5Kv9hoDeDlCTYoxE1fUp/36BAM3Ph/4CMB+QED5D9Nf7Fas99Xst\n"
             "xQ+EdLq74wvw/0YFQlsLVUH3UAnFE1uWnmwHkDZYF1EkcA==\n"
             "-----END CERTIFICATE-----";
      else
        v5 = "-----BEGIN CERTIFICATE-----\n"
             "MIIB9DCCAXugAwIBAgIIMyDS5tjDo6wwCgYIKoZIzj0EAwMwQDEUMBIGA1UEAwwL\n"
             "U0VQIFJvb3QgQ0ExEzARBgNVBAoMCkFwcGxlIEluYy4xEzARBgNVBAgMCkNhbGlm\n"
             "b3JuaWEwHhcNMTQwNjI0MjE0MzI0WhcNMjkwNjI0MjE0MzI0WjBAMRQwEgYDVQQD\n"
             "DAtTRVAgUm9vdCBDQTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwKQ2Fs\n"
             "aWZvcm5pYTB2MBAGByqGSM49AgEGBSuBBAAiA2IABEBGXhKwc7q3iFvkUoGDP6j2\n"
             "drpxSCxsSCODaDQIqGwd53wZJ0xIJIv0RTf2TS7+/u4KzhrANzb19r+TQzwqFJMp\n"
             "hp3mI3yY4pukIFc/kWS7DLQAx/ftWBXX6vl4ig3wEqNCMEAwHQYDVR0OBBYEFFjv\n"
             "1r7FgrBUzRimhK2i9nt7On/PMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQD\n"
             "AgEGMAoGCCqGSM49BAMDA2cAMGQCMCWRVB9DxwYdXsJ8KVZwbU5y0rfNEWJwpH5B\n"
             "bH3HoiOT/k7TIzlcXWiWAZVVBsDf/gIwC5wq3OepHwBMMCa3Q4ZvpT4Qs0dmc4oa\n"
             "GYxqUZYACJiGD7vRVavVMFnf0s4xG0JG\n"
             "-----END CERTIFICATE-----";
      v6 = (unsigned int *)&QAUCRTRootCAP384PEMLen;
LABEL_33:
      v7 = (unsigned int *)&UCRTRootCAPEMLen;
      goto LABEL_48;
    case 9:
      v4 = a2 == 0;
      if (a2)
        v5 = "-----BEGIN CERTIFICATE-----\n"
             "MIIBtjCCAVugAwIBAgIBJTAKBggqhkjOPQQDAjBIMRwwGgYDVQQDDBNTRVAgUm9v\n"
             "dCBDQSAoTG9jYWwpMRMwEQYDVQQKDApBcHBsZSBJbmMuMRMwEQYDVQQIDApDYWxp\n"
             "Zm9ybmlhMB4XDTE2MDQyMjIyMDMwMloXDTI2MDQyMDIyMDMwMlowSTETMBEGA1UE\n"
             "CAwKQ2FsaWZvcm5pYTETMBEGA1UECgwKQXBwbGUgSW5jLjEdMBsGA1UEAwwUdWNy\n"
             "dCBWZW5kaW5nIFNlcnZpY2UwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQooWKn\n"
             "j4PQnKhSGEpmJok/4CSDeG6fIk6A4vCDtuC5T2twqSmM0VWT3SY5B8QKMAspxnnT\n"
             "fxPmUJ+d2vhNPocFozUwMzAPBgNVHRMBAf8EBTADAQH/MAsGA1UdDwQEAwIBBjAT\n"
             "BgkqhkiG92NkBiwEBhYEdWNydDAKBggqhkjOPQQDAgNJADBGAiEAq6YVB2GvW4uu\n"
             "b17G+wTS/pehuM8tHLOH6RfJzUarkpUCIQDViFsKmYnrNx3yi9whnCHUE2SqvdRK\n"
             "YFSjST8cXO8B2g==\n"
             "-----END CERTIFICATE-----";
      else
        v5 = "-----BEGIN CERTIFICATE-----\n"
             "MIICFzCCAZygAwIBAgIIOcUqQ8IC/hswCgYIKoZIzj0EAwIwQDEUMBIGA1UEAwwL\n"
             "U0VQIFJvb3QgQ0ExEzARBgNVBAoMCkFwcGxlIEluYy4xEzARBgNVBAgMCkNhbGlm\n"
             "b3JuaWEwHhcNMTYwNDI1MjM0NTQ3WhcNMjkwNjI0MjE0MzI0WjBFMRMwEQYDVQQI\n"
             "DApDYWxpZm9ybmlhMRMwEQYDVQQKDApBcHBsZSBJbmMuMRkwFwYDVQQDDBBGRFJE\n"
             "Qy1VQ1JULVNVQkNBMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEaDc2O/MruYvP\n"
             "VPaUbKR7RRzn66B14/8KoUMsEDb7nHkGEMX6eC+0gStGHe4HYMrLyWcap1tDFYmE\n"
             "DykGQ3uM2aN7MHkwHQYDVR0OBBYEFLSqOkOtG+V+zgoMOBq10hnLlTWzMA8GA1Ud\n"
             "EwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUWO/WvsWCsFTNGKaEraL2e3s6f88wDgYD\n"
             "VR0PAQH/BAQDAgEGMBYGCSqGSIb3Y2QGLAEB/wQGFgR1Y3J0MAoGCCqGSM49BAMC\n"
             "A2kAMGYCMQDf5zNiiKN/Jqms1w+3CDYkESOPieJMpEkLe9a0UjWXEBDL0VEsq/Cd\n"
             "E3aKXkc6R10CMQDS4MiWiymY+Rxkvy/hicDDQqI/BL+N3LHqzJZUuw2Sx0afDX7B\n"
             "6LyKk+sLq4urkMY=\n"
             "-----END CERTIFICATE-----";
      v6 = (unsigned int *)&QAUCRTSubCAPEMLen;
      v7 = (unsigned int *)&UCRTSubCAPEMLen;
      goto LABEL_48;
    case 10:
      v9 = 1115;
      v5 = "-----BEGIN CERTIFICATE-----\n"
           "MIIDCjCCAnOgAwIBAgIJAKLEjm9wthY+MA0GCSqGSIb3DQEBBQUAMGIxCzAJBgNV\n"
           "BAYTAlVTMQswCQYDVQQIEwJDQTESMBAGA1UEBxMJQ3VwZXJ0aW5vMRMwEQYDVQQK\n"
           "EwpBcHBsZSBJbmMuMQwwCgYDVQQLEwNFVFMxDzANBgNVBAMTBlJhcHRvcjAeFw0x\n"
           "MTA2MjMxOTA1NDNaFw0xOTA5MDkxOTA1NDNaMGIxCzAJBgNVBAYTAlVTMQswCQYD\n"
           "VQQIEwJDQTESMBAGA1UEBxMJQ3VwZXJ0aW5vMRMwEQYDVQQKEwpBcHBsZSBJbmMu\n"
           "MQwwCgYDVQQLEwNFVFMxDzANBgNVBAMTBlJhcHRvcjCBnzANBgkqhkiG9w0BAQEF\n"
           "AAOBjQAwgYkCgYEAyckOSUo0WP7JAPTWXeVyEfeJ7JUm1cVzL4hURR/Kr9PR8x1g\n"
           "ptLaxWVcni+9D6eHmn9FxmmQFXRbIQCs5/qj4PhFZLC3c77wvi/8OL2EwSIOq9MN\n"
           "Hpm0P0jh/0e8AxJZS98gPfz6YF58H1/Vi5yYlM7zsGPdXaUiQokAbTcyXZUCAwEA\n"
           "AaOBxzCBxDAdBgNVHQ4EFgQUMSXJGuBw9hqPqJDExjgE206NyD4wgZQGA1UdIwSB\n"
           "jDCBiYAUMSXJGuBw9hqPqJDExjgE206NyD6hZqRkMGIxCzAJBgNVBAYTAlVTMQsw\n"
           "CQYDVQQIEwJDQTESMBAGA1UEBxMJQ3VwZXJ0aW5vMRMwEQYDVQQKEwpBcHBsZSBJ\n"
           "bmMuMQwwCgYDVQQLEwNFVFMxDzANBgNVBAMTBlJhcHRvcoIJAKLEjm9wthY+MAwG\n"
           "A1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQADgYEAqrgiRsSNB4ubv2ZDUqH7p1a1\n"
           "Hca1vMmXZy1bTBXTbxoNJ/tHnkBZrQHoRq31931Sd6CDLnN/8h+Zpcg7C40vKMBu\n"
           "nJ4gaPVrPZlv36rrW/xNf6ZLETt0Q8VM554/P2QfT4aU/2v2rFb/orAqsKSW6wtJ\n"
           "9WmL1qAfmVJAPdcwYbY=\n"
           "-----END CERTIFICATE-----";
      goto LABEL_52;
    case 11:
      v9 = 1143;
      v5 = "-----BEGIN CERTIFICATE-----\n"
           "MIIDHzCCAoigAwIBAgIJAK/qJPz+p+3XMA0GCSqGSIb3DQEBBQUAMGkxCzAJBgNV\n"
           "BAYTAlVTMQswCQYDVQQIEwJDQTESMBAGA1UEBxMJQ3VwZXJ0aW5vMRMwEQYDVQQK\n"
           "EwpBcHBsZSBJbmMuMQwwCgYDVQQLEwNFVFMxFjAUBgNVBAMTDVJhcHRvciBEZXZp\n"
           "Y2UwHhcNMTEwNjIzMTkwNjE3WhcNMTkwOTA5MTkwNjE3WjBpMQswCQYDVQQGEwJV\n"
           "UzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzETMBEGA1UEChMKQXBw\n"
           "bGUgSW5jLjEMMAoGA1UECxMDRVRTMRYwFAYDVQQDEw1SYXB0b3IgRGV2aWNlMIGf\n"
           "MA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDOPR58emAZ3QBW6U3tZXmTjELxK495\n"
           "JavHz3yZm1lX1z7K9tmbqcmUuEXpBbxHtgEkTTmwZQIgM3f6asTn8CKln8kq7aYj\n"
           "AWbSNOCy35hLDCy+hCN9hi++3LqqHiuQ9whVAvyrqpX7xPfgGwheIgpp/sPoPbZF\n"
           "x5EiwPt7/uHzfQIDAQABo4HOMIHLMB0GA1UdDgQWBBSWWwNRWUp2XVKrcZ8yKR4r\n"
           "Zh/4wDCBmwYDVR0jBIGTMIGQgBSWWwNRWUp2XVKrcZ8yKR4rZh/4wKFtpGswaTEL\n"
           "MAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRIwEAYDVQQHEwlDdXBlcnRpbm8xEzAR\n"
           "BgNVBAoTCkFwcGxlIEluYy4xDDAKBgNVBAsTA0VUUzEWMBQGA1UEAxMNUmFwdG9y\n"
           "IERldmljZYIJAK/qJPz+p+3XMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQAD\n"
           "gYEAP2PMyy+666s+vDH4mLhFb2ZUFUM/nyxnLbjEyxgxR5Z5iZ/H0BEp7s59Matv\n"
           "dO0dzhP1+khkcM6opicPG3Vu5eDI0odn41m7LDj6Z3lgrxFTKIm/Ghc7c7c0qdWA\n"
           "YLTvijBQsDqsY1YoAXr+80ReSSouJgkNvljBAoPFPpoK2xQ=\n"
           "-----END CERTIFICATE-----";
      goto LABEL_52;
    case 12:
      v4 = a2 == 0;
      if (a2)
        v5 = "Certificate:\n"
             "    Data:\n"
             "        Version: 3 (0x2)\n"
             "        Serial Number: 1 (0x1)\n"
             "        Signature Algorithm: sha1WithRSAEncryption\n"
             "        Issuer: C=US, O=Apple Inc., OU=Apple Certification Authority, CN=[TEST] Apple iPhone Certification "
             "Authority\n"
             "        Validity\n"
             "            Not Before: Mar 21 06:20:50 2007 GMT\n"
             "            Not After : Mar 12 06:20:50 2022 GMT\n"
             "        Subject: C=US, O=Apple Inc., OU=Apple iPhone, CN=[TEST] Apple iPhone Device CA\n"
             "        Subject Public Key Info:\n"
             "            Public Key Algorithm: rsaEncryption\n"
             "            RSA Public Key: (1024 bit)\n"
             "                Modulus (1024 bit):\n"
             "                    00:d7:60:52:2a:fa:93:52:dc:db:ae:92:6b:d6:ac:\n"
             "                    59:17:1f:9a:20:ed:34:ae:c2:15:e8:e3:f0:3b:63:\n"
             "                    84:d8:6d:8d:02:65:74:e6:62:18:27:d1:fc:78:c3:\n"
             "                    2f:36:83:39:91:9f:3d:32:e0:95:7f:90:3b:ab:47:\n"
             "                    be:f1:47:85:8c:5d:ab:1c:5c:bb:10:69:47:56:b8:\n"
             "                    15:bf:34:4a:f0:49:6e:8a:35:4a:4f:47:bb:3e:ea:\n"
             "                    cc:df:2e:f4:b8:96:16:94:dd:38:f6:f0:82:cf:26:\n"
             "                    fd:67:a1:73:01:43:d8:25:bd:02:2c:82:89:7c:70:\n"
             "                    01:68:c2:8a:85:60:84:77:83\n"
             "                Exponent: 65537 (0x10001)\n"
             "        X509v3 extensions:\n"
             "            X509v3 Key Usage: critical\n"
             "                Digital Signature, Certificate Sign, CRL Sign\n"
             "            X509v3 Basic Constraints: critical\n"
             "                CA:TRUE\n"
             "            X509v3 Subject Key Identifier:\n"
             "                38:05:20:A9:3F:C6:79:F4:EC:9A:6F:7F:47:02:5E:6E:A4:79:11:F5\n"
             "            X509v3 Authority Key Identifier:\n"
             "                keyid:45:A2:4C:A9:8A:5B:4A:27:5E:85:A6:4D:05:1C:27:44:A5:87:76:17\n"
             "\n"
             "            X509v3 CRL Distribution Points:\n"
             "                URI:http://www.apple.com/appleca/iphone.crl\n"
             "\n"
             "    Signature Algorithm: sha1WithRSAEncryption\n"
             "        8d:be:6b:c8:4e:80:9e:78:86:0c:09:d0:6e:ed:c1:dc:30:f7:\n"
             "        29:4b:20:4e:2c:6c:b3:24:72:fd:ce:24:34:60:95:30:d7:32:\n"
             "        61:31:e5:d4:d5:63:aa:3f:89:81:f6:44:ab:71:d0:bc:17:db:\n"
             "        ab:bc:ec:bb:a4:40:6a:e7:e4:57:c6:28:6f:11:72:fc:0c:51:\n"
             "        07:31:db:40:54:ee:b5:e6:1e:e3:dc:9b:f9:3c:6a:ba:d8:c3:\n"
             "        20:f1:dd:49:cb:3a:a6:29:cd:52:f9:f3:f3:18:5e:dd:82:83:\n"
             "        b8:e8:4e:94:10:7a:1e:11:a0:63:4d:8e:60:4a:1d:45:72:4d:\n"
             "        a0:ac:1f:b0:98:8b:b4:33:5a:85:60:cf:7f:89:35:62:65:d1:\n"
             "        1b:48:a4:ec:ca:60:1a:9d:a6:d1:b9:3d:f3:64:a4:67:d1:a5:\n"
             "        1b:b6:d9:e7:65:75:cb:af:2f:7a:db:d8:a1:f4:f3:09:bf:9a:\n"
             "        99:1a:34:a6:ed:1f:82:84:0b:b6:a8:68:5d:ec:49:d4:b3:34:\n"
             "        84:af:cb:a4:d9:00:f0:bc:07:6c:17:e7:95:bb:c3:3d:d9:bb:\n"
             "        6a:13:1d:34:bd:2f:c1:9a:f1:4d:67:5f:56:33:90:b2:ef:ff:\n"
             "        27:da:19:60:55:b0:78:c2:8c:34:5b:61:3a:e1:ec:61:92:8b:\n"
             "        2f:04:9a:c6\n"
             "-----BEGIN CERTIFICATE-----\n"
             "MIIDeDCCAmCgAwIBAgIBATANBgkqhkiG9w0BAQUFADCBgDELMAkGA1UEBhMCVVMx\n"
             "EzARBgNVBAoTCkFwcGxlIEluYy4xJjAkBgNVBAsTHUFwcGxlIENlcnRpZmljYXRp\n"
             "b24gQXV0aG9yaXR5MTQwMgYDVQQDFCtbVEVTVF0gQXBwbGUgaVBob25lIENlcnRp\n"
             "ZmljYXRpb24gQXV0aG9yaXR5MB4XDTA3MDMyMTA2MjA1MFoXDTIyMDMxMjA2MjA1\n"
             "MFowYTELMAkGA1UEBhMCVVMxEzARBgNVBAoTCkFwcGxlIEluYy4xFTATBgNVBAsT\n"
             "DEFwcGxlIGlQaG9uZTEmMCQGA1UEAxQdW1RFU1RdIEFwcGxlIGlQaG9uZSBEZXZp\n"
             "Y2UgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANdgUir6k1Lc266Sa9as\n"
             "WRcfmiDtNK7CFejj8DtjhNhtjQJldOZiGCfR/HjDLzaDOZGfPTLglX+QO6tHvvFH\n"
             "hYxdqxxcuxBpR1a4Fb80SvBJboo1Sk9Huz7qzN8u9LiWFpTdOPbwgs8m/WehcwFD\n"
             "2CW9AiyCiXxwAWjCioVghHeDAgMBAAGjgZ4wgZswDgYDVR0PAQH/BAQDAgGGMA8G\n"
             "A1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFDgFIKk/xnn07Jpvf0cCXm6keRH1MB8G\n"
             "A1UdIwQYMBaAFEWiTKmKW0onXoWmTQUcJ0Slh3YXMDgGA1UdHwQxMC8wLaAroCmG\n"
             "J2h0dHA6Ly93d3cuYXBwbGUuY29tL2FwcGxlY2EvaXBob25lLmNybDANBgkqhkiG\n"
             "9w0BAQUFAAOCAQEAjb5ryE6AnniGDAnQbu3B3DD3KUsgTixssyRy/c4kNGCVMNcy\n"
             "YTHl1NVjqj+JgfZEq3HQvBfbq7zsu6RAaufkV8YobxFy/AxRBzHbQFTuteYe49yb\n"
             "+TxqutjDIPHdScs6pinNUvnz8xhe3YKDuOhOlBB6HhGgY02OYEodRXJNoKwfsJiL\n"
             "tDNahWDPf4k1YmXRG0ik7MpgGp2m0bk982SkZ9GlG7bZ52V1y68vetvYofTzCb+a\n"
             "mRo0pu0fgoQLtqhoXexJ1LM0hK/LpNkA8LwHbBfnlbvDPdm7ahMdNL0vwZrxTWdf\n"
             "VjOQsu//J9oZYFWweMKMNFthOuHsYZKLLwSaxg==\n"
             "-----END CERTIFICATE-----";
      else
        v5 = "Bag Attributes\n"
             "    localKeyID: 7C 29 15 15 12 C9 CF F6 15 2B 5B 25 70 3D A7 9A 98 14 36 06\n"
             "subject=/C=US/O=Apple Inc./OU=Apple iPhone/CN=Apple iPhone Device CA\n"
             "issuer=/C=US/O=Apple Inc./OU=Apple Certification Authority/CN=Apple iPhone Certification Authority\n"
             "-----BEGIN CERTIFICATE-----\n"
             "MIIDaTCCAlGgAwIBAgIBATANBgkqhkiG9w0BAQUFADB5MQswCQYDVQQGEwJVUzET\n"
             "MBEGA1UEChMKQXBwbGUgSW5jLjEmMCQGA1UECxMdQXBwbGUgQ2VydGlmaWNhdGlv\n"
             "biBBdXRob3JpdHkxLTArBgNVBAMTJEFwcGxlIGlQaG9uZSBDZXJ0aWZpY2F0aW9u\n"
             "IEF1dGhvcml0eTAeFw0wNzA0MTYyMjU0NDZaFw0xNDA0MTYyMjU0NDZaMFoxCzAJ\n"
             "BgNVBAYTAlVTMRMwEQYDVQQKEwpBcHBsZSBJbmMuMRUwEwYDVQQLEwxBcHBsZSBp\n"
             "UGhvbmUxHzAdBgNVBAMTFkFwcGxlIGlQaG9uZSBEZXZpY2UgQ0EwgZ8wDQYJKoZI\n"
             "hvcNAQEBBQADgY0AMIGJAoGBAPGUSsnquloYYK3Lok1NTlQZaRdZB2bLl+hmmkdf\n"
             "Rq5nerVKc1SxywT2vTa4DFU4ioSDMVJl+TPhl3ecK0wmsCU/6TKqewh0lOzBSzgd\n"
             "Z04IUpRai1mjXNeT9KD+VYW7TEaXXm6yd0UvZ1y8Cxi/WblshvcqdXbSGXH0KWO5\n"
             "JQuvAgMBAAGjgZ4wgZswDgYDVR0PAQH/BAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8w\n"
             "HQYDVR0OBBYEFLL+ISNEhpVqedWBJo5zENinTI50MB8GA1UdIwQYMBaAFOc0Ki4i\n"
             "3jlga7SUzneDYS8xoHw1MDgGA1UdHwQxMC8wLaAroCmGJ2h0dHA6Ly93d3cuYXBw\n"
             "bGUuY29tL2FwcGxlY2EvaXBob25lLmNybDANBgkqhkiG9w0BAQUFAAOCAQEAd13P\n"
             "Z3pMViukVHe9WUg8Hum+0I/0kHKvjhwVd/IMwGlXyU7DhUYWdja2X/zqj7W24Aq5\n"
             "7dEKm3fqqxK5XCFVGY5HI0cRsdENyTP7lxSiiTRYj2mlPedheCn+k6T5y0U4Xr40\n"
             "FXwWb2nWqCF1AgIudhgvVbxlvqcxUm8Zz7yDeJ0JFovXQhyO5fLUHRLCQFssAbf8\n"
             "B4i8rYYsBUhYTspVJcxVpIIltkYpdIRSIARA49HNvKK4hzjzMS/OhKQpVKw+OCEZ\n"
             "xptCVeN2pjbdt9uzi175oVo/u6B2ArKAW17u6XEHIdDMOe7cb33peVI6TD15W4MI\n"
             "pyQPbp8orlXe+tA8JA==\n"
             "-----END CERTIFICATE-----";
      v6 = (unsigned int *)&QAIphoneDeviceCAPEMLen;
      v7 = (unsigned int *)&iPhoneDeviceCAPEMLen;
      goto LABEL_48;
    case 13:
      v4 = a2 == 0;
      if (a2)
        v5 = "Certificate:\n"
             "    Data:\n"
             "        Version: 3 (0x2)\n"
             "        Serial Number: 2 (0x2)\n"
             "        Signature Algorithm: sha1WithRSAEncryption\n"
             "        Issuer: C=US, O=Apple Inc., OU=Apple Certification Authority, CN=[TEST] Apple iPhone Certification "
             "Authority\n"
             "        Validity\n"
             "            Not Before: Mar 21 06:20:50 2007 GMT\n"
             "            Not After : Mar 12 06:20:50 2022 GMT\n"
             "        Subject: C=US, O=Apple Inc., OU=Apple iPhone, CN=[TEST] Apple iPhone Activation\n"
             "        Subject Public Key Info:\n"
             "            Public Key Algorithm: rsaEncryption\n"
             "            RSA Public Key: (1024 bit)\n"
             "                Modulus (1024 bit):\n"
             "                    00:b3:62:65:ec:48:dd:dd:ed:44:d4:f1:fe:fb:c2:\n"
             "                    6f:42:d0:82:09:03:00:a6:01:e8:b1:07:09:26:5b:\n"
             "                    12:65:db:7f:51:15:ef:4f:45:b3:8f:ce:4d:16:1d:\n"
             "                    38:84:01:10:57:4e:8c:71:e1:5e:de:67:14:75:da:\n"
             "                    48:9a:4c:6f:f0:45:65:66:e8:9c:b5:a2:4c:f4:53:\n"
             "                    c1:ec:98:62:90:b0:94:be:12:f2:a0:ac:5c:77:16:\n"
             "                    07:73:72:5a:97:ba:50:4e:67:30:52:1e:f0:30:4e:\n"
             "                    8f:b2:a4:d3:d1:fa:f8:66:79:87:91:2f:a1:ef:4e:\n"
             "                    e6:41:8d:94:18:29:e0:f2:cf\n"
             "                Exponent: 65537 (0x10001)\n"
             "        X509v3 extensions:\n"
             "            X509v3 Key Usage: critical\n"
             "                Digital Signature\n"
             "            X509v3 Basic Constraints: critical\n"
             "                CA:FALSE\n"
             "            X509v3 Subject Key Identifier:\n"
             "                C0:6F:3A:4A:1B:ED:51:DD:9D:A3:4B:C0:41:F6:6A:11:F9:AB:8B:F1\n"
             "            X509v3 Authority Key Identifier:\n"
             "                keyid:45:A2:4C:A9:8A:5B:4A:27:5E:85:A6:4D:05:1C:27:44:A5:87:76:17\n"
             "\n"
             "            X509v3 CRL Distribution Points:\n"
             "                URI:http://www.apple.com/appleca/iphone.crl\n"
             "\n"
             "    Signature Algorithm: sha1WithRSAEncryption\n"
             "        0e:4f:55:00:9d:1e:4c:75:28:e8:79:bb:db:5c:5c:cc:45:93:\n"
             "        46:d3:3b:14:00:2d:5b:b0:8c:2e:15:3e:19:60:43:25:59:7f:\n"
             "        7b:3a:b2:7c:cf:c2:96:dd:b0:d7:70:5a:8e:28:c4:cc:32:2c:\n"
             "        f4:c2:43:e3:e1:1f:b3:b1:df:ec:86:dd:43:93:45:60:a1:53:\n"
             "        05:ba:6a:70:43:44:11:a1:9e:dd:c1:71:8b:cb:30:cd:d3:15:\n"
             "        21:e0:27:30:35:8a:76:8e:c2:23:fb:44:22:bd:96:f6:aa:55:\n"
             "        bf:4d:11:b1:0e:c4:7f:cf:86:8d:f8:30:dd:80:48:5d:9e:41:\n"
             "        4e:e0:29:96:25:cc:d6:4a:0d:47:05:87:c4:61:f6:b0:1e:1a:\n"
             "        da:48:56:a3:c1:c1:56:95:b3:4e:84:82:1b:a5:4d:d3:d0:5d:\n"
             "        60:cf:fd:e5:75:3c:91:13:e2:e4:f1:60:4a:58:93:de:3f:e9:\n"
             "        3c:bf:da:c9:f6:ef:9b:9e:b1:6e:78:9e:81:f6:e7:4c:09:b3:\n"
             "        1c:87:25:bf:8f:6e:3f:d6:03:53:1e:09:a3:5b:00:4b:9e:98:\n"
             "        fb:ae:13:86:e4:47:6a:1a:44:f8:15:c8:fb:30:c7:bd:b0:e8:\n"
             "        8c:ac:2d:73:08:af:ed:b2:e8:f5:6d:a1:e2:d9:45:de:d5:b9:\n"
             "        98:89:16:72\n"
             "-----BEGIN CERTIFICATE-----\n"
             "MIIDdjCCAl6gAwIBAgIBAjANBgkqhkiG9w0BAQUFADCBgDELMAkGA1UEBhMCVVMx\n"
             "EzARBgNVBAoTCkFwcGxlIEluYy4xJjAkBgNVBAsTHUFwcGxlIENlcnRpZmljYXRp\n"
             "b24gQXV0aG9yaXR5MTQwMgYDVQQDFCtbVEVTVF0gQXBwbGUgaVBob25lIENlcnRp\n"
             "ZmljYXRpb24gQXV0aG9yaXR5MB4XDTA3MDMyMTA2MjA1MFoXDTIyMDMxMjA2MjA1\n"
             "MFowYjELMAkGA1UEBhMCVVMxEzARBgNVBAoTCkFwcGxlIEluYy4xFTATBgNVBAsT\n"
             "DEFwcGxlIGlQaG9uZTEnMCUGA1UEAxQeW1RFU1RdIEFwcGxlIGlQaG9uZSBBY3Rp\n"
             "dmF0aW9uMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCzYmXsSN3d7UTU8f77\n"
             "wm9C0IIJAwCmAeixBwkmWxJl239RFe9PRbOPzk0WHTiEARBXToxx4V7eZxR12kia\n"
             "TG/wRWVm6Jy1okz0U8HsmGKQsJS+EvKgrFx3FgdzclqXulBOZzBSHvAwTo+ypNPR\n"
             "+vhmeYeRL6HvTuZBjZQYKeDyzwIDAQABo4GbMIGYMA4GA1UdDwEB/wQEAwIHgDAM\n"
             "BgNVHRMBAf8EAjAAMB0GA1UdDgQWBBTAbzpKG+1R3Z2jS8BB9moR+auL8TAfBgNV\n"
             "HSMEGDAWgBRFokypiltKJ16Fpk0FHCdEpYd2FzA4BgNVHR8EMTAvMC2gK6Aphido\n"
             "dHRwOi8vd3d3LmFwcGxlLmNvbS9hcHBsZWNhL2lwaG9uZS5jcmwwDQYJKoZIhvcN\n"
             "AQEFBQADggEBAA5PVQCdHkx1KOh5u9tcXMxFk0bTOxQALVuwjC4VPhlgQyVZf3s6\n"
             "snzPwpbdsNdwWo4oxMwyLPTCQ+PhH7Ox3+yG3UOTRWChUwW6anBDRBGhnt3BcYvL\n"
             "MM3TFSHgJzA1inaOwiP7RCK9lvaqVb9NEbEOxH/Pho34MN2ASF2eQU7gKZYlzNZK\n"
             "DUcFh8Rh9rAeGtpIVqPBwVaVs06EghulTdPQXWDP/eV1PJET4uTxYEpYk94/6Ty/\n"
             "2sn275uesW54noH250wJsxyHJb+Pbj/WA1MeCaNbAEuemPuuE4bkR2oaRPgVyPsw\n"
             "x72w6IysLXMIr+2y6PVtoeLZRd7VuZiJFnI=\n"
             "-----END CERTIFICATE-----\n";
      else
        v5 = "Bag Attributes\n"
             "    localKeyID: 75 60 9A FA 74 F6 E1 90 9C 00 2D 77 E5 10 D6 1C B3 E5 1F 4B\n"
             "subject=/C=US/O=Apple Inc./OU=Apple iPhone/CN=Apple iPhone Activation\n"
             "issuer=/C=US/O=Apple Inc./OU=Apple Certification Authority/CN=Apple iPhone Certification Authority\n"
             "-----BEGIN CERTIFICATE-----\n"
             "MIIDZzCCAk+gAwIBAgIBAjANBgkqhkiG9w0BAQUFADB5MQswCQYDVQQGEwJVUzET\n"
             "MBEGA1UEChMKQXBwbGUgSW5jLjEmMCQGA1UECxMdQXBwbGUgQ2VydGlmaWNhdGlv\n"
             "biBBdXRob3JpdHkxLTArBgNVBAMTJEFwcGxlIGlQaG9uZSBDZXJ0aWZpY2F0aW9u\n"
             "IEF1dGhvcml0eTAeFw0wNzA0MTYyMjU1MDJaFw0xNDA0MTYyMjU1MDJaMFsxCzAJ\n"
             "BgNVBAYTAlVTMRMwEQYDVQQKEwpBcHBsZSBJbmMuMRUwEwYDVQQLEwxBcHBsZSBp\n"
             "UGhvbmUxIDAeBgNVBAMTF0FwcGxlIGlQaG9uZSBBY3RpdmF0aW9uMIGfMA0GCSqG\n"
             "SIb3DQEBAQUAA4GNADCBiQKBgQDFAXzRImArmoiHfbS2oPcqAfbEv0d1jk7GbnX7\n"
             "+4YUlyIfprzBVdlmz2JHYv1+04IzJtL7cL97UI7fk0i0OMY0al8a+JPQa4Ug611T\n"
             "bqEt+njAmAkge3HXWDBdAXD9MhkC7T/9o77zOQ1oli4cUdzlnYWfzmW0PduOxuve\n"
             "AeYY4wIDAQABo4GbMIGYMA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMB0G\n"
             "A1UdDgQWBBShoNL+t7Rz/psUaq/NPXNPH+/WlDAfBgNVHSMEGDAWgBTnNCouIt45\n"
             "YGu0lM53g2EvMaB8NTA4BgNVHR8EMTAvMC2gK6AphidodHRwOi8vd3d3LmFwcGxl\n"
             "LmNvbS9hcHBsZWNhL2lwaG9uZS5jcmwwDQYJKoZIhvcNAQEFBQADggEBAF9qmrUN\n"
             "dA+FROYGP7pWcYTAK+pLyOf9zOaE7aeVI885V8Y/BKHhlwAo+zEkiOU3FbEPCS9V\n"
             "tS18ZBcwD/+d5ZQTMFknhcUJwdPqqjnm9LqTfH/x4pw8ONHRDzxHdp96gOV3A4+8\n"
             "abkoASfcYqvIRypXnbur3bRRhTzAs4VILS6jTyFYymZeSewtBubmmigo1kCQiZGc\n"
             "76c5feDAyHb2bzEqtvx3WprljtS46QT5CR6YelinZnio32jAzRYTxtS6r3JsvZDi\n"
             "J07+EHcmfGdpxwgO+7btW1pFar0ZjF9/jYKKnOYNyvCrwszhafbSYwzAG5EJoXFB\n"
             "4d+piWHUDcPxtcc=\n"
             "-----END CERTIFICATE-----";
      v6 = (unsigned int *)&QAIphoneActivationPEMLen;
      v7 = (unsigned int *)&iPhoneActivationPEMLen;
LABEL_48:
      if (v4)
        v6 = v7;
      v9 = *v6;
      goto LABEL_52;
    case 14:
      v9 = 4721;
      v5 = iPhoneCAPEM;
      goto LABEL_52;
    default:
      v8 = createMobileActivationError((uint64_t)"copyRootCertificate", 118, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid certificate type: %d"), a1);
      if (v8)
        goto LABEL_55;
      v9 = 0;
      v5 = 0;
LABEL_52:
      v10 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", v5, v9, 0);
      if (v10)
      {
        v11 = v10;
        v8 = 0;
      }
      else
      {
        v8 = createMobileActivationError((uint64_t)"copyRootCertificate", 128, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create certificate."));
LABEL_55:
        if (a3)
        {
          v8 = objc_retainAutorelease(v8);
          v11 = 0;
          *a3 = v8;
        }
        else
        {
          v11 = 0;
        }
      }

      return v11;
  }
}

id copy_system_container_path()
{
  if (copy_system_container_path_onceToken != -1)
    dispatch_once(&copy_system_container_path_onceToken, &__block_literal_global_7);
  return (id)copy_system_container_path_retval;
}

void __copy_system_container_path_block_invoke(id a1)
{
  uint64_t v1;
  void *v2;
  NSString *v3;
  void *v4;
  uint64_t v5;

  v5 = 1;
  v1 = container_system_path_for_identifier(0, &v5);
  if (v1)
  {
    v2 = (void *)v1;
    v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1);
    v4 = (void *)copy_system_container_path_retval;
    copy_system_container_path_retval = (uint64_t)v3;

    free(v2);
  }
}

NSString *copy_group_container_path(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  NSString *v3;
  uint64_t v5;

  v5 = 1;
  if (!a1)
    return (NSString *)0;
  v1 = container_system_group_path_for_identifier(0, a1, &v5);
  if (!v1)
    return (NSString *)0;
  v2 = (void *)v1;
  v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1);
  free(v2);
  return v3;
}

id copy_regulatory_images_directory_path()
{
  if (copy_regulatory_images_directory_path_onceToken != -1)
    dispatch_once(&copy_regulatory_images_directory_path_onceToken, &__block_literal_global_18);
  return (id)copy_regulatory_images_directory_path_retval;
}

void __copy_regulatory_images_directory_path_block_invoke(id a1)
{
  NSString *v1;
  NSString *v2;
  NSString *v3;
  void *v4;

  v1 = copy_group_container_path((uint64_t)objc_msgSend(CFSTR("systemgroup.com.apple.regulatory_images"), "UTF8String"));
  v2 = v1;
  if (v1)
  {
    v3 = -[NSString stringByAppendingPathComponent:](v1, "stringByAppendingPathComponent:", CFSTR("Library/RegulatoryImages"));
    v4 = (void *)copy_regulatory_images_directory_path_retval;
    copy_regulatory_images_directory_path_retval = (uint64_t)v3;

  }
}

id copy_suinfo_directory_path()
{
  if (copy_suinfo_directory_path_onceToken != -1)
    dispatch_once(&copy_suinfo_directory_path_onceToken, &__block_literal_global_21);
  return (id)copy_suinfo_directory_path_retval;
}

void __copy_suinfo_directory_path_block_invoke(id a1)
{
  NSString *v1;
  NSString *v2;
  NSString *v3;
  void *v4;

  v1 = copy_group_container_path((uint64_t)objc_msgSend(CFSTR("systemgroup.com.apple.pisco.suinfo"), "UTF8String"));
  v2 = v1;
  if (v1)
  {
    v3 = -[NSString stringByAppendingPathComponent:](v1, "stringByAppendingPathComponent:", CFSTR("Library/ProvenanceV2"));
    v4 = (void *)copy_suinfo_directory_path_retval;
    copy_suinfo_directory_path_retval = (uint64_t)v3;

  }
}

id copy_software_update_log_directory_path()
{
  if (copy_software_update_log_directory_path_onceToken != -1)
    dispatch_once(&copy_software_update_log_directory_path_onceToken, &__block_literal_global_24);
  return (id)copy_software_update_log_directory_path_retval;
}

void __copy_software_update_log_directory_path_block_invoke(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(CFSTR("/private/var/hardware/MobileActivation"), "stringByAppendingPathComponent:", CFSTR("logs"));
  v2 = (void *)copy_software_update_log_directory_path_retval;
  copy_software_update_log_directory_path_retval = (uint64_t)v1;

}

id copy_software_update_splunk_directory_path()
{
  if (copy_software_update_splunk_directory_path_onceToken != -1)
    dispatch_once(&copy_software_update_splunk_directory_path_onceToken, &__block_literal_global_27);
  return (id)copy_software_update_splunk_directory_path_retval;
}

void __copy_software_update_splunk_directory_path_block_invoke(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(CFSTR("/private/var/hardware/MobileActivation"), "stringByAppendingPathComponent:", CFSTR("splunk"));
  v2 = (void *)copy_software_update_splunk_directory_path_retval;
  copy_software_update_splunk_directory_path_retval = (uint64_t)v1;

}

id copy_uik_path()
{
  if (copy_uik_path_onceToken != -1)
    dispatch_once(&copy_uik_path_onceToken, &__block_literal_global_30);
  return (id)copy_uik_path_retval;
}

void __copy_uik_path_block_invoke(id a1)
{
  NSString *v1;
  NSString *v2;
  NSString *v3;
  void *v4;

  v1 = copy_group_container_path((uint64_t)objc_msgSend(CFSTR("systemgroup.com.apple.mobileactivationd"), "UTF8String"));
  v2 = v1;
  if (v1)
  {
    v3 = -[NSString stringByAppendingPathComponent:](v1, "stringByAppendingPathComponent:", CFSTR("Library/uik"));
    v4 = (void *)copy_uik_path_retval;
    copy_uik_path_retval = (uint64_t)v3;

  }
}

id copy_software_update_ucrt_directory_path()
{
  if (copy_software_update_ucrt_directory_path_onceToken != -1)
    dispatch_once(&copy_software_update_ucrt_directory_path_onceToken, &__block_literal_global_33);
  return (id)copy_software_update_ucrt_directory_path_retval;
}

void __copy_software_update_ucrt_directory_path_block_invoke(id a1)
{
  NSString *v1;
  NSString *v2;
  NSString *v3;
  void *v4;

  v1 = copy_group_container_path((uint64_t)objc_msgSend(CFSTR("systemgroup.com.apple.mobileactivationd"), "UTF8String"));
  v2 = v1;
  if (v1)
  {
    v3 = -[NSString stringByAppendingPathComponent:](v1, "stringByAppendingPathComponent:", CFSTR("Library/ucrt"));
    v4 = (void *)copy_software_update_ucrt_directory_path_retval;
    copy_software_update_ucrt_directory_path_retval = (uint64_t)v3;

  }
}

id copy_activation_records_directory_path()
{
  if (copy_activation_records_directory_path_onceToken != -1)
    dispatch_once(&copy_activation_records_directory_path_onceToken, &__block_literal_global_36);
  return (id)copy_activation_records_directory_path_retval;
}

void __copy_activation_records_directory_path_block_invoke(id a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;

  v1 = copy_system_container_path();
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("Library/activation_records"));
    v4 = (void *)copy_activation_records_directory_path_retval;
    copy_activation_records_directory_path_retval = (uint64_t)v3;

  }
}

id copy_ucrt_path()
{
  if (copy_ucrt_path_onceToken != -1)
    dispatch_once(&copy_ucrt_path_onceToken, &__block_literal_global_39);
  return (id)copy_ucrt_path_retval;
}

void __copy_ucrt_path_block_invoke(id a1)
{
  NSString *v1;
  NSString *v2;
  NSString *v3;
  void *v4;

  v1 = copy_group_container_path((uint64_t)objc_msgSend(CFSTR("systemgroup.com.apple.mobileactivationd"), "UTF8String"));
  v2 = v1;
  if (v1)
  {
    v3 = -[NSString stringByAppendingPathComponent:](v1, "stringByAppendingPathComponent:", CFSTR("Library/ucrt"));
    v4 = (void *)copy_ucrt_path_retval;
    copy_ucrt_path_retval = (uint64_t)v3;

  }
}

id copy_dcrt_path()
{
  if (copy_dcrt_path_onceToken != -1)
    dispatch_once(&copy_dcrt_path_onceToken, &__block_literal_global_40_0);
  return (id)copy_dcrt_path_retval;
}

void __copy_dcrt_path_block_invoke(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(CFSTR("/private/var/hardware/MobileActivation"), "stringByAppendingPathComponent:", CFSTR("dcrt"));
  v2 = (void *)copy_dcrt_path_retval;
  copy_dcrt_path_retval = (uint64_t)v1;

}

id copy_legacy_dcrt_path()
{
  if (copy_legacy_dcrt_path_onceToken != -1)
    dispatch_once(&copy_legacy_dcrt_path_onceToken, &__block_literal_global_43);
  return (id)copy_legacy_dcrt_path_retval;
}

void __copy_legacy_dcrt_path_block_invoke(id a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;

  v1 = copy_system_container_path();
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("Library/dcrt"));
    v4 = (void *)copy_legacy_dcrt_path_retval;
    copy_legacy_dcrt_path_retval = (uint64_t)v3;

  }
}

id copy_data_ark_directory_path()
{
  if (copy_data_ark_directory_path_onceToken != -1)
    dispatch_once(&copy_data_ark_directory_path_onceToken, &__block_literal_global_46);
  return (id)copy_data_ark_directory_path_retval;
}

void __copy_data_ark_directory_path_block_invoke(id a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;

  v1 = copy_system_container_path();
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("Library/internal"));
    v4 = (void *)copy_data_ark_directory_path_retval;
    copy_data_ark_directory_path_retval = (uint64_t)v3;

  }
}

id copy_log_directory_path()
{
  if (copy_log_directory_path_onceToken != -1)
    dispatch_once(&copy_log_directory_path_onceToken, &__block_literal_global_49_0);
  return (id)copy_log_directory_path_retval;
}

void __copy_log_directory_path_block_invoke(id a1)
{
  void *v1;

  v1 = (void *)copy_log_directory_path_retval;
  copy_log_directory_path_retval = (uint64_t)CFSTR("/private/var/mobile/Library/Logs/mobileactivationd");

}

id copy_splunk_directory_path()
{
  if (copy_splunk_directory_path_onceToken != -1)
    dispatch_once(&copy_splunk_directory_path_onceToken, &__block_literal_global_52);
  return (id)copy_splunk_directory_path_retval;
}

void __copy_splunk_directory_path_block_invoke(id a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;

  v1 = copy_system_container_path();
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("Library/splunk"));
    v4 = (void *)copy_splunk_directory_path_retval;
    copy_splunk_directory_path_retval = (uint64_t)v3;

  }
}

uint64_t mobileactivationErrorHasDomainAndErrorCode(void *a1, void *a2, id a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  v8 = 0;
  if (v5 && v6)
  {
    do
    {
      v9 = objc_msgSend(v5, "domain");
      if (objc_msgSend(v9, "isEqualToString:", v7))
      {
        v10 = objc_msgSend(v5, "code");

        if (v10 == a3)
        {
          v8 = 1;
          goto LABEL_9;
        }
      }
      else
      {

      }
      v11 = objc_msgSend(v5, "userInfo");
      v12 = objc_msgSend(v11, "objectForKeyedSubscript:", NSUnderlyingErrorKey);

      v5 = v12;
    }
    while (v12);
    v8 = 0;
  }
LABEL_9:

  return v8;
}

uint64_t load_identity(CFTypeRef *a1, id a2, void *a3, int *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  NSDictionary *v12;
  id v13;
  uint64_t v14;
  int v15;
  NSError *v16;
  uint64_t v17;
  char v18;
  _QWORD v20[4];
  _QWORD v21[4];

  v9 = a2;
  v10 = a3;
  v11 = v10;
  if (!a1 || !v10)
  {
    v16 = createMobileActivationError((uint64_t)"load_identity", 57, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v17 = 0;
    v13 = 0;
    v15 = -1;
    if (!a4)
      goto LABEL_10;
    goto LABEL_9;
  }
  v20[0] = kSecAttrLabel;
  v20[1] = kSecClass;
  v21[0] = v10;
  v21[1] = kSecClassIdentity;
  v20[2] = kSecReturnRef;
  v20[3] = kSecUseDataProtectionKeychain;
  v21[2] = &__kCFBooleanTrue;
  v21[3] = &__kCFBooleanTrue;
  v12 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v20, 4);
  v13 = -[NSDictionary mutableCopy](v12, "mutableCopy");

  if (v9)
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v9, kSecAttrAccessGroup);
  v14 = SecItemCopyMatching((CFDictionaryRef)v13, a1);
  v15 = v14;
  if ((_DWORD)v14)
  {
    v16 = createMobileActivationError((uint64_t)"load_identity", 79, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy identity: %d"), v14);
    v17 = 0;
    if (!a4)
      goto LABEL_10;
LABEL_9:
    *a4 = v15;
    goto LABEL_10;
  }
  v16 = 0;
  v17 = 1;
  if (a4)
    goto LABEL_9;
LABEL_10:
  if (a5)
    v18 = v17;
  else
    v18 = 1;
  if ((v18 & 1) == 0)
    *a5 = objc_retainAutorelease(v16);

  return v17;
}

uint64_t delete_identity(void *a1, void *a2, NSError **a3)
{
  id v5;
  id v6;
  void *v7;
  NSDictionary *v8;
  id v9;
  uint64_t v10;
  NSError *v11;
  uint64_t v12;
  _QWORD v14[4];
  _QWORD v15[4];

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!v6)
  {
    v11 = createMobileActivationError((uint64_t)"delete_identity", 107, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v9 = 0;
    if (!a3)
      goto LABEL_7;
    goto LABEL_9;
  }
  v14[0] = kSecAttrLabel;
  v14[1] = kSecClass;
  v15[0] = v6;
  v15[1] = kSecClassIdentity;
  v14[2] = kSecReturnRef;
  v14[3] = kSecUseDataProtectionKeychain;
  v15[2] = &__kCFBooleanTrue;
  v15[3] = &__kCFBooleanTrue;
  v8 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 4);
  v9 = -[NSDictionary mutableCopy](v8, "mutableCopy");

  if (v5)
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v5, kSecAttrAccessGroup);
  v10 = SecItemDelete((CFDictionaryRef)v9);
  v11 = 0;
  v12 = 1;
  if ((_DWORD)v10 != -25300 && (_DWORD)v10)
  {
    v11 = createMobileActivationError((uint64_t)"delete_identity", 129, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to remove existing identity: %d"), v10);
    if (!a3)
    {
LABEL_7:
      v12 = 0;
      goto LABEL_10;
    }
LABEL_9:
    v11 = objc_retainAutorelease(v11);
    v12 = 0;
    *a3 = v11;
  }
LABEL_10:

  return v12;
}

uint64_t store_identity(uint64_t a1, id a2, void *a3, NSError **a4)
{
  id v7;
  id v8;
  void *v9;
  char v10;
  NSError *v11;
  NSDictionary *v12;
  id v13;
  uint64_t v14;
  NSError *v15;
  uint64_t v16;
  id v18;
  _QWORD v19[4];
  _QWORD v20[4];

  v7 = a2;
  v8 = a3;
  v9 = v8;
  if (a1 && v8)
  {
    v18 = 0;
    v10 = delete_identity(v7, v8, (NSError **)&v18);
    v11 = (NSError *)v18;
    if ((v10 & 1) != 0)
    {
      v19[0] = kSecAttrLabel;
      v19[1] = kSecValueRef;
      v20[0] = v9;
      v20[1] = a1;
      v19[2] = kSecUseDataProtectionKeychain;
      v19[3] = kSecAttrAccessible;
      v20[2] = &__kCFBooleanTrue;
      v20[3] = kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
      v12 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 4);
      v13 = -[NSDictionary mutableCopy](v12, "mutableCopy");

      if (v7)
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v7, kSecAttrAccessGroup);
      v14 = SecItemAdd((CFDictionaryRef)v13, 0);
      if (!(_DWORD)v14)
      {
        v16 = 1;
        goto LABEL_14;
      }
      v15 = createMobileActivationError((uint64_t)"store_identity", 181, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to add identity to keychain: %d"), v14);

    }
    else
    {
      v15 = createMobileActivationError((uint64_t)"store_identity", 159, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v11, CFSTR("Failed to delete existing identity."));

      v13 = 0;
    }
    v11 = v15;
    if (!a4)
      goto LABEL_12;
  }
  else
  {
    v11 = createMobileActivationError((uint64_t)"store_identity", 154, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v13 = 0;
    if (!a4)
    {
LABEL_12:
      v16 = 0;
      goto LABEL_14;
    }
  }
  v11 = objc_retainAutorelease(v11);
  v16 = 0;
  *a4 = v11;
LABEL_14:

  return v16;
}

uint64_t update_identity(void *a1, void *a2, void *a3, NSError **a4)
{
  id v7;
  id v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  NSDictionary *v11;
  id v12;
  uint64_t v13;
  NSError *v14;
  uint64_t v15;
  _QWORD v17[3];
  _QWORD v18[3];

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = v9;
  if (v8 && v9)
  {
    v17[0] = kSecAttrLabel;
    v17[1] = kSecClass;
    v18[0] = v8;
    v18[1] = kSecClassIdentity;
    v17[2] = kSecUseDataProtectionKeychain;
    v18[2] = &__kCFBooleanTrue;
    v11 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 3);
    v12 = -[NSDictionary mutableCopy](v11, "mutableCopy");

    if (v7)
      objc_msgSend(v12, "setObject:forKeyedSubscript:", v7, kSecAttrAccessGroup);
    v13 = SecItemUpdate((CFDictionaryRef)v12, v10);
    if (!(_DWORD)v13)
    {
      v14 = 0;
      v15 = 1;
      goto LABEL_11;
    }
    v14 = createMobileActivationError((uint64_t)"update_identity", 227, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to update %@ in keychain: %d"), v8, v13);
    if (!a4)
      goto LABEL_7;
LABEL_9:
    v14 = objc_retainAutorelease(v14);
    v15 = 0;
    *a4 = v14;
    goto LABEL_11;
  }
  v14 = createMobileActivationError((uint64_t)"update_identity", 206, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
  v12 = 0;
  if (a4)
    goto LABEL_9;
LABEL_7:
  v15 = 0;
LABEL_11:

  return v15;
}

uint64_t load_certificate(CFTypeRef *a1, id a2, void *a3, int *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  NSDictionary *v12;
  id v13;
  uint64_t v14;
  int v15;
  NSError *v16;
  uint64_t v17;
  char v18;
  CFTypeRef result;
  _QWORD v21[4];
  _QWORD v22[4];

  v9 = a2;
  v10 = a3;
  v11 = v10;
  result = 0;
  if (!v10)
  {
    v16 = createMobileActivationError((uint64_t)"load_certificate", 252, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid inputs."));
    v17 = 0;
    v13 = 0;
    v15 = -1;
    if (!a4)
      goto LABEL_9;
    goto LABEL_8;
  }
  v21[0] = kSecAttrLabel;
  v21[1] = kSecClass;
  v22[0] = v10;
  v22[1] = kSecClassCertificate;
  v21[2] = kSecReturnRef;
  v21[3] = kSecUseDataProtectionKeychain;
  v22[2] = &__kCFBooleanTrue;
  v22[3] = &__kCFBooleanTrue;
  v12 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 4);
  v13 = -[NSDictionary mutableCopy](v12, "mutableCopy");

  if (v9)
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v9, kSecAttrAccessGroup);
  v14 = SecItemCopyMatching((CFDictionaryRef)v13, &result);
  if ((_DWORD)v14)
  {
    v15 = v14;
    v16 = createMobileActivationError((uint64_t)"load_certificate", 274, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy certificate (%@): %d"), v11, v14);
    v17 = 0;
    if (!a4)
      goto LABEL_9;
LABEL_8:
    *a4 = v15;
    goto LABEL_9;
  }
  v15 = 0;
  v16 = 0;
  if (a1)
    *a1 = CFRetain(result);
  v17 = 1;
  if (a4)
    goto LABEL_8;
LABEL_9:
  if (a5)
    v18 = v17;
  else
    v18 = 1;
  if ((v18 & 1) == 0)
    *a5 = objc_retainAutorelease(v16);
  if (result)
    CFRelease(result);
  result = 0;

  return v17;
}

uint64_t delete_certificate(void *a1, void *a2, NSError **a3)
{
  id v5;
  id v6;
  void *v7;
  NSDictionary *v8;
  id v9;
  uint64_t v10;
  NSError *v11;
  uint64_t v12;
  _QWORD v14[4];
  _QWORD v15[4];

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!v6)
  {
    v11 = createMobileActivationError((uint64_t)"delete_certificate", 308, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v9 = 0;
    if (!a3)
      goto LABEL_7;
    goto LABEL_9;
  }
  v14[0] = kSecAttrLabel;
  v14[1] = kSecClass;
  v15[0] = v6;
  v15[1] = kSecClassCertificate;
  v14[2] = kSecReturnRef;
  v14[3] = kSecUseDataProtectionKeychain;
  v15[2] = &__kCFBooleanTrue;
  v15[3] = &__kCFBooleanTrue;
  v8 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 4);
  v9 = -[NSDictionary mutableCopy](v8, "mutableCopy");

  if (v5)
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v5, kSecAttrAccessGroup);
  v10 = SecItemDelete((CFDictionaryRef)v9);
  v11 = 0;
  v12 = 1;
  if ((_DWORD)v10 != -25300 && (_DWORD)v10)
  {
    v11 = createMobileActivationError((uint64_t)"delete_certificate", 330, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to remove existing certificate (%@): %d"), v7, v10);
    if (!a3)
    {
LABEL_7:
      v12 = 0;
      goto LABEL_10;
    }
LABEL_9:
    v11 = objc_retainAutorelease(v11);
    v12 = 0;
    *a3 = v11;
  }
LABEL_10:

  return v12;
}

uint64_t store_certificate(uint64_t a1, id a2, void *a3, int a4, NSError **a5)
{
  id v9;
  id v10;
  void *v11;
  int v12;
  NSError *v13;
  NSDictionary *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSError *MobileActivationError;
  uint64_t v19;
  uint64_t v20;
  NSError *v21;
  id v23;
  CFTypeRef result;
  _QWORD v25[5];
  _QWORD v26[5];

  v9 = a2;
  v10 = a3;
  v11 = v10;
  result = 0;
  if (!a1 || !v10)
  {
    v13 = createMobileActivationError((uint64_t)"store_certificate", 355, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
LABEL_11:
    v15 = 0;
    if (!a5)
    {
LABEL_19:
      v19 = 0;
      goto LABEL_20;
    }
LABEL_12:
    v13 = objc_retainAutorelease(v13);
    v19 = 0;
    *a5 = v13;
    goto LABEL_20;
  }
  v23 = 0;
  v12 = delete_certificate(v9, v10, (NSError **)&v23);
  v13 = (NSError *)v23;
  if (!v12)
    goto LABEL_11;
  v25[0] = kSecAttrLabel;
  v25[1] = kSecClass;
  v26[0] = v11;
  v26[1] = kSecClassCertificate;
  v25[2] = kSecReturnRef;
  v25[3] = kSecValueRef;
  v26[2] = &__kCFBooleanTrue;
  v26[3] = a1;
  v25[4] = kSecUseDataProtectionKeychain;
  v26[4] = &__kCFBooleanTrue;
  v14 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v26, v25, 5);
  v15 = -[NSDictionary mutableCopy](v14, "mutableCopy");

  if (v9)
    objc_msgSend(v15, "setObject:forKeyedSubscript:", v9, kSecAttrAccessGroup);
  v16 = SecItemAdd((CFDictionaryRef)v15, 0);
  if ((_DWORD)v16 == -25299 && a4)
  {
    objc_msgSend(v15, "removeObjectForKey:", kSecAttrLabel);
    v17 = SecItemCopyMatching((CFDictionaryRef)v15, &result);
    if ((_DWORD)v17)
    {
      MobileActivationError = createMobileActivationError((uint64_t)"store_certificate", 389, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query duplicate certificate: %d"), v17);
      goto LABEL_18;
    }
    v20 = SecItemDelete((CFDictionaryRef)v15);
    if ((_DWORD)v20)
    {
      MobileActivationError = createMobileActivationError((uint64_t)"store_certificate", 399, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to delete duplicate certificate: %d"), v20);
      goto LABEL_18;
    }
    objc_msgSend(v15, "setObject:forKeyedSubscript:", v11, kSecAttrLabel);
    v16 = SecItemAdd((CFDictionaryRef)v15, 0);
  }
  if ((_DWORD)v16)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"store_certificate", 413, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to add certificate (%@) to keychain: %d"), v11, v16);
LABEL_18:
    v21 = MobileActivationError;

    v13 = v21;
    if (!a5)
      goto LABEL_19;
    goto LABEL_12;
  }
  v19 = 1;
LABEL_20:
  if (result)
    CFRelease(result);
  result = 0;

  return v19;
}

uint64_t update_certificate(void *a1, void *a2, void *a3, NSError **a4)
{
  id v7;
  id v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  NSDictionary *v11;
  id v12;
  uint64_t v13;
  NSError *v14;
  uint64_t v15;
  _QWORD v17[3];
  _QWORD v18[3];

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = v9;
  if (v8 && v9)
  {
    v17[0] = kSecAttrLabel;
    v17[1] = kSecClass;
    v18[0] = v8;
    v18[1] = kSecClassCertificate;
    v17[2] = kSecUseDataProtectionKeychain;
    v18[2] = &__kCFBooleanTrue;
    v11 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 3);
    v12 = -[NSDictionary mutableCopy](v11, "mutableCopy");

    if (v7)
      objc_msgSend(v12, "setObject:forKeyedSubscript:", v7, kSecAttrAccessGroup);
    v13 = SecItemUpdate((CFDictionaryRef)v12, v10);
    if (!(_DWORD)v13)
    {
      v14 = 0;
      v15 = 1;
      goto LABEL_11;
    }
    v14 = createMobileActivationError((uint64_t)"update_certificate", 461, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to update %@ in keychain: %d"), v8, v13);
    if (!a4)
      goto LABEL_7;
LABEL_9:
    v14 = objc_retainAutorelease(v14);
    v15 = 0;
    *a4 = v14;
    goto LABEL_11;
  }
  v14 = createMobileActivationError((uint64_t)"update_certificate", 440, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
  v12 = 0;
  if (a4)
    goto LABEL_9;
LABEL_7:
  v15 = 0;
LABEL_11:

  return v15;
}

uint64_t store_pem_as_identity(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  const void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  NSError *v18;
  id v20;
  id v21;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = v12;
  if (v9 && v10 && v12)
  {
    v21 = 0;
    v14 = (const void *)lockcrypto_identity_from_pem_data(v10, v9, &v21);
    v15 = v21;
    v16 = v15;
    if (v14)
    {
      v20 = v15;
      v17 = store_identity((uint64_t)v14, v11, v13, (NSError **)&v20);
      v18 = (NSError *)v20;

      if (!a5)
        goto LABEL_12;
      goto LABEL_10;
    }
    v18 = createMobileActivationError((uint64_t)"store_pem_as_identity", 490, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v15, CFSTR("Failed to create identity from pem data"));

  }
  else
  {
    v18 = createMobileActivationError((uint64_t)"store_pem_as_identity", 484, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid inputs."));
    v14 = 0;
  }
  v17 = 0;
  if (!a5)
    goto LABEL_12;
LABEL_10:
  if ((v17 & 1) == 0)
    *a5 = objc_retainAutorelease(v18);
LABEL_12:
  if (v14)
    CFRelease(v14);

  return v17;
}

uint64_t store_pem_as_certificate(void *a1, void *a2, void *a3, int a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  SecCertificateRef v13;
  id v14;
  void *v15;
  char v16;
  NSError *v17;
  uint64_t v18;
  NSError *v19;
  uint64_t v20;
  id v22;
  id v23;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = v11;
  if (!v9 || !v11)
  {
    v17 = createMobileActivationError((uint64_t)"store_pem_as_certificate", 520, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid inputs."));
    v13 = 0;
    if (!a5)
      goto LABEL_12;
    goto LABEL_11;
  }
  v23 = 0;
  v13 = lockcrypto_cert_from_pem_data(v9, (NSError **)&v23);
  v14 = v23;
  v15 = v14;
  if (!v13)
  {
    v17 = createMobileActivationError((uint64_t)"store_pem_as_certificate", 526, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v14, CFSTR("Failed to create certificate from pem data."));

    if (!a5)
      goto LABEL_12;
LABEL_11:
    *a5 = objc_retainAutorelease(v17);
    goto LABEL_12;
  }
  v22 = v14;
  v16 = store_certificate((uint64_t)v13, v10, v12, a4, (NSError **)&v22);
  v17 = (NSError *)v22;

  if ((v16 & 1) != 0)
  {
    v18 = 1;
LABEL_13:
    CFRelease(v13);
    v20 = v18;
    goto LABEL_14;
  }
  v19 = createMobileActivationError((uint64_t)"store_pem_as_certificate", 532, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v17, CFSTR("Failed to store certificate."));

  v17 = v19;
  if (a5)
    goto LABEL_11;
LABEL_12:
  v18 = 0;
  v20 = 0;
  if (v13)
    goto LABEL_13;
LABEL_14:

  return v20;
}

CFTypeRef copy_keychain_item(void *a1, void *a2, void *a3, int *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id LAContextClass;
  uint64_t v16;
  char isKindOfClass;
  NSError *v18;
  CFTypeRef v19;
  int v20;
  id v21;
  id v22;
  id v23;
  NSDictionary *v24;
  id v25;
  uint64_t v26;
  _QWORD *v28;
  CFTypeRef result;
  _QWORD v30[4];
  _QWORD v31[4];

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = v11;
  result = 0;
  if (!v10)
  {
    v18 = createMobileActivationError((uint64_t)"copy_keychain_item", 563, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v19 = 0;
    v20 = -1;
    if (!a4)
      goto LABEL_24;
    goto LABEL_23;
  }
  v28 = a5;
  if (v11)
  {
    v13 = objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("LocalAuthenticationContext"));
    if (v13)
    {
      v14 = objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("LocalAuthenticationContext"));
      LAContextClass = getLAContextClass();
      v16 = objc_opt_class(LAContextClass);
      isKindOfClass = objc_opt_isKindOfClass(v14, v16);

      if ((isKindOfClass & 1) != 0)
        v13 = objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("LocalAuthenticationContext"));
      else
        v13 = 0;
    }
    v21 = objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("UseAuthenticationUI"));
    v22 = isNSString(v21);

    if (v22)
    {
      v23 = objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("UseAuthenticationUI"));
      goto LABEL_13;
    }
  }
  else
  {
    v13 = 0;
  }
  v23 = 0;
LABEL_13:
  v30[0] = kSecAttrLabel;
  v30[1] = kSecClass;
  v31[0] = v10;
  v31[1] = kSecClassKey;
  v30[2] = kSecReturnRef;
  v30[3] = kSecUseDataProtectionKeychain;
  v31[2] = &__kCFBooleanTrue;
  v31[3] = &__kCFBooleanTrue;
  v24 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v31, v30, 4);
  v25 = -[NSDictionary mutableCopy](v24, "mutableCopy");

  if (v9)
    objc_msgSend(v25, "setObject:forKeyedSubscript:", v9, kSecAttrAccessGroup);
  if (v13)
    objc_msgSend(v25, "setObject:forKeyedSubscript:", v13, kSecUseAuthenticationContext);
  if (v23)
    objc_msgSend(v25, "setObject:forKeyedSubscript:", v23, kSecUseAuthenticationUI);
  v26 = SecItemCopyMatching((CFDictionaryRef)v25, &result);
  v20 = v26;
  if ((_DWORD)v26)
  {
    v18 = createMobileActivationError((uint64_t)"copy_keychain_item", 607, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy keychain item %@: %d"), v10, v26);

    v19 = 0;
  }
  else
  {
    v19 = result;
    result = 0;

    v18 = 0;
  }
  a5 = v28;
  if (a4)
LABEL_23:
    *a4 = v20;
LABEL_24:
  if (a5 && !v19)
    *a5 = objc_retainAutorelease(v18);
  if (result)
    CFRelease(result);
  result = 0;

  return v19;
}

id getLAContextClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getLAContextClass_softClass;
  v7 = getLAContextClass_softClass;
  if (!getLAContextClass_softClass)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3254779904;
    v3[2] = __getLAContextClass_block_invoke;
    v3[3] = &__block_descriptor_40_e8_32r_e5_v8__0l;
    v3[4] = &v4;
    __getLAContextClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100040DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t delete_keychain_item(void *a1, void *a2, NSError **a3)
{
  id v5;
  id v6;
  void *v7;
  NSDictionary *v8;
  id v9;
  uint64_t v10;
  uint64_t v12;
  NSError *v13;
  _QWORD v15[3];
  _QWORD v16[3];

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!v6)
  {
    v13 = createMobileActivationError((uint64_t)"delete_keychain_item", 638, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    v9 = 0;
    if (!a3)
    {
LABEL_13:
      v12 = 0;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  v15[0] = kSecAttrLabel;
  v15[1] = kSecClass;
  v16[0] = v6;
  v16[1] = kSecClassKey;
  v15[2] = kSecUseDataProtectionKeychain;
  v16[2] = &__kCFBooleanTrue;
  v8 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 3);
  v9 = -[NSDictionary mutableCopy](v8, "mutableCopy");

  if (v5)
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v5, kSecAttrAccessGroup);
  v10 = SecItemDelete((CFDictionaryRef)v9);
  if ((_DWORD)v10 != -25300 && (_DWORD)v10 != 0)
  {
    v13 = createMobileActivationError((uint64_t)"delete_keychain_item", 659, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to remove existing keychain item %@: %d"), v7, v10);
    if (!a3)
      goto LABEL_13;
LABEL_11:
    v13 = objc_retainAutorelease(v13);
    v12 = 0;
    *a3 = v13;
    goto LABEL_14;
  }
  v13 = 0;
  v12 = 1;
LABEL_14:

  return v12;
}

uint64_t store_keychain_item(uint64_t a1, id a2, void *a3, void *a4, NSError **a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id LAContextClass;
  uint64_t v17;
  char isKindOfClass;
  id v19;
  NSError *v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  char v26;
  NSDictionary *v27;
  uint64_t v28;
  NSError *v29;
  id v31;
  _QWORD v32[5];
  _QWORD v33[5];

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = v11;
  if (a1 && v10)
  {
    if (v11)
    {
      v13 = objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("LocalAuthenticationContext"));
      if (v13
        && (v14 = v13,
            v15 = objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("LocalAuthenticationContext")),
            LAContextClass = getLAContextClass(),
            v17 = objc_opt_class(LAContextClass),
            isKindOfClass = objc_opt_isKindOfClass(v15, v17),
            v15,
            v14,
            (isKindOfClass & 1) != 0))
      {
        v19 = objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("LocalAuthenticationContext"));
      }
      else
      {
        v19 = 0;
      }
      v24 = objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("UseAuthenticationUI"));
      v25 = isNSString(v24);

      if (v25)
      {
        v22 = objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("UseAuthenticationUI"));
        goto LABEL_14;
      }
    }
    else
    {
      v19 = 0;
    }
    v22 = 0;
LABEL_14:
    v31 = 0;
    v26 = delete_keychain_item(v9, v10, (NSError **)&v31);
    v20 = (NSError *)v31;
    if ((v26 & 1) != 0)
    {
      v32[0] = kSecAttrLabel;
      v32[1] = kSecClass;
      v33[0] = v10;
      v33[1] = kSecClassKey;
      v32[2] = kSecValueRef;
      v32[3] = kSecUseDataProtectionKeychain;
      v33[2] = a1;
      v33[3] = &__kCFBooleanTrue;
      v32[4] = kSecAttrAccessible;
      v33[4] = kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
      v27 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v33, v32, 5);
      v21 = -[NSDictionary mutableCopy](v27, "mutableCopy");

      if (v9)
        objc_msgSend(v21, "setObject:forKeyedSubscript:", v9, kSecAttrAccessGroup);
      if (v19)
        objc_msgSend(v21, "setObject:forKeyedSubscript:", v19, kSecUseAuthenticationContext);
      if (v22)
        objc_msgSend(v21, "setObject:forKeyedSubscript:", v22, kSecUseAuthenticationUI);
      v28 = SecItemAdd((CFDictionaryRef)v21, 0);
      if (!(_DWORD)v28)
      {
        v23 = 1;
        goto LABEL_27;
      }
      v29 = createMobileActivationError((uint64_t)"store_keychain_item", 738, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to add %@ to keychain: %d"), v10, v28);

    }
    else
    {
      v29 = createMobileActivationError((uint64_t)"store_keychain_item", 705, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v20, CFSTR("Failed to delete existing keychain item."));

      v21 = 0;
    }
    v20 = v29;
    if (!a5)
      goto LABEL_25;
    goto LABEL_8;
  }
  v20 = createMobileActivationError((uint64_t)"store_keychain_item", 688, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
  v21 = 0;
  v19 = 0;
  v22 = 0;
  if (!a5)
  {
LABEL_25:
    v23 = 0;
    goto LABEL_27;
  }
LABEL_8:
  v20 = objc_retainAutorelease(v20);
  v23 = 0;
  *a5 = v20;
LABEL_27:

  return v23;
}

uint64_t update_keychain_item(void *a1, void *a2, void *a3, NSError **a4)
{
  id v7;
  id v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  NSDictionary *v11;
  id v12;
  uint64_t v13;
  NSError *v14;
  uint64_t v15;
  _QWORD v17[3];
  _QWORD v18[3];

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = v9;
  if (v8 && v9)
  {
    v17[0] = kSecAttrLabel;
    v17[1] = kSecClass;
    v18[0] = v8;
    v18[1] = kSecClassKey;
    v17[2] = kSecUseDataProtectionKeychain;
    v18[2] = &__kCFBooleanTrue;
    v11 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 3);
    v12 = -[NSDictionary mutableCopy](v11, "mutableCopy");

    if (v7)
      objc_msgSend(v12, "setObject:forKeyedSubscript:", v7, kSecAttrAccessGroup);
    v13 = SecItemUpdate((CFDictionaryRef)v12, v10);
    if (!(_DWORD)v13)
    {
      v14 = 0;
      v15 = 1;
      goto LABEL_11;
    }
    v14 = createMobileActivationError((uint64_t)"update_keychain_item", 784, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to update %@ in keychain: %d"), v8, v13);
    if (!a4)
      goto LABEL_7;
LABEL_9:
    v14 = objc_retainAutorelease(v14);
    v15 = 0;
    *a4 = v14;
    goto LABEL_11;
  }
  v14 = createMobileActivationError((uint64_t)"update_keychain_item", 763, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
  v12 = 0;
  if (a4)
    goto LABEL_9;
LABEL_7:
  v15 = 0;
LABEL_11:

  return v15;
}

id copy_keychain_data(void *a1, void *a2, int *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  NSDictionary *v10;
  id v11;
  uint64_t v12;
  int v13;
  NSError *v14;
  void *v15;
  id v16;
  CFTypeRef result;
  _QWORD v19[4];
  _QWORD v20[4];

  v7 = a1;
  v8 = a2;
  v9 = v8;
  result = 0;
  if (v8)
  {
    v19[0] = kSecAttrLabel;
    v19[1] = kSecClass;
    v20[0] = v8;
    v20[1] = kSecClassGenericPassword;
    v19[2] = kSecReturnData;
    v19[3] = kSecUseDataProtectionKeychain;
    v20[2] = &__kCFBooleanTrue;
    v20[3] = &__kCFBooleanTrue;
    v10 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 4);
    v11 = -[NSDictionary mutableCopy](v10, "mutableCopy");

    if (v7)
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v7, kSecAttrAccessGroup);
    v12 = SecItemCopyMatching((CFDictionaryRef)v11, &result);
    v13 = v12;
    if ((_DWORD)v12)
    {
      v14 = createMobileActivationError((uint64_t)"copy_keychain_data", 831, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy keychain item %@: %d"), v9, v12);
      v15 = 0;
      if (!a3)
        goto LABEL_9;
    }
    else
    {
      v14 = 0;
      v15 = (void *)result;
      result = 0;
      if (!a3)
        goto LABEL_9;
    }
    goto LABEL_8;
  }
  v14 = createMobileActivationError((uint64_t)"copy_keychain_data", 809, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
  v15 = 0;
  v11 = 0;
  v13 = -1;
  if (a3)
LABEL_8:
    *a3 = v13;
LABEL_9:
  if (a4 && !v15)
    *a4 = objc_retainAutorelease(v14);
  if (result)
    CFRelease(result);
  result = 0;
  v16 = v15;

  return v16;
}

uint64_t delete_keychain_data(void *a1, void *a2, NSError **a3)
{
  id v5;
  id v6;
  void *v7;
  NSDictionary *v8;
  id v9;
  uint64_t v10;
  uint64_t v12;
  NSError *v13;
  _QWORD v15[3];
  _QWORD v16[3];

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!v6)
  {
    v13 = createMobileActivationError((uint64_t)"delete_keychain_data", 862, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    v9 = 0;
    if (!a3)
    {
LABEL_13:
      v12 = 0;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  v15[0] = kSecAttrLabel;
  v15[1] = kSecClass;
  v16[0] = v6;
  v16[1] = kSecClassGenericPassword;
  v15[2] = kSecUseDataProtectionKeychain;
  v16[2] = &__kCFBooleanTrue;
  v8 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 3);
  v9 = -[NSDictionary mutableCopy](v8, "mutableCopy");

  if (v5)
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v5, kSecAttrAccessGroup);
  v10 = SecItemDelete((CFDictionaryRef)v9);
  if ((_DWORD)v10 != -25300 && (_DWORD)v10 != 0)
  {
    v13 = createMobileActivationError((uint64_t)"delete_keychain_data", 883, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to remove existing keychain item %@: %d"), v7, v10);
    if (!a3)
      goto LABEL_13;
LABEL_11:
    v13 = objc_retainAutorelease(v13);
    v12 = 0;
    *a3 = v13;
    goto LABEL_14;
  }
  v13 = 0;
  v12 = 1;
LABEL_14:

  return v12;
}

uint64_t store_keychain_data(void *a1, void *a2, void *a3, NSError **a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  char v11;
  NSError *v12;
  NSDictionary *v13;
  id v14;
  uint64_t v15;
  NSError *v16;
  uint64_t v17;
  id v19;
  _QWORD v20[7];
  _QWORD v21[7];

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = v9;
  if (v7 && v9)
  {
    v19 = 0;
    v11 = delete_keychain_data(v8, v9, (NSError **)&v19);
    v12 = (NSError *)v19;
    if ((v11 & 1) != 0)
    {
      v20[0] = kSecAttrLabel;
      v20[1] = kSecClass;
      v21[0] = v10;
      v21[1] = kSecClassGenericPassword;
      v20[2] = kSecValueData;
      v20[3] = kSecUseDataProtectionKeychain;
      v21[2] = v7;
      v21[3] = &__kCFBooleanTrue;
      v20[4] = kSecAttrService;
      v20[5] = kSecAttrAccount;
      v21[4] = CFSTR("com.apple.mobileactivationd");
      v21[5] = v10;
      v20[6] = kSecAttrAccessible;
      v21[6] = kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
      v13 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v20, 7);
      v14 = -[NSDictionary mutableCopy](v13, "mutableCopy");

      if (v8)
        objc_msgSend(v14, "setObject:forKeyedSubscript:", v8, kSecAttrAccessGroup);
      v15 = SecItemAdd((CFDictionaryRef)v14, 0);
      if (!(_DWORD)v15)
      {
        v17 = 1;
        goto LABEL_14;
      }
      v16 = createMobileActivationError((uint64_t)"store_keychain_data", 941, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to add %@ to keychain: %d"), v10, v15);

    }
    else
    {
      v16 = createMobileActivationError((uint64_t)"store_keychain_data", 913, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v12, CFSTR("Failed to delete existing keychain item."));

      v14 = 0;
    }
    v12 = v16;
    if (!a4)
      goto LABEL_12;
  }
  else
  {
    v12 = createMobileActivationError((uint64_t)"store_keychain_data", 908, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    v14 = 0;
    if (!a4)
    {
LABEL_12:
      v17 = 0;
      goto LABEL_14;
    }
  }
  v12 = objc_retainAutorelease(v12);
  v17 = 0;
  *a4 = v12;
LABEL_14:

  return v17;
}

uint64_t update_keychain_data(void *a1, void *a2, void *a3, NSError **a4)
{
  id v7;
  id v8;
  const __CFDictionary *v9;
  NSDictionary *v10;
  id v11;
  uint64_t v12;
  NSError *v13;
  uint64_t v14;
  _QWORD v16[5];
  _QWORD v17[5];

  v7 = a1;
  v8 = a2;
  v9 = a3;
  if (v8)
  {
    v16[0] = kSecAttrLabel;
    v16[1] = kSecClass;
    v17[0] = v8;
    v17[1] = kSecClassGenericPassword;
    v16[2] = kSecUseDataProtectionKeychain;
    v16[3] = kSecAttrService;
    v17[2] = &__kCFBooleanTrue;
    v17[3] = CFSTR("com.apple.mobileactivationd");
    v16[4] = kSecAttrAccount;
    v17[4] = v8;
    v10 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 5);
    v11 = -[NSDictionary mutableCopy](v10, "mutableCopy");

    if (v7)
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v7, kSecAttrAccessGroup);
    v12 = SecItemUpdate((CFDictionaryRef)v11, v9);
    if (!(_DWORD)v12)
    {
      v13 = 0;
      v14 = 1;
      goto LABEL_10;
    }
    v13 = createMobileActivationError((uint64_t)"update_keychain_data", 989, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to update %@ in keychain: %d"), v8, v12);
    if (a4)
      goto LABEL_6;
LABEL_8:
    v14 = 0;
    goto LABEL_10;
  }
  v13 = createMobileActivationError((uint64_t)"update_keychain_data", 966, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
  v11 = 0;
  if (!a4)
    goto LABEL_8;
LABEL_6:
  v13 = objc_retainAutorelease(v13);
  v14 = 0;
  *a4 = v13;
LABEL_10:

  return v14;
}

Class __getLAContextClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!LocalAuthenticationLibraryCore_frameworkLibrary)
  {
    v4 = off_100259D58;
    v5 = 0;
    LocalAuthenticationLibraryCore_frameworkLibrary = _sl_dlopen(&v4, &v3);
  }
  if (!LocalAuthenticationLibraryCore_frameworkLibrary)
    __getLAContextClass_block_invoke_cold_1(&v3);
  if (v3)
    free(v3);
  result = objc_getClass("LAContext");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getLAContextClass_block_invoke_cold_2();
  getLAContextClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100042094(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL networkReachable()
{
  NetworkProvider *v0;
  NetworkProvider *v1;
  _BOOL8 v2;

  v0 = +[NetworkProvider sharedInstance](NetworkProvider, "sharedInstance");
  v1 = v0;
  if (v0)
  {
    v2 = -[NetworkProvider networkReachable](v0, "networkReachable");
  }
  else
  {

    v2 = 0;
  }

  return v2;
}

NSSet *copy_unsupported_virtual_machine_oids()
{
  return +[NSSet setWithObjects:](NSSet, "setWithObjects:", CFSTR("1.2.840.113635.100.10.1"), 0);
}

NSArray *copy_required_dcrt_oids()
{
  _QWORD v1[4];

  v1[0] = CFSTR("1.2.840.113635.100.8.4");
  v1[1] = CFSTR("1.2.840.113635.100.8.12");
  v1[2] = CFSTR("1.2.840.113635.100.8.5");
  v1[3] = CFSTR("1.2.840.113635.100.8.7");
  return +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v1, 4);
}

NSArray *copy_critical_dcrt_oids()
{
  _QWORD v1[2];

  v1[0] = CFSTR("1.2.840.113635.100.8.4");
  v1[1] = CFSTR("1.2.840.113635.100.8.5");
  return +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v1, 2);
}

id client_requires_critical_dcrt_oids(uint64_t a1)
{
  return objc_msgSend(&off_100271C20, "containsObject:", a1);
}

NSSet *copy_supported_eda_oids()
{
  return +[NSSet setWithObjects:](NSSet, "setWithObjects:", CFSTR("1.2.840.113635.100.8.9.1"), CFSTR("1.2.840.113635.100.8.9.2"), CFSTR("1.2.840.113635.100.8.10.1"), CFSTR("1.2.840.113635.100.8.10.2"), CFSTR("1.2.840.113635.100.8.10.3"), CFSTR("1.2.840.113635.100.8.11.1"), CFSTR("1.2.840.113635.100.8.13.1"), CFSTR("1.2.840.113635.100.8.13.2"), CFSTR("1.2.840.113635.100.8.13.3"), CFSTR("1.2.840.113635.100.8.13.4"), CFSTR("1.2.840.113635.100.8.9.3"), CFSTR("1.2.840.113635.100.8.9.4"), 0);
}

NSMutableSet *copy_supported_baa_oids()
{
  NSMutableSet *v0;
  NSSet *v1;

  v0 = +[NSMutableSet setWithObjects:](NSMutableSet, "setWithObjects:", CFSTR("1.2.840.113635.100.10.1"), CFSTR("1.2.840.113635.100.10.2"), CFSTR("1.2.840.113635.100.8.1"), CFSTR("1.2.840.113635.100.8.2"), CFSTR("1.2.840.113635.100.8.3"), CFSTR("1.2.840.113635.100.8.4"), CFSTR("1.2.840.113635.100.8.5"), CFSTR("1.2.840.113635.100.8.6"), CFSTR("1.2.840.113635.100.8.7"), CFSTR("1.2.840.113635.100.8.12"), CFSTR("1.2.840.113635.100.6.71.1"), CFSTR("1.2.840.113635.100.6.71.2"), CFSTR("1.2.840.113635.100.6.71.3"), CFSTR("1.2.840.113635.100.8.9.4"), CFSTR("1.2.840.113635.100.8.10.4"), 0);
  if (is_virtual_machine())
  {
    v1 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", CFSTR("1.2.840.113635.100.10.1"), 0);
    -[NSMutableSet minusSet:](v0, "minusSet:", v1);

  }
  return v0;
}

CFTypeRef createReferenceKeyBlob(const void *a1, char a2, id a3, _QWORD *a4)
{
  id v7;
  __CFString *v8;
  id v9;
  id v10;
  _UNKNOWN **v11;
  NSError *v12;
  id v13;
  id v14;
  id v15;
  __CFString *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  NSError *MobileActivationError;
  void *v21;
  CFTypeRef v22;
  SecKeyRef v23;
  id v24;
  SecKeyRef v25;
  CFErrorRef error;

  v7 = a3;
  v8 = (id)kSecAttrKeyTypeECSECPrimeRandom;
  error = 0;
  if (v7
    && (v9 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("KeySizeInBits")),
        v10 = isNSNumber(v9),
        v10,
        v9,
        v10))
  {
    v11 = (_UNKNOWN **)objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("KeySizeInBits"));
    if ((objc_msgSend(v11, "isEqualToNumber:", &off_100271718) & 1) == 0
      && (objc_msgSend(v11, "isEqualToNumber:", &off_100271730) & 1) == 0)
    {
      v12 = createMobileActivationError((uint64_t)"createReferenceKeyBlob", 73, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid value for option (%@): unsupported size (%@)"), CFSTR("KeySizeInBits"), v11);
      v13 = 0;
LABEL_19:
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v17 = 0;
      goto LABEL_30;
    }
  }
  else
  {
    v11 = &off_100271718;
  }
  v14 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v13 = objc_msgSend(v14, "copyAnswer:", CFSTR("HasPKA"));

  v15 = isNSNumber(v13);
  if (!v15)
  {
    v12 = createMobileActivationError((uint64_t)"createReferenceKeyBlob", 84, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve PKA state."));
    goto LABEL_19;
  }
  if (objc_msgSend(v13, "BOOLValue") && (a2 & 1) == 0)
  {
    v16 = (__CFString *)kSecAttrKeyTypeECSECPrimeRandomPKA;

    v8 = v16;
  }
  if (!a1 || (v17 = CFRetain(a1)) == 0)
  {
    if ((isRunningInRecovery() & 1) != 0 || isRunningInDiagnosticsMode())
    {
      v18 = SecAccessControlCreate(0, &error);
      v17 = (const void *)v18;
      if (!v18)
      {
        MobileActivationError = createMobileActivationError((uint64_t)"createReferenceKeyBlob", 104, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to create access control."));
        goto LABEL_28;
      }
      v19 = kSecAttrAccessibleUntilReboot;
      if ((SecAccessControlSetProtection(v18, kSecAttrAccessibleUntilReboot, &error) & 1) == 0)
      {
        MobileActivationError = createMobileActivationError((uint64_t)"createReferenceKeyBlob", 109, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to set ACL protection to %@."), v19);
LABEL_28:
        v12 = MobileActivationError;
        v21 = 0;
        goto LABEL_29;
      }
    }
    else
    {
      v17 = SecAccessControlCreateWithFlags(0, kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly, 0x40000000uLL, &error);
      if (!v17)
      {
        MobileActivationError = createMobileActivationError((uint64_t)"createReferenceKeyBlob", 115, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to create access control (%@)."), kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate);
        goto LABEL_28;
      }
    }
  }
  v24 = objc_alloc_init((Class)NSMutableDictionary);
  v21 = v24;
  if (!v24)
  {
    v12 = createMobileActivationError((uint64_t)"createReferenceKeyBlob", 123, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to alloc dictionary."));
LABEL_29:
    v22 = 0;
    v23 = 0;
    goto LABEL_30;
  }
  objc_msgSend(v24, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, kSecAttrIsPermanent);
  objc_msgSend(v21, "setObject:forKeyedSubscript:", kSecAttrTokenIDAppleKeyStore, kSecAttrTokenID);
  objc_msgSend(v21, "setObject:forKeyedSubscript:", v8, kSecAttrKeyType);
  objc_msgSend(v21, "setObject:forKeyedSubscript:", v17, kSecAttrAccessControl);
  objc_msgSend(v21, "setObject:forKeyedSubscript:", v11, kSecAttrKeySizeInBits);
  v25 = SecKeyCreateRandomKey((CFDictionaryRef)v21, &error);
  v23 = v25;
  if (v25)
  {
    v22 = CFRetain(v25);
    v12 = 0;
  }
  else
  {
    v12 = createMobileActivationError((uint64_t)"createReferenceKeyBlob", 141, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to create ref key."));
    v22 = 0;
  }
LABEL_30:
  if (a4 && !v22)
    *a4 = objc_retainAutorelease(v12);
  if (v23)
    CFRelease(v23);
  if (v17)
    CFRelease(v17);
  if (error)
    CFRelease(error);

  return v22;
}

__SecKey *create_baa_info(__SecKey *a1, id a2, _QWORD *a3)
{
  id v4;
  id v5;
  NSArray *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  id v15;
  id v16;
  id v17;
  NSSet *v18;
  NSArray *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  id v23;
  id v24;
  int v25;
  unsigned int v26;
  id v27;
  void *v28;
  __SecKey *v29;
  unsigned int v30;
  char v31;
  char v32;
  unsigned int v33;
  id v34;
  id v35;
  __SecKey *v36;
  id v37;
  const void *v38;
  __SecKey *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  __SecKey *v44;
  unsigned int v45;
  uint64_t v46;
  id v47;
  __SecKey *v48;
  CFDataRef v49;
  uint64_t v50;
  uint64_t v51;
  const void *v52;
  __SecKey *v53;
  unsigned int v54;
  unsigned int v55;
  id v56;
  id v57;
  id v58;
  void *v59;
  NSError *MobileActivationError;
  id v61;
  id v62;
  id v63;
  NSNumber *v64;
  _UNKNOWN **v65;
  NSNumber *v66;
  NSNumber *v67;
  id v68;
  unsigned int v69;
  void *v70;
  id v71;
  id v72;
  id v73;
  id v74;
  NSNumber *v75;
  unsigned __int8 v76;
  id v77;
  NSFileManager *v78;
  id v79;
  id v80;
  unsigned __int8 v81;
  id v82;
  __SecKey *v83;
  __SecKey *v84;
  void *v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  __SecKey *v93;
  id v94;
  id v95;
  id v96;
  __SecKey *v97;
  CFDataRef v98;
  CFDataRef v99;
  id *v100;
  void **v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  id v105;
  id v106;
  id v107;
  __SecKey *v108;
  id v109;
  void *v110;
  id v111;
  __SecKey *v112;
  id v113;
  id v114;
  id v115;
  const void *v116;
  __SecKey *v117;
  id v119;
  id v120;
  id v121;
  id v122;
  CFDataRef v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  unsigned __int8 v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  int v141;
  id v142;
  id v143;
  id v144;
  id v145;
  id v146;
  id v147;
  __SecKey *v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  const __CFString *v156;
  void *v157;
  CFDataRef v158;
  id v159;
  NSDictionary *v160;
  id v161;
  id v162;
  int v163;
  id v164;
  id v165;
  id v166;
  id v167;
  id v168;
  void *v169;
  id v170;
  unsigned int v171;
  id v172;
  id v173;
  NSData *v174;
  __SecKey *v175;
  CFDataRef v176;
  NSError *v177;
  NSError *v178;
  NSError *v179;
  __SecKey *v180;
  id v181;
  id v182;
  __SecKey *v183;
  id v184;
  __SecKey *v185;
  __SecKey *cf;
  id v187;
  __SecKey *v188;
  const void *v189;
  __SecKey *v190;
  id v191;
  __SecKey *v192;
  CFDataRef v193;
  SecKeyRef key;
  SecKeyRef keya;
  __SecKey *keyb;
  id v197;
  id v198;
  unsigned int v199;
  id v200;
  id v201;
  int v202;
  int v203;
  id v204;
  CFDataRef v205;
  __SecKey *v206;
  __SecKey *v207;
  id v208;
  id v209;
  id v210;
  id v211;
  id v212;
  id v213;
  NSNumber *v214;
  NSNumber *v215;
  unsigned int v216;
  id v217;
  unsigned int v218;
  id v219;
  NSNumber *v220;
  id v221;
  id v222;
  id v223;
  id v224;
  id v225;
  CFDataRef v226;
  NSNumber *v227;
  unsigned int v229;
  NSError *v230;
  unsigned int v231;
  unsigned int v232;
  id v233;
  id v234;
  id v235;
  id v236;
  id v237;
  id v238;
  void *v239;
  void *v240;
  id v241;
  id v242;
  id v243;
  id v244;
  id v245;
  id v246;
  id v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  CFErrorRef error;
  _QWORD v253[12];
  _QWORD v254[12];
  _BYTE v255[128];
  _QWORD v256[3];

  v4 = a2;
  error = 0;
  v5 = objc_alloc((Class)NSMutableArray);
  v256[0] = CFSTR("1.2.840.113635.100.8.4");
  v256[1] = CFSTR("1.2.840.113635.100.8.5");
  v256[2] = CFSTR("1.2.840.113635.100.8.7");
  v6 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v256, 3);
  v7 = objc_msgSend(v5, "initWithArray:", v6);

  v220 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 0);
  v234 = v4;
  key = a1;
  if (!v4)
  {
    v233 = v7;
    v25 = 0;
    v20 = 0;
    v26 = 0;
    v27 = 0;
    v219 = 0;
    v28 = 0;
    v210 = 0;
    v211 = 0;
    v212 = 0;
    v29 = 0;
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v30 = 0;
    v31 = 1;
    v214 = (NSNumber *)&off_100271760;
    v226 = 0;
    v227 = (NSNumber *)&off_100271760;
    v215 = (NSNumber *)&off_100271748;
    goto LABEL_24;
  }
  v8 = objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("OIDSToInclude"));
  v9 = isNSArray(v8);

  if (v9)
  {
    v233 = v7;
    v250 = 0u;
    v251 = 0u;
    v248 = 0u;
    v249 = 0u;
    v10 = objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("OIDSToInclude"));
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v248, v255, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v249;
      while (2)
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(_QWORD *)v249 != v13)
            objc_enumerationMutation(v10);
          v15 = isNSString(*(void **)(*((_QWORD *)&v248 + 1) + 8 * (_QWORD)i));

          if (!v15)
          {
            v37 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("OIDSToInclude"));
            v230 = createMobileActivationError((uint64_t)"create_baa_info", 244, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid options (%@): %@"), CFSTR("OIDSToInclude"), v37);

            goto LABEL_28;
          }
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v248, v255, 16);
        if (v12)
          continue;
        break;
      }
    }

    v16 = objc_alloc((Class)NSMutableArray);
    v17 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("OIDSToInclude"));
    v7 = objc_msgSend(v16, "initWithArray:", v17);

    if (is_virtual_machine())
    {
      v18 = copy_unsupported_virtual_machine_oids();
      v19 = -[NSSet allObjects](v18, "allObjects");
      objc_msgSend(v7, "removeObjectsInArray:", v19);

    }
  }
  if ((objc_msgSend(v7, "containsObject:", CFSTR("1.2.840.113635.100.8.1")) & 1) != 0
    || (objc_msgSend(v7, "containsObject:", CFSTR("1.2.840.113635.100.8.7")) & 1) != 0
    || (objc_msgSend(v7, "containsObject:", CFSTR("1.2.840.113635.100.8.10.1")) & 1) != 0
    || (objc_msgSend(v7, "containsObject:", CFSTR("1.2.840.113635.100.8.10.2")) & 1) != 0
    || objc_msgSend(v7, "containsObject:", CFSTR("1.2.840.113635.100.8.10.3")))
  {
    v20 = objc_msgSend(v7, "containsObject:", CFSTR("1.2.840.113635.100.8.1"));
    v21 = 1;
  }
  else
  {
    v21 = 0;
    v20 = 0;
  }
  v22 = objc_msgSend(v7, "containsObject:", CFSTR("1.2.840.113635.100.8.7"));
  v233 = v7;
  if ((objc_msgSend(v7, "containsObject:", CFSTR("1.2.840.113635.100.8.2")) & 1) != 0
    || objc_msgSend(v7, "containsObject:", CFSTR("1.2.840.113635.100.8.11.1")))
  {
    v23 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("nonce"));
    v24 = isNSData(v23);
    if (v24)
    {

    }
    else
    {
      v203 = v21;
      v54 = v20;
      v55 = v22;
      v56 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("AppSpecificData"));
      v15 = isNSData(v56);

      if (!v15)
      {
        v230 = createMobileActivationError((uint64_t)"create_baa_info", 281, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Missing one of the required options: %@ / %@"), CFSTR("nonce"), CFSTR("AppSpecificData"));
LABEL_28:
        v201 = 0;
        v38 = 0;
        v208 = 0;
        v209 = 0;
        v225 = 0;
        v226 = 0;
        v211 = 0;
        v212 = 0;
        v206 = 0;
        v207 = 0;
        v210 = 0;
        v221 = 0;
        v222 = 0;
        v213 = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v29 = 0;
        v204 = 0;
        v205 = 0;
        v34 = 0;
        v43 = 0;
        v217 = 0;
        v219 = 0;
        v223 = 0;
        v193 = 0;
        keya = 0;
        v44 = 0;
        goto LABEL_118;
      }
      v22 = v55;
      v20 = v54;
      v21 = v203;
    }
    v57 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("nonce"));
    v58 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("AppSpecificData"));
    v59 = v58;
    v222 = v57;
    if (v58)
    {
      v43 = isNSData(v58);

      if (!v43)
      {
        v221 = v59;
        v230 = createMobileActivationError((uint64_t)"create_baa_info", 290, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid value for option (%@)."), CFSTR("AppSpecificData"));
        v201 = 0;
        v38 = 0;
        v208 = 0;
        v209 = 0;
        v225 = 0;
        v211 = 0;
        v212 = 0;
        v206 = 0;
        v207 = 0;
        v210 = 0;
        v213 = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v29 = 0;
        v205 = 0;
        v34 = 0;
LABEL_117:
        v217 = 0;
        v219 = 0;
        v226 = 0;
        v223 = 0;
        v193 = 0;
        keya = 0;
        v204 = 0;
        v44 = 0;
        v15 = 0;
LABEL_118:
        v197 = 0;
        v200 = 0;
        v227 = (NSNumber *)&off_100271760;
        v214 = (NSNumber *)&off_100271760;
        v215 = (NSNumber *)&off_100271748;
        goto LABEL_119;
      }
      if ((unint64_t)objc_msgSend(v59, "length") >= 0x41)
      {
        v221 = v59;
        MobileActivationError = createMobileActivationError((uint64_t)"create_baa_info", 295, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid value for option (%@): unexpected size (%lu)"), CFSTR("AppSpecificData"), objc_msgSend(v59, "length"));
LABEL_110:
        v230 = MobileActivationError;
LABEL_111:
        v201 = 0;
        v38 = 0;
        v208 = 0;
        v209 = 0;
        v225 = 0;
        v211 = 0;
        v212 = 0;
        goto LABEL_112;
      }
    }
  }
  else
  {
    v222 = 0;
    v59 = 0;
  }
  v62 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("CertType"));
  v63 = isNSNumber(v62);

  v221 = v59;
  if (v63)
  {
    v64 = (NSNumber *)objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("CertType"));

    v65 = &CCDigest_ptr;
    v66 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 0);
    if (-[NSNumber isEqualToNumber:](v64, "isEqualToNumber:", v66))
    {
LABEL_62:

      goto LABEL_64;
    }
    v67 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 1);
    if (-[NSNumber isEqualToNumber:](v64, "isEqualToNumber:", v67))
    {

      v65 = &CCDigest_ptr;
      goto LABEL_62;
    }
    v231 = v22;
    v75 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 2);
    v76 = -[NSNumber isEqualToNumber:](v64, "isEqualToNumber:", v75);

    if ((v76 & 1) == 0)
    {
      v220 = v64;
      MobileActivationError = createMobileActivationError((uint64_t)"create_baa_info", 305, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid value for option (%@): %@"), CFSTR("CertType"), v64);
      goto LABEL_110;
    }
    v22 = v231;
    v65 = &CCDigest_ptr;
  }
  else
  {
    v64 = v220;
    v65 = &CCDigest_ptr;
  }
LABEL_64:
  v68 = objc_msgSend(v65[82], "numberWithUnsignedInt:", 1);
  v69 = -[NSNumber isEqualToNumber:](v64, "isEqualToNumber:", v68);

  v220 = v64;
  if (v69)
  {
    if (!device_supports_mfi_certificates())
    {
      MobileActivationError = createMobileActivationError((uint64_t)"create_baa_info", 312, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Certificate type not supported on this platform: %@"), v64);
      goto LABEL_110;
    }
    v70 = v233;
    if ((objc_msgSend(v233, "containsObject:", CFSTR("1.2.840.113635.100.6.71.1")) & 1) == 0)
    {
      MobileActivationError = createMobileActivationError((uint64_t)"create_baa_info", 317, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Missing required OID for certificate type (%@): %@"), v64, CFSTR("1.2.840.113635.100.6.71.1"));
      goto LABEL_110;
    }
  }
  else
  {
    v70 = v233;
    if ((objc_msgSend(v233, "containsObject:", CFSTR("1.2.840.113635.100.6.71.1")) & 1) != 0
      || (objc_msgSend(v233, "containsObject:", CFSTR("1.2.840.113635.100.6.71.2")) & 1) != 0
      || objc_msgSend(v233, "containsObject:", CFSTR("1.2.840.113635.100.6.71.3")))
    {
      MobileActivationError = createMobileActivationError((uint64_t)"create_baa_info", 324, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid OID(s) for requested certificate type: %@"), v64);
      goto LABEL_110;
    }
  }
  if (objc_msgSend(v70, "containsObject:", CFSTR("1.2.840.113635.100.6.71.1"))
    && (v71 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("MFiProperties")),
        v72 = isNSData(v71),
        v72,
        v71,
        v72))
  {
    v73 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("MFiProperties"));
    v74 = objc_msgSend(v73, "length");

    if (v74 != (id)32)
    {
      v124 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("MFiProperties"));
      v230 = createMobileActivationError((uint64_t)"create_baa_info", 332, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid value for option (%@): unexpected size (%lu)"), CFSTR("MFiProperties"), objc_msgSend(v124, "length"));

      goto LABEL_111;
    }
    v212 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("MFiProperties"));
  }
  else
  {
    v212 = 0;
  }
  if (objc_msgSend(v233, "containsObject:", CFSTR("1.2.840.113635.100.6.71.2")))
  {
    v104 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("MFiPPUID"));
    v40 = isNSString(v104);

    if (!v40)
    {
      v230 = createMobileActivationError((uint64_t)"create_baa_info", 342, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Missing required option: %@"), CFSTR("MFiPPUID"));
      v201 = 0;
      v38 = 0;
      v208 = 0;
      v209 = 0;
      v225 = 0;
      v211 = 0;
      v206 = 0;
      v207 = 0;
      goto LABEL_149;
    }
    v105 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("MFiPPUID"));
    v106 = objc_msgSend(v105, "length");

    if ((unint64_t)v106 >= 0x25)
    {
      v107 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("MFiPPUID"));
      v230 = createMobileActivationError((uint64_t)"create_baa_info", 347, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid value for option (%@): unexpected size (%lu)"), CFSTR("MFiPPUID"), objc_msgSend(v107, "length"));

      v201 = 0;
      v38 = 0;
      v208 = 0;
      v209 = 0;
      v225 = 0;
      v211 = 0;
LABEL_112:
      v206 = 0;
      v207 = 0;
LABEL_113:
      v210 = 0;
      v213 = 0;
      v39 = 0;
LABEL_114:
      v40 = 0;
LABEL_115:
      v41 = 0;
      v42 = 0;
      v29 = 0;
LABEL_116:
      v205 = 0;
      v34 = 0;
      v43 = 0;
      goto LABEL_117;
    }
    v125 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("MFiPPUID"));
    v29 = (__SecKey *)objc_msgSend(v125, "stringByPaddingToLength:withString:startingAtIndex:", 36, &stru_10026AAA0, 0);

    if (!v29)
    {
      v230 = createMobileActivationError((uint64_t)"create_baa_info", 356, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Failed to pad string."));
      v201 = 0;
      v38 = 0;
      v208 = 0;
      v209 = 0;
      v225 = 0;
      v210 = 0;
      v211 = 0;
      v206 = 0;
      v207 = 0;
      v213 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      goto LABEL_116;
    }
    v39 = (__SecKey *)-[__SecKey dataUsingEncoding:](v29, "dataUsingEncoding:", 4);
    if (!v39)
    {
      v206 = v29;
      v230 = createMobileActivationError((uint64_t)"create_baa_info", 362, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Failed to convert string to data."));
      v201 = 0;
      v38 = 0;
      v208 = 0;
      v209 = 0;
      v225 = 0;
      v210 = 0;
      v211 = 0;
      v207 = 0;
      v213 = 0;
      goto LABEL_114;
    }
  }
  else
  {
    v29 = 0;
    v39 = 0;
  }
  v207 = v39;
  if (objc_msgSend(v233, "containsObject:", CFSTR("1.2.840.113635.100.6.71.3")))
  {
    v119 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("MFiData"));
    v40 = isNSData(v119);

    if (v40)
    {
      v120 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("MFiData"));
      v121 = objc_msgSend(v120, "length");

      if ((unint64_t)v121 >= 0x4B0)
      {
        v206 = v29;
        v122 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("MFiData"));
        v230 = createMobileActivationError((uint64_t)"create_baa_info", 374, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid value for option (%@): unexpected size (%lu)"), CFSTR("MFiData"), objc_msgSend(v122, "length"));

        v201 = 0;
        v38 = 0;
        v208 = 0;
        v209 = 0;
        v225 = 0;
        v211 = 0;
        goto LABEL_113;
      }
      v211 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("MFiData"));
      goto LABEL_153;
    }
    v206 = v29;
    v230 = createMobileActivationError((uint64_t)"create_baa_info", 369, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Missing required option: %@"), CFSTR("MFiData"));
    v201 = 0;
    v38 = 0;
    v208 = 0;
    v209 = 0;
    v225 = 0;
    v211 = 0;
LABEL_149:
    v210 = 0;
    v213 = 0;
    v39 = 0;
    goto LABEL_115;
  }
  v211 = 0;
LABEL_153:
  v126 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("UseRKSigningInterface"));
  v127 = isNSNumber(v126);

  v232 = v22;
  if (v127)
  {
    v128 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("UseRKSigningInterface"));
    v218 = objc_msgSend(v128, "BOOLValue");

  }
  else
  {
    v218 = 0;
  }
  v129 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("UseSoftwareGeneratedKey"));
  v130 = isNSNumber(v129);

  if (v130)
  {
    v131 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("UseSoftwareGeneratedKey"));
    v132 = objc_msgSend(v131, "BOOLValue");

  }
  else
  {
    v132 = 1;
  }
  v133 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("Validity"));
  v134 = isNSNumber(v133);

  if (v134)
  {
    v135 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("Validity"));
    v215 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v135, "unsignedIntegerValue"));

  }
  else
  {
    v215 = (NSNumber *)&off_100271748;
  }
  v136 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("CACert"));
  v137 = isNSNumber(v136);

  if (v137)
  {
    v138 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("CACert"));
    v214 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v138, "unsignedIntegerValue"));

  }
  else
  {
    v214 = (NSNumber *)&off_100271760;
  }
  v139 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("scrtAttestation"));
  v140 = isNSNumber(v139);

  v141 = v21;
  if (v140)
  {
    v142 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("scrtAttestation"));
    v227 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v142, "unsignedIntegerValue"));

  }
  else
  {
    v227 = (NSNumber *)&off_100271760;
  }
  v143 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("ClientAttestationData"));
  v144 = isNSData(v143);

  if (v144)
  {
    v145 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("ClientAttestationPublicKey"));
    v42 = isNSData(v145);

    if (!v42)
    {
      v206 = v29;
      v230 = createMobileActivationError((uint64_t)"create_baa_info", 411, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Missing required option for %@."), CFSTR("ClientAttestationPublicKey"));
      v201 = 0;
      v38 = 0;
      v208 = 0;
      v209 = 0;
      v225 = 0;
      v226 = 0;
      v210 = 0;
      v213 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v29 = 0;
      v205 = 0;
      v34 = 0;
      v43 = 0;
      v219 = 0;
      goto LABEL_86;
    }
    v224 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("ClientAttestationData"));
    v226 = (CFDataRef)objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("ClientAttestationPublicKey"));
    v146 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("ClientDirectAttestationCertificate"));
    v147 = isNSData(v146);

    v31 = v132;
    if (v147)
      v219 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("ClientDirectAttestationCertificate"));
    else
      v219 = 0;
  }
  else
  {
    v224 = 0;
    v226 = 0;
    v219 = 0;
    v31 = v132;
  }
  v149 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("AppID"));
  v150 = isNSString(v149);

  if (v150)
    v210 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("AppID"));
  else
    v210 = 0;
  v25 = v141;
  v151 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("LiveImage4Manifest"));
  v152 = isNSData(v151);

  if (v152)
    v209 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("LiveImage4Manifest"));
  else
    v209 = 0;
  v153 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("RepairImage4Manifest"));
  v154 = isNSData(v153);

  if (v154)
    v208 = objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("RepairImage4Manifest"));
  else
    v208 = 0;
  v220 = v64;
  v4 = v221;
  v28 = v222;
  v27 = v224;
  v26 = v232;
  v30 = v218;
LABEL_24:
  v229 = v26;
  v221 = v4;
  v222 = v28;
  v206 = v29;
  if (is_virtual_machine())
  {
    v216 = v30;
    v32 = v31;
    v33 = v20;
    v247 = 0;
    v34 = vm_copy_host_certificate(0, &v247);
    v35 = v247;
    v225 = v34;
    if (!v34)
    {
      v223 = v27;
      v230 = createMobileActivationError((uint64_t)"create_baa_info", 440, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v35, CFSTR("Failed to copy VM host certificate."));

      v201 = 0;
      v38 = 0;
      v225 = 0;
      v213 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v29 = 0;
      v205 = 0;
      goto LABEL_73;
    }
    v36 = key;
    v20 = v33;
    v31 = v32;
    v30 = v216;
  }
  else
  {
    v225 = 0;
    v35 = 0;
    v36 = key;
  }
  v39 = v36;
  if (!v36)
  {
    v223 = v27;
    v230 = createMobileActivationError((uint64_t)"create_baa_info", 472, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));

    v201 = 0;
    v38 = 0;
    v213 = 0;
LABEL_46:
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v29 = 0;
    v205 = 0;
    v34 = 0;
LABEL_73:
    v43 = 0;
LABEL_74:
    v193 = 0;
    keya = 0;
    v204 = 0;
    v217 = 0;
    v44 = 0;
    v15 = 0;
    v197 = 0;
    v200 = 0;
    goto LABEL_119;
  }
  v202 = v25;
  if (v27)
    v45 = 0;
  else
    v45 = v30;
  if (v45 != 1)
  {
    v188 = 0;
    v189 = 0;
    v190 = 0;
LABEL_54:
    v223 = v27;
    v243 = v35;
    v244 = 0;
    v29 = security_copy_system_key(0, (const __CFData **)&v244, &v243);
    v43 = v244;
    v61 = v243;

    if (v29)
    {
      v199 = v20;
      keyb = v39;
      if (-[NSNumber BOOLValue](v227, "BOOLValue"))
      {
        cf = v29;
        v34 = 0;
        v44 = 0;
        goto LABEL_89;
      }
      v241 = v61;
      v242 = 0;
      v44 = security_copy_system_key(2, (const __CFData **)&v242, &v241);
      v34 = v242;
      v77 = v241;

      if (v44)
      {
        cf = v29;
        v61 = v77;
LABEL_89:
        v187 = objc_alloc_init((Class)NSMutableDictionary);
        if (!v187)
        {
          v230 = createMobileActivationError((uint64_t)"create_baa_info", 541, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate dictionary."));

          v197 = 0;
          v200 = 0;
          v192 = 0;
          v193 = 0;
          v217 = 0;
          keya = 0;
          v204 = 0;
          v205 = 0;
          v29 = 0;
          v42 = 0;
          v191 = 0;
          v40 = 0;
          v39 = 0;
          v213 = 0;
          v84 = 0;
          v201 = 0;
          v15 = 0;
          goto LABEL_207;
        }
        v184 = v43;
        v185 = v44;
        if (-[NSNumber BOOLValue](v227, "BOOLValue")
          || (v78 = +[NSFileManager defaultManager](NSFileManager, "defaultManager"),
              v79 = copy_ucrt_path(),
              v80 = objc_msgSend(v79, "stringByAppendingPathComponent:", CFSTR("ucrt.pem")),
              v81 = -[NSFileManager fileExistsAtPath:](v78, "fileExistsAtPath:", v80),
              v80,
              v79,
              v78,
              (v81 & 1) != 0))
        {
          v82 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
          v83 = (__SecKey *)objc_msgSend(v82, "copyAnswer:", CFSTR("UniqueChipID"));

          v183 = v83;
          v84 = (__SecKey *)isNSNumber(v83);

          if (v84)
          {
            v85 = v61;
            v86 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
            v87 = objc_msgSend(v86, "copyAnswer:", CFSTR("ChipID"));

            v182 = v87;
            v84 = (__SecKey *)isNSNumber(v87);

            if (v84)
            {
              v88 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
              v89 = objc_msgSend(v88, "copyAnswer:", CFSTR("BoardId"));

              v191 = v89;
              v84 = (__SecKey *)isNSNumber(v89);

              if (v84)
              {
                v90 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
                v91 = objc_msgSend(v90, "copyAnswer:", CFSTR("SecurityDomain"));

                v181 = v91;
                v84 = (__SecKey *)isNSNumber(v91);

                if (v84)
                {
                  v92 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
                  v93 = (__SecKey *)objc_msgSend(v92, "copyAnswer:", CFSTR("SerialNumber"));

                  v180 = v93;
                  v84 = (__SecKey *)isNSString(v93);

                  if (!v84)
                  {
                    v230 = createMobileActivationError((uint64_t)"create_baa_info", 580, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve %@."), CFSTR("SerialNumber"));

                    v197 = 0;
                    v200 = 0;
                    v192 = 0;
                    v193 = 0;
                    v217 = 0;
                    keya = 0;
                    v204 = 0;
                    v205 = 0;
                    v213 = 0;
                    goto LABEL_202;
                  }
                  v94 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
                  v95 = objc_msgSend(v94, "copyAnswer:", CFSTR("BuildVersion"));

                  v213 = v95;
                  v96 = isNSString(v95);

                  if (!v96)
                  {
                    v230 = createMobileActivationError((uint64_t)"create_baa_info", 586, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v85, CFSTR("Failed to retrieve %@."), CFSTR("BuildVersion"));

                    v197 = 0;
                    v200 = 0;
                    v192 = 0;
                    v193 = 0;
                    v217 = 0;
                    keya = 0;
                    v204 = 0;
                    v205 = 0;
                    v84 = 0;
                    goto LABEL_202;
                  }
                  v97 = SecKeyCopyPublicKey(keyb);
                  v84 = v97;
                  if (!v97)
                  {
                    v230 = createMobileActivationError((uint64_t)"create_baa_info", 595, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy RK public key."));

                    v197 = 0;
                    v200 = 0;
                    v192 = 0;
                    v193 = 0;
                    v217 = 0;
                    keya = 0;
                    v204 = 0;
                    v205 = 0;
                    goto LABEL_202;
                  }
                  v98 = SecKeyCopyExternalRepresentation(v97, &error);
                  v44 = v185;
                  if (v98)
                  {
                    v99 = v98;
                    if (v219)
                    {
                      v240 = v85;
                      v100 = &v240;
                      v101 = &v240;
                      v102 = (uint64_t)keyb;
                      v103 = 7;
                    }
                    else
                    {
                      if (-[NSNumber BOOLValue](v227, "BOOLValue"))
                        v103 = 0;
                      else
                        v103 = 2;
                      v239 = v85;
                      v100 = &v239;
                      v101 = &v239;
                      v102 = (uint64_t)keyb;
                    }
                    v155 = security_create_system_key_attestation(v102, v103, v222, v101);
                    v198 = *v100;

                    v205 = v99;
                    if (v155)
                    {
                      v156 = CFSTR("RKCertification");
                      v204 = v155;
                      if (v223)
                      {
                        objc_msgSend(v187, "setObject:forKeyedSubscript:", v223, CFSTR("RKCertification"));
                        objc_msgSend(v187, "setObject:forKeyedSubscript:", v155, CFSTR("RKSigning"));
                        v156 = CFSTR("RKSigningPub");
                        v157 = v187;
                        v158 = v99;
                      }
                      else
                      {
                        v157 = v187;
                        v158 = (CFDataRef)v155;
                      }
                      objc_msgSend(v157, "setObject:forKeyedSubscript:", v158, v156);
                      v159 = objc_alloc((Class)NSMutableDictionary);
                      v253[0] = CFSTR("UniqueChipID");
                      v253[1] = CFSTR("ChipID");
                      v29 = v83;
                      v254[0] = v83;
                      v254[1] = v87;
                      v253[2] = CFSTR("BoardId");
                      v253[3] = CFSTR("SecurityDomain");
                      v254[2] = v191;
                      v254[3] = v181;
                      v253[4] = CFSTR("SerialNumber");
                      v253[5] = CFSTR("OsBuildVersion");
                      v254[4] = v180;
                      v254[5] = v213;
                      v253[6] = CFSTR("scrtAttestation");
                      v253[7] = CFSTR("CertType");
                      v254[6] = v227;
                      v254[7] = v220;
                      v253[8] = CFSTR("Validity");
                      v253[9] = CFSTR("CACert");
                      v254[8] = v215;
                      v254[9] = v214;
                      v253[10] = CFSTR("OIDSToInclude");
                      v253[11] = CFSTR("SIKPub");
                      v254[10] = v233;
                      v43 = v184;
                      v254[11] = v184;
                      v160 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v254, v253, 12);
                      v161 = objc_msgSend(v159, "initWithDictionary:", v160);

                      if (v223)
                      {
                        objc_msgSend(v161, "setObject:forKeyedSubscript:", v226, CFSTR("RKCertificationPub"));
                        objc_msgSend(v161, "setObject:forKeyedSubscript:", v99, CFSTR("RKSigningPub"));
                        v162 = v221;
                        if (v219)
                          objc_msgSend(v161, "setObject:forKeyedSubscript:", v219, CFSTR("DirectAttestationCertificate"));
                      }
                      else
                      {
                        objc_msgSend(v161, "setObject:forKeyedSubscript:", v99, CFSTR("RKCertificationPub"));
                        v162 = v221;
                      }
                      v163 = v202;
                      v164 = v198;
                      if (v225)
                        objc_msgSend(v161, "setObject:forKeyedSubscript:", v225, CFSTR("VMHostIdentityCertificate"));
                      if (v34)
                        objc_msgSend(v161, "setObject:forKeyedSubscript:", v34, CFSTR("UIKPub"));
                      if (v162)
                        objc_msgSend(v161, "setObject:forKeyedSubscript:", v162, CFSTR("AppSpecificData"));
                      v217 = v161;
                      v165 = copy_trusted_local_policy_hash();

                      if (v165)
                      {
                        v238 = v198;
                        v166 = copyPersonalizedFirmwareData(9, (NSError **)&v238);
                        v164 = v238;

                        if (!v166)
                        {
                          v230 = createMobileActivationError((uint64_t)"create_baa_info", 707, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v164, CFSTR("Failed to load cryptex1 local policy."));

                          v197 = 0;
                          v200 = 0;
                          v192 = 0;
                          v193 = 0;
                          keya = 0;
                          v201 = 0;
                          goto LABEL_204;
                        }
                        objc_msgSend(v217, "setObject:forKeyedSubscript:", v166, CFSTR("LocalPolicy"));
                        v163 = v202;
                      }
                      else
                      {
                        v166 = 0;
                      }
                      v201 = v166;
                      if (!v163)
                      {
                        v200 = 0;
                        goto LABEL_236;
                      }
                      v237 = v164;
                      v167 = copyPersonalizedFirmwareData(2, (NSError **)&v237);
                      v168 = v237;
                      v169 = v164;
                      v164 = v168;

                      if (v167)
                      {
                        v200 = v167;
                        objc_msgSend(v217, "setObject:forKeyedSubscript:", v167, CFSTR("Image4Manifest"));
                        v170 = copy_sfr_manifest();
                        objc_msgSend(v217, "setObject:forKeyedSubscript:", v170, CFSTR("FWImage4Manifest"));

LABEL_236:
                        if (v165)
                          v171 = v229;
                        else
                          v171 = 0;
                        if (v171 != 1)
                        {
                          v197 = 0;
                          goto LABEL_243;
                        }
                        v236 = v164;
                        v172 = copyPersonalizedFirmwareData(10, (NSError **)&v236);
                        v173 = v236;

                        if (v172)
                        {
                          v197 = v172;
                          objc_msgSend(v217, "setObject:forKeyedSubscript:", v172, CFSTR("Cryptex1Image4Manifest"));
                          v164 = v173;
LABEL_243:
                          v15 = v187;
                          if (v210)
                            objc_msgSend(v217, "setObject:forKeyedSubscript:", v210, CFSTR("AppID"));
                          if (v212)
                            objc_msgSend(v217, "setObject:forKeyedSubscript:", v212, CFSTR("MFiProperties"));
                          if (v207)
                            objc_msgSend(v217, "setObject:forKeyedSubscript:", v207, CFSTR("MFiPPUID"));
                          if (v211)
                            objc_msgSend(v217, "setObject:forKeyedSubscript:", v211, CFSTR("MFiData"));
                          if (v209)
                            objc_msgSend(v217, "setObject:forKeyedSubscript:", v209, CFSTR("LiveImage4Manifest"));
                          if (v208)
                            objc_msgSend(v217, "setObject:forKeyedSubscript:", v208, CFSTR("RepairImage4Manifest"));
                          v235 = 0;
                          v174 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v217, 100, 0, &v235);
                          v230 = (NSError *)v235;

                          if (v174)
                          {
                            objc_msgSend(v187, "setObject:forKeyedSubscript:", v174, CFSTR("RKProperties"));
                            v175 = keyb;
                            keya = (SecKeyRef)v174;
                            v176 = SecKeyCreateSignature(v175, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, (CFDataRef)v174, &error);
                            if (v176)
                            {
                              v193 = v176;
                              objc_msgSend(v187, "setObject:forKeyedSubscript:", v176, CFSTR("RKPropertiesSignature"));
                              v192 = (__SecKey *)v187;
                            }
                            else
                            {
                              v179 = createMobileActivationError((uint64_t)"create_baa_info", 830, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to sign data with ref key."));

                              v192 = 0;
                              v193 = 0;
                              v230 = v179;
                            }
                          }
                          else
                          {
                            v177 = createMobileActivationError((uint64_t)"create_baa_info", 819, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v230, CFSTR("Could not convert dictionary to xml data."));

                            v192 = 0;
                            v193 = 0;
                            keya = 0;
                            v230 = v177;
                          }
                          goto LABEL_205;
                        }
                        v230 = createMobileActivationError((uint64_t)"create_baa_info", 780, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v173, CFSTR("Failed to load cryptex1 manifest."));

                        keya = 0;
                        v197 = 0;
                        v192 = 0;
                        v193 = 0;
LABEL_204:
                        v15 = v187;
LABEL_205:
                        v40 = v181;
                        v42 = v182;
                        v39 = v180;
                        goto LABEL_206;
                      }
                      if (v199)
                        v178 = createMobileActivationError((uint64_t)"create_baa_info", 722, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v164, CFSTR("Failed to load boot manifest."));
                      else
                        v178 = createMobileActivationError((uint64_t)"create_baa_info", 742, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v164, CFSTR("Failed to load boot manifest."));
                      v230 = v178;

                      v197 = 0;
                      v200 = 0;
                      v192 = 0;
                      v193 = 0;
                      keya = 0;
LABEL_203:
                      v29 = v183;
                      v43 = v184;
                      goto LABEL_204;
                    }
                    v230 = createMobileActivationError((uint64_t)"create_baa_info", 614, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v198, CFSTR("Failed to create reference key attestation (nonce: %@)."), v222);

                    v197 = 0;
                    v200 = 0;
                    v192 = 0;
                    v193 = 0;
                    v217 = 0;
                    keya = 0;
                    v204 = 0;
LABEL_202:
                    v201 = 0;
                    goto LABEL_203;
                  }
                  v230 = createMobileActivationError((uint64_t)"create_baa_info", 601, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to encode RK public key as data."));

                  v197 = 0;
                  v200 = 0;
                  v192 = 0;
                  v193 = 0;
                  v217 = 0;
                  keya = 0;
                  v204 = 0;
                  v205 = 0;
                  v201 = 0;
                  v29 = v83;
                  v43 = v184;
                  v15 = v187;
                  v40 = v181;
                  v42 = v182;
                  v39 = v180;
LABEL_207:
                  CFRelease(cf);
                  if (v44)
                    CFRelease(v44);
                  v44 = v192;
LABEL_210:
                  if (v188)
                    CFRelease(v188);
                  v148 = v190;
                  if (!v190)
                    goto LABEL_214;
                  goto LABEL_213;
                }
                v230 = createMobileActivationError((uint64_t)"create_baa_info", 574, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve %@."), CFSTR("SecurityDomain"));

                v197 = 0;
                v200 = 0;
                v192 = 0;
                v193 = 0;
                v217 = 0;
                keya = 0;
                v204 = 0;
                v205 = 0;
                v39 = 0;
                v213 = 0;
                v201 = 0;
                v29 = v83;
                v43 = v184;
                v15 = v187;
                v40 = v91;
                v42 = v182;
LABEL_206:
                v44 = v185;
                goto LABEL_207;
              }
              v230 = createMobileActivationError((uint64_t)"create_baa_info", 568, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve %@."), CFSTR("BoardId"));

              v197 = 0;
              v200 = 0;
              v192 = 0;
              v193 = 0;
              v217 = 0;
              keya = 0;
              v204 = 0;
              v205 = 0;
            }
            else
            {
              v230 = createMobileActivationError((uint64_t)"create_baa_info", 562, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve %@."), CFSTR("ChipID"));

              v197 = 0;
              v200 = 0;
              v192 = 0;
              v193 = 0;
              v217 = 0;
              keya = 0;
              v204 = 0;
              v205 = 0;
              v191 = 0;
            }
            v40 = 0;
            v39 = 0;
            v213 = 0;
            v201 = 0;
            v29 = v183;
            v43 = v184;
            v15 = v187;
            v42 = v182;
            goto LABEL_206;
          }
          v230 = createMobileActivationError((uint64_t)"create_baa_info", 556, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve %@."), CFSTR("UniqueChipID"));

          v197 = 0;
          v200 = 0;
          v192 = 0;
          v193 = 0;
          v217 = 0;
          keya = 0;
          v204 = 0;
          v205 = 0;
          v42 = 0;
          v191 = 0;
          v40 = 0;
          v39 = 0;
          v213 = 0;
          v201 = 0;
          v29 = v183;
          v43 = v184;
        }
        else
        {
          v230 = createMobileActivationError((uint64_t)"create_baa_info", 548, CFSTR("com.apple.MobileActivation.ErrorDomain"), -4, 0, CFSTR("UCRT is unavailable."));

          v197 = 0;
          v200 = 0;
          v192 = 0;
          v193 = 0;
          v217 = 0;
          keya = 0;
          v204 = 0;
          v205 = 0;
          v29 = 0;
          v42 = 0;
          v191 = 0;
          v40 = 0;
          v39 = 0;
          v213 = 0;
          v84 = 0;
          v201 = 0;
          v43 = v184;
        }
        v15 = v187;
        goto LABEL_206;
      }
      v230 = createMobileActivationError((uint64_t)"create_baa_info", 533, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v77, CFSTR("Failed to copy UIK attestation key."));

      CFRelease(v29);
      v197 = 0;
      v200 = 0;
      v15 = 0;
      v217 = 0;
      v193 = 0;
      keya = 0;
      v204 = 0;
      v205 = 0;
      v29 = 0;
    }
    else
    {
      v230 = createMobileActivationError((uint64_t)"create_baa_info", 524, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to copy SIK attestation key."));

      v197 = 0;
      v200 = 0;
      v15 = 0;
      v44 = 0;
      v217 = 0;
      v193 = 0;
      keya = 0;
      v204 = 0;
      v205 = 0;
      v34 = 0;
    }
    v42 = 0;
    v191 = 0;
    v40 = 0;
    v39 = 0;
    v213 = 0;
    v84 = 0;
    v201 = 0;
    goto LABEL_210;
  }
  if (-[NSNumber BOOLValue](v227, "BOOLValue"))
    v46 = 0;
  else
    v46 = 2;
  v246 = v35;
  v43 = security_create_system_key_attestation((uint64_t)v39, v46, v28, &v246);
  v47 = v246;

  v223 = v43;
  if (!v43)
  {
    v230 = createMobileActivationError((uint64_t)"create_baa_info", 482, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v47, CFSTR("Failed to create reference key attestation."));

    v201 = 0;
    v38 = 0;
    v213 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v29 = 0;
    v205 = 0;
    v34 = 0;
LABEL_86:
    v223 = 0;
    goto LABEL_74;
  }
  v48 = SecKeyCopyPublicKey(v39);
  if (!v48)
  {
    v230 = createMobileActivationError((uint64_t)"create_baa_info", 488, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy RK public key."));

    v201 = 0;
    v38 = 0;
    v213 = 0;
    v39 = 0;
    goto LABEL_46;
  }
  v190 = v48;
  v49 = SecKeyCopyExternalRepresentation(v48, &error);

  if (v49)
  {
    v50 = SecAccessControlCreate(0, &error);
    if (v50)
    {
      v51 = kSecAttrAccessibleUntilReboot;
      v52 = (const void *)v50;
      v189 = (const void *)v50;
      if ((SecAccessControlSetProtection(v50, kSecAttrAccessibleUntilReboot, &error) & 1) != 0)
      {
        v245 = v47;
        v53 = (__SecKey *)createReferenceKeyBlob(v52, v31, v234, &v245);
        v35 = v245;

        if (v53)
        {
          v226 = v49;
          v39 = v53;
          v188 = v53;
          v27 = v223;
          goto LABEL_54;
        }
        v230 = createMobileActivationError((uint64_t)"create_baa_info", 513, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v35, CFSTR("Failed to create reference key."));
        v47 = v35;
      }
      else
      {
        v230 = createMobileActivationError((uint64_t)"create_baa_info", 507, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to set ACL protection to %@."), v51);
      }
    }
    else
    {
      v230 = createMobileActivationError((uint64_t)"create_baa_info", 502, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to create access control."));
      v189 = 0;
    }
    v123 = v49;
  }
  else
  {
    v230 = createMobileActivationError((uint64_t)"create_baa_info", 494, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to encode RK public key as data."));
    v123 = 0;
    v189 = 0;
  }

  v197 = 0;
  v200 = 0;
  v15 = 0;
  v44 = 0;
  v217 = 0;
  v193 = 0;
  keya = 0;
  v204 = 0;
  v205 = 0;
  v43 = 0;
  v34 = 0;
  v29 = 0;
  v42 = 0;
  v191 = 0;
  v40 = 0;
  v39 = 0;
  v213 = 0;
  v84 = 0;
  v201 = 0;
  v226 = v123;
  v148 = v190;
LABEL_213:
  CFRelease(v148);
LABEL_214:
  if (v84)
    CFRelease(v84);
  v38 = v189;
  v41 = v191;
LABEL_119:
  if (error)
  {
    v108 = v39;
    v109 = v40;
    v110 = v41;
    v111 = v42;
    v112 = v29;
    v113 = v15;
    v114 = v34;
    v115 = v43;
    v116 = v38;
    CFRelease(error);
    v38 = v116;
    v43 = v115;
    v34 = v114;
    v15 = v113;
    v29 = v112;
    v42 = v111;
    v41 = v110;
    v40 = v109;
    v39 = v108;
  }
  error = 0;
  if (v38)
    CFRelease(v38);
  if (a3 && !v44)
    *a3 = objc_retainAutorelease(v230);
  v117 = v44;

  return v117;
}

id vm_copy_host_certificate(void *a1, _QWORD *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  NSError *v8;
  id v9;
  id v10;
  NSError *MobileActivationError;
  id v12;
  id v13;
  id v14;
  id v15;
  NSError *v17;
  id v18;
  id v19;

  v3 = a1;
  if (is_virtual_machine())
  {
    v4 = objc_alloc_init((Class)NSMutableDictionary);
    if (v4)
    {
      v19 = 0;
      v5 = libavp_copy_strong_identity_data(v3, (NSError **)&v19);
      v6 = v19;
      if (v5)
      {
        objc_msgSend(v4, "setObject:forKeyedSubscript:", CFSTR("CopyVMHostCertificateRequest"), CFSTR("Command"));
        objc_msgSend(v4, "setObject:forKeyedSubscript:", v5, CFSTR("Value"));
        v18 = v6;
        v7 = libavp_send_host_message(v4, &v18);
        v8 = (NSError *)v18;

        v9 = isNSDictionary(v7);
        if (v9)
        {
          v9 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("Error"));
          v10 = isNSString(v9);

          if (!v10)
          {
            v13 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("Value"));
            v14 = isNSDictionary(v13);

            if (v14)
            {
              v14 = objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("RKCertification"));
              v12 = isNSData(v14);

              if (v12)
              {
                v12 = v14;
                v14 = v12;
                goto LABEL_11;
              }
              v17 = createMobileActivationError((uint64_t)"vm_copy_host_certificate", 71, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid response message."));

            }
            else
            {
              v17 = createMobileActivationError((uint64_t)"vm_copy_host_certificate", 65, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid response message."));

              v12 = 0;
            }
            goto LABEL_17;
          }
          MobileActivationError = createMobileActivationError((uint64_t)"vm_copy_host_certificate", 59, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Error occurred during request: %@"), v9);
        }
        else
        {
          MobileActivationError = createMobileActivationError((uint64_t)"vm_copy_host_certificate", 53, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v8, CFSTR("Failed to receive response."));
        }
        v17 = MobileActivationError;

        v12 = 0;
        v13 = 0;
        v14 = 0;
LABEL_17:
        v8 = v17;
        goto LABEL_11;
      }
      v8 = createMobileActivationError((uint64_t)"vm_copy_host_certificate", 44, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v6, CFSTR("Failed to copy AVP identity data."));

      v12 = 0;
    }
    else
    {
      v8 = createMobileActivationError((uint64_t)"vm_copy_host_certificate", 38, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create dictionary."));
      v12 = 0;
      v5 = 0;
    }
  }
  else
  {
    v8 = createMobileActivationError((uint64_t)"vm_copy_host_certificate", 32, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("Device is not a VM (not supported)."));
    v12 = 0;
    v5 = 0;
    v4 = 0;
  }
  v7 = 0;
  v13 = 0;
  v14 = 0;
  v9 = 0;
LABEL_11:
  if (a2 && !v12)
    *a2 = objc_retainAutorelease(v8);
  v15 = v12;

  return v15;
}

id vm_create_host_key_signature(void *a1, void *a2, _QWORD *a3, _QWORD *a4)
{
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  NSError *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  NSError *v23;
  _QWORD *v24;
  id v25;
  id v26;
  id v28;
  id v29;

  v6 = a1;
  v7 = a2;
  v25 = v7;
  v26 = v6;
  if (!is_virtual_machine())
  {
    v14 = createMobileActivationError((uint64_t)"vm_create_host_key_signature", 101, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("Device is not a VM (not supported)."));
    v18 = 0;
    v11 = 0;
    v9 = 0;
LABEL_13:
    v10 = 0;
LABEL_14:
    v13 = 0;
    v19 = 0;
    v15 = 0;
    v20 = 0;
    v16 = 0;
    goto LABEL_15;
  }
  v8 = objc_alloc_init((Class)NSMutableDictionary);
  v9 = v8;
  if (!v8)
  {
    v14 = createMobileActivationError((uint64_t)"vm_create_host_key_signature", 107, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create dictionary."));
    v18 = 0;
    v11 = 0;
    goto LABEL_13;
  }
  if (v7)
    objc_msgSend(v8, "addEntriesFromDictionary:", v7);
  v10 = objc_alloc_init((Class)NSMutableDictionary);
  if (!v10)
  {
    v14 = createMobileActivationError((uint64_t)"vm_create_host_key_signature", 117, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create dictionary."));
    v18 = 0;
    v11 = 0;
    goto LABEL_14;
  }
  v29 = 0;
  v11 = libavp_copy_strong_identity_data(v7, (NSError **)&v29);
  v12 = v29;
  if (!v11)
  {
    v14 = createMobileActivationError((uint64_t)"vm_create_host_key_signature", 123, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v12, CFSTR("Failed to copy AVP identity data."));

    v18 = 0;
    goto LABEL_14;
  }
  objc_msgSend(v9, "setObject:forKeyedSubscript:", v11, CFSTR("BIKData"));
  objc_msgSend(v10, "setObject:forKeyedSubscript:", CFSTR("CreateVMHostKeyAttestationRequest"), CFSTR("Command"));
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v6, CFSTR("Value"));
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v9, CFSTR("Options"));
  v28 = v12;
  v13 = libavp_send_host_message(v10, &v28);
  v14 = (NSError *)v28;

  v15 = isNSDictionary(v13);
  if (!v15)
  {
    v23 = createMobileActivationError((uint64_t)"vm_create_host_key_signature", 136, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v14, CFSTR("Failed to receive response."));

    v18 = 0;
    v19 = 0;
    v20 = 0;
    v16 = 0;
    goto LABEL_22;
  }
  v16 = objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("Error"));
  v17 = isNSString(v16);

  if (v17)
  {
    v23 = createMobileActivationError((uint64_t)"vm_create_host_key_signature", 142, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Error occurred during request: %@"), v16);

    v18 = 0;
    v19 = 0;
    v15 = 0;
LABEL_10:
    v20 = 0;
LABEL_22:
    v14 = v23;
    goto LABEL_15;
  }
  v24 = a3;
  v19 = objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("Value"));
  v15 = isNSDictionary(v19);

  if (!v15)
  {
    v23 = createMobileActivationError((uint64_t)"vm_create_host_key_signature", 148, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid response message."));

    v18 = 0;
    goto LABEL_10;
  }
  v15 = objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("RKCertification"));
  v20 = isNSData(v15);

  if (!v20)
  {
    v23 = createMobileActivationError((uint64_t)"vm_create_host_key_signature", 154, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid response message."));

    v18 = 0;
    goto LABEL_22;
  }
  v20 = objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("RKSignature"));
  v18 = isNSData(v20);

  if (!v18)
  {
    v23 = createMobileActivationError((uint64_t)"vm_create_host_key_signature", 160, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid response message."));

    goto LABEL_22;
  }
  if (v24)
    *v24 = objc_retainAutorelease(v15);
  v18 = v20;
  v20 = v18;
LABEL_15:
  if (a4 && !v18)
    *a4 = objc_retainAutorelease(v14);
  v21 = v18;

  return v21;
}

void sub_1000482CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004892C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void sub_100048D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000490D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100049428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

id copyPersonalizedFirmwareData(uint64_t a1, NSError **a2)
{
  id v4;
  id v5;
  id v6;
  id v7;
  NSError *v8;
  id v9;
  NSError *v10;
  id v12;
  id v13;

  if (!getMSUDataAccessorClass())
  {
    v8 = createMobileActivationError((uint64_t)"copyPersonalizedFirmwareData", 29, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("MSUDataAccessor is not supported on this platform."));
    v5 = 0;
    if (!a2)
      goto LABEL_10;
    goto LABEL_8;
  }
  v4 = objc_msgSend(getMSUDataAccessorClass(), "sharedDataAccessor");
  v13 = 0;
  v5 = objc_msgSend(v4, "copyPathForPersonalizedData:error:", a1, &v13);
  v6 = v13;

  if (!v5)
  {
    v8 = createMobileActivationError((uint64_t)"copyPersonalizedFirmwareData", 35, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v6, CFSTR("Failed to retrieve path for firmware data type %d."), a1);

    if (!a2)
    {
LABEL_10:
      v9 = 0;
      goto LABEL_11;
    }
LABEL_8:
    v8 = objc_retainAutorelease(v8);
    v9 = 0;
    *a2 = v8;
    goto LABEL_11;
  }
  v12 = v6;
  v7 = objc_msgSend(objc_alloc((Class)NSData), "initWithContentsOfFile:options:error:", v5, 0, &v12);
  v8 = (NSError *)v12;

  if (!v7)
  {
    v10 = createMobileActivationError((uint64_t)"copyPersonalizedFirmwareData", 41, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v8, CFSTR("Failed to load firmware data from %@."), v5);

    v8 = v10;
    if (!a2)
      goto LABEL_10;
    goto LABEL_8;
  }
  v9 = v7;
LABEL_11:

  return v9;
}

id getMSUDataAccessorClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getMSUDataAccessorClass_softClass;
  v7 = getMSUDataAccessorClass_softClass;
  if (!getMSUDataAccessorClass_softClass)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3254779904;
    v3[2] = __getMSUDataAccessorClass_block_invoke;
    v3[3] = &__block_descriptor_40_e8_32r_e5_v8__0l;
    v3[4] = &v4;
    __getMSUDataAccessorClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10004A6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMSUDataAccessorClass_block_invoke(uint64_t a1)
{
  Class result;
  __int128 v3;
  uint64_t v4;

  if (!MSUDataAccessorLibraryCore_frameworkLibrary)
  {
    v3 = off_100259DD0;
    v4 = 0;
    MSUDataAccessorLibraryCore_frameworkLibrary = _sl_dlopen(&v3, 0);
  }
  result = objc_getClass("MSUDataAccessor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getMSUDataAccessorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t createActivationRequest(void *a1, _QWORD *a2, int a3, NSError **a4)
{
  id v7;
  NSData *v8;
  NSError *v9;
  id v10;
  NSMutableCharacterSet *v11;
  id v12;
  id v13;
  const __CFString *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  NSString *v20;
  NSString *v21;
  NSURL *v22;
  uint64_t v23;
  NSError *v24;
  NSError *MobileActivationError;
  id v27;

  v7 = a1;
  if (!v7)
  {
    v9 = createMobileActivationError((uint64_t)"createActivationRequest", 36, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v8 = 0;
    v10 = 0;
    v16 = 0;
    v17 = 0;
    v11 = 0;
    if (a4)
    {
LABEL_18:
      v9 = objc_retainAutorelease(v9);
      v23 = 0;
      v19 = 0;
      *a4 = v9;
      goto LABEL_19;
    }
LABEL_13:
    v23 = 0;
    v19 = 0;
    goto LABEL_19;
  }
  v27 = 0;
  v8 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v7, 100, 0, &v27);
  v9 = (NSError *)v27;
  if (!v8)
  {
    v24 = createMobileActivationError((uint64_t)"createActivationRequest", 45, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v9, CFSTR("Failed to convert dictionary to data."));

    v10 = 0;
LABEL_16:
    v16 = 0;
    v17 = 0;
    v11 = 0;
    goto LABEL_17;
  }
  v10 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v8, 4);
  if (!v10)
  {
    v24 = createMobileActivationError((uint64_t)"createActivationRequest", 51, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v9, CFSTR("Failed to convert data to string."));

    goto LABEL_16;
  }
  v11 = +[NSMutableCharacterSet alphanumericCharacterSet](NSMutableCharacterSet, "alphanumericCharacterSet");
  -[NSMutableCharacterSet addCharactersInString:](v11, "addCharactersInString:", CFSTR("*-._"));
  -[NSMutableCharacterSet addCharactersInString:](v11, "addCharactersInString:", CFSTR(" "));
  v12 = objc_msgSend(v10, "stringByAddingPercentEncodingWithAllowedCharacters:", v11);

  v10 = objc_msgSend(v12, "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), CFSTR("+"));
  v13 = objc_alloc((Class)NSString);
  v14 = CFSTR("activation-info");
  if (a3)
    v14 = CFSTR("certify-me-info");
  v15 = objc_msgSend(v13, "initWithFormat:", CFSTR("%@=%@"), v14, v10);
  v16 = v15;
  if (!v15)
  {
    v24 = createMobileActivationError((uint64_t)"createActivationRequest", 64, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v9, CFSTR("Failed to convert dictionary to URL encoding."));

    v17 = 0;
    goto LABEL_17;
  }
  v17 = objc_msgSend(v15, "dataUsingEncoding:allowLossyConversion:", 4, 0);
  if (!v17)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"createActivationRequest", 70, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v9, CFSTR("Failed to convert string to data."));
LABEL_23:
    v24 = MobileActivationError;

LABEL_17:
    v9 = v24;
    if (a4)
      goto LABEL_18;
    goto LABEL_13;
  }
  v18 = objc_alloc_init((Class)NSMutableURLRequest);
  if (!v18)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"createActivationRequest", 76, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate request."));
    goto LABEL_23;
  }
  v19 = v18;
  objc_msgSend(v18, "setCachePolicy:", 0);
  objc_msgSend(v19, "setTimeoutInterval:", 60.0);
  objc_msgSend(v19, "setHTTPMethod:", CFSTR("POST"));
  v20 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("application/x-www-form-urlencoded"));
  objc_msgSend(v19, "setValue:forHTTPHeaderField:", v20, CFSTR("Content-Type"));

  v21 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lu"), objc_msgSend(v17, "length"));
  objc_msgSend(v19, "setValue:forHTTPHeaderField:", v21, CFSTR("Content-Length"));

  objc_msgSend(v19, "setHTTPBody:", v17);
  objc_msgSend(v19, "setValue:forHTTPHeaderField:", CFSTR("iOS Device Activator (MobileActivation-1006)"), CFSTR("User-Agent"));
  v22 = +[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("https://albert.apple.com/deviceservices/deviceActivation"));
  objc_msgSend(v19, "setURL:", v22);

  if (a2)
  {
    v19 = objc_retainAutorelease(v19);
    *a2 = v19;
  }
  v23 = 1;
LABEL_19:

  return v23;
}

id getSessionActivationRecordFromData(void *a1, _QWORD *a2)
{
  id v3;
  id v4;
  NSError *v5;
  id v6;
  id v7;
  NSError *v8;
  id v9;
  id v11;

  v3 = a1;
  if (v3)
  {
    v11 = 0;
    v4 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v3, 0, 0, &v11);
    v5 = (NSError *)v11;
    v6 = isNSDictionary(v4);

    if (v6)
    {
      v6 = objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("ActivationRecord"));
      v7 = isNSDictionary(v6);

      if (v7)
      {
        v7 = v6;
        v6 = v7;
        if (!a2)
          goto LABEL_13;
      }
      else
      {
        v8 = createMobileActivationError((uint64_t)"getSessionActivationRecordFromData", 124, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Input data is missing activation record."));

        v5 = v8;
        if (!a2)
          goto LABEL_13;
      }
    }
    else
    {
      v7 = 0;
      if (!a2)
        goto LABEL_13;
    }
  }
  else
  {
    v5 = createMobileActivationError((uint64_t)"getSessionActivationRecordFromData", 113, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v7 = 0;
    v4 = 0;
    v6 = 0;
    if (!a2)
      goto LABEL_13;
  }
  if (!v7)
    *a2 = objc_retainAutorelease(v5);
LABEL_13:
  v9 = v7;

  return v9;
}

id getActivationRecordFromData(uint64_t a1, _QWORD *a2)
{
  id v3;
  NSError *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  const __CFString *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  NSError *v18;
  NSError *v19;
  id v20;
  id v22;

  v22 = 0;
  v3 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", a1, 0, 0, &v22);
  v4 = (NSError *)v22;
  v5 = isNSDictionary(v3);

  if (v5)
  {
    v6 = objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("AccountToken"));
    if (v6)
    {
      v7 = v6;
      v8 = objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("AccountTokenSignature"));
      if (v8)
      {
        v9 = v8;
        v10 = objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("DeviceCertificate"));

        if (v10)
        {
          v11 = v3;
          v5 = 0;
          if (!a2)
            goto LABEL_22;
          goto LABEL_20;
        }
      }
      else
      {

      }
    }
    v12 = CFSTR("device-activation");
    v13 = objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("device-activation"));

    if (v13
      || (v12 = CFSTR("iphone-activation"),
          v14 = objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("iphone-activation")),
          v14,
          v14))
    {
      v5 = objc_msgSend(v3, "objectForKeyedSubscript:", v12);
    }
    else
    {
      v5 = 0;
    }
    v15 = isNSDictionary(v5);

    if (v15)
    {
      v16 = objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("activation-record"));

      v17 = isNSDictionary(v16);
      if (v17)
      {
        v11 = v16;
        v5 = v11;
        if (!a2)
          goto LABEL_22;
      }
      else
      {
        v19 = createMobileActivationError((uint64_t)"getActivationRecordFromData", 173, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Input data is missing activation record."));

        v11 = 0;
        v4 = v19;
        v5 = v16;
        if (!a2)
          goto LABEL_22;
      }
    }
    else
    {
      v18 = createMobileActivationError((uint64_t)"getActivationRecordFromData", 167, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Input data is missing activation ticket."));

      v11 = 0;
      v4 = v18;
      if (!a2)
        goto LABEL_22;
    }
  }
  else
  {
    v11 = 0;
    if (!a2)
      goto LABEL_22;
  }
LABEL_20:
  if (!v11)
    *a2 = objc_retainAutorelease(v4);
LABEL_22:
  v20 = v11;

  return v20;
}

NSDictionary *getRecertInfoFromData(void *a1, _QWORD *a2)
{
  id v3;
  id v4;
  NSError *v5;
  id v6;
  NSDictionary *v7;
  NSError *v8;
  id v10;
  const __CFString *v11;
  id v12;

  v3 = a1;
  if (v3)
  {
    v10 = 0;
    v4 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v3, 0, 0, &v10);
    v5 = (NSError *)v10;
    v6 = isNSDictionary(v4);

    if (v6)
    {
      v6 = objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("certify-me-info"));
      v7 = (NSDictionary *)isNSDictionary(v6);

      if (v7)
      {
        v11 = CFSTR("certify-me");
        v12 = v6;
        v7 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1);
        if (!a2)
          goto LABEL_13;
        goto LABEL_11;
      }
      v8 = createMobileActivationError((uint64_t)"getRecertInfoFromData", 209, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("XML data is missing certify-me-info."));

    }
    else
    {
      v8 = createMobileActivationError((uint64_t)"getRecertInfoFromData", 203, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v5, CFSTR("Failed to create dictionary from data."));

      v7 = 0;
    }
    v5 = v8;
    if (!a2)
      goto LABEL_13;
    goto LABEL_11;
  }
  v5 = createMobileActivationError((uint64_t)"getRecertInfoFromData", 197, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
  v6 = 0;
  v7 = 0;
  v4 = 0;
  if (!a2)
    goto LABEL_13;
LABEL_11:
  if (!v7)
    *a2 = objc_retainAutorelease(v5);
LABEL_13:

  return v7;
}

NSError *createMobileActivationError(uint64_t a1, uint64_t a2, id a3, uint64_t a4, void *a5, void *a6, ...)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  NSString *v17;
  NSNumber *v18;
  NSError *v19;
  va_list va;

  va_start(va, a6);
  v11 = a3;
  v12 = a5;
  v13 = a6;
  v14 = objc_msgSend(objc_alloc((Class)NSMutableString), "initWithFormat:arguments:", v13, va);

  v15 = objc_alloc_init((Class)NSMutableDictionary);
  v16 = v15;
  if (v14)
    objc_msgSend(v15, "setObject:forKeyedSubscript:", v14, NSLocalizedDescriptionKey);
  if (v12)
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v12, NSUnderlyingErrorKey);
  if (os_variant_allows_internal_security_policies(0))
  {
    if (a1)
    {
      v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1);
      objc_msgSend(v16, "setObject:forKeyedSubscript:", v17, CFSTR("FunctionName"));

    }
    if ((_DWORD)a2)
    {
      v18 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2);
      objc_msgSend(v16, "setObject:forKeyedSubscript:", v18, CFSTR("SourceLine"));

    }
  }
  v19 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v11, a4, v16);

  return v19;
}

uint64_t security_delete_legacy_uik(_QWORD *a1)
{
  void *v2;
  NSString *v3;
  NSString *v4;
  NSFileManager *v5;
  unsigned int v6;
  NSFileManager *v7;
  unsigned __int8 v8;
  NSError *v9;
  NSError *v10;
  uint64_t v11;
  uint64_t v12;
  id v14;
  uint64_t v15;

  v15 = 1;
  v2 = (void *)container_system_group_path_for_identifier(0, objc_msgSend(CFSTR("systemgroup.com.apple.mobileactivationd"), "UTF8String"), &v15);
  if (!v2)
  {
    v9 = createMobileActivationError((uint64_t)"security_delete_legacy_uik", 105, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query group container path: %d"), v15);
    v4 = 0;
    if (!a1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v4 = -[NSString stringByAppendingPathComponent:](v3, "stringByAppendingPathComponent:", CFSTR("Library/uik/uik.pem"));

  v5 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v6 = -[NSFileManager fileExistsAtPath:](v5, "fileExistsAtPath:", v4);

  if (v6)
  {
    v7 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
    v14 = 0;
    v8 = -[NSFileManager removeItemAtPath:error:](v7, "removeItemAtPath:error:", v4, &v14);
    v9 = (NSError *)v14;

    if ((v8 & 1) == 0)
    {
      v10 = createMobileActivationError((uint64_t)"security_delete_legacy_uik", 113, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v9, CFSTR("Failed to delete %@."), v4);

      v9 = v10;
      if (!a1)
      {
LABEL_8:
        v11 = 0;
        v12 = 0;
        if (!v2)
          goto LABEL_13;
        goto LABEL_12;
      }
LABEL_7:
      *a1 = objc_retainAutorelease(v9);
      goto LABEL_8;
    }
  }
  else
  {
    v9 = 0;
  }
  v11 = 1;
LABEL_12:
  free(v2);
  v12 = v11;
LABEL_13:

  return v12;
}

BOOL security_committed_uik_is_legacy(_QWORD *a1)
{
  void *v2;
  NSString *v3;
  NSString *v4;
  NSFileManager *v5;
  _BOOL8 v6;
  NSError *v7;
  uint64_t v9;

  v9 = 1;
  v2 = (void *)container_system_group_path_for_identifier(0, objc_msgSend(CFSTR("systemgroup.com.apple.mobileactivationd"), "UTF8String"), &v9);
  if (v2)
  {
    v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
    v4 = -[NSString stringByAppendingPathComponent:](v3, "stringByAppendingPathComponent:", CFSTR("Library/uik/uik.pem"));

    v5 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
    v6 = -[NSFileManager fileExistsAtPath:](v5, "fileExistsAtPath:", v4);

    v7 = 0;
    if (!a1)
      goto LABEL_7;
  }
  else
  {
    v7 = createMobileActivationError((uint64_t)"security_committed_uik_is_legacy", 142, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query group container path: %d"), v9);
    v6 = 0;
    if (!a1)
      goto LABEL_7;
  }
  if (!v6)
    *a1 = objc_retainAutorelease(v7);
LABEL_7:
  if (v2)
    free(v2);

  return v6;
}

__SecKey *security_copy_system_key(uint64_t a1, const __CFData **a2, _QWORD *a3)
{
  NSError *v6;
  _BOOL4 is_legacy;
  NSError *v8;
  NSError *v9;
  __SecKey *v10;
  void *v11;
  NSString *v12;
  NSString *v13;
  NSFileManager *v14;
  unsigned __int8 v15;
  id v16;
  id v17;
  NSError *v18;
  SecAccessControlRef v19;
  NSDictionary *v20;
  SecKeyRef v21;
  SecKeyRef v22;
  __SecKey *v23;
  __SecKey *v24;
  CFDataRef v25;
  const __CFData *v26;
  NSError *v27;
  const __CFData *v28;
  __SecKey *v29;
  NSError *MobileActivationError;
  NSError *v32;
  NSError *v33;
  NSError *v34;
  SecAccessControlRef cf;
  NSError *cfa;
  id v37;
  CFErrorRef v38;
  id v39;
  uint64_t v40;
  CFErrorRef error;
  _QWORD v42[4];
  _QWORD v43[4];

  v6 = 0;
  v38 = 0;
  if ((_DWORD)a1 != 2)
    goto LABEL_12;
  v37 = 0;
  is_legacy = security_committed_uik_is_legacy(&v37);
  v8 = (NSError *)v37;
  v6 = v8;
  if (!is_legacy && v8)
  {
    v9 = createMobileActivationError((uint64_t)"security_copy_system_key", 180, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v8, CFSTR("Failed to query legacy UIK support."));
    v10 = 0;
LABEL_19:
    v24 = 0;
    goto LABEL_23;
  }
  if (!is_legacy)
  {
LABEL_12:
    v10 = (__SecKey *)SecKeyCopySystemKey(a1, &v38);
    if (!v10)
    {
      v9 = createMobileActivationError((uint64_t)"security_copy_system_key", 195, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v38, CFSTR("Failed to copy system key (%d)."), a1);
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  v40 = 1;
  error = 0;
  v11 = (void *)container_system_group_path_for_identifier(0, objc_msgSend(CFSTR("systemgroup.com.apple.mobileactivationd"), "UTF8String"), &v40);
  if (!v11)
  {
    v18 = createMobileActivationError((uint64_t)"copy_legacy_committed_uik", 44, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query group container path: %d"), v40);
    v20 = 0;
    v17 = 0;
    v13 = 0;
LABEL_34:
    v22 = 0;
    v10 = 0;
    goto LABEL_40;
  }
  v12 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11);
  v13 = -[NSString stringByAppendingPathComponent:](v12, "stringByAppendingPathComponent:", CFSTR("Library/uik/uik.pem"));

  v14 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v15 = -[NSFileManager fileExistsAtPath:](v14, "fileExistsAtPath:", v13);

  if ((v15 & 1) == 0)
  {
    v18 = createMobileActivationError((uint64_t)"copy_legacy_committed_uik", 50, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Legacy UIK does not exist."));
    v20 = 0;
    v17 = 0;
    goto LABEL_34;
  }
  v16 = objc_alloc((Class)NSData);
  v39 = 0;
  v17 = objc_msgSend(v16, "initWithContentsOfFile:options:error:", v13, 0, &v39);
  v18 = (NSError *)v39;
  if (v17)
  {
    v19 = SecAccessControlCreateWithFlags(0, kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate, 0x40000000uLL, &error);
    if (v19)
    {
      v42[0] = kSecAttrIsPermanent;
      v42[1] = kSecAttrTokenID;
      v43[0] = &__kCFBooleanFalse;
      v43[1] = kSecAttrTokenIDAppleKeyStore;
      v42[2] = kSecAttrTokenOID;
      v42[3] = kSecAttrAccessControl;
      v43[2] = v17;
      v43[3] = v19;
      cf = v19;
      v20 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v43, v42, 4);
      v21 = SecKeyCreateWithData((CFDataRef)+[NSData data](NSData, "data"), (CFDictionaryRef)v20, &error);
      v22 = v21;
      if (v21)
      {
        v10 = (__SecKey *)CFRetain(v21);
      }
      else
      {
        v34 = createMobileActivationError((uint64_t)"copy_legacy_committed_uik", 74, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to query UIK."));

        v10 = 0;
        v18 = v34;
      }
      CFRelease(cf);
      goto LABEL_40;
    }
    MobileActivationError = createMobileActivationError((uint64_t)"copy_legacy_committed_uik", 62, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to create access control."));
  }
  else
  {
    MobileActivationError = createMobileActivationError((uint64_t)"copy_legacy_committed_uik", 56, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v18, CFSTR("Failed to load %@."), v13);
  }
  cfa = MobileActivationError;

  v20 = 0;
  v22 = 0;
  v10 = 0;
  v18 = cfa;
LABEL_40:
  if (error)
    CFRelease(error);
  error = 0;
  if (v22)
    CFRelease(v22);
  if (v11)
    free(v11);
  v32 = v6;
  if (!v10)
    v32 = objc_retainAutorelease(v18);

  v33 = v32;
  if (!v10)
  {
    v9 = createMobileActivationError((uint64_t)"security_copy_system_key", 189, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v33, CFSTR("Failed to copy system key (legacy)."));
    v24 = 0;
    v6 = v33;
    goto LABEL_23;
  }
  v6 = v33;
LABEL_13:
  v23 = SecKeyCopyPublicKey(v10);
  v24 = v23;
  if (v23)
  {
    v25 = SecKeyCopyExternalRepresentation(v23, &v38);
    if (v25)
    {
      v26 = v25;
      if (a2)
      {
        v26 = objc_retainAutorelease(v25);
        *a2 = v26;
      }
      v9 = v6;
      goto LABEL_28;
    }
    v27 = createMobileActivationError((uint64_t)"security_copy_system_key", 208, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v38, CFSTR("Failed to copy public key buffer."));
  }
  else
  {
    v27 = createMobileActivationError((uint64_t)"security_copy_system_key", 202, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy public key."));
  }
  v9 = v27;
LABEL_23:

  if (a3)
    *a3 = objc_retainAutorelease(v9);
  if (v10)
    CFRelease(v10);
  v26 = 0;
  v10 = 0;
  v28 = 0;
  v29 = 0;
  if (v24)
  {
LABEL_28:
    CFRelease(v24);
    v28 = v26;
    v29 = v10;
  }
  if (v38)
    CFRelease(v38);
  v38 = 0;

  return v29;
}

id security_create_system_key_attestation(uint64_t a1, uint64_t a2, id a3, _QWORD *a4)
{
  id v7;
  __SecKey *v8;
  NSError *v9;
  NSError *MobileActivationError;
  void *v11;
  id v12;
  NSError *v13;
  void *v14;
  id v16;
  CFTypeRef cf;

  v7 = a3;
  cf = 0;
  if (!a1)
  {
    v9 = createMobileActivationError((uint64_t)"security_create_system_key_attestation", 242, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid input(s)"));
    v8 = 0;
    if (!a4)
    {
LABEL_16:
      v12 = 0;
      v14 = 0;
      if (!v8)
        goto LABEL_18;
      goto LABEL_17;
    }
LABEL_15:
    *a4 = objc_retainAutorelease(v9);
    goto LABEL_16;
  }
  v16 = 0;
  v8 = security_copy_system_key(a2, 0, &v16);
  v9 = (NSError *)v16;
  if (!v8)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"security_create_system_key_attestation", 248, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v9, CFSTR("Failed to copy attestation key."));
    goto LABEL_14;
  }
  if (v7)
  {
    if ((unint64_t)objc_msgSend(v7, "length") >= 0x21)
    {
      MobileActivationError = createMobileActivationError((uint64_t)"security_create_system_key_attestation", 254, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Nonce is too big (> 32 bytes)."));
      goto LABEL_14;
    }
    if (!SecKeySetParameter(v8, kSecKeyParameterSETokenAttestationNonce, v7, &cf))
    {
      MobileActivationError = createMobileActivationError((uint64_t)"security_create_system_key_attestation", 259, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, (void *)cf, CFSTR("Failed to set nonce."));
LABEL_14:
      v13 = MobileActivationError;

      v9 = v13;
      if (!a4)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  v11 = (void *)SecKeyCreateAttestation(v8, a1, &cf);
  if (!v11)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"security_create_system_key_attestation", 266, CFSTR("com.apple.MobileActivation.ErrorDomain"), -11, (void *)cf, CFSTR("Failed to create attestation."));
    goto LABEL_14;
  }
  v12 = v11;
LABEL_17:
  CFRelease(v8);
  v14 = v12;
LABEL_18:
  if (cf)
    CFRelease(cf);
  cf = 0;

  return v14;
}

id security_create_attestation(uint64_t a1, uint64_t a2, NSError **a3)
{
  void *v4;
  id v5;
  NSError *v6;
  NSError *MobileActivationError;
  NSError *v8;
  CFTypeRef cf;

  cf = 0;
  if (a1 && a2)
  {
    v4 = (void *)SecKeyCreateAttestation(a2, a1, &cf);
    if (v4)
    {
      v5 = v4;
      v6 = 0;
      goto LABEL_10;
    }
    MobileActivationError = createMobileActivationError((uint64_t)"security_create_attestation", 299, CFSTR("com.apple.MobileActivation.ErrorDomain"), -11, (void *)cf, CFSTR("Failed to create attestation."));
  }
  else
  {
    MobileActivationError = createMobileActivationError((uint64_t)"security_create_attestation", 293, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid input(s)"));
  }
  v8 = MobileActivationError;
  v6 = v8;
  if (a3)
  {
    v6 = objc_retainAutorelease(v8);
    v5 = 0;
    *a3 = v6;
  }
  else
  {
    v5 = 0;
  }
LABEL_10:
  if (cf)
    CFRelease(cf);
  cf = 0;

  return v5;
}

id security_create_external_representation(__SecKey *a1, NSError *a2, NSError **a3)
{
  CFDictionaryRef v5;
  CFDictionaryRef v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  NSNumber *v12;
  NSError *MobileActivationError;
  uint64_t v15;
  NSNumber *v16;

  if (!a1)
  {
    a2 = createMobileActivationError((uint64_t)"security_create_external_representation", 328, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v6 = 0;
    if (a3)
    {
LABEL_11:
      a2 = objc_retainAutorelease(a2);
      v11 = 0;
      *a3 = a2;
      goto LABEL_12;
    }
LABEL_7:
    v11 = 0;
    goto LABEL_12;
  }
  v5 = SecKeyCopyAttributes(a1);
  v6 = v5;
  if (!v5)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"security_create_external_representation", 334, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy RK attributes."));
    goto LABEL_10;
  }
  v7 = -[__CFDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", kSecAttrTokenOID);
  if (!v7)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"security_create_external_representation", 340, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to encode RK as data."));
LABEL_10:
    a2 = MobileActivationError;
    if (a3)
      goto LABEL_11;
    goto LABEL_7;
  }
  v8 = v7;
  v9 = kSecUseSystemKeychain;
  v10 = -[__CFDictionary objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", kSecUseSystemKeychain);

  v11 = v8;
  if (a2)
  {
    v15 = v9;
    v12 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v10 != 0);
    v16 = v12;
    a2->super.isa = (Class)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1);

    a2 = 0;
  }
LABEL_12:

  return v11;
}

uint64_t security_valid_security_enclave_reference_key(__SecKey *a1, int a2, unsigned __int8 *a3, NSError **a4)
{
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t Duplicate;
  __SecKey *v18;
  CFDataRef v19;
  CFDataRef v20;
  __SecKey *v21;
  const void *v22;
  NSError *MobileActivationError;
  NSError *v24;
  const __CFDictionary *v25;
  const void *v26;
  NSError *v27;
  NSError *v28;
  NSError *v29;
  void *v30;
  const __CFDictionary *v31;
  NSError *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  CFDataRef v36;
  void *v37;
  unsigned __int8 v39;
  void *v40;
  NSError *v41;
  uint64_t v42;
  uint64_t v43;
  NSDictionary *v44;
  SecKeyRef v45;
  SecKeyRef v46;
  NSError *v47;
  NSError *v48;
  unsigned __int8 *v49;
  SecKeyRef v50;
  NSDictionary *v51;
  id v52;
  id v53;
  id v54;
  CFErrorRef error;
  _QWORD v56[5];
  _QWORD v57[5];

  error = 0;
  if (!a1)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"security_valid_security_enclave_reference_key", 394, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid input."));
LABEL_23:
    v24 = MobileActivationError;
    v25 = 0;
    v26 = 0;
    v50 = 0;
    v51 = 0;
    v18 = 0;
    v10 = 0;
    v52 = 0;
    v53 = 0;
    goto LABEL_35;
  }
  v8 = SecKeyCopyAttributes(a1);
  if (!v8)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"security_valid_security_enclave_reference_key", 400, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query attributes."));
    goto LABEL_23;
  }
  v9 = v8;
  v10 = (id)CFDictionaryGetValue(v8, kSecAttrTokenID);
  v11 = isNSString(v10);

  if (!v11)
  {
    v27 = createMobileActivationError((uint64_t)"security_valid_security_enclave_reference_key", 406, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query attribute '%@'."), kSecAttrTokenID);
LABEL_27:
    v24 = v27;
    v26 = 0;
    v50 = 0;
    v18 = 0;
    v52 = 0;
LABEL_32:
    v53 = 0;
    goto LABEL_33;
  }
  if ((objc_msgSend(v10, "isEqualToString:", kSecAttrTokenIDSecureEnclave) & 1) == 0
    && (objc_msgSend(v10, "isEqualToString:", kSecAttrTokenIDAppleKeyStore) & 1) == 0)
  {
    v27 = createMobileActivationError((uint64_t)"security_valid_security_enclave_reference_key", 412, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid key type (actual, expected): (%@, %@)"), v10, kSecAttrTokenIDSecureEnclave);
    goto LABEL_27;
  }
  v12 = (id)CFDictionaryGetValue(v9, kSecAttrKeySizeInBits);
  v13 = isNSNumber(v12);

  v52 = v12;
  if (!v13)
  {
    v28 = createMobileActivationError((uint64_t)"security_valid_security_enclave_reference_key", 418, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query attribute '%@'."), kSecAttrKeySizeInBits);
LABEL_31:
    v24 = v28;
    v26 = 0;
    v50 = 0;
    v18 = 0;
    goto LABEL_32;
  }
  if (objc_msgSend(v12, "unsignedIntValue") != 256
    && objc_msgSend(v12, "unsignedIntValue") != 384)
  {
    v28 = createMobileActivationError((uint64_t)"security_valid_security_enclave_reference_key", 423, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Unsupported key size: %@"), v12);
    goto LABEL_31;
  }
  v49 = a3;
  v14 = (id)CFDictionaryGetValue(v9, kSecAttrKeyType);
  v15 = isNSString(v14);

  v53 = v14;
  if (!v15)
  {
    v29 = createMobileActivationError((uint64_t)"security_valid_security_enclave_reference_key", 429, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query attribute '%@'."), kSecAttrKeyType);
LABEL_29:
    v24 = v29;
    v26 = 0;
    v50 = 0;
    v18 = 0;
LABEL_33:
    v51 = 0;
LABEL_34:
    v25 = v9;
    goto LABEL_35;
  }
  v16 = v14;
  if ((objc_msgSend(v14, "isEqualToString:") & 1) == 0
    && (objc_msgSend(v14, "isEqualToString:", kSecAttrKeyTypeECSECPrimeRandomPKA) & 1) == 0
    && (objc_msgSend(v14, "isEqualToString:", kSecAttrKeyTypeSecureEnclaveAttestation) & 1) == 0
    && (objc_msgSend(v14, "isEqualToString:", kSecAttrKeyTypeSecureEnclaveAnonymousAttestation) & 1) == 0)
  {
    v29 = createMobileActivationError((uint64_t)"security_valid_security_enclave_reference_key", 441, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Unsupported key type: %@"), v14);
    goto LABEL_29;
  }
  if (!a2)
  {
    v22 = 0;
    v50 = 0;
    v51 = 0;
    v21 = 0;
    v20 = 0;
    v34 = 0;
    v24 = 0;
    v25 = v9;
LABEL_49:
    if (v49)
    {
      if ((objc_msgSend(v16, "isEqualToString:", kSecAttrKeyTypeSecureEnclaveAttestation) & 1) != 0)
      {
        v30 = v10;
        v39 = 1;
      }
      else
      {
        v40 = v16;
        v30 = v10;
        v39 = objc_msgSend(v40, "isEqualToString:", kSecAttrKeyTypeSecureEnclaveAnonymousAttestation);
      }
      v25 = v9;
      *v49 = v39;
    }
    else
    {
      v30 = v10;
    }
    v33 = 1;
LABEL_38:
    CFRelease(v25);
    v35 = v33;
    v36 = v20;
    v37 = v34;
    goto LABEL_39;
  }
  Duplicate = SecKeyCreateDuplicate(a1);
  v18 = (__SecKey *)Duplicate;
  if (!Duplicate)
  {
    v41 = createMobileActivationError((uint64_t)"security_valid_security_enclave_reference_key", 448, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create duplicate RK."));
LABEL_58:
    v24 = v41;
    v26 = 0;
LABEL_59:
    v50 = 0;
    goto LABEL_33;
  }
  if (!SecKeySetParameter(Duplicate, kSecUseAuthenticationUI, kSecUseAuthenticationUIFail, &error))
  {
    v41 = createMobileActivationError((uint64_t)"security_valid_security_enclave_reference_key", 456, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to set RK parameter."));
    goto LABEL_58;
  }
  if ((objc_msgSend(v16, "isEqualToString:", kSecAttrKeyTypeECSECPrimeRandom) & 1) != 0
    || objc_msgSend(v16, "isEqualToString:", kSecAttrKeyTypeECSECPrimeRandomPKA))
  {
    v19 = SecKeyCreateSignature(v18, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, (CFDataRef)+[NSData data](NSData, "data"), &error);
    if (v19)
    {
      v20 = v19;
      v21 = v18;
      v22 = 0;
      v50 = 0;
LABEL_69:
      v34 = 0;
      v51 = 0;
      v24 = 0;
      goto LABEL_70;
    }
    if (!mobileactivationErrorHasDomainAndErrorCode(error, TKErrorDomain, (id)0xFFFFFFFFFFFFFFFDLL))
    {
      v21 = v18;
      v22 = 0;
      v50 = 0;
      v20 = 0;
      goto LABEL_69;
    }
    v41 = createMobileActivationError((uint64_t)"security_valid_security_enclave_reference_key", 464, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, error, CFSTR("Failed to create test signature."));
    goto LABEL_58;
  }
  v42 = SecAccessControlCreate(0, &error);
  v26 = (const void *)v42;
  if (!v42)
  {
    v47 = createMobileActivationError((uint64_t)"security_valid_security_enclave_reference_key", 470, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to create access control."));
LABEL_73:
    v24 = v47;
    goto LABEL_59;
  }
  v43 = kSecAttrAccessibleUntilReboot;
  if ((SecAccessControlSetProtection(v42, kSecAttrAccessibleUntilReboot, &error) & 1) == 0)
  {
    v47 = createMobileActivationError((uint64_t)"security_valid_security_enclave_reference_key", 475, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to set ACL protection to %@."), v43);
    goto LABEL_73;
  }
  v56[0] = kSecAttrIsPermanent;
  v56[1] = kSecAttrTokenID;
  v57[0] = &__kCFBooleanFalse;
  v57[1] = kSecAttrTokenIDAppleKeyStore;
  v56[2] = kSecAttrKeyType;
  v56[3] = kSecAttrAccessControl;
  v57[2] = kSecAttrKeyTypeECSECPrimeRandom;
  v57[3] = v26;
  v56[4] = kSecAttrKeySizeInBits;
  v57[4] = &off_100271790;
  v44 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v57, v56, 5);
  v45 = SecKeyCreateRandomKey((CFDictionaryRef)v44, &error);
  v51 = v44;
  if (!v45)
  {
    v24 = createMobileActivationError((uint64_t)"security_valid_security_enclave_reference_key", 488, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to create reference key."));
    v50 = 0;
    goto LABEL_34;
  }
  v46 = v45;
  v54 = 0;
  v21 = v18;
  v34 = security_create_attestation((uint64_t)v45, (uint64_t)v18, (NSError **)&v54);
  v24 = (NSError *)v54;
  v50 = v46;
  if (v34)
  {
    v22 = v26;
    v20 = 0;
LABEL_70:
    v25 = v9;
    v16 = v53;
    goto LABEL_49;
  }
  v48 = createMobileActivationError((uint64_t)"security_valid_security_enclave_reference_key", 494, CFSTR("com.apple.MobileActivation.ErrorDomain"), -11, v24, CFSTR("Failed to create test attestation."));

  v24 = v48;
  v25 = v9;
LABEL_35:
  v22 = v26;
  v21 = v18;
  v30 = v10;
  if (a4)
  {
    v31 = v25;
    v32 = objc_retainAutorelease(v24);
    v25 = v31;
    *a4 = v32;
  }
  v33 = 0;
  v20 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  if (v25)
    goto LABEL_38;
LABEL_39:
  if (error)
    CFRelease(error);
  error = 0;
  if (v22)
    CFRelease(v22);
  if (v50)
    CFRelease(v50);
  if (v21)
    CFRelease(v21);

  return v35;
}

uint64_t security_certificate_matches_key(__SecKey *a1, id a2, __SecCertificate *a3, _QWORD *a4)
{
  id v7;
  __SecKey *v8;
  __SecKey *v9;
  CFDataRef v10;
  NSError *v11;
  __SecKey *v12;
  __SecKey *v13;
  CFDataRef v14;
  uint64_t v15;
  NSError *MobileActivationError;
  uint64_t v17;
  CFErrorRef error;

  v7 = a2;
  error = 0;
  if (!a1 || !a3)
  {
    v11 = createMobileActivationError((uint64_t)"security_certificate_matches_key", 533, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    v10 = 0;
    v12 = 0;
    v9 = 0;
    goto LABEL_20;
  }
  v8 = SecKeyCopyPublicKey(a1);
  v9 = v8;
  if (!v8)
  {
    v11 = createMobileActivationError((uint64_t)"security_certificate_matches_key", 539, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy RK public key."));
    v10 = 0;
LABEL_19:
    v12 = 0;
LABEL_20:
    v14 = 0;
    if (!a4)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (v7)
  {
    v10 = (CFDataRef)v7;
    goto LABEL_9;
  }
  v10 = SecKeyCopyExternalRepresentation(v8, &error);
  if (!v10)
  {
    v11 = createMobileActivationError((uint64_t)"security_certificate_matches_key", 548, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to copy RK public key buffer."));
    goto LABEL_19;
  }
LABEL_9:
  v13 = SecCertificateCopyKey(a3);
  v12 = v13;
  if (!v13)
  {
    v11 = createMobileActivationError((uint64_t)"security_certificate_matches_key", 557, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve certificate public key."));
    goto LABEL_20;
  }
  v14 = SecKeyCopyExternalRepresentation(v13, &error);
  if (!v14)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"security_certificate_matches_key", 563, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, error, CFSTR("Failed to encode certificate public key as data."));
    goto LABEL_16;
  }
  if ((-[__CFData isEqualToData:](v10, "isEqualToData:", v14) & 1) == 0)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"security_certificate_matches_key", 570, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Certificate public key does not match RK public key."));
LABEL_16:
    v11 = MobileActivationError;
    if (!a4)
    {
LABEL_22:
      v15 = 0;
      v17 = 0;
      if (!v9)
        goto LABEL_24;
      goto LABEL_23;
    }
LABEL_21:
    *a4 = objc_retainAutorelease(v11);
    goto LABEL_22;
  }
  v11 = 0;
  v15 = 1;
LABEL_23:
  CFRelease(v9);
  v17 = v15;
LABEL_24:
  if (v12)
    CFRelease(v12);
  if (error)
    CFRelease(error);
  error = 0;

  return v17;
}

BOOL is_virtual_machine()
{
  size_t v2;
  int v3;

  v3 = 0;
  v2 = 4;
  return !sysctlbyname("kern.hv_vmm_present", &v3, &v2, 0, 0) && v3 == 1;
}

uint64_t createXMLRequest(void *a1, _QWORD *a2, NSError **a3)
{
  id v5;
  NSData *v6;
  NSError *v7;
  id v8;
  id v9;
  unint64_t v10;
  NSString *v11;
  NSString *v12;
  uint64_t v13;
  NSError *MobileActivationError;
  NSError *v15;
  id v17;

  v5 = a1;
  if (!v5)
  {
    v7 = createMobileActivationError((uint64_t)"createXMLRequest", 57, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v6 = 0;
    if (!a3)
    {
LABEL_12:
      v13 = 0;
      v9 = 0;
      goto LABEL_13;
    }
LABEL_8:
    v7 = objc_retainAutorelease(v7);
    v13 = 0;
    v9 = 0;
    *a3 = v7;
    goto LABEL_13;
  }
  v17 = 0;
  v6 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v5, 100, 0, &v17);
  v7 = (NSError *)v17;
  if (!v6)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"createXMLRequest", 67, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v7, CFSTR("Failed to convert dictionary to data"));
    goto LABEL_11;
  }
  v8 = objc_alloc_init((Class)NSMutableURLRequest);
  if (!v8)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"createXMLRequest", 74, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate request."));
LABEL_11:
    v15 = MobileActivationError;

    v7 = v15;
    if (!a3)
      goto LABEL_12;
    goto LABEL_8;
  }
  v9 = v8;
  objc_msgSend(v8, "setCachePolicy:", 0);
  LODWORD(v10) = NETWORK_TIMEOUT_SECONDS;
  objc_msgSend(v9, "setTimeoutInterval:", (double)v10);
  objc_msgSend(v9, "setHTTPMethod:", CFSTR("POST"));
  v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("application/xml"));
  objc_msgSend(v9, "setValue:forHTTPHeaderField:", v11, CFSTR("Content-Type"));

  v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lu"), -[NSData length](v6, "length"));
  objc_msgSend(v9, "setValue:forHTTPHeaderField:", v12, CFSTR("Content-Length"));

  objc_msgSend(v9, "setHTTPBody:", v6);
  if (a2)
  {
    v9 = objc_retainAutorelease(v9);
    *a2 = v9;
  }
  v13 = 1;
LABEL_13:

  return v13;
}

uint64_t is_erase_installed_build()
{
  if (copyUserDataDisposition_onceToken != -1)
    dispatch_once(&copyUserDataDisposition_onceToken, &__block_literal_global_8);
  return copyUserDataDisposition_dataDisposition & 1;
}

uint64_t is_upgrade_installed_build()
{
  if (copyUserDataDisposition_onceToken != -1)
    dispatch_once(&copyUserDataDisposition_onceToken, &__block_literal_global_8);
  return (copyUserDataDisposition_dataDisposition >> 1) & 1;
}

id data_migration_supported()
{
  id v1;
  id v2;

  if (!_os_feature_enabled_impl("UserManagement", "LocalUserEnrollment")
    || (os_variant_is_darwinos(objc_msgSend(CFSTR("com.apple.mobileactivationd"), "UTF8String")) & 1) != 0
    || !xpc_user_sessions_enabled())
  {
    return 0;
  }
  if (copyUserDataDisposition_onceToken != -1)
    dispatch_once(&copyUserDataDisposition_onceToken, &__block_literal_global_8);
  if ((copyUserDataDisposition_dataDisposition & 2) == 0)
    return 0;
  v1 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v2 = objc_msgSend(v1, "getBoolAnswer:", CFSTR("DeviceSupportsMultiUser"));

  return v2;
}

void __copyUserDataDisposition_block_invoke(id a1)
{
  if ((os_variant_is_darwinos(objc_msgSend(CFSTR("com.apple.mobileactivationd"), "UTF8String")) & 1) == 0)
    copyUserDataDisposition_dataDisposition = DMGetUserDataDisposition();
}

uint64_t setBatteryDateOfFirtUse(void *a1, NSError **a2)
{
  id v3;
  uint64_t Use;
  NSError *MobileActivationError;
  NSError *v6;
  uint64_t v7;

  v3 = a1;
  if (v3)
  {
    if (!_os_feature_enabled_impl("powerd", "dossier")
      || (Use = IOPSSetBatteryDateOfFirstUse(v3, 0, 0, 0), !(_DWORD)Use))
    {
      v6 = 0;
      v7 = 1;
      goto LABEL_10;
    }
    MobileActivationError = createMobileActivationError((uint64_t)"setBatteryDateOfFirtUse", 34, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to set battery date of first use: 0x%08x"), Use);
  }
  else
  {
    MobileActivationError = createMobileActivationError((uint64_t)"setBatteryDateOfFirtUse", 27, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
  }
  v6 = MobileActivationError;
  if (a2)
  {
    v6 = objc_retainAutorelease(v6);
    v7 = 0;
    *a2 = v6;
  }
  else
  {
    v7 = 0;
  }
LABEL_10:

  return v7;
}

BOOL hasPrimaryICloudAccount(_QWORD *a1)
{
  id v2;
  void *v3;
  id v4;
  _BOOL8 v5;
  NSError *v6;

  v2 = objc_msgSend(getAKAccountManagerClass(), "sharedInstance");
  v3 = v2;
  if (v2)
  {
    v4 = objc_msgSend(v2, "primaryAuthKitAccount");
    v5 = v4 != 0;

    v6 = 0;
    if (!a1)
      goto LABEL_7;
  }
  else
  {
    v6 = createMobileActivationError((uint64_t)"hasPrimaryICloudAccount", 48, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("Failed to retrieve account manager."));
    v5 = 0;
    if (!a1)
      goto LABEL_7;
  }
  if (!v5)
    *a1 = objc_retainAutorelease(v6);
LABEL_7:

  return v5;
}

id getAKAccountManagerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAKAccountManagerClass_softClass;
  v7 = getAKAccountManagerClass_softClass;
  if (!getAKAccountManagerClass_softClass)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3254779904;
    v3[2] = __getAKAccountManagerClass_block_invoke;
    v3[3] = &__block_descriptor_40_e8_32r_e5_v8__0l;
    v3[4] = &v4;
    __getAKAccountManagerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10004D784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL primaryICloudAccountIsHSA2(_QWORD *a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  _BOOL8 v7;
  NSError *v8;
  NSError *MobileActivationError;

  v2 = objc_msgSend(getAKAccountManagerClass(), "sharedInstance");
  v3 = v2;
  if (!v2)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"primaryICloudAccountIsHSA2", 81, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("Failed to retrieve account manager."));
LABEL_8:
    v8 = MobileActivationError;
    goto LABEL_10;
  }
  v4 = objc_msgSend(v2, "primaryAuthKitAccount");
  if (!v4)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"primaryICloudAccountIsHSA2", 87, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("No primary account exists."));
    goto LABEL_8;
  }
  v5 = v4;
  v6 = objc_msgSend(v3, "securityLevelForAccount:", v4);
  if (!v6)
  {
    v8 = createMobileActivationError((uint64_t)"primaryICloudAccountIsHSA2", 93, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("Failed to retrieve account security level."));

LABEL_10:
    v7 = 0;
    if (!a1)
      goto LABEL_13;
    goto LABEL_11;
  }
  v7 = v6 == (id)4;

  v8 = 0;
  if (!a1)
    goto LABEL_13;
LABEL_11:
  if (!v7)
    *a1 = objc_retainAutorelease(v8);
LABEL_13:

  return v7;
}

id copyTokenForActivationLock(void *a1, void *a2, int a3, BOOL *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  dispatch_semaphore_t v12;
  void *v13;
  id v14;
  NSError *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  NSError *v27;
  id v28;
  id v29;
  id v30;
  id v32;
  void *v33;
  id v34;
  id v35;
  NSError *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  BOOL v44;
  id v45;
  id v46;
  id v47;
  _QWORD v48[7];
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  void (*v53)(uint64_t);
  id v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  void (*v59)(uint64_t);
  id v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  void (*v65)(uint64_t);
  id v66;

  v9 = a1;
  v46 = a2;
  v61 = 0;
  v62 = &v61;
  v63 = 0x3032000000;
  v64 = __Block_byref_object_copy__8;
  v65 = __Block_byref_object_dispose__8;
  v66 = 0;
  v55 = 0;
  v56 = &v55;
  v57 = 0x3032000000;
  v58 = __Block_byref_object_copy__8;
  v59 = __Block_byref_object_dispose__8;
  v60 = 0;
  v49 = 0;
  v50 = &v49;
  v51 = 0x3032000000;
  v52 = __Block_byref_object_copy__8;
  v53 = __Block_byref_object_dispose__8;
  v54 = 0;
  v10 = objc_alloc_init((Class)NSDictionary);
  v11 = (void *)v56[5];
  v56[5] = (uint64_t)v10;

  if (!v56[5])
  {
    v15 = createMobileActivationError((uint64_t)"copyTokenForActivationLock", 134, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create dictionary."));
LABEL_13:
    v16 = 0;
    v17 = 0;
    v47 = 0;
    goto LABEL_14;
  }
  v12 = dispatch_semaphore_create(0);
  v13 = (void *)v50[5];
  v50[5] = (uint64_t)v12;

  if (!v50[5])
  {
    v15 = createMobileActivationError((uint64_t)"copyTokenForActivationLock", 140, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create semaphore."));
    goto LABEL_13;
  }
  if (!getAKAppleIDAuthenticationControllerClass()
    || !getAKAppleIDAuthenticationContextClass()
    || !getAKAccountManagerClass())
  {
    v15 = createMobileActivationError((uint64_t)"copyTokenForActivationLock", 145, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("AuthKit is not supported on this platform."));
    goto LABEL_13;
  }
  v47 = objc_alloc_init((Class)getAKAccountManagerClass());
  if (!v47)
  {
    v15 = createMobileActivationError((uint64_t)"copyTokenForActivationLock", 151, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate account manager."));
    goto LABEL_13;
  }
  if (v9)
  {
    v14 = objc_msgSend(v47, "authKitAccountWithAppleID:", v9);
    if (!v14)
    {
      v15 = createMobileActivationError((uint64_t)"copyTokenForActivationLock", 158, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query account for %@."), v9);
      v16 = 0;
      v17 = 0;
LABEL_14:
      v45 = 0;
LABEL_15:
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
LABEL_16:
      v22 = (id)v62[5];
      v62[5] = (uint64_t)v15;
      goto LABEL_17;
    }
  }
  else
  {
    v14 = objc_msgSend(v47, "primaryAuthKitAccount");
    if (!v14)
    {
      v15 = createMobileActivationError((uint64_t)"copyTokenForActivationLock", 164, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query primary account."));
      v16 = 0;
      v17 = 0;
      v45 = 0;
      v18 = 0;
LABEL_37:
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v9 = 0;
      goto LABEL_16;
    }
  }
  v45 = v14;
  v26 = objc_msgSend(v47, "securityLevelForAccount:");
  v44 = v26 == (id)4;
  if (!v46 && (a3 & 1) == 0 && v26 != (id)4)
  {
    v15 = createMobileActivationError((uint64_t)"copyTokenForActivationLock", 172, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input for Non-HSA2 account (password required)."));
LABEL_35:
    v16 = 0;
    v17 = 0;
    goto LABEL_15;
  }
  v18 = objc_msgSend(v47, "DSIDForAccount:", v45);
  if (!v18)
  {
    v15 = createMobileActivationError((uint64_t)"copyTokenForActivationLock", 178, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query DSID."));
    goto LABEL_35;
  }
  v23 = objc_msgSend(v47, "formattedUsernameForAccount:", v45);

  if (!v23)
  {
    v15 = createMobileActivationError((uint64_t)"copyTokenForActivationLock", 184, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query username."));
    v16 = 0;
    v17 = 0;
    goto LABEL_37;
  }
  v19 = objc_msgSend(v47, "altDSIDForAccount:", v45);
  if (!v19)
  {
    v27 = createMobileActivationError((uint64_t)"copyTokenForActivationLock", 190, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query altDSID."));
    v16 = 0;
    v17 = 0;
    v19 = 0;
LABEL_42:
    v20 = 0;
    v21 = 0;
LABEL_43:
    v22 = (id)v62[5];
    v62[5] = (uint64_t)v27;
    goto LABEL_44;
  }
  v16 = objc_alloc_init((Class)getAKAppleIDAuthenticationControllerClass());
  if (!v16)
  {
    v27 = createMobileActivationError((uint64_t)"copyTokenForActivationLock", 196, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate auth controller."));
    v16 = 0;
LABEL_41:
    v17 = 0;
    goto LABEL_42;
  }
  v17 = objc_alloc_init((Class)getAKAppleIDAuthenticationContextClass());
  if (!v17)
  {
    v27 = createMobileActivationError((uint64_t)"copyTokenForActivationLock", 202, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate auth context."));
    goto LABEL_41;
  }
  if (v46)
  {
    if (objc_msgSend(v46, "hasSuffix:", CFSTR("PET")))
    {
      v21 = v46;
      goto LABEL_47;
    }
    objc_msgSend(v17, "_setPassword:", v46);
  }
  v21 = 0;
LABEL_47:
  objc_msgSend(v17, "setUsername:", v23);
  v28 = objc_msgSend(v18, "stringValue");
  objc_msgSend(v17, "setDSID:", v28);

  objc_msgSend(v17, "setAltDSID:", v19);
  objc_msgSend(v17, "setIsUsernameEditable:", 0);
  objc_msgSend(v17, "setShouldPromptForPasswordOnly:", 0);
  objc_msgSend(v17, "setShouldUpdatePersistentServiceTokens:", 0);
  objc_msgSend(v17, "setServiceType:", 1);
  objc_msgSend(v17, "setShouldSkipSettingsLaunchAlert:", 0);
  objc_msgSend(v17, "setAuthenticationType:", a3 ^ 1u);
  v20 = objc_alloc_init((Class)NSMutableDictionary);
  if (!v20)
  {
    v27 = createMobileActivationError((uint64_t)"copyTokenForActivationLock", 226, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate dictionary."));
    v20 = 0;
    goto LABEL_43;
  }
  v29 = objc_msgSend(v18, "stringValue");
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v29, CFSTR("dsid"));

  objc_msgSend(v20, "setObject:forKeyedSubscript:", v19, CFSTR("altDSID"));
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v23);
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v21, CFSTR("pet"));
  if (!v21)
  {
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3254779904;
    v48[2] = __copyTokenForActivationLock_block_invoke;
    v48[3] = &__block_descriptor_56_e8_32r40r48r_e34_v24__0__NSDictionary_8__NSError_16l;
    v48[4] = &v61;
    v48[5] = &v55;
    v48[6] = &v49;
    objc_msgSend(v16, "authenticateWithContext:completion:", v17, v48);
    dispatch_semaphore_wait((dispatch_semaphore_t)v50[5], 0xFFFFFFFFFFFFFFFFLL);
    if (v62[5])
    {
      v21 = 0;
      if (a5)
        goto LABEL_18;
      goto LABEL_55;
    }
    v38 = (id)v56[5];
    v40 = getAKAuthenticationPasswordKey();
    v39 = objc_msgSend(v38, "objectForKeyedSubscript:", v40);
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v39, CFSTR("pet"));

    v41 = objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("pet"));
    v32 = isNSString(v41);

    if (v32)
    {
      v33 = (void *)v56[5];
      v42 = getAKAuthenticationUsernameKey();
      v34 = objc_msgSend(v33, "objectForKeyedSubscript:", v42);
      objc_msgSend(v20, "setObject:forKeyedSubscript:", v34, CFSTR("appleID"));

      v43 = objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("appleID"));
      v35 = isNSString(v43);

      if (v35)
        goto LABEL_49;
      v22 = getAKAuthenticationPasswordKey();
      v36 = createMobileActivationError((uint64_t)"copyTokenForActivationLock", 263, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Missing authentication value: %@"), v22);
    }
    else
    {
      v22 = getAKAuthenticationPasswordKey();
      v36 = createMobileActivationError((uint64_t)"copyTokenForActivationLock", 257, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Missing authentication value: %@"), v22);
    }
    v37 = (void *)v62[5];
    v62[5] = (uint64_t)v36;

    v21 = 0;
LABEL_44:
    v9 = v23;
LABEL_17:

    v23 = v9;
    if (a5)
    {
LABEL_18:
      v24 = objc_retainAutorelease((id)v62[5]);
      v25 = 0;
      *a5 = v24;
      goto LABEL_56;
    }
LABEL_55:
    v25 = 0;
    goto LABEL_56;
  }
LABEL_49:
  if (a4)
    *a4 = v44;
  v25 = v20;
  v20 = v25;
LABEL_56:
  v30 = v25;

  _Block_object_dispose(&v49, 8);
  _Block_object_dispose(&v55, 8);

  _Block_object_dispose(&v61, 8);
  return v30;
}

void sub_10004E2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

id getAKAppleIDAuthenticationControllerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAKAppleIDAuthenticationControllerClass_softClass;
  v7 = getAKAppleIDAuthenticationControllerClass_softClass;
  if (!getAKAppleIDAuthenticationControllerClass_softClass)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3254779904;
    v3[2] = __getAKAppleIDAuthenticationControllerClass_block_invoke;
    v3[3] = &__block_descriptor_40_e8_32r_e5_v8__0l;
    v3[4] = &v4;
    __getAKAppleIDAuthenticationControllerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10004E3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAKAppleIDAuthenticationContextClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAKAppleIDAuthenticationContextClass_softClass;
  v7 = getAKAppleIDAuthenticationContextClass_softClass;
  if (!getAKAppleIDAuthenticationContextClass_softClass)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3254779904;
    v3[2] = __getAKAppleIDAuthenticationContextClass_block_invoke;
    v3[3] = &__block_descriptor_40_e8_32r_e5_v8__0l;
    v3[4] = &v4;
    __getAKAppleIDAuthenticationContextClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10004E49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t __copyTokenForActivationLock_block_invoke(_QWORD *a1, void *a2, void *a3)
{
  NSError *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (!a2 || a3)
  {
    v4 = createMobileActivationError((uint64_t)"copyTokenForActivationLock_block_invoke", 238, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, a3, CFSTR("Failed to authenticate."));
    v5 = a1[4];
  }
  else
  {
    v4 = (NSError *)objc_msgSend(a2, "copy");
    v5 = a1[5];
  }
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v4;

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1[6] + 8) + 40));
}

void __copy_helper_block_e8_32r40r48r(uint64_t a1, const void **a2)
{
  _Block_object_assign((void *)(a1 + 32), a2[4], 8);
  _Block_object_assign((void *)(a1 + 40), a2[5], 8);
  _Block_object_assign((void *)(a1 + 48), a2[6], 8);
}

void __destroy_helper_block_e8_32r40r48r(const void **a1)
{
  _Block_object_dispose(a1[6], 8);
  _Block_object_dispose(a1[5], 8);
  _Block_object_dispose(a1[4], 8);
}

id getAKAuthenticationPasswordKey()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getAKAuthenticationPasswordKeySymbolLoc_ptr;
  v6 = getAKAuthenticationPasswordKeySymbolLoc_ptr;
  if (!getAKAuthenticationPasswordKeySymbolLoc_ptr)
  {
    v1 = (void *)AuthKitLibrary();
    v0 = (id *)dlsym(v1, "AKAuthenticationPasswordKey");
    v4[3] = (uint64_t)v0;
    getAKAuthenticationPasswordKeySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getAKAuthenticationPasswordKey_cold_1();
  return *v0;
}

void sub_10004E64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getAKAuthenticationUsernameKey()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getAKAuthenticationUsernameKeySymbolLoc_ptr;
  v6 = getAKAuthenticationUsernameKeySymbolLoc_ptr;
  if (!getAKAuthenticationUsernameKeySymbolLoc_ptr)
  {
    v1 = (void *)AuthKitLibrary();
    v0 = (id *)dlsym(v1, "AKAuthenticationUsernameKey");
    v4[3] = (uint64_t)v0;
    getAKAuthenticationUsernameKeySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getAKAuthenticationUsernameKey_cold_1();
  return *v0;
}

void sub_10004E6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

Class __getAKAccountManagerClass_block_invoke(uint64_t a1)
{
  Class result;
  __int128 v3;
  uint64_t v4;

  if (!AuthKitLibraryCore_frameworkLibrary)
  {
    v3 = off_10025AC60;
    v4 = 0;
    AuthKitLibraryCore_frameworkLibrary = _sl_dlopen(&v3, 0);
  }
  result = objc_getClass("AKAccountManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getAKAccountManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getAKAppleIDAuthenticationControllerClass_block_invoke(uint64_t a1)
{
  Class result;
  __int128 v3;
  uint64_t v4;

  if (!AuthKitLibraryCore_frameworkLibrary)
  {
    v3 = off_10025AC60;
    v4 = 0;
    AuthKitLibraryCore_frameworkLibrary = _sl_dlopen(&v3, 0);
  }
  result = objc_getClass("AKAppleIDAuthenticationController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getAKAppleIDAuthenticationControllerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getAKAppleIDAuthenticationContextClass_block_invoke(uint64_t a1)
{
  Class result;
  __int128 v3;
  uint64_t v4;

  if (!AuthKitLibraryCore_frameworkLibrary)
  {
    v3 = off_10025AC60;
    v4 = 0;
    AuthKitLibraryCore_frameworkLibrary = _sl_dlopen(&v3, 0);
  }
  result = objc_getClass("AKAppleIDAuthenticationContext");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getAKAppleIDAuthenticationContextClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t AuthKitLibrary()
{
  uint64_t v0;
  void *v2;
  __int128 v3;
  uint64_t v4;

  v2 = 0;
  if (!AuthKitLibraryCore_frameworkLibrary)
  {
    v3 = off_10025AC60;
    v4 = 0;
    AuthKitLibraryCore_frameworkLibrary = _sl_dlopen(&v3, &v2);
  }
  v0 = AuthKitLibraryCore_frameworkLibrary;
  if (!AuthKitLibraryCore_frameworkLibrary)
    AuthKitLibrary_cold_1(&v2);
  if (v2)
    free(v2);
  return v0;
}

id libavp_send_host_message(void *a1, _QWORD *a2)
{
  id v3;
  id v4;
  id v5;
  NSData *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSError *v12;
  id v13;
  _BOOL4 v14;
  id v15;
  NSError *v16;
  id v17;
  NSError *v19;
  id v20;
  id v21;
  CFTypeRef cf;
  __int128 v23;
  uint64_t v24;
  void *v25;

  v3 = a1;
  cf = 0;
  if (!is_virtual_machine())
  {
    v16 = createMobileActivationError((uint64_t)"libavp_send_host_message", 60, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("Device is not a VM (not supported)."));
LABEL_18:
    v12 = v16;
    v15 = 0;
    v10 = 0;
    v6 = 0;
    v11 = 0;
    v4 = 0;
    v5 = 0;
    goto LABEL_19;
  }
  if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
  {
    v23 = off_10025AC78;
    v24 = 0;
    AppleVirtualPlatformLibraryCore_frameworkLibrary = _sl_dlopen(&v23, 0);
  }
  if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
  {
    v16 = createMobileActivationError((uint64_t)"libavp_send_host_message", 65, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Virtualization library not loaded on this platform."));
    goto LABEL_18;
  }
  if (!v3)
  {
    v16 = createMobileActivationError((uint64_t)"libavp_send_host_message", 70, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid intput."));
    goto LABEL_18;
  }
  v4 = copy_calling_process_name();
  if (!v4)
  {
    v16 = createMobileActivationError((uint64_t)"libavp_send_host_message", 76, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve process name."));
    goto LABEL_18;
  }
  v5 = objc_msgSend(v3, "mutableCopy");
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v4, CFSTR("HostProcessName"));
  v21 = 0;
  v6 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v5, 100, 0, &v21);
  v7 = v21;
  if (!v6)
  {
    v12 = createMobileActivationError((uint64_t)"libavp_send_host_message", 85, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v7, CFSTR("Could not convert dictionary to xml data."));

    v15 = 0;
    v10 = 0;
    v6 = 0;
LABEL_27:
    v11 = 0;
    goto LABEL_19;
  }
  *(_QWORD *)&v23 = 0;
  *((_QWORD *)&v23 + 1) = &v23;
  v24 = 0x2020000000;
  v8 = getAppleVirtualPlatformSendSubsystemMessageToHostSymbolLoc_ptr;
  v25 = getAppleVirtualPlatformSendSubsystemMessageToHostSymbolLoc_ptr;
  if (!getAppleVirtualPlatformSendSubsystemMessageToHostSymbolLoc_ptr)
  {
    v9 = (void *)AppleVirtualPlatformLibrary();
    v8 = dlsym(v9, "AppleVirtualPlatformSendSubsystemMessageToHost");
    *(_QWORD *)(*((_QWORD *)&v23 + 1) + 24) = v8;
    getAppleVirtualPlatformSendSubsystemMessageToHostSymbolLoc_ptr = v8;
  }
  _Block_object_dispose(&v23, 8);
  if (!v8)
    libavp_send_host_message_cold_1();
  v10 = (void *)((uint64_t (*)(uint64_t, NSData *, CFTypeRef *))v8)(6, v6, &cf);
  if (!v10)
  {
    v12 = createMobileActivationError((uint64_t)"libavp_send_host_message", 91, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, (void *)cf, CFSTR("Failed to send message to host."));

    v15 = 0;
    v10 = 0;
    goto LABEL_27;
  }
  v20 = 0;
  v11 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v10, 0, 0, &v20);
  v12 = (NSError *)v20;

  v13 = isNSDictionary(v11);
  v14 = v13 == 0;

  if (v14)
  {
    v19 = createMobileActivationError((uint64_t)"libavp_send_host_message", 97, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v12, CFSTR("Failed to serialize data as dictionary."));

    v15 = 0;
    v12 = v19;
  }
  else
  {
    v15 = v11;
    v11 = v15;
  }
LABEL_19:
  if (a2 && !v15)
    *a2 = objc_retainAutorelease(v12);
  if (cf)
    CFRelease(cf);
  v17 = v15;

  return v17;
}

void sub_10004EE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id libavp_copy_strong_identity_data(void *a1, NSError **a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  double v8;
  NSError *v9;
  NSError *v10;
  NSError *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  _QWORD *v17;
  void *v18;
  NSNumber *v19;
  _QWORD *v20;
  void *v21;
  double v22;
  NSNumber *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  CFTypeRef cf;
  __int128 v31;
  uint64_t v32;
  void *v33;

  v3 = a1;
  cf = 0;
  if (is_virtual_machine())
  {
    if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
    {
      v31 = off_10025AC78;
      v32 = 0;
      AppleVirtualPlatformLibraryCore_frameworkLibrary = _sl_dlopen(&v31, 0);
    }
    if (AppleVirtualPlatformLibraryCore_frameworkLibrary)
    {
      v4 = objc_alloc_init((Class)NSMutableDictionary);
      if (v4)
      {
        v5 = objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("NetworkTimeoutInterval"));
        v6 = isNSNumber(v5);

        if (v6)
        {
          v7 = objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("NetworkTimeoutInterval"));
          objc_msgSend(v7, "doubleValue");
          if (v8 <= 0.0)
          {
            v9 = createMobileActivationError((uint64_t)"libavp_copy_strong_identity_data", 144, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid network timeout requested: %@"), v7);
            goto LABEL_35;
          }
        }
        else
        {
          v7 = 0;
        }
        v13 = objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("SkipNetworkRequest"));
        v14 = isNSNumber(v13);

        if (v14)
        {
          v15 = objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("SkipNetworkRequest"));
          v16 = objc_msgSend(v15, "BOOLValue");

        }
        else
        {
          v16 = 0;
        }
        *(_QWORD *)&v31 = 0;
        *((_QWORD *)&v31 + 1) = &v31;
        v32 = 0x2020000000;
        v17 = (_QWORD *)getkAppleVirtualPlatformGuestStrongIdentityOptionSynchronousSymbolLoc_ptr;
        v33 = (void *)getkAppleVirtualPlatformGuestStrongIdentityOptionSynchronousSymbolLoc_ptr;
        if (!getkAppleVirtualPlatformGuestStrongIdentityOptionSynchronousSymbolLoc_ptr)
        {
          v18 = (void *)AppleVirtualPlatformLibrary();
          v17 = dlsym(v18, "kAppleVirtualPlatformGuestStrongIdentityOptionSynchronous");
          *(_QWORD *)(*((_QWORD *)&v31 + 1) + 24) = v17;
          getkAppleVirtualPlatformGuestStrongIdentityOptionSynchronousSymbolLoc_ptr = (uint64_t)v17;
        }
        _Block_object_dispose(&v31, 8);
        if (!v17)
          libavp_copy_strong_identity_data_cold_1();
        objc_msgSend(v4, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, *v17);
        v19 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v16);
        *(_QWORD *)&v31 = 0;
        *((_QWORD *)&v31 + 1) = &v31;
        v32 = 0x2020000000;
        v20 = (_QWORD *)getkAppleVirtualPlatformGuestStrongIdentityOptionCachedOnlySymbolLoc_ptr;
        v33 = (void *)getkAppleVirtualPlatformGuestStrongIdentityOptionCachedOnlySymbolLoc_ptr;
        if (!getkAppleVirtualPlatformGuestStrongIdentityOptionCachedOnlySymbolLoc_ptr)
        {
          v21 = (void *)AppleVirtualPlatformLibrary();
          v20 = dlsym(v21, "kAppleVirtualPlatformGuestStrongIdentityOptionCachedOnly");
          *(_QWORD *)(*((_QWORD *)&v31 + 1) + 24) = v20;
          getkAppleVirtualPlatformGuestStrongIdentityOptionCachedOnlySymbolLoc_ptr = (uint64_t)v20;
        }
        _Block_object_dispose(&v31, 8);
        if (!v20)
          libavp_copy_strong_identity_data_cold_2();
        objc_msgSend(v4, "setObject:forKeyedSubscript:", v19, *v20);

        if (v7)
        {
          objc_msgSend(v7, "doubleValue");
          v23 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v22 * 1000000000.0);
          *(_QWORD *)&v31 = 0;
          *((_QWORD *)&v31 + 1) = &v31;
          v32 = 0x2020000000;
          v24 = (_QWORD *)getkAppleVirtualPlatformGuestStrongIdentityOptionSynchronousTimeoutNsecSymbolLoc_ptr;
          v33 = (void *)getkAppleVirtualPlatformGuestStrongIdentityOptionSynchronousTimeoutNsecSymbolLoc_ptr;
          if (!getkAppleVirtualPlatformGuestStrongIdentityOptionSynchronousTimeoutNsecSymbolLoc_ptr)
          {
            v25 = (void *)AppleVirtualPlatformLibrary();
            v24 = dlsym(v25, "kAppleVirtualPlatformGuestStrongIdentityOptionSynchronousTimeoutNsec");
            *(_QWORD *)(*((_QWORD *)&v31 + 1) + 24) = v24;
            getkAppleVirtualPlatformGuestStrongIdentityOptionSynchronousTimeoutNsecSymbolLoc_ptr = (uint64_t)v24;
          }
          _Block_object_dispose(&v31, 8);
          if (!v24)
            libavp_copy_strong_identity_data_cold_4();
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v23, *v24);

        }
        *(_QWORD *)&v31 = 0;
        *((_QWORD *)&v31 + 1) = &v31;
        v32 = 0x2020000000;
        v26 = getAppleVirtualPlatformGuestCopyStrongIdentityDataSymbolLoc_ptr;
        v33 = getAppleVirtualPlatformGuestCopyStrongIdentityDataSymbolLoc_ptr;
        if (!getAppleVirtualPlatformGuestCopyStrongIdentityDataSymbolLoc_ptr)
        {
          v27 = (void *)AppleVirtualPlatformLibrary();
          v26 = dlsym(v27, "AppleVirtualPlatformGuestCopyStrongIdentityData");
          *(_QWORD *)(*((_QWORD *)&v31 + 1) + 24) = v26;
          getAppleVirtualPlatformGuestCopyStrongIdentityDataSymbolLoc_ptr = v26;
        }
        _Block_object_dispose(&v31, 8);
        if (!v26)
          libavp_copy_strong_identity_data_cold_3();
        v28 = (void *)((uint64_t (*)(id, CFTypeRef *))v26)(v4, &cf);
        if (v28)
        {
          v12 = v28;
          v11 = 0;
          goto LABEL_37;
        }
        v9 = createMobileActivationError((uint64_t)"libavp_copy_strong_identity_data", 162, CFSTR("com.apple.MobileActivation.ErrorDomain"), -24, (void *)cf, CFSTR("Failed to copy AVP guest identity data."));
LABEL_35:
        v11 = v9;
        if (!a2)
          goto LABEL_36;
LABEL_13:
        v11 = objc_retainAutorelease(v11);
        v12 = 0;
        *a2 = v11;
        goto LABEL_37;
      }
      v10 = createMobileActivationError((uint64_t)"libavp_copy_strong_identity_data", 137, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate dictionary."));
    }
    else
    {
      v10 = createMobileActivationError((uint64_t)"libavp_copy_strong_identity_data", 131, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Virtualization library not loaded on this platform."));
    }
  }
  else
  {
    v10 = createMobileActivationError((uint64_t)"libavp_copy_strong_identity_data", 126, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("Device is not a VM (not supported)."));
  }
  v11 = v10;
  v4 = 0;
  v7 = 0;
  if (a2)
    goto LABEL_13;
LABEL_36:
  v12 = 0;
LABEL_37:
  if (cf)
    CFRelease(cf);

  return v12;
}

void sub_10004F39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const void *libavp_copy_host_key_and_certs_with_data(void *a1, void *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;
  NSError *v8;
  id v9;
  void *v10;
  objc_class *v11;
  id v12;
  NSError *v13;
  id v14;
  const void *v15;
  __SecCertificate *v16;
  __SecCertificate *v17;
  CFDataRef v18;
  __SecCertificate *v19;
  __SecCertificate *v20;
  NSError *v22;
  CFDataRef v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  Class (*v31)(uint64_t);
  void *v32;
  uint64_t *v33;

  v7 = a1;
  v24 = a2;
  if (is_virtual_machine())
  {
    v8 = createMobileActivationError((uint64_t)"libavp_copy_host_key_and_certs_with_data", 192, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("Device is a VM (not supported)."));
    goto LABEL_22;
  }
  if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
  {
    v30 = off_10025AC78;
    v31 = 0;
    AppleVirtualPlatformLibraryCore_frameworkLibrary = _sl_dlopen(&v30, 0);
  }
  if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
  {
    v8 = createMobileActivationError((uint64_t)"libavp_copy_host_key_and_certs_with_data", 197, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Virtualization library not loaded on this platform."));
    goto LABEL_22;
  }
  if (!v7)
  {
    v8 = createMobileActivationError((uint64_t)"libavp_copy_host_key_and_certs_with_data", 202, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid intput."));
    goto LABEL_22;
  }
  v9 = objc_alloc_init((Class)NSMutableData);
  if (!v9)
  {
    v8 = createMobileActivationError((uint64_t)"libavp_copy_host_key_and_certs_with_data", 208, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to allocate data."));
LABEL_22:
    v13 = v8;
    v12 = 0;
    v9 = 0;
    v18 = 0;
    v17 = 0;
    v20 = 0;
    v15 = 0;
    if (!a4)
      goto LABEL_24;
    goto LABEL_23;
  }
  v26 = 0;
  v27 = &v26;
  v28 = 0x2050000000;
  v10 = (void *)getAppleVirtualPlatformHostCertificateClass_softClass;
  v29 = getAppleVirtualPlatformHostCertificateClass_softClass;
  if (!getAppleVirtualPlatformHostCertificateClass_softClass)
  {
    *(_QWORD *)&v30 = _NSConcreteStackBlock;
    *((_QWORD *)&v30 + 1) = 3254779904;
    v31 = __getAppleVirtualPlatformHostCertificateClass_block_invoke;
    v32 = &__block_descriptor_40_e8_32r_e5_v8__0l;
    v33 = &v26;
    __getAppleVirtualPlatformHostCertificateClass_block_invoke((uint64_t)&v30);
    v10 = (void *)v27[3];
  }
  v11 = objc_retainAutorelease(v10);
  _Block_object_dispose(&v26, 8);
  v25 = 0;
  v12 = objc_msgSend([v11 alloc], "initWithDataRepresentation:error:", v7, &v25);
  v13 = (NSError *)v25;
  if (!v12)
  {
    v22 = createMobileActivationError((uint64_t)"libavp_copy_host_key_and_certs_with_data", 214, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v13, CFSTR("Failed to initialize identity data."));

    v12 = 0;
LABEL_33:
    v18 = 0;
    v17 = 0;
    v20 = 0;
    v15 = 0;
    goto LABEL_38;
  }
  v14 = objc_msgSend(v12, "hostKey");
  v15 = v14;
  if (!v14)
  {
    v22 = createMobileActivationError((uint64_t)"libavp_copy_host_key_and_certs_with_data", 220, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy AVP host key."));

    goto LABEL_33;
  }
  CFRetain(v14);
  v16 = (__SecCertificate *)objc_msgSend(v12, "leafCertificate");
  v17 = v16;
  if (!v16)
  {
    v22 = createMobileActivationError((uint64_t)"libavp_copy_host_key_and_certs_with_data", 228, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy AVP host leaf certificate."));

    v18 = 0;
    v17 = 0;
LABEL_37:
    v20 = 0;
    goto LABEL_38;
  }
  CFRetain(v16);
  v18 = SecCertificateCopyData(v17);
  if (!v18)
  {
    v22 = createMobileActivationError((uint64_t)"libavp_copy_host_key_and_certs_with_data", 236, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create PEM data from cert."));

    v18 = 0;
    goto LABEL_37;
  }
  objc_msgSend(v9, "appendData:", v18);
  v19 = (__SecCertificate *)objc_msgSend(v12, "intermediateCertificate");
  v20 = v19;
  if (!v19)
  {
    v22 = createMobileActivationError((uint64_t)"libavp_copy_host_key_and_certs_with_data", 244, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy AVP host intermediate certificate."));

    goto LABEL_37;
  }
  CFRetain(v19);
  v23 = SecCertificateCopyData(v20);

  if (v23)
  {
    objc_msgSend(v9, "appendData:");
    if (a3)
    {
      v9 = objc_retainAutorelease(v9);
      *a3 = v9;
    }
    v18 = v23;
    goto LABEL_27;
  }
  v22 = createMobileActivationError((uint64_t)"libavp_copy_host_key_and_certs_with_data", 252, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create PEM data from cert."));

  v18 = 0;
LABEL_38:
  v13 = v22;
  if (a4)
LABEL_23:
    *a4 = objc_retainAutorelease(v13);
LABEL_24:
  if (v15)
    CFRelease(v15);
  v15 = 0;
  if (v17)
LABEL_27:
    CFRelease(v17);
  if (v20)
    CFRelease(v20);

  return v15;
}

void sub_10004F928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t libavp_guest_has_host_key(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSError *v6;
  NSError *v7;
  __int128 v9;
  uint64_t v10;
  void *v11;

  if (!is_virtual_machine())
  {
    v7 = createMobileActivationError((uint64_t)"libavp_guest_has_host_key", 285, CFSTR("com.apple.MobileActivation.ErrorDomain"), -3, 0, CFSTR("Device is not a VM (not supported)."));
    goto LABEL_12;
  }
  if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
  {
    v9 = off_10025AC78;
    v10 = 0;
    AppleVirtualPlatformLibraryCore_frameworkLibrary = _sl_dlopen(&v9, 0);
  }
  if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
  {
    v7 = createMobileActivationError((uint64_t)"libavp_guest_has_host_key", 290, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Virtualization library not loaded on this platform."));
LABEL_12:
    v6 = v7;
    v5 = 0;
    if (!a1)
      goto LABEL_15;
    goto LABEL_13;
  }
  *(_QWORD *)&v9 = 0;
  *((_QWORD *)&v9 + 1) = &v9;
  v10 = 0x2020000000;
  v2 = getAppleVirtualPlatformGuestHasHostKeySymbolLoc_ptr;
  v11 = getAppleVirtualPlatformGuestHasHostKeySymbolLoc_ptr;
  if (!getAppleVirtualPlatformGuestHasHostKeySymbolLoc_ptr)
  {
    v3 = (void *)AppleVirtualPlatformLibrary();
    v2 = dlsym(v3, "AppleVirtualPlatformGuestHasHostKey");
    *(_QWORD *)(*((_QWORD *)&v9 + 1) + 24) = v2;
    getAppleVirtualPlatformGuestHasHostKeySymbolLoc_ptr = v2;
  }
  _Block_object_dispose(&v9, 8);
  if (!v2)
    libavp_guest_has_host_key_cold_1();
  v5 = ((uint64_t (*)(uint64_t))v2)(v4);
  v6 = 0;
  if (a1)
  {
LABEL_13:
    if ((v5 & 1) == 0)
      *a1 = objc_retainAutorelease(v6);
  }
LABEL_15:

  return v5;
}

void sub_10004FAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t AppleVirtualPlatformLibrary()
{
  uint64_t v0;
  void *v2;
  __int128 v3;
  uint64_t v4;

  v2 = 0;
  if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
  {
    v3 = off_10025AC78;
    v4 = 0;
    AppleVirtualPlatformLibraryCore_frameworkLibrary = _sl_dlopen(&v3, &v2);
  }
  v0 = AppleVirtualPlatformLibraryCore_frameworkLibrary;
  if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
    AppleVirtualPlatformLibrary_cold_1(&v2);
  if (v2)
    free(v2);
  return v0;
}

Class __getAppleVirtualPlatformHostCertificateClass_block_invoke(uint64_t a1)
{
  Class result;
  __int128 v3;
  uint64_t v4;

  if (!AppleVirtualPlatformLibraryCore_frameworkLibrary)
  {
    v3 = off_10025AC78;
    v4 = 0;
    AppleVirtualPlatformLibraryCore_frameworkLibrary = _sl_dlopen(&v3, 0);
  }
  result = objc_getClass("AppleVirtualPlatformHostCertificate");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getAppleVirtualPlatformHostCertificateClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

char *OUTLINED_FUNCTION_1_0()
{
  return dlerror();
}

void OUTLINED_FUNCTION_2_0()
{
  void *v0;

}

void sub_100050BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v40 - 200), 8);
  _Block_object_dispose((const void *)(v40 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

void __copy_helper_block_e8_32s40s48s56r64r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
}

void __destroy_helper_block_e8_32s40s48s56r64r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 64), 8);
  _Block_object_dispose(*(const void **)(a1 + 56), 8);

}

void sub_100051278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32b(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 7);
}

void sub_10005223C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_100052E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose((const void *)(v45 - 240), 8);
  _Block_object_dispose((const void *)(v45 - 208), 8);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32s40s48r56r64r72r80r88r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
  _Block_object_assign((void *)(a1 + 80), *(const void **)(a2 + 80), 8);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 8);
}

void __destroy_helper_block_e8_32s40s48r56r64r72r80r88r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 88), 8);
  _Block_object_dispose(*(const void **)(a1 + 80), 8);
  _Block_object_dispose(*(const void **)(a1 + 72), 8);
  _Block_object_dispose(*(const void **)(a1 + 64), 8);
  _Block_object_dispose(*(const void **)(a1 + 56), 8);
  _Block_object_dispose(*(const void **)(a1 + 48), 8);

}

void __copy_helper_block_e8_32s40s48s56s64b72r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 7);
  _Block_object_assign((void *)(a1 + 72), *(const void **)(a2 + 72), 8);
}

void sub_100053AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32s40s48r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
}

void __destroy_helper_block_e8_32s40s48r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 48), 8);

}

void sub_100056510(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32s40b48r(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = *(id *)(a2 + 32);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 7);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
}

void __copy_helper_block_e8_32s40s48b56r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 7);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
}

void sub_10005767C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 136), 8);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32s40b48r56r(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = *(id *)(a2 + 32);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 7);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
}

void __destroy_helper_block_e8_32s40s48r56r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 56), 8);
  _Block_object_dispose(*(const void **)(a1 + 48), 8);

}

void sub_100058AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32s40s48s56b64r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 7);
  _Block_object_assign((void *)(a1 + 64), *(const void **)(a2 + 64), 8);
}

void sub_100059C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32s40s48r56r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  _Block_object_assign((void *)(a1 + 48), *(const void **)(a2 + 48), 8);
  _Block_object_assign((void *)(a1 + 56), *(const void **)(a2 + 56), 8);
}

void __copy_helper_block_e8_32s40s48s56s64s72s80s88b96r104r(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v4 = *(id *)(a2 + 32);
  v5 = *(id *)(a2 + 40);
  v6 = *(id *)(a2 + 48);
  v7 = *(id *)(a2 + 56);
  v8 = *(id *)(a2 + 64);
  v9 = *(id *)(a2 + 72);
  v10 = *(id *)(a2 + 80);
  _Block_object_assign((void *)(a1 + 88), *(const void **)(a2 + 88), 7);
  _Block_object_assign((void *)(a1 + 96), *(const void **)(a2 + 96), 8);
  _Block_object_assign((void *)(a1 + 104), *(const void **)(a2 + 104), 8);
}

void __destroy_helper_block_e8_32s40s48s56s64s72s80s88s96r104r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 104), 8);
  _Block_object_dispose(*(const void **)(a1 + 96), 8);

}

void sub_10005DEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *copySignpostLoggingHandle()
{
  if (copySignpostLoggingHandle_onceToken != -1)
    dispatch_once(&copySignpostLoggingHandle_onceToken, &__block_literal_global_10);
  return copySignpostLoggingHandle_logHandle;
}

void __copySignpostLoggingHandle_block_invoke(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.mobileactivationd", "analytics");
  v2 = copySignpostLoggingHandle_logHandle;
  copySignpostLoggingHandle_logHandle = v1;

}

void **libaks_ref_key_create(int a1, unsigned int a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  NSError *v8;
  void **v9;
  void **v11;

  v11 = 0;
  if (a1 == 13)
    v6 = -1;
  else
    v6 = 0;
  v7 = aks_ref_key_create(v6, a1, a2, 0, 0, &v11);
  if (!(_DWORD)v7)
  {
    v8 = 0;
    v9 = v11;
    v11 = 0;
    if (!a3)
      goto LABEL_12;
    goto LABEL_10;
  }
  v8 = createMobileActivationError((uint64_t)"libaks_ref_key_create", 31, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create ref key: 0x%08x"), v7);
  if (v11)
    aks_ref_key_free((uint64_t *)&v11);
  v9 = 0;
  if (a3)
  {
LABEL_10:
    if (!v9)
      *a3 = objc_retainAutorelease(v8);
  }
LABEL_12:

  return v9;
}

uint64_t libaks_ref_key_create_with_blob(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  NSError *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = a1;
  v4 = v3;
  v10 = 0;
  if (v3)
  {
    v5 = objc_retainAutorelease(v3);
    v6 = aks_ref_key_create_with_blob(0, objc_msgSend(v5, "bytes"), (size_t)objc_msgSend(v5, "length"), &v10);
    if (!(_DWORD)v6)
    {
      v7 = 0;
      v8 = v10;
      v10 = 0;
      if (!a2)
        goto LABEL_11;
      goto LABEL_9;
    }
    v7 = createMobileActivationError((uint64_t)"libaks_ref_key_create_with_blob", 66, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create ref key from data: 0x%08x"), v6);
    if (v10)
      aks_ref_key_free(&v10);
  }
  else
  {
    v7 = createMobileActivationError((uint64_t)"libaks_ref_key_create_with_blob", 60, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
  }
  v8 = 0;
  if (!a2)
    goto LABEL_11;
LABEL_9:
  if (!v8)
    *a2 = objc_retainAutorelease(v7);
LABEL_11:

  return v8;
}

id libaks_ref_key_get_public(uint64_t *a1, NSError **a2)
{
  uint64_t public_key;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  NSError *v8;
  __CFString *v9;
  uint64_t v10;
  NSError *MobileActivationError;
  NSError *v12;
  uint64_t v14;

  v14 = 0;
  if (a1)
  {
    public_key = aks_ref_key_get_public_key(a1, &v14);
    if (!public_key)
    {
      MobileActivationError = createMobileActivationError((uint64_t)"libaks_ref_key_get_public", 102, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query public key."));
      goto LABEL_9;
    }
    v4 = public_key;
    v5 = objc_alloc((Class)NSData);
    v6 = objc_msgSend(v5, "initWithBytes:length:", v4, v14);
    if (v6)
    {
      v7 = v6;
      v8 = 0;
      goto LABEL_12;
    }
    v9 = CFSTR("Failed to create data.");
    v10 = 108;
  }
  else
  {
    v9 = CFSTR("Invalid input(s).");
    v10 = 96;
  }
  MobileActivationError = createMobileActivationError((uint64_t)"libaks_ref_key_get_public", v10, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, v9);
LABEL_9:
  v12 = MobileActivationError;
  v8 = v12;
  if (a2)
  {
    v8 = objc_retainAutorelease(v12);
    v7 = 0;
    *a2 = v8;
  }
  else
  {
    v7 = 0;
  }
LABEL_12:

  return v7;
}

uint64_t libaks_system_key_operate(uint64_t a1, uint64_t a2, NSError **a3)
{
  NSError *MobileActivationError;
  uint64_t v8;
  uint64_t v9;
  NSError *v10;
  uint64_t v11;

  if ((a1 - 15) >= 0xFFFFFFF2 && (a2 - 4) > 0xFFFFFFFC)
  {
    v8 = aks_system_key_operate(a1, a2, 0, 0);
    if (!(_DWORD)v8)
    {
      v10 = 0;
      v11 = 1;
      goto LABEL_15;
    }
    if ((_DWORD)v8 == -536870170)
      v9 = -3;
    else
      v9 = -1;
    MobileActivationError = createMobileActivationError((uint64_t)"libaks_system_key_operate", 138, CFSTR("com.apple.MobileActivation.ErrorDomain"), v9, 0, CFSTR("Failed to perform system key (%d) operation (%d): 0x%08x"), a1, a2, v8);
  }
  else
  {
    MobileActivationError = createMobileActivationError((uint64_t)"libaks_system_key_operate", 132, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
  }
  v10 = MobileActivationError;
  if (a3)
  {
    v10 = objc_retainAutorelease(v10);
    v11 = 0;
    *a3 = v10;
  }
  else
  {
    v11 = 0;
  }
LABEL_15:

  return v11;
}

id libaks_system_key_get_public(uint64_t a1, uint64_t a2, NSError **a3)
{
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  NSError *v11;
  NSError *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  v20 = 0;
  v21 = 0;
  if ((a1 - 15) < 0xFFFFFFF2 || (a2 - 4) <= 0xFFFFFFFC)
  {
    v5 = CFSTR("Invalid input(s).");
    v6 = 165;
LABEL_6:
    v7 = -2;
    goto LABEL_9;
  }
  v10 = aks_system_key_get_public(a1, a2, 0, 0, &v21, &v20);
  if (!(_DWORD)v10)
  {
    v14 = objc_alloc((Class)NSData);
    v15 = objc_msgSend(v14, "initWithBytesNoCopy:length:", v21, v20);
    if (v15)
    {
      v21 = 0;
      v13 = v15;
      v12 = 0;
      goto LABEL_14;
    }
    v5 = CFSTR("Failed to create data.");
    v6 = 177;
    goto LABEL_6;
  }
  v18 = a2;
  v19 = v10;
  v17 = a1;
  v5 = CFSTR("Failed to query system key (%d / %d) public key: 0x%08x");
  v6 = 171;
  v7 = -1;
LABEL_9:
  v11 = createMobileActivationError((uint64_t)"libaks_system_key_get_public", v6, CFSTR("com.apple.MobileActivation.ErrorDomain"), v7, 0, v5, v17, v18, v19);
  v12 = v11;
  if (a3)
  {
    v12 = objc_retainAutorelease(v11);
    v13 = 0;
    *a3 = v12;
  }
  else
  {
    v13 = 0;
  }
LABEL_14:
  if (v21)
    free(v21);
  v21 = 0;

  return v13;
}

id libaks_system_key_collection(uint64_t a1, uint64_t a2, unsigned int a3, id a4, NSError **a5)
{
  id v9;
  void *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSError *MobileActivationError;
  NSError *v16;
  id v17;
  void **v18;
  uint64_t v19;
  __CFString *v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t der;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void **v33;
  uint64_t v34;

  v9 = a4;
  v10 = v9;
  v33 = 0;
  v34 = a3;
  v31 = 0;
  v32 = 0;
  v29 = 0;
  v30 = 0;
  if (a3 <= 0x3F && (a1 - 15) >= 0xFFFFFFF2 && (a2 - 4) > 0xFFFFFFFC)
  {
    if (a3 || v9)
    {
      v18 = (void **)aks_params_create(0, 0);
      v11 = v18;
      v33 = v18;
      if (!v18)
      {
        v20 = CFSTR("Failed to create aks params.");
        v21 = 219;
        goto LABEL_24;
      }
      if (a3)
      {
        v19 = aks_params_set_number(v18, 18, &v34);
        if ((_DWORD)v19)
        {
          v28 = v19;
          v20 = CFSTR("Failed to set aks data: 0x%08x");
          v21 = 226;
          goto LABEL_24;
        }
      }
      if (v10)
      {
        v24 = objc_retainAutorelease(v10);
        v25 = aks_params_set_data(v11, 3, (uint64_t)objc_msgSend(v24, "bytes"), (uint64_t)objc_msgSend(v24, "length"));
        if ((_DWORD)v25)
        {
          v28 = v25;
          v20 = CFSTR("Failed to set aks data: 0x%08x");
          v21 = 234;
          goto LABEL_24;
        }
      }
      der = aks_params_get_der(v11, &v32, &v31);
      if ((_DWORD)der)
      {
        v28 = der;
        v20 = CFSTR("Failed to get DER encoded aks params: 0x%08x");
        v21 = 241;
        goto LABEL_24;
      }
      v12 = v31;
      v13 = v32;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
    }
    v14 = aks_system_key_collection(a1, a2, (uint64_t)v13, v12, &v30, &v29);
    if ((_DWORD)v14)
    {
      MobileActivationError = createMobileActivationError((uint64_t)"libaks_system_key_collection", 248, CFSTR("com.apple.MobileActivation.ErrorDomain"), -11, 0, CFSTR("Failed to perform system key (%d / %d) collection (options=%lld): 0x%08x"), a1, a2, v34, v14);
      goto LABEL_25;
    }
    v22 = objc_alloc((Class)NSData);
    v23 = objc_msgSend(v22, "initWithBytesNoCopy:length:", v30, v29);
    if (v23)
    {
      v30 = 0;
      v17 = v23;
      v16 = 0;
      goto LABEL_27;
    }
    v20 = CFSTR("Failed to create data.");
    v21 = 254;
LABEL_24:
    MobileActivationError = createMobileActivationError((uint64_t)"libaks_system_key_collection", v21, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, v20, v28);
LABEL_25:
    v16 = MobileActivationError;
    if (!a5)
      goto LABEL_26;
LABEL_10:
    v16 = objc_retainAutorelease(v16);
    v17 = 0;
    *a5 = v16;
    goto LABEL_27;
  }
  v16 = createMobileActivationError((uint64_t)"libaks_system_key_collection", 212, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
  v11 = 0;
  if (a5)
    goto LABEL_10;
LABEL_26:
  v17 = 0;
LABEL_27:
  if (v11)
    aks_params_free(&v33);
  if (v30)
    free(v30);
  v30 = 0;
  if (v32)
    free(v32);
  v32 = 0;

  return v17;
}

id libaks_system_key_attest(uint64_t a1, uint64_t a2, uint64_t a3, NSError **a4)
{
  uint64_t v7;
  NSError *MobileActivationError;
  NSError *v9;
  NSError *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v15;
  void *v16;

  v15 = 0;
  v16 = 0;
  if (a1 && (a2 - 15) >= 0xFFFFFFF2 && (a3 - 4) > 0xFFFFFFFC)
  {
    v7 = aks_system_key_attest(a2, a3, a1, 0, 0, &v16, &v15);
    if ((_DWORD)v7)
    {
      MobileActivationError = createMobileActivationError((uint64_t)"libaks_system_key_attest", 295, CFSTR("com.apple.MobileActivation.ErrorDomain"), -11, 0, CFSTR("Failed to attest ref key to systemKey (%d / %d): 0x%08x"), a2, a3, v7);
    }
    else
    {
      v12 = objc_alloc((Class)NSData);
      v13 = objc_msgSend(v12, "initWithBytesNoCopy:length:", v16, v15);
      if (v13)
      {
        v16 = 0;
        v11 = v13;
        v10 = 0;
        goto LABEL_12;
      }
      MobileActivationError = createMobileActivationError((uint64_t)"libaks_system_key_attest", 301, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to encode RK attestation data."));
    }
  }
  else
  {
    MobileActivationError = createMobileActivationError((uint64_t)"libaks_system_key_attest", 289, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
  }
  v9 = MobileActivationError;
  v10 = v9;
  if (a4)
  {
    v10 = objc_retainAutorelease(v9);
    v11 = 0;
    *a4 = v10;
  }
  else
  {
    v11 = 0;
  }
LABEL_12:
  if (v16)
    free(v16);
  v16 = 0;

  return v11;
}

uint64_t isRunningInRecovery()
{
  return 0;
}

uint64_t isRunningInRootLaunchdContext()
{
  return 0;
}

uint64_t isRunningInDiagnosticsMode()
{
  if (isRunningInDiagnosticsMode_onceToken != -1)
    dispatch_once(&isRunningInDiagnosticsMode_onceToken, &__block_literal_global_11);
  return isRunningInDiagnosticsMode_retval;
}

void __isRunningInDiagnosticsMode_block_invoke(id a1)
{
  void *v1;
  id v2;

  v1 = (void *)MGCopyAnswer(CFSTR("3kmXfug8VcxLI5yEmsqQKw"), 0);
  v2 = isNSNumber(v1);

  if (v2)
    isRunningInDiagnosticsMode_retval = objc_msgSend(v1, "BOOLValue");

}

uint64_t isSupportedDeviceIdentityClient(int a1, NSError **a2)
{
  id v4;
  _BOOL4 v5;
  uint64_t *v6;
  id v7;
  NSError *v8;
  uint64_t v9;

  if (isSupportedDeviceIdentityClient_onceToken != -1)
    dispatch_once(&isSupportedDeviceIdentityClient_onceToken, &__block_literal_global_2_0);
  v4 = copy_process_name(a1);
  if (!v4)
  {
    v8 = createMobileActivationError((uint64_t)"isSupportedDeviceIdentityClient", 287, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query process name."));
    v7 = 0;
    if (a2)
    {
LABEL_12:
      v8 = objc_retainAutorelease(v8);
      v9 = 0;
      *a2 = v8;
      goto LABEL_15;
    }
LABEL_14:
    v9 = 0;
    goto LABEL_15;
  }
  v5 = is_virtual_machine();
  v6 = &isSupportedDeviceIdentityClient_virtualDeviceSupportedList;
  if (!v5)
    v6 = &isSupportedDeviceIdentityClient_physicalDeviceSupportedList;
  v7 = (id)*v6;
  if ((objc_msgSend(v7, "containsObject:", v4) & 1) == 0)
  {
    v8 = createMobileActivationError((uint64_t)"isSupportedDeviceIdentityClient", 294, CFSTR("com.apple.MobileActivation.ErrorDomain"), -25, 0, CFSTR("%@ is not allowed to use this API. File a radar with 'MobileActivation | all' for support."), v4);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
    {
      isSupportedDeviceIdentityClient_cold_1(v8);
      if (a2)
        goto LABEL_12;
    }
    else if (a2)
    {
      goto LABEL_12;
    }
    goto LABEL_14;
  }
  v8 = 0;
  v9 = 1;
LABEL_15:

  return v9;
}

void __isSupportedDeviceIdentityClient_block_invoke(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)isSupportedDeviceIdentityClient_virtualDeviceSupportedList;
  isSupportedDeviceIdentityClient_virtualDeviceSupportedList = (uint64_t)&off_100271C38;

  v2 = (void *)isSupportedDeviceIdentityClient_physicalDeviceSupportedList;
  isSupportedDeviceIdentityClient_physicalDeviceSupportedList = (uint64_t)&off_100271C50;

}

id copy_calling_process_name()
{
  return copy_process_name(1);
}

id copy_current_process_name()
{
  return copy_process_name(0);
}

id isSupportedRecoveryLogClient(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = a1;
  v2 = v1;
  if (isSupportedRecoveryLogClient_onceToken != -1)
  {
    dispatch_once(&isSupportedRecoveryLogClient_onceToken, &__block_literal_global_231);
    if (v2)
      goto LABEL_3;
LABEL_5:
    v3 = 0;
    goto LABEL_6;
  }
  if (!v1)
    goto LABEL_5;
LABEL_3:
  v3 = objc_msgSend((id)isSupportedRecoveryLogClient_supportedList, "containsObject:", v2);
LABEL_6:

  return v3;
}

void __isSupportedRecoveryLogClient_block_invoke(id a1)
{
  void *v1;

  v1 = (void *)isSupportedRecoveryLogClient_supportedList;
  isSupportedRecoveryLogClient_supportedList = (uint64_t)&off_100271C68;

}

uint64_t isSupportedActivationLockClient(int a1, NSError **a2)
{
  id v4;
  NSError *v5;
  uint64_t v6;

  if (isSupportedActivationLockClient_onceToken != -1)
    dispatch_once(&isSupportedActivationLockClient_onceToken, &__block_literal_global_252);
  v4 = copy_process_name(a1);
  if (!v4)
  {
    v5 = createMobileActivationError((uint64_t)"isSupportedActivationLockClient", 364, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to query process name."));
    if (a2)
    {
LABEL_10:
      v5 = objc_retainAutorelease(v5);
      v6 = 0;
      *a2 = v5;
      goto LABEL_13;
    }
LABEL_12:
    v6 = 0;
    goto LABEL_13;
  }
  if ((objc_msgSend((id)isSupportedActivationLockClient_supportedList, "containsObject:", v4) & 1) == 0)
  {
    v5 = createMobileActivationError((uint64_t)"isSupportedActivationLockClient", 369, CFSTR("com.apple.MobileActivation.ErrorDomain"), -25, 0, CFSTR("%@ is not allowed to use this API. File a radar with 'MobileActivation | all' for support."), v4);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
    {
      isSupportedDeviceIdentityClient_cold_1(v5);
      if (a2)
        goto LABEL_10;
    }
    else if (a2)
    {
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  v5 = 0;
  v6 = 1;
LABEL_13:

  return v6;
}

void __isSupportedActivationLockClient_block_invoke(id a1)
{
  void *v1;

  v1 = (void *)isSupportedActivationLockClient_supportedList;
  isSupportedActivationLockClient_supportedList = (uint64_t)&off_100271C80;

}

NSArray *copy_sorted_file_list(void *a1)
{
  id v1;
  NSFileManager *v2;
  NSURL *v3;
  NSArray *v4;
  NSArray *v5;
  NSArray *v6;

  v1 = a1;
  v2 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v3 = +[NSURL URLWithString:](NSURL, "URLWithString:", v1);

  v4 = +[NSArray arrayWithObject:](NSArray, "arrayWithObject:", NSURLCreationDateKey);
  v5 = -[NSFileManager contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:](v2, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v3, v4, 4, 0);

  if (v5 && -[NSArray count](v5, "count"))
    v6 = -[NSArray sortedArrayUsingComparator:](v5, "sortedArrayUsingComparator:", &__block_literal_global_258);
  else
    v6 = 0;

  return v6;
}

int64_t __copy_sorted_file_list_block_invoke(id a1, id a2, id a3)
{
  id v4;
  unsigned int v5;
  id v6;
  unsigned int v7;
  id v8;
  double v9;
  double v10;
  double v11;
  int64_t v12;
  id v14;
  id v15;

  v4 = a3;
  v15 = 0;
  v5 = objc_msgSend(a2, "getResourceValue:forKey:error:", &v15, NSURLCreationDateKey, 0);
  v6 = v15;
  if (v5)
  {
    v14 = 0;
    v7 = objc_msgSend(v4, "getResourceValue:forKey:error:", &v14, NSURLCreationDateKey, 0);
    v8 = v14;
    if (v7)
    {
      objc_msgSend(v6, "timeIntervalSince1970");
      v10 = v9;
      objc_msgSend(v8, "timeIntervalSince1970");
      if (v10 < v11)
        v12 = 1;
      else
        v12 = -1;
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v8 = 0;
  }

  return v12;
}

id isNSDictionary(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;

  v1 = a1;
  if (v1 && (v2 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v1, v2) & 1) != 0))
    v3 = v1;
  else
    v3 = 0;

  return v3;
}

id isNSArray(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;

  v1 = a1;
  if (v1 && (v2 = objc_opt_class(NSArray), (objc_opt_isKindOfClass(v1, v2) & 1) != 0))
    v3 = v1;
  else
    v3 = 0;

  return v3;
}

id isNSData(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;

  v1 = a1;
  if (v1 && (v2 = objc_opt_class(NSData), (objc_opt_isKindOfClass(v1, v2) & 1) != 0))
    v3 = v1;
  else
    v3 = 0;

  return v3;
}

id isNSURL(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;

  v1 = a1;
  if (v1 && (v2 = objc_opt_class(NSURL), (objc_opt_isKindOfClass(v1, v2) & 1) != 0))
    v3 = v1;
  else
    v3 = 0;

  return v3;
}

id isNSDate(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;

  v1 = a1;
  if (v1 && (v2 = objc_opt_class(NSDate), (objc_opt_isKindOfClass(v1, v2) & 1) != 0))
    v3 = v1;
  else
    v3 = 0;

  return v3;
}

id dictionary_to_xml(uint64_t a1)
{
  NSData *v1;
  id v2;

  v1 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", a1, 100, 0, 0);
  if (v1)
    v2 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v1, 4);
  else
    v2 = 0;

  return v2;
}

uint64_t store_data(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  NSFileManager *v8;
  unsigned __int8 v9;
  id v10;
  int v11;
  int v12;
  id v13;
  int *v14;
  NSError *v15;
  NSError *MobileActivationError;
  id v17;
  id v18;
  NSError *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int *v24;
  char *v25;
  char *v26;
  char *v27;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!v5 || !v6)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"store_data", 524, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    goto LABEL_11;
  }
  v8 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v9 = -[NSFileManager fileExistsAtPath:](v8, "fileExistsAtPath:", v5);

  v10 = objc_retainAutorelease(v5);
  v11 = open_dprotected_np((const char *)objc_msgSend(v10, "fileSystemRepresentation"), 1794, 4, 0);
  if (v11 == -1)
  {
    v21 = __error();
    v26 = strerror(*v21);
    MobileActivationError = createMobileActivationError((uint64_t)"store_data", 533, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create %@: %s"), v10, v26);
LABEL_11:
    v19 = MobileActivationError;
    v12 = -1;
    if (!a3)
      goto LABEL_13;
    goto LABEL_12;
  }
  v12 = v11;
  if ((v9 & 1) != 0
    || (v13 = objc_retainAutorelease(v10), !chmod((const char *)objc_msgSend(v13, "fileSystemRepresentation"), 0x1B6u)))
  {
    v17 = objc_retainAutorelease(v7);
    v18 = (id)write(v12, objc_msgSend(v17, "bytes"), (size_t)objc_msgSend(v17, "length"));
    if (v18 == objc_msgSend(v17, "length"))
    {
      v19 = 0;
      v20 = 1;
LABEL_14:
      close(v12);
      v22 = v20;
      goto LABEL_15;
    }
    v24 = __error();
    v27 = strerror(*v24);
    v15 = createMobileActivationError((uint64_t)"store_data", 546, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to write data to %@: %s"), v10, v27);
  }
  else
  {
    v14 = __error();
    v25 = strerror(*v14);
    v15 = createMobileActivationError((uint64_t)"store_data", 540, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to update file permissions for %@: %s"), v13, v25);
  }
  v19 = v15;
  if (a3)
LABEL_12:
    *a3 = objc_retainAutorelease(v19);
LABEL_13:
  v20 = 0;
  v22 = 0;
  if (v12 != -1)
    goto LABEL_14;
LABEL_15:

  return v22;
}

uint64_t store_dict(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  NSData *v8;
  NSError *v9;
  NSFileManager *v10;
  unsigned __int8 v11;
  id v12;
  int v13;
  int v14;
  id v15;
  int *v16;
  NSError *v17;
  uint64_t v18;
  uint64_t v19;
  NSError *MobileActivationError;
  void *v22;
  int *v23;
  NSError *v24;
  int *v25;
  char *v26;
  char *v27;
  char *v28;
  id v29;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!v5 || !v6)
  {
    v9 = createMobileActivationError((uint64_t)"store_dict", 575, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input(s)."));
    v8 = 0;
    v14 = -1;
    if (!a3)
      goto LABEL_10;
    goto LABEL_9;
  }
  v29 = 0;
  v8 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v6, 200, 0, &v29);
  v9 = (NSError *)v29;
  if (!v8)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"store_dict", 583, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v9, CFSTR("Failed to serialize dictionary."));
LABEL_17:
    v24 = MobileActivationError;

    v14 = -1;
    goto LABEL_20;
  }
  v10 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v11 = -[NSFileManager fileExistsAtPath:](v10, "fileExistsAtPath:", v5);

  v12 = objc_retainAutorelease(v5);
  v13 = open_dprotected_np((const char *)objc_msgSend(v12, "fileSystemRepresentation"), 1794, 4, 0);
  if (v13 == -1)
  {
    v23 = __error();
    v27 = strerror(*v23);
    MobileActivationError = createMobileActivationError((uint64_t)"store_dict", 592, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create %@: %s"), v12, v27);
    goto LABEL_17;
  }
  v14 = v13;
  if ((v11 & 1) != 0
    || (v15 = objc_retainAutorelease(v12), !chmod((const char *)objc_msgSend(v15, "fileSystemRepresentation"), 0x1B6u)))
  {
    v8 = objc_retainAutorelease(v8);
    v22 = (void *)write(v14, -[NSData bytes](v8, "bytes"), -[NSData length](v8, "length"));
    if (v22 == (void *)-[NSData length](v8, "length"))
    {
      v18 = 1;
      goto LABEL_11;
    }
    v25 = __error();
    v28 = strerror(*v25);
    v17 = createMobileActivationError((uint64_t)"store_dict", 605, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to write data to %@: %s"), v12, v28);
  }
  else
  {
    v16 = __error();
    v26 = strerror(*v16);
    v17 = createMobileActivationError((uint64_t)"store_dict", 599, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to update file permissions for %@: %s"), v15, v26);
  }
  v24 = v17;

LABEL_20:
  v9 = v24;
  if (a3)
LABEL_9:
    *a3 = objc_retainAutorelease(v9);
LABEL_10:
  v18 = 0;
  v19 = 0;
  if (v14 != -1)
  {
LABEL_11:
    close(v14);
    v19 = v18;
  }

  return v19;
}

NSMutableDictionary *load_dict(NSMutableDictionary *a1)
{
  if (a1)
    a1 = +[NSMutableDictionary dictionaryWithContentsOfFile:](NSMutableDictionary, "dictionaryWithContentsOfFile:", a1);
  return a1;
}

id copy_process_name(int a1)
{
  NSXPCConnection *v2;
  NSXPCConnection *v3;
  pid_t v4;
  int v5;
  _OWORD v8[16];
  char buffer[4096];

  bzero(buffer, 0x1000uLL);
  memset(v8, 0, sizeof(v8));
  if (a1
    && (v2 = +[NSXPCConnection currentConnection](NSXPCConnection, "currentConnection")) != 0)
  {
    v3 = v2;
    v4 = -[NSXPCConnection processIdentifier](v2, "processIdentifier");

  }
  else
  {
    v4 = getpid();
  }
  proc_pidpath(v4, buffer, 0x1000u);
  v5 = strlen(buffer);
  if ((v5 & 0x80000000) == 0)
  {
    while (buffer[v5] != 47)
    {
      if (v5-- <= 0)
      {
        v5 = -1;
        break;
      }
    }
  }
  __strlcpy_chk(v8, &buffer[v5 + 1], 256, 256);
  return objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), v8);
}

NSInteger numberOfDaysBetweenDates(void *a1, id a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  NSCalendar *v7;
  NSInteger v8;
  id v9;
  unsigned int v10;
  unsigned int v11;
  NSDateComponents *v12;
  NSDateComponents *v13;
  id v15;
  id v16;

  v3 = a2;
  v4 = v3;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  if (a1 && v3)
  {
    v9 = a1;
    v7 = +[NSCalendar currentCalendar](NSCalendar, "currentCalendar");
    v16 = 0;
    v10 = -[NSCalendar rangeOfUnit:startDate:interval:forDate:](v7, "rangeOfUnit:startDate:interval:forDate:", 16, &v16, 0, v9);

    v5 = v16;
    if (v10)
    {
      v15 = 0;
      v11 = -[NSCalendar rangeOfUnit:startDate:interval:forDate:](v7, "rangeOfUnit:startDate:interval:forDate:", 16, &v15, 0, v4);
      v6 = v15;
      if (v11)
      {
        v12 = -[NSCalendar components:fromDate:toDate:options:](v7, "components:fromDate:toDate:options:", 16, v5, v6, 0);
        if (v12)
        {
          v13 = v12;
          v8 = -[NSDateComponents day](v12, "day");

          goto LABEL_9;
        }
      }
    }
    else
    {
      v6 = 0;
    }
    v8 = 0;
  }
LABEL_9:

  return v8;
}

NSMutableString *formatURLRequest(void *a1)
{
  id v1;
  NSMutableString *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v1 = a1;
  v2 = +[NSMutableString stringWithString:](NSMutableString, "stringWithString:", CFSTR("\n---------REQUEST START---------\n"));
  v3 = objc_msgSend(v1, "URL");
  v4 = objc_msgSend(v3, "description");
  -[NSMutableString appendFormat:](v2, "appendFormat:", CFSTR("URL: %@\n"), v4);

  v5 = objc_msgSend(v1, "HTTPMethod");
  -[NSMutableString appendFormat:](v2, "appendFormat:", CFSTR("METHOD: %@\n"), v5);

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v6 = objc_msgSend(v1, "allHTTPHeaderFields");
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v12 = objc_msgSend(v1, "valueForHTTPHeaderField:", v11);
        -[NSMutableString appendFormat:](v2, "appendFormat:", CFSTR("%@: %@\n"), v11, v12);

      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v8);
  }

  v13 = objc_alloc((Class)NSString);
  v14 = objc_msgSend(v1, "HTTPBody");
  v15 = objc_msgSend(v13, "initWithData:encoding:", v14, 4);
  -[NSMutableString appendFormat:](v2, "appendFormat:", CFSTR("BODY: \n%@\n"), v15);

  -[NSMutableString appendString:](v2, "appendString:", CFSTR("----------REQUEST END----------\n"));
  return v2;
}

NSMutableString *formatURLResponse(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  NSMutableString *v7;
  NSString *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  uint64_t v14;
  id v15;
  id v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v5 = a1;
  v6 = a3;
  v7 = +[NSMutableString stringWithString:](NSMutableString, "stringWithString:", CFSTR("\n---------RESPONSE START---------\n"));
  v8 = objc_retainAutorelease(+[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", a2));
  -[NSMutableString appendFormat:](v7, "appendFormat:", CFSTR("HTTP Status Code: %ld (%s)\n"), a2, -[NSString UTF8String](v8, "UTF8String"));

  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v9 = v6;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v12)
          objc_enumerationMutation(v9);
        v14 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        v15 = objc_msgSend(v9, "objectForKeyedSubscript:", v14);
        -[NSMutableString appendFormat:](v7, "appendFormat:", CFSTR("%@: %@\n"), v14, v15, (_QWORD)v18);

      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v11);
  }

  v16 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v5, 4);
  -[NSMutableString appendFormat:](v7, "appendFormat:", CFSTR("BODY: \n%@\n"), v16);

  -[NSMutableString appendString:](v7, "appendString:", CFSTR("----------RESPONSE END----------\n"));
  return v7;
}

int main(int argc, const char **argv, const char **envp)
{
  void *v3;
  uint64_t v4;
  id v5;
  NSString *v6;
  NSString *v7;
  NSString *v8;
  id v9;
  id v10;
  NSURL *v11;
  NSError *v12;
  id v13;
  uint64_t v14;
  void *i;
  void *v16;
  NSURL *v17;
  unsigned __int8 v18;
  NSError *v19;
  id v20;
  void *v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uid_t v24;
  id v25;
  id v26;
  const char *v27;
  id v28;
  id v29;
  NSString *v30;
  NSString *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  NSString *v37;
  id v38;
  id v39;
  DataArk *v40;
  id v41;
  DataArk *v42;
  DataArk *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  unsigned int v49;
  id v50;
  id v51;
  id v52;
  unsigned int v53;
  id v54;
  id v55;
  id v56;
  unsigned int v57;
  char v58;
  id v59;
  void *v60;
  char v61;
  NSError *v62;
  DataArk *v63;
  void *v64;
  id v65;
  id v66;
  id v67;
  unsigned int v68;
  NSDictionary *v69;
  char v70;
  id v71;
  NSObject *v72;
  char v73;
  id v74;
  id v75;
  id v76;
  unsigned int v77;
  id v78;
  id v79;
  NSFileManager *v80;
  __CFString *v81;
  id v82;
  id v83;
  void *v84;
  char v85;
  NSError *v86;
  NSError *v87;
  NSError *v88;
  _BOOL4 is_legacy;
  NSObject *v90;
  DataArk *v91;
  NSError *v92;
  char v93;
  NSError *v94;
  void *v95;
  void *v96;
  MobileActivationDaemon *v97;
  MobileActivationDaemon *v98;
  id v99;
  NSObject *v101;
  void *v102;
  id v103;
  void *v104;
  NSString *v105;
  NSString *v106;
  id v107;
  void *context;
  NSString *v109;
  id v110;
  NSArray *obj;
  _QWORD block[4];
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  passwd *v123;
  passwd v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  _BYTE v130[128];
  _QWORD v131[4];
  char v132[1024];
  __int128 buf;
  void (*v134)(uint64_t);
  void *v135;
  DataArk *v136;
  id v137;
  const __CFString *v138;
  void *v139;

  v3 = objc_autoreleasePoolPush();
  memset(&v124, 0, sizeof(v124));
  v123 = 0;
  bzero(v132, 0x400uLL);
  v4 = os_transaction_create("com.apple.mobileactivationd.startup");
  if (setiopolicy_np(9, 0, 1))
    main_cold_12();
  if ((_set_user_dir_suffix(objc_msgSend(CFSTR("com.apple.mobileactivationd"), "UTF8String")) & 1) == 0)
    main_cold_11();
  signal(30, (void (__cdecl *)(int))1);
  v5 = copy_system_container_path();
  v6 = copy_group_container_path((uint64_t)objc_msgSend(CFSTR("systemgroup.com.apple.regulatory_images"), "UTF8String"));
  v7 = copy_group_container_path((uint64_t)objc_msgSend(CFSTR("systemgroup.com.apple.pisco.suinfo"), "UTF8String"));
  v8 = copy_group_container_path((uint64_t)objc_msgSend(CFSTR("systemgroup.com.apple.mobileactivationd"), "UTF8String"));
  if (!v5 || !v6 || !v7 || !v8)
    main_cold_10();
  v107 = (id)v4;
  context = v3;
  v109 = v6;
  v110 = v5;
  v131[0] = v5;
  v131[1] = v6;
  v105 = v8;
  v106 = v7;
  v131[2] = v7;
  v131[3] = v8;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  v122 = 0u;
  obj = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v131, 4);
  v9 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v119, v130, 16);
  if (v9)
  {
    v10 = v9;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = *(_QWORD *)v120;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        v16 = v13;
        if (*(_QWORD *)v120 != v14)
          objc_enumerationMutation(obj);
        v17 = +[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", *(_QWORD *)(*((_QWORD *)&v119 + 1) + 8 * (_QWORD)i));

        v117 = 0;
        v118 = 0;
        v18 = -[NSURL getResourceValue:forKey:error:](v17, "getResourceValue:forKey:error:", &v118, NSURLIsExcludedFromBackupKey, &v117);
        v13 = v118;

        v19 = (NSError *)v117;
        if ((v18 & 1) == 0)
          main_cold_9(v19);
        v11 = v17;
        v20 = isNSNumber(v13);
        if (v20
          && (v21 = v20, v22 = objc_msgSend(v13, "BOOLValue"), v21, (v22 & 1) != 0))
        {
          v12 = v19;
        }
        else
        {
          v116 = v19;
          v23 = -[NSURL setResourceValue:forKey:error:](v11, "setResourceValue:forKey:error:", &__kCFBooleanTrue, NSURLIsExcludedFromBackupKey, &v116);
          v12 = (NSError *)v116;

          if ((v23 & 1) == 0)
            main_cold_8(v12);
        }
      }
      v10 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v119, v130, 16);
    }
    while (v10);
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
  }
  v104 = v13;

  v24 = getuid();
  if (getpwuid_r(v24, &v124, v132, 0x400uLL, &v123) || !v123)
    main_cold_7();
  maLog((uint64_t)"main", 0, CFSTR("____________________ Mobile Activation Startup _____________________"));
  v25 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v26 = objc_msgSend(v25, "copyAnswer:", CFSTR("BuildVersion"));
  maLog((uint64_t)"main", 0, CFSTR("build_version: %@"), v26);

  if (is_internal_build())
    v27 = "true";
  else
    v27 = "false";
  maLog((uint64_t)"main", 0, CFSTR("internal_build: %s"), v27);
  maLog((uint64_t)"main", 0, CFSTR("uid: %d"), v123->pw_uid);
  maLog((uint64_t)"main", 0, CFSTR("user_name: %s"), v123->pw_name);
  maLog((uint64_t)"main", 0, CFSTR("system_container_path: %@"), v110);
  maLog((uint64_t)"main", 0, CFSTR("regulatory_images_path: %@"), v109);
  v28 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v29 = objc_msgSend(v28, "copyAnswer:", CFSTR("HWModelStr"));
  maLog((uint64_t)"main", 0, CFSTR("hardware_model: %@"), v29);

  v30 = get_device_type();
  maLog((uint64_t)"main", 0, CFSTR("product_type: %@"), v30);

  v31 = get_device_class();
  maLog((uint64_t)"main", 0, CFSTR("device_class: %@"), v31);

  if (is_product_cellular())
    v32 = "true";
  else
    v32 = "false";
  maLog((uint64_t)"main", 0, CFSTR("has_baseband: %s"), v32);
  if (use_hactivation())
    v33 = "true";
  else
    v33 = "false";
  maLog((uint64_t)"main", 0, CFSTR("should_hactivate: %s"), v33);
  if (is_product_fpga())
    v34 = "true";
  else
    v34 = "false";
  maLog((uint64_t)"main", 0, CFSTR("is_fpga: %s"), v34);
  if (is_devfused_undemoted())
    v35 = "true";
  else
    v35 = "false";
  maLog((uint64_t)"main", 0, CFSTR("is_devfused_undemoted: %s"), v35);
  if (is_prodfused_demoted())
    v36 = "true";
  else
    v36 = "false";
  maLog((uint64_t)"main", 0, CFSTR("is_prodfused_demoted: %s"), v36);
  v37 = copy_soc_generation();
  maLog((uint64_t)"main", 0, CFSTR("soc_generation: %@"), v37);

  maLog((uint64_t)"main", 0, CFSTR("____________________________________________________________________"));
  v38 = copyMobileActivationSerialQueue();
  if (!v38)
    main_cold_1();
  v39 = v38;
  v40 = [DataArk alloc];
  v41 = copy_data_ark_directory_path();
  v42 = -[DataArk initWithPath:](v40, "initWithPath:", v41);

  if (!v42)
    main_cold_2();
  v43 = v42;
  v102 = v39;
  if (is_internal_build())
  {
    v44 = objc_alloc((Class)NSUserDefaults);
    v45 = objc_msgSend(v44, "persistentDomainForName:", CFSTR("com.apple.mobileactivationd"));

    v46 = objc_msgSend(v45, "objectForKey:", CFSTR("DeleteExistingUCRT"));
    v47 = isNSNumber(v46);

    if (v47)
    {
      v48 = objc_msgSend(v45, "objectForKey:", CFSTR("DeleteExistingUCRT"));
      v49 = objc_msgSend(v48, "BOOLValue");

      if (v49)
      {
        maLog((uint64_t)"perform_boot_initialization_tasks", 0, CFSTR("OVERRIDE: Deleting existing UCRT (OOB)"));
        deleteUCRT((uint64_t)v43, 0);
        data_ark_remove(v43, 0, CFSTR("UCRTOOBForbidden"));
      }
    }
    v50 = objc_msgSend(v45, "objectForKey:", CFSTR("UCRTHealingRequired"));
    v51 = isNSNumber(v50);

    if (v51)
    {
      v52 = objc_msgSend(v45, "objectForKey:", CFSTR("UCRTHealingRequired"));
      v53 = objc_msgSend(v52, "BOOLValue");

      if (v53)
      {
        maLog((uint64_t)"perform_boot_initialization_tasks", 0, CFSTR("OVERRIDE: Deleting existing UCRT (Healing)"));
        deleteUCRT((uint64_t)v43, 0);
        data_ark_remove(v43, 0, CFSTR("UCRTOOBForbidden"));
        data_ark_set(v43, 0, CFSTR("UCRTHealingRequired"), &__kCFBooleanTrue, 1);
      }
    }
    v54 = objc_msgSend(v45, "objectForKey:", CFSTR("DeleteExistingDCRT"));
    v55 = isNSNumber(v54);

    if (v55
      && (v56 = objc_msgSend(v45, "objectForKey:", CFSTR("DeleteExistingDCRT")),
          v57 = objc_msgSend(v56, "BOOLValue"),
          v56,
          v57))
    {
      maLog((uint64_t)"perform_boot_initialization_tasks", 0, CFSTR("OVERRIDE: Deleting existing DCRT"));
      deleteDCRT((uint64_t)v43, 0, 0);
      data_ark_remove(v43, 0, CFSTR("DCRTOOBForbidden"));
      v129 = 0;
      v58 = libaks_system_key_operate(9, 1, (NSError **)&v129);
      v59 = v129;
      v60 = v59;
      if ((v58 & 1) == 0
        && (mobileactivationErrorHasDomainAndErrorCode(v59, CFSTR("com.apple.MobileActivation.ErrorDomain"), (id)0xFFFFFFFFFFFFFFFDLL) & 1) == 0)
      {
        maLog((uint64_t)"perform_boot_initialization_tasks", 0, CFSTR("Failed to bump DAK: %@"), v60);
      }
      v128 = v60;
      v61 = libaks_system_key_operate(9, 2, (NSError **)&v128);
      v62 = (NSError *)v128;

      if ((v61 & 1) == 0
        && (mobileactivationErrorHasDomainAndErrorCode(v62, CFSTR("com.apple.MobileActivation.ErrorDomain"), (id)0xFFFFFFFFFFFFFFFDLL) & 1) == 0)
      {
        maLog((uint64_t)"perform_boot_initialization_tasks", 0, CFSTR("Failed to commit DAK: %@"), v62);
      }
    }
    else
    {
      v62 = 0;
    }
    v65 = objc_msgSend(v45, "objectForKey:", CFSTR("DeleteExistingSDCRT"));
    v66 = isNSNumber(v65);

    if (!v66)
      goto LABEL_68;
    v67 = objc_msgSend(v45, "objectForKey:", CFSTR("DeleteExistingSDCRT"));
    v68 = objc_msgSend(v67, "BOOLValue");

    if (!v68)
      goto LABEL_68;
    maLog((uint64_t)"perform_boot_initialization_tasks", 0, CFSTR("OVERRIDE: Deleting existing SDCRT"));
    v138 = CFSTR("sdcrtAttestation");
    v139 = &__kCFBooleanTrue;
    v69 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v139, &v138, 1);
    deleteDCRT((uint64_t)v43, v69, 0);

    data_ark_remove(v43, 0, CFSTR("SDCRTOOBForbidden"));
    v127 = v62;
    v70 = libaks_system_key_operate(10, 1, (NSError **)&v127);
    v71 = v127;

    if ((v70 & 1) == 0
      && (mobileactivationErrorHasDomainAndErrorCode(v71, CFSTR("com.apple.MobileActivation.ErrorDomain"), (id)0xFFFFFFFFFFFFFFFDLL) & 1) == 0)
    {
      v72 = copyLoggingHandle();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v71;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "Failed to bump SDAK: %@", (uint8_t *)&buf, 0xCu);
      }

    }
    v126 = v71;
    v73 = libaks_system_key_operate(10, 2, (NSError **)&v126);
    v62 = (NSError *)v126;

    if ((v73 & 1) == 0)
    {
      v63 = v43;
      if ((mobileactivationErrorHasDomainAndErrorCode(v62, CFSTR("com.apple.MobileActivation.ErrorDomain"), (id)0xFFFFFFFFFFFFFFFDLL) & 1) == 0)maLog((uint64_t)"perform_boot_initialization_tasks", 0, CFSTR("Failed to commit SDAK: %@"), v62);
    }
    else
    {
LABEL_68:
      v63 = v43;
    }
    v74 = objc_msgSend(v45, "objectForKey:", CFSTR("DeleteExistingPCRT"));
    v64 = v45;
    v75 = isNSNumber(v74);

    if (v75
      && (v76 = objc_msgSend(v64, "objectForKey:", CFSTR("DeleteExistingPCRT")),
          v77 = objc_msgSend(v76, "BOOLValue"),
          v76,
          v77))
    {
      maLog((uint64_t)"perform_boot_initialization_tasks", 0, CFSTR("OVERRIDE: Deleting existing PCRT"));
      v78 = copy_suinfo_directory_path();
      v79 = objc_msgSend(v78, "stringByAppendingPathComponent:", CFSTR("psc.sui"));

      if (v79)
      {
        v80 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
        -[NSFileManager removeItemAtPath:error:](v80, "removeItemAtPath:error:", v79, 0);

      }
      data_ark_remove(v63, 0, CFSTR("PCRTToken"));
      data_ark_remove(v63, 0, CFSTR("CollectionLastPerformed"));
      data_ark_remove(v63, 0, CFSTR("PCRTCollectionString"));
      data_ark_remove(v63, 0, CFSTR("PCRTCollectionStringBuild"));
    }
    else
    {
      v79 = 0;
    }
    v103 = v79;
    CFPreferencesSetAppValue(CFSTR("DeleteExistingUCRT"), kCFBooleanFalse, CFSTR("com.apple.mobileactivationd"));
    CFPreferencesSetAppValue(CFSTR("UCRTHealingRequired"), kCFBooleanFalse, CFSTR("com.apple.mobileactivationd"));
    CFPreferencesSetAppValue(CFSTR("DeleteExistingPCRT"), kCFBooleanFalse, CFSTR("com.apple.mobileactivationd"));
    CFPreferencesSetAppValue(CFSTR("DeleteExistingDCRT"), kCFBooleanFalse, CFSTR("com.apple.mobileactivationd"));
    CFPreferencesSetAppValue(CFSTR("DeleteExistingSDCRT"), kCFBooleanFalse, CFSTR("com.apple.mobileactivationd"));
    CFPreferencesAppSynchronize(CFSTR("com.apple.mobileactivationd"));
  }
  else
  {
    v63 = v43;
    v64 = 0;
    v103 = 0;
    v62 = 0;
  }
  v81 = (__CFString *)data_ark_copy(v63, 0, CFSTR("BootSessionUUID"));
  v82 = isNSString(v81);

  if (!v82)
  {

    v81 = &stru_1002694A0;
  }
  v83 = copy_bootsession_uuid();
  v84 = v83;
  if (!v83)
  {
    v88 = createMobileActivationError((uint64_t)"perform_boot_initialization_tasks", 152, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve boot session UUID."));
LABEL_85:

    v86 = objc_retainAutorelease(v88);
    v85 = 0;
    v87 = v86;
    goto LABEL_89;
  }
  if ((objc_msgSend(v83, "isEqualToString:", v81) & 1) != 0)
  {
    v85 = 1;
    v86 = v12;
    v87 = v62;
    goto LABEL_89;
  }
  v125 = v62;
  is_legacy = security_committed_uik_is_legacy(&v125);
  v87 = (NSError *)v125;

  if (!is_legacy && v87)
  {
    v88 = createMobileActivationError((uint64_t)"perform_boot_initialization_tasks", 159, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v87, CFSTR("Failed to query legacy UIK support."));
    v62 = v87;
    goto LABEL_85;
  }
  if (is_legacy)
    data_ark_set(v63, 0, CFSTR("UIKUpgradeRequired"), &__kCFBooleanTrue, 1);
  v90 = copyRTCResetSerialQueue();
  *(_QWORD *)&buf = _NSConcreteStackBlock;
  *((_QWORD *)&buf + 1) = 3254779904;
  v134 = __perform_boot_initialization_tasks_block_invoke;
  v135 = &__block_descriptor_48_e8_32s40s_e5_v8__0l;
  v91 = v63;
  v136 = v91;
  v137 = v84;
  dispatch_async(v90, &buf);

  data_ark_remove(v91, 0, CFSTR("UCRTOOBForbidden"));
  data_ark_remove(v91, 0, CFSTR("UCRTOOBForbiddenCount"));
  data_ark_remove(v91, 0, CFSTR("DCRTOOBForbidden"));
  data_ark_remove(v91, 0, CFSTR("DCRTOOBForbiddenCount"));
  data_ark_remove(v91, 0, CFSTR("SDCRTOOBForbidden"));
  data_ark_remove(v91, 0, CFSTR("SDCRTOOBForbiddenCount"));

  v85 = 1;
  v86 = v12;
LABEL_89:

  v92 = v86;
  if ((v85 & 1) == 0)
    main_cold_6(v92);
  if (!data_migration_supported() || preSydroDataMigrationCompleted(v63))
  {
    v115 = v92;
    v93 = performMigration(v63, &v115);
    v94 = (NSError *)v115;

    v95 = v102;
    if ((v93 & 1) == 0)
      main_cold_5(v94);
    v92 = v94;
    goto LABEL_94;
  }
  v95 = v102;
  if (!data_migration_supported())
  {
LABEL_94:
    v96 = v110;
    goto LABEL_95;
  }
  v96 = v110;
  if ((preSydroDataMigrationCompleted(v63) & 1) == 0)
  {
    v101 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3254779904;
    block[2] = __main_block_invoke;
    block[3] = &__block_descriptor_48_e8_32s40s_e5_v8__0l;
    v113 = v102;
    v114 = v63;
    dispatch_async(v101, block);

  }
LABEL_95:
  v97 = -[MobileActivationDaemon initWithContext:Queue:]([MobileActivationDaemon alloc], "initWithContext:Queue:", v63, v95);
  if (!v97)
    main_cold_3();
  v98 = v97;
  if ((os_variant_is_darwinos(objc_msgSend(CFSTR("com.apple.mobileactivationd"), "UTF8String")) & 1) == 0
    && !init_lockdown_server(v98, v95))
  {
    main_cold_4();
  }
  v99 = objc_msgSend(objc_alloc((Class)NSXPCListener), "initWithMachServiceName:", CFSTR("com.apple.mobileactivationd"));
  objc_msgSend(v99, "setDelegate:", v98);
  objc_msgSend(v99, "resume");

  objc_autoreleasePoolPop(context);
  CFRunLoopRun();

  return 1;
}

void __main_block_invoke(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[4];
  id v4;

  DMPerformMigrationReturningAfterPlugin(CFSTR("com.apple.MobileActivationMigrator"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3254779904;
  block[2] = __main_block_invoke_2;
  block[3] = &__block_descriptor_40_e8_32s_e5_v8__0l;
  v2 = *(NSObject **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  dispatch_sync(v2, block);

}

void __main_block_invoke_2(uint64_t a1)
{
  void *v1;
  char v2;
  id v3;
  id v4;

  v1 = *(void **)(a1 + 32);
  v4 = 0;
  v2 = performMigration(v1, &v4);
  v3 = v4;
  if ((v2 & 1) == 0)
    __main_block_invoke_2_cold_1(v3);

}

void __perform_boot_initialization_tasks_block_invoke(uint64_t a1)
{
  int v2;
  double v3;
  id v4;
  NSObject *v5;
  _UNKNOWN **v6;
  id v7;
  NSNumber *v8;
  id v9;
  double v10;
  double v11;
  NSNumber *v12;
  void *v13;
  NSNumber *v14;
  id v15;

  v2 = copyRTCResetCount();
  v15 = 0;
  v3 = copyMonotonicClockTimeInterval(&v15);
  v4 = v15;
  if (v3 <= 0.0)
  {
    v5 = copyLoggingHandle();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      __perform_boot_initialization_tasks_block_invoke_cold_1((uint64_t)v4, v5);

  }
  v6 = (_UNKNOWN **)data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("LastBootClockTime"));
  v7 = isNSNumber(v6);

  if (!v7)
  {

    v6 = &off_1002717A8;
  }
  v8 = (NSNumber *)data_ark_copy(*(void **)(a1 + 32), 0, CFSTR("TotalRTCResetCount"));
  v9 = isNSNumber(v8);

  if (!v9)
  {

    v8 = (NSNumber *)&off_1002717A8;
  }
  if (v2 || v3 <= 0.0 || (objc_msgSend(v6, "doubleValue"), v10 > 0.0) && (objc_msgSend(v6, "doubleValue"), v11 > v3))
  {
    v12 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", -[NSNumber unsignedIntValue](v8, "unsignedIntValue") + 1);

    v8 = v12;
  }
  data_ark_set(*(void **)(a1 + 32), 0, CFSTR("TotalRTCResetCount"), v8, 1);
  v13 = *(void **)(a1 + 32);
  v14 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v3);
  data_ark_set(v13, 0, CFSTR("LastBootClockTime"), v14, 1);

  data_ark_set(*(void **)(a1 + 32), 0, CFSTR("BootSessionUUID"), *(void **)(a1 + 40), 1);
}

id OUTLINED_FUNCTION_1_2(void *a1, const char *a2)
{
  return objc_msgSend(a1, "UTF8String");
}

char *OUTLINED_FUNCTION_2_1(int *a1)
{
  return strerror(*a1);
}

uint64_t is_dsp_device()
{
  id v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  id v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v0 = +[GestaltHlpr getSharedInstance](GestaltHlpr, "getSharedInstance");
  v1 = objc_msgSend(v0, "copyAnswer:", CFSTR("SerialNumber"));

  if (v1 && (v2 = objc_alloc_init((Class)NSMutableArray)) != 0)
  {
    v3 = v2;
    if (is_internal_build())
    {
      v4 = objc_alloc((Class)NSUserDefaults);
      v5 = objc_msgSend(v4, "persistentDomainForName:", CFSTR("com.apple.mobileactivationd"));

      v6 = objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("DSPList"));
      v7 = isNSArray(v6);

      if (v7)
      {
        v8 = objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("DSPList"));
        objc_msgSend(v3, "addObjectsFromArray:", v8);

      }
    }
    else
    {
      v5 = 0;
    }
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v10 = v3;
    v9 = (uint64_t)objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v9)
    {
      v11 = *(_QWORD *)v17;
      while (2)
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v17 != v11)
            objc_enumerationMutation(v10);
          v13 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
          v14 = isNSString(v13);

          if (v14 && (objc_msgSend(v13, "isEqualToString:", v1, (_QWORD)v16) & 1) != 0)
          {
            v9 = 1;
            goto LABEL_19;
          }
        }
        v9 = (uint64_t)objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        if (v9)
          continue;
        break;
      }
    }
LABEL_19:

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

NSNumber *copyBridgeKey(void *a1, NSError **a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  NSNumber *v9;
  NSNumber *v10;
  NSError *v11;
  NSError *MobileActivationError;

  v3 = a1;
  if (!is_virtual_machine() || (v4 = remote_device_copy_unique_of_type(9)) == 0)
  {
    v11 = createMobileActivationError((uint64_t)"copyBridgeKey", 273, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to connect to remote device."));
    v5 = 0;
    goto LABEL_9;
  }
  v5 = (void *)v4;
  if (remote_device_get_state() != 2)
  {
    v11 = createMobileActivationError((uint64_t)"copyBridgeKey", 278, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Remote device not connected yet."));
LABEL_9:
    v8 = 0;
    if (!a2)
    {
LABEL_16:
      v10 = 0;
      goto LABEL_17;
    }
LABEL_10:
    v11 = objc_retainAutorelease(v11);
    v10 = 0;
    *a2 = v11;
    goto LABEL_17;
  }
  v6 = objc_retainAutorelease(v3);
  v7 = (void *)remote_device_copy_property(v5, objc_msgSend(v6, "UTF8String"));
  v8 = v7;
  if (!v7)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"copyBridgeKey", 284, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve bridgeOS key: %@"), v6);
    goto LABEL_15;
  }
  if (xpc_get_type(v7) == (xpc_type_t)&_xpc_type_uint64)
  {
    v9 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", xpc_uint64_get_value(v8));
    if (v9)
      goto LABEL_7;
    goto LABEL_14;
  }
  v9 = (NSNumber *)_CFXPCCreateCFObjectFromXPCObject(v8);
  if (!v9)
  {
LABEL_14:
    MobileActivationError = createMobileActivationError((uint64_t)"copyBridgeKey", 294, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to convert value."));
LABEL_15:
    v11 = MobileActivationError;
    if (!a2)
      goto LABEL_16;
    goto LABEL_10;
  }
LABEL_7:
  v10 = v9;
  v11 = 0;
LABEL_17:

  return v10;
}

uint64_t bridge_call(int a1, void *a2, uint64_t a3)
{
  return bridge_call_and_response_internal(a1, a2, 0, a3);
}

uint64_t bridge_call_and_response_internal(int a1, id a2, _QWORD *a3, uint64_t a4)
{
  id v7;
  id v8;
  id v9;
  __CFString **v10;
  NSError *v11;
  xpc_object_t v12;
  void *v13;
  void *v14;
  id v15;
  __CFString *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  _QWORD *v21;
  char *v22;
  NSError *v23;
  _QWORD *v24;
  xpc_object_t v26;
  id v27;
  _QWORD *v28;
  uint64_t v29;
  id v30;
  id v31;

  v7 = a2;
  if (!v7)
  {
    v11 = createMobileActivationError((uint64_t)"bridge_call_and_response_internal", 162, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("Invalid input."));
    v9 = 0;
    v8 = 0;
    goto LABEL_10;
  }
  v8 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithDictionary:", v7);
  if (!v8)
  {
    v11 = createMobileActivationError((uint64_t)"bridge_call_and_response_internal", 168, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create dictionary."));
    v9 = 0;
    goto LABEL_10;
  }
  v9 = copy_calling_process_name();
  if (!v9)
  {
    v11 = createMobileActivationError((uint64_t)"bridge_call_and_response_internal", 174, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to retrieve process name."));
LABEL_10:
    v30 = 0;
    v12 = 0;
    a3 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    if (!a4)
      goto LABEL_35;
    goto LABEL_34;
  }
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v9, CFSTR("HostProcessName"));
  v29 = a4;
  v30 = v9;
  if (a1 == 1)
  {
    v10 = kMARecoveryLogBridgeConnectionID;
  }
  else
  {
    if (a1)
    {
      v11 = 0;
LABEL_24:
      v23 = createMobileActivationError((uint64_t)"bridge_call_and_response_internal", 194, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v11, CFSTR("Failed to create remote connection."));

      v9 = 0;
      v12 = 0;
      a3 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      goto LABEL_33;
    }
    v10 = kMABridgeConnectionID;
  }
  v16 = *v10;
  v31 = 0;
  v15 = copyRemoteServiceConnection(v16, (NSError **)&v31);
  v17 = v31;
  v18 = v17;
  if (v15)
  {
    v19 = v15;
    v20 = 0;
  }
  else
  {
    v20 = objc_retainAutorelease(v17);
  }

  v11 = (NSError *)v20;
  if (!v15)
    goto LABEL_24;
  v13 = (void *)_CFXPCCreateXPCObjectFromCFObject(v8);
  if (!v13)
  {
    v23 = createMobileActivationError((uint64_t)"bridge_call_and_response_internal", 200, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, v11, CFSTR("Failed to create XPC dictionary (%@)."), v8);

    v9 = 0;
    v12 = 0;
LABEL_27:
    a3 = 0;
LABEL_32:
    v14 = 0;
    goto LABEL_33;
  }
  v12 = xpc_dictionary_create(0, 0, 0);
  if (!v12)
  {
    v23 = createMobileActivationError((uint64_t)"bridge_call_and_response_internal", 206, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create xpc dictionary."));

    v9 = 0;
    goto LABEL_27;
  }
  xpc_dictionary_set_value(v12, (const char *)objc_msgSend(CFSTR("BridgeXPCRequestEncodedDictionary"), "UTF8String"), v13);
  if (!a3)
  {
    xpc_remote_connection_send_message(v15, v12);
    v14 = 0;
    v9 = 0;
LABEL_29:
    a4 = 1;
    goto LABEL_35;
  }
  v28 = a3;
  v21 = (_QWORD *)xpc_remote_connection_send_message_with_reply_sync(v15, v12);
  a3 = v21;
  if (!v21)
  {
    v23 = createMobileActivationError((uint64_t)"bridge_call_and_response_internal", 215, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to receive XPC reply."));

    goto LABEL_31;
  }
  if (xpc_get_type(v21) != (xpc_type_t)&_xpc_type_dictionary)
  {
    v22 = xpc_copy_description(a3);
    v23 = createMobileActivationError((uint64_t)"bridge_call_and_response_internal", 221, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Unexpected message: %s"), v22);

    free(v22);
LABEL_31:
    v9 = 0;
    goto LABEL_32;
  }
  v26 = xpc_dictionary_get_value(a3, (const char *)objc_msgSend(CFSTR("BridgeXPCResponseEncodedDictionary"), "UTF8String"));
  v14 = v26;
  if (v26)
  {
    v9 = (id)_CFXPCCreateCFObjectFromXPCObject(v26);
    v27 = isNSDictionary(v9);

    if (v27)
    {
      v9 = objc_retainAutorelease(v9);
      *v28 = v9;
      goto LABEL_29;
    }
    v23 = createMobileActivationError((uint64_t)"bridge_call_and_response_internal", 234, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create dictionary from XPC message."));

  }
  else
  {
    v23 = createMobileActivationError((uint64_t)"bridge_call_and_response_internal", 228, CFSTR("com.apple.MobileActivation.ErrorDomain"), -2, 0, CFSTR("XPC message missing key (%@) : %@"), CFSTR("BridgeXPCRequestEncodedDictionary"), a3);

    v9 = 0;
  }
LABEL_33:
  v11 = v23;
  a4 = v29;
  if (v29)
  {
LABEL_34:
    v11 = objc_retainAutorelease(v11);
    v24 = (_QWORD *)a4;
    a4 = 0;
    *v24 = v11;
  }
LABEL_35:

  return a4;
}

id bridge_call_and_response(int a1, void *a2, _QWORD *a3)
{
  int v4;
  id v5;
  id v6;
  id v7;
  id v9;
  id v10;

  v9 = 0;
  v10 = 0;
  v4 = bridge_call_and_response_internal(a1, a2, &v10, (uint64_t)&v9);
  v5 = v10;
  v6 = v9;
  v7 = 0;
  if (v4)
    v7 = v5;
  if (a3 && !v7)
    *a3 = objc_retainAutorelease(v6);

  return v7;
}

id copyRemoteServiceConnection(void *a1, NSError **a2)
{
  id v3;
  dispatch_semaphore_t v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  dispatch_time_t v9;
  NSError *v10;
  NSError *MobileActivationError;
  NSError *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  int *v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void **v24;
  uint64_t v25;
  intptr_t (*v26)(uint64_t);
  void *v27;
  id v28;

  v3 = a1;
  v4 = dispatch_semaphore_create(0);
  if (!v4)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"copyRemoteServiceConnection", 35, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create semaphore."));
    goto LABEL_8;
  }
  if (!is_virtual_machine() || (v5 = remote_device_copy_unique_of_type(9)) == 0)
  {
    MobileActivationError = createMobileActivationError((uint64_t)"copyRemoteServiceConnection", 49, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to connect to remote device."));
LABEL_8:
    v12 = MobileActivationError;
    v6 = 0;
    goto LABEL_9;
  }
  v6 = (void *)v5;
  v7 = dispatch_get_global_queue(0, 0);
  v24 = _NSConcreteStackBlock;
  v25 = 3254779904;
  v26 = __copyRemoteServiceConnection_block_invoke;
  v27 = &__block_descriptor_40_e8_32s_e26_v16__0__OS_remote_device_8l;
  v8 = v4;
  v28 = v8;
  remote_device_set_connected_callback(v6, v7, &v24);

  v9 = dispatch_time(0, 60000000000);
  if (dispatch_semaphore_wait(v8, v9))
  {
    v10 = createMobileActivationError((uint64_t)"copyRemoteServiceConnection", 60, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Remote device not connected after %d seconds."), 60, v21, v22, v24, v25, v26, v27);
LABEL_17:
    v12 = v10;
LABEL_9:
    v13 = 0;
    if (a2)
      goto LABEL_10;
LABEL_19:
    v14 = 0;
    goto LABEL_20;
  }
  if (remote_device_get_state(v6) != 2)
  {
    v10 = createMobileActivationError((uint64_t)"copyRemoteServiceConnection", 65, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Remote device not connected after %d seconds."), 60, v21, v22, v24, v25, v26, v27);
    goto LABEL_17;
  }
  v15 = objc_retainAutorelease(v3);
  v16 = remote_device_copy_service(v6, objc_msgSend(v15, "UTF8String"));
  if (!v16)
  {
    v18 = *__error();
    v19 = __error();
    v23 = strerror(*v19);
    v10 = createMobileActivationError((uint64_t)"copyRemoteServiceConnection", 71, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to connect to remote service %@: %d (%s)"), v15, v18, v23, v24, v25, v26, v27);
    goto LABEL_17;
  }
  v13 = (void *)v16;
  v17 = dispatch_get_global_queue(25, 0);
  v14 = (void *)xpc_remote_connection_create_with_remote_service(v13, v17, 0);

  if (v14)
  {
    xpc_remote_connection_set_event_handler(v14, &__block_literal_global_12);
    xpc_remote_connection_activate(v14);
    v12 = 0;
    goto LABEL_20;
  }
  v12 = createMobileActivationError((uint64_t)"copyRemoteServiceConnection", 77, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create remote connection."));
  if (!a2)
    goto LABEL_19;
LABEL_10:
  v12 = objc_retainAutorelease(v12);
  v14 = 0;
  *a2 = v12;
LABEL_20:

  return v14;
}

intptr_t __copyRemoteServiceConnection_block_invoke(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id copyReverseProxyDictionary(void *a1, uint64_t a2, NSError **a3)
{
  id v5;
  id v6;
  id v7;
  NSError *v8;
  void *v9;
  NSDictionary *v10;
  id v11;
  NSNumber *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  NSError *MobileActivationError;
  const __CFString *v21;
  NSNumber *v22;

  v5 = a1;
  v6 = objc_alloc_init((Class)NSMutableDictionary);
  if (v6)
  {
    if (v5)
      v7 = objc_msgSend(objc_alloc((Class)NSURL), "initWithString:", v5);
    else
      v7 = 0;
    v21 = CFSTR("TestReachability");
    v12 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2);
    v22 = v12;
    v10 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);

    RPSetLogLevel(0);
    v13 = (void *)RPCopyProxyDictionaryWithOptions(v7, v10);
    v9 = v13;
    if (v13)
    {
      v14 = objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("SOCKSProxy"));
      if (v14)
      {
        v15 = v14;
        v16 = objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("SOCKSPort"));

        if (v16)
        {
          v17 = objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("SOCKSProxy"));
          objc_msgSend(v6, "setObject:forKeyedSubscript:", v17, CFSTR("SOCKSProxyHost"));

          v18 = objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("SOCKSPort"));
          objc_msgSend(v6, "setObject:forKeyedSubscript:", v18, CFSTR("SOCKSProxyPort"));

          v11 = v6;
          v8 = 0;
          goto LABEL_15;
        }
      }
      MobileActivationError = createMobileActivationError((uint64_t)"copyReverseProxyDictionary", 49, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Invalid proxy dictionary."));
    }
    else
    {
      MobileActivationError = createMobileActivationError((uint64_t)"copyReverseProxyDictionary", 44, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to copy proxy dictionary (proxy likely not running on host)."));
    }
    v8 = MobileActivationError;
    if (a3)
    {
LABEL_14:
      v8 = objc_retainAutorelease(v8);
      v11 = 0;
      *a3 = v8;
      goto LABEL_15;
    }
  }
  else
  {
    v8 = createMobileActivationError((uint64_t)"copyReverseProxyDictionary", 31, CFSTR("com.apple.MobileActivation.ErrorDomain"), -1, 0, CFSTR("Failed to create dictionary."));
    v9 = 0;
    v7 = 0;
    v10 = 0;
    if (a3)
      goto LABEL_14;
  }
  v11 = 0;
LABEL_15:

  return v11;
}

uint64_t sub_100063280(mach_port_t a1, int a2, int *a3, uint64_t a4, int a5, _OWORD *a6, _QWORD *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  int v17;
  mach_port_t reply_port;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  mach_msg_header_t msg;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  NDR_record_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  int v48;
  int v49;
  int v50;

  v30 = 1;
  v31 = a4;
  v32 = 16777472;
  v33 = a5;
  v34 = NDR_record;
  v17 = *a3;
  v35 = a2;
  v36 = v17;
  v37 = a5;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B000000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v19 = mach_msg(&msg, 3, 0x40u, 0xDCu, reply_port, 0, 0);
  v20 = v19;
  if ((v19 - 268435458) <= 0xE && ((1 << (v19 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!(_DWORD)v19)
    {
      if (msg.msgh_id == 71)
      {
        v20 = 4294966988;
      }
      else if (msg.msgh_id == 1300)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          v20 = 4294966996;
          if (v30 == 2
            && msg.msgh_size == 212
            && !msg.msgh_remote_port
            && HIBYTE(v32) == 1
            && HIWORD(v35) << 16 == 1114112)
          {
            v21 = v33;
            if (v33 == v47)
            {
              v20 = 0;
              v22 = *(_DWORD *)&v34.mig_vers;
              *a3 = v38;
              v23 = v46;
              a6[6] = v45;
              a6[7] = v23;
              v24 = v44;
              a6[4] = v43;
              a6[5] = v24;
              v25 = v40;
              *a6 = v39;
              a6[1] = v25;
              v26 = v42;
              a6[2] = v41;
              a6[3] = v26;
              *a7 = v31;
              *a8 = v21;
              v27 = v49;
              *a9 = v48;
              *a10 = v27;
              *a11 = v50;
              *a12 = v22;
              return v20;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          v20 = 4294966996;
          if (HIDWORD(v31))
          {
            if (msg.msgh_remote_port)
              v20 = 4294966996;
            else
              v20 = HIDWORD(v31);
          }
        }
        else
        {
          v20 = 4294966996;
        }
      }
      else
      {
        v20 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v20;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v20;
}

uint64_t sub_1000634D8(mach_port_t a1, unsigned int a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  mach_port_t reply_port;
  uint64_t v9;
  uint64_t v10;
  mach_msg_header_t msg;
  NDR_record_t v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = a3[5];
  v19 = a3[4];
  v20 = v4;
  v5 = a3[7];
  v21 = a3[6];
  v22 = v5;
  v6 = a3[1];
  v15 = *a3;
  v16 = v6;
  v7 = a3[3];
  v17 = a3[2];
  v13 = NDR_record;
  v14 = a2;
  v18 = v7;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B100000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v9 = mach_msg(&msg, 3, 0xA4u, 0x2Cu, reply_port, 0, 0);
  v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v10;
  }
  if ((_DWORD)v9)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v10;
  }
  if (msg.msgh_id == 71)
  {
    v10 = 4294966988;
LABEL_17:
    mach_msg_destroy(&msg);
    return v10;
  }
  if (msg.msgh_id != 1301)
  {
    v10 = 4294966995;
    goto LABEL_17;
  }
  v10 = 4294966996;
  if ((msg.msgh_bits & 0x80000000) != 0)
    goto LABEL_17;
  if (msg.msgh_size != 36)
    goto LABEL_17;
  if (msg.msgh_remote_port)
    goto LABEL_17;
  v10 = v14;
  if (v14)
    goto LABEL_17;
  return v10;
}

uint64_t sub_100063664(mach_port_t a1, int a2, int a3, int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, _QWORD *a9, _DWORD *a10)
{
  mach_port_t reply_port;
  uint64_t v13;
  uint64_t v14;
  int v15;
  mach_msg_header_t msg;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  NDR_record_t v22;
  _BYTE v23[28];
  int v24;

  v18 = 1;
  v19 = a6;
  v20 = 16777472;
  v21 = a7;
  v22 = NDR_record;
  *(_DWORD *)v23 = a2;
  *(_DWORD *)&v23[4] = a3;
  *(_DWORD *)&v23[8] = a4;
  *(_OWORD *)&v23[12] = *a5;
  v24 = a7;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B200000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v13 = mach_msg(&msg, 3, 0x54u, 0x50u, reply_port, 0, 0);
  v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!(_DWORD)v13)
    {
      if (msg.msgh_id == 71)
      {
        v14 = 4294966988;
      }
      else if (msg.msgh_id == 1302)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          v14 = 4294966996;
          if (v18 == 1 && msg.msgh_size == 72 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
          {
            v15 = v21;
            if (v21 == *(_DWORD *)&v23[16])
            {
              v14 = 0;
              *a8 = *(_OWORD *)v23;
              *a9 = v19;
              *a10 = v15;
              return v14;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          v14 = 4294966996;
          if (HIDWORD(v19))
          {
            if (msg.msgh_remote_port)
              v14 = 4294966996;
            else
              v14 = HIDWORD(v19);
          }
        }
        else
        {
          v14 = 4294966996;
        }
      }
      else
      {
        v14 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v14;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v14;
}

uint64_t sub_100063850(mach_port_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_t reply_port;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v15;
  int v16;
  mach_msg_header_t msg;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B300000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v11 = mach_msg(&msg, 3, 0x18u, 0x3Cu, reply_port, 0, 0);
  v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v11)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v12;
    }
    if (msg.msgh_id == 71)
    {
      v12 = 4294966988;
    }
    else if (msg.msgh_id == 1303)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 52)
        {
          if (!msg.msgh_remote_port)
          {
            v12 = v18;
            if (!v18)
            {
              v15 = v20;
              *a2 = v19;
              *a3 = v15;
              v16 = v22;
              *a4 = v21;
              *a5 = v16;
              return v12;
            }
            goto LABEL_23;
          }
        }
        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port)
            v13 = 1;
          else
            v13 = v18 == 0;
          if (v13)
            v12 = 4294966996;
          else
            v12 = v18;
          goto LABEL_23;
        }
      }
      v12 = 4294966996;
    }
    else
    {
      v12 = 4294966995;
    }
LABEL_23:
    mach_msg_destroy(&msg);
    return v12;
  }
  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

uint64_t sub_1000639C8(uint64_t result)
{
  uint64_t v1;
  __int16 v2;
  int v3;
  int v4;

  v1 = *(_QWORD *)result;
  v2 = *(_DWORD *)(result + 8) ^ (-2705 * ((2 * (result & 0xE860) - result + 6047) ^ 0x5EC6));
  *(_DWORD *)(v1 - 0x73F39308AC2F35EFLL) = (((2 * (v2 & 0x1FF ^ 0x1AA)) & 0x142) - (v2 & 0x1FF ^ 0x1AA) + 11584862) & 0x8007FF ^ 0x16011234;
  *(_QWORD *)(v1 - 0x73F39308AC2F360FLL) = 0x52C4D95D9C42F88;
  *(_DWORD *)(v1 - 0x73F39308AC2F35F3) = 1763403438;
  v3 = v2 ^ 0xCE;
  if (v3 == 1)
  {
    v4 = 1763403454;
    goto LABEL_5;
  }
  if (v3 == 2)
  {
    *(_DWORD *)(v1 - 0x73F39308AC2F35F7) = -1563766843;
    v4 = 1763403458;
LABEL_5:
    *(_QWORD *)(v1 - 0x73F39308AC2F3607) = 0x8ED585BC065D0D34;
    *(_QWORD *)(v1 - 0x73F39308AC2F35FFLL) = 0x712A7A43F9A2F2CBLL;
    *(_DWORD *)(v1 - 0x73F39308AC2F35F3) = v4;
  }
  *(_DWORD *)(result + 16) = -1995200407;
  return result;
}

void sub_100063B38(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  _BOOL4 v4;
  _BOOL4 v5;

  v1 = 460628867 * ((a1 & 0x73B15F3F | ~(a1 | 0x73B15F3F)) ^ 0xC0D822BD);
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 32) - 0x4B0C828AC4754609) + 593867242;
  v3 = *(_DWORD *)(a1 + 8) - v1 + 2066776853;
  v4 = v2 < 0x7F917812;
  v5 = v2 > v3;
  if (v3 < 0x7F917812 != v4)
    v5 = v4;
  __asm { BR              X10 }
}

uint64_t sub_100063C1C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((2029
                                          * (((*(unsigned __int8 *)(*(_QWORD *)(a1 + 16)
                                                                  + (v2 - 1546372649))
                                             - ((19 * (v3 ^ 0x123) - 1280) & (2
                                                                            * *(unsigned __int8 *)(*(_QWORD *)(a1 + 16)
                                                                                                 + (v2 - 1546372649))))
                                             - 324345622) & 0x1F) != 21)) ^ v3))
                            - 8))();
}

uint64_t sub_100063C84(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  int v4;
  _BOOL4 v5;

  v5 = v4 - 338464996 > (v2 + 1134444614);
  if ((v2 + 1134444614) < 0x47FF3543 != (v4 - 338464996) < 0x47FF3543)
    v5 = (v4 - 338464996) < 0x47FF3543;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((a2 + 28 * (a2 ^ 0x6D0) - 1828) * v5) ^ a2)) - 12))();
}

uint64_t sub_100063CFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;

  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v2
                                                              + 8
                                                              * ((1355
                                                                * (*(unsigned __int8 *)(v1 + (v3 + 1)) >> 7)) ^ v4))
                                                  - ((v4 - 38) | 0x135u)
                                                  + 375))(a1, ((v4 + 245) | 0x1A)+ (*(unsigned __int8 *)(v1 + (v3 + 1)) ^ 0xDBFFFFFF)+ 2 * *(unsigned __int8 *)(v1 + (v3 + 1))+ 2132670944);
}

uint64_t sub_100063D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  int v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((217
                                          * (((((a5 - 367) | 0x7AA) - 1851) & (v6 + 1) ^ 0xEFFBBBCC)
                                           + ((2 * (v6 + 1)) & 0x98)
                                           + 268715059 < 4)) ^ a5))
                            - 8))();
}

uint64_t sub_100063DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _BOOL4 v13;
  _BOOL4 v14;

  v12 = a8 + v10 + ((v11 - 1866) ^ 0x45ACC392);
  v13 = v12 < 0x91D445D5;
  v14 = v12 > v8 - 1921822504;
  if ((v8 - 1921822504) < 0x91D445D5 != v13)
    v14 = v13;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((87 * !v14) ^ v11)) - (v11 - 1595) + 379))();
}

uint64_t sub_100063E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v13 = *(unsigned __int8 *)(v8 + (v11 + v10 + 2));
  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v9
                                                              + 8
                                                              * ((236 * (a8 + 2138959159 != v12 + 1870243988)) ^ v12))
                                                  - 8))(a1, (v13 ^ 0xFFDFFB5E) + 1530789888 + ((v12 + 76) & (2 * v13)));
}

uint64_t sub_100063EC0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  v11 = *(unsigned __int8 *)(v7 + v10 + ((a7 - 1017) ^ a5)) | (a2 << 8);
  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v8 + 8 * ((857 * (v9 - 1 == a6 + 383)) ^ a7)) - 8))(a1, ((v11 - 503012864) ^ 0x7B9DFFDE) - 545260672 + ((2 * (v11 - 503012864)) & 0xF73BFFBC));
}

uint64_t sub_100063F34(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  _BOOL4 v11;

  v8 = a2 + v5 + v7 + v6 - 434754007 - 228315178;
  v9 = v3 + 2069816915;
  v10 = (v9 < 0x7FBFDB50) ^ (v8 < 0x7FBFDB50);
  v11 = v8 > v9;
  if (v10)
    v11 = v8 < 0x7FBFDB50;
  return (*(uint64_t (**)(void))(v4 + 8 * ((52 * !v11) ^ (a3 + 1428))))();
}

uint64_t *sub_100063FB4@<X0>(uint64_t *result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = result[5];
  v7 = result[6];
  v9 = *result;
  *a3 = v5 - 825222481;
  *(_DWORD *)(v9 - 0x69B379730EA9D302) = v4;
  *(_DWORD *)(v8 - 0x20685CAF9A69C67) = a2;
  *(_QWORD *)(v7 - 0x2DA3ABA5EF040A99) = v3 + (v6 - 842903580);
  *((_DWORD *)result + 6) = 489733862;
  return result;
}

void sub_100064030(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 ^ (69008221 * ((-2 - ((a1 | 0xFC1C80D3) + (~(_DWORD)a1 | 0x3E37F2C))) ^ 0xD0412D26));
  __asm { BR              X9 }
}

uint64_t sub_1000640EC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((782
                                * ((*(_DWORD *)(v2 - 0x56428495FB6297ELL) & 1) != ((12 * (((a1 - 1407) | 0x409) ^ 0x45C)) ^ 0x3E4))) ^ a1)))();
}

uint64_t sub_100064144(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v2
                                                              + 8
                                                              * (((*(_DWORD *)(v3 - 0x56428495FB62986) != 718622751)
                                                                * (((v1 ^ 0x497) + 568) ^ 0x180)) | v1))
                                                  - 8))(a1, *(_QWORD *)(v3 - 0x56428495FB62992));
}

uint64_t sub_1000641AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v13 = ((unint64_t)&a10 ^ 0x5DF26BFFCFF7FEF7)
      - 0x45400A2108A035F7
      + ((2 * (_QWORD)&a10) & 0xBBE4D7FF9FEFFDE0);
  a10 = v11 - 1;
  *(_BYTE *)(a2 + a10) = (v13 ^ 0xBA) * (v13 + 17);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v12 + 8
                                                                     * (((a10 == 0) * ((v10 - 568) ^ 0x116)) ^ v10))
                                                   - 4))(a1, a2);
}

void sub_100064238()
{
  JUMPOUT(0x100064200);
}

void sub_100064240()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 16) = 1105293997;
}

void sub_100064378(uint64_t a1)
{
  int v1;

  v1 = 831981571 * ((((2 * a1) | 0xACFEB304) - a1 + 696297086) ^ 0x4FDE89A6);
  __asm { BR              X10 }
}

uint64_t sub_100064410@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * (((v1 - 429) * (v2 != 10207770)) ^ (v1 - 1016)))
                            - (v1 - 735)
                            + 859))();
}

uint64_t sub_100064460@<X0>(uint64_t a1@<X8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((v1 - 2014397009) & 0x7811439F)) - 4))();
}

uint64_t sub_100064578@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(a2 + 8 * (((v5 == ((v4 + 1094) ^ (v2 + 991))) * a1) ^ v4 ^ v3)) - 4))();
}

uint64_t sub_1000645A8@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((4086 * (v1 == v2 - 2019)) ^ v2))
                            - (v2 - 1148)
                            + 867))();
}

uint64_t sub_1000645D4@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v6 = (v5 - 1697) | 0x225;
  v7 = v2 + v3;
  v8 = (v6 ^ 0x366) + v3;
  *(_DWORD *)(*(_QWORD *)(v4 - 0x2DB44D49A49B0026) + 4 * (v7 + 1)) = a1;
  *(_DWORD *)(v4 - 0x2DB44D49A49B002ALL) = v8;
  if (v2 + v8 + 1 >= 0)
    v9 = v2 + v8 + 1;
  else
    v9 = ~(v2 + v8);
  return ((uint64_t (*)(void))(*(_QWORD *)(a2
                                        + 8
                                        * ((((int)((v9 ^ 0x2E6E57CB)
                                                 + ((2 * v9) & 0x5CDCAF96)
                                                 + ((v6 + 411) ^ 0xDFBFBBFF)
                                                 + v2) > v6 - 872)
                                          * ((67 * ((v6 + 411) ^ 0x50F)) ^ 0x36B)) ^ (v6 + 411)))
                            - 4))();
}

uint64_t sub_1000646B8@<X0>(uint64_t a1@<X8>)
{
  int v1;
  _QWORD *v2;
  int v3;
  unsigned int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((1637 * (*(_DWORD *)(*v2 + 4 * v4) != v1)) ^ v3))
                            - ((((v3 - 1244306553) & 0x4A2A9F57) - 320) ^ v3 ^ 0x665u)))();
}

uint64_t sub_100064704@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * (((v2 - 1 + v1 > v3 - 1283) * ((67 * (v3 ^ 0x50F)) ^ 0x36B)) ^ v3))
                            - 4))();
}

uint64_t sub_100064744(uint64_t result)
{
  int v1;
  int v2;
  _DWORD *v3;
  int v4;
  int v5;

  if ((v2 + v1) >= 0x7FFFFFFF)
    v5 = 475803024 - v4;
  else
    v5 = v4;
  *v3 = v5;
  *(_DWORD *)(result + 24) = -2096774443;
  return result;
}

void sub_10006478C(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  _BOOL4 v5;

  v1 = 1543737703 * ((1016161312 - (a1 | 0x3C916420) + (a1 | 0xC36E9BDF)) ^ 0xBD9ACBA3);
  v2 = *a1 + v1;
  v3 = a1[2] ^ v1;
  v5 = (~v3 & 0x30000000) == 0 || (v3 & 0x3F000000) == 385875968;
  __asm { BR              X11 }
}

uint64_t sub_10006486C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, int a4, unint64_t *a5, char a6, int a7, int a8, unint64_t *a9, unint64_t *a10, uint64_t a11)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v15 = *(_QWORD *)(v12 + 16);
  v16 = 1224239923 * ((~&a4 & 0xAE13C0ED | &a4 & 0x51EC3F12) ^ 0x5CA03D3A);
  a6 = (51 * ((~&a4 & 0xED | &a4 & 0x12) ^ 0x3A)) ^ 0xE2;
  a5 = &STACK[0x1ED5BB0BF3801E93];
  a7 = v16 - 1882357696 + v14;
  a10 = &STACK[0x738D742E56AF1747];
  a11 = v15;
  a9 = &STACK[0x5E2EA96BD122BBF5];
  a4 = ((v11 ^ 0x6DD6009D) - 805784082 + ((v11 << (v14 + 25)) & 0x777FF764 ^ 0x2453F644)) ^ v16;
  v17 = ((uint64_t (*)(int *))(*(_QWORD *)(a1 + 8 * (v14 ^ 0x80)) - 12))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v13 + 8 * ((2248 * (a8 == 489733862)) ^ v14)) - 12))(v17);
}

uint64_t sub_1000649A8()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8 * (((114 * ((v1 + 716) ^ 0x3BF) - 1161) * (v2 != 385875968)) ^ (v1 + 716)))
                            - 8))();
}

uint64_t sub_1000649E0@<X0>(uint64_t a1@<X0>, int a2@<W8>, unint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(v3 + 8
                                                 * (((a3 + 4 >= a3) * (((a2 ^ 0x20F) + 838) ^ 0x507)) ^ a2 ^ 0x20F)))(a1);
}

uint64_t sub_100064A68()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (v0 ^ ((8 * (v1 == 0xB7E41E8B)) | (32 * (v1 == 0xB7E41E8B)))))
                            - 12))();
}

uint64_t sub_100064ABC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  _BOOL4 v10;

  *(_BYTE *)(a1 + (v6 - 1025154504)) = *(_BYTE *)(v1 + (v6 - 1025154504));
  v8 = v6 + 680150421;
  v9 = (v4 > 0x9A5B1CA3) ^ (v8 < v3 + 1254);
  v10 = v8 < v5;
  if (v9)
    v10 = v4 > 0x9A5B1CA3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((8 * !v10) | (32 * !v10) | v2)) - 12))();
}

uint64_t sub_100064B44()
{
  unsigned int v0;
  int v1;
  uint64_t v2;
  _BOOL4 v3;

  v3 = ((2 * v1) & 0xAF69D532 ^ 0x2F481512) + (v1 ^ 0xE050F412) - 59829502 + ((v0 - 728) ^ 0x92) != 1411646081;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((4 * v3) | (16 * v3)) ^ v0)) - 4))();
}

uint64_t sub_100064BB0()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((246 * (v1 - 1471474329 >= (((((2 * v0) ^ 0x800) + 24) | 0x8A) ^ 0x186u))) ^ v0))
                            - 4))();
}

uint64_t sub_100064C08(int a1, int a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((45
                                          * (((a1 + v5 + a4 - (((a2 - 274433698) & 0x105B85FF ^ 0xEB) & v4)) & 0xFFFFFFFC) <= a1 + v5 + a4 + 3)) ^ a2))
                            - ((a2 + 2014150131) & 0x87F285C3)
                            + 1333))();
}

uint64_t sub_100064C84@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>, uint8x8_t a3@<D0>)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  a3.i32[0] = *(_DWORD *)(a2 + a1 + 1);
  *(_DWORD *)(a2 - 3 + v5 + (v4 ^ 0x6A8 ^ (v3 + 281))) = vmovn_s16((int16x8_t)vmovl_u8(a3)).u32[0];
  return (*(uint64_t (**)(void))(v7 + 8 * ((591 * (v6 == 4)) ^ v4)))();
}

uint64_t sub_100064CDC@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_DWORD *)(a2 - 3 + (v4 + v3)) = *(_DWORD *)(v2 - 3 + (v4 + v3));
  return (*(uint64_t (**)(void))(v6 + 8 * ((1429 * (a1 - 228 == v5)) ^ (a1 + 435))))();
}

uint64_t sub_100064D20(int a1, unsigned int a2, int a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(v7 + (v5 - a3)) = *(_DWORD *)(v4 + (v5 - a3));
  return (*(uint64_t (**)(void))(v8 + 8 * (((a1 + a3 - 997 == v6) * a4) ^ a2)))();
}

uint64_t sub_100064D4C(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (a1 ^ (2002 * (v1 != v2))))
                            - (a1 - 769)
                            - ((a1 + 253) ^ 0xFFFFFFFFFFFFFBC6)))();
}

uint64_t sub_100064D80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_BYTE *)(a1 + (v4 + v3)) = *(_BYTE *)(v1 + (v4 + v3));
  return (*(uint64_t (**)(void))(v6 + 8 * ((734 * (v4 - 1 == ((38 * (v5 ^ 0xC9)) ^ (v2 + 998)))) ^ (v5 + 1086))))();
}

uint64_t sub_100064DC8()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)(((*(_QWORD *)(v1 + 24) == 0x1BEDD35B3BD10D1ALL) * (v0 - 1227)) ^ v0))
                            - (v0 ^ 0x4E2)))();
}

uint64_t sub_100064E0C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((2015 * (*(_QWORD *)(v1 + 32) != 0x2BB8ED8829EF03C6)) ^ v0))
                            - 12))();
}

uint64_t sub_100064E48@<X0>(uint64_t a1@<X8>, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(a1 - 0x1BEDD35B3BD10D1ALL) = a3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((2015 * (*(_QWORD *)(v4 + 32) != 0x2BB8ED8829EF03C6)) ^ ((v3 - 1182) | 0xA0)))
                            - 12))();
}

void sub_100064EAC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 - 0x2BB8ED8829EF03C6) = v2;
  *(_DWORD *)(v1 + 4) = 489733862;
}

uint64_t sub_100064F04(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;

  v1 = 235795823 * ((2 * (a1 & 0x125A82D6) - a1 - 307921623) ^ 0x79083470);
  v2 = *(_DWORD *)(a1 + 16) + v1;
  v3 = *(_DWORD *)(a1 + 4) - v1;
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x2DB44D49A49B002ALL);
  v6 = v4 - 237901512;
  v5 = v4 - 237901512 < 0;
  v7 = 237901512 - v4;
  if (!v5)
    v7 = v6;
  return (*(uint64_t (**)(void))((char *)*(&off_10025FA20 + (v2 ^ 0x1AA))
                              + 8 * ((1031 * ((v3 - 1066701861) >= 4 * (unint64_t)v7)) ^ v2)
                              - 4))();
}

uint64_t sub_100064FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4
                                                                       + 8
                                                                       * (((v5 ^ 0x5A0) * (v3 != 1066701861)) ^ v5)))(a1, a2, a3, 252595185);
}

uint64_t sub_100064FFC(uint64_t a1)
{
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1
                                                               + 8
                                                               * ((722 * (((((v2 ^ 0x3A) - 258) | 0x102) ^ 0x1FA) == 32)) ^ ((v2 ^ 0x3A) + 671)))
                                                   - 8))(a1, 296133326);
}

uint64_t sub_100065088@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W4>, int a4@<W5>, int a5@<W8>)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  char v8;

  *(_BYTE *)(*(_QWORD *)(a1 + 24) + (a4 + a5)) = (a3 ^ v7) >> v8;
  return (*(uint64_t (**)(void))(v5 + 8 * (int)(((((a2 + 319885844) & 0xECEEEDF1) - 422) * (a4 - 1 == v6)) ^ a2)))();
}

uint64_t sub_1000650DC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((722
                                          * (v4 + ((229 * (a3 ^ 0x1DF)) ^ 0x471) == (((229 * (a3 ^ 0x1DF) - 929) | 0x102) ^ 0x1FA))) ^ (229 * (a3 ^ 0x1DF))))
                            - 8))();
}

uint64_t sub_100065130(uint64_t a1, int a2, uint64_t a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  _BOOL4 v8;

  v8 = v4 > v7;
  if (v8 == a2 + 978207733 < (int)((a4 - 654287482) & 0x26FF9FDA ^ 0xCBF4E719))
    v8 = a2 + 978207733 < v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((228 * v8) ^ a4)) - 8))();
}

uint64_t sub_1000651AC@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W3>, int a4@<W8>)
{
  int v4;
  _QWORD *v5;

  return sub_100065088(a1, (a3 + 1744282466) & 0x980859FE, *(_DWORD *)(*v5 + 4 * (a2 - 296133326)), v4, a4);
}

_DWORD *sub_1000651F0(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  *result = a4;
  return result;
}

void sub_1000651F8(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;

  v1 = *(_DWORD *)(a1 + 4) + 1224239923 * ((2 * (a1 & 0x188FD632) - a1 - 412079667) ^ 0x15C3D41A);
  v2 = *(_QWORD *)(a1 + 8);
  v5 = v1 - 460628867 * (((&v3 | 0xA020558C) - (&v3 & 0xA020558C)) ^ 0xECB6D7F1) + 491;
  v3 = v2;
  sub_100065360((uint64_t)&v3);
  __asm { BR              X8 }
}

void sub_1000652F4()
{
  _DWORD *v0;
  int v1;
  uint64_t v2;
  int v3;

  if ((*(_DWORD *)(v2 - 0x2DB44D49A49B002ALL) - 237901513) >= 0x7FFFFFFF)
    v3 = v1;
  else
    v3 = v1 + 2;
  *v0 = v3;
}

uint64_t sub_100065360(uint64_t a1)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;
  int v5;

  v2 = *(_DWORD *)(*(_QWORD *)a1 - 0x2DB44D49A49B002ALL);
  v4 = v2 - 237901512;
  v3 = v2 - 237901512 < 0;
  v5 = 237901512 - v2;
  if (!v3)
    v5 = v4;
  v1 = *(_DWORD *)(a1 + 12) + 460628867 * ((((2 * a1) | 0x5510E07A) - a1 - 713584701) ^ 0x661EF240);
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_10025FA20 + v1 - 1118)
                                        + 8
                                        * ((855
                                          * ((v5 ^ (v1 + 1341514263)) - 1341515456 + ((2 * v5) & 0x9FEBCD7E) < 0x7FFFFFFF)) ^ (v1 - 27))
                                        - 4)
                            - ((v1 - 1024) | 0x400u)
                            + 1184))();
}

uint64_t sub_100065480(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  _QWORD *v4;
  unsigned int v5;
  int v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * (((*(_DWORD *)(*v4 + 4 * v5) == v6) * a2) ^ v3)) - 8))();
}

void sub_1000654AC()
{
  JUMPOUT(0x100065454);
}

uint64_t sub_1000654B4(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(result + 8) = a4;
  return result;
}

void sub_1000654BC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X8 }
}

uint64_t sub_100065544(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((778 * (**(_BYTE **)(a2 + 8) == 0)) | 0xE1u)) - 8))();
}

uint64_t sub_100065570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  *(_QWORD *)(*(_QWORD *)(a16 + 96) + 504) = v18 + 1;
  *(_DWORD *)(*(_QWORD *)(a16 + 96) + 496) = a18 - 1;
  v21 = 235795823 * ((((v20 - 160) | 0x8A773861) - (v20 - 160) + ((v20 - 160) & 0x7588C798)) ^ 0x1EDA7138);
  *(_DWORD *)(v20 - 152) = v21 ^ 0xFE0643CC;
  *(_DWORD *)(v20 - 148) = v21 + 426523017;
  *(_QWORD *)(v20 - 160) = &STACK[0x73F39308AC2F38FB];
  v22 = sub_1000639C8(v20 - 160);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19
                                                      + 8
                                                      * ((397
                                                        * (a18
                                                         + 753591412
                                                         + ((2 * LODWORD(STACK[0x2F0])) & 0x5A ^ 0xA)
                                                         + (STACK[0x2F0] & 0x3F ^ 0x77F71FF8u) < 0xFFFFFFC0)) ^ 0x671u))
                                          - 4))(v22);
}

uint64_t sub_10006575C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;

  v13 = v7 - 2012684268;
  if (v13 <= 0x40)
    v13 = 64;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11
                                        + 8
                                        * (((v12 + ((v9 - 516407938) & 0x1EC7BCBE) - 695561770 + 864)
                                          * (a7 - v8 - v10 + v13 > 0xE)) ^ (v9 - 1426)))
                            - 12))();
}

uint64_t sub_1000657FC(unsigned int a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;

  v14 = v10 + v8;
  v15 = v9 + ((a1 - 750823119) & 0x2CC0A6FF) + v14 + 143;
  if (v15 <= 0x40)
    v15 = a3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v13 + 8 * ((113 * (a7 - v14 < v12 + v11 + (v7 ^ 0xA17D8D68) + v15)) ^ a1))
                            - 12))();
}

uint64_t sub_100065868(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  int v19;
  uint64_t v20;

  return ((uint64_t (*)(void))(*(_QWORD *)(v20
                                        + 8
                                        * ((782
                                          * ((unint64_t)&STACK[0x2AC]
                                           + 73 * (((a2 - 1844936415) | 0x44821084) ^ (a6 - 3))
                                           + ~a18
                                           + v18
                                           + v19 > 0xF)) ^ a2))
                            - 12))();
}

uint64_t sub_1000658CC@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int8x16_t *v6;
  int8x16_t v7;
  int8x16_t v8;

  v7.i64[0] = 0xFCFCFCFCFCFCFCFCLL;
  v7.i64[1] = 0xFCFCFCFCFCFCFCFCLL;
  v8.i64[0] = 0xFEFEFEFEFEFEFEFELL;
  v8.i64[1] = 0xFEFEFEFEFEFEFEFELL;
  *(int8x16_t *)(v3 + (a1 + v1)) = vaddq_s8(vsubq_s8(*v6, vandq_s8(vaddq_s8(*v6, *v6), v7)), v8);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v5
                                                      + 8
                                                      * ((56
                                                        * (((v4 + 114) ^ ((((v4 - 24)
                                                                                           + 0x1FFFFFE9BLL) & (v2 + 1)) == 16)) & 1)) ^ (v4 - 24)))
                                          - 4))((((v4 - 24) + 0x1FFFFFE9BLL) & (v2 + 1)) - 16);
}

void sub_100065948()
{
  JUMPOUT(0x100065904);
}

uint64_t sub_100065950@<X0>(int a1@<W5>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8 * (((((a2 - 2046165211) | 0x50809280) ^ (a1 + 161)) * (v2 == v3)) ^ a2))
                            - 3 * (a2 ^ 0xC2u)
                            + 75))();
}

uint64_t sub_1000659A8@<X0>(int a1@<W4>, int a2@<W8>)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  *((_BYTE *)&STACK[0x2AC] + (a2 + v2)) = *(_BYTE *)(v3 + v6 - 1856274308)
                                                      - ((2 * *(_BYTE *)(v3 + v6 - 1856274308)) & 0xFC)
                                                      - 2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((1893 * ((a1 + a2 + 1) < 0x40)) ^ (v7 + v4 + 374)))
                            - 12))();
}

uint64_t sub_100065A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int32x4_t a35,int32x4_t a36,int32x4_t a37,int32x4_t a38)
{
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t (*v47)(__n128, __n128, __n128, __n128, __n128);
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint8x16_t v61;
  uint16x8_t v62;
  int8x16_t v63;
  int8x16_t v64;
  uint16x8_t v65;
  int8x16_t v66;
  int8x16_t v67;
  uint8x16_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint8x16_t v71;
  int8x16_t v74;
  int8x16_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  uint64_t v85;
  uint8x16_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  uint8x16_t v89;
  uint8x16_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  _DWORD *v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t (*v111)(__n128, __n128, __n128, __n128, __n128);
  int8x16x4_t v112;
  int8x16x4_t v113;

  v47 = *(uint64_t (**)(__n128, __n128, __n128, __n128, __n128))(v43 + 8 * v38);
  HIDWORD(v109) = HIDWORD(a17) + 545758092;
  LODWORD(v109) = (v38 ^ 0x38E) + 2074448658;
  v48.n128_u64[0] = 0xFEFEFEFEFEFEFEFELL;
  v48.n128_u64[1] = 0xFEFEFEFEFEFEFEFELL;
  v49 = (__n128)vdupq_n_s32(0x1D30BEEEu);
  v50 = (__n128)vdupq_n_s32(0x1D30BEE6u);
  a28 = v45 - 16;
  HIDWORD(a27) = 18360423;
  v51 = (__n128)vdupq_n_s32(0x1D30BEFFu);
  v52.n128_u64[0] = 0xFCFCFCFCFCFCFCFCLL;
  v52.n128_u64[1] = 0xFCFCFCFCFCFCFCFCLL;
  LODWORD(v108) = 1915;
  v53 = STACK[0x2F4];
  v54 = STACK[0x2F8];
  v55 = LODWORD(STACK[0x2F8]);
  v56 = STACK[0x2FC];
  v57 = STACK[0x300];
  v58 = LODWORD(STACK[0x2FC]);
  v59 = LODWORD(STACK[0x300]);
  HIDWORD(v108) = LOBYTE(STACK[0x30C]) ^ 0xE;
  v60 = LOBYTE(STACK[0x30C]) ^ 0xE;
  if (v60 == 2)
  {
    v110 = __PAIR64__(v57, v56);
    v111 = v47;
    v113 = vld4q_s8((const char *)&STACK[0x2AC]);
    v85 = LODWORD(STACK[0x304]);
    HIDWORD(a20) = STACK[0x304];
    v86 = (uint8x16_t)veorq_s8(v113.val[0], (int8x16_t)v48);
    v87 = vmovl_u8(*(uint8x8_t *)v86.i8);
    v88 = vmovl_high_u8(v86);
    v89 = (uint8x16_t)veorq_s8(v113.val[1], (int8x16_t)v48);
    _Q22 = vmovl_u8(*(uint8x8_t *)v89.i8);
    _Q21 = vmovl_high_u8(v89);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }
    v94 = (uint8x16_t)veorq_s8(v113.val[2], (int8x16_t)v48);
    v95 = vmovl_high_u8(v94);
    v96 = vmovl_u8(*(uint8x8_t *)v94.i8);
    v113.val[0] = veorq_s8(v113.val[3], (int8x16_t)v48);
    v113.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v113.val[0]);
    v113.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v113.val[1]);
    v113.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v113.val[1].i8);
    v113.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v113.val[0].i8);
    v113.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v113.val[0]);
    v113.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v113.val[0].i8);
    v97 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v96.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v87.i8), 0x18uLL)), v113.val[0]);
    v98 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v96, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v87), 0x18uLL)), v113.val[3]);
    v99 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v95.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v88.i8), 0x18uLL)), v113.val[1]);
    v100 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v95, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v88), 0x18uLL)), v113.val[2]);
    v113.val[0] = veorq_s8(vandq_s8((int8x16_t)v97, (int8x16_t)v49), (int8x16_t)(*(_OWORD *)v113.val & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    v113.val[3] = veorq_s8(vandq_s8((int8x16_t)v98, (int8x16_t)v49), (int8x16_t)(*(_OWORD *)&v113.val[3] & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    v113.val[1] = veorq_s8(vandq_s8((int8x16_t)v99, (int8x16_t)v49), (int8x16_t)(*(_OWORD *)&v113.val[1] & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    v113.val[2] = veorq_s8(vandq_s8((int8x16_t)v100, (int8x16_t)v49), (int8x16_t)(*(_OWORD *)&v113.val[2] & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    a37 = vaddq_s32(vsubq_s32(v99, vaddq_s32((int32x4_t)v113.val[1], (int32x4_t)v113.val[1])), (int32x4_t)v50);
    a38 = vaddq_s32(vsubq_s32(v100, vaddq_s32((int32x4_t)v113.val[2], (int32x4_t)v113.val[2])), (int32x4_t)v50);
    a35 = vaddq_s32(vsubq_s32(v97, vaddq_s32((int32x4_t)v113.val[0], (int32x4_t)v113.val[0])), (int32x4_t)v50);
    a36 = vaddq_s32(vsubq_s32(v98, vaddq_s32((int32x4_t)v113.val[3], (int32x4_t)v113.val[3])), (int32x4_t)v50);
    v101 = (_DWORD *)&a35 + v40 + 248599762;
    v102 = *((_DWORD *)&a35 + v40 + 248599754) ^ *(v101 - 3);
    v103 = *(v101 - 16);
    v104 = v103 ^ *(v101 - 14) ^ (v102 + v42 - ((2 * v102) & 0x3A617DCC));
    HIDWORD(v106) = v104 ^ v42;
    LODWORD(v106) = v104;
    v105 = v106 >> 31;
    v107 = (2 * v105) & 0x3A617DCC;
    *v101 = v105 + v42 - v107;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(__n128, __n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 + 8 * ((4 * (v45 != 248599699)) | 0x70B)) - 12))(v85, 1667, 979467724, v59, v55, v107, v103, v58, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, v39,
             a20,
             v108,
             0x5F7B7BFF0D0117A7,
             v109,
             __PAIR64__(v54, v53),
             v110,
             v111,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34);
  }
  else if (v60 == 1)
  {
    v112 = vld4q_s8((const char *)&STACK[0x2AC]);
    v61 = (uint8x16_t)veorq_s8(v112.val[0], (int8x16_t)v48);
    v62 = vmovl_u8(*(uint8x8_t *)v61.i8);
    v63 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v62.i8);
    v64 = (int8x16_t)vmovl_high_u16(v62);
    v65 = vmovl_high_u8(v61);
    v66 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v65.i8);
    v67 = (int8x16_t)vmovl_high_u16(v65);
    v68 = (uint8x16_t)veorq_s8(v112.val[1], (int8x16_t)v48);
    v69 = vmovl_high_u8(v68);
    v70 = vmovl_u8(*(uint8x8_t *)v68.i8);
    v71 = (uint8x16_t)veorq_s8(v112.val[2], (int8x16_t)v48);
    _Q26 = (int8x16_t)vmovl_high_u8(v71);
    _Q25 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v71.i8);
    v74 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q25.i8, 0x10uLL);
    __asm { SHLL2           V25.4S, V25.8H, #0x10 }
    v79 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q26.i8, 0x10uLL);
    __asm { SHLL2           V26.4S, V26.8H, #0x10 }
    v112.val[0] = veorq_s8(v112.val[3], (int8x16_t)v48);
    v112.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v112.val[0]);
    v112.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v112.val[1]);
    v112.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v112.val[0].i8);
    v112.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v112.val[0]);
    v112.val[0] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v112.val[0].i8), 0x18uLL), v74), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v70.i8, 8uLL), v63));
    v112.val[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v112.val[3], 0x18uLL), _Q25), vorrq_s8((int8x16_t)vshll_high_n_u16(v70, 8uLL), v64));
    v112.val[1] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v112.val[1].i8), 0x18uLL), v79), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v69.i8, 8uLL), v66));
    v112.val[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v112.val[2], 0x18uLL), _Q26), vorrq_s8((int8x16_t)vshll_high_n_u16(v69, 8uLL), v67));
    v80 = (int32x4_t)veorq_s8(vandq_s8(v112.val[0], (int8x16_t)v51), (int8x16_t)(*(_OWORD *)&v63 & __PAIR128__(0xFFFFFF19FFFFFF19, 0xFFFFFF19FFFFFF19)));
    v81 = (int32x4_t)veorq_s8(vandq_s8(v112.val[3], (int8x16_t)v51), (int8x16_t)(*(_OWORD *)&v64 & __PAIR128__(0xFFFFFF19FFFFFF19, 0xFFFFFF19FFFFFF19)));
    v82 = (int32x4_t)veorq_s8(vandq_s8(v112.val[1], (int8x16_t)v51), (int8x16_t)(*(_OWORD *)&v66 & __PAIR128__(0xFFFFFF19FFFFFF19, 0xFFFFFF19FFFFFF19)));
    v83 = (int32x4_t)veorq_s8(vandq_s8(v112.val[2], (int8x16_t)v51), (int8x16_t)(*(_OWORD *)&v67 & __PAIR128__(0xFFFFFF19FFFFFF19, 0xFFFFFF19FFFFFF19)));
    a37 = vaddq_s32(vsubq_s32((int32x4_t)v112.val[1], vaddq_s32(v82, v82)), (int32x4_t)v50);
    a38 = vaddq_s32(vsubq_s32((int32x4_t)v112.val[2], vaddq_s32(v83, v83)), (int32x4_t)v50);
    a35 = vaddq_s32(vsubq_s32((int32x4_t)v112.val[0], vaddq_s32(v80, v80)), (int32x4_t)v50);
    a36 = vaddq_s32(vsubq_s32((int32x4_t)v112.val[3], vaddq_s32(v81, v81)), (int32x4_t)v50);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(__n128, __n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 8 * ((104 * (a28 + 1 == v45)) ^ (v46 - 695561419))))((char *)*(&off_10025FA20 + ((v46 - 695561419) ^ 0x31)) - 8, (v46 - 695561419), 3833969832, v59, v55, 248599762, v58, (v46 - 695561603) | 0xD0u, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, v39,
             a20,
             v108,
             0x5F7B7BFF0D0117A7,
             v109,
             __PAIR64__(v54, v53),
             __PAIR64__(v57, v56),
             v47,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34);
  }
  else
  {
    LODWORD(STACK[0x2F4]) = 2 * (v53 ^ v44) + v44 - (v41 & (4 * (v53 ^ v44)));
    LODWORD(STACK[0x2F8]) = (v55 ^ v44) + (v54 ^ v44) + v44 - (v41 & (2 * ((v55 ^ v44) + (v54 ^ v44))));
    LODWORD(STACK[0x2FC]) = (v58 ^ v44) + (v56 ^ v44) + v44 - (v41 & (2 * ((v58 ^ v44) + (v56 ^ v44))));
    LODWORD(STACK[0x300]) = (v59 ^ v44) + (v57 ^ v44) + v44 - (v41 & (2 * ((v59 ^ v44) + (v57 ^ v44))));
    a34 = 0;
    return v47(v48, v49, v50, v51, v52);
  }
}

uint64_t sub_1000665EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,int a22,int a23,unsigned int a24,unsigned int a25)
{
  int v25;
  uint64_t v26;
  int v27;
  _BOOL4 v28;

  if (a25 < a24 != (a22 + a19) < 0x7BA596EB)
    v28 = (a22 + a19) < 0x7BA596EB;
  else
    v28 = a22 + a19 > a25;
  return ((uint64_t (*)(void))(*(_QWORD *)(v26 + 8 * (int)((v28 * (a23 & 0xA08487FE ^ 0x3E4)) ^ (v27 + v25 + 1635)))
                            - 4))();
}

uint64_t sub_100066678(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;
  int v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * (((v9 + (a6 ^ (v7 + 891)) + 220) * (v6 + a3 + 63 >= (v6 + a3))) ^ a6))
                            - 12))();
}

uint64_t sub_1000666B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  return ((uint64_t (*)(void))(*(_QWORD *)(v21
                                        + 8
                                        * ((201
                                          * (((a6 - 122) ^ (~a18
                                                                           + v19
                                                                           - (unint64_t)(((v20 + a6 - 1915) ^ 0x47D112F8u)
                                                                                              + v18) < 0x10)) & 1)) ^ a6))
                            - 12))();
}

uint64_t sub_10006672C(int8x16_t a1, double a2, double a3, double a4, int8x16_t a5, uint64_t a6, uint64_t a7, int a8, int a9)
{
  int v9;
  int8x16_t *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  *v10 = vaddq_s8(vsubq_s8(*(int8x16_t *)(v14 + (v9 + a8)), vandq_s8(vaddq_s8(*(int8x16_t *)(v14 + (v9 + a8)), *(int8x16_t *)(v14 + (v9 + a8))), a5)), a1);
  return ((uint64_t (*)(void))(*(_QWORD *)(v13 + 8 * ((v11 - v12 + 52) ^ a9 ^ (v15 + v11 + 886))) - 8))();
}

uint64_t sub_10006678C@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  *(_BYTE *)(v4 + a2) = *(_BYTE *)(v7 + (v2 + a1))
                      - ((2 * *(_BYTE *)(v7 + (v2 + a1))) & 0xFC)
                      - 2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (((a2 == 63) * v5) ^ (v8 + v3 + 174))) - 8))();
}

uint64_t sub_1000667E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  int v18;
  int v19;
  uint64_t v20;
  _BOOL4 v21;

  v21 = v18 - 492112148 < (a18 - 164529391);
  if ((a18 - 164529391) < 0x514F7670 != (v18 - 492112148) < 0x514F7670)
    v21 = (a18 - 164529391) < 0x514F7670;
  return ((uint64_t (*)(void))(*(_QWORD *)(v20 + 8 * ((!v21 * (26 * (v19 ^ 0x3D0) + 810)) ^ v19)) - 8))();
}

uint64_t sub_100066858(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v26;

  v26 = v21 + (a1 ^ (v18 + 932));
  v22 = 831981571 * ((~((v20 - 160) | 0x33845586) + ((v20 - 160) & 0x33845586)) ^ 0x55DA7A5D);
  *(_QWORD *)(v20 - 152) = a15;
  *(_DWORD *)(v20 - 160) = (a18 + 81201159) ^ v22;
  *(_DWORD *)(v20 - 156) = v22 + a1 + 142;
  v23 = sub_10008B438(v20 - 160);
  v24 = STACK[0x2F0] & (v26 + 55);
  *((_BYTE *)&STACK[0x2AC] + (v24 ^ 0x15)) = 126;
  return (*(uint64_t (**)(uint64_t))(v19
                                            + 8
                                            * (((32 * ((v24 ^ 0x15) > 0x37)) | (((v24 ^ 0x15) > 0x37) << 6)) ^ a1)))(v23);
}

uint64_t sub_100066954()
{
  int v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((v0 == ((v1 + 204798551) & 0xF3CB05E4) - 5)
                                     * (((v1 + 2025356790) & 0x874787FF) - 1294)) ^ (v1 + 1136))))();
}

uint64_t sub_1000669A8()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  return (*(uint64_t (**)(void))(v2 + 8 * ((1022 * ((v0 ^ 0x2Au) < ((v1 - 2080208378) | 0x52880280u) + v3)) ^ v1)))();
}

uint64_t sub_1000669EC@<X0>(uint64_t a1@<X8>)
{
  int v1;
  char v2;
  int v3;
  uint64_t v4;
  int v5;

  *(unint64_t *)((char *)&STACK[0x2AC] + a1 - 499642548) = 0xFEFEFEFEFEFEFEFELL;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((((v2 & 0x38) == 8) * (v1 - v3 + 1992)) ^ (v5 + v1 + 910)))
                            - 12))();
}

uint64_t sub_100066A44(double a1)
{
  int v1;
  double *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *v2 = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((v4 == 0) * v3) ^ v1)) - 12))();
}

uint64_t sub_100066A68@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)((((v4 + ((a1 + 276986744) | 0xC6081284) + 708) ^ ((a1 - 1096) | 4)) * (v2 != v1)) ^ a1)))();
}

void sub_100066AB4()
{
  JUMPOUT(0x100065A50);
}

uint64_t sub_100066AC8@<X0>(int a1@<W2>, int a2@<W8>)
{
  unsigned int v2;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  unsigned int v10;
  int v11;
  _BOOL4 v12;

  v9 = v2 < v5;
  *((_BYTE *)&STACK[0x2AC] + (a2 - 2012419040)) = v6
                                                              + *(_BYTE *)(v8 + (v3 + a1))
                                                              - ((2 * *(_BYTE *)(v8 + (v3 + a1))) & 0xFC);
  v10 = v3 + 1 + v4;
  v11 = v9 ^ (v10 < v5);
  v12 = v10 < v2;
  if (!v11)
    v9 = v12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((2006 * !v9) ^ v6)) - 8))();
}

uint64_t sub_100066B48@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((51 * (((v1 + 1967854761) & 0xB42A5FF3) + a1 - 499644373 > 0x37)) ^ (v3 + v1 + 1107)))
                            - 4))();
}

uint64_t sub_100066B98@<X0>(unsigned int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1;
  v4 = a1 - 499642548;
  if ((unint64_t)(v4 + 1) > 0x38)
    v5 = v4 + 1;
  else
    v5 = 56;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((15 * (v5 - v3 + ((v1 - 671372154) ^ 0xCA3C4313uLL) > 7)) ^ v1))
                            - 12))();
}

uint64_t sub_100066C10()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(unint64_t *)((char *)&STACK[0x2AC] + v2 + (((v0 - 683) | 0x428u) ^ 0xFFFFFFFFE2380B24)) = 0xFEFEFEFEFEFEFEFELL;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v0 ^ (16 * ((v1 & 0xFFFFFFFFFFFFFFF8) == 8)))) - 4))();
}

uint64_t sub_100066C64(double a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)(v5 + (v3 ^ v2)) = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (v1 ^ (16 * (v4 == 0)))) - 4))();
}

uint64_t sub_100066C8C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((v4 + v2 - 695562724 + 369) * (v0 != v1)) ^ v2))
                            - ((v2 - 154208724) & 0xDFBB97EF)
                            + 3599405696))();
}

void sub_100066CE4()
{
  char v0;
  char v1;
  int v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unint64_t v11;

  v2 = LOBYTE(STACK[0x30C]) ^ 0xE;
  if (v2 == 1)
  {
    v8 = STACK[0x2F0];
    v9 = STACK[0x2EC];
    v10 = LODWORD(STACK[0x2F0]) >> 5;
    LOBYTE(STACK[0x2E4]) = -((8 * LOBYTE(STACK[0x2F0])) ^ 0xA8) - 2;
    LOBYTE(STACK[0x2E5]) = (v10 ^ 0x6C) + ((v10 << (v1 + v0 - 7)) & 0xFC ^ 0x27) - 1;
    LOBYTE(STACK[0x2E6]) = ((v8 >> 13) ^ 0x62) + ((v8 >> 12) & 0xFC ^ 0x3B) - 1;
    LOBYTE(STACK[0x2E7]) = ((v8 >> 21) ^ 0x29) - ((2 * ((v8 >> 21) ^ 0x29)) & 0xFC) - 2;
    HIDWORD(v11) = v9 ^ 8;
    LODWORD(v11) = v8;
    LOBYTE(STACK[0x2E8]) = (v11 >> 29) - ((2 * (v11 >> 29)) & 0xFC) - 2;
    LOBYTE(STACK[0x2E9]) = ((v9 >> 5) ^ 0x7C) + ((v9 >> 4) & 0xFC ^ 7) - 1;
    LOBYTE(STACK[0x2EA]) = ((v9 >> 13) ^ 0x21) - ((2 * ((v9 >> 13) ^ 0x21)) & 0xFC) - 2;
    v3 = v1 + v0 + 76;
    v6 = (v9 >> 21) ^ 0xFFFFFFCE;
    v7 = (4 * (v9 >> 22)) ^ 0x63;
  }
  else
  {
    if (v2 != 2)
      goto LABEL_6;
    v3 = (v0 + 121) & 0x56;
    v7 = STACK[0x2EC];
    v4 = STACK[0x2F0];
    LOBYTE(STACK[0x2E4]) = ((LODWORD(STACK[0x2EC]) >> 21) ^ 0xCE) + ((LODWORD(STACK[0x2EC]) >> 20) & 0xFC ^ 0x63) - 1;
    LOBYTE(STACK[0x2E5]) = ((v3 - 51) ^ (v7 >> 13)) + ((2 * (((v3 - 51) ^ (v7 >> 13) | 0x7E) ^ (v7 >> 13))) ^ 0x41) - 1;
    LOBYTE(STACK[0x2E6]) = ((v7 >> 5) ^ 0x7C) + ((v7 >> 4) & 0xFC ^ 7) - 1;
    HIDWORD(v5) = v7 ^ 8;
    LODWORD(v5) = v4;
    LOBYTE(STACK[0x2E7]) = (v5 >> 29) - ((2 * (v5 >> 29)) & 0xFC) - 2;
    LOBYTE(STACK[0x2E8]) = ((v4 >> 21) ^ 0x29) + ((2 * (((v4 >> 21) ^ 0x29 | 0x7E) ^ (v4 >> 21))) ^ 0x51) - 1;
    LOBYTE(STACK[0x2E9]) = ((v4 >> 13) ^ 0x62) + ((v4 >> 12) & 0xFC ^ 0x3B) - 1;
    LOBYTE(STACK[0x2EA]) = ((v4 >> 5) ^ 0x6C) + ((v4 >> 4) & 0xFC ^ 0x27) - 1;
    LOBYTE(v6) = (8 * v4) ^ 0xA8;
    LOBYTE(v7) = (16 * v4) ^ 0xAF;
  }
  LOBYTE(STACK[0x2EB]) = v7 + v6 + ((v3 - 101) & 0x94 ^ 0x7B);
LABEL_6:
  JUMPOUT(0x100065A50);
}

uint64_t sub_100067234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _BOOL4 v13;

  v9 = (v6 + v3);
  v10 = *(_DWORD *)((char *)&STACK[0x2AC] + v9 + 72);
  v11 = v10 >> (v5 ^ (v7 + 67) ^ (v7 + 24));
  *(_BYTE *)(a3 + v9) = (v11 ^ 0x61) + ((2 * ((v11 ^ 0x61 | 0x7E) ^ v11)) ^ 0xC1) - 1;
  *(_BYTE *)(a3 + (v9 + 1)) = (BYTE2(v10) ^ 0x18) + ((v10 >> 15) & 0xFC ^ 0xCF) - 1;
  *(_BYTE *)(a3 + (v9 + 2)) = (BYTE1(v10) ^ 0x2E) - ((2 * (BYTE1(v10) ^ 0x2E)) & 0xFC) - 2;
  *(_BYTE *)(a3 + (v9 + 3)) = v10 ^ 0xCB;
  v12 = LODWORD(STACK[0x308]) + 252055612;
  v13 = v6 + 381120270 < v12;
  if (v6 + 381120270 < v4 != v12 < v4)
    v13 = v12 < v4;
  return (*(uint64_t (**)(void))(v8 + 8 * (v5 | (32 * v13))))();
}

void sub_1000673D0()
{
  JUMPOUT(0x1000673A0);
}

uint64_t sub_1000673D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  *(_DWORD *)(&a36 + a35) = 543829288;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 + 8 * ((((a9 + 1392) | 0x1C) - 248) ^ (a9 - 431))) - 8))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_1000674A0()
{
  int v0;
  int v1;
  uint64_t v2;
  _BOOL4 v3;

  v3 = v1 == ((v0 - 972945432) | 0x10888280) + 1909213665;
  return ((uint64_t (*)(char *))(*(_QWORD *)(v2 + 8 * ((v3 | (2 * v3)) ^ v0))
                                         - ((v0 - 273771841) & 0x105167E7 ^ 0x2C7)))((char *)*(&off_10025FA20
                                                                                               + (v0 ^ 0x8BE)) - 4);
}

uint64_t sub_100067518(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  unsigned int v18;
  uint64_t v19;

  return ((uint64_t (*)(void))(*(_QWORD *)(v19
                                        + 8
                                        * ((7
                                          * ((((v18 + 922741816) & 0x490013F7 ^ 0xFFFFFD0F) & (a2 - 1528691547)) - a18 != (v18 ^ 0xA4E20662))) ^ v18))
                            - 8))();
}

uint64_t sub_10006757C@<X0>(int a1@<W1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24)
{
  int v24;
  uint64_t v25;
  _BOOL4 v27;

  v27 = a24 - a1 == 17681099 && a2 != v24 + 543828533;
  return (*(uint64_t (**)(void))(v25 + 8 * ((v27 * (563 * (v24 ^ 0x2F1) - 67)) ^ v24)))();
}

uint64_t sub_1000675D4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,int a30)
{
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  _BOOL4 v35;

  v33 = ((v30 + v32 + 659377127) & 0xD8B2B4F1 ^ 0x1258F2E6) + a30;
  v34 = (a2 + 325500114 < ((v30 + v32) | 0x243u) + 1854191077) ^ (v33 < 0x6E84B830);
  v35 = v33 < a2 + 325500114;
  if (v34)
    v35 = a2 + 325500114 < ((v30 + v32) | 0x243u) + 1854191077;
  return ((uint64_t (*)(void))(*(_QWORD *)(v31 + 8 * ((v30 + v32 + 1991) ^ (16 * !v35))) - 4))();
}

uint64_t sub_10006776C(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (((((*(_DWORD *)(a1 + 48 * (v3 + v2) + 36) == v3) ^ (v1 - 84)) & 1)
                                          * ((v1 ^ 0x2AA) - 177)) | v1))
                            - 8))();
}

uint64_t sub_1000677CC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;

  v18 = 460628867 * ((v17 - 644137947 - 2 * ((v17 - 160) & 0xD99B3CC5)) ^ 0x950DBEB8);
  v19 = (_QWORD *)(v17 - 160);
  v19[4] = a13;
  v19[5] = a11;
  v19[2] = v16;
  v19[6] = a10;
  *(_DWORD *)(v17 - 132) = v14 - v18 + 158;
  *(_DWORD *)(v17 - 152) = a2 + ((v14 + 581) ^ 0xA942FAB9) + v18;
  *v19 = a12;
  ((void (*)(uint64_t))((char *)*(&off_10025FA20 + v14 - 214) - 4))(v17 - 160);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15
                                                      + 8
                                                      * (int)(((*(_DWORD *)(v17 - 136) == v13)
                                                             * (((v14 - 557854228) & 0xF7CABFB6) + 695563492)) ^ v14))
                                          - 8))(a1);
}

uint64_t sub_1000678DC(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((25
                                          * (*(_DWORD *)(a1 + 48 * ((v3 ^ (v1 - 734)) + v2)) != (v3 ^ 0x3C7)
                                                                                                + 182904710)) | v3))
                            - 4))();
}

uint64_t sub_100067938@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8 * ((1096 * ((a1 ^ 0xECAAE0EA) == v2 + (v1 ^ (v3 - 31)) + 495879445)) ^ v1))
                            - 8))();
}

uint64_t sub_100067984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((123 * ((a3 & 0xFFFFFFFFFFFFFFFLL) != ((v3 + 1141609595) & 0xE569DBF3) - 755)) ^ (v5 + v3 + 305))))();
}

uint64_t sub_1000679CC@<X0>(uint64_t a1@<X2>, int a2@<W8>)
{
  int v3;

  if ((a2 + 324345626) <= 0x18 && ((1 << (a2 + 26)) & 0x1094001) != 0)
    __asm { BR              X9 }
  return v3 ^ 0xE2CFE538;
}

void sub_100067DB4(uint64_t a1)
{
  int v1;
  _BOOL4 v4;

  v4 = *(_QWORD *)(a1 + 8) != 0x56428495FB62992
    && *(_QWORD *)(a1 + 32) != 0x7D59DC543B842D40
    && *(_QWORD *)(a1 + 24) != 0x721003D414281A36;
  v1 = *(_DWORD *)(a1 + 16) ^ (69008221 * ((~(_DWORD)a1 & 0xFA1A7A5E | a1 & 0x5E585A1) ^ 0x29B82854));
  __asm { BR              X9 }
}

uint64_t sub_100067EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  int v21;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20
                                                                                         + 8
                                                                                         * (((*(_DWORD *)(a20 - 0x56428495FB6297ALL) == 489733862)
                                                                                           * ((v21 ^ 0x7DD) - 388)) ^ v21)))(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100067F00(__n128 a1, __n128 a2, __n128 a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  int v24;
  uint64_t v25;
  unsigned int v26;
  __n128 v27;
  __n128 v28;
  unsigned int v29;
  _BOOL4 v30;
  unsigned int v31;
  int v32;
  _BOOL4 v33;

  v26 = (v24 + 730412659) & 0xD476C7FF;
  v27.n128_u64[0] = 0xFCFCFCFCFCFCFCFCLL;
  v27.n128_u64[1] = 0xFCFCFCFCFCFCFCFCLL;
  v28.n128_u64[0] = 0xFEFEFEFEFEFEFEFELL;
  v28.n128_u64[1] = 0xFEFEFEFEFEFEFEFELL;
  v29 = *(_DWORD *)(a24 - 0x56428495FB62982) - 687119335;
  v30 = v29 < 0xDE03405E;
  v31 = ((v26 - 21080292) & 0x141A5BD ^ 0xBB4FE3B4) + 582180445;
  v32 = v30 ^ (v31 < ((v26 - 21080292) ^ 0x20BD1BA9));
  v33 = v31 < v29;
  if (!v32)
    v30 = v33;
  return ((uint64_t (*)(__n128, __n128, __n128, __n128, __n128, __n128))(*(_QWORD *)(v25
                                                                                             + 8
                                                                                             * (int)((v30 | (32 * v30)) ^ v26))
                                                                                 - 8))(a1, a2, a3, a4, v27, v28);
}

uint64_t sub_100068158()
{
  int v0;
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1 + 8 * v0))();
}

uint64_t sub_100068E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13)
{
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _BOOL4 v17;

  *(_BYTE *)(*v16 + (v13 + a7)) = 126;
  v17 = v13 + 711576632 < v14 + 1487 + a13 + 852869341;
  if (a13 > 0xCD2A379E != (v13 + 711576632) < 0x32D5C861)
    v17 = a13 > 0xCD2A379E;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * (!v17 | (v14 + 1487))) - 4))();
}

uint64_t sub_100068EB8@<X0>(unsigned int a1@<W1>, int a2@<W6>, int a3@<W8>)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _BOOL4 v10;
  int v11;

  v10 = a1 > v7;
  v11 = v3 + 1;
  *(_BYTE *)(*v9 + (v11 + a2)) = -2;
  if (v10 == v11 + v5 < (a3 ^ 0x631u) + v4)
    v10 = v11 + v5 < v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (v10 ^ a3 ^ 1)) - 4))();
}

void sub_100068F14(uint64_t a1, int a2)
{
  _QWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *(_QWORD *)(v4 - 0x7D59DC543B842D40) = *v2;
  *(_DWORD *)(v5 - 0x721003D414281A36) = a2;
  *v2 = 0;
  *(_QWORD *)(v8 - 0x56428495FB6298ALL) = 0x2AD5501F2AD5501FLL;
  *v3 = 116907077;
  *(_DWORD *)(v8 - 0x56428495FB6297ELL) = ((*(_DWORD *)(v8 - 0x56428495FB6297ELL) & 0xFFFFFFFE ^ 0x278ACFA1) - 1) ^ 0x278ACFA0;
  *v7 = *v6;
}

void sub_100069008(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD v7[2];
  uint64_t v8;

  v1 = *(_DWORD *)a1 ^ (2078219279 * (((a1 | 0x2CA10C87) - (a1 & 0x2CA10C87)) ^ 0xF65B9AF3));
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 - 0x2DB44D49A49B002ALL) - 237901512 >= 0)
    v4 = *(_DWORD *)(v2 - 0x2DB44D49A49B002ALL) - 237901512;
  else
    v4 = 237901512 - *(_DWORD *)(v2 - 0x2DB44D49A49B002ALL);
  v3 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v3 - 0x2DB44D49A49B002ALL) - 237901512 >= 0)
    v5 = *(_DWORD *)(v3 - 0x2DB44D49A49B002ALL) - 237901512;
  else
    v5 = 237901512 - *(_DWORD *)(v3 - 0x2DB44D49A49B002ALL);
  v7[1] = v1
        - 1224239923 * ((v7 - 1649905341 - 2 * ((unint64_t)v7 & 0x9DA87143)) ^ 0x6F1B8C94)
        - 1045;
  v8 = v2;
  sub_1000651F8((uint64_t)v7);
  if (v4 >= v5)
    v6 = v5;
  else
    v6 = v4;
  __asm { BR              X14 }
}

uint64_t sub_1000691BC()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  _BOOL4 v5;

  v5 = v2 + 1881265921 > 357232988 || v2 + 1881265921 < v3 + v1 - 880 - 1790250951;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((v5 * ((413 * (v1 ^ 0x496)) ^ 0x334)) ^ v1)) - 12))();
}

uint64_t sub_10006921C(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  _BOOL4 v19;

  v15 = 4 * (v10 + v8);
  v16 = v12
      + v3
      + (((v6 ^ 0x126) * a2) ^ (v9 + 790) ^ *(_DWORD *)(*(_QWORD *)(v14 - 0x2DB44D49A49B0026) + v15))
      + 1172;
  *(_DWORD *)(*(_QWORD *)(v13 - 0x2DB44D49A49B0026) + v15) = v16 + v9 - (v11 & (2 * v16));
  v17 = v10 + 1 + v4;
  v19 = v17 <= v5 && v17 >= v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1456 * v19) ^ v6)) - 12))();
}

uint64_t sub_1000692E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  uint64_t v10;
  int v11;
  int v12;
  _BOOL4 v14;

  v14 = v12 - 833335516 > 1937598847 || v12 - 833335516 < a10 - 209884800;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((v14 * ((7 * (v11 ^ 0x226)) ^ 0x7B8)) ^ v11)) - 8))();
}

uint64_t sub_100069344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  _BOOL4 v25;

  v21 = 4 * (v18 + v16);
  v22 = v11 + 621719539 + (*(_DWORD *)(*(_QWORD *)(a10 - 0x2DB44D49A49B0026) + v21) ^ 0x1B785768);
  *(_DWORD *)(*(_QWORD *)(v20 - 0x2DB44D49A49B0026) + v21) = v22 + v17 - (v19 & (2 * v22));
  v23 = v18 + 1 + v13;
  v25 = v23 > v14 || v23 < v15;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((202 * v25) ^ v12)) - 8))();
}

uint64_t sub_100069424()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (int)(((v1 != 0x72D85362DAF1500DLL) * (((v2 + 855390230) & 0xCD03C6F7) - 1722)) ^ v2)))();
}

uint64_t sub_10006946C()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;

  return (*(uint64_t (**)(void))(v0 + 8 * ((((v2 + v3 - 1) < 0x7FFFFFFF) * (v1 + 267)) ^ (v1 - 1431))))();
}

uint64_t sub_1000696F8()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (int)((v1 + 320328869) & 0xECE825BB ^ (8
                                                                     * (*(_DWORD *)(*(_QWORD *)(v5 - 0x2DB44D49A49B0026)
                                                                                  + 4 * (v2 + v4 - 1)) != v3)))))();
}

uint64_t sub_100069750()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;

  return (*(uint64_t (**)(void))(v0 + 8 * (((v3 + v2 - 2 < (((v1 - 299) | 0x123) ^ 0x7FFFFECCu)) * (v1 + 1067)) ^ v1)))();
}

uint64_t sub_100069790()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  return (*(uint64_t (**)(void))(v0 + 8 * (v2 ^ (8 * (*(_DWORD *)(v1 + 4 * (v3 + v5 - 1)) != v4)))))();
}

void sub_1000697B8()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  *(_DWORD *)(v3 - 0x2DB44D49A49B002ALL) = (((v2 + v1) * (v0 - 405110594)) ^ 0x3FFE56CA)
                                         - 835731458
                                         + ((2 * (v2 + v1) * (v0 - 405110594)) & 0x7FFCAD94);
}

void sub_100069844(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 32) + 1543737703 * ((150514792 - (a1 | 0x8F8AC68) + (a1 | 0xF7075397)) ^ 0x89F303EB);
  __asm { BR              X14 }
}

uint64_t sub_100069980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  _BOOL4 v18;

  v16 = ((v14 - 354) ^ 0xA67CAEFD) + v13;
  v18 = v16 <= 1493913784 && v16 >= a13 - 653569863;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * (v18 | (8 * v18) | v14)) - 8))();
}

uint64_t sub_1000699E8@<X0>(int a1@<W1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v18;

  *(_DWORD *)(a10 + 4 * (v10 + a2)) = a1;
  v16 = v12 + v10 + 67;
  v18 = v16 > v13 || v16 < v14;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15
                                        + 8
                                        * ((((v11 + 1) ^ v18) & 1 | (8
                                                                                    * (((v11 + 1) ^ v18) & 1))) ^ v11))
                            - 8))();
}

uint64_t sub_100069A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  uint64_t v7;
  _BOOL4 v8;

  v8 = v5 != ((v6 + 763) ^ 0x5AA) - 279;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7
                                                                                          + 8 * (v8 | (16 * v8) | v6))
                                                                              - 4))(a1, a2, a3, a4, a5);
}

uint64_t sub_100069A6C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  _BOOL4 v16;

  v12 = (a1 - 997156550) & 0x3B6F63CA;
  v13 = (*(_DWORD *)(*(_QWORD *)(a4 + 8) - 0x73495CDCA303A980) - 786631598) * (*a10 ^ 0xE487A897);
  v14 = 69008221 * ((((v11 - 128) | 0x8CA5F255) - ((v11 - 128) & 0x8CA5F255)) ^ 0x5F07A05F);
  *(_QWORD *)(v11 - 120) = a8;
  *(_DWORD *)(v11 - 112) = ((v13 ^ 0x3C9FDCBA) + ((v12 - 171) ^ 0xEFFE66C7) + ((2 * v13) & 0x793FB974)) ^ v14;
  *(_QWORD *)(v11 - 104) = a7;
  *(_DWORD *)(v11 - 128) = v14 + v12 + 593;
  *(_DWORD *)(v11 - 124) = 237901512 - v14;
  v15 = ((uint64_t (*)(uint64_t))((char *)*(&off_10025FA20 + v12 - 420) - 4))(v11 - 128);
  v16 = (int)(a6 + 1885727700) > 1885727701;
  if (a6 > 0xF9A142B)
    v16 = 1;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v10 + 8 * ((1407 * v16) ^ v12)) - 4))(v15);
}

void sub_100069C04()
{
  JUMPOUT(0x100069AE4);
}

uint64_t sub_100069C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, int a10, int a11, uint64_t a12, int a13, int a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  int v17;

  v17 = 3804331
      * ((((2 * ((v16 - 128) ^ 0x377493FC)) | 0xB4D0945C) - ((v16 - 128) ^ 0x377493FC) - 1516784174) ^ 0x13C9FC24);
  *(_QWORD *)(v16 - 120) = a15;
  *(_DWORD *)(v16 - 128) = a11 - v17 + 1795;
  *(_DWORD *)(v16 - 124) = (((a14 << 6) & 0xE7F6ED00) - 16843269 + ((3 * (a11 ^ 0x1A5)) ^ (32 * a14) ^ 0x73FB7481)) ^ v17;
  sub_100086E18(v16 - 128);
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * ((859 * ((*a9 - 237901513) < 0x7FFFFFFF)) ^ a11))
                            - 8))();
}

uint64_t sub_100069CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v18 - 112) = &STACK[0x2DB44D49A49B006E];
  *(_DWORD *)(v18 - 120) = v17
                         + 831981571 * ((((2 * (v18 - 128)) | 0x7BACAC24) - (v18 - 128) - 1037456914) ^ 0xA4778636)
                         + 65;
  *(_QWORD *)(v18 - 128) = a14;
  sub_100085594(v18 - 128);
  *(_DWORD *)(v18 - 104) = (v17 + 1181) ^ (((((v18 - 128) | 0xD2A1CF3A) - ((v18 - 128) & 0xD2A1CF3A)) ^ 0x1039D30) * v16);
  *(_QWORD *)(v18 - 128) = v15;
  *(_QWORD *)(v18 - 112) = a14;
  v19 = ((uint64_t (*)(uint64_t))((char *)*(&off_10025FA20 + (v17 ^ 0x1CE)) - 8))(v18 - 128);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v14
                                                      + 8
                                                      * ((63
                                                        * (*(_DWORD *)(v18 - 120) > ((v17 + 1053) | 0x83u) + 162893182)) ^ v17))
                                          - 8))(v19);
}

uint64_t sub_100069E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  uint64_t v16;
  int v17;
  int v18;
  int v19;

  v18 = (v17 + 490) | 0x45;
  v19 = (v18 ^ 0xF1D1ED7D) + a16;
  if (v19 < 0)
    v19 = -v19;
  return ((uint64_t (*)(void))(*(_QWORD *)(v16
                                        + 8
                                        * ((3197
                                          * ((int)((v19 ^ 0xFFEEF6DF) + ((2 * v19) & 0xFFDDEDBE) + 1116448) > (int)(((v18 + 706437626) & 0xD5E49BD6) - 535))) ^ v18))
                            - ((5 * (v18 ^ 0x413u)) ^ 0x1A2)))();
}

uint64_t sub_100069ED0(uint64_t a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8
                                        * (((*(_DWORD *)(v8 + 4 * v9) != ((a5 + 559) ^ (a8 + 1083)))
                                          * (((a5 - 404) | a2) ^ a3)) ^ a5))
                            - 12))();
}

void sub_100069F08()
{
  JUMPOUT(0x100069E9CLL);
}

uint64_t sub_100069F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v20 = 3804331 * ((v19 - 128) ^ 0x7ED525F6);
  *(_QWORD *)(v19 - 128) = v18;
  *(_DWORD *)(v19 - 120) = v20 + v16 + 1107;
  *(_DWORD *)(v19 - 116) = v16 - 502 - v20 + v17 + 1248106410;
  sub_10006A710(v19 - 128);
  *(_DWORD *)(v19 - 104) = (v16 + 679) ^ (69008221
                                        * ((((v19 - 128) | 0x867F775D) + (~(v19 - 128) | 0x798088A2)) ^ 0x55DD2556));
  *(_QWORD *)(v19 - 128) = a13;
  *(_QWORD *)(v19 - 112) = a14;
  v21 = v14(v19 - 128);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15
                                                      + 8
                                                      * (int)(((*(_DWORD *)(v19 - 120) > 0x9B59335u)
                                                             * (((v16 - 561111894) & 0x2171E5FF ^ 0xFFFFFB9E)
                                                              + ((v16 - 502) ^ 0x301))) ^ (v16 - 502)))
                                          - 8))(v21);
}

uint64_t sub_10006A018()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v6 - 128) = v2;
  *(_QWORD *)(v6 - 112) = v5;
  *(_DWORD *)(v6 - 104) = (v4 - 3) ^ (((v6 - 128) ^ 0xD3A2520A) * v3);
  v7 = v0(v6 - 128);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1 + 8 * ((853 * (*(_DWORD *)(v6 - 120) > 0x9B59335u)) ^ v4))
                                          - (v4 - 719)
                                          + 736))(v7);
}

uint64_t sub_10006A090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  *(_DWORD *)(v17 - 128) = (v16 + 135) ^ (268847287
                                        * ((((v17 - 128) | 0xD959A92C) - ((v17 - 128) & 0xD959A92C)) ^ 0x26F3B804));
  *(_QWORD *)(v17 - 120) = a13;
  *(_QWORD *)(v17 - 112) = v15;
  v18 = ((uint64_t (*)(uint64_t))*(&off_10025FA20 + v16 - 566))(v17 - 128);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v13 + 8 * (v16 ^ (1887 * (v14 != 348103576))))
                                          - ((v16 - 1406592987) & 0x53D6E7FF ^ 0x305)))(v18);
}

uint64_t sub_10006A148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  *(_DWORD *)(v19 - 104) = (v18 + 716) ^ (69008221
                                        * (((((v19 - 128) | 0x22BA0E34) ^ 0xFFFFFFFE) - (~(v19 - 128) | 0xDD45F1CB)) ^ 0xEE7A3C1));
  *(_QWORD *)(v19 - 128) = v16;
  *(_QWORD *)(v19 - 112) = a14;
  v20 = v14(v19 - 128);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15
                                                      + 8
                                                      * ((485
                                                        * (*(_DWORD *)(v19 - 120) != (((v18 - 721) | 0x100) ^ (v17 - 277)))) ^ v18))
                                          - ((v18 + 37) ^ 0x305)))(v20);
}

uint64_t sub_10006A1EC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  *(_QWORD *)(v5 - 112) = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(v5 - 128) = v4;
  *(_DWORD *)(v5 - 120) = a4
                        + 831981571 * ((((v5 - 128) | 0x955F512A) - (v5 - 128) + ((v5 - 128) & 0x6AA0AED0)) ^ 0xCFE810E)
                        - 86;
  return sub_100085594(v5 - 128);
}

void sub_10006A344(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) ^ (3804331 * ((-2 - ((a1 | 0x7F5042C2) + (~(_DWORD)a1 | 0x80AFBD3D))) ^ 0xFE7A98CB));
  __asm { BR              X10 }
}

uint64_t sub_10006A410(_QWORD *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((50 * (*(_DWORD *)(*a1 + v3) == v2)) ^ v4))
                            - (((v4 + 1819806905) & 0x9387F7B1)
                             - 78)
                            + 1574))();
}

uint64_t sub_10006A458@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v6 = v2;
  v5 = a1 + 831981571 * (&v4 ^ 0x99A1D024) - 1320;
  v4 = a2;
  return sub_100085594((uint64_t)&v4);
}

void sub_10006A5D8(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 8) ^ (831981571
                            * (((a1 ^ 0x8A003497) - 575953088 - 2 * ((a1 ^ 0x8A003497) & 0xDDABA740)) ^ 0xCE0A43F3));
  v2 = *(_QWORD *)((char *)*(&off_10025FA20 + (v1 ^ 0xCD))
                 + 8
                 * (((((uint64_t (*)(uint64_t, uint64_t))*(&off_10025FA20 + v1 + 91))(32, 0x101004023FF3BD5) == 0)
                   * (((v1 + 9) | 3) - 127)) ^ v1)
                 - 4);
  __asm { BR              X8 }
}

void sub_10006A690()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 12) = -489691854;
}

void sub_10006A710(uint64_t a1)
{
  int v1;

  v1 = 3804331 * ((a1 - 881405234 - 2 * (a1 & 0xCB76D2CE)) ^ 0xB5A3F738);
  __asm { BR              X15 }
}

uint64_t sub_10006A7DC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  int v9;
  unsigned int v10;

  v5 = (v4 + 1102546768) & 0xADEFEEEC;
  v6 = 944348131 * ((((2 * &v8) | 0x25FABA30) - &v8 + 1828889320) ^ 0x31E4F956);
  v8 = v2;
  v9 = v3 - v6 - 1200;
  v10 = a1 - v5 + v6 + (v3 ^ 0xF7D3BE44);
  return ((uint64_t (*)(uint64_t *))(*(_QWORD *)(v1 + 8 * (v3 ^ 0x5B1)) - 4))(&v8);
}

void sub_10006A920(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_10006A988()
{
  return 4294925278;
}

void sub_10006AB28(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 12) - 69008221 * ((-2 - ((~(_DWORD)a1 | 0x2A929A22) + (a1 | 0xD56D65DD))) ^ 0xF930C828);
  __asm { BR              X9 }
}

uint64_t sub_10006AC24@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((((a1 - 403) ^ 0x98) * (v1 == 0)) ^ a1)) - 4))();
}

uint64_t sub_10006AC60@<X0>(uint64_t (*a1)(uint64_t *)@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;

  v5 = (((&v7 | 0x41D7377E) - (&v7 & 0x41D7377E)) ^ 0x3F021288) * v1;
  v11 = ((v2 ^ 0x565) - 763) ^ v5;
  v10 = 0x118C242060FB2D82;
  v7 = v4;
  v8 = v5 ^ 0xC6395E95;
  v9 = v5 ^ 0x49D399AF;
  result = a1(&v7);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(v4 - 0x56428495FB6297ALL);
  return result;
}

void sub_10006B4D0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v0 = qword_100277938 - (_QWORD)&v2 + qword_1002778E8;
  qword_100277938 = (45734839 * v0) ^ 0xA77260646F1BC58ALL;
  qword_1002778E8 = 45734839 * (v0 ^ 0xA77260646F1BC58ALL);
  *(_DWORD *)*(&off_10025FA20
             + ((-73 * ((qword_1002778E8 - qword_100277938) ^ 0x8A)) ^ byte_100214990[byte_100210D10[(-73 * ((qword_1002778E8 - qword_100277938) ^ 0x8A))] ^ 0x19])
             + 64) = 489733862;
  v1 = ((uint64_t (*)(uint64_t, uint64_t))*(&off_10025FA20
                                                  + ((-73
                                                                                   * ((qword_1002778E8 - qword_100277938) ^ 0x8A)) ^ byte_100214990[byte_100210D10[(-73 * ((qword_1002778E8 - qword_100277938) ^ 0x8A))] ^ 0xF1])
                                                  + 195))(512, 1509315540);
  *(_QWORD *)((char *)*(&off_10025FA20
                      + ((-73 * ((qword_1002778E8 + qword_100277938) ^ 0x8A)) ^ byte_100210F10[byte_10020C0E0[(-73 * ((qword_1002778E8 + qword_100277938) ^ 0x8A))] ^ 0x8B])
                      - 119)
            - 4) = v1;
  __asm { BR              X8 }
}

void sub_10006B674()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

void sub_1000726B8(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  _BOOL4 v5;

  v1 = 831981571 * ((-2 - ((~(_DWORD)a1 | 0xF33FFBC4) + (a1 | 0xCC0043B))) ^ 0x6A9E2BE0);
  v2 = *(_DWORD *)(a1 + 8) + v1;
  v3 = (unsigned __int16)(*(_WORD *)(a1 + 12) + v1);
  v5 = *(_QWORD *)a1 == 0x70B15AEA8D1E196 || v3 == 28728;
  __asm { BR              X8 }
}

void sub_1000727A8()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = v0;
}

void sub_1000733F4(_DWORD *a1)
{
  unsigned int v1;
  int v2[10];

  v1 = *a1 + 1543737703 * (a1 ^ 0x7EF4507C);
  v2[1] = v1
        + 1178560073 * (((~v2 & 0x39D0C9BC) - (~v2 | 0x39D0C9BD)) ^ 0xDEE5EBD5)
        - 1501687297;
  sub_1000AABF4(v2);
  __asm { BR              X8 }
}

uint64_t sub_1000734E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  a13 = &STACK[0x82D647BA4E69FD9];
  a14 = (v16 - 1318) ^ (831981571
                      * (((&a13 | 0xEDA12E04) - (&a13 & 0xEDA12E04)) ^ 0x7400FE20));
  sub_10006A5D8((uint64_t)&a13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v17
                                                                                + 8
                                                                                * (((a15 == v15)
                                                                                  * (145 * (v16 ^ 0x5A8) - 206)) ^ v16)))(v18, v19, v20, v21, v22);
}

uint64_t sub_100073578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14, uint64_t a15, int a16)
{
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v21 = *(_DWORD *)(v16 + 8) + v18;
  v22 = 1224239923 * ((54336456 - (&a13 | 0x33D1BC8) + (&a13 | 0xFCC2E437)) ^ 0xE7119E0);
  a15 = a11;
  a13 = 2083868941 * v21
      - v22
      + ((((v20 - 573) | 0x240) - 1535864529) ^ ((v20 - 692) | 0x58C))
      - ((-127229414 * v21 + 1789755642) & 0xDE3BA25A);
  a16 = (v20 + 207) ^ v22;
  sub_100080318((uint64_t)&a13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19
                                                                                         + 8
                                                                                         * ((13 * (a14 != v17)) ^ v20)))(v23, v24, v25, v26, v27, v28);
}

uint64_t sub_10007367C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, unsigned int a15, uint64_t a16, unint64_t *a17, int a18)
{
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;

  v22 = (((&a13 | 0x37E51031) + (~&a13 | 0xC81AEFCE)) ^ 0xC556EDE7) * v21;
  a13 = v22 ^ 0x12B68929;
  a14 = (v19 + 368399449) ^ v22;
  a16 = a11;
  a17 = &STACK[0x72F2C1D3322B8800];
  a15 = v22 ^ 0xEC19DF6E;
  v23 = sub_1000AACB4((uint64_t)&a13);
  return (*(uint64_t (**)(uint64_t))(v20 + 8 * ((1611 * (a18 == v18 + v19 + 725 - 1453)) ^ v19)))(v23);
}

uint64_t sub_100073730()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  void (*v5)(unint64_t **);
  int v6;
  int v7;
  uint64_t result;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  unsigned int v14;

  v6 = (v4 + 721) | 4;
  v14 = v4 - 944348131 * ((&v12 + 1244961591 - 2 * (&v12 & 0x4A349B37)) ^ 0xE92D3F79) - 210;
  v12 = &STACK[0x20BA795F69D3F0D];
  v13 = v11;
  ((void (*)(unint64_t **))(*(_QWORD *)(v3 + 8 * (v4 ^ 0x232)) - 8))(&v12);
  LODWORD(v13) = v4
               - 241568881 * (((&v12 | 0xD00DEA05) - (&v12 & 0xD00DEA05)) ^ 0x61CEE47)
               - 146;
  v12 = v11;
  sub_1000906D4((uint64_t)&v12);
  if (HIDWORD(v13) == v1 + v6 - 1453)
    v7 = v9;
  else
    v7 = HIDWORD(v13);
  v13 = v11;
  LODWORD(v12) = (v4 - 576) ^ (((2 * (&v12 & 0x181C2120) - &v12 - 404496677) ^ 0x34418CD1)
                             * v2);
  v5(&v12);
  v13 = v10;
  LODWORD(v12) = (v6 - 1301) ^ (((&v12 & 0xF2CCF7CB | ~(&v12 | 0xF2CCF7CB)) ^ 0xDE915A3E)
                              * v2);
  result = ((uint64_t (*)(unint64_t **))v5)(&v12);
  *(_DWORD *)(v0 + 4) = v7;
  return result;
}

void OsjTR(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X8 }
}

uint64_t sub_100073964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((253 * (a3 != 0)) ^ 0x16Cu)) - 8))();
}

uint64_t sub_1000739A0()
{
  char v0;
  _DWORD *v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((1493 * (((*v1 == 0) ^ (v0 - 1) ^ 0x91) & 1)) ^ 0x191u))
                            - 8))();
}

uint64_t sub_1000739E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, unsigned int a18)
{
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v22 = v21 ^ (v18 + 2212);
  a18 = v21
      + 1178560073 * ((((2 * &a17) | 0x40AB890A) - &a17 + 1604991867) ^ 0x4760E6ED)
      - 1501687516;
  v23 = sub_1000AABF4(&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20
                                                      + 8
                                                      * (((a17 == v19) * (((v21 - 128520601) & 0xF54) - 816)) | v21))
                                          - (v22 ^ 0x246EBAD7)))(v23);
}

uint64_t sub_100073A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, unsigned int a18, int a19)
{
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  a18 = (v19 - 957) ^ (831981571
                     * ((((2 * &a17) | 0x74AE8078) - &a17 + 1168687044) ^ 0x23F69018));
  a17 = &STACK[0x82D647BA4E69FF1];
  sub_10006A5D8((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 + 8 * (((a19 == 489733862) * (((v19 + 771667895) & 0x246EFEDF) - 611235932)) ^ v19)) - ((v19 - 1091) | 0x300u) + 761))(v21, v22, v23, v24, v25, v26, v27, v28, a9);
}

uint64_t sub_100073B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, int a20)
{
  int *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v27 = v22 - 283258579 + (~(2 * v22) | 0x21C45DA5);
  v28 = v26 + 163;
  v29 = 1224239923 * ((((2 * &a17) | 0xE12D7366) - &a17 - 1888926131) ^ 0x82254464);
  a19 = a14;
  a20 = (v26 + 163) ^ v29;
  a17 = v27 - v29 + 1;
  sub_100080318((uint64_t)&a17);
  v30 = 1224239923 * ((&a17 & 0x244F7FC | ~(&a17 | 0x244F7FC)) ^ 0xF08F5D4);
  a20 = (v26 + 163) ^ v30;
  a17 = v21 - v30 - 283258579 - ((v21 << ((v26 + 67) ^ 0x45)) & 0xDE3BA25A);
  a19 = a14;
  sub_100080318((uint64_t)&a17);
  v31 = -283258580;
  if (v25)
    v31 = -283258579;
  v32 = 1224239923 * ((&a17 - 107021952 - 2 * (&a17 & 0xF99EF980)) ^ 0xB2D0457);
  a17 = v31 - v32;
  a19 = a14;
  a20 = v28 ^ v32;
  sub_100080318((uint64_t)&a17);
  v33 = *v20;
  v34 = (2 * *v20) & 0xDE3BA25A;
  v35 = 1224239923 * ((2 * (&a17 & 0x71B1DCE0) - &a17 + 240001818) ^ 0xFCFDDECD);
  a19 = a14;
  a20 = v28 ^ v35;
  a17 = v33 - v35 - 283258579 - v34;
  sub_100080318((uint64_t)&a17);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 8 * ((1548 * (a18 == v23)) ^ v26)))(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10);
}

uint64_t sub_100073D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, unsigned int a19, uint64_t a20,unint64_t *a21,int a22)
{
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  v26 = ((2 * (&a17 & 0x137ED580) - &a17 - 327079302) ^ 0x1E32D7AD) * v22;
  a20 = a14;
  a21 = &STACK[0x72F2C1D3322B8818];
  a17 = v26 ^ 0x12B6892A;
  a18 = (v25 + 368399408) ^ v26;
  a19 = v26 ^ 0xBA447838;
  v27 = sub_1000AACB4((uint64_t)&a17);
  return (*(uint64_t (**)(uint64_t))(v24 + 8 * (v25 ^ (8 * (a22 == v23 + ((v25 - 256) | 0xD0) + 371 - 1092)))))(v27);
}

uint64_t sub_100073E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, uint64_t a16, unint64_t *a17, unint64_t *a18, unint64_t *a19, unint64_t *a20)
{
  int v20;
  int v21;
  uint64_t v22;
  void (*v23)(unint64_t **);
  uint64_t v24;

  a19 = &STACK[0x20BA795F69D3FD1];
  a20 = a15;
  a18 = &STACK[0x7F1325F673F67E8F];
  LODWORD(a17) = v20
               - 2078219279
               * (((&a17 | 0x90938D6A) - &a17 + (&a17 & 0x6F6C7290)) ^ 0x4A691B1E)
               - 231789511;
  sub_1000AB2F4((uint64_t)&a17);
  LODWORD(a19) = v20
               - 203
               - 944348131
               * ((((&a17 | 0xA7B65146) ^ 0xFFFFFFFE) - (~&a17 | 0x5849AEB9)) ^ 0xFB500AF7);
  a17 = &STACK[0x20BA795F69D3FD1];
  a18 = a15;
  v23 = (void (*)(unint64_t **))((char *)*(&off_10025FA20 + (v20 ^ 0x23B)) - 8);
  v23(&a17);
  a17 = &STACK[0x20BA795F69D3FD5];
  a18 = a15;
  LODWORD(a19) = v20 - 203 - 944348131 * (&a17 ^ 0xA319A44E);
  v23(&a17);
  a17 = a15;
  LODWORD(a18) = v20
               - 241568881 * ((&a17 & 0x63445CEA | ~(&a17 | 0x63445CEA)) ^ 0x4AAAA757)
               - 139;
  v24 = sub_1000906D4((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v22
                                                      + 8
                                                      * ((1824
                                                        * (HIDWORD(a18) == ((v20 + 1039449642) & 0xC20B3FA7 ^ (v21 - 161)))) ^ v20))
                                          - (((v20 - 209) | 0x101u) ^ 0x30DLL)))(v24);
}

uint64_t sub_100073FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  int v18;

  if (a12)
    v17 = a14 == v14;
  else
    v17 = 0;
  v18 = v17;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * ((v18 * ((v16 + 611236408) ^ v16 ^ 0x246EBA21)) ^ v16)) - 8))();
}

uint64_t sub_100074030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int v16;
  uint64_t v17;

  return ((uint64_t (*)(void))(*(_QWORD *)(v17 + 8 * (((a16 != 0) * (a8 + a7 + (v16 ^ 0x6EF) + 1412 + 13)) ^ v16))
                            - 12))();
}

uint64_t sub_100074078@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;

  v4 = (a1 ^ v2) - ((2 * (a1 ^ v2)) & 0xE90E7872) - 192463815;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (v1 ^ (25
                                               * (((((v1 + 120) | 0x88) - 921946678) ^ (2 * v4) & 0xDFBCBFFE)
                                                + (v4 ^ 0x1B5963C6)
                                                + 1513619417 == 1242980312))))
                            - 4))();
}

uint64_t sub_10007410C(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v1 ^ (19 * ((a1 + v2 + 270639105) > 7))))
                            - ((((v1 - 2102938409) & 0x7D584FAC) - 520) ^ (v1 - 850801449) & 0x32B635A0)))();
}

uint64_t sub_100074184(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v8
                                                     + 8
                                                     * (a3 + 13 * ((unint64_t)(v6 - a6) < 0x20))))(a1, v7);
}

uint64_t sub_1000741CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unsigned int v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((((a4 + 74194903) | 0x20029842) + a8) * (v8 < 0x20)) | a4))
                            - ((2 * a4) ^ 0x588)))();
}

uint64_t sub_100074218(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;

  v14 = a1 + v11 + v10;
  v15.i64[0] = 0xFEFEFEFEFEFEFEFELL;
  v15.i64[1] = 0xFEFEFEFEFEFEFEFELL;
  v16 = v8 + v14;
  v17 = a6 + v14;
  v18 = veorq_s8(*(int8x16_t *)(v16 - 31), v15);
  *(int8x16_t *)(v17 - 15) = veorq_s8(*(int8x16_t *)(v16 - 15), v15);
  *(int8x16_t *)(v17 - 31) = v18;
  return ((uint64_t (*)(void))(*(_QWORD *)(v13
                                        + 8
                                        * ((((v9 & 0xFFFFFFE0) != 32) * (((a8 + v12 + 1591) | 0x100) - 1834)) ^ (a8 + v12 + 1244)))
                            - 12))();
}

void sub_100074280()
{
  JUMPOUT(0x100074230);
}

uint64_t sub_10007428C()
{
  unsigned int v0;
  int v1;
  int v2;
  void (*v4)(unsigned int *);
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v7 = (v1 - 617) ^ (69008221 * ((((2 * &v7) | 0x865F37CA) - &v7 + 1020290075) ^ 0x108DC9EF));
  v8 = v6;
  v4(&v7);
  v8 = v5;
  v7 = (v1 - 617) ^ (69008221 * (((&v7 | 0xB5CD1467) - (&v7 & 0xB5CD1467)) ^ 0x666F466D));
  v4(&v7);
  return v2 ^ v0;
}

void sub_100074500(uint64_t a1)
{
  int v1;
  BOOL v2;

  v1 = *(_DWORD *)a1 - 69008221 * ((a1 - 2 * (a1 & 0x90A0864D) - 1868528051) ^ 0x4302D447);
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x2DB44D49A49B002ALL) == 237901512;
  __asm { BR              X14 }
}

uint64_t sub_100074600()
{
  int v0;
  uint64_t v1;
  int v2;
  unsigned int v3;
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v4 = v2 + 266;
  v5 = v3 > v2 + 1549220276;
  if (v5 != v0 + 360361347 < -1549220789)
    v6 = v5;
  else
    v6 = v0 + 360361347 < (int)(v3 + 598262859);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1 + 8 * (int)((!v6 * ((v4 - 1676184679) ^ 0x9C17768A)) ^ v4))
                                          - ((v4 - 1676184679) & 0x63E88B5C)
                                          + 500))(0x14D7C48520198B99);
}

uint64_t sub_100074740@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W3>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL4 v19;

  v16 = (v8 ^ 0xE487A897)
      + a1
      + (((v4 ^ v13) - 265) ^ 0xEB283B7ADFE6776DLL)
      + v12 * (unint64_t)(*(_DWORD *)(*v11 + 4 * a2) ^ v8);
  *(_DWORD *)(v6 + 4 * v9) = v16 + v8 - ((2 * v16) & 0xC90F512E);
  v17 = (v14 ^ HIDWORD(v16)) + (v15 & (v16 >> 31)) + a4;
  v19 = a2 - 736813956 < v10 && a2 - 736813956 >= a3;
  return (*(uint64_t (**)(uint64_t))(v5 + 8 * (v4 ^ (v19 * v7))))(v17);
}

uint64_t sub_1000747F4(uint64_t a1)
{
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v2 ^ (182 * (a1 != 0x14D7C48520198B99))))
                            - ((v2 - 110) ^ 0x3ADLL)))();
}

uint64_t sub_100074844@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  _BOOL4 v8;

  v5 = 229 * (a2 ^ 0xF4);
  v6 = ((v5 + 1260829741) & 0xB4D942FE ^ 0xD3C2D1D0) + v2;
  v8 = v6 > 1643177965 || v6 < (int)((v5 ^ 0xE1F0E624) + v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8 * (v5 | (4 * v8))))(a1, 1643177965);
}

uint64_t sub_1000748FC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;

  v14 = a1 - 0x14D7C48520198B99 + (*(_DWORD *)(v9 + 4 * v11) ^ v10);
  *(_DWORD *)(v9 + 4 * v11) = v14 + (((a8 ^ a4) + 212) ^ (v10 + 198)) - (((a8 ^ a4) - 921743304) & (2 * v14));
  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((((a5 ^ HIDWORD(v14)) + (a6 & (v14 >> 31)) + a7 == v13) * v12) ^ a8 ^ a4))
                            - 8))();
}

uint64_t sub_10007498C(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  _BOOL4 v7;
  int v8;
  _BOOL4 v9;

  v6 = *v5 + 1784796755;
  v7 = v3 + 1784796755 < 149 * (a3 ^ 0x3A2) - 124786424;
  v8 = v7 ^ (v6 < -124785381);
  v9 = v3 + 1784796755 > v6;
  if (!v8)
    v7 = v9;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((v7 * ((a3 + 110) ^ 0x41E)) ^ a3)) - 12))();
}

void sub_100074A04()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

void sub_100074A28(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20) - 1178560073 * ((-846133519 - (a1 | 0xCD9106F1) + (a1 | 0x326EF90E)) ^ 0xD55BDB66);
  __asm { BR              X10 }
}

uint64_t sub_100074B08@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, int a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  v14 = (((&a4 | 0x76062D6A) - &a4 + (&a4 & 0x89F9D290)) ^ 0x91330F02) * a1;
  a4 = &STACK[0x7F1325F673F67E5F];
  a5 = &STACK[0x20BA795F69D3FB5];
  a9 = v12;
  a6 = v13 - v14 - 478;
  a7 = 858862209 - v14;
  v15 = ((uint64_t (*)(unint64_t **))(*(_QWORD *)(v9 + 8 * (v13 - 858)) - 8))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v11
                                                      + 8
                                                      * (((*(_DWORD *)(v12 - 0x56428495FB6297ALL) == v10)
                                                        * (((v13 - 1380672038) & 0x524B5FB4) + 1424)) ^ v13))
                                          - ((v13 - 1380672038) ^ 0xADB4A6EA)
                                          + 1925))(v15);
}

uint64_t sub_100074BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  int v10;
  uint64_t v11;
  int v12;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11
                                        + 8 * ((52 * ((a10 ^ (v10 - 933) ^ ((v12 ^ 0x6A1u) + 1143)) > 0x14)) ^ v12))
                            - 12))();
}

void sub_100074C38(_DWORD *a1@<X8>)
{
  uint64_t v1;
  int v2;

  *a1 = v2 + 148;
  *(_DWORD *)(v1 + 16) = *a1;
}

void df35957c4e0()
{
  int v0[10];

  v0[1] = 1178560073 * ((-1176344558 - (v0 | 0xB9E26812) + (v0 | 0x461D97ED)) ^ 0xA128B585)
        - 1501685844;
  sub_1000AABF4(v0);
  __asm { BR              X8 }
}

uint64_t sub_100075120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  a14 = (831981571 * ((295820161 - (&a13 | 0x11A1DB81) + (&a13 | 0xEE5E247E)) ^ 0x77FFF45A)) ^ 0x87;
  a13 = &STACK[0x82D647BA4E69FD1];
  sub_10006A5D8((uint64_t)&a13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16
                                                                                + 8 * ((470 * (a15 == v15)) ^ 0x655u)))(v17, v18, v19, v20, v21);
}

uint64_t sub_1000751C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, int a16)
{
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v20 = 1224239923
      * ((-1424351604 - (&a13 | 0xAB1A1E8C) + (&a13 | 0x54E5E173)) ^ 0xA6561CA4);
  a15 = a10;
  a16 = v20 ^ 0x3A4;
  a13 = v16 - v20 - (((v19 ^ 0x1F428E9D) - 1090971246) & (2 * v16)) - 283258579;
  sub_100080318((uint64_t)&a13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18
                                                                                         + 8
                                                                                         * ((435 * (a14 == v17)) ^ v19)))(v21, v22, v23, v24, v25, v26);
}

uint64_t sub_100075280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, uint64_t a16, unint64_t *a17, int a18)
{
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;

  v22 = ((((2 * &a13) | 0x1A80A97C) - &a13 + 1925163842) ^ 0x7FF3A969) * v21;
  a16 = a10;
  a17 = &STACK[0x72F2C1D3322B8800];
  a15 = v22 ^ 0x6377A211;
  a13 = v22 ^ 0x12B68929;
  a14 = (v20 + 368401670) ^ v22;
  v23 = sub_1000AACB4((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19 + 8 * ((870 * (a18 == v18)) ^ (v20 + 2752)))
                                          - ((v20 - 928912332) & 0x375E1FF5)
                                          + 1617))(v23);
}

uint64_t sub_100075350@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6, uint64_t a7, unsigned int a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  a8 = v8
     - 944348131
     * (((&a6 ^ 0x314AC0E1 | 0xCC251B0C) + (&a6 ^ 0x240B00 | 0x33DAE4F3)) ^ 0x92776FAE)
     - 741;
  a6 = &STACK[0x20BA795F69D3FC5];
  a7 = a1;
  ((void (*)(unint64_t **))(*(_QWORD *)(v10 + 8 * (v8 & 0x3E6A59FA)) - 8))(&a6);
  a6 = a5;
  LODWORD(a7) = v8
              - 241568881
              * ((((&a6 | 0xDDC2490C) ^ 0xFFFFFFFE) - (~&a6 | 0x223DB6F3)) ^ 0xF42CB2B1)
              - 677;
  v11 = sub_1000906D4((uint64_t)&a6);
  return (*(uint64_t (**)(uint64_t))(v9 + 8 * ((237 * (a5 != 0)) ^ (v8 + 362))))(v11);
}

uint64_t sub_10007547C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t (*v8)(unsigned int *);
  int v9;
  uint64_t v10;

  a6 = (v9 - 524453936) ^ (69008221
                         * (((&a6 | 0x6BD0036D) - (&a6 & 0x6BD0036D)) ^ 0xB8725167));
  a7 = a1;
  v10 = v8(&a6);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v7 + 8 * ((483 * (a3 == 0)) ^ (v9 - 524453328)))
                                          - ((v9 - 1821333865) & 0x4D4CD3BB)
                                          + 791))(v10);
}

uint64_t sub_100075524@<X0>(uint64_t a1@<X8>)
{
  int v1;
  unsigned int v2;
  void (*v3)(unsigned int *);
  int v4;
  unsigned int v6;
  uint64_t v7;

  v7 = a1;
  v6 = (v1 - 643) ^ (69008221
                   * (((&v6 | 0x4F9F18DC) - &v6 + (&v6 & 0xB060E720)) ^ 0x9C3D4AD6));
  v3(&v6);
  return v4 ^ v2;
}

void sub_1000755F4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v1 = *(_DWORD *)(a1 + 8) + 460628867 * ((-1228667218 - (a1 | 0xB6C406AE) + (a1 | 0x493BF951)) ^ 0x5AD7B2C);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(unint64_t **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = *(unint64_t **)(v2 - 0x73495CDCA303A988);
  v12 = *(_QWORD *)a1;
  v11 = v1 - 1224239923 * ((&v7 - 1600500025 - 2 * (&v7 & 0xA09A4EC7)) ^ 0x5229B310) + 860;
  v9 = v5;
  v10 = v2;
  v7 = v3;
  v8 = &STACK[0x2DB44D49A49B004E];
  ((void (*)(uint64_t *))((char *)*(&off_10025FA20 + v1 - 675) - 8))(&v7);
  v6 = *(_QWORD *)(v2 - 0x73495CDCA303A990);
  LODWORD(v8) = v1
              + 831981571
              * ((1193525828 - (&v7 | 0x4723C244) + (&v7 | 0xB8DC3DBB)) ^ 0x217DED9F)
              - 473;
  v7 = v6;
  v9 = &STACK[0x2DB44D49A49B005E];
  sub_100085594((uint64_t)&v7);
  v8 = v4;
  LODWORD(v9) = (944348131 * (((&v7 | 0x113A7D54) - (&v7 & 0x113A7D54)) ^ 0xB223D91A)) ^ (v1 - 651);
  sub_10007F638((uint64_t)&v7);
  __asm { BR              X8 }
}

uint64_t sub_100075854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t), uint64_t a12)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v19 - 128) = v14;
  *(_QWORD *)(v19 - 120) = v16;
  *(_QWORD *)(v19 - 104) = a12;
  *(_QWORD *)(v19 - 144) = v15;
  *(_QWORD *)(v19 - 136) = v14;
  *(_DWORD *)(v19 - 112) = v13 - 1224239923 * ((v19 - 144) ^ 0xF2B3FDD7) + 611;
  v20 = a11(v19 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v12
                                                      + 8
                                                      * ((13
                                                        * (v18 + v17 + 13 * ((v13 - 249) ^ 0x363u) - 1067 < 0x7FFFFFFF)) ^ (v13 - 249)))
                                          - 8))(v20);
}

uint64_t sub_1000758D8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  *(_DWORD *)(v7 - 120) = v1 + 69008221 * ((v7 - 144) ^ 0xD3A2520A) + 937;
  *(_QWORD *)(v7 - 136) = v2;
  *(_QWORD *)(v7 - 128) = v2;
  *(_QWORD *)(v7 - 112) = v4;
  *(_QWORD *)(v7 - 144) = v3;
  ((void (*)(uint64_t))((char *)*(&off_10025FA20 + (v1 ^ 0x40D)) - 8))(v7 - 144);
  v8 = 2078219279 * ((((v7 - 144) | 0xFA4A981B) - (v7 - 144) + ((v7 - 144) & 0x5B567E0)) ^ 0x20B00E6F);
  *(_DWORD *)(v7 - 140) = -1307958045 - v8 + v5;
  *(_QWORD *)(v7 - 136) = v6;
  *(_DWORD *)(v7 - 128) = (v1 + 612) ^ v8;
  v9 = sub_1000902B0(v7 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v0 + 8 * ((500 * (*(_DWORD *)(v7 - 144) != 657247804)) ^ v1))
                                          - ((43 * (v1 ^ 0x439u)) ^ 0x339)))(v9);
}

uint64_t sub_1000759D4()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((13 * (v3 + v2 + 13 * (v1 ^ 0x363u) - 1067 < 0x7FFFFFFF)) ^ v1))
                            - 8))();
}

uint64_t sub_100075A14()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;

  v5 = *(_QWORD *)(v8 + 32);
  v6 = 831981571 * ((((v4 - 144) | 0x90F04090) - ((v4 - 144) & 0x90F04090)) ^ 0x95190B4);
  *(_QWORD *)(v4 - 144) = v10;
  *(_DWORD *)(v4 - 136) = v0 - v6 - 611;
  *(_DWORD *)(v4 - 132) = v6 + 376798310;
  sub_10008A9E4(v4 - 144);
  *(_QWORD *)(v4 - 128) = v1;
  *(_QWORD *)(v4 - 120) = v3;
  *(_DWORD *)(v4 - 112) = v0 - 1224239923 * ((v4 - 144) ^ 0xF2B3FDD7) + 860;
  *(_QWORD *)(v4 - 144) = v2;
  *(_QWORD *)(v4 - 136) = v1;
  *(_QWORD *)(v4 - 104) = v10;
  v9(v4 - 144);
  *(_DWORD *)(v4 - 136) = v0 + 831981571 * (((v4 - 144) & 0x591B3C7C | ~((v4 - 144) | 0x591B3C7C)) ^ 0x3F4513A7) - 473;
  *(_QWORD *)(v4 - 144) = v1;
  *(_QWORD *)(v4 - 128) = v5;
  return sub_100085594(v4 - 144);
}

void sub_100075B34(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD v6[2];
  uint64_t v7;

  v1 = *(_DWORD *)(a1 + 24) - 1224239923 * ((-223099009 - (a1 | 0xF2B3C77F) + (a1 | 0xD4C3880)) ^ 0xFFFFC557);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x2DB44D49A49B002ALL) - 237901512 >= 0)
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x2DB44D49A49B002ALL) - 237901512;
  else
    v3 = 237901512 - *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x2DB44D49A49B002ALL);
  v2 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v2 - 0x2DB44D49A49B002ALL) - 237901512 >= 0)
    v4 = *(_DWORD *)(v2 - 0x2DB44D49A49B002ALL) - 237901512;
  else
    v4 = 237901512 - *(_DWORD *)(v2 - 0x2DB44D49A49B002ALL);
  v7 = *(_QWORD *)(a1 + 8);
  v6[1] = v1 - 1224239923 * ((((2 * v6) | 0x15CF2FCC) - v6 + 1964533786) ^ 0x78546A31) + 196;
  sub_1000651F8((uint64_t)v6);
  if (v3 >= v4)
    v5 = v4;
  else
    v5 = v3;
  __asm { BR              X13 }
}

uint64_t sub_100075CB0@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  _BOOL4 v16;

  v11 = v3 - 1251728825;
  v12 = (v10 - 111) | 0x41;
  v13 = 4 * (v9 + v4);
  v14 = v7
      + 927270150
      + (*(_DWORD *)(*(_QWORD *)(v6 - 0x2DB44D49A49B0026) + v13) ^ v8)
      + (*(_DWORD *)(*(_QWORD *)(a2 - 0x2DB44D49A49B0026) + v13) ^ v8);
  *(_DWORD *)(*(_QWORD *)(a1 - 0x2DB44D49A49B0026) + v13) = v14 + v8 - ((v14 << (((v12 + 53) | 0x74) ^ 0x75)) & v5);
  v16 = v9 + 1953609186 < 895754823 && v9 + 1953609186 >= v11;
  return ((uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 + 8 * ((50 * v16) ^ v12))
                                                                                                - 8))(116, 373, 0xDBD6AF3EFFFF77D6, 0x37FFDDD737458D30, 1953609186, 895754823);
}

uint64_t sub_100075DB4()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  _BOOL4 v4;

  v4 = v2 - 165332095 < (int)(v3 + 924297191);
  if (v2 - 165332095 < -1223186457 != v3 > ((4 * v1) ^ 0x48E85C31 ^ (5 * (v1 ^ 0x111u))))
    v4 = v3 > ((4 * v1) ^ 0x48E85C31 ^ (5 * (v1 ^ 0x111u)));
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((224 * !v4) ^ v1)) - 8))();
}

uint64_t sub_100075E38()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  _BOOL4 v6;

  v4 = v1 + 886 + v2 + 1146477976;
  v6 = v4 > 88625455 || v4 < v3 + ((v1 - 952) | 0x12A) - 2058858494;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((1248 * v6) ^ v1)) - 12))();
}

uint64_t sub_100075E94@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  _BOOL4 v17;

  v13 = 4 * (v12 + v8);
  v14 = v3 + v10 + (*(_DWORD *)(*(_QWORD *)(a2 - 0x2DB44D49A49B0026) + v13) ^ v11);
  *(_DWORD *)(*(_QWORD *)(a1 - 0x2DB44D49A49B0026) + v13) = v14 + v11 - (v9 & (2 * v14));
  v15 = v4 + v12 + 1843;
  v17 = v15 <= v5 && v15 >= v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((658 * v17) ^ v6)) - 12))();
}

uint64_t sub_100075F58()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((88 * (v1 != ((v2 - 1513) | 0xB0u) + 0x13D68D163745030DLL)) ^ v2))
                            - 8))();
}

void sub_100075F9C(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  char v3;
  int v4;
  int v5;
  int v6;

  *(_DWORD *)(*(_QWORD *)(a1 - 0x2DB44D49A49B0026) + 4 * (v6 + v4)) = v2
                                                                        - (((v2 << (v3 - 49)) - 1854540300) & v5)
                                                                        - 1388141679;
  *(_DWORD *)(a1 - 0x2DB44D49A49B002ALL) = (((v6 + 1 + v4) * (v1 - 405110594)) ^ 0xAE7F17DF)
                                         + 1605304041
                                         + ((2 * (v6 + 1 + v4) * (v1 - 405110594)) & 0x5CFE2FBE);
}

void sub_100076164(uint64_t a1)
{
  int v1;
  _BOOL4 v3;

  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x2DB44D49A49B002ALL) != 237901512
    && *(_DWORD *)(*(_QWORD *)a1 - 0x2DB44D49A49B002ALL) != 237901512;
  v1 = *(_DWORD *)(a1 + 16) + 460628867 * ((-2 - ((a1 | 0x675F0E27) + (~(_DWORD)a1 | 0x98A0F1D8))) ^ 0xD43673A5);
  __asm { BR              X13 }
}

uint64_t sub_100076270@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (v3 ^ (2 * (((v3 ^ ((a1 + v2 - 133) < 0x7FFFFF7D)) & 1) == 0))))
                            - ((353 * (v3 ^ 0x3E8u)) ^ 0x588)))();
}

uint64_t sub_1000762BC()
{
  uint64_t v0;
  int v1;
  int v2;

  return (*(uint64_t (**)(uint64_t))(v0 + 8 * (v2 ^ (820 * (v1 > 0)))))(1239661710);
}

uint64_t sub_10007631C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _BOOL4 v18;
  int v19;
  uint64_t v20;
  int v21;
  _BOOL4 v22;

  v18 = v15 > v17;
  *(_DWORD *)(a12 + 4 * (a1 - 1239661710)) = v13;
  v19 = a1 - 1326985272;
  v20 = (a1 + 1);
  v21 = v18 ^ (v19 < ((v16 - 1678771124) & 0x641005BF) + 2060158673);
  v22 = v19 < v14;
  if (!v21)
    v18 = v22;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v12 + 8 * ((248 * !v18) ^ v16)) - 4))(v20);
}

uint64_t sub_1000763A4()
{
  uint64_t v0;
  int v1;
  int v2;

  return (*(uint64_t (**)(void))(v0 + 8 * (int)(((((v2 + 939314737) & 0xC8032D7F) - 299) * (v1 == 0)) | v2)))();
}

uint64_t sub_1000763DC()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((((v2 + 931) ^ 0x4B3) * (v1 > 0)) ^ v2))
                            - ((v2 + 1584) ^ 0x671)))();
}

uint64_t sub_100076430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;

  return ((uint64_t (*)(void))(*(_QWORD *)(v12
                                        + 8
                                        * (int)(((*(_DWORD *)(a12 + 4 * (v15 + v16 + 1)) == v13)
                                               * (((v14 - 489771659) ^ 0xE2CEB3A7)
                                                + ((v14 - 489771659) & 0x1D314FFD)
                                                - 844)) ^ (v14 - 1584)))
                            - 8))();
}

uint64_t sub_10007648C()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * (v1 | (4 * ((v2 + v3) < 0x7FFFFFFF)) | (((v2 + v3) < 0x7FFFFFFF) << 9)))
                            - 8))();
}

uint64_t sub_1000764E0@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((*(_DWORD *)(v3 + 4 * (v5 + v6 + 1)) == v2)
                                          * (((v4 + a1) ^ (a1 + 1586)) + ((v4 + a1) & 0x1D314FFD) - 844)) ^ (v4 - 1584)))
                            - 8))();
}

uint64_t sub_100076530()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(v2 - 116) = v1 - 303 - 1224239923 * ((v2 - 2134978843 - 2 * ((v2 - 120) & 0x80BECF5D)) ^ 0x720D328A);
  *(_QWORD *)(v2 - 112) = v4;
  sub_1000651F8(v2 - 120);
  *(_DWORD *)(v2 - 116) = v1
                        - 303
                        - 1224239923 * ((((v2 - 120) | 0x1D62533F) + (~(v2 - 120) | 0xE29DACC0)) ^ 0xEFD1AEE9);
  *(_QWORD *)(v2 - 112) = v5;
  sub_1000651F8(v2 - 120);
  *(_QWORD *)(v2 - 120) = v0;
  *(_QWORD *)(v2 - 104) = v5;
  *(_DWORD *)(v2 - 112) = v1 + 831981571 * ((2 * ((v2 - 120) & 0x6F747E28) - (v2 - 120) - 1869905454) ^ 0x92A51F6) - 660;
  return sub_100085594(v2 - 120);
}

void jEHf8Xzsv8K(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_100076978@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void))(a1 + 208))();
  return 0;
}

uint64_t sub_10007698C()
{
  return 4294925273;
}

void sub_100076998(unint64_t a1)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL4 v13;
  uint64_t v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  _DWORD *v23;
  int v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  unint64_t *v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  char v34;
  char v35;
  char v36;
  char v37;
  int v38;
  unint64_t *v39;
  unsigned int v40;
  unsigned int v41;

  v2 = 3804331 * ((-2 - ((~(_DWORD)a1 | 0x3DED129D) + (a1 | 0xC212ED62))) ^ 0x4338376B);
  v3 = *(_DWORD *)(a1 + 28);
  v4 = *(_DWORD *)(a1 + 24) + v2;
  v5 = 235795823 * ((&v39 - 1061334659 - 2 * (&v39 & 0xC0BD517D)) ^ 0x54101824);
  v6 = *(_DWORD *)(a1 + 40) + v2;
  v22 = 3804331 * ((-2 - ((~a1 | 0xEED202043DED129DLL) + (a1 | 0x112DFDFBC212ED62))) ^ 0x217B62004338376BLL);
  v7 = v3 - v2;
  v40 = v5 ^ 0xFE0643CC;
  v41 = v4 + v5 + 426522932;
  v28 = &STACK[0x73F39308AC2F38BB];
  v39 = &STACK[0x73F39308AC2F38BB];
  sub_1000639C8((uint64_t)&v39);
  v8 = v6;
  v9 = (_DWORD *)a1;
  v10 = (char *)*(&off_10025FA20 + (int)(v4 - 11)) - 4;
  v21 = v7 - 1372468415;
  v20 = v7 + 992622547;
  v18 = v7 + 1509110672;
  v17 = v4 + 1733885513;
  v24 = v7 + 1385117784;
  v15 = (char *)&v15 - 192133341;
  v29 = v4 ^ 0x34;
  v33 = v4 ^ 0x3C;
  v16 = v4 + 1292136346;
  v19 = v4 + 1292136346;
  v32 = v19;
  v31 = v4;
  v26 = vdupq_n_s32(0x1D30BEE6u);
  v27 = vdupq_n_s32(0x1D30BEEEu);
  v25 = vdupq_n_s32(0x1D30BEFFu);
  v23 = v9;
  v11 = *((_QWORD *)v9 + 2);
  v12 = v8 - (((v8 << (((v4 - 87) & 0xDF) + 35)) + (((v4 + 505) | 0xA0) ^ 0x7777A370)) & 0x59B231B0) + 1754589607;
  v34 = (HIBYTE(v12) ^ 0xAC) + ((4 * (v12 >> 25)) ^ 0xA7) - 1;
  v35 = (BYTE2(v12) ^ 0xD9) + ((2 * ((BYTE2(v12) ^ 0xD9 | 0x7E) ^ BYTE2(v12))) ^ 0xB1) - 1;
  v36 = (BYTE1(v12) ^ 0x18) - ((2 * (BYTE1(v12) ^ 0x18)) & 0xFC) - 2;
  v37 = (v8 - ((((_BYTE)v8 << (((v4 - 87) & 0xDF) + 35)) + (((v4 - 7) | 0xA0) ^ 0x70)) & 0xB0) - 89) ^ 0x26;
  v13 = ((2 * v38) & 0x6A ^ 0x2A) + (v38 & 0x3F ^ 0x39FDFCE0u) - 972946737 > 0xFFFFFFBF;
  v14 = *(_QWORD *)&v10[8 * (v13 | (2 * v13) | (v4 + 1539))] - 4;
  v30 = v11;
  __asm { BR              X16 }
}

uint64_t sub_100076D78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11)
{
  int v11;
  char v12;
  int v13;
  uint64_t v14;
  int v15;

  v15 = v11 - 713;
  *(_BYTE *)(a3 + (v13 + v15 - 1046)) = v12;
  *(_BYTE *)(a3 + a9 + ((v15 - 960) ^ 0xC72A3B59)) = *(_BYTE *)(a6 + 1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8 * (v15 ^ 0x1AD)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11);
}

uint64_t sub_100078588@<X0>(uint64_t a1@<X2>, uint64_t a2@<X5>, int a3@<W8>)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  *(_BYTE *)(a1 + (a3 - 953533768 + v5)) = *(_BYTE *)(a2 + (v6 - 637245485));
  return (*(uint64_t (**)(void))(v7 + 8 * (v4 ^ (934 * ((v3 & 0xFFFFFFFC) == 637245484)))))();
}

uint64_t sub_1000785D8@<X0>(uint64_t a1@<X2>, uint64_t a2@<X5>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  *(_BYTE *)(a1 + (a3 - 953533682)) = *(_BYTE *)(a2 + (v21 - 637245569 + v20));
  v23 = 831981571
      * ((((v22 - 160) ^ 0xA1FAE2DE | 0x727E95CD)
        - ((v22 - 160) ^ 0xA1FAE2DE)
        + (((v22 - 160) ^ 0xA1FAE2DE) & 0x8D816A32)) ^ 0x4A25A737);
  *(_DWORD *)(v22 - 160) = v23 ^ 0x5FF5036A;
  *(_DWORD *)(v22 - 156) = v23 + v20 + 1253;
  *(_QWORD *)(v22 - 152) = a20;
  v24 = sub_10008B438(v22 - 160);
  return a13(v24);
}

uint64_t sub_100078678()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * ((((v2 ^ 0x6AF) + 409) * (v0 != v1)) ^ v2)))();
}

uint64_t sub_1000786A4@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  *(_BYTE *)(a1 + a2 + v4) = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((((unint64_t)(a2 + 1 + v4) < 0x38) * v3) ^ (v2 + 627)))
                            - 4))();
}

void sub_1000786D4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  unint64_t v18;

  v11 = LOBYTE(STACK[0x2CC]) ^ 0xE;
  if (v11 == 1)
  {
    v15 = STACK[0x2B0];
    v16 = STACK[0x2AC];
    v17 = (LODWORD(STACK[0x2B0]) >> 5) ^ 0x6C;
    LOBYTE(STACK[0x2A4]) = -((LOBYTE(STACK[0x2B0]) << ((a2 + 26) ^ 0x6C)) ^ 0xA8) - 2;
    LOBYTE(STACK[0x2A5]) = v17 + ((v15 >> 4) & 0xFC ^ 0x27) - 1;
    LOBYTE(STACK[0x2A6]) = ((v15 >> 13) ^ 0x62) + ((v15 >> 12) & 0xFC ^ 0x3B) - 1;
    LOBYTE(STACK[0x2A7]) = ((v15 >> 21) ^ 0x29) - ((2 * ((v15 >> 21) ^ 0x29)) & 0xFC) - 2;
    HIDWORD(v18) = v16 ^ 8;
    LODWORD(v18) = v15;
    LOBYTE(STACK[0x2A8]) = (v18 >> 29) - ((2 * (v18 >> 29)) & 0xFC) - 2;
    LOBYTE(STACK[0x2A9]) = ((v16 >> 5) ^ 0x7C) + ((v16 >> 4) & 0xFC ^ 7) - 1;
    LOBYTE(STACK[0x2AA]) = ((v16 >> 13) ^ 0x21) + ((2 * (((v16 >> 13) ^ 0x21 | 0x7E) ^ (v16 >> 13))) ^ 0x41) - 1;
    v14 = ((v16 >> 21) ^ 0xFFFFFFCE) - 4 * (((v16 >> 21) ^ 0xFFFFFFCE) >> 1) - 2;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_6;
    v14 = STACK[0x2AC];
    v12 = STACK[0x2B0];
    LOBYTE(STACK[0x2A4]) = ((LODWORD(STACK[0x2AC]) >> 21) ^ 0xCE) + ((LODWORD(STACK[0x2AC]) >> 20) & 0xFC ^ 0x63) - 1;
    LOBYTE(STACK[0x2A5]) = (a11 & 0x7F ^ (v14 >> 13) ^ 0x4E) - ((2 * (a11 & 0x7F ^ (v14 >> 13) ^ 0x4E)) & 0xFC) - 2;
    LOBYTE(STACK[0x2A6]) = ((v14 >> 5) ^ 0x7C) - ((2 * ((v14 >> 5) ^ 0x7C)) & 0xFC) - 2;
    HIDWORD(v13) = v14 ^ 8;
    LODWORD(v13) = v12;
    LOBYTE(STACK[0x2A7]) = (v13 >> 29) - ((2 * (v13 >> 29)) & 0xFC) - 2;
    LOBYTE(STACK[0x2A8]) = ((v12 >> 21) ^ 0x29) - ((2 * ((v12 >> 21) ^ 0x29)) & 0xFC) - 2;
    LOBYTE(STACK[0x2A9]) = ((v12 >> 13) ^ 0x62) - ((2 * ((v12 >> 13) ^ 0x62)) & 0xFC) - 2;
    LOBYTE(STACK[0x2AA]) = ((v12 >> 5) ^ 0x6C) - ((2 * ((v12 >> 5) ^ 0x6C)) & 0xFC) - 2;
    LOBYTE(v14) = ((16 * v12) ^ 0xAF) + ((8 * v12) ^ 0xAB) - 4;
  }
  LOBYTE(STACK[0x2AB]) = v14;
LABEL_6:
  JUMPOUT(0x100077630);
}

uint64_t sub_10007893C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  int v35;
  unint64_t v36;

  if (a30 == 2)
    return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v33
                                                        + 8
                                                        * ((a2 + 1068) | (32
                                                                        * (LODWORD(STACK[0x2C8]) == (a2 ^ 0x4D4) + 1763402285))))
                                            - 8))(a17);
  if (a30 == 1)
    return ((uint64_t (*)(void))(*(_QWORD *)(v33
                                          + 8
                                          * ((107 * (LODWORD(STACK[0x2C8]) != (((a2 - 52) | 0x480) ^ 0x691B620F))) ^ (a2 + 1100)))
                              - 8))();
  v35 = 23 * (a2 ^ 0x45);
  v36 = ((unint64_t)&a33 ^ 0xBB67EF6777FF5BFBLL)
      + 0x75FF5BDDDFABBD8BLL
      + (((_QWORD)&a33 << (23 * (a2 ^ 0x45u) - 111)) & 0x76CFDECEEFFEB7F0);
  LOBYTE(STACK[0x2C7]) = ((v36 + 122) ^ 0xBA) * (v36 + (v35 ^ 0xFB));
  return ((uint64_t (*)(void))(*(_QWORD *)(v33 + 8 * v35) - 4))();
}

void sub_100078CC0()
{
  JUMPOUT(0x100078C8CLL);
}

uint64_t sub_100078CC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v19 = *(_QWORD *)(a15 + 8);
  *(_QWORD *)(v18 - 176) = 0xFEFEFEFEFEFEFEFELL;
  *(_QWORD *)(v18 - 168) = 0xFEFEFEFEFEFEFEFELL;
  v20 = ((2 * ((v18 - 160) & 0x8B7C4E0) - (v18 - 160) - 146261217) ^ 0x63E57246) * a3;
  *(_QWORD *)(v18 - 120) = v18 - 176;
  *(_QWORD *)(v18 - 160) = v18 - 192;
  *(_QWORD *)(v18 - 144) = &STACK[0x258];
  *(_QWORD *)(v18 - 136) = v19;
  *(_DWORD *)(v18 - 124) = (v16 + 1799) ^ v20;
  *(_DWORD *)(v18 - 152) = v20 + 2046750649;
  v21 = ((uint64_t (*)(uint64_t))((char *)*(&off_10025FA20 + (v16 ^ 0xF2)) - 8))(v18 - 160);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15 + 8 * ((1044 * (*(_DWORD *)(v18 - 128) == v17)) ^ v16))
                                          - ((v16 + 899) | 0x91u)
                                          + 1175))(v21);
}

uint64_t sub_100078DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BOOL4 v10;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 32) + v0 - 0x6BCE5708FE675609);
  v7 = ((v6 - *(unsigned __int8 *)(v5 + v0 - 0x6BCE5708FE675609)) ^ 0x6ED67FBB)
     - 1335563
     + ((2 * (v6 - *(unsigned __int8 *)(v5 + v0 - 0x6BCE5708FE675609))) & 0xDDACFF76);
  v8 = v0 + 1;
  v10 = v7 != 1858215600 || v8 == ((v4 - 1098) ^ (unint64_t)(v2 + 67));
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((618 * v10) ^ v4)) - 8))();
}

uint64_t sub_100078E44@<X0>(int a1@<W8>)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v4 = 460628867 * ((~(v3 - 160) & 0x21D797604EF5C5DELL | (v3 - 160) & 0xDE28689FB10A3A21) ^ 0x6348DA0E026347A3);
  *(_DWORD *)(v3 - 144) = ((a1 + 1328983807) | 9) + v4;
  *(_DWORD *)(v3 - 140) = a1 + 1328983807 - v4;
  *(_DWORD *)(v3 - 148) = ((a1 + 1328983807) ^ 0x8B) - v4;
  *(_QWORD *)(v3 - 136) = v4 + v1;
  *(_QWORD *)(v3 - 128) = 1858215600 - v4;
  *(_DWORD *)(v3 - 160) = v4;
  *(_DWORD *)(v3 - 156) = (a1 - 1017209884) ^ v4;
  v5 = ((uint64_t (*)(uint64_t))((char *)*(&off_10025FA20 + a1 - 76) - 8))(v3 - 160);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * *(int *)(v3 - 152)) - 8))(v5);
}

void sub_100078F18()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 4) = 489733862;
}

void sub_100078F64(uint64_t a1)
{
  __asm { BR              X8 }
}

uint64_t sub_100078FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t v67;

  a21 = 2037438032;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *))(*(_QWORD *)(v67 + 3952) - 4))(a1, a2, a3, a4, a5, &a21, a7, 2507737077, a9, &a67, a11, &STACK[0x2DA3ABA5EF040AE9]);
}

uint64_t sub_100079160()
{
  int v0;
  int v1;
  uint64_t v2;
  char v3;
  char v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((230 * (((v1 == 1787230218) ^ (v4 + v3 + v0 - 127 - 60)) & 1)) ^ v0))
                            - 4))();
}

uint64_t sub_1000791AC@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  _BOOL4 v22;

  v17 = v16 + a1;
  v18 = (v17 - 128) ^ 0x3EC;
  v19 = (v17 - 128) | 0x80;
  v20 = v17 + 840;
  v21 = v19 + v14 - 446080321;
  v22 = a14 - 463761223 < v21;
  if (a14 - 463761223 < (v18 ^ 0x4087554Bu) != v21 < 0x408756E2)
    v22 = v21 < 0x408756E2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * (v20 ^ (16 * v22))) - 12))();
}

uint64_t sub_1000793EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v21 = 460628867 * ((~((v20 - 160) | 0x6BDD079) + ((v20 - 160) & 0x6BDD079)) ^ 0xB5D4ADFB);
  a6[72] = a17;
  a6[76] = a12;
  a6[75] = a13;
  a6[74] = a15;
  a6[70] = a14;
  *(_DWORD *)(v20 - 152) = v21 + v17 - 1455228513;
  *(_DWORD *)(v20 - 132) = v19 - v21 + 186;
  v22 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(a5 + 8 * (v19 - 186)) - 4))(v20 - 160);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18
                                                      + 8
                                                      * (((*(_DWORD *)(v20 - 136) == 489733862)
                                                        * (v19 + ((v19 - 174) | 0x528) - 70)) ^ v19))
                                          - 4))(v22);
}

uint64_t sub_1000794E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11
                                                                                          + 8
                                                                                          * (int)(((*(_DWORD *)(v13 + 48 * (v9 + a8)) != 956521911)
                                                                                                 * ((v12 + ((v10 - 439803738) & 0x1A36DADF) - 280) ^ ((v10 + 170442196) | 0xA0010C40))) ^ v10))
                                                                              - 4))(a1, a2, a3, a4, v8);
}

uint64_t sub_100079558()
{
  int v0;
  unsigned int v1;
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((2275 * ((v0 ^ 0x46832FB9 ^ (v1 - 9707850) & 0xAABDEFD7) == v3 - 973299127)) ^ v1))
                            + 2854866763
                            - (v2 - 197)
                            + 4))();
}

void sub_1000795C8(int a1@<W8>)
{
  __asm { BR              X10 }
}

uint64_t sub_1000796A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20)
{
  int v20;
  uint64_t v21;

  return ((uint64_t (*)(void))(*(_QWORD *)(v21
                                        + 8
                                        * ((115
                                          * (((((v20 + 1972291997) & 0x8A7133F7) - 0x52D08832010C84D4) ^ (a20 - 1528691550))
                                           + 0x52D08832F37818DBLL
                                           + ((2 * (a20 - 1528691550)) & 0x1FDE6F7E2) == a7)) ^ v20))
                            - 12))();
}

uint64_t sub_100079754()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v5 = *(unsigned __int8 *)(v0 + v3 - 0x7705FC3E89A913DLL)
     - (*(unsigned __int8 *)(v1 + v3 - 0x7705FC3E89A913DLL) ^ 0xFE);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((343
                                          * (((v5 << (((v2 + 75) | 0x20) - 47)) & (((v2 - 1474280308) | 0x2098A02) ^ 0xD5D6203D))
                                           + (v5 ^ 0x3FFFF7B7) == 1073739703)) ^ v2))
                            - 4))();
}

uint64_t sub_1000797EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _BOOL4 v11;

  v11 = v7 < a7;
  if (v11 == v8 - 0x7705FC2F62EFC70 < a7)
    v11 = v8 - 0x7705FC2F62EFC70 < v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * (((((v9 - 688) | 0x45) - 82) * !v11) ^ v9)) - 12))();
}

uint64_t sub_100079854()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (int)(((v2 ^ (v4 + 67) ^ (v4 + ((v2 + 1742772986) & 0x981F67DF) - 2045))
                                               * (v0 - v1 == 198084261)) ^ v2))
                            - 4))();
}

uint64_t sub_1000798BC@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (v1 ^ (37 * (a1 != 0))))
                            - (v1 - v3 - 730)
                            - ((v1 - v3 - 730) ^ 0xFFFFFFFFFFFFFFE6)))();
}

uint64_t sub_1000798F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  int v21;
  uint64_t v22;
  int v23;

  return ((uint64_t (*)(void))(*(_QWORD *)(v22
                                        + 8
                                        * ((((a21 & 0xFFFFFFF0) == 2037438032) * (v21 + v23 + 1680)) ^ (v21 + v23)))
                            - 4))();
}

uint64_t sub_100079924@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a64;
  int a65;
  int a66;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  if (!a2)
    return ((uint64_t (*)(void))(*(_QWORD *)(v69
                                          + 8
                                          * ((((a15 & 0xFFFFFFF0) == 2037438032) * (v71 + v72 + 1680)) ^ (v71 + v72)))
                              - 4))();
  if (a2 != 3)
    return ((uint64_t (*)(void))(*(_QWORD *)(v69
                                          + 8
                                          * ((106
                                            * (((24 - v71) ^ (*(_DWORD *)(v73 + 48 * v70 + 36)
                                                                             + 360253429 < v74)) & 1)) ^ (v72 - 1440100547)))
                              - 4))();
  a64 = v66;
  a65 = a14;
  *(_QWORD *)(a1 + 400) = a13;
  a66 = HIDWORD(a14) - v67 + 1604277838;
  *(_QWORD *)(a1 + 416) = a11 + (v67 - 1546372649);
  v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 48 * v70 + 8))(a5, a4);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 + 8 * ((1286 * ((_DWORD)v75 + 489733862 - ((2 * (_DWORD)v75) & 0x3A617DCC) == 489733862)) ^ (v71 + v72))) - 4))(v75, v76, v77, 489733862, v68, &a15, v78, 2507737077, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57);
}

uint64_t sub_100079A8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22)
{
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;

  v29 = a6 + 24 * (((a9 + 1377585914) & 0xADE3B4EF ^ 0x868F291F) + v22);
  *(_DWORD *)(v29 + 8) = v23;
  *(_DWORD *)(v29 + 12) = v24;
  *(_QWORD *)(v29 + 16) = a18;
  *(_DWORD *)(v29 + 24) = a22;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 + 8 * ((1134 * (*(_DWORD *)(v27 + 48 * v26 + 32) + 360253429 < v28)) ^ a9)) - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13);
}

uint64_t sub_100079B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v12;
  uint64_t v13;
  int v14;
  int v15;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 8 * ((((_DWORD)a4 == 489733862) * ((v12 + 22 - v15) ^ (v14 - 114))) ^ (v12 + 22))) - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_100079B74()
{
  JUMPOUT(0x100079B84);
}

void sub_100079BD0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_100079C20@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;

  *(_DWORD *)(*(_QWORD *)(a2 + 96) + 24) = v3;
  v4 = *(_DWORD *)(a1 + 4) - ((2 * *(_DWORD *)(a1 + 4) + 163842372) & 0x2E4F20BE) + 1007260929;
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v2
                                                     + 8
                                                     * ((211
                                                       * (((2 * v4) & 0xABDFB9C6 ^ 0x2A4F2086)
                                                        + (v4 ^ 0x42C84CBC)
                                                        + 1862005726 == 1156305089)) ^ 0x552u))
                                         - 4))(0);
}

uint64_t sub_100079CB8()
{
  uint64_t v0;
  int v1;
  int v2;

  return (*(uint64_t (**)(void))(v0 + 8 * ((11 * ((((v2 + v1 + 705700637) < 8) ^ 0xE5) & 1)) | 0x4E4u)))();
}

uint64_t sub_100079D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((94
                                          * ((((a5 ^ 0x7A) + 80) ^ 0x81 ^ (v6
                                                                                          - a1
                                                                                          - (unint64_t)(((a5 ^ 0x57A) + 35890768) & 0xD19)
                                                                                          + 1284 < 0x20)) & 1)) ^ a5 ^ 0x57Au))
                            - 12))();
}

uint64_t sub_100079D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  int v6;
  unsigned int v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((((a5 + 38847302) | 0xD1311) ^ (v6 + 1324)) * (v7 > 0x1F)) ^ a5))
                            - ((a5 - 776) | 0x128)
                            + 800))();
}

uint64_t sub_100079DD4@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v8 = v7 + (a1 ^ (v5 + 1519) ^ v4);
  v9 = *(_OWORD *)(v3 + v8 - 15);
  v10 = *(_OWORD *)(v3 + v8 - 31);
  v11 = a2 + v8;
  *(_OWORD *)(v11 - 15) = v9;
  *(_OWORD *)(v11 - 31) = v10;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((47 * ((v6 & 0xFFFFFFE0) == 32)) ^ (a1 - 39704276))) - 4))();
}

void sub_100079E34()
{
  JUMPOUT(0x100079DF0);
}

uint64_t sub_100079E40(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  int v8;
  int v9;

  return (*(uint64_t (**)(_QWORD))(v7 + 8
                                                * ((((((a7 - 785) | 0x100) + v8) ^ (v8 + 1222)) * (v9 == a2)) | a7)))(0);
}

uint64_t sub_100079E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  char v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((890 * ((v6 & 0x18) == ((a5 - 1177) ^ 0x6F))) ^ a5))
                            - (a5 - 480)
                            + 800))();
}

uint64_t sub_100079EAC@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)(a3 - 7 + (v6 + v7 + v8 - a2)) = *(_QWORD *)(v4 - 7 + (v6 + v7 + v8 - a2));
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((16 * (a2 - (v5 & 0xFFFFFFF8) == -8)) | ((a2 - (v5 & 0xFFFFFFF8) == -8) << 7)) ^ a1))
                            - ((a1 - 1003906954) & 0x3BD665FF ^ 0x19ALL)))();
}

void sub_100079F1C()
{
  JUMPOUT(0x100079EF0);
}

uint64_t sub_100079F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  int v6;
  int v7;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v5
                                                     + 8 * (((((v7 - 399) | 0x60) ^ (v7 + 263)) * (v6 == a5)) ^ v7))
                                         - 12))(0);
}

uint64_t sub_100079F58@<X0>(int a1@<W2>, int a2@<W3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_BYTE *)(a3 + (v5 + a2 + 1815)) = *(_BYTE *)(v4 + (v5 + a2 + 1815));
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v3
                                                     + 8 * ((827 * (a2 - 1 == (a1 ^ (v6 + 1241)) + 1116599650)) ^ a1))
                                         - 12))(0);
}

void sub_100079FAC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 36) ^ (235795823
                             * ((-2 - ((a1 ^ 0x29040430 | 0x96E8ABCB) + (a1 ^ 0x10C0A082 | 0x69175434))) ^ 0x52961214));
  __asm { BR              X13 }
}

uint64_t sub_10007A0EC()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * ((23
                                                        * (((v1 << ((v0 + 23) & 0xDF ^ 0x44)) & 0xBDAD79FE ^ 0xB1A1096E)
                                                         + ((v0 + 103232250) ^ v1)
                                                         + 725212067 == 168859810)) ^ v0))
                                          - 4))(725212067);
}

uint64_t sub_10007A174(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((1733
                                          * (a4 + a2 + 556352257 >= ((v4 + 2006940053) & 0x886080FE ^ 0xFFFFF894)
                                                                  + 114 * ((v4 - 1047) ^ 0x226))) ^ (v4 - 1047)))
                            - 12))();
}

uint64_t sub_10007A20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8
                                                                                 + 8
                                                                                 * (((a7 >> 4 != 233663440)
                                                                                   * ((v7 + 40) ^ 0x10E)) ^ v7))
                                                                     - 4))(a1, a2, a3, a4);
}

uint64_t sub_10007A258(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v19;
  unint64_t v20;
  int v22;

  v11 = a3 + a4 + a2 + ((a5 + 278) | 0xAu) + 1384 - 1938;
  v12 = v11 + v5;
  v13 = v11 + *(_QWORD *)(v9 - 120);
  v14 = (a4 + a2) & 0xF;
  v15 = v6 + v14 - v13;
  v16 = (v8 | v14) - v13;
  v17 = (v7 | v14) - v13;
  v19 = (unint64_t)(v12 - v13) > 0xF && v15 > 0xF && v16 > 0xF;
  v20 = v17 + 1;
  v22 = v19 && v20 > 0xF;
  return (*(uint64_t (**)(void))(v10 + 8 * ((21 * v22) ^ a5)))();
}

uint64_t sub_10007A2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7
                                                                                      + 8 * (v4 ^ (26 * (v5 > 0xF))))
                                                                          - (((v4 + 185) | 0x104u) ^ 0x3EBLL));
  *(_DWORD *)(v6 - 136) = v5;
  return v8(a1, a2, a3, a4, 0);
}

uint64_t sub_10007A310(uint64_t a1, int a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16x4_t v20;
  int8x16x4_t v21;

  v20.val[1].i64[0] = v9 & 0xF;
  v20.val[1].i64[1] = ((_BYTE)v9 - 1) & 0xF;
  v20.val[2].i64[0] = ((_BYTE)v9 + 14) & 0xF;
  v20.val[2].i64[1] = ((_BYTE)v9 + 13) & 0xF;
  v20.val[3].i64[0] = ((_BYTE)v9 + 12) & 0xF;
  v20.val[3].i64[1] = ((_BYTE)v9 + 11) & 0xF;
  v21.val[0].i64[0] = ((_BYTE)v9 + 10) & 0xF;
  v21.val[0].i64[1] = ((_BYTE)v9 + 9) & 0xF;
  v21.val[1].i64[0] = ((_BYTE)v9 + 8) & 0xF;
  v21.val[1].i64[1] = ((_BYTE)v9 + 7) & 0xF;
  v21.val[2].i64[0] = ((_BYTE)v9 + 6) & 0xF;
  v21.val[2].i64[1] = (v9 + 5) & 0xF;
  v21.val[3].i64[0] = ((_BYTE)v9 + 4) & 0xF;
  v21.val[3].i64[1] = ((_BYTE)v9 + 3) & 0xF;
  v13 = a4 + a2 + a3;
  v14.i64[0] = 0x1F1F1F1F1F1F1F1FLL;
  v14.i64[1] = 0x1F1F1F1F1F1F1F1FLL;
  v15.i64[0] = 0xFEFEFEFEFEFEFEFELL;
  v15.i64[1] = 0xFEFEFEFEFEFEFEFELL;
  v20.val[0].i64[0] = ((_BYTE)a4 + (_BYTE)a2 + (_BYTE)a3) & 0xF;
  v20.val[0].i64[1] = ((_BYTE)v9 + 1) & 0xF;
  v16.i64[0] = vqtbl4q_s8(v20, (int8x16_t)xmmword_100204890).u64[0];
  v16.i64[1] = vqtbl4q_s8(v21, (int8x16_t)xmmword_100204890).u64[0];
  v17 = vrev64q_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v5 - 15 + v13), *(int8x16_t *)(v6 + v20.val[0].i64[0] - 15)), veorq_s8(*(int8x16_t *)(v8 + v20.val[0].i64[0] - 15), *(int8x16_t *)(v20.val[0].i64[0] + v7 - 14))));
  v18 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v17, v17, 8uLL), v15), vmulq_s8(v16, v14)));
  *(int8x16_t *)(*(_QWORD *)(v11 - 120) - 15 + v13) = vextq_s8(v18, v18, 8uLL);
  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * ((1130 * ((v10 & 0xFFFFFFF0) == 16)) ^ (v4 + 348)))
                            - (v4 + 1071)
                            + 1617))();
}

void sub_10007A480()
{
  JUMPOUT(0x10007A3F8);
}

uint64_t sub_10007A48C()
{
  int v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2 + 8 * (int)(v0 & 0x8D7AC57F ^ (241 * (v1 == 0xD8F185B7)))))();
}

uint64_t sub_10007A4F0()
{
  unsigned int v0;
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;

  v10 = v4 > 0x1D19DBD6;
  v11 = (v6 - 531228858);
  *(_BYTE *)(*(_QWORD *)(v8 - 120) + v11) = *(_BYTE *)(v1 + v11) ^ (97 * ((v6 + 70) & 0xF)) ^ *(_BYTE *)(*(_QWORD *)(v7 + 8 * (v2 ^ 0x56F)) + (v11 & 0xF)) ^ *(_BYTE *)(*(_QWORD *)(v7 + 8 * (v2 - 1387)) + (v11 & 0xF) - 12) ^ *(_BYTE *)(*(_QWORD *)(v7 + 8 * (v2 ^ 0x5D1)) + (v11 & 0xF) - 8) ^ 0xFE;
  if (v10 == v6 - 1019462800 < (v3 + 701))
    v10 = v6 - 1019462800 < v0;
  return (*(uint64_t (**)(void))(v9 + 8 * ((!v10 * v5) ^ v2)))();
}

uint64_t sub_10007A5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * ((3649 * (((*(_DWORD *)(v6 - 136) == a5) ^ (v5 - 88)) & 1)) ^ v5))
                            - (v5 ^ 0x31Cu)
                            + 1345))();
}

uint64_t sub_10007A600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  char v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v8
                                                                                                  + 8 * (((((((v5 - 1625) | 0x22A) - 958116403) & 0x391BB79A) - 1909) * ((v7 & 8) == 0)) ^ ((v5 - 1625) | 0x22A)))
                                                                                      - (((v5 - 1625) | 0x22Au) ^ 0x226)))(a1, a2, a3, a4, a5, (v6 - a5));
}

uint64_t sub_10007A658(char a1, int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  char v56;
  uint64_t v57;
  int8x16x4_t v59;

  v54 = ((v52 - 15) ^ 0xFFFFFC20) & v51;
  *(_QWORD *)(v53 - 128) = *(_QWORD *)(v53 - 120) - 7;
  v55 = -a5;
  *(_DWORD *)(v53 - 144) = v54;
  v56 = a1 + a4 + a2;
  *(_DWORD *)(v53 - 152) = v52 - 432;
  v57 = (v55 + a4 + a2 + a3);
  v59.val[0].i64[0] = ((_BYTE)v55 + (_BYTE)a4 + (_BYTE)a2 + (_BYTE)a3) & 0xF;
  v59.val[0].i64[1] = ((_BYTE)v55 + v56 - 36) & 0xF;
  v59.val[1].i64[0] = ((_BYTE)v55 + v50) & 0xF;
  v59.val[1].i64[1] = ((_BYTE)v55 + v56 - 22) & 0xF;
  v59.val[2].i64[0] = ((_BYTE)v55 + v56 - 23) & 0xF;
  v59.val[2].i64[1] = ((_BYTE)v55 + v56 - 24) & 0xF;
  v59.val[3].i64[0] = ((_BYTE)v55 + (_BYTE)a4 + (_BYTE)a2 + (_BYTE)v52 + a1) & 0xF;
  v59.val[3].i64[1] = ((_BYTE)v55 + v56 - 26) & 0xF;
  *(int8x8_t *)(*(_QWORD *)(v53 - 128) + v57) = vrev64_s8(veor_s8(veor_s8(vrev64_s8(veor_s8(veor_s8(*(int8x8_t *)(v46 - 7 + v57), *(int8x8_t *)(v47 + (v57 & 0xF) - 7)), veor_s8(*(int8x8_t *)(v49 + (v57 & 0xF) - 7), *(int8x8_t *)((v57 & 0xF) + v48 - 6)))), (int8x8_t)0xFEFEFEFEFEFEFEFELL), vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v59, (int8x16_t)xmmword_1002048A0), (int8x8_t)0x1F1F1F1F1F1F1F1FLL)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a46 + 8 * ((63 * (v55 != 8 - v54)) ^ (v52 - 15))) - 4))((__n128)xmmword_1002048A0);
}

void sub_10007A7A8()
{
  JUMPOUT(0x10007A6D0);
}

uint64_t sub_10007A7D0()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((((*(_DWORD *)(v0 - 152) + 1371) ^ 0x73)
                                          * (*(_DWORD *)(v0 - 136) == *(_DWORD *)(v0 - 144))) ^ *(_DWORD *)(v0 - 152)))
                            - ((19 * (*(_DWORD *)(v0 - 152) ^ 0x270u)) ^ 0x549)))();
}

uint64_t sub_10007A828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)(*(_QWORD *)(v13 - 120) + (a6 - 168860798)) = *(_BYTE *)(v10 + ((a6 - 168860798) & 0xFLL)) ^ *(_BYTE *)(v8 + (a6 - 168860798)) ^ *(_BYTE *)(v12 + (((_BYTE)a6 - 126) & 0xF)) ^ (19 * (a8 ^ 0xD5) - 71) ^ *(_BYTE *)((((_BYTE)a6 - 126) & 0xF) + v11 + 1) ^ (31 * ((a6 - 126) & 0xF));
  return ((uint64_t (*)(void))(*(_QWORD *)(v14 + 8 * ((1861 * (a6 - 1 == v9)) ^ (a8 - 1654))) - 4))();
}

uint64_t sub_10007A8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  int v43;

  v41 = *(_QWORD *)(v38 + 24);
  *(int8x16_t *)(v39 - 112) = veorq_s8(*(int8x16_t *)*(_QWORD *)(v38 + 40), (int8x16_t)xmmword_1002048B0);
  if (*(_QWORD *)(v39 - 120))
    v42 = v41 == 0x697D3DFF8FBD18CALL;
  else
    v42 = 1;
  v43 = !v42;
  HIDWORD(a12) = v37 << ((a7 - 72) & 0x9F ^ 0x9C);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 + 8 * (int)((246 * v43) ^ a7)) - 499 * (a7 ^ 0x546) + 1485))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37);
}

uint64_t sub_10007A94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  _BOOL4 v42;

  v40 = v37 ^ 0xFDCE49BB;
  v42 = (((BYTE4(a12) & 0x76) + (_BYTE)v40 + (_BYTE)v38 - 60 + 104) & 0xF) != 0
     || (HIDWORD(a12) & 0xFB9C9376) + v40 == -36812357;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 + 8 * ((v42 * ((v38 - 577635870) & 0x226E03FF ^ 0x7B)) ^ v38)) - 8))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37);
}

uint64_t sub_10007A9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,int a48)
{
  uint64_t v48;

  return ((uint64_t (*)(void))(*(_QWORD *)(v48
                                        + 8
                                        * (a48 ^ (59
                                                * (((2 * (a11 - (a14 & 0xE7A1C8A) - 1925308772)) & 0xCDF33E76 ^ 0xC721C02)
                                                 + ((a11 - (a14 & 0xE7A1C8A) - 1925308772) ^ 0x61C4917E)
                                                 - 37752322 == 1689882937))))
                            - 4))();
}

uint64_t sub_10007AA98()
{
  unsigned int v0;
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(v3
                                            + 8
                                            * ((89
                                              * (v2 + v1 + ((v0 - 1816128180) & 0x6C3FE7EF) - 1727635260 - 1356 >= ((v0 - 127) ^ 0x79A))) ^ v0)))(2567332036);
}

uint64_t sub_10007AB1C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * (((a1 + a7 - 16 < (((a6 - 1229) | 0x50A) ^ 0xFFFFFA7A))
                                          * ((57 * (a6 ^ 0x56F)) ^ 0x755)) ^ a6))
                            - 8))();
}

uint64_t sub_10007AB70(int a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v22;
  int v25;

  v10 = (v7 + v6 + a1);
  v11 = *(_QWORD *)(v8 - 120);
  v12 = v10 + v11 + 1;
  v13 = (202 * (a3 ^ 0x58F) - 995) & v10;
  v14 = v4 + v13 - v10;
  v15 = v13 + v4 + 1;
  v16 = v13 + v5 - v10 + 2;
  v17 = v13 + v5 + 3;
  v18 = v13 + v3;
  v19 = v18 - v10 + 4;
  v20 = v18 + 5;
  v22 = v15 > v11 && v14 < v12;
  if (v17 > v11 && v16 < v12)
    v22 = 1;
  v25 = v20 > v11 && v19 < v12 || v22;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((810 * (v25 ^ 1)) ^ a3)) - 8))();
}

uint64_t sub_10007AC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v7;
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v8
                                                             + 8
                                                             * ((v7 < ((((a7 - 1689007093) & 0x64AC37DA) - 1553) ^ a7 ^ 0x225u)) ^ a7)))(a1, a2, 0);
}

uint64_t sub_10007AC58(int a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16x4_t v17;
  int8x16x4_t v18;

  v17.val[1].i64[0] = ((_BYTE)a2 + 4) & 0xF;
  v17.val[1].i64[1] = ((_BYTE)a2 + 3) & 0xF;
  v17.val[2].i64[0] = ((_BYTE)a2 + 2) & 0xF;
  v17.val[2].i64[1] = ((_BYTE)a2 + 1) & 0xF;
  v17.val[3].i64[0] = a2 & 0xF;
  v17.val[3].i64[1] = ((_BYTE)a2 - 1) & 0xF;
  v12 = v9 + v8 + a1;
  v13.i64[0] = 0x7777777777777777;
  v13.i64[1] = 0x7777777777777777;
  v17.val[0].i64[0] = v12 & 0xF;
  v17.val[0].i64[1] = ((_BYTE)a2 + 5) & 0xF;
  v14.i64[0] = vqtbl4q_s8(v17, (int8x16_t)xmmword_100204890).u64[0];
  v18.val[0].i64[1] = ((_BYTE)a2 + 13) & 0xF;
  v18.val[1].i64[1] = ((_BYTE)a2 + 11) & 0xF;
  v18.val[2].i64[1] = (a2 + 9) & 0xF;
  v18.val[3].i64[1] = ((_BYTE)a2 + 7) & 0xF;
  v18.val[0].i64[0] = ((_BYTE)a2 + 14) & 0xF;
  v18.val[1].i64[0] = ((_BYTE)a2 + 12) & 0xF;
  v18.val[2].i64[0] = (a2 + 10) & 0xF;
  v18.val[3].i64[0] = ((_BYTE)a2 + 8) & 0xF;
  v14.i64[1] = vqtbl4q_s8(v18, (int8x16_t)xmmword_100204890).u64[0];
  v15 = vrev64q_s8(vmulq_s8(v14, v13));
  *(int8x16_t *)(*(_QWORD *)(v10 - 120) - 15 + v12) = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v5 + v17.val[0].i64[0] - 15), *(int8x16_t *)(*(_QWORD *)(v10 - 120) - 15 + v12)), veorq_s8(*(int8x16_t *)(v17.val[0].i64[0] + v6 - 13), *(int8x16_t *)(v17.val[0].i64[0] + v4 - 11))), vextq_s8(v15, v15, 8uLL));
  return (*(uint64_t (**)(void))(v11 + 8 * ((((v7 & 0xFFFFFFF0) == 16) * (((a4 - 455) | 0x80) + 1800)) ^ a4)))();
}

void sub_10007ADAC()
{
  JUMPOUT(0x10007AD30);
}

uint64_t sub_10007ADB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unsigned __int8 v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  unsigned int v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned __int8 *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  int v142;
  int v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  int v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  int v179;
  int v180;
  int v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  int v188;
  unsigned int v189;
  int v190;
  int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  int v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  char *v200;
  uint64_t v201;
  int v202;
  char *v203;
  int v204;
  int v205;
  char *v206;
  int v207;
  unsigned int v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  unsigned int v250;
  int v251;
  unsigned int v252;

  v52 = (v46 - 1415924737) & 0x54654FD7;
  v53 = *(_QWORD *)(v50 + 8 * (v46 & 0x2BFEB86E)) - 12;
  v54 = *(unsigned __int8 *)(v53 + (*(unsigned __int8 *)(v47 - 0x697D3DFF8FBD18C9) ^ 0x85));
  HIDWORD(v55) = v54 ^ 0xC;
  LODWORD(v55) = (v54 ^ 0x40) << 24;
  LOBYTE(v54) = (v55 >> 30) ^ (((v46 - 1) & 0xD7) + 13);
  v56 = *(_QWORD *)(v50 + 8 * (v46 ^ 0x31Fu)) - 4;
  v57 = *(unsigned __int8 *)(v56 + (*(unsigned __int8 *)(v47 - 0x697D3DFF8FBD18BFLL) ^ 0xBFLL));
  HIDWORD(v55) = v57 ^ 5;
  LODWORD(v55) = (v57 ^ 0x60) << 24;
  LOBYTE(v57) = v55 >> 28;
  v58 = *(unsigned __int8 *)(v53 + (*(unsigned __int8 *)(v47 - 0x697D3DFF8FBD18C5) ^ 0x6FLL));
  HIDWORD(v55) = v58 ^ 0xC;
  LODWORD(v55) = (v58 ^ 0x40) << 24;
  v59 = v54 << 16;
  v60 = *(_QWORD *)(v50 + 8 * (v46 - 723)) - 12;
  v61 = v57 | ((*(unsigned __int8 *)(v60 + (*(unsigned __int8 *)(v47 - 0x697D3DFF8FBD18C0) ^ 0xB7)) ^ 0xC1) << 8);
  v62 = *(_QWORD *)(v50 + 8 * (v46 ^ 0x382u));
  v63 = *(_BYTE *)(v62 + (*(unsigned __int8 *)(v47 - 0x697D3DFF8FBD18BELL) ^ 0xD8));
  v64 = (((v55 >> 30) ^ 0x68) << 16) | ((*(unsigned __int8 *)(v60
                                                                             + (*(unsigned __int8 *)(v47 - 0x697D3DFF8FBD18C4) ^ 0xDFLL)) ^ 0xE0) << 8);
  v65 = *(unsigned __int8 *)(v56 + (*(unsigned __int8 *)(v47 - 0x697D3DFF8FBD18BBLL) ^ 0xBCLL));
  HIDWORD(v55) = v65 ^ 5;
  LODWORD(v55) = (v65 ^ 0x60) << 24;
  LOBYTE(v65) = v55 >> 28;
  v66 = v64 | (*(unsigned __int8 *)(v62 + (*(unsigned __int8 *)(v47 - 0x697D3DFF8FBD18C6) ^ 0xAFLL)) << 24);
  v67 = *(unsigned __int8 *)(v56 + (*(unsigned __int8 *)(v47 - 0x697D3DFF8FBD18C3) ^ 0x98));
  HIDWORD(v55) = v67 ^ 5;
  LODWORD(v55) = (v67 ^ 0x60) << 24;
  v68 = v66 & 0xFFFFFF00 | (v55 >> 28);
  v69 = v59 | ((*(unsigned __int8 *)(v60 + (*(unsigned __int8 *)(v47 - 0x697D3DFF8FBD18C8) ^ 0x49)) ^ 0x6A) << 8) | ((*(unsigned __int8 *)(v62 + (*v48 ^ 0xFELL)) ^ 0xD9) << 24);
  v70 = *(unsigned __int8 *)(v56 + (*(unsigned __int8 *)(v47 - 0x697D3DFF8FBD18C7) ^ 0xD0));
  HIDWORD(v55) = v70 ^ 5;
  LODWORD(v55) = (v70 ^ 0x60) << 24;
  v71 = *(unsigned __int8 *)(v53 + (*(unsigned __int8 *)(v47 - 0x697D3DFF8FBD18BDLL) ^ 0xB6));
  LOBYTE(v70) = (v55 >> 28) ^ 0x3C;
  HIDWORD(v55) = v71 ^ 0xC;
  LODWORD(v55) = (v71 ^ 0x40) << 24;
  v72 = v69 & 0xFFFFFF00 | v70;
  v73 = (v55 >> 30) ^ 0x21;
  v74 = ((*(unsigned __int8 *)(v60 + (*(unsigned __int8 *)(v47 - 0x697D3DFF8FBD18BCLL) ^ 0xC7)) ^ 0x21) << 8) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)(v63 ^ 0xD0u) << 24) | (v73 << 16) | v65 ^ 0x68;
  LODWORD(v53) = *(unsigned __int8 *)(v53 + (*(unsigned __int8 *)(v47 - 0x697D3DFF8FBD18C1) ^ 0xC8));
  HIDWORD(v55) = v53 ^ 0xC;
  LODWORD(v55) = (v53 ^ 0x40) << 24;
  v251 = v74 ^ 0x75F49EF4;
  v75 = v61 & 0xFF00FFFF | (((v55 >> 30) ^ 0x37) << 16) | ((*(unsigned __int8 *)(v62
                                                                                                + (*(unsigned __int8 *)(v47 - 0x697D3DFF8FBD18C2) ^ 0x18)) ^ 0xFFFFFF9F) << 24);
  v76 = *(_QWORD *)(v50 + 8 * (v46 - 853)) - 12;
  LODWORD(v62) = (((unsigned __int16)(v74 ^ 0x9EF4) >> 8)
                - ((2 * ((v74 ^ 0x75F49EF4) >> 8)) & 0x1FC)
                + 176939518) ^ *(_DWORD *)(v76 + 4 * (((unsigned __int16)(v74 ^ 0x9EF4) >> 8) ^ 0xF5));
  LODWORD(v60) = v62 - ((2 * v62) & 0xB00627E0);
  v77 = *(_QWORD *)(v50 + 8 * (v46 - 902)) - 8;
  HIDWORD(v55) = *(_DWORD *)(v77 + 4 * (v63 ^ 0xCFu));
  LODWORD(v55) = HIDWORD(v55) ^ 0x15FA8F20;
  v78 = *(_QWORD *)(v50 + 8 * (v46 - 911));
  LODWORD(v73) = (v55 >> 2) ^ *(_DWORD *)(v78 + 4 * (v73 ^ 0xDD)) ^ (v60 + 1476596720);
  v79 = *(_QWORD *)(v50 + 8 * (v46 ^ 0x3FEu)) - 8;
  v252 = v72;
  v80 = *(_DWORD *)(v79 + 4 * (v65 ^ 0xD9u)) ^ v72 ^ (v73 - ((2 * v73) & 0xEDF410FC) - 151385986);
  v250 = v75;
  v248 = v68 ^ 0x2789BBD4 ^ v80;
  LODWORD(v73) = v248 ^ v75 ^ v74;
  HIDWORD(v55) = *(_DWORD *)(v77 + 4 * (BYTE3(v73) ^ 0x54));
  LODWORD(v55) = HIDWORD(v55) ^ 0x15FA8F20;
  LODWORD(v74) = ((v55 >> 2) - ((2 * (v55 >> 2)) & 0xEDF410FC) - 151385986) ^ *(_DWORD *)(v79
                                                                                        + 4
                                                                                        * ((v248 ^ v75 ^ v74) ^ 0xCCu));
  v81 = v73 ^ 0x7B28F9D9;
  LODWORD(v73) = *(_DWORD *)(v76 + 4 * (BYTE1(v73) ^ 0x80u)) ^ *(_DWORD *)(v78 + 4 * (BYTE2(v73) ^ 0x7Bu)) ^ ((BYTE1(v73) ^ 0x75) - ((2 * ((v73 >> 8) ^ 0x3E5275)) & 0x1FC) + 176939518) ^ (v74 - ((2 * v74) & 0xB00627E0) + 1476596720);
  v82 = v68;
  v83 = v73 ^ v68 ^ 0xD7E75F8C;
  v246 = v248 ^ v75 ^ 0xE6;
  v247 = v81;
  v84 = v73 ^ v68 ^ v246;
  v85 = v84 ^ v81;
  v86 = v84 ^ v81 ^ 0x71FC2683;
  LODWORD(v74) = v85 ^ 0xB07EBFEF;
  HIDWORD(v55) = *(_DWORD *)(v77 + 4 * (HIBYTE(v85) ^ 0xDA));
  LODWORD(v55) = HIDWORD(v55) ^ 0x15FA8F20;
  v87 = *(_DWORD *)(v76 + 4 * (BYTE1(v74) ^ 0xF5u)) ^ *(_DWORD *)(v78 + 4 * (BYTE2(v86) ^ 0xABu)) ^ (BYTE1(v74) - ((v74 >> 7) & 0x1FC) + 176939518) ^ ((v55 >> 2) - ((2 * (v55 >> 2)) & 0xB00627E0) + 1476596720);
  v249 = v80;
  v242 = v73 ^ v80;
  v243 = v86;
  v88 = v73 ^ v80 ^ *(_DWORD *)(v79 + 4 * (v86 ^ 0x29u)) ^ (v87 - ((2 * v87) & 0xEDF410FC) - 151385986);
  v244 = v84;
  v245 = v83;
  HIDWORD(v240) = ((v88 ^ 0x516EF336) - ((2 * (v88 ^ 0x516EF336)) & 0x42002EDC) - 1593829522) ^ v83;
  v89 = HIDWORD(v240) ^ 0x8EDEEA78 ^ v84;
  HIDWORD(v55) = *(_DWORD *)(v77 + 4 * (((v89 ^ v74) >> 24) ^ 0x11));
  LODWORD(v55) = HIDWORD(v55) ^ 0x15FA8F20;
  LODWORD(v73) = (v55 >> 2) ^ *(_DWORD *)(v76 + 4 * (((unsigned __int16)(v89 ^ v74) >> 8) ^ 0xDFu)) ^ ((((unsigned __int16)(v89 ^ v74) >> 8) ^ 0x2A) - ((2 * (((v89 ^ v74) >> 8) ^ 0x7B6C2A)) & 0x1FC) + 176939518);
  LODWORD(v73) = (v73 - ((2 * v73) & 0xEDF410FC) - 151385986) ^ *(_DWORD *)(v79
                                                                          + 4 * ((v89 ^ v74) ^ 3u));
  v241 = v88;
  LODWORD(v73) = v88 ^ *(_DWORD *)(v78 + 4 * (((v89 ^ v74) >> 16) ^ 0x45u)) ^ (v73 - ((2 * v73) & 0xB00627E0) + 1476596720);
  LODWORD(v239) = v73 ^ 0x6934DABC;
  HIDWORD(v239) = v89 ^ v74;
  LODWORD(v240) = v89;
  v90 = v73 ^ 0x6934DABC ^ ((HIDWORD(v240) ^ 0x8EDEEA78) - ((2 * (HIDWORD(v240) ^ 0x8EDEEA78)) & 0x70B45314) + 945432970) ^ 0x307C325C;
  LODWORD(v238) = v90 ^ v89 ^ 0x2816F2D5;
  HIDWORD(v238) = v73 ^ 0x6934DABC ^ ((HIDWORD(v240) ^ 0x8EDEEA78)
                                    - ((2 * (HIDWORD(v240) ^ 0x8EDEEA78)) & 0x70B45314)
                                    + 945432970);
  HIDWORD(v55) = *(_DWORD *)(v77 + 4 * (((v238 ^ v89 ^ v74) >> 24) ^ 0xD2));
  LODWORD(v55) = HIDWORD(v55) ^ 0x15FA8F20;
  v91 = ((v55 >> 2) - ((2 * (v55 >> 2)) & 0xEDF410FC) - 151385986) ^ *(_DWORD *)(v79
                                                                               + 4
                                                                               * ((v238 ^ v89 ^ v74) ^ 0xFAu));
  HIDWORD(v237) = v238 ^ v89 ^ v74;
  LODWORD(v73) = *(_DWORD *)(v76 + 4 * (((unsigned __int16)(WORD2(v237) ^ 0x33BF) >> 8) ^ 0xF5u)) ^ *(_DWORD *)(v78 + 4 * (BYTE6(v237) ^ 0x2Du)) ^ v73 ^ (((unsigned __int16)(WORD2(v237) ^ 0x33BF) >> 8) - (((HIDWORD(v237) ^ 0xB80433BF) >> 7) & 0x1FC) + 176939518) ^ (v91 - ((2 * v91) & 0xB00627E0) + 1476596720);
  v92 = v73 ^ v89 ^ 0x2816F2D5;
  v93 = v92 ^ HIDWORD(v237) ^ 0xB80433BF;
  HIDWORD(v55) = *(_DWORD *)(v77 + 4 * (HIBYTE(v93) ^ 0x21));
  LODWORD(v55) = HIDWORD(v55) ^ 0x15FA8F20;
  v94 = ((v55 >> 2) - ((2 * (v55 >> 2)) & 0xB00627E0) + 1476596720) ^ *(_DWORD *)(v78 + 4 * (BYTE2(v93) ^ 0xCEu));
  v95 = (v94 - ((2 * v94) & 0xEDF410FC) - 151385986) ^ *(_DWORD *)(v79
                                                                 + 4
                                                                 * ((v92 ^ BYTE4(v237) ^ 0xBF) ^ 0xA7u));
  v96 = ((unsigned __int16)(v93 ^ 0x48E2) >> 8);
  v97 = (v95 - ((2 * v95) & 0x1517C3FC) + 176939518) ^ *(_DWORD *)(v76 + 4 * (v96 ^ 0xF5u));
  v98 = v73 ^ 0xE8B0D562 ^ v96 ^ (v97 - ((2 * v97) & 0x73BC4CA8) - 1176623532);
  LODWORD(v237) = v73 ^ 0xE8B0D562;
  v99 = v73 ^ 0xE8B0D562 ^ (v90 - ((2 * v90) & 0x73BC4CA8) - 1176623532);
  HIDWORD(v235) = v99;
  v236 = __PAIR64__(v92, v93);
  LODWORD(v235) = v98 ^ 0x519C7071;
  v100 = v98 ^ 0x519C7071 ^ (v99 - ((2 * v99) & 0xA338E0E2) + 1369206897);
  v101 = v100 ^ 0xE6F58988 ^ v92;
  v102 = v101 ^ v93 ^ 0x4BE748E2;
  HIDWORD(v55) = *(_DWORD *)(v77 + 4 * (HIBYTE(v102) ^ 0x12));
  LODWORD(v55) = HIDWORD(v55) ^ 0x15FA8F20;
  LODWORD(v73) = *(_DWORD *)(v76 + 4 * (((unsigned __int16)(v102 ^ 0x8988) >> 8) ^ 0xF5u)) ^ *(_DWORD *)(v78 + 4 * (BYTE2(v102) ^ 0xDCu)) ^ (((unsigned __int16)(v102 ^ 0x8988) >> 8) - (((v102 ^ 0x78F58988) >> 7) & 0x1FC) + 176939518) ^ ((v55 >> 2) - ((2 * (v55 >> 2)) & 0xB00627E0) + 1476596720);
  v103 = *(_DWORD *)(v79 + 4 * ((v101 ^ v93 ^ 0xE2) ^ 0xCDu)) ^ v98 ^ 0xC1A61C2C ^ (v73 - ((2 * v73) & 0xEDF410FC) - 151385986);
  LODWORD(v234) = v101 ^ 0x56645FA8;
  HIDWORD(v234) = v100;
  HIDWORD(v232) = v103 ^ ((v100 ^ 0xE6F58988) - 2 * ((v100 ^ 0xE6F58988) & 0x41A61C3F ^ v100 & 0x13) - 1046078420);
  v104 = ((HIDWORD(v232) ^ 0x5BF36347) - ((2 * (HIDWORD(v232) ^ 0x5BF36347)) & 0xE15593C) + 118140062) ^ v101 ^ 0x56645FA8;
  v105 = v104 ^ v102 ^ 0x78F58988;
  LODWORD(v73) = ((BYTE1(v105) ^ 0xBB) - ((2 * ((v105 >> 8) ^ 0x1A89BB)) & 0x1FC) + 176939518) ^ *(_DWORD *)(v76 + 4 * (BYTE1(v105) ^ 0x4Eu));
  LODWORD(v73) = (v73 - ((2 * v73) & 0xEDF410FC) - 151385986) ^ *(_DWORD *)(v79
                                                                          + 4
                                                                          * ((((BYTE4(v232) ^ 0x47)
                                                                                              - ((2
                                                                                                * (BYTE4(v232) ^ 0x47)) & 0x3C)
                                                                                              - 98) ^ v101 ^ 0xA8 ^ v102 ^ 0x88) ^ 0x91u));
  HIDWORD(v55) = *(_DWORD *)(v77 + 4 * (HIBYTE(v105) ^ 0x70));
  LODWORD(v55) = HIDWORD(v55) ^ 0x15FA8F20;
  LODWORD(v73) = (v55 >> 2) ^ *(_DWORD *)(v78 + 4 * (BYTE2(v105) ^ 0xA0u)) ^ (v73
                                                                              - ((2 * v73) & 0xB00627E0)
                                                                              + 1476596720);
  v233 = __PAIR64__(v102, v103);
  LODWORD(v231) = (v73 - ((2 * v73) & 0x834C3858) - 1046078420) ^ v103;
  HIDWORD(v231) = v105;
  v106 = v231 ^ 0x930000ED ^ HIDWORD(v232) ^ 0x5BF36347;
  v107 = v106 ^ 0x8D06EA22;
  v108 = (v106 ^ 0x8D06EA22) & 0x6C03BFB;
  HIDWORD(v230) = v106;
  v109 = v106 & 8;
  LODWORD(v230) = v104 ^ 0x2185EB0C ^ (v107 - 2 * (v108 ^ v109) + 113261555);
  v110 = v230 ^ v105;
  v111 = ((unsigned __int16)(v110 ^ 0x1195) >> 8);
  HIDWORD(v55) = *(_DWORD *)(v77 + 4 * (HIBYTE(v110) ^ 0x23));
  LODWORD(v55) = HIDWORD(v55) ^ 0x15FA8F20;
  v112 = *(_DWORD *)(v76 + 4 * (v111 ^ 0xF5u)) ^ *(_DWORD *)(v79 + 4 * (v110 ^ 0xD0u)) ^ (v55 >> 2);
  HIDWORD(v229) = v110;
  v113 = ((v112 ^ 0xFC71E980) - 2 * ((v112 ^ 0xFC71E980) & 0x580313F5 ^ v112 & 5) + 1476596720) ^ *(_DWORD *)(v78 + 4 * (BYTE2(v110) ^ 0x7Eu)) ^ v231 ^ 0x930000ED ^ v111;
  v114 = v107 - 2 * (v107 & 0x434AE0EF ^ v109);
  LODWORD(v232) = v104;
  LODWORD(v73) = v113 ^ v104 ^ v110 ^ 0x49571195;
  BYTE2(v109) = BYTE2(v73) ^ 0x45;
  LODWORD(v229) = v73 ^ 0xAA7E53B8;
  HIDWORD(v55) = *(_DWORD *)(v77 + 4 * (BYTE3(v73) ^ 0x63));
  LODWORD(v55) = HIDWORD(v55) ^ 0x15FA8F20;
  LODWORD(v73) = *(_DWORD *)(v76 + 4 * (BYTE1(v73) ^ 0x2Du)) ^ *(_DWORD *)(v79
                                                                           + 4
                                                                           * (~(_BYTE)v73 ^ 0xC4u)) ^ ((BYTE1(v73) ^ 0xD8) - ((2 * ((v73 >> 8) ^ 0x97AD8)) & 0x1FC) + 176939518) ^ ((v55 >> 2) - ((2 * (v55 >> 2)) & 0xEDF410FC) - 151385986);
  LODWORD(v73) = (v73 - ((2 * v73) & 0xB00627E0) + 1476596720) ^ *(_DWORD *)(v78 + 4 * (BYTE2(v109) ^ 0x16u));
  v115 = v73 - ((2 * v73) & 0x8695C1CE);
  LODWORD(v76) = v113 ^ v104 ^ 0x452FF2BF;
  v116 = *(_QWORD *)(v50 + 8 * (v46 & 0x2FBDB490)) - 8;
  v117 = *(unsigned __int8 *)(v116 + (*(unsigned __int8 *)(v51 - 109) ^ 0xA5));
  HIDWORD(v55) = v117 ^ 0x3B;
  LODWORD(v55) = v117 << 24;
  v227 = v116;
  v228 = *(_QWORD *)(v50 + 8 * (v46 ^ 0x30Fu)) - 12;
  v225 = *(_QWORD *)(v50 + 8 * (v46 & 0x3AD530B0));
  v226 = *(_QWORD *)(v50 + 8 * (v46 & 0x3E53F437));
  v118 = (((((v55 >> 30) ^ 0xDB) >> 2) | (((v55 >> 30) ^ 0xDB) << 6)) | ((*(unsigned __int8 *)(v226 + (*(unsigned __int8 *)(v51 - 111) ^ 0x7ALL)) ^ 0x49) << 16) | ((*(unsigned __int8 *)(v225 + (*(unsigned __int8 *)(v51 - 112) ^ 0x78)) ^ 0xC8) << 24) | (((*(_BYTE *)(v228 + (*(unsigned __int8 *)(v51 - 110) ^ 0x5DLL)) + (*(_BYTE *)(v51 - 110) ^ 0x52) - 94) ^ 0x5D) << 8)) ^ 0xBDBADDE8;
  LODWORD(v74) = ((*(unsigned __int8 *)(v116 + (*(unsigned __int8 *)(v51 - 101) ^ 0x60)) ^ 0xF0) & 0xFFFF00FF | ((*(unsigned __int8 *)(v226 + (*(unsigned __int8 *)(v51 - 103) ^ 5)) ^ 0x18) << 16) | (((*(_BYTE *)(v228 + (*(unsigned __int8 *)(v51 - 102) ^ 4)) + (*(_BYTE *)(v51 - 102) ^ 0xB) - 94) ^ 0x33) << 8) | ((*(unsigned __int8 *)(v225 + (*(unsigned __int8 *)(v51 - 104) ^ 0x1CLL)) ^ 0x3D) << 24)) ^ 0x63E9B244;
  v119 = ((*(unsigned __int8 *)(v116 + (*(unsigned __int8 *)(v51 - 105) ^ 0x28)) ^ 0x31) & 0xFFFF00FF | ((((*(_BYTE *)(v51 - 106) ^ 0xAC) + *(_BYTE *)(v228 + (*(unsigned __int8 *)(v51 - 106) ^ 0xA3)) - 94) ^ 0xF6) << 8) | ((*(unsigned __int8 *)(v225 + (*(unsigned __int8 *)(v51 - 108) ^ 0xB2)) ^ 0xCA) << 24) | ((*(unsigned __int8 *)(v226 + (*(unsigned __int8 *)(v51 - 107) ^ 0x27)) ^ 0x7C) << 16)) ^ 0x50A18A30;
  v120 = ((*(unsigned __int8 *)(v116 + (*(unsigned __int8 *)(v51 - 97) ^ 0x7BLL)) ^ 0x44) & 0xFFFF00FF | ((((*(_BYTE *)(v51 - 98) ^ 0xD0) + *(_BYTE *)(v228 + (*(unsigned __int8 *)(v51 - 98) ^ 0xDFLL)) - 94) ^ 0xE4) << 8) | ((*(unsigned __int8 *)(v226 + (*(unsigned __int8 *)(v51 - 99) ^ 0xAALL)) ^ 0x2A) << 16) | ((*(unsigned __int8 *)(v225 + (*(unsigned __int8 *)(v51 - 100) ^ 0x45)) ^ 0xF2) << 24)) ^ 0x7FCBA760;
  HIDWORD(v224) = v49 + 36812357;
  LODWORD(v223) = v52 + 95866379;
  HIDWORD(v222) = v52 ^ 0x789;
  LODWORD(v222) = v52 ^ 0x7A5;
  HIDWORD(v221) = v52 ^ 0x718;
  LODWORD(v221) = v113 ^ 0xC34AE0E7 ^ (v114 - 1018502937);
  HIDWORD(v220) = v52 ^ 0x7CB;
  LODWORD(v220) = v52 ^ 0x7F7;
  LODWORD(v224) = v113 ^ 0xC34AE0E7;
  HIDWORD(v219) = (v115 - 1018502937) ^ v113 ^ 0xC34AE0E7;
  LODWORD(v219) = v52 ^ 0x777;
  HIDWORD(v218) = (v46 - 1415924737) & 0x10410812;
  LODWORD(v218) = v52 ^ 0x7DC;
  *(_DWORD *)(v51 - 128) = v52;
  HIDWORD(v217) = v52 ^ 0x738;
  HIDWORD(a25) = v76;
  HIDWORD(v223) = (v114 - 1018502937) ^ 0x3DC8BA5D ^ (v115 - 1018502937);
  LODWORD(v217) = HIDWORD(v223) ^ v76;
  *(_QWORD *)(v51 - 208) = 7;
  v121 = *(unsigned __int8 **)(v51 - 120);
  v122 = v121[7];
  v123 = (((v52 + 95866379) & 0xFA492FFF) - 1005865502) ^ 0xC40BBB73;
  *(_QWORD *)(v51 - 176) = v123;
  v124 = *(unsigned __int8 *)(v116 + (v122 ^ 0x41));
  v125 = v121[v123] ^ 0x60;
  *(_QWORD *)(v51 - 160) = 8;
  *(_QWORD *)(v51 - 136) = 1;
  LODWORD(v116) = *(unsigned __int8 *)(v225 + v125) ^ 0x49;
  LODWORD(v76) = *(unsigned __int8 *)(v225 + (v121[8] ^ 0xC1)) ^ 0xFFFFFFFD;
  LODWORD(v125) = *(unsigned __int8 *)(v226 + (v121[1] ^ 0x66)) ^ 0xA5;
  *(_QWORD *)(v51 - 144) = 15;
  LODWORD(v77) = (_DWORD)v125 << 16;
  v126 = v121[15] ^ 0xE9;
  *(_QWORD *)(v51 - 168) = 11;
  LODWORD(v126) = *(unsigned __int8 *)(v227 + v126) ^ 0xE6;
  LODWORD(v60) = *(unsigned __int8 *)(v227 + (v121[11] ^ 0xC3));
  *(_QWORD *)(v51 - 184) = 0;
  LODWORD(v77) = v77 | ((*(unsigned __int8 *)(v225 + (*v121 ^ 0x30)) ^ 0x79) << 24);
  LODWORD(v76) = v60 ^ 0x2C | ((_DWORD)v76 << 24);
  *(_QWORD *)(v51 - 152) = 2;
  LODWORD(v77) = v77 & 0xFFFF00FF | (((*(_BYTE *)(v228 + (v121[2] ^ 0xC0)) + (v121[2] ^ 0xCF) - 94) ^ 0xF9) << 8);
  *(_QWORD *)(v51 - 224) = 4;
  LODWORD(v60) = *(unsigned __int8 *)(v225 + (v121[4] ^ 0xFCLL)) ^ 0xFFFFFFC7;
  *(_QWORD *)(v51 - 216) = 5;
  v127 = v124 ^ 0x36 | ((_DWORD)v60 << 24);
  LODWORD(v60) = *(unsigned __int8 *)(v226 + (v121[5] ^ 0xA9)) ^ 0x98;
  *(_QWORD *)(v51 - 240) = 9;
  v128 = v127 | ((_DWORD)v60 << 16);
  LODWORD(v76) = v76 | ((*(unsigned __int8 *)(v226 + (v121[9] ^ 0x5DLL)) ^ 0x76) << 16);
  *(_QWORD *)(v51 - 200) = 10;
  LOBYTE(v60) = (*(_BYTE *)(v228 + (v121[10] ^ 0xD5)) + (v121[10] ^ 0xDA) - 94) ^ 0xCF;
  *(_QWORD *)(v51 - 192) = 14;
  LODWORD(v76) = v76 & 0xFFFF00FF | (v60 << 8);
  LODWORD(v60) = (*(_BYTE *)(v228 + (v121[14] ^ 0xE4)) + (v121[14] ^ 0xEB) + 34);
  *(_QWORD *)(v51 - 232) = 3;
  v129 = *(unsigned __int8 *)(v227 + (v121[3] ^ 0xDCLL)) ^ 0xF2;
  *(_QWORD *)(v51 - 248) = 13;
  LODWORD(v73) = ((_DWORD)v60 << 8) | ((*(unsigned __int8 *)(v226 + (v121[13] ^ 0x92)) ^ 0x4B) << 16) | v126 | ((_DWORD)v116 << 24);
  *(_QWORD *)(v51 - 256) = 6;
  v130 = v128 & 0xFFFF00FF | (((*(_BYTE *)(v228 + (v121[6] ^ 0x4FLL)) + (v121[6] ^ 0x40) - 94) ^ 0xB7) << 8);
  v131 = v118 ^ v252 ^ ((v129 | v77) + 67331281 - 2 * ((v129 | v77) & 0x40364D3 ^ v129 & 2));
  v132 = v119 ^ v82 ^ (v130 - ((2 * v130) & 0xD2306712) - 384289911);
  v133 = v120 ^ v251 ^ (v73 - 2 * (v73 & 0x46721EDF ^ v126 & 6) - 965599527);
  LODWORD(v126) = v74 ^ v250 ^ (v76 - ((2 * v76) & 0xB4A017FA) - 632288259);
  v134 = *(_QWORD *)(v50 + 8 * (*(_DWORD *)(v51 - 128) - 1783)) - 8;
  v135 = *(_QWORD *)(v50 + 8 * v222) - 12;
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (BYTE3(v126) ^ 0x3F));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  LODWORD(v116) = (v55 >> 1) ^ ((BYTE2(v133) ^ 0x68)
                              - 949305767
                              - 2 * ((HIWORD(v133) ^ 0xB768) & 0x5D ^ HIWORD(v133) & 4)) ^ *(_DWORD *)(v134 + 4 * (BYTE2(v133) ^ 0x34u));
  v136 = *(_QWORD *)(v50 + 8 * HIDWORD(v222)) - 8;
  LODWORD(v60) = *(_DWORD *)(v136 + 4 * (v126 ^ 0xC6u)) ^ ((BYTE2(v131) ^ 0xD5)
                                                                            - 949305767
                                                                            - ((2 * (HIWORD(v131) ^ 0x6CD5)) & 0xB2)) ^ *(_DWORD *)(v134 + 4 * (BYTE2(v131) ^ 0x89u)) ^ ((v126 ^ 0xAB) - 95202670 + ((2 * (v126 ^ 0xAB) + 62) & 0x24 ^ 0xFDD6FFFF));
  LODWORD(v73) = *(_DWORD *)(v134 + 4 * (BYTE2(v132) ^ 0x8Cu)) ^ *(_DWORD *)(v136
                                                                             + 4 * (v133 ^ 0xB6u)) ^ ((v133 ^ 0xDB) - 95202670 + ((2 * (v133 ^ 0xDB) + 62) & 0x24 ^ 0xFDD6FFFF)) ^ ((BYTE2(v132) ^ 0xD0) - 949305767 - 2 * ((HIWORD(v132) ^ 0xC8D0) & 0x5D ^ HIWORD(v132) & 4));
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v132) ^ 0xC8));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  LODWORD(v116) = v116 - 1430543584 - ((2 * v116) & 0x55774640);
  LODWORD(v74) = ((BYTE2(v126) ^ 0xAD) - 949305767 - 2 * ((WORD1(v126) ^ 0x3FAD) & 0x5B ^ WORD1(v126) & 2)) ^ *(_DWORD *)(v136 + 4 * (v131 ^ 0x1Cu)) ^ ((v131 ^ 0x71) - 95202670 + ((2 * (v131 ^ 0x71) + 62) & 0x24 ^ 0xFDD6FFFF)) ^ (v55 >> 1) ^ *(_DWORD *)(v134 + 4 * (BYTE2(v126) ^ 0xF1u));
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v131) ^ 0x6C));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  LODWORD(v76) = v55 >> 1;
  v137 = v74 - 1430543584 - ((2 * v74) & 0x55774640);
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v133) ^ 0xB7));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  v138 = *(_QWORD *)(v50 + 8 * HIDWORD(v221)) - 8;
  v139 = *(_DWORD *)(v138 + 4 * (BYTE1(v131) ^ 0xDEu)) ^ v246 ^ ((v132 ^ 0x10)
                                                                 - 95202670
                                                                 + ((2 * (v132 ^ 0x10) + 62) & 0x24 ^ 0xFDD6FFFF)) ^ *(_DWORD *)(v136 + 4 * (v132 ^ 0x7Du));
  v140 = (v60 - 1430543584 - ((2 * v60) & 0x55774640)) ^ *(_DWORD *)(v138 + 4 * (BYTE1(v132) ^ 0x2Fu)) ^ (v55 >> 1);
  LODWORD(v77) = v140 - ((2 * v140) & 0x8AF518A0);
  LOWORD(v132) = v139 ^ v116;
  LODWORD(v126) = *(_DWORD *)(v138 + 4 * (BYTE1(v126) ^ 0x29u)) ^ v249 ^ v76 ^ (v73
                                                                                - 1430543584
                                                                                - ((2 * v73) & 0x55774640));
  v141 = *(_DWORD *)(v138 + 4 * (BYTE1(v133) ^ 0x66u)) ^ v248 ^ v137;
  LODWORD(v73) = (v139 ^ v116) >> 16;
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * ((v139 ^ ~(_DWORD)v116) >> 24));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  LODWORD(v60) = v55 >> 1;
  LODWORD(v76) = (*(_BYTE *)(v138 + 4 * (BYTE1(v133) ^ 0x66u)) ^ v248 ^ v137);
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (BYTE3(v126) ^ 0x91));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  v142 = v55 >> 1;
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v141) ^ 0xA3));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  v143 = v142 ^ *(_DWORD *)(v134 + 4 * (BYTE2(v141) ^ 0xF0u)) ^ ((BYTE2(v141) ^ 0xAC)
                                                                 - 949305767
                                                                 - 2
                                                                 * ((HIWORD(v141) ^ 0xA3AC) & 0x5B ^ HIWORD(v141) & 2));
  LODWORD(v73) = (v55 >> 1) ^ *(_DWORD *)(v134 + 4 * (v73 ^ 0x15u)) ^ *(_DWORD *)(v136 + 4 * (v126 ^ 0x7Bu)) ^ ((v73 ^ 0x49) - 949305767 - 2 * ((v73 ^ 0xFF49) & 0x5D ^ v73 & 4)) ^ ((v126 ^ 0x16) - 95202670 + ((2 * (v126 ^ 0x16) + 62) & 0x24 ^ 0xFDD6FFFF));
  LODWORD(v116) = (v77 + 1165659216) ^ v247;
  LODWORD(v73) = (v73 - 1430543584 - ((2 * v73) & 0x55774640)) ^ *(_DWORD *)(v138
                                                                           + 4
                                                                           * (((unsigned __int16)((v77 - 29616) ^ v247) >> 8) ^ 0x70u));
  v144 = (v143 - 1430543584 - ((2 * v143) & 0x55774640)) ^ *(_DWORD *)(v138 + 4 * (BYTE1(v132) ^ 0x2Cu));
  LODWORD(v76) = v60 ^ *(_DWORD *)(v136 + 4 * (v76 ^ 3)) ^ ((v76 ^ 0x6E)
                                                                          - 95202670
                                                                          + ((2 * (v76 ^ 0x6E) + 62) & 0x24 ^ 0xFDD6FFFF)) ^ ((BYTE2(v116) ^ 0x9F) - 949305767 - ((2 * (WORD1(v116) ^ 0x259F)) & 0xB2)) ^ *(_DWORD *)(v134 + 4 * (BYTE2(v116) ^ 0xC3u));
  LODWORD(v77) = *(_DWORD *)(v134 + 4 * (BYTE2(v126) ^ 0x2Eu)) ^ ((BYTE2(v126) ^ 0x72)
                                                                  - 949305767
                                                                  - ((2 * (WORD1(v126) ^ 0x9172)) & 0xB2));
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (BYTE3(v116) ^ 0x25));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  LODWORD(v77) = ((v132 ^ 0xFC)
                - 95202670
                + ((2 * (v132 ^ 0xFC) + 62) & 0x24 ^ 0xFDD6FFFF)) ^ *(_DWORD *)(v138
                                                                                               + 4
                                                                                               * (BYTE1(v141) ^ 0xBDu)) ^ *(_DWORD *)(v136 + 4 * (v132 ^ 0x91u)) ^ (v77 - 1430543584 - ((2 * v77) & 0x55774640)) ^ (v55 >> 1);
  v145 = ((v116 ^ 0xD6) - 1726037377) ^ v242 ^ *(_DWORD *)(v136 + 4 * (v116 ^ 0xBBu)) ^ (v144 + 1630834706 - ((2 * v144) & 0xC2692024));
  v146 = *(_DWORD *)(v138 + 4 * (BYTE1(v126) ^ 0x57u)) ^ v244 ^ (v76 - 1430543584 - ((2 * v76) & 0x55774640));
  LODWORD(v126) = (v77 - ((2 * v77) & 0x84C3C462) + 1113711153) ^ v243;
  LODWORD(v77) = (v73 - 1593829522 - ((2 * v73) & 0x42002EDC)) ^ v245;
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (BYTE3(v126) ^ 0xA6));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  LODWORD(v116) = ((v77 ^ 0xA1)
                 - 95202670
                 + ((2 * (v77 ^ 0xA1) + 62) & 0x24 ^ 0xFDD6FFFF)) ^ *(_DWORD *)(v136
                                                                                               + 4
                                                                                               * (v77 ^ 0xCCu));
  LODWORD(v73) = *(_DWORD *)(v134 + 4 * (BYTE2(v145) ^ 0xDBu)) ^ ((BYTE2(v145) ^ 0x87)
                                                                  - 949305767
                                                                  - ((2 * (HIWORD(v145) ^ 0x3A87)) & 0xB2)) ^ (v55 >> 1);
  LODWORD(v76) = (v116 - 1430543584 - ((2 * v116) & 0x55774640)) ^ *(_DWORD *)(v138 + 4 * (BYTE1(v145) ^ 0xDEu));
  LODWORD(v116) = ((v145 ^ 0x9E)
                 - 95202670
                 + ((2 * (v145 ^ 0x9E) + 62) & 0x24 ^ 0xFDD6FFFF)) ^ *(_DWORD *)(v136
                                                                                                + 4
                                                                                                * (v145 ^ 0xF3u));
  LODWORD(v73) = (v73 - 1430543584 - ((2 * v73) & 0x55774640)) ^ *(_DWORD *)(v138 + 4 * (BYTE1(v77) ^ 0x57u));
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v146) ^ 0x41));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  v147 = *(_DWORD *)(v134 + 4 * (BYTE2(v126) ^ 0x20u)) ^ BYTE2(v126) ^ (v55 >> 1);
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v145) ^ 0x3A));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  LODWORD(v76) = v147 ^ (v76 - 949305767 - ((2 * v76) & 0x8ED57CB2));
  v148 = *(_DWORD *)(v138 + 4 * (BYTE1(v146) ^ 0xF4u)) ^ BYTE2(v77) ^ *(_DWORD *)(v134 + 4 * (BYTE2(v77) ^ 0xF6u)) ^ 0x6DD11DD3 ^ (v55 >> 1);
  v149 = ((v126 ^ 0x8B) - 1726037377) ^ v241 ^ *(_DWORD *)(v136 + 4 * (v126 ^ 0xE6u)) ^ (v148 + 1630834706 - ((2 * v148) & 0xC2692024));
  v150 = *(_DWORD *)(v138 + 4 * (BYTE1(v126) ^ 0xBu));
  LODWORD(v126) = *(_DWORD *)(v136 + 4 * (v146 ^ 0xB5u)) ^ ((v146 ^ 0xD8)
                                                                             - 1726037377) ^ (v73
                                                                                            + 1630834706
                                                                                            - ((2 * v73) & 0xC2692024));
  LODWORD(v126) = (v126 - ((2 * v126) & 0x6E2E9A2E) + 924273943) ^ HIDWORD(v239);
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (BYTE3(v77) ^ 0x7C));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  v151 = ((v76 ^ 0x7C) - ((2 * (v76 ^ 0x7C)) & 0x841FA638) - 1039150308) ^ v240;
  v152 = v150 ^ HIDWORD(v240) ^ ((BYTE2(v146) ^ 0xEB) - 949305767 - ((2 * (HIWORD(v146) ^ 0x2EB)) & 0xB2)) ^ *(_DWORD *)(v134 + 4 * (BYTE2(v146) ^ 0xB7u)) ^ (v116 - 1430543584 - ((2 * v116) & 0x55774640)) ^ (v55 >> 1);
  LODWORD(v76) = (((v76 ^ 0x7C) - ((2 * (v76 ^ 0x7C)) & 0x38) + 28) ^ v240);
  LODWORD(v76) = ((v76 ^ 0x3D) - 95202670 + ((2 * (v76 ^ 0x3D) + 62) & 0x24 ^ 0xFDD6FFFF)) ^ *(_DWORD *)(v136 + 4 * (v76 ^ 0x50));
  LODWORD(v77) = v76 - 1430543584 - ((2 * v76) & 0x55774640);
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v149) ^ 0x2D));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  LODWORD(v73) = (v55 >> 1) ^ *(_DWORD *)(v136 + 4 * (v126 ^ 0xEAu));
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (BYTE3(v126) ^ 0x69));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  v153 = v55 >> 1;
  LODWORD(v73) = v73 ^ ((v126 ^ 0x87)
                      - 95202670
                      + ((2 * (v126 ^ 0x87) + 62) & 0x24 ^ 0xFDD6FFFF));
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v151) ^ 0xD));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  LODWORD(v76) = v55 >> 1;
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v152) ^ 0xB4));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  LODWORD(v76) = v76 ^ *(_DWORD *)(v136 + 4 * (v152 ^ 0x8Bu)) ^ ((v152 ^ 0xE6)
                                                                                  - 95202670
                                                                                  + ((2 * (v152 ^ 0xE6)
                                                                                    + 62) & 0x24 ^ 0xFDD6FFFF));
  LODWORD(v73) = *(_DWORD *)(v134 + 4 * (BYTE2(v152) ^ 5u)) ^ ((BYTE2(v152) ^ 0x59)
                                                               - 949305767
                                                               - 2 * ((HIWORD(v152) ^ 0xB459) & 0x5D ^ HIWORD(v152) & 4)) ^ *(_DWORD *)(v138 + 4 * (BYTE1(v151) ^ 0x3Eu)) ^ (v73 - 1430543584 - ((2 * v73) & 0x55774640));
  LODWORD(v60) = BYTE2(v149) ^ 0x72;
  LODWORD(v116) = v60 - 949305767 - ((2 * (HIWORD(v149) ^ 0x2D72)) & 0xB2);
  v154 = v149;
  v155 = (v149 ^ 0x16) - 95202670 + ((2 * (v149 ^ 0x16) + 62) & 0x24 ^ 0xFDD6FFFF);
  v156 = *(_DWORD *)(v138 + 4 * (BYTE1(v149) ^ 0x57u)) ^ v238 ^ ((BYTE2(v126) ^ 0xE4)
                                                                 - 949305767
                                                                 - 2 * ((WORD1(v126) ^ 0x69E4) & 0x5B ^ WORD1(v126) & 2)) ^ *(_DWORD *)(v134 + 4 * (BYTE2(v126) ^ 0xB8u)) ^ (v76 - 1430543584 - ((2 * v76) & 0x55774640));
  v157 = *(_DWORD *)(v138 + 4 * (BYTE1(v152) ^ 0x34u));
  LODWORD(v126) = *(_DWORD *)(v138 + 4 * (BYTE1(v126) ^ 0x17u)) ^ HIDWORD(v238) ^ *(_DWORD *)(v136
                                                                                              + 4 * (v154 ^ 0x7Bu)) ^ v155 ^ ((v55 >> 1) - 1430543584 - ((2 * (v55 >> 1)) & 0x55774640)) ^ ((BYTE2(v151) ^ 0x8C) - 949305767 - ((2 * (HIWORD(v151) ^ 0x4E8C)) & 0xB2));
  v158 = *(_DWORD *)(v134 + 4 * (BYTE2(v151) ^ 0xD0u));
  v159 = (v73 + 945432970 - ((2 * v73) & 0x70B45314)) ^ v239;
  v160 = v126 ^ v158;
  LODWORD(v126) = v157 ^ HIDWORD(v237) ^ v116 ^ *(_DWORD *)(v134 + 4 * (v60 ^ 0x5C)) ^ v77 ^ v153;
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (BYTE3(v126) ^ 0x9D));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  v161 = (v55 >> 1) - 1430543584 - ((2 * (v55 >> 1)) & 0x55774640);
  LODWORD(v73) = ((BYTE2(v160) ^ 0x81) - 949305767 - 2 * ((HIWORD(v160) ^ 0x1481) & 0x79 ^ HIWORD(v160) & 0x20)) ^ *(_DWORD *)(v134 + 4 * (BYTE2(v160) ^ 0xDDu));
  v162 = ((v160 ^ 0x51) - 95202670 + ((2 * (v160 ^ 0x51) + 62) & 0x24 ^ 0xFDD6FFFF)) ^ *(_DWORD *)(v136 + 4 * (v160 ^ 0x3Cu));
  LODWORD(v116) = *(_DWORD *)(v134 + 4 * (BYTE2(v156) ^ 0xDBu)) ^ ((BYTE2(v156) ^ 0x87)
                                                                   - 949305767
                                                                   - ((2 * (HIWORD(v156) ^ 0x7787)) & 0xB2));
  LODWORD(v53) = ((v126 ^ 0xDE9BA169) >> 16) ^ *(_DWORD *)(v134
                                                                                        + 4
                                                                                        * (((v126 ^ 0xDE9BA169) >> 16) ^ 0x5Cu)) ^ (v162 - 949305767 - ((2 * v162) & 0x8ED57CB2));
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v160) ^ 0x14));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  v163 = v55 >> 1;
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v159) ^ 0x9A));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  LODWORD(v73) = *(_DWORD *)(v136 + 4 * (v126 ^ 4u)) ^ ((v126 ^ 0x69)
                                                                         - 95202670
                                                                         + ((2 * (v126 ^ 0xDE9BA169) + 62) & 0x24 ^ 0xFDD6FFFF)) ^ *(_DWORD *)(v138 + 4 * (BYTE1(v156) ^ 0xDEu)) ^ (v73 - 1430543584 - ((2 * v73) & 0x55774640)) ^ (v55 >> 1);
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v156) ^ 0x77));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  LODWORD(v53) = (v55 >> 1) ^ *(_DWORD *)(v138 + 4 * (BYTE1(v159) ^ 0x2Du)) ^ (v53
                                                                               - 1430543584
                                                                               - ((2 * v53) & 0x55774640));
  LODWORD(v77) = *(_DWORD *)(v138 + 4 * (BYTE1(v126) ^ 0x43u));
  LODWORD(v126) = *(_DWORD *)(v138 + 4 * (BYTE1(v160) ^ 0x34u)) ^ v236 ^ v161 ^ ((v156 ^ 0x9E)
                                                                                 - 95202670
                                                                                 + ((2 * (v156 ^ 0x9E)
                                                                                   + 62) & 0x24 ^ 0xFDD6FFFF)) ^ *(_DWORD *)(v134 + 4 * (BYTE2(v159) ^ 0xB5u)) ^ ((BYTE2(v159) ^ 0xE9) - 949305767 - 2 * ((HIWORD(v159) ^ 0x9AE9) & 0x5B ^ HIWORD(v159) & 2)) ^ *(_DWORD *)(v136 + 4 * (v156 ^ 0xF3u));
  v164 = v77 ^ HIDWORD(v235) ^ v163 ^ ((v159 ^ 0xA8)
                                     - 95202670
                                     + ((2 * (v159 ^ 0xA8) + 62) & 0x24 ^ 0xFDD6FFFF)) ^ *(_DWORD *)(v136 + 4 * (v159 ^ 0xC5u)) ^ (v116 - 1430543584 - ((2 * v116) & 0x55774640));
  v165 = (v53 - ((2 * v53) & 0xA8DE103E) + 1416562719) ^ HIDWORD(v236);
  LODWORD(v77) = (v73 - 1176623532 - ((2 * v73) & 0x73BC4CA8)) ^ v237;
  LODWORD(v116) = *(_DWORD *)(v135 + 4 * (BYTE3(v77) ^ 0xFD));
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v164) ^ 0x6D));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  LODWORD(v73) = v55 >> 1;
  LODWORD(v53) = *(_DWORD *)(v134 + 4 * (BYTE2(v164) ^ 0x52u)) ^ ((_DWORD)v116 << 31) ^ (v116 >> 1) ^ ((BYTE2(v164) ^ 0xE) - 949305767 - ((2 * (HIWORD(v164) ^ 0x2E0E)) & 0xB2)) ^ 0x1CBC311A;
  LODWORD(v76) = ((v164 ^ 0x4A)
                - 95202670
                + ((2 * (v164 ^ 0x4A) + 62) & 0x24 ^ 0xFDD6FFFF)) ^ *(_DWORD *)(v136
                                                                                               + 4
                                                                                               * (v164 ^ 0x27u));
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v165) ^ 0xAB));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  LODWORD(v76) = (v55 >> 1) ^ *(_DWORD *)(v138 + 4 * (BYTE1(v77) ^ 0xA4u)) ^ (v76
                                                                              - 1430543584
                                                                              - ((2 * v76) & 0x55774640));
  LODWORD(v76) = BYTE2(v126) ^ *(_DWORD *)(v134 + 4 * (BYTE2(v126) ^ 0x24u)) ^ (v76
                                                                                - 949305767
                                                                                - ((2 * v76) & 0x8ED57CB2));
  LODWORD(v73) = *(_DWORD *)(v134 + 4 * (BYTE2(v165) ^ 0x3Bu)) ^ v73 ^ ((v77 ^ 0x20)
                                                                        - 95202670
                                                                        + ((2 * v77 + 62) & 0x24 ^ 0xFDD6FFFF)) ^ *(_DWORD *)(v136 + 4 * (v77 ^ 0x4Du)) ^ ((BYTE2(v165) ^ 0x67) - 949305767 - ((2 * (HIWORD(v165) ^ 0xAB67)) & 0xB2));
  LODWORD(v116) = ((v126 ^ 0x34)
                 - 95202670
                 + ((2 * (v126 ^ 0x34) + 62) & 0x24 ^ 0xFDD6FFFF)) ^ *(_DWORD *)(v138
                                                                                                + 4
                                                                                                * (BYTE1(v165) ^ 0x87u));
  v165 = v165;
  LODWORD(v53) = v116 ^ *(_DWORD *)(v136 + 4 * (v126 ^ 0x59u)) ^ (v53
                                                                                   - 1430543584
                                                                                   - ((2 * v53) & 0x55774640));
  v166 = ((v165 ^ 0x9A) + 1138386336 + ((2 * (v165 ^ 0x9A) + 254) & 0x240 ^ 0xEFCAFBFF)) ^ *(_DWORD *)(v138 + 4 * (BYTE1(v164) ^ 0x65u));
  v167 = *(_DWORD *)(v138 + 4 * (BYTE1(v126) ^ 0x38u));
  v168 = (v166 + 1630834706 - ((2 * v166) & 0xC2692024)) ^ *(_DWORD *)(v136 + 4 * (v165 ^ 0xF7u));
  v169 = *(_DWORD *)(v134 + 4 * (BYTE2(v77) ^ 0x40u)) ^ ((BYTE2(v77) ^ 0x1C)
                                                         - 949305767
                                                         - 2 * ((WORD1(v77) ^ 0xFD1C) & 0x5B ^ WORD1(v77) & 2));
  LODWORD(v116) = v169 ^ 0xFF84C9E3 ^ (v168 - 1130766032 - ((2 * v168) & 0x7933C260));
  v168 ^= 0x6500C283u;
  LODWORD(v116) = (v168 + v116 + 1) ^ ((v169 ^ 0x261DEA50) + 1);
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (BYTE3(v126) ^ 0x6E));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  v170 = ((v76 ^ 0x78) + 118140062 - ((2 * (v76 ^ 0x78)) & 0xE15593C)) ^ v234;
  LODWORD(v126) = ((v169 ^ 0x657BF49F ^ (v116 - 1130766032 - ((2 * v116) & 0x7933C260))) + v168) ^ (v55 >> 1);
  v171 = v167 ^ HIDWORD(v234) ^ (v73 - 1430543584 - ((2 * v73) & 0x55774640));
  v172 = (v53 + 1369206897 - ((2 * v53) & 0xA338E0E2)) ^ v235;
  LODWORD(v73) = ((BYTE2(v172) ^ 0xE9) - 949305767 - 2 * ((HIWORD(v172) ^ 0xB8E9) & 0x5F ^ HIWORD(v172) & 6)) ^ *(_DWORD *)(v134 + 4 * (BYTE2(v172) ^ 0xB5u));
  LODWORD(v77) = v73 - 1430543584 - ((2 * v73) & 0x55774640);
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v170) ^ 0x9D));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  v173 = v55 >> 1;
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v171) ^ 0x61));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  LODWORD(v53) = *(_DWORD *)(v136 + 4 * (v172 ^ 0xC5u)) ^ (v55 >> 1) ^ *(_DWORD *)(v134 + 4 * (BYTE2(v170) ^ 0x28u)) ^ ((v172 ^ 0xA8) - 95202670 + ((2 * (v172 ^ 0xA8) + 62) & 0x24 ^ 0xFDD6FFFF)) ^ ((BYTE2(v170) ^ 0x74) - 949305767 - ((2 * (HIWORD(v170) ^ 0x9D74)) & 0xB2));
  LODWORD(v60) = (v126 - ((2 * v126) & 0x83B1FAC) - 2078437418) ^ v102;
  LODWORD(v126) = v173 ^ ((BYTE2(v60) ^ 0x95) - 949305767 + (~(2 * (WORD1(v60) ^ 0x6595)) | 0xFFFFFF4D) + 1) ^ *(_DWORD *)(v134 + 4 * (BYTE2(v60) ^ 0xC9u));
  v174 = v126 - 1430543584 - ((2 * v126) & 0x55774640);
  LODWORD(v126) = v53 - 1430543584 - ((2 * v53) & 0x55774640);
  LODWORD(v53) = v171;
  v175 = (v171 ^ 0x85) - 95202670 + ((2 * (v171 ^ 0x85) + 62) & 0x24 ^ 0xFDD6FFFF);
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v172) ^ 0xB8));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  LODWORD(v73) = *(_DWORD *)(v136 + 4 * (v60 ^ 0xC9u)) ^ *(_DWORD *)(v134
                                                                                      + 4 * (BYTE2(v171) ^ 0x54u)) ^ ((BYTE2(v171) ^ 8) - 949305767 - 2 * ((HIWORD(v171) ^ 0x6108) & 0x5F ^ HIWORD(v171) & 6)) ^ (v55 >> 1) ^ ((v60 ^ 0xA4) - 95202670 + ((2 * (v60 ^ 0xA4) + 62) & 0x24 ^ 0xFDD6FFFF));
  LODWORD(v126) = *(_DWORD *)(v138 + 4 * (BYTE1(v60) ^ 0xA1u)) ^ HIDWORD(v232) ^ v126;
  LODWORD(v73) = (v73 - 1430543584 - ((2 * v73) & 0x55774640)) ^ *(_DWORD *)(v138
                                                                           + 4
                                                                           * (((unsigned __int16)(((v76 ^ 0x78) - 21346 - ((2 * (v76 ^ 0x78)) & 0x593C)) ^ v234) >> 8) ^ 0xBDu));
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (BYTE3(v60) ^ 0x65));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  v176 = *(_DWORD *)(v136 + 4 * ((((v76 ^ 0x78) - 98 - ((2 * (v76 ^ 0x78)) & 0x3C)) ^ v234) ^ 0xB4u)) ^ *(_DWORD *)(v138 + 4 * (BYTE1(v171) ^ 0x8Fu)) ^ ((v170 ^ 0xD9) - 95202670 + ((2 * (v170 ^ 0xD9) + 62) & 0x24 ^ 0xFDD6FFFF));
  LODWORD(v76) = *(_DWORD *)(v138 + 4 * (BYTE1(v172) ^ 0x2Du));
  v177 = (v73 - 1046078420 - ((2 * v73) & 0x834C3858)) ^ v233;
  LODWORD(v77) = ((v176 ^ v77 ^ (v55 >> 1)) - ((2 * (v176 ^ v77 ^ (v55 >> 1))) & 0x862492D4) + 1125271914) ^ HIDWORD(v231);
  v178 = v76 ^ v232 ^ v175 ^ *(_DWORD *)(v136 + 4 * (v53 ^ 0xE8)) ^ v174;
  v179 = ((BYTE2(v178) ^ 0x66) - 949305767 - ((2 * (HIWORD(v178) ^ 0xAE66)) & 0xB2)) ^ *(_DWORD *)(v134
                                                                                                 + 4
                                                                                                 * (BYTE2(v178) ^ 0x3Au));
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (BYTE3(v77) ^ 0x7C));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  LODWORD(v73) = ((v55 >> 1) - 949305767 - ((2 * (v55 >> 1)) & 0x8ED57CB2)) ^ *(_DWORD *)(v134
                                                                                        + 4 * (BYTE2(v177) ^ 0x40u));
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v177) ^ 0xEF));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  v180 = (v55 >> 1) ^ *(_DWORD *)(v136 + 4 * (v77 ^ 5u)) ^ ((v77 ^ 0x68)
                                                                             - 95202670
                                                                             + ((2 * (v77 ^ 0x68) + 62) & 0x24 ^ 0xFDD6FFFF));
  LODWORD(v60) = v179 - 1430543584 - ((2 * v179) & 0x55774640);
  v181 = v180 - 1430543584 - ((2 * v180) & 0x55774640);
  v182 = ((v126 ^ 0x4A) - 95202670 + ((2 * (v126 ^ 0x4A) + 62) & 0x24 ^ 0xFDD6FFFF)) ^ *(_DWORD *)(v136 + 4 * (v126 ^ 0x27u));
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v178) ^ 0xAE));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  v183 = (v55 >> 1) ^ *(_DWORD *)(v134 + 4 * (BYTE2(v77) ^ 0x58u)) ^ (v182 - 949305767 - ((2 * v182) & 0x8ED57CB2));
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (BYTE3(v126) ^ 0xDC));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  v184 = ((BYTE2(v126) ^ 0xE) - 949305767 - ((2 * (WORD1(v126) ^ 0xDC0E)) & 0xB2)) ^ v231 ^ *(_DWORD *)(v134 + 4 * (BYTE2(v126) ^ 0x52u)) ^ *(_DWORD *)(v138 + 4 * (BYTE1(v178) ^ 0x7Cu)) ^ v181;
  LODWORD(v116) = (v76 ^ v232 ^ v175 ^ *(_BYTE *)(v136 + 4 * (v53 ^ 0xE8)) ^ v174);
  v185 = (v178 ^ 0xB3) - 95202670 + ((2 * (v178 ^ 0xB3) + 62) & 0x24 ^ 0xFDD6FFFF);
  v186 = *(_DWORD *)(v138 + 4 * (BYTE1(v77) ^ 0x82u)) ^ HIDWORD(v230) ^ *(_DWORD *)(v136
                                                                                    + 4
                                                                                    * (v177 ^ 0x4Du)) ^ (v55 >> 1) ^ ((v177 ^ 0x20) - 95202670 + ((2 * v177 + 62) & 0x24 ^ 0xFDD6FFFF)) ^ v60;
  LODWORD(v76) = WORD1(v77);
  LODWORD(v121) = (v73 - 1430543584 - ((2 * v73) & 0x55774640)) ^ v110 ^ *(_DWORD *)(v138 + 4 * (BYTE1(v126) ^ 0x65u)) ^ *(_DWORD *)(v136 + 4 * (v116 ^ 0xDE)) ^ v185;
  LODWORD(v77) = *(_DWORD *)(v138 + 4 * (BYTE1(v177) ^ 0xA4u)) ^ v230 ^ (v183 - 1430543584 - ((2 * v183) & 0x55774640));
  LODWORD(v116) = (*(_BYTE *)(v138 + 4 * (BYTE1(v177) ^ 0xA4u)) ^ v230 ^ (v183
                                                                                           + 32
                                                                                           - ((2 * v183) & 0x40)) ^ v76);
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * ((v121 >> 24) ^ 0x6C));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  v187 = v55 >> 1;
  LODWORD(v73) = (BYTE2(v186) ^ 0xFB) - 949305767 - ((2 * (HIWORD(v186) ^ 0x57FB)) & 0xB2);
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v184) ^ 0xF7));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  v188 = v55 >> 1;
  LODWORD(v76) = (v184 ^ 0xA8)
               - 95202670
               + ((2 * (v184 ^ 0xA8) + 62) & 0x24 ^ 0xFDD6FFFF);
  v189 = ((BYTE2(v121) ^ 0xC8)
        - 949305767
        - 2 * (((v121 >> 16) ^ 0x6CC8) & 0x5F ^ (v121 >> 16) & 6)) ^ *(_DWORD *)(v134 + 4 * (BYTE2(v121) ^ 0x94u));
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (BYTE3(v77) ^ 0xE7));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  v190 = v55 >> 1;
  v191 = v187 ^ *(_DWORD *)(v136 + 4 * (v116 ^ 0x4F)) ^ *(_DWORD *)(v134 + 4 * (BYTE2(v184) ^ 0xB5u)) ^ ((BYTE2(v184) ^ 0xE9) - 949305767 - 2 * ((HIWORD(v184) ^ 0xF7E9) & 0x5F ^ HIWORD(v184) & 6)) ^ ((v116 ^ 0x22) - 95202670 + ((2 * (v116 ^ 0x22) + 62) & 0x24 ^ 0xFDD6FFFF));
  v192 = (v191 - 1430543584 - ((2 * v191) & 0x55774640)) ^ *(_DWORD *)(v138 + 4 * (BYTE1(v186) ^ 0xECu));
  v193 = v188 ^ *(_DWORD *)(v134 + 4 * (BYTE2(v186) ^ 0xA7u)) ^ *(_DWORD *)(v136
                                                                            + 4
                                                                            * ((v121 ^ BYTE2(v177)) ^ 0x32u)) ^ (((v121 ^ BYTE2(v177)) ^ 0x5F) - 95202670 + ((2 * ((v121 ^ BYTE2(v177)) ^ 0x5F) + 62) & 0x24 ^ 0xFDD6FFFF));
  HIDWORD(v55) = *(_DWORD *)(v135 + 4 * (HIBYTE(v186) ^ 0x57));
  LODWORD(v55) = HIDWORD(v55) ^ 0x39786234;
  LODWORD(v73) = ((v193 ^ v73) - 1430543584 - ((2 * (v193 ^ v73)) & 0x55774640)) ^ *(_DWORD *)(v138
                                                                                             + 4
                                                                                             * (BYTE1(v77) ^ 0x6Du));
  v194 = ((BYTE2(v77) ^ 0x31) - 949305767 - 2 * ((WORD1(v77) ^ 0xE731) & 0x5B ^ WORD1(v77) & 2)) ^ *(_DWORD *)(v136 + 4 * (v184 ^ 0xC5u));
  v195 = *(_DWORD *)(v138 + 4 * (BYTE1(v184) ^ 0x2Du));
  v196 = v194 ^ v76 ^ *(_DWORD *)(v134 + 4 * (BYTE2(v77) ^ 0x6Du)) ^ (v55 >> 1);
  v197 = v221 ^ *(_DWORD *)(v138 + 4 * (BYTE1(v121) ^ 0x61u)) ^ (v196 - 1430543584 - ((2 * v196) & 0x55774640));
  LODWORD(v126) = v197 ^ 0xADE748E2;
  LODWORD(v138) = (v73 - 1018502937 - ((2 * v73) & 0x8695C1CE)) ^ v113 ^ 0xC34AE0E7;
  v198 = (v192 - 1559983162 - ((2 * v192) & 0x4609178C)) ^ v229;
  LODWORD(v136) = v195 ^ HIDWORD(a25) ^ v190 ^ *(_DWORD *)(v136 + 4 * (v186 ^ 0x42u)) ^ ((v186 ^ 0x2F) - 95202670 + ((2 * (v186 ^ 0x2F) + 62) & 0x24 ^ 0xFDD6FFFF)) ^ (v189 - 1430543584 - ((2 * v189) & 0x55774640));
  LODWORD(v73) = HIBYTE(v197) ^ 0x89;
  v199 = *(_DWORD *)(v51 - 128);
  v200 = (char *)*(&off_10025FA20 + v199 - 1874) - 12;
  v201 = (uint64_t)*(&off_10025FA20 + v199 - 1856);
  v202 = *(_DWORD *)(v201 + 4 * (BYTE3(v138) ^ 0xE7));
  LODWORD(v76) = *(_DWORD *)&v200[4 * (v138 ^ 0xA2)];
  v203 = (char *)*(&off_10025FA20 + v220) - 8;
  v204 = (*(_DWORD *)&v203[4 * (BYTE2(v138) ^ 0x9E)] - 1462736865) ^ (*(_DWORD *)&v200[4
                                                                                     * (v136 ^ 0xC9)]
                                                                    - 1948694933);
  v205 = *(_DWORD *)&v200[4 * (v126 ^ 0x2A)];
  LODWORD(v73) = (*(_DWORD *)&v203[4 * (BYTE2(v136) ^ 0x38)] - 1462736865) ^ (*(_DWORD *)(v201 + 4 * v73)
                                                                            - 991314136);
  LODWORD(v60) = *(_DWORD *)&v200[4 * (v198 ^ 0xB9)];
  LODWORD(v200) = *(_DWORD *)(v201 + 4 * (BYTE3(v136) ^ 0xB8));
  v206 = (char *)*(&off_10025FA20 + HIDWORD(v220)) - 12;
  LODWORD(v138) = *(_DWORD *)&v206[4 * (BYTE1(v138) ^ 0xA0)];
  LODWORD(v134) = *(_DWORD *)&v206[4 * (BYTE1(v136) ^ 0xE9)];
  v207 = *(_DWORD *)&v203[4 * (BYTE2(v126) ^ 0x6B)];
  LODWORD(v126) = (v204 + 201756776 - ((2 * v204) & 0x180D20D0)) ^ *(_DWORD *)&v206[4 * (BYTE1(v126) ^ 0x29)] ^ (*(_DWORD *)(v201 + 4 * (HIBYTE(v198) ^ 0x65)) - 991314136);
  LODWORD(v201) = *(_DWORD *)&v203[4 * (BYTE2(v198) ^ 0x1D)];
  v208 = *(_DWORD *)&v206[4 * (BYTE1(v198) ^ 0x74)] ^ HIDWORD(v223) ^ ((v73 ^ (v76 - 1948694933))
                                                                     + 201756776
                                                                     - ((2 * (v73 ^ (v76 - 1948694933))) & 0x180D20D0));
  v209 = *(_QWORD *)(v51 - 120);
  v210 = (char *)*(&off_10025FA20 + v219) - 12;
  LODWORD(v126) = v217 ^ v229 ^ (v126 - 1559983162 - ((2 * v126) & 0x4609178C));
  *(_BYTE *)(v209 + *(_QWORD *)(v51 - 256)) = v210[BYTE1(v208) ^ 0x99] ^ 0x6F;
  v211 = (char *)*(&off_10025FA20 + HIDWORD(v218)) - 4;
  *(_BYTE *)(v209 + *(_QWORD *)(v51 - 248)) = (v211[BYTE2(v126) ^ 0xADLL] + 23) ^ 0xC5;
  LODWORD(v138) = v138 ^ v217 ^ (v205 - ((2 * v205 + 397577430) & 0x180D20D0) - 1746938157) ^ ((_DWORD)v200 - 991314136) ^ (v201 - 1462736865);
  v212 = (char *)*(&off_10025FA20 + v218) - 12;
  *(_BYTE *)(v209 + *(_QWORD *)(v51 - 208)) = v212[v208 ^ 0xFCLL] ^ 0x39;
  *(_BYTE *)(v209 + *(_QWORD *)(v51 - 240)) = (v211[BYTE2(v138) ^ 0x8CLL] + 23) ^ 0x47;
  v213 = (char *)*(&off_10025FA20 + HIDWORD(v217)) - 12;
  *(_BYTE *)(v209 + *(_QWORD *)(v51 - 224)) = (v213[HIBYTE(v208) ^ 0xDELL] - 15) ^ 0x1B;
  *(_BYTE *)(v209 + *(_QWORD *)(v51 - 216)) = ((v211[BYTE2(v208) ^ 0x15]
                                              + ((v211[BYTE2(v208) ^ 0x15] + 23) ^ 0xDA)
                                              + 24) ^ 0xFE)
                                            + v211[BYTE2(v208) ^ 0x15]
                                            + 23;
  v214 = HIDWORD(v219) ^ v134 ^ (v207 - 1462736865) ^ ((_DWORD)v60 - 1948694933) ^ (v202
                                                                                                - 2
                                                                                                * ((v202 + 82427688) & 0xC06906D ^ v202 & 5)
                                                                                                - 789557360);
  *(_BYTE *)(v209 + *(_QWORD *)(v51 - 232)) = v212[v214 ^ 5] ^ 0xCB;
  *(_BYTE *)(v209 + *(_QWORD *)(v51 - 176)) = (v213[BYTE3(v126) ^ 0x4ELL] - 15) ^ 0xE6;
  *(_BYTE *)(v209 + *(_QWORD *)(v51 - 160)) = (v213[BYTE3(v138) ^ 0x9CLL] - 15) ^ 0xB8;
  v215 = *(_QWORD *)(v51 - 184);
  *(_BYTE *)(v209 + v215) = (v213[BYTE3(v214) ^ 0x67] - 15) ^ 0x91;
  *(_BYTE *)(v209 + *(_QWORD *)(v51 - 168)) = v212[v138 ^ 0xF2] ^ 0xC1;
  *(_BYTE *)(v209 + *(_QWORD *)(v51 - 200)) = v210[BYTE1(v138) ^ 0x1ELL] ^ 0xCC;
  *(_BYTE *)(v209 + *(_QWORD *)(v51 - 152)) = v210[BYTE1(v214) ^ 0x33] ^ 0xD5;
  *(_BYTE *)(v209 + *(_QWORD *)(v51 - 192)) = v210[BYTE1(v126) ^ 0xBCLL] ^ 0x1B;
  *(_BYTE *)(v209 + *(_QWORD *)(v51 - 144)) = v212[v126 ^ 0x9FLL] ^ 0x39;
  *(_BYTE *)(v209 + *(_QWORD *)(v51 - 136)) = (v211[BYTE2(v214) ^ 0xDLL] + 23) ^ 0x8E;
  return ((uint64_t (*)(uint64_t, uint64_t, char *, uint64_t, char *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a46 + 8 * ((7 * ((((_DWORD)v215 - 1005864073 - ((2 * (_DWORD)v215 + 32) & 0x881776EE) + 16) ^ 0xC40BBB77) >= v49 + 36812357)) ^ (v199 - 592))) - 12))(57, 27, v203, 201756776, v210, v214, v212, 403513552, a9, a10, a11, a12, v217, v218, v219, v220, v221, v222, v223,
           v224,
           v225,
           v226,
           v227,
           v228,
           a25,
           v229,
           v230,
           v231,
           v232,
           v233,
           v234,
           v235,
           v236,
           v237,
           v238,
           v239,
           v240);
}

void sub_10007E008()
{
  JUMPOUT(0x10007BCDCLL);
}

uint64_t sub_10007E03C(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((505 * (v3 != a3)) ^ v4)) - ((v4 - 80) | 0x185u) + 445))();
}

uint64_t sub_10007E06C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v8 + 8 * ((1020 * ((((a7 ^ 0x657) - 1930) & v7) == 0)) ^ a7))
                                          - ((a7 + 1555) ^ 0x7D4)))(a1);
}

uint64_t sub_10007E0A8(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  unsigned int v63;
  int8x16x4_t v65;

  *(_DWORD *)(v54 - 128) = v53;
  *(_DWORD *)(v54 - 136) = v49;
  v55 = *(_QWORD *)(v54 - 120) - 7;
  *(_DWORD *)(v54 - 144) = v49 & 0xFFFFFFF8;
  v56 = a3 - (v49 & 0xFFFFFFF8) + 8;
  v57 = v52 + v51;
  v58 = v52 + v51 + v50;
  v59 = v58 - a3;
  v60 = v58 - a3 + 15;
  v61 = v58 - a3 + 1;
  v62 = v58 + a6 - a3 + 42;
  v63 = v57 + a1 - a3;
  v65.val[0].i64[0] = v63 & 0xF;
  v65.val[0].i64[1] = (v59 + 5) & 0xF;
  v65.val[1].i64[0] = (v59 + 4) & 0xF;
  v65.val[1].i64[1] = (v59 + 3) & 0xF;
  v65.val[2].i64[0] = v62 & 0xF;
  v65.val[2].i64[1] = v61 & 0xF;
  v65.val[3].i64[0] = v59 & 0xF;
  v65.val[3].i64[1] = v60 & 0xF;
  *(int8x8_t *)(v55 + v63) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v47 + v65.val[0].i64[0] - 7), *(int8x8_t *)(v55 + v63)), veor_s8(*(int8x8_t *)(v65.val[0].i64[0] + v48 - 5), *(int8x8_t *)(v65.val[0].i64[0] + v46 - 3))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v65, (int8x16_t)xmmword_1002048A0), (int8x8_t)0x7777777777777777)));
  return (*(uint64_t (**)(__n128))(a46 + 8 * ((61 * (v56 == 0)) ^ a6)))((__n128)xmmword_1002048A0);
}

void sub_10007E1DC()
{
  JUMPOUT(0x10007E118);
}

uint64_t sub_10007E1E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W8>)
{
  uint64_t v4;
  uint64_t v5;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5
                                                                                + 8
                                                                                * (a4 ^ (168
                                                                                       * (*(_DWORD *)(v4 - 136) == *(_DWORD *)(v4 - 144)))))
                                                                    - 57 * (a4 ^ 0x21Bu)
                                                                    + 1926))(a1, a2, a3, a4 ^ 0x5ABu);
}

uint64_t sub_10007E230(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = (a5 - 1689882938);
  *(_BYTE *)(*(_QWORD *)(v9 - 120) + v11) ^= *(_BYTE *)(v7 + (v11 & 0xF)) ^ *(_BYTE *)((v11 & 0xF) + v8 + 2) ^ *(_BYTE *)((v11 & 0xF) + v6 + 4) ^ (119 * (v11 & 0xF));
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((239 * (a5 - 1 == v5)) ^ (a4 - 1811))) - 8))();
}

void sub_10007E2A0()
{
  int v0;
  int v1;
  uint64_t v2;

  if (v0 == 834867671)
    v1 = 489733862;
  else
    v1 = -489691842;
  *(_DWORD *)(v2 + 32) = v1;
}

uint64_t sub_10007E304(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)*(&off_10025B5F0 + ((1275 * (*(_DWORD *)(a2 + 4) == 1528691551)) ^ 0x2CAu)) - 4))();
}

uint64_t sub_10007E344(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = (**(unsigned __int8 **)(a2 + 8) ^ 0x71BD7F2E)
                       - 8994862
                       + ((2 * **(unsigned __int8 **)(a2 + 8)) & 0x5C);
  return 0;
}

uint64_t sub_10007E378()
{
  return 4294925278;
}

void sub_10007E380(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 + 1178560073 * ((((2 * (_DWORD)a1) | 0xD228BF70) - (_DWORD)a1 - 1762942904) ^ 0x8E217DD0);
  __asm { BR              X10 }
}

uint64_t sub_10007E430()
{
  unsigned int v0;
  _DWORD *v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (int)((659 * (*v1 != 0)) ^ (v0 + 473))) - (v0 ^ 0x37BLL)))();
}

uint64_t sub_10007E478()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  int v3;
  unsigned int *v4;
  uint64_t v5;

  v5 = v2(*v4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1 + 8 * ((220 * (*v0 != 0)) ^ v3)) - 8))(v5);
}

uint64_t sub_10007E4A4()
{
  uint64_t v0;
  _DWORD *v1;
  uint64_t (*v2)(_QWORD);
  unsigned int *v3;
  uint64_t result;

  result = v2(*v3);
  *v1 = 0;
  *(_DWORD *)v0 = 0;
  *(_QWORD *)(v0 + 344) = 0;
  *(_QWORD *)(v0 + 352) = 0;
  *(_DWORD *)(v0 + 360) = 775263486;
  *(_DWORD *)(v0 + 56) = 733061813;
  return result;
}

uint64_t sub_10007E4E4()
{
  _DWORD *v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((220 * (*v0 != 0)) ^ v2)) - 8))();
}

void Ejwmn62s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  int v6;

  if (a4)
    v5 = a5 == 0;
  else
    v5 = 1;
  v6 = v5;
  __asm { BR              X9 }
}

uint64_t sub_10007E5A0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  uint64_t v14;
  int v15;
  uint64_t v16;

  *a4 = 0;
  *a5 = 0;
  a14 = 1178560073 * ((&a13 & 0xFB2A6C05 | ~(&a13 | 0xFB2A6C05)) ^ 0xE3E0B192) - 1501685844;
  v16 = sub_1000AABF4(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v14 + 8 * ((1912 * (a13 == v15)) ^ 0x3CDu)) - 4))(v16);
}

uint64_t sub_10007E630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  a13 = &STACK[0x82D647BA4E69FD9];
  a14 = (831981571 * (&a13 ^ 0x99A1D024)) ^ 0x87;
  sub_10006A5D8((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16
                                                                                          + 8
                                                                                          * ((1472 * (a15 == v17)) ^ v15))
                                                                              - 4))(v18, v19, v20, v21, v22);
}

uint64_t sub_10007E6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16)
{
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v20 = 1224239923 * ((2 * (&a13 & 0x7345948) - &a13 + 2026612400) ^ 0x8A785B67);
  LODWORD(a15) = v20 ^ 0x3A4;
  a14 = a11;
  LODWORD(a13) = v18 - ((2 * v18) & 0xDE3BA25A) - v20 - 283258579;
  sub_100080318((uint64_t)&a13);
  v21 = 69008221 * (&a13 ^ 0xD3A2520A);
  a13 = v16;
  a16 = (((2 * v17) & 0xF9CEBFF0) - 1879330880 + (v17 ^ 0x7CE75FF8)) ^ v21;
  HIDWORD(a14) = v21 + 1026;
  a15 = a11;
  sub_10006AB28((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 + 8 * ((67 * ((_DWORD)a14 != 489733862)) ^ 0x21Bu))
                                                                                                - 12))(v22, v23, v24, v25, v26, v27, v28);
}

uint64_t sub_10007E818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, uint64_t a16, unint64_t *a17, int a18)
{
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;

  v22 = ((2 * (&a13 & 0x619B6640) - &a13 - 1637574216) ^ 0x6CD7646F) * v21;
  a15 = v22 ^ 0x4C38421D;
  a16 = a11;
  a17 = &STACK[0x72F2C1D3322B87F0];
  a13 = v22 ^ 0x12B68929;
  a14 = (v19 + 368399638) ^ v22;
  v23 = sub_1000AACB4((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20
                                                      + 8
                                                      * (((a18 == v18) * (((v19 - 411) | 0x34D) + 1007)) ^ (v19 + 61)))
                                          - 12))(v23);
}

uint64_t sub_10007E8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t *a10, uint64_t a11, uint64_t a12, unint64_t *a13, unint64_t *a14, unint64_t *a15, unint64_t *a16)
{
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;

  v18 = v16 - 414;
  a15 = &STACK[0x20BA795F69D3FB1];
  a16 = a10;
  LODWORD(a13) = v18
               - 2078219279
               * ((((&a13 | 0xEC8CA36A) ^ 0xFFFFFFFE) - (~&a13 | 0x13735C95)) ^ 0xC989CAE1)
               - 231788976;
  a14 = &STACK[0x7F1325F673F67E6F];
  sub_1000AB2F4((uint64_t)&a13);
  a13 = &STACK[0x20BA795F69D3FB5];
  a14 = a10;
  LODWORD(a15) = v18
               - 944348131 * (((&a13 | 0xDB8EA39F) - (&a13 & 0xDB8EA39F)) ^ 0x789707D1)
               + 332;
  ((void (*)(unint64_t **))((char *)*(&off_10025FA20 + (int)(v18 ^ 0x50)) - 8))(&a13);
  a13 = a10;
  LODWORD(a14) = v18
               - 241568881 * ((&a13 & 0xF6FDF46A | ~(&a13 | 0xF6FDF46A)) ^ 0xDF130FD7)
               + 396;
  v19 = sub_1000906D4((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v17 + 8 * (int)((1403 * (HIDWORD(a14) == 489733862)) ^ v18))
                                          - (v18 ^ 0xBELL)))(v19);
}

uint64_t sub_10007EA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  int v10;
  int v11;
  uint64_t v12;

  return ((uint64_t (*)(void))(*(_QWORD *)(v12
                                        + 8 * (int)(((a10 == v11) * ((v10 + 1500070692) & 0xA696BE79 ^ 0x195)) ^ v10))
                            - 4))();
}

uint64_t sub_10007EAA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  int v9;
  int v10;
  uint64_t v11;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((74 * (a9 != (v9 ^ 0x2E2 ^ (v10 - 552)))) ^ v9)) - 4))();
}

uint64_t sub_10007EADC@<X0>(int a1@<W8>)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  BOOL v4;

  v4 = ((uint64_t (*)(_QWORD, uint64_t))*(&off_10025FA20 + v1 + 40))(a1 ^ v2, 2089196818) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((978 * ((v4 ^ (v1 - 1)) & 1)) ^ v1))
                            - (v1 + 414)
                            + 596))();
}

uint64_t sub_10007EB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;

  v12 = (a9 ^ v10) - (((a9 ^ v10) << (((v9 + 69) & 0xEF) + 18)) & 0xE90E7872) - 192463815;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11
                                        + 8
                                        * ((2034
                                          * (((v12 << ((v9 + 64) & 0xBF ^ 0xBB)) & 0xDFBCBFFE ^ 0xC90C3872)
                                           + (v12 ^ 0x1B5963C6)
                                           + 1513619417 != 1242980312)) ^ (v9 + 774)))
                            - 12))();
}

uint64_t sub_10007EC04(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v5
                                                     + 8
                                                     * ((1804
                                                       * (v2 + v1 + 270639105 >= ((v4 + 2136206848) & 0xDBFFBBDD)
                                                                               - 1532210117)) ^ v4)))(a1, v3);
}

uint64_t sub_10007EC6C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (a3 ^ (972 * ((unint64_t)(v3 - a1) > 0x1F))))
                            - ((a3 + 574) | 0x29u)
                            + 2079))();
}

uint64_t sub_10007ECAC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((4 * (v4 < a4 - 2059)) | (16 * (v4 < a4 - 2059)) | a4))
                            + 1532210121
                            - ((a4 - 606885950) & 0x7F7FFBDF)))();
}

uint64_t sub_10007ECFC(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int8x16_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;

  v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
  v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
  v11 = v5 + v4 + v6 + 23 * (v7 ^ (v8 + 1465));
  v12 = *(int8x16_t *)(v2 + v11 - 15);
  v13 = *(int8x16_t *)(v2 + v11 - 31);
  v14 = a1 + v11;
  *(int8x16_t *)(v14 - 15) = veorq_s8(v12, v10);
  *(int8x16_t *)(v14 - 31) = veorq_s8(v13, v10);
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((v1 + v7 + 640) | (2 * ((v3 & 0xFFFFFFE0) != 32)))) - 8))();
}

void sub_10007ED64()
{
  JUMPOUT(0x10007ED14);
}

uint64_t sub_10007ED70(uint64_t a1)
{
  int v1;
  int v2;
  _DWORD *v3;
  _QWORD *v4;
  void (*v5)(unsigned int *);
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  *v4 = a1;
  *v3 = v2;
  v6 = (v1 + 2136909635) & 0x80A15BCF;
  v10 = (v1 - 34) ^ (69008221 * ((2 * (&v10 & 0x64DF65F8) - &v10 + 455121410) ^ 0xC882C808));
  v11 = v8;
  v5(&v10);
  v10 = (v6 - 821) ^ (69008221 * (((&v10 | 0xD42F85AB) - (&v10 & 0xD42F85AB)) ^ 0x78DD7A1));
  v11 = v9;
  v5(&v10);
  return 0;
}

void sub_10007F04C(uint64_t a1)
{
  int v1;
  int v2;
  _BYTE v3[4];
  unsigned int v4;
  uint64_t v5;

  v1 = *(_DWORD *)(a1 + 8) + 944348131 * ((((2 * a1) | 0x23956760) - a1 + 1848986704) ^ 0x32D317FE);
  v2 = *(_DWORD *)(*(_QWORD *)a1 - 0x2DB44D49A49B002ALL);
  v5 = *(_QWORD *)a1;
  v4 = v1 - 1224239923 * (((v3 | 0x11165558) - (v3 & 0x11165558)) ^ 0xE3A5A88F) + 531;
  sub_1000651F8((uint64_t)v3);
  __asm { BR              X9 }
}

uint64_t sub_10007F16C@<X0>(uint64_t a1@<X8>)
{
  int v1;
  char v2;
  char v3;

  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((13 * (((v3 - v2) & 0x1F ^ 0x16) == (((v1 - 138) | 0x803) ^ 0xC38) - 1051)) ^ ((v1 - 138) | 0x803))))();
}

uint64_t sub_10007F1DC@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((67
                                * (((v2 + 1616668128) & 0x9FA396DF ^ 0x801DAB38)
                                 + (v3 ^ 0x7FF7D71C)
                                 - 1409792
                                 + (v1 & 0xFFEFAE38) < (v2 ^ 0x7FFFFBE4u))) ^ v2)))();
}

uint64_t sub_10007F258@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  *(_DWORD *)(*(_QWORD *)(v5 - 0x2DB44D49A49B0026) + 4 * (v1 + 1077661677 + v2)) = *(_DWORD *)(*(_QWORD *)(v5 - 0x2DB44D49A49B0026)
                                                                                                 + 4
                                                                                                 * (v3 + v2 + 171));
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1
                                                     + 8
                                                     * ((2009
                                                       * ((v4 ^ 0xC0 ^ ((v3 + v2 + 170) < 0x7FFFFFFF)) & 1)) ^ v4 ^ 0x7D9)))(793, 0x7FFFFFFFLL);
}

void sub_10007F2C8()
{
  JUMPOUT(0x10007F288);
}

uint64_t sub_10007F2D0@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * ((((int)((v3 ^ 0xF6FEFFFF) + 2046417652 + (v1 & 0xEDFDFFFE) - 1895357172) > (int)((v2 - 434) ^ 0xFFFFFD96))
                                          * (((2 * (v2 - 434)) ^ 0xBE) - 1128)) ^ (v2 - 434)))
                            - 4))();
}

uint64_t sub_10007F368@<X0>(int a1@<W2>, int a2@<W3>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  int v5;
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;

  v10 = *(_DWORD *)(*(_QWORD *)(v9 - 0x2DB44D49A49B0026) + 4 * (v8 + v7 + (a1 ^ 0x19Fu) + 118)) ^ v5;
  *(_DWORD *)(*(_QWORD *)(v9 - 0x2DB44D49A49B0026) + 4 * (v3 + v4)) = ((v10 >> (32 - v6)) | a2 ^ v5)
                                                                        + v5
                                                                        - ((2 * ((v10 >> (32 - v6)) | a2 ^ v5)) & 0xC90F512E);
  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * ((415 * (v8 + v7 + 1131 >= 0)) ^ ((a1 ^ 0x19F) - 397))) - 4))();
}

void sub_10007F40C()
{
  JUMPOUT(0x10007F39CLL);
}

uint64_t sub_10007F414@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;

  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (((((17 * (v2 ^ 0x83)) ^ 0xC01E21D1) + v1 > 0x7FFFFFFE) * ((17 * (v2 ^ 0xD1)) ^ 0x170)) ^ v2)))();
}

void sub_10007F46C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  _DWORD *v4;
  int v5;

  v5 = 1405333480 - v0;
  if (*v4 + 1909582136 < 0)
    v5 = v1;
  *v4 = v3 + v2 + *v4 + v5 - 927;
}

uint64_t sub_10007F638(uint64_t a1)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;
  int v5;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x2DB44D49A49B002ALL);
  v4 = v2 - 237901512;
  v3 = v2 - 237901512 < 0;
  v5 = 237901512 - v2;
  if (!v3)
    v5 = v4;
  v1 = (*(_DWORD *)(a1 + 16) ^ (944348131 * ((-2 - ((a1 | 0x128ABCF6) + (~(_DWORD)a1 | 0xED754309))) ^ 0x4E6CE747)))
     + 1358;
  return (*(uint64_t (**)(void))((char *)*(&off_10025FA20 + v1 - 1450)
                              + 8
                              * (((v1 + (v5 ^ 0x5FD39BD9) + ((2 * v5) & 0xBFA737B2) - 1607705038 < 0x7FFFFFFF)
                                * ((v1 ^ 0x552) + 840)) ^ v1)
                              - 4))();
}

uint64_t sub_10007F744()
{
  int v0;
  uint64_t v1;
  _QWORD *v2;
  int v3;
  unsigned int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8 * ((1622 * (*(_DWORD *)(*v2 + 4 * v4) != 762 * (v3 ^ 0xA4) + v0)) ^ v3))
                            - ((131 * (v3 ^ 0xA4u)) ^ 0x102)))();
}

uint64_t sub_10007F790@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v1 + 8 * (v2 - 1450))
                              - 4
                              + 8 * ((((a1 - 1574144914) < 0x7FFFFFFF) * ((v2 ^ 0x552) + 840)) ^ v2)))();
}

_DWORD *sub_10007F7D4(_DWORD *result)
{
  *result = 1307958044;
  return result;
}

uint64_t sub_10007F7E4()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  _BOOL4 v5;

  v4 = (v3 + 578823846) & 0xDD7FD953;
  v5 = ((v2 ^ (v0 + 1780) ^ v4) & 0x80000000) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)((2 * v5) | (4 * v5) | v4)) - 4))();
}

uint64_t sub_10007F854()
{
  unsigned int v0;
  uint64_t v1;
  int v2;
  char v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8
                                             * ((2 * (((v0 >> v3) & 1) == 0)) | (4 * (((v0 >> v3) & 1) == 0)) | v2))
                            - 4))();
}

_DWORD *sub_10007F880@<X0>(_DWORD *result@<X0>, int a2@<W8>)
{
  int v2;
  int v3;

  *result = v3 + 32 * a2 + v2 - 1820040439;
  return result;
}

void sub_10007F89C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) + 944348131 * ((2 * (a1 & 0x4CB3C068) - a1 - 1286848617) ^ 0x10559BD9);
  __asm { BR              X11 }
}

uint64_t sub_10007F968@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, int a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  v13 = v9 + 37;
  v14 = 1178560073
      * (((&a4 | 0x93C5D81) - &a4 + (&a4 & 0xF6C3A278)) ^ 0xEE097FE9);
  a4 = &STACK[0x7F1325F673F67E57];
  a5 = &STACK[0x20BA795F69D3FBD];
  a9 = v12;
  a6 = v9 + 37 - v14 - 104;
  a7 = 866342037 - v14;
  v15 = ((uint64_t (*)(unint64_t **))(*(_QWORD *)(a1 + 8 * ((v9 + 37) ^ 0x26C)) - 8))(&a4);
  return (*(uint64_t (**)(uint64_t))(v11
                                            + 8
                                            * (((*(_DWORD *)(v12 - 0x56428495FB6297ALL) == v10)
                                              * (311 * (v13 ^ 0x229) - 121)) ^ v13)))(v15);
}

uint64_t sub_10007FA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  int v13;

  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * ((25 * (a11 == ((v11 + (v13 ^ 0x45) - 1096) ^ (v13 - 67)))) ^ v13))
                            - 4))();
}

void sub_10007FA90(_DWORD *a1@<X8>)
{
  char v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unsigned __int8 *v6;

  v4 = v6[3] ^ 0xFE;
  v5 = ((*v6 ^ 0xFE) << 24) | ((v6[1] ^ 0xFE) << 16) | ((v6[2] ^ (((v1 - 41) | 4) - 8)) << 8) | v4;
  *(_DWORD *)(*(_QWORD *)v2 - 0x20BA795F69D3FB1) = v5 + v3 - 2 * (v5 & (v3 + 8) ^ v4 & 8);
  *(_DWORD *)(v2 + 20) = *a1;
}

void sub_10007FB54(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) ^ (831981571 * ((~(_DWORD)a1 & 0xE26CEAFC | a1 & 0x1D931503) ^ 0x7BCD3AD8));
  __asm { BR              X10 }
}

uint64_t sub_10007FC1C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unsigned int a4, int a5, unint64_t *a6, int a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v10 = 3804331
      * (((&a3 | 0x4F6F6A9A) - &a3 + (&a3 & 0xB0909560)) ^ 0x31BA4F6C);
  a6 = &STACK[0x118C242060FB2D82];
  a7 = (v7 - 163) ^ v10;
  a3 = v8;
  a4 = v10 ^ 0xC69D8745;
  a5 = v10 ^ 0x49D399B7;
  v11 = (*(uint64_t (**)(uint64_t *))(a1 + 8 * (v7 - 372)))(&a3);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9
                                                      + 8
                                                      * ((82 * (*(_DWORD *)(v8 - 0x56428495FB6297ALL) == 489733862)) ^ v7))
                                          - 8))(v11);
}

void sub_10007FCF0(_DWORD *a1@<X8>)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;

  v4 = 0x4B2E0CD15FF33695 * (*(_QWORD *)v2 ^ v3)
     - ((0x965C19A2BFE66D2ALL * (*(_QWORD *)v2 ^ v3) + 0x4FF97877D62CBDFELL) & 0xA4F186FB0AF33512)
     - 0x58A80468F700678;
  *v5 = (HIBYTE(v4) ^ v1) + ((2 * HIBYTE(v4)) & 0xFC ^ 0x5B) - 1;
  v5[1] = (BYTE6(v4) ^ 0x78) + ((2 * BYTE6(v4)) & 0xFC ^ 0xF) - 1;
  v5[2] = (BYTE5(v4) ^ 0xC3) + ((2 * ((BYTE5(v4) ^ 0xC3 | 0x7E) ^ BYTE5(v4))) ^ 0x85) - 1;
  v5[3] = (BYTE4(v4) ^ 0x7D) - ((2 * (BYTE4(v4) ^ 0x7D)) & 0xFC) - 2;
  v5[4] = (BYTE3(v4) ^ 0x85) - ((2 * (BYTE3(v4) ^ 0x85)) & 0xFC) - 2;
  v5[5] = (BYTE2(v4) ^ 0x79) - ((2 * (BYTE2(v4) ^ 0x79)) & 0xFC) - 2;
  v5[6] = (BYTE1(v4) ^ 0x9A) - ((2 * (BYTE1(v4) ^ 0x9A)) & 0xFC) - 2;
  v5[7] = v4 ^ 0x77;
  *(_DWORD *)(v2 + 12) = *a1;
}

void oGBEROq3()
{
  int v0[10];

  v0[1] = 1178560073 * ((v0 & 0x294D8B40 | ~(v0 | 0x294D8B40)) ^ 0x318756D7) - 1501685844;
  sub_1000AABF4(v0);
  __asm { BR              X8 }
}

uint64_t sub_10007FF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  a13 = &STACK[0x82D647BA4E69FD9];
  a14 = (831981571 * ((2 * (&a13 & 0x49672DD0) - &a13 - 1231498705) ^ 0x2F39020B)) ^ 0x87;
  sub_10006A5D8((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16
                                                                                          + 8
                                                                                          * ((171 * (a15 == v15)) ^ 0x25Eu))
                                                                              - 4))(v17, v18, v19, v20, v21);
}

uint64_t sub_10007FFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14, uint64_t a15, int a16)
{
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v19 = 1224239923
      * ((((&a13 | 0x5C26CAC4) ^ 0xFFFFFFFE) - (~&a13 | 0xA3D9353B)) ^ 0x516AC8EC);
  a16 = v19 ^ 0x3A4;
  a15 = a11;
  a13 = v16 - v19 - ((2 * v16) & 0xDE3BA25A) - 283258579;
  sub_100080318((uint64_t)&a13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18
                                                                                         + 8
                                                                                         * ((940 * (a14 == v17)) ^ 0x4D2u)))(v20, v21, v22, v23, v24, v25);
}

uint64_t sub_1000800B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, unsigned int a15, uint64_t a16, unint64_t *a17, int a18)
{
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;

  v22 = ((&a13 & 0x94F48E05 | ~(&a13 | 0x94F48E05)) ^ 0x99B88C2D) * v21;
  a16 = a11;
  a17 = &STACK[0x72F2C1D3322B87F0];
  a15 = v22 ^ 0xB49415C2;
  a13 = v22 ^ 0x12B68929;
  a14 = (v19 + 368398943) ^ v22;
  v23 = sub_1000AACB4((uint64_t)&a13);
  return (*(uint64_t (**)(uint64_t))(v20 + 8 * ((11 * (a18 == v18 + (v19 ^ 0x68C) - 606)) ^ v19)))(v23);
}

uint64_t sub_10008016C()
{
  void (*v0)(unint64_t **);
  unsigned int v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  unint64_t *v11;
  unint64_t *v12;
  unsigned int v13;

  v5 = 101 * (v4 ^ 0x4D4);
  v13 = v4
      - 944348131 * ((((2 * &v11) | 0xFE58FDAA) - &v11 - 2133622485) ^ 0xDC35DA9B)
      - 716;
  v11 = &STACK[0x20BA795F69D3F1D];
  v12 = v8;
  ((void (*)(unint64_t **))(*(_QWORD *)(v3 + 8 * (v4 ^ 0x438u)) - 8))(&v11);
  LODWORD(v12) = v4 - 241568881 * (&v11 ^ 0xD6110442) - 652;
  v11 = v8;
  sub_1000906D4((uint64_t)&v11);
  if (HIDWORD(v12) == (v5 ^ (v1 - 558)))
    v6 = v10;
  else
    v6 = HIDWORD(v12);
  LODWORD(v11) = (v4 - 1082) ^ (((((&v11 | 0x239FE8D4) ^ 0xFFFFFFFE) - (~&v11 | 0xDC60172B)) ^ 0xFC24521)
                              * v2);
  v12 = v8;
  v0(&v11);
  LODWORD(v11) = (v5 - 454) ^ (((((&v11 | 0x7CEACA56) ^ 0xFFFFFFFE) - (~&v11 | 0x831535A9)) ^ 0x50B767A3)
                             * v2);
  v12 = v9;
  v0(&v11);
  return v6 ^ v1;
}

void sub_100080318(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) ^ (1224239923 * ((((2 * a1) | 0x124C8F9E) - a1 - 153503695) ^ 0xFB95BA18));
  __asm { BR              X10 }
}

uint64_t sub_1000803EC@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unsigned int a4, int a5, unint64_t *a6, int a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v10 = 3804331 * ((101839932 - (&a3 | 0x611F43C) + (&a3 | 0xF9EE0BC3)) ^ 0x873B2E35);
  a7 = (v7 - 669) ^ v10;
  a3 = v8;
  a4 = v10 ^ 0xC69D8745;
  a5 = v10 ^ 0x49D399B3;
  a6 = &STACK[0x118C242060FB2D82];
  v11 = (*(uint64_t (**)(uint64_t *))(a1 + 8 * (v7 ^ 0x392)))(&a3);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9
                                                      + 8
                                                      * ((2962 * (*(_DWORD *)(v8 - 0x56428495FB6297ALL) == 489733862)) ^ v7))
                                          - 8))(v11);
}

void sub_1000804CC(_DWORD *a1@<X8>)
{
  _DWORD *v1;
  int v2;
  int v3;
  _BYTE *v4;

  v3 = *v1 + v2;
  *v4 = (HIBYTE(v3) ^ 0xEF) + ((2 * ((HIBYTE(v3) ^ 0xEF | 0x7E) ^ HIBYTE(v3))) ^ 0xDD) - 1;
  v4[1] = (BYTE2(v3) ^ 0x1D) + ((2 * ((BYTE2(v3) ^ 0x1D | 0x7E) ^ BYTE2(v3))) ^ 0x39) - 1;
  v4[2] = (BYTE1(v3) ^ 0xD1) - ((2 * (BYTE1(v3) ^ 0xD1)) & 0xFC) - 2;
  v4[3] = v3 ^ 0xD3;
  v1[1] = *a1;
}

void sub_100080588(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 24) ^ (3804331 * (((a1 | 0x16831F20) - (a1 | 0xE97CE0DF) - 377691937) ^ 0x68563AD6));
  __asm { BR              X9 }
}

uint64_t sub_100080664@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, uint64_t a8)
{
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  v14 = 235795823 * ((&a5 & 0x844DC5BB | ~(&a5 | 0x844DC5BB)) ^ 0xEF1F731D);
  a7 = (*(_DWORD *)(a1 + 12) ^ v12) + *(_DWORD *)(v8 - 0x56428495FB62982) - 1238604199 - v14 + 1437477768;
  a8 = v8;
  a6 = (v13 + 1835) ^ v14;
  a5 = 39978617 - v14;
  v15 = (*(uint64_t (**)(unsigned int *))(a2 + 8 * (v13 - 235)))(&a5);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v11 + 8 * ((1143 * (*v9 == v10)) ^ v13))
                                          - ((v13 + 1183) | 9u)
                                          + 1451))(v15);
}

uint64_t sub_100080748()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((*(_QWORD *)(v0 + 16) != 0x118C242060FB2D82)
                                     * (v1 ^ 0x4BE ^ (v1 + 708022840) & 0xD5CC691F)) ^ v1)))();
}

uint64_t sub_1000807B0@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;

  *(_QWORD *)(v1 - 0x118C242060FB2D82) = (*v3 + a1) + *(_QWORD *)(v4 - 0x56428495FB62992) + 8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((79 * (*v5 == v6)) ^ v2)) - 4))();
}

void sub_10008080C(int a1@<W8>)
{
  unsigned int v1;
  _DWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  v5 = *(_QWORD *)(v3 - 0x56428495FB62992);
  v6 = *v2 + a1;
  *(_BYTE *)(v5 + v6) = (HIBYTE(v1) ^ 0xC6) + ((v1 >> 23) & 0xFC ^ 0x73) - 1;
  *(_BYTE *)(v5 + v6 + 1) = (BYTE2(v1) ^ 0x66) + ((v1 >> 15) & 0xFC ^ 0x33) - 1;
  *(_BYTE *)(v5 + v6 + 2) = (BYTE1(v1) ^ 0x9E) - ((2 * (BYTE1(v1) ^ 0x9E)) & 0xFC) - 2;
  *(_BYTE *)(v5 + v6 + 3) = v1 ^ 0xE3;
  v7 = *(_QWORD *)(v3 - 0x56428495FB62992);
  LODWORD(v5) = v4 - ((2 * v4 + 1817758882) & 0x59B231B0) + 1661304617;
  v8 = ((2 * (a1 + *v2 + 4)) & 0xEFDEBEB6) + ((a1 + *v2 + 4) ^ 0xF7EF5F5B) + 135307429;
  *(_BYTE *)(v7 + v8) = (BYTE3(v5) ^ 0xAC) + ((v5 >> 23) & 0xFC ^ 0xA7) - 1;
  *(_BYTE *)(v7 + v8 + 1) = (BYTE2(v5) ^ 0xD9) + ((2 * ((BYTE2(v5) ^ 0xD9 | 0x7E) ^ BYTE2(v5))) ^ 0xB1) - 1;
  *(_BYTE *)(v7 + v8 + 2) = (BYTE1(v5) ^ 0x18) - ((2 * (BYTE1(v5) ^ 0x18)) & 0xFC) - 2;
  *(_BYTE *)(v7 + v8 + 3) = (v4 - ((2 * v4 - 94) & 0xB0) + 41) ^ 0x26;
  *v2 = v9;
}

void sub_100080A5C(uint64_t a1)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;

  v1 = 2078219279 * ((a1 & 0x58BF7D47 | ~(a1 | 0x58BF7D47)) ^ 0x7DBA14CC);
  v2 = *(_DWORD *)(a1 + 60) - v1;
  if (*(_QWORD *)(a1 + 8) | *(_QWORD *)(a1 + 64))
    v3 = *(_DWORD *)(a1 + 24) + v1 == 726518779;
  else
    v3 = 1;
  v4 = !v3;
  __asm { BR              X8 }
}

uint64_t sub_100080BCC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  _BOOL4 v4;

  v4 = *(_QWORD *)(v1 + 16) == 0x4FE3AE517815B46FLL || *(_OWORD *)(v1 + 40) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((v4 * ((v0 + 30) ^ 0x745 ^ ((v0 - 319) | 4))) ^ v0)) - 12))();
}

uint64_t sub_100080C28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *(_QWORD *)(v11 + 32);
  *(_DWORD *)(v9 - 0x4FE3AE517815B46FLL) = 0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 + 8 * ((11 * ((((a9 + 345) ^ (v13 == 0x2DB44D49A49B002ELL)) & 1) == 0)) ^ a9)) - ((a9 - 775) | 0x460u) + 1108))(a1, a2, a3, a4, a5, a6, a7, a8, v10);
}

uint64_t sub_100080CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8 * ((923 * (((v7 == 0) ^ (v6 - 1)) & 1)) ^ (v6 + 380)))
                                                                                       - 12))(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100080D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;

  v26 = v16 + 670;
  v27 = ((((2 * (v25 - 144)) | 0x4F0C6938) - (v25 - 144) + 1484376932) ^ 0x3E27E4B8) * v18;
  *(_QWORD *)(v25 - 136) = v24;
  *(_QWORD *)(v25 - 128) = v23;
  *(_DWORD *)(v25 - 144) = (v19 - 716312215 + v16 + 670) ^ v27;
  *(_DWORD *)(v25 - 140) = v27 + v16 + 1070;
  v28 = v17;
  ((void (*)(uint64_t))((char *)*(&off_10025FA20 + v16 - 404) - 4))(v25 - 144);
  *(_DWORD *)(v25 - 144) = v26
                         - 1224239923
                         * ((((v25 - 144) | 0x608DC9E7) - (v25 - 144) + ((v25 - 144) & 0x9F723618)) ^ 0x923E3430)
                         + 271;
  *(_QWORD *)(v25 - 136) = a15;
  *(_QWORD *)(v25 - 128) = v20;
  ((void (*)(uint64_t))*(&off_10025FA20 + v26 - 1048))(v25 - 144);
  *(_DWORD *)(v25 - 136) = v26 - ((((2 * (v25 - 144)) | 0x495F6FA2) - (v25 - 144) - 615495633) ^ 0x683935AC) * v28 - 389;
  *(_QWORD *)(v25 - 128) = a14;
  *(_QWORD *)(v25 - 120) = v20;
  *(_QWORD *)(v25 - 144) = a10;
  *(_QWORD *)(v25 - 112) = a16;
  *(_QWORD *)(v25 - 104) = a15;
  v29 = ((uint64_t (*)(uint64_t))((char *)*(&off_10025FA20 + v26 - 1050) - 4))(v25 - 144);
  return (*(uint64_t (**)(uint64_t))(v22 + 8 * (((((v26 - 1006) | 0x513) ^ 0x595) * (v21 != 0)) ^ v26)))(v29);
}

uint64_t sub_100080FD0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  _DWORD *v10;

  v6 = 3804331 * ((((v5 - 144) | 0x65655D98) - ((v5 - 144) & 0x65655D98)) ^ 0x1BB0786E);
  *(_QWORD *)(v5 - 120) = v2;
  *(_DWORD *)(v5 - 128) = (v4 - 1327) ^ v6;
  *(_DWORD *)(v5 - 124) = (v4 + v1 - 659318627) ^ v6;
  *(_QWORD *)(v5 - 136) = v9;
  result = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * (v4 - 1376)) - 8))(v5 - 144);
  *v10 = v8;
  *(_DWORD *)(v0 + 56) = 489733862;
  return result;
}

void sub_100081100(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(_QWORD, void (*)());
  _BYTE v8[8];

  v2 = (unint64_t)&v8[qword_1002778E8 ^ qword_1002778F0];
  v3 = 45734839 * v2 + 0x588D9F9B90E43A76;
  v4 = 45734839 * (v2 ^ 0xA77260646F1BC58ALL);
  v5 = (-73 * (v3 ^ 0x8A ^ v4));
  v6 = byte_100214A90[byte_100210E10[v5] ^ 0x4A];
  qword_1002778F0 = v3;
  LOBYTE(v5) = byte_100214C90[byte_100211010[v5] ^ 0x23];
  v7 = (void (*)(_QWORD, void (*)()))*(&off_10025FA20 + ((-73 * (v3 ^ 0x8A ^ v4)) ^ v6) - 30);
  qword_1002778E8 = v4;
  v7(*(&off_10025FA20 + ((-73 * (v3 ^ 0x8A ^ v4)) ^ v5) + 57), sub_1000AA7AC);
  __asm { BR              X11 }
}

uint64_t sub_100081214()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1375 * (**(_QWORD **)(v2 + 1752) == 0)) ^ v0)) - 4))();
}

uint64_t sub_100081264@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 ^ 0x573u)))(v1);
}

void vQPeGmEL(uint64_t a1)
{
  __asm { BR              X8 }
}

uint64_t sub_1000812F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16)
{
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;

  a16 = 1178560073 * ((((2 * &a15) | 0x3D2F85A6) - &a15 - 513262291) ^ 0xF9A2E0BB)
      - 1501685844;
  v19 = sub_1000AABF4(&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v17 + 8 * ((326 * (a15 == v16)) ^ v18)) - 4))(v19);
}

uint64_t sub_10008136C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, unsigned int a16, int a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  a15 = &STACK[0x82D647BA4E69FE1];
  a16 = (831981571 * ((2 * (&a15 & 0x65541590) - &a15 + 447474284) ^ 0x830A3A48)) ^ 0x87;
  sub_10006A5D8((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 + 8 * ((1524 * (a17 == 489733862)) ^ 0x2DFu))
                                                                                                - 4))(v18, v19, v20, v21, v22, v23, v24);
}

uint64_t sub_100081408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, unsigned int a17, uint64_t a18, unint64_t *a19, int a20)
{
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v22 = 1224239923 * ((((2 * &a15) | 0x7801179A) - &a15 + 1140814899) ^ 0x4EB3761A);
  a16 = v22 ^ 0x15F55731;
  a17 = v22 ^ 0xE932552D;
  a15 = v22 ^ 0x12B68929;
  a18 = a12;
  a19 = &STACK[0x72F2C1D3322B8808];
  v23 = sub_1000AACB4((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * ((32 * (a20 != v20)) ^ 0x209)) - 12))(v23);
}

uint64_t sub_1000814E8()
{
  unsigned int v0;
  int v1;
  void (*v2)(int *);
  int v3;
  int v4;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v7 = (v4 - 420) ^ (((&v7 + 2080036327 - 2 * ((unint64_t)&v7 & 0x7BFAD5E7)) ^ 0xA85887ED) * v1);
  v8 = v6;
  v2(&v7);
  return v3 ^ v0;
}

uint64_t sub_10008178C(_DWORD *a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)*(&off_10025B5F0
                                      + ((2314 * ((*a1 + *(_DWORD *)(a2 + 4) - 1789133834) < 0xC9)) ^ 0x14Bu))
                            - 12))();
}

uint64_t sub_1000817D8@<X0>(uint64_t a1@<X8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((3477 * (v1 != 1528691550)) ^ 0x59Au)) - 12))();
}

uint64_t sub_100081810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  unsigned int v5;
  _BOOL4 v6;
  _BOOL4 v7;

  *(_BYTE *)(a1 + (v4 + v3 + 315) + 4) = (**(_BYTE **)(a2 + 8) ^ 0xBD)
                                                     + ((2 * **(_BYTE **)(a2 + 8)) & 0x7A)
                                                     + 123;
  v5 = *(_DWORD *)(a2 + 4) - 1310909493;
  v6 = v5 < 0xCFB1729;
  v7 = v5 > 0xCFB172A;
  if (v6)
    v7 = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * ((19 * !v7) ^ 0x589u)) - 12))();
}

void sub_1000818BC()
{
  JUMPOUT(0x100081840);
}

uint64_t sub_1000818C4()
{
  return 4294925278;
}

uint64_t sub_1000818CC(_DWORD *a1)
{
  int v1;
  unsigned int v2;
  int v3;

  *((_BYTE *)a1 + (v3 ^ v2) + v1 + 4) = 56;
  *a1 = v1;
  return 0;
}

void sub_1000818EC(unint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD v12[2];
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  unint64_t *v20;
  int32x4_t v21;
  unsigned int v22;
  int32x4_t v23;
  int v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  char v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  _BYTE v38[7];
  unint64_t *v40;
  unsigned int v41;
  unsigned int v42;

  v2 = 1224239923 * ((-2 - ((~(_DWORD)a1 | 0xC412E5) + (a1 | 0xFF3BED1A))) ^ 0xF277EF32);
  v3 = *(_DWORD *)(a1 + 20) - v2;
  v4 = *(_DWORD *)(a1 + 44) ^ v2;
  v5 = 235795823 * ((&v40 - 357749991 - 2 * (&v40 & 0xEAAD2B19)) ^ 0x7E006240);
  v6 = *(_DWORD *)a1;
  v14 = 1224239923 * ((-2 - ((~a1 | 0x60AD954400C412E5) + (a1 | 0x9F526ABBFF3BED1ALL))) ^ 0x48F7202DF277EF32);
  v7 = v6 - v2;
  v41 = v5 ^ 0xFE0643CC;
  v42 = v3 + v5 + 426522968;
  v20 = &STACK[0x73F39308AC2F38CF];
  v40 = &STACK[0x73F39308AC2F38CF];
  sub_1000639C8((uint64_t)&v40);
  v8 = v4;
  v9 = (char *)*(&off_10025FA20 + (int)(v3 ^ 0x7B)) - 4;
  v10 = (v3 + 321) | 0x201;
  v18 = v10 + *(_QWORD *)&v9[8 * v3] - 891;
  v30 = v7 - 1101486580;
  v13 = v7 - 1686503861;
  v16 = v7 + 904658901;
  v15 = v7 - 99780761;
  v26 = &v37;
  v12[1] = (char *)&v12[-268299389] + 3;
  v12[0] = v38;
  v32 = v3 ^ 0x17B;
  v23 = vdupq_n_s32(0x1D30BEEEu);
  v22 = (v3 + 1392056206) & 0xAD06EF73;
  v21 = vdupq_n_s32(0x1D30BEFFu);
  v29 = v3;
  v24 = v3 ^ 0x7D;
  v25 = v3 + 1392056206;
  v31 = 4294966414;
  v27 = 4294966414;
  v28 = 4294967246;
  v19 = vdupq_n_s32(0x1D30BEE6u);
  v17 = a1;
  v11 = v8 - ((2 * v8 + 1553945956) & (((v10 + 230564935) & 0xF241D8ED) + 1504850184)) + 1529398154;
  v33 = ((v10 + 57) ^ HIBYTE(v11)) + ((v11 >> 23) & 0xFC ^ 0xA7) - 1;
  v34 = (BYTE2(v11) ^ 0xD9) + ((2 * ((BYTE2(v11) ^ 0xD9 | 0x7E) ^ BYTE2(v11))) ^ 0xB1) - 1;
  v35 = (BYTE1(v11) ^ 0x18) - ((2 * (BYTE1(v11) ^ 0x18)) & 0xFC) - 2;
  v36 = (v8 - ((2 * v8 + 100) & (((v10 + 71) & 0xED) + 8)) - 118) ^ 0x26;
  __asm { BR              X10 }
}

uint64_t sub_100081D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,unsigned int a33)
{
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;

  v38 = v36 - 468581837;
  if (v38 <= 0x40)
    v38 = 64;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v37
                                                                       + 8
                                                                       * (((226
                                                                          * ((v33 - 617988276) & 0x24D5C2FF ^ 0x2F1)
                                                                          - 1026)
                                                                         * (468581837 - v34 - v35 + v38 < 0xF)) ^ v33))
                                                           - 12))(a1, 1176923396, a33);
}

uint64_t sub_100081DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  _BOOL4 v35;

  v33 = v30 + v29;
  v34 = v30 + v29 - 468581837;
  if (v34 <= 0x40)
    v34 = 64;
  v35 = __CFADD__(v33 + (((v28 ^ 0x1C3) - 693) ^ 0xE41200C6), v31 + v34);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 + 8 * (v28 | (4 * v35))) - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

uint64_t sub_100081E3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  int v30;
  _OWORD *v31;
  uint64_t v32;

  *(_OWORD *)(a6 + (a1 + a9 + 30)) = *v31;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 8 * ((245 * (((((((v30 - 93) | 0x10u) + 0x1FFFFFA94) & (v29 + 1)) == 16) ^ (((v30 - 93) | 0x10) - 1)) & 1)) ^ ((v30 - 93) | 0x10))))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29);
}

void sub_100081EA8()
{
  JUMPOUT(0x100081E74);
}

uint64_t sub_100081EB0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((((((v1 - 1244) | 0x40) + 564) ^ 0x84) * (v0 == v2)) ^ ((v1 - 1244) | 0x40)))
                            - ((((v1 - 1244) | 0x40) - 178) | 0x10u)
                            + 18))();
}

uint64_t sub_100081EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,unsigned __int8 a29,unint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *);
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  BOOL v52;
  uint64_t (*v53)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  BOOL v56;

  v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *))(v40 + 8 * v38);
  v44 = STACK[0x2CC];
  v45 = STACK[0x2CC];
  v46 = STACK[0x2D0];
  v47 = STACK[0x2D4];
  v48 = STACK[0x2D0];
  v49 = STACK[0x2D4];
  v50 = LOBYTE(STACK[0x2E0]) ^ 0xE;
  if (v50 == 2)
  {
    v56 = (unint64_t)&STACK[0x280] < a30 && v41 < (unint64_t)&STACK[0x2C0];
    return ((uint64_t (*)(_QWORD, _QWORD))(*(_QWORD *)(v40
                                                               + 8
                                                               * ((1979 * ((v56 ^ (a38 + 1)) & 1)) ^ ((int)a3 + 298)))
                                                   - 12))(LODWORD(STACK[0x2D8]), LODWORD(STACK[0x2D8]));
  }
  else if (v50 == 1)
  {
    v52 = (unint64_t)&STACK[0x280] < a30 && v41 < (unint64_t)&STACK[0x2C0];
    v53 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 8 * ((((v52 ^ a29) & 1) * a28) ^ ((int)a3 + 1792)));
    return v53(v53, 93, a3, 27, &STACK[0x280], a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27);
  }
  else
  {
    LODWORD(STACK[0x2C8]) = 2 * (LODWORD(STACK[0x2C8]) ^ v39) + v39 - (v42 & (4 * (LODWORD(STACK[0x2C8]) ^ v39)));
    LODWORD(STACK[0x2CC]) = (v45 ^ v39) + (v44 ^ v39) + v39 - (v42 & (2 * ((v45 ^ v39) + (v44 ^ v39))));
    LODWORD(STACK[0x2D0]) = (v48 ^ v39) + (v46 ^ v39) + v39 - (v42 & (2 * ((v48 ^ v39) + (v46 ^ v39))));
    LODWORD(STACK[0x2D4]) = (v49 ^ v39) + (v47 ^ v39) + v39 - (v42 & (2 * ((v49 ^ v39) + (v47 ^ v39))));
    return v43(3259404976, 93, a3, 27, &STACK[0x280]);
  }
}

uint64_t sub_100082F18(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,uint64_t a31,uint64_t a32,unsigned int a33)
{
  uint64_t v33;
  _BOOL4 v34;

  if (a33 < 0x2440320B != a30 - 427375365 < ((a3 + 1231) ^ 0x2440370Bu))
    v34 = a30 - 427375365 < ((a3 + 1231) ^ 0x2440370Bu);
  else
    v34 = a30 - 427375365 > a33;
  return ((uint64_t (*)(void))(*(_QWORD *)(v33 + 8 * ((!v34 | (4 * !v34)) ^ (a3 + 1736)))
                            - (a3 + 1031)
                            + 1068))();
}

uint64_t sub_100082F98@<X0>(int a1@<W0>, int a2@<W8>)
{
  int v2;
  uint64_t v3;
  int v4;

  v4 = (((v2 - 56) | 0x23) ^ (a1 + 1052)) + a2 >= ((v2 - 1031) ^ (a1 - 47)) + a2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((2 * v4) | (v4 << 6) | v2)) - 4))();
}

uint64_t sub_100082FE4@<X0>(int a1@<W0>, unint64_t a2@<X1>, int8x16_t *a3@<X5>, int a4@<W8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;

  *a3 = vaddq_s8(vsubq_s8(*(int8x16_t *)(v6 + (a4 + a1)), vandq_s8(vaddq_s8(*(int8x16_t *)(v6 + (a4 + a1)), *(int8x16_t *)(v6 + (a4 + a1))), v8)), v7);
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((7 * (((v4 - 20) ^ a2) != 16)) ^ (v4 + 1010))) - 4))();
}

uint64_t sub_100083040@<X0>(int a1@<W0>, int a2@<W3>, uint64_t a3@<X5>, int a4@<W8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(a3 + v4) = *(_BYTE *)(v7 + (a4 + a1))
                      - ((2 * *(_BYTE *)(v7 + (a4 + a1))) & 0xFC)
                      - 2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (((v4 + 1 != (v5 - 1030) + 35) * a2) ^ v5)) - 4))();
}

uint64_t sub_10008308C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36)
{
  uint64_t v36;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v36
                                                     + 8
                                                     * ((((a36 - 1176923337) > 0xFFFFFFFA)
                                                       * (((a3 - 17) | 4) + 26)) ^ (a3 + 492))))(a1, a2);
}

uint64_t sub_1000830E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v11
                                                     + 8
                                                     * ((((a11 - 1176923337) > 0xFFFFFFFA)
                                                       * (((a3 - 17) | 4) + 26)) ^ (a3 + 492))))(a1, a2);
}

void sub_10008313C()
{
  JUMPOUT(0x100082230);
}

uint64_t sub_100083160@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7)
{
  int v7;
  uint64_t v8;
  _BOOL4 v9;

  v9 = a7 < 0x9BD38BD4;
  if (v9 == (a1 + 1578770052) < 0x9BD38BD4)
    v9 = a1 + 1578770052 < a7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((26 * !v9) | v7)) - ((v7 - 1258) ^ 0x1ELL)))();
}

uint64_t sub_1000831C8@<X0>(int a1@<W0>, unsigned int a2@<W1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X5>, int a6@<W8>)
{
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  unsigned int v14;
  int v15;
  _BOOL4 v16;

  v13 = a2 < v9;
  *(_BYTE *)(a5 + (v6 + v8)) = a4
                                           + *(_BYTE *)(v12 + (a6 + a1))
                                           - ((2 * *(_BYTE *)(v12 + (a6 + a1))) & 0xFC)
                                           - 24;
  v14 = a6 + 1 + v10;
  v15 = v13 ^ (v14 < v9);
  v16 = v14 < a2;
  if (!v15)
    v13 = v16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((!v13 * a3) ^ v7)) - 8))();
}

uint64_t sub_100083234(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,unsigned int a33)
{
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v39;

  v39 = (a4 ^ 0x5Eu) * a3;
  v35 = 831981571 * ((v34 - 168) ^ 0x99A1D024);
  *(_QWORD *)(v34 - 160) = a20;
  *(_DWORD *)(v34 - 168) = v35 ^ a13;
  *(_DWORD *)(v34 - 164) = v35 + a4 + 1316;
  sub_10008B438(v34 - 168);
  v36 = STACK[0x2C4] & 0x3F;
  *((_BYTE *)&STACK[0x280] + (v36 ^ 0x15)) = 126;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v33
                                                                                + 8
                                                                                * ((((v36 ^ 0x15) > 0x37)
                                                                                  * (a4 + 1547)) ^ a4))
                                                                    - v39
                                                                    + 1868))(3259404976, 93, a33, 27);
}

uint64_t sub_100083318@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8 * ((62 * ((((v1 - 1866) ^ (a1 == ((v1 - 1245) ^ 0x24C))) & 1) == 0)) ^ v1))
                            - 12))();
}

uint64_t sub_100083368()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((262 * ((v0 ^ 0x2Au) >= ((v1 - 578) ^ 0x39u))) ^ v1)) - 4))();
}

uint64_t sub_1000833A0@<X0>(unsigned int a1@<W8>, uint64_t a2)
{
  char v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(a2 + a1) = v5;
  return (*(uint64_t (**)(void))(v4 + 8 * ((((v2 & 0x38) == 8) * ((v3 ^ 0x634) - 1115)) ^ v3 ^ 0x634)))();
}

uint64_t sub_1000833E0()
{
  int v0;
  _QWORD *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *v1 = v5;
  return (*(uint64_t (**)(void))(v4 + 8 * (((v3 == 0) * v2) ^ v0)))();
}

uint64_t sub_100083400@<X0>(unsigned int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)((((a1 + 1439276644) & 0xAA365F3E ^ 0x10) * (v2 == v1)) ^ a1))
                            - (a1 ^ 0x277)))();
}

uint64_t sub_100083458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;

  *(_BYTE *)(a6 + v6 + v8) = v10;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11
                                        + 8 * ((((unint64_t)(v6 + 1 + v8) < 0x40) * (v7 ^ v9)) ^ (v7 + 580)))
                            - 4))();
}

void sub_100083490()
{
  JUMPOUT(0x10008222CLL);
}

uint64_t sub_1000834C4()
{
  int v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((1590 * ((v2 + 1419 + v0 - 2146397217) < 0x38)) ^ (v2 + 865)))
                            - 4))();
}

uint64_t sub_100083508@<X0>(int a1@<W8>)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v4 = v2 + v1 + ((a1 - 1514955843) & 0x5A4C5EB7) - 48;
  if (v4 <= 0x38)
    v4 = 56;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((712 * (((a1 - 39) ^ (v4 - v1 + 2146395749 < 8)) & 1)) ^ a1))
                            - 4))();
}

uint64_t sub_10008357C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(a10 + v11) = v14;
  return ((uint64_t (*)(void))(*(_QWORD *)(v13
                                        + 8
                                        * ((25
                                          * ((((((v12 ^ 0x19u) - 404) & v10) == 8) ^ ((v12 ^ 0x19) + 1)) & 1)) ^ v12 ^ 0x19))
                            - 4))();
}

uint64_t sub_1000835D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v6 + v9) = v11;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * (((((v7 == v9) ^ v8) & 1) * a5) ^ v5)) - 4))();
}

uint64_t sub_100083604()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((1582 * (((v0 == v1) ^ (v2 - 97)) & 1)) ^ v2))
                            - ((v2 - 865) ^ 0x35)))();
}

uint64_t sub_100083644@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  *(_BYTE *)(a1 + a2 + v3) = v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * (((2 * ((unint64_t)(a2 + 1 + v3) < 0x38)) | (8
                                                                                            * ((unint64_t)(a2 + 1 + v3) < 0x38))) ^ (v2 + 865)))
                            - 4))();
}

void sub_100083678(uint64_t a1, uint64_t a2, char a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  char v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;

  v3 = LOBYTE(STACK[0x2E0]) ^ 0xE;
  if (v3 == 1)
  {
    v9 = STACK[0x2C4];
    v10 = STACK[0x2C0];
    LOBYTE(STACK[0x2B8]) = (a3 ^ 0x8A) + ((16 * LOBYTE(STACK[0x2C4])) ^ 0xAF) + ((8 * LOBYTE(STACK[0x2C4])) ^ 0xAA) + 66;
    LOBYTE(STACK[0x2B9]) = ((v9 >> 5) ^ 0x6C) + ((v9 >> 4) & 0xFC ^ 0x27) - 1;
    LOBYTE(STACK[0x2BA]) = ((v9 >> 13) ^ 0x62) + ((v9 >> 12) & 0xFC ^ 0x3B) - 1;
    LOBYTE(STACK[0x2BB]) = ((v9 >> 21) ^ 0x29) - ((2 * ((v9 >> 21) ^ 0x29)) & 0xFC) - 2;
    HIDWORD(v11) = v10 ^ 8;
    LODWORD(v11) = v9;
    LOBYTE(STACK[0x2BC]) = (v11 >> 29) - ((2 * (v11 >> 29)) & 0xFC) - 2;
    LOBYTE(STACK[0x2BD]) = ((v10 >> 5) ^ 0x7C) + ((v10 >> 4) & 0xFC ^ 7) - 1;
    LOBYTE(STACK[0x2BE]) = ((v10 >> 13) ^ 0x21) + ((2 * (((v10 >> 13) ^ 0x21 | 0x7E) ^ (v10 >> 13))) ^ 0x41) - 1;
    v12 = (v10 >> 21) ^ 0xFFFFFFCE;
    v8 = (2 * v12) & 0xFC;
    v7 = v12 - 2;
  }
  else
  {
    if (v3 != 2)
      goto LABEL_6;
    v4 = STACK[0x2C0];
    v5 = STACK[0x2C4];
    LOBYTE(STACK[0x2B8]) = ((-93 * (a3 ^ 0x38)) ^ (LODWORD(STACK[0x2C0]) >> 21) ^ 0x75)
                         - ((2 * ((-93 * (a3 ^ 0x38)) ^ (LODWORD(STACK[0x2C0]) >> 21) ^ 0x75)) & 0xFC)
                         - 2;
    LOBYTE(STACK[0x2B9]) = ((v4 >> 13) ^ 0x21) - ((2 * ((v4 >> 13) ^ 0x21)) & 0xFC) - 2;
    LOBYTE(STACK[0x2BA]) = ((v4 >> 5) ^ 0x7C) - ((2 * ((v4 >> 5) ^ 0x7C)) & 0xFC) - 2;
    HIDWORD(v6) = v4 ^ 8;
    LODWORD(v6) = v5;
    LOBYTE(STACK[0x2BB]) = (v6 >> 29) - ((2 * (v6 >> 29)) & 0xFC) - 2;
    LOBYTE(STACK[0x2BC]) = ((v5 >> 21) ^ 0x29) + ((2 * (((v5 >> 21) ^ 0x29 | 0x7E) ^ (v5 >> 21))) ^ 0x51) - 1;
    LOBYTE(STACK[0x2BD]) = ((v5 >> 13) ^ 0x62) + ((v5 >> 12) & 0xFC ^ 0x3B) - 1;
    LOBYTE(STACK[0x2BE]) = ((v5 >> 5) ^ 0x6C) + ((v5 >> 4) & 0xFC ^ 0x27) - 1;
    LOBYTE(v5) = (8 * v5) ^ 0xA8;
    v7 = v5 - 2;
    v8 = 2 * v5;
  }
  LOBYTE(STACK[0x2BF]) = v7 - v8;
LABEL_6:
  JUMPOUT(0x10008222CLL);
}

uint64_t sub_1000838E0@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3
                                                                                 + 8
                                                                                 * (((((((a2 - 678) ^ 0x29F) - 674) & v2) == 1176923396)
                                                                                   * (((a2 - 678) | 0x30) ^ 0x1E5)) ^ a2))
                                                                     - 4))(a1, 3054478549, 1240488125, 4099281650);
}

uint64_t sub_100083948@<X0>(int a1@<W1>, unsigned int a2@<W2>, int a3@<W3>, uint64_t a4@<X5>, uint64_t a5@<X6>, unint64_t a6@<X7>, int a7@<W8>)
{
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(a4 + (a7 + a3)) = *(_BYTE *)(v10 + (((v7 + a1) & a2 ^ a6) & (v8 + a5)));
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((57 * (((v8 + 1) & 0xFFFFFFFC) != v9)) ^ v7)) - 4))();
}

uint64_t sub_10008399C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t (*a16)(uint64_t), uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v22 = 831981571 * (((((v21 - 168) | 0xEC6C17E8) ^ 0xFFFFFFFE) - (~(v21 - 168) | 0x1393E817)) ^ 0x8A323833);
  *(_QWORD *)(v21 - 160) = a20;
  *(_DWORD *)(v21 - 168) = v22 ^ 0x5FF5036A;
  *(_DWORD *)(v21 - 164) = v22 + v20 + 1289;
  v23 = sub_10008B438(v21 - 168);
  return a16(v23);
}

uint64_t sub_100083A08(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  if (a34 == 2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v39
                                                       + 8
                                                       * ((2025
                                                         * (LODWORD(STACK[0x2DC]) != (((a3 + 467) | 0x100) ^ 0x691B65AA))) ^ (a3 + 723))))(a1, 235795823);
  if (a34 == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v39
                                                       + 8
                                                       * ((382
                                                         * (LODWORD(STACK[0x2DC]) == (((a3 + 463) | 0x7A) ^ 0x691B64D4))) ^ (a3 + 585))))(a15, 235795823);
  LOBYTE(STACK[0x2DB]) = ((((unint64_t)&a39 ^ 0x1D7FFF3FEFFF2EE7) - 7 + ((a3 - 113) & (2 * (_QWORD)&a39)) + 32) ^ 0xBA)
                       * (((unint64_t)&a39 ^ 0x1D7FFF3FEFFF2EE7) - 7 + ((a3 - 113) & (2 * (_QWORD)&a39)) + a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8 * ((a3 + 471) | 0x100)))(a15, 235795823);
}

void sub_100083D6C()
{
  JUMPOUT(0x100083D40);
}

uint64_t sub_100083D74@<X0>(int a1@<W1>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t result;

  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v3 - 204) = 0xFEFEFEFEFEFEFEFELL;
  *(_QWORD *)(v3 - 196) = 0xFEFEFEFEFEFEFEFELL;
  v7 = ((v3 - 168) ^ 0x94AD4959) * a1;
  v8 = (_QWORD *)(v3 - 168);
  v8[5] = v3 - 204;
  *v8 = v5;
  v8[2] = v3 - 188;
  v8[3] = v6;
  *(_DWORD *)(v3 - 132) = (a2 + 1889) ^ v7;
  *(_DWORD *)(v3 - 160) = v7 + 2046750649;
  result = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4 + 8 * (a2 | 0x48)) - 8))(v3 - 168);
  *(_DWORD *)(v2 + 40) = *(_DWORD *)(v3 - 136);
  return result;
}

void sub_100083E34(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) - 268847287 * ((((2 * a1) | 0x834EB920) - a1 - 1101487248) ^ 0xBE0D4DB8);
  __asm { BR              X10 }
}

uint64_t sub_100083F00@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((*(_QWORD *)(v1 + 16) == 0)
                                * ((a1 & 0x7AE091B7 ^ 0x516) + (a1 & 0x7AE091B7 ^ 0x11) - 772)) ^ a1 & 0x7AE091B7)))();
}

uint64_t sub_100083F84@<X0>(int a1@<W8>)
{
  uint64_t (*v1)(uint64_t *);
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;

  v6 = (((&v8 | 0x2E438E06) - (&v8 & 0x2E438E06)) ^ 0x5096ABF0) * v2;
  v11 = 0x118C242060FB2D82;
  v12 = (v3 - 794) ^ v6;
  v8 = v5;
  v9 = v6 ^ a1;
  v10 = v6 ^ 0x49D399AF;
  result = v1(&v8);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(v5 - 0x56428495FB6297ALL);
  return result;
}

void sub_100084244(_DWORD *a1)
{
  unsigned int v1;

  v1 = (*a1
      + 1224239923 * (((a1 | 0xA81C68C2) - (_DWORD)a1 + (a1 & 0x57E3973D)) ^ 0x5AAF9515)) ^ 0x436;
  __asm { BR              X6 }
}

uint64_t sub_1000843EC(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unint64_t a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (((v6 - 242) | v7) ^ ((8 * (a6 == 31)) | ((a6 == 31) << 9))))
                            - ((((v6 - 242) | v7) + a3) & a4 ^ a5)))();
}

void sub_100084454()
{
  JUMPOUT(0x1000843C4);
}

uint64_t sub_10008445C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;

  v23 = a8 - 162;
  *(_DWORD *)(a10 - 0x73495CDCA303A980) = 1676444741 - v18;
  v24 = v19 << (((a8 + 94) ^ 0x1C) - 58);
  v25 = 831981571 * ((((v22 - 136) | 0x1D8DD29A) - (v22 - 136) + ((v22 - 136) & 0xE2722D60)) ^ 0x842C02BE);
  *(_QWORD *)(v22 - 136) = a12;
  *(_DWORD *)(v22 - 128) = a8 - 162 - v25 - 1109;
  *(_DWORD *)(v22 - 124) = v25 + 376798310;
  sub_10008A9E4(v22 - 136);
  v26 = 3804331 * (((v22 - 136) & 0xBBAC2B3F | ~((v22 - 136) | 0xBBAC2B3F)) ^ 0x3A86F136);
  *(_DWORD *)(v22 - 128) = v26 + v23 + 573;
  *(_DWORD *)(v22 - 124) = ((v19 << 6) & 0xBF6D79C0) - v26 + (v24 ^ (((8 * v23) ^ 0x2E38) + 1605809624)) - 9601184;
  *(_QWORD *)(v22 - 136) = a12;
  sub_10006A710(v22 - 136);
  *(_DWORD *)(v22 - 128) = v23
                         + 831981571 * (((v22 - 136) & 0x2C0498D9 | ~((v22 - 136) | 0x2C0498D9)) ^ 0x4A5AB702)
                         - 971;
  *(_QWORD *)(v22 - 136) = a18;
  *(_QWORD *)(v22 - 120) = &STACK[0x2DB44D49A49B007E];
  sub_100085594(v22 - 136);
  *(_DWORD *)(v22 - 112) = (v23 + 145) ^ (69008221
                                        * (((v22 - 136) & 0xDFB6986 | ~((v22 - 136) | 0xDFB6986)) ^ 0x21A6C473));
  *(_QWORD *)(v22 - 136) = a12;
  *(_QWORD *)(v22 - 120) = a18;
  v27 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * (v23 - 1098)) - 8))(v22 - 136);
  return (*(uint64_t (**)(uint64_t))(v20 + 8 * ((100 * (*(_DWORD *)(v22 - 128) > 0x9B59335u)) ^ v23)))(v27);
}

uint64_t sub_100084698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 - 136) = v18;
  *(_QWORD *)(v20 - 120) = a17;
  *(_DWORD *)(v20 - 128) = v17
                         + 831981571 * (((v20 - 136) & 0xF66E908A | ~((v20 - 136) | 0xF66E908A)) ^ 0x9030BF51)
                         + 25;
  v21 = sub_100085594(v20 - 136);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19
                                                      + 8
                                                      * (((((a12 < 1) ^ (v17 + 2)) & 1)
                                                        * ((211 * (v17 ^ 0x138)) ^ 0x5B3)) ^ v17))
                                          - 12))(v21);
}

uint64_t sub_100084750@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1576
                                          * (((((a1 << ((v5 - 114) & 0xED ^ 0xC4)) ^ v3)
                                             + v2
                                             - (v3 & (2 * ((a1 << ((v5 - 114) & 0xED ^ 0xC4)) ^ v3)))) ^ v2) > v1)) ^ v5))
                            - 12))();
}

uint64_t sub_1000847A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(uint64_t), uint64_t a18)
{
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  *(_QWORD *)(v19 - 120) = a15;
  *(_DWORD *)(v19 - 128) = v18
                         + 831981571
                         * ((-882225999 - ((v19 - 136) | 0xCB6A4CB1) + ((v19 - 136) | 0x3495B34E)) ^ 0xAD34636A)
                         - 1133;
  *(_QWORD *)(v19 - 136) = a18;
  sub_100085594(v19 - 136);
  v20 = 3804331 * (((v19 - 136) & 0xE7895B79 | ~((v19 - 136) | 0xE7895B79)) ^ 0x66A38170);
  *(_QWORD *)(v19 - 136) = a16;
  *(_DWORD *)(v19 - 128) = v20 + v18 + 411;
  *(_DWORD *)(v19 - 124) = 1596210265 - v20;
  sub_10006A710(v19 - 136);
  *(_QWORD *)(v19 - 120) = a18;
  *(_QWORD *)(v19 - 136) = a16;
  *(_DWORD *)(v19 - 112) = (v18 - 17) ^ (69008221
                                       * (((v19 - 136) & 0xDA783752 | ~((v19 - 136) | 0xDA783752)) ^ 0xF6259AA7));
  v21 = a17(v19 - 136);
  return (*(uint64_t (**)(uint64_t))(a14
                                            + 8
                                            * (((*(_DWORD *)(v19 - 128) > 0x9B59335u)
                                              * ((((v18 - 314) | 0x40) + 200) ^ 0x5AD)) ^ (v18 - 1264))))(v21);
}

uint64_t sub_100084C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12)
{
  uint64_t v12;
  int v13;

  return ((uint64_t (*)(void))(*(_QWORD *)(v12
                                        + 8
                                        * ((89
                                          * ((a12 ^ 0x3B8EED9A)
                                           - 41992192
                                           + ((a12 << (((v13 - 79) | 0x81) + 60)) & 0x771DDB34)
                                           + (((v13 - 771) | 0x121) ^ 0xC6F1D1D5) < 0x7FFFFFFE)) ^ v13))
                            - 12))();
}

uint64_t sub_100085594(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) - 831981571 * ((2 * (a1 & 0x1F062D56) - a1 - 520498519) ^ 0x7958028D);
  return (*(uint64_t (**)(void))((char *)*(&off_10025FA20 + v1 - 270)
                              + 8
                              * (int)(((*(_QWORD *)a1 != *(_QWORD *)(a1 + 16)) * ((v1 + 1362194087) & 0xAECE913A ^ 0x46E)) ^ v1)
                              - 4))();
}

uint64_t sub_100085624@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v4 = *(_DWORD *)(v2 - 0x2DB44D49A49B002ALL);
  v5 = v4 - 237901512;
  if (v4 - 237901512 < 0)
    v5 = 237901512 - v4;
  *(_DWORD *)(v1 - 0x2DB44D49A49B002ALL) = v4;
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((98
                                * ((v5 ^ 0xFFDBFFDF) + 1588531711 + ((46 * (v3 ^ 0x125) - 4720084) & (2 * v5)) == ((v3 - 66249692) & 0x3F2E3F9 ^ 0x5E8B1086))) ^ v3)))();
}

uint64_t sub_1000856D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  *(_DWORD *)(*(_QWORD *)(v1 - 0x2DB44D49A49B0026) + 4 * (v5 - 1586172383)) = *(_DWORD *)(*(_QWORD *)(v2 - 0x2DB44D49A49B0026)
                                                                                            + 4 * (v5 - 1586172383));
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((974 * (v5 + 8 * (v3 ^ 0x5B9) - 345 == v4 + 344)) ^ v3)) - 8))();
}

void sub_100085740()
{
  JUMPOUT(0x100085704);
}

void sub_100085748(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 24) + 1543737703 * (((a1 | 0xC7921CD6) - (a1 & 0xC7921CD6)) ^ 0xB9664CAA);
  __asm { BR              X10 }
}

uint64_t sub_100085808@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (int)((((((a1 ^ 0x5A3) - 1379) ^ 0xFFFFFFD3) + (a1 ^ 0x5A3) - 1379) * (v2 == 0)) ^ a1 ^ 0x5A3))
                            - 12))();
}

uint64_t sub_100085848@<X0>(uint64_t (*a1)(uint64_t *)@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;

  v4 = v1 - 345;
  v5 = 3804331 * ((2 * (&v7 & 0x3A058450) - &v7 - 973440084) ^ 0xBB2F5E5A);
  v11 = v4 ^ v5;
  v7 = v3;
  v10 = 0x118C242060FB2D82;
  v8 = v5 ^ 0xC6EE6959;
  v9 = v5 ^ 0x49D399AF;
  result = a1(&v7);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(v3 - 0x56428495FB6297ALL);
  return result;
}

void XpqjnD(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  int v11;

  if (a5)
    v8 = a6 == 0;
  else
    v8 = 1;
  v11 = !v8 && a7 != 0 && a8 != 0;
  __asm { BR              X9 }
}

uint64_t sub_100085EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _DWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,unsigned int a22)
{
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v26;

  *a5 = 0;
  *a6 = 0;
  a22 = 1178560073 * (((&a21 | 0xD492092) - (&a21 & 0xD492092)) ^ 0xEA7C02FA) - 1501685844;
  v26 = v22;
  v24 = sub_1000AABF4(&a21);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v26 + 8 * ((60 * (a21 != v23)) ^ 0x154u)) - 8))(v24);
}

uint64_t sub_100085F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t *a21,unsigned int a22,int a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  a21 = &STACK[0x82D647BA4E6A019];
  a22 = (831981571 * (&a21 ^ 0x99A1D024)) ^ 0x87;
  sub_10006A5D8((uint64_t)&a21);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a14 + 8 * ((1337 * (a23 == 489733862)) ^ 0x168u)) - (v25 ^ 0x42E2F00D)))(v26, v27, v28, v29, v30, v31, v32, v33, a9, v24, v23, a12, a13);
}

uint64_t sub_100086004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unint64_t v32;
  void (*v33)(uint64_t *);
  unint64_t v34;
  uint64_t v35;

  v29 = v28 + 555;
  v30 = 1224239923 * ((v23 & 0x2790CF84 | ~(v23 | 0x2790CF84)) ^ 0x2ADCCDAC);
  LODWORD(a23) = (v29 + 17) ^ v30;
  LODWORD(a21) = v27 - ((2 * v27) & 0xDE3BA25A) - 283258579 - v30;
  a22 = a19;
  sub_100080318((uint64_t)&a21);
  v31 = 1224239923 * ((((2 * v23) | 0x97CE40C2) - v23 + 874045343) ^ 0x3954DDB6);
  a22 = a19;
  LODWORD(a21) = v26 - v31 - 283258579 - ((v29 - 566518073) & (2 * v26));
  LODWORD(a23) = (v29 + 17) ^ v31;
  sub_100080318((uint64_t)&a21);
  v32 = 831981571 * ((v23 - 2 * (v23 & 0x26717E1E77E9F691) + 0x26717E1E77E9F691) ^ 0xF7813F5EEE4826B5);
  LODWORD(a22) = (v29 - 489) ^ v32;
  a23 = a19;
  a21 = ((((v29 - 1545887274) & 0xBFE) + 0x62D8807FC884E355) * v25 + 0x6F7458225064C1BDLL) ^ v32;
  v33 = (void (*)(uint64_t *))((char *)*(&off_10025FA20 + (int)(v29 - 776)) - 4);
  v33(&a21);
  v34 = 831981571 * ((-2 - ((~v23 | 0x54A2F2BB4CFCE4EBLL) + (v23 | 0xAB5D0D44B3031B14))) ^ 0x8552B3FBD55D34CFLL);
  a23 = a19;
  a21 = v34 ^ (0x62D8807FC884E4BDLL * v24 + 0x6F7458225064C1BDLL);
  LODWORD(a22) = (v29 - 489) ^ v34;
  v35 = ((uint64_t (*)(uint64_t *))v33)(&a21);
  return (*(uint64_t (**)(uint64_t))(a14 + 8 * ((1762 * (HIDWORD(a22) == 489733862)) ^ v29)))(v35);
}

uint64_t sub_10008624C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,int a24,uint64_t a25,unint64_t *a26,int a27)
{
  int v27;
  unsigned int v28;
  uint64_t v29;

  v28 = 1224239923 * ((((2 * &a22) | 0xA63C9F70) - &a22 - 1394495416) ^ 0xA1ADB26F);
  a25 = a20;
  a26 = &STACK[0x72F2C1D3322B8818];
  a23 = (a10 + 368399352) ^ v28;
  a24 = v28 ^ 0x2705443;
  a22 = v28 ^ 0x12B6892A;
  v29 = sub_1000AACB4((uint64_t)&a22);
  return (*(uint64_t (**)(uint64_t))(a15 + 8 * (((a27 != v27) * ((a10 ^ 0x251) - 190)) ^ a10)))(v29);
}

uint64_t sub_10008630C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t *a21,unint64_t *a22,unint64_t *a23,unint64_t *a24)
{
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v26 = v24 + 186;
  LODWORD(a21) = v26 - 2078219279 * (&a21 ^ 0xDAFA9674) - 231789336;
  a23 = &STACK[0x20BA795F69D3FF5];
  a24 = a15;
  a22 = &STACK[0x7F1325F673F67EAF];
  sub_1000AB2F4((uint64_t)&a21);
  LODWORD(a22) = v26
               + 3804331
               * ((-1325552261 - (&a21 | 0xB0FDAD7B) + (&a21 | 0x4F025284)) ^ 0x31D77772)
               + 371;
  a21 = &STACK[0x1CAC648E56C35109];
  a23 = a15;
  a24 = &STACK[0x5B1E97A52371A255];
  (*(void (**)(unint64_t **))(v25 + 8 * (int)(v26 & 0xE89FE81F)))(&a21);
  LODWORD(a23) = v26 - 944348131 * (&a21 ^ 0xA319A44E) - 28;
  a21 = &STACK[0x20BA795F69D3FF1];
  a22 = a15;
  ((void (*)(unint64_t **))(*(_QWORD *)(v25 + 8 * (v26 - 312)) - 8))(&a21);
  LODWORD(a22) = v26
               - 241568881 * ((2 * (&a21 & 0x36C70448) - &a21 + 1228471220) ^ 0x9F29FFF6)
               + 36;
  a21 = a15;
  v27 = sub_1000906D4((uint64_t)&a21);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a14
                                                      + 8
                                                      * ((1466 * (HIDWORD(a22) == ((v26 - 34) | 0x21) + 489733317)) ^ v26))
                                          - ((305 * (v26 ^ 0x221u)) ^ 0x397)))(v27);
}

uint64_t sub_10008650C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  uint64_t v17;
  int v18;
  int v19;

  return ((uint64_t (*)(void))(*(_QWORD *)(v17
                                        + 8
                                        * (((((a17 == v18) ^ (31 * (v19 ^ 0x30))) & 1)
                                          * (305 * (v19 ^ 0x222) - 912)) ^ v19))
                            - 4))();
}

uint64_t sub_100086558@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  int v17;
  uint64_t v18;
  int v19;
  int v20;

  v20 = (v17 ^ 0x1EF) + (a17 ^ v19) - ((((v17 - 527) | a8) ^ 0x2E4F229C) & (2 * (a17 ^ v19))) - 1759015809;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 + 8 * ((1717 * (((2 * v20) & 0xABDFB9C6 ^ 0x2A4F2086) + (v20 ^ 0x42C84CBC) + 1862005726 != 1156305089)) ^ v17)) - 4))(a1, a2, a3, a4, a5, a6, a7, 489733862);
}

uint64_t sub_1000865FC()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((v1 ^ 0x404) * ((v2 + v0 + 705700637) > 7)) ^ v1))
                            - 8))();
}

uint64_t sub_100086660()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1068 * (v0 - v5 >= ((v2 - v1 - 992) ^ (v3 + 2175) ^ 0x709uLL))) ^ v2))
                            - 8))();
}

uint64_t sub_1000866A0(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((111 * (v2 < 352 * ((a2 - 152637386) & 0x4BFBF8AD ^ (v3 + 356)) - 1376)) ^ a2)))();
}

uint64_t sub_1000866EC()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v8 = v3 + ((v5 + 1731978106) & 0x55E12E7F ^ (v2 - 517));
  v9 = *(_OWORD *)(v0 + v8 - 15);
  v10 = *(_OWORD *)(v0 + v8 - 31);
  v11 = v7 + v8;
  *(_OWORD *)(v11 - 15) = v9;
  *(_OWORD *)(v11 - 31) = v10;
  return (*(uint64_t (**)(void))(v6 + 8 * ((549 * ((v4 & 0xFFFFFFE0) == 32)) ^ (v1 + v5 + 334))))();
}

void sub_100086758()
{
  JUMPOUT(0x10008671CLL);
}

uint64_t sub_100086764()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((((v2 - 360) ^ 0x2B5 ^ ((v2 - 5) | 0x20)) * (v0 == v1)) ^ v2))
                            - 4))();
}

uint64_t sub_100086798(uint64_t a1, int a2)
{
  int v2;
  char v3;
  int v4;
  uint64_t v5;
  _BOOL4 v6;

  v6 = (v3 & 0x18) == ((a2 + 1249) ^ (v4 + 1768)) + v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((4 * v6) | (32 * v6)) ^ a2)) - 4))();
}

uint64_t sub_1000867D0(int a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 7 + (v3 + v2 - v5)) = *(_QWORD *)(v1 - 7 + (v3 + v2 - v5));
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((1018 * ((((a1 - 1391) | 0xAA) ^ 0xB3) + v5 == (v4 & 0xFFFFFFF8))) ^ a1))
                            - 4))();
}

uint64_t sub_10008682C(uint64_t a1, int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((((v3 + (a3 ^ (v5 + 529)) + 546) ^ 0x96) * (v4 == a2)) ^ a3)) - 4))();
}

uint64_t sub_100086860()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v7 + (v5 + v3)) = *(_BYTE *)(v1 + (v5 + v3));
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8 * (((v5 - 1 == v0) * (((v2 + v4 + 512) | 0x22) - 493)) ^ (v2 + v4 + 1238)))
                            - 8))();
}

uint64_t sub_1000868A4@<X0>(int a1@<W7>, unsigned int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  int v12;
  uint64_t v13;

  *a7 = (a2 >> 2) ^ 0x74C2FB9;
  return ((uint64_t (*)(void))(*(_QWORD *)(v13 + 8 * ((421 * (a12 != a1)) ^ v12)) - (v12 + 369) + 911))();
}

uint64_t sub_1000868F4@<X0>(unsigned int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;
  uint64_t v9;
  uint64_t (*v10)(void);

  v10 = (uint64_t (*)(void))(*(_QWORD *)(a7
                                      + 8
                                      * ((7
                                        * ((((*(uint64_t (**)(_QWORD, uint64_t))(v9 + 8 * (v7 ^ 0x2C0)))((v8 + v7 - 26 - 520) ^ a1, 51302153) == 0) ^ (v7 - 17)) & 1)) ^ v7))- 4);
  return v10();
}

uint64_t sub_10008695C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  int v18;
  int v19;
  uint64_t v20;
  int v21;

  v21 = (a18 ^ v19) - (((v18 ^ 0x2F0) - 384927878) & (2 * (a18 ^ v19))) - 192463815;
  return ((uint64_t (*)(void))(*(_QWORD *)(v20
                                        + 8
                                        * ((143
                                          * ((((6 * (v18 ^ 0x2F0)) ^ 0xDFBCBA2E) & (2 * v21) ^ 0xC90C3872)
                                           + (v21 ^ 0x1B5963C6)
                                           + 1513619417 != 1242980312)) ^ v18))
                            - 4))();
}

uint64_t sub_1000869F4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v2 ^ (62 * ((v1 + v0 + 270639105) > 7))))
                            - ((((v2 + 39905848) | 0x40820005u) - 1122168018) ^ 0x337)))();
}

uint64_t sub_100086A84(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;

  return (*(uint64_t (**)(void))(v9
                              + 8
                              * (((v8 - a1 >= (a4 ^ (a8 + 1169) ^ (unint64_t)(a6 + 40)))
                                * (((a4 - 517) | 0x680) - 1852)) ^ a4)))();
}

uint64_t sub_100086AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  unsigned int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(a6
                            + *(_QWORD *)(v7 + 8 * (((a5 ^ 0x7E4) * (v6 > 0x1F)) ^ a5))
                            - ((a5 + 1995172713) & 0xCBF6FCED)
                            - 4))();
}

uint64_t sub_100086B14(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  uint64_t v12;

  v8.i64[0] = 0xFEFEFEFEFEFEFEFELL;
  v8.i64[1] = 0xFEFEFEFEFEFEFEFELL;
  v9 = (v6 + v4);
  v10 = *(int8x16_t *)(v2 + v9 - 15);
  v11 = *(int8x16_t *)(v2 + v9 - 31);
  v12 = a1 + v9;
  *(int8x16_t *)(v12 - 15) = veorq_s8(v10, v8);
  *(int8x16_t *)(v12 - 31) = veorq_s8(v11, v8);
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * ((1991 * (((a2 + 405390958) & 0xA4F34B8E ^ 0x22A) == (v5 & 0xFFFFFFE0))) ^ (v3 + a2 + 369))))();
}

uint64_t sub_100086B94(uint64_t a1)
{
  int v1;
  int v2;
  void (*v3)(unsigned int *);
  int v4;
  _QWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v4 = 5 * ((v2 + 298) ^ 0x295);
  *v6 = a1;
  *v7 = v1;
  v11 = v8;
  v10 = (v4 - 763) ^ (69008221 * ((&v10 & 0x5AEC8B8A | ~(&v10 | 0x5AEC8B8A)) ^ 0x76B1267F));
  v3(&v10);
  v11 = v9;
  v10 = (v4 - 763) ^ (69008221 * (&v10 ^ 0xD3A2520A));
  v3(&v10);
  return 0;
}

void sub_100086E18(uint64_t a1)
{
  int v1;

  v1 = 3804331 * ((-2 - ((a1 | 0xD3EE21B) + (~(_DWORD)a1 | 0xF2C11DE4))) ^ 0x8C143812);
  __asm { BR              X15 }
}

uint64_t sub_100086EEC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD v8[2];
  uint64_t v9;

  v6 = ((2 * (v8 & 0x3297F1E8) - v8 - 848818670) ^ 0xB3BD2BE4) * v2;
  v9 = v3;
  v8[0] = a1 - ((v4 + 436934364) & 0xED5F0690) - v6 + v5 - 2085288292;
  v8[1] = v6 + v5 - 377 - 1180;
  return (*(uint64_t (**)(_DWORD *))(v1 + 8 * ((v5 - 377) ^ 0x69D)))(v8);
}

void sub_100087030(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unint64_t *v5;
  unsigned int v6;
  unsigned int v7;

  **(_DWORD **)(a1 + 96) = *(_DWORD *)(a2 + 16);
  v3 = 235795823
     * (((&v5 | 0xD878EB21) - &v5 + (&v5 & 0x278714D8)) ^ 0x4CD5A278);
  v5 = &STACK[0x73F39308AC2F3883];
  v6 = v3 ^ 0xFE0643CC;
  v7 = v3 + 426523017;
  sub_1000639C8((uint64_t)&v5);
  __asm { BR              X9 }
}

uint64_t sub_1000871D8()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;

  v5 = v0 - 2011786153;
  if (v5 <= 0x40)
    v5 = 64;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * ((7 * (v4 - v2 - v1 + v5 < 0xF)) ^ 0x6A9u)) - 4))(2891363383);
}

uint64_t sub_100087248()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;

  v7 = v0 + v1;
  v8 = v7 - 2011786153;
  if ((v7 - 2011786153) <= 0x40)
    v8 = v4;
  v9 = v6 - v7 >= (v3 + v6 + v2 + v8);
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((4 * v9) | (8 * v9) | 0x193u)) - 12))();
}

uint64_t sub_10008729C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  return ((uint64_t (*)(void))(*(_QWORD *)(v17
                                        + 8
                                        * (((a14 + v18 - 220 + (unint64_t)(v16 + v14 + 1283) >= ((899 * (v15 ^ 0x191)) ^ 0x716uLL))
                                          * ((v15 + 258182003) & 0x7FD ^ 0x11A)) ^ v15))
                            - 12))();
}

uint64_t sub_100087304@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int8x16_t *v13;
  int8x16_t v14;
  int8x16_t v15;

  v14.i64[0] = 0xFCFCFCFCFCFCFCFCLL;
  v14.i64[1] = 0xFCFCFCFCFCFCFCFCLL;
  v15.i64[0] = 0xFEFEFEFEFEFEFEFELL;
  v15.i64[1] = 0xFEFEFEFEFEFEFEFELL;
  *(int8x16_t *)(v10 + (a3 + a9)) = vaddq_s8(vsubq_s8(*v13, vandq_s8(vaddq_s8(*v13, *v13), v14)), v15);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 + 8 * ((501 * ((v11 ^ 0x695u) - 387 != ((v9 + 1) & 0x1FFFFFFF0))) ^ v11 ^ 0x1F5u)) - 4))(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10008738C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6
                                                                        + 8
                                                                        * ((((v5 + 881) ^ 0x56D) * (v3 == v4)) ^ v5))
                                                            - ((v5 - 201324115) & 0xFF4FF)
                                                            + 52))(a1, a2, v2);
}

uint64_t sub_1000873D8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int32x4_t a29,int32x4_t a30,int32x4_t a31,int32x4_t a32)
{
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(__n128, __n128, __n128, __n128, __n128);
  const char *v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint8x16_t v51;
  uint16x8_t v52;
  int8x16_t v53;
  int8x16_t v54;
  uint16x8_t v55;
  int8x16_t v56;
  int8x16_t v57;
  uint8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint8x16_t v61;
  int8x16_t v64;
  int8x16_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  uint8x16_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint8x16_t v78;
  uint8x16_t v83;
  uint16x8_t v84;
  uint16x8_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  _DWORD *v90;
  int v91;
  int v92;
  unint64_t v93;
  int8x16x4_t v94;
  int8x16x4_t v95;

  v40 = (uint64_t (*)(__n128, __n128, __n128, __n128, __n128))(*(_QWORD *)(v33 + 8 * v32) - 4);
  v41 = (const char *)(v39 - 220);
  v42 = (__n128)vdupq_n_s32(0x1D30BEEEu);
  v43 = (__n128)vdupq_n_s32(0x1D30BEE6u);
  v44.n128_u64[0] = 0xFEFEFEFEFEFEFEFELL;
  v44.n128_u64[1] = 0xFEFEFEFEFEFEFEFELL;
  a21 = v38 - 16;
  v45.n128_u64[0] = 0xFCFCFCFCFCFCFCFCLL;
  v45.n128_u64[1] = 0xFCFCFCFCFCFCFCFCLL;
  v46 = (__n128)vdupq_n_s32(0x1D30BEFFu);
  v47 = *(_DWORD *)(v39 - 144);
  v49 = *(_DWORD *)(v39 - 140);
  v48 = *(_DWORD *)(v39 - 136);
  v50 = *(_BYTE *)(v39 - 124) ^ 0xE;
  if (v50 == 2)
  {
    v95 = vld4q_s8(v41);
    v75 = (uint8x16_t)veorq_s8(v95.val[0], (int8x16_t)v44);
    v76 = vmovl_u8(*(uint8x8_t *)v75.i8);
    v77 = vmovl_high_u8(v75);
    v78 = (uint8x16_t)veorq_s8(v95.val[1], (int8x16_t)v44);
    _Q22 = vmovl_u8(*(uint8x8_t *)v78.i8);
    _Q21 = vmovl_high_u8(v78);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }
    v83 = (uint8x16_t)veorq_s8(v95.val[2], (int8x16_t)v44);
    v84 = vmovl_high_u8(v83);
    v85 = vmovl_u8(*(uint8x8_t *)v83.i8);
    v95.val[0] = veorq_s8(v95.val[3], (int8x16_t)v44);
    v95.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v95.val[0]);
    v95.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v95.val[1]);
    v95.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v95.val[1].i8);
    v95.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v95.val[0].i8);
    v95.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v95.val[0]);
    v95.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v95.val[0].i8);
    v86 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v85.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v76.i8), 0x18uLL)), v95.val[0]);
    v87 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v85, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v76), 0x18uLL)), v95.val[3]);
    v88 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v84.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v77.i8), 0x18uLL)), v95.val[1]);
    v89 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v84, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v77), 0x18uLL)), v95.val[2]);
    v95.val[0] = veorq_s8(vandq_s8((int8x16_t)v86, (int8x16_t)v42), (int8x16_t)(*(_OWORD *)v95.val & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    v95.val[3] = veorq_s8(vandq_s8((int8x16_t)v87, (int8x16_t)v42), (int8x16_t)(*(_OWORD *)&v95.val[3] & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    v95.val[1] = veorq_s8(vandq_s8((int8x16_t)v88, (int8x16_t)v42), (int8x16_t)(*(_OWORD *)&v95.val[1] & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    v95.val[2] = veorq_s8(vandq_s8((int8x16_t)v89, (int8x16_t)v42), (int8x16_t)(*(_OWORD *)&v95.val[2] & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    a31 = vaddq_s32(vsubq_s32(v88, vaddq_s32((int32x4_t)v95.val[1], (int32x4_t)v95.val[1])), (int32x4_t)v43);
    a32 = vaddq_s32(vsubq_s32(v89, vaddq_s32((int32x4_t)v95.val[2], (int32x4_t)v95.val[2])), (int32x4_t)v43);
    a29 = vaddq_s32(vsubq_s32(v86, vaddq_s32((int32x4_t)v95.val[0], (int32x4_t)v95.val[0])), (int32x4_t)v43);
    a30 = vaddq_s32(vsubq_s32(v87, vaddq_s32((int32x4_t)v95.val[3], (int32x4_t)v95.val[3])), (int32x4_t)v43);
    v90 = (_DWORD *)&a29 + v37 + 1138821655;
    v91 = *(v90 - 8) ^ *(v90 - 3);
    v92 = *(v90 - 16) ^ *(v90 - 14) ^ (v91 + v35 - ((v91 << ((a7 + a2 - 114) ^ 0xDC)) & 0x3A617DCC));
    HIDWORD(v93) = v92 ^ v35;
    LODWORD(v93) = v92;
    *v90 = (v93 >> 31) + v35 - ((2 * (v93 >> 31)) & 0x3A617DCC);
    return (*(uint64_t (**)(uint64_t))(v33 + 8 * ((571 * (v38 == 1138821592)) ^ (a7 + a2 + 1174))))(a21);
  }
  else if (v50 == 1)
  {
    v94 = vld4q_s8(v41);
    v51 = (uint8x16_t)veorq_s8(v94.val[0], (int8x16_t)v44);
    v52 = vmovl_u8(*(uint8x8_t *)v51.i8);
    v53 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v52.i8);
    v54 = (int8x16_t)vmovl_high_u16(v52);
    v55 = vmovl_high_u8(v51);
    v56 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v55.i8);
    v57 = (int8x16_t)vmovl_high_u16(v55);
    v58 = (uint8x16_t)veorq_s8(v94.val[1], (int8x16_t)v44);
    v59 = vmovl_high_u8(v58);
    v60 = vmovl_u8(*(uint8x8_t *)v58.i8);
    v61 = (uint8x16_t)veorq_s8(v94.val[2], (int8x16_t)v44);
    _Q26 = (int8x16_t)vmovl_high_u8(v61);
    _Q25 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v61.i8);
    v64 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q25.i8, 0x10uLL);
    __asm { SHLL2           V25.4S, V25.8H, #0x10 }
    v69 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q26.i8, 0x10uLL);
    __asm { SHLL2           V26.4S, V26.8H, #0x10 }
    v94.val[0] = veorq_s8(v94.val[3], (int8x16_t)v44);
    v94.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v94.val[0]);
    v94.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v94.val[1]);
    v94.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v94.val[0].i8);
    v94.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v94.val[0]);
    v94.val[0] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v94.val[0].i8), 0x18uLL), v64), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v60.i8, 8uLL), v53));
    v94.val[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v94.val[3], 0x18uLL), _Q25), vorrq_s8((int8x16_t)vshll_high_n_u16(v60, 8uLL), v54));
    v94.val[1] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v94.val[1].i8), 0x18uLL), v69), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v59.i8, 8uLL), v56));
    v94.val[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v94.val[2], 0x18uLL), _Q26), vorrq_s8((int8x16_t)vshll_high_n_u16(v59, 8uLL), v57));
    v70 = (int32x4_t)veorq_s8(vandq_s8(v94.val[0], (int8x16_t)v46), (int8x16_t)(*(_OWORD *)&v53 & __PAIR128__(0xFFFFFF19FFFFFF19, 0xFFFFFF19FFFFFF19)));
    v71 = (int32x4_t)veorq_s8(vandq_s8(v94.val[3], (int8x16_t)v46), (int8x16_t)(*(_OWORD *)&v54 & __PAIR128__(0xFFFFFF19FFFFFF19, 0xFFFFFF19FFFFFF19)));
    v72 = (int32x4_t)veorq_s8(vandq_s8(v94.val[1], (int8x16_t)v46), (int8x16_t)(*(_OWORD *)&v56 & __PAIR128__(0xFFFFFF19FFFFFF19, 0xFFFFFF19FFFFFF19)));
    v73 = (int32x4_t)veorq_s8(vandq_s8(v94.val[2], (int8x16_t)v46), (int8x16_t)(*(_OWORD *)&v57 & __PAIR128__(0xFFFFFF19FFFFFF19, 0xFFFFFF19FFFFFF19)));
    a31 = vaddq_s32(vsubq_s32((int32x4_t)v94.val[1], vaddq_s32(v72, v72)), (int32x4_t)v43);
    a32 = vaddq_s32(vsubq_s32((int32x4_t)v94.val[2], vaddq_s32(v73, v73)), (int32x4_t)v43);
    a29 = vaddq_s32(vsubq_s32((int32x4_t)v94.val[0], vaddq_s32(v70, v70)), (int32x4_t)v43);
    a30 = vaddq_s32(vsubq_s32((int32x4_t)v94.val[3], vaddq_s32(v71, v71)), (int32x4_t)v43);
    return ((uint64_t (*)(uint64_t, __n128))(*(_QWORD *)(v33
                                                                + 8
                                                                * ((1237 * (a21 + 1 == v38)) ^ (34 * (a2 ^ (a2 - 11)))))
                                                    - 8))(1138821655, v42);
  }
  else
  {
    *(_DWORD *)(v39 - 148) = 2 * (*(_DWORD *)(v39 - 148) ^ v36) + v36 - (v34 & (4 * (*(_DWORD *)(v39 - 148) ^ v36)));
    *(_DWORD *)(v39 - 144) = 2 * (v47 ^ v36) + v36 - (v34 & (4 * (v47 ^ v36)));
    *(_DWORD *)(v39 - 140) = 2 * (v49 ^ v36) + v36 - (v34 & (4 * (v49 ^ v36)));
    *(_DWORD *)(v39 - 136) = 2 * (v48 ^ v36) + v36 - (v34 & (4 * (v48 ^ v36)));
    return v40(v42, v43, v44, v45, v46);
  }
}

uint64_t sub_100087F9C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, int a18, unsigned int a19)
{
  unsigned int v19;
  uint64_t v20;
  _BOOL4 v21;

  if (v19 < a19 != a16 + 237793377 < (((a7 + a2 - 303) | 0xD1) ^ 0x64AD787Cu))
    v21 = a16 + 237793377 < (((a7 + a2 - 303) | 0xD1) ^ 0x64AD787Cu);
  else
    v21 = a16 + 237793377 > v19;
  return ((uint64_t (*)(void))(*(_QWORD *)(v20 + 8 * ((a7 + a2 + 1047) | (8 * v21)))
                            - ((41 * (a2 ^ (a2 - 4))) ^ 0xA8)))();
}

uint64_t sub_100088038@<X0>(int a1@<W1>, int a2@<W4>, int a3@<W8>)
{
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8
                                             * ((23 * (a2 + a3 + 63 >= ((a1 + v3 - 164) ^ 0x21C3C66Bu) + a3)) ^ v3))
                            - 4))();
}

uint64_t sub_10008807C@<X0>(int a1@<W1>, int a2@<W4>, int a3@<W6>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  return ((uint64_t (*)(void))(*(_QWORD *)(v13
                                        + 8
                                        * (((a10 + v10 - (unint64_t)(a4 + a2) >= v11 + (unint64_t)(v12 ^ (a1 - 164)) + 6)
                                          * ((v12 - a3 + 171) ^ (a1 - 261))) ^ v12))
                            - 4))();
}

uint64_t sub_1000880CC@<X0>(int a1@<W0>, int a2@<W4>, int a3@<W6>, int a4@<W7>, int a5@<W8>, int8x16_t a6@<Q2>, int8x16_t a7@<Q3>)
{
  int8x16_t *v7;
  uint64_t v8;
  uint64_t v9;

  *v7 = vaddq_s8(vsubq_s8(*(int8x16_t *)(v9 + (a5 + a2)), vandq_s8(vaddq_s8(*(int8x16_t *)(v9 + (a5 + a2)), *(int8x16_t *)(v9 + (a5 + a2))), a7)), a6);
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (((a3 + a1 == 383) * a4) ^ (a3 + a1 - 117))) - 4))();
}

uint64_t sub_100088128@<X0>(int a1@<W4>, unint64_t a2@<X5>, int a3@<W6>, int a4@<W8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  *(_BYTE *)(v4 + v6) = *(_BYTE *)(v9 + (a4 + a1))
                      - ((2 * *(_BYTE *)(v9 + (a4 + a1))) & 0xFC)
                      - 2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8 * ((((((a3 + v7 - 331) | v10) ^ a2) + v6 != 64) * v5) ^ (a3 + v7 + 865)))
                            - 4))();
}

uint64_t sub_100088180@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;

  v8 = a6 + v6 - 139759037;
  v9 = a1 + 13222166 < v8;
  if (v8 < 0x574AC982 != (a1 + 13222166) < 0x574AC982)
    v9 = v8 < 0x574AC982;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (v6 ^ (2 * v9))) - 8))();
}

uint64_t sub_1000881E0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v19 = (a1 + 974102436) & 0xC5F067BF;
  v15 = 831981571 * ((((2 * (v14 - 120)) | 0xA7832B06) - (v14 - 120) - 1405195651) ^ 0xCA6045A7);
  *(_QWORD *)(v14 - 112) = a11;
  *(_DWORD *)(v14 - 120) = (a13 + 5614872) ^ v15;
  *(_DWORD *)(v14 - 116) = v15 + a1 + 1267;
  v16 = sub_10008B438(v14 - 120);
  v17 = *(_DWORD *)(v14 - 152) & 0x3F;
  *(_BYTE *)(v14 - 220 + (v17 ^ 0x15)) = 126;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v13
                                                               + 8
                                                               * ((154 * ((v17 ^ 0x15) > 0x37)) ^ a1))
                                                   - v19
                                                   + 1955))(v16, 2294100479);
}

uint64_t sub_1000882F8(uint64_t a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;
  _BOOL4 v5;

  v5 = v2 != (((v3 ^ (a2 + 1109)) - a2 + 1485) ^ 0x5F2);
  return (*(uint64_t (**)(void))(v4 + 8 * (((2 * v5) | (4 * v5)) ^ v3)))();
}

uint64_t sub_100088334(uint64_t a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8 * ((((v3 - 1265) ^ (a2 - 220) ^ (a2 + 369)) * ((v2 ^ 0x2Au) > 7)) ^ v3))
                            - 4))();
}

uint64_t sub_10008836C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 220 + a2 + a1) = 0xFEFEFEFEFEFEFEFELL;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((1718 * (((27 * (v2 ^ 0xEBu)) ^ 0x5C5) == (v3 & 0x38))) ^ v2))
                            - 4))();
}

uint64_t sub_1000883D4@<X0>(int a1@<W2>, int a2@<W4>, int a3@<W8>)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;

  v10 = v3 < v5;
  *(_BYTE *)(v9 - 220 + (v4 ^ 0xB6u) + a1 - 1403603913) = *(_BYTE *)(v8 + (a3 + a2))
                                                        - ((2 * *(_BYTE *)(v8 + (a3 + a2))) & 0xFC)
                                                        - 2;
  v11 = a3 + 1 + v6;
  v12 = v10 ^ (v11 < v5);
  v13 = v11 < v3;
  if (!v12)
    v10 = v13;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (v4 | (2 * v10))) - 8))();
}

uint64_t sub_100088450@<X0>(uint64_t a1@<X0>, int a2@<W6>, int a3@<W8>)
{
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3
                                                                        + 8
                                                                        * ((1637
                                                                          * (a3 - 186471976 < ((v4 - 647096012) & 0x9DD4B7EE)
                                                                                            - 746)) ^ (a2 + v4 + 457)))
                                                            - 4))(a1, 2294100475, -186471976);
}

uint64_t sub_1000884B0@<X0>(uint64_t a1@<X2>, unsigned int a2@<W8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + a2;
  if ((unint64_t)(v4 + 1) > 0x38)
    v5 = v4 + 1;
  else
    v5 = 56;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((1589
                                          * (v5 - a2 + (unint64_t)((v2 - 344152867) & 0x14835E2D) + 186470395 > 7)) ^ v2))
                            - (((v2 - 761) | 0x206u) ^ 0x22BLL)))();
}

uint64_t sub_100088528@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 220 + a2 + a1) = 0xFEFEFEFEFEFEFEFELL;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (int)((280 * ((v2 ^ 0x227) == (v3 & 0xFFFFFFFFFFFFFFF8))) ^ v2))
                            - 12))();
}

uint64_t sub_100088580(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;

  if (a17 == 2)
    return ((uint64_t (*)(void))(*(_QWORD *)(v22
                                          + 8
                                          * ((1343
                                            * (*(_DWORD *)(v23 - 128) != ((a2 - 982075024) & 0xB1CC15DF) + 1763403103)) ^ (a2 + a7)))
                              - 12))();
  if (a17 == 1)
    return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v22
                                                        + 8
                                                        * ((249 * (*(_DWORD *)(v23 - 128) != 1763403438)) ^ (a2 + a7)))
                                            - ((a2 + 1022729712) & 0x3A4D315F)
                                            + 323))(a10);
  v25 = (-2000865919 - a2);
  v26 = ((v25 - 0x488189C440019593) ^ (unint64_t)&a22)
      + ((2 * (_QWORD)&a22) & 0x6EFCEC777FFCDBD0)
      + 0x7895BFDED3BD9AA0;
  *(_BYTE *)(v23 - 129) = ((v26 + 113) ^ 0xBA) * (v26 + ((-127 - a2) ^ (a2 + 126) ^ 0x7D));
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v22 + 8 * (int)(v25 ^ 0xB)) - 4))(a10);
}

void sub_100088CEC()
{
  JUMPOUT(0x100088CA8);
}

uint64_t sub_100088CF4()
{
  return 0;
}

void sub_100088D34(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 ^ (268847287 * (((a1 | 0xE34F1B4D) - (a1 & 0xE34F1B4D)) ^ 0x1CE50A65));
  __asm { BR              X10 }
}

uint64_t sub_100088DF4(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((491 * (*(_DWORD *)(*(_QWORD *)(a1 + 8) + v4) != v2)) ^ v3))
                            - (((v3 - 1242) | 0x34Eu) ^ 0x367)))();
}

uint64_t sub_100088E34()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (int)((44
                                               * (((((3 * ((v2 + 289) ^ 0x739)) ^ 0xF1D1EA57) + v3)
                                                 * (((293 * ((v2 + 289) ^ 0x61F)) ^ 0xF1D1EA57) + v0)) >> 31)) ^ (v2 + 289)))
                            - 8))();
}

uint64_t sub_100088E8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v6 = v2;
  v7 = a1;
  v5 = v2;
  v8 = v3 + 1224239923 * ((&v5 + 396803106 - 2 * (&v5 & 0x17A6BC22)) ^ 0xE51541F5) - 374;
  return ((uint64_t (*)(uint64_t *))(*(_QWORD *)(v1 + 8 * (v3 ^ 0x3D3)) - 4))(&v5);
}

void sub_100088FDC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) + 1178560073 * ((2 * (a1 & 0xDA2E353F) - a1 + 634505920) ^ 0xC2E4E8A8);
  __asm { BR              X11 }
}

uint64_t sub_100089090@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((*(_DWORD *)(v2 - 0x56428495FB6297ALL) == ((a1 + 4) ^ 0x1D30BF21))
                                          * (a1 ^ 0x532)) ^ (a1 + 4)))
                            - 8))();
}

uint64_t sub_1000890EC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v3 = *(_DWORD *)(v2 - 0x56428495FB62982) + 819906255;
  v4 = *(_DWORD *)(v2 - 0x56428495FB62986) + 218190573;
  v5 = v3 < ((v1 + 492787797) & 0xE2A0A0DC ^ 0x37D6A3D4);
  v6 = v3 > v4;
  if (v5 != v4 < 0x37D6A30C)
    v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((4007 * !v6) ^ v1)) - 12))();
}

uint64_t sub_100089198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v10 = *(_QWORD *)(v9 - 0x56428495FB62992);
  v11 = *(unsigned __int8 *)(v10 + (v7 - 116907074)) ^ 0xFE;
  v12 = ((*(unsigned __int8 *)(v10 + (v7 - 116907077)) ^ 0xFE) << 24) | ((*(unsigned __int8 *)(v10 + (v7 - 116907076)) ^ 0xFE) << 16) | ((*(unsigned __int8 *)(v10 + ((a5 + 1834) ^ 0xF90829F4) + v7 + ((a5 + 169) | 0x46)) ^ 0xFE) << 8) | v11;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((451
                                          * (((v12 + v6 - 2 * (v12 & (v6 + 8) ^ v11 & 8)) & 0xFFFFFF ^ 0x30BEE6)
                                           - (v8
                                            + *(_DWORD *)(a1 + 20)) == -849886013)) ^ a5))
                            - 4))();
}

uint64_t sub_10008926C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v6;
  _BOOL4 v7;

  v7 = ((a4 ^ 0x40000802) & a6) == a4 - 2050;
  return (*(uint64_t (**)(void))(v6 + 8 * ((v7 | (16 * v7)) ^ a4)))();
}

uint64_t sub_100089314(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  _BOOL4 v14;

  v9 = a4 ^ 0xBA5;
  v10 = a3 + v6 + (v8 ^ (v5 - 1718) ^ ((v9 - 803) | 0x652)) + 8;
  v11 = ((2 * v10) & 0x6DEFFBBE) + (v10 ^ 0x36F7FDDF) - 771017320;
  v12 = v7 - 567418479 + v9 - 480;
  v13 = (v12 < 0x9033377) ^ (v11 < 0x9033377);
  v14 = v11 > v12;
  if (v13)
    v14 = v11 < 0x9033377;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((97 * v14) ^ v9)) - 12))();
}

uint64_t sub_1000893C0@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  int v2;

  *a2 = v2;
  *(_DWORD *)(result + 24) = -489691693;
  return result;
}

uint64_t sub_100089434@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_QWORD *)(*a1 - 0x7F1325F673F67E57) = a2 + v6 + 8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((1869 * (*a3 == (((v5 ^ 0x711) - 4) ^ (v4 + 63)))) ^ v5 ^ 0x711))
                            - 8))();
}

uint64_t sub_10008949C@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;

  *(_QWORD *)(*a1 - 0x7F1325F673F67E57) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1869 * (*a2 == ((v4 - 4) ^ (v3 + 63)))) ^ v4)) - 8))();
}

void sub_100089500(uint64_t a1)
{
  int v1;
  _DWORD *v2;
  int v3;

  *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x20BA795F69D3FB1) = v3;
  *v2 = v1;
  JUMPOUT(0x100089428);
}

void sub_100089524(uint64_t a1)
{
  int v1;
  BOOL v2;

  v1 = *(_DWORD *)a1 + 1178560073 * (((a1 | 0x375468D4) - a1 + (a1 & 0xC8AB972B)) ^ 0xD0614ABC);
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 24) - 0x2DB44D49A49B002ALL) == 237901512;
  __asm { BR              X14 }
}

uint64_t sub_100089684@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  int v61;
  int v62;
  int v63;
  void (*v64)(uint64_t);
  uint64_t v65;

  v44 = &a38 + v38;
  v60 = &a36 + v38;
  v59 = &a22 + v38;
  v58 = &a28 + v38;
  v57 = &a32 + v38;
  v56 = &a26 + v38;
  v55 = &a34 + v38;
  v45 = &a30 + v38;
  v46 = v39 & 0x4DBC57FB;
  v65 = a1[4];
  v48 = a1[1];
  v47 = a1[2];
  v49 = *(_QWORD *)(v47 - 0x73495CDCA303A988);
  v63 = (v39 & 0x4DBC57FB) + 1204;
  *(_QWORD *)(v43 - 104) = a2;
  *(_DWORD *)(v43 - 112) = v63 - 1224239923 * ((((v43 - 144) | 0x4AC3EA30) - ((v43 - 144) & 0x4AC3EA30)) ^ 0xB87017E7);
  *(_QWORD *)(v43 - 128) = v49;
  *(_QWORD *)(v43 - 120) = v47;
  v50 = ((v39 & 0x4DBC57FB) - 463) | 0x1B0u;
  *(_QWORD *)(v43 - 144) = v48;
  *(_QWORD *)(v43 - 136) = &a38 + v38;
  v64 = (void (*)(uint64_t))(*(_QWORD *)(v40 + 8 * ((v39 & 0x4DBC57FB) - 331)) - 8);
  v64(v43 - 144);
  v62 = v46;
  *(_DWORD *)(v43 - 120) = v46
                         + 69008221
                         * ((((v43 - 144) | 0xADA53259) - (v43 - 144) + ((v43 - 144) & 0x525ACDA0)) ^ 0x7E076053)
                         + 1530;
  *(_QWORD *)(v43 - 112) = v47;
  *(_QWORD *)(v43 - 144) = v48;
  *(_QWORD *)(v43 - 136) = v44;
  *(_QWORD *)(v43 - 128) = v45;
  ((void (*)(uint64_t))((char *)*(&off_10025FA20 + (v46 ^ 0x1FEu)) - 8))(v43 - 144);
  *(_QWORD *)(v43 - 128) = v44;
  *(_QWORD *)(v43 - 120) = v47;
  v51 = v47;
  *(_QWORD *)(v43 - 104) = v45;
  *(_QWORD *)(v43 - 144) = v48;
  *(_QWORD *)(v43 - 136) = v60;
  LODWORD(v47) = v63 - 1224239923 * ((v43 - 144) ^ 0xF2B3FDD7);
  *(_DWORD *)(v43 - 112) = v47;
  v64(v43 - 144);
  *(_DWORD *)(v43 - 112) = v47;
  *(_QWORD *)(v43 - 104) = v45;
  *(_QWORD *)(v43 - 128) = v60;
  *(_QWORD *)(v43 - 120) = v51;
  *(_QWORD *)(v43 - 144) = v48;
  *(_QWORD *)(v43 - 136) = v59;
  v64(v43 - 144);
  *(_QWORD *)(v43 - 104) = v45;
  *(_DWORD *)(v43 - 112) = v63
                         - 1224239923
                         * (((((v43 - 144) | 0xBB10DC) ^ 0xFFFFFFFE) - (~(v43 - 144) | 0xFF44EF23)) ^ 0xDF712F4);
  *(_QWORD *)(v43 - 144) = v48;
  *(_QWORD *)(v43 - 136) = v58;
  *(_QWORD *)(v43 - 128) = v59;
  *(_QWORD *)(v43 - 120) = v51;
  v64(v43 - 144);
  *(_QWORD *)(v43 - 144) = v48;
  *(_QWORD *)(v43 - 136) = v57;
  *(_DWORD *)(v43 - 112) = v63 - 1224239923 * ((((v43 - 144) | 0xF29ABA3C) - ((v43 - 144) & 0xF29ABA3C)) ^ 0x2947EB);
  *(_QWORD *)(v43 - 128) = v58;
  *(_QWORD *)(v43 - 120) = v51;
  *(_QWORD *)(v43 - 104) = v45;
  v64(v43 - 144);
  *(_DWORD *)(v43 - 112) = v63 - 1224239923 * (((v43 - 144) & 0xF279EF04 | ~((v43 - 144) | 0xF279EF04)) ^ 0xFF35ED2C);
  *(_QWORD *)(v43 - 128) = v57;
  *(_QWORD *)(v43 - 120) = v51;
  *(_QWORD *)(v43 - 144) = v48;
  *(_QWORD *)(v43 - 136) = v56;
  *(_QWORD *)(v43 - 104) = v45;
  v64(v43 - 144);
  *(_DWORD *)(v43 - 112) = v63 - 1224239923 * (((v43 - 144) & 0x3B67870F | ~((v43 - 144) | 0x3B67870F)) ^ 0x362B8527);
  *(_QWORD *)(v43 - 128) = v56;
  *(_QWORD *)(v43 - 120) = v51;
  *(_QWORD *)(v43 - 144) = v48;
  *(_QWORD *)(v43 - 136) = v55;
  *(_QWORD *)(v43 - 104) = v45;
  v64(v43 - 144);
  v61 = 2 * (v43 - 144);
  *(_DWORD *)(v43 - 112) = v63 - 1224239923 * (((v61 | 0x9B7A3224) - (v43 - 144) + 843245294) ^ 0x3F0EE4C5);
  *(_QWORD *)(v43 - 104) = v45;
  *(_QWORD *)(v43 - 144) = v48;
  *(_QWORD *)(v43 - 136) = v45;
  *(_QWORD *)(v43 - 128) = v55;
  *(_QWORD *)(v43 - 120) = v51;
  v64(v43 - 144);
  v52 = *(_QWORD *)(v51 - 0x73495CDCA303A990);
  *(_QWORD *)(v43 - 128) = v41;
  *(_QWORD *)(v43 - 144) = v52;
  *(_DWORD *)(v43 - 136) = v62 + 831981571 * ((v43 + 1572311972 - 2 * ((v43 - 144) & 0x5DB79434)) ^ 0xC4164410) - 129;
  sub_100085594(v43 - 144);
  *(_DWORD *)(v43 - 128) = (v62 - 307) ^ (944348131 * (((v61 | 0x7083DFB6) - (v43 - 144) - 943845339) ^ 0x9B584B95));
  *(_QWORD *)(v43 - 136) = v65;
  v53 = sub_10007F638(v43 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v42
                                                      + 8
                                                      * (v62
                                                       + 4
                                                       * ((*(_DWORD *)(v43 - 144)
                                                                                     - 1307958045) < 0x7FFFFFFF)))
                                          - v50
                                          + 434))(v53);
}

uint64_t sub_100089B20()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;

  v4 = 831981571 * ((-609318725 - ((v3 - 144) | 0xDBAE88BB) + ((v3 - 144) | 0x24517744)) ^ 0xBDF0A760);
  *(_QWORD *)(v3 - 144) = v7;
  *(_DWORD *)(v3 - 136) = v2 - v4 - 1274;
  *(_DWORD *)(v3 - 132) = v4 + 376798310;
  sub_10008A9E4(v3 - 144);
  *(_QWORD *)(v3 - 144) = v9;
  *(_QWORD *)(v3 - 136) = v1;
  *(_DWORD *)(v3 - 112) = v2 - 1224239923 * (((v3 - 144) & 0x229A5DFF | ~((v3 - 144) | 0x229A5DFF)) ^ 0x2FD65FD7) + 197;
  *(_QWORD *)(v3 - 128) = v1;
  *(_QWORD *)(v3 - 120) = v0;
  *(_QWORD *)(v3 - 104) = v7;
  v8(v3 - 144);
  *(_QWORD *)(v3 - 128) = v6;
  *(_DWORD *)(v3 - 136) = (v2 ^ 0x1E8)
                        + 831981571 * ((((v3 - 144) | 0xF8EEAC69) - (v3 - 144) + ((v3 - 144) & 0x7115390)) ^ 0x614F7C4D)
                        - 712;
  *(_QWORD *)(v3 - 144) = v1;
  return sub_100085594(v3 - 144);
}

uint64_t sub_10008A910(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))*(&off_10025B5F0 + ((377 * (*(_DWORD *)(a2 + 4) == 1528691563)) ^ 0x2ABu)))(4294925278);
}

uint64_t sub_10008A954@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)(*(_QWORD *)(a2 + 96) + 448) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 12);
  return (*(uint64_t (**)(_QWORD))(v2 + 2968))(0);
}

uint64_t sub_10008A9AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  *(_BYTE *)(a1 + (v7 + v5)) = *(_BYTE *)(v4 + (v7 + v5));
  return (*(uint64_t (**)(_QWORD))(v1 + 8 * (((v2 + v7 - 372 == v3) * v6) ^ v2)))(0);
}

uint64_t sub_10008A9E4(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;

  v1 = 831981571 * ((((2 * a1) | 0xFDCFEF62) - a1 - 2129131441) ^ 0xE7462795);
  v2 = *(_DWORD *)(a1 + 8) + v1;
  v3 = *(_DWORD *)(a1 + 12) - v1;
  v5 = v3 - 376798309;
  v4 = v3 - 376798309 < 0;
  LODWORD(v6) = 376798309 - v3;
  if (v4)
    v6 = v6;
  else
    v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_10025FA20 + (v2 & 0x44BD676A))
                                        + 8
                                        * ((878
                                          * (v6 - 0x66409B29DA6A68E4 + (~(2 * v6) | 0xFFFFFFFFB4D4D1C7) != 0x99BF64D62595971BLL)) ^ v2)
                                        - 4)
                            - 4))();
}

void sub_10008AAB8(int a1@<W8>)
{
  uint64_t v1;
  int v2;

  **(_DWORD **)(v1 - 0x2DB44D49A49B0026) = v2 ^ 0xC1123F8B;
  *(_DWORD *)(v1 - 0x2DB44D49A49B002ALL) = a1 + 1;
}

uint64_t sub_10008AAFC(_DWORD *a1)
{
  unsigned int v1;

  v1 = 268847287
     * ((2 * ((a1 ^ 0x2D90AAAC) & 0xA0689A7) - (a1 ^ 0x2D90AAAC) + 1979283032) ^ 0xA7C3CDDC);
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_10025FA20 + (int)((a1[4] - v1) ^ 0x7BA))
                                        + 8
                                        * (int)((((*a1 ^ v1 ^ 0x1D30BEE6) - 1 > 0x62) * (((a1[4] - v1) ^ 0x5FB) + 3535)) ^ (a1[4] - v1))
                                        - 4)
                            - 12))();
}

uint64_t sub_10008ABA0()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((1348 * ((((v0 - 100) < 0x9C) ^ v1) & 1)) ^ v1))
                            - 12))();
}

uint64_t sub_10008ABD4@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  int v2;
  int v3;
  int v4;

  if (v2 + 49998 < (v4 + 7475))
    v3 = a2;
  *(_DWORD *)(*(_QWORD *)(result + 8) - 0x2F801B1FA3259451) = v3;
  return result;
}

void sub_10008AC60(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) - 3804331 * (((a1 | 0x51A664) - (a1 & 0x51A664)) ^ 0x7E848392);
  __asm { BR              X10 }
}

uint64_t sub_10008AD24@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, int a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v13 = 1178560073 * ((2 * (&a4 & 0x493717C8) - &a4 - 1228347340) ^ 0x51FDCA5C);
  a6 = v11 - v13 - 466;
  a7 = 856161221 - v13;
  a9 = v12;
  a4 = &STACK[0x7F1325F673F67E57];
  a5 = &STACK[0x20BA795F69D3FBD];
  v14 = ((uint64_t (*)(unint64_t **))(*(_QWORD *)(a1 + 8 * (v11 - 846)) - 8))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v10
                                                      + 8
                                                      * (((*(_DWORD *)(v12 - 0x56428495FB6297ALL) == v9) * (v11 + 278)) ^ v11))
                                          - 8))(v14);
}

uint64_t sub_10008ADFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  int v13;

  return ((uint64_t (*)(void))(*(_QWORD *)(v12
                                        + 8
                                        * (((a11 == (v13 ^ (v11 - 371))) | (4 * (a11 == (v13 ^ (v11 - 371))))) ^ (v13 + 150)))
                            - 8))();
}

uint64_t sub_10008AE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;

  *(_BYTE *)(v11 + (v14 + v13)) = *(_BYTE *)(a9 + (v14 + v13)) ^ 0xFE;
  return ((uint64_t (*)(void))(*(_QWORD *)(v16
                                        + 8
                                        * (((v12 ^ (v14 + 1 + v13 < (a11 ^ v15))) & 1 | (4 * ((v12 ^ (v14 + 1 + v13 < (a11 ^ v15))) & 1))) ^ v12))
                            - 8))();
}

void sub_10008AE90(_DWORD *a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *v3;
  *(_QWORD *)(v3[3] - 0x5B1E97A52371A20DLL) = v1;
  *(_DWORD *)(v4 - 0x1CAC648E56C350CDLL) = v2;
  *((_DWORD *)v3 + 3) = *a1;
}

void DLHL()
{
  int v0[10];

  v0[1] = 1178560073
        * (((v0 | 0xE965F012) - v0 + (v0 & 0x169A0FE8)) ^ 0xE50D27A)
        - 1501685844;
  sub_1000AABF4(v0);
  __asm { BR              X8 }
}

uint64_t sub_10008AFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  a13 = &STACK[0x82D647BA4E69FE1];
  a14 = (831981571 * (((&a13 | 0x5366F27) + (~&a13 | 0xFAC990D8)) ^ 0x9C97BF02)) ^ 0x87;
  sub_10006A5D8((uint64_t)&a13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v17
                                                                                + 8 * ((2767 * (a15 == v15)) ^ v16)))(v18, v19, v20, v21, v22);
}

uint64_t sub_10008B04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16)
{
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v22 = 1224239923
      * ((((2 * (&a13 ^ 0x9F5B1C94)) | 0xF1532BEC) - (&a13 ^ 0x9F5B1C94) + 123103754) ^ 0x954174B5);
  LODWORD(a13) = v18 - ((2 * v18) & 0xDE3BA25A) - v22 - 283258579;
  LODWORD(a15) = v22 ^ 0x3A4;
  a14 = a12;
  sub_100080318((uint64_t)&a13);
  v23 = 69008221 * (((~&a13 & 0x57029748) - (~&a13 | 0x57029749)) ^ 0x84A0C543);
  a13 = v16;
  a16 = (((2 * v17) & 0xFDD65FFE) + (v17 ^ 0xFEEB2FFF) + 234348473) ^ v23;
  a15 = a12;
  HIDWORD(a14) = v23 + 1026;
  v24 = ((uint64_t (*)(uint64_t *))(*(_QWORD *)(v20 + 360) - 8))(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * ((265 * ((_DWORD)a14 == v19)) ^ 0x66Eu)) - 12))(v24);
}

uint64_t sub_10008B19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, unsigned int a15, uint64_t a16, unint64_t *a17, int a18)
{
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v22 = ((&a13 + 487303392 - 2 * ((unint64_t)&a13 & 0x1D0BA8E0)) ^ 0xEFB85537) * v19;
  a14 = (v20 + 368398531) ^ v22;
  a15 = v22 ^ 0xF8F44488;
  a16 = a12;
  a17 = &STACK[0x72F2C1D3322B87F0];
  a13 = v22 ^ 0x12B68929;
  v23 = sub_1000AACB4((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * ((323 * (a18 == v18)) ^ v20))
                                          - ((v20 - 312869505) & 0x1FEDB ^ 0x2C5)))(v23);
}

uint64_t sub_10008B268()
{
  void (*v0)(unint64_t **);
  int v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unint64_t *v8;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unsigned int v13;

  v5 = (v4 - 1118675583) & 0x1ED9;
  v13 = v4
      - 944348131 * ((((2 * &v11) | 0x21534596) - &v11 + 1867930933) ^ 0x33B00685)
      - 1128;
  v11 = &STACK[0x20BA795F69D3F15];
  v12 = v8;
  ((void (*)(unint64_t **))(*(_QWORD *)(v3 + 8 * (v4 ^ 0x684u)) - 8))(&v11);
  LODWORD(v12) = v4
               - 241568881 * ((&v11 - 1200860867 - 2 * (&v11 & 0xB86C513D)) ^ 0x6E7D557F)
               - 1064;
  v11 = v8;
  sub_1000906D4((uint64_t)&v11);
  if (HIDWORD(v12) == (v5 ^ (v2 - 695)))
    v6 = v9;
  else
    v6 = HIDWORD(v12);
  v12 = v8;
  LODWORD(v11) = (v4 - 1494) ^ (((((2 * (&v11 ^ 0x804118BC)) | 0x67E0F30A)
                                - (&v11 ^ 0x804118BC)
                                - 871397765) ^ 0x60133333)
                              * v1);
  v0(&v11);
  LODWORD(v11) = (v5 - 561) ^ (((&v11 & 0xFBD564C | ~(&v11 | 0xFBD564C)) ^ 0x23E0FBB9) * v1);
  v12 = v10;
  v0(&v11);
  return v6 ^ v2;
}

uint64_t sub_10008B438(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;

  v1 = 831981571 * ((a1 & 0x847A176C | ~(a1 | 0x847A176C)) ^ 0xE22438B7);
  v2 = *(_DWORD *)(a1 + 4) - v1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (*(_DWORD *)a1 ^ v1) - 1609892710;
  v5 = v4
     + (*(_DWORD *)(v3 - 0x73F39308AC2F360BLL) ^ 0x52C4D95)
     - ((2 * (v4 + (*(_DWORD *)(v3 - 0x73F39308AC2F360BLL) ^ 0x52C4D95))) & 0xA589B2A)
     + 86789525;
  *(_DWORD *)(v3 - 0x73F39308AC2F360BLL) = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_10025FA20 + (v2 ^ 0x570))
                                        + 8 * ((625 * ((v5 ^ 0x52C4D95u) < v4)) ^ v2)
                                        - 4)
                            - 4))();
}

void sub_10008B500(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0x73F39308AC2F360FLL) = (*(_DWORD *)(a1 - 0x73F39308AC2F360FLL) ^ 0xD9C42F88)
                                         - 641454200
                                         - ((2 * (*(_DWORD *)(a1 - 0x73F39308AC2F360FLL) ^ 0xD9C42F88) + 2) & 0xB3885F10)
                                         + 1;
}

void sub_10008B548(uint64_t a1)
{
  int v1;
  BOOL v2;
  int v3;

  v1 = 268847287 * ((a1 - 2 * (a1 & 0x4542390B) + 1161967883) ^ 0xBAE82823);
  if (*(_QWORD *)(a1 + 24))
    v2 = (*(_DWORD *)(a1 + 4) ^ v1) == 718622751;
  else
    v2 = 1;
  v3 = v2;
  __asm { BR              X8 }
}

uint64_t sub_10008B608()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  BOOL v3;

  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8 * (v2 - 1114)))(32, 0x101004023FF3BD5) == 0;
  return (*(uint64_t (**)(void))(v1 + 8 * (((((v2 + 105) ^ v3) & 1) * ((v2 ^ 0x358) - 1466)) ^ v2)))();
}

uint64_t sub_10008B66C()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((v1 == ((v3 + 959) ^ (v0 + 1628))) * ((4 * v3) ^ 0xA82)) ^ v3))
                            - 8))();
}

uint64_t sub_10008B6C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  v11 = v2 - 718622752;
  v12 = v2 - 1;
  v13 = *(unsigned __int8 *)(v8 + v11);
  if (v13 == 254)
    __asm { BR              X11 }
  if (v13 == 126)
  {
    v14 = 489733862;
    v15 = *(_QWORD *)(v4 + 16);
    v16 = (*(_BYTE *)(v4 + 8) + v5);
    *(_QWORD *)result = v8;
    *(_DWORD *)(result + 8) = v7;
    *(_DWORD *)(result + 12) = v12;
    if (v16 == 6)
      v17 = 429502578;
    else
      v17 = 429502579;
    *(_DWORD *)(result + 16) = 116907077;
    *(_DWORD *)(result + 20) = v17;
    *(_DWORD *)(result + 24) = 489733862;
    *(_QWORD *)(v15 - 0x6B80B300B999BABLL) = a2;
  }
  else
  {
    result = (*(uint64_t (**)(void))(v6 + 8 * (v9 ^ 0x67E)))();
    v14 = -489691841;
  }
  *(_DWORD *)(v4 + 12) = v14;
  return result;
}

void sub_10008B7A4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_10008B7EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;

  return (*(uint64_t (**)(void))(v2 + 8 * ((3860 * (**(_BYTE **)(a2 + 8) == 0)) ^ v3)))();
}

uint64_t sub_10008B828()
{
  uint64_t v0;
  int v1;
  int v2;

  v2 = v1 - ((2 * v1 + 163842370) & 0x2B1346DE) - 1167349744;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((32
                                          * (((2 * v2) & 0xD95FFBDA ^ 0x91342DA) + (v2 ^ 0xF9265E82) + 2079678464 == 1755667949)) ^ 0x449u))
                            - 4))();
}

uint64_t sub_10008B8C8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;

  *(_DWORD *)(*(_QWORD *)(a1 + 96) + 1424) = v4 + 2090229896 + v2 + v3;
  *(_QWORD *)(*(_QWORD *)(a1 + 96) + 520) = *(_QWORD *)(a2 + 8) + 1;
  return 0;
}

void sub_10008BC28(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_10008BC98@<X0>(int a1@<W8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((52
                                * (((a1 - 1528691550) ^ 0x6DBFFE7FFBFDEFABLL)
                                 - 0x6DBFFE7F4F94EF26
                                 + ((2 * (a1 - 1528691550)) & 0x1F7FBDF56) == 2892562565)) ^ 0xD4u)))();
}

uint64_t sub_10008BD28()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v5 = *(unsigned __int8 *)(v2 + v3 - 0x3F1C0A44C246FA9FLL) - *(unsigned __int8 *)(v0 + v3 - 0x3F1C0A44C246FA9FLL);
  return (*(uint64_t (**)(uint64_t))(v4
                                            + 8
                                            * ((239
                                              * (((v5 << (v1 - 121)) & 0xFFED3BFE)
                                               + ((v1 - 1883246715) & 0xF8DC5BFB ^ 0xF76AD604 ^ v5) == 2146868735)) ^ v1)))(4294925278);
}

uint64_t sub_10008BDB0()
{
  unint64_t v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;

  v5 = v2 < v0;
  if (v5 == v3 - 0x3F1C0A4415DDFA19 < ((v0 + ((v1 + 73087360) & 0xFBA4C67F) - 198) ^ (v1 + 66)))
    v5 = v3 - 0x3F1C0A4415DDFA19 < v2;
  return (*(uint64_t (**)(void))(v4 + 8 * ((52 * !v5) ^ (v1 + 90))))();
}

uint64_t sub_10008BE30@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * ((1879
                                                        * (a1 == ((v1 + 120660663) & 0xF8CEDFBF)
                                                               + ((v1 - 2003023041) ^ 0xD381B3CF))) ^ v1))
                                          - 8))(4294925278);
}

uint64_t sub_10008BE8C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unsigned int v3;

  v3 = ((v1 - 1519571780) & 0x5A92D2B3 ^ 0xFFFFFD75) + *v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((1758 * (((2 * v3) & 0x7FFFEF6E) + (v3 ^ 0x3FFFF7B7) == 1073739703)) ^ v1))
                            - 8))();
}

uint64_t sub_10008BEFC()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1295
                                          * ((((*(unsigned __int8 *)(v2 + 1) - 134) << ((74 * (v3 ^ 0x31)) ^ 0x95)) & v1)
                                           + ((*(unsigned __int8 *)(v2 + 1) - 134) ^ v0) == (((v3 ^ 0x331) + 673) ^ (v0 - 675)))) ^ v3))
                            - 8))();
}

uint64_t sub_10008BF5C()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((506
                                * (((v1 + ((v3 - 146) | 0x2A1) - 675) & (2 * (*(unsigned __int8 *)(v2 + 2) - 72)))
                                 + ((*(unsigned __int8 *)(v2 + 2) - 72) ^ v0) == v0)) ^ v3)))();
}

uint64_t sub_10008BFA4()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((v1 & (2 * (*(unsigned __int8 *)(v2 + 3) - 134)))
                                 + ((*(unsigned __int8 *)(v2 + 3) - 134) ^ v0) == v0)
                                * (((v3 - 116) | 0x283) ^ 0x2C3)) | v3)))();
}

uint64_t sub_10008BFE8()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((v1 & (2 * (*(unsigned __int8 *)(v2 + 4) - 247)))
                                 + ((*(unsigned __int8 *)(v2 + 4) - 247) ^ v0) == v0)
                                * (v3 + 752)) ^ v3)))();
}

uint64_t sub_10008C020()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;

  v5 = *(unsigned __int8 *)(v2 + 5) + ((v3 - 148) | 0x2A3) + ((273 * (v3 ^ 0x97)) ^ 0xFFFFFE63);
  return (*(uint64_t (**)(void))(v4 + 8 * ((1027 * ((v1 & (2 * v5)) + (v5 ^ v0) == v0)) ^ v3)))();
}

uint64_t sub_10008C07C()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1904
                                          * ((((*(unsigned __int8 *)(v2 + 6) - 1) << ((v3 + 112) ^ 0xA2)) & v1)
                                           + ((*(unsigned __int8 *)(v2 + 6) - 1) ^ v0) == v0)) ^ v3))
                            - 8))();
}

uint64_t sub_10008C0C8()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1792
                                          * ((((*(unsigned __int8 *)(v2 + 7) - 1) << (((v3 + 110) ^ 0x35) + 109)) & v1)
                                           + ((*(unsigned __int8 *)(v2 + 7) - 1) ^ (v0 + ((v3 - 146) | 2) - 675)) == v0)) ^ v3))
                            - 8))();
}

uint64_t sub_10008C120()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (int)((((((v3 - 1089062061) & 0x40E9C6BB ^ (v1 - 417)) & (2
                                                                                        * (*(unsigned __int8 *)(v2 + 8)
                                                                                         - 4)))
                                      + ((*(unsigned __int8 *)(v2 + 8) - 4) ^ v0) == v0)
                                     * (((v3 - 1089062061) ^ 0xBF163B53) - 131)) ^ v3)))();
}

uint64_t sub_10008C178(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(*(_QWORD *)(v4 + 96) + 1428) = 1373296687;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8 * ((903 * (*(_DWORD *)(a2 + 4) == ((v2 + 1528690960) ^ (v2 + 495)))) ^ v2))
                            - 8))();
}

uint64_t sub_10008C1D0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;

  v6 = **(unsigned __int8 **)(a2 + 8) - 42;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((1651 * ((v3 & (2 * v6)) + (v6 ^ v2) == v2)) ^ v4))
                            - (v4 ^ 0x202u)
                            + 157))();
}

uint64_t sub_10008C214()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((v1 & (2 * (*(unsigned __int8 *)(v3 + 1) - 134)))
                                           + ((*(unsigned __int8 *)(v3 + 1) - 134) ^ v0) == ((v2 - 669) ^ 0xA7 ^ (v0 - 161)))
                                          * (((v2 - 669) | 0x289) ^ 0x435)) ^ v2))
                            - 4))();
}

uint64_t sub_10008C268()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((v1 & (2 * (*(unsigned __int8 *)(v2 + 2) - 72)))
                                           + ((*(unsigned __int8 *)(v2 + 2) - 72) ^ v0) != v0
                                                                                         + ((v3 - 622) | 0x80)
                                                                                         - 161)
                                          * (v3 - 611)) ^ v3))
                            - 4))();
}

uint64_t sub_10008C2AC()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1935
                                          * ((((*(unsigned __int8 *)(v2 + 3) - 134) << ((v3 + 114) | 0xA0)) & v1)
                                           + ((*(unsigned __int8 *)(v2 + 3) - 134) ^ v0) == v0)) ^ (v3 + 20)))
                            - 4))();
}

uint64_t sub_10008C2F4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v5 = (((v2 ^ 0x2A7) + 157) ^ 0xFFFFFFA8) + *(unsigned __int8 *)(v3 + 4);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((363 * ((((491 * (v2 ^ 0x2A7)) ^ (v1 - 1708)) & (2 * v5)) + (v5 ^ v0) == v0)) ^ v2))
                            - 4))();
}

uint64_t sub_10008C34C()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((4001
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 5) - 13)))
                                           + ((135 * (v3 ^ 0x7A9)) ^ (v0 - 675) ^ (*(unsigned __int8 *)(v2 + 5) - 13)) == v0 + v3 - 1803 - 161)) ^ v3))
                            - 8))();
}

uint64_t sub_10008C3A4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1290
                                          * ((((*(unsigned __int8 *)(v3 + 6) - 1) << ((v2 + 18) & 0xEB)) & v1)
                                           + ((*(unsigned __int8 *)(v3 + 6) - 1) ^ v0) == v0)) ^ v2))
                            - 4))();
}

uint64_t sub_10008C3F4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((1694
                                          * ((((*(unsigned __int8 *)(v3 + 7) - 1) << ((4 * v2) ^ 0x8D)) & v1)
                                           + ((v2 - 514) ^ v4 ^ (*(unsigned __int8 *)(v3 + 7) - 1)) == v0)) ^ v2))
                            - 4))();
}

uint64_t sub_10008C440()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((3997
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 8) - 5)))
                                           + ((*(unsigned __int8 *)(v2 + 8) - 5) ^ v0) == (((v3 ^ 0xD20) - 1803) ^ 0x15 ^ (v0 - 180)))) ^ v3 ^ 0xD20))
                            - 8))();
}

uint64_t sub_10008C490(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(*(_QWORD *)(v4 + 96) + 1428) = 1373296691;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((1816 * (*(_DWORD *)(a2 + 4) == 1528691559)) ^ v2))
                            - (((v2 - 180) | 0xA1) ^ (587 * (v2 ^ 0xB6u)) ^ 0x43FLL)))();
}

uint64_t sub_10008C508(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((745
                                * ((((**(unsigned __int8 **)(a2 + 8) - 42) << v4) & v3)
                                 + ((**(unsigned __int8 **)(a2 + 8) - 42) ^ v2) == v2)) ^ v4)))();
}

uint64_t sub_10008C544()
{
  int v0;
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((578
                                * ((v1 & (2 * (*(unsigned __int8 *)(v4 + 1) - 134)))
                                 + (v3 ^ (v0 - 180) ^ (*(unsigned __int8 *)(v4 + 1) - 134)) == v0)) | v2)))();
}

uint64_t sub_10008C57C()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (v2 ^ (8
                                     * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 2) - 72)))
                                      + ((*(unsigned __int8 *)(v3 + 2) - 72) ^ v0) == ((v2 + 19) ^ v4))))))();
}

uint64_t sub_10008C5AC()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((1633
                                * ((((*(unsigned __int8 *)(v3 + 3) - 134) << ((v2 ^ 0x15) + 77)) & v1)
                                 + ((*(unsigned __int8 *)(v3 + 3) - 134) ^ v0) == v0)) ^ v2)))();
}

uint64_t sub_10008C5EC()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((947
                                * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 4) - 247)))
                                 + ((6 * (v2 ^ 0xBF)) ^ v4 ^ (*(unsigned __int8 *)(v3 + 4) - 247)) == v0)) ^ v2)))();
}

uint64_t sub_10008C630()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v5 = ((v2 - 629422573) & 0x258439FF ^ 0xFFFFFF47) + *(unsigned __int8 *)(v3 + 5);
  return (*(uint64_t (**)(void))(v4 + 8 * ((509 * ((v1 & (2 * v5)) + (v5 ^ v0) == v0)) ^ v2)))();
}

uint64_t sub_10008C680()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1568
                                * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 6) - 1)))
                                 + ((15 * (v2 ^ 0xAD)) ^ v4 ^ (*(unsigned __int8 *)(v3 + 6) - 1)) == v0)) ^ v2)))();
}

uint64_t sub_10008C6C4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((415
                                * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 7) - 1)))
                                 + ((*(unsigned __int8 *)(v3 + 7) - 1) ^ v0) == ((v2 - 895235757) & 0x355C36BF ^ v4))) ^ v2)))();
}

uint64_t sub_10008C710()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v5 = ((v2 + 1495530076) & 0xA6DC05B6 ^ 0xFFFFFF41) + *(unsigned __int8 *)(v3 + 8);
  return (*(uint64_t (**)(void))(v4 + 8 * ((1757 * (((v5 << v2) & v1) + (v5 ^ v0) == v0)) ^ v2)))();
}

void sub_10008C768()
{
  int v0;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;

  *(_DWORD *)(*(_QWORD *)(v2 + 96) + 1428) = 1373296703;
  v6 = v0 + 994;
  v4 = 235795823 * ((((v3 - 120) ^ 0x256BA31D) & 0xF7DF73A9 | ~((v3 - 120) ^ 0x256BA31D | 0xF7DF73A9)) ^ 0xB9E66612);
  *(_DWORD *)(v3 - 112) = (-33143855 - 2 * ((((v0 + 522727186) & 0xE0D7D2BB) - 639) & 0x7E0643CF ^ 1)) ^ v4;
  *(_DWORD *)(v3 - 108) = v4 + v0 + 426522837;
  *(_QWORD *)(v3 - 120) = &STACK[0x73F39308AC2F33DB];
  v5 = (v0 + 522727186) ^ 0x1F282E62;
  sub_1000639C8(v3 - 120);
  __asm { BR              X10 }
}

uint64_t sub_10008C9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;

  v11 = v8 - 502529979;
  if (v11 <= 0x40)
    v11 = 64;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8
                                        * ((733
                                          * (a5 - v7 - v9 + ((a7 - 1950396841) & 0xFCDCFBFF) - a6 + 1519 + v11 > 0xE)) ^ a7))
                            - 12))();
}

uint64_t sub_10008CA50(int a1, int a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v13 = v9 + v8;
  v14 = v13 + v10 + ((a2 - 1483) | 0x180);
  if (v14 <= 0x40)
    v14 = a3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v12
                                        + 8
                                        * ((992 * (a5 - v13 + 1519 >= v11 + a1 + a2 - a8 - 939 - 1789414464 + v14)) ^ a2))
                            - 8))();
}

uint64_t sub_10008CAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,char a25)
{
  int v25;
  int v26;
  int v27;
  uint64_t v28;

  return ((uint64_t (*)(void))(*(_QWORD *)(v28
                                        + 8
                                        * ((88
                                          * ((((unint64_t)(&a25 + a14 + (v26 + v25 + 419)) < 0x10) ^ (v27 - 1)) & 1)) ^ v27))
                            + 2291944431
                            - (a6 + v27 - 420)))();
}

uint64_t sub_10008CB0C@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int8x16_t *v6;
  int8x16_t v7;
  int8x16_t v8;

  v7.i64[0] = 0xFCFCFCFCFCFCFCFCLL;
  v7.i64[1] = 0xFCFCFCFCFCFCFCFCLL;
  v8.i64[0] = 0xFEFEFEFEFEFEFEFELL;
  v8.i64[1] = 0xFEFEFEFEFEFEFEFELL;
  *(int8x16_t *)(v2 + a1 + (v4 ^ (v1 + 92))) = vaddq_s8(vsubq_s8(*v6, vandq_s8(vaddq_s8(*v6, *v6), v7)), v8);
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((1922 * (((v3 + 1) & 0x1FFFFFFF0) == 16)) ^ (v4 + 506))) - 4))();
}

void sub_10008CB78()
{
  JUMPOUT(0x10008CB38);
}

uint64_t sub_10008CB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * (((a8 + a6 + v10 - 420 + 417) * (v8 == v9)) ^ v10))
                            - ((v10 - a8 + 160) ^ 0x889C4BF7)))();
}

uint64_t sub_10008CBD0@<X0>(int a1@<W3>, int a2@<W7>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20)
{
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  *(&a20 + (a3 + v20)) = *(_BYTE *)(v21 + v24 - 1434071027)
                                     - ((2 * *(_BYTE *)(v21 + v24 - 1434071027)) & 0xFC)
                                     - 2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v23
                                        + 8
                                        * ((((a1 + a3 + 1) < 0x40) | (2
                                                                                  * ((a1 + a3 + 1) < 0x40))) ^ (a2 + v22 - 3)))
                            - 12))();
}

uint64_t sub_10008CC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int32x4_t a37,int32x4_t a38,int32x4_t a39,int32x4_t a40)
{
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(__n128, __n128, __n128, __n128, __n128);
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint8x16_t v58;
  uint16x8_t v59;
  int8x16_t v60;
  int8x16_t v61;
  uint16x8_t v62;
  int8x16_t v63;
  int8x16_t v64;
  uint8x16_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint8x16_t v68;
  int8x16_t v71;
  int8x16_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  uint64_t v81;
  int v82;
  uint64_t (*v83)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(__n128, __n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint8x16_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint8x16_t v88;
  uint8x16_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  _DWORD *v100;
  int v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int8x16x4_t v108;
  int8x16x4_t v109;

  v104 = v41;
  v48 = (uint64_t (*)(__n128, __n128, __n128, __n128, __n128))(*(_QWORD *)(v42 + 8 * (a8 + v40 - 502)) - 8);
  v49.n128_u64[0] = 0xFEFEFEFEFEFEFEFELL;
  v49.n128_u64[1] = 0xFEFEFEFEFEFEFEFELL;
  v50 = (__n128)vdupq_n_s32(0x1D30BEEEu);
  v51 = (__n128)vdupq_n_s32(0x1D30BEE6u);
  v107 = v47 - 16;
  HIDWORD(v105) = a6 + 546720471;
  LODWORD(v106) = 326563401;
  v52.n128_u64[0] = 0xFCFCFCFCFCFCFCFCLL;
  v52.n128_u64[1] = 0xFCFCFCFCFCFCFCFCLL;
  v53 = (__n128)vdupq_n_s32(0x1D30BEFFu);
  v54 = HIDWORD(a33);
  v55 = HIDWORD(a34);
  v56 = BYTE4(a36) ^ 0xE;
  if (v56 == 2)
  {
    v109 = vld4q_s8((const char *)&a24 + 4);
    v85 = (uint8x16_t)veorq_s8(v109.val[0], (int8x16_t)v49);
    v86 = vmovl_u8(*(uint8x8_t *)v85.i8);
    v87 = vmovl_high_u8(v85);
    v88 = (uint8x16_t)veorq_s8(v109.val[1], (int8x16_t)v49);
    _Q22 = vmovl_u8(*(uint8x8_t *)v88.i8);
    _Q21 = vmovl_high_u8(v88);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }
    v93 = (uint8x16_t)veorq_s8(v109.val[2], (int8x16_t)v49);
    v94 = vmovl_high_u8(v93);
    v95 = vmovl_u8(*(uint8x8_t *)v93.i8);
    v109.val[0] = veorq_s8(v109.val[3], (int8x16_t)v49);
    v109.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v109.val[0]);
    v109.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v109.val[1]);
    v109.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v109.val[1].i8);
    v109.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v109.val[0].i8);
    v109.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v109.val[0]);
    v109.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v109.val[0].i8);
    v96 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v95.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v86.i8), 0x18uLL)), v109.val[0]);
    v97 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v95, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v86), 0x18uLL)), v109.val[3]);
    v98 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v94.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v87.i8), 0x18uLL)), v109.val[1]);
    v99 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v94, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v87), 0x18uLL)), v109.val[2]);
    v109.val[0] = veorq_s8(vandq_s8((int8x16_t)v96, (int8x16_t)v50), (int8x16_t)(*(_OWORD *)v109.val & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    v109.val[3] = veorq_s8(vandq_s8((int8x16_t)v97, (int8x16_t)v50), (int8x16_t)(*(_OWORD *)&v109.val[3] & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    v109.val[1] = veorq_s8(vandq_s8((int8x16_t)v98, (int8x16_t)v50), (int8x16_t)(*(_OWORD *)&v109.val[1] & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    v109.val[2] = veorq_s8(vandq_s8((int8x16_t)v99, (int8x16_t)v50), (int8x16_t)(*(_OWORD *)&v109.val[2] & __PAIR128__(0xFFFFFF08FFFFFF08, 0xFFFFFF08FFFFFF08)));
    a39 = vaddq_s32(vsubq_s32(v98, vaddq_s32((int32x4_t)v109.val[1], (int32x4_t)v109.val[1])), (int32x4_t)v51);
    a40 = vaddq_s32(vsubq_s32(v99, vaddq_s32((int32x4_t)v109.val[2], (int32x4_t)v109.val[2])), (int32x4_t)v51);
    a37 = vaddq_s32(vsubq_s32(v96, vaddq_s32((int32x4_t)v109.val[0], (int32x4_t)v109.val[0])), (int32x4_t)v51);
    a38 = vaddq_s32(vsubq_s32(v97, vaddq_s32((int32x4_t)v109.val[3], (int32x4_t)v109.val[3])), (int32x4_t)v51);
    v100 = (_DWORD *)&a37 + v46 + 1653984181;
    v101 = *(v100 - 8) ^ *(v100 - 3);
    v102 = *(v100 - 16) ^ *(v100 - 14) ^ (v101 + v44 - ((2 * v101) & 0x3A617DCC));
    HIDWORD(v103) = v102 ^ v44;
    LODWORD(v103) = v102;
    *v100 = (v103 >> 31) + v44 - ((2 * (v103 >> 31)) & 0x3A617DCC);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v42
                                                                                  + 8
                                                                                  * (((4 * (v47 != 1653984118)) | (16 * (v47 != 1653984118))) ^ (163 * (a6 ^ (a6 - 3))))))(v107, v54, 783, 1928, v55);
  }
  else if (v56 == 1)
  {
    v108 = vld4q_s8((const char *)&a24 + 4);
    v57 = a8 + a6 + 798;
    v58 = (uint8x16_t)veorq_s8(v108.val[0], (int8x16_t)v49);
    v59 = vmovl_u8(*(uint8x8_t *)v58.i8);
    v60 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v59.i8);
    v61 = (int8x16_t)vmovl_high_u16(v59);
    v62 = vmovl_high_u8(v58);
    v63 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v62.i8);
    v64 = (int8x16_t)vmovl_high_u16(v62);
    v65 = (uint8x16_t)veorq_s8(v108.val[1], (int8x16_t)v49);
    v66 = vmovl_high_u8(v65);
    v67 = vmovl_u8(*(uint8x8_t *)v65.i8);
    v68 = (uint8x16_t)veorq_s8(v108.val[2], (int8x16_t)v49);
    _Q26 = (int8x16_t)vmovl_high_u8(v68);
    _Q25 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v68.i8);
    v71 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q25.i8, 0x10uLL);
    __asm { SHLL2           V25.4S, V25.8H, #0x10 }
    v76 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q26.i8, 0x10uLL);
    __asm { SHLL2           V26.4S, V26.8H, #0x10 }
    v108.val[0] = veorq_s8(v108.val[3], (int8x16_t)v49);
    v108.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v108.val[0]);
    v108.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v108.val[1]);
    v108.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v108.val[0].i8);
    v108.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v108.val[0]);
    v108.val[0] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v108.val[0].i8), 0x18uLL), v71), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v67.i8, 8uLL), v60));
    v108.val[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v108.val[3], 0x18uLL), _Q25), vorrq_s8((int8x16_t)vshll_high_n_u16(v67, 8uLL), v61));
    v108.val[1] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v108.val[1].i8), 0x18uLL), v76), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v66.i8, 8uLL), v63));
    v108.val[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v108.val[2], 0x18uLL), _Q26), vorrq_s8((int8x16_t)vshll_high_n_u16(v66, 8uLL), v64));
    v77 = (int32x4_t)veorq_s8(vandq_s8(v108.val[0], (int8x16_t)v53), (int8x16_t)(*(_OWORD *)&v60 & __PAIR128__(0xFFFFFF19FFFFFF19, 0xFFFFFF19FFFFFF19)));
    v78 = (int32x4_t)veorq_s8(vandq_s8(v108.val[3], (int8x16_t)v53), (int8x16_t)(*(_OWORD *)&v61 & __PAIR128__(0xFFFFFF19FFFFFF19, 0xFFFFFF19FFFFFF19)));
    v79 = (int32x4_t)veorq_s8(vandq_s8(v108.val[1], (int8x16_t)v53), (int8x16_t)(*(_OWORD *)&v63 & __PAIR128__(0xFFFFFF19FFFFFF19, 0xFFFFFF19FFFFFF19)));
    v80 = (int32x4_t)veorq_s8(vandq_s8(v108.val[2], (int8x16_t)v53), (int8x16_t)(*(_OWORD *)&v64 & __PAIR128__(0xFFFFFF19FFFFFF19, 0xFFFFFF19FFFFFF19)));
    a39 = vaddq_s32(vsubq_s32((int32x4_t)v108.val[1], vaddq_s32(v79, v79)), (int32x4_t)v51);
    a40 = vaddq_s32(vsubq_s32((int32x4_t)v108.val[2], vaddq_s32(v80, v80)), (int32x4_t)v51);
    a37 = vaddq_s32(vsubq_s32((int32x4_t)v108.val[0], vaddq_s32(v77, v77)), (int32x4_t)v51);
    a38 = vaddq_s32(vsubq_s32((int32x4_t)v108.val[3], vaddq_s32(v78, v78)), (int32x4_t)v51);
    v81 = ((a8 + a6 - 303) ^ (unint64_t)(v46 + 243)) + v107;
    v82 = (HIDWORD(a33) ^ v43)
        - 460997464
        + ((HIDWORD(a34) ^ v43) & (a34 ^ v43) | (a34 ^ 0x9EE7D1CA) & (a35 ^ v43))
        + *((_DWORD *)*(&off_10025FA20 + v57 - 1273) + v81 - 3)
        + (a37.i32[(*((_BYTE *)*(&off_10025FA20 + v57 - 1298) + v81 - 4) - 55)] ^ v44);
    LOBYTE(v81) = *((_BYTE *)*(&off_10025FA20 + v57 - 1242) + v81 - 8) - 113;
    v83 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(__n128, __n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 + 8 * v57) - 4);
    LODWORD(v105) = BYTE4(a36) ^ 0xE;
    HIDWORD(v106) = HIDWORD(a13) - 1277714437;
    return v83(v47 - 15, a35, 1653984181, v83, HIDWORD(a34), ((v82 + v43 - (v45 & (2 * v82))) ^ v43) << v81, a34, -v81, a9, a10, a11, a12, a13, a14, v104, a16, v105, v106, __PAIR64__(a34, HIDWORD(a33)),
             __PAIR64__(a35, HIDWORD(a34)),
             v48,
             v47 - 16,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36);
  }
  else
  {
    HIDWORD(a33) = 2 * (HIDWORD(a33) ^ v43) + v43 - (v45 & (4 * (HIDWORD(a33) ^ v43)));
    LODWORD(a34) = 2 * (a34 ^ v43) + v43 - (v45 & (4 * (a34 ^ v43)));
    HIDWORD(a34) = v43 + 2 * (HIDWORD(a34) ^ v43) - (v45 & (4 * (HIDWORD(a34) ^ v43)));
    LODWORD(a35) = 2 * (a35 ^ v43) + v43 - (v45 & (4 * (a35 ^ v43)));
    return v48(v49, v50, v51, v52, v53);
  }
}

void sub_10008CCE8()
{
  JUMPOUT(0x10008CD04);
}

void sub_10008CF74()
{
  JUMPOUT(0x10008CE78);
}

uint64_t sub_10008CF80@<X0>(uint64_t a1@<X2>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1151 * (a1 + 1 != v3 + 16)) ^ a2)) - 4))();
}

uint64_t sub_10008D060(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((482 * (a1 + 1 != v3 + 32)) ^ v1)) - 4))();
}

uint64_t sub_10008D120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((1619 * (a8 + 1 == v10 + 48)) ^ v8)) - 4))();
}

void sub_10008D20C()
{
  JUMPOUT(0x10008D780);
}

uint64_t sub_10008D3F0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v2 + 8 * ((1692 * (a1 + 1 == v3 + 4)) ^ v1)))();
}

uint64_t sub_10008D4C8@<X0>(int a1@<W1>, uint64_t a2@<X2>, int a3@<W4>, int a4@<W7>, int a5@<W8>)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;

  HIDWORD(v15) = a1 ^ v8;
  LODWORD(v15) = a1 ^ 0x60000000;
  v16 = (v15 >> 27)
      + (a5 ^ v10)
      + (((a3 ^ v7) + v10 - (((a3 ^ v7) << ((2 * v6) ^ 0xEB)) & v12)) ^ a4)
      + (*(_DWORD *)(v5 + 4 * (a2 + v13)) ^ v11);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v9 + 8 * ((3921 * (a2 + 1 == v14 + 24)) ^ v6)))((2 * v6) ^ 0x944u, v16 - ((2 * v16 - 575416510) & v12) - 806217258);
}

uint64_t sub_10008D590(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((31 * (a7 + 1 != v8 + 44)) ^ a1)) - 8))();
}

uint64_t sub_10008D660@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v2 + 8 * ((71 * (a1 + 1 == v3 + 64)) ^ v1)))();
}

void sub_10008D730()
{
  JUMPOUT(0x10008D77CLL);
}

uint64_t sub_10008D7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, int a17, int a18, unsigned int a19, unsigned int a20)
{
  uint64_t v20;
  _BOOL4 v21;

  if (a20 < a19 != a15 - 1107507562 < (a18 & 0x56CD6BAF ^ 0x1376F4CBu))
    v21 = a15 - 1107507562 < (a18 & 0x56CD6BAF ^ 0x1376F4CBu);
  else
    v21 = a15 - 1107507562 > a20;
  return ((uint64_t (*)(void))(*(_QWORD *)(v20 + 8 * ((!v21 | (32 * !v21)) ^ (a8 + a6 + 594))) - 8))();
}

uint64_t sub_10008D884(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v8
                                                               + 8
                                                               * ((2042 * (v6 + 568951889 + a6 + a3 - 783 >= v6 + v7)) ^ a3))
                                                   - 4))(a1, 52);
}

uint64_t sub_10008D8CC@<X0>(unsigned int a1@<W2>, unsigned __int8 a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8 * ((22 * ((((unint64_t)(a8 + v8 - v9) < 0x10) ^ a2) & 1)) ^ a1))
                            - 4))();
}

uint64_t sub_10008D904@<X0>(unint64_t a1@<X1>, int a2@<W5>, int a3@<W7>, int a4@<W8>, int8x16_t a5@<Q0>, int8x16_t a6@<Q3>)
{
  int v6;
  int8x16_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  *v7 = vaddq_s8(vsubq_s8(*(int8x16_t *)(v10 + (v6 + v8)), vandq_s8(vaddq_s8(*(int8x16_t *)(v10 + (v6 + v8)), *(int8x16_t *)(v10 + (v6 + v8))), a6)), a5);
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (a3 + a4 + 136)) - ((10 * (a4 ^ (a2 + 2))) ^ a1)))();
}

uint64_t sub_10008D96C@<X0>(int a1@<W4>, int a2@<W5>, int a3@<W7>, int a4@<W8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(v6 + v5) = *(_BYTE *)(v9 + (v4 + v7))
                      - ((2 * *(_BYTE *)(v9 + (v4 + v7))) & 0xFC)
                      - 2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * (((v5 + 4 * (a4 ^ (a2 - 7)) == 123) * a1) ^ (a3 + a4 + 707)))
                            - 8))();
}

uint64_t sub_10008D9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  int v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;

  v17 = v14 - 2127134125 < (a14 + 1997626360);
  if ((a14 + 1997626360) < 0xD6B0B246 != (v14 - 2127134125) < 0xD6B0B246)
    v17 = (a14 + 1997626360) < 0xD6B0B246;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * ((393 * !v17) ^ v16)) - 8))();
}

uint64_t sub_10008DA44(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v41;
  int v43;

  v43 = a2 ^ 0x32;
  v41 = 173 * (a2 ^ 0x32);
  v37 = 831981571 * ((2 * ((v36 - 120) & 0x62362E68) - (v36 - 120) - 1647717994) ^ 0x46801B2);
  *(_DWORD *)(v36 - 120) = (a14 + 5614872) ^ v37;
  *(_DWORD *)(v36 - 116) = v37 + a2 + 1290;
  *(_QWORD *)(v36 - 112) = a11;
  v38 = sub_10008B438(v36 - 120);
  v39 = a35 & (v43 + 61);
  *(&a26 + (v39 ^ 0x15)) = 126;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v35
                                                      + 8 * ((1965 * ((v39 ^ 0x15) > v41 - 291)) ^ a2))
                                          - 4))(v38);
}

uint64_t sub_10008DB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (v7 ^ (202 * (v6 != 63))))
                            - ((a6 + v7 - 346) ^ (a6 - 246) ^ 0xF2)))();
}

uint64_t sub_10008DB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;

  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * (v9 ^ (488 * ((v8 ^ 0x2Au) < 8))))
                            + 2291944431
                            - (((v9 - 1004954913) & 0x3BE667FEu)
                             - a8
                             - 408)
                            + 4))();
}

uint64_t sub_10008DBE8@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18)
{
  char v18;
  unsigned int v19;
  uint64_t v20;

  *(_QWORD *)(&a18 + a1 - 1385208810) = 0xFEFEFEFEFEFEFEFELL;
  return (*(uint64_t (**)(void))(v20 + 8 * ((((v18 & 0x38) == 8) * (v19 ^ 0x622)) ^ v19)))();
}

uint64_t sub_10008DC38(double a1)
{
  unsigned int v1;
  double *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *v2 = a1;
  return (*(uint64_t (**)(void))(v5 + 8 * (((v4 == 0) * v3) ^ v1)))();
}

uint64_t sub_10008DC58@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (int)(((((a1 + 143130778) | 0x80144A4B)
                                                + ((a1 + 143149309) | 0x801401E8)
                                                - 288919858)
                                               * (v2 == v1)) ^ a1))
                            - 8))();
}

void sub_10008DCBC()
{
  JUMPOUT(0x10008CD04);
}

uint64_t sub_10008DCCC@<X0>(int a1@<W0>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  _BOOL4 v29;

  *(&a19 + (a2 - 502519068)) = *(_BYTE *)(v26 + (v19 + v23))
                                           - ((2 * *(_BYTE *)(v26 + (v19 + v23))) & 0xFC)
                                           - 2;
  v27 = v19 + 1 + a1;
  v28 = (v20 < v22) ^ (v27 < v22);
  v29 = v27 < v20;
  if (v28)
    v29 = v20 < v22;
  return ((uint64_t (*)(void))(*(_QWORD *)(v24 + 8 * ((!v29 * v21) ^ v25)) - 8))();
}

uint64_t sub_10008DD4C@<X0>(int a1@<W5>, int a2@<W7>, int a3@<W8>)
{
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((799 * ((v4 - a1 + 1893 + a3 - 1385210703) < 0x38)) ^ (a2 + v4 - 310)))
                            - 4))();
}

uint64_t sub_10008DD8C@<X0>(int a1@<W5>, unsigned int a2@<W8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = a2;
  v5 = a2 - 1385208810 + ((v2 - 985526160) & 0x3ABDEEFB) - 1744;
  if (v5 <= 0x38)
    v5 = 56;
  return (*(uint64_t (**)(void))(v3
                              + 8 * (((v5 - v4 + 1385208810 < 8) * ((v2 - 985526160) ^ 0x4DDE5C2E ^ (a1 - 12))) ^ v2)))();
}

uint64_t sub_10008DE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,char a25)
{
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(&a25 + v27 - 1385208810) = 0xFEFEFEFEFEFEFEFELL;
  return ((uint64_t (*)(void))(*(_QWORD *)(v28 + 8 * ((((v26 & 0xFFFFFFFFFFFFFFF8) == 8) * (v25 ^ 0x71C)) ^ v25))
                            - 12))();
}

uint64_t sub_10008DE5C(double a1)
{
  unsigned int v1;
  double *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *v2 = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((v4 == 0) * v3) ^ v1)) - 12))();
}

uint64_t sub_10008DE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8
                                        * (int)(((a6 + v8 + ((v8 - 1663144210) & 0xEBBDDBFF ^ 0xFFFFFFF3) - 269)
                                               * (v6 == v7)) ^ v8))
                            - 4))();
}

void sub_10008DECC()
{
  JUMPOUT(0x10008CD04);
}

uint64_t sub_10008E380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37)
{
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  _BOOL4 v44;

  v42 = v40 + v37;
  v43 = *(_DWORD *)(&a25 + ((v40 + v37) & 0xFFFFFFFC) + 72);
  *(_BYTE *)(a2 + v42 + 1) = (BYTE2(v43) ^ 0x18) + ((v43 >> 15) & 0xFC ^ 0xCF) - 1;
  *(_BYTE *)(a2 + v42 + 2) = (BYTE1(v43) ^ 0x2E) - ((2 * (BYTE1(v43) ^ 0x2E)) & 0xFC) - 2;
  *(_BYTE *)(a2 + v42) = (HIBYTE(v43) ^ 0x61)
                       + ((v39 - a8) ^ 4)
                       + ((2 * ((HIBYTE(v43) ^ 0x61 | 0x7E) ^ HIBYTE(v43))) ^ 0xC1);
  *(_BYTE *)(a2 + v42 + 3) = v43 ^ 0xCB;
  v44 = v40 + 1986907766 < (a37 + 1172283898);
  if (v40 + 1986907766 < v38 != a37 + 1172283898 < v38)
    v44 = a37 + 1172283898 < v38;
  return ((uint64_t (*)(void))(*(_QWORD *)(v41 + 8 * ((204 * v44) ^ v39)) - 4))();
}

void sub_10008E530()
{
  JUMPOUT(0x10008E4E8);
}

void zxcm2Qme0x(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X8 }
}

uint64_t sub_10008E5B4(uint64_t a1, int a2)
{
  uint64_t v2;
  BOOL v3;
  int v4;

  if (a1)
    v3 = a2 == 0;
  else
    v3 = 0;
  v4 = v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((8 * v4) | 0x2D3u)) - 12))();
}

uint64_t sub_10008E600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  a14 = v16
      + 1178560073 * ((2 * (&a13 & 0xFF65FB8) - &a13 + 1879679046) ^ 0x973C822E)
      - 1501686575;
  v17 = sub_1000AABF4(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15 + 8 * ((1671 * (a13 == (v16 ^ v14))) ^ v16)) - 12))(v17);
}

uint64_t sub_10008E680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15)
{
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  a13 = &STACK[0x82D647BA4E69FE1];
  a14 = (v17 - 596) ^ (831981571 * (((&a13 | 0x8187B219) - (&a13 & 0x8187B219)) ^ 0x1826623D));
  sub_10006A5D8((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(2392068377
                                                                              - (v17 - 1902899638)
                                                                              + *(_QWORD *)(v16
                                                                                          + 8
                                                                                          * ((45
                                                                                            * (a15 == v15 + v17 + 817 - 867)) ^ v17))))(v18, v19, v20, v21, v22);
}

uint64_t sub_10008E730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, int a17)
{
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;

  v23 = 69008221 * ((&a13 & 0x3E414D53 | ~(&a13 | 0x3E414D53)) ^ 0x121CE0A6);
  a16 = a12;
  a17 = (((2 * v18) & 0x1FFFBFF8) - 52219972 + ((((v22 - 1567712045) & 0x5D715FFB) + 268426529) ^ v18)) ^ v23;
  a13 = v17;
  a15 = v23 + v22 - 522;
  v24 = ((uint64_t (*)(uint64_t *))(*(_QWORD *)(v20 + 8 * (v22 ^ 0x621)) - 8))(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * ((29 * (a14 == v19 + 681)) ^ v22)) - 4))(v24);
}

uint64_t sub_10008E818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, uint64_t a16, unint64_t *a17, int a18)
{
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;

  v21 = 1224239923
      * (((&a13 | 0x2599EE82) - &a13 + (&a13 & 0xDA661178)) ^ 0xD72A1355);
  a16 = a12;
  a17 = &STACK[0x72F2C1D3322B87F0];
  a15 = v21 ^ 0x7AAC1B42;
  a13 = v21 ^ 0x12B68929;
  a14 = (v20 + 368398629) ^ v21;
  v22 = sub_1000AACB4((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19
                                                      + 8
                                                      * (((a18 == ((v20 + 845365711) & 0xCD9CBAFF ^ v18))
                                                        * (((v20 - 418) | 0x190) - 1122)) ^ v20))
                                          - 4))(v22);
}

uint64_t sub_10008E8F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, unint64_t *a14, uint64_t a15, unsigned int a16)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  a16 = v16 - 944348131 * ((2 * (&a14 & 0xA75C168) - &a14 + 1971994257) ^ 0xD6939ADF) - 1012;
  a14 = &STACK[0x20BA795F69D3FC5];
  a15 = a10;
  v19 = ((uint64_t (*)(unint64_t **))(*(_QWORD *)(v17 + 8 * (v16 & 0x73EA20EA)) - 8))(&a14);
  return (*(uint64_t (**)(uint64_t))(v18 + 8 * ((1020 * (a12 == v16 + 489732332)) ^ v16)))(v19);
}

uint64_t sub_10008E9B4()
{
  uint64_t v0;
  void (*v1)(uint64_t *);
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v13 = v0;
  v10 = 0x13240EAB5AFDBE9DLL;
  v11 = v7;
  v12 = v4
      + 1178560073 * ((2 * (&v10 & 0xE19D760) - &v10 - 236574567) ^ 0x16D30AF1)
      + v5
      + 152;
  ((void (*)(uint64_t *))(*(_QWORD *)(v3 + 8 * (int)(v5 ^ 0x8E9411CA)) - 4))(&v10);
  v10 = v7;
  LODWORD(v11) = v4
               - 241568881 * ((2 * (&v10 & 0x242697B0) - &v10 - 606508978) ^ 0xDC86C0C)
               + v5
               + 430;
  sub_1000906D4((uint64_t)&v10);
  v11 = v7;
  LODWORD(v10) = (v5 + 1902899059) ^ (69008221
                                    * ((2 * (&v10 & 0x7906D9E0) - &v10 + 116991516) ^ 0xD55B7416));
  v1(&v10);
  LODWORD(v10) = (17 * (v5 ^ 0x8E94110E) - 579) ^ (69008221
                                                 * ((((2 * &v10) | 0x85777BEA)
                                                   - &v10
                                                   - 1119600117) ^ 0x9119EFFF));
  v11 = v9;
  v1(&v10);
  return v8 ^ (v2 + 681);
}

void sub_10008EB98(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 32) + 1224239923 * (a1 ^ 0xF2B3FDD7);
  __asm { BR              X14 }
}

void sub_10008EC90(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a1 + a2) = 237901512;
}

void sub_10008FC44(uint64_t a1)
{
  int v1;

  v1 = 460628867 * (((a1 | 0xB9F12765) - a1 + (a1 & 0x460ED89A)) ^ 0xF567A518);
  __asm { BR              X9 }
}

uint64_t sub_10008FCE4@<X0>(int a1@<W6>, uint64_t a2@<X8>)
{
  int v2;

  return (*(uint64_t (**)(void))(a2 + 8 * (((a1 == ((v2 + 812) ^ 0x1622A93B)) * (14 * (v2 ^ 0x1C0) + 320)) ^ v2)))();
}

uint64_t sub_10008FD3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8 * (v2 ^ 0x7A6)) - 4))(a1, 1629, 3373224238);
}

uint64_t sub_10008FE2C@<X0>(int a1@<W4>, int a2@<W6>, uint64_t a3@<X8>)
{
  int v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * (((a2 != v4 - 557 + v3 + v4 - 727) * a1) ^ v4)) - 8))();
}

uint64_t sub_10008FE58@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  int v2;

  return (*(uint64_t (**)(void))(a2 + 8 * ((1528 * ((((a1 + 112) ^ (v2 == 0)) & 1) == 0)) ^ a1)))();
}

uint64_t sub_10008FE88@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_DWORD *)(*(_QWORD *)(v3 - 0x2DB44D49A49B0026) + 4 * (v1 + v2 + 1)) = v5;
  v6 = v2 + v4 - 671;
  *(_DWORD *)(v3 - 0x2DB44D49A49B002ALL) = v6;
  if (v1 + v6 + 1 >= 0)
    v7 = v1 + v6 + 1;
  else
    v7 = ~(v1 + v6);
  v8 = (v7 ^ 0x7F3E57CB) - 1896890627 + ((v7 << (v4 ^ 0xA1)) & 0xFE7CAF96) + v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * (((v8 >= 0) | (4 * (v8 >= 0))) ^ v4 ^ 0x32))
                            - (((v4 ^ 0x32u) + 683) ^ 0x535)))();
}

uint64_t sub_10008FF58@<X0>(uint64_t a1@<X8>)
{
  int v1;
  _QWORD *v2;
  int v3;
  int v4;
  unsigned int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * (((*(_DWORD *)(*v2 + 4 * v5) == v1) * v3) ^ v4)) - 8))();
}

uint64_t sub_10008FF7C@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * (((v3 + 9 * (v2 ^ 0x207) - 1342 + v1 >= 0) | (4
                                                                                      * (v3
                                                                                       + 9 * (v2 ^ 0x207)
                                                                                       - 1342
                                                                                       + v1 >= 0))) ^ v2))
                            - ((v2 + 683) ^ 0x535)))();
}

uint64_t sub_10008FFBC(uint64_t result)
{
  int v1;
  int v2;
  _DWORD *v3;
  int v4;
  int v5;

  if ((v2 + v1) >= 0x7FFFFFFF)
    v5 = 475803024 - v4;
  else
    v5 = v4;
  *v3 = v5;
  *(_DWORD *)(result + 4) = 360887506;
  return result;
}

uint64_t sub_10008FFFC(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v2 = *(_DWORD *)(*(_QWORD *)a1 - 0x2DB44D49A49B002ALL) + 970372953;
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0x2DB44D49A49B002ALL) + 970372953;
  v4 = (v2 < -939209183) ^ (v3 < -939209183);
  v5 = v2 > v3;
  if (v4)
    v6 = v2 < -939209183;
  else
    v6 = v5;
  v1 = *(_DWORD *)(a1 + 24) ^ (69008221 * ((a1 - 1382558880 - 2 * (a1 & 0xAD97D360)) ^ 0x7E35816A));
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_10025FA20 + (v1 ^ 0x5FE)) + 8 * ((906 * !v6) ^ v1) - 4)
                            - ((v1 + 490) ^ 0x79ALL)))();
}

uint64_t sub_1000900E0()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v4 = v1 - 818262370;
  v5 = v4 < 1567122790;
  v6 = v3 - 818262370 < v4;
  if (v3 - 818262370 < 1567122790 != v5)
    v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * (v2 ^ (57 * !v6))) - ((v2 - 258917216) & 0xF6EBFFF ^ 0x436)))();
}

uint64_t sub_100090160()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;

  v3 = v2 + 374;
  if (v1 + 1909582136 <= v2 - 1087)
    v4 = v1;
  else
    v4 = 475803024 - v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((3484 * (v4 - 237901513 >= 0)) ^ v3)) - 4))();
}

uint64_t sub_1000901E4()
{
  uint64_t v0;
  unsigned int v1;
  int v2;
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((((*(_DWORD *)(*v4 + 4 * v5) ^ v1) <= (*(_DWORD *)(*v3 + 4 * v5) ^ v1))
                                          * ((543 * (v2 ^ 0x5B6)) ^ 0x7A4)) ^ v2))
                            - 4))();
}

uint64_t sub_100090238(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (a2 ^ (3074 * (v4 < a3)))) - ((a2 - 1054) | 0x594u) + 1452))();
}

uint64_t sub_100090268()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((3484 * (v2 - 237901513 >= 0)) ^ v1)) - 4))();
}

uint64_t sub_10009029C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 8) = 325789292 - v1;
  return result;
}

uint64_t sub_1000902B0(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;

  v1 = 2078219279 * (((a1 | 0x62FDDF9E) - (a1 & 0x62FDDF9E)) ^ 0xB80749EA);
  v2 = *(_DWORD *)(a1 + 16) ^ v1;
  v3 = *(_DWORD *)(a1 + 4) + v1;
  if (v3 < 0)
    v3 = -v3;
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x2DB44D49A49B002ALL);
  v6 = v4 - 237901512;
  v5 = v4 - 237901512 < 0;
  v7 = 237901512 - v4;
  if (!v5)
    v7 = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_10025FA20 + (v2 ^ 0x6C4))
                                        + 8 * ((v3 >> 5 < v7) | (16 * (v3 >> 5 < v7)) | v2)
                                        - 4)
                            - 8))();
}

unsigned int *sub_10009036C@<X0>(unsigned int *result@<X0>, int a2@<W8>)
{
  char v2;
  uint64_t v3;
  unsigned int v4;

  *result = ((*(_DWORD *)(*(_QWORD *)(v3 - 0x2DB44D49A49B0026) + 4 * v4) ^ 0xE487A897) >> v2) & 1 | a2;
  return result;
}

_DWORD *sub_1000903A4@<X0>(_DWORD *result@<X0>, int a2@<W8>)
{
  *result = a2;
  return result;
}

void sub_1000903AC(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD v7[2];
  uint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  int v12;

  v1 = 944348131 * ((a1 & 0x896AFC50 | ~(a1 | 0x896AFC50)) ^ 0xD58CA7E1);
  v2 = *(_DWORD *)(a1 + 40) - v1;
  v3 = *(_DWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = 69008221 * (((v7 | 0x904891BE) - v7 + (v7 & 0x6FB76E40)) ^ 0x43EAC3B4);
  v6 = (*(_DWORD *)(a1 + 56) ^ v1) - v5;
  v9 = v5 ^ (v2 - 360);
  v12 = v3 - v1 + v5 - 499816963;
  v8 = v4;
  v7[1] = v6 - 720291271;
  v10 = &STACK[0x721003D414281A4A];
  v11 = &STACK[0x7D59DC543B842D48];
  ((void (*)(_DWORD *))*(&off_10025FA20 + v2 - 640))(v7);
  __asm { BR              X9 }
}

uint64_t sub_100090540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, int a14, uint64_t a15, int a16, uint64_t a17, int a18, uint64_t a19, int a20)
{
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;

  v25 = *(_QWORD *)(v20 + 32);
  v26 = 268847287 * ((270127462 - (&a13 | 0x1019D166) + (&a13 | 0xEFE62E99)) ^ 0x104C3FB1);
  a19 = *(_QWORD *)(v20 + 24);
  a17 = a10;
  a20 = v22 - ((2 * v22 + 1893722436) & 0x51D99EAE) - v26 - 514014215;
  a18 = v23 - v26 + 1695026742;
  a13 = v25;
  a15 = a10;
  a16 = v23 + 87 - v26 + 1617030143 * a12 + 1155256775;
  v27 = sub_1000AAA74((uint64_t)&a13);
  return (*(uint64_t (**)(uint64_t))(v24 + 8 * ((28 * (a14 != v21)) ^ v23)))(v27);
}

uint64_t sub_100090630()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v1 + 8 * (v3 ^ 0x3F0u)))(**(unsigned int **)(v1 + 8 * (v3 ^ 0x3CCu)), v5, v6);
  *(_DWORD *)(v0 + 16) = v2;
  return result;
}

uint64_t sub_1000906D4(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) + 241568881 * ((-720613086 - (a1 | 0xD50C5122) + (a1 | 0x2AF3AEDD)) ^ 0xFCE2AA9F);
  return (*(uint64_t (**)(void))((char *)*(&off_10025FA20 + (v1 ^ 0x20C))
                              + 8 * ((52 * (*(_QWORD *)a1 != 0x56428495FB62992)) ^ v1)
                              - 4))();
}

uint64_t sub_10009076C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v1 + 8 * ((2014 * (*(_DWORD *)(v2 - 0x56428495FB6297ALL) == 489733862)) ^ v0)))();
}

uint64_t sub_1000907A8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v3 = *(_DWORD *)(v2 - 0x56428495FB62982) - 1437517598;
  v4 = *(_DWORD *)(v2 - 0x56428495FB62986) - 2039233272;
  v5 = v4 < 0xB1491527;
  v6 = v3 < v4;
  if (v3 < 0xB1491527 != v5)
    v6 = v5;
  return (*(uint64_t (**)(void))(v1 + 8 * ((1327 * v6) ^ v0)))();
}

uint64_t sub_100090830@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  _DWORD *v2;

  *v2 = a2;
  *(_DWORD *)(result + 12) = -489691693;
  return result;
}

void tbttItCTp3MZ(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1000908A0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _BOOL4 v6;

  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 1808))(a2, 1252601147) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((107 * v6) ^ v4)) - ((v3 + 8) ^ 0xE3DAF5CALL)))();
}

uint64_t sub_1000908EC(uint64_t a1)
{
  _QWORD *v1;

  *v1 = a1;
  return 0;
}

void sub_100090908(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 4) ^ (3804331 * (((a1 | 0x72B1B0A3) - a1 + (a1 & 0x8D4E4F5C)) ^ 0xC649555));
  __asm { BR              X9 }
}

uint64_t sub_1000909B4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  _BOOL4 v3;

  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8 * (v1 - 258)))(200, 2354554103) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((v3 * (v1 ^ 0x1EC)) | v1)) - 8))();
}

uint64_t sub_1000909F8(uint64_t a1)
{
  _DWORD *v1;
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t result;
  int v9;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(v4 + 8 * ((v6 ^ 8) - 367)))(a1, 0);
  if ((_DWORD)result == 16)
  {
    --v2;
    goto LABEL_7;
  }
  if ((_DWORD)result == 12)
  {
LABEL_7:
    result = (*(uint64_t (**)(uint64_t))(v4 + 8 * (v3 ^ 0x1F6)))(a1);
    v9 = v2;
    goto LABEL_8;
  }
  if ((_DWORD)result)
  {
    v2 -= 2;
    goto LABEL_7;
  }
  *v5 = a1;
  v9 = 1943224805;
LABEL_8:
  *v1 = v9 - 1943224805;
  return result;
}

uint64_t sub_100090A80(_DWORD *a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  _DWORD v8[2];

  v2 = 1224239923 * (((a1 | 0x1AEAD958) - (_DWORD)a1 + (a1 & 0xE51526A7)) ^ 0xE859248F);
  v3 = a1[5] - v2;
  v4 = *a1 ^ v2;
  v8[1] = v3
        - 1178560073 * (((v8 | 0xB082C97F) - (v8 & 0xB082C97F)) ^ 0x57B7EB17)
        - 1347953141;
  result = nullsub_1(v8);
  if (v4 > 213430694)
  {
    if (v4 == 498643366)
    {
      v6 = 3;
    }
    else
    {
      if (v4 != 213430695)
        goto LABEL_11;
      v6 = 1;
    }
LABEL_10:
    v7 = *(_QWORD *)((char *)*(&off_10025FA20 + (int)(v3 ^ 0x8FCD8162))
                   + 8
                   * (int)(((((uint64_t (*)(_QWORD, uint64_t))*(&off_10025FA20 + (int)(v3 ^ 0x8FCD81CA)))((*((_DWORD *)*(&off_10025FA20 + (int)(v3 ^ 0x8FCD8107)) + 6 * v6 + 4)- 1528691550), 3511634213) == 0)* ((v3 + 1882359051) ^ 0x600)) ^ (v3 + 1882358377))- 4)- 12;
    __asm { BR              X9 }
  }
  if (v4 == 213430691)
  {
    v6 = 0;
    goto LABEL_10;
  }
  if (v4 == 213430694)
  {
    v6 = 2;
    goto LABEL_10;
  }
LABEL_11:
  a1[6] = -489691814;
  return result;
}

void sub_1000910B4(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 + 241568881 * (((_DWORD)a1 - 348976960 - 2 * (a1 & 0xEB3308C0)) ^ 0x3D220C82);
  __asm { BR              X8 }
}

uint64_t sub_100091168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16)
{
  uint64_t v16;
  int v17;
  uint64_t v18;

  a16 = v17
      + 1178560073 * (((~&a15 & 0xD8E99ADE) - (~&a15 | 0xD8E99ADF)) ^ 0x3FDCB8B7)
      - 1501686882;
  v18 = sub_1000AABF4(&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v16 + 8 * ((966 * (a15 == 489733862)) ^ v17)) - 8))(v18);
}

uint64_t sub_1000911E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, unsigned int a16, int a17)
{
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  a16 = (v19 - 903) ^ (831981571 * ((&a15 & 0x6D2950CC | ~(&a15 | 0x6D2950CC)) ^ 0xB777F17));
  a15 = &STACK[0x82D647BA4E69FE1];
  sub_10006A5D8((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 + 8 * ((992 * (a17 == v18)) ^ v19))
                                                                                                - ((v19 + 344) | 0x19u)
                                                                                                + 1399))(v20, v21, v22, v23, v24, v25, v26);
}

uint64_t sub_100091280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16, uint64_t a17, unsigned int a18)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void (*v23)(uint64_t *);
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v26 = v18[4];
  v27 = v18[5];
  v22 = v18[1];
  a18 = v21
      - 799
      - 1543737703 * ((-377324932 - (&a15 | 0xE9827A7C) + (&a15 | 0x167D8583)) ^ 0x6889D5FF);
  a17 = a12;
  a15 = v22;
  v23 = (void (*)(uint64_t *))(*(_QWORD *)(v20 + 8 * (v21 ^ 0x5EE)) - 12);
  v23(&a15);
  a18 = v21 - 799 - 1543737703 * (&a15 ^ 0x7EF4507C);
  a15 = v26;
  a17 = a12;
  v23(&a15);
  a16 = v21 + 268847287 * ((&a15 & 0xEDF895C2 | ~(&a15 | 0xEDF895C2)) ^ 0xEDAD7B15) - 531;
  a17 = v27;
  a15 = a12;
  v24 = ((uint64_t (*)(uint64_t *))(*(_QWORD *)(v20 + 8 * (v21 & 0x6F7DAA9F)) - 8))(&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19 + 8 * ((928 * (a18 == 489733862)) ^ v21))
                                          - ((v21 - 1684320257) & 0x6464AE8F)
                                          + 1026))(v24);
}

uint64_t sub_1000913F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, int a17, uint64_t a18, unint64_t *a19, int a20)
{
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;

  v23 = 1224239923 * (&a15 ^ 0xF2B3FDD7);
  a18 = a12;
  a19 = &STACK[0x72F2C1D3322B8808];
  a15 = v23 ^ 0x12B68929;
  a16 = (v22 + 368398770) ^ v23;
  a17 = v23 ^ 0x71C60F36;
  v24 = sub_1000AACB4((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20
                                                      + 8
                                                      * (int)(((a20 == v21)
                                                             * ((((v22 + 691290228) & 0xD6CBBACE) + 1521) ^ (v22 - 369))) ^ v22))
                                          - 12))(v24);
}

uint64_t sub_1000914AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14, unint64_t *a15, unint64_t *a16, unsigned int a17)
{
  uint64_t v17;
  uint64_t v18;
  int v19;
  void (*v20)(unint64_t **);
  uint64_t v21;

  a17 = v19 + 324 - 944348131 * ((&a15 & 0xD828319E | ~(&a15 | 0xD828319E)) ^ 0x84CE6A2F);
  a15 = &STACK[0x20BA795F69D3FDD];
  a16 = a13;
  v20 = (void (*)(unint64_t **))(*(_QWORD *)(v18 + 8 * (v19 | 0x28)) - 8);
  v20(&a15);
  a17 = v19 + 324 - 944348131 * ((&a15 & 0x7C2082A7 | ~(&a15 | 0x7C2082A7)) ^ 0x20C6D916);
  a15 = &STACK[0x20BA795F69D3FC5];
  a16 = a13;
  v20(&a15);
  LODWORD(a16) = v19
               - 241568881
               * (((&a15 | 0x247E0372) - &a15 + (&a15 & 0xDB81FC88)) ^ 0xF26F0730)
               + 388;
  a15 = a13;
  v21 = sub_1000906D4((uint64_t)&a15);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8 * (((HIDWORD(a16) == 489733862) * (((v19 - 4) ^ 0x4B0) + 723)) ^ v19)))(v21);
}

uint64_t sub_1000915FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11, int a12)
{
  uint64_t v12;
  int v13;

  return (*(uint64_t (**)(void))(v12 + 8 * ((124 * (a12 != ((v13 + a9 + 848 - 2060) ^ (a9 + 848)))) ^ a9)))();
}

uint64_t sub_100091630()
{
  uint64_t v0;
  int *v1;
  int v2;
  int v3;
  uint64_t result;
  void (*v5)(unsigned int *);
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  *v1 = v8 ^ v2;
  v10 = v7;
  v9 = (v3 - 886) ^ (69008221
                   * ((((&v9 | 0x475A7F8C) ^ 0xFFFFFFFE) - (~&v9 | 0xB8A58073)) ^ 0x6B07D279));
  v5(&v9);
  v10 = v6;
  v9 = (v3 - 886) ^ (69008221 * ((&v9 & 0x83CD08BF | ~(&v9 | 0x83CD08BF)) ^ 0xAF90A54A));
  result = ((uint64_t (*)(unsigned int *))v5)(&v9);
  *(_DWORD *)(v0 + 24) = 489733862;
  return result;
}

uint64_t sub_100091734(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v1 = 3804331 * ((676526031 - (a1 | 0x2852F7CF) + (a1 | 0xD7AD0830)) ^ 0xA9782DC6);
  v2 = *(_DWORD *)(a1 + 16) ^ v1;
  v3 = *(_DWORD *)(a1 + 20) ^ v1;
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) - 0x2DB44D49A49B002ALL);
  v6 = v4 - 237901512;
  v5 = v4 - 237901512 < 0;
  v7 = 237901512 - v4;
  if (v5)
    v8 = v7;
  else
    v8 = v6;
  return (*(uint64_t (**)(void))((char *)*(&off_10025FA20 + v2 - 98)
                              + 8
                              * ((664 * (((v2 ^ ((v3 - 67201651) < 4 * (unint64_t)v8)) & 1) == 0)) ^ v2)
                              - 4))();
}

uint64_t sub_100091808()
{
  int v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((((v2 ^ 0x5D0) - 1816190557) & 0x6C40D9F4 ^ 0x1FF) * (v0 != 67201651)) ^ v2 ^ 0x5D0))
                            - ((((v2 ^ 0x5D0) - 1276) | 0x2Cu) ^ 0xA0)))();
}

uint64_t sub_10009186C(uint64_t a1)
{
  uint64_t v1;
  int v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1
                                                     + 8
                                                     * ((((181 * (v2 ^ 0x116) - 20) ^ 0xEE) + 181 * (v2 ^ 0x116) - 190) ^ (181 * (v2 ^ 0x116)))))(a1, 3834095767);
}

uint64_t sub_1000918EC@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W3>, int a4@<W8>)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  char v7;
  int v8;

  *(_BYTE *)(*(_QWORD *)(a1 + 8) + (a3 + a4)) = v8
                                                            - 66
                                                            + ((a2 ^ v6) >> v7)
                                                            - ((2 * ((a2 ^ v6) >> v7)) & 0xFC)
                                                            - 108;
  return (*(uint64_t (**)(void))(v4 + 8 * (v8 ^ (440 * (a3 - 1 != v5)))))();
}

uint64_t sub_100091940(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v3
                                                     + 8
                                                     * (((v4 == 24) * ((((a3 | 0x100) - 20) ^ 0xEE) + (a3 | 0x100) - 190)) ^ (a3 | 0x100))))(a1, a2);
}

uint64_t sub_100091978(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  _BOOL4 v7;

  v7 = v5 + 1092042573 <= (((a3 ^ 0x3C) - 190) ^ 0x2CFB57CE) && v5 + 1092042573 >= v4;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8 * ((60 * v7) ^ a3)))(a1, 3834095767);
}

uint64_t sub_1000919C8@<X0>(uint64_t a1@<X0>, int a2@<W4>, int a3@<W8>)
{
  int v3;
  _QWORD *v4;
  int v5;

  return sub_1000918EC(a1, *(_DWORD *)(*v4 + 4 * (int)((((a2 - 326) | 0x88) ^ 0x941BE746) + v5)), v3, a3);
}

_DWORD *sub_1000919FC(_DWORD *result)
{
  int v1;

  *result = v1;
  return result;
}

uint64_t sub_100091A04(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)*(&off_10025B5F0 + ((1441 * (*(_DWORD *)(a2 + 4) == 1528691563)) ^ 0x15Fu)) - 4))();
}

uint64_t sub_100091A48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(*(_QWORD *)(a1 + 96) + 468) = *(_BYTE *)(*(_QWORD *)(a2 + 8) + 12);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 2832) - 4))();
}

void sub_100091AC4()
{
  JUMPOUT(0x100091A94);
}

uint64_t sub_100091ACC@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

void sub_100091AD4(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  _BOOL4 v5;

  v1 = 235795823 * (a1 ^ 0x94AD4959);
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0x56428495FB62986) - 838085059;
  v3 = *(_DWORD *)(a1 + 8) + v1 - 1673847153;
  v4 = (v3 < 0xF8E1265C) ^ (v2 < 0xF8E1265C);
  v5 = v2 < v3;
  if (v4)
    v5 = v3 < 0xF8E1265C;
  __asm { BR              X11 }
}

uint64_t sub_100091BB8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((22
                                          * ((((v0 ^ 0x572) - 406) & *(_DWORD *)(v1 - 0x56428495FB6297ELL)) != ((71 * (v0 ^ 0x4F2)) ^ 0x661))) ^ v0))
                            - 12))();
}

uint64_t sub_100091C14@<X0>(int a1@<W8>, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL4 v5;
  va_list va;

  va_start(va, a2);
  v5 = (*(uint64_t (**)(_QWORD, char *, _QWORD, uint64_t))(v3 + 8 * (v4 ^ 0x6AC)))(**(unsigned int **)(v3 + 8 * (v4 ^ 0x6B0)), va, ((v4 - 831207618) & 0x318B33F7 ^ 0xD5022BF6)+ ((a1 - 1554380750) & 0xFFFFF000 ^ 0x2AFDD59F)+ ((2 * (a1 - 1554380750)) & 0x55FBA000), 1) != 0;
  return (*(uint64_t (**)(void))(v2 + 8 * ((2 * v5) | (16 * v5) | v4)))();
}

uint64_t sub_100091CAC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((*(_QWORD *)(v0 - 0x56428495FB62992) == 0)
                                          * ((v2 - 1511332270) & 0x5A1517FF ^ 0x510)) ^ (v2 - 880)))
                            - 11 * ((v2 - 880) ^ 0x2D4u)
                            + 399))();
}

void sub_100091D24()
{
  uint64_t v0;
  _DWORD *v1;
  int v2;
  uint64_t v3;
  _QWORD *v4;

  *v4 = v3;
  *(_DWORD *)(v0 - 0x56428495FB6298ALL) = v2;
  *v1 = v2;
}

uint64_t sub_10009225C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  char *v4;
  int v5;
  char v7;

  v2 = (unint64_t)&v7 ^ qword_100277B20 ^ qword_1002778E8;
  qword_100277B20 = (45734839 * v2) ^ 0xA77260646F1BC58ALL;
  qword_1002778E8 = 45734839 * (v2 ^ 0xA77260646F1BC58ALL);
  v3 = *(_DWORD *)(a2 + 4);
  v4 = (char *)*(&off_10025FA20
               + ((-73 * ((qword_1002778E8 - ((-73 * v2) ^ 0x8A)) ^ 0x8A)) ^ byte_10020C1E0[byte_1002071F0[(-73 * ((qword_1002778E8 - ((-73 * v2) ^ 0x8A)) ^ 0x8A))] ^ 0x3A])
               - 139)
     - 4;
  if (v3 == 1528691553)
    __asm { BR              X17 }
  if (v3 == 1528691560)
  {
    v5 = **(unsigned __int8 **)(a2 + 8) - 9;
    __asm { BR              X3 }
  }
  return 4294925278;
}

void sub_100092958(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 40) + 235795823 * (((a1 | 0xBFD03985) - a1 + (a1 & 0x402FC67A)) ^ 0x2B7D70DC);
  __asm { BR              X10 }
}

uint64_t sub_100092A98()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v5;

  v5 = *(_OWORD *)(v2 + 48) == 0 || (*(_DWORD *)(v2 + 44) ^ v0) == ((17 * (v1 ^ 0xCD)) ^ 0x3FD7AA8B);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((100 * v5) ^ v1)) - 12))();
}

uint64_t sub_100092AEC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned __int8 v4;
  BOOL v6;

  v3 = v0 ^ 0x6F9;
  v4 = v0 ^ 0xDE;
  v6 = *(_QWORD *)(v1 + 32) == 0x5C4A884E2BA70EBCLL || *(_OWORD *)v1 == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1342 * ((v4 ^ v6) & 1)) ^ v3)) - 12))();
}

uint64_t sub_100092B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4
                                                              + 8
                                                              * ((((((v3 - 1484) | 0x80) + 36) ^ ((v3 - 1492) | 0x88))
                                                                * (v2 == 0)) ^ v3)))(a1, a2, 831981571);
}

uint64_t sub_100092C54@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v42)(uint64_t);
  uint64_t v43;
  void (*v44)(uint64_t);
  void (*v45)(uint64_t);
  uint64_t v46;

  v30 = v22 + 77;
  v31 = ((2 * ((v29 - 144) & 0x46CC6E78) - (v29 - 144) - 1187802749) ^ 0x209241A7) * a2;
  *(_QWORD *)(v29 - 136) = v26;
  *(_QWORD *)(v29 - 128) = v20;
  *(_DWORD *)(v29 - 144) = (((v22 + 77) ^ 0xC0C4174C) + v23) ^ v31;
  *(_DWORD *)(v29 - 140) = v31 + v22 + 957;
  v46 = a3 + v21;
  ((void (*)(uint64_t))(*(_QWORD *)(a1 + 8 * (v22 ^ 0x20D)) - 4))(v29 - 144);
  HIDWORD(a10) = v30 ^ 0x4DD;
  *(_DWORD *)(v29 - 144) = v30
                         + 751
                         - 1224239923
                         * ((((v29 - 144) | 0x72DB4EC0) - (v29 - 144) + ((v29 - 144) & 0x8D24B138)) ^ 0x8068B317);
  *(_QWORD *)(v29 - 136) = a19;
  *(_QWORD *)(v29 - 128) = v24;
  v45 = (void (*)(uint64_t))*(&off_10025FA20 + v30 - 568);
  v45(v29 - 144);
  HIDWORD(v43) = v30 - 296;
  *(_QWORD *)(v29 - 144) = v26;
  *(_QWORD *)(v29 - 136) = a19;
  *(_DWORD *)(v29 - 112) = v30
                         - 296
                         - 1543737703
                         * ((((v29 - 144) | 0x4EA87986) - (v29 - 144) + ((v29 - 144) & 0xB1578678)) ^ 0x305C29FA);
  *(_QWORD *)(v29 - 128) = a20;
  *(_QWORD *)(v29 - 120) = v24;
  v44 = (void (*)(uint64_t))*(&off_10025FA20 + v30 - 631);
  v44(v29 - 144);
  HIDWORD(a8) = v30 + 951;
  *(_QWORD *)(v29 - 128) = v25;
  *(_QWORD *)(v29 - 120) = a19;
  *(_QWORD *)(v29 - 104) = a20;
  *(_QWORD *)(v29 - 144) = v24;
  *(_QWORD *)(v29 - 136) = a20;
  *(_DWORD *)(v29 - 112) = v30 + 951 - 1224239923 * ((v29 - 144) ^ 0xF2B3FDD7);
  v32 = (void (*)(uint64_t))((char *)*(&off_10025FA20 + v30 - 584) - 8);
  v32(v29 - 144);
  LODWORD(v43) = v30 + 330;
  *(_DWORD *)(v29 - 144) = v30
                         + 330
                         - 1178560073
                         * ((((v29 - 144) ^ 0xE0146109 | 0xF4B9EC4) + ((v29 - 144) ^ 0xF488E44 | 0xF0B4613B)) ^ 0x869CD24);
  *(_QWORD *)(v29 - 128) = a19;
  *(_QWORD *)(v29 - 120) = a20;
  *(_QWORD *)(v29 - 112) = a15;
  *(_QWORD *)(v29 - 104) = a20;
  *(_QWORD *)(v29 - 136) = v24;
  v42 = (void (*)(uint64_t))((char *)*(&off_10025FA20 + (v30 ^ 0x27A)) - 8);
  v42(v29 - 144);
  *(_DWORD *)(v29 - 144) = v30 + 751 - 1224239923 * ((v29 - 411936759 - 2 * ((v29 - 144) & 0xE7725899)) ^ 0x15C1A54E);
  *(_QWORD *)(v29 - 136) = a19;
  *(_QWORD *)(v29 - 128) = a14;
  v45(v29 - 144);
  *(_DWORD *)(v29 - 112) = v30
                         - 296
                         - 1543737703 * (((v29 - 144) & 0xED32F927 | ~((v29 - 144) | 0xED32F927)) ^ 0x6C3956A4);
  *(_QWORD *)(v29 - 144) = v26;
  *(_QWORD *)(v29 - 136) = a19;
  *(_QWORD *)(v29 - 128) = v28;
  *(_QWORD *)(v29 - 120) = a14;
  v44(v29 - 144);
  *(_DWORD *)(v29 - 112) = v30
                         + 951
                         - 1224239923
                         * (((((v29 - 144) | 0x2E18EB56) ^ 0xFFFFFFFE) - (~(v29 - 144) | 0xD1E714A9)) ^ 0x2354E97E);
  *(_QWORD *)(v29 - 144) = a14;
  *(_QWORD *)(v29 - 136) = v28;
  *(_QWORD *)(v29 - 128) = v25;
  *(_QWORD *)(v29 - 120) = a19;
  *(_QWORD *)(v29 - 104) = v28;
  v32(v29 - 144);
  *(_QWORD *)(v29 - 136) = a14;
  *(_QWORD *)(v29 - 128) = a19;
  *(_DWORD *)(v29 - 144) = v30 + 330 - 1178560073 * ((v29 - 435891113 - 2 * ((v29 - 144) & 0xE604D4E7)) ^ 0x131F68F);
  *(_QWORD *)(v29 - 112) = a12;
  *(_QWORD *)(v29 - 104) = v28;
  *(_QWORD *)(v29 - 120) = v28;
  v42(v29 - 144);
  *(_DWORD *)(v29 - 144) = (v30 + 153) ^ (268847287
                                        * ((((v29 - 144) | 0x44694F9C) - (v29 - 144) + ((v29 - 144) & 0xBB96B060)) ^ 0xBBC35EB4));
  *(_QWORD *)(v29 - 136) = v28;
  *(_QWORD *)(v29 - 128) = a20;
  ((void (*)(uint64_t))*(&off_10025FA20 + v30 - 548))(v29 - 144);
  *(_QWORD *)(v29 - 136) = v28;
  *(_DWORD *)(v29 - 140) = v30
                         - 1224239923 * ((((2 * (v29 - 144)) | 0xFB28F40) - (v29 - 144) + 2015803488) ^ 0x756ABA77)
                         - 25;
  sub_1000651F8(v29 - 144);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t), uint64_t, void (*)(uint64_t), uint64_t, void (*)(uint64_t), uint64_t, void (*)(uint64_t), char *, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8 * ((((v30 ^ 0xDD ^ (*(_DWORD *)(v29 - 144) < 0x18257F42u)) & 1) * ((v30 ^ 0x4DD) - 1497)) ^ v30)))(v33, v34, v35, v36, v37, v38, v39, v40, a4, v42, v43, v44, a8, v45, a10, v32, (char *)*(&off_10025FA20 + v30 - 544) - 4, v46, a14,
           v24,
           a16);
}

uint64_t sub_100093148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void (*a16)(uint64_t), void (*a17)(uint64_t), uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  void (*v29)(uint64_t);
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)(v34 - 144) = v33;
  *(_QWORD *)(v34 - 136) = v30;
  *(_DWORD *)(v34 - 128) = (v31 + 117) ^ (3804331
                                        * ((2 * ((v34 - 144) & 0x24362F0) - (v34 - 144) + 2109512971) ^ 0x369B8FD));
  v29(v34 - 144);
  *(_QWORD *)(v34 - 104) = v33;
  *(_QWORD *)(v34 - 128) = a29;
  *(_QWORD *)(v34 - 120) = a24;
  *(_DWORD *)(v34 - 112) = v31
                         + 130
                         - 1224239923
                         * ((((v34 - 144) ^ 0xCA7DE41E) & 0xF0BA43E2 | ~((v34 - 144) ^ 0xCA7DE41E | 0xF0BA43E2)) ^ 0x378BA5D4);
  *(_QWORD *)(v34 - 144) = v30;
  *(_QWORD *)(v34 - 136) = v33;
  a16(v34 - 144);
  *(_DWORD *)(v34 - 112) = v31
                         + 130
                         - 1224239923 * ((((v34 - 144) | 0x4AD5FD1B) - ((v34 - 144) & 0x4AD5FD1B)) ^ 0xB86600CC);
  *(_QWORD *)(v34 - 104) = a18;
  *(_QWORD *)(v34 - 144) = v30;
  *(_QWORD *)(v34 - 136) = v33;
  *(_QWORD *)(v34 - 128) = v33;
  *(_QWORD *)(v34 - 120) = a24;
  a16(v34 - 144);
  *(_DWORD *)(v34 - 144) = v31
                         - 235795823 * (((v34 - 144) & 0x46F1697D | ~((v34 - 144) | 0x46F1697D)) ^ 0x2DA3DFDB)
                         + 2138961813;
  *(_QWORD *)(v34 - 136) = a20;
  *(_QWORD *)(v34 - 128) = v33;
  sub_1000AA8F4(v34 - 144);
  *(_DWORD *)(v34 - 128) = (v31 + 117) ^ (3804331
                                        * ((1507516239 - ((v34 - 144) | 0x59DADF4F) + ((v34 - 144) | 0xA62520B0)) ^ 0xD8F00546));
  *(_QWORD *)(v34 - 144) = v33;
  *(_QWORD *)(v34 - 136) = a25;
  a17(v34 - 144);
  *(_QWORD *)(v34 - 144) = v33;
  *(_DWORD *)(v34 - 136) = v31
                         + 831981571 * (((v34 - 144) & 0xA0A8D7DE | ~((v34 - 144) | 0xA0A8D7DE)) ^ 0xC6F6F805)
                         - 1203;
  *(_QWORD *)(v34 - 128) = a25;
  v35 = sub_100085594(v34 - 144);
  return (*(uint64_t (**)(uint64_t))(v32
                                            + 8
                                            * (((((a21 == 0) ^ (v31 - 4)) & 1)
                                              * (((v31 - 1541) | 0x480) ^ 0x4EE)) ^ (v31 + 262))))(v35);
}

uint64_t sub_1000933B4()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  int v8;

  v5 = 3804331 * ((((2 * (v4 - 144)) | 0x1839231E) - (v4 - 144) + 1944284785) ^ 0xF2C9B479);
  *(_QWORD *)(v4 - 120) = v2;
  *(_DWORD *)(v4 - 128) = (v0 - 986) ^ v5;
  *(_DWORD *)(v4 - 124) = (v8 - 1003897599 + ((v0 - 1156) | 0xF0)) ^ v5;
  *(_QWORD *)(v4 - 136) = v3;
  result = ((uint64_t (*)(uint64_t))((char *)*(&off_10025FA20 + v0 - 1035) - 8))(v4 - 144);
  *(_DWORD *)(v7 - 0x5C4A884E2BA70EBCLL) = v8;
  *(_DWORD *)(v1 + 24) = 489733862;
  return result;
}

void sub_10009351C(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  _DWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;

  v1 = 2078219279 * ((2 * (a1 & 0x636844EC) - a1 - 1667777773) ^ 0x466D2D67);
  v2 = *(_DWORD *)(a1 + 64) - v1;
  v3 = *(_DWORD *)(a1 + 40) ^ v1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_DWORD *)(a1 + 60) - v1;
  v7 = 831981571 * (((v8 | 0x3F000E94) - (v8 & 0x3F000E94)) ^ 0xA6A1DEB0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = v4;
  v8[0] = v2 - v7 - 504207465;
  v9 = v4;
  v10 = v5;
  v13 = v7 ^ (v3 - 122105303);
  v14 = v6 + v7 - 296005617;
  sub_1000AB120((uint64_t)v8);
  __asm { BR              X8 }
}

uint64_t sub_100093694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, char a12, int a13, unint64_t *a14, uint64_t a15)
{
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  int v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v22 = *(_BYTE *)(v15 + 56) - v19;
  v23 = 268847287 * ((((2 * &a10) | 0x96A7D3F6) - &a10 + 883693061) ^ 0x34F9F8D3);
  a14 = &STACK[0x6B80B300B999BAB];
  a15 = v18;
  a12 = ((v21 + 33) ^ 0x3E)
      - -73 * ((((2 * &a10) | 0xF6) - &a10 + 5) ^ 0xD3)
      + (v21 ^ v22 ^ 0xF7)
      + 2 * (v22 & 7);
  a10 = v23 + v21 + 1220;
  a11 = (v20 - 371451500) ^ v23;
  sub_10008B548((uint64_t)&a10);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17
                                                                                          + 8
                                                                                          * ((19 * (a13 != v16)) | v21))
                                                                              - 12))(v24, v25, v26, v27, v28);
}

uint64_t sub_10009375C()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((398
                                          * (v1
                                           + ((v2 + 2034078398) ^ 0x793D94CC)
                                           + ((v2 + 2034078398) & 0x86C26FCE)
                                           - 1715142297 < 0xFFFFFFFE)) ^ v2))
                            - 12))();
}

uint64_t sub_1000937B4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  a3 = a1;
  a4 = a2;
  a5 = v9 - 944348131 * ((&a3 & 0xE4E14E4C | ~(&a3 | 0xE4E14E4C)) ^ 0xB80715FD) - 840;
  v10 = ((uint64_t (*)(uint64_t *))(*(_QWORD *)(v7 + 8 * (v9 ^ 0x5A4)) - 8))(&a3);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v8
                                                      + 8
                                                      * ((219 * (a6 == v9 - 923 + ((v9 - 923) ^ (v6 - 614)))) ^ v9))
                                          - 12))(v10);
}

void sub_10009384C(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)(v1 + 48) - 0x72F2C1D3322B87E8) = a1;
  *(_DWORD *)(v1 + 24) = 489733862;
}

void sub_10009392C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 24) - 69008221 * ((a1 - 1655620505 - 2 * (a1 & 0x9D513C67)) ^ 0x4EF36E6D);
  __asm { BR              X15 }
}

void sub_100093A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  *(_DWORD *)(a3 + v4) = v3;
}

void sub_100094888(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;

  v1 = 1178560073 * ((a1 - 2 * (a1 & 0xA5CBBCEE) - 1513374482) ^ 0x42FE9E86);
  v2 = *(_DWORD *)(a1 + 32) ^ v1;
  v3 = (*(_BYTE *)(a1 + 16) - v1);
  ((void (*)(char *, void (*)()))*(&off_10025FA20 + (v2 & 0x54B9E8E0)))((char *)*(&off_10025FA20 + (int)(v2 & 0xC43D0CA1)) - 12, sub_1000AA448);
  v5 = *(_QWORD *)((char *)*(&off_10025FA20 + (int)(v2 & 0xD9B6D844)) - 4);
  v4 = (235795823 * (((&v4 | 0xAD911F22) - (&v4 & 0xAD911F22)) ^ 0x393C567B)) ^ (v2 + 9);
  sub_100094ED4((uint64_t)&v4);
  __asm { BR              X8 }
}

uint64_t sub_1000949D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v21 = (&a16 ^ 0xE7352268) * v17;
  a16 = v18 - v21 - 128;
  a17 = v21 ^ 0x80;
  sub_10007E380(&a16);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 + 8 * (((**(_DWORD **)(v20 + 8 * ((v18 - 565035232) & 0x21ADBDF8 ^ 0x1A0u)) == ((v18 - 565035232) & 0x21ADBDF8) - 280) * (((v18 - 565035232) & 0x21ADBDF8) - 230)) ^ (v18 - 565035232) & 0x21ADBDF8))
                                                                                                - 4))(v22, v23, v24, v25, v26, v27, v28);
}

uint64_t sub_100094A80()
{
  uint64_t v0;
  _DWORD *v1;
  _DWORD *v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t (*v13)(uint64_t, _BYTE *, _DWORD *);
  int v14;
  unsigned int v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  unsigned int v19;
  uint64_t result;
  uint64_t v21;
  _BYTE v22[20];
  _BYTE v23[150];

  v8 = *(unsigned int **)(v5 + 8 * ((v7 + 743) & 0x21EA3085));
  v9 = *(_QWORD *)(v5 + 8 * ((v7 + 743) & 0x11A6746E));
  v10 = *v8;
  v11 = *(_BYTE **)(v9 - 4);
  v23[0] = *v11 - 91;
  v23[1] = v11[1] - 91;
  v23[2] = v11[2] - 91;
  v23[3] = v11[3] - 91;
  v23[4] = v11[4] - 91;
  v23[5] = v11[5] - 91;
  v23[6] = v11[6] - 91;
  v23[7] = v11[7] - 91;
  v23[8] = v11[8] - 91;
  v23[9] = v11[9] - 91;
  v23[10] = v11[10] - 91;
  v23[11] = v11[11] - 91;
  v23[12] = v11[12] - 91;
  v23[13] = v11[13] - 91;
  v23[14] = v11[14] - 91;
  v23[15] = v11[15] - 91;
  v23[16] = v11[16] - 91;
  v23[17] = v11[17] - 91;
  v23[18] = v11[18] - 91;
  v23[19] = v11[19] - 91;
  v23[20] = v11[20] - 91;
  v23[21] = v11[21] - 91;
  v12 = *(_BYTE **)(v9 - 4);
  v23[22] = v12[22] - 91;
  v23[23] = v12[23] - 91;
  v23[24] = v12[24] - 91;
  v23[25] = v12[25] - 91;
  v23[26] = v12[26] - 91;
  v23[27] = v12[27] - 91;
  v23[28] = v12[28] - 91;
  v23[29] = v12[29] - 91;
  v13 = *(uint64_t (**)(uint64_t, _BYTE *, _DWORD *))(v5 + 8 * (v7 - 47));
  v14 = v13(v10, v23, v1);
  v15 = ((2 * v14) & 0xE7E7FDF6) + (v14 ^ 0x73F3FEFB);
  if (v15 != 1945370363)
  {
    if (v15 == 1945371465)
    {
      v16 = *v8;
      v17 = *(_BYTE **)(*(_QWORD *)(v5 + 8 * (v3 ^ 0x37E)) - 4);
      v22[0] = *v17 - 2;
      v22[1] = v17[1] - 2;
      v22[2] = v17[2] - 2;
      v22[3] = v17[3] - 2;
      v22[4] = v17[4] - 2;
      v22[5] = v17[5] - 2;
      v22[6] = v17[6] - 2;
      v22[7] = v17[7] - 2;
      v22[8] = v17[8] - 2;
      v22[9] = v17[9] - 2;
      v22[10] = v17[10] - 2;
      v22[11] = v17[11] - 2;
      v22[12] = v17[12] - 2;
      v22[13] = v17[13] - 2;
      v22[14] = v17[14] - 2;
      v22[15] = v17[15] - 2;
      v22[16] = v17[16] - 2;
      v22[17] = v17[17] - 2;
      v22[18] = v17[18] - 2;
      v22[19] = v17[19] - 2;
      v18 = v13(v16, v22, v1);
      v19 = (2 * v18) & 0xFBF7FDFA;
      v15 = (v18 ^ 0xFDFBFEFD) + 1677164508;
    }
    else
    {
      v19 = -302022690;
    }
    __asm { BR              X8 }
  }
  *(_DWORD *)(v6 + 348) |= (v3 + 7) ^ 0x40C;
  *(_DWORD *)(v6 + 48) = 733061813;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _DWORD *))(v5 + 8 * (v3 - 916)))(*v1, v6 + 336, v6 + 340, v6 + 344, v2);
  v21 = *(_QWORD *)(v0 + 24);
  *(_DWORD *)(*(_QWORD *)(v0 + 8) - 0x3974ED3FA12E689) = *v1;
  *(_DWORD *)(v21 - 0x64312DEF5EC77446) = *v2 - ((v3 ^ 0x374E45D7) & (2 * *v2)) + 463938324;
  *(_DWORD *)v0 = 489733862;
  return result;
}

void sub_100094ED4(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)a1 ^ (235795823 * (a1 ^ 0x94AD4959));
  v2 = *(_QWORD *)(a1 + 8);
  ((void (*)(_QWORD, void (*)()))*(&off_10025FA20 + v1 - 808))(*(&off_10025FA20 + v1 - 919), sub_1000AA7AC);
  __asm { BR              X10 }
}

uint64_t sub_100094F70()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((1384
                                          * ((((v2 - 680) ^ (**(_QWORD **)(v1 + 8 * ((v2 - 680) ^ 0x1BB)) == 0)) & 1) == 0)) ^ (v2 - 680)))
                            - 12))();
}

uint64_t sub_100094FB0@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 ^ 0x1ED)))(v1);
}

void sub_100094FE0(uint64_t a1)
{
  __asm { BR              X8 }
}

uint64_t sub_100095024(uint64_t a1)
{
  uint64_t v1;
  int v3;
  unsigned int v4;
  uint64_t v5;

  v3 = (*(uint64_t (**)(void))(v1 + 1352))();
  if (v3 == 16)
    v4 = -42029;
  else
    v4 = -42030;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  (*(void (**)(uint64_t))(v1 + 208))(a1);
  return v5;
}

uint64_t sub_10009506C(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)*(&off_10025B5F0 + ((21 * (*(_DWORD *)(a2 + 4) != 1528691551)) ^ 0x42Fu)) - 8))();
}

uint64_t sub_1000950AC()
{
  return 4294925278;
}

uint64_t sub_1000950B4(uint64_t a1, uint64_t a2)
{
  char v2;

  if (**(_BYTE **)(a2 + 8))
    v2 = 77;
  else
    v2 = 76;
  *(_BYTE *)(a1 + 88) = v2;
  return 0;
}

void sub_1000950F8(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  void (*v6)(_QWORD, void (*)());
  char v7;

  v2 = (unint64_t)&v7 ^ qword_100277B68 ^ qword_1002778E8;
  v3 = 45734839 * v2 - 0x354AA8AFC6EBC5ALL;
  v4 = 45734839 * (v2 ^ 0xA77260646F1BC58ALL);
  qword_100277B68 = v3;
  v5 = byte_100214C90[byte_100211010[(-73 * ((v4 + v3) ^ 0x8A))] ^ 0x17];
  v6 = (void (*)(_QWORD, void (*)()))*(&off_10025FA20
                                                + ((-73 * (v3 ^ 0x8A ^ v4)) ^ byte_100210F10[byte_10020C0E0[(-73 * (v3 ^ 0x8A ^ v4))] ^ 0x11])
                                                + 3);
  qword_1002778E8 = v4;
  v6(*(&off_10025FA20 + ((-73 * ((v4 + v3) ^ 0x8A)) ^ v5) + 24), sub_1000AA7AC);
  __asm { BR              X11 }
}

uint64_t sub_100095218()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v1 + 8 * ((1529 * (**(_QWORD **)(v2 + 1752) == 0)) ^ v0)))();
}

uint64_t sub_100095250@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 ^ 0x482u)))(v1);
}

void sub_100095274(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 44) - 1224239923 * (((a1 | 0x1FD8AEE4) - a1 + (a1 & 0xE027511B)) ^ 0xED6B5333);
  __asm { BR              X16 }
}

uint64_t sub_1000953A8()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * ((1966 * (v1 != 0x4A24EF6A)) ^ (v0 - 603))) - 4))(1664037403);
}

uint64_t sub_1000953FC(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;

  v12 = v7 > 0x25BD9D53;
  *(_BYTE *)(v10 + (a1 - 1664037403)) = *(_BYTE *)(v3 + ((a1 - 1664037403) & 0xFLL)) ^ *(_BYTE *)(v1 + (a1 - 1664037403)) ^ *(_BYTE *)(v4 + ((a1 - 1664037403) & 0xFLL)) ^ *(_BYTE *)(((a1 - 1664037403) & 0xFLL) + v2 + 1) ^ (23 * ((a1 - 27) & 0xF));
  v13 = a1 + 1997746322;
  v14 = (a1 + 1);
  v15 = v12 ^ (v13 < v5 - 46 + v6);
  v16 = v13 < v8;
  if (!v15)
    v12 = v16;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v11 + 8 * ((v12 * v9) ^ v5)) - 4))(v14);
}

uint64_t sub_100095494(uint64_t a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((31
                                * ((v3 ^ (((a2 - 1267753107) & 0x4B905FB4) - 1133) ^ 0xB5D91316)
                                 + 1069268593
                                 + ((2 * v3) & 0xFFFBFBBE ^ v2) != 1069136976)) ^ a2)))();
}

uint64_t sub_100095504(int a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (a3 ^ (117 * ((v3 + a1 + 131617) > 7))))
                            - ((a3 - 488) | 4u)
                            + 1056))();
}

uint64_t sub_100095548(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v6
                                                               + 8 * ((a3 - 644) ^ (1904 * (a6 >> 4 == 268427230))))
                                                   - ((89 * ((a3 - 644) ^ 0x380) - 975944845) & 0x3A2BBBEA ^ 0x38ELL)))(a1, a2);
}

uint64_t sub_1000955A4(int a1, int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v18;
  unint64_t v19;
  int v21;

  v10 = ((a3 + 162) ^ (a2 + 1004)) + v7 + a1;
  v11 = v10 + v3;
  v12 = v10 + v8;
  v13 = (v7 + a1) & 0xF;
  v14 = v13 + v5 - v12;
  v15 = (v13 | v6) - v12;
  v16 = (v13 | v4) - v12;
  v18 = (unint64_t)(v11 - v12) >= 0x10
     && v14 >= (unint64_t)((a3 - 1022725196) & 0x3CF58FDF) - 1806
     && v15 >= 0x10;
  v19 = v16 + 1;
  v21 = !v18 || v19 < 0x10;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((2 * v21) | (4 * v21)) ^ a3)) - 4))();
}

uint64_t sub_100095630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v8
                                                                       + 8
                                                                       * (((((a7 + 471240926) & 0x63E969B7) - 387)
                                                                         * (v7 < 0x10)) ^ a7))
                                                           - 4))(a1, a2, 0);
}

uint64_t sub_10009566C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16x4_t v68;
  int8x16x4_t v69;

  v68.val[1].i64[0] = ((_BYTE)v60 + 13) & 0xF;
  v68.val[1].i64[1] = ((_BYTE)v60 + 12) & 0xF;
  v68.val[2].i64[0] = ((_BYTE)v60 + 11) & 0xF;
  v68.val[2].i64[1] = ((_BYTE)v60 + 10) & 0xF;
  v68.val[3].i64[0] = ((_BYTE)v60 + (_BYTE)a7 - 120 + 99) & 0xF;
  v68.val[3].i64[1] = ((_BYTE)v60 + 8) & 0xF;
  v63 = v62 + a1 + a2;
  v64.i64[0] = 0x1717171717171717;
  v64.i64[1] = 0x1717171717171717;
  v68.val[0].i64[0] = v63 & 0xF;
  v68.val[0].i64[1] = ((_BYTE)v60 + 14) & 0xF;
  v65.i64[0] = vqtbl4q_s8(v68, (int8x16_t)xmmword_100204890).u64[0];
  v69.val[0].i64[1] = ((_BYTE)v60 + 6) & 0xF;
  v69.val[1].i64[1] = ((_BYTE)v60 + 4) & 0xF;
  v69.val[2].i64[1] = ((_BYTE)v60 + 2) & 0xF;
  v69.val[3].i64[1] = v60 & 0xF;
  v69.val[0].i64[0] = ((_BYTE)v60 + 7) & 0xF;
  v69.val[1].i64[0] = ((_BYTE)v60 + 5) & 0xF;
  v69.val[2].i64[0] = (v60 + 3) & 0xF;
  v69.val[3].i64[0] = ((_BYTE)v60 + 1) & 0xF;
  v65.i64[1] = vqtbl4q_s8(v69, (int8x16_t)xmmword_100204890).u64[0];
  v66 = vrev64q_s8(vmulq_s8(v65, v64));
  *(int8x16_t *)(a54 - 15 + v63) = veorq_s8(veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v58 + v68.val[0].i64[0] - 15), *(int8x16_t *)(v56 - 15 + v63)), *(int8x16_t *)(v59 + v68.val[0].i64[0] - 15)), *(int8x16_t *)(v57 + v68.val[0].i64[0] + (((a7 - 1422) | 0x40u) ^ 0x1D1) - 15)), vextq_s8(v66, v66, 8uLL));
  return (*(uint64_t (**)(void))(a56 + 8 * ((99 * ((v61 & 0xFFFFFFF0) != 16)) ^ (a7 - 888))))();
}

void sub_1000957DC()
{
  JUMPOUT(0x10009575CLL);
}

uint64_t sub_1000957E8(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (v4 | (v3 == a3))) - ((v4 + 1971774487) & 0x8A791BBB ^ 0x1A7)))();
}

uint64_t sub_100095824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v6
                                                                                + 8
                                                                                * ((v5 + 1088) | (4
                                                                                                * ((((v5 - 2135244828) & 0x7F453FFF ^ 0x1BC) & v4) != ((v5 - 767308769) & 0x2DBC363C) - 1068))))
                                                                    - 12))(a1, a2, a3, (v3 - a3));
}

uint64_t sub_100095884(int a1, int a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  char v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v68;
  int8x16x4_t v70;

  *(_DWORD *)(v65 - 132) = v61;
  *(_QWORD *)(v65 - 120) = v56 - 7;
  *(_QWORD *)(v65 - 128) = v64 - 7;
  *(_DWORD *)(v65 - 136) = v61 & 0xFFFFFFF8;
  v66 = -a3;
  v67 = v62 + v63 + a1;
  v68 = (v63 + a1 + a2 + v66);
  v70.val[0].i64[0] = ((_BYTE)v63 + (_BYTE)a1 + (_BYTE)a2 + (_BYTE)v66) & 0xF;
  v70.val[0].i64[1] = (v67 + 14 + (_BYTE)v66) & 0xF;
  v70.val[1].i64[0] = (v67 + 13 + (_BYTE)v66) & 0xF;
  v70.val[1].i64[1] = (v67 + 12 + (_BYTE)v66) & 0xF;
  v70.val[2].i64[0] = (v67 + 11 + (_BYTE)v66) & 0xF;
  v70.val[2].i64[1] = (v67 + 10 + (_BYTE)v66) & 0xF;
  v70.val[3].i64[0] = (v60 + (_BYTE)v66 + ((a6 + 29) ^ 8)) & 0xF;
  v70.val[3].i64[1] = (v67 + 8 + (_BYTE)v66) & 0xF;
  *(int8x8_t *)(*(_QWORD *)(v65 - 128) + v68) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v58 + (v68 & 0xF) - 7), *(int8x8_t *)(*(_QWORD *)(v65 - 120) + v68)), veor_s8(*(int8x8_t *)(v59 + (v68 & 0xF) - 7), *(int8x8_t *)((v68 & 0xF) + v57 - 6))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v70, (int8x16_t)xmmword_1002048A0), (int8x8_t)0x1717171717171717)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a56 + 8 * ((1474 * (8 - (v61 & 0xFFFFFFF8) == v66)) ^ a6))
                                         - 12))((__n128)xmmword_1002048A0);
}

void sub_1000959C4()
{
  JUMPOUT(0x1000958E4);
}

uint64_t sub_1000959D0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((((a2 + 599) | 4) - 463) * (*(_DWORD *)(v2 - 132) != *(_DWORD *)(v2 - 136))) ^ a2))
                            - ((a2 - 886318034) & 0x34D423A3 ^ 0x1A7)))();
}

uint64_t sub_100095A24(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(v10 + (a4 - 1069136977)) = *(_BYTE *)(v7 + ((a4 - 1069136977) & 0xFLL)) ^ *(_BYTE *)(v5 + (a4 - 1069136977)) ^ *(_BYTE *)(v8 + (((_BYTE)a4 - 81) & 0xF)) ^ *(_BYTE *)((((_BYTE)a4 - 81) & 0xF) + v6 + 1) ^ (23 * ((a4 - 81) & 0xF));
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * (((a4 - 1 == v9) * (a5 - 1016)) ^ (a5 + 554))) - 12))();
}

uint64_t sub_100095A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  int v54;

  v52 = *(_QWORD *)(v48 + 24);
  *(int8x16_t *)(v50 - 112) = veorq_s8(*(int8x16_t *)*(_QWORD *)(v48 + 16), (int8x16_t)xmmword_1002048C0);
  if (v49)
    v53 = v52 == 0x697D3DFF8FBD18CALL;
  else
    v53 = 1;
  v54 = !v53;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 + 8 * (int)((v54 * ((a6 ^ 0x55C) - 16)) ^ a6)) - 8))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48);
}

uint64_t sub_100095AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57)
{
  uint64_t v57;
  _BOOL4 v59;

  v59 = ((((a57 - 1187921920) & 0x46CE3FFF) - 1264) & (HIDWORD(a23) + 6)) != 0 || HIDWORD(a23) == 314638490;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 + 8 * ((v59 * (a57 - 1246)) ^ (a57 - 893))) - 8))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48);
}

uint64_t sub_100095B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,uint64_t a57,int a58)
{
  uint64_t v58;
  int v59;
  int v60;

  v59 = a24 - ((a58 ^ 0xD215ED8) & (2 * a56)) - 204493703;
  v60 = ((2 * v59) & 0xFCFCB42E ^ 0xC201026) + (v59 ^ 0xF8EEF704) + 1974991779 != 1949717946;
  return ((uint64_t (*)(void))(*(_QWORD *)(v58 + 8 * (((v60 << 6) | (v60 << 8)) ^ a58)) - 8))();
}

uint64_t sub_100095C18()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((((15 * (v0 ^ 0x47E)) ^ (3 * (v0 ^ 0x59B)) ^ 0x3BA)
                                * ((v2 + v1 + 25273833) < 8)) ^ v0 ^ 0xCF4)))();
}

uint64_t sub_100095CA4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * (((((a5 - 638) ^ 0x13D) + 2918) * ((a1 + a7 - 16) < 0xFFFFFFF0)) ^ a5))
                            - (((a5 - 638) | 0x2AAu) ^ 0x7B3)))();
}

uint64_t sub_100095CEC(int a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v22;
  int v25;

  v10 = (v7 + v6 + a1);
  v11 = v10 + v8 + 1;
  v12 = ((_BYTE)v7 + (_BYTE)v6 + (_BYTE)a1) & 0xF;
  v13 = v12 - v10;
  v14 = v5 + v13;
  v15 = (((a3 ^ 0x282u) - 269) ^ 0x42DLL) + v12;
  v16 = v5 + v15;
  v17 = v4 + v13;
  v18 = v4 + v15;
  v19 = v3 + v13;
  v20 = v3 + v15;
  v22 = v14 < v11 && v16 > v8;
  if (v17 < v11 && v18 > v8)
    v22 = 1;
  v25 = v19 < v11 && v20 > v8 || v22;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((109 * (v25 ^ 1)) ^ a3)) - 12))();
}

uint64_t sub_100095D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v8
                                                                       + 8
                                                                       * ((121 * (v7 < (((a7 - 389) | 0x41) ^ 0x3E5u))) ^ a7))
                                                           - 8))(a1, a2, 0);
}

uint64_t sub_100095DB4(int a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16x4_t v19;
  int8x16x4_t v20;

  v19.val[1].i64[0] = ((_BYTE)a2 + 10) & 0xF;
  v19.val[1].i64[1] = ((_BYTE)a2 + 9) & 0xF;
  v19.val[2].i64[0] = ((_BYTE)a2 + 8) & 0xF;
  v19.val[2].i64[1] = ((_BYTE)a2 + 7) & 0xF;
  v19.val[3].i64[0] = ((_BYTE)a2 + 6) & 0xF;
  v19.val[3].i64[1] = ((_BYTE)a2 + 5) & 0xF;
  v20.val[0].i64[0] = ((_BYTE)a2 + 4) & 0xF;
  v20.val[0].i64[1] = ((_BYTE)a2 + 3) & 0xF;
  v12 = v9 + v8 + a1;
  v20.val[1].i64[0] = ((_BYTE)a2 + 2) & 0xF;
  v20.val[1].i64[1] = (a2 + 1) & 0xF;
  v20.val[2].i64[0] = a2 & 0xF;
  v20.val[2].i64[1] = (a2 - 1) & 0xF;
  v20.val[3].i64[0] = (a2 + 14) & 0xF;
  v20.val[3].i64[1] = (a2 + 13) & 0xF;
  v13.i64[0] = 0x505050505050505;
  v13.i64[1] = 0x505050505050505;
  v14.i64[0] = 0xFEFEFEFEFEFEFEFELL;
  v14.i64[1] = 0xFEFEFEFEFEFEFEFELL;
  v19.val[0].i64[0] = v12 & 0xF;
  v19.val[0].i64[1] = ((_BYTE)a2 + 11) & 0xF;
  v15.i64[0] = vqtbl4q_s8(v19, (int8x16_t)xmmword_100204890).u64[0];
  v15.i64[1] = vqtbl4q_s8(v20, (int8x16_t)xmmword_100204890).u64[0];
  v16 = vrev64q_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v10 - 15 + v12), *(int8x16_t *)(v6 + v19.val[0].i64[0] - 15)), veorq_s8(*(int8x16_t *)(v5 + v19.val[0].i64[0] - 15), *(int8x16_t *)(v4 + v19.val[0].i64[0] - 15))));
  v17 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v16, v16, 8uLL), v14), vmulq_s8(v15, v13)));
  *(int8x16_t *)(v10 - 15 + v12) = vextq_s8(v17, v17, 8uLL);
  return (*(uint64_t (**)(void))(v11 + 8 * ((((v7 & 0xFFFFFFF0) == 16) * (a4 ^ 0x59C)) ^ a4)))();
}

void sub_100095F14()
{
  JUMPOUT(0x100095E98);
}

uint64_t sub_100095F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,unsigned __int8 *a54,unsigned int a55,uint64_t a56)
{
  uint64_t v56;
  unsigned __int8 *v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  char *v62;
  char *v63;
  uint64_t v64;
  int v65;
  unsigned __int8 v66;
  unint64_t v67;
  char *v68;
  int v69;
  char v70;
  int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  char *v79;
  char *v80;
  unsigned int v81;
  char *v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  int v137;
  unsigned int v138;
  unsigned int v139;
  char *v140;
  int v141;
  int v142;
  char *v143;
  char *v144;
  unsigned int v145;
  char *v146;
  int v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  int v151;
  int v152;
  int v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  int v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  int v181;
  int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  int v200;
  int v201;
  unsigned int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  unsigned int v207;
  unsigned int v208;
  int v209;
  int v210;
  int v211;
  unsigned int v212;
  unsigned int v213;
  int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  int v218;
  unsigned int v219;
  int v220;
  unsigned int v221;
  int v222;
  int v223;
  int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  int v231;
  int v232;
  int v233;
  char *v234;
  char *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  unsigned __int8 v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  int v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  int v256;
  int v257;
  int v258;
  unsigned int v259;
  int v260;
  uint64_t v261;
  unsigned int v262;
  char *v263;
  char *v264;
  unsigned int v265;
  int v266;
  int v267;
  char *v268;
  int v269;
  int v270;
  unint64_t v271;
  char *v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  int v284;
  unsigned int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  int v297;
  int v298;
  unsigned int v299;
  int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  unsigned int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  int v333;
  int v334;
  int v335;
  unsigned int v336;
  int v337;
  unsigned int v338;
  int v339;
  int v340;
  int v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  int v345;
  unsigned int v346;
  unsigned int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  int v358;
  unsigned int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  unsigned int v364;
  int v365;
  int v366;
  int v367;
  int v368;
  unsigned int v369;
  unsigned int v370;
  unsigned int v371;
  int v372;
  int v373;
  int v374;
  unsigned int v375;
  int v376;
  unsigned int v377;
  int v378;
  int v379;
  unsigned int v380;
  int v381;
  int v382;
  unsigned int v383;
  unsigned int v384;
  unsigned int v385;
  int v386;
  int v387;
  int v388;
  int v389;
  int v390;
  int v391;
  unsigned int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  unsigned int v398;
  int v399;
  int v400;
  int v401;
  unsigned int v402;
  unsigned int v403;
  int v404;
  uint64_t v405;
  char *v406;
  unsigned int v407;
  int v408;
  int v409;
  char *v410;
  uint64_t v411;
  int v412;
  char *v413;
  int v414;
  int v415;
  int v416;
  uint64_t v417;
  char *v418;
  char *v419;
  uint64_t v420;
  int v421;
  uint64_t v422;
  char *v423;
  uint64_t v424;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unsigned int v430;
  uint64_t v431;
  unsigned int v432;
  uint64_t v433;
  unsigned int v434;
  uint64_t v435;
  unsigned int v436;
  unsigned int v437;
  unsigned int v438;
  uint64_t v439;
  unsigned int v440;
  unsigned __int8 v441;
  uint64_t v442;
  unsigned int v443;
  uint64_t v444;
  int v445;
  int v446;
  int v447;
  uint64_t v448;
  int v449;
  unsigned int v450;
  unsigned int v451;
  unsigned int v452;
  uint64_t v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  int v457;
  uint64_t v458;
  int v459;
  unsigned int v460;
  unsigned int v461;
  uint64_t v462;
  unsigned int v463;
  unsigned int v464;
  unsigned __int8 v465;
  unsigned int v466;
  unsigned int v467;
  uint64_t v468;
  unsigned int v469;
  unsigned int v470;
  int v471;
  unsigned int v472;
  uint64_t v473;
  unsigned int v474;
  int v475;
  unsigned int v476;
  int v477;
  uint64_t v478;
  int v479;
  unsigned int v480;
  int v481;
  unsigned int v482;
  int v483;
  uint64_t v484;
  unsigned int v485;
  unsigned int v486;
  int v487;
  unsigned int v488;
  unsigned int v489;
  uint64_t v490;
  int v491;
  int v492;
  unsigned __int8 v493;
  unsigned int v494;
  unsigned int v495;
  uint64_t v496;
  __int16 v497;
  unsigned int v498;
  int v499;
  unsigned int v500;
  uint64_t v501;
  int v502;
  unsigned int v503;
  int v504;
  int v505;
  int v506;
  uint64_t v507;
  unsigned int v508;
  unsigned int v509;
  unsigned int v510;
  unsigned int v511;
  uint64_t v512;
  int v513;
  unsigned int v514;
  int v515;
  int v516;
  int v517;
  unsigned int v518;
  uint64_t v519;
  unsigned int v520;
  unsigned int v521;
  unsigned int v522;
  unsigned int v523;
  int v524;
  uint64_t v525;
  int v526;
  unsigned int v527;
  int v528;
  int v529;
  int v530;
  uint64_t v531;
  int v532;
  unsigned int v533;
  int v534;
  int v535;
  unsigned int v536;
  int v537;
  uint64_t v538;
  int v539;
  int v540;
  unsigned int v541;
  uint64_t v542;
  unsigned int v543;
  int v544;
  int v545;
  unsigned int v546;
  int v547;
  uint64_t v548;
  unsigned int v549;
  int v550;
  int v551;
  uint64_t v552;
  unsigned int v553;
  int v554;
  unsigned int v555;
  unsigned int v556;
  uint64_t v557;
  int v558;
  int v559;
  unsigned int v560;
  unsigned int v561;
  uint64_t v562;
  unsigned int v563;
  int v564;
  unsigned int v565;
  uint64_t v566;
  int v567;
  unsigned int v568;
  unsigned int v569;
  char *v570;
  int v571;
  unsigned int v572;
  char *v573;
  unsigned int v574;
  char *v575;
  int v576;
  char *v577;
  int v578;
  uint64_t v579;
  uint64_t v580;
  unint64_t v581;
  uint64_t v582;
  unsigned int v583;
  uint64_t v584;
  int v585;
  int v586;
  unsigned int v587;
  int v588;
  int v589;
  int v590;
  int v591;
  unsigned int v592;
  int v593;
  unsigned int v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  int v600;
  int v601;
  unsigned int v602;
  unsigned int v603;
  unsigned int v604;

  v60 = v58 - 193;
  v61 = v58 + 678;
  *(_DWORD *)(v59 - 120) = v61 | 4;
  v62 = (char *)*(&off_10025FA20 + (v60 ^ 0x22)) - 8;
  v63 = (char *)*(&off_10025FA20 + (v60 ^ 0x8E)) - 8;
  v64 = (uint64_t)*(&off_10025FA20 + (v60 ^ 0x15));
  v65 = ((v62[*(unsigned __int8 *)(v56 - 0x697D3DFF8FBD18C8) ^ 0xD7] ^ 0x68) << 8) | ((v63[*v57 ^ 0xB1] ^ ((v61 | 4) - 41)) << 24);
  HIDWORD(v67) = *(unsigned __int8 *)(v64 + (*(unsigned __int8 *)(v56 - 0x697D3DFF8FBD18BDLL) ^ 0x49));
  LODWORD(v67) = (HIDWORD(v67) ^ 0xB0) << 24;
  v66 = v67 >> 26;
  v68 = (char *)*(&off_10025FA20 + v60 - 112) - 4;
  v69 = v63[*(unsigned __int8 *)(v56 - 0x697D3DFF8FBD18BELL) ^ 0xB8];
  HIDWORD(v67) = *(unsigned __int8 *)(v64 + (*(unsigned __int8 *)(v56 - 0x697D3DFF8FBD18C1) ^ 0x6BLL));
  LODWORD(v67) = (HIDWORD(v67) ^ 0xB0) << 24;
  v70 = v62[*(unsigned __int8 *)(v56 - 0x697D3DFF8FBD18BCLL) ^ 0x2ELL];
  v71 = ((v67 >> 26) ^ 0x53) << 16;
  HIDWORD(v67) = *(unsigned __int8 *)(v64 + (*(unsigned __int8 *)(v56 - 0x697D3DFF8FBD18C9) ^ 0x47));
  LODWORD(v67) = (HIDWORD(v67) ^ 0xB0) << 24;
  v72 = v65 & 0xFF00FF00 | (v68[*(unsigned __int8 *)(v56 - 0x697D3DFF8FBD18C7) ^ 0xECLL] + 68) ^ 9 | (((v67 >> 26) ^ 0x1E) << 16);
  v73 = v62[*(unsigned __int8 *)(v56 - 0x697D3DFF8FBD18C4) ^ 0x30];
  LODWORD(v62) = v71 | ((v62[*(unsigned __int8 *)(v56 - 0x697D3DFF8FBD18C0) ^ 0x77] ^ 0xA7) << 8);
  HIDWORD(v67) = *(unsigned __int8 *)(v64 + (*(unsigned __int8 *)(v56 - 0x697D3DFF8FBD18C5) ^ 0xCBLL));
  LODWORD(v67) = (HIDWORD(v67) ^ 0xB0) << 24;
  v74 = ((v66 ^ 0xFB) << 16) | ((v69 ^ 0xBBBBBBBB) << 24) | ((v70 ^ 0xAD) << 8);
  v75 = ((v68[*(unsigned __int8 *)(v56 - 0x697D3DFF8FBD18C3) ^ 0xA9] + 68) | ((v73 ^ 0x5D) << 8)) & 0xFF00FFFF | (((v67 >> 26) ^ 0xBA) << 16);
  LOBYTE(v71) = v68[*(unsigned __int8 *)(v56 - 0x697D3DFF8FBD18BBLL) ^ 0x36];
  LOBYTE(v68) = v68[*(unsigned __int8 *)(v56 - 0x697D3DFF8FBD18BFLL) ^ 0xB5];
  v76 = v75 | ((v63[*(unsigned __int8 *)(v56 - 0x697D3DFF8FBD18C6) ^ 0x35] ^ 0xCCCCCCCC) << 24);
  v77 = v62 | ((v63[*(unsigned __int8 *)(v56 - 0x697D3DFF8FBD18C2) ^ 0xBFLL] ^ 0xD5) << 24);
  v78 = (uint64_t)*(&off_10025FA20 + (v60 ^ 0x11));
  v79 = (char *)*(&off_10025FA20 + v60 - 6) - 4;
  LODWORD(v63) = *(_DWORD *)(v78 + 4 * ((v71 + 68) ^ 0xFDu)) ^ 0x832295F6 ^ *(_DWORD *)&v79[4 * (v66 ^ 0x61)];
  *(_DWORD *)(v59 - 132) = v60;
  v80 = (char *)*(&off_10025FA20 + (v60 ^ 0x78)) - 4;
  v81 = ((_DWORD)v63 - ((2 * (_DWORD)v63) & 0xBC5733B2) - 567567911) ^ *(_DWORD *)&v80[4 * (v69 ^ 0x2E)];
  v82 = (char *)*(&off_10025FA20 + (v60 ^ 0x83)) - 8;
  HIDWORD(v582) = v72;
  v83 = *(_DWORD *)&v82[4 * (v70 ^ 0x95)] ^ v72 ^ (v81 - ((2 * v81) & 0xB8B60D40) + 1549469344);
  LODWORD(v582) = v74 & 0xFFFFFF00 | (v71 + 68) ^ 0x2A;
  v84 = v77 & 0xFFFFFF00 | ((_BYTE)v68 + 68) ^ 0xA8;
  v85 = v83 ^ v76;
  v86 = v83;
  v469 = v83;
  v87 = v83 ^ v76 ^ 0x4D;
  *(_DWORD *)(v59 - 192) = v87 ^ v84;
  LODWORD(v64) = v87;
  v465 = v87;
  v88 = v87 ^ v84 ^ (v582 - 2 * (v582 & 0x326140A3 ^ ((v71 + 68) ^ 0x2A) & 3) + 845234336);
  v89 = v88 ^ 0x88966D09;
  v578 = BYTE1(v88);
  v499 = ((v88 ^ 0x88966D09) >> 16);
  v90 = *(_DWORD *)&v82[4 * (BYTE1(v88) ^ 0xBA)] ^ 0x3BDB89E ^ *(_DWORD *)&v79[4 * (v499 ^ 0x49)];
  v505 = v88;
  v91 = (v90 - ((2 * v90) & 0xB9885790) - 591123512) ^ *(_DWORD *)(v78 + 4 * (v88 ^ 0x89u));
  v485 = v89;
  *(_DWORD *)(v59 - 208) = HIBYTE(v89);
  v92 = v86 ^ *(_DWORD *)&v80[4 * (HIBYTE(v89) ^ 0x65)] ^ (v91 - ((2 * v91) & 0xBC5733B2) - 567567911);
  v93 = v84 & 0x883397B ^ (((_BYTE)v68 + 68) ^ 0xA8) & 0x10;
  *(_DWORD *)(v59 - 184) = v85;
  v581 = __PAIR64__(v76, v84);
  *(_DWORD *)(v59 - 160) = v92;
  v94 = v92 ^ 0x8883396B ^ (v84 - 2 * v93 - 2004666005);
  *(_DWORD *)(v59 - 128) = v94;
  v520 = ((v94 ^ v89) >> 16) ^ 0x74A7;
  v516 = ((v94 ^ v89) >> 16) ^ 0xA7;
  v513 = ((unsigned __int16)(v92 ^ 0x396B ^ (v84 - 2 * v93 + 14699) ^ v89) >> 8);
  v95 = (v85 ^ 0xBAF72DE4) - 2 * ((v85 ^ 0xBAF72DE4) & 0x883397B ^ v85 & 0x10);
  v96 = *(_DWORD *)&v79[4 * (((v94 ^ v89) >> 16) ^ 0x2E)] ^ *(_DWORD *)&v82[4 * (v513 ^ 0x9B)] ^ 0x3BDB89E;
  v600 = v92 ^ 0x6B ^ (v84 - 2 * v93 + 107) ^ v89;
  v97 = (v96 - ((2 * v96) & 0xB9885790) - 591123512) ^ *(_DWORD *)(v78 + 4 * (v600 ^ 0xD2u));
  v98 = v94 ^ v89 ^ 0x25D5AED7;
  v99 = (v94 ^ v89) >> 24;
  *(_DWORD *)(v59 - 216) = v99;
  v100 = (v97 - ((2 * v97) & 0xBC5733B2) - 567567911) ^ *(_DWORD *)&v80[4 * (v99 ^ 0x69)];
  v101 = v100 ^ v64 ^ 0x7BF382F9;
  v545 = v100 ^ v64;
  *(_DWORD *)(v59 - 152) = v101 ^ v94;
  v102 = ((v101 ^ v94 ^ 0xE1758F13) - ((2 * (v101 ^ v94 ^ 0xE1758F13)) & 0xA2E41F3C) + 1366429598) ^ v98;
  v558 = ((v102 ^ 0x9547167F) >> 16);
  v571 = ((unsigned __int16)(v102 ^ 0x167F) >> 8);
  v103 = *(_DWORD *)&v82[4 * (v571 ^ 0x3A)] ^ *(_DWORD *)&v79[4 * (v558 ^ 0x89)];
  v567 = (((v101 ^ v94 ^ 0x13) - ((2 * (v101 ^ v94 ^ 0x13)) & 0x3C) - 98) ^ v98);
  v104 = ((v103 ^ 0x3BDB89E) - 2 * ((v103 ^ 0x3BDB89E) & 0x5CC42BC9 ^ v103 & 1) - 591123512) ^ *(_DWORD *)(v78 + 4 * (v567 ^ 0xE4u));
  v583 = (v102 ^ 0x9547167F) >> 24;
  v105 = (v104 - ((2 * v104) & 0xBC5733B2) - 567567911) ^ *(_DWORD *)&v80[4 * (v583 ^ 0x1D)];
  v522 = v100 ^ v92;
  v594 = (v105 + 159488450 + (~(2 * v105) | 0xECFCCC7B) + 1) ^ v100 ^ v92;
  *(_DWORD *)(v59 - 248) = v594 ^ 0x98199C2;
  v603 = v594 ^ 0x98199C2 ^ v100 ^ v64;
  v106 = ((v603 ^ 0xFE25CD6D) - ((2 * (v603 ^ 0xFE25CD6D)) & 0xA2E41F3C) + 1366429598) ^ v98;
  *(_DWORD *)(v59 - 220) = BYTE1(v106);
  v107 = *(_DWORD *)&v82[4 * (BYTE1(v106) ^ 0x6F)];
  v108 = v95 - 2004666005;
  *(_DWORD *)(v59 - 232) = BYTE2(v106);
  v109 = v107 ^ *(_DWORD *)&v79[4 * (BYTE2(v106) ^ 0xA8)] ^ 0x3BDB89E;
  v587 = HIBYTE(v106);
  v110 = (v109 - ((2 * v109) & 0xBC5733B2) - 567567911) ^ *(_DWORD *)&v80[4 * (HIBYTE(v106) ^ 0x85)];
  v585 = (((v603 ^ 0x6D) - ((2 * (v603 ^ 0x6D)) & 0x3C) - 98) ^ v98);
  v111 = (v110 - ((2 * v110) & 0xB9885790) - 591123512) ^ *(_DWORD *)(v78 + 4 * (v585 ^ 0x25u));
  LODWORD(v64) = (v111 - ((2 * v111) & 0x82095EA0) - 1056657584) ^ v101;
  v602 = v603 ^ v101 ^ v94;
  v460 = v64;
  v563 = v602 ^ v64;
  v112 = v106 ^ v602 ^ v64 ^ 0xCC3D50BA;
  v443 = v602 ^ v64 ^ 0xCC3D50BA;
  *(_DWORD *)(v59 - 256) = v106;
  v494 = (v112 ^ 0x3A3C68AAu) >> 24;
  v113 = *(_DWORD *)&v80[4 * (v494 ^ 0x1D)];
  *(_DWORD *)(v59 - 168) = v92 ^ 0x8883396B ^ v108;
  v479 = ((v112 ^ 0x3A3C68AAu) >> 16);
  v114 = v113 ^ *(_DWORD *)&v79[4 * (v479 ^ 0x89)] ^ 0x81CD27E7;
  v487 = ((unsigned __int16)(v112 ^ 0x68AA) >> 8);
  v115 = (v114 - ((2 * v114) & 0xB8B60D40) + 1549469344) ^ *(_DWORD *)&v82[4 * (v487 ^ 0x3A)];
  *(_DWORD *)(v59 - 200) = v594 ^ 0x98199C2 ^ v111;
  v598 = v112;
  v116 = (v115 - ((2 * v115) & 0xB9885790) - 591123512) ^ *(_DWORD *)(v78 + 4 * (v112 ^ 0x31u)) ^ v594 ^ 0x98199C2 ^ v111;
  v493 = BYTE2(v64) ^ 0x16;
  v117 = v116 ^ v64 ^ 0x7C166C11;
  v553 = v116;
  v118 = ((v603 ^ 0xFE25CD6D) - ((2 * (v603 ^ 0xFE25CD6D)) & 0xA2E41F3C) + 1366429598) ^ v98 ^ v117;
  *(_DWORD *)(v59 - 240) = HIBYTE(v118);
  v564 = (((v603 ^ 0x6D) - ((2 * (v603 ^ 0x6D)) & 0x3C) - 98) ^ v98 ^ v117);
  v119 = *(_DWORD *)&v80[4 * (HIBYTE(v118) ^ 0x9B)] ^ *(_DWORD *)(v78 + 4 * (v564 ^ 0x31u)) ^ 0x2EFB211;
  v535 = (v118 >> 8) ^ 0x86839A;
  v540 = BYTE1(v118) ^ 0x9A;
  v120 = (v119 - ((2 * v119) & 0xB8B60D40) + 1549469344) ^ *(_DWORD *)&v82[4 * (BYTE1(v118) ^ 0xA0)];
  v121 = v118 ^ 0xDAB51277;
  v532 = BYTE2(v118);
  v122 = (v120 - ((2 * v120) & 0xBFCD7C7C) + 1608957502) ^ *(_DWORD *)&v79[4 * (BYTE2(v118) ^ 0xA)];
  v123 = (v122 - ((2 * v122) & 0x103854A4) + 136063570) ^ v116;
  *(_DWORD *)(v59 - 176) = v123;
  v123 ^= 0xF59FB0F8;
  v502 = v123 ^ v117;
  v497 = v123;
  v549 = v117 ^ v443;
  LODWORD(v64) = v117;
  v526 = v117;
  v124 = ((v123 ^ v117 ^ 0x5A137D54) - ((2 * (v123 ^ v117 ^ 0x5A137D54)) & 0xF1267AF0) - 124568200) ^ v117 ^ v443 ^ 0x2FA6B2F5;
  v125 = v124;
  *(_DWORD *)(v59 - 136) = v124;
  v126 = ((v124 ^ 0xAEC73C3D) - ((2 * (v124 ^ 0xAEC73C3D)) & 0xB86D11BA) + 1547077853) ^ v121 ^ 0x479AB031;
  v576 = (((v124 ^ 0x3D) - ((2 * (v124 ^ 0x3D)) & 0xBA) - 35) ^ v121);
  v596 = ((unsigned __int16)(((v124 ^ 0x3C3D) - ((2 * (v124 ^ 0x3C3D)) & 0x11BA) - 30499) ^ v121 ^ 0xB031) >> 8);
  v127 = *(_DWORD *)&v82[4 * (v596 ^ 0x3A)] ^ *(_DWORD *)(v78 + 4 * (v576 ^ 0xAAu)) ^ 0x809F2D68;
  v128 = BYTE2(v126);
  v129 = (v127 - ((2 * v127) & 0xBFCD7C7C) + 1608957502) ^ *(_DWORD *)&v79[4 * (BYTE2(v126) ^ 0x89)];
  v508 = HIBYTE(v126);
  LODWORD(v62) = (v129 - ((2 * v129) & 0xBC5733B2) - 567567911) ^ *(_DWORD *)&v80[4 * (HIBYTE(v126) ^ 0x1D)];
  v130 = v62 ^ v64;
  v131 = ((v62 ^ v64 ^ 0xA6C48CD5)
        - 2 * ((v62 ^ v64 ^ 0xA6C48CD5) & 0x5C3688DF ^ (v62 ^ v64) & 2)
        + 1547077853) ^ v121;
  v132 = ((unsigned __int16)((((unsigned __int16)v62 ^ v64 ^ 0x8CD5)
                                             - 2
                                             * (((unsigned __int16)v62 ^ v64 ^ 0x8CD5) & 0x88DF ^ ((unsigned __int16)v62 ^ v64) & 2)
                                             - 30499) ^ v121) >> 8);
  v133 = *(_DWORD *)&v80[4 * (HIBYTE(v131) ^ 5)] ^ *(_DWORD *)&v82[4 * (v132 ^ 0x6F)] ^ 0x82709F79;
  v134 = (v133 - ((2 * v133) & 0xB9885790) - 591123512) ^ *(_DWORD *)(v78 + 4 * (v131 ^ 0x25u));
  v135 = v123 ^ v62;
  LODWORD(v64) = v123 ^ v62 ^ *(_DWORD *)&v79[4 * (BYTE2(v131) ^ 0xA8)] ^ (v134
                                                                                       - ((2 * v134) & 0xBFCD7C7C)
                                                                                       + 1608957502);
  v136 = v125 ^ 0x2958E43D;
  LODWORD(v62) = v125 ^ 0x2958E43D ^ v64;
  *(_DWORD *)(v59 - 140) = (_DWORD)v62;
  v591 = ((unsigned __int16)((unsigned __int16)v62 ^ v131) >> 8);
  LODWORD(v82) = *(_DWORD *)&v82[4 * (v591 ^ 0x44)];
  v455 = (v62 ^ v131) >> 24;
  v137 = *(_DWORD *)&v80[4 * (v455 ^ 0x47)];
  v436 = v62 ^ v131;
  v471 = (v62 ^ v131);
  v446 = ((v62 ^ v131) >> 16);
  v138 = ((v137 ^ v82 ^ 0x82709F79)
        - 2 * ((v137 ^ v82 ^ 0x82709F79) & 0x5CC42BCA ^ (v137 ^ v82) & 2)
        - 591123512) ^ *(_DWORD *)(v78 + 4 * (v471 ^ 0xD5u));
  v139 = (v138 - ((2 * v138) & 0xBFCD7C7C) + 1608957502) ^ *(_DWORD *)&v79[4 * (v446 ^ 0xCB)];
  HIDWORD(v580) = v64 ^ 0x4909208B ^ (v139 - ((2 * v139) & 0x93FC1A44) - 906097374);
  v449 = v64 ^ v130;
  v451 = v64;
  LODWORD(v580) = v64 ^ v130 ^ 0x7AF90D47 ^ (HIDWORD(v580) - ((2 * HIDWORD(v580)) & 0xBCB784A6) + 1583071827);
  HIDWORD(v579) = v62 ^ 0x4018996 ^ v580;
  LODWORD(v78) = *(_DWORD *)(v59 - 132);
  v140 = (char *)*(&off_10025FA20 + (int)v78 - 69) - 8;
  v141 = (((v135 ^ 0x1B9155BD) >> 16)
        + 1926004682
        - ((2 * ((v135 ^ 0x1B9155BD) >> 16) + 160207960) & 0x80C033C)) ^ *(_DWORD *)&v140[4 * (((v135 ^ 0x1B9155BD) >> 16) ^ 0x2D)];
  v142 = ((BYTE2(v131) ^ 0x89) + 1926004682 - ((2 * (BYTE2(v131) ^ 0x89) + 160207960) & 0x80C033C)) ^ *(_DWORD *)&v140[4 * (BYTE2(v131) ^ 0xA4)];
  v143 = (char *)*(&off_10025FA20 + (int)(v78 ^ 0xB6)) - 8;
  LODWORD(v82) = (v141 - ((2 * v141) & 0x1F4DD7E4) + 262597618) ^ *(_DWORD *)&v143[4 * (BYTE1(v135) ^ 0x47)];
  v144 = (char *)*(&off_10025FA20 + (int)v78 + 10) - 4;
  v145 = (v142 - ((2 * v142) & 0xA4A3D44A) - 766383579) ^ *(_DWORD *)&v144[4 * (HIBYTE(v131) ^ 0xCC)];
  v146 = (char *)*(&off_10025FA20 + (int)v78 - 190) - 4;
  v147 = *(_DWORD *)&v146[4 * ((v136 ^ v130) ^ 0x53)];
  v441 = BYTE1(v136) ^ BYTE1(v130);
  v148 = *(_DWORD *)&v140[4 * (((v136 ^ v130) >> 16) ^ 0xAA)] ^ *(_DWORD *)&v144[4
                                                                                                * (((v136 ^ v130) >> 24) ^ 0x3E)] ^ ((((v136 ^ v130) >> 16) ^ 0x87) + 1926004682 - ((2 * (((v136 ^ v130) >> 16) ^ 0x87) + 160207960) & 0x80C033C)) ^ (181304767 * v147 - ((362609534 * v147 - 948913736) & 0xA4A3D44A) + 906643201);
  v149 = *(_DWORD *)&v146[4 * (v130 ^ 0x74)];
  v150 = ((~(362609534 * v149 + 124828088) | 0xE0B2281B) + 181304767 * v149 + 1935624399) ^ *(_DWORD *)&v143[4 * (BYTE1(v130) ^ 0x5A)];
  v574 = v150 - ((2 * v150) & 0xA4A3D44A);
  v569 = HIBYTE(v130) ^ 0xB2;
  v529 = BYTE2(v130);
  v589 = (BYTE2(v130) ^ 0x4C) + 1926004682 - ((2 * (BYTE2(v130) ^ 0x4C) + 160207960) & 0x80C033C);
  v543 = v132 ^ 0xB0;
  v560 = v145 - ((2 * v145) & 0x1F4DD7E4);
  v555 = v148 - ((2 * v148) & 0x1F4DD7E4);
  HIDWORD(v584) = ((_DWORD)v82 - ((2 * (_DWORD)v82) & 0xA4A3D44A) - 766383579) ^ *(_DWORD *)&v144[4
                                                                                                * ((v135 ^ 0x1B9155BD) >> 24)] ^ (181304767 * *(_DWORD *)&v146[4 * (v135 ^ 0x7D)] + 1673026780);
  v151 = *(_DWORD *)(v59 - 168);
  v152 = *(_DWORD *)&v140[4 * (((v151 ^ 0xE9B45E6C) >> 16) ^ 0xF5)] ^ ((((v151 ^ 0xE9B45E6C) >> 16) ^ 0xD8)
                                                                                      + 1926004682
                                                                                      - ((2
                                                                                        * (((v151 ^ 0xE9B45E6C) >> 16) ^ 0xD8)
                                                                                        + 160207960) & 0x80C033C));
  LODWORD(v82) = *(_DWORD *)(v59 - 128) ^ 0x31676F78;
  v153 = *(_DWORD *)&v140[4 * (BYTE2(v82) ^ 0x7B)] ^ ((BYTE2(v82) ^ 0x56)
                                                    + 1926004682
                                                    - ((2 * (BYTE2(v82) ^ 0x56) + 160207960) & 0x80C033C));
  LODWORD(v82) = (v153 - ((2 * v153) & 0xA4A3D44A) - 766383579) ^ *(_DWORD *)&v144[4 * (v82 >> 24)];
  v154 = *(_DWORD *)&v140[4 * (v516 ^ 0x93)] ^ ((v516 ^ 0xBE)
                                              + 1926004683
                                              + ((2 * (((v516 ^ 0xBE) + 44) & 0xFFFFFF9F ^ (v520 | 0x7FFFFFFE))) ^ 0x80C0003));
  v155 = (v154 - ((2 * v154) & 0x1F4DD7E4) + 262597618) ^ *(_DWORD *)&v143[4 * (v513 ^ 5)];
  v517 = (_DWORD)v82 - ((2 * (_DWORD)v82) & 0x1F4DD7E4);
  v156 = *(_DWORD *)(v59 - 160);
  LODWORD(v82) = *(_DWORD *)&v146[4 * (v156 ^ 0xDF)];
  v521 = v155 - ((2 * v155) & 0xA4A3D44A);
  v157 = ((v156 ^ 0x5A18571Fu) >> 16);
  v158 = *(_DWORD *)&v144[4 * ((v156 ^ 0x5A18571Fu) >> 24)] ^ *(_DWORD *)&v140[4 * (v157 ^ 0xEC)] ^ ((v157 ^ 0xC1) + 1926004683 + ((2 * (((v157 ^ 0xC1) + 44) & 0xFFFFFF9F ^ (v157 ^ 0xC1 | 0x7FFFFFFE))) ^ 0x80C0003)) ^ (181304767 * (_DWORD)v82 - ((362609534 * (_DWORD)v82 - 948913736) & 0xA4A3D44A) + 906643201);
  v514 = v158 - ((2 * v158) & 0x1F4DD7E4);
  v159 = *(_DWORD *)&v144[4 * ((v151 ^ 0xE9B45E6C) >> 24)] ^ (v152 - ((2 * v152) & 0xA4A3D44A) - 766383579);
  v510 = v159 - ((2 * v159) & 0x1F4DD7E4);
  LOWORD(v147) = v502 ^ 0x8EA4;
  v160 = v502 ^ 0x35C48CD5;
  v161 = *(_DWORD *)&v140[4 * (v128 ^ 0xDE)] ^ ((v128 ^ 0xF3)
                                              + 1926004683
                                              + ((2 * (((v128 ^ 0xF3) + 44) & 0xFFFFFF9F ^ (v128 ^ 0xF3 | 0x7FFFFFFE))) ^ 0x80C0003));
  v162 = *(_DWORD *)&v140[4 * (((v502 ^ 0x35C48CD5u) >> 16) ^ 0xFE)] ^ ((((v502 ^ 0x35C48CD5u) >> 16) ^ 0xD3)
                                                                                       + 1926004682
                                                                                       - ((2
                                                                                         * (((v502 ^ 0x35C48CD5u) >> 16) ^ 0xD3)
                                                                                         + 160207960) & 0x80C033C));
  v163 = 181304767 * *(_DWORD *)&v146[4 * (v136 ^ 0xC5)];
  v164 = (v161 - ((2 * v161) & 0xA4A3D44A) - 766383579) ^ *(_DWORD *)&v144[4 * (v508 ^ 0x36)];
  v165 = *(_DWORD *)(v59 - 176);
  v166 = *(_DWORD *)&v140[4 * (BYTE2(v165) ^ 0xB3)] ^ ((BYTE2(v165) ^ 0x9E)
                                                     + 1926004683
                                                     + ((2
                                                       * (((BYTE2(v165) ^ 0x9E) + 44) & 0xFFFFFF9F ^ (HIWORD(v165) | 0x7FFFFFFE))) ^ 0x80C0003));
  v167 = (v166 - ((2 * v166) & 0x1F4DD7E4) + 262597618) ^ *(_DWORD *)&v143[4 * (HIBYTE(v497) ^ 0x8B)];
  v503 = v164 - ((2 * v164) & 0x1F4DD7E4);
  v509 = v167 - ((2 * v167) & 0xA4A3D44A);
  v168 = *(_DWORD *)(v59 - 136) ^ 0x4BC73C3D;
  v169 = *(_DWORD *)&v143[4 * (BYTE1(v168) ^ 0x20)] ^ ((BYTE2(v168) ^ 0xD7)
                                                     + 1926004683
                                                     + ((2
                                                       * (((BYTE2(v168) ^ 0xD7) + 44) & 0xFFFFFF9F ^ (BYTE2(v168) ^ 0xD7 | 0x7FFFFFFE))) ^ 0x80C0003)) ^ *(_DWORD *)&v140[4 * (BYTE2(v168) ^ 0xFA)] ^ (v163 - 2 * ((v163 + 62414044) & 0xFA6EBF3 ^ v163 & 1) + 1935624398);
  v170 = (v162 - ((2 * v162) & 0xA4A3D44A) - 766383579) ^ *(_DWORD *)&v144[4 * HIBYTE(v160)] ^ (181304767
                                                                                              * *(_DWORD *)&v146[4 * (v147 ^ 0x99)]
                                                                                              + 1673026780);
  v474 = BYTE1(v147) ^ 0x14;
  v454 = v497 ^ 0xA3;
  v482 = v170 - ((2 * v170) & 0x1F4DD7E4);
  v498 = v169 - ((2 * v169) & 0xA4A3D44A);
  v171 = *(_DWORD *)(v59 - 192);
  v463 = BYTE1(v171) ^ 0xF5;
  v476 = v469 ^ 0x2BEAE26B;
  v172 = ((v469 ^ 0x2BEAE26B) >> 16);
  v173 = *(_DWORD *)&v140[4 * (v172 ^ 0xEC)] ^ ((v172 ^ 0xC1)
                                              + 1926004683
                                              + ((2 * (((v172 ^ 0xC1) + 44) & 0xFFFFFF9F ^ (v172 ^ 0xC1 | 0x7FFFFFFE))) ^ 0x80C0003)) ^ (181304767 * *(_DWORD *)&v146[4 * (v469 ^ 0x1E)] + 1673026780);
  v174 = (v173 - ((2 * v173) & 0x1F4DD7E4) + 262597618) ^ *(_DWORD *)&v143[4 * (BYTE1(v469) ^ 8)];
  v175 = *(_DWORD *)&v140[4 * (v499 ^ 0xD7)] ^ ((v499 ^ 0xFA)
                                              + 1926004683
                                              + ((2 * (((v499 ^ 0xFA) + 44) & 0xFFFFFF9F ^ (HIWORD(v485) | 0x7FFFFFFE))) ^ 0x80C0003));
  v176 = *(_DWORD *)&v146[4 * (v465 ^ 0x55)];
  v500 = v174 - ((2 * v174) & 0xA4A3D44A);
  v445 = BYTE2(v171) ^ 0xF7;
  v486 = (BYTE2(v171) ^ 0xA7)
       + 1926004683
       + ((2 * (((BYTE2(v171) ^ 0xA7) + 44) & 0xFFFFFF9F ^ (HIWORD(v171) ^ 0xBAF7 | 0x7FFFFFFE))) ^ 0x80C0003);
  v177 = (v175 - ((2 * v175) & 0x1F4DD7E4) + 262597618) ^ *(_DWORD *)&v143[4 * (v578 ^ 0xD0)] ^ (181304767
                                                                                               * *(_DWORD *)&v146[4 * (v505 ^ 0xFA)]
                                                                                               + 1673026780);
  v470 = v177 - ((2 * v177) & 0xA4A3D44A);
  v178 = *(_DWORD *)(v59 - 184);
  v179 = (181304767 * v176 - ((362609534 * v176 - 948913736) & 0xA4A3D44A) + 906643201) ^ ((BYTE2(v178) ^ 0xBA)
                                                                                         + 1926004682
                                                                                         - ((2 * (BYTE2(v178) ^ 0xBA)
                                                                                           + 160207960) & 0x80C033C)) ^ *(_DWORD *)&v144[4 * (HIBYTE(v178) ^ 0x2F)] ^ *(_DWORD *)&v140[4 * (BYTE2(v178) ^ 0x97)];
  v466 = v179 - ((2 * v179) & 0x1F4DD7E4);
  v180 = *(_DWORD *)&v140[4 * (BYTE2(v443) ^ 0xCB)] ^ ((BYTE2(v443) ^ 0xE6)
                                                     + 1926004683
                                                     + ((2
                                                       * (((BYTE2(v443) ^ 0xE6) + 44) & 0xFFFFFF9F ^ (HIWORD(v443) | 0x7FFFFFFE))) ^ 0x80C0003));
  v181 = *(_DWORD *)&v140[4 * (BYTE2(*(_DWORD *)(v59 - 200)) ^ 0x56)] ^ ((BYTE2(*(_DWORD *)(v59 - 200)) ^ 0x7B)
                                                                                        + 1926004682
                                                                                        - ((2
                                                                                          * (BYTE2(*(_DWORD *)(v59 - 200)) ^ 0x7B)
                                                                                          + 160207960) & 0x80C033C));
  v182 = (v180 - ((2 * v180) & 0x1F4DD7E4) + 262597618) ^ *(_DWORD *)&v143[4 * (BYTE1(v443) ^ 0x28)] ^ (181304767 * *(_DWORD *)&v146[4 * (v443 ^ 0xD9)] + 1673026780);
  v183 = 181304767 * *(_DWORD *)&v146[4 * (v460 ^ 0xFB)];
  LODWORD(v82) = (v183 - 2 * ((v183 + 62414044) & 0xFA6EBF3 ^ v183 & 1) + 1935624398) ^ *(_DWORD *)&v143[4 * (BYTE1(v460) ^ 0xEF)];
  LODWORD(v444) = v182 - ((2 * v182) & 0xA4A3D44A);
  LODWORD(v442) = (_DWORD)v82 - ((2 * (_DWORD)v82) & 0xA4A3D44A);
  v184 = (v181 - ((2 * v181) & 0xA4A3D44A) - 766383579) ^ *(_DWORD *)&v144[4 * (HIBYTE(*(_DWORD *)(v59 - 200)) ^ 0xD9)] ^ (181304767 * *(_DWORD *)&v146[4 * (*(_DWORD *)(v59 - 200) ^ 0x79)] + 1673026780);
  v185 = *(_DWORD *)&v140[4 * (v479 ^ 0x86)] ^ ((v479 ^ 0xAB)
                                              + 1926004683
                                              + ((2 * (((v479 ^ 0xAB) + 44) & 0xFFFFFF9F ^ (v479 ^ 0xAB | 0x7FFFFFFE))) ^ 0x80C0003));
  v186 = (v185 - ((2 * v185) & 0xA4A3D44A) - 766383579) ^ *(_DWORD *)&v144[4 * v494];
  v438 = v487 ^ 0xEE;
  v488 = v186 - ((2 * v186) & 0x1F4DD7E4);
  v480 = v184 - ((2 * v184) & 0x1F4DD7E4);
  v491 = v493;
  v506 = (v491 ^ 0x65) + 1926004682 - ((2 * (v491 ^ 0x65) + 160207960) & 0x80C033C);
  LODWORD(v579) = (HIDWORD(v579) + 351737562 + (~(2 * HIDWORD(v579)) | 0xD611D24D)) ^ v436;
  v187 = *(_DWORD *)&v140[4 * (v446 ^ 0x8B)] ^ ((v446 ^ 0xA6)
                                              + 1926004683
                                              + ((2 * (((v446 ^ 0xA6) + 44) & 0xFFFFFF9F ^ (HIWORD(v436) | 0x7FFFFFFE))) ^ 0x80C0003));
  v447 = BYTE2(*(_DWORD *)(v59 - 140)) ^ 0x63;
  v495 = (v447 ^ 0xEC)
       + 1926004683
       + ((2 * (((v447 ^ 0xEC) + 44) & 0xFFFFFF9F ^ (HIWORD(*(_DWORD *)(v59 - 140)) ^ 0x4263 | 0x7FFFFFFE))) ^ 0x80C0003);
  v188 = v455 ^ 0x22;
  v189 = *(_DWORD *)&v140[4 * (BYTE2(v451) ^ 0xE8)] ^ ((BYTE2(v451) ^ 0xC5)
                                                     + 1926004683
                                                     + ((2
                                                       * (((BYTE2(v451) ^ 0xC5) + 44) & 0xFFFFFF9F ^ (BYTE2(v451) ^ 0xC5 | 0x7FFFFFFE))) ^ 0x80C0003));
  HIDWORD(v442) = v441 ^ 0x8E;
  v190 = (181304767 * *(_DWORD *)&v146[4 * (v451 ^ 0xCA)] + 1673026780) ^ *(_DWORD *)&v144[4 * (HIBYTE(v451) ^ 0x8E)] ^ (v189 - ((2 * v189) & 0xA4A3D44A) - 766383579);
  v456 = v449 ^ 0x44039AAA;
  LODWORD(v82) = (181304767 * *(_DWORD *)&v146[4 * (v449 ^ 0xDB)] + 1673026780) ^ (((v449 ^ 0x44039AAAu) >> 16)
                                                                                                  + 1926004682
                                                                                                  - ((2 * ((v449 ^ 0x44039AAAu) >> 16) + 160207960) & 0x80C033C)) ^ *(_DWORD *)&v140[4 * (((v449 ^ 0x44039AAAu) >> 16) ^ 0x2D)];
  v440 = BYTE1(v451) ^ 0x16;
  v452 = v190 - ((2 * v190) & 0x1F4DD7E4);
  LODWORD(v82) = ((_DWORD)v82 - ((2 * (_DWORD)v82) & 0x1F4DD7E4) + 262597618) ^ *(_DWORD *)&v143[4
                                                                                               * (BYTE1(v449) ^ 0xC0)];
  v191 = *(_DWORD *)&v144[4 * v188] ^ (181304767 * *(_DWORD *)&v146[4 * (v471 ^ 0xFE)] + 1673026780) ^ (v187 - ((2 * v187) & 0xA4A3D44A) - 766383579);
  v472 = (_DWORD)v82 - ((2 * (_DWORD)v82) & 0xA4A3D44A);
  v450 = v191 - ((2 * v191) & 0x1F4DD7E4);
  v192 = *(_DWORD *)&v146[4 * (v522 ^ 0xEC)];
  v193 = *(_DWORD *)&v140[4 * (v558 ^ 0x32)] ^ ((v558 ^ 0x1F)
                                              + 1926004683
                                              + ((2 * (((v558 ^ 0x1F) + 44) & 0xFFFFFF9F ^ (v558 ^ 0x1F | 0x7FFFFFFE))) ^ 0x80C0003));
  LODWORD(v82) = *(_DWORD *)&v146[4 * (v545 ^ 0xE6)];
  v194 = *(_DWORD *)&v144[4 * (HIBYTE(v522) ^ 0xCA)] ^ *(_DWORD *)&v140[4 * (BYTE2(v522) ^ 2)] ^ ((BYTE2(v522) ^ 0x2F)
                                                                                                + 1926004683
                                                                                                + ((2
                                                                                                  * (((BYTE2(v522) ^ 0x2F) + 44) & 0xFFFFFF9F ^ (HIWORD(v522) ^ 0x45E5 | 0x7FFFFFFE))) ^ 0x80C0003)) ^ (181304767 * v192 - ((362609534 * v192 - 948913736) & 0xA4A3D44A) + 906643201);
  v195 = (v193 - ((2 * v193) & 0x1F4DD7E4) + 262597618) ^ *(_DWORD *)&v143[4 * (v571 ^ 0x8C)] ^ (181304767
                                                                                               * *(_DWORD *)&v146[4 * (v567 ^ 0xD9)]
                                                                                               + 1673026780);
  LODWORD(v82) = *(_DWORD *)&v144[4 * ((v545 ^ 0x49A657C7u) >> 24)] ^ ((((v545 ^ 0x49A657C7u) >> 16) ^ 0x35)
                                                                     + 1926004682
                                                                     - ((2
                                                                       * (((v545 ^ 0x49A657C7u) >> 16) ^ 0x35)
                                                                       + 160207960) & 0x80C033C)) ^ *(_DWORD *)&v140[4 * (((v545 ^ 0x49A657C7u) >> 16) ^ 0x18)] ^ ((~(362609534 * (_DWORD)v82 - 948913736) | 0x5B5C2BB5) + 181304767 * (_DWORD)v82 + 906643202);
  v196 = *(_DWORD *)(v59 - 152);
  v197 = *(_DWORD *)&v140[4 * (((v196 ^ 0xDF88996C) >> 16) ^ 0x2D)] ^ (((v196 ^ 0xDF88996C) >> 16)
                                                                                      + 1926004683
                                                                                      + ((2
                                                                                        * ((((v196 ^ 0xDF88996C) >> 16)
                                                                                          + 44) & 0xFFFFFF9F ^ (((v196 ^ 0xDF88996C) >> 16) | 0x7FFFFFFE))) ^ 0x80C0003));
  v572 = v583 ^ 0xAA;
  LODWORD(v584) = (v194 - ((2 * v194) & 0x1F4DD7E4) + 262597618) ^ *(_DWORD *)&v143[4 * (BYTE1(v522) ^ 0x2E)];
  v568 = v195 - ((2 * v195) & 0xA4A3D44A);
  v523 = BYTE1(v545) ^ 0xB9;
  v198 = (v197 - ((2 * v197) & 0xA4A3D44A) - 766383579) ^ *(_DWORD *)&v144[4 * ((v196 ^ 0xDF88996C) >> 24)] ^ (181304767 * *(_DWORD *)&v146[4 * (v196 ^ 0xFC)] + 1673026780);
  v559 = (_DWORD)v82 - ((2 * (_DWORD)v82) & 0x1F4DD7E4);
  v546 = v198 - ((2 * v198) & 0x1F4DD7E4);
  v199 = *(_DWORD *)&v140[4 * (v532 ^ 0xC1)] ^ ((v532 ^ 0xEC)
                                              + 1926004683
                                              + ((2 * (v532 ^ 0xEC) + 88) & 0x33C ^ 0xF7F3FFFF));
  v200 = (v199 - ((2 * v199) & 0x1F4DD7E4) + 262597618) ^ *(_DWORD *)&v143[4
                                                                         * ((v540 - ((2 * v535) & 0x166) + 179) ^ 0x54)] ^ (181304767 * *(_DWORD *)&v146[4 * (v564 ^ 0xE2)] + 1673026780);
  v201 = *(_DWORD *)&v146[4 * (v549 ^ 0xE4)];
  v533 = BYTE1(v553) ^ 0x77;
  v202 = (181304767 * v201 - ((362609534 * v201 - 948913736) & 0xA4A3D44A) + 906643201) ^ *(_DWORD *)&v144[4 * (HIBYTE(v549) ^ 0x69)];
  v434 = ((unsigned __int16)(v549 ^ 0xB2F5) >> 8) ^ 0xD;
  v565 = v200 - ((2 * v200) & 0xA4A3D44A);
  v437 = v202 - ((2 * v202) & 0x1F4DD7E4);
  v536 = v526 ^ 0xEEA2BFA8;
  v203 = *(_DWORD *)&v140[4 * (((v526 ^ 0xEEA2BFA8) >> 16) ^ 0x86)] ^ ((((v526 ^ 0xEEA2BFA8) >> 16) ^ 0xAB)
                                                                                      + 1926004682
                                                                                      - ((2
                                                                                        * (((v526 ^ 0xEEA2BFA8) >> 16) ^ 0xAB)
                                                                                        + 160207960) & 0x80C033C));
  v204 = (181304767 * *(_DWORD *)&v146[4 * (v526 ^ 0x68)] + 1673026780) ^ *(_DWORD *)&v143[4 * (BYTE1(v526) ^ 0x55)] ^ (v203 - ((2 * v203) & 0x1F4DD7E4) + 262597618);
  v527 = v553 ^ 0x231B9DB5;
  v205 = ((v553 ^ 0x231B9DB5) >> 16);
  v432 = v205 ^ 0xEC;
  v541 = (v205 ^ 0xC1) + 1926004683 + ((2 * (v205 ^ 0xC1) + 88) & 0x33C ^ 0xF7F3FFFF);
  HIDWORD(v433) = v204 - ((2 * v204) & 0xA4A3D44A);
  v430 = BYTE2(v549) ^ 0x55;
  v539 = (BYTE2(v549) ^ 0x78) + 1926004682 - ((2 * (BYTE2(v549) ^ 0x78) + 160207960) & 0x80C033C);
  LODWORD(v79) = v594 ^ 0x982356D6;
  LODWORD(v433) = v587 ^ 0x7B;
  LODWORD(v68) = *(_DWORD *)&v146[4 * (v585 ^ 0x74)];
  v206 = *(_DWORD *)(v59 - 128);
  v207 = v171;
  LODWORD(v78) = *(_DWORD *)&v146[4 * (v598 ^ 0x97)];
  v208 = *(_DWORD *)(v59 - 140);
  v209 = *(_DWORD *)&v146[4 * (v553 ^ 0x75)];
  v210 = *(_DWORD *)&v146[4 * (v594 ^ 0xEF)];
  v554 = 181304767 * *(_DWORD *)&v146[4 * (v131 ^ 0x60)] + 1673026780;
  v601 = 181304767 * *(_DWORD *)&v146[4 * (v600 ^ 0xFB)] + 1673026780;
  v595 = 181304767 * *(_DWORD *)&v146[4 * (v206 ^ 0xB8)] + 1673026780;
  v599 = 181304767 * *(_DWORD *)&v146[4 * (v151 ^ 0xAC)] + 1673026780;
  v550 = 181304767 * *(_DWORD *)&v146[4 * v454] + 1673026780;
  v551 = 181304767 * *(_DWORD *)&v146[4 * (v576 ^ 0xF0)] + 1673026780;
  v211 = 181304767 * *(_DWORD *)&v146[4 * (v171 ^ 0x57)] + 1673026780;
  v588 = 181304767 * v78 + 1673026780;
  HIDWORD(v453) = 181304767 * *(_DWORD *)&v146[4 * (v208 ^ 0x78)] + 1673026780;
  v459 = 181304767 * v209 + 1673026780;
  v586 = 181304767 * v210 + 1673026780;
  v212 = (181304767 * (_DWORD)v68 - ((362609534 * (_DWORD)v68 - 948913736) & 0xA4A3D44A) + 906643201) ^ *(_DWORD *)&v144[4 * v433];
  v213 = *(_DWORD *)&v140[4 * (BYTE2(v602) ^ 0xA8)] ^ ((BYTE2(v602) ^ 0x85)
                                                     + 1926004683
                                                     + ((2
                                                       * (((BYTE2(v602) ^ 0x85) + 44) & 0xFFFFFF9F ^ (BYTE2(v602) ^ 0x85 | 0x7FFFFFFE))) ^ 0x80C0003)) ^ (181304767 * *(_DWORD *)&v146[4 * (v602 ^ 0x51)] + 1673026780);
  v214 = (v213 - ((2 * v213) & 0x1F4DD7E4) + 262597618) ^ *(_DWORD *)&v143[4 * (BYTE1(v602) ^ 0x2B)];
  LODWORD(v82) = *(_DWORD *)&v140[4 * (BYTE2(v79) ^ 0x3C)] ^ ((BYTE2(v79) ^ 0x11)
                                                            + 1926004683
                                                            + ((2
                                                              * (((BYTE2(v79) ^ 0x11) + 44) & 0xFFFFFF9F ^ (BYTE2(v79) ^ 0x11 | 0x7FFFFFFE))) ^ 0x80C0003));
  v215 = (181304767 * *(_DWORD *)&v146[4 * (v603 ^ 0x2A)] + 1673026780) ^ ((BYTE2(v603) ^ 0x37)
                                                                                          + 1926004683
                                                                                          + ((2 * (BYTE2(v603) ^ 0x37)
                                                                                            + 88) & 0x33C ^ 0xF7F3FFFF)) ^ *(_DWORD *)&v140[4 * (BYTE2(v603) ^ 0x1A)];
  v216 = v212 - ((2 * v212) & 0x1F4DD7E4);
  LODWORD(v433) = *(_DWORD *)&v140[4 * (v529 ^ 0x61)];
  HIDWORD(v444) = *(_DWORD *)&v140[4 * (v445 ^ 0x7D)];
  v217 = (v215 - ((2 * v215) & 0xA4A3D44A) - 766383579) ^ *(_DWORD *)&v144[4 * (HIBYTE(v603) ^ 0xF9)];
  v530 = *(_DWORD *)&v140[4 * (v491 ^ 0x48)];
  LODWORD(v431) = *(_DWORD *)&v140[4 * (BYTE2(v208) ^ 0xA2)];
  LODWORD(v448) = *(_DWORD *)&v140[4 * v432];
  v492 = *(_DWORD *)&v140[4 * v430];
  LODWORD(v68) = *(_DWORD *)(v59 - 232);
  *(_DWORD *)(v59 - 232) = *(_DWORD *)&v140[4 * (v68 ^ 0x1A)];
  LODWORD(v140) = ((*(_DWORD *)(v59 - 256) >> 15) & 0x58 ^ 0x48) + (v68 ^ 0x4C64A1B);
  HIDWORD(v431) = *(_DWORD *)&v143[4 * v543];
  v544 = *(_DWORD *)&v143[4 * HIDWORD(v442)];
  *(_DWORD *)(v59 - 256) = *(_DWORD *)&v143[4 * (BYTE1(v206) ^ 0x85)];
  *(_DWORD *)(v59 - 160) = *(_DWORD *)&v143[4 * (BYTE1(*(_DWORD *)(v59 - 160)) ^ 0xBD)];
  *(_DWORD *)(v59 - 168) = *(_DWORD *)&v143[4 * (BYTE1(*(_DWORD *)(v59 - 168)) ^ 0xB4)];
  HIDWORD(v429) = *(_DWORD *)&v143[4 * (v596 ^ 0x1A)];
  LODWORD(v429) = *(_DWORD *)&v143[4 * v474];
  v597 = *(_DWORD *)&v143[4 * v463];
  *(_DWORD *)(v59 - 184) = *(_DWORD *)&v143[4 * (BYTE1(*(_DWORD *)(v59 - 184)) ^ 0xD6)];
  v475 = *(_DWORD *)&v143[4 * v438];
  HIDWORD(v442) = *(_DWORD *)&v143[4 * (BYTE1(*(_DWORD *)(v59 - 200)) ^ 0xD7)];
  HIDWORD(v428) = *(_DWORD *)&v143[4 * (BYTE1(v208) ^ 0x76)];
  v218 = *(_DWORD *)&v143[4 * v440];
  v464 = (_DWORD)v140
       + 1845900703
       + ((2 * ((unsigned __int16)v140 & 0x19F ^ (v68 ^ 0x4C64A1B | 0x7FFFFFFE))) ^ 0x80C0003);
  LODWORD(v428) = *(_DWORD *)&v143[4 * (v591 ^ 0xBE)];
  *(_DWORD *)(v59 - 200) = *(_DWORD *)&v143[4 * v523];
  *(_DWORD *)(v59 - 152) = *(_DWORD *)&v143[4 * (BYTE1(*(_DWORD *)(v59 - 152)) ^ 0x19)];
  v219 = v214 - ((2 * v214) & 0xA4A3D44A);
  v524 = *(_DWORD *)&v143[4 * v533];
  v534 = *(_DWORD *)&v143[4 * v434];
  *(_DWORD *)(v59 - 220) = *(_DWORD *)&v143[4 * (*(_DWORD *)(v59 - 220) ^ 0x84)];
  HIDWORD(v439) = *(_DWORD *)&v143[4 * (BYTE1(v603) ^ 0x2E)];
  v220 = *(_DWORD *)&v143[4 * (BYTE1(*(_DWORD *)(v59 - 248)) ^ 0xC8)];
  v561 = v560 + 262597618;
  v556 = v555 + 262597618;
  *(_DWORD *)(v59 - 248) = v517 + 262597618;
  LODWORD(v439) = v514 + 262597618;
  v604 = v510 + 262597618;
  LODWORD(v435) = v503 + 262597618;
  HIDWORD(v427) = v482 + 262597618;
  v592 = v466 + 262597618;
  v518 = v488 + 262597618;
  v467 = v480 + 262597618;
  v221 = v452 + 262597618;
  LODWORD(v426) = v450 + 262597618;
  v504 = v559 + 262597618;
  v489 = v546 + 262597618;
  LODWORD(v453) = v437 + 262597618;
  v511 = v216 + 262597618;
  v515 = v217 - ((2 * v217) & 0x1F4DD7E4) + 262597618;
  LODWORD(v427) = *(_DWORD *)&v144[4 * v569];
  *(_DWORD *)(v59 - 216) = *(_DWORD *)&v144[4 * (*(_DWORD *)(v59 - 216) ^ 7)];
  HIDWORD(v426) = *(_DWORD *)&v144[4 * (HIBYTE(*(_DWORD *)(v59 - 176)) ^ 0x19)];
  v547 = *(_DWORD *)&v144[4 * (HIBYTE(*(_DWORD *)(v59 - 136)) ^ 0x3C)];
  v483 = *(_DWORD *)&v144[4 * (HIBYTE(v207) ^ 0xB8)];
  v481 = *(_DWORD *)&v144[4 * HIBYTE(v476)];
  *(_DWORD *)(v59 - 208) = *(_DWORD *)&v144[4 * (*(_DWORD *)(v59 - 208) ^ 0x4B)];
  HIDWORD(v448) = *(_DWORD *)&v144[4 * (HIBYTE(v563) ^ 0xB9)];
  HIDWORD(v435) = *(_DWORD *)&v144[4 * (HIBYTE(v460) ^ 0xE8)];
  v222 = v220 ^ ((_DWORD)v82 - ((2 * (_DWORD)v82) & 0x1F4DD7E4) + 262597618);
  v223 = *(_DWORD *)&v144[4 * (HIBYTE(v208) ^ 0xA6)];
  v224 = *(_DWORD *)&v144[4 * HIBYTE(v456)];
  v477 = *(_DWORD *)&v144[4 * v572];
  v225 = HIBYTE(v536);
  *(_DWORD *)(v59 - 192) = *(_DWORD *)&v144[4 * HIBYTE(v527)];
  v537 = *(_DWORD *)&v144[4 * (*(_DWORD *)(v59 - 240) ^ 0x38)];
  v528 = *(_DWORD *)&v144[4 * v225];
  v457 = *(_DWORD *)&v144[4 * (HIBYTE(v602) ^ 0x4B)];
  *(_DWORD *)(v59 - 176) = *(_DWORD *)&v144[4 * (v79 >> 24)];
  v226 = v574 - 766383579;
  v461 = v521 - 766383579;
  *(_DWORD *)(v59 - 240) = v500 - 766383579;
  v227 = v568 - 766383579;
  v228 = v565 - 766383579;
  v229 = v219 - 766383579;
  v230 = v222 - ((2 * v222) & 0xA4A3D44A) - 766383579;
  v231 = HIDWORD(v584) ^ v584 ^ 0x6285F181;
  v232 = v221 ^ v218 ^ v231;
  v233 = *(_DWORD *)(v59 - 132);
  v234 = (char *)*(&off_10025FA20 + (v233 ^ 0x19)) - 4;
  v235 = (char *)*(&off_10025FA20 + v233 - 159) - 4;
  v236 = (char *)*(&off_10025FA20 + (v233 ^ 0xDC)) - 12;
  v237 = (char *)*(&off_10025FA20 + (v233 | 2)) - 4;
  v238 = *(unsigned __int8 *)(v59 - 112);
  v239 = (v237[*(unsigned __int8 *)(v59 - 109) ^ 0x41] ^ 0x56) & 0xFF00FFFF | (((v234[*(unsigned __int8 *)(v59 - 111) ^ 0x40] + 98) ^ 0x5A) << 16) | ((v236[*(unsigned __int8 *)(v59 - 110) ^ 0xBBLL] ^ 0xA8) << 8) | ((v235[v238 ^ 0x1E] ^ ((_DWORD)v238 - ((2 * (_DWORD)v238) & 0x55555555) + 42) ^ 0x84) << 24);
  v573 = v236;
  v575 = v235;
  v570 = v237;
  v240 = (v237[*(unsigned __int8 *)(v59 - 105) ^ 0xE4] ^ 0x60) & 0xFF00FFFF | ((v235[*(unsigned __int8 *)(v59 - 108) ^ 0x3ELL] ^ (*(unsigned __int8 *)(v59 - 108) - ((2 * *(unsigned __int8 *)(v59 - 108)) & 0x54) + 42) ^ 0xFFFFFFE1) << 24) | (((v234[*(unsigned __int8 *)(v59 - 107) ^ 0x27] + 98) ^ 0x96) << 16) | ((v236[*(unsigned __int8 *)(v59 - 106) ^ 9] ^ 0xAD) << 8);
  v577 = v234;
  v241 = (v237[*(unsigned __int8 *)(v59 - 101) ^ 0xF2] ^ 0xD9) & 0xFF00FFFF | ((v235[*(unsigned __int8 *)(v59 - 104) ^ 0xD3] ^ (*(unsigned __int8 *)(v59 - 104) - ((2 * *(unsigned __int8 *)(v59 - 104)) & 0x5555) + 42) ^ 0xE0) << 24) | ((v236[*(unsigned __int8 *)(v59 - 102) ^ 0xBELL] ^ 0xA) << 8) & 0xFF00FFFF | (((v234[*(unsigned __int8 *)(v59 - 103) ^ 0xE9] + 98) ^ 0x8A) << 16);
  v242 = v232 ^ 0x2497E332;
  if ((v232 & 0x80) != 0)
    v243 = -128;
  else
    v243 = 128;
  *(_DWORD *)(v59 - 128) = (v237[*(unsigned __int8 *)(v59 - 97) ^ 0x74] ^ 0xF1 | (((v234[*(unsigned __int8 *)(v59 - 99) ^ 0xF3] + 98) ^ 2) << 16) | ((v236[*(unsigned __int8 *)(v59 - 98) ^ 0x20] ^ 0x42) << 8) | ((v235[*(unsigned __int8 *)(v59 - 100) ^ 0xF3] ^ (*(unsigned __int8 *)(v59 - 100) - ((2 * *(unsigned __int8 *)(v59 - 100)) & 0x5555) + 42) ^ 0x85) << 24)) ^ 0xB2752A7C;
  *(_DWORD *)(v59 - 132) = v239 ^ 0x20B69626;
  *(_DWORD *)(v59 - 136) = v240 ^ 0x20955490;
  *(_DWORD *)(v59 - 140) = v241 ^ 0xAA7DEC48;
  HIDWORD(v566) = v426 ^ v428;
  LODWORD(v566) = v223 ^ HIDWORD(v428) ^ v431 ^ v495 ^ HIDWORD(v453);
  HIDWORD(v562) = (v472 - 766383579) ^ v224;
  LODWORD(v562) = v554 ^ HIDWORD(v431) ^ v561;
  HIDWORD(v557) = v556 ^ v544;
  LODWORD(v557) = v427 ^ v589 ^ v433 ^ v226;
  HIDWORD(v552) = HIDWORD(v427) ^ v429;
  LODWORD(v552) = v435 ^ HIDWORD(v429) ^ v551;
  HIDWORD(v548) = (v509 - 766383579) ^ HIDWORD(v426) ^ v550;
  LODWORD(v548) = (v498 - 766383579) ^ v547;
  HIDWORD(v542) = v524 ^ *(_DWORD *)(v59 - 192) ^ v541 ^ v448 ^ v459;
  LODWORD(v542) = v534 ^ v539 ^ v492 ^ v453;
  HIDWORD(v538) = (HIDWORD(v433) - 766383579) ^ v528;
  LODWORD(v538) = v228 ^ v537;
  HIDWORD(v531) = v467 ^ HIDWORD(v442);
  LODWORD(v531) = HIDWORD(v435) ^ v506 ^ v530 ^ (v442 - 766383579);
  HIDWORD(v525) = (v444 - 766383579) ^ HIDWORD(v448);
  LODWORD(v525) = v588 ^ v475 ^ v518;
  HIDWORD(v519) = v586 ^ *(_DWORD *)(v59 - 176) ^ v230;
  LODWORD(v519) = v515 ^ HIDWORD(v439);
  HIDWORD(v512) = v229 ^ v457;
  LODWORD(v512) = *(_DWORD *)(v59 - 220) ^ v464 ^ *(_DWORD *)(v59 - 232) ^ v511;
  HIDWORD(v507) = v227 ^ v477;
  LODWORD(v507) = *(_DWORD *)(v59 - 200) ^ v504;
  HIDWORD(v501) = v489 ^ *(_DWORD *)(v59 - 152);
  LODWORD(v501) = v439 ^ *(_DWORD *)(v59 - 160);
  HIDWORD(v496) = *(_DWORD *)(v59 - 248) ^ *(_DWORD *)(v59 - 256) ^ v595;
  LODWORD(v496) = v599 ^ *(_DWORD *)(v59 - 168) ^ v604;
  HIDWORD(v490) = v601 ^ *(_DWORD *)(v59 - 216) ^ v461;
  LODWORD(v490) = v592 ^ *(_DWORD *)(v59 - 184);
  HIDWORD(v484) = v597 ^ v483 ^ HIDWORD(v444) ^ v486 ^ v211;
  LODWORD(v484) = (v470 - 766383579) ^ *(_DWORD *)(v59 - 208);
  HIDWORD(v478) = *(_DWORD *)(v59 - 240) ^ v481;
  LODWORD(v478) = (v243 + v242) ^ v231;
  v244 = *(_DWORD *)(v59 - 120);
  HIDWORD(v473) = v244 ^ 0x471;
  LODWORD(v473) = v244 ^ 0x413;
  HIDWORD(v468) = v244 ^ 0x4B3;
  LODWORD(v468) = v244 ^ 0x43F;
  HIDWORD(v462) = v244 ^ 0x4C0;
  LODWORD(v462) = v244 ^ 0x484;
  HIDWORD(v458) = v244 ^ 0x481;
  LODWORD(v458) = v244 ^ 0x4A3;
  v245 = v244;
  *(_QWORD *)(v59 - 184) = 13;
  v246 = v234[a54[13] ^ 0xF3] + 98;
  v247 = ((v244 ^ 0xD3) + 780051030) ^ 0x2E7EA754u;
  *(_QWORD *)(v59 - 152) = v247;
  v248 = (v246 ^ 2) << 16;
  v249 = a54[v247] ^ 0x57;
  *(_QWORD *)(v59 - 160) = 10;
  v250 = a54[10] ^ 0xB6;
  v251 = ((v577[v249] + 98) ^ 0xF6) << 16;
  *(_QWORD *)(v59 - 192) = 4;
  v252 = (v573[v250] ^ 0x27) << 8;
  v253 = a54[4];
  v254 = v235[v253 ^ 0x9A];
  *(_QWORD *)(v59 - 232) = 7;
  LODWORD(v253) = v254 ^ (v253 - ((2 * v253) & 0x54) + 42) ^ 0xFFFFFFCF;
  v255 = a54[7] ^ 0xD6;
  *(_QWORD *)(v59 - 216) = 2;
  LODWORD(v253) = v570[v255] ^ 0x33 | ((_DWORD)v253 << 24);
  LODWORD(v255) = v573[a54[2]] ^ 0x35;
  *(_QWORD *)(v59 - 176) = 3;
  v256 = v251 | ((_DWORD)v255 << 8);
  LODWORD(v255) = v570[a54[3] ^ 0x74];
  *(_QWORD *)(v59 - 168) = 12;
  v257 = v256 | v255 ^ 0xF1;
  LODWORD(v255) = v235[a54[12] ^ 0x6ELL] ^ (a54[12] - ((2 * a54[12]) & 0x5555) + 42) ^ 0x51;
  *(_QWORD *)(v59 - 208) = 0;
  v258 = v257 | ((v235[*a54 ^ 0x15] ^ (*a54 + (~(2 * *a54) | 0xAB) + 43) ^ 0xAE) << 24);
  v259 = v252 | ((v235[a54[8] ^ 0x46] ^ (a54[8] - ((2 * a54[8]) & 0x54) + 42) ^ 0xFFFFFFE7) << 24);
  *(_QWORD *)(v59 - 200) = 14;
  v260 = v573[a54[14] ^ 0xD5] ^ 0xBD;
  *(_QWORD *)(v59 - 240) = 5;
  *(_QWORD *)(v59 - 256) = 11;
  *(_DWORD *)(v59 - 220) = 780052319;
  LODWORD(v253) = v253 & 0xFF00FFFF | (((v577[a54[5] ^ 0x9DLL] + 98) ^ 0xF7) << 16);
  v261 = a54[6] ^ 0xA4;
  v262 = (v570[a54[11] ^ 0xC2] ^ 0xD4 | v259) & 0xFF00FFFF | (((v577[a54[9] ^ 0x3ELL]
                                                                                                  + 98) ^ 0xDF) << 16);
  *(_QWORD *)(v59 - 248) = 15;
  v593 = v253 | ((v573[v261] ^ 0xED) << 8);
  v263 = (char *)*(&off_10025FA20 + v245 - 830) - 12;
  LODWORD(v253) = *(_DWORD *)&v263[4 * (((unsigned __int16)(v593 ^ v580) >> 8) ^ 0x21)] ^ ((((unsigned __int16)(v593 ^ v580) >> 8) ^ 0x4C) + 1520843255 - ((2 * (((v593 ^ v580) >> 8) ^ 0xB71C4C)) & 0x1EE));
  LODWORD(v261) = v253 + 513343004 - ((2 * v253) & 0x3D31FC38);
  v264 = (char *)*(&off_10025FA20 + SHIDWORD(v473)) - 8;
  v265 = v258 ^ HIDWORD(v580) ^ 0x730032AA;
  v266 = v261 ^ *(_DWORD *)&v264[4 * ((v258 ^ BYTE4(v580)) ^ 0xAA)];
  v590 = v570[a54[15] ^ 0x47] ^ 0xF1 | v248 | ((_DWORD)v255 << 24) | (v260 << 8);
  LODWORD(v261) = *(_DWORD *)&v263[4 * (((unsigned __int16)(v579 ^ v590) >> 8) ^ 0x1A)] ^ ((((unsigned __int16)(v579 ^ v590) >> 8) ^ 0x77) + 1520843255 - ((2 * (((v579 ^ v590) >> 8) ^ 0x420777)) & 0x1EE));
  v267 = v261 + 2111680599 - ((2 * v261) & 0xFBBB60AE);
  v268 = (char *)*(&off_10025FA20 + (int)v473) - 8;
  v269 = *(_DWORD *)&v268[4 * (((v262 ^ HIDWORD(v579)) >> 16) ^ 0x68)];
  HIDWORD(v271) = v269 ^ 0x1C5;
  LODWORD(v271) = v269 ^ 0xDB22D000;
  v270 = v271 >> 12;
  LODWORD(v255) = *(_DWORD *)&v268[4 * (BYTE2(v258) ^ BYTE6(v580))];
  HIDWORD(v271) = v255 ^ 0x1C5;
  LODWORD(v271) = v255 ^ 0xDB22D000;
  v272 = (char *)*(&off_10025FA20 + v245 - 870) - 8;
  v273 = *(_DWORD *)&v272[4 * (((v593 ^ v580) >> 24) ^ 0xB7)] ^ (v271 >> 12);
  v274 = *(_DWORD *)&v268[4 * (((v579 ^ v590) >> 16) ^ 7)];
  HIDWORD(v271) = v274 ^ 0x1C5;
  LODWORD(v271) = v274 ^ 0xDB22D000;
  v275 = v267 ^ v273;
  v276 = *(_DWORD *)&v264[4 * ((v593 ^ v580) ^ 0xFB)] ^ (BYTE1(v262) ^ BYTE5(v579)) ^ *(_DWORD *)&v263[4 * ((BYTE1(v262) ^ BYTE5(v579)) ^ 0x23)] ^ 0x443EC7A5 ^ (v271 >> 12);
  v277 = *(_DWORD *)&v268[4 * (((v593 ^ v580) >> 16) ^ 0x1C)];
  HIDWORD(v271) = v277 ^ 0x1C5;
  LODWORD(v271) = v277 ^ 0xDB22D000;
  v278 = *(_DWORD *)&v272[4 * (((v262 ^ HIDWORD(v579)) >> 24) ^ 0xF6)] ^ (BYTE1(v265)
                                                                        + 1520843255
                                                                        - ((v265 >> 7) & 0x1EE)) ^ *(_DWORD *)&v263[4 * (BYTE1(v265) ^ 0x6D)] ^ ((v271 >> 12) + 2111680599 - ((2 * (v271 >> 12)) & 0xFBBB60AE));
  v279 = *(_DWORD *)&v272[4 * HIBYTE(v265)];
  v280 = v426 ^ v428 ^ *(_DWORD *)&v272[4 * (((v579 ^ v590) >> 24) ^ 0x42)] ^ v270 ^ (v266
                                                                                                  + 2111680599
                                                                                                  - ((2 * v266) & 0xFBBB60AE));
  v281 = v566 ^ *(_DWORD *)&v264[4 * ((v579 ^ v590) ^ 0x96)] ^ (v278
                                                                               + 513343004
                                                                               - ((2 * v278) & 0x3D31FC38));
  v282 = HIDWORD(v562) ^ *(_DWORD *)&v264[4 * ((v262 ^ BYTE4(v579)) ^ 0x5F)] ^ (v275
                                                                                               + 513343004
                                                                                               - ((2 * v275) & 0x3D31FC38));
  v283 = v478 ^ v279 ^ (v276 + 2111680599 - ((2 * v276) & 0xFBBB60AE));
  v284 = ((unsigned __int16)(v478 ^ v279 ^ (v276 - 20393 - ((2 * v276) & 0x60AE))) >> 8) ^ 0x68;
  v285 = v280 ^ 0xF9388C2F;
  v286 = *(_DWORD *)&v268[4 * ((v280 ^ 0xF9388C2F) >> 16)];
  HIDWORD(v271) = v286 ^ 0x1C5;
  LODWORD(v271) = v286 ^ 0xDB22D000;
  v287 = v271 >> 12;
  v288 = *(_DWORD *)&v268[4 * (BYTE2(v281) ^ 0x8F)];
  HIDWORD(v271) = v288 ^ 0x1C5;
  LODWORD(v271) = v288 ^ 0xDB22D000;
  v289 = v271 >> 12;
  v290 = *(_DWORD *)&v268[4 * (BYTE2(v282) ^ 0x66)];
  HIDWORD(v271) = v290 ^ 0x1C5;
  LODWORD(v271) = v290 ^ 0xDB22D000;
  v291 = (v271 >> 12) ^ *(_DWORD *)&v263[4 * (v284 ^ 0x6D)] ^ (v284
                                                             + 1520843255
                                                             - ((2 * ((v283 >> 8) ^ 0x42BD68)) & 0x1EE));
  v292 = (v287 + 513343004 - ((2 * v287) & 0x3D31FC38)) ^ *(_DWORD *)&v264[4 * (v282 ^ 0xB6)];
  v293 = (v291 + 513343004 - ((2 * v291) & 0x3D31FC38)) ^ *(_DWORD *)&v264[4 * (v280 ^ 0x61)];
  v294 = (((unsigned __int16)(v280 ^ 0x8C2F) >> 8) + 1520843255 - (((v280 ^ 0xF9388C2F) >> 7) & 0x1EE)) ^ 0xD678EAEF ^ *(_DWORD *)&v263[4 * (((unsigned __int16)(v280 ^ 0x8C2F) >> 8) ^ 0x6D)];
  v295 = *(_DWORD *)&v272[4 * (HIBYTE(v282) ^ 0x43)] ^ 0xDFC7EBE9;
  v296 = v294 + v295;
  v297 = v294 & v295;
  v298 = *(_DWORD *)&v268[4 * (BYTE2(v283) ^ 0xBD)];
  HIDWORD(v271) = v298 ^ 0x1C5;
  LODWORD(v271) = v298 ^ 0xDB22D000;
  LODWORD(v247) = (v296 - 2 * v297) ^ (v271 >> 12);
  v299 = *(_DWORD *)&v272[4 * HIBYTE(v285)] ^ (v289 + 2111680599 - ((2 * v289) & 0xFBBB60AE));
  v300 = (v299 + 513343004 - ((2 * v299) & 0x3D31FC38)) ^ *(_DWORD *)&v264[4 * (v283 ^ 0xAB)];
  v301 = *(_DWORD *)&v272[4 * (HIBYTE(v283) ^ 0x42)] ^ HIDWORD(v584) ^ *(_DWORD *)&v263[4 * (BYTE1(v281) ^ 0xF7)] ^ ((BYTE1(v281) ^ 0x9A) + 1520843255 - ((2 * ((v281 >> 8) ^ 0x88F9A)) & 0x1EE)) ^ (v292 + 2111680599 - ((2 * v292) & 0xFBBB60AE));
  v302 = v562 ^ *(_DWORD *)&v263[4 * (BYTE1(v282) ^ 0x39)] ^ (v300 + 1520843255 - ((2 * v300) & 0xB54C73EE));
  v303 = HIDWORD(v557) ^ *(_DWORD *)&v272[4 * (HIBYTE(v281) ^ 8)] ^ (v293 + 2111680599 - ((2 * v293) & 0xFBBB60AE));
  v304 = v557 ^ *(_DWORD *)&v264[4 * (v281 ^ 0xBF)] ^ (v247 + 513343004 - ((2 * v247) & 0x3D31FC38));
  LODWORD(v247) = *(_DWORD *)&v268[4 * (BYTE2(v304) ^ 0x79)];
  HIDWORD(v271) = v247 ^ 0x1C5;
  LODWORD(v271) = v247 ^ 0xDB22D000;
  BYTE1(v285) = ((unsigned __int16)(WORD2(v557) ^ *(_WORD *)&v272[4 * (HIBYTE(v281) ^ 8)] ^ (v293
                                                                                           - 20393
                                                                                           - ((2 * v293) & 0x60AE))) >> 8) ^ 0x68;
  v305 = ((v271 >> 12) + 2111680599 - ((2 * (v271 >> 12)) & 0xFBBB60AE)) ^ *(_DWORD *)&v272[4
                                                                                          * ((v303 ^ 0x2261685E) >> 24)];
  LODWORD(v247) = ((BYTE1(v304) ^ 0xD0) + 1520843255 - 2 * (BYTE1(v304) ^ 0xD0 ^ (v304 >> 8) & 8)) ^ *(_DWORD *)&v263[4 * (BYTE1(v304) ^ 0xBD)];
  LODWORD(v247) = (v247 + 513343004 - ((2 * v247) & 0x3D31FC38)) ^ *(_DWORD *)&v264[4 * (v301 ^ 0x76)];
  v306 = ((BYTE1(v302) ^ 0xEC) + 1520843255 - ((2 * ((v302 >> 8) ^ 0xE5FEC)) & 0x1EE)) ^ *(_DWORD *)&v263[4 * (BYTE1(v302) ^ 0x81)];
  v307 = *(_DWORD *)&v268[4 * (BYTE2(v302) ^ 0x5F)];
  HIDWORD(v271) = v307 ^ 0x1C5;
  LODWORD(v271) = v307 ^ 0xDB22D000;
  v308 = v271 >> 12;
  HIDWORD(v271) = *(_DWORD *)&v264[4 * (v303 ^ 0x5E)] ^ 0xF78FD994;
  LODWORD(v271) = HIDWORD(v271);
  v309 = (v271 >> 28) ^ __ROR4__(*(_DWORD *)&v272[4 * (HIBYTE(v304) ^ 6)] ^ 0x7462B151 ^ (v306+ 2111680599- ((2 * v306) & 0xFBBB60AE)), 28);
  v310 = (v308 + 2111680599 - ((2 * v308) & 0xFBBB60AE)) ^ *(_DWORD *)&v272[4 * (HIBYTE(v301) ^ 0xD2)];
  v311 = *(_DWORD *)&v268[4 * (BYTE2(v303) ^ 0x1B)];
  v312 = (v310 + 513343004 - ((2 * v310) & 0x3D31FC38)) ^ *(_DWORD *)&v264[4 * (v304 ^ 0x4C)];
  HIDWORD(v271) = v311 ^ 0x1C5;
  LODWORD(v271) = v311 ^ 0xDB22D000;
  v313 = v271 >> 12;
  v314 = *(_DWORD *)&v268[4 * (BYTE2(v301) ^ 0xCC)];
  HIDWORD(v271) = v314 ^ 0x1C5;
  LODWORD(v271) = v314 ^ 0xDB22D000;
  v315 = HIDWORD(v427) ^ v429 ^ (v271 >> 12) ^ __ROR4__(v309 ^ 0x78071371, 4);
  v316 = v552 ^ *(_DWORD *)&v272[4 * (HIBYTE(v302) ^ 0xE)] ^ v313 ^ (v247 + 2111680599 - ((2 * v247) & 0xFBBB60AE));
  LODWORD(v247) = BYTE1(v285);
  v317 = HIDWORD(v548) ^ *(_DWORD *)&v263[4 * (BYTE1(v285) ^ 0x6D)] ^ (v312 + 1520843255 - ((2 * v312) & 0xB54C73EE));
  v318 = v548 ^ ((BYTE1(v301) ^ 0xC0) + 1520843255 - ((2 * ((v301 >> 8) ^ 0xD2CCC0)) & 0x1EE)) ^ *(_DWORD *)&v264[4 * ((v302 ^ BYTE1(v282) ^ 0x54) ^ 0xCA)] ^ *(_DWORD *)&v263[4 * (BYTE1(v301) ^ 0xAD)] ^ (v305 + 513343004 - ((2 * v305) & 0x3D31FC38));
  v319 = ((unsigned __int16)(v548 ^ ((BYTE1(v301) ^ 0xC0)
                                                    + 14839
                                                    - ((2 * ((v301 >> 8) ^ 0xCCC0)) & 0x1EE)) ^ *(_WORD *)&v264[4 * ((v302 ^ BYTE1(v282) ^ 0x54) ^ 0xCA)] ^ *(_WORD *)&v263[4 * (BYTE1(v301) ^ 0xAD)] ^ (v305 - 484 - ((2 * v305) & 0xFC38))) >> 8) ^ 0xD9;
  LODWORD(v247) = v247 ^ 0x4552953C ^ v317;
  v320 = *(_DWORD *)&v268[4 * BYTE2(v247)];
  HIDWORD(v271) = v320 ^ 0x1C5;
  LODWORD(v271) = v320 ^ 0xDB22D000;
  v321 = v271 >> 12;
  v322 = *(_DWORD *)&v268[4 * ((v315 ^ 0x99FEE750) >> 16)];
  HIDWORD(v271) = v322 ^ 0x1C5;
  LODWORD(v271) = v322 ^ 0xDB22D000;
  v323 = BYTE1(v316) ^ 0x29;
  v324 = v323 + 1520843255 - ((2 * ((v316 >> 8) ^ 0xA73B29)) & 0x1EE);
  v325 = (BYTE1(v247) + 1520843255 - ((v247 >> 7) & 0x1EE)) ^ *(_DWORD *)&v264[4
                                                                                           * (v316 ^ 0x72)] ^ *(_DWORD *)&v263[4 * (BYTE1(v247) ^ 0x6D)] ^ ((v271 >> 12) + 513343004 - ((2 * (v271 >> 12)) & 0x3D31FC38));
  v326 = *(_DWORD *)&v268[4 * (BYTE2(v318) ^ 2)];
  HIDWORD(v271) = v326 ^ 0x1C5;
  LODWORD(v271) = v326 ^ 0xDB22D000;
  v327 = *(_DWORD *)&v272[4 * (HIBYTE(v316) ^ 0xA7)] ^ (v271 >> 12);
  v328 = *(_DWORD *)&v268[4 * (BYTE2(v316) ^ 0x3B)];
  HIDWORD(v271) = v328 ^ 0x1C5;
  LODWORD(v271) = v328 ^ 0xDB22D000;
  LODWORD(v247) = *(_DWORD *)&v264[4 * v247] ^ v327 ^ 0x63454E4B;
  v329 = HIDWORD(v542) ^ (v319 + 1520843255 - ((2 * ((v318 >> 8) ^ 0x9802D9)) & 0x1EE)) ^ *(_DWORD *)&v264[4 * (v315 ^ 0x1E)] ^ *(_DWORD *)&v263[4 * (v319 ^ 0x6D)] ^ (v271 >> 12) ^ *(_DWORD *)&v272[4 * (HIBYTE(v317) ^ 0x61)];
  v330 = v542 ^ *(_DWORD *)&v272[4 * (HIBYTE(v318) ^ 0x98)] ^ (v325 + 2111680599 - ((2 * v325) & 0xFBBB60AE));
  v331 = HIDWORD(v538) ^ *(_DWORD *)&v264[4 * (v318 ^ 0x3D)] ^ v324 ^ *(_DWORD *)&v272[4 * ((v315 ^ 0x99FEE750) >> 24)] ^ *(_DWORD *)&v263[4 * (v323 ^ 0x6D)] ^ v321;
  v332 = v538 ^ *(_DWORD *)&v263[4 * (((unsigned __int16)(v315 ^ 0xE750) >> 8) ^ 0x6D)] ^ (v247 + 1520843255 - ((2 * v247) & 0xB54C73EE));
  LODWORD(v247) = *(_DWORD *)&v268[4 * (BYTE2(v329) ^ 0x54)];
  HIDWORD(v271) = v247 ^ 0x1C5;
  LODWORD(v271) = v247 ^ 0xDB22D000;
  LODWORD(v247) = v271 >> 12;
  v333 = *(_DWORD *)&v268[4 * (BYTE2(v331) ^ 0xAD)];
  HIDWORD(v271) = v333 ^ 0x1C5;
  LODWORD(v271) = v333 ^ 0xDB22D000;
  v334 = BYTE1(v331);
  v335 = (BYTE1(v331) ^ 0xB1) + 1520843256 + ~(2 * (BYTE1(v331) ^ 0xB1 ^ (v331 >> 8) & 8));
  v336 = v329 ^ 0x282ED73C;
  v337 = *(_DWORD *)&v264[4 * ((v332 ^ ((unsigned __int16)(v315 ^ 0xE750) >> 8)) ^ 0x41)] ^ (((unsigned __int16)(v329 ^ 0xD73C) >> 8) + 1520843255 - (((v329 ^ 0x282ED73Cu) >> 7) & 0x1EE)) ^ *(_DWORD *)&v263[4 * (((unsigned __int16)(v329 ^ 0xD73C) >> 8) ^ 0x6D)] ^ ((v271 >> 12) + 513343004 - ((2 * (v271 >> 12)) & 0x3D31FC38));
  v338 = v337 + 2111680599 - ((2 * v337) & 0xFBBB60AE);
  v339 = *(_DWORD *)&v268[4 * (BYTE2(v332) ^ 0x81)];
  HIDWORD(v271) = v339 ^ 0x1C5;
  LODWORD(v271) = v339 ^ 0xDB22D000;
  v340 = ((v271 >> 12) + 2111680599 - ((2 * (v271 >> 12)) & 0xFBBB60AE)) ^ *(_DWORD *)&v272[4 * HIBYTE(v336)];
  v341 = (v340 + 513343005 + ~((2 * v340) & 0x3D31FC38)) ^ *(_DWORD *)&v264[4 * (v331 ^ 0x4E)];
  v342 = *(_DWORD *)&v268[4 * (BYTE2(v330) ^ 0xC6)];
  LODWORD(v247) = ((BYTE1(v332) ^ 0xA0) + 1520843255 - 2 * (BYTE1(v332) ^ 0xA0 ^ (v332 >> 8) & 8)) ^ (v247 + 513343004 - ((2 * v247) & 0x3D31FC38)) ^ *(_DWORD *)&v264[4 * (v330 ^ 0xFC)] ^ *(_DWORD *)&v263[4 * (BYTE1(v332) ^ 0xCD)];
  LODWORD(v271) = __ROR4__((v342 >> 12) ^ 0x2606F0F, 17) ^ 0xEE910136;
  HIDWORD(v271) = v271;
  v343 = HIDWORD(v531) ^ *(_DWORD *)&v263[4 * (BYTE1(v330) ^ 0x75)] ^ (v341 + 1520843255 - ((2 * v341) & 0xB54C73EE));
  v344 = v531 ^ *(_DWORD *)&v272[4 * (HIBYTE(v331) ^ 0xB6)] ^ (v247 + 2111680599 - ((2 * v247) & 0xFBBB60AE));
  LODWORD(v247) = *(_DWORD *)&v264[4 * v336];
  v345 = HIDWORD(v525) ^ *(_DWORD *)&v272[4 * (HIBYTE(v330) ^ 0x5A)] ^ v338;
  v346 = v525 ^ v335 ^ v247 ^ *(_DWORD *)&v272[4 * (HIBYTE(v332) ^ 0x68)] ^ *(_DWORD *)&v263[4 * (v334 ^ 0xDC)] ^ ((v271 >> 15) + (v342 << 20));
  LODWORD(v247) = ((BYTE1(v343) ^ 0x9D) + 1520843256 + (~(2 * ((v343 >> 8) ^ 0xC2489D)) | 0xFFFFFE11)) ^ *(_DWORD *)&v263[4 * (BYTE1(v343) ^ 0xF0)];
  v347 = *(_DWORD *)&v268[4 * (BYTE2(v344) ^ 0x8F)];
  LODWORD(v247) = *(_DWORD *)&v264[4 * (v346 ^ 0xC1)] ^ (v347 << 20) ^ (v347 >> 12) ^ 0x1C5DB22D ^ (v247 + 513343004 - ((2 * v247) & 0x3D31FC38));
  v348 = *(_DWORD *)&v268[4 * ((v345 ^ 0xCFB8D782) >> 16)];
  HIDWORD(v271) = v348 ^ 0x1C5;
  LODWORD(v271) = v348 ^ 0xDB22D000;
  v349 = ((v271 >> 12) + 513343004 - ((2 * (v271 >> 12)) & 0x3D31FC38)) ^ *(_DWORD *)&v264[4
                                                                                         * ((v343 ^ BYTE1(v330)) ^ 0x3F)];
  v350 = v247 + 2111680599 - ((2 * v247) & 0xFBBB60AE);
  LODWORD(v247) = v349 + 2111680599 - ((2 * v349) & 0xFBBB60AE);
  v351 = *(_DWORD *)&v268[4 * (BYTE2(v343) ^ 0x48)];
  HIDWORD(v271) = v351 ^ 0x1C5;
  LODWORD(v271) = v351 ^ 0xDB22D000;
  v352 = ((BYTE1(v346) ^ 0x2E) + 1520843256 + (~(2 * ((v346 >> 8) ^ 0x599E2E)) | 0xFFFFFE11)) ^ *(_DWORD *)&v264[4 * (((v444 + 37) ^ BYTE4(v448) ^ v272[4 * (HIBYTE(v330) ^ 0x5A)] ^ v338) ^ 0xCC)] ^ *(_DWORD *)&v263[4 * (BYTE1(v346) ^ 0x43)] ^ ((v271 >> 12) + 513343005 + ~((2 * (v271 >> 12)) & 0x3D31FC38));
  v353 = *(_DWORD *)&v268[4 * (BYTE2(v346) ^ 0x9E)];
  HIDWORD(v271) = v353 ^ 0x1C5;
  LODWORD(v271) = v353 ^ 0xDB22D000;
  v354 = HIDWORD(v519) ^ (((unsigned __int16)(v345 ^ 0xD782) >> 8)
                        + 1520843255
                        - (((v345 ^ 0xCFB8D782) >> 7) & 0x1EE)) ^ *(_DWORD *)&v264[4 * (v344 ^ 0x50)] ^ *(_DWORD *)&v263[4 * (((unsigned __int16)(v345 ^ 0xD782) >> 8) ^ 0x6D)] ^ (v271 >> 12) ^ *(_DWORD *)&v272[4 * (HIBYTE(v343) ^ 0xC2)];
  v355 = v519 ^ *(_DWORD *)&v272[4 * (HIBYTE(v344) ^ 0xC7)] ^ (v352 + 2111680599 - ((2 * v352) & 0xFBBB60AE));
  v356 = HIDWORD(v512) ^ *(_DWORD *)&v272[4 * ((v345 ^ 0xCFB8D782) >> 24)] ^ v350;
  v357 = v512 ^ ((BYTE1(v344) ^ 0xD9) + 1520843255 - ((2 * ((v344 >> 8) ^ 0xC78FD9)) & 0x1EE)) ^ *(_DWORD *)&v263[4 * (BYTE1(v344) ^ 0xB4)] ^ *(_DWORD *)&v272[4 * (HIBYTE(v346) ^ 0x59)] ^ v247;
  v358 = ((unsigned __int16)(v519 ^ *(_WORD *)&v272[4 * (HIBYTE(v344) ^ 0xC7)] ^ (v352
                                                                                                 - 20393
                                                                                                 - ((2 * v352) & 0x60AE))) >> 8);
  v359 = (((unsigned __int16)(v357 ^ 0xCCA2) >> 8) + 1520843255 - (((v357 ^ 0x33C8CCA2) >> 7) & 0x1EE)) ^ *(_DWORD *)&v263[4 * (((unsigned __int16)(v357 ^ 0xCCA2) >> 8) ^ 0x6D)];
  v360 = *(_DWORD *)&v268[4 * (BYTE2(v355) ^ 0xE6)];
  HIDWORD(v271) = v360 ^ 0x1C5;
  LODWORD(v271) = v360 ^ 0xDB22D000;
  v361 = v271 >> 12;
  v362 = *(_DWORD *)&v268[4 * (BYTE2(v356) ^ 0x1C)];
  HIDWORD(v271) = v362 ^ 0x1C5;
  LODWORD(v271) = v362 ^ 0xDB22D000;
  LODWORD(v247) = (v271 >> 12) ^ *(_DWORD *)&v263[4 * (v358 ^ 0xD9)] ^ ((v358 ^ 0xB4)
                                                                      + 1520843255
                                                                      - 2 * (v358 ^ 0xB4 ^ (v355 >> 8) & 8));
  LODWORD(v247) = (v247 + 513343004 - ((2 * v247) & 0x3D31FC38)) ^ *(_DWORD *)&v264[4 * (v354 ^ 0xA1)];
  v363 = (v359 + 513343004 - ((2 * v359) & 0x3D31FC38)) ^ *(_DWORD *)&v264[4
                                                                         * ((BYTE4(v512) ^ v272[4 * ((v345 ^ 0xCFB8D782) >> 24)] ^ v350) ^ 0x3A)];
  v364 = *(_DWORD *)&v264[4 * (v357 ^ 0xA2)] ^ (((unsigned __int16)(v354 ^ 0x5AA1) >> 8)
                                                               + 1520843255
                                                               - (((v354 ^ 0x7A765AA1) >> 7) & 0x1EE)) ^ *(_DWORD *)&v263[4 * (((unsigned __int16)(v354 ^ 0x5AA1) >> 8) ^ 0x6D)] ^ (v361 + 513343004 - ((2 * v361) & 0x3D31FC38));
  HIDWORD(v271) = *(_DWORD *)&v264[4 * (v355 ^ 0x96)] ^ 0x1E98FE1C;
  LODWORD(v271) = *(_DWORD *)&v264[4 * (v355 ^ 0x96)];
  HIDWORD(v271) = (v271 >> 29) ^ 0x6615DA09;
  LODWORD(v271) = HIDWORD(v271);
  v365 = (v271 >> 3) + 1520843255 - ((2 * (v271 >> 3)) & 0xB54C73EE);
  v366 = *(_DWORD *)&v268[4 * ((v354 ^ 0x7A765AA1) >> 16)];
  HIDWORD(v271) = v366 ^ 0x1C5;
  LODWORD(v271) = v366 ^ 0xDB22D000;
  v367 = v271 >> 12;
  v368 = *(_DWORD *)&v268[4 * ((v357 ^ 0x33C8CCA2) >> 16)];
  HIDWORD(v271) = v368 ^ 0x1C5;
  LODWORD(v271) = v368 ^ 0xDB22D000;
  v369 = HIDWORD(v507) ^ *(_DWORD *)&v272[4 * (HIBYTE(v357) ^ 0x17)] ^ (v247 + 2111680599 - ((2 * v247) & 0xFBBB60AE));
  LODWORD(v247) = v365 ^ *(_DWORD *)&v263[4 * (BYTE1(v356) ^ 0xD1)] ^ (v271 >> 12);
  v370 = v507 ^ *(_DWORD *)&v272[4 * (HIBYTE(v355) ^ 0x4F)] ^ v367 ^ (v363 + 2111680600 + ~((2 * v363) & 0xFBBB60AE));
  v371 = HIDWORD(v501) ^ *(_DWORD *)&v272[4 * (HIBYTE(v356) ^ 0x1B)] ^ (v364 + 2111680599 - ((2 * v364) & 0xFBBB60AE));
  v372 = *(_DWORD *)&v268[4 * (BYTE2(v371) ^ 0x7E)];
  HIDWORD(v271) = v372 ^ 0x1C5;
  LODWORD(v271) = v372 ^ 0xDB22D000;
  v373 = v271 >> 12;
  v374 = *(_DWORD *)&v268[4 * (BYTE2(v370) ^ 1)];
  HIDWORD(v271) = v374 ^ 0x1C5;
  LODWORD(v271) = v374 ^ 0xDB22D000;
  v375 = *(_DWORD *)&v272[4 * (HIBYTE(v354) ^ 0x5E)] ^ v584 ^ (v247 + 2111680599 - ((2 * v247) & 0xFBBB60AE));
  LODWORD(v247) = ((v271 >> 12) + 513343004 - ((2 * (v271 >> 12)) & 0x3D31FC38)) ^ *(_DWORD *)&v264[4 * (v369 ^ 0xC6)];
  v376 = ((BYTE1(v369) ^ 0x71) + 1520843255 - ((2 * ((v369 >> 8) ^ 0xF25B71)) & 0x1EE)) ^ *(_DWORD *)&v263[4 * (BYTE1(v369) ^ 0x1C)];
  v377 = (v376 + 2111680599 - ((2 * v376) & 0xFBBB60AE)) ^ *(_DWORD *)&v272[4 * (HIBYTE(v370) ^ 0x1F)];
  v378 = *(_DWORD *)&v268[4 * (BYTE2(v369) ^ 0x5B)];
  HIDWORD(v271) = v378 ^ 0x1C5;
  LODWORD(v271) = v378 ^ 0xDB22D000;
  v379 = v271 >> 12;
  v380 = BYTE1(v356) ^ 0x73F4E0AF ^ v375;
  v381 = *(_DWORD *)&v268[4 * BYTE2(v380)];
  HIDWORD(v271) = v381 ^ 0x1C5;
  LODWORD(v271) = v381 ^ 0xDB22D000;
  v382 = v271 >> 12;
  HIDWORD(v271) = v373 ^ ((BYTE1(v370) ^ 0x81) + 1520843255 - ((2 * ((v370 >> 8) ^ 0x1F0181)) & 0x1EE)) ^ 0xD678EAEF ^ *(_DWORD *)&v263[4 * (BYTE1(v370) ^ 0xEC)];
  LODWORD(v271) = HIDWORD(v271);
  LODWORD(v271) = (v271 >> 11) ^ __ROR4__(*(_DWORD *)&v272[4 * (HIBYTE(v369) ^ 0xF2)] ^ 0xDFC7EBE9, 11) ^ 0xD490839A;
  HIDWORD(v271) = v271;
  v383 = v501 ^ *(_DWORD *)&v264[4 * (v370 ^ 0xB8)] ^ ((BYTE1(v371) ^ 0xAA)
                                                                      + 1520843255
                                                                      - ((2 * ((v371 >> 8) ^ 0x967EAA)) & 0x1EE)) ^ *(_DWORD *)&v272[4 * (HIBYTE(v375) ^ 0x57)] ^ v379 ^ *(_DWORD *)&v263[4 * (BYTE1(v371) ^ 0xC7)];
  v384 = HIDWORD(v496) ^ (BYTE1(v380) + 1520843255 - ((v380 >> 7) & 0x1EE)) ^ *(_DWORD *)&v272[4 * (HIBYTE(v371) ^ 0x96)] ^ *(_DWORD *)&v263[4 * (BYTE1(v380) ^ 0x6D)] ^ (v247 + 2111680600 + ~((2 * v247) & 0xFBBB60AE));
  LODWORD(v247) = v496 ^ *(_DWORD *)&v264[4 * (v371 ^ 0x88)] ^ v382 ^ (v377
                                                                                      + 513343004
                                                                                      - ((2 * v377) & 0x3D31FC38));
  v385 = HIDWORD(v490) ^ *(_DWORD *)&v264[4 * (BYTE1(v356) ^ 0xAF ^ v375)] ^ ((v271 >> 21)
                                                                                             + 513343004
                                                                                             - ((2 * (v271 >> 21)) & 0x3D31FC38));
  v386 = *(_DWORD *)&v268[4 * (BYTE2(v383) ^ 0xAE)];
  HIDWORD(v271) = v386 ^ 0x1C5;
  LODWORD(v271) = v386 ^ 0xDB22D000;
  v387 = v271 >> 12;
  BYTE2(v377) = BYTE2(v247) ^ 0x4A;
  v388 = *(_DWORD *)&v263[4 * (BYTE1(v384) ^ 0x96)] ^ ((BYTE1(v384) ^ 0xFB)
                                                     + 1520843255
                                                     - ((2 * ((v384 >> 8) ^ 0x3EA2FB)) & 0x1EE));
  v389 = *(_DWORD *)&v268[4 * (BYTE2(v384) ^ 0xA2)];
  HIDWORD(v271) = v389 ^ 0x1C5;
  LODWORD(v271) = v389 ^ 0xDB22D000;
  v390 = (v388 + 513343004 - ((2 * v388) & 0x3D31FC38)) ^ *(_DWORD *)&v264[4 * (v247 ^ 0x75)];
  v391 = (((unsigned __int16)(v247 ^ 0xF075) >> 8)
        + 1520843255
        - (((v247 ^ 0xB54AF075) >> 7) & 0x1EE)) ^ (v271 >> 12) ^ *(_DWORD *)&v263[4
                                                                                              * (((unsigned __int16)(v247 ^ 0xF075) >> 8) ^ 0x6D)];
  v392 = (v391 + 2111680599 - ((2 * v391) & 0xFBBB60AE)) ^ *(_DWORD *)&v272[4 * (HIBYTE(v385) ^ 0xED)];
  LODWORD(v247) = *(_DWORD *)&v272[4 * (BYTE3(v247) ^ 0x91)];
  v393 = *(_DWORD *)&v272[4 * (HIBYTE(v384) ^ 0x3E)];
  LODWORD(v272) = *(_DWORD *)&v272[4 * (HIBYTE(v383) ^ 0xA4)];
  v385 ^= 0xC9AF1D8F;
  v394 = BYTE1(v385);
  v395 = BYTE1(v385) + 1520843255 - ((v385 >> 7) & 0x1EE);
  v396 = *(_DWORD *)&v264[4 * v385];
  v397 = *(_DWORD *)&v264[4 * (v384 ^ 0x9A)];
  LODWORD(v264) = *(_DWORD *)&v264[4 * (v383 ^ 0x24)];
  v398 = *(_DWORD *)&v268[4 * BYTE2(v385)];
  LODWORD(v268) = *(_DWORD *)&v268[4 * BYTE2(v377)];
  HIDWORD(v271) = v268 ^ 0x1C5;
  LODWORD(v271) = v268 ^ 0xDB22D000;
  LODWORD(v268) = (v383 >> 8) ^ 0xA4AE8E;
  v399 = *(_DWORD *)&v263[4 * (v394 ^ 0x6D)];
  v400 = *(_DWORD *)&v263[4 * (v268 ^ 0x6D)];
  v401 = v268 + 1520843255 - ((2 * (_DWORD)v268) & 0x1EE);
  LODWORD(v268) = v490 ^ v397 ^ v387 ^ v247 ^ v395 ^ v399;
  v402 = HIDWORD(v484) ^ v401 ^ v393 ^ v400 ^ (v271 >> 12) ^ v396;
  v403 = v484 ^ v264 ^ (v392 + 513343004 - ((2 * v392) & 0x3D31FC38));
  v404 = *(_DWORD *)(v59 - 120);
  v405 = (uint64_t)*(&off_10025FA20 + v404 - 953);
  v406 = (char *)*(&off_10025FA20 + v404 - 1062) - 12;
  LODWORD(v264) = *(_DWORD *)&v406[4 * (BYTE1(v268) ^ 0x3F)];
  v407 = HIDWORD(v478) ^ v272 ^ (v398 >> 12) ^ (v398 << 20) ^ (v390
                                                                           + 2111680599
                                                                           - ((2 * v390) & 0xFBBB60AE));
  LODWORD(v247) = *(_DWORD *)(v405 + 4 * (v403 ^ 7u)) ^ *(_DWORD *)&v406[4
                                                                                          * (((unsigned __int16)(WORD2(v478) ^ (unsigned __int16)v272 ^ (v398 >> 12) ^ (v390 - 20393 - ((2 * v390) & 0x60AE))) >> 8) ^ 0x91)] ^ 0xDC0A606D;
  v408 = *(_DWORD *)&v406[4 * ((unsigned __int16)(v403 ^ 0x6F07) >> 8)];
  v409 = *(_DWORD *)&v406[4 * (BYTE1(v402) ^ 0xA)];
  v410 = (char *)*(&off_10025FA20 + (int)v468) - 12;
  v411 = *(unsigned int *)&v410[4 * (HIBYTE(v403) ^ 0xEF)];
  LODWORD(v406) = *(_DWORD *)&v410[4 * (HIBYTE(v402) ^ 0x40)];
  v412 = *(_DWORD *)&v410[4 * (HIBYTE(v407) ^ 0x81)];
  LODWORD(v410) = *(_DWORD *)&v410[4 * ((v268 >> 24) ^ 0x52)];
  v413 = (char *)*(&off_10025FA20 + SHIDWORD(v468)) - 8;
  v414 = *(_DWORD *)&v413[4 * (BYTE2(v407) ^ 0xE1)];
  v415 = *(_DWORD *)&v413[4 * (BYTE2(v403) ^ 0x2A)];
  v416 = *(_DWORD *)&v413[4 * (BYTE2(v402) ^ 0x38)];
  LODWORD(v247) = v406 ^ (v247 - 1948903727 - ((2 * v247) & 0x17AC2DA2));
  LODWORD(v406) = *(_DWORD *)&v413[4 * (BYTE2(v268) ^ 0xCE)];
  LODWORD(v413) = *(_DWORD *)(v405 + 4 * (v268 ^ 0x97u));
  LODWORD(v247) = v406 ^ (v247 - 904186093 - ((2 * v247) & 0x94366E26));
  LODWORD(v406) = *(_DWORD *)(v405 + 4 * (v402 ^ 0xBBu));
  v417 = *(unsigned int *)(v405 + 4 * (v407 ^ 0xF6u));
  LODWORD(v405) = *(_DWORD *)(v59 - 140) ^ v581 ^ (v247 - ((2 * v247) & 0x51FEDD94) + 687828682);
  v418 = (char *)*(&off_10025FA20 + SHIDWORD(v462)) - 4;
  a54[8] = v418[BYTE3(v405) ^ 0xD7] ^ 0x7C;
  LODWORD(v247) = ((v414 ^ 0x324FF1A6 ^ v408) - 1948903727 - ((2 * (v414 ^ 0x324FF1A6 ^ v408)) & 0x17AC2DA2)) ^ v410;
  LODWORD(v247) = (v247 + 610182872 - ((2 * v247) & 0x48BD4DB0)) ^ v406;
  LODWORD(v247) = *(_DWORD *)(v59 - 136) ^ HIDWORD(v581) ^ (v247 - ((2 * v247) & 0x442FAC24) - 1575496174);
  v419 = (char *)*(&off_10025FA20 + (int)v462) - 8;
  a54[*(_QWORD *)(v59 - 232)] = (v419[v247 ^ 0xC7] - 112) ^ 0x5F;
  v420 = (uint64_t)*(&off_10025FA20 + SHIDWORD(v458));
  LODWORD(v410) = *(unsigned __int8 *)(v420 + (BYTE1(v247) ^ 0x13));
  HIDWORD(v271) = v410 ^ 0x20;
  LODWORD(v271) = (_DWORD)v410 << 24;
  a54[6] = (v271 >> 30) ^ 0x40;
  LODWORD(v410) = ((v413 ^ 0xEE4591CB ^ v415)
                 - 1948903727
                 - ((2 * (v413 ^ 0xEE4591CB ^ v415)) & 0x17AC2DA2)) ^ v412;
  LODWORD(v410) = ((_DWORD)v410 - ((2 * (_DWORD)v410) & 0xF0A98D6A) - 128661835) ^ v409;
  v421 = *(_DWORD *)(v59 - 132);
  v422 = v421 ^ HIDWORD(v582) ^ (v410 - ((2 * (_DWORD)v410) & 0x44682948) - 1573645148);
  LODWORD(v410) = *(unsigned __int8 *)(v420
                                     + ((unsigned __int16)(v421 ^ WORD2(v582) ^ ((_WORD)v410
                                                                                                - ((2 * (_WORD)v410) & 0x2948)
                                                                                                + 5284)) >> 8));
  HIDWORD(v271) = v410 ^ 0x20;
  LODWORD(v271) = (_DWORD)v410 << 24;
  a54[*(_QWORD *)(v59 - 216)] = (v271 >> 30) ^ 0x7E;
  v423 = (char *)*(&off_10025FA20 + (int)v458) - 12;
  a54[9] = v423[BYTE2(v405) ^ 0xFBLL] ^ 0xC9;
  LODWORD(v410) = ((v264 ^ 0x7382D064 ^ v411)
                 - 904186093
                 - ((2 * (v264 ^ 0x7382D064 ^ v411)) & 0x94366E26)) ^ v416;
  LODWORD(v410) = v417 ^ ((_DWORD)v410 + 610182872 - ((2 * (_DWORD)v410) & 0x48BD4DB0));
  LODWORD(v264) = *(_DWORD *)(v59 - 128) ^ v582 ^ ((_DWORD)v410 - ((2 * (_DWORD)v410) & 0x61EF50BA) + 821536861);
  a54[*(_QWORD *)(v59 - 184)] = v423[BYTE2(v264) ^ 0xB8] ^ 0x1A;
  a54[*(_QWORD *)(v59 - 256)] = (v419[v405 ^ 0x1BLL] - 112) ^ 0x7D;
  a54[*(_QWORD *)(v59 - 240)] = v423[BYTE2(v247) ^ 3] ^ 0x64;
  a54[*(_QWORD *)(v59 - 192)] = v418[BYTE3(v247) ^ 0x6DLL] ^ 0x84;
  LODWORD(v247) = *(unsigned __int8 *)(v420 + (BYTE1(v405) ^ 0x92));
  HIDWORD(v271) = v247 ^ 0x20;
  LODWORD(v271) = (_DWORD)v247 << 24;
  a54[*(_QWORD *)(v59 - 160)] = (v271 >> 30) ^ 0xD2;
  v424 = *(_QWORD *)(v59 - 208);
  a54[v424] = v418[BYTE3(v422) ^ 0x53] ^ 0x68;
  a54[*(_QWORD *)(v59 - 176)] = (v419[v422 ^ 0x95] - 112) ^ 0xAF;
  a54[*(_QWORD *)(v59 - 248)] = (v419[v264 ^ 0x64] - 112) ^ 0x27;
  a54[*(_QWORD *)(v59 - 168)] = v418[(v264 >> 24) ^ 0x6ELL] ^ 0xFE;
  LODWORD(v247) = *(unsigned __int8 *)(v420 + (BYTE1(v264) ^ 0x1FLL));
  HIDWORD(v271) = v247 ^ 0x20;
  LODWORD(v271) = (_DWORD)v247 << 24;
  a54[*(_QWORD *)(v59 - 200)] = (v271 >> 30) ^ 0x58;
  a54[*(_QWORD *)(v59 - 152)] = v423[BYTE2(v422) ^ 0xC8] ^ 0x4B;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, char *, char *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)(a56 + 8 * ((1558 * ((((_DWORD)v424 + 780052325 - 2 * (((_DWORD)v424 + 16) & *(_DWORD *)(v59 - 220))) ^ 0x2E7EA755u) < a55)) ^ (v404 - 649))) - 8))(v420, 3390781203, v411, v417, 109, v422, 1220365744, 109, a9, v426, v427, v428, v429, v431, v433, v435, v439, v442, v444,
           v448,
           v453,
           a22,
           a23,
           v458,
           v462,
           v468,
           v473,
           v478,
           v484,
           v490,
           v496,
           v501,
           v507,
           v512,
           v519,
           v525,
           v531,
           v538,
           v542,
           v548,
           v552,
           v557,
           v562,
           v566,
           v570,
           v573,
           v575,
           v577,
           v579,
           v580,
           v581,
           v582,
           v584,
           a54);
}

void sub_10009A664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,int a58,int a59,int a60,int a61)
{
  uint64_t v61;

  *(_DWORD *)(v61 - 128) = a58 ^ 0xEBC5F371;
  *(_DWORD *)(v61 - 140) = a60 ^ 0x93A60F65;
  *(_DWORD *)(v61 - 132) = a61 ^ 0xD622DD5C;
  *(_DWORD *)(v61 - 136) = a59 ^ 0x5B4B490E;
  JUMPOUT(0x100098A28);
}

uint64_t sub_10009A6B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((428 * (((a7 - 40) ^ (v7 == a3)) & 1)) ^ a7))
                            - 8))();
}

uint64_t sub_10009A6F0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5
                                                                                + 8
                                                                                * (int)((481
                                                                                       * ((((17
                                                                                           * (a4 & 0x99D0B67F ^ 0x274)) ^ 0x25B) & v4) != 0)) ^ a4 & 0x99D0B67F))
                                                                    - (((a4 & 0x99D0B67F) - 1130876251) & 0x4367CF2F)
                                                                    + 1064))(a1, a2, a3, (a2 - a3));
}

uint64_t sub_10009A750(int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v68;
  int8x16x4_t v70;

  *(_DWORD *)(v65 - 120) = v63;
  *(_DWORD *)(v65 - 132) = v59 & 0xFFFFFFF8;
  *(_DWORD *)(v65 - 128) = v59;
  v66 = -8 - a3;
  v67 = v62 + v61 + v60;
  v68 = (v62 + v61 + a1 + v66 + 8);
  v70.val[0].i64[0] = ((_BYTE)v62 + (_BYTE)v61 + (_BYTE)a1 + (_BYTE)v66 + 8) & 0xF;
  v70.val[0].i64[1] = (v67 + 84 + (_BYTE)v66 + 8) & 0xF;
  v70.val[1].i64[0] = (v67 + 83 + (_BYTE)v66 + 8) & 0xF;
  v70.val[1].i64[1] = (v67 + 82 + (_BYTE)v66 + 8) & 0xF;
  v70.val[2].i64[0] = (v67 + 81 + (_BYTE)v66 + 8) & 0xF;
  v70.val[2].i64[1] = (v67 + 80 + (_BYTE)v66 + 8) & 0xF;
  v70.val[3].i64[0] = (v67 + (_BYTE)v66 + ((a5 - 71) | 0x43) + 8) & 0xF;
  v70.val[3].i64[1] = (v67 + 78 + (_BYTE)v66 + 8) & 0xF;
  *(int8x8_t *)(v64 - 7 + v68) = vrev64_s8(veor_s8(veor_s8(vrev64_s8(veor_s8(veor_s8(*(int8x8_t *)(v64 - 7 + v68), *(int8x8_t *)(v58 + (v68 & 0xF) - 7)), veor_s8(*(int8x8_t *)(v57 + (v68 & 0xF) - 7), *(int8x8_t *)(v56 + (v68 & 0xF) - 7)))), (int8x8_t)0xFEFEFEFEFEFEFEFELL), vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v70, (int8x16_t)xmmword_1002048A0), (int8x8_t)0x505050505050505)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a56 + 8 * ((54 * (-(v59 & 0xFFFFFFF8) == v66)) ^ a5)) - 8))((__n128)xmmword_1002048A0);
}

void sub_10009A8A8()
{
  JUMPOUT(0x10009A7B4);
}

uint64_t sub_10009A8B0(int a1)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((((a1 + 473) | 4) - 1044) * (*(_DWORD *)(v1 - 128) != *(_DWORD *)(v1 - 132))) ^ a1))
                            - ((a1 + 477) ^ 0x428)))();
}

uint64_t sub_10009A8F0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = (a4 - 1949718532);
  *(_BYTE *)(v10 + v12) ^= *(_BYTE *)(v9 + (v12 & 0xF)) ^ *(_BYTE *)(v8 + (v12 & 0xF)) ^ *(_BYTE *)(v7 + (v12 & 0xF)) ^ (5 * (v12 & 0xF)) ^ 0xFE;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((67 * (a4 - 1 == v6)) ^ (a6 - 544))) - 4))();
}

void sub_10009A954()
{
  int v0;
  int v1;
  uint64_t v2;

  if (v0 == 1853153040)
    v1 = 489733862;
  else
    v1 = -489691842;
  *(_DWORD *)(v2 + 40) = v1;
}

void sub_10009A9B8(uint64_t a1)
{
  int v1;
  BOOL v2;
  int v3;

  if (*(_QWORD *)(a1 + 24))
    v2 = *(_QWORD *)(a1 + 8) == 0x72F2C1D3322B87E8;
  else
    v2 = 1;
  v3 = v2;
  v1 = *(_DWORD *)(a1 + 32) ^ (1224239923 * (((a1 | 0xB7698061) - a1 + (a1 & 0x48967F9E)) ^ 0x45DA7DB6));
  __asm { BR              X8 }
}

_DWORD *sub_10009AB00(_DWORD *result)
{
  int v1;

  *result = v1 - 4;
  return result;
}

uint64_t sub_10009C0C8@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v5 = ((a1 ^ 0x622) + 120034823) & 0xF8D869CF;
  LODWORD(STACK[0x55C]) = STACK[0x2C0];
  LODWORD(STACK[0x4FC]) = STACK[0x2C8];
  STACK[0x308] = STACK[0x2A8];
  STACK[0x408] = STACK[0x2B0];
  STACK[0x4A8] = STACK[0x2B8];
  *(_DWORD *)(v1 + 52) = v5 + 142 + *(_DWORD *)(v1 + 52) - 348;
  LODWORD(STACK[0x49C]) = *(_DWORD *)(v1 + 360);
  STACK[0x528] = (v5 ^ 0x94F) + v2 + ((2 * (_DWORD)v5) ^ 0x20u) - 2878;
  LODWORD(STACK[0x4CC]) = v4;
  LODWORD(STACK[0x2C8]) = STACK[0x4FC];
  LODWORD(STACK[0x2C0]) = STACK[0x55C];
  return (*(uint64_t (**)(void))(v3 + 8 * (int)((1330 * (STACK[0x3E8] == 0)) ^ v5)))();
}

uint64_t sub_10009C120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W8>)
{
  uint64_t v5;
  int v6;

  LODWORD(STACK[0x55C]) = STACK[0x2C0];
  LODWORD(STACK[0x4FC]) = STACK[0x2C8];
  STACK[0x308] = STACK[0x2A8];
  STACK[0x408] = STACK[0x2B0];
  STACK[0x4A8] = STACK[0x2B8];
  LODWORD(STACK[0x56C]) = a5;
  STACK[0x528] = v5 + (v6 ^ 0x389u) + 2083 + 67 * (v6 ^ 0x2C5u) - 3571;
  LODWORD(STACK[0x4CC]) = a5;
  LODWORD(STACK[0x2C8]) = STACK[0x4FC];
  LODWORD(STACK[0x2C0]) = STACK[0x55C];
  return sub_1000A7948(a1, a2, a3, a4, 3805275455);
}

void sub_10009C168()
{
  LODWORD(STACK[0x3DC]) = 627426522;
  JUMPOUT(0x10009C174);
}

#error "10009C564: call analysis failed (funcsize=120)"

uint64_t sub_10009C568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t (*a68)(uint64_t);
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  unsigned int *v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t);

  LODWORD(STACK[0x248]) = a7;
  LODWORD(STACK[0x18D8]) = 1691917229;
  LODWORD(STACK[0x18DC]) = -36689038;
  v72 = *(_DWORD **)(v69 + 8 * (v68 - 926));
  STACK[0x240] = (unint64_t)v72;
  LODWORD(STACK[0x524]) = *v72;
  v73 = *(unsigned int **)(v69 + 8 * (v68 - 979));
  STACK[0x250] = (unint64_t)v73;
  v74 = (0x621F11AEB51988FCLL - ((v71 - 192) | 0x621F11AEB51988FCLL) + STACK[0x220]) ^ 0x955054AFDE4B3E5ALL;
  v75 = *v73 ^ (235795823 * v74);
  v76 = v68 + 496991283 - 235795823 * v74;
  *(_DWORD *)(v71 - 192) = v76;
  *(_DWORD *)(v71 - 184) = v76 - 8;
  *(_DWORD *)(v71 - 180) = 235795823 * v74;
  *(_DWORD *)(v71 - 176) = (v68 - 1689052641) ^ (235795823 * v74);
  *(_DWORD *)(v71 - 172) = ((v68 + 496991283) ^ 0x6B) - 235795823 * v74;
  *(_QWORD *)(v71 - 168) = -235795823 * v74;
  *(_QWORD *)(v71 - 160) = v75;
  v77 = a68(v71 - 192);
  v78 = (uint64_t (*)(uint64_t))(*(_QWORD *)(v70 + 8 * *(int *)(v71 - 188)) - 12);
  STACK[0x2E8] = *(_QWORD *)(v69 + 8 * (v68 - 950)) - 4;
  return v78(v77);
}

uint64_t sub_10009C670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,int a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t (*a65)(uint64_t, uint64_t);
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  unsigned int v68;

  STACK[0x2D8] = a65(a61, 2965982036);
  v68 = (*(uint64_t (**)(void))(v65 + 8 * a59))();
  *v66 = v68;
  v66[1] = 1812433253 * (v68 ^ (v68 >> 30)) + 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v67 + 8 * a60) - 12))();
}

uint64_t sub_10009C6E0()
{
  unsigned int v0;
  unsigned int v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)(v5 + 4 * v0) = v0 + (v1 ^ (v1 >> 30)) * v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (((v0 > 0x26E) * v4) ^ v2)) - 12))();
}

uint64_t sub_10009C70C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  int v51;
  uint64_t v52;
  uint64_t (*v53)(void);
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;

  v57 = 17 * (a1 ^ 0x1B2);
  LODWORD(STACK[0x524]) = v51;
  v58 = ((uint64_t (*)(uint64_t, _QWORD))*(&off_10025FA20 + a1 - 420))(a51, 0);
  v59 = (_DWORD *)STACK[0x2E0];
  v60 = *(_QWORD *)(STACK[0x2E0] + 16);
  v59[1] = *(_DWORD *)(STACK[0x2E0] + 24);
  v59[2] = v60;
  v59[3] = ((uint64_t (*)(uint64_t))v53)(v58);
  *v59 = v53();
  v54[1] = *(_DWORD *)STACK[0x2E0] + ((1664525 * (*v54 ^ (*v54 >> 30))) ^ v54[1]);
  v61 = (v57 + 273851501) ^ v52;
  *(_QWORD *)(v56 - 176) = STACK[0x2D0];
  *(_QWORD *)(v56 - 160) = v52 + 3722162716;
  *(_DWORD *)(v56 - 192) = v61;
  *(_DWORD *)(v56 - 188) = (v57 + 273851323) ^ v52;
  *(_DWORD *)(v56 - 152) = v52;
  *(_DWORD *)(v56 - 148) = v61 ^ 0x85;
  *(_DWORD *)(v56 - 184) = v52 + v57 + 2104631251;
  v62 = ((uint64_t (*)(uint64_t))STACK[0x2E8])(v56 - 192);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v55 + 8 * *(int *)(v56 - 168)) - 8))(v62);
}

uint64_t sub_10009C844()
{
  uint64_t v0;
  unsigned int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((215
                                          * (((v1 < 0xDDDBB21A) ^ (LODWORD(STACK[0x2F4]) + 26)) & 1)) ^ (LODWORD(STACK[0x2F4]) - 537)))
                            - 8))();
}

uint64_t sub_10009C888()
{
  uint64_t v0;
  unsigned int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((215
                                          * (((v1 > 0xDDDBB489) ^ (LODWORD(STACK[0x2F4]) + 26)) & 1)) ^ (LODWORD(STACK[0x2F4]) - 537)))
                            - 8))();
}

uint64_t sub_10009C8D0@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  int v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;

  v7 = (a1 + 87939562) & 0xFAC227FB;
  *v4 = v4[623];
  v8 = (v7 + 1498927245) ^ v2;
  *(_DWORD *)(v6 - 192) = v8;
  *(_DWORD *)(v6 - 188) = v8 ^ v1;
  *(_DWORD *)(v6 - 184) = v2 + v7 + 2104631251;
  *(_DWORD *)(v6 - 152) = v2;
  *(_DWORD *)(v6 - 148) = v8 ^ 0x52;
  *(_QWORD *)(v6 - 160) = (v3 + 1145240305) + v2;
  *(_QWORD *)(v6 - 176) = STACK[0x2C8];
  v9 = ((uint64_t (*)(uint64_t))STACK[0x2E8])(v6 - 192);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v5 + 8 * *(int *)(v6 - 168)) - 4))(v9);
}

uint64_t sub_10009C968()
{
  uint64_t v0;
  unsigned int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * (((2 * (v1 < LODWORD(STACK[0x2A0]) - 1630453543)) | (16
                                                                                             * (v1 < LODWORD(STACK[0x2A0]) - 1630453543))) ^ (LODWORD(STACK[0x2F4]) - 303)))
                            - 4))();
}

uint64_t sub_10009C9AC@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int *v6;
  int v7;

  v4 = (a1 + 1378570983) & 0xADD4A9F7;
  v5 = 4 * (v1 - 1519274746);
  v6 = (int *)(STACK[0x2D8] + v5);
  v7 = *v6;
  LODWORD(v6) = -1690040139
              * ((*(_DWORD *)(*(_QWORD *)STACK[0x2B8] + (*(_DWORD *)STACK[0x2B0] & 0xA0C7FB4)) ^ v6) & 0x7FFFFFFF);
  LODWORD(v6) = v6 ^ (v6 >> 16);
  *(_DWORD *)(STACK[0x2E0] + v5) ^= v7 ^ *((_DWORD *)*(&off_10025FA20 + (a1 ^ 0x5CF))
                                         + ((-1690040139 * (_DWORD)v6) >> 24)) ^ *((_DWORD *)*(&off_10025FA20 + (a1 ^ 0x520))
                                                                                               + ((-1690040139 * (_DWORD)v6) >> 24)
                                                                                               + (v4 ^ 0x1F5)
                                                                                               - 1) ^ *((_DWORD *)*(&off_10025FA20 + (a1 ^ 0x515)) + ((-1690040139 * (_DWORD)v6) >> 24) - 3) ^ (146079744 * (_DWORD)v6) ^ (-1690040139 * (_DWORD)v6) ^ (-697817803 * ((-1690040139 * (_DWORD)v6) >> 24));
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (int)((((v4 ^ 0xFFFFFE0E) + v2 == 1793424262) * (((v4 - 385) | 0x403) + 43)) ^ v4))
                            - 8))();
}

uint64_t sub_10009CB80@<X0>(int a1@<W8>)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;

  *v1 = v1[623];
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8 * ((795 * (v3 - 1 == (((a1 + 655) | 0x10) ^ 0x20FBDB2B))) ^ (a1 + 923)))
                            - 8))();
}

uint64_t sub_10009CBCC@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;

  *(_DWORD *)(v2 + 4 * (v1 - 176935977)) = 176935977
                                                         - v1
                                                         + ((1566083941
                                                           * (*(_DWORD *)(v2 + 4 * (v1 - 176935978)) ^ (*(_DWORD *)(v2 + 4 * (v1 - 176935978)) >> 30))) ^ *(_DWORD *)(v2 + 4 * (v1 - 176935977)));
  v5 = 69008221 * ((0x42AE60BEBBCAF560 - ((v4 - 192) | 0x42AE60BEBBCAF560) + STACK[0x2C0]) ^ 0xEFCDD9A297975895);
  v6 = a1 - 863035190 + v5;
  *(_DWORD *)(v4 - 188) = v5 ^ 1;
  *(_DWORD *)(v4 - 184) = v6 + 18;
  *(_QWORD *)(v4 - 176) = 974479474 - v5;
  *(_DWORD *)(v4 - 152) = v5 + a1 + 2021362638;
  *(_QWORD *)(v4 - 160) = (v1 + 797543498) - v5;
  *(_DWORD *)(v4 - 168) = ((a1 - 863035190) ^ 0x1B) - v5;
  *(_DWORD *)(v4 - 164) = v6;
  v7 = ((uint64_t (*)(uint64_t))((char *)*(&off_10025FA20 + a1 - 917) - 8))(v4 - 192);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * *(int *)(v4 - 192)) - 4))(v7);
}

uint64_t sub_10009CCEC()
{
  unsigned int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((v0 < ((LODWORD(STACK[0x2F4]) - 671) ^ 0x3A1561A6u))
                                          * (((LODWORD(STACK[0x2F4]) + 237) | 0xF) - 789)) ^ (LODWORD(STACK[0x2F4]) - 671)))
                            - 8))();
}

uint64_t sub_10009CD28()
{
  unsigned int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((v0 > (STACK[0x280] & 0xFFF7D76F ^ 0x3A15678E))
                                          * ((STACK[0x290] & 0x15F4D7FD) + 134)) ^ (LODWORD(STACK[0x2F4]) - 671)))
                            - 8))();
}

uint64_t sub_10009CD80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  char v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BYTE *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;

  v15 = (_BYTE *)(v13 + ((v9 - 332) ^ 0xF2604FE0) + a7);
  v16 = -1690040139
      * ((*(_DWORD *)(*(_QWORD *)STACK[0x2B8] + (*(_DWORD *)STACK[0x2B0] & 0x30A5DB10)) ^ v15) & 0x7FFFFFFF);
  v17 = -1690040139 * (v16 ^ HIWORD(v16));
  v18 = v17 >> (((v9 + 83) & 0xD7u) + 3);
  LOBYTE(v18) = *(_BYTE *)(*(_QWORD *)(v10 + 8 * (v9 - 1640)) + v18 - 8) ^ ((v8 ^ v11) >> v7) ^ *(_BYTE *)(*(_QWORD *)(v10 + 8 * (v9 - 1673)) + v18 - 12) ^ *(_BYTE *)(*(_QWORD *)(v10 + 8 * (v9 - 1765)) + v18 - 7) ^ v17 ^ (-85 * v18);
  *v15 = v18;
  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * ((21 * (a7 - (v18 != 0) != v14)) ^ v9)) - 4))();
}

void sub_10009D294()
{
  JUMPOUT(0x10009C508);
}

uint64_t sub_10009D29C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t (*a40)(void))
{
  unint64_t v40;

  STACK[0x370] = v40;
  STACK[0x4B0] = STACK[0x2D8];
  return a40();
}

uint64_t sub_10009D2C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned int a70;
  char *a71;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  BOOL v76;
  int v77;

  v74 = (a3 - 1031);
  v75 = STACK[0x4D8];
  STACK[0x440] = *(_QWORD *)(v73 + 8 * (a3 - 1080));
  STACK[0x200] = ((2 * (_QWORD)&STACK[0x380]) & 0xC27BCA975B67BC30)
               + ((unint64_t)&STACK[0x380] ^ 0xE13DE54BADB3DE1FLL)
               + (v74 ^ 0x7FDFBFB5DFDFE590);
  a71 = (char *)&a9 - 0x611D9C9E8D6D6FELL;
  a70 = (a3 + 1708782411) & 0x9A260EDF;
  LODWORD(STACK[0x220]) = 13 * (a3 ^ 0x47C);
  LODWORD(STACK[0x278]) = a3 - 507153660;
  STACK[0x528] = ((67 * (((a3 - 1111) | 0x283) ^ 0x28Eu)) ^ 0x403) + v71;
  STACK[0x338] = v75;
  if (v75)
    v76 = v72 == 0;
  else
    v76 = 1;
  v77 = !v76;
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v73 + 8 * (int)((170 * v77) ^ v74)))(654, 67, (__n128)0);
}

uint64_t sub_10009D3E8(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;

  v11 = (char *)&STACK[0x5E0] + v8 - 0x611D9C9E8D6DD45;
  *(_DWORD *)v11 = 1604277838;
  *((_QWORD *)v11 + 1) = 0;
  *((_DWORD *)v11 + 4) = 1899249408;
  *((_DWORD *)v11 + 6) = 1528691550;
  *((_QWORD *)v11 + 4) = 0;
  *((_DWORD *)v11 + 10) = 1528691550;
  STACK[0x4F0] = (unint64_t)(v11 + 40);
  *((_QWORD *)v11 + 6) = 0;
  STACK[0x578] = (unint64_t)(v11 + 48);
  *((_DWORD *)v11 + 14) = 1528691550;
  STACK[0x490] = (unint64_t)(v11 + 56);
  *((_QWORD *)v11 + 8) = 0;
  STACK[0x3E0] = (unint64_t)(v11 + 64);
  *((_DWORD *)v11 + 18) = 1528691550;
  STACK[0x550] = (unint64_t)(v11 + 72);
  *((_QWORD *)v11 + 10) = 0;
  STACK[0x500] = (unint64_t)(v11 + 80);
  v11[88] = 76;
  *(_DWORD *)v9 = 1604277838;
  *(__n128 *)(v9 + 4) = a1;
  *(_DWORD *)(v9 + 20) = 0;
  *(_DWORD *)(v9 + 24) = 1528691550;
  *(_DWORD *)(v9 + 28) = 260442285;
  STACK[0x250] = v9 + 28;
  *(_DWORD *)(v9 + 232) = 260442285;
  STACK[0x248] = v9 + 232;
  *(__n128 *)(v9 + 436) = a1;
  *(__n128 *)(v9 + 452) = a1;
  *(_QWORD *)(v9 + 468) = 0;
  *(_QWORD *)(v9 + 1128) = 0xFEFEFEFEFEFEFEFELL;
  *(_QWORD *)(v9 + 1136) = 0xFEFEFEFEFEFEFEFELL;
  *(_QWORD *)(v9 + 1144) = 4278124286;
  *(__n128 *)(v9 + 1152) = a1;
  *(__n128 *)(v9 + 1168) = a1;
  *(__n128 *)(v9 + 1184) = a1;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 + 8 * ((173 * (((214 * ((v7 - 109) ^ 0x236u)) ^ 0x378) != 256)) ^ (v7 - 109)))
                                                                                                - 8))(566, 214, a4, a5, a6, a7, 888);
}

uint64_t sub_10009D528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  int v58;
  uint64_t v59;
  uint64_t v60;

  STACK[0x528] = v60 - 112;
  STACK[0x2E8] = *(_QWORD *)(v59 + 8 * (v58 ^ 0x44B)) - 4;
  return a9(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58);
}

uint64_t sub_10009D554(__n128 a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  _BOOL4 v7;

  *(_DWORD *)(v3 + 1424) = 105312208;
  *(_DWORD *)(v3 + 1428) = 1373296671;
  *(_QWORD *)(v3 + 1432) = v2;
  *(_QWORD *)(v3 + 1440) = v2;
  *(_DWORD *)(v3 + 1448) = v4;
  *(__n128 *)(v3 + 1452) = a1;
  v7 = (v1 ^ 0x303u ^ v5) == 16;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v6 + 8 * (((2 * v7) | (32 * v7)) ^ v1)) - 12))(771);
}

void sub_10009D5B8()
{
  JUMPOUT(0x10009D580);
}

uint64_t sub_10009D5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  int v76;
  _DWORD *v77;
  _BOOL4 v79;
  uint64_t v80;

  a65 = v67;
  v73 = ((_DWORD)v65 + 949) | 0x125u;
  *(_QWORD *)(v68 + 1516) = v66;
  *(_QWORD *)(v68 + 1524) = v66;
  *(_DWORD *)(v68 + 1532) = v69;
  *(_QWORD *)(v71 + 96) = v68;
  a63 = v68;
  *(_DWORD *)(v68 + 476) = 393861081;
  STACK[0x2D0] = STACK[0x338];
  STACK[0x2C8] = *(_QWORD *)(v72 + 8 * v65) + (v73 ^ 0xFFFFFFFFFFFFFACDLL);
  v74 = STACK[0x528];
  v75 = (char *)&a9 + STACK[0x528] - 0x611D9C9E8D6D765;
  STACK[0x2A0] = STACK[0x528];
  STACK[0x280] = v74 + 432;
  STACK[0x2D8] = (unint64_t)v75;
  STACK[0x240] = (unint64_t)(v75 + 392);
  STACK[0x210] = v71;
  STACK[0x290] = v71;
  v76 = v73 + 359;
  STACK[0x528] = STACK[0x280];
  LODWORD(STACK[0x468]) = -324345622;
  LODWORD(STACK[0x548]) = 1528691550;
  STACK[0x4A0] = 0;
  LODWORD(STACK[0x344]) = 1546372649;
  v77 = (_DWORD *)STACK[0x2D8];
  *v77 = a6;
  LODWORD(STACK[0x2C0]) = 84622533;
  LODWORD(STACK[0x2E0]) = 835750968;
  LODWORD(STACK[0x2E8]) = 262255941;
  LODWORD(STACK[0x2B0]) = (v76 ^ 0x51C6E670) + 1431412186;
  v79 = *v77 != (_DWORD)a6 || (_DWORD)a8 + 1 != (_DWORD)a8 + v76 - 508 - 1184;
  v80 = *(_QWORD *)(v72 + 8 * ((v79 * (17 * (v76 ^ 0x6DF) - 874)) ^ v76));
  LODWORD(STACK[0x2B8]) = -316789702;
  LODWORD(STACK[0x2A8]) = v70;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v80 - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57);
}

uint64_t sub_10009D754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  unsigned int v9;
  uint64_t v10;

  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8
                                              * (int)((((v9 + 2081776447) & 0x83EA9E73 ^ 0x54C) * (v8 == a8)) ^ v9))
                            - (v9 ^ 0x4A4)))();
}

uint64_t sub_10009D7A8()
{
  int v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((14
                                * (((v1 - 1528691547) & 0xFFFFFFFC) - LODWORD(STACK[0x2A8]) != ((3
                                                                                               * ((v0 + 745249052) & 0xD39466DB ^ 0x452)) ^ 0xA4E202E9))) ^ v0)))();
}

uint64_t sub_10009D80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  _BOOL4 v11;

  v11 = v6 != a6 && LODWORD(STACK[0x344]) - v8 == ((v7 - 1483) | 0x420) + 17679915;
  return (*(uint64_t (**)(void))(v9 + 8 * ((307 * v11) ^ v7)))();
}

uint64_t sub_10009D850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;

  return (*(uint64_t (**)(void))(v8 + 8 * ((307 * (v6 != a6 + v7 - 427 - 1184)) ^ v7)))();
}

uint64_t sub_10009D880(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;

  v13 = (_DWORD *)STACK[0x2D8];
  *v13 = v8 - 1;
  v13 += 2;
  v14 = &v13[6 * ((v9 - 427) ^ 0x8788F284) + 6 * v8];
  v15 = *v14;
  STACK[0x2D0] = *((_QWORD *)v14 + 1);
  LODWORD(STACK[0x344]) = v13[6 * (v8 - 2021067228) + 4];
  return ((uint64_t (*)(void))(*(_QWORD *)(v11
                                        + 8
                                        * ((73 * (*(_DWORD *)(v12 + (v15 + a4) * (uint64_t)v10 + 36) == a8)) | (v9 - 427)))
                            - ((16 * (v9 - 427)) ^ 0x4BD8u)
                            + 468))();
}

uint64_t sub_10009D948()
{
  int v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  _BOOL4 v6;

  v3 = LODWORD(STACK[0x344]) - 1235064947;
  v4 = v1 + ((59 * (v0 ^ 0x778)) ^ 0xB7703380);
  v5 = (v4 < 0x128E2DB6) ^ (v3 < 0x128E2DB6);
  v6 = v3 < v4;
  if (v5)
    v6 = v4 < 0x128E2DB6;
  return (*(uint64_t (**)(void))(v2 + 8 * ((240 * v6) ^ v0)))();
}

uint64_t sub_10009D9B8()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v4 = 460628867 * ((2120966109 - ((v3 - 192) | 0x7E6B5FDD) + ((v3 - 192) | 0x8194A022)) ^ 0xCD02225F);
  *(_QWORD *)(v3 - 144) = STACK[0x258];
  *(_QWORD *)(v3 - 192) = STACK[0x268];
  *(_QWORD *)(v3 - 152) = STACK[0x260];
  *(_QWORD *)(v3 - 160) = STACK[0x270];
  *(_DWORD *)(v3 - 164) = v0 - v4 - 89;
  *(_DWORD *)(v3 - 184) = v1 + v4 + ((24 * (v0 ^ 0x1CF) - 454555049) & 0x1B17F7F3 ^ 0xA942FDEC);
  *(_QWORD *)(v3 - 176) = STACK[0x2D0];
  v5 = ((uint64_t (*)(uint64_t))((char *)*(&off_10025FA20 + v0 - 461) - 4))(v3 - 192);
  return (*(uint64_t (**)(uint64_t, __n128))(v2 + 8 * ((61 * (*(_DWORD *)(v3 - 168) == 489733862)) ^ v0)))(v5, (__n128)0);
}

uint64_t sub_10009DADC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((v5 - 424) | 0x458 | (2
                                                               * (*(_DWORD *)(v8 + (v7 + a4) * (uint64_t)v4) != 17 * (((v5 - 424) | 0x458) ^ 0x49B) + 350555288))))
                            - (((v5 - 424) | 0x458u)
                             + 433)
                            + 1669))();
}

uint64_t sub_10009DB48()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((52 * (v0 == ((v1 - 534) ^ 0xEA1AEA86) + v2)) | v1))
                            - (v1 - 534)
                            + 1127))();
}

uint64_t sub_10009DB80()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((573 * (((v0 ^ 0x47B) & *(_DWORD *)(v4 + v2 * (uint64_t)v1 + 40)) == 0)) ^ (v0 - 667))))();
}

uint64_t sub_10009DBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11
                                        + 8
                                        * (int)((47
                                               * (*(_DWORD *)(v12 + v10 * (uint64_t)v9 + 36) != (((v8 ^ 0x2EF) - 1220) ^ (a8 - 328)))) ^ v8 ^ 0x2EF))
                            - v8
                            + 1135))();
}

uint64_t sub_10009DC30()
{
  int v0;
  uint64_t v1;
  int v2;
  _BOOL4 v4;

  v4 = v2 + 29781910 > (v0 ^ 0x5AB) - 1885228873 && v2 + 29781910 < SLODWORD(STACK[0x2E8]);
  return (*(uint64_t (**)(void))(v1 + 8 * ((844 * v4) ^ v0)))();
}

void sub_10009DC74()
{
  JUMPOUT(0x10009DB00);
}

uint64_t sub_10009DC7C@<X0>(int a1@<W3>, int a2@<W8>)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (((*(_DWORD *)(v6 + ((((v3 ^ 0x5CE) - 271) ^ (a1 + 345)) + v2) * (uint64_t)v4 + 36) != a2)
                                * ((((v3 ^ 0x5CE) - 246) | 0x10) - 406)) ^ v3 ^ 0x5CE)))();
}

uint64_t sub_10009DCD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  _BOOL4 v14;

  v14 = v8 == (((v9 - 415) | 0x1C8) ^ (v12 + 88)) && v11 != a8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((v14 * (v9 + 97)) ^ v9)) - 8))();
}

uint64_t sub_10009DD20(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((((*(_DWORD *)(v8 + (v7 + a4) * (uint64_t)v5 + 40) & 8) == ((v4 + 487) ^ 0x3BF))
                                * (v4 + 944)) ^ v4)))();
}

uint64_t sub_10009DD5C@<X0>(int a1@<W7>, int a2@<W8>)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  int v9;

  v6 = *(_DWORD *)(v5 + v2 * (uint64_t)v3 + 36);
  v8 = v6 + 603276937 > ((a2 - 924) | 0x18C) - 1311733138 && v6 + 603276937 < SLODWORD(STACK[0x2E0]);
  v9 = !v8;
  if (v6 == a1)
    v9 = 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((118 * v9) ^ a2)) - 8))();
}

uint64_t sub_10009DDC4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;

  if (v1)
    v5 = v4;
  else
    v5 = v2;
  return (*(uint64_t (**)(void))(v3 + 8 * (((v5 == v4) * (((v0 - 340) | 0x618) - 431)) ^ v0)))();
}

uint64_t sub_10009DE2C()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((((((v0 + 75460962) & 0xFB808FDA ^ 0x1DA) & v1) != 0) * (v0 ^ 0xA2)) ^ v0))
                            - 8))();
}

uint64_t sub_10009DE78@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;

  v7 = STACK[0x2D8];
  *(_DWORD *)(v7 + 392) = a1;
  *(_DWORD *)(v7 + 396) = STACK[0x548];
  *(_QWORD *)(v7 + 400) = STACK[0x4A0];
  *(_DWORD *)(v7 + 408) = 1604277838 - v2 + LODWORD(STACK[0x344]);
  *(_QWORD *)(v7 + 416) = STACK[0x2D0] + (v2 - 1546372649);
  v8 = (*(uint64_t (**)(unint64_t, unint64_t))(v6 + v4 * (uint64_t)v1 + 8))(STACK[0x290], STACK[0x240]);
  return (*(uint64_t (**)(__n128))(v5
                                           + 8
                                           * ((59
                                             * (v3 + 489734844 + v8 - ((((v3 + 616) | 0x33) + 979466585) & (2 * v8)) == 489735316)) ^ v3)))((__n128)0);
}

uint64_t sub_10009DF54()
{
  int v0;
  uint64_t v1;
  int v2;

  v2 = ((LODWORD(STACK[0x548]) - 1528691550) ^ 0x2B76FF7F5FF94EAFLL)
     + ((2 * (LODWORD(STACK[0x548]) - 1528691550)) & 0xBFF29D5E)
     - 0x2B76FF7E9CB7C7F0 != 3275851455;
  return (*(uint64_t (**)(void))(v1 + 8 * ((v2 | (v2 << 7)) ^ v0)))();
}

uint64_t sub_10009DFE8()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v5 = *(unsigned __int8 *)STACK[0x4A0]
     - (*(_BYTE *)(*(_QWORD *)(v4 + v2 * (uint64_t)v1 + 24) - 0x79A92BD4195FBC68) - 25);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((412
                                          * (((v5 << (((v0 - 19) | 2) - 114)) & 0x5EE26C96) + (v5 ^ 0x2F71364B) == 795948619)) ^ (v0 + 536)))
                            - 4))();
}

uint64_t sub_10009E0A0()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _BOOL4 v5;

  v5 = v0 < v1;
  if (v5 == (unint64_t)(v2 - 0x775C7B190AB8AB48) < 0xC34186BF)
    v5 = v2 - 0x775C7B190AB8AB48 < v0;
  return (*(uint64_t (**)(void))(v4 + 8 * ((((v3 ^ 0x5A9) - 227) * v5) ^ v3)))();
}

void sub_10009E0FC()
{
  JUMPOUT(0x10009E02CLL);
}

uint64_t sub_10009E114@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * ((((v2 + 624) ^ (v2 + 667)) * (a1 - v1 == 928816085)) ^ v2)))();
}

uint64_t sub_10009E158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  return (*(uint64_t (**)(void))(v11
                              + 8
                              * ((97 * (*(_DWORD *)(v12 + v10 * (uint64_t)v8 + 32) != a8 + ((v9 - 1182) | 0xC8) - 472)) ^ v9)))();
}

uint64_t sub_10009E190@<X0>(int a1@<W8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((((*(_DWORD *)STACK[0x2D8] - 2021067227) < 0x10)
                                * ((a1 - 1758509793) & 0x68D0BD7B ^ 0x7F7)) ^ a1)))();
}

uint64_t sub_10009E1E4@<X0>(int a1@<W8>)
{
  int v1;
  unsigned int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  _DWORD *v8;
  unint64_t v9;
  _BOOL4 v11;

  v7 = STACK[0x344];
  v8 = (_DWORD *)STACK[0x2D8];
  v9 = STACK[0x2D8] + 24 * v2;
  *(_DWORD *)(v9 + 8) = v6;
  *(_DWORD *)(v9 + 12) = v4;
  *(_QWORD *)(v9 + 16) = STACK[0x2D0];
  *(_DWORD *)(v9 + 24) = v7;
  *v8 = ((17 * (a1 ^ 0x19B)) ^ 0x472) + v1;
  v11 = v3 - 1724040937 > 655916715 || v3 - 1724040937 < SLODWORD(STACK[0x2B0]);
  return (*(uint64_t (**)(void))(v5 + 8 * (a1 ^ (790 * v11))))();
}

uint64_t sub_10009E258@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;

  STACK[0x2D0] = STACK[0x4A0];
  LODWORD(STACK[0x344]) = 1546372649;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((v2 == 489733862) * ((((a1 ^ 0x366) - 570) | 0x618) - 431)) ^ ((a1 ^ 0x366) - 230))))();
}

uint64_t sub_10009E290()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL4 v7;

  v5 = *(_DWORD *)(v4 + v2 * (uint64_t)v0 + 36) - 549263733;
  v7 = v5 < 1830693920 && v5 >= SLODWORD(STACK[0x2B8]);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((v7 * (((v1 - 197) ^ 0x9A) - 510)) ^ (v1 - 197)))
                            - ((v1 - 998) | 0x10u)
                            + 468))();
}

uint64_t sub_10009E32C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;
  _BOOL4 v12;

  v12 = *(_DWORD *)STACK[0x2D8] != a6 || v9 != a8 + v8 - 508 - 1184;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((v12 * (17 * (v8 ^ 0x6DF) - 874)) ^ v8)) - 4))();
}

uint64_t sub_10009E384()
{
  STACK[0x528] = STACK[0x2A0];
  return ((uint64_t (*)(void))STACK[0x2C8])();
}

uint64_t sub_10009E394(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((a3 + 383) ^ (1009 * (v3 == v5))))
                            - ((a3 - 1050) ^ 0x51)))();
}

void sub_10009E3C4()
{
  int v0;
  uint64_t v1;
  unint64_t *v2;

  v2 = (unint64_t *)STACK[0x578];
  STACK[0x290] = STACK[0x250];
  STACK[0x2D0] = *v2;
  STACK[0x2C8] = *(_QWORD *)(v1 + 8 * v0);
  JUMPOUT(0x10009D668);
}

uint64_t sub_10009E46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  int a70;
  uint64_t a71;
  uint64_t v71;
  unint64_t v72;

  *(_QWORD *)(a63 + 1560) = *(_QWORD *)STACK[0x500];
  *(_DWORD *)(a63 + 1552) = *(_DWORD *)STACK[0x550];
  v72 = STACK[0x210];
  *(_QWORD *)(*(_QWORD *)(STACK[0x210] + 96) + 488) = *(_QWORD *)(STACK[0x210] + 8);
  *(_DWORD *)(*(_QWORD *)(v72 + 96) + 480) = *(_DWORD *)v72;
  *(_BYTE *)(a71 + a65) = ((STACK[0x200] - 27) ^ 0xBA) * (STACK[0x200] - 10);
  return (*(uint64_t (**)(void))(v71 + 8 * a70))();
}

void sub_10009E520()
{
  JUMPOUT(0x10009E4E4);
}

uint64_t sub_10009E528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  STACK[0x380] = a9 + 104;
  v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))STACK[0x440];
  STACK[0x528] = v60 - 112;
  STACK[0x2E8] = *(_QWORD *)(v59 + 8 * ((v58 + 1031) ^ 0x44B)) - 4;
  return v61(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58);
}

uint64_t sub_10009E55C(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (((LODWORD(STACK[0x220]) + 1741) * (v3 == v5)) ^ (a3 - 944))) - 4))();
}

uint64_t sub_10009E588()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  unint64_t v4;

  v1 = STACK[0x220];
  v2 = LODWORD(STACK[0x220]) + 944;
  v3 = (LODWORD(STACK[0x220]) + 1894018608) & 0x8F1B957F;
  v4 = STACK[0x3A8];
  STACK[0x470] = STACK[0x3A8];
  STACK[0x4B8] = 0;
  LODWORD(STACK[0x534]) = 1528691550;
  STACK[0x540] = 0;
  LODWORD(STACK[0x434]) = 1528691550;
  STACK[0x4C0] = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * (int)((((v2 ^ 0x420) + v3) * (v4 != 0)) ^ v1)) - 4))();
}

uint64_t sub_10009E600@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((((*(_BYTE *)(a1 + 32) - *((_BYTE *)*(&off_10025FA20 + v1 - 1022) - 8)) == 187)
                                * ((v1 ^ 0x73E) - 609)) ^ (v1 + 496))))();
}

uint64_t sub_10009E680(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, unint64_t a6)
{
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8 * (((v7 == ((((v6 - 77) | v9) - 59) & 0xFC)) * a5) ^ v6))
                            - (((v6 + 211) | a4) ^ a6)))();
}

uint64_t sub_10009E6B8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((((*(_BYTE *)(v4 + 1 + a3) - *(_BYTE *)(v3 + 1)) == 187)
                                * ((v5 ^ a2) - 609)) ^ (v5 + 496))))();
}

uint64_t sub_10009E6F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  int v5;

  v5 = ((v3 ^ 0xD7) - 37 + 6 * (v3 ^ 0xD7) + *(_BYTE *)(a3 + a2) - **(_BYTE **)(a1 + 8 * (v3 ^ 0x4A4))) == 227;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((8 * v5) | (v5 << 6) | ((v3 ^ 0xAF) - 60))) - 8))();
}

uint64_t sub_10009E8CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * (((v6 == ((17 * (v5 ^ a4)) ^ a5)) * ((v5 ^ a4) + 1889)) ^ v5))
                            - 8))();
}

void sub_10009E8F8()
{
  JUMPOUT(0x10009E880);
}

uint64_t sub_10009E908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v5
                                                      + 8
                                                      * ((((*(_BYTE *)(a3 + a2)
                                                                           - **(_BYTE **)(a1 + 8
                                                                                             * ((v3 - 463) ^ 0x456))
                                                                           + (((v3 - 61) | 0x80) ^ 0x26)) != 94)
                                                        * v4) ^ (v3 - 279)))
                                          - 8))(769);
}

uint64_t sub_10009E9A8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((v6 == (v5 ^ a5)) * a1) ^ (v5 - 1007)))
                            - (v5 - 1043)
                            + 84))();
}

void sub_10009E9D8()
{
  JUMPOUT(0x10009E968);
}

uint64_t sub_10009E9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t (*a64)(uint64_t, uint64_t);
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v66 = (4 * v64) ^ 0xE74;
  v67 = a64(1576, 2940923044);
  STACK[0x4C0] = v67;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 + 8 * (((v67 == 0) * (((v66 - 86) | 0x650) ^ 0x6F9)) ^ v66)) - 4))(v67, v68, v69, v70, 3805275455, v71, v72, v73, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55);
}

uint64_t sub_10009EA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t (*a64)(uint64_t, uint64_t);
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;

  STACK[0x2A0] = v66;
  v67 = a64(1576, 3012117910);
  STACK[0x360] = v67;
  return ((uint64_t (*)(void))(*(_QWORD *)(v65 + 8 * ((245 * (v67 == 0)) ^ v64)) - (((v64 ^ 0x229u) + 109) ^ 0x4E8)))();
}

uint64_t sub_10009EAF4()
{
  int v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((501 * (v0 != ((29 * (v2 ^ 0x4ED)) ^ 0x1777C551))) ^ v2))
                            - 204 * (v2 ^ 0x4E3u)
                            + 600))();
}

uint64_t sub_10009EB60@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8 * ((11 * (v2 != (((a1 - 556) | 0x141) ^ v1 ^ ((a1 - 323) | 0x58)))) ^ a1))
                            - 12))();
}

uint64_t sub_10009EBB8()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((((v2 - 314) ^ 0x5D7) * (v1 == v0)) ^ v2)) - 12))();
}

uint64_t sub_10009EBF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;

  v61 = (((v59 | 0x173579D6) - (v59 & 0x173579D6)) ^ 0x69C129AA) * v53;
  *(_QWORD *)(v60 - 168) = a52;
  *(_QWORD *)(v60 - 160) = a53;
  *(_QWORD *)(v60 - 176) = v54;
  *(_DWORD *)(v60 - 192) = v57 - v61 - 145;
  *(_DWORD *)(v60 - 184) = v61 ^ 0x5769FB2C;
  v62 = ((uint64_t (*)(uint64_t))STACK[0x228])(v60 - 192);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v58
                                                      + 8
                                                      * (((*(_DWORD *)(v60 - 188) == v56 + (v57 ^ 0x146) - 63)
                                                        * (v55 ^ 0xC7)) ^ v57))
                                          - 12))(v62);
}

uint64_t sub_10009ECA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;

  v56 = 1543737703 * ((~((v55 - 192) | 0x395EF543) + ((v55 - 192) & 0x395EF543)) ^ 0xB8555AC0);
  *(_DWORD *)(v55 - 192) = v53 - v56 - 145;
  *(_DWORD *)(v55 - 184) = v56 ^ 0x5769FB2C;
  *(_QWORD *)(v55 - 176) = 0x4AB8828D926C7A6CLL;
  *(_QWORD *)(v55 - 168) = a52;
  *(_QWORD *)(v55 - 160) = a53;
  v57 = ((uint64_t (*)(uint64_t))STACK[0x228])(v55 - 192);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v54
                                                      + 8
                                                      * (int)(((*(_DWORD *)(v55 - 188) == 489733862)
                                                             * ((v53 + 1528650566) & 0xA4E2A37F ^ 0xC7)) ^ v53))
                                          - 12))(v57);
}

uint64_t sub_10009ED98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;

  v58 = ((v57 + 742264459 - 2 * ((v57 - 192) & 0x2C3E0F4B)) ^ 0x52CA5F37) * v53;
  *(_QWORD *)(v57 - 176) = v54;
  *(_QWORD *)(v57 - 168) = a52;
  *(_DWORD *)(v57 - 192) = v56 - v58 - 145;
  *(_DWORD *)(v57 - 184) = v58 ^ 0x5769FB2E;
  *(_QWORD *)(v57 - 160) = a53;
  v59 = ((uint64_t (*)(uint64_t))STACK[0x228])(v57 - 192);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v55
                                                      + 8
                                                      * (((*(_DWORD *)(v57 - 188) == 489733862) * (v56 ^ 0x181)) ^ v56))
                                          - 12))(v59);
}

uint64_t sub_10009EE70@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v44;
  int v45;
  uint64_t (*v46)(uint64_t);
  unint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int v55;

  v53 = (((v51 | 0xD09C481E) - (v51 & 0xD09C481E)) ^ 0xAE681862) * v45;
  *(_QWORD *)(v52 - 176) = v44;
  *(_QWORD *)(v52 - 168) = a43;
  *(_DWORD *)(v52 - 184) = a1 ^ v53;
  *(_DWORD *)(v52 - 192) = v48 - v53 + 169;
  *(_QWORD *)(v52 - 160) = a44;
  v54 = v46(v52 - 192);
  v55 = *(_DWORD *)(v52 - 188);
  STACK[0x538] = v47;
  return ((uint64_t (*)(uint64_t, __n128))(*(_QWORD *)(v50 + 8 * ((1249 * (v55 == v49)) ^ v48))
                                                  - (((v48 - 63) | 0x473u) ^ 0x47FLL)))(v54, (__n128)0);
}

void sub_10009EF48()
{
  JUMPOUT(0x10009EF58);
}

void sub_10009EF64(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  STACK[0x440] = v1 + *(_QWORD *)(v2 + 8 * a1) - 112;
  JUMPOUT(0x10009D3ACLL);
}

uint64_t sub_10009EF98()
{
  int v0;
  unint64_t v1;
  uint64_t v2;

  STACK[0x538] = v1;
  return ((uint64_t (*)(unint64_t))(*(_QWORD *)(v2
                                                               + 8
                                                               * ((55 * (STACK[0x540] != 0)) ^ (((v0 + 1057) | 0x13)
                                                                                              - 801)))
                                                   - 4))(STACK[0x540]);
}

uint64_t sub_10009F9C4()
{
  int v0;
  uint64_t v1;

  ((void (*)(void))STACK[0x230])();
  return (*(uint64_t (**)(void))(v1 + 8 * ((119 * (STACK[0x4B8] == 0)) ^ (v0 + 451))))();
}

uint64_t sub_10009F9F0()
{
  int v0;
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1 + 8 * ((1178 * (STACK[0x4C0] != 0)) ^ (v0 - 281))))();
}

uint64_t sub_10009FA14()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((91 * (STACK[0x360] != 0)) ^ (v0 - 230))) - 4))();
}

uint64_t sub_10009FA48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6
                                                                                          + 8
                                                                                          * ((124
                                                                                            * (((v5 == 489733862) ^ (v4 + 80)) & 1)) ^ (v4 - 948)))
                                                                              - 4))(a1, a2, a3, a4, 3805275455);
}

uint64_t sub_10009FA88()
{
  int v0;
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1 + 8 * ((119 * (STACK[0x4B8] == 0)) ^ (v0 + 451))))();
}

uint64_t sub_10009FAAC()
{
  int v0;
  uint64_t v1;

  ((void (*)(void))STACK[0x230])();
  return (*(uint64_t (**)(void))(v1 + 8 * ((1178 * (STACK[0x4C0] != 0)) ^ (v0 - 281))))();
}

uint64_t sub_10009FAD8()
{
  int v0;
  uint64_t v1;

  ((void (*)(void))STACK[0x230])();
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((91 * (STACK[0x360] != 0)) ^ (v0 - 230))) - 4))();
}

uint64_t sub_10009FB14()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  v3 = ((uint64_t (*)(void))STACK[0x230])();
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * ((124 * (((v1 == 489733862) ^ (v0 + 80)) & 1)) ^ (v0 - 948)))
                                          - 4))(v3);
}

uint64_t sub_10009FB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;

  LODWORD(STACK[0x464]) = 1863051433;
  LODWORD(STACK[0x354]) = 128;
  v46 = STACK[0x3A8];
  v47 = STACK[0x510];
  v48 = STACK[0x428];
  v49 = 2078219279 * ((~((v45 - 192) | 0xAFF9E70E) + ((v45 - 192) & 0xAFF9E70E)) ^ 0x8AFC8E85);
  *(_DWORD *)(v45 - 132) = v49 + v43 + 925;
  *(_QWORD *)(v45 - 128) = v47;
  *(_QWORD *)(v45 - 184) = 0;
  *(_QWORD *)(v45 - 176) = a43;
  *(_QWORD *)(v45 - 152) = 0;
  *(_QWORD *)(v45 - 144) = v48;
  *(_DWORD *)(v45 - 168) = 726518907 - v49;
  *(_QWORD *)(v45 - 160) = v46 + 0x2DB44D49A49B034ELL;
  *(_QWORD *)(v45 - 192) = v46 + 0x2DB44D49A49B023ELL;
  v50 = ((uint64_t (*)(uint64_t))STACK[0x2E8])(v45 - 192);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v44
                                                      + 8
                                                      * (((*(_DWORD *)(v45 - 136) == 489733862) * ((v43 ^ 0xD2) + 1208)) ^ v43))
                                          - ((67 * (v43 ^ 0xD2u)) ^ 0x477)))(v50);
}

uint64_t sub_10009FC6C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((v0 - STACK[0x4D0] > 0x1F) * ((v1 + 770) ^ 0x4C7)) ^ (v1 + 770)))
                            - ((2 * (v1 + 770)) ^ 0x4D8u)
                            + 762))();
}

uint64_t sub_10009FCC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;

  v5 = v3 + 127 - v1;
  v6 = vrev64q_s8(*(int8x16_t *)(v5 - 15));
  v7 = vextq_s8(v6, v6, 8uLL);
  v8 = vrev64q_s8(*(int8x16_t *)(v5 - 31));
  v9 = vextq_s8(v8, v8, 8uLL);
  v10 = a1 + 127 - v1;
  v11.i64[0] = 0xFCFCFCFCFCFCFCFCLL;
  v11.i64[1] = 0xFCFCFCFCFCFCFCFCLL;
  v12.i64[0] = 0xFEFEFEFEFEFEFEFELL;
  v12.i64[1] = 0xFEFEFEFEFEFEFEFELL;
  v13 = vrev64q_s8(vaddq_s8(vsubq_s8(v7, vandq_s8(vaddq_s8(v7, v7), v11)), v12));
  *(int8x16_t *)(v10 - 15) = vextq_s8(v13, v13, 8uLL);
  v14 = vrev64q_s8(vaddq_s8(vsubq_s8(v9, vandq_s8(vaddq_s8(v9, v9), v11)), v12));
  *(int8x16_t *)(v10 - 31) = vextq_s8(v14, v14, 8uLL);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (((v1 != 96) * ((v2 + 258) ^ 0x239)) ^ v2)) - 4))();
}

uint64_t sub_10009FD54@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(a1 + ((v1 << 6) ^ 0xFFFFFFFFBFF0DF04) + v3) = *(_BYTE *)(v5
                                                                                    + ((v1 << 6) ^ 0xFFFFFFFFBFF0DF04)
                                                                                    + v3)
                                                                         - ((2
                                                                           * *(_BYTE *)(v5
                                                                                      + ((v1 << 6) ^ 0xFFFFFFFFBFF0DF04)
                                                                                      + v3)) & 0xFC)
                                                                         - 2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (((v3 - 1 != v4) * v2) ^ v1)) - 4))();
}

uint64_t sub_10009FDA4()
{
  int v0;
  uint64_t v1;
  int v2;

  LODWORD(STACK[0x56C]) = v2;
  return (*(uint64_t (**)(void))(v1
                              + 8 * ((330 * (*(_DWORD *)(STACK[0x238] + 360) - 775263488 < (v0 ^ 0x73u) - 1141)) ^ v0)))();
}

uint64_t sub_10009FDF4@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  char *v64;
  unint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v67;
  int v68;
  uint64_t v69;

  v54 = (*(uint64_t (**)(_QWORD, _QWORD, unint64_t))(v48 + 8 * (v49 ^ 0x421)))(LODWORD(STACK[0x54C]), (a1 + 1), STACK[0x408]);
  v61 = (v54 ^ 0x67FDECFF) + (v49 ^ 0xBD67D3DB) + ((2 * v54) & 0xCFFBD9FE);
  v62 = STACK[0x2F4];
  if (v61 == 627426522)
  {
    v64 = (char *)&STACK[0x5E0] + v52 + ((v62 - 103) | 0x280u) - 0x611D9C9E8D6DD45;
    v65 = (unint64_t)(v64 - 3500);
    STACK[0x388] = (unint64_t)(v64 - 3500);
    STACK[0x2D8] = (unint64_t)(v64 - 3272);
    LODWORD(STACK[0x414]) = 1071099136;
    v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 + 8 * ((3223 * (v64 != (char *)3252)) ^ (v62 + 106))) - ((271 * (v62 ^ 0x471u)) ^ 0x21ALL));
    STACK[0x528] = v52 - 192;
    STACK[0x318] = 0;
    LODWORD(STACK[0x51C]) = 1528691550;
    STACK[0x2C8] = STACK[0x4A8];
    STACK[0x2E0] = v65;
    return v66(v54, v55, v56, v57, 3805275455, v58, v59, v60, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12,
             a13,
             a14,
             a15,
             a16,
             a17,
             a18,
             a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48);
  }
  else if (v61 == 895861981)
  {
    LODWORD(STACK[0x56C]) = -489691682;
    return ((uint64_t (*)(void))(*(_QWORD *)(v51
                                          + 8
                                          * (((((v62 - 50) ^ (STACK[0x3C0] == 0)) & 1) * (v62 ^ 0x47F)) | (v62 - 818)))
                              - 8))();
  }
  else
  {
    v67 = 268847287 * ((((v53 - 192) | 0x51786A13) + (~(v53 - 192) | 0xAE8795EC)) ^ 0xAED27B3A);
    *(_DWORD *)(v53 - 192) = (v61 - ((2 * v61 + 892630604) & v50) - 137692660) ^ v67;
    *(_QWORD *)(v53 - 184) = a23;
    *(_DWORD *)(v53 - 176) = v67 + v62 + 893;
    v68 = v62;
    v69 = sub_10008AAFC((_DWORD *)(v53 - 192));
    return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v51
                                                        + 8
                                                        * (((((v68 - 50) ^ (STACK[0x3C0] == 0)) & 1)
                                                          * (v68 ^ 0x47F)) | (v68 - 818)))
                                            - 8))(v69);
  }
}

uint64_t sub_1000A0544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;

  v66 = ((uint64_t (*)(uint64_t))STACK[0x230])(a63);
  STACK[0x528] = STACK[0x2A0] - 1824;
  LODWORD(STACK[0x56C]) = v64;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v65
                                                      + 8
                                                      * (((((v63 - 50) ^ (STACK[0x3C0] == 0)) & 1)
                                                        * (v63 ^ 0x47F)) | (v63 - 818)))
                                          - 8))(v66);
}

uint64_t sub_1000A05AC()
{
  int v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (((LODWORD(STACK[0x56C]) != v2) * ((v0 + 101) ^ 0x371)) ^ v0)) - 8))();
}

void sub_1000A05E4()
{
  JUMPOUT(0x1000A05F0);
}

uint64_t sub_1000A0654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,int a48,uint64_t a49,uint64_t a50)
{
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;

  v54 = 69008221 * ((((v53 - 192) | 0xE9AA6CBB) + (~(v53 - 192) | 0x16559344)) ^ 0x3A083EB0);
  *(_DWORD *)(v53 - 188) = LODWORD(STACK[0x49C]) - v54 - 294932327;
  *(_QWORD *)(v53 - 184) = a50;
  *(_DWORD *)(v53 - 152) = v54 + a48 - 837498797;
  *(_QWORD *)(v53 - 168) = a45;
  *(_QWORD *)(v53 - 160) = a46;
  *(_DWORD *)(v53 - 176) = (v50 + 88) ^ v54;
  v55 = (*(uint64_t (**)(uint64_t))(v51 + 8 * (v50 - 192)))(v53 - 192);
  v56 = *(_DWORD *)(v53 - 192);
  LODWORD(STACK[0x4CC]) = v56;
  return (*(uint64_t (**)(uint64_t))(v52 + 8 * (((v56 == 489733862) * (23 * (v50 ^ 0x154) + 421)) ^ v50)))(v55);
}

uint64_t sub_1000A0740()
{
  int v0;
  uint64_t v1;

  STACK[0x3A0] = STACK[0x3E8];
  LODWORD(STACK[0x520]) = STACK[0x574];
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((LODWORD(STACK[0x49C]) - 775263487) < 2) ^ ((v0 + 189) | 0x32)))
                            - ((((((v0 + 189) | 0x32) - 178) | 0x51u) + 790) ^ 0x47FLL)))();
}

void sub_1000A079C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LODWORD(STACK[0x4CC]) = a5 - 54;
  sub_1000A7948(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1000A07A8()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (((LODWORD(STACK[0x49C]) - 775263487) < 2) ^ v0))
                            - ((((v0 - 178) | 0x51u) + 790) ^ 0x47FLL)))();
}

uint64_t sub_1000A07E8@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;

  v52 = STACK[0x3A0];
  v53 = STACK[0x574];
  v54 = 268847287 * ((((v51 - 192) | 0x63168F3F) - ((v51 - 192) & 0x63168F3F)) ^ 0x9CBC9E17);
  *(_DWORD *)(v51 - 136) = v48 - v54 - ((((v49 + 741) | 0x31) + 2 * v48 + 596955537) & 0x51D99EAE) - 88655271;
  *(_QWORD *)(v51 - 144) = a48;
  *(_DWORD *)(v51 - 168) = -268847287 * ((((v51 - 192) | 0x63168F3F) - ((v51 - 192) & 0x63168F3F)) ^ 0x9CBC9E17)
                         + 1617030143 * v53
                         + 1155257572;
  *(_DWORD *)(v51 - 152) = v49 - v54 + 1695027103;
  *(_QWORD *)(v51 - 160) = v52;
  *(_QWORD *)(v51 - 192) = a47;
  *(_QWORD *)(v51 - 176) = a1;
  v55 = sub_1000AAA74(v51 - 192);
  v56 = *(_DWORD *)(v51 - 184);
  LODWORD(STACK[0x4CC]) = v56;
  return (*(uint64_t (**)(uint64_t))(v50 + 8 * ((1735 * (v56 == 489733862)) ^ v49)))(v55);
}

uint64_t sub_1000A08F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,int a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;

  v53 = STACK[0x520];
  v54 = *(_DWORD *)(STACK[0x238] + 52) + 1294313647;
  v55 = 1224239923 * ((((v52 - 192) | 0xAFEE53DD) - ((v52 - 192) & 0xAFEE53DD)) ^ 0x5D5DAE0A);
  *(_QWORD *)(v52 - 184) = a49;
  *(_DWORD *)(v52 - 176) = v54 ^ v55;
  *(_DWORD *)(v52 - 172) = v55 + v50 - 300;
  *(_DWORD *)(v52 - 148) = ((a42 ^ 0x9A17DFF1)
                          + 1941831152
                          + (((v50 + 755) | 0x23) ^ (2 * a42) & 0xBBE4AEBC ^ (((v50 + 755) ^ 0x717) - 1950351064))) ^ v55;
  *(_QWORD *)(v52 - 168) = &STACK[0x5D0];
  *(_QWORD *)(v52 - 160) = v49;
  *(_DWORD *)(v52 - 192) = (v53 ^ 0x75F7ABFF) - 272236544 + ((2 * v53) & 0xEBEF57FE) + v55 + 2744320;
  v56 = ((uint64_t (*)(uint64_t))((char *)*(&off_10025FA20 + v50 - 196) - 4))(v52 - 192);
  v57 = *(_DWORD *)(v52 - 152);
  LODWORD(STACK[0x4CC]) = v57;
  return (*(uint64_t (**)(uint64_t))(v51 + 8 * ((1197 * (v57 == 489733862)) ^ v50)))(v56);
}

uint64_t sub_1000A0A50()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((((v1 - 1305470937) & 0x4DCFE7F5) - 833)
                                          * ((v0 - 775263488) > 0xFFFFFFFD)) ^ v1))
                            - 12))();
}

void sub_1000A0A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,int a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,unsigned int *a62,void (*a63)(_QWORD, uint64_t, uint64_t))
{
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  unint64_t v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;

  v69 = STACK[0x2C8];
  if (LODWORD(STACK[0x2C8]) == 360397997)
  {
    ((void (*)(void))(*(_QWORD *)(v67
                                + 8
                                * ((38 * (LODWORD(STACK[0x2C0]) - 183363313 < ((v63 + 330) ^ 0x5BEu))) | (v63 + 918)))
                    - 12))();
  }
  else if (v69 == 91962538)
  {
    v78 = v63 ^ 0x2BA;
    v79 = v63 - 193;
    a63(*a62, v64, v65);
    STACK[0x3A0] = 0;
    LODWORD(STACK[0x520]) = 0;
    v80 = STACK[0x508];
    v81 = *(_DWORD *)(STACK[0x238] + 52) + 1069122194;
    v82 = 3804331 * ((((2 * (v68 - 192)) | 0x4D2722E6) - (v68 - 192) + 1500278413) ^ 0xD846B485);
    v83 = v82 + (LODWORD(STACK[0x3BC]) ^ 0xBF7FCF1F) + ((2 * LODWORD(STACK[0x3BC])) & 0x7EFF9E3E) + 1306917871;
    *(_DWORD *)(v68 - 168) = LODWORD(STACK[0x2F4]) - v82 - 1054;
    *(_DWORD *)(v68 - 164) = v83;
    *(_DWORD *)(v68 - 152) = (v66 & 0xBA8EDEE2 ^ 0x8A8A1042)
                           - v82
                           + ((v78 + 2147481910) & a42 ^ 0x1AA2E7DE)
                           + 1727840192;
    *(_DWORD *)(v68 - 192) = v81 ^ v82;
    *(_QWORD *)(v68 - 160) = &STACK[0x1900];
    *(_QWORD *)(v68 - 184) = a49;
    *(_QWORD *)(v68 - 176) = v80;
    v84 = ((uint64_t (*)(uint64_t))((char *)*(&off_10025FA20 + LODWORD(STACK[0x2F4]) - 985) - 12))(v68 - 192);
    v85 = *(_DWORD *)(v68 - 188);
    LODWORD(STACK[0x4CC]) = v85;
    (*(void (**)(uint64_t))(v67 + 8 * ((1906 * (v85 == 489733862)) ^ v79)))(v84);
  }
  else
  {
    LODWORD(STACK[0x2C8]) = v69;
    v70 = 268847287 * ((((v68 - 192) | 0xB5A806F) - (v68 - 192) + ((v68 - 192) & 0xF4A57F90)) ^ 0xF4F09147);
    *(_DWORD *)(v68 - 176) = v70 + v63 + 893;
    *(_QWORD *)(v68 - 184) = a29;
    *(_DWORD *)(v68 - 192) = (v69 - ((2 * v69 + 889816748) & 0x3A617DCC) + 397771324) ^ v70;
    v71 = sub_10008AAFC((_DWORD *)(v68 - 192));
    sub_1000A7948(v71, v72, v73, v74, 3805275455, v75, v76, v77, a9);
  }
}

uint64_t sub_1000A3FA8()
{
  int v0;
  int v1;
  unsigned int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((v0 - 775263487 < (v1 ^ v2) - 1137) * ((2 * v1) ^ 0xDBE)) ^ v1))
                            - 4))();
}

uint64_t sub_1000A3FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t (*a27)(uint64_t),uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  int v63;

  v59 = v55 ^ 0xB7E;
  v60 = STACK[0x508];
  v61 = 2078219279 * ((v58 - 192 - 2 * ((v58 - 192) & 0x177082E3) + 393249507) ^ 0xCD8A1497);
  *(_DWORD *)(v58 - 132) = v61
                         + (((v55 ^ 0xB7E) - 1269050098) & 0x4BA427B7)
                         + (LODWORD(STACK[0x3BC]) ^ 0xEAFDFECF)
                         + ((2 * LODWORD(STACK[0x3BC])) & 0xD5FBFD9E)
                         + 1442526218;
  *(_DWORD *)(v58 - 128) = v61 + (v55 ^ 0xB7E) - 1337;
  *(_QWORD *)(v58 - 184) = v60;
  *(_QWORD *)(v58 - 176) = a54;
  *(_QWORD *)(v58 - 160) = a28;
  LOBYTE(STACK[0x1998]) = 15 * ((v58 + 64 - 2 * ((v58 + 64) & 0xE3) - 29) ^ 0x97) + 81;
  *(_QWORD *)(v58 - 144) = a42;
  *(_DWORD *)(v58 - 152) = (v56 + 939875877 + (v55 ^ 0xB7E) - 633) ^ v61;
  *(_QWORD *)(v58 - 192) = a55;
  v62 = a27(v58 - 192);
  v63 = *(_DWORD *)(v58 - 168);
  LODWORD(STACK[0x4CC]) = v63;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v57
                                                      + 8
                                                      * (((4 * (v63 != 489733862)) | (16 * (v63 != 489733862))) ^ v59))
                                          - 8))(v62);
}

uint64_t sub_1000A4104(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  BOOL v4;

  v3 = STACK[0x508];
  v4 = LODWORD(STACK[0x3BC]) == 0;
  STACK[0x328] = LODWORD(STACK[0x3BC]);
  return ((uint64_t (*)(uint64_t, unint64_t))(*(_QWORD *)(v2
                                                                        + 8
                                                                        * ((v1 + 440) | (4
                                                                                       * ((v4 ^ (v1 + 63) ^ 0xDD) & 1))))
                                                            - 8))(a1, v3);
}

uint64_t sub_1000A4140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,unsigned int *a61,void (*a62)(_QWORD, uint64_t, _QWORD),uint64_t a63)
{
  uint64_t (*a68)(uint64_t);
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;

  v72 = v68 + 193;
  a62(*a61, a2, 0);
  v73 = LODWORD(STACK[0x4CC]);
  v74 = 235795823 * (v69 ^ 0x8B0BAFE94AD4959);
  *(_DWORD *)(v71 - 172) = ((v72 - 1962335484) & 0xBF2B3FA3) - v74;
  v75 = v72 - 1962335484 - v74;
  *(_DWORD *)(v71 - 192) = v75;
  *(_DWORD *)(v71 - 184) = v75 + 56;
  *(_DWORD *)(v71 - 180) = v74;
  *(_QWORD *)(v71 - 168) = v73 - v74;
  *(_QWORD *)(v71 - 160) = v74 ^ 0xE2CFE53CLL;
  *(_DWORD *)(v71 - 176) = (v72 - 1689052641) ^ v74;
  v76 = a68(v71 - 192);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v70 + 8 * *(int *)(v71 - 188)) - 12))(v76);
}

uint64_t sub_1000A42FC()
{
  int v0;
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(STACK[0x238] + 56);
  *(_DWORD *)(STACK[0x238] + 56) = v2 + 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((1948 * (v2 - 733061818 < ((35 * (v0 ^ 0x477)) ^ 0xFFFFFF76))) ^ (v0 - 999)))
                            - 12))();
}

void sub_1000A4354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void (*a24)(uint64_t),uint64_t a25,uint64_t a26)
{
  int v26;
  int v27;
  uint64_t v28;

  *(_DWORD *)(v28 - 192) = (v26 - 2024873223) ^ (69008221
                                               * ((((v28 - 192) | 0x54517644) - ((v28 - 192) & 0x54517644)) ^ 0x87F3244E));
  sub_1000AADE8((_DWORD *)(v28 - 192));
  *(_QWORD *)(v28 - 184) = a26;
  *(_QWORD *)(v28 - 168) = a25;
  *(_DWORD *)(v28 - 160) = (v26 + 883) ^ (((v28 - 192 - 2 * ((v28 - 192) & 0x9BD09A5) + 163383717) ^ 0xEE882BCD) * v27);
  LOBYTE(STACK[0x1970]) = ((v28 + 64 - 2 * ((v28 + 64) & 0xA5) - 91) ^ 0xCD) * v27 + 0x80;
  a24(v28 - 192);
  JUMPOUT(0x10009BFF0);
}

uint64_t sub_1000A4418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,int a48)
{
  int v48;
  unsigned int v49;
  uint64_t v50;

  return (*(uint64_t (**)(void))(v50
                              + 8
                              * ((1390
                                * ((LODWORD(STACK[0x4E8]) ^ v48) != a48
                                                                  - 1683336269
                                                                  + ((67 * (v49 ^ 0x3A3) - 1105) | 0x451))) ^ v49)))();
}

void sub_1000A446C()
{
  int v0;

  LODWORD(STACK[0x4CC]) = v0 - 135;
  JUMPOUT(0x1000A4260);
}

uint64_t sub_1000A447C@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8 * ((21 * (((a1 == v2) ^ (v1 + 108)) & 1)) | (v1 + 365)))
                            - 4))();
}

uint64_t sub_1000A44B8@<X0>(int a1@<W1>, char a2@<W8>)
{
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((4083 * ((a2 & 0x18) == a1 - 807 + a1 - 829 - 2300)) ^ a1)) - 8))();
}

uint64_t sub_1000A44F0@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 - 7 + (v3 + v2 + v4 - v5)) = *(_QWORD *)(v7 - 7 + (v3 + v2 + v4 - v5));
  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((237 * (((((v6 - 1061) | 0x400) - 1132) & a2) - v5 != 8)) ^ ((v6 - 1061) | 0x400)))
                            - (((((v6 - 1061) | 0x400) - 836) | 0x44u) ^ 0x16CLL)))();
}

void sub_1000A455C()
{
  JUMPOUT(0x1000A4530);
}

uint64_t sub_1000A4564@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((((v1 ^ 0x517) - 904) * (a1 != v2)) ^ v1)) - 12))();
}

void sub_1000A4590(unint64_t a1)
{
  int v1;

  STACK[0x318] = a1;
  LODWORD(STACK[0x51C]) = v1;
  JUMPOUT(0x1000A45ACLL);
}

void sub_1000A4668()
{
  JUMPOUT(0x1000A462CLL);
}

uint64_t sub_1000A4670()
{
  int v0;
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;

  v3 = ((uint64_t (*)(void))STACK[0x230])();
  LODWORD(STACK[0x5A0]) = v0;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1
                                                      + 8
                                                      * ((461
                                                        * (v0 == ((v2 - 1724976185) & 0x66D10DFF ^ 0x1D30BE00)
                                                               + v2
                                                               + 455)) ^ v2))
                                          - 12))(v3);
}

#error "1000A511C: call analysis failed (funcsize=120)"

uint64_t sub_1000A46F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 + 8 * ((1815 * (STACK[0x3B0] != 0)) ^ (v4 - 597)))
                                                                                       - 4))(STACK[0x3B0], a2, a3, a4, 3805275455);
}

uint64_t sub_1000A4730(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(a1 + (v2 - 1560111156)) = *(_BYTE *)(v3 + (v2 - 1560111156));
  return (*(uint64_t (**)(void))(v4 + 8 * (((v2 != 1560111156) * (((2 * v1) ^ 0x860) - 121)) ^ (v1 - 530))))();
}

uint64_t sub_1000A477C()
{
  char v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((13 * ((v0 & 1) == ((5 * (v2 ^ 0x432)) ^ 0x145))) ^ (v2 + 914)))
                            - 4))();
}

uint64_t sub_1000A47B8@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (((a1 ^ 0x14C) * ((v2 ^ v3) > 0x200)) ^ a1))
                            - (a1 + 814)
                            + 1135))();
}

uint64_t sub_1000A47FC@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((673 * ((a1 ^ 0x140u) * v3 + 4 == v2 + v1)) | a1 ^ 9)) - 4))();
}

uint64_t sub_1000A4848@<X0>(int a1@<W8>)
{
  int v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  void (*v10)(uint64_t);
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  void (*v15)(uint64_t);
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t);
  unsigned int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;

  v7 = (a1 - 252) | 0x423;
  v2[31] = 0xE2E16C805CF9DD2;
  v2[32] = v2 + 33;
  v2[65] = 0xE2E16C805CF9DD2;
  v2[66] = v2 + 67;
  STACK[0x2A0] = (unint64_t)v2 + 0x2DB44D49A49B0236;
  v2[99] = 0xE2E16C805CF9DD2;
  v2[100] = v2 + 101;
  STACK[0x2B0] = (unint64_t)v2 + 0x2DB44D49A49B0346;
  v2[133] = 0xE2E16C805CF9DD2;
  v2[134] = v2 + 135;
  STACK[0x2B8] = (unint64_t)v2 + 0x2DB44D49A49B0456;
  v2[167] = 0xE2E16C805CF9DD2;
  v2[168] = v2 + 169;
  STACK[0x2C0] = (unint64_t)v2 + 0x2DB44D49A49B0566;
  v8 = STACK[0x318] + 4;
  STACK[0x290] = v8;
  LODWORD(STACK[0x2A8]) = v1;
  LODWORD(STACK[0x2E8]) = 2 * v5;
  LODWORD(STACK[0x2D0]) = a1 + 1009;
  v9 = 460628867 * ((v6 - 956244809 - 2 * ((v6 - 192) & 0xC700DD77)) ^ 0x8B965F0A);
  *(_DWORD *)(v6 - 192) = a1 + 1009 + v9;
  *(_DWORD *)(v6 - 184) = ((v5 ^ 0x8B4252D9) + 2142224360 + ((2 * v5) & 0x2CE5D87E ^ 0x2861584C)) ^ v9;
  *(_QWORD *)(v6 - 176) = v8;
  *(_QWORD *)(v6 - 168) = (char *)v2 + 0x2DB44D49A49B0126;
  v10 = (void (*)(uint64_t))((char *)*(&off_10025FA20 + (a1 ^ 0x165)) - 4);
  v10(v6 - 192);
  v11 = 460628867 * ((2 * ((v6 - 192) & 0x5BD9D9B8) - (v6 - 192) + 606479941) ^ 0x68B0A438);
  v12 = STACK[0x2D0];
  v13 = ((STACK[0x2E8] & 0xFECFDC5E ^ 0x3A415C4C) + (v5 ^ v7 ^ 0x625754BA) - 1766146568) ^ v11;
  *(_DWORD *)(v6 - 192) = LODWORD(STACK[0x2D0]) + v11;
  *(_DWORD *)(v6 - 184) = v13;
  v14 = STACK[0x290] + v3;
  STACK[0x290] = v14;
  *(_QWORD *)(v6 - 176) = v14;
  *(_QWORD *)(v6 - 168) = STACK[0x2A0];
  v10(v6 - 192);
  v15 = v10;
  LODWORD(v10) = STACK[0x2E8];
  v16 = 460628867 * ((-931669370 - ((v6 - 192) | 0xC877DA86) + ((v6 - 192) | 0x37882579)) ^ 0x7B1EA704);
  *(_DWORD *)(v6 - 184) = ((v5 ^ 0x42C250D9) - 1238385176 + (STACK[0x2E8] & 0xBFE5DC7E ^ 0x3A615C4C)) ^ v16;
  *(_DWORD *)(v6 - 192) = v12 + v16;
  v17 = STACK[0x290] + v3;
  STACK[0x2A0] = v17;
  v18 = STACK[0x2B0];
  *(_QWORD *)(v6 - 176) = v17;
  *(_QWORD *)(v6 - 168) = v18;
  v19 = v3;
  STACK[0x280] = v3;
  v20 = v15;
  v15(v6 - 192);
  v21 = (v5 ^ 0xAB0E4019) + 1608756520 + (v10 & 0x6C7DFDFE ^ 0x28617DCC);
  v22 = 460628867 * ((v6 + 1630206759 - 2 * ((v6 - 192) & 0x612AFBE7)) ^ 0x2DBC799A);
  LODWORD(v10) = STACK[0x2D0];
  *(_DWORD *)(v6 - 192) = LODWORD(STACK[0x2D0]) + v22;
  *(_DWORD *)(v6 - 184) = v21 ^ v22;
  v23 = STACK[0x2A0] + v19;
  v24 = STACK[0x2B8];
  *(_QWORD *)(v6 - 176) = v23;
  *(_QWORD *)(v6 - 168) = v24;
  v20(v6 - 192);
  v25 = 460628867 * ((((v6 - 192) | 0x37D75E9E) - (v6 - 192) + ((v6 - 192) & 0xC828A160)) ^ 0x7B41DCE3);
  v26 = ((v5 ^ 0xAA5F0191) + 1588784304 + (STACK[0x2E8] & 0x6EDF7EEE ^ 0x2A417CCC)) ^ v25;
  *(_DWORD *)(v6 - 192) = (_DWORD)v10 + v25;
  *(_DWORD *)(v6 - 184) = v26;
  v27 = STACK[0x2C0];
  *(_QWORD *)(v6 - 176) = v23 + STACK[0x280];
  *(_QWORD *)(v6 - 168) = v27;
  v20(v6 - 192);
  v28 = STACK[0x2A8];
  v29 = STACK[0x318];
  STACK[0x368] = LODWORD(STACK[0x2A8]) + ((2 * v7) ^ 0xE5Au) - 1528693274;
  return ((uint64_t (*)(unint64_t))(*(_QWORD *)(v4
                                                               + 8
                                                               * ((43 * (v28 + ((2 * v7) ^ 0xE5A) == 1528693274)) ^ (v7 - 874)))
                                                   - 12))(v29);
}

uint64_t sub_1000A4CDC()
{
  int v0;
  uint64_t v1;

  ((void (*)(void))STACK[0x230])();
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1815 * (STACK[0x3B0] != 0)) ^ (v0 - 597))) - 4))();
}

uint64_t sub_1000A4D24()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v3 = v0;
  v4 = ((uint64_t (*)(void))STACK[0x230])();
  STACK[0x528] -= 16;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * (int)(((v3 == 489733862)
                                                             * ((v1 + 1099583943) & 0xBE75AFFF ^ 0x725)) ^ (v1 + 537)))
                                          - 4))(v4);
}

uint64_t sub_1000A4D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;

  v67 = 235795823 * ((((v66 - 192) | 0x56014207) + (~(v66 - 192) | 0xA9FEBDF8)) ^ 0xC2AC0B5F);
  *(_DWORD *)(v66 - 152) = v65 - v67 - 47;
  *(_DWORD *)(v66 - 148) = v67 ^ 0x3FD7AD00;
  *(_QWORD *)(v66 - 144) = 0;
  *(_QWORD *)(v66 - 136) = a60;
  *(_QWORD *)(v66 - 192) = v63;
  *(_QWORD *)(v66 - 184) = 0;
  *(_QWORD *)(v66 - 160) = a44;
  *(_QWORD *)(v66 - 176) = a63;
  v68 = ((uint64_t (*)(uint64_t))((char *)*(&off_10025FA20 + v65 - 1590) - 4))(v66 - 192);
  v69 = *(_DWORD *)(v66 - 168);
  LODWORD(STACK[0x5A4]) = v69;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v64
                                                      + 8
                                                      * ((182 * (((v65 + 69) ^ (v69 == 489733862)) & 1)) ^ v65))
                                          - (v65 - 455)
                                          + 1135))(v68);
}

void sub_1000A4E80()
{
  JUMPOUT(0x1000A4EA8);
}

void sub_1000A5058()
{
  JUMPOUT(0x1000A50A8);
}

uint64_t sub_1000A5120()
{
  unint64_t v0;
  unsigned int v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;

  STACK[0x2E8] = v0;
  v5 = STACK[0x324];
  *(_DWORD *)(STACK[0x5C8] + ((v5 + v1) & 0xFFFFFFFC)) = v3;
  v6 = ((v4 + 178) ^ 0x521) + v5;
  LODWORD(STACK[0x324]) = v6;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8 * ((227 * (v6 + ((v4 - 1139) ^ v1) < 0x40)) ^ (v4 + 178)))
                                          - 8))(95);
}

uint64_t sub_1000A6890@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;

  v10 = v7 + v4;
  v11 = *(_DWORD *)(a2 + 4 * (v10 - 8)) ^ *(_DWORD *)(a2 + 4 * (v10 - 3));
  v12 = *(_DWORD *)(a2 + 4 * (v10 - 16)) ^ *(_DWORD *)(a2 + 4 * (v10 - 14)) ^ (v11 + v9 - (v5 & (2 * v11)));
  HIDWORD(v13) = v12 ^ (v9 + (v2 ^ v6) * a1 - 855);
  LODWORD(v13) = v12;
  *(_DWORD *)(a2 + 4 * (v3 + v7)) = (v13 >> 31) + v9 - (v5 & (2 * (v13 >> 31)));
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((124 * ((v3 + 1 + v7) > 0x4F)) ^ v2)) - 8))();
}

uint64_t sub_1000A6924()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8 * ((105 * ((v1 + 745234000) < 0x14)) ^ (83 * (v0 ^ 0x35D))))
                            - 12))();
}

void sub_1000A6A14()
{
  JUMPOUT(0x1000A695CLL);
}

uint64_t sub_1000A6A2C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((874 * ((a4 + 1 + v5) > 0x27)) ^ v4)) - 8))();
}

uint64_t sub_1000A6AF0(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v5 + 8 * ((459 * ((a2 + 1 + v4) > 0x3B)) ^ v3))
                                          - 8))(a3);
}

uint64_t sub_1000A6BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((161 * ((a5 + 1 + v6) > 0x4F)) ^ v5)) - 8))();
}

void sub_1000A6C8C(int a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  LODWORD(STACK[0x448]) = v1;
  LODWORD(STACK[0x44C]) = v4;
  LODWORD(STACK[0x4EC]) = v2;
  LODWORD(STACK[0x45C]) = v3;
  LODWORD(STACK[0x424]) = v5;
  LODWORD(STACK[0x324]) = v6 + 80;
  v8 = (*(_DWORD *)(STACK[0x5B8] - 0x73F39308AC2F35F7) ^ v7) + (v5 ^ v7);
  *(_DWORD *)(STACK[0x5B8] - 0x73F39308AC2F35F7) = v8 + v7 - (a1 & (2 * v8));
  JUMPOUT(0x1000A6CE4);
}

uint64_t sub_1000A6DD0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  int v4;
  unint64_t v6;

  v3 = STACK[0x3D0];
  v4 = *(unsigned __int8 *)(STACK[0x3D0] - 0x73F39308AC2F35EFLL) ^ 0xE;
  if (v4 == 2)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1
                                                                                            + 8
                                                                                            * ((102
                                                                                              * (*(_DWORD *)(v3 - 0x73F39308AC2F35F3) != 1763403438)) ^ (v2 - 466)))
                                                                                - (v2 + 190)
                                                                                + 1325))(a1, 97, 46, 203, 3488707127);
  if (v4 == 1)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1
                                                                                   + 8
                                                                                   * ((26
                                                                                     * (*(_DWORD *)(v3
                                                                                                  - 0x73F39308AC2F35F3) == (LODWORD(STACK[0x278]) ^ 0x691B6386))) ^ (v2 + 859)))
                                                                       - 12))(a1, 97, 46, 203);
  v6 = STACK[0x2B0];
  STACK[0x400] = 91;
  *(_BYTE *)(v3 - 0x73F39308AC2F35F4) = (v6 ^ 0xBA) * (v6 + 17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1
                                                                                 + 8
                                                                                 * ((((v2 - 96) ^ (STACK[0x400] == 0)) & 1 | (2 * (((v2 - 96) ^ (STACK[0x400] == 0)) & 1))) ^ (v2 - 626)))
                                                                     - 8))(a1, 97, 46, 203);
}

void sub_1000A76E0()
{
  JUMPOUT(0x1000A769CLL);
}

uint64_t sub_1000A76E8()
{
  return ((uint64_t (*)(void))STACK[0x560])();
}

uint64_t sub_1000A7720()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  int v4;

  *(_DWORD *)(STACK[0x238] + 52) = ((((LODWORD(STACK[0x59C]) ^ v3) + (v1 ^ v3)) % 0x2710) ^ 0x5FBAFDDF)
                                 - 1529893184
                                 + (((((LODWORD(STACK[0x59C]) ^ v3) + (v1 ^ v3)) % 0x2710) << ((v2 - 117) & 0xB3 ^ 0xB3)) & 0x7BBE);
  v4 = STACK[0x5A4];
  STACK[0x528] -= 1616;
  LODWORD(STACK[0x56C]) = v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((1882 * (v4 == v3)) ^ (v2 - 705))) - 12))();
}

uint64_t sub_1000A77D0@<X0>(int a1@<W8>)
{
  _DWORD *v1;
  uint64_t v2;

  *v1 = STACK[0x54C];
  v1[85] = STACK[0x464];
  v1[86] = STACK[0x398];
  v1[87] = STACK[0x47C];
  v1[88] = STACK[0x46C];
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((((a1 - 113) ^ (STACK[0x3C0] == 0)) & 1)
                                          * ((a1 - 1041720127) & 0x3E1765FF ^ 0x47F)) | (((a1 - 1041720127) & 0x3E1765FF)
                                                                                       - 818)))
                            - 8))();
}

uint64_t sub_1000A7854()
{
  uint64_t v0;
  int v1;

  STACK[0x528] -= 1616;
  LODWORD(STACK[0x56C]) = -489691695;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * (((((v1 - 50) ^ (STACK[0x3C0] == 0)) & 1) * (v1 ^ 0x47F)) | (v1 - 818)))
                            - 8))();
}

uint64_t sub_1000A78B8@<X0>(uint64_t a1@<X1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,unsigned int *a55,uint64_t (*a56)(_QWORD, uint64_t, _QWORD))
{
  uint64_t v56;
  int v57;
  uint64_t v58;

  v57 = a2 - 73;
  v58 = a56(*a55, a1, LODWORD(STACK[0x48C]));
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v56
                                                      + 8
                                                      * (((LODWORD(STACK[0x56C]) != 489733862) * ((v57 + 101) ^ 0x371)) ^ v57))
                                          - 8))(v58);
}

void sub_1000A7948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  char *v10;

  v10 = (char *)&a9 + v9 - 0x611D9C9E8D6D765;
  STACK[0x2A8] = (unint64_t)(v10 + 2048);
  STACK[0x2B0] = (unint64_t)(v10 + 2176);
  STACK[0x2E8] = (unint64_t)v10;
  STACK[0x2B8] = (unint64_t)(v10 + 2304);
  LODWORD(STACK[0x2E0]) = 1466563369;
  JUMPOUT(0x10009B824);
}

uint64_t sub_1000A79B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = (v2 - 1434);
  v5 = ((2 * (_QWORD)&STACK[0x368]) & 0xFDFF6FED5F7E1F80)
     + 0x67FF6DEDFDC9F7FELL
     + ((unint64_t)&STACK[0x368] ^ 0xFEFFB7F6AFBF0EE4 ^ v4);
  v6 = a2 - 1;
  STACK[0x368] = v6;
  *(_BYTE *)(a1 + v6) = ((v5 + 60) ^ 0xBA) * (v5 + 77);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (int)(((STACK[0x368] != 0) * (((v4 + 782279633) & 0xD15F5F7F) + 811)) ^ v4))
                            - 12))();
}

void sub_1000A7A58()
{
  JUMPOUT(0x1000A7A14);
}

uint64_t sub_1000A7A60()
{
  uint64_t v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * (((((v1 - 50) ^ (STACK[0x3C0] == 0)) & 1) * (v1 ^ 0x47F)) | (v1 - 818)))
                            - 8))();
}

void sub_1000A7AA4(uint64_t a1)
{
  __asm { BR              X8 }
}

void sub_1000A7BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v7;
  int v8;
  uint64_t v10;
  int v11;
  _BOOL4 v13;

  v11 = **(unsigned __int8 **)(v10 + 80) - (**(unsigned __int8 **)(a4 + 176) ^ (104 - v7));
  v13 = (v11 ^ 0x3FFFF7B7) + ((2 * v11) & 0x7FFFEF6E) - 4857856 == v8 && a7 != 4067136724;
  __asm { BR              X15 }
}

uint64_t sub_1000A8CD8@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_BYTE *)(v3 + (a2 - 1156305090)) = *(_BYTE *)(a3 + (a2 - 1156305090));
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((1755 * (a2 - 1 == v4)) ^ (v5 + a1 + 132))) - 4))();
}

void wyjYwk(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v6;
  int v9;

  if (a3)
    v6 = a4 == 0;
  else
    v6 = 1;
  v9 = !v6 && a5 != 0 && a6 != 0;
  __asm { BR              X8 }
}

uint64_t sub_1000A8DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,unsigned int a22)
{
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  a22 = 1178560073
      * ((-68329684 - (&a21 ^ 0xA429BDE0 | 0xFBED5F2C) + (&a21 ^ 0xA429BDE0 | 0x412A0D3)) ^ 0x470E3F5B)
      - 1501685844;
  v25 = sub_1000AABF4(&a21);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v23 + 8 * ((1458 * (a21 == v22)) ^ v24)) - 4))(v25);
}

uint64_t sub_1000A8E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t *a21,unsigned int a22,int a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  a22 = (831981571 * ((&a21 & 0xC67EF54C | ~(&a21 | 0xC67EF54C)) ^ 0xA020DA97)) ^ 0x87;
  a21 = &STACK[0x82D647BA4E6A001];
  sub_10006A5D8((uint64_t)&a21);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 + 8 * ((4 * (a23 != 489733862)) | 0x2B1u)) - 4))(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11, a12, a13);
}

uint64_t sub_1000A8F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned int a24)
{
  _DWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v30 = 69008221 * ((&a21 & 0x60EEFFDA | ~(&a21 | 0x60EEFFDA)) ^ 0x4CB3522F);
  HIDWORD(a22) = v30 + v29 + 525;
  a24 = v30 ^ ((v26 ^ 0x5EEF8FFF) - 1376550983 + ((2 * v26) & 0xBDDF1FFE));
  a23 = a16;
  a21 = v25;
  ((void (*)(uint64_t *))(*(_QWORD *)(v27 + 8 * (int)(v29 - 456)) - 8))(&a21);
  v31 = 1224239923 * ((25684038 - (&a21 | 0x187E846) + (&a21 | 0xFE7817B9)) ^ 0xCCBEA6E);
  LODWORD(a21) = *v24 - v31 - 283258579 - ((2 * *v24) & 0xDE3BA25A);
  LODWORD(a23) = (v29 + 431) ^ v31;
  a22 = a16;
  sub_100080318((uint64_t)&a21);
  v32 = *a13;
  v33 = (*a13 << (63 * (v29 ^ 0xFE) + 76)) & 0xDE3BA25A;
  v34 = 1224239923 * ((((2 * &a21) | 0xC43AEF80) - &a21 + 501385280) ^ 0x10AE8A17);
  LODWORD(a23) = (v29 + 431) ^ v34;
  a22 = a16;
  LODWORD(a21) = v32 - v34 - 283258579 - v33;
  sub_100080318((uint64_t)&a21);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t, int *, uint64_t, uint64_t))(*(_QWORD *)(v28 + 8 * ((1388 * (HIDWORD(a21) == 489733862)) ^ v29)) - 8))(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, v24, a12, a13, a14, a15);
}

uint64_t sub_1000A90F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,int a23,uint64_t a24,unint64_t *a25,int a26)
{
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;

  v29 = 1224239923 * ((419254032 - (&a21 | 0x18FD4F10) + (&a21 | 0xE702B0EF)) ^ 0x15B14D38);
  a21 = v29 ^ 0x12B68929;
  a22 = (v28 + 368399676) ^ v29;
  a24 = a16;
  a25 = &STACK[0x72F2C1D3322B8828];
  a23 = v29 ^ 0x15A744B0;
  v30 = sub_1000AACB4((uint64_t)&a21);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v27
                                                      + 8
                                                      * (((a26 == (((v28 + 267) | 0x16) ^ (v26 - 246)))
                                                        * (9 * (v28 ^ 0x1B8) - 30)) ^ v28))
                                          - 8))(v30);
}

uint64_t sub_1000A91D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t *a21,unint64_t *a22,unint64_t *a23,unint64_t *a24)
{
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  a23 = &STACK[0x20BA795F69D3FFD];
  a24 = a17;
  a22 = &STACK[0x7F1325F673F67EA7];
  LODWORD(a21) = v24
               - 231789580
               - 2078219279 * (((&a21 | 0x4113E74D) + (~&a21 | 0xBEEC18B2)) ^ 0x9BE97138);
  sub_1000AB2F4((uint64_t)&a21);
  LODWORD(a21) = v24 - 231789580 - 2078219279 * (&a21 ^ 0xDAFA9674);
  a23 = &STACK[0x20BA795F69D400D];
  a24 = a17;
  a22 = &STACK[0x7F1325F673F67E87];
  sub_1000AB2F4((uint64_t)&a21);
  LODWORD(a23) = v24
               - 944348131 * ((((2 * &a21) | 0xA35E252C) - &a21 - 1370428054) ^ 0xF2B6B6D8)
               - 272;
  a21 = &STACK[0x20BA795F69D3FDD];
  a22 = a17;
  ((void (*)(unint64_t **))(*(_QWORD *)(v25 + 8 * (int)(v24 - 556)) - 8))(&a21);
  LODWORD(a22) = v24
               - 241568881
               * (((&a21 | 0xF5D823CD) - &a21 + (&a21 & 0xA27DC30)) ^ 0x23C9278F)
               - 208;
  a21 = a17;
  v27 = sub_1000906D4((uint64_t)&a21);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v26 + 8 * ((1256 * (HIDWORD(a22) == 489733862)) | v24))
                                          - ((3 * (v24 ^ 0x3B1)) ^ 0x1FDLL)))(v27);
}

uint64_t sub_1000A9398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  int v15;
  unsigned int v16;
  uint64_t v17;

  return ((uint64_t (*)(void))(*(_QWORD *)(v17 + 8 * ((1330 * (a15 == ((89 * (v16 ^ 0x319)) ^ (v15 - 789)))) ^ v16))
                            - 8))();
}

uint64_t sub_1000A93DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;

  v22 = (a19 ^ v20) - (((v19 ^ 0x1F5) - 384928848) & (2 * (a19 ^ v20))) - 192463815;
  return (*(uint64_t (**)(void))(v21
                              + 8
                              * ((87
                                * (((2 * v22) & 0xDFBCBFFE ^ 0xC90C3872) + (v22 ^ 0x1B5963C6) + 1513619417 != 1242980312)) ^ v19)))();
}

uint64_t sub_1000A947C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, unsigned int a6)
{
  uint64_t v6;

  return (*(uint64_t (**)(uint64_t))(v6
                                            + 8
                                            * ((38
                                              * (((a4 + a3 + ((a6 + 2077901815) & 0x6BE5B6EF ^ 0x7BE1A004) < 8) ^ (a6 - 1)) & 1)) ^ a6)))(2487222567);
}

uint64_t sub_1000A94E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((a6 - 391989540) & 0x1D4C35 | ((unint64_t)(v6 - v7) > 0x1F) | (2 * ((unint64_t)(v6 - v7) > 0x1F))))
                            - 8))();
}

uint64_t sub_1000A9534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 + 8 * (int)(((((a1 + v5 + 90) | 0x50) ^ 0xE28) * (a2 > 0x1F)) ^ (a1 + v5 + 1745)))
                                                                                               + 1807745025
                                                                                               - (((_DWORD)a1
                                                                                                 + v5
                                                                                                 + 2076785001) & 0xEFF6C56F)))(a1, a2, a3, a4, a5, 0, 270639104);
}

uint64_t sub_1000A959C(int a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;

  v12 = a4 + a3 + a7;
  v13.i64[0] = 0xFEFEFEFEFEFEFEFELL;
  v13.i64[1] = 0xFEFEFEFEFEFEFEFELL;
  v14 = v7 + v12;
  v15 = v9 + v12;
  v16 = veorq_s8(*(int8x16_t *)(v14 - 31), v13);
  *(int8x16_t *)(v15 - 15) = veorq_s8(*(int8x16_t *)(v14 - 15), v13);
  *(int8x16_t *)(v15 - 31) = v16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8
                                        * ((((a2 & 0xFFFFFFE0) == 32) * (v8 ^ (v11 + 1699) ^ 0x344)) ^ (a1 + v8 + 341)))
                            - 12))();
}

void sub_1000A9608()
{
  JUMPOUT(0x1000A95B4);
}

uint64_t sub_1000A9614(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8
                                             * ((((((v6 - 1753233639) ^ (a2 == a6)) & 1) == 0) * (v6 - 1593)) ^ v6))
                            - 4))();
}

uint64_t sub_1000A965C(uint64_t a1, char a2)
{
  int v2;
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((483 * ((a2 & 0x18) != ((v4 + ((v2 + 187809098) & 0xF4CE3DDE) - 470) ^ v4))) ^ (v2 - 1470)))
                            - 12))();
}

uint64_t sub_1000A96B0(uint64_t a1, int a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(int8x8_t *)(v9 - 7 + (a4 + a3 + a7 - a6)) = veor_s8(*(int8x8_t *)(v8 - 7 + (a4 + a3 + a7 - a6)), (int8x8_t)0xFEFEFEFEFEFEFEFELL);
  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8
                                        * (((2 * (a6 - (a2 & 0xFFFFFFF8) == -8)) | (32 * (a6 - (a2 & 0xFFFFFFF8) == -8))) ^ a8))
                            - ((a8 - 231) ^ 0xE3)))();
}

void sub_1000A9714()
{
  JUMPOUT(0x1000A96E4);
}

uint64_t sub_1000A9720(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (((a3 ^ (v5 + 229) ^ (v5 + 449)) * (a2 == v3)) ^ a3))
                            - (a3 + 979)
                            + 1206))();
}

uint64_t sub_1000A9758@<X0>(int a1@<W0>, int a2@<W8>)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  *(_BYTE *)(v5 + (v4 + a2)) = *(_BYTE *)(v3 + (v4 + a2)) ^ 0xFE;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((29 * (((v6 + a1 + 918) ^ 0xFFFFFB3D) + v4 != v2)) ^ (v6 + a1)))
                            - 12))();
}

uint64_t sub_1000A979C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21)
{
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _DWORD *v29;
  uint64_t v30;
  int v31;

  *v29 = v28;
  v31 = (a21 ^ 0x1D30BEE6) + v24 - (((a21 ^ 0x1D30BEE6) << ((2 * a8) ^ 0x85)) & (v26 + 1310));
  return ((uint64_t (*)(void))(*(_QWORD *)(v30 + 8 * (((v22 & (2 * v31) ^ v23) + (v31 ^ v27) + v25 != v21) ^ a8)) - 12))();
}

uint64_t sub_1000A9808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;

  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8 * ((680 * (v9 + v8 + (a8 ^ 0x94u) + 270639135 - 1140 > 7)) | a8 ^ 0x94))
                            - 12))();
}

uint64_t sub_1000A9854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (v7 ^ (238 * ((unint64_t)(v6 - a6) > 0x1F)))) - 12))();
}

uint64_t sub_1000A9894()
{
  unsigned int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((v1 - 448) ^ (63 * (v0 < 0x20))))
                            - (((v1 - 70839631) & 0x6FF8E8FDu)
                             - 1807744344)
                            + 677))();
}

uint64_t sub_1000A98E8@<X0>(int a1@<W0>, uint64_t a2@<X5>, int a3@<W8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;

  v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
  v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
  v10 = v4 + (v6 ^ (v8 + 1218) ^ (a3 + 1214));
  v11 = *(int8x16_t *)(v3 + v10 - 15);
  v12 = *(int8x16_t *)(v3 + v10 - 31);
  v13 = a2 + v10;
  *(int8x16_t *)(v13 - 15) = veorq_s8(v11, v9);
  *(int8x16_t *)(v13 - 31) = veorq_s8(v12, v9);
  return (*(uint64_t (**)(void))(v7 + 8 * ((1194 * ((v5 & 0xFFFFFFE0) == 32)) ^ (a1 + v6 + 512))))();
}

void sub_1000A9950()
{
  JUMPOUT(0x1000A9904);
}

uint64_t sub_1000A995C(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((((a3 - 665) | 0x80) ^ 0xE2D) * (v3 != v4)) ^ a3)) - 12))();
}

uint64_t sub_1000A998C(int a1)
{
  char v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((((5 * (a1 ^ 0x220)) ^ 0x5DB) * ((v1 & 0x18) == 0)) ^ a1))
                            - 7 * (a1 ^ 0x20Au)
                            + 1133))();
}

uint64_t sub_1000A99D4@<X0>(uint64_t a1@<X5>, int a2@<W8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  _BOOL4 v8;

  *(int8x8_t *)(a1 - 7 + (v3 + a2 - v5)) = veor_s8(*(int8x8_t *)(v2 - 7 + (v3 + a2 - v5)), (int8x8_t)0xFEFEFEFEFEFEFEFELL);
  v8 = v5 + ((v6 - 685) | 0x456) - 1102 == (v4 & 0xFFFFFFF8);
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((v8 | (2 * v8)) ^ v6)) - 8))();
}

uint64_t sub_1000A9A30(int a1, int a2)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((((a2 - 1995464992) & 0x76F05FDF) + ((a2 - 82) | 0x71) - 1783) * (v2 == a1)) ^ a2))
                            - 12))();
}

uint64_t sub_1000A9A7C@<X0>(uint64_t a1@<X5>, int a2@<W8>)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_BYTE *)(a1 + (v5 + a2)) = *(_BYTE *)(v3 + (v5 + a2)) ^ 0xFE;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((267 * (v5 - 1 == v2 + 395 * (v4 ^ 0x477) - 790)) ^ v4)) - 8))();
}

uint64_t sub_1000A9AC8()
{
  int v0;
  int v1;
  int v2;
  void (*v3)(unsigned int *);
  unsigned int v4;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  *v6 = v0;
  v4 = (v1 + 436028577) & 0xE602BAFD;
  v10 = v8;
  v9 = (v1 - 638) ^ (69008221
                   * (((&v9 | 0x90C46521) - &v9 + (&v9 & 0x6F3B9AD8)) ^ 0x4366372B));
  v3(&v9);
  v10 = v7;
  v9 = (v4 - 541) ^ (69008221
                   * ((-128049727 - (&v9 | 0xF85E1DC1) + (&v9 | 0x7A1E23E)) ^ 0xD403B034));
  v3(&v9);
  return v2 ^ 0x1D30BEE6u;
}

void sub_1000A9BEC(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;

  v1 = *(_DWORD *)(a1 + 4) - 3804331 * ((2 * (a1 & 0x5C5A643E) - a1 - 1549427775) ^ 0xDD70BE37);
  v2 = *(_QWORD *)(a1 + 8);
  v5 = v1
     - 460628867 * ((-4722230 - (&v3 | 0xFFB7F1CA) + (&v3 | 0x480E35)) ^ 0x4CDE8C48)
     + 675;
  v3 = v2;
  sub_100065360((uint64_t)&v3);
  __asm { BR              X9 }
}

uint64_t sub_1000A9D48@<X0>(uint64_t a1@<X8>)
{
  int v1;
  unsigned int v2;
  int v3;
  int v4;
  unsigned int v5;
  _BOOL4 v6;

  v5 = (((v4 + v3) >> 4) & 0x75959AE ^ 0x7485824) + (((v4 + v3) >> 5) ^ 0xCC19D0CD);
  v6 = v5 + 506828023 < v2 - 371047986;
  if (v5 < 0xCBACACD7 != v2 > ((v1 - 1044051373) & 0x3E3AF64Fu) + 371046442)
    v6 = v2 > ((v1 - 1044051373) & 0x3E3AF64Fu) + 371046442;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((v6 * (v1 - 1125)) ^ v1)) - 8))();
}

uint64_t sub_1000A9DF8@<X0>(uint64_t a1@<X8>)
{
  char v1;
  int v2;

  return (*(uint64_t (**)(void))(a1 + 8 * (v2 ^ (((v1 & 0x1F) == 8) | (8 * ((v1 & 0x1F) == 8))))))();
}

uint64_t sub_1000A9E28@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;

  v6 = v1 + 1040184320;
  v7 = (v3 - 62) | 4;
  if (*v4 + 1909582136 < (v7 ^ 0x205))
    v6 = -715567698 - v1;
  *v4 = *v4 - 162308311 + v6;
  v8 = v2 - 1091837004;
  v9 = v8 < 1933522653;
  **(_DWORD **)(v5 - 0x2DB44D49A49B0026) = *(_DWORD *)(*(_QWORD *)(v5 - 0x2DB44D49A49B0026) + 4 * (v1 + 877876009));
  if (v8 < 1933522653)
    v9 = v8 > -213960994;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((58 * v9) | v7)) - 8))();
}

void sub_1000A9F1C()
{
  JUMPOUT(0x1000A9ECCLL);
}

void sub_1000A9F24()
{
  _DWORD *v0;

  *v0 = 237901512;
}

void sub_1000AA150(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 8) ^ (235795823 * (((a1 | 0x87E968F1) - (a1 & 0x87E968F1)) ^ 0x134421A8));
  v2 = *(_QWORD *)a1;
  ((void (*)(_QWORD, void (*)()))*(&off_10025FA20 + (v1 ^ 0x562)))(*(&off_10025FA20 + (v1 ^ 0x5F3)), sub_1000AA7AC);
  __asm { BR              X11 }
}

uint64_t sub_1000AA214@<X0>(unsigned int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (int)((1845 * (**(_QWORD **)(v2 + 8 * (int)(a1 ^ 0x26C)) != 0)) ^ a1))
                            - (a1 ^ 0x2BBLL)))();
}

uint64_t sub_1000AA254()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (v0 - 548)))(v1);
}

void sub_1000AA280(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000AA2E0()
{
  uint64_t v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((1120 * (v1 != 1528691550)) ^ 0x39Bu)) - 12))();
}

uint64_t sub_1000AA30C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  _DWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  int v11;

  v4 = (__PAIR64__(v3, **(unsigned __int8 **)(a2 + 8)) - 1) >> 32;
  *(_DWORD *)(*(_QWORD *)(a1 + 96) + 800) = 97492434;
  *(_DWORD *)(*(_QWORD *)(a1 + 96) + 804) = 237901512;
  *(_QWORD *)(*(_QWORD *)(a1 + 96) + 808) = *(_QWORD *)(a1 + 96) + 816;
  v5 = *(_QWORD *)(a2 + 8) + (*(_DWORD *)(a2 + 4) - v4);
  v6 = 831981571 * (((v8 | 0xE5A776CE) - v8 + (v8 & 0x1A588930)) ^ 0x7C06A6EA);
  v9 = *(_QWORD *)(a1 + 96) + 0x2DB44D49A49B034ELL;
  v10 = v5;
  v8[0] = (v4 - 1518483780) ^ v6;
  v8[1] = v6 + 1606;
  ((void (*)(_DWORD *))(*(_QWORD *)(a3 + 1056) - 4))(v8);
  return v11 ^ 0x8305C2D5;
}

void sub_1000AA448()
{
  unint64_t v0;
  _BYTE v1[8];
  unsigned int v2;
  unsigned int v3;
  char *v4;

  v0 = (unint64_t)&v1[qword_1002778E8 ^ qword_100277948];
  qword_100277948 = (45734839 * v0) ^ 0xA77260646F1BC58ALL;
  qword_1002778E8 = 45734839 * (v0 ^ 0xA77260646F1BC58ALL);
  v3 = (3804331
      * (((&v2 | 0x175DD214) - &v2 + (&v2 & 0xE8A22DE8)) ^ 0x6988F7E2)) ^ 0x1EC;
  v4 = (char *)*(&off_10025FA20
               + ((-73 * ((qword_1002778E8 + qword_100277948) ^ 0x8A)) ^ byte_100214A90[byte_100210E10[(-73 * ((qword_1002778E8 + qword_100277948) ^ 0x8A))] ^ 0x1B])
               - 178)
     - 4;
  sub_100090908((uint64_t)&v2);
  v4 = (char *)*(&off_10025FA20
               + ((-73 * ((qword_1002778E8 + qword_100277948) ^ 0x8A)) ^ byte_100214990[byte_100210D10[(-73 * ((qword_1002778E8 + qword_100277948) ^ 0x8A))] ^ 0x7A])
               + 76)
     - 4;
  v3 = (3804331 * ((1141020232 - (&v2 | 0x44029648) + (&v2 | 0xBBFD69B7)) ^ 0xC5284C41)) ^ 0x1EC;
  sub_100090908((uint64_t)&v2);
  v2 = 895 - 1178560073 * ((((2 * &v2) | 0x784A44C) - &v2 + 2084416986) ^ 0x64F7704E);
  LOBYTE(v3) = (73 * ((((2 * &v2) | 0x4C) - &v2 - 38) ^ 0x4E)) ^ 0x7F;
  sub_10007E380(&v2);
}

uint64_t sub_1000AA680(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_1000AA698(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;
  int v6;
  int v7;
  _DWORD *v8;

  v1 = 235795823 * (result ^ 0x8B0BAFE94AD4959);
  v2 = *(_QWORD *)(result + 32) ^ v1;
  v3 = *(_QWORD *)(result + 24) + v1;
  v4 = v2 > v3;
  v5 = v2 == v3;
  v6 = v4;
  if (((*(_DWORD *)(result + 12) ^ v1) & 1) != 0)
    v7 = v6;
  else
    v7 = v5;
  if (v7)
    v8 = (_DWORD *)result;
  else
    v8 = (_DWORD *)(result + 8);
  *(_DWORD *)(result + 4) = (*v8 + v1) ^ (*(_DWORD *)(result + 20) + v1);
  return result;
}

uint64_t sub_1000AA708(uint64_t result)
{
  unint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v10;
  _BOOL4 v11;

  v1 = 69008221
     * (((result | 0xD11098B7B4482233) - (result | 0x2EEF67484BB7DDCCLL) + 0x2EEF67484BB7DDCCLL) ^ 0x838CDE5467EA7039);
  v2 = *(_DWORD *)(result + 28) - v1;
  v3 = *(_QWORD *)(result + 16);
  v4 = v3 + v1;
  v5 = *(_QWORD *)(result + 32);
  v6 = v5 + v1;
  v7 = *(_DWORD *)(result + 24) + v1;
  v8 = *(_DWORD *)(result + 4) ^ v1;
  v9 = *(_DWORD *)(result + 8) - v1;
  v10 = v3 == v5;
  v11 = v4 > v6;
  if ((v8 & 1) != 0)
    v10 = v11;
  if (!v10)
    v2 = v7;
  *(_DWORD *)result = v2 ^ v9;
  return result;
}

void sub_1000AA7AC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v2[4];
  int v3;
  uint64_t v4;

  v0 = (qword_1002778E8 ^ qword_1002778F8) - (_QWORD)&v1;
  qword_1002778F8 = (45734839 * v0) ^ 0xA77260646F1BC58ALL;
  qword_1002778E8 = 45734839 * (v0 ^ 0xA77260646F1BC58ALL);
  v4 = (uint64_t)*(&off_10025FA20
                + ((-73 * ((-73 * v0) ^ qword_1002778E8)) ^ byte_100214C90[byte_100211010[(-73 * ((-73 * v0) ^ qword_1002778E8))] ^ 0xC9])
                + 97);
  v3 = (3804331 * ((v2 + 117650343 - 2 * ((unint64_t)v2 & 0x70333A7)) ^ 0x79D61651)) ^ 0x1EC;
  sub_100090908((uint64_t)v2);
}

uint64_t sub_1000AA8D4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 88) = 76;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_1000AA8F4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  unsigned int v6;

  v1 = *(_DWORD *)a1 + 235795823 * (a1 ^ 0x94AD4959);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v6 = v1
     - 460628867 * ((1948750583 - (v5 | 0x742792F7) + (v5 | 0x8BD86D08)) ^ 0xC74EEF75)
     - 2138961703;
  v5[0] = v3;
  v5[1] = v2;
  return ((uint64_t (*)(_QWORD *))((char *)*(&off_10025FA20 + (int)(v1 & 0x8002009D)) - 8))(v5);
}

uint64_t sub_1000AA9D4(uint64_t result)
{
  unint64_t v1;
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  _BOOL4 v6;
  int v7;
  int v8;

  v1 = 241568881
     * (((result ^ 0x9C42EF4B24AB98A7)
       - 2 * ((result ^ 0x9C42EF4B24AB98A7) & 0xDC1EF8D758FBB55ELL)
       - 0x23E10728A7044AA2) ^ 0x4F09C315AA4129BBLL);
  v2 = (_DWORD *)(result + 4);
  v3 = *(_QWORD *)(result + 16) - v1;
  v4 = *(_QWORD *)(result + 32) - v1;
  v5 = (uint64_t)v4 < (uint64_t)v3;
  v6 = v4 < v3;
  v7 = v5;
  if (((*(_DWORD *)(result + 40)
       - 241568881
       * (((result ^ 0x24AB98A7) - 2 * ((result ^ 0x24AB98A7) & 0x58FBB55E) + 1492890974) ^ 0xAA4129BB)) & 1) != 0)
    v8 = v7;
  else
    v8 = v6;
  if (v8)
    v2 = (_DWORD *)result;
  *(_DWORD *)(result + 24) = *(_DWORD *)(result + 44) ^ (241568881
                                                       * (((result ^ 0x24AB98A7)
                                                         - 2 * ((result ^ 0x24AB98A7) & 0x58FBB55E)
                                                         + 1492890974) ^ 0xAA4129BB)) ^ *v2 ^ (241568881
                                                                                             * (((result ^ 0x24AB98A7)
                                                                                               - 2
                                                                                               * ((result ^ 0x24AB98A7) & 0x58FBB55E)
                                                                                               + 1492890974) ^ 0xAA4129BB));
  return result;
}

uint64_t sub_1000AAA74(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;

  v2 = 268847287 * (((a1 | 0x9AE06DE0) - (a1 & 0x9AE06DE0)) ^ 0x654A7CC8);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = 772674559 * (*(_DWORD *)(a1 + 24) + v2) + 2076312804;
  v8 = *(_DWORD *)(a1 + 40) - 1695027331 + v2;
  v9 = 235795823
     * (((&v11 | 0x5FD02389) - &v11 + (&v11 & 0xA02FDC70)) ^ 0xCB7D6AD0);
  v16 = v9 ^ (v8 + 1817);
  v11 = v6;
  v12 = v9 + (v7 ^ 0xFBFEEFE9) + ((2 * v7) & 0xF7FDDFD2) + 2113929152;
  v17 = v4;
  v13 = v5;
  v14 = v3;
  result = ((uint64_t (*)(uint64_t *))((char *)*(&off_10025FA20 + v8) - 8))(&v11);
  *(_DWORD *)(a1 + 8) = v15;
  return result;
}

uint64_t sub_1000AABDC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_1000AABF4(int *a1)
{
  unsigned int v2;
  uint64_t result;
  int v4;

  v2 = a1[1] - 1178560073 * (((a1 | 0xB64875FC) - (a1 & 0xB64875FC)) ^ 0x517D5794);
  result = ((uint64_t (*)(char *, char *))*(&off_10025FA20 + (int)(v2 ^ 0xA67E174C)))((char *)*(&off_10025FA20 + (int)(v2 ^ 0xA67E17FA)) - 8, (char *)*(&off_10025FA20 + (int)(v2 ^ 0xA67E17E7)) - 4);
  v4 = *(_DWORD *)*(&off_10025FA20 + (int)(v2 + 1501685931));
  if ((_DWORD)result)
    v4 = -489692072;
  *a1 = v4;
  return result;
}

uint64_t sub_1000AACB4(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;

  v2 = 1224239923 * ((-2 - ((a1 | 0xB4CFA43B) + (~(_DWORD)a1 | 0x4B305BC4))) ^ 0xB983A613);
  v3 = *(_DWORD *)(a1 + 4) ^ v2;
  v4 = *(_DWORD *)a1 ^ v2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v2 ^ *(_DWORD *)(a1 + 8) ^ 0x129A7B41;
  v3 -= 368400157;
  v7 = 1224239923 * ((((2 * &v9) | 0xD9CF7000) - &v9 + 320358400) ^ 0x1E5445D7);
  v10 = *(_QWORD *)(a1 + 24);
  v13 = v5;
  v14 = v7 ^ (v3 + 1119);
  v11 = v7 ^ (v4 + 1369382578);
  v12 = v6 - v7;
  result = ((uint64_t (*)(int *))*(&off_10025FA20 + v3))(&v9);
  *(_DWORD *)(a1 + 32) = v9;
  return result;
}

void sub_1000AADE8(_DWORD *a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  v1 = *a1 ^ (69008221 * ((((2 * (_DWORD)a1) | 0xE6169F4E) - (_DWORD)a1 + 217362521) ^ 0x20A91DAD));
  v2 = *(_QWORD *)((char *)*(&off_10025FA20 + (int)(v1 ^ 0x874EE3C1)) - 4);
  v4 = (235795823 * (((&v3 | 0x234F2E8E) - (&v3 & 0x234F2E8E)) ^ 0xB7E267D7)) ^ (v1 + 2024874493);
  v3 = v2;
  sub_1000AA150((uint64_t)&v3);
}

_BYTE *sub_1000AAEDC(_BYTE *result, char a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = -(int)result & 7;
  if (v3 > a3)
    LODWORD(v3) = a3;
  switch((int)v3)
  {
    case 1:
      goto LABEL_10;
    case 2:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 4:
      goto LABEL_7;
    case 5:
      goto LABEL_6;
    case 6:
      goto LABEL_5;
    case 7:
      *result++ = a2;
LABEL_5:
      *result++ = a2;
LABEL_6:
      *result++ = a2;
LABEL_7:
      *result++ = a2;
LABEL_8:
      *result++ = a2;
LABEL_9:
      *result++ = a2;
LABEL_10:
      *result++ = a2;
      break;
    default:
      break;
  }
  v4 = a3 - v3;
  v6 = v4;
  v5 = v4 & 7;
  switch(v6)
  {
    case 0uLL:
      return result;
    case 1uLL:
      goto LABEL_20;
    case 2uLL:
      goto LABEL_19;
    case 3uLL:
      goto LABEL_18;
    case 4uLL:
      goto LABEL_17;
    case 5uLL:
      goto LABEL_16;
    case 6uLL:
      goto LABEL_15;
    case 7uLL:
      *result++ = a2;
LABEL_15:
      *result++ = a2;
LABEL_16:
      *result++ = a2;
LABEL_17:
      *result++ = a2;
LABEL_18:
      *result++ = a2;
LABEL_19:
      *result++ = a2;
LABEL_20:
      *result = a2;
      break;
    default:
      result = (_BYTE *)((uint64_t (*)(void))((char *)&loc_1000AAF6C + 4 * byte_10020C2E7[(v5 >> 3) & 7]))();
      break;
  }
  return result;
}

uint64_t sub_1000AAFD0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_1000AAFE8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 24);
  return 0;
}

uint64_t XtCqEf5X(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v4 = qword_1002778E8 - qword_100277940 - (_QWORD)&v6;
  qword_100277940 = 45734839 * v4 - 0x354AA8AFC6EBC5ALL;
  qword_1002778E8 = 45734839 * (v4 ^ 0xA77260646F1BC58ALL);
  v7 = 1038 - 241568881 * (&v7 ^ 0xD6110442);
  v11 = a2;
  v12 = a3;
  v8 = a1;
  v9 = a4;
  ((void (*)(unsigned int *))((char *)*(&off_10025FA20
                                                 + ((-73 * ((-73 * v4 - 90) ^ 0x8A ^ qword_1002778E8)) ^ byte_1002072F0[byte_100214B90[(-73 * ((-73 * v4 - 90) ^ 0x8A ^ qword_1002778E8))] ^ 0xC3])
                                                 - 120)
                                       - 8))(&v7);
  return v10 ^ 0x1D30BEE6u;
}

uint64_t sub_1000AB120(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  v2 = 831981571 * ((a1 + 752367241 - 2 * (a1 & 0x2CD83689)) ^ 0xB579E6AD);
  v3 = *(_DWORD *)a1 + v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 44);
  v9 = 1224239923
     * (((&v11 | 0xF2B632B2) - &v11 + (&v11 & 0xD49CD48)) ^ 0x5CF65);
  v17 = v3 + v9 + 504208098;
  v11 = v7;
  v14 = v4;
  v15 = v5;
  v13 = v6;
  v12 = v8 - v2 - v9 - 479430144;
  result = ((uint64_t (*)(uint64_t *))*(&off_10025FA20 + (int)(v3 ^ 0xE1F2695A)))(&v11);
  *(_DWORD *)(a1 + 4) = v16;
  return result;
}

uint64_t sub_1000AB254(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;
  int v6;
  int v7;
  int v8;

  v1 = 460628867 * ((2 * (result & 0x6088BD7CEA4303EALL) - result - 0x6088BD7CEA4303EBLL) ^ 0xDDE80FED592A7E68);
  v2 = *(_QWORD *)(result + 32) + v1;
  v3 = *(_QWORD *)(result + 24) - v1;
  v4 = v3 >= v2;
  v5 = v3 != v2;
  v6 = v4;
  if (((*(_DWORD *)result ^ (460628867 * ((2 * (result & 0xEA4303EA) - (_DWORD)result + 364706837) ^ 0x592A7E68))) & 1) != 0)
    v7 = v6;
  else
    v7 = v5;
  if (v7)
    v8 = *(_DWORD *)(result + 20) + 460628867 * ((2 * (result & 0xEA4303EA) - result + 364706837) ^ 0x592A7E68);
  else
    v8 = *(_DWORD *)(result + 16) - 460628867 * ((2 * (result & 0xEA4303EA) - result + 364706837) ^ 0x592A7E68);
  *(_DWORD *)(result + 8) = v8 ^ (*(_DWORD *)(result + 12)
                                + 460628867 * ((2 * (result & 0xEA4303EA) - result + 364706837) ^ 0x592A7E68));
  return result;
}

uint64_t sub_1000AB2F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  _QWORD v8[2];
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = 1178560073 * (v8 ^ 0xE7352268);
  v6 = *(_DWORD *)a1 + 2078219279 * ((-2 - ((a1 | 0xC3B1469C) + (~(_DWORD)a1 | 0x3C4EB963))) ^ 0xE6B42F17) + 231788861;
  v9 = v6 - v5 + 380;
  v10 = 856161221 - v5;
  v12 = v2;
  v8[0] = v4;
  v8[1] = v3;
  result = ((uint64_t (*)(_QWORD *))((char *)*(&off_10025FA20 + v6) - 8))(v8);
  *(_DWORD *)(a1 + 4) = v11;
  return result;
}

uint64_t DERDecodeItem(uint64_t a1, unint64_t *a2)
{
  return DERDecodeItemPartialBufferGetLength(a1, a2, 0);
}

uint64_t DERDecodeItemPartialBufferGetLength(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  char *v12;
  unsigned __int8 v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  char v26;
  unint64_t v27;
  _BYTE *v28;

  v3 = *(_QWORD *)(result + 8);
  if (v3 < 2)
    return 3;
  v4 = *(_BYTE **)result;
  if (*(_QWORD *)result == -1)
    goto LABEL_68;
  v5 = &v4[v3];
  v6 = v4 + 1;
  v7 = v3 - 1;
  v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1)
    {
      if (v12 >= v5 || v12 < v4)
        goto LABEL_69;
      v14 = v12 + 1;
      v15 = *v12;
      v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        if (a3 || v16 >= v15)
        {
          if (v16 >= v15)
            v17 = *v12;
          else
            v17 = v7 - 1;
          v10 = v5 >= v14;
          v18 = v5 - v14;
          if (v10 && v4 <= v14 && v17 <= v18)
          {
            a2[1] = (unint64_t)v14;
            a2[2] = v17;
            if (!a3)
              return 0;
LABEL_34:
            result = 0;
            *a3 = v15;
            return result;
          }
LABEL_69:
          __break(0x5519u);
LABEL_70:
          __break(0x5515u);
          return result;
        }
        return 3;
      }
      v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8)
        return 3;
      if ((v15 & 0x7F) == 0 || v16 < v19)
        return 3;
      if (v14 >= v5 || v14 < v4)
        goto LABEL_69;
      if (!*v14)
        return 3;
      v15 = 0;
      v21 = (v19 - 1);
      v22 = v7 - v21 - 2;
      v23 = (unint64_t)&v12[v21 + 2];
      while (v14 != (_BYTE *)-1)
      {
        if (v14 >= v5)
          goto LABEL_69;
        v10 = v16-- != 0;
        if (!v10)
          goto LABEL_70;
        v24 = *v14++;
        v15 = (v15 << 8) | v24;
        LODWORD(v19) = v19 - 1;
        if (!(_DWORD)v19)
        {
          if (a3)
            v25 = 0;
          else
            v25 = v15 > v22;
          v26 = v25;
          result = 3;
          if (v15 < 0x80 || (v26 & 1) != 0)
            return result;
          if (v15 >= v22)
            v27 = v22;
          else
            v27 = v15;
          v10 = (unint64_t)v5 >= v23;
          v28 = &v5[-v23];
          if (!v10 || (unint64_t)v4 > v23 || v27 > (unint64_t)v28)
            goto LABEL_69;
          a2[1] = v23;
          a2[2] = v27;
          if (a3)
            goto LABEL_34;
          return 0;
        }
      }
    }
LABEL_68:
    __break(0x5513u);
    goto LABEL_69;
  }
  v9 = *v6;
  v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10)
    return 3;
  v8 = 0;
  result = 3;
  while (v7 >= 2)
  {
    v11 = v8;
    if (v8 >> 57)
      break;
    if (v6 == (unsigned __int8 *)-1)
      goto LABEL_68;
    if (v6 >= v5 || v6 < v4)
      goto LABEL_69;
    v12 = (char *)(v6 + 1);
    --v7;
    v13 = *v6;
    v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54)
        return 3;
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t DERDecodeItemPartialBuffer(uint64_t result, unint64_t *a2, int a3)
{
  unint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  char *v12;
  unsigned __int8 v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char v24;

  v3 = *(_QWORD *)(result + 8);
  if (v3 < 2)
    return 3;
  v4 = *(_BYTE **)result;
  if (*(_QWORD *)result == -1)
    goto LABEL_54;
  v5 = &v4[v3];
  v6 = v4 + 1;
  v7 = v3 - 1;
  v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1)
    {
      if (v12 >= v5 || v12 < v4)
        goto LABEL_55;
      v14 = v12 + 1;
      v15 = *v12;
      v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        v17 = v16 < v15 && a3 == 0;
        v18 = (unint64_t)(v12 + 1);
        if (v17)
          return 3;
LABEL_28:
        if (v15 > (~v18 & 0x7FFFFFFFFFFFFFFFLL))
          return 7;
        if (v18 <= v18 + v15)
        {
          result = 0;
          a2[1] = v18;
          a2[2] = v15;
          return result;
        }
        goto LABEL_55;
      }
      v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8)
        return 3;
      if ((v15 & 0x7F) == 0 || v16 < v19)
        return 3;
      if (v14 >= v5 || v14 < v4)
      {
LABEL_55:
        __break(0x5519u);
LABEL_56:
        __break(0x5515u);
        return result;
      }
      if (!*v14)
        return 3;
      v15 = 0;
      v21 = (v19 - 1);
      v22 = v7 - v21 - 2;
      v18 = (unint64_t)&v12[v21 + 2];
      while (v14 != (_BYTE *)-1)
      {
        if (v14 >= v5)
          goto LABEL_55;
        v10 = v16-- != 0;
        if (!v10)
          goto LABEL_56;
        v23 = *v14++;
        v15 = (v15 << 8) | v23;
        LODWORD(v19) = v19 - 1;
        if (!(_DWORD)v19)
        {
          if (v15 <= v22)
            v24 = 1;
          else
            v24 = a3;
          result = 3;
          if (v15 >= 0x80 && (v24 & 1) != 0)
            goto LABEL_28;
          return result;
        }
      }
    }
LABEL_54:
    __break(0x5513u);
    goto LABEL_55;
  }
  v9 = *v6;
  v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10)
    return 3;
  v8 = 0;
  result = 3;
  while (v7 >= 2)
  {
    v11 = v8;
    if (v8 >> 57)
      break;
    if (v6 == (unsigned __int8 *)-1)
      goto LABEL_54;
    if (v6 >= v5 || v6 < v4)
      goto LABEL_55;
    v12 = (char *)(v6 + 1);
    --v7;
    v13 = *v6;
    v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54)
        return 3;
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t DERParseBitString(uint64_t result, unint64_t *a2, _BYTE *a3)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v10;

  *a3 = 0;
  *a2 = 0;
  a2[1] = 0;
  if (!*(_QWORD *)(result + 8))
    return 3;
  v3 = **(unsigned __int8 **)result;
  *a3 = v3;
  v4 = *(_QWORD *)(result + 8);
  if (v4 != 1)
  {
    if (v3 <= 7)
    {
      v5 = v4 - 1;
      if (!v4)
      {
LABEL_20:
        __break(0x5515u);
        goto LABEL_21;
      }
      v6 = *(_QWORD *)result;
      v7 = *(_QWORD *)result + v4;
      v8 = (unsigned __int8 *)(*(_QWORD *)result + v5);
      if ((unint64_t)v8 >= v7 || (unint64_t)v8 < v6)
      {
LABEL_19:
        __break(0x5519u);
        goto LABEL_20;
      }
      if (((0xFFu >> (8 - v3)) & *v8) == 0)
      {
        if (v6 == -1)
        {
LABEL_21:
          __break(0x5513u);
          return result;
        }
        v10 = v6 + 1;
        if (v6 + 1 <= v7 && v6 <= v10)
        {
          result = 0;
          *a2 = v10;
          a2[1] = v5;
          return result;
        }
        goto LABEL_19;
      }
    }
    return 3;
  }
  if (v3)
    return 3;
  else
    return 0;
}

uint64_t DERParseBoolean(unsigned __int8 **a1, BOOL *a2)
{
  int v2;
  uint64_t result;

  if (a1[1] != (unsigned __int8 *)1)
    return 3;
  v2 = **a1;
  if (v2 != 255 && v2 != 0)
    return 3;
  result = 0;
  *a2 = v2 != 0;
  return result;
}

uint64_t DERParseBooleanWithDefault(unsigned __int8 **a1, BOOL a2, BOOL *a3)
{
  unsigned __int8 *v3;
  int v4;
  uint64_t result;

  v3 = a1[1];
  if (!v3)
    goto LABEL_9;
  if (v3 == (unsigned __int8 *)1)
  {
    v4 = **a1;
    if (v4 == 255 || v4 == 0)
    {
      a2 = v4 != 0;
LABEL_9:
      result = 0;
      *a3 = a2;
      return result;
    }
  }
  return 3;
}

uint64_t DERParseInteger(char **a1, _DWORD *a2)
{
  uint64_t result;
  unint64_t v4;

  v4 = 0xAAAAAAAAAAAAAAAALL;
  result = DERParseInteger64(a1, &v4);
  if (!(_DWORD)result)
  {
    if (HIDWORD(v4))
    {
      return 7;
    }
    else
    {
      result = 0;
      *a2 = v4;
    }
  }
  return result;
}

uint64_t DERParseInteger64(char **a1, unint64_t *a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t result;
  unint64_t v5;
  unsigned int v6;

  v2 = (unint64_t)a1[1];
  if (!v2)
    return 3;
  v3 = (unsigned __int8 *)*a1;
  if (**a1 < 0)
    return 3;
  if (**a1)
  {
    if (v2 > 8)
      return 7;
    goto LABEL_10;
  }
  if (v2 >= 2)
  {
    if (((char)v3[1] & 0x80000000) == 0)
      return 3;
    if (v2 > 9)
      return 7;
  }
LABEL_10:
  v5 = 0;
  do
  {
    v6 = *v3++;
    v5 = v6 | (v5 << 8);
    --v2;
  }
  while (v2);
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t DERDecodeSeqInit(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8[3];

  memset(v8, 170, sizeof(v8));
  result = DERDecodeItemPartialBufferGetLength(a1, v8, 0);
  if (!(_DWORD)result)
  {
    v6 = v8[0];
    *a2 = v8[0];
    if (v6 >> 1 == 0x1000000000000008)
    {
      if (__CFADD__(v8[1], v8[2]))
      {
        __break(0x5513u);
      }
      else
      {
        v7 = v8[1] + v8[2];
        if (v8[1] <= v8[1] + v8[2])
        {
          result = 0;
          *a3 = v8[1];
          a3[1] = v7;
          return result;
        }
      }
      __break(0x5519u);
    }
    else
    {
      return 2;
    }
  }
  return result;
}

unint64_t *DERDecodeSeqContentInit(unint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *result;
  v3 = result[1];
  if (__CFADD__(*result, v3))
  {
    __break(0x5513u);
  }
  else
  {
    v4 = v2 + v3;
    if (v2 <= v4)
    {
      *a2 = v2;
      a2[1] = v4;
      return 0;
    }
  }
  __break(0x5519u);
  return result;
}

uint64_t DERDecodeSeqNext(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  v10[0] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 >= v3)
    return 1;
  v10[0] = *a1;
  v10[1] = v3 - v2;
  result = DERDecodeItemPartialBufferGetLength((uint64_t)v10, a2, 0);
  if (!(_DWORD)result)
  {
    v8 = a2[1];
    v7 = a2[2];
    if (!__CFADD__(v8, v7))
    {
      v9 = v8 + v7;
      if (v9 <= a1[1] && *a1 <= v9)
      {
        result = 0;
        *a1 = v9;
        return result;
      }
      __break(0x5519u);
    }
    __break(0x5513u);
  }
  return result;
}

uint64_t DERParseSequenceToObject(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  uint64_t result;
  unint64_t v12[3];

  memset(v12, 170, sizeof(v12));
  result = DERDecodeItemPartialBufferGetLength(a1, v12, 0);
  if (!(_DWORD)result)
  {
    if (v12[0] == 0x2000000000000010)
      return DERParseSequenceContentToObject(&v12[1], a2, a3, a4, a5, a6);
    else
      return 2;
  }
  return result;
}

uint64_t DERParseSequenceContentToObject(unint64_t *a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  unsigned __int16 v17;
  __int16 v18;
  unint64_t v19;
  char *v21;
  uint64_t v23;
  unint64_t v24;
  __int16 *v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  char *v29;
  unint64_t v31[3];
  unint64_t v32;
  unint64_t v33;

  v32 = 0;
  if (a6)
  {
    if (a6 > a5)
      goto LABEL_59;
    bzero((void *)a4, a6);
  }
  v10 = *a1;
  v11 = a1[1];
  if (__CFADD__(*a1, v11))
    goto LABEL_58;
  v12 = v10 + v11;
  if (v10 > v12)
LABEL_59:
    __break(0x5519u);
  v32 = *a1;
  v33 = v12;
  if (a2)
  {
    v13 = 0;
    v29 = (char *)(a4 + a5);
    while (1)
    {
      memset(v31, 170, sizeof(v31));
      v15 = v32;
      v14 = v33;
      result = DERDecodeSeqNext(&v32, v31);
      if ((_DWORD)result)
        break;
      if (a2 <= v13)
        return 2;
      while (1)
      {
        if (24 * (__int16)v13 > (unint64_t)~a3)
          goto LABEL_58;
        v17 = v13;
        v18 = *(_WORD *)(a3 + 24 * v13 + 16);
        if ((v18 & 2) != 0 || v31[0] == *(_QWORD *)(a3 + 24 * v13 + 8))
          break;
        result = 2;
        if ((v18 & 1) != 0)
        {
          ++v13;
          if (a2 > (unsigned __int16)(v17 + 1))
            continue;
        }
        return result;
      }
      if ((v18 & 4) == 0)
      {
        v19 = *(_QWORD *)(a3 + 24 * v13);
        if (v19 > 0xFFFFFFFFFFFFFFEFLL || v19 + 16 > a5)
          return 7;
        if (v19 > ~a4)
          goto LABEL_58;
        v21 = (char *)(a4 + v19);
        if (v21 >= v29 || (unint64_t)v21 < a4)
          goto LABEL_59;
        *(_OWORD *)v21 = *(_OWORD *)&v31[1];
        if ((v18 & 8) != 0)
        {
          if (v15 >= v31[1])
          {
            if (v21 + 16 <= v29 && v14 >= v15 && *((_QWORD *)v21 + 1) <= v14 - v15)
            {
              *(_QWORD *)v21 = v15;
              return 3;
            }
            goto LABEL_59;
          }
          if (v21 + 16 > v29)
            goto LABEL_59;
          v23 = *((_QWORD *)v21 + 1);
          v24 = v23 + v31[1] - v15;
          if (__CFADD__(v23, v31[1] - v15))
          {
            __break(0x5500u);
            return result;
          }
          if (v14 < v15 || v24 > v14 - v15)
            goto LABEL_59;
          *(_QWORD *)v21 = v15;
          *((_QWORD *)v21 + 1) = v24;
        }
      }
      ++v13;
      if (a2 == (unsigned __int16)(v17 + 1))
      {
        if (!__CFADD__(v31[1], v31[2]))
        {
          v28 = a1[1];
          if (!__CFADD__(*a1, v28))
          {
            v10 = v31[1] + v31[2];
            v12 = *a1 + v28;
            goto LABEL_47;
          }
        }
LABEL_58:
        __break(0x5513u);
        goto LABEL_59;
      }
      if (a2 <= (unsigned __int16)(v17 + 1))
      {
        v10 = v32;
        v12 = v33;
        goto LABEL_47;
      }
    }
    if ((_DWORD)result == 1)
    {
      if (a2 <= v13)
      {
        return 0;
      }
      else
      {
        v25 = (__int16 *)(a3 + 24 * v13 + 16);
        v26 = a2 - (unint64_t)v13;
        result = 0;
        while (1)
        {
          v27 = *v25;
          v25 += 12;
          if ((v27 & 1) == 0)
            break;
          if (!--v26)
            return result;
        }
        return 5;
      }
    }
  }
  else
  {
LABEL_47:
    if (v10 == v12)
      return 0;
    else
      return 3;
  }
  return result;
}

uint64_t DERParseSequence(uint64_t result, unsigned int a2, uint64_t a3, unint64_t a4, size_t a5)
{
  if ((a4 | 0x7FFFFFFFFFFFFFFFLL) >= a4)
    return DERParseSequenceToObject(result, a2, a3, a4, ~a4 & 0x7FFFFFFFFFFFFFFFLL, a5);
  __break(0x5519u);
  return result;
}

unint64_t *DERParseSequenceContent(unint64_t *result, unsigned int a2, uint64_t a3, unint64_t a4, size_t a5)
{
  if ((a4 | 0x7FFFFFFFFFFFFFFFLL) >= a4)
    return (unint64_t *)DERParseSequenceContentToObject(result, a2, a3, a4, ~a4 & 0x7FFFFFFFFFFFFFFFLL, a5);
  __break(0x5519u);
  return result;
}

uint64_t DERDecodeSequenceWithBlock(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4[3];

  memset(v4, 170, sizeof(v4));
  result = DERDecodeItemPartialBufferGetLength(a1, v4, 0);
  if (!(_DWORD)result)
  {
    if (v4[0] - 0x2000000000000012 >= 0xFFFFFFFFFFFFFFFELL)
      return DERDecodeSequenceContentWithBlock(&v4[1], a2);
    else
      return 2;
  }
  return result;
}

uint64_t DERDecodeSequenceContentWithBlock(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  char v7;
  unint64_t v8[3];
  unint64_t v9[2];

  v9[0] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (__CFADD__(*a1, v3))
  {
    __break(0x5513u);
LABEL_13:
    __break(0x5519u);
  }
  v4 = v2 + v3;
  if (v2 > v4)
    goto LABEL_13;
  v9[0] = *a1;
  v9[1] = v4;
  memset(v8, 170, sizeof(v8));
  v7 = 0;
  while (1)
  {
    LODWORD(result) = DERDecodeSeqNext(v9, v8);
    if ((_DWORD)result)
      break;
    LODWORD(result) = (*(uint64_t (**)(uint64_t, unint64_t *, char *))(a2 + 16))(a2, v8, &v7);
    if ((_DWORD)result)
      break;
    if (v7)
      return 0;
  }
  if (result <= 1)
    return 0;
  else
    return result;
}

void *aks_params_create(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  void *v5;

  v4 = calloc(8uLL, 1uLL);
  v5 = v4;
  if (v4)
  {
    *v4 = 0;
    if (a1)
    {
      if (encode_list_merge_dict((uint64_t)v4, a1, a1 + a2))
      {
        memset_s(v5, 8uLL, 0, 8uLL);
        free(v5);
        return 0;
      }
    }
  }
  return v5;
}

void *_params_get_der_key(int a1, int a2)
{
  void **v2;
  void *result;
  void **v4;
  void *v5;
  BOOL v6;

  switch(a1)
  {
    case 1:
      v2 = (void **)&der_key_access_groups;
      goto LABEL_28;
    case 2:
      v2 = (void **)&der_key_external_data;
      goto LABEL_28;
    case 3:
      v2 = (void **)&der_key_acm_handle;
      goto LABEL_28;
    case 4:
      v2 = (void **)&der_key_salt;
      goto LABEL_28;
    case 5:
      v2 = (void **)&der_key_data;
      goto LABEL_28;
    case 6:
      v2 = (void **)&der_key_ecdh_seed;
      goto LABEL_28;
    case 7:
      v2 = (void **)&der_key_ecdh_iv;
      goto LABEL_28;
    case 8:
      v4 = (void **)&der_key_raw_output;
      goto LABEL_30;
    case 9:
      v4 = (void **)&der_key_options;
      goto LABEL_30;
    case 10:
      v2 = (void **)&der_key_shared_info;
      goto LABEL_28;
    case 11:
      v2 = (void **)&der_key_shared_info2;
      goto LABEL_28;
    case 12:
      v2 = (void **)&der_key_transcode_shared_info;
      goto LABEL_28;
    case 13:
      v2 = (void **)&der_key_transcode_shared_info2;
      goto LABEL_28;
    case 14:
      v2 = (void **)&der_key_transcode_ecdh_seed;
      goto LABEL_28;
    case 15:
      v2 = (void **)&der_key_persona_uuid;
      goto LABEL_28;
    case 16:
      v4 = (void **)&der_key_sub_key_type;
      goto LABEL_30;
    case 17:
      v2 = (void **)&der_key_system_key_client_seed;
      goto LABEL_28;
    case 18:
      v4 = (void **)&der_key_system_key_options;
      goto LABEL_30;
    case 19:
      v5 = der_key_system_key_no_img4;
      v6 = a2 == 3;
      goto LABEL_31;
    case 20:
      v4 = (void **)&der_key_remote_session_signing_key_type;
      goto LABEL_30;
    case 21:
      v2 = (void **)&der_key_remote_session_signing_key_certificate;
      goto LABEL_28;
    case 22:
      v4 = (void **)&der_key_gid_ref_key_options;
      goto LABEL_30;
    case 23:
      v4 = (void **)&der_key_pka_flags;
      goto LABEL_30;
    case 24:
      v2 = (void **)&der_key_volume_uuid;
      goto LABEL_28;
    case 25:
      v2 = (void **)&der_key_seed;
LABEL_28:
      v5 = *v2;
      v6 = a2 == 2;
      goto LABEL_31;
    case 26:
      v4 = (void **)&der_key_test_flags;
LABEL_30:
      v5 = *v4;
      v6 = a2 == 1;
LABEL_31:
      if (v6)
        result = v5;
      else
        result = 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t aks_params_set_number(_QWORD *a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned __int8 *der_key;
  uint64_t v7;

  v5 = 3758097090;
  der_key = (unsigned __int8 *)_params_get_der_key(a2, 1);
  if (der_key)
  {
    v7 = (uint64_t)der_key;
    if (!encode_list_remove_key(a1, der_key)
      && (!a3 || !encode_list_add_number(a1, v7, *a3)))
    {
      return 0;
    }
  }
  return v5;
}

uint64_t aks_params_set_data(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned __int8 *der_key;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  uint64_t v15;

  v8 = 3758097090;
  der_key = (unsigned __int8 *)_params_get_der_key(a2, 2);
  if (!der_key)
    return v8;
  v10 = (uint64_t)der_key;
  if (encode_list_remove_key(a1, der_key))
    return v8;
  if (!a3)
    return 0;
  v11 = 0x2000000000000010;
  if (a2 != 1)
  {
    if (a2 == 2)
    {
      v11 = 0x2000000000000011;
      goto LABEL_7;
    }
    if (encode_list_add_data(a1, v10, a3, a4))
      return v8;
    return 0;
  }
LABEL_7:
  v12 = a3 + a4;
  v14[0] = a3;
  v14[1] = v12;
  v15 = 0;
  if (ccder_blob_decode_tag(v14, &v15)
    && v15 == v11
    && !encode_list_add_der(a1, v10, a3, v12))
  {
    return 0;
  }
  return v8;
}

uint64_t aks_params_free(void ***a1)
{
  uint64_t result;
  void **v3;

  result = 3758097090;
  if (a1)
  {
    v3 = *a1;
    if (*a1)
    {
      *a1 = 0;
      encode_list_free(v3);
      memset_s(v3, 8uLL, 0, 8uLL);
      free(v3);
      return 0;
    }
  }
  return result;
}

uint64_t aks_ref_key_create(int a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, void ***a6)
{
  uint64_t v12;
  void *v13;
  void **v14;
  void *v15;
  void **v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  size_t v25;
  void *v26;
  size_t v27;

  v12 = 3758097090;
  v13 = der_key_op_create;
  v14 = (void **)calloc(8uLL, 1uLL);
  *v14 = 0;
  encode_list_add_key(v14, (uint64_t)der_key_op, (uint64_t)v13);
  v26 = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0;
  if (!a6)
    goto LABEL_14;
  v15 = calloc(0x50uLL, 1uLL);
  v23 = v15;
  if (!v15)
  {
    v12 = 3758604298;
    goto LABEL_14;
  }
  v16 = (void **)v15;
  memset_s(v15, 0x50uLL, 0, 0x50uLL);
  if (a4 && encode_list_merge_dict((uint64_t)v14, a4, a4 + a5)
    || encode_list_add_number(v14, (uint64_t)der_key_keybag_class, a2)
    || encode_list_add_number(v14, (uint64_t)der_key_type, a3)
    || encode_list_dict(v14, &v26, &v27))
  {
LABEL_17:
    aks_ref_key_free((uint64_t *)&v23);
    goto LABEL_14;
  }
  v17 = _aks_operation(a1, v26, v27, &v24, &v25);
  if ((_DWORD)v17)
  {
    v12 = v17;
    goto LABEL_17;
  }
  v18 = (char *)v24;
  v19 = v25;
  *v16 = v24;
  v16[1] = (void *)v19;
  *((_DWORD *)v16 + 10) = a1;
  v16[2] = &v18[v19];
  v21 = 0;
  v22 = 0;
  if (der_dict_find_value((uint64_t)der_key_ref_key, &v21, &v22, (uint64_t)v18, (uint64_t)&v18[v19]))
    v16[4] = v21;
  if (der_dict_find_value((uint64_t)der_key_external_data, &v21, &v22, (uint64_t)*v16, (uint64_t)v16[2]))
    v16[3] = v21;
  v12 = 0;
  *a6 = v16;
  v24 = 0;
  v25 = 0;
LABEL_14:
  encode_list_free(v14);
  memset_s(v14, 8uLL, 0, 8uLL);
  free(v14);
  memset_s(v26, v27, 0, v27);
  free(v26);
  memset_s(v24, v25, 0, v25);
  free(v24);
  return v12;
}

uint64_t aks_ref_key_free(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = *a1;
  if (!*a1)
    return 3758097090;
  *a1 = 0;
  if (*(_QWORD *)v1)
  {
    memset_s(*(void **)v1, *(_QWORD *)(v1 + 8), 0, *(_QWORD *)(v1 + 8));
    free(*(void **)v1);
  }
  v2 = *(void **)(v1 + 48);
  if (v2)
  {
    memset_s(v2, *(_QWORD *)(v1 + 56), 0, *(_QWORD *)(v1 + 56));
    free(*(void **)(v1 + 48));
  }
  v3 = *(void **)(v1 + 64);
  if (v3)
  {
    memset_s(v3, *(_QWORD *)(v1 + 72), 0, *(_QWORD *)(v1 + 72));
    free(*(void **)(v1 + 64));
  }
  memset_s((void *)v1, 0x50uLL, 0, 0x50uLL);
  free((void *)v1);
  return 0;
}

uint64_t aks_ref_key_create_with_blob(int a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v4;
  void *v9;
  uint64_t v10;
  void *v12;

  v4 = 3758097090;
  if (a2)
  {
    if (a3)
    {
      if (der_get_sizeof((uint64_t)a2, (uint64_t)a2 + a3) == a3)
      {
        v4 = 3758604298;
        v9 = calloc(0x50uLL, 1uLL);
        v12 = v9;
        if (v9)
        {
          v10 = (uint64_t)v9;
          memset_s(v9, 0x50uLL, 0, 0x50uLL);
          *(_DWORD *)(v10 + 40) = a1;
          if (_set_blob(v10, a2, a3))
          {
            aks_ref_key_free((uint64_t *)&v12);
          }
          else
          {
            v4 = 0;
            *a4 = v10;
          }
        }
      }
    }
  }
  return v4;
}

uint64_t _aks_operation(int a1, const void *a2, size_t a3, _QWORD *a4, size_t *a5)
{
  mach_port_t aks_client_connection;
  mach_port_t v11;
  uint64_t v12;
  void *v13;
  size_t __count;
  uint64_t input;
  _BYTE __src[32768];

  aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      v11 = aks_client_connection;
      v12 = 3758097090;
      if (der_get_sizeof((uint64_t)a2, (uint64_t)a2 + a3) == a3)
      {
        bzero(__src, 0x8000uLL);
        __count = 0x8000;
        input = a1;
        v12 = IOConnectCallMethod(v11, 0x2Bu, &input, 1u, a2, a3, 0, 0, __src, &__count);
        if (!(_DWORD)v12 && a4 && a5)
        {
          v13 = calloc(__count, 1uLL);
          *a4 = v13;
          if (v13)
          {
            memcpy(v13, __src, __count);
            v12 = 0;
            *a5 = __count;
          }
          else
          {
            v12 = 3758097085;
          }
        }
      }
    }
    else
    {
      v12 = 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_aks_operation", ":", 457, "", 0, "", "");
    v12 = 3758097084;
  }
  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v12;
}

uint64_t _set_blob(uint64_t a1, const void *a2, size_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  if (!der_dict_find_value((uint64_t)der_key_ref_key, &v10, &v11, (uint64_t)a2, (uint64_t)a2 + a3))
    return 3758097090;
  if (*(_QWORD *)a1)
  {
    memset_s(*(void **)a1, *(_QWORD *)(a1 + 8), 0, *(_QWORD *)(a1 + 8));
    free(*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  v6 = calloc(a3, 1uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = a3;
  if (!v6)
    return 3758604298;
  memcpy(v6, a2, a3);
  v7 = *(void **)a1;
  v8 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = v8;
  if (der_dict_find_value((uint64_t)der_key_ref_key, &v10, &v11, (uint64_t)v7, v8))
    *(_QWORD *)(a1 + 32) = v10;
  if ((der_dict_find_value((uint64_t)der_key_external_data, &v10, &v11, *(_QWORD *)a1, *(_QWORD *)(a1 + 16)) & 1) != 0
    || (result = der_dict_find_value((uint64_t)der_key_auth_data, &v10, &v11, *(_QWORD *)a1, *(_QWORD *)(a1 + 16)),
        (_DWORD)result))
  {
    result = 0;
    *(_QWORD *)(a1 + 24) = v10;
  }
  return result;
}

uint64_t _get_merged_params(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;

  v4 = 3758604298;
  if (a1)
  {
    v8 = *(_QWORD *)(a1 + 48);
    if ((!v8 || !encode_list_merge_dict((uint64_t)a2, v8, v8 + *(_QWORD *)(a1 + 56)))
      && (!a3 || !encode_list_merge_dict((uint64_t)a2, a3, a3 + a4)))
    {
      encode_list_remove_key(a2, (unsigned __int8 *)der_key_external_data);
      return 0;
    }
  }
  return v4;
}

uint64_t aks_ref_key_get_type(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    return 0;
  v3 = 0;
  v4 = 0;
  result = der_dict_find_value((uint64_t)der_key_type, &v3, &v4, v1, *(_QWORD *)(a1 + 16));
  if ((_DWORD)result)
    return der_get_number(v3, v3 + v4);
  return result;
}

uint64_t aks_ref_key_get_public_key(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int type;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  v20 = 0;
  v19 = 0;
  v2 = a1[4];
  if (!v2)
    return 0;
  v17 = 0;
  v18 = 0;
  if (der_dict_find_value((uint64_t)der_key_public_key, &v17, &v18, v2, a1[2]))
  {
    *(_QWORD *)&v16 = v17;
    *((_QWORD *)&v16 + 1) = v17 + v18;
    der_utils_decode_implicit_raw_octet_string(&v16, 4, &v20, &v19);
  }
  type = aks_ref_key_get_type((uint64_t)a1);
  if ((type - 7) < 2)
  {
    v6 = ccec_cp_384();
    goto LABEL_9;
  }
  if ((type - 4) <= 1)
  {
    v6 = ccec_cp_256();
LABEL_9:
    v8 = (_QWORD *)v6;
    if (v6)
    {
      v9 = firebloom_cp_prime_bitlen(v6);
      if (v20 == (unint64_t)(v9 + 7) >> 3)
      {
        if (v19 && !a1[8])
        {
          __chkstk_darwin();
          v11 = (char *)&v15 - v10;
          bzero((char *)&v15 - v10, v10);
          ccec_compact_import_pub(v8, v20, v19, v11);
          v12 = (2 * firebloom_cp_prime_size()) | 1;
          v13 = calloc(v12, 1uLL);
          a1[8] = (uint64_t)v13;
          a1[9] = v12;
          if (v13)
            ccec_export_pub(v11, v13);
          cc_clear(24 * *v8 + 16, v11);
        }
        v14 = a1[9];
        v19 = a1[8];
        v20 = v14;
      }
    }
  }
  *a2 = v20;
  return v19;
}

uint64_t aks_sik_optional_params(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v10;
  uint64_t v12;
  size_t v13;
  void *v14;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v10 = 3758097090;
  if ((!a1 || a2 <= 0x20 && !encode_list_add_data(&v14, (uint64_t)der_key_salt, a1, a2))
    && (!a3 || !encode_list_add_data(&v14, (uint64_t)der_key_data, a3, a4)))
  {
    if (encode_list_is_empty(&v14))
    {
      v10 = 0;
    }
    else if (!encode_list_dict(&v14, &v12, &v13))
    {
      v10 = 0;
      *a5 = v12;
      *a6 = v13;
    }
  }
  encode_list_free(&v14);
  return v10;
}

uint64_t aks_sik_collection(uint64_t a1, uint64_t a2, _QWORD *a3, size_t *a4)
{
  uint64_t v8;
  void *v9;
  void **v10;
  void *__s;
  rsize_t __n;

  v8 = 3758097090;
  v9 = der_key_op_sik_collection;
  v10 = (void **)calloc(8uLL, 1uLL);
  *v10 = 0;
  encode_list_add_key(v10, (uint64_t)der_key_op, (uint64_t)v9);
  __s = 0;
  __n = 0;
  if ((!a1 || !encode_list_merge_dict((uint64_t)v10, a1, a1 + a2))
    && !encode_list_dict(v10, &__s, &__n))
  {
    v8 = _aks_operation(-1, __s, __n, a3, a4);
  }
  encode_list_free(v10);
  memset_s(v10, 8uLL, 0, 8uLL);
  free(v10);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  return v8;
}

uint64_t aks_system_key_collection(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v12;
  void *v13;
  void **v14;
  uint64_t v16;
  size_t v17;
  void *__s;
  rsize_t __n;

  v12 = 3758097090;
  v13 = der_key_op_system_key_collect;
  v14 = (void **)calloc(8uLL, 1uLL);
  *v14 = 0;
  encode_list_add_key(v14, (uint64_t)der_key_op, (uint64_t)v13);
  __s = 0;
  __n = 0;
  v16 = 0;
  v17 = 0;
  if ((!a3 || !encode_list_merge_dict((uint64_t)v14, a3, a3 + a4))
    && !encode_list_add_number(v14, (uint64_t)der_key_system_key_type, a1)
    && !encode_list_add_number(v14, (uint64_t)der_key_system_key_generation, a2)
    && !encode_list_dict(v14, &__s, &__n))
  {
    v12 = _aks_operation(-1, __s, __n, &v16, &v17);
    if (!(_DWORD)v12)
    {
      *a5 = v16;
      *a6 = v17;
    }
  }
  encode_list_free(v14);
  memset_s(v14, 8uLL, 0, 8uLL);
  free(v14);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  return v12;
}

uint64_t aks_system_key_attest(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v14;
  void *v15;
  void **v16;
  uint64_t v18;
  size_t v19;
  void *__s;
  rsize_t __n;

  v14 = 3758097090;
  v15 = der_key_op_system_key_attest;
  v16 = (void **)calloc(8uLL, 1uLL);
  *v16 = 0;
  encode_list_add_key(v16, (uint64_t)der_key_op, (uint64_t)v15);
  __s = 0;
  __n = 0;
  v18 = 0;
  v19 = 0;
  if (a3)
  {
    if (!_get_merged_params(a3, v16, a4, a5))
    {
      encode_list_remove_key(v16, (unsigned __int8 *)der_key_ref_key);
      if (!encode_list_add_der(v16, (uint64_t)der_key_ref_key, *(_QWORD *)a3, *(_QWORD *)(a3 + 16))
        && !encode_list_add_number(v16, (uint64_t)der_key_system_key_type, a1)
        && !encode_list_add_number(v16, (uint64_t)der_key_system_key_generation, a2)
        && !encode_list_dict(v16, &__s, &__n))
      {
        v14 = _aks_operation(*(_DWORD *)(a3 + 40), __s, __n, &v18, &v19);
        if (!(_DWORD)v14)
        {
          *a6 = v18;
          *a7 = v19;
        }
      }
    }
  }
  encode_list_free(v16);
  memset_s(v16, 8uLL, 0, 8uLL);
  free(v16);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  return v14;
}

uint64_t aks_system_key_operate(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  void **v10;
  void *v12;
  rsize_t __smax;
  void *__s;
  rsize_t __n;

  v8 = 3758097090;
  v9 = der_key_op_system_key_operate;
  v10 = (void **)calloc(8uLL, 1uLL);
  *v10 = 0;
  encode_list_add_key(v10, (uint64_t)der_key_op, (uint64_t)v9);
  __s = 0;
  __n = 0;
  v12 = 0;
  __smax = 0;
  if ((!a3 || !encode_list_merge_dict((uint64_t)v10, a3, a3 + a4))
    && !encode_list_add_number(v10, (uint64_t)der_key_system_key_type, a1)
    && !encode_list_add_number(v10, (uint64_t)der_key_system_key_operation, a2)
    && !encode_list_dict(v10, &__s, &__n))
  {
    v8 = _aks_operation(-1, __s, __n, &v12, &__smax);
  }
  encode_list_free(v10);
  memset_s(v10, 8uLL, 0, 8uLL);
  free(v10);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  if (v12)
  {
    memset_s(v12, __smax, 0, __smax);
    free(v12);
  }
  return v8;
}

uint64_t aks_system_key_get_public(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v12;
  void *v13;
  void **v14;
  uint64_t v16;
  size_t v17;
  void *__s;
  rsize_t __n;

  v12 = 3758097090;
  v13 = der_key_op_system_key_get_public;
  v14 = (void **)calloc(8uLL, 1uLL);
  *v14 = 0;
  encode_list_add_key(v14, (uint64_t)der_key_op, (uint64_t)v13);
  __s = 0;
  __n = 0;
  v16 = 0;
  v17 = 0;
  if ((!a3 || !encode_list_merge_dict((uint64_t)v14, a3, a3 + a4))
    && !encode_list_add_number(v14, (uint64_t)der_key_system_key_type, a1)
    && !encode_list_add_number(v14, (uint64_t)der_key_system_key_generation, a2)
    && !encode_list_dict(v14, &__s, &__n))
  {
    v12 = _aks_operation(-1, __s, __n, &v16, &v17);
    if (!(_DWORD)v12)
    {
      *a5 = v16;
      *a6 = v17;
    }
  }
  encode_list_free(v14);
  memset_s(v14, 8uLL, 0, 8uLL);
  free(v14);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  return v12;
}

uint64_t get_aks_client_connection()
{
  uint64_t result;

  if (get_aks_client_dispatch_queue_onceToken != -1)
    dispatch_once(&get_aks_client_dispatch_queue_onceToken, &__block_literal_global_168);
  dispatch_sync((dispatch_queue_t)get_aks_client_dispatch_queue_connection_queue, &__block_literal_global_150);
  result = get_aks_client_connection_connection;
  if (!get_aks_client_connection_connection)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStore");
    return get_aks_client_connection_connection;
  }
  return result;
}

void __get_aks_client_connection_block_invoke(id a1)
{
  if (!get_aks_client_connection_connection)
    get_aks_client_connection_connection = _copy_aks_client_connection("IOService:/IOResources/AppleKeyStore", "AppleKeyStore");
}

void __get_aks_client_dispatch_queue_block_invoke(id a1)
{
  get_aks_client_dispatch_queue_connection_queue = (uint64_t)dispatch_queue_create("aks-client-queue", 0);
}

uint64_t _copy_aks_client_connection(char *path, const char *a2)
{
  io_service_t v3;
  io_object_t v4;
  kern_return_t v5;
  const __CFDictionary *v6;
  io_service_t MatchingService;
  io_object_t v8;
  uint64_t result;
  kern_return_t v10;
  io_connect_t connect;

  connect = 0;
  v3 = IORegistryEntryFromPath(kIOMasterPortDefault, path);
  if (!v3 || (v4 = v3, v5 = IOServiceOpen(v3, mach_task_self_, 0, &connect), IOObjectRelease(v4), v5))
  {
    v6 = IOServiceMatching(a2);
    MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v6);
    if (MatchingService)
    {
      v8 = MatchingService;
      IOServiceOpen(MatchingService, mach_task_self_, 0, &connect);
      IOObjectRelease(v8);
    }
  }
  result = connect;
  if (connect)
  {
    v10 = IOConnectCallMethod(connect, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    result = connect;
    if (v10)
    {
      IOServiceClose(connect);
      return 0;
    }
  }
  return result;
}

uint64_t aks_absinthe_generate(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, size_t *a7)
{
  uint64_t v7;
  mach_port_t aks_client_connection;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  mach_port_t v17;
  size_t v19;
  int v20;
  char *v21;
  uint64_t input;

  v21 = 0;
  input = a1;
  v20 = 0;
  v7 = 3758097090;
  if (a2 && a6 && a7)
  {
    aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      v17 = aks_client_connection;
      aks_pack_data(&v21, (unsigned int *)&v20, 2, v12, v13, v14, v15, v16, a2);
      v19 = *a7;
      v7 = IOConnectCallMethod(v17, 0x51u, &input, 1u, v21, v20, 0, 0, a6, &v19);
      if (!(_DWORD)v7)
        *a7 = (int)v19;
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_absinthe_generate", ":", 3253, "", 0, "", "");
      v7 = 3758097084;
    }
  }
  free(v21);
  return v7;
}

unint64_t firebloom_cp_prime_size()
{
  return (unint64_t)(cczp_bitlen() + 7) >> 3;
}

BOOL der_equal(const void *a1, uint64_t a2, const void *a3, uint64_t a4)
{
  size_t v7;

  v7 = der_get_sizeof((uint64_t)a1, a2);
  return v7 == der_get_sizeof((uint64_t)a3, a4) && memcmp(a1, a3, v7) == 0;
}

uint64_t der_get_sizeof(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v6[0] = a1;
  v6[1] = a2;
  v4 = 0;
  v5 = 0;
  if (ccder_blob_decode_tag(v6, &v5) && ccder_blob_decode_len(v6, &v4))
    return v6[0] + v4 - a1;
  else
    return 0;
}

uint64_t der_dict_iterate(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a1;
  v11[1] = a2;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  result = ccder_blob_decode_range(v11, 0x2000000000000011, v11);
  if ((_DWORD)result)
  {
    if (ccder_blob_decode_sequence_tl(v11, &v9))
    {
      while (1)
      {
        v7 = v9;
        result = ccder_blob_decode_tl(&v9, 12, &v8);
        if (!(_DWORD)result)
          break;
        if (v9 - v7 != 2)
          return 0;
        result = a3(v7, v10 - v7, v9 + v8, v10 - (v9 + v8), a4);
        if (!(_DWORD)result)
          return result;
        v11[0] = v10;
        if ((ccder_blob_decode_sequence_tl(v11, &v9) & 1) == 0)
          return 1;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t der_dict_find_value(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  v10 = a1;
  v11 = 0;
  if (a1)
  {
    der_dict_iterate(a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_dict_find_value_cb, (uint64_t)&v10);
    if (a2)
    {
      if (a3)
      {
        v7 = v11;
        v8 = v12;
        *a2 = v11;
        *a3 = v8 - v7;
      }
    }
  }
  return v13;
}

BOOL _dict_find_value_cb(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v8;

  v8 = der_equal(*(const void **)a5, *(_QWORD *)a5 + *(unsigned __int8 *)(*(_QWORD *)a5 + 1) + 2, a1, (uint64_t)a1 + a2);
  if (v8)
  {
    *(_BYTE *)(a5 + 24) = 1;
    *(_QWORD *)(a5 + 8) = a3;
    *(_QWORD *)(a5 + 16) = a3 + a4;
  }
  return !v8;
}

uint64_t der_get_number(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t result;
  unsigned int v5;
  _QWORD v6[2];
  uint64_t v7;

  v7 = 0;
  v6[0] = a1;
  v6[1] = a2;
  if (!ccder_blob_decode_tl(v6, 2, &v7))
    return 0;
  v2 = v7;
  if ((unint64_t)(v7 - 9) < 0xFFFFFFFFFFFFFFF8)
    return 0;
  v3 = (unsigned __int8 *)v6[0];
  result = (uint64_t)*(char *)v6[0] >> 7;
  do
  {
    v5 = *v3++;
    result = v5 | (unint64_t)(result << 8);
    --v2;
  }
  while (v2);
  return result;
}

double der_utils_decode_implicit_raw_octet_string(__int128 *a1, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  double result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v11 = *a1;
  v9 = 0;
  v10 = 0;
  if (ccder_blob_decode_range(&v11, a2, &v9))
  {
    v8 = v9;
    *a4 = v9;
    *a3 = v10 - v8;
    result = *(double *)&v11;
    *a1 = v11;
  }
  return result;
}

uint64_t encode_list_free(void **a1)
{
  void *v2;
  void *v3;

  if (!a1)
    return 0xFFFFFFFFLL;
  while (1)
  {
    v2 = *a1;
    if (!*a1)
      break;
    v3 = (void *)*((_QWORD *)v2 + 1);
    *a1 = *(void **)v2;
    if (v3)
    {
      memset_s(v3, *((_QWORD *)v2 + 2), 0, *((_QWORD *)v2 + 2));
      free(*((void **)v2 + 1));
    }
    memset_s(v2, 0x18uLL, 0, 0x18uLL);
    free(v2);
  }
  return 0;
}

uint64_t encode_list_remove_key(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD **v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *i;
  void *v6;

  if (!a1)
    return 0xFFFFFFFFLL;
  v2 = (_QWORD **)a1;
  result = (uint64_t)_encode_list_find_key(a1, a2);
  if (result)
  {
    v4 = result;
    for (i = *v2; i != (_QWORD *)result; i = (_QWORD *)*i)
      v2 = (_QWORD **)i;
    *v2 = *(_QWORD **)result;
    v6 = *(void **)(result + 8);
    if (v6)
    {
      memset_s(v6, *(_QWORD *)(v4 + 16), 0, *(_QWORD *)(v4 + 16));
      free(*(void **)(v4 + 8));
    }
    memset_s((void *)v4, 0x18uLL, 0, 0x18uLL);
    free((void *)v4);
    return 0;
  }
  return result;
}

_QWORD *_encode_list_find_key(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  uint64_t v4;
  const void *v6;
  uint64_t v7;

  if (!a1)
    return 0;
  v6 = 0;
  v7 = 0;
  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    do
    {
      v4 = v2[1] + v2[2];
      v6 = (const void *)v2[1];
      v7 = v4;
      if (ccder_blob_decode_sequence_tl(&v6, &v6) && der_equal(a2, (uint64_t)&a2[a2[1] + 2], v6, v7))
        break;
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return v2;
}

uint64_t der_key_validate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[2];
  unint64_t v5;

  v2 = a1;
  v4[1] = a2;
  v5 = 0;
  v4[0] = a1;
  if ((ccder_blob_decode_tl(v4, 12, &v5) & 1) == 0)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s bad 1%s\n", "aks", "", "", "", "der_key_validate");
    return 0;
  }
  if (v5 >= 0x11)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s bad 2%s\n", "aks", "", "", "", "der_key_validate");
    return 0;
  }
  return v2;
}

uint64_t encode_list_merge_dict(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
    return der_dict_iterate(a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_merge_dict_cb, a1)- 1;
  else
    return 4294967285;
}

uint64_t _merge_dict_cb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned __int8 *v8;
  uint64_t v9;

  v8 = (unsigned __int8 *)der_key_validate(a1, a1 + a2);
  if (v8)
  {
    v9 = (uint64_t)v8;
    if (!encode_list_remove_key(a5, v8) && !encode_list_add_der(a5, v9, a3, a3 + a4))
      return 1;
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s fail%s\n", "aks", "", "", "", "_merge_dict_cb", ":", 647, "", 0, "", "");
  return 0;
}

uint64_t encode_list_dict(_QWORD *a1, _QWORD *a2, size_t *a3)
{
  uint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  rsize_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  size_t v16;
  char *v17;
  void *v18;
  unint64_t v19;
  char *v20;
  char *v22;
  char v23;
  char *v25;
  char *v26;

  v3 = 0xFFFFFFFFLL;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        v7 = (_QWORD *)*a1;
        if (*a1)
        {
          v8 = 0;
          v9 = 0;
          v10 = 0;
          do
          {
            v10 += v7[2];
            v7 = (_QWORD *)*v7;
            v9 -= 16;
            --v8;
          }
          while (v7);
          if (v8 >= 0xF000000000000001 && (v11 = -v9, (v12 = (char *)calloc(-v9, 1uLL)) != 0))
          {
            v13 = v12;
            v14 = (_QWORD *)*a1;
            if (*a1)
            {
              v15 = v12;
              do
              {
                *(_OWORD *)v15 = *(_OWORD *)(v14 + 1);
                v15 += 16;
                v14 = (_QWORD *)*v14;
              }
              while (v14);
            }
            qsort(v12, -(uint64_t)v8, 0x10uLL, (int (__cdecl *)(const void *, const void *))_qsort_compare);
            v16 = ccder_sizeof(0x2000000000000011, v10);
            v17 = (char *)calloc(v16, 1uLL);
            v18 = v17;
            if (v17)
            {
              v25 = v17;
              v26 = &v17[v16];
              v19 = v8 - 1;
              v20 = &v13[-v9 - 8];
              while (!__CFADD__(v19++, 1))
              {
                v22 = v20 - 16;
                v23 = ccder_blob_encode_body(&v25, *(_QWORD *)v20, *((_QWORD *)v20 - 1));
                v20 = v22;
                if ((v23 & 1) == 0)
                  goto LABEL_16;
              }
              if (!ccder_blob_encode_tl(&v25, 0x2000000000000011, v10) || v25 != v26)
              {
LABEL_16:
                v3 = 0xFFFFFFFFLL;
                goto LABEL_20;
              }
              v3 = 0;
              *a2 = v18;
              *a3 = v16;
              v18 = 0;
            }
            else
            {
              v3 = 4294967279;
            }
LABEL_20:
            memset_s(v13, v11, 0, v11);
            free(v13);
            if (v18)
            {
              memset_s(v18, v16, 0, v16);
              free(v18);
            }
          }
          else
          {
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
  }
  return v3;
}

uint64_t encode_list_add_der(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  char *v18;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;

  result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3 && a4)
  {
    v9 = der_get_sizeof(a3, a4);
    if (v9 <= a4 - a3)
    {
      v10 = v9;
      v11 = ccder_sizeof(0x2000000000000010, v9 + *(unsigned __int8 *)(a2 + 1) + 2);
      v12 = (char *)calloc(v11, 1uLL);
      if (!v12)
        return 4294967279;
      v13 = v12;
      v14 = &v12[v11];
      v22 = v12;
      v23 = &v12[v11];
      if (ccder_blob_encode_body(&v22, v10, a3))
      {
        v24 = v13;
        v25 = v23;
        v15 = ccder_blob_encode_body(&v24, *(unsigned __int8 *)(a2 + 1) + 2, a2);
        v16 = v25;
        if (!v15)
          v16 = 0;
        v24 = v13;
        v25 = v16;
        v17 = ccder_blob_encode_tl(&v24, 0x2000000000000010, v14 - v16);
        v18 = v25;
        if (!v17)
          v18 = 0;
        if (v18 && v18 == v13)
        {
          v20 = calloc(0x18uLL, 1uLL);
          if (v20)
          {
            v21 = v20;
            result = 0;
            v21[1] = v13;
            v21[2] = v11;
            *v21 = *a1;
            *a1 = v21;
            return result;
          }
        }
      }
      memset_s(v13, v11, 0, v11);
      free(v13);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t encode_list_add_key(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return encode_list_add_der(a1, a2, a3, a3 + *(unsigned __int8 *)(a3 + 1) + 2);
}

uint64_t encode_list_add_data(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  char *v18;
  BOOL v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;

  result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3)
  {
    v9 = *(unsigned __int8 *)(a2 + 1);
    v10 = ccder_sizeof(4, a4);
    v11 = ccder_sizeof(0x2000000000000010, v9 + v10 + 2);
    v12 = (char *)calloc(v11, 1uLL);
    if (v12)
    {
      v13 = v12;
      v14 = &v12[v11];
      v22 = v12;
      v23 = &v12[v11];
      if (!ccder_blob_encode_body(&v22, a4, a3) || !ccder_blob_encode_tl(&v22, 4, a4))
        goto LABEL_19;
      v24 = v13;
      v25 = v23;
      v15 = ccder_blob_encode_body(&v24, *(unsigned __int8 *)(a2 + 1) + 2, a2);
      v16 = v25;
      if (!v15)
        v16 = 0;
      v24 = v13;
      v25 = v16;
      v17 = ccder_blob_encode_tl(&v24, 0x2000000000000010, v14 - v16);
      v18 = v25;
      if (!v17)
        v18 = 0;
      v19 = v18 && v18 == v13;
      if (v19 && (v20 = calloc(0x18uLL, 1uLL)) != 0)
      {
        v21 = v20;
        result = 0;
        v21[1] = v13;
        v21[2] = v11;
        *v21 = *a1;
        *a1 = v21;
      }
      else
      {
LABEL_19:
        memset_s(v13, v11, 0, v11);
        free(v13);
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      return 4294967279;
    }
  }
  return result;
}

uint64_t encode_list_add_number(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  int v21;
  char *v22;
  BOOL v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v6 = HIBYTE(a3);
  if ((HIBYTE(a3) + 1) > 1u)
  {
    v11 = 8;
  }
  else
  {
    v7 = 9;
    v8 = 48;
    v9 = 1;
    while ((unint64_t)(v7 - 2) >= 2)
    {
      v10 = a3 >> v8;
      --v7;
      v8 -= 8;
      if ((_DWORD)v6 != v10)
      {
        v9 = v7 - 1;
        goto LABEL_8;
      }
    }
    v7 = 2;
LABEL_8:
    if ((((a3 >> (8 * v9 - 8)) ^ v6) & 0x80) != 0)
      v11 = v7;
    else
      v11 = v9;
  }
  v30 = 0;
  result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    v13 = *(unsigned __int8 *)(a2 + 1);
    v14 = ccder_sizeof(2, v11);
    v15 = ccder_sizeof(0x2000000000000010, v13 + v14 + 2);
    v16 = (char *)calloc(v15, 1uLL);
    if (v16)
    {
      v17 = v16;
      v18 = v11;
      do
      {
        *((_BYTE *)&v30 + v18 - 1) = v3;
        v3 >>= 8;
        --v18;
      }
      while (v18);
      v26 = v16;
      v27 = &v16[v15];
      if ((ccder_blob_encode_body(&v26, v11, &v30) & 1) == 0 || !ccder_blob_encode_tl(&v26, 2, v11))
        goto LABEL_30;
      v28 = v17;
      v29 = v27;
      v19 = ccder_blob_encode_body(&v28, *(unsigned __int8 *)(a2 + 1) + 2, a2);
      v20 = v29;
      if (!v19)
        v20 = 0;
      v28 = v17;
      v29 = v20;
      v21 = ccder_blob_encode_tl(&v28, 0x2000000000000010, &v17[v15] - v20);
      v22 = v29;
      if (!v21)
        v22 = 0;
      v23 = v22 && v22 == v17;
      if (v23 && (v24 = calloc(0x18uLL, 1uLL)) != 0)
      {
        v25 = v24;
        result = 0;
        v25[1] = v17;
        v25[2] = v15;
        *v25 = *a1;
        *a1 = v25;
      }
      else
      {
LABEL_30:
        memset_s(v17, v15, 0, v15);
        free(v17);
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      return 4294967279;
    }
  }
  return result;
}

BOOL encode_list_is_empty(_QWORD *a1)
{
  return *a1 == 0;
}

uint64_t _qsort_compare(_QWORD *a1, void **a2)
{
  uint64_t v2;
  char *v3;
  const void *v4;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  int v9;
  int v11;
  void *__s2[2];
  _QWORD v13[2];
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v2 = *a1 + a1[1];
  v13[0] = *a1;
  v13[1] = v2;
  v3 = (char *)a2[1] + (_QWORD)*a2;
  __s2[0] = *a2;
  __s2[1] = v3;
  if (!ccder_blob_decode_sequence_tl(v13, v13))
    return 4294967293;
  if (!ccder_blob_decode_sequence_tl(__s2, __s2))
    return 4294967293;
  v17 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  if (!ccder_blob_decode_tag(v13, &v17))
    return 4294967293;
  if (!ccder_blob_decode_len(v13, &v16))
    return 4294967293;
  v4 = (const void *)v13[0];
  if (!v13[0]
    || !ccder_blob_decode_tag(__s2, &v15)
    || !ccder_blob_decode_len(__s2, &v14)
    || !__s2[0])
  {
    return 4294967293;
  }
  if (v17 > v15)
    return 1;
  if (v15 > v17)
    return 0xFFFFFFFFLL;
  v6 = v16;
  v7 = v14;
  v8 = v16 >= v14 ? v14 : v16;
  v9 = memcmp(v4, __s2[0], v8);
  if (v9 > 0 || !v9 && v6 > v7)
    return 1;
  v11 = v9 < 0 || v6 < v7;
  return (v11 << 31 >> 31);
}

char *aks_copy_packed_data(_DWORD *a1, const void *a2, int a3)
{
  char *v3;
  int v5;
  size_t v6;
  int __s;

  v3 = (char *)(a1 + 1);
  if (a2)
  {
    *a1 = a3;
    memcpy(a1 + 1, a2, a3);
    v3 += a3;
    v5 = -a3;
    v6 = -a3 & 3;
    if ((v5 & 3) != 0)
    {
      __s = 0;
      memset_s(&__s, 4uLL, 0, 4uLL);
      memcpy(v3, &__s, v6);
      v3 += v6;
    }
  }
  else
  {
    *a1 = 0;
  }
  return v3;
}

char *aks_pack_data(char **a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v12;
  int v13;
  uint64_t *v14;
  char *result;
  char *v16;
  int v17;
  uint64_t v18;
  const void **v19;
  const void *v20;
  uint64_t *v21;
  const void **v22;

  v21 = &a9;
  v12 = 4;
  if (a3)
  {
    v13 = a3;
    do
    {
      v14 = v21;
      v21 += 2;
      v12 += *((_DWORD *)v14 + 2) + (-*((_DWORD *)v14 + 2) & 3) + 4;
      --v13;
    }
    while (v13);
  }
  result = (char *)calloc(1uLL, v12);
  v16 = result;
  v22 = (const void **)&a9;
  v17 = 0;
  if (a3)
  {
    v18 = 4;
    do
    {
      v19 = v22;
      v20 = *v22;
      v22 += 2;
      result = aks_copy_packed_data(&v16[v18], v20, *((_DWORD *)v19 + 2));
      v18 = result - v16;
      ++v17;
    }
    while (a3 != v17);
  }
  *(_DWORD *)v16 = v17;
  *a1 = v16;
  *a2 = v12;
  return result;
}

uint64_t sub_1000AE984(mach_port_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unint64_t *a5, _QWORD *a6, unsigned int *a7)
{
  mach_port_t reply_port;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  mach_msg_header_t msg;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  NDR_record_t v22;
  unint64_t v23;
  int v24;

  v18 = 1;
  v19 = a3;
  v20 = 16777472;
  v21 = a4;
  v22 = NDR_record;
  v23 = __PAIR64__(a4, a2);
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B000000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v12 = mach_msg(&msg, 3, 0x3Cu, 0x48u, reply_port, 0, 0);
  v13 = v12;
  if ((v12 - 268435458) <= 0xE && ((1 << (v12 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v13;
  }
  if ((_DWORD)v12)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v13;
  }
  if (msg.msgh_id == 71)
  {
    v15 = 4294966988;
  }
  else if (msg.msgh_id == 1300)
  {
    if ((msg.msgh_bits & 0x80000000) != 0)
    {
      v15 = 4294966996;
      if (v18 == 1 && msg.msgh_size == 64 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
      {
        v16 = v21;
        if (v21 == v24)
        {
          *a5 = v23;
          *a6 = v19;
          *a7 = v16;
          return 0;
        }
      }
    }
    else if (msg.msgh_size == 36)
    {
      v15 = 4294966996;
      if (HIDWORD(v19))
      {
        if (msg.msgh_remote_port)
          v15 = 4294966996;
        else
          v15 = HIDWORD(v19);
      }
    }
    else
    {
      v15 = 4294966996;
    }
  }
  else
  {
    v15 = 4294966995;
  }
  mach_msg_destroy(&msg);
  return v15;
}

uint64_t sub_1000AEB78(mach_port_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  mach_port_t reply_port;
  uint64_t v7;
  uint64_t v8;
  mach_msg_header_t msg;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  NDR_record_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v11 = 1;
  v12 = a4;
  v13 = 16777472;
  v14 = a5;
  v15 = NDR_record;
  v16 = a2;
  v17 = a3;
  v18 = a5;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B100000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v7 = mach_msg(&msg, 3, 0x44u, 0x2Cu, reply_port, 0, 0);
  v8 = v7;
  if ((v7 - 268435458) <= 0xE && ((1 << (v7 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v8;
  }
  if ((_DWORD)v7)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v8;
  }
  if (msg.msgh_id == 71)
  {
    v8 = 4294966988;
LABEL_17:
    mach_msg_destroy(&msg);
    return v8;
  }
  if (msg.msgh_id != 1301)
  {
    v8 = 4294966995;
    goto LABEL_17;
  }
  v8 = 4294966996;
  if ((msg.msgh_bits & 0x80000000) != 0)
    goto LABEL_17;
  if (msg.msgh_size != 36)
    goto LABEL_17;
  if (msg.msgh_remote_port)
    goto LABEL_17;
  v8 = HIDWORD(v12);
  if (HIDWORD(v12))
    goto LABEL_17;
  return v8;
}

uint64_t sub_1000AECF0(mach_port_t a1, int a2, uint64_t a3, uint64_t a4, int a5, _QWORD *a6, _DWORD *a7)
{
  mach_port_t reply_port;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  mach_msg_header_t msg;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  NDR_record_t v21;
  int v22;
  uint64_t v23;
  int v24;

  v17 = 1;
  v18 = a4;
  v19 = 16777472;
  v20 = a5;
  v21 = NDR_record;
  v22 = a2;
  v23 = a3;
  v24 = a5;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B200000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v11 = mach_msg(&msg, 3, 0x44u, 0x40u, reply_port, 0, 0);
  v12 = v11;
  if ((v11 - 268435458) <= 0xE && ((1 << (v11 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v12;
  }
  if ((_DWORD)v11)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v12;
  }
  if (msg.msgh_id == 71)
  {
    v14 = 4294966988;
  }
  else if (msg.msgh_id == 1302)
  {
    if ((msg.msgh_bits & 0x80000000) != 0)
    {
      v14 = 4294966996;
      if (v17 == 1 && msg.msgh_size == 56 && !msg.msgh_remote_port && HIBYTE(v19) == 1)
      {
        v15 = v20;
        if (v20 == v22)
        {
          *a6 = v18;
          *a7 = v15;
          return 0;
        }
      }
    }
    else if (msg.msgh_size == 36)
    {
      v14 = 4294966996;
      if (HIDWORD(v18))
      {
        if (msg.msgh_remote_port)
          v14 = 4294966996;
        else
          v14 = HIDWORD(v18);
      }
    }
    else
    {
      v14 = 4294966996;
    }
  }
  else
  {
    v14 = 4294966995;
  }
  mach_msg_destroy(&msg);
  return v14;
}

uint64_t sub_1000AEEE0(mach_port_t a1, unsigned int a2, uint64_t a3)
{
  mach_port_t reply_port;
  uint64_t v5;
  uint64_t v6;
  mach_msg_header_t msg;
  NDR_record_t v9;
  unsigned int v10;
  uint64_t v11;

  v9 = NDR_record;
  v10 = a2;
  v11 = a3;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B300000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v5 = mach_msg(&msg, 3, 0x2Cu, 0x2Cu, reply_port, 0, 0);
  v6 = v5;
  if ((v5 - 268435458) <= 0xE && ((1 << (v5 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v6;
  }
  if ((_DWORD)v5)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v6;
  }
  else
  {
    if (msg.msgh_id == 71)
    {
      v6 = 4294966988;
    }
    else if (msg.msgh_id == 1303)
    {
      v6 = 4294966996;
      if ((msg.msgh_bits & 0x80000000) == 0 && msg.msgh_size == 36 && !msg.msgh_remote_port)
      {
        v6 = v10;
        if (!v10)
          return v6;
      }
    }
    else
    {
      v6 = 4294966995;
    }
    mach_msg_destroy(&msg);
    return v6;
  }
}

void sub_1000AF030(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1000AF0E8()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8
                                             * (((((v1 + 121702045) & 0x856FEF6) - 4) * (v2 == 0)) ^ (v0 + v1 + 2)))
                            - 8))();
}

uint64_t sub_1000AF128@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(a1 + 8 * (v1 - 3)))(v3);
  *(_DWORD *)(v2 + 24) = 0;
  return result;
}

void KxmB0CKvgWt(uint64_t a1, int a2)
{
  BOOL v2;
  int v3;

  if (a1)
    v2 = a2 == 0;
  else
    v2 = 1;
  v3 = v2;
  __asm { BR              X9 }
}

uint64_t sub_1000AF300()
{
  return 4294923273;
}

void sub_1000AF430(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5[15];

  v1 = *(_DWORD *)a1 ^ (646995413 * ((((2 * a1) | 0x8F18737E) - a1 + 947111489) ^ 0x534DB4D5));
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)off_1002606A0[v1 - 36];
  strcpy(v5, "com.apple.absd");
  v4 = *(_QWORD *)((char *)off_1002606A0[v1 - 46]
                 + 8
                 * ((123
                   * (((unsigned int (*)(uint64_t, char *, uint64_t))off_1002606A0[v1 - 40])(v3, v5, v2) == 0)) ^ v1)
                 - 12)
     - ((v1 + 23) ^ 0x41);
  __asm { BR              X9 }
}

void sub_1000AF534()
{
  uint64_t v0;
  int v1;

  *(_DWORD *)(v0 + 4) = v1;
}

void nDYmeMqvWb(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v3;
  int v5;

  if (a1)
    v3 = a2 == 0;
  else
    v3 = 1;
  v5 = v3 || a3 == 0;
  __asm { BR              X9 }
}

uint64_t sub_1000AF630()
{
  return 4294923273;
}

void sub_1000AF754(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1000AF800()
{
  int v0;
  _DWORD *v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, uint64_t (*)()))(v2 + 8 * (v0 & 0x40188)))(*(_QWORD *)(v2 + 8 * (v0 & 0x40000402)), nullsub_2);
  *v1 = -1133814153;
  return result;
}

void t1BoNctgaUu66(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  int v5;

  if (a1)
    v4 = a4 == 0;
  else
    v4 = 1;
  v5 = !v4;
  __asm { BR              X9 }
}

uint64_t sub_1000B0884@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  void (*v11)(int *);
  _QWORD v14[3];
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  unsigned int v20;

  v14[0] = *(_QWORD *)(v6 + 16);
  v20 = 1829790799 * (((&v18 | 0xDC543C92) - (&v18 & 0xDC543C92)) ^ 0x1E9D9CD9) + 463207035;
  v19 = v14;
  v11 = *(void (**)(int *))(a6 + 48);
  v11(&v18);
  v14[0] = *(_QWORD *)(v6 + 248);
  v14[1] = a1;
  v14[2] = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v19 = v14;
  v20 = 1829790799 * (&v18 ^ 0xC2C9A04B) + 463207035;
  v11(&v18);
  return (v18 - 955058042);
}

uint64_t Be81a395Bf0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;

  qword_100277CD8 = 1681628227 * ((qword_100277CD8 - (_QWORD)&v4 + qword_100277CC8) ^ 0x68EECD5B1F580389);
  qword_100277CC8 = qword_100277CD8;
  v1 = *(_QWORD *)((char *)off_1002606A0[((67 * ((2 * qword_100277CD8) ^ 0x89)) ^ byte_100215690[byte_100215590[(67 * ((2 * qword_100277CD8) ^ 0x89))] ^ 0x34])
                                       - 49]
                 + 140)
     - 4;
  v2 = 942846689 * ((unint64_t)&v5 ^ 0x2DF4282E8CBBA516);
  v5 = v2 ^ 0xF067FA72;
  v6 = a1;
  v7 = v1 ^ v2;
  ((void (*)(int *))off_1002606A0[(unk_10021544D ^ 0xDB) - 185])(&v5);
  return v8;
}

uint64_t IW1PcFszqNK(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;

  qword_100277CD0 = 1681628227 * ((qword_100277CC8 + qword_100277CD0) ^ (unint64_t)&v4 ^ 0x68EECD5B1F580389);
  qword_100277CC8 = qword_100277CD0;
  v1 = *(_QWORD *)((char *)off_1002606A0[((67 * ((2 * qword_100277CD0) ^ 0x89)) ^ byte_100215290[byte_100215790[(67 * ((2 * qword_100277CD0) ^ 0x89))] ^ 0xD6])
                                       - 8]
                 + 28)
     - 4;
  v2 = 942846689
     * ((((unint64_t)&v5 | 0xDBD392286209E2F0)
       - ((unint64_t)&v5 | 0x242C6DD79DF61D0FLL)
       + 0x242C6DD79DF61D0FLL) ^ 0xF627BA06EEB247E6);
  v5 = v2 ^ 0xF067FA72;
  v6 = a1;
  v7 = v1 ^ v2;
  ((void (*)(int *))off_1002606A0[(unk_100215589 ^ 0xDB) - 226])(&v5);
  return v8;
}

uint64_t sub_1000B0C8C(__SecKey *a1, const UInt8 *a2, CFIndex length, UInt8 **a4, unsigned int *a5)
{
  const __CFData *v8;
  const __CFData *v9;
  const __CFData *v10;
  unsigned int v11;
  UInt8 *v12;
  UInt8 *v13;
  uint64_t v14;
  CFErrorRef error;
  CFRange v17;

  error = 0;
  v8 = CFDataCreate(0, a2, length);
  v9 = SecKeyCreateSignature(a1, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, v8, &error);
  if (!v9)
  {
    v14 = 4294925247;
    if (!v8)
      return v14;
    goto LABEL_8;
  }
  v10 = v9;
  v11 = CFDataGetLength(v9);
  v12 = (UInt8 *)malloc_type_malloc(v11, 0xF748375AuLL);
  if (v12)
  {
    v13 = v12;
    v17.length = CFDataGetLength(v10);
    v17.location = 0;
    CFDataGetBytes(v10, v17, v13);
    v14 = 0;
    *a4 = v13;
    *a5 = v11;
  }
  else
  {
    v14 = 4294925268;
  }
  CFRelease(v10);
  if (v8)
LABEL_8:
    CFRelease(v8);
  return v14;
}

uint64_t sub_1000B0D7C()
{
  NSObject *v0;
  const __CFString **v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  dispatch_time_t v5;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  uint64_t v13;
  const __CFString *v14;
  void *v15;
  _QWORD v16[3];
  _QWORD v17[3];

  v8 = 0;
  v9 = &v8;
  v10 = 0x3052000000;
  v11 = sub_1000B0F50;
  v12 = sub_1000B0F60;
  v13 = 0;
  v0 = dispatch_semaphore_create(0);
  if (v0)
  {
    if (getenv("RunningTestSUInfoRefetch"))
    {
      v16[0] = CFSTR("IgnoreExistingCollection");
      v17[0] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", 1);
      v17[1] = &__kCFBooleanTrue;
      v16[1] = CFSTR("scheduleCollectionForCurrentBuild");
      v16[2] = CFSTR("NetworkTimeoutInterval");
      v17[2] = &off_1002717C0;
      v1 = (const __CFString **)v16;
      v2 = (void **)v17;
      v3 = 3;
    }
    else
    {
      v14 = CFSTR("scheduleCollectionForCurrentBuild");
      v15 = &__kCFBooleanTrue;
      v1 = &v14;
      v2 = &v15;
      v3 = 1;
    }
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3254779904;
    v7[2] = sub_1000B0F6C;
    v7[3] = &unk_100260718;
    v7[4] = v0;
    v7[5] = &v8;
    MAEPerformCollectionWithCompletion(0, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v2, v1, v3), v7);
    v5 = dispatch_time(0, 70000000000);
    v4 = 4294924355;
    if (!dispatch_semaphore_wait(v0, v5))
    {
      if (v9[5])
        v4 = 4294924355;
      else
        v4 = 0;
    }
  }
  else
  {
    v4 = 4294925268;
  }
  dispatch_release(v0);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1000B0F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000B0F50(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1000B0F60(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

intptr_t sub_1000B0F6C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000B0F80(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 3);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 8);
}

void sub_1000B0FBC(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 8);
  _Block_object_dispose(*(const void **)(a1 + 32), 3);
}

void sub_1000B0FEC(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1000B1090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;

  v10 = v9 + v6;
  if (a6)
    v11 = v8 == (v9 ^ 0x68D9B4BF) - 1818;
  else
    v11 = 1;
  v12 = !v11;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7
                                                                                          + 8 * ((2027 * v12) ^ v10))
                                                                              - 8))(a1, a2, a3, a4, a5);
}

uint64_t sub_1000B10E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;

  v10 = v9 + v6;
  if (a6)
    v11 = v8 == 0;
  else
    v11 = 1;
  v12 = !v11;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7
                                                                                          + 8
                                                                                          * (((((v9 + 1632529369) & 0x35D7E79B)
                                                                                             + 209)
                                                                                            * v12) ^ v10))
                                                                              - 8))(a1, a2, a3, a4, a5);
}

uint64_t sub_1000B1138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  uint64_t v11;
  int v12;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8 * (v12 | (32 * (a11 != 1)))))(a1, a2, a3, a4, a5);
}

uint64_t sub_1000B1190()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((v2 - 945) ^ (1906 * (v1 ^ 1))))
                            + v3
                            - ((v2 + 1776020643) & 0xFEFDBFE7)))();
}

void sub_1000B11CC(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;

  v12 = a1;
  v13 = 0;
  v4 = 562267567 * (((&v7 | 0xBF346368) - (&v7 & 0xBF346368)) ^ 0xACAE9F2B);
  v15 = v4 ^ 0x3C8333C8;
  v16 = (v2 + 868) ^ v4;
  v17 = 0x483CF90335B0B89FLL;
  v10 = 0;
  v11 = &v6;
  v8 = v1;
  v9 = &v5;
  v7 = (char *)&v5 + 4;
  sub_1000B1BFC((uint64_t)&v7);
  *(_DWORD *)(v3 + 28) = v14;
}

uint64_t mbdz5ztWyQD(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  unint64_t v5;
  _DWORD v7[2];
  uint64_t v8;
  char *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v5 = 444472921
     * ((((unint64_t)v7 | 0xB9499F8FED8967C6) - ((unint64_t)v7 & 0xB9499F8FED8967C6)) ^ 0x3952472C50FD0028);
  v8 = a4;
  v9 = (char *)&loc_1000B10E4 + v5 - 4;
  v7[0] = v5 ^ a5;
  v7[1] = v5 ^ a3;
  v12 = a2;
  v13 = a1;
  v10 = v5 ^ 0x68D9B3A5;
  sub_1000B0FEC((uint64_t)v7);
  return v11;
}

uint64_t ewFHQ(uint64_t a1)
{
  unint64_t v1;
  unsigned int v3;
  char *v4;
  uint64_t v5;
  int v6;

  v1 = 941074649
     * (((unint64_t)&v3 - 2 * ((unint64_t)&v3 & 0xBB02B8911101A284) - 0x44FD476EEEFE5D7CLL) ^ 0xBA845F7311C96DE0);
  v4 = (char *)&loc_1001DFE98 + v1 - 4;
  v5 = a1;
  v6 = -804802556 - v1;
  sub_1001DFDD8((uint64_t)&v3);
  return v3;
}

void sub_1000B14C0(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  const UInt8 *v4;
  CFIndex v5;
  char *v6;
  UInt8 *v7;
  unsigned int v8;

  v1 = 755310587 * ((a1 + 704913948 - 2 * (a1 & 0x2A04221C)) ^ 0x6B0879D5);
  v2 = *(_DWORD *)(a1 + 8) - v1;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(const UInt8 **)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 48) ^ v1;
  v7 = 0;
  v8 = 0;
  v6 = (char *)*(&off_100260750
               + (int)(v2 | (16
                           * (sub_1000B0C8C((__SecKey *)(*(_QWORD *)(v3 - 0x6262E0568D5240A8) - 0x30B75577B6EAB23ELL), v4, v5, &v7, &v8) != 0))))- ((v2 - 1342710291) & 0x50081DFE ^ 0x1F2);
  __asm { BR              X9 }
}

uint64_t sub_1000B15B0@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (((a4 != 0) * (((a1 + 532) | 0x200) ^ 0x12A)) ^ a1))
                            - ((a1 - 1485734520) & 0x588E868B ^ 0x60ELL)))();
}

void sub_1000B1600(void *a1)
{
  uint64_t v1;
  int v2;

  free(a1);
  *(_DWORD *)(v1 + 24) = v2;
}

uint64_t sub_1000B1B88(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  int v3;
  int v4;
  unint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  _BOOL4 v9;
  int v10;
  int v11;

  v1 = 516615401 * (result ^ 0x88BC887B73630632);
  v2 = *(_QWORD *)(result + 16) ^ v1;
  v3 = *(_DWORD *)(result + 24) ^ v1;
  v4 = *(_DWORD *)result - v1;
  v5 = *(_QWORD *)(result + 32) - v1;
  v6 = *(_DWORD *)(result + 4) + v1;
  v7 = *(_DWORD *)(result + 44) - v1;
  v8 = v5 == v2;
  v9 = v5 > v2;
  v10 = v8;
  if ((v4 & 1) == 0)
    v9 = v10;
  if (v9)
    v11 = v6;
  else
    v11 = v3;
  *(_DWORD *)(result + 8) = v11 ^ v7;
  return result;
}

void sub_1000B1BFC(uint64_t a1)
{
  int v1;
  unsigned int v2;

  v1 = 562267567 * ((~(_DWORD)a1 & 0xCACA2F0 | a1 & 0xF3535D0F) ^ 0x1F365EB3);
  v2 = ((*(_DWORD *)(a1 + 64) ^ v1) + 1104762671) & 0xBE26A337;
  __asm { BR              X13 }
}

uint64_t sub_1000B1E3C()
{
  int v0;
  int v1;
  uint64_t v2;
  _BOOL4 v3;

  v3 = v0 >= ((v1 - 921658553) & 0x36EF65FB ^ 0x6A9584DB);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((4 * v3) | (16 * v3)) ^ v1)) - 8))();
}

uint64_t sub_1000B1E84()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (v1 ^ (25 * (v0 >= 1883888767))))
                            - (v1 - 254)
                            - (v1 ^ 0x102u)
                            + 392))();
}

uint64_t sub_1000B1EC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  int v7;
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 + 8 * (((v8 == a7 + v7) * ((39 * (a7 ^ 0xC3)) ^ 0x593)) ^ a7))
                                                                                                - 4))(a1, a2, a3, a4, a5, a6, 4294924373);
}

uint64_t sub_1000B1F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v7
                                                                                                 + 8
                                                                                                 * (((((*(_QWORD *)STACK[0x650] == 0) ^ (43 * (v6 ^ 0x5C))) & 1) * (((v6 + 1326) | 0x40) ^ 0x481)) ^ v6)))(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_1000B1F4C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((((188 * (a1 ^ 0x386) - 626) | 0x100) ^ 0x381)
                                          * (*(_QWORD *)(v1 + 48) == 0)) ^ a1))
                            - 4))();
}

uint64_t sub_1000B1F8C()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + 56) = -1279805853;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)(((*(_QWORD *)(v1 + 64) == 0x4E36C53A99817805)
                                               * (((v0 + 618318529) & 0xDB25357F) - 1361)) ^ v0))
                            - (v0 ^ 0x52CLL)))();
}

uint64_t sub_1000B55E4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + 72) = 286036353;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((*(_QWORD *)(v0 + 120) != 0x6262E0568D5240A8)
                                * (444 * (((v1 - 868) | 0x4CC) ^ 0x6CF) - 265)) ^ v1)))();
}

uint64_t sub_1000B5868@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((a1 + 843) * (v2 != v1)) ^ a1)) - 138 * (a1 ^ 0x373u) + 1514))();
}

uint64_t sub_1000B589C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((*(_QWORD *)(v1 - 0x6262E0568D5240A0) == 0) ^ v0))
                            - ((v0 + 223) ^ ((v0 - 941) | 0x48Cu) ^ 0xCLL)))();
}

uint64_t sub_1000B58E0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((*(_QWORD *)(v1 - 0x6262E0568D524090) == 0) | (8
                                                                                  * (*(_QWORD *)(v1
                                                                                               - 0x6262E0568D524090) == 0)) | (v0 - 935))))();
}

uint64_t sub_1000B5910(void *a1)
{
  free(a1);
  return sub_1000B5FC8();
}

uint64_t sub_1000B591C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 + 8 * ((1954 * ((v7 & (v7 ^ a7) | (v7 - a7) & ~(v7 ^ a7)) >= 0)) ^ ((v7 ^ (v9 - 378)) + v7 + ((v7 - v8) ^ 0x48F04B67))))
                                                                                                - 8))(a1, a2, a3, a4, a5, a6, 4294925295);
}

uint64_t sub_1000B5974()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  STACK[0x688] = 0;
  v3 = (uint64_t (*)(void))(*(_QWORD *)(v2
                                     + 8 * ((1946 * (v1 == v0 + 1097664314 + ((v0 - 1074594600) & 0xFE9FF6DF))) ^ v0))
                         - 8);
  LODWORD(STACK[0x680]) = 44010;
  STACK[0x678] = STACK[0x628];
  return v3();
}

uint64_t sub_1000B59D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char v4;
  uint64_t v5;

  STACK[0x820] = STACK[0x688];
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * (int)((1141
                                               * (((((((a4 + 1097665145) | 0x60D) - 1390) ^ 0xBE92F718) - (v4 & 1) - a4) | (a4 - (((((a4 + 1097665145) | 0x60D) - 1390) ^ 0xBE92F718) - (v4 & 1)))) >> 31)) ^ (a4 + 1097665370)))
                            - 12))();
}

uint64_t sub_1000B5A40()
{
  int v0;
  int v1;
  unsigned int v2;
  size_t v3;
  void *v4;

  v2 = ((v0 << ((v1 ^ 0x92) + 19 * (v1 ^ 0x79) + 98)) & 0x2D5F1BA0) + (v0 & 0xFFFFFFF0 ^ 0x96AF8DDE);
  STACK[0x960] = 0x5C13350084191667;
  LODWORD(STACK[0x8B4]) = 2046997083;
  LODWORD(STACK[0x660]) = v2;
  v3 = v2 + 1766879794;
  STACK[0x668] = v3;
  v4 = malloc_type_malloc(v3, 0x68517D9BuLL);
  STACK[0x670] = (unint64_t)v4;
  return ((uint64_t (*)(void))*(&off_100260750 + ((1933 * (v4 != 0)) ^ v1)))();
}

uint64_t sub_1000B5AF0()
{
  int v0;
  uint64_t (*v1)(void);

  v1 = (uint64_t (*)(void))((char *)*(&off_100260750
                                   + (((malloc_type_malloc(STACK[0x668], 0x2DFD1FE4uLL) != 0)
                                     * (((v0 - 1414597335) & 0x54510BFC) + 252)) ^ v0))
                         - 8);
  return v1();
}

uint64_t sub_1000B5B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * (v4 ^ (1305 * (v3 != 0))))
                            - ((167 * (v4 ^ 0x3FDu)) ^ 0x34FLL)))();
}

uint64_t sub_1000B5BC0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _BOOL4 v10;
  unint64_t v11;

  v10 = v8 > 0xB33E00DD;
  v11 = a3 + v4 + ((unint64_t)(v4 < v3) << 32);
  *(_BYTE *)(v9 + v11) = ((*(_BYTE *)(a2 + v11) << ((v6 - 55) ^ 0xAB)) & 0x72) + (*(_BYTE *)(a2 + v11) ^ 0x39);
  if (v10 == v4 - 249188345 < v5)
    v10 = v4 - 249188345 < v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((19 * !v10) ^ v6)) - 12))();
}

uint64_t sub_1000B5C5C@<X0>(uint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _BOOL4 v8;

  v6 = (v4 + 1276985653) & 0xEAABBB63;
  STACK[0x608] = a2;
  *(_BYTE *)(a2 + ((unint64_t)(v5 < v3 + v6 - 835) << 32) + a3 + v5 - 0x353232397341B08CLL) = -71;
  v7 = LODWORD(STACK[0x660]) + 1830568236;
  v8 = v5 - 1473282081 < v7;
  if (v7 < 0x3CBCEFA != v5 - 1473282081 < 0x3CBCEFA)
    v8 = v7 < 0x3CBCEFA;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * (int)((11 * !v8) ^ v6)) - (v6 ^ 0x34BLL)))();
}

void sub_1000B5C8C()
{
  JUMPOUT(0x1000B5FE8);
}

uint64_t sub_1000B5C9C@<X0>(int a1@<W8>)
{
  int v1;
  char v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1759
                                          * (((((480185459 - (v2 & 2)) ^ 0x1C9E347B) << ((v3 + 36) & 0xFE ^ 0xF1)) | 0x9A36A368)
                                           - ((480185459 - (v2 & 2)) ^ 0x1C9E347B) != (a1 | v1) - 1707755614)) ^ (v3 - 909)))
                            - 4))();
}

uint64_t sub_1000B5D24@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (a1 ^ (2
                                               * (((*(_DWORD *)(v1 + 112) == 1494274718) ^ (a1 - 102) ^ 0x79) & 1u))))
                            - 4))();
}

uint64_t sub_1000B5D5C()
{
  int v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  _BYTE *v4;

  STACK[0x748] = (unint64_t)&STACK[0x40AF9B25784C1C2D];
  STACK[0x990] = (unint64_t)&STACK[0xC28];
  STACK[0x8A0] = 224;
  STACK[0x6D8] = (unint64_t)&STACK[0xBE4];
  v3 = (v0 + 1885773067) & 0x8F996459;
  v4 = sub_1001EC59C(&STACK[0xBE4], 0, 0x40uLL);
  STACK[0x878] = v2 + 104;
  STACK[0x770] = 0;
  LODWORD(STACK[0x8DC]) = v1;
  return ((uint64_t (*)(_BYTE *))((char *)*(&off_100260750
                                                    + (int)((178
                                                           * ((int)(v3 ^ 0x45C01460) >= (int)((((v3 ^ 0x13B) - 640) ^ 0x320)
                                                                                            + 1170214517))) ^ v3 ^ 0x13B))
                                          - 12))(v4);
}

uint64_t sub_1000B5E58()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  _BOOL4 v4;

  v4 = v1 >= v2 + (v0 ^ 0x3C73702E) - 1014198538 + 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((v4 | (8 * v4)) ^ v0)) - 12))();
}

uint64_t sub_1000B5E90()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((966 * (v0 == ((5 * (v2 ^ 0x154)) ^ (v1 + 1109)))) ^ v2)) - 8))();
}

uint64_t sub_1000B5EC4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((v2 + 515) * (v0 >= v1 + 449)) ^ v2)) - 8))();
}

uint64_t sub_1000B5EEC()
{
  int v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  char v5;

  v4 = v0 - 1014198538;
  v5 = arc4random();
  *((_BYTE *)&STACK[0xBB0] + v3) = (v5 + 61 - ((2 * v5) & 0x7A)) ^ 0xC8;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + (((v4 + 173) | 0x83) ^ ((v3 == 15) * v1)))
                            - ((((((v4 + 173) | 0x83) - 755) | 8u) + 1104) ^ v2)))();
}

void sub_1000B5F7C()
{
  JUMPOUT(0x1000B5E10);
}

uint64_t sub_1000B5F88(void *a1)
{
  uint64_t v1;
  int v2;

  free(a1);
  return ((uint64_t (*)(void))*(&off_100260750
                             + ((*(_QWORD *)(v1 - 0x6262E0568D524090) == 0) | (8
                                                                                 * (*(_QWORD *)(v1 - 0x6262E0568D524090) == 0)) | (v2 - 935))))();
}

uint64_t sub_1000B5FC8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  free((void *)(v2 - 0x6262E0568D5240A8));
  *(_QWORD *)(v1 + 120) = 0x6262E0568D5240A8;
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((1287
                                        * (((*(_QWORD *)(v1 + 104) == 0) ^ (5
                                                                                             * (((v0 + 115) | 0x32) ^ 0x5D))) & 1)) ^ (v0 - 1506)))
                            - 4))();
}

uint64_t sub_1000B6044(void *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v4 = (v1 + 85) | 0x32;
  free(a1);
  *(_QWORD *)(v2 + 104) = 0;
  *(_DWORD *)(v2 + 112) = 1494274718;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (int)(((*(_QWORD *)(v2 + 136) != 0)
                                               * (((v4 + 1937937245) & 0x8C7D6BFA) + 1656)) ^ v4))
                            - 8))();
}

void sub_1000B60A4(void *a1)
{
  uint64_t v1;

  free(a1);
  *(_QWORD *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 144) = 495404763;
  *(_DWORD *)v1 = 2023518720;
  JUMPOUT(0x1000B610CLL);
}

void sub_1000B6114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;

  *(_DWORD *)(v7 + 56) = a7;
}

uint64_t sub_1000B6158()
{
  int v0;
  char v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((((v1 & 1 ^ 0x8E44B413) & ((v0 ^ 0x29C) - 2080103743))
                                          + (v0 ^ 0xCE4D2751 ^ v1 & 1 ^ 0x8E44B413)
                                          + 294666848
                                          - ((v0 ^ 0xCE4D2751 ^ v1 & 1 ^ 0x8E44B413) & 0x4009008D) != -1785399693) ^ v0))
                            - 4))();
}

uint64_t sub_1000B61E0()
{
  int v0;
  unsigned int v1;
  _BOOL4 v2;

  v1 = ((LODWORD(STACK[0x9E4]) - 546355592 + ((v0 + 1188019835) & 0xB93046FF) - 1741) & 0xFFFFFFF0 ^ 0x6DE2FFFB)
     + ((v0 - 607781234) & (2 * (LODWORD(STACK[0x9E4]) - 546355592 + ((v0 + 1188019835) & 0xB93046FF) - 1741)));
  STACK[0x778] = 0x5C13350084191667;
  LODWORD(STACK[0xA8C]) = 2046997083;
  v2 = malloc_type_malloc(v1 - 1843593195, 0x68517D9BuLL) == 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((43 * v2) ^ v0)) - 4))();
}

uint64_t sub_1000B629C()
{
  int v0;
  size_t v1;
  _BOOL4 v2;

  v2 = malloc_type_malloc(v1, 0x2DFD1FE4uLL) != 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((1332 * v2) ^ (v0 + 186)))
                            - ((v0 + 186) ^ 0x655 ^ (v0 + 450157947) & 0xE52B27FF ^ 0x290)))();
}

uint64_t sub_1000B630C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;

  return (*(uint64_t (**)(void))(a5 + 8 * ((692 * (((v6 == 546355592) ^ (v5 + 116)) & 1)) ^ v5)))();
}

uint64_t sub_1000B6364@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  _BOOL4 v7;

  v6 = a2 + 1860990888 + ((unint64_t)(v2 > 0x6EEC77A8) << 32);
  *(_BYTE *)(v4 + v6) = (*(_BYTE *)(STACK[0x648] + v6) ^ 0x7D) + ((2 * *(_BYTE *)(STACK[0x648] + v6)) & 0xFB) - 68;
  v7 = (v5 + 174257720) > 0x2AF3AFC1;
  if ((v5 + 174257720) < 0x2AF3AFC0)
    v7 = 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((403 * !v7) ^ (v3 - 1498))) - 4))();
}

void sub_1000B6410()
{
  JUMPOUT(0x1000B63A0);
}

uint64_t sub_1000B6418()
{
  int v0;
  int v1;
  _BOOL4 v2;

  STACK[0x810] = 0x5C13350084191667;
  LODWORD(STACK[0x998]) = 2046997083;
  v2 = malloc_type_malloc(((v1 - 546355592 + ((v0 + 1761581363) & 0x970064C3) - 129) & 0xFFFFFFF0 ^ 0x2B75BAEE)+ ((2 * (v1 - 546355592 + ((v0 + 1761581363) & 0x970064C3) - 129)) & 0x56EB75C0)- 729135838, 0x68517D9BuLL) == 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((1475 * ((((v0 - 122) ^ v2) & 1) == 0)) ^ v0)) - 12))();
}

uint64_t sub_1000B64DC(unint64_t a1)
{
  int v1;
  int v2;
  size_t v3;
  uint64_t (*v4)(void);

  LODWORD(STACK[0x688]) = v2;
  STACK[0x690] = a1;
  STACK[0x680] = v3;
  v4 = (uint64_t (*)(void))((char *)*(&off_100260750
                                   + ((1670
                                     * (((malloc_type_malloc(v3, 0x2DFD1FE4uLL) == 0) ^ ((((v1 | 0xA0) + 29) ^ 0x45) + 1)) & 1)) ^ (v1 | 0xA0)))
                         - 8);
  return v4();
}

uint64_t sub_1000B6550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(a4
                                        + 8
                                        * (v4 ^ 0x2090BB5E ^ (1259
                                                            * ((((v4 - 546354594) ^ 0x52B ^ (((v5 - v4) | (v4 - v5)) >> 31)) & 1) == 0))))
                            - 4))();
}

uint64_t sub_1000B65C8@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  unint64_t v8;
  _BOOL4 v9;

  v6 = v3 - 72;
  v7 = v3 - 496;
  v8 = a2 + 200571139 + ((unint64_t)(v2 > 0xBF47903) << 32);
  *(_BYTE *)(v4 + v8) = (v6 ^ *(_BYTE *)(STACK[0x648] + v8) ^ 0x78) + ((2 * *(_BYTE *)(STACK[0x648] + v8)) & 0xFB) + 60;
  v9 = (v5 + 1655910843) > 0x8343EB44;
  if ((v5 + 1655910843) < 0x8343EB43)
    v9 = 1;
  return (*(uint64_t (**)(void))(a1 + 8 * ((2 * !v9) | (32 * !v9) | v7)))();
}

void sub_1000B667C()
{
  JUMPOUT(0x1000B6608);
}

uint64_t sub_1000B6684()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL4 v7;

  v2 = v0 + 668;
  LOBYTE(STACK[0xBC0]) = LOBYTE(STACK[0xBB0]) ^ 0xF5;
  LOBYTE(STACK[0xBC1]) = LOBYTE(STACK[0xBB1]) ^ 0xF5;
  LOBYTE(STACK[0xBC2]) = LOBYTE(STACK[0xBB2]) ^ 0xF5;
  LOBYTE(STACK[0xBC3]) = LOBYTE(STACK[0xBB3]) ^ 0xF5;
  LOBYTE(STACK[0xBC4]) = LOBYTE(STACK[0xBB4]) ^ 0xF5;
  LOBYTE(STACK[0xBC5]) = (v0 - 100) ^ LOBYTE(STACK[0xBB5]) ^ 0x51;
  LOBYTE(STACK[0xBC6]) = LOBYTE(STACK[0xBB6]) ^ 0xF5;
  LOBYTE(STACK[0xBC7]) = LOBYTE(STACK[0xBB7]) ^ 0xF5;
  LOBYTE(STACK[0xBC8]) = LOBYTE(STACK[0xBB8]) ^ 0xF5;
  LOBYTE(STACK[0xBC9]) = LOBYTE(STACK[0xBB9]) ^ 0xF5;
  LOBYTE(STACK[0xBCA]) = LOBYTE(STACK[0xBBA]) ^ 0xF5;
  LOBYTE(STACK[0xBCB]) = LOBYTE(STACK[0xBBB]) ^ 0xF5;
  LOBYTE(STACK[0xBCC]) = LOBYTE(STACK[0xBBC]) ^ 0xF5;
  LOBYTE(STACK[0xBCD]) = LOBYTE(STACK[0xBBD]) ^ 0xF5;
  LOBYTE(STACK[0xBCE]) = LOBYTE(STACK[0xBBE]) ^ 0xF5;
  LOBYTE(STACK[0xBCF]) = LOBYTE(STACK[0xBBF]) ^ 0xF5;
  LODWORD(STACK[0xC88]) = -366034007;
  STACK[0xC68] = 0x6205527E24145F56;
  STACK[0xC70] = 0x6396BFB8EB1E3730;
  STACK[0xC78] = 0x9C69404714E1C8CFLL;
  LODWORD(STACK[0xC80]) = 1334441409;
  LODWORD(STACK[0xC84]) = 1279171888;
  v3 = STACK[0x990];
  v4 = STACK[0x9E4];
  v5 = *(_QWORD *)(v1 + 8 * v0) - 4;
  v6 = STACK[0x648];
  STACK[0x918] = v5;
  STACK[0xA98] = v3;
  LODWORD(STACK[0x914]) = v4;
  STACK[0x9A0] = v6;
  v7 = v4
     - 1064500308
     + ((2 * *(_DWORD *)(v3 + 68)) & 0x3A ^ 0x38)
     + (*(_DWORD *)(v3 + 68) & 0x3F ^ 0x5EFE4FE3)
     + ((v2 + 476) ^ 0x2Cu)
     - 1075581437 > 0xFFFFFFBF;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (((2 * v7) | (8 * v7)) ^ v2)) - 4))();
}

uint64_t sub_1000B67D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  int v7;
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v9 + 8 * (((a7 == v8) * (((v7 - 1713) | 0x143) ^ 0x279)) ^ (v7 - 1539)))
                                                                                               - 4))(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_1000B680C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v8
                                                                                                 + 8
                                                                                                 * ((799 * (((v6 - 349) & *(_DWORD *)(v7 + 96)) != 0)) ^ v6)))(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_1000B6834()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((((v0 + 1390) ^ 0x6D4) * ((__int16)LODWORD(STACK[0x680]) < -21510)) ^ (v0 + 848)))
                            - 8))();
}

uint64_t sub_1000B6870@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  unsigned __int16 v7;
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8
                                                                                                  + 8 * (((v7 == ((unsigned __int16)a7 ^ 0xAA95)) * ((2 * a7) ^ 0x619)) ^ a7)))(a1, a2, a3, a4, a5, a6, 4294924368);
}

uint64_t sub_1000B68A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  STACK[0xA08] = (unint64_t)&STACK[0x40AF9B25784C1C1D];
  STACK[0x8A0] = 208;
  v9 = *(_QWORD *)(v7 + 104);
  STACK[0x908] = v7 + 104;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8 * ((1181 * (v9 != 0)) ^ v6 ^ 0x274))
                                                                                                - ((((v6 ^ 0x274) - 197) | 0x120u) ^ ((v6 ^ 0x473u) - 1452))))(a1, a2, a3, a4, a5, a6, 4294924366);
}

uint64_t sub_1000B691C@<X0>(int a1@<W8>)
{
  uint64_t v1;

  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (((((*(_DWORD *)(v1 + 112) < 1494274782) ^ ((a1 ^ 0xC3) - 41)) & 1)
                                        * ((a1 ^ 0x298) - 930)) ^ a1 ^ 0x3C3))
                            - 8))();
}

uint64_t sub_1000B6970()
{
  int v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((92 * (v0 == v1 + ((v2 + 1412615184) & 0xABCD36FF) - 1086 - 591)) ^ v2))
                            - 12))();
}

uint64_t sub_1000B69BC@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  int v5;
  _BOOL4 v6;

  v6 = (v5 + 731383719) < 0x4C28C12F;
  *(_BYTE *)(v4 + a2 + 969041580 + ((unint64_t)(v2 > 0x39C266AC) << 32)) = (*(_BYTE *)(STACK[0x648]
                                                                                            + a2
                                                                                            + 969041580
                                                                                            + ((unint64_t)(v2 > 0x39C266AC) << 32)) ^ 0xFD)
                                                                                + ((2
                                                                                  * *(_BYTE *)(STACK[0x648]
                                                                                             + a2
                                                                                             + 969041580
                                                                                             + ((unint64_t)(v2 > 0x39C266AC) << 32))) & 0xFB)
                                                                                + 60;
  if ((v5 + 731383719) >= 0x4C28C12F)
    v6 = (v5 + 731383719) > 0x4C28C130;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((419 * !v6) ^ (v3 - 59))) - 12))();
}

void sub_1000B6A60()
{
  JUMPOUT(0x1000B69F4);
}

void sub_1000B6A68()
{
  JUMPOUT(0x1000B6A78);
}

uint64_t sub_1000B6B38@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;

  v10 = v3 < v8;
  v11 = (v4 + 1);
  *(_BYTE *)(v9 + v11 + a2 + ((unint64_t)(v11 < v2) << 32)) = 57;
  if (v10 == (int)v11 + v5 < v6)
    v10 = (int)v11 + v5 < v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((!v10 * ((v7 + 265) ^ 0x265)) ^ v7)) - 8))();
}

uint64_t sub_1000B6BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v10 = *(_QWORD *)(v7 + 64);
  v11 = *(_DWORD *)(v7 + 72);
  v12 = 1448877107 * ((2 * ((v9 - 192) & 0x6AB54B10) - (v9 - 192) + 357217515) ^ 0x6471A9C1);
  *(_DWORD *)(v9 - 128) = v8 - v12 + 22;
  *(_DWORD *)(v9 - 192) = v11 - v12 + (((v8 - 618) | 0x6C8) ^ (v8 + 657864034));
  *(_DWORD *)(v9 - 188) = v12 + 1940630650;
  *(_DWORD *)(v9 - 160) = v12 ^ 0x7B0FA0C7;
  *(_QWORD *)(v9 - 152) = v7 + 0x8ED1C57AC03BA9CLL;
  *(_QWORD *)(v9 - 144) = v7 + 0x511395B3EF1E7D5;
  *(_QWORD *)(v9 - 120) = v7 + 0xC2C3062343A3C9FLL;
  *(_DWORD *)(v9 - 112) = v12 + 2085568962;
  *(_QWORD *)(v9 - 176) = v6;
  *(_QWORD *)(v9 - 168) = v10;
  *(_QWORD *)(v9 - 136) = v5;
  sub_1001C19AC(v9 - 192);
  return ((uint64_t (*)(void))(*(_QWORD *)(a5 + 8 * ((22 * (*(_DWORD *)(v9 - 184) == 0)) ^ v8)) - 8))();
}

uint64_t sub_1000B6CC8()
{
  uint64_t v0;
  int v1;
  size_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;

  v4 = STACK[0x690];
  bzero((void *)STACK[0x690], v2);
  v5 = STACK[0x7A8];
  v6 = STACK[0x6B0];
  v7 = STACK[0x688];
  v8 = 176504963 * ((((v3 - 192) | 0x5EA181C6) - (v3 - 192) + ((v3 - 192) & 0xA15E7E38)) ^ 0xD40768D9);
  *(_DWORD *)(v3 - 160) = v1 - v8 - 996;
  *(_QWORD *)(v3 - 152) = STACK[0x680];
  *(_QWORD *)(v3 - 136) = v4;
  *(_QWORD *)(v3 - 176) = &unk_10021EC94;
  *(_QWORD *)(v3 - 168) = v5;
  LOBYTE(STACK[0x16F4]) = -125 * ((((v3 + 64) | 0xC6) - (v3 + 64) + ((v3 + 64) & 0x38)) ^ 0xD9) + 52;
  *(_DWORD *)(v3 - 144) = v7 - v8 + ((v1 + 1548832628) & 0xA3AEAF67) - 390366531;
  *(_DWORD *)(v3 - 128) = v8 + 290818466;
  *(_DWORD *)(v3 - 188) = v8 + v7 - (((v7 << (((v1 - 8) | 0x40) ^ 0xC1)) + 1006670394) & 0x83001420) - 545238224;
  *(_DWORD *)(v3 - 184) = v6 - v8 - 1406209041;
  sub_10013D690(v3 - 192);
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * (v1 | ((*(_DWORD *)(v3 - 192) == 0) << 6))) - 12))();
}

uint64_t sub_1000B6E20()
{
  int v0;
  void *v1;
  int v2;
  unint64_t v3;
  int v4;
  int v5;

  STACK[0xA68] = v3;
  LODWORD(STACK[0x8FC]) = v2 - 416087949 + v4;
  free((void *)(STACK[0x7A8] - 0x5C13350084191667));
  free(v1);
  return ((uint64_t (*)(void))*(&off_100260750
                             + (int)((v0 - 715342939) & 0xA0A217FE | (2
                                                                    * (((v5 == ((((v0 - 715342939) & 0xA0A217FE) + 873) ^ 0x6CD)) ^ (((v0 - 91) & 0xFE) - 99)) & 1)))))();
}

uint64_t sub_1000B6F3C()
{
  int v0;
  void *v1;

  v1 = malloc_type_malloc(0x10uLL, 0x87509263uLL);
  STACK[0x9D8] = (unint64_t)v1;
  return ((uint64_t (*)(void))*(&off_100260750 + (((v1 != 0) * (((v0 | 0x52) - 210) ^ 0x6FF)) ^ (v0 | 0x52))))();
}

uint64_t sub_1000B6F84(_BYTE *a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BYTE *v6;
  void *v7;

  v5 = (v1 + 177) | 0x43;
  v6 = (_BYTE *)((v2 | ((unint64_t)(v2 < 0x4E7C351B) << 32)) + v3 + 0x24AC37F30D6E635BLL);
  *a1 = v6[((v5 ^ 0x2C6u) + 180) ^ 0xDB53C80CA41566BFLL];
  v6 -= 0x24AC37F35BEA9941uLL;
  a1[1] = v6[204];
  a1[2] = v6[205];
  a1[3] = v6[206];
  a1[4] = v6[207];
  a1[5] = v6[208];
  a1[6] = v6[209];
  a1[7] = v6[210];
  a1[8] = v6[211];
  a1[9] = v6[212];
  a1[10] = v6[213];
  a1[11] = v6[214];
  a1[12] = v6[215];
  a1[13] = v6[216];
  a1[14] = v6[217];
  a1[15] = v6[218];
  LOWORD(STACK[0x936]) = 14940;
  v7 = malloc_type_malloc(*(_DWORD *)(v4 + 56) ^ 0xB3B7B663, 0xCE56C7F9uLL);
  STACK[0x7A0] = (unint64_t)v7;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + (((v7 == 0) | (32 * (v7 == 0))) ^ v5)) - 12))();
}

uint64_t sub_1000B70B8()
{
  int v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((92
                                * ((*(_DWORD *)(v2 + 56) ^ v1 ^ 0xCE62FFF57FE3FF99)
                                 + 0x319D000AB77F716BLL
                                 + ((((v0 + 111) | 0x203u) + 4291296139) & (2 * (*(_DWORD *)(v2 + 56) ^ v1))) != 929263876)) ^ v0)))();
}

uint64_t sub_1000B7160@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;

  v9 = v4 < a2;
  *(_BYTE *)(v6 + a1 - 0xD419D851AD1D08) = *(_BYTE *)(v5 + v3 - 0x237A1252698E1FBBLL) - 60;
  if (v9 == v7 - 0x78D8BADE373AC89FLL < a2)
    v9 = v7 - 0x78D8BADE373AC89FLL < v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((97 * v9) ^ v2)) - 8))();
}

uint64_t sub_1000B71FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  LOWORD(STACK[0x76E]) = (((unsigned __int16)*(_DWORD *)(v8 + 56) << (v6 + 52)) & 0xF36E ^ 0x6046)
                       + (*(_DWORD *)(v8 + 56) ^ 0xCFD4);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v9 + 8 * (((v7 != 0) * ((v6 - 1612) ^ 0x266)) ^ (v6 - 1612)))
                                                                                               - 12))(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_1000B7204(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, unsigned __int16 a6)
{
  uint64_t v6;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((1757 * (((a3 + 15925) & 0xC7CD ^ 0xAD33) == a6)) ^ a3)) - 4);
  LODWORD(STACK[0x680]) = a4;
  return v7();
}

uint64_t sub_1000B7248(int a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v8 = (a1 + a2 + 660497543);
  v9 = (unsigned __int16)(v5 - ((2 * (a2 + 2183)) & 0x164E) + ((a2 + 2183) ^ (a5 + v6) ^ (v6 + 1664) ^ 0xF765) - 23806) < 0xFFFDu;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v7 + 8 * ((v9 | (v9 << 7)) ^ (a5 - 440))) - 8))(v8);
}

uint64_t sub_1000B72B4(int a1, uint64_t a2, int a3)
{
  unsigned __int16 v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int16 v12;

  v10 = ((unsigned __int16)(a1 - 19449) ^ (v5 + 1)) + ((v7 + 1620) & (2 * (a1 + 46087)));
  v11 = (v10 | ((unint64_t)(v10 < v5) << 32)) + v4 + STACK[0x628] + 0x19A31ED8AB7D63A1;
  v12 = (((*(unsigned __int8 *)v11 - 2 * (*(_BYTE *)v11 & 0xF)) << 8) - 28928) ^ 0x8F00;
  LOWORD(v11) = (v12 - ((2 * v12) & 0xCC00) - 6405) ^ 0xE6FB | (*(unsigned __int8 *)(v11 + 1)
                                                              - ((2 * *(unsigned __int8 *)(v11 + 1)) & 0x174)
                                                              + 698) ^ 0x2BA;
  LODWORD(v11) = (unsigned __int16)((v11 - ((2 * v11) & 0x57D4) - 21526) ^ v8);
  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8
                                        * ((1667
                                          * ((v3 | ((v3 < ((unsigned __int16)a3 ^ 0x6B9Eu)) << 16))
                                           - 880735259 >= ((v6 + 1275) & (2 * (_DWORD)v11))
                                                        + (v11 ^ 0xFCFDF77C)
                                                        - 830243697)) ^ a3))
                            - 12))();
}

uint64_t sub_1000B73D8(int a1, uint64_t a2, int a3)
{
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((100
                                          * (*(char *)(STACK[0x628] + (a1 - 670167033)) < (char)(18 * (a3 ^ 0xA7) + 46))) ^ ((a3 ^ 0x570) - 956)))
                            - 4))();
}

uint64_t sub_1000B7440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * (((a7 == (((a8 ^ 0xDA) + 120) ^ 0x8E))
                                          * ((((a8 ^ 0xDA) - 914) | 0x448) - 1582)) ^ a8 ^ 0xDA))
                            - 4))();
}

uint64_t sub_1000B7484(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4, uint64_t a5, int a6)
{
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((((a6 - 1642554256) & 0x61E767CD ^ 0x7B0) * (a4 == 44026)) ^ a6))
                            - 8))();
}

uint64_t sub_1000B74C8(int a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;

  v5 = a3 + 3;
  STACK[0x678] = v5;
  return sub_1000B7248(a1, a2, v5, a4, a5);
}

uint64_t sub_1000B74D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  uint64_t v9;

  return (*(uint64_t (**)(void))(v9
                              + 8
                              * ((((((v8 + 291425579 + v7) | 0x2C0) - 329) ^ (v8 + 291425579) & (v7 + 703)) * (a7 == 2)) ^ v8)))();
}

uint64_t sub_1000B7514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v8;

  STACK[0x688] = a3 + 3;
  return (*(uint64_t (**)(void))(v8 + 8 * (((a6 < (__int16)(a8 - 23247)) * ((a8 - 1539) ^ 0x99)) ^ (a8 - 1303))))();
}

uint64_t sub_1000B754C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t (*v9)(void);

  v9 = *(uint64_t (**)(void))(v8
                           + 8
                           * (int)(((((a8 - 1473375982) & 0x57D1EEED) + (a8 ^ 0xFFFFFF73)) * (a6 == -21554)) ^ (a8 - 1390)));
  LODWORD(STACK[0x680]) = a4;
  return v9();
}

uint64_t sub_1000B759C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8 * (((v7 != 0) * (v6 ^ 0x266)) ^ v6))
                                                                                                - 12))(a1, a2, a3, a4, a5, a6, 4294925268);
}

uint64_t sub_1000B75CC@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  uint64_t v4;
  _BOOL4 v5;

  *(_BYTE *)(a2 + 1860990888 + ((v2 - 647803102) & 0x269CAABC) + v4 - 0x353232397341B138) = -71;
  v5 = (v3 + 1675682312) > 0xD1C3E1F4;
  if ((v3 + 1675682312) < 0xD1C3E1F3)
    v5 = 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((4 * !v5) | (8 * !v5) | (v2 - 1194)))
                            - ((v2 - 1040245906) & 0x3E00DFE7 ^ 0x227)))();
}

uint64_t sub_1000B76B4@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;

  v9 = v4 < v5;
  v10 = (v3 + 1);
  *(_BYTE *)(v8 + v10 + a2 + ((unint64_t)(v10 < v2) << 32)) = 57;
  if (v9 == (int)v10 + v6 < v5)
    v9 = (int)v10 + v6 < v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((!v9 * ((2 * (v7 ^ 0x275)) ^ 0xA0)) | v7)) - 4))();
}

uint64_t sub_1000B7724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  v10 = STACK[0x698];
  v11 = *(_QWORD *)(STACK[0x698] + 64);
  v12 = *(_DWORD *)(STACK[0x698] + 72);
  v13 = 1448877107 * (((v9 - 192) & 0x8D583415 | ~((v9 - 192) | 0x8D583415)) ^ 0x39CD6C0);
  *(_DWORD *)(v9 - 160) = v13 ^ 0x7B0FA0C7;
  *(_DWORD *)(v9 - 112) = v13 + 2085568962;
  *(_QWORD *)(v9 - 152) = v10 + 0x8ED1C57AC03BA9CLL;
  *(_QWORD *)(v9 - 144) = v10 + 0x511395B3EF1E7D5;
  *(_QWORD *)(v9 - 136) = a8;
  *(_DWORD *)(v9 - 192) = v12 - v13 + 657862940;
  *(_DWORD *)(v9 - 188) = v13 + 1940630650;
  *(_DWORD *)(v9 - 128) = v8 - v13 + 473;
  *(_QWORD *)(v9 - 120) = v10 + 0xC2C3062343A3C9FLL;
  *(_QWORD *)(v9 - 176) = a7;
  *(_QWORD *)(v9 - 168) = v11;
  sub_1001C19AC(v9 - 192);
  return (*(uint64_t (**)(void))(a5 + 8 * (((*(_DWORD *)(v9 - 184) != 0) * (((v8 - 164) | 0x1D7) - 375)) ^ v8)))();
}

uint64_t sub_1000B783C()
{
  void *v0;
  void *v1;
  int v2;

  free(v1);
  free(v0);
  return ((uint64_t (*)(void))*(&off_100260750
                             + (int)(((STACK[0xA68] != 0) * ((v2 + 1899831602) & 0x8EC2D9EF ^ 0x771)) ^ (v2 - 866))))();
}

uint64_t sub_1000B784C()
{
  int v0;
  void *v1;
  uint64_t v2;
  size_t v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;

  bzero(v1, v3);
  v8 = STACK[0x778];
  v9 = 176504963 * ((2 * ((v7 - 192) & 0x61636310) - (v7 - 192) + 513580264) ^ 0x943A75F7);
  v10 = LODWORD(STACK[0xA8C]) - v9 - 1406209041;
  *(_DWORD *)(v7 - 188) = v9 + v0 - (((v0 << (v4 ^ 0xCC)) + 607780906) & 0x83001420) - 744682968;
  *(_DWORD *)(v7 - 184) = v10;
  *(_QWORD *)(v7 - 152) = v2;
  LOBYTE(STACK[0x16F4]) = -125 * ((2 * ((v7 + 64) & 0x10) - (v7 + 64) - 24) ^ 0xF7) + 52;
  *(_DWORD *)(v7 - 128) = v9 + 290818466;
  *(_QWORD *)(v7 - 176) = &unk_10021EC94;
  *(_QWORD *)(v7 - 168) = v8;
  *(_DWORD *)(v7 - 160) = v5 - v9 - 315;
  *(_QWORD *)(v7 - 136) = v1;
  *(_DWORD *)(v7 - 144) = v0 - v9 - 589810407;
  sub_10013D690(v7 - 192);
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((2022 * (*(_DWORD *)(v7 - 192) == 0)) ^ v5)) - 12))();
}

uint64_t sub_1000B7968()
{
  int v0;
  int v1;
  unint64_t v2;
  void *v3;
  int v4;
  int v5;

  v5 = v0;
  STACK[0xA68] = v2;
  LODWORD(STACK[0x8FC]) = v1 - 615530983;
  free((void *)(STACK[0x778] - 0x5C13350084191667));
  free(v3);
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((194 * (v5 == 13 * (v4 ^ 0x6D0) - 377)) | (v4 - 1217))) - 4))();
}

uint64_t sub_1000B7984@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  int v4;
  _BOOL4 v5;

  v4 = STACK[0x688];
  *(_BYTE *)(v3 + a2 + 200571139 - 0x353232397341B08CLL) = -71;
  if ((v4 - 2113406977) < 0xAD7DB2DD != (v2 - 1384272136) < 0xAD7DB2DD)
    v5 = (v4 - 2113406977) < 0xAD7DB2DD;
  else
    v5 = v2 - 1384272136 < (v4 - 2113406977);
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((2023 * v5) ^ v2)) - 4))();
}

uint64_t sub_1000B7A38@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  unsigned int v2;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  _BOOL4 v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;

  v10 = v7 < v5;
  *(_BYTE *)(a2 + (v4 + 1) + (v3 ^ 0x47u) + ((unint64_t)(v4 + 1 < v2) << 32) + v9 - 929) = 57;
  v11 = v6 + v4 + 930;
  v12 = v10 ^ (v11 < v5);
  v13 = v11 < v7;
  if (!v12)
    v10 = v13;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((v10 * v8) ^ v3)) - 4))();
}

uint64_t sub_1000B7AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  v9 = *(_QWORD *)(v6 + 64);
  v10 = *(_DWORD *)(v6 + 72);
  v11 = 1448877107 * ((-15257655 - ((v8 - 192) | 0xFF172FC9) + ((v8 - 192) | 0xE8D036)) ^ 0x71D3CD1C);
  *(_DWORD *)(v8 - 160) = v11 ^ 0x7B0FA0C7;
  *(_QWORD *)(v8 - 120) = v6 + 0xC2C3062343A3C9FLL;
  *(_DWORD *)(v8 - 192) = v10 - v11 + 657862940;
  *(_DWORD *)(v8 - 188) = v11 + 1940630650;
  *(_QWORD *)(v8 - 136) = v5;
  *(_DWORD *)(v8 - 112) = v11 + 2085568962;
  *(_QWORD *)(v8 - 176) = v4;
  *(_QWORD *)(v8 - 168) = v9;
  *(_DWORD *)(v8 - 128) = v7 - v11 - 284;
  *(_QWORD *)(v8 - 152) = v6 + 0x8ED1C57AC03BA9CLL;
  *(_QWORD *)(v8 - 144) = v6 + 0x511395B3EF1E7D5;
  sub_1001C19AC(v8 - 192);
  return ((uint64_t (*)(void))(*(_QWORD *)(a4
                                        + 8
                                        * ((102 * (*(_DWORD *)(v8 - 184) == ((v7 - 161973690) & 0x9A782FC) - 228)) ^ v7))
                            - 8))();
}

uint64_t sub_1000B7BDC()
{
  int v0;
  int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  int v9;

  v6 = STACK[0x690];
  bzero((void *)STACK[0x690], STACK[0x680]);
  v7 = STACK[0x810];
  v8 = STACK[0x998];
  v9 = 176504963 * (((~(v5 - 192) | 0x4034B360) + ((v5 - 192) | 0xBFCB4C9F)) ^ 0x356DA581);
  *(_QWORD *)(v5 - 136) = v6;
  *(_DWORD *)(v5 - 160) = v2 - v9 - 64;
  *(_QWORD *)(v5 - 152) = v3;
  *(_QWORD *)(v5 - 176) = &unk_10021EC94;
  *(_QWORD *)(v5 - 168) = v7;
  LOBYTE(STACK[0x16F4]) = -125 * (((~(v5 + 64) | 0x60) + ((v5 + 64) | 0x9F)) ^ 0x81) + 52;
  *(_DWORD *)(v5 - 144) = v1 - v9 + 524646950;
  *(_DWORD *)(v5 - 128) = v9 + 290818466;
  *(_DWORD *)(v5 - 188) = v9 + v1 - ((v0 - 2097148589) & (2 * v1 - 1458271676)) + 369774389;
  *(_DWORD *)(v5 - 184) = (((v2 + 805) | 0x2C4) ^ 0xAC2EF522) - v9 + v8;
  sub_10013D690(v5 - 192);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((496 * (*(_DWORD *)(v5 - 192) != 0)) ^ v2)) - 12))();
}

uint64_t sub_1000B7D08()
{
  int v0;
  int v1;
  void *v2;

  free((void *)(STACK[0x810] - 0x5C13350084191667));
  free(v2);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((1051 * (v1 == ((v0 + 1162892241) & 0x3AAFA76F) - 526)) ^ (v0 - 1053)))
                            - 8))();
}

uint64_t sub_1000B7D18()
{
  int v0;
  void *v1;

  free(v1);
  free((void *)STACK[0x690]);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((((v0 - 1978300128) & 0x75EA725F ^ 0x2CC) + 70) ^ (v0 - 1978300128) & 0x75EA725F))
                            - 12))();
}

uint64_t sub_1000B7D28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  unsigned __int16 v7;
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8
                                                                                                  + 8 * ((973 * (v7 == (unsigned __int16)((a7 ^ 0x1DC) - 22296 + 5 * (a7 ^ 0x1DC)))) ^ a7)))(a1, a2, a3, a4, a5, a6, 4294924368);
}

uint64_t sub_1000B7D64()
{
  int v0;
  int v1;
  void *v2;

  STACK[0x9B0] = 0x5C13350084191667;
  LODWORD(STACK[0x898]) = 2046997083;
  v2 = malloc_type_malloc((((v0 ^ 0x84) + 1218) ^ 0xC0220C58) + (v1 & 0xFFFFFFF0 ^ 0x3FDDF57B) + ((2 * v1) & 0x7FBBEAE0), 0x68517D9BuLL);
  STACK[0x690] = (unint64_t)v2;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((1879 * (v2 != 0)) ^ v0)) - 8))();
}

uint64_t sub_1000B7E00()
{
  uint64_t v0;
  size_t v1;
  int v2;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))(*(_QWORD *)(v0
                                     + 8
                                     * (((malloc_type_malloc(v1, 0x2DFD1FE4uLL) != 0) * (((v2 - 2) | 4) - 390)) ^ v2))
                         - 12);
  return v3();
}

uint64_t sub_1000B7E40(uint64_t a1)
{
  int v1;
  int v2;

  STACK[0x680] = a1 + 0x353232397341B08CLL;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((1231 * (v2 == ((v1 - 424) | 0x190) - 501)) ^ v1)) - 4))();
}

uint64_t sub_1000B7EC4@<X0>(uint64_t a1@<X8>)
{
  unsigned int v1;
  int v2;
  int v3;
  unsigned int v4;
  _BOOL4 v5;

  *(_BYTE *)(STACK[0x680] + a1 + v1 - 0x353232397341B08CLL) = -71;
  v4 = ((v2 + 812414074) & 0xCF938BFE ^ 0x7F9EDA0A) + v3;
  v5 = v1 - 2008234524 < v4;
  if (v1 - 2008234524 < 0xBF7CCDCF != v4 < 0xBF7CCDCF)
    v5 = v4 < 0xBF7CCDCF;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((2 * !v5) | (4 * !v5) | (v2 - 141))) - 8))();
}

uint64_t sub_1000B8024@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v2;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BOOL4 v9;
  unsigned int v10;
  int v11;
  _BOOL4 v12;

  v9 = v7 < v5;
  v10 = (v3 ^ 0x306 ^ (v6 + 423)) + v4;
  *(_BYTE *)(v8 + (v4 + 1) + a2 + ((unint64_t)(v4 + 1 < v2) << 32)) = 57;
  v11 = v9 ^ (v10 < v5);
  v12 = v10 < v7;
  if (!v11)
    v9 = v12;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((2 * !v9) | (4 * !v9) | v3)) - 8))();
}

uint64_t sub_1000B8094(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v7 = *(_QWORD *)(v2 + 64);
  v8 = *(_DWORD *)(v2 + 72);
  v9 = 1448877107 * ((((v6 - 192) | 0xC561C967) + (~(v6 - 192) | 0x3A9E3698)) ^ 0xB45AD44C);
  *(_QWORD *)(v6 - 120) = v2 + 0xC2C3062343A3C9FLL;
  *(_DWORD *)(v6 - 160) = v9 ^ 0x7B0FA0C7;
  *(_DWORD *)(v6 - 128) = v3 - v9 + 23;
  *(_QWORD *)(v6 - 136) = v5;
  *(_DWORD *)(v6 - 192) = v8 - v9 + 657862940;
  *(_DWORD *)(v6 - 188) = v9 + 1940630650;
  *(_QWORD *)(v6 - 176) = v4;
  *(_QWORD *)(v6 - 168) = v7;
  *(_QWORD *)(v6 - 152) = v2 + 0x8ED1C57AC03BA9CLL;
  *(_QWORD *)(v6 - 144) = v2 + 0x511395B3EF1E7D5;
  *(_DWORD *)(v6 - 112) = v9 + 2085568962;
  sub_1001C19AC(v6 - 192);
  return ((uint64_t (*)(void))(*(_QWORD *)(a2
                                        + 8
                                        * ((251
                                          * (*(_DWORD *)(v6 - 184) == ((v3 - 352912115) & 0x778B47AF)
                                                                    + ((v3 - 604) | 0x80)
                                                                    - 1652705213)) ^ v3))
                            - 8))();
}

uint64_t sub_1000B81D0()
{
  size_t v0;
  int v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;

  v4 = STACK[0x690];
  bzero((void *)STACK[0x690], v0);
  v5 = STACK[0x9B0];
  v6 = STACK[0x898];
  v7 = 176504963 * ((((v3 - 192) | 0x7D73C2A0) - ((v3 - 192) | 0x828C3D5F) - 2104738465) ^ 0xF7D52BBF);
  *(_DWORD *)(v3 - 128) = v7 + 290818466;
  *(_QWORD *)(v3 - 152) = STACK[0x680];
  *(_DWORD *)(v3 - 188) = v7 + v1 - ((2 * v1 - 2143021782) & 0x83001420) + 27399336;
  *(_DWORD *)(v3 - 184) = v6 - v7 - 1406209041;
  *(_DWORD *)(v3 - 144) = v1 - v7 + 182271897;
  *(_QWORD *)(v3 - 176) = &unk_10021EC94;
  *(_QWORD *)(v3 - 168) = v5;
  *(_DWORD *)(v3 - 160) = v2 - v7 + 18;
  *(_QWORD *)(v3 - 136) = v4;
  LOBYTE(STACK[0x16F4]) = -125 * ((((v3 + 64) | 0xA0) - ((v3 + 64) | 0x5F) + 95) ^ 0xBF) + 52;
  sub_10013D690(v3 - 192);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (int)(((*(_DWORD *)(v3 - 192) == 0) * ((v2 + 248374761) & 0xF1321B8F ^ 0x7B6)) ^ v2))
                            - 12))();
}

uint64_t sub_1000B8318()
{
  int v0;
  void *v1;
  int v2;
  int v3;

  STACK[0x7C8] = STACK[0x690];
  LODWORD(STACK[0x8B0]) = v2 - 86721661;
  free((void *)(STACK[0x9B0] - 0x5C13350084191667));
  free(v1);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((((v3 - 250771931) & 0xEF279E8 ^ 0x4AF) * (v0 == 0)) ^ (v3 + 377)))
                            - 12))();
}

uint64_t sub_1000B83D8@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  _BOOL4 v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;

  v10 = v7 < v6;
  *(_BYTE *)(v9 + ((v3 + 998) ^ 0x728u) + v4 + a2 + ((unint64_t)(((v3 + 998) ^ 0x728u) + v4 < v2) << 32)) = 57;
  v11 = v5 + v4 + 1;
  v12 = v10 ^ (v11 < v6);
  v13 = v11 < v7;
  if (!v12)
    v10 = v13;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((!v10 * v8) ^ v3)) - 8))();
}

uint64_t sub_1000B8444()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_DWORD *)(v0 + 72);
  v7 = 1448877107 * ((v4 - 192) ^ 0x713B1D2A);
  *(_DWORD *)(v4 - 128) = v1 - v7 - 1188;
  LODWORD(STACK[0x640]) = 10 * (v1 ^ 0x772);
  *(_DWORD *)(v4 - 160) = v7 ^ 0x7B0FA0C7;
  *(_QWORD *)(v4 - 144) = v0 + 0x511395B3EF1E7D5;
  *(_QWORD *)(v4 - 136) = v3;
  *(_DWORD *)(v4 - 112) = v7 + 2085568962;
  *(_QWORD *)(v4 - 120) = v0 + 0xC2C3062343A3C9FLL;
  *(_QWORD *)(v4 - 176) = v2;
  *(_QWORD *)(v4 - 168) = v5;
  *(_QWORD *)(v4 - 152) = v0 + 0x8ED1C57AC03BA9CLL;
  *(_DWORD *)(v4 - 192) = v6 - v7 + ((v1 - 1380192298) & 0x52440FCD ^ 0x273637D1);
  *(_DWORD *)(v4 - 188) = v7 + 1940630650;
  sub_1001C19AC(v4 - 192);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (((*(_DWORD *)(v4 - 184) != 0) * (LODWORD(STACK[0x640]) ^ 0x395)) ^ v1))
                            - 4))();
}

uint64_t sub_1000B8570()
{
  void *v0;

  free(v0);
  free((void *)STACK[0x670]);
  return sub_1000B9450();
}

uint64_t sub_1000B8580()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  int v6;

  v1 = STACK[0x640];
  v2 = STACK[0x670];
  bzero((void *)STACK[0x670], STACK[0x668]);
  v3 = STACK[0x960];
  v4 = STACK[0x8B4];
  v5 = STACK[0x660];
  v6 = 176504963 * ((~(v0 - 192) & 0x4183DB2 | (v0 - 192) & 0xFBE7C24D) ^ 0x8EBED4AD);
  *(_QWORD *)(v0 - 136) = v2;
  *(_DWORD *)(v0 - 128) = v6 + 290818466;
  *(_QWORD *)(v0 - 152) = STACK[0x608];
  *(_DWORD *)(v0 - 160) = v1 - v6 - 746;
  *(_DWORD *)(v0 - 144) = v5 - v6 + (v1 ^ 0xB40BA4B8);
  *(_DWORD *)(v0 - 188) = v6 + v5 - ((2 * v5 - 761207708) & 0x83001420) + ((v1 + 178) | 0x28D) - 1429179016;
  *(_DWORD *)(v0 - 184) = v4 - v6 - 1406209041;
  *(_QWORD *)(v0 - 176) = &unk_10021EC94;
  *(_QWORD *)(v0 - 168) = v3;
  LOBYTE(STACK[0x16F4]) = -125 * ((~(v0 + 64) & 0xB2 | (v0 + 64) & 0x4D) ^ 0xAD) + 52;
  sub_10013D690(v0 - 192);
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((1801 * (*(_DWORD *)(v0 - 192) == 0)) ^ v1)) - 8))();
}

uint64_t sub_1000B86C4()
{
  int v0;
  void *v1;
  int v2;
  int v3;

  STACK[0x7C8] = STACK[0x670];
  LODWORD(STACK[0x8B0]) = v3 - 1543298272;
  free((void *)(STACK[0x960] - 0x5C13350084191667));
  free(v1);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (int)((104 * (((v0 - (v2 - 1741)) | (v2 - 1741 - v0)) >> 31)) ^ (v2 - 1043)))
                            - ((v2 - 1420) ^ 0x149)))();
}

uint64_t sub_1000B874C()
{
  int v0;
  void *v1;

  v1 = malloc_type_malloc(0x10uLL, 0xA3FE12B2uLL);
  STACK[0xA78] = (unint64_t)v1;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((992 * (v1 != 0)) ^ v0)) - 4))();
}

uint64_t sub_1000B87B0(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((21
                                          * (a1
                                           - STACK[0xA68]
                                           - (LODWORD(STACK[0x8FC]) - 584873627)
                                           - ((unint64_t)((LODWORD(STACK[0x8FC]) - 584873627) < 0x26564779) << 32)
                                           + 643188601 > 0xF)) ^ v1))
                            - (v1
                             - 1137)
                            + 365))();
}

void sub_1000B8868(int8x16_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;

  v5 = *(int8x16_t *)(v2 + v3 + a2 + (v4 ^ 0x7B4u));
  v6.i64[0] = 0xD5D5D5D5D5D5D5D5;
  v6.i64[1] = 0xD5D5D5D5D5D5D5D5;
  v7 = veorq_s8(v5, v6);
  v8.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v8.i64[1] = 0xAAAAAAAAAAAAAAAALL;
  v9 = vandq_s8(vaddq_s8(v5, v5), v8);
  v8.i64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v8.i64[1] = 0x2C2C2C2C2C2C2C2CLL;
  *a1 = vaddq_s8(vaddq_s8(v7, v8), v9);
  JUMPOUT(0x1000B8968);
}

uint64_t sub_1000B88B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  *(_BYTE *)(v5 + a1 - 0x3C44038ACD509433) = (*(_BYTE *)(a2 + v4 + v2 + 1741) ^ 0xD5)
                                             + ((2 * *(_BYTE *)(a2 + v4 + v2 + 1741)) & 0xAA)
                                             + 44;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((677 * (v6 + 1 == v3 + 16)) ^ v7)) - 12))();
}

uint64_t sub_1000B89B4@<X0>(void *a1@<X0>, int a2@<W6>, int a3@<W8>)
{
  int v3;
  int v4;

  v4 = 11 * (v3 ^ (a3 + 1698));
  free(a1);
  STACK[0xA68] = 0;
  LODWORD(STACK[0x8FC]) = 1228062212;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + (((((v4 - 485) | 0x280) + 274) * (a2 == 0)) ^ v4)) - 8))();
}

uint64_t sub_1000B8A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (((((v7 - 485) | 0x280) + 274) * (a7 == 0)) ^ v7)) - 8))();
}

uint64_t sub_1000B8A48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  uint64_t v7;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7 + 8 * ((((STACK[0x938] | STACK[0x770] | STACK[0xA78]) != 0) * (a7 ^ 0x28D)) ^ a7))
                                                                                               - (a7 ^ 0x20Bu)
                                                                                               + 117))(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_1000B8A90@<X0>(int a1@<W8>)
{
  uint64_t v1;

  LOWORD(STACK[0x936]) = 14927;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((1199 * (LODWORD(STACK[0xA24]) != (a1 ^ 0x4A) + 369822296)) ^ a1 ^ 0x4A))
                            - 12))();
}

uint64_t sub_1000B8ADC@<X0>(int a1@<W8>)
{
  __int16 v1;
  int v2;
  uint64_t v3;
  int v4;

  v4 = a1 + 315674944;
  LOWORD(STACK[0x936]) = ((v1 - 3352) ^ 0x5F6F) - 9501 + (((v1 - 3352) << ((v4 ^ 1) & 0xCF)) & 0xBEDE);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (int)((v4 | 0x210A30) ^ 0x12F1DCE8 ^ (1243
                                                                              * (((v2 - (v4 | 0x210A30)) | ((v4 | 0x210A30u) - v2)) >> 31))))
                            - 82 * ((v4 | 0x210A30) ^ 0x12F1DE38u)
                            + 648))();
}

uint64_t sub_1000B8B84()
{
  int v0;
  __int16 v1;
  __int16 v2;
  uint64_t v3;
  int v4;

  v4 = (4 * v0) ^ 0x9F0;
  LOWORD(STACK[0x936]) = ((v2 + 8656) ^ 0xFFE2) + v1 + ((v4 + 32052) & (2 * (v2 + 8656))) + 33;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((1632 * (LODWORD(STACK[0x8DC]) != -510232870)) ^ v4)) - 8))();
}

uint64_t sub_1000B8BF0@<X0>(int a1@<W8>)
{
  __int16 v1;
  __int16 v2;
  int v3;
  __int16 v4;
  void *v5;
  uint64_t v6;

  v3 = a1 - 6;
  v4 = v2 + (v1 ^ 0xB75);
  LOWORD(STACK[0x936]) = v4 + ((v3 ^ 0xF9D4) & (2 * v1) ^ 0xE914) - 32172;
  v5 = malloc_type_malloc((unsigned __int16)(v4 + ((v3 ^ 0xF9D4) & (2 * v1) ^ 0xE914) - 32172 - 14924), 0x21A57AD4uLL);
  v6 = (uint64_t)*(&off_100260750 + (((v5 != 0) * (v3 + 1016)) ^ v3));
  STACK[0x9D8] = (unint64_t)v5;
  return ((uint64_t (*)(void))(v6 - ((v3 + 589986095) & 0xDCD584C7 ^ 0x8DLL)))();
}

uint64_t sub_1000B8CD8(_BYTE *a1)
{
  __int16 v1;
  int v2;
  uint64_t v3;

  *a1 = 1;
  a1[1] = (((((unsigned __int16)(v1 - 14927) >> 8)
           - (((unsigned __int16)(v1 - 14927) >> 8 << (((v2 + 67) ^ 0xEC) - 32)) & 0xE2)
           + 1) ^ 2)
         - 16) ^ 0xF3;
  a1[2] = (v1 + (~(2 * v1 + 98) | 0xF) - 86) ^ 0xF8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((((LODWORD(STACK[0xA24]) != 369823000) << 8) | ((LODWORD(STACK[0xA24]) != 369823000) << 9)) ^ (v2 - 263)))
                            - 8))();
}

uint64_t sub_1000B8D74@<X0>(_BYTE *a1@<X0>, int a2@<W8>)
{
  char v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  _BOOL4 v6;

  a1[3] = 4;
  v5 = LOWORD(STACK[0xA24]) - (((LOWORD(STACK[0xA24]) + 29416) & 0x460F ^ STACK[0xA24] & 5) << ((a2 ^ v2) + 52)) - 18190;
  a1[4] = BYTE1(v5) ^ 0xC6;
  a1[5] = v5 ^ 0xA;
  v6 = (LODWORD(STACK[0xA24]) | ((unint64_t)(LODWORD(STACK[0xA24]) < v3) << 32)) == 369823000;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((v6 | (2 * v6)) ^ a2)) - 4))();
}

uint64_t sub_1000B8E44()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((v0 - 117) ^ (251 * (v1 ^ 1)))) - 173 * (v0 ^ 0x6CAu) + 1207))();
}

uint64_t sub_1000B8F3C@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  _BYTE *v6;

  *(_BYTE *)(a1 + (a2 + v2)) = 1;
  v6 = (_BYTE *)(((a2 - 380576369) | ((unint64_t)((a2 - 380576369) < 0x3EF18C4D) << 32))
               + a1
               - 1056017493
               + ((v3 - 1211) | 8u));
  *v6 = ((unsigned __int16)(v4 - 2 * ((v4 + 8656) & 0x330F ^ v4 & 8) + 21719) >> 8) ^ 0x33;
  v6[1] = (v4 - 2 * ((v4 - 48) & 0xF ^ v4 & 8) - 41) ^ 7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (v3 ^ (446 * (v4 > 0x12F1DE30)))) - 8))();
}

uint64_t sub_1000B9010(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;

  v5 = ((v3 - 317840944 - a2) & ~(v3 - 317840944)) >= 0;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v4
                                                                                                 + 8
                                                                                                 * (int)((((a2 + 103891030) & 0xF9CEBFB1) + 1400) ^ a2 ^ ((v5 << 7) | (v5 << 9))))
                                                                                     - 8))(a1, 0x5E15CF25B1259CECLL, (v2 + 3), 0x60DA7C9A38CA41A8, 0x591752146C914B2ALL, (a2 + 1341118952) & 0xF79B7FFF);
}

uint64_t sub_1000B90F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v7;
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v8
                                                     + 8
                                                     * (int)((226
                                                            * ((((a7 ^ (unint64_t)(a1 - v7 + a3)) & a7) >> (__clz(a7 ^ (unint64_t)(a1 - v7 + a3) | 1) ^ 0x3Fu)) & 1)) ^ (a7 | 0x667))))(a1, 0x5E15CF25B1259CECLL);
}

uint64_t sub_1000B9160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unint64_t v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((1997 * (v7 >= (unint64_t)(a7 + 1725) - 1725)) ^ (a7 + 967)))
                            - (((a7 + 246) | 0x251u) ^ 0x35FLL)))();
}

uint64_t sub_1000B91A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int8x16_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  uint64_t v8;
  int8x16_t v9;

  v9.i64[0] = -1;
  v9.i64[1] = -1;
  *v5 = vaddq_s8(*v7, v9);
  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((((v6 & 0xFFFFFFFFFFFFFFF0) == 16) * (((a5 - 428) | 0x200) - 116)) ^ (a5 - 1344)))
                            - 4))();
}

void sub_1000B91F0()
{
  JUMPOUT(0x1000B91C8);
}

uint64_t sub_1000B91F8()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((((v0 ^ 0x235) - 761) * (v2 != v1)) ^ v0 ^ 0x235)) - 12))();
}

void sub_1000B9224()
{
  int v0;

  STACK[0xA68] = STACK[0x690];
  LODWORD(STACK[0x8FC]) = v0 + 498926374;
  JUMPOUT(0x1000B9240);
}

uint64_t sub_1000B92AC()
{
  int v0;
  void *v1;

  v1 = malloc_type_malloc(0x10uLL, 0x2FA76BCuLL);
  STACK[0x770] = (unint64_t)v1;
  return ((uint64_t (*)(void))*(&off_100260750 + (((((31 * (v0 ^ 0x21D) - 461) | 0x245) ^ 0x2FF) * (v1 == 0)) ^ v0)))();
}

uint64_t sub_1000B9304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8 * (((v7 == 0) * ((v6 ^ 0x2CC) + 70)) ^ v6))
                                                                                                - 12))(a1, a2, a3, a4, a5, a6, 4294925268);
}

uint64_t sub_1000B938C()
{
  void *v0;

  free(v0);
  STACK[0xA68] = 0;
  LODWORD(STACK[0x8FC]) = 1228062212;
  return sub_10012F724();
}

void sub_1000B93D0()
{
  JUMPOUT(0x1000B93DCLL);
}

void sub_1000B9450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;

  sub_1000B6114(a1, a2, a3, a4, a5, a6, v6);
}

uint64_t sub_1000B9458()
{
  uint64_t v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((5 * (v1 ^ 0x175)) ^ 0x45)) - 4))();
}

void sub_1000B94D8()
{
  JUMPOUT(0x1000B9490);
}

uint64_t sub_1000B94E0@<X0>(void *a1@<X0>, int a2@<W8>)
{
  int v2;
  unsigned int v3;
  int v4;
  _BOOL4 v5;
  unsigned int v6;

  v3 = (a2 >> (((v2 - 98) ^ 0xF9) & 0xCF)) ^ 9 | a2 ^ 0xFFFFFF9D;
  v4 = ((v3 - ((2 * v3) & 0x78) + 60) >> 2) ^ 0xF | (v3 - ((2 * v3) & 0x78) + 60) ^ 0x3C;
  v5 = ((1 - (v4 | ~(((v4 - 2 * (v4 & 1) + 3) & 0xFE) >> 1))) & 1) == 0;
  v6 = -42022 * ((v5 ^ 0xB70BFCD7) + 2 * v5) - 641645590;
  free(a1);
  STACK[0x7C8] = 0;
  LODWORD(STACK[0x8B0]) = 984789230;
  return ((uint64_t (*)(void))*(&off_100260750 + ((1029 * (v6 == 0)) ^ v2)))();
}

uint64_t sub_1000B95B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v9 + 8 * (((*(_DWORD *)(v6 + 4) == v7) * ((((v8 & 0x760C7FCF) - 1713) | 0x143) ^ 0x279)) ^ ((v8 & 0x760C7FCF) - 1539)))
                                                                                               - 4))(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_1000B9658(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = v2 + 1898111181 + ((v1 + 141034823) | 0x80022030);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((21
                                          * (a1
                                           - v3
                                           - v5
                                           - ((unint64_t)(v5 < 0x42BFC71D) << 32)
                                           + 1119864605 < 0x10)) ^ v1))
                            - 8))();
}

uint64_t sub_1000B9720(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v5 + a1 - 0x5B62404DAF3DBB47) = *(_BYTE *)(v7 + v4 + v1)
                                             - ((*(unsigned __int8 *)(v7 + v4 + v1) << ((v3 ^ 0x1D) + 52)) & 0xEA)
                                             - 11;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((37 * (v6 + 1 == v2 + 16)) ^ v3)) - 8))();
}

void sub_1000B9790()
{
  int v0;

  LODWORD(STACK[0x8DC]) = v0 - 16;
  JUMPOUT(0x1000B9390);
}

uint64_t sub_1000B97D4()
{
  int v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((92 * (v0 == (((v2 ^ 0x33E) + 1610) ^ (v1 + 1118) ^ (5 * (v2 ^ 0x33E))))) ^ v2))
                            - 12))();
}

uint64_t sub_1000B9818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  uint64_t v7;
  BOOL v8;
  int v9;

  if (STACK[0x648])
    v8 = STACK[0x688] == 0;
  else
    v8 = 1;
  v9 = !v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 8 * (a7 ^ (1713 * v9)))
                                                                                                - ((a7 - 629) ^ ((a7 - 14) | 0x44Cu) ^ 0x6DFLL)))(a1, a2, a3, a4, a5, a6, 4294925273);
}

void sub_1000B9864(int a1@<W8>)
{
  uint64_t v1;
  _BYTE *v2;

  STACK[0x980] = (unint64_t)&STACK[0xC18];
  STACK[0xAB8] = (unint64_t)&STACK[0xBD4];
  v2 = (_BYTE *)STACK[0x688];
  LOBYTE(STACK[0xBB0]) = *(_BYTE *)STACK[0x688];
  LOBYTE(STACK[0xBB1]) = v2[1];
  LOBYTE(STACK[0xBB2]) = v2[2];
  LOBYTE(STACK[0xBB3]) = v2[3];
  LOBYTE(STACK[0xBB4]) = v2[4];
  LOBYTE(STACK[0xBB5]) = v2[5];
  LOBYTE(STACK[0xBB6]) = v2[6];
  LOBYTE(STACK[0xBB7]) = v2[7];
  LOBYTE(STACK[0xBB8]) = v2[8];
  LOBYTE(STACK[0xBB9]) = v2[9];
  LOBYTE(STACK[0xBBA]) = v2[10];
  LOBYTE(STACK[0xBBB]) = v2[11];
  LOBYTE(STACK[0xBBC]) = v2[12];
  LOBYTE(STACK[0xBBD]) = v2[13];
  LOBYTE(STACK[0xBBE]) = v2[14];
  LOBYTE(STACK[0xBBF]) = v2[15];
  LODWORD(STACK[0xC78]) = -366034007;
  STACK[0xC58] = 0x6205527E24145F56;
  STACK[0xC60] = 0x6396BFB8EB1E3730;
  STACK[0xC68] = 0x9C69404714E1C8CFLL;
  LODWORD(STACK[0xC70]) = 1334441409;
  LODWORD(STACK[0xC74]) = 1279171888;
  STACK[0x918] = (a1 + 650) + *(_QWORD *)(v1 + 8 * a1) - 680;
  JUMPOUT(0x10011D820);
}

uint64_t sub_1000B99A8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5 + 8 * (((v4 + ((a2 - 1325770690) & 0x7FF7BBE5) + 3) * (v3 != a3)) ^ a2)))();
}

uint64_t sub_1000B99E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v6
                                                               + 8
                                                               * ((((v4 + 855) ^ 0x500) * ((v3 & 8) == 0)) ^ (v4 + 983)))
                                                   - 8))(a1, a3 + v5);
}

uint64_t sub_1000B9A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  v12.n128_u64[0] = -1;
  v12.n128_u64[1] = -1;
  *(int8x8_t *)(v7 + a3) = vadd_s8(*(int8x8_t *)(v10 + a3), (int8x8_t)-1);
  return ((uint64_t (*)(uint64_t, unint64_t, __n128))(*(_QWORD *)(v11
                                                                                + 8
                                                                                * ((53
                                                                                  * (((173 * (a7 ^ 0x350u)) ^ 0x4B3)
                                                                                   + a3 == (v8 & 0xFFFFFFFFFFFFFFF8))) ^ a7))
                                                                    - 4))(a1, (v8 & 0xFFFFFFFFFFFFFFF8) + v9, v12);
}

uint64_t sub_1000B9A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v11
                                                                                                  + 8 * ((315 * (((v9 == a8) ^ (v10 - 10)) & 1)) ^ v10))
                                                                                      + v8
                                                                                      - ((v10 + 4324422) | 0x30B01A44u)))(a1, a2, a3, a4, a5, (v10 + 101319669) | 0x41815140u);
}

uint64_t sub_1000B9B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(a4 + v6 - 0x60DA7C9A38CA41A8) = *(_BYTE *)(a5 + v8 - 0x591752146C914B2ALL) - 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8
                                        * (((8 * (a2 == v7 + 0x5E15CF259E33BEBBLL)) | (32
                                                                                     * (a2 == v7 + 0x5E15CF259E33BEBBLL))) ^ a6 ^ 0x478B5EE5))
                            - 12))();
}

void sub_1000B9B90()
{
  JUMPOUT(0x1000B9B58);
}

uint64_t sub_1000B9BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8
                                        * (((106 * (a7 ^ 0x30F21B49) - 761) * (v8 != v7)) ^ (106 * (a7 ^ 0x30F21B49))))
                            - 12))();
}

uint64_t sub_1000B9BE8@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  _BYTE *v7;

  *(_BYTE *)(a1 + (a2 + v2)) = 2;
  v7 = (_BYTE *)(((a2 + 446535665) | ((unint64_t)(a2 + 446535665 < 218 * (v3 ^ 0x4FEu) + 1883128211) << 32))
               + a1
               - 1883129519);
  *v7 = BYTE1(v5) ^ 0x76;
  v7[1] = v5 ^ 0xDA;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * (v3 ^ (510
                                               * ((v5 ^ v4 ^ 0x5AE9D9BEE63E3EFFLL)
                                                - 0x5AE9D9BE45DF04ECLL
                                                + ((2 * (v5 ^ v4)) & 0x1CC7C7DFELL) != 2690595347))))
                            - 12))();
}

uint64_t sub_1000B9D08@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;

  v9 = v1 < v3;
  *(_BYTE *)(v5 + a1 - 0x3B94F1D0679FCA93) = *(_BYTE *)(v4 + v7 - 0x428925971CC71AF8) ^ 0xF5;
  if (v9 == v6 - 0x3E842CD1238108C4 < v3)
    v9 = v6 - 0x3E842CD1238108C4 < v1;
  return ((uint64_t (*)(BOOL))(*(_QWORD *)(v8 + 8 * ((510 * v9) ^ v2)) - 12))(v6 - 0x3E842CD1238108C4 < v1);
}

uint64_t sub_1000B9DAC()
{
  int v0;
  int v1;
  uint64_t v2;

  LOWORD(STACK[0x76E]) = 31162;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)(((LODWORD(STACK[0xA24]) != v1) * (((v0 + 1549065379) & 0xA3AB1FDB) - 213)) ^ v0))
                            - 8))();
}

uint64_t sub_1000B9DF0()
{
  int v0;
  int v1;
  uint64_t v2;

  LOWORD(STACK[0x76E]) = ((LOWORD(STACK[0xAB4]) - 30064) ^ 0x3F3E)
                       + 14975
                       + (((v0 + 4287) & 0xEBBF ^ 0x7FE7) & (2 * (LOWORD(STACK[0xAB4]) - 30064)));
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((v0 - 843050817) & 0x323FEBBF ^ (49 * v1)))
                            - ((((v0 - 843050817) & 0x323FEBBF) + 334) ^ ((((v0 - 843050817) & 0x323FEBBF) + 409675621) | 0x211400D0u) ^ 0x397F2B3DLL)))();
}

uint64_t sub_1000B9E7C()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((((65 * (v0 ^ 0x2E3) - 570) | 0x82) + 278) * (v2 == v1)) ^ v0))
                            - 12))();
}

uint64_t sub_1000B9EB4()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (v0 ^ (49 * v1)))
                            - ((v0 + 334) ^ ((v0 + 409675621) | 0x211400D0u) ^ 0x397F2B3DLL)))();
}

uint64_t sub_1000B9EFC@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  __int16 v3;
  uint64_t v4;

  LOWORD(STACK[0x76E]) = v3
                       + (*(_WORD *)(STACK[0x698] + 56) ^ 0x5B9C)
                       + 4612
                       + ((a1 - 9959) ^ 0x4A2F ^ (2 * *(_WORD *)(STACK[0x698] + 56)) & 0xDBFE);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (((((65 * ((a1 - 964634343) ^ 0x2E3) - 570) | 0x82) + 278) * (v2 == v1)) ^ (a1 - 964634343)))
                            - 12))();
}

uint64_t sub_1000B9F78@<X0>(int a1@<W8>)
{
  __int16 v1;
  uint64_t v2;
  unint64_t v3;

  v3 = STACK[0x698];
  LOWORD(STACK[0x76E]) = v1
                       + ((2 * *(_WORD *)(STACK[0x698] + 56)) & 0x779E ^ 0x6486)
                       + 17460
                       + ((10 * (a1 ^ 0x93) + 2850) ^ *(_WORD *)(STACK[0x698] + 56));
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((699 * (*(_QWORD *)(v3 + 136) != 0)) ^ a1)) - 4))();
}

uint64_t sub_1000B9FE0@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8
                                             * ((1431 * (*(_DWORD *)(v1 + 144) != ((a1 + 440) ^ 0x1D874451))) ^ a1))
                            - 4))();
}

uint64_t sub_1000BA018()
{
  __int16 v0;
  __int16 v1;
  int v2;
  __int16 v3;
  void *v4;

  v3 = v1 + ((2 * (v0 - 18139)) & 0x7FD4) + ((v0 - 18139) ^ 0xBD60 ^ v2) + 16409;
  LOWORD(STACK[0x76E]) = v3;
  v4 = malloc_type_malloc((unsigned __int16)(v3 - 31159), 0xEF940A81uLL);
  STACK[0x7A0] = (unint64_t)v4;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + (((v4 != 0) * (((v2 - 672757387) & 0x28197481) + 1071)) ^ v2))
                            - 12))();
}

uint64_t sub_1000BA0A8(_BYTE *a1)
{
  __int16 v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;

  v5 = (v2 + 374) | 0x91;
  *a1 = 1;
  a1[1] = (unsigned __int16)((((v5 + 432) | 0x8C) ^ 0x808B) + v1) >> 8;
  a1[2] = (v1 - ((2 * v1 + 12) & 0x7A) - 125) ^ 0x3D;
  return (*(uint64_t (**)(void))(v4 + 8 * ((518 * (LODWORD(STACK[0xA24]) != v3)) | v5)))();
}

uint64_t sub_1000BA120@<X0>(_BYTE *a1@<X0>, int a2@<W8>)
{
  uint64_t v2;
  __int16 v3;

  a1[3] = 4;
  v3 = LOWORD(STACK[0xAB4])
     - 2 * ((((((a2 - 788) ^ 0x7B0) - 649) ^ 0xED4) + LOWORD(STACK[0xAB4])) & 0x6DEE ^ STACK[0xAB4] & 4)
     - 1926;
  a1[4] = HIBYTE(v3) ^ 0x6D;
  a1[5] = v3 ^ 0xEA;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((596
                                          * ((LODWORD(STACK[0xAB4]) | ((unint64_t)(LODWORD(STACK[0xAB4]) < 0x33E27570uLL) << 32)) != 870479216)) ^ (a2 - 788)))
                            - 8))();
}

uint64_t sub_1000BA1FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  unint64_t v11;
  int v12;
  _BOOL8 v13;

  v10 = v5 < a2;
  *(_BYTE *)(v7 + v3 - 0x50CDA7F03CDBFF96) = *(_BYTE *)(v6 + v4 - 0x391FE43E0D85B0D1) ^ 0xAF;
  v11 = v8 - 0x4EA9755B7FB1D946 + (v2 ^ 0x289u);
  v12 = v10 ^ (v11 < a2);
  v13 = v11 < v5;
  if (!v12)
    v10 = v13;
  return (*(uint64_t (**)(uint64_t, _BOOL8))(v9 + 8 * ((v10 | (16 * v10)) ^ v2)))(a1, v13);
}

uint64_t sub_1000BA294()
{
  unsigned int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)((((v0 - 1065750236) & 0x3F8609EF ^ 0x196) * (v1 ^ 1)) ^ (v0 - 432)))
                            - (v0 ^ 0x6C5)))();
}

uint64_t sub_1000BA310@<X0>(uint64_t a1@<X0>, unsigned int a2@<W8>)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;

  *(_BYTE *)(a1 + (v4 + v2)) = 1;
  v6 = ((v4 - 1428037066) | ((unint64_t)((v4 - 1428037066) < 0xB21D678) << 32))
     + 0x4B8550ABEE0D9DB5;
  v7 = STACK[0x698];
  v8 = *(_DWORD *)(STACK[0x698] + 56);
  *(_BYTE *)(v6 + (v3 ^ 0x5DAu) + a1 - 0x4B8550ABF92F7AF9 + 577) = BYTE1(v8) ^ 0xB6;
  *(_BYTE *)(v6 + (v3 + 1404) + a1 - 0x4B8550ABF92F7AF9) = v8 ^ 0x63;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((1469
                                          * ((*(_DWORD *)(v7 + 56) ^ a2 ^ 0x1DE6E36CEEFFEC5BLL)
                                           - 0x1DE6E36C1EF1C31DLL
                                           + ((2 * (*(_DWORD *)(v7 + 56) ^ a2)) & 0x1DDFFD8B6) != 3490588990)) ^ v3))
                            - 8))();
}

uint64_t sub_1000BA448(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;

  v11 = a3 < v7;
  *(_BYTE *)(a4 + v8 - 0x13A9A13F3DB8447FLL) = *(_BYTE *)(v6 + v9 - 0x13F56C0F97482529) - 60;
  if (v11 == a5 - 0x7F8319AAD8EAF347 < ((v5 + 578) ^ (v7 + 1717)))
    v11 = a5 - 0x7F8319AAD8EAF347 < a3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((103 * v11) ^ v5)) - 8))();
}

uint64_t sub_1000BA4E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unsigned int a6@<W8>)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v10 + 8 * ((37 * (v7 ^ 0x6C0)) | (14 * (v9 == v8))))
                                                                                              - ((43
                                                                                                * ((37 * (v7 ^ 0x6C0)) ^ 0x1E2)
                                                                                                - 8803266) & 0x3ABED7F7 ^ 0x3A3884BFLL)))(a1, *(_DWORD *)(v6 + 56) ^ a6, a2, a3, a4, a5, 0);
}

uint64_t sub_1000BA58C@<X0>(uint64_t a1@<X0>, unsigned int a2@<W8>)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _BYTE *v8;
  unint64_t v9;

  *(_BYTE *)(a1 + (v3 + v2)) = 2;
  v6 = STACK[0x698];
  v7 = *(_DWORD *)(STACK[0x698] + 56);
  v8 = (_BYTE *)(((v3 - 121380428 + (v4 ^ 0x3A38827A)) | ((unint64_t)(v3
                                                                                         - 121380428
                                                                                         + (v4 ^ 0x3A38827A) < 0x5903DCC3) << 32))
               + a1
               - 1493425347);
  *v8 = (v4 + 58) ^ BYTE1(v7) ^ 0x47;
  v8[1] = v7 ^ 0x63;
  v9 = (*(_DWORD *)(v6 + 56) ^ a2 ^ 0xDCBEFBB365FDFFDFLL)
     + ((2 * (*(_DWORD *)(v6 + 56) ^ a2)) & 0xCBFBFFBE)
     + 0x2341044CD43A84D8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (int)((121 * (((v9 - v4) | (v4 - v9)) >> 63)) ^ (v4 - 976781871)))
                            - 4))();
}

uint64_t sub_1000BA6D4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;

  v10 = a2 < v4;
  *(_BYTE *)(a3 + v6 - 0x77A07387ACA3CC6) = *(_BYTE *)(v8 + v7 - 0x1DB2B44047C06B2FLL) - 60;
  if (v10 == a4 - 0x7ABCD7CAEFC29FB8 < v4)
    v10 = a4 - 0x7ABCD7CAEFC29FB8 < a2;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9 + 8 * ((453 * !v10) ^ v5)) - 4))(a1);
}

uint64_t sub_1000BA784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v8 + 8 * ((370 * (*(_QWORD *)(v6 + 136) != 0)) ^ (v7 - 1515)))
                                                                                               - 4))(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_1000BA7E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v9 + 8 * (int)((((((*(_DWORD *)(v7 + 144) - (v8 - 1707)) | (v8 - 1707 - *(_DWORD *)(v7 + 144))) >> (((v8 + 85 + a7) ^ 0xA3) - 98)) & 1) * (((v8 - 1707 + a7) | 0x80) + 1386)) | (v8 - 1707) ^ 0x1D874639))
                                                                                               - 4))(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_1000BA840@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v2;
  int v3;
  char v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  __int16 v9;
  _BYTE *v10;

  v8 = (((v6 + v3) << (v4 ^ 0x80)) & 0xFB5EBEFE) + ((v6 + v3) ^ 0x7DAF5F7F);
  *(_BYTE *)(a1 + v8 - 2108645376 + a2 - 33) = 5;
  v9 = *(_WORD *)(v2 + 144) - ((2 * *(_WORD *)(v2 + 144) + 29258) & 0x654C) + 27595;
  v10 = (_BYTE *)(((v8 - 1795885240) | ((unint64_t)(v8 - 1795885240 < 0x12A456C6) << 32)) + a1 - 312760006);
  *v10 = HIBYTE(v9) ^ 0xB2;
  v10[1] = v9 ^ 0xA6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * (a2 ^ (((*(unsigned int *)(v2 + 144) | ((unint64_t)(*(_DWORD *)(v2 + 144) < v5) << 32)) == 495404763) << 6)))
                            - 4))();
}

uint64_t sub_1000BA988@<X0>(int a1@<W8>)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;

  *(_BYTE *)(v3 + v7 + v4 - 0x65ED23AE14A34B90) = *(_BYTE *)(v6 + v1 - 0x1F43A200490039DALL) - 108;
  v10 = v5 < v2;
  if (v10 == v8 - 0x2C4122141F957E10 < v2)
    v10 = v8 - 0x2C4122141F957E10 < v5;
  return ((uint64_t (*)(BOOL))(*(_QWORD *)(v9 + 8 * (a1 ^ (!v10 << 6))) - 4))(v8 - 0x2C4122141F957E10 < v5);
}

void sub_1000BAA20()
{
  int v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  free(v1);
  free((void *)STACK[0x690]);
  sub_1000B6114(v2, v3, v4, v5, v6, v7, v0);
}

uint64_t sub_1000BAA94()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x7C8];
  ++STACK[0x688];
  return ((uint64_t (*)(unint64_t))((char *)*(&off_100260750 + ((30 * (v0 == 145)) | v0))
                                                   - 4))(v1);
}

void sub_1000BAB08()
{
  JUMPOUT(0x1000BAAC0);
}

void sub_1000BAB24(void *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (v1 ^ 0xFFFFFFF5 | ((~v1 & 0xF0u) >> 4)) + 16;
  v4 = (v2 + 45) ^ ((v3 & 0xFC) >> 2) ^ 0xFFFFFFC9 | v3 ^ 0x10;
  v5 = -42022 * (v4 & 1 | (((v4 + 2) & 2) == 0));
  free(a1);
  sub_1000B6114(v6, v7, v8, v9, v10, v11, v5);
}

uint64_t sub_1000BAB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unsigned int v8;
  uint64_t v9;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v9
                                                                      + 8
                                                                      * ((88 * (v8 >= ((a8 - 1550) | 0x168u) - 492)) ^ a8)))(a1, a2, a3, 0);
}

uint64_t sub_1000BABA8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;
  int8x16_t v20;
  int8x16x4_t v22;
  int8x16x4_t v23;

  v16 = (a8 - 1698) | 0x185;
  v22.val[1].i64[0] = ((_BYTE)a2 + 7) & 0xF;
  v22.val[1].i64[1] = ((_BYTE)a2 + 8) & 0xF;
  v22.val[2].i64[0] = ((_BYTE)a2 + 9) & 0xF;
  v22.val[2].i64[1] = ((_BYTE)a2 + 10) & 0xF;
  v22.val[3].i64[0] = ((_BYTE)a2 + 11) & 0xF;
  v22.val[3].i64[1] = ((_BYTE)a2 + 12) & 0xF;
  v23.val[0].i64[0] = ((_BYTE)a2 + 13) & 0xF;
  v23.val[0].i64[1] = ((_BYTE)a2 + 14) & 0xF;
  v23.val[1].i64[0] = ((_BYTE)a2 - 1) & 0xF;
  v23.val[1].i64[1] = a2 & 0xF;
  v23.val[2].i64[0] = (a2 + 1) & 0xF;
  v23.val[2].i64[1] = (a2 + 2) & 0xF;
  v23.val[3].i64[0] = ((_BYTE)a2 + 3) & 0xF;
  v23.val[3].i64[1] = ((_BYTE)a2 + 4) & 0xF;
  v17.i64[0] = 0x1919191919191919;
  v17.i64[1] = 0x1919191919191919;
  v18.i64[0] = 0xB1B1B1B1B1B1B1B1;
  v18.i64[1] = 0xB1B1B1B1B1B1B1B1;
  v19 = a2 + ((v16 + 2060805706) & 0x852A9F75 ^ (v9 + 1723));
  v22.val[0].i64[0] = ((_BYTE)a2 + ((((a8 + 94) | 0x85) + 74) & 0x75 ^ (v9 - 69))) & 0xF;
  v22.val[0].i64[1] = ((_BYTE)a2 + 6) & 0xF;
  v20.i64[0] = vqtbl4q_s8(v22, (int8x16_t)xmmword_100204890).u64[0];
  v20.i64[1] = vqtbl4q_s8(v23, (int8x16_t)xmmword_100204890).u64[0];
  *(int8x16_t *)(v14 + (v8 + v10)) = veorq_s8(veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v11 + v19), *(int8x16_t *)(v13 + (v19 & 0xF))), veorq_s8(*(int8x16_t *)((v19 & 0xF) + a1 + 3), *(int8x16_t *)((v19 & 0xF) + a3 + 2))), v18), vmulq_s8(v20, v17));
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * ((645 * ((v12 & 0xFFFFFFF0) == 16)) ^ v16)) - 8))();
}

void sub_1000BAD20()
{
  JUMPOUT(0x1000BACACLL);
}

uint64_t sub_1000BAD30(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * (int)((((((a6 + 420137058) ^ 0x190AC9E8) + 111) ^ (a6 + 420137058) & 0xE6F536FA)
                                               * (v6 == a4)) ^ a6))
                            - 4))();
}

uint64_t sub_1000BAD74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  char v9;
  uint64_t v10;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v10
                                                                                               + 8
                                                                                               * ((22
                                                                                                 * ((v9 & 8) == ((a8 - 1206) | 0x10) - 508)) ^ a8)))(a1, a2, a3, a4, (a4 + v8), (a4 + a2), (a8 - 146));
}

uint64_t sub_1000BADAC(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int8x16x4_t v15;

  v12 = (v10 - 436) | 0x196;
  v13 = (v12 ^ 0xFFFFFE26) & v8;
  LODWORD(STACK[0x688]) = v13;
  v15.val[0].i64[0] = ((_BYTE)a2 + (_BYTE)v5 + (_BYTE)a4) & 0xF;
  v15.val[0].i64[1] = ((_BYTE)a2 + (_BYTE)a4 + 6) & 0xF;
  v15.val[1].i64[0] = ((_BYTE)a2 + (_BYTE)a4 + 7) & 0xF;
  v15.val[1].i64[1] = ((_BYTE)a2 + (_BYTE)a4 + ((((v10 + 76) | 0x96) + 5) & 0xBD ^ 0xF9)) & 0xF;
  v15.val[2].i64[0] = ((_BYTE)a2 + (_BYTE)a4 + 9) & 0xF;
  v15.val[2].i64[1] = ((_BYTE)a2 + (_BYTE)a4 + 10) & 0xF;
  v15.val[3].i64[0] = ((_BYTE)a2 + (_BYTE)a4 + 11) & 0xF;
  v15.val[3].i64[1] = ((_BYTE)a2 + (_BYTE)a4 + 12) & 0xF;
  *(int8x8_t *)(v11 + (v4 + v6 + a4)) = veor_s8(veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v7 + (a2 + v5 + a4)), *(int8x8_t *)(v9 + v15.val[0].i64[0])), veor_s8(*(int8x8_t *)(v15.val[0].i64[0] + a1 + 3), *(int8x8_t *)(v15.val[0].i64[0] + a3 + 2))), (int8x8_t)0xB1B1B1B1B1B1B1B1), vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v15, (int8x16_t)xmmword_1002048A0), (int8x8_t)0x1919191919191919));
  return ((uint64_t (*)(__n128))((char *)*(&off_100260750
                                                   + (((2 * (v13 - 8 != a4)) | (32 * (v13 - 8 != a4))) ^ v12))
                                         - 4))((__n128)xmmword_1002048A0);
}

void sub_1000BAEDC()
{
  JUMPOUT(0x1000BAE04);
}

uint64_t sub_1000BAEE4()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((((97 * (v0 ^ 0x2B1)) ^ (v0 - 548)) * (v1 == LODWORD(STACK[0x688]))) ^ v0))
                            - 12))();
}

uint64_t sub_1000BAF30@<X0>(int a1@<W8>)
{
  _DWORD *v1;
  int v2;
  uint64_t v3;

  *v1 = v1[623];
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((11
                                * ((((a1 ^ 0x45) - 113) ^ (((v2 - 1 - (a1 ^ 0x7B451845)) | ((a1 ^ 0x7B451845) - (v2 - 1))) < 0)) & 1)) | ((a1 ^ 0x7B451845) - 2068125674))))();
}

uint64_t sub_1000BAF8C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v5 = 4 * (v2 - 2053560048);
  v6 = *(_DWORD *)(v1 + 4 * (v2 - 2053560049));
  v7 = (*(_DWORD *)(v1 + v5) ^ 0x4EA00 ^ (1566083941 * (v6 ^ 0xBB91B304 ^ ((v6 >> 30) | 0xECF0ED38))
                                        - ((-1162799414 * (v6 ^ 0xBB91B304 ^ ((v6 >> 30) | 0xECF0ED38))) & 0xAECB687A)
                                        + 1466283069))
     - v2;
  *(_DWORD *)(v1 + v5) = v7 - ((2 * v7 - 187847200) & 0xAEC2BC7A) - 775408339;
  v8 = 1606104089 * ((v4 - 192) ^ 0xC2BEFB347517423ELL);
  *(_DWORD *)(v4 - 164) = -1231242123 - v8 + a1;
  *(_DWORD *)(v4 - 172) = ((a1 - 1340772326) ^ 0x5D) + v8;
  *(_DWORD *)(v4 - 168) = (a1 - 1340772326) ^ v8;
  *(_DWORD *)(v4 - 180) = v8;
  *(_DWORD *)(v4 - 176) = (a1 - 1340772322) ^ v8;
  *(_QWORD *)(v4 - 192) = (v2 - 1805776513) + v8;
  *(_QWORD *)(v4 - 160) = 247783534 - v8;
  v9 = sub_10013D5F4(v4 - 192);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * *(int *)(v4 - 184)) - 4))(v9);
}

uint64_t sub_1000BB0EC()
{
  unsigned int v0;
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((v0 < ((LODWORD(STACK[0x690]) - 850) ^ 0xEC4E315u))
                                * ((LODWORD(STACK[0x690]) + 2068124785) ^ 0x7B451D18)) ^ (LODWORD(STACK[0x690]) - 850))))();
}

uint64_t sub_1000BB138()
{
  unsigned int v0;
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((v0 > (LODWORD(STACK[0x690]) ^ 0xEC4E410u))
                                * (((LODWORD(STACK[0x690]) + 1782909257) | 0x11000B28) ^ 0x7B451D18)) ^ (LODWORD(STACK[0x690]) - 850))))();
}

uint64_t sub_1000BB198@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;
  int8x16_t v3;
  uint64_t v4;
  int8x16_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int32x4_t v13;
  int8x16_t v14;

  v2 = ((a1 ^ 0x692) + 942) | 0x2C0;
  *(_DWORD *)&aHAwAwAwAwAwAwA[4] = -681484739;
  free((void *)STACK[0x678]);
  v3 = (int8x16_t)vld1q_dup_f32((const float *)&aHAwAwAwAwAwAwA[4]);
  v4 = (v2 - 968);
  v5.i64[0] = 0x8000000080000000;
  v5.i64[1] = 0x8000000080000000;
  v6 = vdupq_n_s32(0xCD31BD79);
  v7.i64[0] = -1;
  v7.i64[1] = -1;
  v8.i32[0] = *(_DWORD *)&aHAwAwAwAwAwAwA[8];
  v8.i32[1] = *(_DWORD *)&aHAwAwAwAwAwAwA[4 * v4 - 3080];
  v8.i32[2] = *(_DWORD *)&aHAwAwAwAwAwAwA[16];
  v9 = vextq_s8(v3, v8, 0xCuLL);
  v10 = v8;
  v10.i32[3] = *(_DWORD *)&aHAwAwAwAwAwAwA[20];
  v11 = (int8x16_t)vaddq_s32((int32x4_t)veorq_s8(vandq_s8(v9, v5), (int8x16_t)vdupq_n_s32(0xBFDDEF53)), vdupq_n_s32(0xEBFFFDFE));
  v12 = veorq_s8(vandq_s8(v10, (int8x16_t)vdupq_n_s32(0x7FFFFFFEu)), (int8x16_t)vdupq_n_s32(0x592192A4u));
  v13 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32((int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vorrq_s8(v12, (int8x16_t)vdupq_n_s32(0x32CE4286u)), (int32x4_t)vorrq_s8(v12, (int8x16_t)v6)), v6), (int8x16_t)vdupq_n_s32(0x548F2AFu)), v7), (int8x16_t)vdupq_n_s32(0x39C67CB0u));
  v14.i32[0] = *((_DWORD *)&STACK[0x15C8] + ((aHAwAwAwAwAwAwA[8] & 1) == 0));
  v14.i32[1] = *((_DWORD *)&STACK[0x15C8] + ((*(_DWORD *)&aHAwAwAwAwAwAwA[4 * v4 - 3080] & 1) == 0));
  v14.i32[2] = *((_DWORD *)&STACK[0x15C8] + (~*(_DWORD *)&aHAwAwAwAwAwAwA[16] & 1));
  v14.i32[3] = *((_DWORD *)&STACK[0x15C8] + ((aHAwAwAwAwAwAwA[20] & 1) == 0));
  *(int8x16_t *)&aHAwAwAwAwAwAwA[4] = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)&aHAwAwAwAwAwAwA[1592], v14), (int8x16_t)vdupq_n_s32(0xDC79EF4u)), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsubq_s32((int32x4_t)vorrq_s8((int8x16_t)v13, veorq_s8(v11, (int8x16_t)vdupq_n_s32(0xABDDED51))), (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v13, v13), (int8x16_t)vdupq_n_s32(0x4C305472u))), vdupq_n_s32(0xA6182A39)), 1uLL));
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((v2 - 867) ^ 0x727)) - 12))();
}

uint64_t sub_1000BB204(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  unint64_t v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;

  v9 = LODWORD(STACK[0x37C]) ^ LODWORD(STACK[0x214]);
  v10 = (((v7 + 902781206) >> 8) ^ 0xDE9EF66F) + v7 + (((v7 + 902781206) >> 7) & 0x13DECDE);
  v11 = v10 + (((v10 + 1462788775) >> 5) ^ 0x4800908C) - (((v10 + 1462788775) >> 4) & 0xFFEDEE6) + 1;
  v12 = v11 - ((2 * v11 + 509584436) & 0xBC548298) + 1834619750;
  v13 = ((2 * ((v12 ^ 0x5E2A414C) - 1879573490)) & 0xDFBFF776) + (((v12 ^ 0x5E2A414C) - 1879573490) ^ 0x6FDFFBBB);
  v14 = (((v13 - 1876949947) >> 10) ^ 0x827DFADE) + v13 + (((v13 - 1876949947) >> 9) & 0x7BF5BC);
  v15 = ((v14 + 228723047) & 0xDB3EFDFE) + v14 + (((v14 + 228723047) >> 1) ^ 0x6D9F7EFF);
  v16 = v15 - ((2 * v15 + 1074074832) & 0xBCCB2E6C) - 26730082;
  v17 = ((2 * ((v16 ^ 0x5E659736) + 1287124013)) & 0xFB7B21E6) + (((v16 ^ 0x5E659736) + 1287124013) ^ 0x7DBD90F3);
  v18 = v17 + (((v17 - 2109575411) >> 13) ^ 0x1A004600) - ((2 * ((v17 - 2109575411) >> 13)) & 0xF73FE);
  v19 = v18 + (((v18 + 1749166349) >> 6) ^ 0xB10CA840) - (((v18 + 1749166349) >> 5) & 0x5E6AF7E) + 2;
  v20 = v19 - ((2 * v19 + 1852506518) & 0x8F4EB030) + 2128402659;
  v21 = ((2 * ((v20 ^ 0xC7A75818) - 1282870125)) & 0xFFBBDCFE) + (((v20 ^ 0xC7A75818) - 1282870125) ^ 0xFFDDEE7F);
  v22 = (((v21 + 2232705) >> 8) ^ 0x99F7B7BF) + v21 + (((v21 + 2232705) >> 7) & 0x1EF6F7E);
  v23 = (((v22 + 1714051522) >> 2) ^ 0xFFCFF8C9) + v22 + (((v22 + 1714051522) >> 1) & 0x7F9FF192);
  v24 = v23 - ((2 * v23 - 860569102) & 0xA7354E0E) + 972359680;
  v25 = ((2 * ((v24 ^ 0xD39AA707) + 707258702)) & 0xBEF8ED38) + (((v24 ^ 0xD39AA707) + 707258702) ^ 0xDF7C769C);
  v26 = (((v25 + 545491300) >> 13) ^ 0xE712DFFD) + v25 + (((v25 + 545491300) >> 12) & 0x5BFFA);
  v27 = (((v26 + 963684711) >> 3) ^ 0x7F907FEC) + v26 + (((v26 + 963684711) >> 2) & 0x3F20FFD8);
  v28 = v27 - ((2 * v27 + 62935798) & 0xD9AE4DC) - 1062364183;
  v29 = (v28 ^ 0x8D4224E4) + ((v28 >> 11) ^ 0xC010AD66) + ((v28 >> 10) & 0x3DF5BA ^ 0xFFDEAF77) + 1073674975;
  v30 = (((((2 * v29) & 0xBFFFFFBC) + (v29 ^ 0x5FFFFFDE) - 1610612702) >> 5) ^ 0xD7637DC9)
      + ((2 * v29) & 0xBFFFFFBC)
      + (v29 ^ 0x5FFFFFDE)
      + (((((2 * v29) & 0xBFFFFFBC) + (v29 ^ 0x5FFFFFDE) - 1610612702) >> 4) & 0xEC6FB92);
  v31 = v30 - ((2 * v30 - 1858534222) & 0xA2EB2CB2) - 1710090062;
  v32 = (v31 ^ 0xE52942A1) + ((v31 >> 12) ^ 0xE19CD216) + ((v31 >> 11) & 0x1AFEFA ^ 0xFFE75BD7) + 510492543;
  v33 = (((((2 * v32) & 0xBDFFF4FE) + (v32 ^ 0x5EFFFA7F) - 1593834111) >> 7) ^ 0x7FD57BFD)
      + ((2 * v32) & 0xBDFFF4FE)
      + (v32 ^ 0x5EFFFA7F)
      + (((((2 * v32) & 0xBDFFF4FE) + (v32 ^ 0x5EFFFA7F) - 1593834111) >> 6) & 0x3AAF7FA);
  v34 = v33 - ((2 * v33 + 1112871688) & 0xF548E5BA) + 466549857;
  v35 = ((2 * ((v34 ^ 0xFAA472DD) - 2045107421)) & 0xFDFDEDE6) + (((v34 ^ 0xFAA472DD) - 2045107421) ^ 0x7EFEF6F3);
  v36 = (((v35 - 2130638579) >> 11) ^ 0x7B6E3597) + v35 + ((2 * ((v35 - 2130638579) >> 11)) & 0x1C6B2E);
  v37 = v36 + (((v36 + 93508470) >> 8) ^ 0xA2080080) - (((v36 + 93508470) >> 7) & 0x1EFFEFE) + 1;
  v38 = v37 - ((2 * v37 + 1192601066) & 0x6104C42A) - 1811073782;
  v39 = v6 & ((v24 ^ v12 ^ v34) >> 1) ^ 0x7D8A5432;
  v40 = v39 - ((2 * v39) & 0xEE002070) + 1996757240;
  v41 = v6 & ((v28 ^ v16 ^ v38) >> 1) ^ 0xE329A11A;
  v42 = (((2 * v41) | 0x9E2468CC) - v41 - 1326593126) ^ 0x9A28A453;
  v43 = (v38 ^ 0xA12EC46) + ((v38 >> 8) ^ 0x80D14BC) + ((v38 >> 7) & 0x1F1F35E ^ 0xFFEFDEA7) - 134678095;
  v44 = (((((2 * v43) & 0xFEFEDFFE) + (v43 ^ 0xFF7F6FFF) + 8425473) >> 8) ^ 0x396FFE6F)
      + ((2 * v43) & 0xFEFEDFFE)
      + (v43 ^ 0xFF7F6FFF)
      + (((((2 * v43) & 0xFEFEDFFE) + (v43 ^ 0xFF7F6FFF) + 8425473) >> 7) & 0xDFFCDE);
  v45 = v44 - ((2 * v44 + 2171684) & 0x31F30A) + 1193904919;
  v46 = ((((v31 ^ v20 ^ v45) >> 1) & v6 ^ 0x2BA1A008)
       + (((v31 ^ v20 ^ v45) >> 1) & 0x57D88010 ^ 0x54581990)
       - ((((v31 ^ v20 ^ v45) >> 1) & v6 ^ 0x2BA1A008) & 0x57D88010)) ^ 0x77982992;
  v47 = (v46 | 0xAFEBF002) - (v46 | 0x50140FFD) + 1343492093;
  v48 = LODWORD(STACK[0x264]) ^ LODWORD(STACK[0x580]) ^ LODWORD(STACK[0x4A0]) ^ 0xA2C14FC7 ^ ((((LODWORD(STACK[0x580]) ^ LODWORD(STACK[0x4A0])) >> 1) & v6 ^ 0x42CB442C)
                                                                                            + (((LODWORD(STACK[0x580]) ^ LODWORD(STACK[0x4A0])) >> 1) & 0x60F9A41A ^ 0xA030A8D2)
                                                                                            - ((((LODWORD(STACK[0x580]) ^ LODWORD(STACK[0x4A0])) >> 1) & v6 ^ 0x42CB442C) & 0x60F9A41A));
  v49 = (v48 & 0xFF188309 ^ 0x3E080209) - ((2 * (v48 & 0xFF188309 ^ 0x3E080209)) & 0x84010400) - 1033770396;
  v50 = ((v48 & 0x450866 ^ 0x4511084B | v48 & 0xA27490) - 1) ^ 0x45523C7A;
  HIDWORD(v51) = LODWORD(STACK[0x608]) ^ 0x2D40;
  LODWORD(v51) = LODWORD(STACK[0x608]) ^ 0x2F2F4000;
  v52 = v12 ^ ((v49 & 0xFF3F8F09 ^ 0x84318900 | v50)
             - 2 * ((v49 & 0xFF3F8F09 ^ 0x84318900 | v50) & 0x3A1DB91F ^ v50 & 0x1C)
             + 975026443) ^ a6 ^ v24 ^ v34 ^ v40;
  v53 = (v51 >> 14) - ((2 * (v51 >> 14)) & 0xB3531918) + 1504283788;
  HIDWORD(v51) = v52 ^ 0x11C6;
  LODWORD(v51) = v52 ^ 0x370B8000;
  v54 = ((v51 >> 14) - ((2 * (v51 >> 14)) & 0xB2A46A72) - 648923847) ^ v53;
  v55 = (((2 * (v6 & (LODWORD(STACK[0x580]) >> 1) ^ 0x45986006)) | 0x375C63A)
       - (v6 & (LODWORD(STACK[0x580]) >> 1) ^ 0x45986006)
       + 2118458595) ^ 0x33B8AB0F;
  LODWORD(STACK[0x608]) = v55 - ((2 * v55) & 0x67CC1F4C) + 870715303;
  HIDWORD(v51) = v54 ^ 0x1FCC6;
  LODWORD(v51) = v54 ^ 0x1D800000;
  v56 = v51 >> 18;
  LODWORD(STACK[0x5D0]) = (2 * v56) & 0x81EB06F0;
  LODWORD(STACK[0x5A0]) = v56 + 1089831800;
  v57 = LODWORD(STACK[0x5B0]) ^ LODWORD(STACK[0x428]) ^ LODWORD(STACK[0x5C0]);
  v58 = ((v6 & (LODWORD(STACK[0x428]) >> 1) ^ 0x1DAB642A)
       - ((2 * (v6 & (LODWORD(STACK[0x428]) >> 1) ^ 0x1DAB642A)) & 0xA9738050)
       - 726019863) ^ 0xFC8DDAE1;
  v59 = STACK[0x640];
  v60 = ((LODWORD(STACK[0x540]) ^ LODWORD(STACK[0x590])) ^ LODWORD(STACK[0x640])) >> 1;
  v61 = ((v60 & v6 ^ 0x65E0A030) + (v60 & 0x15A8008 ^ 0x801E1B88) - ((v60 & v6 ^ 0x65E0A030) & 0x15A8008)) ^ 0x8D5F9B80;
  v62 = (((2 * (v6 & (LODWORD(STACK[0x590]) >> 1) ^ 0x34A10000)) | 0xB397B022)
       - (v6 & (LODWORD(STACK[0x590]) >> 1) ^ 0x34A10000)
       + 640952303) ^ 0xFBFA0891;
  LODWORD(STACK[0x380]) ^= LODWORD(STACK[0x428]) ^ LODWORD(STACK[0x3B0]) ^ LODWORD(STACK[0x5B0]) ^ LODWORD(STACK[0x5F0]) ^ LODWORD(STACK[0x210]) ^ v57 ^ (((v57 >> 1) & 0x5AD2E022 ^ 0x5A56B3A3 | (v57 >> 1) & 0x2529041C) - 1) ^ LODWORD(STACK[0x268]) ^ (v58 - ((2 * v58) & 0xE53D4430) - 224484840) ^ v8 ^ v16 ^ v28 ^ v38 ^ ((v42 | 0xEFA03C10) - (v42 | 0x105FC3EF) + 274711535);
  v63 = (((2 * v62) & 0x969EF3D8) - v62 + 883983890) ^ LODWORD(STACK[0x3B4]) ^ v59 ^ (v61
                                                                                    - ((2 * v61) & 0xE2AAC9EC)
                                                                                    + 1901422071) ^ a3 ^ v20 ^ v31 ^ v45 ^ v47;
  LODWORD(STACK[0x264]) = v63;
  LODWORD(STACK[0x37C]) = v63 ^ 0x4A1A9754;
  v64 = LODWORD(STACK[0x498]) ^ 0xD;
  LODWORD(STACK[0x3B8]) = LODWORD(STACK[0x3D8]) ^ 0x1673F742;
  LODWORD(STACK[0x3B4]) = LODWORD(STACK[0x350]) ^ 0xE963221A;
  LODWORD(STACK[0x3B0]) = LODWORD(STACK[0x408]) ^ 0x5A7F88F8;
  v65 = STACK[0xB88];
  v66 = (LODWORD(STACK[0x680]) + 11632030) | 0x7C005284;
  LODWORD(STACK[0x640]) = v66;
  v67 = (((v66 - 728609101) ^ 0x51442178) - ((2 * ((v66 - 728609101) ^ 0x51442178)) & 0xFC1E613C) + 2114924702) ^ 0x284D2E0C;
  LOBYTE(v66) = ((v67 ^ 0xFFFFFF92) << v64) - ((2 * ((v67 ^ 0xFFFFFF92) << v64)) & 0xB4);
  v68 = ((((v67 ^ 0x92) & LOBYTE(STACK[0x3B8]))
                         - ((2 * ((v67 ^ 0x92) & LOBYTE(STACK[0x3B8]))) & 0x66)
                         + 51) ^ 0x33) >> STACK[0x668];
  v69 = 2 * ((STACK[0x3C4] & 0x48FF756B) - ((2 * (STACK[0x3C4] & 0x48FF756B)) & 0x3F4B794C));
  v70 = (((v69 - 1085572788) ^ 0xBF4B794C)
       + 1031620332
       - 2 * (((v69 - 1085572788) ^ 0xBF4B794C) & 0x3D7D46EE ^ ((_BYTE)v69 + 96) & 2)) ^ 0x75823387;
  v71 = (v70 & STACK[0x3B4]) + 1845085777 - ((2 * (v70 & STACK[0x3B4])) & 0xDBF38CA2);
  v72 = (((v70 & STACK[0x3B0]) + 1470285986 - ((2 * (v70 & STACK[0x3B0])) & 0xAF459144)) ^ 0x57A2C8A2) >> STACK[0x3C8];
  v73 = 4
      * ((LODWORD(STACK[0x670]) ^ (v66 - 38)) ^ 0xF4u ^ (v68 - ((2 * v68) & 0x8C) + 70));
  *(_DWORD *)(STACK[0xB78] + v73) = v9 ^ (((v71 ^ 0x6DF9C651) << LODWORD(STACK[0x3BC]))
                                        - 1799203340
                                        - ((2 * ((v71 ^ 0x6DF9C651) << LODWORD(STACK[0x3BC]))) & 0x2984ABE8)) ^ (v72 - ((2 * v72) & 0x98031038) + 1275168796) ^ 0xC8827751;
  *(_DWORD *)(v65 + v73) = v9 ^ 0xDC01E2E0 ^ ((unsigned __int16)(word_10023E438[0] - 17707)
                                            - ((2 * (word_10023E438[0] - 17707)) & 0xE518)
                                            + 156594828);
  return ((uint64_t (*)(void))*(&off_100260750 + SLODWORD(STACK[0x680])))();
}

#error "1000BC0D4: too big function (funcsize=0)"

void sub_1000D0D04()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  BOOL v5;
  int v6;
  int v7;
  int v8;

  v0 = STACK[0x260];
  LODWORD(STACK[0x36C]) = LODWORD(STACK[0x688]) - 526657;
  LODWORD(STACK[0x3E0]) = LODWORD(STACK[0x3D4]) - 805306432;
  LODWORD(STACK[0x368]) = LODWORD(STACK[0x254]) ^ 0x5BB61277;
  LODWORD(STACK[0x680]) = v0 + 30;
  LODWORD(STACK[0x360]) = LODWORD(STACK[0x25C]) ^ (v0 + 30) ^ 0xDAFBA0;
  LODWORD(STACK[0x35C]) = LODWORD(STACK[0x258]) ^ 0x4E3DC60B;
  LODWORD(STACK[0x364]) = LODWORD(STACK[0x250]) ^ 0x3A769662;
  v1 = STACK[0x26C];
  v2 = STACK[0x3DC];
  if ((STACK[0x24C] & 1) != 0)
    v3 = STACK[0x3DC];
  else
    v3 = STACK[0x26C];
  if ((STACK[0x24C] & 1) != 0)
    v4 = STACK[0x264];
  else
    v4 = STACK[0x268];
  if ((STACK[0x24C] & 1) != 0)
    v2 = STACK[0x268];
  else
    v1 = STACK[0x264];
  v5 = (STACK[0x3D8] & 2) == 0;
  if ((STACK[0x3D8] & 2) != 0)
    v6 = v3;
  else
    v6 = v4;
  LODWORD(STACK[0x26C]) = v6;
  if (!v5)
    v3 = v4;
  LODWORD(STACK[0x268]) = v3;
  if (v5)
    v7 = v2;
  else
    v7 = v1;
  LODWORD(STACK[0x264]) = v7;
  if (v5)
    v8 = v1;
  else
    v8 = v2;
  LODWORD(STACK[0x3DC]) = v8;
  JUMPOUT(0x1000C4D78);
}

uint64_t sub_1000D0DE0()
{
  free((void *)STACK[0xB88]);
  free((void *)STACK[0xB78]);
  return sub_10012FB18();
}

uint64_t sub_1000D0E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v3 + v1 - 0xA798352C87C9315) = (*(_BYTE *)(v0 + v2 - 0xD99DA20C2B2A323) ^ 0xFC)
                                            + ((*(unsigned __int8 *)(v0 + v2 - 0xD99DA20C2B2A323) << (((v5 + 67) ^ 0x15) & 0x77)) & 0xF8)
                                            + 44;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((1194 * (v6 + 1 != v4 + 16)) ^ v5)) - 12))();
}

uint64_t sub_1000D0EBC(int a1)
{
  int v1;
  int v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;

  LODWORD(STACK[0x72C]) = v2 + 64;
  v5 = (_BYTE *)STACK[0x950];
  *v5 = v3[16];
  v5[1] = v3[17];
  v5[2] = v3[18];
  v5[3] = v3[19];
  v5[4] = v3[20];
  v5[5] = v3[21];
  v5[6] = v3[22];
  v5[7] = v3[23];
  v5[8] = v3[24];
  v5[9] = v3[25];
  v5[10] = v3[26];
  v5[11] = v3[27];
  v5[12] = v3[28];
  v5[13] = v3[29];
  v5[14] = v3[30];
  v5[15] = v3[31];
  LODWORD(STACK[0x82C]) = v1 + 16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((972
                                          * (((STACK[0x7B8] == 0) ^ (((((a1 | 0x88) - 15) | 0x40) ^ 0x19)
                                                                                    + 1)) & 1)) ^ (((a1 | 0x88) - 15) | 0x640) ^ 0x73A))
                            - 12))();
}

uint64_t sub_1000D0EC8@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, unsigned int a5@<W4>, int a6@<W5>, int a7@<W8>)
{
  uint64_t v7;
  char v8;
  char v9;
  int v10;
  char v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unint64_t v21;

  v19 = (v8 - (v9 & v11));
  v20 = *(_DWORD *)(v13 + 4 * (v17 ^ v16 ^ v18 ^ v12 ^ v19));
  HIDWORD(v21) = v20 ^ a7;
  LODWORD(v21) = v20 ^ a1;
  *(_DWORD *)(v7 + 4 * (v19 ^ a5)) = a4 ^ ((v21 >> 20) - (a2 & (2 * (v21 >> 20))) + a3);
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * (((v10 == 0) * a6) ^ v14)) - 8))();
}

uint64_t sub_1000D0F28@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, unsigned int a5@<W4>, int a6@<W5>, int a7@<W8>)
{
  return sub_1000D0EC8(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1000D0F38()
{
  unsigned int v0;
  void *v1;

  v1 = malloc(0x404uLL);
  STACK[0xB20] = (unint64_t)v1;
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((23 * (((v1 == 0) ^ (v0 + 94 + v0 - 59)) & 1)) ^ v0))
                            - 12))();
}

uint64_t sub_1000D0F80(uint64_t a1)
{
  int v1;
  char v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  char v12;
  unsigned int v13;
  char v14;
  int v15;
  int v16;

  v4 = v1 | 0x204;
  v5 = ((LODWORD(STACK[0x550]) ^ LODWORD(STACK[0x620]) ^ 0x548D5268)
      - ((2 * (LODWORD(STACK[0x550]) ^ LODWORD(STACK[0x620]) ^ 0x548D5268) + 363524808) & 0xC1FC930E)
      + 1809040107) ^ 0x548D5268;
  v6 = ((v5 - ((2 * v5 + 363524808) & 0xC1FC930E) + 1809040107) ^ 0x60FE4987) + LODWORD(STACK[0x5B0]);
  v7 = (v6 ^ 0xFB5FAEBB) + 77615429 + ((2 * v6) & 0xF6BF5D76);
  v8 = (v7 & 0xFFFFFFFE) - ((2 * v7) & 0xF6B1BE4C) - 78061786;
  v9 = v2 & 8 ^ 0xFF3F967D;
  v10 = v9 + 12609931;
  v11 = -22 - v9;
  v13 = ((-448883050 * (v8 ^ 0x5ED1B3F1)) & 0x77F77AF6) + ((1923042123 * (v8 ^ 0x5ED1B3F1)) ^ 0xBBFBBD7B);
  if (((v13 + ((v4 + 34) ^ 0xFFFFFFFD)) & v10) - 1361342896 - 2 * ((v13 + ((v4 + 34) ^ 0xFFFFFFFD)) & v10) == -1361342896)
    v14 = v2 & 8 ^ 0x7D;
  else
    v14 = v11;
  v12 = ((v2 & 0xF7 ^ 0x4F) + 72 + ((2 * (v2 & 0xF7)) | 0x72)) ^ 0x2C;
  v15 = (((v12 | 0xD7) - (v12 | 0x28) + 40) ^ LOBYTE(STACK[0x4A0]) ^ LOBYTE(STACK[0x498]) ^ (v14 + v13 - ((2 * (v14 + v13) + 32) & 0xFC) - 114));
  v16 = ((2 * (v15 ^ 0x18A94BA)) & 0x20129DA) - (v15 ^ 0x18A94BA) - 760607982;
  LOWORD(v15) = ((2 * (v15 ^ 0xDB)) & 0xF6) - (v15 ^ 0xDB) + 6020;
  *(_DWORD *)(a1 + 4 * (v13 - 123)) = LODWORD(STACK[0x540]) ^ LODWORD(STACK[0x530]) ^ v3 ^ v16 ^ ((v16 ^ 0xD3209F98) - ((2 * (v16 ^ 0xD3209F98) + 963012762) & 0x35A066C0) - 1736218707) ^ 0xC95C9ABF ^ dword_10023C220[((v15 & 0x88F ^ 0x7B1C000B) + (v15 & 0x1770 ^ 0x1701) - 1) ^ 0x7B1C00F9];
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + v4) - 4))();
}

void sub_1000D1280()
{
  JUMPOUT(0x1000D1158);
}

uint64_t sub_1000D1290()
{
  int v0;
  void *v1;

  v1 = malloc(0x408uLL);
  STACK[0xAD8] = (unint64_t)v1;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + (((5 * (v0 ^ 0x2D7) - 263) * (v1 != 0)) ^ v0))
                            - 233 * (v0 ^ 0x2BAu)
                            + 458))();
}

uint64_t sub_1000D12E4(uint64_t a1)
{
  int v1;
  unsigned int v2;
  char v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  int v16;

  v2 = ((LODWORD(STACK[0x590]) ^ LODWORD(STACK[0x470]) ^ 0x6472FDD4)
      - ((2 * (LODWORD(STACK[0x590]) ^ LODWORD(STACK[0x470]) ^ 0x6472FDD4) + 1383897270) & 0xF1859088)
      - 1576987489) ^ 0x854F6868;
  v3 = (((LOBYTE(STACK[0x590]) ^ LOBYTE(STACK[0x470]) ^ 0xD4)
       - ((2 * (LOBYTE(STACK[0x590]) ^ LOBYTE(STACK[0x470]) ^ 0xD4) - 74) & 0x88)
       - 97) ^ 0x68)
     - 73;
  v4 = ((v2 - 1576987465 - ((2 * v2 + 1383897270) & 0xF1859088) - 24) ^ 0xF8C2C844) + LODWORD(STACK[0x5B0]);
  v5 = (v4 - ((2 * v4) & 0xDC9B0E6E) - 296909001) ^ 0x9A04E060 | (((-(v3 & 1) - 1368328761) & 0x4A ^ 0x8004810B)
                                                                + ((-(v3 & 1) - 1368328761) & 0x35)
                                                                - 1) ^ 0x8004814D;
  v6 = (v5 - ((2 * v5) & 0xEBF82244) + 1979453730) ^ 0x75FC1122;
  v7 = LODWORD(STACK[0x5F0]) ^ 0x68E4;
  v8 = (v1 + 411919656) & 0xE7729BBD;
  LODWORD(STACK[0x668]) = v8;
  v9 = ((1648467110 * v6) & 0xBEAED7FE) + ((-1323250093 * v6) ^ 0xDF576BFF);
  v10 = 2 * (((v9 + 37889) & v7) - ((((v9 + 37889) & v7) << (v8 ^ 0xB9)) & 0x165F2)) - 1783011854;
  v11 = ((2 * (v7 + 547918849 + v9)) & 0xEFFFEDFE)
      + ((v7 + 547918849 + v9) ^ 0xF7FFF6FF)
      + (v10 ^ 0xB41965F3)
      + ((2 * v10) & 0xBCBFFFFC ^ 0xD7CD341B);
  v12 = LODWORD(STACK[0x610]) ^ LODWORD(STACK[0x670]) ^ (v11 - ((2 * v11 - 859827710) & 0xA940D1BA) - 1157598754);
  v13 = (((v12 >> 2) | 0xE1) - (v12 >> 3) - 113) ^ 0x62 | (((32 * v12) ^ 0xE772B2A0)
                                                                                           + 248545684) ^ 0xED08194;
  v14 = v13 - 2 * (v13 & 0x1F);
  HIDWORD(v15) = (v14 + 63) ^ 0x1B;
  LODWORD(v15) = (v14 << 24) - 1627389952;
  v16 = dword_10021A2B0[((v15 >> 29) - ((2 * (v15 >> 29)) & 0xB2) - 39) ^ 0x27];
  HIDWORD(v15) = v16 ^ 0xBB3DBE9;
  LODWORD(v15) = v16 ^ 0xC0000000;
  *(_DWORD *)(a1 + 4 * (-90 * v6 + ~(83 * v6) + 1)) = LODWORD(STACK[0x520]) ^ LODWORD(STACK[0x580]) ^ LODWORD(STACK[0x618]) ^ 0x22C2B395 ^ ((v15 >> 29) - ((2 * (v15 >> 29)) & 0x17559DC8) + 195743460);
  return ((uint64_t (*)(void))*(&off_100260750 + v1))();
}

void sub_1000D1624()
{
  JUMPOUT(0x1000D14BCLL);
}

uint64_t sub_1000D1634()
{
  int v0;
  void *v1;

  v0 = STACK[0x668];
  v1 = malloc(0x404uLL);
  STACK[0xB10] = (unint64_t)v1;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + (((v1 != 0) * (((v0 ^ 0x6B2) - 479) ^ 0x785)) ^ v0)) - 8))();
}

uint64_t sub_1000D167C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  v3 = (((LODWORD(STACK[0x424]) ^ 0x7735FF4A)
       - ((2 * (LODWORD(STACK[0x424]) ^ 0x7735FF4A) + 1225213828) & 0x757198A6)
       - 549687275) ^ 0x3AB8CC53)
     + LODWORD(STACK[0x690]);
  v4 = (((((2 * v3) & 0xDFB37FBC) + (v3 ^ 0xEFD9BFDE)) & 0xFFFFFFFE)
      - ((2 * (((2 * v3) & 0xDFB37FBC) + (v3 ^ 0xEFD9BFDE)) + 541884484) & 0xB033B924)
      - 398451531) ^ 0x1F443B2E;
  v5 = (302203643 * v4 + 148 - ((-10 * (_BYTE)v4) & 0x28)) & ((v1 - 338) ^ 0x247);
  v6 = (1573064880 - (v5 ^ 0x3F) + ((2 * (v5 ^ 0x3F)) & 0x1AE) + 3192) ^ 0x59CB1700;
  v7 = dword_100228B30[LODWORD(STACK[0x5E0]) ^ LODWORD(STACK[0x608]) ^ LODWORD(STACK[0x630]) ^ 0x78E476D3 ^ (v6 - ((2 * v6) & 0x81009E0) - 9603856)];
  v8 = LODWORD(STACK[0x5A0]) ^ LODWORD(STACK[0x450]) ^ LODWORD(STACK[0x458]) ^ LODWORD(STACK[0x688]) ^ LODWORD(STACK[0x680]) ^ LODWORD(STACK[0x500]) ^ LODWORD(STACK[0x640]) ^ LODWORD(STACK[0x44C]) ^ LODWORD(STACK[0x440]) ^ LODWORD(STACK[0x464]) ^ v7 ^ (v7 >> 2) ^ (v7 >> 6);
  *(_DWORD *)(a1 + 4 * (v5 ^ 0x94u)) = LODWORD(STACK[0x678]) ^ LODWORD(STACK[0x510]) ^ 0xA58DD7A7 ^ ((v8 ^ 0x51D274C9) + 755752175 - 2 * ((v8 ^ 0x51D274C9) & 0x2D0BDCFF ^ v8 & 0x10));
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * v1) - 8))();
}

void sub_1000D18A0()
{
  JUMPOUT(0x1000D17F4);
}

uint64_t sub_1000D18B0()
{
  int v0;
  void *v1;

  v1 = malloc(0x404uLL);
  STACK[0xB18] = (unint64_t)v1;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((284 * (v1 != 0)) ^ v0)) - ((v0 - 141) ^ 0x2D3u) + 240))();
}

uint64_t sub_1000D18F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  char v11;
  int v12;

  v9 = ((LODWORD(STACK[0x4F0]) ^ LODWORD(STACK[0x470]) ^ 0xE939CF0)
      - ((2 * (LODWORD(STACK[0x4F0]) ^ LODWORD(STACK[0x470]) ^ 0xE939CF0) + 654657334) & 0x3A9DCC6E)
      - 1865315886) ^ 0xE939CF0;
  v10 = ((v9 - ((2 * v9 + 654657334) & 0x3A9DCC6E) - 1865315886) ^ 0x1D4EE637) + LODWORD(STACK[0x5B0]);
  LOBYTE(v10) = (v10 ^ 0xAB) + 85 + ((2 * v10) & 0x56);
  LOBYTE(v10) = ((v10 & 0xFE) - ((2 * v10) & 0xDC) + 110) ^ 0xFB;
  v11 = -111 * v10 - 125;
  v12 = (LOBYTE(STACK[0x610]) ^ LOBYTE(STACK[0x670]) ^ LOBYTE(STACK[0x5F0]) ^ (v11
                                                                                              - ((34 * v10) & ((v8 - 64) ^ 0xBE))));
  *(_DWORD *)(a1 + 4 * ((v11 - ((34 * v10) & ((v8 - 64) ^ 0xBE))) ^ 0x83u)) = LODWORD(STACK[0x4C0]) ^ LODWORD(STACK[0x510]) ^ LODWORD(STACK[0x464]) ^ v12 ^ 0x808E4DF9 ^ dword_10021CE40[v12 ^ 0x92];
  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * v8) - 8))();
}

void sub_1000D1A78()
{
  JUMPOUT(0x1000D1A24);
}

uint64_t sub_1000D1A88()
{
  int v0;
  int v1;
  int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  char v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unint64_t v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  char v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  char v129;
  char v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  unsigned int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  unsigned int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  unsigned int v191;
  int v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  int v211;
  unsigned int v212;
  int v213;
  int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  int v229;
  int v230;
  unsigned int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  unsigned int v236;
  int v237;
  unsigned int v238;
  unsigned int v239;
  unint64_t v240;
  int v241;
  int v242;
  int v243;
  int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  int v249;
  unsigned int v250;
  unsigned int v251;
  uint64_t v252;
  unsigned int v253;
  char v254;
  unsigned int v255;
  unsigned int v256;
  int v257;
  int v258;
  unsigned int v259;
  unsigned int v260;
  int v261;
  int v262;
  int v263;
  uint64_t v264;
  unsigned int v265;
  int v266;
  char v267;
  char v268;
  int v269;
  int v270;
  int v271;
  unsigned int v272;
  int v273;
  unint64_t v274;
  int v275;
  unsigned int v276;
  int v277;
  unsigned int v278;
  char v279;
  int v280;
  char v281;
  char v282;
  int v283;
  int v284;
  unint64_t v285;

  v1 = byte_10021D340[(LOBYTE(STACK[0xBBD]) - (((v0 ^ 0x7C) + 2 * LOBYTE(STACK[0xBBD])) & 0x58) - 114) ^ 0x1DLL];
  v2 = (v1 - ((2 * (_BYTE)v1 + 30) & 0x1E) + 78) ^ 0xBB;
  v3 = (((v2 - ((2 * v2) & 0x7C)) << 16) - 1690435584) ^ 0x9B3E0000;
  v4 = byte_1002274C0[(LOBYTE(STACK[0xBBF]) + ((54 - 2 * LOBYTE(STACK[0xBBF])) | 9) + 96) ^ 0xC1] ^ 0x3D;
  v5 = (v4 - ((2 * v4) & 0xFFFFFFCF) - 1903880473) ^ 0x8E8516E7 | (v3 - ((2 * v3) & 0x28160000) - 1811180413) ^ 0x940B9483;
  v6 = byte_10023BF00[(LOBYTE(STACK[0xBBC]) - ((2 * LOBYTE(STACK[0xBBC]) + 66) & 0x68) - 43) ^ 0x4ALL] ^ (LOBYTE(STACK[0xBBC]) - ((2 * LOBYTE(STACK[0xBBC]) + 66) & 0x68) - 43) ^ 0x81;
  v7 = (((v6 - 2 * (v6 & 7)) << 24) - 2030043136) ^ 0x87000000;
  v8 = (v7 - ((2 * v7) & 0x12000000) + 167455886) ^ 0x9FB2C8E | (v5 - ((2 * v5) & 0xFDFF60A) + 133167877) ^ 0x7EFFB05;
  v9 = byte_10023EDC0[(LOBYTE(STACK[0xBBE]) + (~(2 * LOBYTE(STACK[0xBBE]) + 70) | 0x43) - 126) ^ 0xA4];
  v10 = v9 ^ 0xE6 ^ (((16 * v9) ^ 0x70) - ((2 * ((16 * v9) ^ 0x70)) & 0xA0) - 37);
  v11 = (((v10 - ((2 * v10) & 0x14A)) << 8) + 1873126656) ^ 0x6FA5A500;
  v12 = (v11 - ((2 * v11) & 0x74EC8600) - 1166654665) ^ 0xBA764337 | (v8 - ((2 * v8) & 0xAC196168) + 1443672244) ^ 0x560CB0B4;
  v13 = (v12 - ((2 * v12) & 0x271EA0C4) - 1819324318) ^ LODWORD(STACK[0x590]);
  v14 = ((7 - LODWORD(STACK[0x438])) & 0x40000 ^ 0x77ADEBFF) + 2 * ((7 - LODWORD(STACK[0x438])) & 0x40000);
  v15 = byte_10023EDC0[(LOBYTE(STACK[0xBB6]) - 101) ^ 0xF0];
  v16 = ((v13 ^ 0x24840000) & (v14 - 2007886847)) == ((2 * ((v13 ^ 0x24840000) & (v14 - 2007886847))) & 0x14700000);
  v17 = byte_10021D340[(LOBYTE(STACK[0xBB5]) - ((2 * LOBYTE(STACK[0xBB5]) + 52) & 0x48) - 2) ^ 0xEALL];
  v18 = v15 ^ (((16 * v15) ^ 0x70) - ((2 * ((16 * v15) ^ 0x70)) & 0x40) + 43) ^ 0x1F;
  v19 = (((v18 - ((2 * v18) & 0x1B6)) << 8) - 1102652672) ^ 0xBE46DB00;
  v20 = (((((v17 - ((2 * v17 + 126) & 0xDA) + 44) ^ 0x7E)
         - ((2 * ((v17 - ((2 * v17 + 126) & 0xDA) + 44) ^ 0x7E)) & 0x4E)) << 16)
       + 489095168) ^ 0x1D270000;
  v21 = (v20 - ((2 * v20) & 0x6160000) + 1124856247) ^ 0x430BF1B7 | (v19 - ((2 * v19) & 0x1C92F200) + 1313438049) ^ 0x4E497961;
  v22 = byte_10023BF00[(LOBYTE(STACK[0xBB4]) - ((2 * LOBYTE(STACK[0xBB4]) + 50) & 0xDA) - 122) ^ 0xB3] ^ (LOBYTE(STACK[0xBB4]) - ((2 * LOBYTE(STACK[0xBB4]) + 50) & 0xFFFFFFDA) - 122) ^ 0xBF;
  v23 = (((v22 - ((2 * v22) & 0xA8)) << 24) + 1409286144) ^ 0x54000000;
  v24 = byte_1002274C0[(LOBYTE(STACK[0xBB7]) - ((2 * LOBYTE(STACK[0xBB7]) - 72) & 0x96) + 39) ^ 0x12];
  HIDWORD(v25) = v24 ^ 0x1D;
  LODWORD(v25) = (v24 ^ 0x20) << 24;
  v26 = (v23 - ((2 * v23) & 0xA000000) + 89995601) ^ 0x55D3951 | (v21 - ((2 * v21) & 0x876FD6A) - 2076475723) ^ 0x843B7EB5;
  v27 = (v25 >> 29) + (~(2 * (v25 >> 29)) | 0x53) - 41;
  HIDWORD(v25) = v27 ^ 4;
  LODWORD(v25) = (v27 ^ 0x68) << 24;
  v28 = ((((v25 >> 27) - ((2 * (v25 >> 27)) & 0x4E) - 89) ^ 0xA7)
       - ((2 * (((v25 >> 27) - ((2 * (v25 >> 27)) & 0x4E) - 89) ^ 0xA7)) & 0x15E)
       + 2046299823) ^ 0x79F80EAF | (v26 - ((2 * v26) & 0x4604100A) - 1560147963) ^ 0xA3020805;
  v29 = STACK[0x640];
  v30 = LODWORD(STACK[0x640]) ^ LODWORD(STACK[0x4F0]) ^ (v28 - ((2 * v28) & 0x22870B20) - 1857845872);
  v31 = v14 - 42493960;
  v32 = -321687562 - v14;
  if (!v16)
    v31 = v32;
  v33 = STACK[0x678];
  v34 = (LODWORD(STACK[0x678]) ^ 0xB66C2AB4 ^ v30) + 1;
  v35 = v30 ^ 0x4A1F9A55;
  v36 = v35 + (v34 ^ 0x6DE5E5FE) + ((2 * v34) & 0xDBCBCBFC) - 1843783166;
  v37 = (LODWORD(STACK[0x678]) ^ ((LODWORD(STACK[0x4B0]) ^ 0xD31C3AF9)
                                - 2
                                * (((LODWORD(STACK[0x4B0]) ^ 0xD31C3AF9) + 259348080) & 0x56FB687B ^ (LODWORD(STACK[0x4B0]) ^ 0xD31C3AF9) & 1)
                                - 428818710) ^ 0x154DA7E3 ^ (v36 - ((2 * v36) & 0x8075010E) + 1077575815))
      + v35;
  v38 = STACK[0x430];
  v39 = (v37 - ((2 * v37) & 0x60BF475C) - 1335909458) ^ LODWORD(STACK[0x430]);
  v40 = (v39 ^ 0xD87528A3) % 0x3A5E0577;
  LOBYTE(v35) = LOBYTE(STACK[0xBBB]) - ((2 * LOBYTE(STACK[0xBBB]) + 22) & 0x2A) + 96;
  v41 = (((2 * v35) ^ 0x2A) - ((2 * ((2 * v35) ^ 0x2A)) & 0x18) + 45) & 0x2A;
  LOBYTE(v35) = v35 + (v41 ^ 0xD6) + ((2 * v41) ^ 0x50) + 2;
  v42 = v35 + (~(2 * v35) | 0xAD);
  v43 = LOBYTE(STACK[0xBB1]) - ((2 * LOBYTE(STACK[0xBB1]) - 84) & 0xFFFFFFD2) + 63;
  v44 = (v43 ^ 0x69) - ((2 * (v43 ^ 0x69)) & 0xBE) - 686001313;
  v45 = ((2 * (v43 ^ 0x95)) & 0x1C6) + (v43 ^ 0x7BF5F976);
  LODWORD(STACK[0x690]) = v0;
  v46 = v44 ^ (-1783342500 - v45 - ((938210750 - 2 * v45) & 0x337CBEFA)) ^ 0x36DFBBDF ^ ((v44 ^ 0x28E38CA0)
                                                                                       - ((2 * (v44 ^ 0x28E38CA0) + 2) & 0xF0FB2FFA)
                                                                                       - 125986818);
  v47 = v46 + 1500547863 - ((2 * v46 + 504) & 0xB2E11618) + 241;
  v48 = ((v47 ^ 0xFC | 0x4351FA7B) - (v47 ^ 0xFC | 0xBCAE0584) - 1129446012) ^ 0x23106AEB;
  v49 = v47 ^ 0x59708B17;
  v50 = ((v48 | 0xC204EEC8) - (v48 | 0x3DFB1137) + 1039864119) ^ v47;
  v51 = ((2 * (v50 & 0x53 ^ 0x50)) | 0x91C0789A) - (v50 & 0x53 ^ 0x50) + 924828595;
  v52 = ((v51 & 0x4E307632 ^ 0x4A005432) + (v51 ^ 0xA4F9AB4D) - ((v51 ^ 0xA4F9AB4D) & 0x4E307632)) ^ 0x2229E163 | (((v50 ^ 0x764FA80C) & 8 | (v50 ^ 0x764FA80C) & 0xA4 ^ 0x21) + 335) ^ 0x1D0;
  v53 = ((v52 - ((2 * v52) & 0x98) - 52) ^ 0x33)
      + byte_10021D340[v49]
      + ((2 * (v52 - ((2 * v52) & 0x98) - 52)) ^ 0xFFFFFF98);
  v54 = ((v53 - ((2 * v53 + 110) & 0xFFFFFF92) + 2) ^ 1) - 2;
  LODWORD(STACK[0x688]) = v54;
  v55 = ((((v54 ^ 0x9C) - ((2 * (v54 ^ 0x9C)) & 0xC)) << 16) - 100270080) ^ 0xFA060000;
  v56 = v55 - ((2 * v55) & 0xD0E0000);
  v57 = LOBYTE(STACK[0xBB0]) + (~(2 * LOBYTE(STACK[0xBB0]) + 42) | 0x33) - 4;
  v58 = byte_10023BF00[(LOBYTE(STACK[0xBB0]) + (~(2 * LOBYTE(STACK[0xBB0]) + 42) | 0x33) - 4) ^ 0xEALL] ^ v57 ^ 0x9B;
  v59 = (((v58 - ((2 * v58) & 0xD6)) << 24) - 352321536) ^ 0xEB000000;
  v60 = byte_10021D340[(LOBYTE(STACK[0xBB9]) - ((2 * LOBYTE(STACK[0xBB9]) + 28) & 0x12) - 25) ^ 0xEALL];
  v61 = (v60 - ((2 * (_BYTE)v60 + 6) & 4) + 65) ^ 0xE9;
  v62 = (((v61 - ((2 * v61) & 0xEE)) << 16) + 2071396352) ^ 0x7B770000;
  v63 = byte_1002274C0[(v42 - 86) ^ 0x16] ^ 0x3D;
  v64 = (v62 - ((2 * v62) & 0x26200000) - 1827640003) ^ 0x93106D3D | (v63 - 2 * (v63 & 0x7F) + 1694937215) ^ 0x6506B07F;
  v65 = byte_10023EDC0[(LOBYTE(STACK[0xBBA]) - ((2 * LOBYTE(STACK[0xBBA]) + 62) & 0xB0) + 119) ^ 0x17];
  v66 = v65 ^ 0x4A ^ (((16 * v65) ^ 0x70) - 126);
  v67 = (((v66 - ((2 * v66) & 0x136)) << 8) - 825582848) ^ 0xCECA9B00;
  v68 = (v64 - ((2 * v64) & 0x34B9E29A) - 1705184947) ^ 0x9A5CF14D | (v67 - ((2 * v67) & 0x6C9AFC00) + 1984790045) ^ 0x764D7E1D;
  v69 = byte_10023BF00[(LOBYTE(STACK[0xBB8]) - ((2 * LOBYTE(STACK[0xBB8]) + 58) & 0x8A) + 98) ^ 0x9ALL] ^ (LOBYTE(STACK[0xBB8]) - ((2 * LOBYTE(STACK[0xBB8]) + 58) & 0xFFFFFF8A) + 98) ^ 0xDD;
  v70 = (((v69 + (~(2 * v69) | 0x99999999)) << 24) - 1275068416) ^ 0xB3000000;
  v71 = (v68 - ((2 * v68) & 0xA0619156) - 802109269) ^ 0xD030C8AB | (v70 - ((2 * v70) & 0xEC000000) + 1981010410) ^ 0x7613D1EA;
  v72 = byte_10023EDC0[(LOBYTE(STACK[0xBB2]) - ((2 * LOBYTE(STACK[0xBB2]) + 6) & 6) + 26) ^ 0x79];
  v73 = v72 ^ 0xB3 ^ (((16 * v72) ^ 0xFFFFFFA0) - ((2 * ((16 * v72) ^ 0xFFFFFFA0)) & 0xC0) + 109);
  v74 = (((v73 + 13243025 - ((2 * v73) & 0x190)) << 8) + 407296) ^ 0xCA18C800;
  v75 = (v74 - ((2 * v74) & 0x6A1A5800) + 1963797554) ^ 0x750D2C32 | (v59 - ((2 * v59) & 0x64000000) - 1295638857) ^ 0xB2C61EB7;
  v76 = byte_1002274C0[(LOBYTE(STACK[0xBB3]) - ((2 * LOBYTE(STACK[0xBB3]) + 48) & 0x2A) - 19) ^ 0x4BLL] ^ 0x3D;
  v77 = (v75 - ((2 * v75) & 0xD33E370C) - 375448698) ^ 0xE99F1B86 | (v76 - ((2 * v76) & 0x55555555) + 695041194) ^ 0x296D7CAA;
  v78 = (v56 + 109570760) ^ 0x687EAC8 | (v77 - ((2 * v77) & 0x9C5CBF34) + 1311661978) ^ 0x4E2E5F9A;
  v79 = v38 ^ LODWORD(STACK[0x550]) ^ v33 ^ v29 ^ (v71 - ((2 * v71) & 0xE628DAE) + 120669911);
  v80 = v38 ^ LODWORD(STACK[0x480]) ^ v33 ^ v29 ^ (v78 - ((2 * v78) & 0x9B1ABEEC) - 846373002);
  v81 = v33 ^ v38 ^ v29 & 0xFFFBFFFF ^ ((v13 ^ 0x2486C8C6)
                                      - 1965392887
                                      + v31
                                      - ((2 * ((v13 ^ 0x2486C8C6) - 1965392887 + v31)) & 0xB436E6DE)
                                      - 635735185);
  v82 = (v40 ^ 0x93) + 109 + ((2 * v40) & 0x26);
  if (((2 * v40) & 0x7A7FFB7A) + (v40 ^ 0xFD3FFDBD) != -46137923)
    v82 = 0;
  v83 = STACK[0xB18];
  v84 = STACK[0xB10];
  v85 = *(_DWORD *)(STACK[0xB18] + 4 * (BYTE2(v39) ^ 0x75u)) ^ 0xD89FD9A6 ^ *(_DWORD *)(STACK[0xB10]
                                                                                        + 4 * (HIBYTE(v80) ^ 0xD7));
  v86 = STACK[0xB00];
  v87 = *(_DWORD *)(STACK[0xB00] + 4 * (BYTE1(v79) ^ 0xDu)) ^ 0xEFD5817D;
  v88 = (v87 & v85) - ((2 * (v87 & v85)) & 0x3B817694);
  v89 = ((v87 + v85) ^ 0x7DDD9DEF)
      + ((2 * (v87 + v85)) & 0xFBBB3BDE)
      + ((2 * v88 - 1149143404) ^ 0x71C6A585)
      + ((2 * (2 * v88 - 1149143404)) & 0x6B7059DC ^ 0x9CFFB6F7);
  v90 = (BYTE2(v80) ^ 0x11) - ((2 * (BYTE2(v80) ^ 0x11)) & 0x1F4) + 1943770874;
  v91 = BYTE1(v80) ^ 0xFA;
  v92 = STACK[0xB08];
  v93 = *(_DWORD *)(STACK[0xB00] + 4 * (BYTE1(v81) ^ 0x52u)) ^ *(_DWORD *)(STACK[0xB18] + 4 * (BYTE2(v79) ^ 0x39u)) ^ *(_DWORD *)(STACK[0xB10] + 4 * (HIBYTE(v39) ^ 0xD8)) ^ *(_DWORD *)(STACK[0xB08] + 4 * (v80 ^ 0x55u));
  v94 = (v89 + 1 - 2 * ((v89 + 937070337) & 0x2DD1D71F ^ (v89 + 1) & 8) - 441686505) ^ *(_DWORD *)(STACK[0xB08]
                                                                                                 + 4
                                                                                                 * (v81 ^ 0x74u));
  v95 = HIBYTE(v81) ^ 0x51;
  v96 = *(_DWORD *)(STACK[0xB10] + 4 * (HIBYTE(v79) ^ 0x37)) ^ *(_DWORD *)(STACK[0xB18] + 4 * (BYTE2(v81) ^ 0xCBu)) ^ *(_DWORD *)(STACK[0xB00] + 4 * v91) ^ *(_DWORD *)(STACK[0xB08] + 4 * ((((v39 ^ 0xA3) - v82) ^ 0xEF) + ((2 * ((v39 ^ 0xA3) - v82)) & 0xDF) + 17));
  v97 = *(_DWORD *)(STACK[0xB18]
                  + 4
                  * (((v90 & 0x509B862A) + (v90 ^ 0x70DB876A) - ((v90 ^ 0x70DB876A) & 0x100122A) + 134498304) ^ 0x5A9FCF79u)) ^ *(_DWORD *)(STACK[0xB00] + 4 * (BYTE1(v39) ^ 0x28u)) ^ *(_DWORD *)(STACK[0xB10] + 4 * v95) ^ *(_DWORD *)(STACK[0xB08] + 4 * (v79 ^ 0x9Au));
  v98 = ((BYTE1(v97) ^ 0xB3) - ((2 * (BYTE1(v97) ^ 0xB3)) & 0x46) - 1384337629) ^ 0x6C74BF2B;
  v99 = *(_DWORD *)(STACK[0xB18] + 4 * (BYTE2(v93) ^ 0xC6u)) ^ *(_DWORD *)(STACK[0xB00] + 4 * (BYTE1(v96) ^ 0x42u)) ^ *(_DWORD *)(STACK[0xB08] + 4 * (v97 ^ 0xBFu)) ^ *(_DWORD *)(STACK[0xB10] + 4 * (HIBYTE(v94) ^ 0x68));
  v100 = *(_DWORD *)(STACK[0xB18] + 4 * (BYTE2(v96) ^ 0x7Bu)) ^ *(_DWORD *)(STACK[0xB10] + 4 * (HIBYTE(v93) ^ 0xC)) ^ *(_DWORD *)(STACK[0xB08] + 4 * (v94 ^ 0x84u)) ^ *(_DWORD *)(STACK[0xB00] + 4 * ((((2 * v98) & 0x8210476E) - v98 + 149986376) ^ 0xC9F88C57));
  v101 = *(_DWORD *)(STACK[0xB18] + 4 * (BYTE2(v97) ^ 0x24u)) ^ *(_DWORD *)(STACK[0xB10] + 4 * (HIBYTE(v96) ^ 0x94)) ^ *(_DWORD *)(STACK[0xB08] + 4 * (v93 ^ 0xEAu)) ^ *(_DWORD *)(STACK[0xB00] + 4 * (BYTE1(v94) ^ 0xCBu));
  v102 = *(_DWORD *)(STACK[0xB18] + 4 * (BYTE2(v94) ^ 0x12u)) ^ *(_DWORD *)(STACK[0xB10] + 4 * (HIBYTE(v97) ^ 0xB5)) ^ *(_DWORD *)(STACK[0xB00] + 4 * (BYTE1(v93) ^ 0x2Cu)) ^ *(_DWORD *)(STACK[0xB08] + 4 * (v96 ^ 0xA4u));
  v103 = v101 ^ 0x39;
  v104 = *(_DWORD *)(STACK[0xB10] + 4 * (HIBYTE(v100) ^ 9)) ^ *(_DWORD *)(STACK[0xB18] + 4 * (BYTE2(v101) ^ 0x2Cu)) ^ *(_DWORD *)(STACK[0xB00] + 4 * (BYTE1(v102) ^ 0x99u)) ^ *(_DWORD *)(STACK[0xB08] + 4 * (v99 ^ 0x77u));
  v105 = *(_DWORD *)(STACK[0xB10] + 4 * (HIBYTE(v99) ^ 0xAA)) ^ *(_DWORD *)(STACK[0xB00] + 4 * (BYTE1(v101) ^ 0x97u)) ^ *(_DWORD *)(STACK[0xB08] + 4 * (v102 ^ 0x6Cu)) ^ *(_DWORD *)(STACK[0xB18] + 4 * (BYTE2(v100) ^ 0x48u));
  v106 = (v105 ^ 0xC838AACB) + 61136;
  v107 = v106 ^ 0x3FDBAF75;
  v108 = (2 * v106) & 0x7FB75EEA;
  v109 = ((2 * v105) ^ 0x5E3F55D4) - ((2 * ((2 * v105) ^ 0x5E3F55D4)) & 0x1D598) + 256716;
  v110 = HIBYTE(v101) ^ 0x32;
  v111 = HIBYTE(v102) ^ 0x28;
  v112 = *(_DWORD *)(STACK[0xB00] + 4 * (BYTE1(v99) ^ 0xF9u)) ^ *(_DWORD *)(STACK[0xB10] + 4 * v110) ^ *(_DWORD *)(STACK[0xB18] + 4 * (BYTE2(v102) ^ 0x17u)) ^ *(_DWORD *)(STACK[0xB08] + 4 * (v100 ^ 0x77u));
  v113 = v107 + v108 + (v109 & 0x1DDA0 ^ 0xC10089C1) + ((2 * v109) & 0x13940 ^ 0xFFFEEEFF) - 14479541;
  v114 = *(_DWORD *)(STACK[0xB18] + 4 * (BYTE2(v99) ^ 0x91u)) ^ *(_DWORD *)(STACK[0xB08] + 4 * v103) ^ *(_DWORD *)(STACK[0xB10] + 4 * v111) ^ *(_DWORD *)(STACK[0xB00] + 4 * (BYTE1(v100) ^ 0x7Fu));
  v115 = *(_DWORD *)(STACK[0xB18] + 4 * (BYTE2(v112) ^ 0x5Cu)) ^ *(_DWORD *)(STACK[0xB00] + 4
                                                                                            * (BYTE1(v114) ^ 0x71u)) ^ *(_DWORD *)(STACK[0xB10] + 4 * (HIBYTE(v104) ^ 0x6E)) ^ *(_DWORD *)(STACK[0xB08] + 4 * (v105 ^ 0xCBu));
  v116 = *(_DWORD *)(STACK[0xB18] + 4 * (BYTE2(v104) ^ 0x6Fu)) ^ *(_DWORD *)(STACK[0xB08]
                                                                             + 4 * (v114 ^ 3u)) ^ *(_DWORD *)(STACK[0xB00] + 4 * (BYTE1(v112) ^ 0x42u)) ^ *(_DWORD *)(STACK[0xB10] + 4 * (HIBYTE(v105) ^ 0xC8));
  v117 = *(_DWORD *)(STACK[0xB18] + 4 * (BYTE2(v114) ^ 0x54u)) ^ *(_DWORD *)(STACK[0xB10] + 4
                                                                                            * (HIBYTE(v112) ^ 0xF3)) ^ *(_DWORD *)(STACK[0xB00] + 4 * (BYTE1(v105) ^ 0xAAu)) ^ *(_DWORD *)(STACK[0xB08] + 4 * (v104 ^ 0x56u));
  v118 = *(_DWORD *)(STACK[0xB18] + 4 * ((BYTE2(v113) - ((v113 >> 15) & 0x88) - 60) ^ 0xC4u)) ^ *(_DWORD *)(STACK[0xB10] + 4 * (HIBYTE(v114) ^ 0x74)) ^ *(_DWORD *)(STACK[0xB00] + 4 * (BYTE1(v104) ^ 0x7Fu)) ^ *(_DWORD *)(STACK[0xB08] + 4 * (v112 ^ 0x85u));
  v119 = STACK[0xB10];
  v120 = *(_DWORD *)(STACK[0xB18] + 4 * (BYTE2(v115) ^ 0x7Fu)) ^ *(_DWORD *)(STACK[0xB10] + 4
                                                                                            * (HIBYTE(v116) ^ 0x85)) ^ *(_DWORD *)(STACK[0xB00] + 4 * (BYTE1(v117) ^ 9u)) ^ *(_DWORD *)(STACK[0xB08] + 4 * (v118 ^ 0x3Au));
  v121 = ((2 * v120) & 0xFDBFFBBE ^ 0x24199B34) + (v120 ^ 0x6DD33265);
  v122 = *(_DWORD *)(STACK[0xB18] + 4 * (BYTE2(v117) ^ 0x3Cu)) ^ *(_DWORD *)(STACK[0xB10] + 4
                                                                                            * (HIBYTE(v115) ^ 0x44)) ^ *(_DWORD *)(STACK[0xB08] + 4 * v116) ^ *(_DWORD *)(STACK[0xB00] + 4 * (BYTE1(v118) ^ 0xD2u));
  v123 = *(_DWORD *)(STACK[0xB10] + 4 * (HIBYTE(v117) ^ 0x18)) ^ *(_DWORD *)(STACK[0xB00] + 4
                                                                                            * (BYTE1(v116) ^ 0x34u)) ^ *(_DWORD *)(STACK[0xB08] + 4 * (v115 ^ 0xBCu)) ^ *(_DWORD *)(STACK[0xB18] + 4 * (BYTE2(v118) ^ 0x77u));
  v124 = v121 - 2128608735;
  if (v121 - 511484153 >= 0x9F9CA31A)
    v125 = 70;
  else
    v125 = 96;
  v126 = *(_DWORD *)(v92 + 4 * (v117 ^ 0xD3u)) ^ *(_DWORD *)(v83 + 4 * (BYTE2(v116) ^ 0xFu)) ^ *(_DWORD *)(v86 + 4 * (BYTE1(v115) ^ 0xE1u)) ^ *(_DWORD *)(v84 + 4 * (HIBYTE(v118) ^ 0xC3));
  v127 = ((v123 ^ 0x4F4F27D5) >> (BYTE2(v118) & 0x10 ^ 0x10))
       - ((2 * ((v123 ^ 0x4F4F27D5) >> (BYTE2(v118) & 0x10 ^ 0x10))) & 0x8DB71696);
  v128 = ((((v127 - 958690485) ^ 0xC6DB8B4B) >> (BYTE2(v118) & 0x10))
                         - ((2 * (((v127 - 958690485) ^ 0xC6DB8B4B) >> (BYTE2(v118) & 0x10))) & 0xD6)
                         - 21) ^ 0xEB;
  if (v124 >= 0x9F9CA31A)
    v129 = 36;
  else
    v129 = 10;
  v130 = v121 + v129;
  if (v124 < 0x9F9CA31A)
    v125 = 122;
  v131 = *(_DWORD *)(v86 + 4 * (BYTE1(v126) ^ 0x5Fu)) ^ *(_DWORD *)(v84 + 4 * (HIBYTE(v122) ^ 0xF8)) ^ *(_DWORD *)(v92 + 4 * (v130 + v125 - 99)) ^ *(_DWORD *)(v83 + 4 * v128);
  v132 = *(_DWORD *)(v83 + 4 * (BYTE2(v122) ^ 0x6Cu)) ^ *(_DWORD *)(v92 + 4 * (v126 ^ 5u)) ^ *(_DWORD *)(v86 + 4 * (BYTE1(v123) ^ 0x27u)) ^ *(_DWORD *)(v84 + 4 * HIBYTE(v124));
  v133 = v123 ^ 0xD5;
  v134 = *(_DWORD *)(v83 + 4 * (BYTE2(v126) ^ 0x27u)) ^ *(_DWORD *)(v84 + 4 * (HIBYTE(v123) ^ 0x4F)) ^ *(_DWORD *)(v92 + 4 * (v122 ^ 0xECu)) ^ *(_DWORD *)(v86 + 4 * ((BYTE1(v124) - ((v124 >> 7) & 0x5A) + 45) ^ 0x2Du));
  v135 = (v131 & 0x20 ^ 0xDE46A3B4) - 1144360908;
  v136 = ((v131 & 0xFFFFFFDF ^ 0x5746C18B) - ((2 * (v131 & 0xFFFFFFDF ^ 0x5746C18B)) & 0x345DC61A) + 439280397) ^ 0xDA7F834D;
  v137 = (((2 * v136) & 0x83B2C9B6) - v136 + 1042717476) ^ v135;
  v138 = *(_DWORD *)(v83 + 4 * ((BYTE2(v124) - ((v124 >> 15) & 0x24) - 110) ^ 0x92u)) ^ *(_DWORD *)(v119 + 4 * (HIBYTE(v126) ^ 0x23)) ^ *(_DWORD *)(v92 + 4 * v133) ^ *(_DWORD *)(v86 + 4 * (BYTE1(v122) ^ 0x84u));
  LOBYTE(v136) = ((v57 & 8 | 0x52) - (v57 & 0x10 | 0x2D) + 45) & 0x78;
  v139 = ((((v134 ^ 0x91098441) >> (v136 ^ 0x50))
         - ((2 * ((v134 ^ 0x91098441) >> (v136 ^ 0x50))) & 0x3D519150)
         - 1633105752) ^ 0x9EA8C8A8) >> (v136 ^ 0x48);
  v140 = *(_DWORD *)(v86 + 4 * (BYTE1(v134) ^ 0x84u)) ^ *(_DWORD *)(v119 + 4 * (HIBYTE(v132) ^ 0x26)) ^ *(_DWORD *)(v92 + 4 * ((*(_BYTE *)(v83 + 4 * ((BYTE2(v124) - ((v124 >> 15) & 0x24) - 110) ^ 0x92u)) ^ *(_BYTE *)(v119 + 4 * (HIBYTE(v126) ^ 0x23)) ^ *(_BYTE *)(v92 + 4 * v133) ^ *(_BYTE *)(v86 + 4 * (BYTE1(v122) ^ 0x84u))) ^ 0xAEu)) ^ *(_DWORD *)(v83 + 4 * (BYTE2(v137) ^ 0x79u));
  v141 = STACK[0xB10];
  v142 = *(_DWORD *)(v83 + 4 * (BYTE2(v134) ^ 9u)) ^ *(_DWORD *)(v86 + 4 * (BYTE1(v138) ^ 0x71u)) ^ *(_DWORD *)(v92 + 4 * (v132 ^ 0x78u)) ^ *(_DWORD *)(v119 + 4 * (HIBYTE(v137) ^ 0x42));
  v143 = *(_DWORD *)(v92 + 4 * (v137 ^ 0x79u)) ^ *(_DWORD *)(v83 + 4 * (BYTE2(v138) ^ 0x31u)) ^ *(_DWORD *)(v119 + 4 * ((v139 - ((2 * v139) & 0xB4) + 90) ^ 0x5Au)) ^ *(_DWORD *)(v86 + 4 * (BYTE1(v132) ^ 0x27u));
  v144 = *(_DWORD *)(v119 + 4 * (HIBYTE(v138) ^ 0x1D)) ^ *(_DWORD *)(v92 + 4 * (v134 ^ 0x41u)) ^ *(_DWORD *)(v83 + 4 * (BYTE2(v132) ^ 0x2Au)) ^ *(_DWORD *)(v86 + 4 * (BYTE1(v137) ^ 0x20u));
  v145 = (v142 ^ 0xAF1FAAEA)
       + 67072
       + (((v142 ^ 0x33A42FD9) + 1) ^ 0xFFFEF6BF)
       + ((2 * ((v142 ^ 0x33A42FD9) + 1)) & 0xFFFDED7E)
       + 833;
  v146 = ((v145 - ((2 * v145) & 0xBFDC5FCA) + 1609445349) ^ 0xA011D01D) + (v142 ^ 0xAF1FAAEA);
  v147 = v146 - ((2 * v146) & 0xCDB0678E) + 1725445063;
  v148 = *(_DWORD *)(v86 + 4 * (BYTE1(v140) ^ 0x73u));
  v149 = *(_DWORD *)(v83 + 4 * (BYTE2(v144) ^ 0x63u));
  v150 = *(_DWORD *)(v119 + 4 * (HIBYTE(v143) ^ 0xF2)) ^ v149 ^ v148 ^ *(_DWORD *)(v92
                                                                                   + 4
                                                                                   * ((v146 - ((2 * v146) & 0x8E) - 57) ^ 0xC7u));
  v16 = ((2 * (v150 & 0x40000 ^ 0x8004428C)) & 0xFFFFFC0F) - (v150 & 0x40000 ^ 0x8004428C) == -2147466884;
  v151 = (((2 * (v143 & 0x9A958C13 ^ 0x18858C10)) & 0x352A1820) - (v143 & 0x9A958C13 ^ 0x18858C10) - 1056382077) ^ 0xA300F382;
  v152 = ((2 * v143) & 0x152A1806 ^ 0x4CDEFCD2)
       + (v143 & 0x9A958C13 ^ 0xD9908186)
       + (((v143 ^ 0x68D8729E) + 1) ^ 0x17EF4F38)
       + ((2 * ((v143 ^ 0x68D8729E) + 1)) & 0x2FDE9E70);
  v153 = (v152 - ((2 * v152 + 1914856634) & 0x66185C30) + 1813864565) ^ (((2 * v151) & 0x6BC57184) - v151 - 904051651);
  v154 = BYTE1(v142) ^ 0xD0;
  v155 = *(_DWORD *)(v119 + 4 * (HIBYTE(v140) ^ 0x12));
  v156 = *(_DWORD *)(v119 + 4 * (HIBYTE(v142) ^ 0xCC));
  v157 = *(_DWORD *)(v92 + 4 * (v144 ^ 0xC9u));
  v158 = *(_DWORD *)(v86 + 4 * (BYTE1(v144) ^ 0x25u));
  v159 = *(_DWORD *)(v83 + 4 * (BYTE2(v142) ^ 0x5Bu)) ^ v155 ^ v157 ^ *(_DWORD *)(v86
                                                                                  + 4
                                                                                  * (((unsigned __int16)((v152 - ((2 * v152 + 25786) & 0x5C30) + 24693) ^ (((2 * v151) & 0x7184) - v151 + 17469)) >> 8) ^ 0x7Au));
  v160 = *(_DWORD *)(v92 + 4 * (v140 ^ 0xB2u));
  v161 = v156 ^ v158 ^ v160 ^ *(_DWORD *)(v83 + 4 * (BYTE2(v153) ^ 0x99u));
  v162 = v148 ^ *(_DWORD *)(v92 + 4 * (v142 ^ 0x26u)) ^ v149 ^ *(_DWORD *)(STACK[0xB10]
                                                                                            + 4
                                                                                            * (HIBYTE(v153) ^ 0x91));
  v163 = ((v162 & 0x91B46B49 ^ 0x11A40149)
        + (v162 & 0x90304B00 ^ 0xE851CE22)
        - ((v162 & 0x91B46B49 ^ 0x11A40149) & 0x90304B00)) ^ 0x7071F7B7;
  v164 = (v163 - ((2 * v163) & 0xF8301C30) - 65532358) ^ 0xE4A81DAE | ((v162 & 0x484A94B0 ^ 0x49F841C1)
                                                                     + (v162 & 0x26010006 ^ 0x26010003)
                                                                     + 2147483646) & 0x6E4B95F6 ^ 0x40428160;
  v165 = v164 - ((2 * v164) & 0x62D04D1E) + 828909199;
  v166 = *(_DWORD *)(STACK[0xB10] + 4 * (HIBYTE(v144) ^ 0x40)) ^ *(_DWORD *)(v83 + 4 * (BYTE2(v140) ^ 0x1Du));
  v167 = v166 ^ *(_DWORD *)(v86 + 4 * v154) ^ *(_DWORD *)(v92 + 4 * (v153 ^ 0x35u));
  v168 = v155 ^ v157 ^ *(_DWORD *)(v86 + 4 * (BYTE1(v143) ^ 0xFEu)) ^ *(_DWORD *)(v83 + 4 * (BYTE2(v147) ^ 0xD8u));
  v169 = v143 ^ 0x8D;
  v170 = *(_DWORD *)(v83 + 4 * (BYTE2(v143) ^ 0x4Du)) ^ v158 ^ v160 ^ *(_DWORD *)(STACK[0xB10]
                                                                                  + 4 * (HIBYTE(v147) ^ 0x66));
  v171 = v166 ^ *(_DWORD *)(v92 + 4 * v169) ^ *(_DWORD *)(v86 + 4 * (BYTE1(v147) ^ 0x33u));
  v172 = v150 ^ 0xAF1FAAEA;
  if (v16)
    v173 = 0x40000;
  else
    v173 = -262144;
  v174 = v173 + v172 - 1811180413 - 2 * ((v173 + v172) & 0x140B88FE ^ v172 & 0xC) - 2961;
  v175 = *(_DWORD *)(v83 + 4 * (BYTE2(v161) ^ 0x31u));
  LODWORD(STACK[0x670]) = *(_DWORD *)(v83 + 4 * (BYTE2(v165) ^ 0x14u));
  LODWORD(STACK[0x680]) = *(_DWORD *)(v83 + 4 * (BYTE2(v167) ^ 0x1Fu));
  LODWORD(STACK[0x678]) = *(_DWORD *)(v83 + 4 * (BYTE2(v159) ^ 0x75u));
  v176 = *(_DWORD *)(v83 + 4 * (BYTE2(v168) ^ 0x75u));
  v177 = *(_DWORD *)(v92 + 4 * (v171 ^ 0xF4u)) ^ *(_DWORD *)(v83 + 4 * (BYTE2(v170) ^ 0x31u)) ^ *(_DWORD *)(v141 + 4 * (HIBYTE(v168) ^ 8)) ^ *(_DWORD *)(v86 + 4 * (BYTE1(v174) ^ 0xB5u));
  v178 = *(_DWORD *)(v86 + 4 * (BYTE1(v167) ^ 0x18u));
  v179 = v165;
  v180 = *(_DWORD *)(v86 + 4 * (BYTE1(v165) ^ 0x1Bu));
  v181 = *(_DWORD *)(v86 + 4 * (BYTE1(v159) ^ 0xB9u));
  v182 = *(_DWORD *)(v86 + 4 * (BYTE1(v161) ^ 0xC3u));
  v183 = *(_DWORD *)(v86 + 4 * (BYTE1(v171) ^ 0x18u));
  v184 = *(_DWORD *)(v86 + 4 * (BYTE1(v168) ^ 0xB9u));
  v185 = *(_DWORD *)(v86 + 4 * (BYTE1(v170) ^ 0xC3u));
  v186 = *(_DWORD *)(v141 + 4 * (HIBYTE(v170) ^ 0x6B)) ^ v183;
  v187 = *(_DWORD *)(v141 + 4 * (HIBYTE(v159) ^ 8)) ^ v175 ^ *(_DWORD *)(v92 + 4 * (v167 ^ 0xF4u));
  v188 = ((2 * ((v187 ^ 0x3B05010C ^ v180) - 1202274211)) & 0x46F9F6FE)
       + (((v187 ^ 0x3B05010C ^ v180) - 1202274211) ^ 0x237CFB7F);
  v189 = v184 ^ *(_DWORD *)(v83 + 4 * (BYTE2(v171) ^ 0x1Fu)) ^ *(_DWORD *)(v92 + 4 * (v170 ^ 0xB0u)) ^ *(_DWORD *)(v141 + 4 * (HIBYTE(v174) ^ 0xD));
  v190 = v186 ^ *(_DWORD *)(v92 + 4 * (v168 ^ 0x7Cu)) ^ *(_DWORD *)(v83 + 4 * (BYTE2(v174) ^ 0x73u));
  v191 = v179;
  v192 = *(_DWORD *)(v92 + 4 * (v174 ^ 0xCFu));
  v193 = v177;
  v194 = v188 + (v177 ^ 0xC4FAFEF3) - ((2 * (v188 + (v177 ^ 0xC4FAFEF3)) + 956696836) & 0x7EE3CC62) - 1678447949;
  v195 = (*(_DWORD *)(v141 + 4 * (HIBYTE(v161) ^ 0x6B)) ^ v178 ^ *(_DWORD *)(v92
                                                                             + 4 * (v159 ^ 0x7Cu)) ^ 0xFF2B6856 ^ LODWORD(STACK[0x670]))
       + 758658806;
  v196 = ((2 * v195) & 0xFEFADE36) + (v195 ^ 0xFF7D6F1B);
  v197 = v185 ^ v176 ^ *(_DWORD *)(v141 + 4 * (HIBYTE(v171) ^ 0xD9)) ^ v192;
  v198 = (*(_DWORD *)(v141 + 4 * (HIBYTE(v167) ^ 0xD9)) ^ LODWORD(STACK[0x678]) ^ v182 ^ 0x1057E775 ^ *(_DWORD *)(v92 + 4 * (v179 ^ 0xB2u)))
       - 907041214;
  v199 = ((2 * v198) & 0xBDFE77A6) + (v198 ^ 0xDEFF3BD3) + (v197 ^ 0xEFA8188A);
  v200 = (*(_DWORD *)(v92 + 4 * (v161 ^ 0xB0u)) ^ LODWORD(STACK[0x680]) ^ v181 ^ 0x6657556B ^ *(_DWORD *)(v141 + 4 * (HIBYTE(v179) ^ 0xA8)))
       + 1794750297;
  v201 = ((2 * v200) & 0xBFFA3EBE) + (v200 ^ 0xDFFD1F5F) + (v189 ^ 0x99A8AA94);
  v202 = (v201 - 2 * ((v201 + 188578) & 0xDD3C6DF ^ v201 & 1) - 1378441344) ^ 0x3AAA8A55;
  v203 = ((-1397497827 * v202) ^ 0x674FDE53) + ((1499971642 * v202) & 0xCE9FBCA6);
  v204 = (v196 + (v190 ^ 0xD497A9) - ((2 * (v196 + (v190 ^ 0xD497A9)) + 17113548) & 0x61E14172) - 1317850721) ^ 0x8C0180E8;
  v205 = ((1339632071 * v204) ^ 0x49CDCFBD) + ((-1615703154 * v204) & 0x939B9F7A);
  v206 = (v199 - ((2 * v199 + 33654876) & 0x16B34960) + 744122590) ^ 0x9D085E27;
  v207 = ((-193647233 * v206) ^ 0xEA799EAF) + ((-387294466 * v206) & 0xD4F33D5E);
  v208 = ((-619630751 * (v194 ^ 0x799E9A03)) ^ 0x7FD27693) + ((-1239261502 * (v194 ^ 0x799E9A03)) & 0xFFA4ED26) + v205;
  v209 = v207 - v208 - ((2 * (v207 - v208) - 1102229694) & 0xB0D91196) - 1215090580;
  v210 = v205
       + ((v203 - 1733287507 + (v209 ^ 0xD86C88CB)) ^ 0x84506902)
       - ((2 * (v203 - 1733287507 + (v209 ^ 0xD86C88CB))) & 0xF75F2DFA);
  v211 = v207 + v203 + 554822865 + (~(2 * (v207 + v203) + 1550648828) | 0x1A492C5B);
  v212 = (v211 ^ 0x8D24962D) + v208 - ((2 * ((v211 ^ 0x8D24962D) + v208) + 213873506) & 0x1BC15FB2) + 1145072010;
  v213 = (v210 + 1 - 2 * ((v210 + 836880193) & 0x31EFA4DB ^ (v210 + 1) & 2) + 1674669081) ^ v209;
  v214 = (v193 ^ 0x3B05010C) + (v212 ^ 0x1B9C7C34 ^ v213) + 1;
  v215 = (v212 ^ v209 ^ 0xD58C2712) + (v211 ^ 0x7F3BC60B ^ v212);
  v216 = ((2 * v214) & 0xF6FFFB9E)
       + (v214 ^ 0x7B7FFDCF)
       - ((2 * (((2 * v214) & 0xF6FFFB9E) + (v214 ^ 0x7B7FFDCF)) + 411399066) & 0x364C45B2)
       - 412558170;
  v217 = (v190 ^ 0xFF2B6856) + (v212 ^ v209 ^ 0x2A73D8ED) + 1;
  v218 = ((2 * v217) & 0xFF6FE0CA)
       + (v217 ^ 0xFFB7F065)
       - ((2 * (((2 * v217) & 0xFF6FE0CA) + (v217 ^ 0xFFB7F065)) + 1072832630) & 0x5782433E)
       + 196751834;
  v219 = v215 - ((2 * v215) & 0xE32FA072) - 241708999;
  v220 = ((2 * ((v189 ^ 0x6657556B) + (v219 ^ 0xE682FC6) + 1)) & 0xFCBA5F6A)
       + (((v189 ^ 0x6657556B) + (v219 ^ 0xE682FC6) + 1) ^ 0x7E5D2FB5);
  v221 = v213 ^ 0xE9832C12;
  v222 = ((v213 ^ 0xE9832C12) & (v219 ^ 0xF197D039)) - ((2 * ((v213 ^ 0xE9832C12) & (v219 ^ 0xF197D039))) & 0x4D84B03A);
  v223 = (v213 ^ 0xE9832C12) + (v219 ^ v213 ^ 0xE7EB03D4) + 1;
  v224 = v220 - ((2 * v220 + 1826018322) & 0x656BA3BA) + 1763785702;
  v225 = (v219 ^ ((v219 ^ 0xE682FC6) - ((2 * (v219 ^ 0xE682FC6) + 2) & 0x55BC4B38) + 719201693) ^ (v223
                                                                                                 - ((2 * v223) & 0xADC3C9F0)
                                                                                                 - 689838856) ^ 0xDA8115D)
       + v221;
  v226 = (v197 ^ 0x1057E775)
       + ((2 * v222 - 846942150) ^ 0x8DA27093)
       + ((2 * (2 * v222 - 846942150)) & 0x7FB27EAC ^ 0xE4FF9FDB)
       + (v225 ^ 0x820115A1)
       - ((2 * v225) & 0xFBFDD4BC)
       + 1037576631;
  v227 = ((2 * v226) & 0xD7C9BDDE)
       + (v226 ^ 0xEBE4DEEF)
       - ((2 * (((2 * v226) & 0xD7C9BDDE) + (v226 ^ 0xEBE4DEEF)) - 1171567220) & 0xF28B2130)
       + 1448818526;
  v228 = (((2 * v226) & 0xDE)
                         + (v226 ^ 0xEF)
                         - ((2 * (((2 * v226) & 0xDE) + (v226 ^ 0xEF)) - 116) & 0x30)
                         + 94) ^ 0x98;
  v229 = *(_DWORD *)(STACK[0xAE0] + 4 * (HIBYTE(v224) ^ 0xB2));
  v230 = *(_DWORD *)(STACK[0xAD8] + 4 * (BYTE2(v227) ^ 0x45u));
  v231 = (v230 ^ ((v230 ^ 0xF8D7059D) - ((2 * (v230 ^ 0xF8D7059D) + 2) & 0x86F727B6) + 1132172252) ^ ((v229 ^ 0x7D93C5C3) + (v229 ^ 0x8544C05E ^ v230) + 1 - ((2 * ((v229 ^ 0x7D93C5C3) + (v229 ^ 0x8544C05E ^ v230) + 1)) & 0xDF425312) + 1872832905) ^ 0x2BF24030)
       + (v229 ^ 0x7D93C5C3);
  v232 = *(_DWORD *)(STACK[0xAD8] + 4 * (BYTE2(v216) ^ 0x26u));
  v233 = *(_DWORD *)(STACK[0xAF0] + 4 * (v216 ^ 0xD9u));
  v234 = *(_DWORD *)(STACK[0xB20] + 4 * (BYTE1(v216) ^ 0x22u));
  v235 = LODWORD(STACK[0x470]) ^ LODWORD(STACK[0x4D0]);
  v236 = v235 ^ LODWORD(STACK[0x4E0]) ^ *(_DWORD *)(STACK[0xAD8] + 4 * (BYTE2(v218) ^ 0xC1u)) ^ *(_DWORD *)(STACK[0xAE0] + 4 * (HIBYTE(v216) ^ 0x1B)) ^ *(_DWORD *)(STACK[0xB20] + 4 * (BYTE1(v224) ^ 0xD1u)) ^ *(_DWORD *)(STACK[0xAF0] + 4 * v228);
  v237 = v235 ^ *(_DWORD *)(STACK[0xAD8] + 4 * (BYTE2(v224) ^ 0xB5u)) ^ v233 ^ *(_DWORD *)(STACK[0xAE0]
                                                                                           + 4 * (HIBYTE(v218) ^ 0x2B)) ^ *(_DWORD *)(STACK[0xB20] + 4 * (BYTE1(v227) ^ 0x90u));
  v238 = v235 ^ LODWORD(STACK[0x4E0]) ^ *(_DWORD *)(STACK[0xAF0] + 4 * (v218 ^ 0x9Fu)) ^ v234 ^ (v231 - ((2 * v231) & 0x69324F5C) + 882452398);
  v239 = v235 ^ LODWORD(STACK[0x4E0]) ^ *(_DWORD *)(STACK[0xAF0] + 4 * (v224 ^ 0xDDu)) ^ v232 ^ *(_DWORD *)(STACK[0xB20] + 4 * (BYTE1(v218) ^ 0x21u)) ^ *(_DWORD *)(STACK[0xAE0] + 4 * (HIBYTE(v227) ^ 0x79));
  HIDWORD(v240) = LODWORD(STACK[0x4E0]) ^ 0xD4E5BB;
  LODWORD(v240) = LODWORD(STACK[0x4E0]) ^ 0x62000000;
  v241 = (v240 >> 24) - ((2 * (v240 >> 24)) & 0x8553A4F0) + 1118425720;
  HIDWORD(v240) = v237 ^ 0xB3CFD8;
  LODWORD(v240) = v237 ^ 0xE3FFFFFF;
  v242 = ((v240 >> 24) - ((2 * (v240 >> 24)) & 0xB4F35100) + 1517922432) ^ v241;
  HIDWORD(v240) = v242 ^ 7;
  LODWORD(v240) = v242 ^ 0x486D1E00;
  v243 = (v240 >> 8) - ((2 * (v240 >> 8)) & 0xF0712146) + 2016972963;
  if (LODWORD(STACK[0x688]) == 156)
    v244 = -1388463546;
  else
    v244 = -1385353630;
  v245 = v243 ^ v244;
  v246 = (((2 * ((v243 ^ v244) & 0xFF0E6B48 ^ 0x310C1509)) | 0xEE418740)
        - ((v243 ^ v244) & 0xFF0E6B48 ^ 0x310C1509)
        + 148847712) ^ 0xEC28D5A9 | ((v243 & 0xF194B7 ^ 0xC0648503 | 0xD79029F8)
                                   - (v243 & 0xF194B7 ^ 0xC0648503 | 0x286FD607)
                                   + 678417927) ^ 0x1794A87C;
  v247 = v246 - ((2 * v246) & 0x889F516) - 2075854197;
  v248 = ((2 * (BYTE1(v239) ^ 0x27)) | 0xF965F344) - (BYTE1(v239) ^ 0x27) - 2092104098;
  v249 = byte_10023C780[((v248 & 0x482259B8 ^ 0x1000011) + (v248 & 0x3490A247) - 1) ^ 0x7DB2F9C4];
  v250 = v249 - ((2 * v249 + 46) & 0x6E) + 14;
  LOBYTE(STACK[0xBBE]) = ((v250 & 0x41 ^ 0xBF) + ((2 * (v250 & 0x41)) ^ 0x9D) + 114) ^ (((2 * (v250 & 0xBE ^ 0xF6)) & 0x24)
                                                                                      - (v250 & 0xBE ^ 0xF6)
                                                                                      + 109) ^ 0x93 ^ (((((v250 >> 2) & 0x1D ^ 0xE7) + ((2 * ((v250 >> 2) & 0x1D)) | 0xB0) + 1) ^ 2) + 40);
  v251 = (((2 * (v239 ^ 0xF55B2CDE)) & 0x28B6415E) - (v239 ^ 0xF55B2CDE) + 1636044624) ^ 0xCD7F43E7;
  LOBYTE(STACK[0xBBF]) = byte_100216C40[(((2 * v251) | 0x75A2904C) - v251 + 1160689626) ^ 0xE3712832] ^ 0xB0;
  v252 = HIBYTE(v238);
  v253 = ((((v252 ^ 0x32) - ((2 * (v252 ^ 0x32)) & 0x96)) << 24) + 1258291200) ^ 0x4B000000;
  v254 = byte_100217B60[HIBYTE(v239) ^ 0x3ALL];
  LOBYTE(STACK[0xBBC]) = (v254 - ((2 * v254 - 38) & 0xD2) + 86) ^ 0x58;
  v255 = (((v252 ^ 0x32) - ((v238 >> 23) & 2)) << 24) + 0x1000000;
  v256 = ((v255 ^ 0x1000000) - ((2 * v255) & 0xAC000000) + 1444541527) ^ 0x6A833C8E;
  v257 = (v253 - ((2 * v253) & 0x46000000) - 1548354262) ^ 0x423A36EB;
  v258 = (v257 & v256) - ((2 * (v257 & v256)) & 0x5854502E);
  v259 = ((v257 + v256) ^ 0x7E9F766E)
       + ((2 * (v257 + v256)) & 0xFD3EECDC)
       + ((2 * v258 - 665563090) ^ 0x9C54712F)
       + 1029728402
       + ((2 * (2 * v258 - 665563090)) & 0x77FFBDFC ^ 0xCF575FA3);
  v260 = ((v259 >> 22) - ((v259 >> 21) & 0x4CE) - 149024153) ^ 0xF71E1294;
  v261 = (((v260 >> 2) - ((v260 >> 1) & 0xDC) - 18) ^ 0xB) + 1;
  LOBYTE(v252) = (v261 ^ 0xBB) + byte_100217B60[v252 ^ 0x17] + ((2 * v261) & 0x76);
  v262 = (HIWORD(v238) ^ 0xEF63) + (HIWORD(v238) ^ 0xEF7C);
  LOBYTE(STACK[0xBB8]) = (v252 + (~(2 * v252 + 90) | 0x35) + 19) ^ 0xA8;
  v263 = (BYTE2(v238) ^ 0xB6) - ((2 * (BYTE2(v238) ^ 0xB6)) & 0x146) + 137027235;
  v264 = ((v263 & 0x2A96EE ^ 0x6285002E) + (v263 ^ 0x102AFED0) - ((v263 ^ 0x102AFED0) & 0x100022EEu)) ^ 0x6AAF96E3;
  LOBYTE(v263) = ((2 * v262) & 0xEC) + (v262 ^ 0xF6) + 10;
  LOBYTE(STACK[0xBB9]) = ((v263 ^ 0xE7)
                        + ((2 * v263) & 0xCF)
                        + byte_10023A040[v264]
                        - ((2 * ((v263 ^ 0xE7) + ((2 * v263) & 0xCF) + byte_10023A040[v264]) + 30) & 0x87)
                        + 82) ^ 0xF2;
  LOBYTE(v245) = byte_100217B60[HIBYTE(v245) ^ 0xE3];
  LOBYTE(v264) = v245 - ((2 * v245 + 90) & 0x4A) - 110;
  LOBYTE(v245) = ((88 - v245 - ((38 - 2 * v245) & 0x8A)) ^ v264 ^ 0x69 ^ ((v264 ^ 0x38)
                                                                        - ((2 * (v264 ^ 0x38) + 6) & 0x12)
                                                                        - 20))
               + 98;
  LOBYTE(STACK[0xBB4]) = (v245 ^ 0x5F) + ((2 * v245) & 0xBF) - 95;
  v265 = (((2 * (BYTE2(v239) ^ 0xF1)) & 0xF0) - (BYTE2(v239) ^ 0xF1) - 1282317945) ^ 0x9026CEDF;
  v266 = (HIWORD(v239) ^ 0x8183) + (HIWORD(v239) ^ 0x819C);
  LOBYTE(v252) = ((2 * v266) & 0xF6) + (v266 ^ 0x7B) - 123;
  LOBYTE(v252) = byte_10023A040[(((2 * v265) & 0x422F01FA) - v265 - 895467774) ^ 0xE9179083]
               + (v252 ^ 0x1F)
               + 2 * (v252 & 0x1F);
  LOBYTE(STACK[0xBBD]) = (v252 - ((2 * v252 - 82) & 0xDA) - 60) ^ 0x40;
  LODWORD(v252) = ((v247 ^ 0xD8)
                 + (v247 & 0x55 ^ 0xAD969705)
                 - ((v247 ^ 0xD8) & 0x55555555)) ^ 0xBD560D05;
  LOBYTE(STACK[0xBB7]) = byte_100216C40[((v252 | 0x1FB616E3)
                                       - (v252 | 0xE049E91C)
                                       - 532027108) ^ 0xF768C21] ^ 0xE7;
  LODWORD(v252) = (v236 ^ 0xEC34D2BE)
                - ((2 * (v236 ^ 0xEC34D2BE)) & 0x186181E6)
                + 514966771;
  LOBYTE(STACK[0xBB3]) = byte_100216C40[((v252 & 0xB00003FE ^ 0x26588187) - (v252 | 0xB77ADBFE) - 2) ^ 0x9E58A3BELL] ^ 0xB8;
  LOBYTE(v252) = byte_10023C780[((BYTE1(v238) ^ 0xBD | 0xFE265739) - (BYTE1(v238) ^ 0xBD | 0x1D9A8C6) + 31041734) ^ 0xFE265721];
  v267 = v252 - ((2 * v252 + 46) & 0x76) - 110;
  v268 = v267 ^ 0xB3;
  if (!((v191 ^ 0xA8000000) >> 24))
    v268 = 116;
  LOBYTE(STACK[0xBBA]) = v267 ^ ((((v268 & (v267 ^ 0x3B)) - ((2 * (v268 & (v267 ^ 0x3B))) & 0xC3) + 97) & 0xFC) >> 2) ^ 0xF2;
  LOBYTE(STACK[0xBBB]) = byte_100216C40[v238 ^ 0x80] ^ 0x16;
  v269 = (HIWORD(v236) ^ 0xE8C4) + (HIWORD(v236) ^ 0xE8DB);
  v270 = (HIWORD(v236) & 0x95) - 2070797313 + (HIWORD(v236) & 0x6A ^ 0x30051103);
  v271 = ((2 * v269) & 0xF2) + (v269 ^ 0x79) - 121;
  v272 = (v271 ^ 0xFFFFFFEF)
       + ((2 * v271) & 0xFFFFFFDF)
       + byte_10023A040[((v270 & 0x2080071A ^ 0x4248081A) + (v270 ^ 0xB9B43700) - ((v270 ^ 0xB9B43700) & 0xD02071A)) ^ 0x62E90D68];
  HIDWORD(v274) = v272 - 1;
  LODWORD(v274) = (v272 << 24) + 117440512;
  v273 = v274 >> 27;
  v275 = (2 * v273) & 0x60;
  v273 += 48;
  HIDWORD(v274) = v273 ^ 0x1B;
  LODWORD(v274) = ((v273 - v275) ^ 0xFFFFFFBF) << 24;
  LOBYTE(STACK[0xBB1]) = ((v274 >> 29) - ((2 * (v274 >> 29)) & 0xA0) + 80) ^ 0x5A;
  v276 = (((2 * (BYTE1(v236) ^ 0xAF)) & 0x2E) - (BYTE1(v236) ^ 0xAF) - 854789144) ^ 0xC94DF969;
  v277 = byte_10023C780[(((2 * v276) & 0x8001F80) - v276 + 686133311) ^ 0x2CA49A64];
  v278 = v277 - ((2 * v277 - 82) & 0xFFFFFF8F) + 30;
  LOBYTE(STACK[0xBB2]) = v278 ^ (v278 >> 2) & 0x1D ^ 0x30;
  LOBYTE(v278) = byte_10023C780[((BYTE1(v247) ^ 0x44014B8) - ((2 * (BYTE1(v247) ^ 0x44014B8)) & 0x80021E8u) + 2089021940) ^ 0x78C3E543];
  LOBYTE(v278) = v278 - ((2 * v278 - 82) & 0xDA) - 60;
  v279 = ((2 * ~((v278 & 0xFC) >> 2)) & 0x20) - (~((v278 & 0xFC) >> 2) & 0x1D) + 109;
  v280 = (HIWORD(v247) ^ 0x8497) + (HIWORD(v247) ^ 0x8488);
  LOBYTE(STACK[0xBB6]) = v278 ^ 0xA4 ^ ((v279 & 0x64 ^ 0x45) + (v279 & 0x99) - 1);
  LOWORD(v278) = (BYTE2(v247) ^ 0x9A) - ((2 * (BYTE2(v247) ^ 0x9A)) & 0xB2) + 25433;
  v281 = 2 * (v280 & 0x3F) + (v280 ^ 0xBF) + 65;
  LOBYTE(v278) = ((2 * v281) & 0x7A)
               + (v281 ^ 0xBD)
               + byte_10023A040[((v278 & 0x8AE ^ 0x7086882B) + (v278 & 0x3751) - 1) ^ 0x7086ABCALL];
  LOBYTE(STACK[0xBB5]) = (v278 - ((2 * v278 + 50) & 0x34) + 83) ^ 0x45;
  v282 = byte_100217B60[HIBYTE(v236) ^ 0xABLL];
  LOBYTE(STACK[0xBB0]) = (v282 - ((2 * v282 + 90) & 0x77) + 40) ^ 0x38;
  v283 = LODWORD(STACK[0x690]) ^ 0x93;
  LODWORD(STACK[0xAFC]) = 0;
  free((void *)STACK[0xAE0]);
  free((void *)STACK[0xB08]);
  free((void *)STACK[0xAD8]);
  free((void *)STACK[0xB20]);
  free((void *)STACK[0xAF0]);
  free((void *)STACK[0xB00]);
  free((void *)STACK[0xB10]);
  free((void *)STACK[0xB18]);
  if (LODWORD(STACK[0xAFC]) == v283 - 555)
    v284 = 0;
  else
    v284 = -42885;
  v285 = STACK[0xA58];
  STACK[0xAD0] -= 32;
  return ((uint64_t (*)(unint64_t))((char *)*(&off_100260750
                                                             + ((2046 * (v284 == ((v283 + 25) | 0x489) - 1741)) ^ (v283 - 210)))
                                                   - 13 * ((v283 - 210) ^ 0x142u)
                                                   + 343))(v285);
}

uint64_t sub_1000D4E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6, uint64_t a7, __int16 a8)
{
  int v8;
  unsigned int v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unsigned __int8 *v14;
  __int16 v15;
  unsigned int v16;
  _BOOL4 v17;
  _BOOL4 v18;

  v14 = (unsigned __int8 *)(((v8 + 1414261415) | ((unint64_t)((v8 + 1414261415) < 0x73591987) << 32))
                          + a4);
  v15 = (a6 + ((*v14 - (((unsigned __int16)v12 ^ 0xEB) & (unsigned __int16)(2 * *v14))) << 8)) ^ a6;
  LOWORD(v14) = (v15 - ((2 * v15) & 0xAC00) + a8) ^ a8 | (v14[1] - ((2 * v14[1]) & 0x42) + v11) ^ v11;
  LODWORD(v14) = (unsigned __int16)(((_WORD)v14 - ((2 * (_WORD)v14) & 0xA5AE) + v13) ^ v13);
  v16 = v8 + (v14 ^ 0x7D9FD2CA) + (v10 & (2 * (_DWORD)v14)) - 2041966662;
  v17 = v16 < 0x22F71162;
  v18 = v16 > v9;
  if (v9 < 0x22F71162 == v17)
    v17 = v18;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((25 * v17) ^ (v12 - 1510))) - 12))();
}

uint64_t sub_1000D4F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;

  v8 = v5 + a5 + a2 + 0x3749BB5A36714EC3;
  v9 = (((*(unsigned __int8 *)v8 - ((*(unsigned __int8 *)v8 << ((((v7 ^ 0xAC) - 86) ^ 0xA) & 0x4B)) & 0xFC)) << 8)
      + 32256) ^ 0x7E00;
  LODWORD(v8) = (v9 - (v9 >> 10 << 11) - 993) ^ 0xFFFFFC1F | (*(unsigned __int8 *)(v8 + 1)
                                                            - ((2 * *(unsigned __int8 *)(v8 + 1)) & 0xFFEF)
                                                            + v6) ^ v6;
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((116
                                        * (((7 * ((((v7 ^ 0xAC) - 86) | 0xB4) ^ 0x9C)) ^ ((__int16)(v8 - ((2 * v8) & 0x3AAC) - 25242) < (__int16)((7 * ((((v7 ^ 0xAC) - 1110) | 0xB4) ^ 0x29C)) ^ 0x9D99))) & 1)) ^ (((v7 ^ 0xAC) - 1110) | 0xB4)))
                            - 8))();
}

uint64_t sub_1000D5024()
{
  uint64_t v0;
  unsigned int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * (int)(((((v1 - 187) | 0xC4) + 300) * (v2 == -25236)) ^ v1))
                            - (v1 ^ 0xF9)))();
}

uint64_t sub_1000D5064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (a5 ^ (1166 * (v5 == 21206))))
                            - ((35 * ((a5 + 1111971329) & 0xBDB8AFCD ^ 0x6CA)) ^ 0xF9)))();
}

uint64_t sub_1000D50BC@<X0>(unint64_t a1@<X8>)
{
  int v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  _BOOL4 v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  _BOOL4 v12;

  v5 = v1 + 44;
  v6 = *(unsigned __int8 *)(STACK[0x648] + (v2 - 520957662));
  v7 = v2 + 5;
  LODWORD(STACK[0x670]) = v6 + 1985812931 - ((v6 << (v5 ^ 0x20)) & 0x186);
  v8 = v3 < a1;
  v9 = v5 ^ 0x7ECu;
  v10 = v7 + 1174004454 + ((unint64_t)(v7 < (int)v9 + 520955925) << 32);
  v11 = v8 ^ (v10 < a1 + v9 - 1741);
  v12 = v10 <= v3;
  if (!v11)
    v8 = v12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((1570 * !v8) ^ v5)) - 12))();
}

uint64_t sub_1000D52F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6, uint64_t a7, __int16 a8)
{
  return sub_1000D4E30(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1000D5300()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  LODWORD(STACK[0x890]) = STACK[0x670];
  free((void *)(STACK[0x678] - 0x4E36C53A99817805));
  sub_1000B6114(v1, v2, v3, v4, v5, v6, v0);
}

uint64_t sub_1000D530C()
{
  int v0;
  void *v1;

  LODWORD(STACK[0x890]) = STACK[0x670];
  v1 = malloc_type_malloc(LODWORD(STACK[0x9E8]) ^ 0xB3B7B663, 0x8139508FuLL);
  STACK[0x8D0] = (unint64_t)v1;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + (((v1 != 0) * (v0 - 798)) ^ (v0 - 439))) - 4))();
}

uint64_t sub_1000D531C()
{
  int v0;
  void *v1;
  unint64_t v2;

  v1 = malloc_type_malloc(STACK[0x850], 0xA6908726uLL);
  v2 = STACK[0x958];
  STACK[0x688] = STACK[0x958];
  *(_QWORD *)(v2 + 104) = v1;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + (((v1 == 0) * ((v0 - 429811226) & 0x199E647F ^ 0x471)) ^ v0))
                            - 4))();
}

void sub_1000D537C()
{
  int v0;
  _DWORD *v1;
  int v2;
  void *v3;

  v1 = (_DWORD *)STACK[0x688];
  v2 = STACK[0x690];
  *v1 = v0;
  v1[1] = v2;
  v3 = (void *)STACK[0x8D0];
  STACK[0x678] = STACK[0xA80];
  free(v3);
  STACK[0x8D0] = 0;
  JUMPOUT(0x10010C5A8);
}

uint64_t sub_1000D5384()
{
  unsigned int v0;

  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((56 * (STACK[0x850] == 0)) ^ v0)) - v0 + 1027))();
}

void sub_1000D5410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;

  v8 = (v6 - 1225398002) & 0xEDBBFBBF;
  *(_DWORD *)(STACK[0x688] + 112) = 1494274718;
  STACK[0x678] = STACK[0xA80];
  v9 = LOWORD(STACK[0x872]);
  v10 = STACK[0x8D0];
  LODWORD(STACK[0x670]) = STACK[0x9E8];
  LODWORD(STACK[0x680]) = 2 * (v9 ^ 0xF90A);
  v11 = STACK[0x688];
  *(_QWORD *)(v11 + 64) = STACK[0x678];
  *(_DWORD *)(v11 + 72) = (STACK[0x680] & 0x1B356) + (v8 ^ v9 ^ 0xD54CCB3A) - 1626425386;
  *(_QWORD *)(v11 + 48) = v10;
  *(_DWORD *)(v11 + 56) = STACK[0x670];
  v12 = STACK[0x690];
  *(_DWORD *)v11 = v7;
  *(_DWORD *)(v11 + 4) = v12;
  sub_1000B6114(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_1000D5548()
{
  int v0;
  char v1;
  int v2;
  unsigned int v3;
  _BOOL4 v4;

  v0 = STACK[0x3F8];
  if (LODWORD(STACK[0x668]) != -961433487)
    v0 = STACK[0x3C4];
  LODWORD(STACK[0x28C]) = v0;
  LODWORD(STACK[0x4B0]) -= 1092274346;
  LODWORD(STACK[0x660]) = LODWORD(STACK[0x670]) ^ 0x69C08E65;
  v1 = *(_BYTE *)(STACK[0x688]
                + (*(_BYTE *)(STACK[0x688]
                            + ((*(_BYTE *)(STACK[0x688] + ((*(_BYTE *)(STACK[0x688] + 5) + 12) & 0xF)) + 6) & 0xF)) & 0xF))
     + 14;
  v2 = ((v1 & 0xF) - 2 * (v1 & 3) + 19) ^ 0x13;
  v3 = ((2 * v2) & 0x1FC) + (v2 ^ 0x7DFDEBFE);
  v4 = v3 < 0x7DFDEBFE || v3 + 229082880 > 0x8BA572FF;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + (int)((53 * !v4) ^ STACK[0x678])) - 12))();
}

uint64_t sub_1000D6668()
{
  int v0;
  int v1;

  LODWORD(STACK[0x284]) = LODWORD(STACK[0x3AC]) - LODWORD(STACK[0x3BC]);
  LODWORD(STACK[0x350]) = LODWORD(STACK[0x500]) ^ LODWORD(STACK[0x4F0]);
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((527 * ((v1 + 1) > 0xF)) ^ v0)) - 8))();
}

#error "1000D98D8: call analysis failed (funcsize=2138)"

void sub_1000D98DC()
{
  JUMPOUT(0x1000D8EF8);
}

uint64_t sub_1000D98F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,int a58,int a59,int a60,int a61,int a62,int a63)
{
  int a69;
  int a70;
  int a71;
  int v71;
  _BOOL4 v72;

  STACK[0x668] = LODWORD(STACK[0x25C]) ^ 0x34u;
  LODWORD(STACK[0x3A0]) = a71 - LODWORD(STACK[0x204]);
  LODWORD(STACK[0x408]) = LODWORD(STACK[0x4F0]) ^ LODWORD(STACK[0x20C]);
  LODWORD(STACK[0x204]) = a69 - 2 * a70;
  LODWORD(STACK[0x530]) = LODWORD(STACK[0x660]) ^ LODWORD(STACK[0x4E0]) ^ a63 ^ LODWORD(STACK[0x4A0]) ^ (LODWORD(STACK[0x37C]) - 2 * LODWORD(STACK[0x3E8]));
  LODWORD(STACK[0x20C]) = LODWORD(STACK[0x470]) - LODWORD(STACK[0x340]);
  LODWORD(STACK[0x3E8]) = LODWORD(STACK[0x3EC]) ^ 0x2764CD19;
  LODWORD(STACK[0x470]) = a62 - LODWORD(STACK[0x580]);
  LODWORD(STACK[0x580]) = a58 - a59;
  LODWORD(STACK[0x25C]) = a61 - a60;
  LODWORD(STACK[0x37C]) = LODWORD(STACK[0x480]) ^ 0x500D359B;
  LODWORD(STACK[0x678]) = a3 ^ 0x52C;
  v72 = STACK[0x680] <= v71 - 38938702;
  return ((uint64_t (*)(void))*(&off_100260750 + ((v72 | (8 * v72)) ^ a3)))();
}

void sub_1000DA43C()
{
  JUMPOUT(0x1000D9A38);
}

uint64_t sub_1000DA468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62,int a63)
{
  int a64;
  int a65;
  int a66;
  int a68;
  int a71;
  int a72;
  int a73;
  int a74;
  int v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  int v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  unsigned int v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  uint64_t v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  int v129;
  uint64_t v130;
  _BOOL4 v131;

  LODWORD(STACK[0x340]) = LODWORD(STACK[0x4C0]) ^ LODWORD(STACK[0x4F0]);
  LODWORD(STACK[0x480]) = LODWORD(STACK[0x268]) - a64;
  LODWORD(STACK[0x39C]) = LODWORD(STACK[0x258]) - 2 * LODWORD(STACK[0x264]);
  LODWORD(STACK[0x264]) = a74 - LODWORD(STACK[0x214]);
  LODWORD(STACK[0x268]) = a71 - a72;
  LODWORD(STACK[0x4F0]) = a73 ^ LODWORD(STACK[0x394]) ^ a68;
  LODWORD(STACK[0x4C0]) = a61 - a62;
  v76 = STACK[0x250];
  LODWORD(STACK[0x258]) = a65 - a66;
  LODWORD(STACK[0x214]) = v76 ^ 0x9C59701F;
  v77 = v75
      + (((unint64_t)(v75 - 0x6975AE8E8E223E0BLL) >> 24) ^ 0x890003C414111880)
      - (((unint64_t)(v75 - 0x6975AE8E8E223E0BLL) >> 23) & 0x77D7DDCEFELL);
  v78 = v77
      + (((v77 + 0xD8A4DAD5DCCA975) >> 14) ^ 0x78FDC87AFBEFCEFALL)
      + (((v77 + 0xD8A4DAD5DCCA975) >> 13) & 0x390F5F7DF9DF4);
  v79 = v78
      + (((v78 - 0x6B737ACD9E232585) >> 7) ^ 0x12280402026CE000)
      - (((v78 - 0x6B737ACD9E232585) >> 6) & 0x3AFF7FBFB263FFELL);
  v80 = (((v79 - 0x5F393259E8BDB120) >> 28) ^ 0x4FFD6F1EB72EFFD5)
      + v79
      + 2
      + (((v79 - 0x5F393259E8BDB120) >> 27) & 0x1D6E5DFFAALL);
  v81 = (((v80 + 0x50C95E8760134F09) >> 8) ^ 0xAFFBDBFBD7B5FEBELL)
      + v80
      + (((v80 + 0x50C95E8760134F09) >> 7) & 0x1F7B7F7AF6BFD7CLL);
  v82 = v81
      + (((v81 - 0x5F327D7477A2AFB5) >> 2) ^ 0x2A860A4842304202)
      - (((v81 - 0x5F327D7477A2AFB5) >> 1) & 0x2AF3EB6F7B9F7BFALL);
  v83 = v82 + 1 - 2 * ((v82 + 103616073) & 0x1139C807 ^ (v82 + 1) & 4) + 1466357323;
  v84 = 2 * (v82 + 1 - ((2 * (v82 + 1) + 207232144) & 0x437C524A) + 669726598) - 50;
  v85 = ((v84 ^ 0xC37C524A) - 2 * ((v84 ^ 0xC37C524A) & 0x1A293022 ^ v84 & 0x20) + 1512648707) & 0x7F199778 ^ 0x24090218;
  v86 = (((v82 - 0x1032FAC88D643CEELL) >> 27) ^ 0x736DEB9FBDFFDE35)
      + v82
      + 1
      + (((v82 - 0x1032FAC88D643CEELL) >> 26) & 0x3F7BFFBC6ALL);
  v87 = v86
      + (((v86 + 0x7C5F1997B49BE4DCLL) >> 14) ^ 0x2C02230A1054400)
      - (((v86 + 0x7C5F1997B49BE4DCLL) >> 13) & 0x7BB9EBDF577FELL);
  v88 = v87
      + (((v87 + 0x799EF7671396A0DCLL) >> 6) ^ 0xB2020064C0380811)
      - (((v87 + 0x799EF7671396A0DCLL) >> 5) & 0x3FBFF367F8FEFDCLL);
  v89 = v88
      + 2
      + (((v88 - 0x1007A85D317E68C6) >> 27) ^ 0x8008054820185244)
      - (((v88 - 0x1007A85D317E68C6) >> 26) & 0x2FBFCF5B76);
  v90 = v89
      + (((v89 + 0x6FF0525AAE6944F4) >> 11) ^ 0x4089241091140003)
      - (((v89 + 0x6FF0525AAE6944F4) >> 10) & 0x2DB7DEDDD7FFF8);
  v91 = v90
      + (((v90 + 0x2F672E4A1D5544F1) >> 7) ^ 0x2BFDFBBBF66F75F6)
      + (((v90 + 0x2F672E4A1D5544F1) >> 6) & 0x3FBF777ECDEEBECLL)
      + 2;
  v92 = v91 - ((2 * v91 + 0x6D2651C4DCB9DF2) & 0xEF6B77B529BBB71CLL) - 0x4E11197443C5579;
  v93 = ((2 * ((v92 ^ 0xF7B5BBDA94DDDB8ELL) + 0x2CA9E7BAB642E976)) & 0xD53D8ACEEE635F7ELL)
      + (((v92 ^ 0xF7B5BBDA94DDDB8ELL) + 0x2CA9E7BAB642E976) ^ 0x6A9EC5677731AFBFLL);
  v94 = (((v93 - 0x6A9EC5677731AFBFLL) >> 27) ^ 0xBFFEDDDCFFE7F7FFLL)
      + v93
      + (((v93 - 0x6A9EC5677731AFBFLL) >> 26) & 0x39FFCFEFFELL);
  v95 = v94
      + (((v94 - 0x2A9DA3447719A7BELL) >> 8) ^ 0x10CA45002840A834)
      - (((v94 - 0x2A9DA3447719A7BELL) >> 7) & 0x6B75FFAF7EAF96);
  v96 = v95
      + (((v95 - 0x3B67E8449F5A4FF2) >> 6) ^ 0x7CFB759F7FBFFEFDLL)
      + (((v95 - 0x3B67E8449F5A4FF2) >> 5) & 0x1F6EB3EFF7FFDFALL)
      + 1;
  v97 = v96 - ((2 * v96 + 0xF394437C1CB6220) & 0x6F845E24F7F91852) - 0xA12ED1A31DC2C7;
  v98 = (((2 * v97) ^ 0xF7F91852) - ((2 * ((2 * v97) ^ 0xF7F91852)) & 0x3318845C) + 1502364207) & 0x7F199778 ^ 0x61081520;
  v99 = ((2 * v98) & 0xAC120410) - v98 + 688971255;
  v100 = (v97 ^ 0x8D37346EEB644AEDLL)
       + ((v97 >> 24) ^ 0x228928C353567CFLL)
       + ((v97 >> 23) & 0x1FDFBFDEDB6 ^ 0xFFFFFEE795973269)
       - 0x228920102010923;
  v101 = (((((2 * v100) & 0xFF6DFFEFF777DAFCLL) + (v100 ^ 0xFFB6FFF7FBBBED7ELL) + 0x49000804441282) >> 10) ^ 0x3F77CE7E7EFEB97FLL)
       + ((2 * v100) & 0xFF6DFFEFF777DAFCLL)
       + (v100 ^ 0xFFB6FFF7FBBBED7ELL)
       + (((((2 * v100) & 0xFF6DFFEFF777DAFCLL) + (v100 ^ 0xFFB6FFF7FBBBED7ELL) + 0x49000804441282) >> 9) & 0x6F9CFCFDFD72FELL);
  v102 = v101
       + (((v101 - 0x3F2ECE767ABAA6FDLL) >> 5) ^ 0x403A4A005058875)
       - (((v101 - 0x3F2ECE767ABAA6FDLL) >> 4) & 0x7F8B6BFF5F4EF14)
       + 1;
  v103 = v102 - ((2 * v102 + 0x799B19D3007FA11ALL) & 0x43E535205A3F0560) - 0x213FD88652A0ACC3;
  v104 = ((2 * ((v103 ^ 0x21F29A902D1F82B0) - 0x5F6C9CB288BB47ADLL)) & 0xED9FB7BBA7BF77F6)
       + (((v103 ^ 0x21F29A902D1F82B0) - 0x5F6C9CB288BB47ADLL) ^ 0xF6CFDBDDD3DFBBFBLL);
  v105 = v104
       + (((v104 + 0x93024222C204405) >> 29) ^ 0x96502CB202989062)
       - (((v104 + 0x93024222C204405) >> 28) & 0xBFACEDF3ALL);
  v106 = v105
       + (((v105 + 0x72DFF7702987B3A3) >> 11) ^ 0x4EF7EDDED7FDFFEFLL)
       + (((v105 + 0x72DFF7702987B3A3) >> 10) & 0x2FDBBDAFFBFFDELL);
  v107 = v106
       + (((v106 + 0x23E809915189B3B4) >> 8) ^ 0x20204000088C000ELL)
       - (((v106 + 0x23E809915189B3B4) >> 7) & 0x1BF7FFFEEE7FFE2)
       + 2;
  v108 = v107 - ((2 * v107 + 0x78F932291FB6748) & 0x73463CA994B0E14ALL) + 0x3D6AE7E613562449;
  v109 = (v108 ^ 0x8C8F525E37AEC3ACLL)
       + ((v108 >> 31) ^ 0x73FF5BEE7445BA43)
       + ((v108 >> 30) & 0x2DAB63DFELL ^ 0x212340978)
       - 0x73FF5BEF6D5B1EFFLL;
  v110 = ((2 * v109) & 0xFBA498C1FD2DEB1ELL)
       + (v109 ^ 0xFDD24C60FE96F58FLL)
       + (((((2 * v109) & 0xFBA498C1FD2DEB1ELL) + (v109 ^ 0xFDD24C60FE96F58FLL) + 0x22DB39F01690A71) >> 13) ^ 0x56980882112A060FLL)
       - (((((2 * v109) & 0xFBA498C1FD2DEB1ELL) + (v109 ^ 0xFDD24C60FE96F58FLL) + 0x22DB39F01690A71) >> 12) & 0xFEEFBDDABF3E0);
  v111 = v110 - 0x546A54E30FC0FB9ELL;
  v112 = v110 + (((v110 - 0x546A54E30FC0FB9ELL) >> 6) ^ 0x377BC9DB7FFF1FF9) + 1;
  v113 = v112
       + ((v111 >> 5) & 0x6F793B6FFFE3FF2)
       - 2 * ((v112 + ((v111 >> 5) & 0x6F793B6FFFE3FF2) + 0x1E141703FE468) & 0x4D29C22CE13CFLL ^ v112 & 1)
       + 0x741EB3DD930DF836;
  LODWORD(v111) = ((2 * v113) ^ 0x459C279C) - 2 * (((2 * v113) ^ 0x459C279C) & 0x26EA239E ^ (2 * v113) & 2) - 1494604900;
  LODWORD(v111) = ((v111 & 0x67198770 ^ 0xE72F6A27 | v111 & 0x18001008) - 1) ^ 0xCBAF637E;
  v114 = v74 ^ v83 ^ (((2 * v85) & 0x26010630) - v85 + 1822375013) ^ v97 ^ v99 & 0xFFFFFFF9 ^ 0x7C72955B ^ (((2 * v111) | 0x5A60A39A) - v111 + 1389342259) ^ v113;
  LODWORD(STACK[0x4E0]) = LODWORD(STACK[0x500]) ^ 0xF647B4EC;
  LOBYTE(v111) = *(_BYTE *)(STACK[0x688]
                          + ((*(_BYTE *)(STACK[0x688]
                                       + ((*(_BYTE *)(STACK[0x688] + ((*(_BYTE *)(STACK[0x688] + 13) + 10) & 0xF)) + 9) & 0xF))
                            + 3) & 0xF));
  v115 = ((((v111 + 11) & 0xF) - ((2 * (v111 + 11)) & 0x1A) - 3) ^ 0x79FEFD02)
       + 2 * ((((v111 + 11) & 0xF) - ((2 * (v111 + 11)) & 0x1A) - 3) ^ 0xFDu);
  v116 = (LODWORD(STACK[0x678]) + 33554136) | 0xE422A144;
  v117 = (v115 + 1261038279);
  LODWORD(STACK[0x394]) = LODWORD(STACK[0x640]) >> 3;
  LODWORD(v87) = ((*(unsigned __int8 *)STACK[0x688] << (v116 ^ 0xC4)) & 0xB2)
               + (*(unsigned __int8 *)STACK[0x688] ^ 0xFE6D7559);
  v118 = 1364176807 * v87 - ((-1566613682 * v87 - 1479329822) & 0xF97AAF72) + 1353118634;
  LODWORD(v87) = ((2 * (v118 ^ 0x94BDA38D)) & 0x3FFD7EFC) + (v118 ^ 0x8B431CF3);
  LODWORD(v87) = (((v87 - 536788862) >> 16) ^ 0x73EBEFD7)
               + v87
               + ((2 * ((v87 - 536788862) >> 16)) & 0x1DFAE);
  v119 = (v87 + 1813336235) >> 8;
  LODWORD(v87) = (v119 ^ 0xB9BBED73) + v87;
  v120 = v87 + ((2 * v119) & 0x177DAE6);
  v121 = v120 - ((2 * v120 + 1966408530) & 0xC938C8CA) - 1623792114;
  v122 = ((2 * v121) ^ 0xC938C8CA) - 2 * (((2 * v121) ^ 0xC938C8CA) & 0x1C4DFCB6 ^ (2 * v121) & 0x10) - 1672610650;
  v123 = (v122 & 0x7F199778 ^ 0x21119478)
       + (v122 & 0x7C098200 ^ 0x5C4E6285)
       - ((v122 & 0x7F199778 ^ 0x21119478) & 0x7C098200);
  LODWORD(v102) = v120 - 2 * ((v120 + 47947802) & 0x1B2AFE5D ^ v87 & 1) + 1577492086;
  LODWORD(v87) = (((2 * v102) ^ 0x3655FCB8) - ((2 * ((2 * v102) ^ 0x3655FCB8)) & 0x5AE91DDC) + 762613487) & 0x7F199778 ^ 0x59119300;
  LODWORD(v87) = (((2 * v87) | 0xE96FC3D0) - v87 + 189275672) ^ 0x90B7E400;
  v124 = ((2 * (_DWORD)v87) | 0x502A2E74) - v87;
  LODWORD(v87) = ((2 * (v118 ^ 0xE797A9E5 ^ v102)) & 0xFBB36F2E) + (v118 ^ 0xE797A9E5 ^ v102 ^ 0x7DD9B797);
  LODWORD(v87) = (((v87 - 2111420311) >> 16) ^ 0xEAFFFFB7)
               + v87
               + ((2 * ((v87 - 2111420311) >> 16)) & 0x1FF6E);
  LODWORD(v87) = (((v87 - 1759098702) >> 8) ^ 0x7FBCFE3E)
               + v87
               + (((v87 - 1759098702) >> 7) & 0x179FC7C);
  v125 = v87 - ((2 * v87 + 1062523338) & 0x8EC5516C) + 1728909723;
  v126 = (((2 * v125) ^ 0x8EC5516C) - 2 * (((2 * v125) ^ 0x8EC5516C) & 0x32EF096E ^ (2 * v125) & 2) + 1928268140) & 0x7F199778 ^ 0x4F110028;
  v127 = (167560514 - v126 + ((2 * v126) | 0xEC06757C)) ^ 0x7F0332BE;
  v128 = v87 - ((2 * v87 + 265752236) & 0x2F2C1FE0) + 1065457478;
  LODWORD(v113) = ((2 * (v118 ^ 0x6B2B5849 ^ v128)) & 0xF7BBEFB6) + (v118 ^ 0x6B2B5849 ^ v128 ^ 0xFBDDF7DB);
  LODWORD(v113) = (((v113 + 69339173) >> 16) ^ 0xE7FD797B)
                + v113
                + (((v113 + 69339173) >> 15) & 0xF2F6);
  LODWORD(v113) = (((v113 + 472157866) >> 8) ^ 0xE9EF77DF)
                + v113
                + (((v113 + 472157866) >> 7) & 0x1DEEFBE);
  LODWORD(v113) = v113 - ((2 * v113 + 74067350) & 0x12366FBA) + 995118760;
  v129 = (v113 ^ 0x91B37DD) - ((2 * (v113 ^ 0x91B37DD) + 276970722) & 0x84D15C7E) + 1252641968;
  LODWORD(v113) = (((2 * v129) ^ 0x84D15C7E) - ((2 * ((2 * v129) ^ 0x84D15C7E)) & 0x7839DA7C) + 2082270527) & 0x7F199778 ^ 0x3080428;
  v130 = v114 ^ v121 ^ v123 & 0xFF7FFF78 ^ v125 ^ (-1325927548 - (v127 | 0xB0F7F384) + (v127 | 0x4F080C7B)) ^ v129 ^ 0xA366C157 ^ (-128439306 - (_DWORD)v113 + ((2 * (_DWORD)v113) | 0xF4F8B90) + 3650);
  v131 = v117 > 0xC528E8C7;
  if (v115 < 0x79FEFDFF)
    v131 = 1;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)*(&off_100260750 + ((1491 * !v131) ^ LODWORD(STACK[0x678]))) - 12))(v116, v115, v117, 815300168, 1024203611, v130, 791420896, v124, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61);
}

uint64_t sub_1000DBDE4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a71;
  int a72;
  int a73;
  int v73;

  LODWORD(STACK[0x3DC]) ^= LODWORD(STACK[0x3AC]);
  LODWORD(STACK[0x254]) -= LODWORD(STACK[0x26C]);
  LODWORD(STACK[0x210]) = LODWORD(STACK[0x208]) - LODWORD(STACK[0x210]);
  LODWORD(STACK[0x26C]) = a71 - a72;
  LODWORD(STACK[0x3AC]) = a73 - LODWORD(STACK[0x200]);
  LODWORD(STACK[0x678]) = 23 * (a1 ^ 0xE622A1EE);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_100260750
                                                    + (int)((4 * ((v73 + 1) > 0xF)) | (8 * ((v73 + 1) > 0xF)) | a1 ^ 0xE622A556))
                                          - 8))(235930672);
}

uint64_t sub_1000DC644()
{
  int v0;
  int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  _BOOL4 v71;

  LODWORD(STACK[0x3A8]) ^= LODWORD(STACK[0x660]) ^ LODWORD(STACK[0x4A0]) ^ LODWORD(STACK[0x204]);
  LODWORD(STACK[0x4B0]) = LODWORD(STACK[0x24C]) - LODWORD(STACK[0x388]);
  v2 = (((v0 + 936178000) >> 8) ^ 0x256E77C7) + v0 + (((v0 + 936178000) >> 7) & 0xDCEF8E);
  v3 = v2 + (((v2 + 308181385) >> 5) ^ 0xA00054B2) - (((v2 + 308181385) >> 4) & 0xFFF569A) + 1;
  v4 = v3 - ((2 * v3 + 79448492) & 0x726705E) + 1978752261;
  v5 = ((2 * ((v4 ^ 0x393382F) - 1879573490)) & 0xDCFAFFF6) + (((v4 ^ 0x393382F) - 1879573490) ^ 0xEE7D7FFB);
  v6 = (((v5 + 293765125) >> 10) ^ 0xFFAEE3FB) + v5 + (((v5 + 293765125) >> 9) & 0x5DC7F6);
  v7 = ((v6 + 299080714) & 0xF3DD9BE6) + v6 + (((v6 + 299080714) >> 1) ^ 0xF9EECDF3);
  v8 = v7 - ((2 * v7 + 801741870) & 0x4D186A3A) + 1047593780;
  v9 = ((2 * ((v8 ^ 0x268C351D) + 1287124013)) & 0xD5CAFDBE) + (((v8 ^ 0x268C351D) + 1287124013) ^ 0x6AE57EDF);
  v10 = v9 + (((v9 - 1793425119) >> 13) ^ 0x18043448) - (((v9 - 1793425119) >> 12) & 0x7976E);
  v11 = (((v10 + 2098613465) >> 5) & 0x4DE9994) + (((v10 + 2098613465) >> 6) ^ 0xFE6F4CCA);
  v12 = v10 + v11 + 1;
  v13 = v12 + ((2 * v11 + 52520556) ^ 0x14019405) - ((2 * (2 * v11 + 52520556)) & 0xD7FCD7F4);
  v14 = v13 - 2 * ((v13 + 178613257) & 0x1194A65F ^ v12 & 1) + 2084180583;
  v15 = ((2 * ((v14 ^ 0x1194A65E) - 1282870125)) & 0xCDFDDDFA) + (((v14 ^ 0x1194A65E) - 1282870125) ^ 0xE6FEEEFD);
  v16 = (((v15 + 419500291) >> 8) ^ 0xFB7D7EF1) + v15 + (((v15 + 419500291) >> 7) & 0xFAFDE2);
  v17 = (((v16 + 495161874) >> 2) ^ 0x77F9FDDE) + v16 + (((v16 + 495161874) >> 1) & 0x6FF3FBBC);
  v18 = v17 - ((2 * v17 + 1259546728) & 0xB3EE8AE8) + 2139150760;
  v19 = ((2 * ((v18 ^ 0xD9F74574) + 707258702)) & 0xCFB2FFF0) + (((v18 ^ 0xD9F74574) + 707258702) ^ 0xE7D97FF8);
  v20 = (((v19 + 405176328) >> 13) ^ 0x3657BF0E) + v19 + (((v19 + 405176328) >> 12) & 0xF7E1C);
  v21 = (((v20 - 506543878) >> 3) ^ 0xDDCFCFBF) + v20 + (((v20 - 506543878) >> 2) & 0x3B9F9F7E);
  v22 = v21 - ((2 * v21 + 134079094) & 0x459882D4) + 650850981;
  LODWORD(STACK[0x208]) = v8;
  v23 = v22 ^ v8;
  LODWORD(STACK[0x200]) = v22;
  v24 = (v22 ^ 0xA94317E0) + ((v22 >> 11) ^ 0x9095016A) + ((v22 >> 10) & 0x3FADEE ^ 0xFFD5FF3B) + 1870649081;
  v25 = (((((2 * v24) & 0xBFFFDFCC) + (v24 ^ 0x5FFFEFE6) - 1610608614) >> 5) ^ 0x6DFCDF5F)
      + ((2 * v24) & 0xBFFFDFCC)
      + (v24 ^ 0x5FFFEFE6)
      + (((((2 * v24) & 0xBFFFDFCC) + (v24 ^ 0x5FFFEFE6) - 1610608614) >> 4) & 0xBF9BEBE);
  v26 = v25 - ((2 * v25 + 1678139766) & 0xC1D0B2CE) + 317426210;
  v27 = (v26 ^ 0xD4B48D9F) + ((v26 >> 12) ^ 0xCA5DCA0C) + 900693693 + ((2 * (v26 >> 12)) & 0x1EFD76 ^ 0xFFE56BEF);
  v28 = (((((2 * v27) & 0xFEF8FFEE) + (v27 ^ 0x7F7C7FF7) - 2138865655) >> 7) ^ 0xF06BFBFD)
      + ((2 * v27) & 0xFEF8FFEE)
      + (v27 ^ 0x7F7C7FF7)
      + (((((2 * v27) & 0xFEF8FFEE) + (v27 ^ 0x7F7C7FF7) - 2138865655) >> 6) & 0xD7F7FA);
  v29 = v28 - ((2 * v28 + 539953176) & 0x9A3F8426) + 1563903519;
  v30 = ((2 * ((v29 ^ 0xCD1FC213) - 2045107421)) & 0x378D6C96) + (((v29 ^ 0xCD1FC213) - 2045107421) ^ 0x9BC6B64B);
  v31 = (((v30 + 1681476021) >> 11) ^ 0x6BFFD7FF) + v30 + (((v30 + 1681476021) >> 10) & 0x3FAFFE);
  v32 = v31 + (((v31 - 130453066) >> 8) ^ 0x5004DCC0) - (((v31 - 130453066) >> 7) & 0x1F6467E) + 1;
  v33 = v32 + 2033713749 + (~(2 * v32 + 1349069290) | 0x5DF92541);
  v34 = ((2 * (v23 ^ v33)) ^ 0xAA863250) - ((2 * ((2 * (v23 ^ v33)) ^ 0xAA863250)) & 0x49C55DC) - 2108806417;
  v35 = ((v34 & 0x80450 ^ 0x2648C7) + (v34 & 0x7F119328) - 1) ^ 0x9B0F9886;
  v36 = STACK[0x608];
  v37 = LODWORD(STACK[0x5F0]) ^ LODWORD(STACK[0x608]);
  v38 = STACK[0x480];
  LODWORD(STACK[0x4A0]) = v37;
  v39 = ((((2 * (v38 ^ v37)) ^ 0xD1338870)
        - 2 * (((2 * (v38 ^ v37)) ^ 0xD1338870) & 0xD7580BE ^ (2 * (v38 ^ v37)) & 2)
        + 225804477) & v1 ^ 0xA69BA67B)
      - 1;
  v40 = STACK[0x430];
  v41 = STACK[0xB70];
  v42 = *(_QWORD *)(STACK[0xB70] + 8 * (0x8EA31169 % STACK[0x680]));
  v43 = (2 * v38) ^ 0x3462D6D6;
  v44 = STACK[0x5A0];
  v45 = (*(_QWORD *)(STACK[0xB70]
                   + 8
                   * (((((v42 ^ 0xC9C9C9C9C9C9C9C9) + 1547586649) ^ 0xFDB157BC8FFFDD3BLL)
                     + 0x24EA843700022C5
                     + ((2 * ((v42 ^ 0xC9C9C9C9C9C9C9C9) + 1547586649)) & 0xFB62AF791FFFBA76))
                    % STACK[0x5A0])) ^ 0xC9C9C9C9C9C9C9C9)
      + 2207661067u;
  v46 = (*(_QWORD *)(STACK[0xB70]
                   + 8
                   * (((v45 ^ 0xCFFFBF67EB671B32) + 0x300040981498E4CELL + ((2 * v45) & 0x9FFF7ECFD6CE3664))
                    % STACK[0x5A0])) ^ 0xC9C9C9C9C9C9C9C9)
      + 1300402492;
  v47 = ((v46 ^ 0x7EF7A94FFFFEFDDFLL) - 0x7EF7A94FFFFEFDDFLL + ((2 * v46) & 0xFDEF529FFFFDFBBELL)) % STACK[0x5A0];
  STACK[0x660] = STACK[0xB70];
  v48 = (*(_QWORD *)(v41 + 8 * v47) ^ 0xC9C9C9C9C9C9C9C9) + 214590498;
  LODWORD(STACK[0x5A0]) = (((v43 - ((2 * v43) & 0x362A8980) - 1693104960) & 0xD111538 ^ 0xD4771AB)
                         + ((v43 - ((2 * v43) & 0x362A8980) - 1693104960) & 0x72088240 ^ 0x20000201)
                         + 2147483646) & 0x7F1B9778;
  LODWORD(STACK[0x24C]) = v40 ^ 0x1C30839F;
  LODWORD(STACK[0x204]) = v14;
  LODWORD(v48) = ((v48 ^ 0xE79DD77BFDEFFF5FLL) + 0x18622884021000A1 + ((2 * v48) & 0xCF3BAEF7FBDFFEBELL)) % v44;
  v49 = ((v48 - ((2 * v48) & 0x131C4CA2) - 1987172783) ^ 0x6871FDE9)
      + 1604957643
      + ((2 * (v48 - ((2 * v48) & 0x131C4CA2) - 1987172783)) & 0xC3FFB770 ^ 0x31C0420);
  LODWORD(STACK[0x5E0]) = LODWORD(STACK[0x510]) ^ 0xF044B00B;
  LODWORD(STACK[0x3B8]) = v35;
  LODWORD(STACK[0x5D0]) = (v39 & 0x7081778 ^ 0x56C145B | v39 & 0x78118000) - 1;
  v50 = (LODWORD(STACK[0x678]) - 6459973) - 4288508312;
  v51 = *(_QWORD *)(STACK[0x660] + 8 * v50) ^ 0xC9C9C9C9C9C9C9C9;
  v52 = 0xC76BB339E9ED63B1 * v51 - ((0xED76673D3DAC762 * v51) & 0x2B2B6343A0A2CD30) + 0x1595B1A1D0516698;
  v53 = ((2 * ((v52 ^ 0xD0E8AC51DC95D622) + v50)) & 0xF6BFCE795BFF6FFELL)
      + (((v52 ^ 0xD0E8AC51DC95D622) + v50) ^ 0x7B5FE73CADFFB7FFLL);
  v54 = v53
      + (((v53 - 0x7B5FE73CADFFB7FFLL) >> 32) ^ 0x1582248065440A08)
      - (((v53 - 0x7B5FE73CADFFB7FFLL) >> 31) & 0x13577EBEELL);
  v55 = v54
      + (((v54 + 0x6F1DF442ECBC3DF9) >> 16) ^ 0xD6B7EFFBFFFEEE7ELL)
      + (((v54 + 0x6F1DF442ECBC3DF9) >> 15) & 0x1DFF7FFFDDCFCLL);
  v56 = v55
      + (((v55 - 0x6799FBB91342B085) >> 8) ^ 0xE3DF7AFF9BE92FE7)
      + (((v55 - 0x6799FBB91342B085) >> 7) & 0x1BEF5FF37D25FCELL)
      + 1;
  v57 = v56 - ((2 * v56 + 0x690D128EA1A83F26) & 0xDF87C0151023E418) - 0x5BB596AE2719EE61;
  LODWORD(v56) = ((v56 - ((2 * (_DWORD)v56 - 1582809306) & 0x1023E418) - 656010849) >> 1) & 0x7FFBE43E ^ 0x4C63D106;
  v58 = (v57 ^ 0xEFC3E00A8811F20CLL)
      - ((2 * (v57 ^ 0xEFC3E00A8811F20CLL) + 0x45D043FB4117B934) & 0x7FFF4E1498E50982)
      - 0x1D1836F813019EA5;
  v59 = ((2 * ((v52 ^ 0x2A6A16AB9C23E259 ^ v58) + v50)) & 0xBAF7F6BECB6CA98CLL)
      + (((v52 ^ 0x2A6A16AB9C23E259 ^ v58) + v50) ^ 0xDD7BFB5F65B654C6);
  v60 = v59
      + (((v59 + 0x228404A09A49AB3ALL) >> 32) ^ 0xC90820221148430)
      - (((v59 + 0x228404A09A49AB3ALL) >> 31) & 0x1BDD6F79ELL);
  v61 = v60
      + (((v60 + 0x15F3829E7935270ALL) >> 16) ^ 0xF3F07DFB7EEE6F7BLL)
      + (((v60 + 0x15F3829E7935270ALL) >> 15) & 0xFBF6FDDCDEF6);
  v62 = v61
      + (((v61 + 0x220304A2FA46B78FLL) >> 8) ^ 0xAAFF7BA7BFFBF77ELL)
      + (((v61 + 0x220304A2FA46B78FLL) >> 7) & 0x1FEF74F7FF7EEFCLL);
  v63 = v62 + 1 - 2 * ((v62 + 0x170388FB3A4AC011) & 0x11582A01D61061A5 ^ (v62 + 1) & 4) + 0x85BB2FD105B21B1;
  LODWORD(v59) = ((v63 >> 1) & 0x7FFBE43E ^ 0x2CCB2420)
               - ((2 * ((v63 >> 1) & 0x7FFBE43E ^ 0x2CCB2420)) & 0xEB724034)
               - 172414182;
  LODWORD(v59) = ((v59 & 0xD8008080 ^ 0xC8009081 | v59 & 0x27FF657E) - 1) ^ v63;
  v64 = (v63 ^ 0x91582A01D61061A1)
      - ((2 * (v63 ^ 0x91582A01D61061A1) + 0x5D043FB4117B934) & 0x2454B4C2D55DDC82)
      + 0x35127C5F0B3ACADBLL;
  v65 = ((2 * ((v52 ^ 0x87BFEBC0BAFF88D9 ^ v64) + v50)) & 0x57F6DDCEDB53FDD8)
      + (((v52 ^ 0x87BFEBC0BAFF88D9 ^ v64) + v50) ^ 0x2BFB6EE76DA9FEECLL);
  v66 = v65
      + (((v65 - 0x2BFB6EE76DA9FEECLL) >> 32) ^ 0x8430520420102094)
      - (((v65 - 0x2BFB6EE76DA9FEECLL) >> 31) & 0x1BFDFBED6);
  v67 = v66
      + (((v66 + 0x4FD43F147245E080) >> 16) ^ 0xFAEFFD69CFF3623DLL)
      + (((v66 + 0x4FD43F147245E080) >> 15) & 0x1FAD39FE6C47ALL);
  v68 = v67
      + (((v67 + 0x54E441AAA2527E43) >> 8) ^ 0xFFFD7EBBDF6F7434)
      + (((v67 + 0x54E441AAA2527E43) >> 7) & 0x1FAFD77BEDEE868)
      + 1;
  LODWORD(v52) = (((v68 - 1025308146) >> 1) - ((v68 - 1025308146) & 0x73711906) + 968395907) & 0x7FFBE43E ^ 0x31FBC414;
  v69 = (v68 - 1025308146) ^ 0x7EF8C7DA ^ (v52 - ((2 * v52) & 0xED770818) + 1992001484);
  v70 = v36 ^ 0x27DDD98B ^ v57 ^ (((2 * (_DWORD)v56) & 0x47A2AA5C) - (_DWORD)v56 - 600921519) ^ v59 ^ 0x62269185 ^ (v69 - ((2 * v69) & 0x243059A6) - 1843909421);
  v71 = v49 > 0x41A99184;
  if (v49 < 0x41A99183)
    v71 = 1;
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)*(&off_100260750
                                                                      + ((1294 * !v71) ^ LODWORD(STACK[0x678])))
                                                            - 12))(v70, 0xA2E821FDA08BDC9ALL);
}

uint64_t sub_1000DDD54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a64;
  int a66;
  int a68;
  int a69;
  int a70;
  int a71;
  int a72;
  int a73;
  int a74;
  int a75;
  int a76;
  int a77;
  int v77;
  int v78;
  int v79;
  int v80;

  LODWORD(STACK[0x250]) = LODWORD(STACK[0x410]) ^ 0x9BE2957A;
  LODWORD(STACK[0x388]) = LODWORD(STACK[0x218]) - LODWORD(STACK[0x220]);
  v79 = LODWORD(STACK[0x3B8]) - a64 + 1209439824;
  LODWORD(STACK[0x3B8]) = a72 - a74;
  v80 = a68 ^ LODWORD(STACK[0x5B0]) ^ a69 ^ a71 ^ a70 ^ LODWORD(STACK[0x640]) ^ LODWORD(STACK[0x394]) ^ a73 ^ LODWORD(STACK[0x20C]) ^ a6 ^ LODWORD(STACK[0x208]) ^ LODWORD(STACK[0x200]) ^ a76 ^ v79;
  LODWORD(STACK[0x398]) ^= LODWORD(STACK[0x640]) ^ v77 ^ LODWORD(STACK[0x204]) ^ a77 ^ a75 ^ (a66 - 1);
  LODWORD(STACK[0x660]) = v80;
  LODWORD(STACK[0x678]) = v80 ^ 0xACFEF0BC;
  return ((uint64_t (*)(void))*(&off_100260750
                             + ((44 * (STACK[0x680] <= v78 - 1089807004)) ^ ((a8 + 6458996) | 0x483))))();
}

void sub_1000DE6D4()
{
  JUMPOUT(0x1000DDE8CLL);
}

uint64_t sub_1000DE700(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  _BOOL4 v9;

  LODWORD(STACK[0x394]) = LODWORD(STACK[0x228]) - LODWORD(STACK[0x384]);
  v4 = LODWORD(STACK[0x5A0]) ^ LODWORD(STACK[0x5F0]) ^ LODWORD(STACK[0x5D0]) ^ LODWORD(STACK[0x3B8]);
  LODWORD(STACK[0x218]) = v4;
  LODWORD(STACK[0x384]) = v4 ^ 0x420E6C66;
  v5 = *(unsigned __int8 *)(STACK[0x688]
                          + ((*(_BYTE *)(STACK[0x688]
                                       + ((*(_BYTE *)(STACK[0x688] + ((*(_BYTE *)(STACK[0x688] + 8) + 9) & 0xF)) + 9) & 0xF))
                            + 5) & 0xF)) ^ 0xFFFFFFBF;
  v6 = v5 & 0xFFFFFF97 ^ 0x7B ^ ((v5 & 0x18 | 0xFFFFFFE3) - (v5 & 0xFFFFFF80 | 0x1C) + 28);
  v7 = ((v6 | 0x4B) - (v6 | 0xB4) - 76) ^ 0xDC;
  v8 = (v7 ^ 0xF7B7FCC5) + ((2 * v7) & 0x18A) + 1425125060;
  v9 = v8 > 0x4CA9AB8A;
  if (v8 < 0x4CA9AB89)
    v9 = 1;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((1043 * !v9) ^ a4)) - 12))();
}

uint64_t sub_1000DFCF4()
{
  int v0;
  int v1;

  LODWORD(STACK[0x220]) = LODWORD(STACK[0x3F0]) ^ 0x84102664;
  LODWORD(STACK[0x680]) = v0 ^ 0x46E;
  return ((uint64_t (*)(uint64_t))*(&off_100260750 + ((733 * ((v1 + 1) > 0xF)) ^ (v0 - 487))))(1536300254);
}

void sub_1000E05F8()
{
  JUMPOUT(0x1000E0618);
}

uint64_t sub_1000E0664(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(void);

  v7 = (v3 - 429);
  v8 = ((unint64_t)&STACK[0x728] ^ 0x6DFFFDBBEB56AFDELL)
     - 0x6DFFFDBBEB56AFDELL
     + ((2 * (_QWORD)&STACK[0x728]) & 0xDBFFFB77D6AD5FB8);
  STACK[0x5E0] = ((2 * (v8 % 0x25)) & 0x36)
               + ((v8 % 0x25) ^ v7 ^ 0xF9E8FFF6EFE7F1DCLL)
               + 0x617000910180A75;
  v9 = STACK[0x8A0];
  v10 = (uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (int)v7) - (((((_DWORD)v7 - 707) | 0x470u) + 217) ^ 0x6C5));
  STACK[0x5C0] = STACK[0x8A0];
  STACK[0x678] = STACK[0xA48];
  STACK[0x688] = (unint64_t)&STACK[0xBB0] + v9;
  STACK[0x5D0] = (unint64_t)&STACK[0xBB0] + v9 + 16;
  LODWORD(STACK[0x660]) = v5;
  STACK[0x680] = v4;
  STACK[0x608] = a3;
  return v10();
}

uint64_t sub_1000E07B8()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  LODWORD(STACK[0x640]) = v1;
  STACK[0x15C8] = 0xC7C33B375ECB8BE8;
  LODWORD(STACK[0x728]) = dword_100277CE8 + v4;
  v6 = ((((v5 - 192) | 0x4E4EC8390FF411A2) - (v5 - 192) + ((v5 - 192) & 0xB1B137C6F00BEE58)) ^ 0xA35A5FA2419DC75CLL)
     * v2;
  v7 = *(unsigned int *)aHAwAwAwAwAwAwA;
  *(_DWORD *)(v5 - 188) = v6 ^ (v0 + 624098254) ^ 0x74;
  *(_DWORD *)(v5 - 184) = v6 ^ (v0 + 624098254) ^ 0x2B;
  *(_DWORD *)(v5 - 180) = v0 + 624098254 + v6;
  *(_QWORD *)(v5 - 176) = v3 - v6;
  *(_QWORD *)(v5 - 168) = v7 ^ v6;
  *(_DWORD *)(v5 - 160) = v6 + v0 + 1123495836;
  *(_DWORD *)(v5 - 156) = v6;
  v8 = sub_1001DFC88(v5 - 192);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_100260750 + *(int *)(v5 - 192)) - 8))(v8);
}

uint64_t sub_1000E08A0()
{
  int v0;
  uint32_t v1;

  STACK[0x678] = (unint64_t)malloc_type_malloc(STACK[0x5E0], 0xC5732911uLL);
  v1 = arc4random();
  *(_DWORD *)&aHAwAwAwAwAwAwA[4] = v1 + 1465998909 - ((2 * v1) & 0xAEC2BC7A);
  *(_DWORD *)&aHAwAwAwAwAwAwA[8] = ((1812433253
                                   * (*(_DWORD *)&aHAwAwAwAwAwAwA[4] ^ 0x57615E3C ^ (*(_DWORD *)&aHAwAwAwAwAwAwA[4] >> 30))) ^ 0xBDFED639)
                                 + ((1477382858
                                   * (*(_DWORD *)&aHAwAwAwAwAwAwA[4] ^ 0x57615E3C ^ (*(_DWORD *)&aHAwAwAwAwAwAwA[4] >> 30))) & (v0 ^ 0x7BFDAABF))
                                 - 1721595899
                                 - ((2
                                   * (((1812433253
                                      * (*(_DWORD *)&aHAwAwAwAwAwAwA[4] ^ 0x57615E3C ^ (*(_DWORD *)&aHAwAwAwAwAwAwA[4] >> 30))) ^ 0xBDFED639)
                                    + ((1477382858
                                      * (*(_DWORD *)&aHAwAwAwAwAwAwA[4] ^ 0x57615E3C ^ (*(_DWORD *)&aHAwAwAwAwAwAwA[4] >> 30))) & (v0 ^ 0x7BFDAABF)))
                                   - 2080222320) & 0xAEC2BC7A);
  return ((uint64_t (*)(void))*(&off_100260750 + (v0 ^ 0x4DE)))();
}

void sub_1000E09C8()
{
  JUMPOUT(0x1000E0960);
}

void sub_1000E09E8()
{
  JUMPOUT(0x1000E09F4);
}

uint64_t sub_1000E0BCC@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, int a5@<W8>)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;

  v9 = v6 & 0x80000000;
  v10 = *(_DWORD *)(a2 + 4 * (a3 + v5 + (a5 + 92)));
  v11 = (((v8 - (v10 & 0x7FFFFFFE ^ 0x592192A4 | v8) + (v10 & 0x7FFFFFFE ^ 0x592192A4 | 0x32CE4286)) ^ 0x548F2AF) - 1) ^ 0x39C67CB0;
  *(_DWORD *)(a2 + 4 * (a3 + v5) + 3456) = *(_DWORD *)(a2 + 4 * (a3 + v5) + 5044) ^ *((_DWORD *)&STACK[0x15C8]
                                                                                    + ((v10 & 1) == 0)) ^ (((v11 | (v7 + (v9 ^ 0xBFDDEF53) - 514) ^ 0xABDDED51) - ((2 * v11) & 0x4C305472) - 1508365767) >> 1) ^ 0xDC79EF4;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((111 * (v5 + 1 != a4 + 3)) ^ a5)) - 12))();
}

uint64_t sub_1000E0CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  int8x16_t v7;
  const float *v8;
  int8x16_t v9;
  int8x16_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int32x4_t v14;
  int8x16_t v15;

  v8 = (const float *)&aHAwAwAwAwAwAwA[912];
  v9 = (int8x16_t)vld1q_dup_f32(v8);
  v10.i64[0] = 0x8000000080000000;
  v10.i64[1] = 0x8000000080000000;
  v11.i64[0] = -1;
  v11.i64[1] = -1;
  v7.i64[0] = *(_QWORD *)&aHAwAwAwAwAwAwA[916];
  v7.i32[2] = *(_DWORD *)&aHAwAwAwAwAwAwA[924];
  v12 = vextq_s8(v9, v7, 0xCuLL);
  v13 = v7;
  v13.i32[3] = *(_DWORD *)&aHAwAwAwAwAwAwA[928];
  v14 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32((int32x4_t)vorrq_s8(vorrq_s8(veorq_s8(vandq_s8(v13, (int8x16_t)vdupq_n_s32(0x1BD31FACu)), (int8x16_t)vdupq_n_s32(0x9C20081u)), vandq_s8(v13, (int8x16_t)vdupq_n_s32(0x642CE052u))), vandq_s8((int8x16_t)vaddq_s32((int32x4_t)veorq_s8(vorrq_s8(vandq_s8(v12, v10), (int8x16_t)vdupq_n_s32(0x3F7C12F8u)), (int8x16_t)vdupq_n_s32(0xC0A4CD98)), vdupq_n_s32(0x435F0D18u)), v10)), v11), (int8x16_t)vdupq_n_s32(0x5EA35EBCu));
  v15.i32[0] = *(_DWORD *)(v6 + 4 * ((aHAwAwAwAwAwAwA[916] & 1) == 0));
  v15.i32[1] = *(_DWORD *)(v6 + 4 * ((aHAwAwAwAwAwAwA[920] & 1) == 0));
  v15.i32[2] = *(_DWORD *)(v6 + 4 * (*(unsigned int *)&aHAwAwAwAwAwAwA[924] & ((v5 + 184) ^ 0x418) ^ 1));
  v15.i32[3] = *(_DWORD *)(v6 + 4 * ((aHAwAwAwAwAwAwA[928] & 1) == 0));
  *(int8x16_t *)&aHAwAwAwAwAwAwA[912] = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)&aHAwAwAwAwAwAwA[4], v15), (int8x16_t)vdupq_n_s32(0x41F5D8ACu)), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsubq_s32(v14, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v14, v14), (int8x16_t)vdupq_n_s32(0x7CF94D10u))), vdupq_n_s32(0x3E7CA688u)), 1uLL));
  return ((uint64_t (*)(void))(*(_QWORD *)(a5 + 8 * v5) - 4))();
}

void sub_1000E0E3C()
{
  JUMPOUT(0x1000E0D5CLL);
}

uint64_t sub_1000E0E48@<X0>(uint64_t a1@<X4>, _DWORD *a2@<X5>, int a3@<W8>)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (a2[623] & 0x80000000) + ((a3 + 1689414326) & 0x9B4D97FD) - 1290167109;
  v4 = ((*a2 & 0x477AE7AA ^ 0x457847A9 | *a2 & 0x38851854) - 1) ^ 0xEA8B6B81;
  v5 = (-651567013 - (v4 | 0xD929E05B) + (v4 | 0x26D61FA4)) ^ 0xDE446DB1 | ((v3 & 0x8110A088 ^ 0x80E45460)
                                                                          + (v3 ^ 0x318A298)
                                                                          - ((v3 ^ 0x318A298) & 0x80010110)) ^ 0x31F4F4E8;
  a2[623] = a2[396] ^ *((_DWORD *)&STACK[0x15C8] + ((*a2 & 1) == 0)) ^ ((v5 - ((2 * v5) & 0xADF6EA2) - 2056276143) >> 1) ^ 0x1C7C5040;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((58 * (LODWORD(STACK[0x728]) > 0x26F)) ^ a3)) - 8))();
}

uint64_t sub_1000E0F98@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  LODWORD(STACK[0x728]) = 0;
  v3 = LODWORD(STACK[0x728])++;
  *(_DWORD *)(v1 + 3304) = v3 + 73583858;
  v4 = (*(_DWORD *)aHAwAwAwAwAwAwA - 1809948821);
  v5 = 516615401 * (((~(v2 - 192) | 0x967625B7CF70BE42) + ((v2 - 192) | 0x6989DA48308F41BDLL)) ^ 0xE135523343EC478ELL);
  *(_QWORD *)(v2 - 160) = v5 + 3179136936u;
  *(_DWORD *)(v2 - 152) = (a1 - 185256850) ^ v5;
  *(_DWORD *)(v2 - 148) = v5 + a1 + 1249268378 + 66;
  *(_DWORD *)(v2 - 192) = v5 + 1;
  *(_DWORD *)(v2 - 188) = a1 + 1249268378 - v5;
  *(_DWORD *)(v2 - 168) = v5 ^ (a1 + 1249268378) ^ 0x28;
  *(_QWORD *)(v2 - 176) = v4 ^ v5;
  v6 = sub_1000B1B88(v2 - 192);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_100260750 + *(int *)(v2 - 184)) - 12))(v6);
}

uint64_t sub_1000E164C()
{
  unsigned int v0;
  unsigned int v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  _BYTE *v16;
  unint64_t v17;

  v7 = STACK[0x608];
  if (v1 >= v2)
    v8 = *(_DWORD *)aHAwAwAwAwAwAwA + 1;
  else
    v8 = v4;
  *(_DWORD *)aHAwAwAwAwAwAwA = v8;
  v9 = v0 ^ (v0 >> 11);
  v10 = (v5 ^ (v9 << 7)) - ((2 * (v5 ^ (v9 << 7))) & 0x59A72E00) + ((v3 - 217) ^ 0xACD392B3);
  v11 = ((v10 & 0x9D2C5680 ^ 0xDE003740)
       + (v10 & 0x992C5200 ^ 0x1FCC025)
       - ((v10 & 0x9D2C5680 ^ 0xDE003740) & 0x992C5200)) ^ v9;
  v12 = ((v11 << 15) ^ 0xA0B98000) - ((2 * ((v11 << 15) ^ 0xA0B98000)) & 0x2AB10000) + 358136438;
  v13 = ((((v12 & 0xEFC60000 ^ 0x82800000)
         + (v12 & 0x6E800000 ^ 0x6C0812E2)
         - ((v12 & 0xEFC60000 ^ 0x82800000) & 0x6E800000)) ^ 0xA7051BD9)
       - 1) ^ v11;
  v14 = v13 ^ (v13 >> 18) ^ 0xB341BA7C;
  v15 = STACK[0x640];
  v16 = (_BYTE *)(v7 + LODWORD(STACK[0x640]) - 1921022209 + ((v3 - 1741) | 0x254u));
  *v16 = (((v3 + 39) ^ 0xB3) + (v14 ^ 0x83) - ((2 * (v14 ^ 0x83)) & 0x26) + 76) ^ 0x1F;
  LODWORD(v16) = 1755343967
               * ((*(_DWORD *)(qword_1002789B8 + (int)(dword_100278BC0 & 0xC7090E2C)) ^ v16) & 0x7FFFFFFF);
  v17 = 1755343967 * (v16 ^ (v16 >> 16));
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((13
                                          * (v15
                                           - ((byte_100217CA0[v17 >> 24] ^ byte_1002245B0[v17 >> 24] ^ byte_100218740[(v17 >> 24) + 5] ^ v17 ^ (79 * BYTE3(v17))) != ((((v3 + 39) ^ 0xB3) + (v14 ^ 0x83) - ((2 * (v14 ^ 0x83)) & 0x26) + 76) ^ 0x1F)) == 1921021612)) ^ (v3 - 217)))
                            - 8))();
}

uint64_t sub_1000E17A0()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (((((v0 + 108) | 0x481) - 920) * (STACK[0x848] != 0)) ^ v0)) - 8))();
}

uint64_t sub_1000E17D4@<X0>(unint64_t a1@<X0>, int a2@<W8>)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(void);

  v5 = 3 * (a2 ^ 0x204u);
  v6 = ((unint64_t)&STACK[0xA44] ^ 0x7FBBFFFE7FEFFFFCLL)
     - 0x7FBBFFFE7FEFFFFCLL
     + ((2 * (_QWORD)&STACK[0xA44]) & 0xFF77FFFCFFDFFFF8);
  STACK[0x608] = ((v6 % 0x25) ^ 0xBDFFCEAF9FBFFFFFLL) + 2 * (v6 % 0x25) + v5 + 0x42003150603FFF96;
  v7 = STACK[0x8A0];
  STACK[0x678] = STACK[0x8F0];
  STACK[0x5D0] = v7;
  STACK[0x688] = (unint64_t)&STACK[0xBB0] + v7;
  STACK[0x5E0] = (unint64_t)&STACK[0xBB0] + v7 + 16;
  v8 = *(uint64_t (**)(void))(v4
                           + 8
                           * (int)((208
                                  * ((((_DWORD)v5 - 1487276188) & 0x58A60EED ^ ((_DWORD)v5 + 1672702539)) != 1672702987)) ^ v5));
  LODWORD(STACK[0x660]) = v3;
  STACK[0x680] = v2;
  STACK[0x640] = a1;
  return v8();
}

uint64_t sub_1000E1914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  LODWORD(STACK[0x668]) = a6;
  STACK[0x15D0] = 0x190E3877800688A8;
  LODWORD(STACK[0xA44]) = dword_100277CE8 + v9;
  v11 = *(unsigned int *)aHAwAwAwAwAwAwA;
  v12 = ((v10 - 192) ^ 0xED14979B4E69D6FELL) * v7;
  *(_DWORD *)(v10 - 180) = v6 - 2107019248 + v12;
  *(_DWORD *)(v10 - 188) = v12 ^ (v6 - 2107019248) ^ 0x1F;
  *(_DWORD *)(v10 - 184) = (v6 - 2107019306) ^ v12;
  *(_DWORD *)(v10 - 160) = v12 + v6 + 1123495836;
  *(_DWORD *)(v10 - 156) = v12;
  *(_QWORD *)(v10 - 176) = v11 - v12;
  *(_QWORD *)(v10 - 168) = v12 ^ v8;
  v13 = sub_1001DFC88(v10 - 192);
  return ((uint64_t (*)(uint64_t))*(&off_100260750 + *(int *)(v10 - 192)))(v13);
}

uint64_t sub_1000E19CC()
{
  int v0;
  int v1;
  uint32_t v2;

  v1 = (v0 - 649) | 0xA0;
  STACK[0x678] = (unint64_t)malloc_type_malloc(STACK[0x608], 0xC5732911uLL);
  v2 = arc4random();
  *(_DWORD *)&aHAwAwAwAwAwAwA[4] = v2 + 1465998909 - ((v2 << (((v0 + 119) | 0xA0) ^ 0xE5)) & 0xAEC2BC7A);
  *(_DWORD *)&aHAwAwAwAwAwAwA[8] = ((1812433253
                                   * (*(_DWORD *)&aHAwAwAwAwAwAwA[4] ^ 0x57615E3C ^ (*(_DWORD *)&aHAwAwAwAwAwAwA[4] >> 30))) ^ 0xBD73FDBF)
                                 + (((*(_DWORD *)&aHAwAwAwAwAwAwA[4] ^ 0x57615E3C ^ (*(_DWORD *)&aHAwAwAwAwAwAwA[4] >> 30))
                                   * (v1 ^ 0x580F162E)) & 0x7AE7FB7E)
                                 - 1712496513
                                 - ((2
                                   * (((1812433253
                                      * (*(_DWORD *)&aHAwAwAwAwAwAwA[4] ^ 0x57615E3C ^ (*(_DWORD *)&aHAwAwAwAwAwAwA[4] >> 30))) ^ 0xBD73FDBF)
                                    + (((*(_DWORD *)&aHAwAwAwAwAwAwA[4] ^ 0x57615E3C ^ (*(_DWORD *)&aHAwAwAwAwAwAwA[4] >> 30))
                                      * (v1 ^ 0x580F162E)) & 0x7AE7FB7E))
                                   - 2062023548) & 0xAEC2BC7A);
  return ((uint64_t (*)(void))*(&off_100260750 + v1))();
}

void sub_1000E1AF4()
{
  JUMPOUT(0x1000E1A90);
}

uint64_t sub_1000E1B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int8x16_t v18;

  v8 = (int8x16_t)vld1q_dup_f32((const float *)&aHAwAwAwAwAwAwA[4]);
  v9.i64[0] = 0x8000000080000000;
  v9.i64[1] = 0x8000000080000000;
  v10.i64[0] = 0x1000000010;
  v10.i64[1] = 0x1000000010;
  v7.i64[0] = *(_QWORD *)&aHAwAwAwAwAwAwA[8];
  v7.i32[2] = *(_DWORD *)&aHAwAwAwAwAwAwA[16];
  v11 = vextq_s8(v8, v7, 0xCuLL);
  v12 = v7;
  v12.i32[3] = *(_DWORD *)&aHAwAwAwAwAwAwA[20];
  v13 = (int8x16_t)vaddq_s32((int32x4_t)veorq_s8((int8x16_t)vaddq_s32((int32x4_t)vandq_s8(v11, v9), vdupq_n_s32(0xB3EA3995)), (int8x16_t)vdupq_n_s32(0x4C45C348u)), vdupq_n_s32(0x1FB0B5D9u));
  v14 = veorq_s8(vandq_s8(v12, (int8x16_t)vdupq_n_s32(0x7FFFFFFEu)), (int8x16_t)vdupq_n_s32(0xD3615D60));
  v15 = (int8x16_t)vsubq_s32((int32x4_t)vandq_s8(v14, (int8x16_t)vdupq_n_s32(0x3B2870EEu)), (int32x4_t)vorrq_s8(v14, (int8x16_t)vdupq_n_s32(0xBB2870EF)));
  v16 = (int32x4_t)veorq_s8(vorrq_s8(vandq_s8(v13, v9), v15), (int8x16_t)vdupq_n_s32(0x40D78C4Du));
  v17 = (int32x4_t)veorq_s8(vandq_s8((int8x16_t)v16, (int8x16_t)vdupq_n_s32(0x42618E98u)), vandq_s8(v15, v10));
  v18.i32[0] = *((_DWORD *)&STACK[0x15D0] + (~*(_DWORD *)&aHAwAwAwAwAwAwA[8] & 1));
  v18.i32[1] = *((_DWORD *)&STACK[0x15D0] + (~*(_DWORD *)&aHAwAwAwAwAwAwA[12] & 1));
  v18.i32[2] = *((_DWORD *)&STACK[0x15D0] + (~*(_DWORD *)&aHAwAwAwAwAwAwA[16] & 1));
  v18.i32[3] = *((_DWORD *)&STACK[0x15D0] + (~*(_DWORD *)&aHAwAwAwAwAwAwA[20] & 1));
  *(int8x16_t *)&aHAwAwAwAwAwAwA[4] = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)&aHAwAwAwAwAwAwA[4 * (v6 - 925) - 1672], v18), (int8x16_t)vdupq_n_s32(0xE1364FEC)), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsubq_s32(v16, vaddq_s32(v17, v17)), vdupq_n_s32(0xC2618E89)), 1uLL));
  return ((uint64_t (*)(void))(*(_QWORD *)(a6 + 8 * (v6 - 1074)) - 4))();
}

void sub_1000E25C0()
{
  JUMPOUT(0x1000E24B4);
}

uint64_t sub_1000E25C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;

  v12 = (unsigned int *)(a7 + 4 * (v9 + a8));
  v13 = (((v10 & 0x80000000) - 1276495467) ^ 0x4C45C348) + ((166 * (v8 ^ 0x335)) ^ 0x1FB0B6E7);
  v14 = v9 + 1;
  v15 = *(_DWORD *)(a7 + 4 * (v14 + a8));
  v16 = ((v15 & 0x7FFFFFFE ^ 0xD3615D60) & 0x3B2870EE) - (v15 & 0x7FFFFFFE ^ 0xD3615D60 | 0xBB2870EF);
  *v12 = v12[397] ^ *((_DWORD *)&STACK[0x15D0] + ((v15 & 1) == 0)) ^ ((((v16 | v13 & 0x80000000) ^ 0x40D78C4D)
                                                                     - 2
                                                                     * (((v16 | v13 & 0x80000000) ^ 0x40D78C4D) & 0x42618E98 ^ v16 & 0x10)
                                                                     - 1033793911) >> 1) ^ 0xE1364FEC;
  return ((uint64_t (*)(void))(*(_QWORD *)(a6 + 8 * ((v14 == v11 + 3) | v8)) - 4))();
}

uint64_t sub_1000E26C8@<X0>(uint64_t a1@<X5>, int a2@<W8>)
{
  uint64_t v2;
  int8x16_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;

  v4 = (int8x16_t)vld1q_dup_f32((const float *)&aHAwAwAwAwAwAwA[912]);
  v5.i64[0] = 0x8000000080000000;
  v5.i64[1] = 0x8000000080000000;
  v6.i64[0] = 0x1200000012;
  v6.i64[1] = 0x1200000012;
  v3.i64[0] = *(_QWORD *)&aHAwAwAwAwAwAwA[916];
  v3.i32[2] = *(_DWORD *)&aHAwAwAwAwAwAwA[924];
  v7 = vextq_s8(v4, v3, 0xCuLL);
  v8 = v3;
  v8.i32[3] = *(_DWORD *)&aHAwAwAwAwAwAwA[928];
  v9 = vandq_s8(v7, v5);
  v10 = (int32x4_t)veorq_s8(vandq_s8(v8, (int8x16_t)vdupq_n_s32(0x7FFFFFFEu)), (int8x16_t)vdupq_n_s32(0x5765487Au));
  v11 = (int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v10, v10), (int8x16_t)vdupq_n_s32(0x285684A0u)), v10), vdupq_n_s32(0x6BD4BDAFu));
  v12 = (int32x4_t)veorq_s8(vorrq_s8(v11, v9), (int8x16_t)vdupq_n_s32(0x6BD0ABE9u));
  v13 = (int32x4_t)veorq_s8(vandq_s8((int8x16_t)v12, (int8x16_t)vdupq_n_s32(0x50A3B87Au)), vandq_s8(v11, v6));
  v14.i32[0] = *(_DWORD *)(v2 + 4 * ((aHAwAwAwAwAwAwA[916] & 1) == 0));
  v14.i32[1] = *(_DWORD *)(v2 + 4 * ((aHAwAwAwAwAwAwA[920] & 1) == 0));
  v14.i32[2] = *(_DWORD *)(v2 + 4 * (*(_DWORD *)&aHAwAwAwAwAwAwA[924] & (7 * (a2 ^ 0x3CCu) - 1693) ^ 1));
  v14.i32[3] = *(_DWORD *)(v2 + 4 * (~*(_DWORD *)&aHAwAwAwAwAwAwA[928] & 1));
  *(int8x16_t *)&aHAwAwAwAwAwAwA[912] = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)&aHAwAwAwAwAwAwA[4], v14), (int8x16_t)vdupq_n_s32(0xA857549C)), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsubq_s32(v12, vaddq_s32(v13, v13)), vdupq_n_s32(0x50A3B868u)), 1uLL));
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * a2) - 4))();
}

void sub_1000E282C()
{
  JUMPOUT(0x1000E2758);
}

uint64_t sub_1000E2838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  int v7;
  unsigned int v8;

  v8 = ((((((v7 - 658) | 0x2C1) ^ 0x279A7AE3) & *a7 ^ 0xA51A2003) - 1) | *a7 & 0x586583D0) ^ 0xF27B7E3E | (((a7[623] & 0x80000000 | 0x25264C0A) ^ 0xB4D138F5) + 1804349572) ^ 0xFD83A583;
  a7[623] = a7[396] ^ *((_DWORD *)&STACK[0x15D0] + ((*a7 & 1) == 0)) ^ ((v8 - ((2 * v8) & 0x27C2A2A8) - 1813950124) >> 1) ^ 0xC9F62002;
  return ((uint64_t (*)(void))(*(_QWORD *)(a6 + 8 * ((397 * (LODWORD(STACK[0xA44]) > 0x26F)) ^ v7)) - 4))();
}

uint64_t sub_1000E2930()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  LODWORD(STACK[0xA44]) = 0;
  v4 = LODWORD(STACK[0xA44])++;
  *(_DWORD *)(v2 + 3304) = v4 + 73583858;
  v5 = (*(_DWORD *)(v1 + 3312) - 1240827427);
  v6 = 1606104089
     * ((((v3 - 192) ^ 0x374E2F97FAEFA969)
       + 0x5A6D22DEDA18CAA1
       - 2 * (((v3 - 192) ^ 0x374E2F97FAEFA969) & 0x5A6D22DEDA18CAA1)) ^ 0xAF9DF67D55E021F6);
  *(_DWORD *)(v3 - 164) = -1231242123
                        - 1606104089
                        * ((((v3 - 192) ^ 0xFAEFA969) - 635909471 - 2 * (((v3 - 192) ^ 0xFAEFA969) & 0xDA18CAA1)) ^ 0x55E021F6)
                        + v0
                        + 47;
  *(_QWORD *)(v3 - 192) = v5 + v6;
  *(_DWORD *)(v3 - 180) = 1606104089
                        * ((((v3 - 192) ^ 0xFAEFA969) - 635909471 - 2 * (((v3 - 192) ^ 0xFAEFA969) & 0xDA18CAA1)) ^ 0x55E021F6);
  *(_DWORD *)(v3 - 176) = (v0 - 1982105645) ^ (1606104089
                                             * ((((v3 - 192) ^ 0xFAEFA969)
                                               - 635909471
                                               - 2 * (((v3 - 192) ^ 0xFAEFA969) & 0xDA18CAA1)) ^ 0x55E021F6));
  *(_DWORD *)(v3 - 172) = ((v0 - 1982105739) ^ 0x53)
                        + 1606104089
                        * ((((v3 - 192) ^ 0xFAEFA969) - 635909471 - 2 * (((v3 - 192) ^ 0xFAEFA969) & 0xDA18CAA1)) ^ 0x55E021F6);
  *(_DWORD *)(v3 - 168) = (v0 - 1982105739) ^ (1606104089
                                             * ((((v3 - 192) ^ 0xFAEFA969)
                                               - 635909471
                                               - 2 * (((v3 - 192) ^ 0xFAEFA969) & 0xDA18CAA1)) ^ 0x55E021F6));
  *(_QWORD *)(v3 - 160) = 3748258330u - v6;
  v7 = sub_10013D5F4(v3 - 192);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_100260750 + *(int *)(v3 - 184)) - 8))(v7);
}

uint64_t sub_1000E2A44()
{
  unsigned int v0;
  unsigned int v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  v8 = STACK[0x640];
  v9 = STACK[0x668];
  v10 = (v3 - 1740) | 0x22C;
  if (v1 >= v2)
    v11 = *(_DWORD *)(v4 + 3312) + 1;
  else
    v11 = v5;
  *(_DWORD *)(v4 + 3312) = v11;
  v12 = v0 ^ (v0 >> 11);
  v13 = ((v6 ^ (v12 << 7)) - ((2 * (v6 ^ (v12 << 7))) & 0x7F6FD500) + v10 - 1078466407) & 0x9D2C5680 ^ 0x6520CE20;
  v14 = (((2 * v13) & 0x8A409100) - v13 - 1159882887) ^ v12;
  v15 = ((v14 << 15) ^ 0x54E78000) - ((2 * ((v14 << 15) ^ 0x54E78000)) & 0x64650000) - 1305282673;
  v16 = (((v15 & 0xA0020000 ^ 0x30184657) - 1) & 0xB0024406 | v15 & 0x4FC40000) ^ v14;
  v17 = (v16 ^ (v16 >> 18) ^ 0x87B0CC25) >> (((((v3 + 52) | 0x2C) + 78) ^ 0x6E) - 21);
  LOBYTE(v17) = (v17 - ((2 * v17) & 0xFA) - 3) ^ 0x7E;
  *(_BYTE *)(v8 + (v9 - 296018228)) = v17;
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * ((1159
                                * (v9
                                 - ((byte_100215930[(v9 - 296018228) & 0xFLL] ^ (105 * ((v9 - 52) & 0xF)) ^ byte_100217EC0[(v9 - 296018228) & 0xFLL] ^ byte_10021B1D0[(v9 - 296018228) & 0xFLL]) != v17) == 296018227)) ^ v10)))();
}

uint64_t sub_1000E2B78()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (v1 ^ ((8 * (v0 == 7926303938817490798)) | (16
                                                                                      * (v0 == 7926303938817490798)))))
                            - 4))();
}

uint64_t sub_1000E2C18@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  unsigned int v7;
  unint64_t v8;

  v6 = (_BYTE *)(a1 + v4 + v5);
  v7 = ((*(_DWORD *)(qword_1002789B8 + (dword_100278BC0 & v2)) ^ v6) & ((v3 - 2114222555) ^ 0x7FFFFFEB))
     * a2;
  v8 = (v7 ^ HIWORD(v7)) * a2;
  *v6 = byte_100217DB0[(v8 >> 24) + 3] ^ byte_10023BBC0[v8 >> 24] ^ byte_100229550[(v8 >> 24) + 2] ^ v8 ^ (13 * BYTE3(v8));
  LODWORD(STACK[0x6E0]) = 0;
  return sub_100138C44(0);
}

uint64_t sub_1000E2CC0@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  int v16;

  v12 = v4 < v5;
  v13 = v7 + a1 - 0x6D91757148A74809;
  v14 = ((*(_DWORD *)(qword_1002789B8 + (dword_100278BC0 & v2)) ^ v13) & 0x7FFFFFFF)
      * (((v10 + 335826396) | 0x6A002888) ^ 0x16A415B0);
  v15 = (v14 ^ HIWORD(v14)) * a2;
  v16 = byte_10023BBC0[v15 >> 24] ^ *(unsigned __int8 *)(v6 + v9 - 0x9B3D38648DC957FLL) ^ byte_100217DB0[(v15 >> 24) + 3] ^ byte_100229550[(v15 >> 24) + 2] ^ v15 ^ (13 * (v15 >> 24));
  if (v12 == v8 - 0x5461A04BE8E9D19CLL < v3)
    v12 = v8 - 0x5461A04BE8E9D19CLL < v4;
  *(_BYTE *)v13 = v16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * (((8 * !v12) | (16 * !v12)) ^ v10)) - 4))();
}

uint64_t sub_1000E2DF0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (v0 ^ (982
                                     * ((v1 | ((unint64_t)(v1 < 0x1D8746DB) << 32)) != 495404763)))))();
}

uint64_t sub_1000E2E40@<X0>(_BYTE *a1@<X0>, unint64_t a2@<X8>)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _BOOL4 v9;

  v6 = v3 ^ 0x747u;
  v7 = v6 + a2 + v4 - 2426;
  v8 = v6 - 1359;
  v9 = v2 < v7;
  *a1 = (((v3 ^ 0x47) - 14) & 0xED) + (*(_BYTE *)STACK[0x9C0] ^ 0x6E) + ((2 * *(_BYTE *)STACK[0x9C0]) & 0xDD) + 81;
  if (v9 == a2 > 0x139B7C89)
    v9 = v2 > 0x139B7C89;
  return (*(uint64_t (**)(void))(v5 + 8 * ((244 * !v9) ^ v8)))();
}

void sub_1000E2F44()
{
  JUMPOUT(0x1000E2ED8);
}

uint64_t sub_1000E2F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 + 8 * ((966 * (*(_DWORD *)(v6 + 2004) - v9 == v8)) ^ v7))
                                                                                                - (v7 ^ 0x721u)
                                                                                                + 1737))(a1, a2, a3, a4, a5, a6, 4294925247);
}

uint64_t sub_1000E2F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v9 + 8 * (v8 ^ (2018 * (v7 != 0x68C974A61C1FE532))))
                                                                                               - v6
                                                                                               + 1737))(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_1000E3000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BOOL4 v15;

  v15 = v7 < a7;
  *(_BYTE *)(v9 + v11 - 0x6B0AC8D09425B381) = *(_BYTE *)(v8 + v12 - 0x4470EF01A777939CLL);
  if (v15 == v10 - 0x68ABFDBACAD21090 < a7)
    v15 = v10 - 0x68ABFDBACAD21090 < v7;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v14 + 8 * ((v15 * ((v13 + 1249) ^ 0x12F)) ^ v13))
                                                                                               - 4))(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_1000E3098@<X0>(unsigned int a1@<W8>)
{
  char v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1178 * (v1 <= (char)(((a1 - 89) & 0xEF) + 50))) ^ a1))
                            - (a1 ^ 0x23ELL)))();
}

uint64_t sub_1000E30F8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * (a4 ^ (1983 * ((unint64_t)&STACK[0xBB0] + v4 - 7 < 0x10))))
                            - 4))();
}

uint64_t sub_1000E3198(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v7 + ((a3 + 865) ^ 0x8D0F8C49FED7E70ALL) + a5) = (*(_BYTE *)(a4 + v6 - 0x753E1B265931C3E3) ^ 0xAA)
                                                            + ((2 * *(_BYTE *)(a4 + v6 - 0x753E1B265931C3E3)) & 0x55)
                                                            + 126;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((1865 * (a6 + 1 != a2 + 48)) ^ a3)) - 4))();
}

uint64_t sub_1000E3218(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;

  v6 = *(int8x16_t *)(v1 + v3);
  v7.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v7.i64[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = veorq_s8(v6, v7);
  v9.i64[0] = 0x5454545454545454;
  v9.i64[1] = 0x5454545454545454;
  v10 = vandq_s8(vaddq_s8(v6, v6), v9);
  v9.i64[0] = 0x7E7E7E7E7E7E7E7ELL;
  v9.i64[1] = 0x7E7E7E7E7E7E7E7ELL;
  *(int8x16_t *)(v2 + v3) = vaddq_s8(vaddq_s8(v8, v9), v10);
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((((v4 + 865) ^ 0x6DDLL) + v3 != 48) * a1) ^ v4))
                            - 4))();
}

uint64_t sub_1000E326C()
{
  int v0;
  int v1;
  unint64_t v2;
  char v3;
  char v4;

  v2 = STACK[0x680] + (v0 - 469583105);
  v3 = ((*(_BYTE *)(STACK[0xA30] + 8) ^ 0x33 ^ *(_BYTE *)v2)
      - ((((((v1 + 14) & 0xEF) + 54) | 0x4A) - 87) & (2 * (*(_BYTE *)(STACK[0xA30] + 8) ^ 0x33 ^ *(_BYTE *)v2)))
      - 6) ^ 0xFA | *(_BYTE *)(STACK[0xA30] + 9) ^ 0x33 ^ *(_BYTE *)(v2 + 1);
  v4 = (v3 - ((2 * v3) & 0xF4) - 6) ^ 0xFA | *(_BYTE *)(STACK[0xA30] + 10) ^ 0x33 ^ *(_BYTE *)(v2 + 2);
  LOBYTE(v2) = (v4 - ((2 * v4) & 0xF4) - 6) ^ 0xFA | *(_BYTE *)(STACK[0xA30] + 11) ^ 0x33 ^ *(_BYTE *)(v2 + 3);
  LODWORD(v2) = (v2 - ((2 * v2) & 0xF4)) != 0;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)*(&off_100260750
                                                             + (int)((v2 | (32 * v2)) ^ (v1 - 442823410) & 0x1A64EFEF))
                                                   - 12))(3825384143, 18);
}

uint64_t sub_1000E33DC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  char v8;
  char v9;
  int v10;
  uint64_t v11;
  int v12;
  _BOOL4 v13;
  unsigned int v14;
  int v15;
  _BOOL4 v16;

  v12 = a5 - 653;
  v13 = v5 > v7;
  v14 = (a2 + 29);
  v15 = v13 ^ (v14 < ((v12 + v8) ^ v9));
  v16 = v14 < v6;
  if (!v15)
    v13 = v16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((v13 * v10) ^ v12)) - 4))();
}

void sub_1000E3430()
{
  JUMPOUT(0x1000E333CLL);
}

uint64_t sub_1000E3450()
{
  int v0;
  uint64_t v1;
  _BOOL4 v2;

  v2 = ((((v0 - 1099) | 0x16) - 406) & STACK[0x890]) == 14 * (v0 ^ 0x678) - 714;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((v2 | (4 * v2)) ^ v0)) - 8))();
}

uint64_t sub_1000E3498()
{
  int v0;
  int v1;
  uint64_t v2;
  _BOOL4 v3;

  v3 = v0 == ((v1 ^ 0x8B) - 64);
  return (*(uint64_t (**)(unint64_t))(v2 + 8 * (((2 * v3) | (4 * v3)) ^ v1)))(STACK[0x680] + LODWORD(STACK[0x660]) - 546355592 + (v1 ^ 0x1F6u) - 828);
}

uint64_t sub_1000E3508()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v6 = ((16 * v3) ^ 0x67EF7507) + 1807443953 + ((v3 << (v2 ^ 0x39)) & 0x33DEAE40 ^ 0x30000440u);
  v7 = 0xFFFFFFFF00000000;
  if (v6 >= 0x69AABF08)
    v7 = 0;
  return (*(uint64_t (**)(uint64_t))(v5 + 8 * ((1510 * (v1 + v0 + v4 + v6 - v7 - 1772797704 > 0xF)) ^ v2)))(0x7D488786B62193C1);
}

void sub_1000E35E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int8x16_t *a5)
{
  int v5;
  int8x16_t *v6;
  int8x16_t v7;
  int8x16_t v8;

  v7.i64[0] = 0xB8B8B8B8B8B8B8B8;
  v7.i64[1] = 0xB8B8B8B8B8B8B8B8;
  v8.i64[0] = 0x7070707070707070;
  v8.i64[1] = 0x7070707070707070;
  a5[3] = vaddq_s8(vaddq_s8(veorq_s8(*v6, v7), v8), vandq_s8(vaddq_s8(*v6, *v6), v8));
  LODWORD(STACK[0x72C]) = v5 + 64;
  JUMPOUT(0x1000E3924);
}

uint64_t sub_1000E3620()
{
  int v0;
  uint64_t v1;

  LODWORD(STACK[0x72C]) = 1164808565;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((*(_BYTE *)STACK[0x680] != 1) * (((v0 - 1097523000) & 0x416ADDBD) - 71)) ^ v0))
                            - (v0 - 378)
                            + 148))();
}

void sub_1000E3680()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;

  v4 = (_BYTE *)STACK[0x950];
  v5 = v3 + (v2 - 546355592);
  v6 = ((32 * v1) & 0x5AFAFA0 ^ 0x4000400) + ((16 * v1) ^ 0xFCD7F5FF) + (((v0 + 1520) | 0x41) ^ 0xDCB88A50);
  v7 = 0xFFFFFFFF00000000;
  if (v6 >= 0x4390646C)
    v7 = 0;
  v8 = (_BYTE *)(v7 - v6 + v5 + 1133536364);
  *v4 = *v8;
  v4[1] = v8[1];
  v4[2] = v8[2];
  v4[3] = v8[3];
  v4[4] = v8[4];
  v4[5] = v8[5];
  v4[6] = v8[6];
  v4[7] = v8[7];
  v4[8] = v8[8];
  v4[9] = v8[9];
  v4[10] = v8[10];
  v4[11] = v8[11];
  v4[12] = v8[12];
  v4[13] = v8[13];
  v4[14] = v8[14];
  JUMPOUT(0x1000E391CLL);
}

uint64_t sub_1000E377C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v7 = ((v4 << 6) & 0x67F05D80 ^ 0x60000880) + ((32 * v4) ^ 0xCFF86A8F) + (a2 ^ 0x320F7B51);
  v8 = 0xFFFFFFFF00000000;
  if (v7 >= 0x2E07ABBF)
    v8 = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((58 * (v3 + v2 + v7 + v5 - v8 - 772254655 < 0x10)) | a2)) - 12))();
}

void sub_1000E3858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int8x16_t *a5)
{
  int8x16_t *v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;

  v6.i64[0] = 0xFCFCFCFCFCFCFCFCLL;
  v6.i64[1] = 0xFCFCFCFCFCFCFCFCLL;
  v7.i64[0] = 0xF8F8F8F8F8F8F8F8;
  v7.i64[1] = 0xF8F8F8F8F8F8F8F8;
  v8 = vandq_s8(vaddq_s8(*v5, *v5), v7);
  v7.i64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v7.i64[1] = 0x2C2C2C2C2C2C2C2CLL;
  a5[3] = vaddq_s8(vaddq_s8(veorq_s8(*v5, v6), v7), v8);
  JUMPOUT(0x1000E3888);
}

uint64_t sub_1000E3938(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v7 + v2 - 0x2C045ADCA4E38B52) = (*(_BYTE *)(v1 + v4 - 0x4587AED426D85F9BLL) ^ (v3 + 124))
                                             + ((2 * *(_BYTE *)(v1 + v4 - 0x4587AED426D85F9BLL)) & 0x70)
                                             + 112;
  return (*(uint64_t (**)(void))(v8 + 8 * (((a1 + 1 == v6 + 16) * v5) ^ v3)))();
}

void sub_1000E39A8()
{
  JUMPOUT(0x1000E3614);
}

uint64_t sub_1000E39B0()
{
  int v0;
  unsigned int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((978
                                * ((LODWORD(STACK[0x82C]) | ((unint64_t)(LODWORD(STACK[0x82C]) < v0 + (v1 ^ 0x651) - 1741) << 32)) != 458470030)) ^ v1)))();
}

uint64_t sub_1000E3A00()
{
  int v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BOOL4 v4;

  v4 = v2 < v1;
  *(_BYTE *)STACK[0x950] = 0;
  if (v4 == v1 > 0x46D468E7)
    v4 = v2 > 0x46D468E7;
  return (*(uint64_t (**)(void))(v3 + 8 * ((1618 * v4) ^ (v0 - 1585))))();
}

void sub_1000E3A7C()
{
  JUMPOUT(0x1000E3A3CLL);
}

uint64_t sub_1000E3A84@<X0>(int a1@<W6>, unsigned int a2@<W8>)
{
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unint64_t v44;

  v3 = LODWORD(STACK[0x380]) ^ LODWORD(STACK[0x680]);
  v4 = LODWORD(STACK[0x37C]) ^ LODWORD(STACK[0x3C4]);
  v5 = STACK[0x5C0];
  if ((STACK[0x5C0] & 1) != 0)
    v6 = STACK[0x540];
  else
    v6 = STACK[0x44C];
  if ((v5 & 1) != 0)
    v7 = STACK[0x510];
  else
    v7 = STACK[0x420];
  if ((v5 & 1) != 0)
    v8 = STACK[0x408];
  else
    v8 = STACK[0x418];
  if ((v5 & 1) != 0)
    v9 = STACK[0x410];
  else
    v9 = STACK[0x404];
  v10 = STACK[0x338];
  if ((v5 & 1) != 0)
    v10 = STACK[0x328];
  v11 = STACK[0x340];
  if ((v5 & 1) == 0)
    v11 = STACK[0x300];
  v12 = STACK[0x36C];
  v13 = STACK[0x2E8];
  if ((v5 & 1) != 0)
  {
    v12 = STACK[0x2E8];
    v13 = STACK[0x330];
  }
  v14 = (STACK[0x5C0] & 2) == 0;
  v15 = STACK[0x3F0];
  if ((STACK[0x5C0] & 2) == 0)
    v15 = STACK[0x3EC];
  LODWORD(STACK[0x2E8]) = v15;
  v16 = STACK[0x3E8];
  if (!v14)
    v16 = STACK[0x3E4];
  LODWORD(STACK[0x418]) = v16;
  v17 = STACK[0x3A8];
  if (!v14)
    v17 = STACK[0x39C];
  LODWORD(STACK[0x540]) = v17;
  v18 = STACK[0x3DC];
  if (!v14)
    v18 = STACK[0x3D8];
  LODWORD(STACK[0x410]) = v18;
  v19 = STACK[0x3D4];
  if (v14)
    v19 = STACK[0x3C8];
  LODWORD(STACK[0x3D8]) = v19;
  v20 = STACK[0x374];
  if (v14)
    v21 = STACK[0x374];
  else
    v21 = v12;
  LODWORD(STACK[0x298]) = v21;
  if (!v14)
    v12 = v20;
  LODWORD(STACK[0x338]) = v12;
  if (v14)
    v22 = v10;
  else
    v22 = v11;
  LODWORD(STACK[0x3D4]) = v22;
  if (v14)
    v10 = v11;
  LODWORD(STACK[0x408]) = v10;
  v23 = v3 ^ 0x61627385;
  LODWORD(STACK[0x36C]) = v6;
  LODWORD(STACK[0x330]) = v7;
  if (v14)
    v24 = v7;
  else
    v24 = v6;
  LODWORD(STACK[0x39C]) = v24;
  v25 = STACK[0x640];
  if (!v14)
    v25 = STACK[0x608];
  LODWORD(STACK[0x420]) = v25;
  LODWORD(STACK[0x404]) = v8;
  LODWORD(STACK[0x3F0]) = v9;
  if (v14)
    v26 = v9;
  else
    v26 = v8;
  LODWORD(STACK[0x3A8]) = v26;
  v27 = STACK[0x3C0];
  LODWORD(STACK[0x3E8]) = v13;
  if (!v14)
    v27 = v13;
  LODWORD(STACK[0x3C8]) = v27;
  v28 = STACK[0x580];
  if ((STACK[0x580] & 1) != 0)
    v23 = STACK[0x254];
  LODWORD(STACK[0x44C]) = v23;
  v29 = v4 ^ 0xA5798682;
  if ((v28 & 1) == 0)
    v29 = STACK[0x258];
  v30 = STACK[0x284];
  if ((v28 & 1) != 0)
    v30 = STACK[0x288];
  v31 = STACK[0x260];
  if ((v28 & 1) != 0)
    v32 = STACK[0x27C];
  else
    v32 = STACK[0x260];
  v33 = STACK[0x25C];
  if ((v28 & 1) == 0)
  {
    v31 = STACK[0x25C];
    v33 = STACK[0x268];
  }
  v34 = STACK[0x3AC];
  if ((v28 & 1) == 0)
    v34 = STACK[0x28C];
  v35 = (v28 & 2) == 0;
  if ((v28 & 2) != 0)
    v29 = STACK[0x2F0];
  LODWORD(STACK[0x28C]) = v29;
  v36 = STACK[0x264];
  if (v35)
    v37 = STACK[0x264];
  else
    v37 = v34;
  LODWORD(STACK[0x284]) = v37;
  if (v35)
    v38 = v34;
  else
    v38 = v36;
  LODWORD(STACK[0x288]) = v38;
  v39 = STACK[0x394];
  if (v35)
    v39 = STACK[0x280];
  LODWORD(STACK[0x280]) = v39;
  v40 = STACK[0x278];
  if (v35)
    v40 = STACK[0x274];
  LODWORD(STACK[0x340]) = v40;
  v41 = STACK[0x5B0];
  LODWORD(STACK[0x300]) = v30;
  if (v35)
    v41 = v30;
  LODWORD(STACK[0x27C]) = v41;
  LODWORD(STACK[0x3DC]) = v32;
  LODWORD(STACK[0x380]) = v33;
  if (v35)
    v42 = v32;
  else
    v42 = v33;
  LODWORD(STACK[0x274]) = v42;
  v43 = STACK[0x398];
  LODWORD(STACK[0x3C4]) = v31;
  if (v35)
    v43 = v31;
  LODWORD(STACK[0x278]) = v43;
  v44 = a2 - 1072447216 + ((unint64_t)(a2 < v2) << 32) + 1300;
  *(_QWORD *)(STACK[0xB50] + 8 * v44) = *(_QWORD *)(STACK[0xB38] + 8 * v44) ^ 0x9696969696969696;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((63 * (a2 - 1072445915 > 1)) ^ a1)) - 12))();
}

void sub_1000E43B4()
{
  JUMPOUT(0x1000E3D04);
}

uint64_t sub_1000E43BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  char v59;
  char v60;
  BOOL v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  BOOL v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  int v76;
  char v77;
  char v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t v83;
  int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  int v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _BOOL4 v109;
  unint64_t v110;
  int v111;

  v8 = (a4 & 0x1B ^ 0x98 | 0x4C) - (a4 & 0x1B ^ 0x98 | 0xB3) - 77;
  v9 = ((((a4 ^ 0xE1A5DB7216E45892) >> (v8 ^ 0xCCu))
       - ((2 * ((a4 ^ 0xE1A5DB7216E45892) >> (v8 ^ 0xCCu))) & 0x53CD490A0C583730)
       + 0x29E6A485062C1B98) ^ 0x29E6A485062C1B98) >> (v8 ^ 0xD7u);
  v10 = (a4 ^ 0xE1A5DB7216E45892)
      + (v9 ^ 0xE48AB0201010888ELL)
      - ((2 * v9) & 0x36EA9FBFDFDEEEE2)
      + 0x1B754FDFEFEF7772;
  v11 = ((2 * v10) & 0xF9FFFFBFABF5F9BELL)
      + (v10 ^ 0x7CFFFFDFD5FAFCDFLL)
      + (((((2 * v10) & 0xF9FFFFBFABF5F9BELL) + (v10 ^ 0x7CFFFFDFD5FAFCDFLL) - 0x7CFFFFDFD5FAFCDFLL) >> 14) ^ 0x44240A0A44540208)
      - (((((2 * v10) & 0xF9FFFFBFABF5F9BELL) + (v10 ^ 0x7CFFFFDFD5FAFCDFLL) - 0x7CFFFFDFD5FAFCDFLL) >> 13) & 0x7EBEB7757FBEELL);
  v12 = v11
      + (((v11 + 0x3EDBF615E5B10119) >> 6) ^ 0x4A0006800D283808)
      - (((v11 + 0x3EDBF615E5B10119) >> 5) & 0x3FFF2FFE5AF8FEELL)
      + 2;
  v13 = v12 - ((2 * v12 + 0x29B7DF2BB111921ELL) & 0x217DE5309423B2DCLL) - 0x7A651DD1DD655D83;
  v14 = ((2 * ((v13 ^ 0x90BEF2984A11D96ELL) + 0x301F1AB817992D55)) & 0x5EF6298FFB6EF9F6)
      + (((v13 ^ 0x90BEF2984A11D96ELL) + 0x301F1AB817992D55) ^ 0x2F7B14C7FDB77CFBLL);
  v15 = v14
      + (((v14 - 0x2F7B14C7FDB77CFBLL) >> 24) ^ 0x11404104E1048D00)
      - (((v14 - 0x2F7B14C7FDB77CFBLL) >> 23) & 0x1F63DF6E5FELL);
  v16 = v15
      + (((v15 - 0x40BB55CCDEBC09FBLL) >> 14) ^ 0x4002200800440112)
      - (((v15 - 0x40BB55CCDEBC09FBLL) >> 13) & 0x3BFEFFF77FDDALL);
  v17 = v16
      + (((v16 + 0x7F428A2B20FFF4F3) >> 6) ^ 0xAFF92D7FFFEFFFBFLL)
      + (((v16 + 0x7F428A2B20FFF4F3) >> 5) & 0x7F25AFFFFDFFF7ELL)
      + 2;
  v18 = v17 - ((2 * v17 - 0x616D46A9BDE0159CLL) & 0xEAE86454B4804144) + 0x44BD8ED57B5015D4;
  v19 = ((2 * ((v18 ^ 0x7574322A5A4020A2) - 0x5C4C23E8A21DDE13)) & 0xEF1FADDFBC76EDEALL)
      + (((v18 ^ 0x7574322A5A4020A2) - 0x5C4C23E8A21DDE13) ^ 0xF78FD6EFDE3B76F5);
  v20 = (((v19 + 0x870291021C4890BLL) >> 27) ^ 0x5EF9EDF7DED21F3ELL)
      + v19
      + (((v19 + 0x870291021C4890BLL) >> 26) & 0x2FBDA43E7CLL);
  v21 = (((v20 - 0x5689C4E7BD0D9633) >> 12) ^ 0xDB7FBD9FFFF7FADBLL)
      + v20
      + (((v20 - 0x5689C4E7BD0D9633) >> 11) & 0x1F7B3FFFEFF5B6);
  v22 = v21
      + (((v21 - 0x32098287BD05910ELL) >> 2) ^ 0xE262022332402342)
      - (((v21 - 0x32098287BD05910ELL) >> 1) & 0x3B3BFBB99B7FB97ALL);
  v23 = v22 + 1 - ((2 * (v22 + 1) + 561289054) & 0x79EDDF64) - 844022943;
  v24 = v22
      + 1
      + (((v22 - 0xE6FFD72F198802) >> 30) ^ 0xC6008210021B2203)
      - (((v22 - 0xE6FFD72F198802) >> 29) & 0x7FBC9BBF8);
  v25 = v24
      + (((v24 + 0x39187E18CECB55FALL) >> 12) ^ 0x2824807404040908)
      - (((v24 + 0x39187E18CECB55FALL) >> 11) & 0x16FF17F7F7EDEELL);
  v26 = v25
      + (((v25 + 0x10F3FDA4CAC74CF2) >> 7) ^ 0x2B4406B408010240)
      - (((v25 + 0x10F3FDA4CAC74CF2) >> 6) & 0x177F297EFFDFB7ELL)
      + 3;
  v27 = v26 - ((2 * v26 + 0x4B5FEDE1858C955ELL) & 0x7A50F41BFA2E2E8CLL) + 0x22D870FEBFDD61F5;
  v28 = ((2 * ((v27 ^ 0x3D287A0DFD171746) + 0x3DEAA251E4C860FCLL)) & 0x92FEF7FEB5FBD7FCLL)
      + (((v27 ^ 0x3D287A0DFD171746) + 0x3DEAA251E4C860FCLL) ^ 0xC97F7BFF5AFDEBFELL);
  v29 = (((v28 + 0x36808400A5021402) >> 31) ^ 0xD4FDFFDFFE7FFFDELL)
      + v28
      + (((v28 + 0x36808400A5021402) >> 30) & 0x3FCFFFFBCLL);
  v30 = (((v29 + 0x61828420A6821424) >> 8) ^ 0xBF361FF3E766FFFFLL)
      + v29
      + (((v29 + 0x61828420A6821424) >> 7) & 0x6C3FE7CECDFFFELL);
  v31 = (((v30 - 0x5DB39BD340E4EBDBLL) >> 7) ^ 0x37FF7FBDA9FFEFBFLL)
      + v30
      + (((v30 - 0x5DB39BD340E4EBDBLL) >> 6) & 0x3FEFF7B53FFDF7ELL);
  v32 = v31 - ((2 * v31 + 0x5499C8DE2A3648CCLL) & 0x68F62DF03D80F4D6) + 0x1EC7FB6733DB9ED1;
  v33 = (v32 ^ 0x8A37D526F36D0EA4)
      + ((v32 >> 30) ^ 0x41010C0A28E715F9)
      + ((v32 >> 29) & 0x7FF8F7D3ALL ^ 0xFFFFFFFBAE71D6CDLL)
      - 0x41010C0800384161;
  v34 = (((((2 * v33) & 0xF17EE7DBBFF5E5E2) + (v33 ^ 0xF8BF73EDDFFAF2F1) + 0x7408C1220050D0FLL) >> 13) ^ 0x7DFDFBF75FDF7DFFLL)
      + ((2 * v33) & 0xF17EE7DBBFF5E5E2)
      + (v33 ^ 0xF8BF73EDDFFAF2F1)
      + (((((2 * v33) & 0xF17EE7DBBFF5E5E2) + (v33 ^ 0xF8BF73EDDFFAF2F1) + 0x7408C1220050D0FLL) >> 12) & 0xBF7EEBFBEFBFELL);
  v35 = v34
      + (((v34 - 0x76BD6FE53FDA70F0) >> 2) ^ 0x14D802180450303)
      - (((v34 - 0x76BD6FE53FDA70F0) >> 1) & 0x7D64FFBCFF75F9F8);
  v36 = v23 ^ v6 ^ (v35 + 1 - ((2 * (v35 + 1) + 2143361048) & 0xAEE80918) - 1756065640);
  v37 = (v36 & 0x34EEE5CD ^ 0x12C98188 | 0x40B36182) - (v36 & 0x34EEE5CD ^ 0x12C98188 | 0xBF4C9E7D) - 1085497731;
  v38 = (v36 & 0xCB111A32 ^ 0xC2001A02 | 0x8BACFEF) - (v36 & 0xCB111A32 ^ 0xC2001A02 | 0xF7453010) - 146460656;
  v39 = v35
      + 1
      + (((v35 + 0x5673104953D780C9) >> 25) ^ 0x8915000008711404)
      - (((v35 + 0x5673104953D780C9) >> 24) & 0xFFEF1DD7F6);
  v40 = ((v38 & 0x99B0FE19 ^ 0x90403010) + (v38 & 0x660F01E6 ^ 0x62080127) - 1) ^ 0x31F3ECEB | v37 ^ 0x42B66182;
  v41 = v40 - ((2 * v40) & 0xD2A2039E) + 1766916559;
  v42 = v39
      + (((v39 - 0x32A1EFB6B499933CLL) >> 9) ^ 0xD37FDF6B7FF4E6FDLL)
      + (((v39 - 0x32A1EFB6B499933CLL) >> 8) & 0xFFBED6FFE9CDFALL);
  v43 = v42
      + ((v42 - 0x621CF22348E7A39) & 0xFF73B5EFDFB7E7EELL)
      + (((v42 - 0x621CF22348E7A39) >> 1) ^ 0x7FB9DAF7EFDBF3F7)
      + 1;
  v44 = v43 - ((2 * v43 - 0xBB7543448D4DC62) & 0xE899B830513D3928) - 0x118ECE01FBCBD19DLL;
  v45 = ((2 * ((v44 ^ 0x744CDC18289E9C94) + 0x38FC44A9709D19CALL)) & 0xFEBEFFF5BE5FFFAELL)
      + (((v44 ^ 0x744CDC18289E9C94) + 0x38FC44A9709D19CALL) ^ 0xFF5F7FFADF2FFFD7);
  v46 = v45
      + (((v45 + 0xA0800520D00029) >> 24) ^ 0x400529D3302A00A0)
      - (((v45 + 0xA0800520D00029) >> 23) & 0x599FABFEBELL);
  v47 = v46
      + (((v46 - 0x3F64A9CE0F5A0077) >> 15) ^ 0x1CC302840010906CLL)
      - (((v46 - 0x3F64A9CE0F5A0077) >> 14) & 0x1FAF7FFDEDF26);
  v48 = v47
      + (((v47 - 0x5C27AC520F6A90E3) >> 8) ^ 0x6D65EEDF1FBE72B7)
      + (((v47 - 0x5C27AC520F6A90E3) >> 7) & 0xCBDDBE3F7CE56ELL)
      + 2;
  v49 = v48 - ((2 * v48 + 0x2CE4C99DA1ADF8C8) & 0x2A6CFD59271E04C0) + 0x4BA8E37B6465FEC4;
  v50 = ((2 * ((v49 ^ 0x15367EAC938F0260) + 0x627FE9C2823FDEE7)) & 0xFFFFF2FD3ECA6F8ELL)
      + (((v49 ^ 0x15367EAC938F0260) + 0x627FE9C2823FDEE7) ^ 0xFFFFF97E9F6537C7);
  v51 = (((v50 + 0x681609AC839) >> 29) ^ 0x67F5BB6CF7BDDB7FLL)
      + v50
      + (((v50 + 0x681609AC839) >> 28) & 0x9EF7BB6FELL);
  v52 = v51
      + (((v51 - 0x67F5B4EB97231346) >> 9) ^ 0x4200050200202540)
      - (((v51 - 0x67F5B4EB97231346) >> 8) & 0xFFF5FBFFBFB57ELL);
  v53 = ((v52 + 0x560A461268BCC77ALL) >> 5) - (((v52 + 0x560A461268BCC77ALL) >> 4) & 0x46AE0032) - 1554579431;
  LODWORD(v52) = ((2 * (v52 + 1757202298)) & 0xD7F7FFCC) + ((v52 + 1757202298) ^ 0x6BFBFFE6) + (v53 ^ 0xB8A9AFF3);
  v54 = (((2 * v53) & 0x37FD5FD4 ^ 0x6AC0010)
       + v52
       - 2 * ((((2 * v53) & 0x37FD5FD4 ^ 0x6AC0010) + v52 + 939872304) & 0x32BB9ECF ^ v52 & 2)
       + 717287165) ^ v41;
  v55 = ((v54 ^ 0xFD) + 1) & 7;
  LODWORD(STACK[0x510]) = v54;
  v56 = v54 & 7;
  if (v56 == 2)
    v57 = 0;
  else
    v57 = 255;
  LODWORD(STACK[0x680]) = v55;
  v58 = ((v57 << v55) - ((2 * (v57 << v55)) & 0x30) - 104);
  v59 = (((2 * (v58 ^ 0xAF)) & 0x4C) - (v58 ^ 0xAF) - 39) ^ 0x2F;
  v60 = ((v59 | 0x8C) - (v59 | 0x73) + 115) ^ 0xA0;
  LODWORD(STACK[0x374]) = v56;
  if (v56 == 2)
    v60 = 18;
  v61 = (STACK[0x5C0] & 2) == 0;
  v62 = STACK[0x5E0];
  if ((STACK[0x5C0] & 2) != 0)
    v62 = STACK[0x5A0];
  LODWORD(STACK[0x2F0]) = v62;
  v63 = STACK[0x590];
  if (v61)
    v63 = STACK[0x550];
  LODWORD(STACK[0x3E4]) = v63;
  v64 = STACK[0x530];
  if (v61)
    v64 = STACK[0x4C0];
  LODWORD(STACK[0x394]) = v64;
  v65 = STACK[0x404];
  if (!v61)
    v65 = STACK[0x3F0];
  LODWORD(STACK[0x3EC]) = v65;
  v66 = STACK[0x3C0];
  if (v61)
    v66 = STACK[0x3E8];
  LODWORD(STACK[0x3E8]) = v66;
  v67 = STACK[0x3BC];
  if (v61)
    v67 = STACK[0x3B8];
  LODWORD(STACK[0x3F0]) = v67;
  v68 = STACK[0x3F8];
  if (!v61)
    v68 = STACK[0x3E0];
  LODWORD(STACK[0x254]) = v68;
  LODWORD(STACK[0x2A0]) = LODWORD(STACK[0x26C]) - LODWORD(STACK[0x2A0]);
  if ((STACK[0x580] & 1) != 0)
    v69 = STACK[0x290];
  else
    v69 = STACK[0x3AC];
  v70 = (STACK[0x580] & 2) == 0;
  v71 = STACK[0x398];
  if ((STACK[0x580] & 2) != 0)
    v71 = STACK[0x3C4];
  LODWORD(STACK[0x25C]) = v71;
  v72 = STACK[0x3DC];
  if (v70)
    v72 = STACK[0x380];
  LODWORD(STACK[0x258]) = v72;
  v73 = v27 ^ v13 ^ v4 ^ v44;
  v74 = v32 ^ v18 ^ v7 ^ v49;
  v75 = v73 & 0x7F ^ 0x61;
  LODWORD(STACK[0x4C0]) = (v73 & 0xFFFFFF80 ^ 0xEA5C900)
                        + (v73 & 0x2E3A6300 ^ 0x201A2261)
                        - ((v73 & 0xFFFFFF80 ^ 0xEA5C900) & 0x2E3A6300);
  LODWORD(STACK[0x404]) = (33686018 * (v58 ^ 0x98)) & 0xE82A3B56;
  LODWORD(STACK[0x3BC]) = 16843009 * (v58 ^ 0x98) - 199942741;
  v76 = ((452984832 * (v58 ^ 0x98) - ((905969664 * (v58 ^ 0x98)) & 0x6C000000) + 913300291) ^ 0x366FDB43) & (v74 ^ 0x556FEF5A);
  LODWORD(STACK[0x398]) = v76 - ((2 * v76) & 0x88888888) + 1141031471;
  LOBYTE(v76) = v60 ^ 0x12 | v73 ^ 0x91;
  v77 = (v73 ^ 0x7C ^ v60) + 1;
  v78 = (v76 ^ 0xEF) + (v77 ^ 0x9D);
  LOBYTE(v76) = ((2 * v77) & 0x3A) + v78 + ((2 * v76) & 0xDE) + 116;
  LODWORD(STACK[0x3C0]) = v76 - 2 * (v76 & 0xE9 ^ v78 & 1) - 964655128;
  LODWORD(STACK[0x5E0]) = v73;
  v79 = ((v73 ^ 0xA3) + (v73 & 7 ^ 0x1D2E304) - ((v73 ^ 0xA3) & 7)) & 0x1407FFF ^ HIBYTE(v73) ^ (((2 * (BYTE1(v73) ^ 6)) | 0xF522E9E4) - (BYTE1(v73) ^ 6) + 91130638) ^ ((BYTE2(v73) ^ 0x3B603D82 | 0x2EDAF85E) - (BYTE2(v73) ^ 0x3B603D82 | 0xD12507A1) - 786102367) ^ 0xEE6BD266;
  v80 = 16843009 * v79 - ((33686018 * v79) & 0x3D981BC4) + 516689378;
  LODWORD(STACK[0x3B8]) = v74;
  v81 = (((v74 ^ BYTE1(v74) ^ BYTE2(v74)) ^ 0x409A24C | 0x71B32EEC)
       - ((v74 ^ BYTE1(v74) ^ BYTE2(v74)) ^ 0x409A24C | 0x8E4CD113)
       - 1907568365) ^ HIBYTE(v74) ^ 0x75BA8C81;
  v82 = 16843009 * v81 - ((33686018 * v81) & 0x80B202FA) + 1079574909;
  v83 = STACK[0xB50];
  v84 = *(_QWORD *)(STACK[0xB50]
                  + 8
                  * ((*(_QWORD *)(STACK[0xB50]
                                + 8
                                * ((*(_QWORD *)(STACK[0xB50] + 8 * ((*(_DWORD *)STACK[0xB50] & 1) == 0)) & 1) == 0)) & 1) == 0)) & 1;
  v85 = (v84 ^ 0xFFEDCFD7) + 2 * v84 + 578415466;
  LODWORD(STACK[0x5A0]) = 33686018 * v75;
  LODWORD(STACK[0x590]) = (33686018 * v75) & 0xA5959B8E;
  v86 = LODWORD(STACK[0x560]) ^ 0x34396550;
  v87 = LODWORD(STACK[0x4B0]) ^ 0x93A7C14C;
  v88 = STACK[0x570];
  LODWORD(STACK[0x3C4]) = v69;
  if (!v70)
    v88 = v69;
  LODWORD(STACK[0x26C]) = v88;
  v89 = STACK[0x3B4];
  if (v70)
    v89 = STACK[0x3B0];
  LODWORD(STACK[0x268]) = v89;
  LODWORD(STACK[0x3F8]) = v75;
  LODWORD(STACK[0x530]) = 16843009 * v75 + 1389022663;
  LODWORD(STACK[0x380]) = v80;
  LODWORD(STACK[0x37C]) = v82;
  LODWORD(STACK[0x3DC]) = v82 ^ v80;
  v90 = ((v5 - 183115494) & 0xFFFBDC6A) - 4111582282;
  v91 = 0xB3D5C9433319E527 * (*(_QWORD *)(v83 + 8 * v90) ^ 0x9696969696969696)
      - ((0x67AB92866633CA4ELL * (*(_QWORD *)(v83 + 8 * v90) ^ 0x9696969696969696)) & 0x8D9D18B941EB4630)
      + 0x46CE8C5CA0F5A318;
  v92 = ((2 * ((v91 ^ 0xF59ABD0D0586E4DLL) + v90)) & 0xEDBBCFF7E767DC5ELL)
      + (((v91 ^ 0xF59ABD0D0586E4DLL) + v90) ^ 0x76DDE7FBF3B3EE2FLL);
  v93 = (((v92 - 0x76DDE7FBF3B3EE2FLL) >> 32) ^ 0x93FBF5A9FF3CFFCDLL)
      + v92
      + (((v92 - 0x76DDE7FBF3B3EE2FLL) >> 31) & 0x1FE79FF9ALL);
  v94 = (((v93 - 0xAD9DDA5F2F0EDFCLL) >> 16) ^ 0xFFBBFF75669DDFCCLL)
      + v93
      + (((v93 - 0xAD9DDA5F2F0EDFCLL) >> 15) & 0x1FEEACD3BBF98);
  v95 = (((v94 - 0xA95DD1B598ECDC8) >> 8) ^ 0x53F7FD9773FFBDFELL)
      + v94
      + (((v94 - 0xA95DD1B598ECDC8) >> 7) & 0x1EFFB2EE7FF7BFCLL);
  v96 = ((2 * (v95 + 846296122)) & 0xFDDFDCFA) + ((v95 + 846296122) ^ 0x7EEFEE7D);
  v97 = v96 - ((2 * v96 - 998286960) & 0xC2A857CA);
  v98 = v95 - ((2 * v95 + 0x76D06BF9E9A15588) & 0x7BE32A482608E744) - 0x6A634DEF82AE19ALL;
  v99 = ((2 * ((v91 ^ 0x7B3F1978B3F1D0BALL ^ v98) + v90)) & 0x9F73E7DB5FFE6F9ELL)
      + (((v91 ^ 0x7B3F1978B3F1D0BALL ^ v98) + v90) ^ 0x4FB9F3EDAFFF37CFLL);
  v100 = (((v99 - 0x4FB9F3EDAFFF37CFLL) >> 32) ^ 0xFBFF9ECBF7FFDFFDLL)
       + v99
       + (((v99 - 0x4FB9F3EDAFFF37CFLL) >> 31) & 0x1EFFFBFFALL);
  v101 = (((v100 - 0x4BB992B9A7FF17CCLL) >> 16) ^ 0x6FD7B4FCE71FB12FLL)
       + v100
       + (((v100 - 0x4BB992B9A7FF17CCLL) >> 15) & 0x169F9CE3F625ELL);
  v102 = (((v101 + 0x446EB84970E13705) >> 8) ^ 0x7B1BEDE4FEFE4F2FLL)
       + v101
       + (((v101 + 0x446EB84970E13705) >> 7) & 0x37DBC9FDFC9E5ELL);
  v103 = ((2 * (v102 + 1910695894)) & 0xA7FC5BEE) + ((v102 + 1910695894) ^ 0xD3FE2DF7);
  v104 = v103 - ((2 * v103 + 442686108) & 0x37F81416);
  v105 = v102 - 2 * ((v102 + 0x6348DB1434421E60) & 0x4E57BE98F89C116FLL ^ v102 & 0xD) + 0x31A099AD2CDE2FC2;
  v106 = ((2 * ((v91 ^ 0x89932C45869B27ALL ^ v105) + v90)) & 0x2FE9778F23F7F7FELL)
       + (((v91 ^ 0x89932C45869B27ALL ^ v105) + v90) ^ 0x17F4BBC791FBFBFFLL);
  v107 = (((unint64_t)(v106 - 0x17F4BBC791FBFBFFLL) >> 32) ^ 0x2FDBFFBFFFC7B97FLL)
       + v106
       + (((unint64_t)(v106 - 0x17F4BBC791FBFBFFLL) >> 31) & 0x1FF8F72FELL);
  v108 = (((v107 - 0x47D0BB8791C3B57ELL) >> 16) ^ 0xFBFBEDFF5FFCD4FDLL)
       + v107
       + (((v107 - 0x47D0BB8791C3B57ELL) >> 15) & 0x1DBFEBFF9A9FALL);
  v109 = v85 > 0x2267BB42;
  if (v85 < 0x2267BB41)
    v109 = 1;
  v110 = (((v108 - 0x43CCA986F1C08A7BLL) >> 8) ^ 0xFFD693B6EF7FD7AFLL)
       + v108
       + (((v108 - 0x43CCA986F1C08A7BLL) >> 7) & 0x1AD276DDEFFAF5ELL);
  v111 = ((2 * (v110 + 515874262)) & 0xA9BDF326) + ((v110 + 515874262) ^ 0x54DEF993);
  return ((uint64_t (*)(unint64_t, _QWORD))*(&off_100260750 + ((508 * !v109) ^ v5)))(v87 ^ v98 ^ v105 ^ 0xEA4662A5 ^ ((_DWORD)v110- 2* (((_DWORD)v110 - 518073248) & 0x1DE0075 ^ v110 & 0x10)- 486746939), v86 ^ (v97 - 1013720915) ^ (v104 - 1456638119) ^ 0x82F9AB1A ^ (v111- ((2 * v111 + 413221732) & 0xF0A315E8)+ 77737126));
}

uint64_t sub_1000E5CA4@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X4>, unsigned int a5@<W8>)
{
  unsigned int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;

  v6 = (a3 + 183385099) | 0x12A;
  v7 = (STACK[0x5C0] & 2) == 0;
  v8 = STACK[0x678];
  if ((STACK[0x5C0] & 2) == 0)
    v8 = STACK[0x670];
  LODWORD(STACK[0x3E0]) = v8;
  v9 = STACK[0x640];
  if (v7)
    v9 = STACK[0x608];
  LODWORD(STACK[0x290]) = v9;
  v10 = STACK[0x5F0];
  if (!v7)
    v10 = STACK[0x5D0];
  LODWORD(STACK[0x3AC]) = v10;
  v11 = STACK[0x4A0];
  if (v7)
    v11 = STACK[0x498];
  LODWORD(STACK[0x328]) = v11;
  v12 = (STACK[0x580] & 2) == 0;
  v13 = STACK[0x294];
  if ((STACK[0x580] & 2) != 0)
    v13 = STACK[0x44C];
  LODWORD(STACK[0x264]) = v13;
  v14 = STACK[0x3B4];
  if (!v12)
    v14 = STACK[0x3B0];
  LODWORD(STACK[0x24C]) = v14;
  v15 = STACK[0x688];
  if (!v12)
    v15 = STACK[0x270];
  LODWORD(STACK[0x22C]) = v15;
  v16 = STACK[0x5E0];
  LODWORD(STACK[0x550]) = LODWORD(STACK[0x5E0]) ^ 0x43A8700A;
  LODWORD(STACK[0x5D0]) = STACK[0x4C0] & 0xFFFFFF80;
  v17 = LODWORD(STACK[0x3BC]) - LODWORD(STACK[0x404]);
  LODWORD(STACK[0x4A0]) = v17;
  LODWORD(STACK[0x44C]) = LODWORD(STACK[0x398]) ^ v17;
  LODWORD(STACK[0x3BC]) = LODWORD(STACK[0x3DC]) ^ 0x8DB65C66;
  LODWORD(STACK[0x3B4]) = v16 ^ 0xE585D750;
  v18 = STACK[0xB50];
  STACK[0x688] = (v6 + 276832913) | 0xE90340C8;
  v19 = STACK[0x688] + a5 + ((unint64_t)(a5 < v5) << 32) - 4286669719u;
  v20 = 0xB3D5C9433319E527 * (*(_QWORD *)(v18 + 8 * v19) ^ 0x9696969696969696)
      - ((0x67AB92866633CA4ELL * (*(_QWORD *)(v18 + 8 * v19) ^ 0x9696969696969696)) & 0x72185C3632598C32)
      + 0x390C2E1B192CC619;
  v21 = ((2 * ((a4 ^ 0x993F631A18F2C67CLL ^ v20) + v19)) & 0xB7F7ED957EF6FAE8)
      + (((a4 ^ 0x993F631A18F2C67CLL ^ v20) + v19) ^ 0xDBFBF6CABF7B7D74);
  v22 = (((v21 + 0x240409354084828CLL) >> 32) ^ 0x6F7FF7FFA2CB3CBALL)
      + v21
      + (((v21 + 0x240409354084828CLL) >> 31) & 0x145967974);
  v23 = (((v22 - 0x4B7BEECA6246BA2ELL) >> 16) ^ 0x5F7E4EE75745F87FLL)
      + v22
      + (((v22 - 0x4B7BEECA6246BA2ELL) >> 15) & 0x9DCEAE8BF0FELL);
  v24 = (((v23 + 0x5505C24E46734D53) >> 8) ^ 0xDFBFFEFFEB3FFFC7)
      + v23
      + (((v23 + 0x5505C24E46734D53) >> 7) & 0x17FFDFFD67FFF8ELL);
  v25 = ((2 * (v24 + 1530088844)) & 0x5DFAFF7E) + ((v24 + 1530088844) ^ 0xAEFD7FBF);
  v26 = v24 - ((2 * v24 + 0x1E77A7FC3B25082CLL) & 0xFFF37839D519554ALL) + 0xF35901B081F2EBBLL;
  v27 = ((2 * ((v20 ^ 0x46F59207F3A06CBCLL ^ v26) + v19)) & 0x9DBDBFFDE7FFFF48)
      + (((v20 ^ 0x46F59207F3A06CBCLL ^ v26) + v19) ^ 0xCEDEDFFEF3FFFFA4);
  v28 = (((v27 + 0x312120010C00005CLL) >> 32) ^ 0xFFEE7CFF77FBDF6DLL)
      + v27
      + (((v27 + 0x312120010C00005CLL) >> 31) & 0xEFF7BEDA);
  v29 = (((v28 + 0x3132A301940420EFLL) >> 16) ^ 0xAFBAEDBADFFF7BDDLL)
      + v28
      + (((v28 + 0x3132A301940420EFLL) >> 15) & 0x1DB75BFFEF7BALL);
  v30 = (((v29 - 0x7E884AB94BFB5AEELL) >> 8) ^ 0x76EFE7EDEF777EF9)
      + v29
      + (((v29 - 0x7E884AB94BFB5AEELL) >> 7) & 0x1DFCFDBDEEEFDF2);
  v31 = ((2 * (v30 - 997382631)) & 0xFFEFF7D4) + ((v30 - 997382631) ^ 0xFFF7FBEA);
  v32 = v31 - ((2 * v31 - 1032896842) & 0xB2B18B50);
  v33 = v30 - ((2 * v30 + 0x48FBBC110DD8B946) & 0x54ACBAA0C4378886) + 0x4ED43B58E90820E6;
  v34 = ((2 * ((v20 ^ 0x135A734B7B37025ALL ^ v33) + v19)) & 0xD765FDF2FD9ED6BELL)
      + (((v20 ^ 0x135A734B7B37025ALL ^ v33) + v19) ^ 0x6BB2FEF97ECF6B5FLL);
  v35 = (((v34 - 0x6BB2FEF97ECF6B5FLL) >> 32) ^ 0xD3FFE7FECB31FF7FLL)
      + v34
      + (((v34 - 0x6BB2FEF97ECF6B5FLL) >> 31) & 0x19663FEFELL);
  v36 = (((v35 - 0x3FB2E6F84A016ADELL) >> 16) ^ 0x8CECFCFBE6EB7FC9)
      + v35
      + (((v35 - 0x3FB2E6F84A016ADELL) >> 15) & 0x1F9F7CDD6FF92);
  v37 = (((v36 + 0x33601C0BCF131559) >> 8) ^ 0x1D7CAFEFFDDFF7FDLL)
      + v36
      + (((v36 + 0x33601C0BCF131559) >> 7) & 0xF95FDFFBBFEFFALL);
  LODWORD(v20) = ((2 * (v37 - 785179300)) & 0xDFE4FFFE) + ((v37 - 785179300) ^ 0x6FF27FFF);
  return ((uint64_t (*)(_QWORD, _QWORD))((char *)*(&off_100260750
                                                           + ((185 * ((a5 & 0xFFFFFFFE) != v5 - 1)) ^ v6))
                                                 - 12))(a1 ^ v26 ^ v33 ^ 0x89496E83 ^ ((_DWORD)v37- ((2 * (_DWORD)v37 + 656713676) & 0x3BC00CA)- 1787800501), a2 ^ (v25 - ((2 * v25 + 610547468) & 0x34586B1A) - 866234093) ^ (v32 + 982541571) ^ 0x910BB527 ^ ((_DWORD)v20 - ((2 * (_DWORD)v20 - 495307124) & 0xA4FE8A04) - 1011064760));
}

void sub_1000E64E4()
{
  JUMPOUT(0x1000E5E34);
}

#error "1000E93B8: call analysis failed (funcsize=1962)"

void sub_1000E93BC()
{
  JUMPOUT(0x1000E8898);
}

uint64_t sub_1000E93C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a66;
  int a67;
  int a68;
  int a69;
  int a71;
  int v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  unsigned int v101;

  LODWORD(STACK[0x570]) = LODWORD(STACK[0x3C0]) ^ LODWORD(STACK[0x4A0]);
  v73 = LODWORD(STACK[0x678]) | 0x92D8C8F0;
  LODWORD(STACK[0x3C4]) = (LODWORD(STACK[0x20C]) - LODWORD(STACK[0x230])) ^ LODWORD(STACK[0x3C8]) ^ (LODWORD(STACK[0x204]) - LODWORD(STACK[0x210]));
  LODWORD(STACK[0x3C8]) = LODWORD(STACK[0x368]) ^ LODWORD(STACK[0x310]) ^ v73;
  LODWORD(STACK[0x670]) = a71 - LODWORD(STACK[0x200]);
  LODWORD(STACK[0x230]) = a68 - a69;
  LODWORD(STACK[0x660]) = a66 - a67;
  LODWORD(STACK[0x4A0]) = LODWORD(STACK[0x498]) ^ 0x6FB3F18C;
  LODWORD(STACK[0x3C0]) = LODWORD(STACK[0x300]) ^ 0xDE94D241;
  LODWORD(STACK[0x200]) = LODWORD(STACK[0x378]) ^ 0x246D821D;
  v74 = a4
      - 319735164
      + ((unint64_t)(a4 < (a1 ^ 0x7E6) + 319734378) << 32);
  v75 = 0xB3D5C9433319E527 * (*(_QWORD *)(STACK[0xB50] + 8 * v74) ^ 0x9696969696969696)
      - 0x171AC590B41C3E09
      - ((0x67AB92866633CA4ELL * (*(_QWORD *)(STACK[0xB50] + 8 * v74) ^ 0x9696969696969696)) & 0xD1CA74DE97C783EELL);
  v76 = ((2 * ((v72 ^ 0x5E2FE7BAF2925B87 ^ v75) + v74)) & 0xEF5BFB5FBFDD3FFELL)
      + (((v72 ^ 0x5E2FE7BAF2925B87 ^ v75) + v74) ^ 0x77ADFDAFDFEE9FFFLL);
  v77 = (((v76 - 0x77ADFDAFDFEE9FFFLL) >> 32) ^ 0x50DF556D67627FFFLL)
      + v76
      + (((v76 - 0x77ADFDAFDFEE9FFFLL) >> 31) & 0xCEC4FFFE);
  v78 = (((v77 + 0x3772ACE2B8AEE002) >> 16) ^ 0xD9B595F6AEF791BBLL)
      + v77
      + (((v77 + 0x3772ACE2B8AEE002) >> 15) & 0x12BED5DEF2376);
  v79 = v78 - ((2 * v78 - 0x4485D227EC916372) & 0x86E5B50450A5688ELL) + 0x212FF16E320A028ELL;
  v80 = 2
      * ((((v79 >> 8) ^ 0xC372DA822852B4) & (v79 ^ 0xC372DA822852B447))
       - ((2 * (((v79 >> 8) ^ 0xC372DA822852B4) & (v79 ^ 0xC372DA822852B447))) & 0x6A54BFAC633542))
      + 0x6A6A54BFAC633542;
  v81 = (v79 ^ 0xC3B1A858AA7AE6F3 ^ (v79 >> 8))
      + (v80 ^ 0xD5A7A74CC0BB5ADDLL)
      + 0x40320C0C93279061
      + ((2 * v80) & 0x7F9BE7E6D9B0DF3CLL ^ 0x5490A16658804A04);
  v82 = ((2 * v81) & 0xFEB17D1FBFFF77DELL) + (v81 ^ 0x7F58BE8FDFFFBBEFLL);
  LODWORD(v81) = v82 - ((2 * v82 + 39829164) & 0xE120D81C) + 1908427620;
  LODWORD(v80) = (((2 * v81) ^ 0xE120D81C) - ((2 * ((2 * v81) ^ 0xE120D81C)) & 0xEAC0DA94) - 178229942) & v71 ^ 0x5D002018;
  v83 = v80 - ((2 * (_DWORD)v80) & 0xA05E158);
  v84 = v82 - ((2 * v82 + 0x153AA43FC4BEF536) & 0x15A46F7EF76B4A80) + 0x256F89DF5E151FDBLL;
  v85 = ((2 * ((v75 ^ 0x62370DD0305664B7 ^ v84) + v74)) & 0x11FFBB6E79BB77FELL)
      + (((v75 ^ 0x62370DD0305664B7 ^ v84) + v74) ^ 0x88FFDDB73CDDBBFFLL);
  v86 = (((v85 + 0x77002248C3224401) >> 32) ^ 0xF2FEAFF0E3FF17ECLL)
      + v85
      + (((v85 + 0x77002248C3224401) >> 31) & 0x1C7FE2FD8);
  v87 = (((v86 - 0x7BFE8DA820DCD3EBLL) >> 16) ^ 0x37F7BBBEFBDB7CEBLL)
      + v86
      + (((v86 - 0x7BFE8DA820DCD3EBLL) >> 15) & 0x1777DF7B6F9D6);
  v88 = (((v87 + 0x4C09B698E347AF2ALL) >> 8) ^ 0x7E7E5DFE6D6DFDD7)
      + v87
      + (((v87 + 0x4C09B698E347AF2ALL) >> 7) & 0xFCBBFCDADBFBAELL);
  v89 = v88 - ((2 * v88 - 1374512848) & 0xA6D22886) - 1435344677;
  v90 = (((2 * v89) ^ 0xA6D22886) - ((2 * ((2 * v89) ^ 0xA6D22886)) & 0xDCBF57C4) - 295719965) & v71 ^ v89;
  v91 = v88 - ((2 * v88 - 0x30FD2D6B8F8E3046) & 0x9A12917A9B1C6096) + 0x348AB20785C71828;
  v92 = v75 ^ 0xE8E53A6F4BE3C1F7;
  v93 = (v75 ^ 0xE8E53A6F4BE3C1F7) + (v75 ^ 0x5A138D2DF9920E43 ^ v91) + 1;
  v94 = ((0x3EE9D3CB2213F095 - v88 - ((0x30FD2D6B8F8E3046 - 2 * v88) & 0x4CD67A2AB499B0E4)) ^ v91 ^ 0x2CA44C054EFCD525 ^ (v93 - ((2 * v93) & 0x8F8C735AB27C7A38) + 0x47C639AD593E3D1CLL))
      + v74;
  v95 = v92 + (v94 ^ 0x5DA93FBF6ED3BFBFLL) + ((2 * v94) & 0xBB527F7EDDA77F7ELL) - 0x5DA93FBF6ED3BFBFLL;
  v96 = (((((2 * v95) & 0xEFD3B73FFDDD3AF6) + (v95 ^ 0xF7E9DB9FFEEE9D7BLL) + 0x816246001116285) >> 32) ^ 0xFFBF37733F5DEE9BLL)
      + ((2 * v95) & 0xEFD3B73FFDDD3AF6)
      + (v95 ^ 0xF7E9DB9FFEEE9D7BLL)
      + (((((2 * v95) & 0xEFD3B73FFDDD3AF6) + (v95 ^ 0xF7E9DB9FFEEE9D7BLL) + 0x816246001116285) >> 31) & 0x7EBBDD36);
  v97 = (((v96 + 0x856ECECC1B373EALL) >> 16) ^ 0xFF3FFDBBFF71F776)
      + v96
      + (((v96 + 0x856ECECC1B373EALL) >> 15) & 0x1FB77FEE3EEECLL);
  v98 = (((v97 + 0x916EF30C2417C74) >> 8) ^ 0xBE3EFAAB7FFA7FAFLL)
      + v97
      + (((v97 + 0x916EF30C2417C74) >> 7) & 0x7DF556FFF4FF5ELL);
  v99 = (v98 - ((2 * v98 - 0x6A5016F57B720676) & 0xD3D37689F9A651ECLL) - 0x4B3E5035C0E5DA45) ^ 0x69E9BB44FCD328F6;
  v100 = v99 - ((2 * v99 - 1033947510) & 0xB327EDB8) + 985895457;
  v101 = (((2 * v100) ^ 0xB327EDB8) - ((2 * ((2 * v100) ^ 0xB327EDB8)) & 0x828933D4) - 1052468757) & v71 ^ 0xC30247EC;
  LODWORD(STACK[0x688]) ^= v81 ^ (v83 + 622261423) ^ v90 ^ 0x5E2EA1C6 ^ (((2 * v101) | 0x8AA7DC18) - v101 - 1163128332) ^ v100;
  return ((uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)*(&off_100260750 + (int)((577 * ((a4 - 319735163) > 1)) ^ a1)) - 4))(a1, v90, 0xD0C0EE857BD0D0FALL, a4, 0x15A46F7EF76B4A80, 2 * v99, v83, 319735164, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62);
}

void sub_1000EA010()
{
  JUMPOUT(0x1000E9504);
}

#error "1000EBEF8: call analysis failed (funcsize=1218)"

void sub_1000EBEFC()
{
  JUMPOUT(0x1000EB4BCLL);
}

uint64_t sub_1000EBF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,int a63)
{
  int a64;
  int a65;
  int a67;
  int a69;
  int a70;
  int a71;
  int a72;
  int a73;
  int a74;
  int a75;
  int v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;

  v79 = STACK[0x3A4];
  if ((STACK[0x5C0] & 2) != 0)
    v79 = STACK[0x3A0];
  LODWORD(STACK[0x39C]) = v79;
  LODWORD(STACK[0x3A0]) = a74 ^ LODWORD(STACK[0x4C0]);
  LODWORD(STACK[0x3A4]) = a72 - a73;
  LODWORD(STACK[0x670]) = a75 - LODWORD(STACK[0x398]);
  LODWORD(STACK[0x364]) ^= LODWORD(STACK[0x550]) ^ HIDWORD(a59) ^ a60 ^ v75 ^ a71 ^ a70 ^ a65 ^ (a64 + a63 - 1);
  v80 = HIDWORD(a57) ^ LODWORD(STACK[0x510]) ^ a58 ^ v76 ^ LODWORD(STACK[0x310]) ^ a69 ^ a67 ^ HIDWORD(a60) ^ (a59 + HIDWORD(a58) - 2);
  LODWORD(STACK[0x310]) = v80;
  LODWORD(STACK[0x398]) = v80 ^ 0xEEC584DB;
  v81 = a5 - 721574501 + ((unint64_t)(a5 < 0x2B025452) << 32) + 1555;
  v82 = ((v78 - 1295) | 0x4C0) ^ 0x9696969696969352 ^ *(_QWORD *)(STACK[0xB50] + 8 * v81);
  v83 = 0xB3D5C9433319E527 * v82 - ((0x67AB92866633CA4ELL * v82) & 0x8F630D5FD182B440) + 0x47B186AFE8C15A20;
  v84 = ((2 * ((v77 ^ 0x3ED91CA827D2F9E2 ^ v83) + v81)) & 0xBFEEE93CCFFFC85ELL)
      + (((v77 ^ 0x3ED91CA827D2F9E2 ^ v83) + v81) ^ 0x5FF7749E67FFE42FLL);
  v85 = (((v84 - 0x5FF7749E67FFE42FLL) >> 32) ^ 0x4FAFFBFF36F7DFABLL)
      + v84
      + (((v84 - 0x5FF7749E67FFE42FLL) >> 31) & 0x6DEFBF56);
  v86 = (((v85 + 0x50588F6261083C26) >> 16) ^ 0x7ED7B5FEE7F5CBD7)
      + v85
      + (((v85 + 0x50588F6261083C26) >> 15) & 0x16BFDCFEB97AELL);
  v87 = (((v86 - 0x2E7F269C86ED8FB1) >> 8) ^ 0xFFDFCCAF78BFDF2FLL)
      + v86
      + (((v86 - 0x2E7F269C86ED8FB1) >> 7) & 0x1BF995EF17FBE5ELL);
  v88 = v87 - 2 * ((v87 + 0x11A10CB400529120) & 0x3C390CEA348FE9BFLL ^ v87 & 0xC) - 0x7225E661CB1D852DLL;
  v89 = (v88 ^ 0xBC390CEA348FE9B3)
      - ((2 * (v88 ^ 0xBC390CEA348FE9B3) + 0x13EC215F84BE6D14) & 0x16AAEAD79949FF22)
      - 0x5AB479E470FBC9E5;
  LODWORD(v87) = ((4 * v89) ^ 0x3293FE44) - 2 * (((4 * v89) ^ 0x3293FE44) & 0x51FD91E8 ^ (4 * v89) & 8) + 1375572451;
  v90 = ((2 * ((v83 ^ 0xCCE4F3C42465A5B1 ^ v89) + v81)) & 0x9FFBCCCADFB95AF6)
      + (((v83 ^ 0xCCE4F3C42465A5B1 ^ v89) + v81) ^ 0xCFFDE6656FDCAD7BLL);
  v91 = (((v90 + 0x3002199A90235285) >> 32) ^ 0x6FFFFFAF577BDDDDLL)
      + v90
      + (((v90 + 0x3002199A90235285) >> 31) & 0xAEF7BBBA);
  v92 = (((v91 - 0x3FFDE614C7588B58) >> 16) ^ 0xBFFEBAFD9FFF76EFLL)
      + v91
      + (((v91 - 0x3FFDE614C7588B58) >> 15) & 0x175FB3FFEEDDELL);
  v93 = (((v92 + 0x35EED98A7FDB9) >> 8) ^ 0x7FFFFE61B3DFDBBFLL)
      + v92
      + (((v92 + 0x35EED98A7FDB9) >> 7) & 0x1FFFCC367BFB77ELL);
  v94 = (v93 - ((2 * v93 + 0x6C117C99043F4) & 0x32ED558B5582B78ELL) + 0x197A0B518F897DC1) ^ 0x9976AAC5AAC15BC7;
  v95 = v94 - ((2 * v94 + a2) & 0x57608B7892E7FA94) + 0x45A6566C0BD333D4;
  v96 = ((2 * ((v83 ^ 0x6C01C313A1B2A76ALL ^ v95) + v81)) & 0x7F7FDFFEDF77FB78)
      + (((v83 ^ 0x6C01C313A1B2A76ALL ^ v95) + v81) ^ 0xBFBFEFFF6FBBFDBCLL);
  v97 = (((v96 + 0x4040100090440244) >> 32) ^ 0x5585DEFFFDBEEEDALL)
      + v96
      + (((v96 + 0x4040100090440244) >> 31) & 0x1FB7DDDB4);
  v98 = (((v97 - 0x1545CEFF6D7AEC96) >> 16) ^ 0x73DFF5EFEF7DEE7ELL)
      + v97
      + (((v97 - 0x1545CEFF6D7AEC96) >> 15) & 0x1EBDFDEFBDCFCLL);
  v99 = (((v98 + 0x76DA3B10A30724ECLL) >> 8) ^ 0x9FFFDBFA537D7E7ALL)
      + v98
      + (((v98 + 0x76DA3B10A30724ECLL) >> 7) & 0x1FFB7F4A6FAFCF4);
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)*(&off_100260750 + ((118 * (a5 - 721572945 > 1)) ^ v78)) - 4))(((4 * ((_DWORD)v99 - ((2 * (_DWORD)v99 + 600947192) & 0x9E274784) - 520322882)) ^ 0x3C4E8F08) & 0x60EDE23C, a2, 721572946, 2348420007, a5 - 721572945, 118, v87 & 0x8A662110 ^ 0x82102201 | v87 & 0x100998C0, v89, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62);
}

void sub_1000ECA9C()
{
  JUMPOUT(0x1000EC040);
}

uint64_t sub_1000ECAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a68;
  int v68;
  int v69;
  int v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  int v112;
  int v113;
  BOOL v114;
  int v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  int v130;
  unsigned int v131;
  int v132;
  int v133;
  unsigned int v134;
  unint64_t v135;
  unsigned int v136;
  int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;

  v72 = LODWORD(STACK[0x250]) ^ LODWORD(STACK[0x260]);
  LODWORD(STACK[0x218]) -= LODWORD(STACK[0x240]);
  v73 = (v71 ^ 0xC4B876F2AEE1A5ECLL)
      + ((v71 >> 27) ^ 0x8C1C05001F0EBE11)
      + ((v71 >> 26) & 0xEEFFF3F76 ^ 0xFFFFFFFFD1E2C3DDLL)
      + 0x73E3FAE777FF9FBDLL;
  v74 = ((2 * v73) & 0xFBCFF357FBF9FCF2)
      + (v73 ^ 0xFDE7F9ABFDFCFE79)
      + (((((2 * v73) & 0xFBCFF357FBF9FCF2) + (v73 ^ 0xFDE7F9ABFDFCFE79) + 0x218065402030187) >> 14) ^ 0x948B208203420400)
      - (((((2 * v73) & 0xFBCFF357FBF9FCF2) + (v73 ^ 0xFDE7F9ABFDFCFE79) + 0x218065402030187) >> 13) & 0x1BEFBF97BF7FELL);
  v75 = v74
      + (((v74 + 0x6D8CE5D1FEC0FD87) >> 6) ^ 0xAC89292C4C4F300)
      - (((v74 + 0x6D8CE5D1FEC0FD87) >> 5) & 0x26EDADA767619FELL)
      + 2;
  v76 = v75 - ((2 * v75 - 0x3A7759818C07EAF6) & 0xD8948ED13E220BD8) + 0x4F0E9AA7D90D1071;
  v77 = ((2 * ((v76 ^ 0xEC4A47689F1105ECLL) + 0x301F1AB817992D55)) & 0x7EDEFFFFE717FFFELL)
      + (((v76 ^ 0xEC4A47689F1105ECLL) + 0x301F1AB817992D55) ^ 0xBF6F7FFFF38BFFFFLL);
  v78 = v77
      + (((v77 + 0x409080000C740001) >> 24) ^ 0x818182191644A8ACLL)
      - (((v77 + 0x409080000C740001) >> 23) & 0x1CDD376AEA6);
  v79 = v78
      + (((v78 - 0x40F1021909D0A8ABLL) >> 14) ^ 0x31C2C00104221121)
      - (((v78 - 0x40F1021909D0A8ABLL) >> 13) & 0x27FFDF7BBDDBCLL);
  v80 = v79
      + (((v79 - 0x72B3C21A0DF2B9CCLL) >> 6) ^ 0x6EEBFFFFCFF4FFBFLL)
      + (((v79 - 0x72B3C21A0DF2B9CCLL) >> 5) & 0x5D7FFFF9FE9FF7ELL);
  v81 = (((v80 - 0x3DEBE6028005979ELL) >> 27) ^ 0xE2F675CDFEFDFF9ELL)
      + v80
      + 2
      + (((v80 - 0x3DEBE6028005979ELL) >> 26) & 0x1BFDFBFF3CLL);
  v82 = (((v81 - 0x20E25BD07F03973ELL) >> 12) ^ 0x53B7BD727AF5E3FBLL)
      + v81
      + (((v81 - 0x20E25BD07F03973ELL) >> 11) & 0xF7AE4F5EBC7F6);
  v83 = v82
      + (((v82 - 0x749A1942F9F97B39) >> 2) ^ 0x9880008100202070)
      - (((v82 - 0x749A1942F9F97B39) >> 1) & 0x4EFFFEFDFFBFBF1ELL);
  v84 = 2 * (v83 + 1) + 197970092;
  LODWORD(v82) = (4 * (v83 + 1 - (v84 & 0x3906A286)) - 1985554844) ^ 0x720D450C;
  v85 = (((v82 - ((2 * v82) & 0x89F10C60) - 990345678) & 0x102409D0 ^ 0x643008CF) - 1) & 0x742409D6 | (v82 - ((2 * v82) & 0x89F10C60) - 990345678) & 0x8A4BB000;
  v86 = v83 + 1 - (v84 & 0x9AF3E780) + 1398822934;
  v87 = v83
      + 1
      + (((v83 + 0x66A6B0FC61290A5) >> 30) ^ 0xF419401214185816)
      - (((v83 + 0x66A6B0FC61290A5) >> 29) & 0x3D7CF4FD2);
  v88 = v87
      + (((v87 + 0x12512AFDB1FA388ELL) >> 12) ^ 0x1204000019B18008)
      - (((v87 + 0x12512AFDB1FA388ELL) >> 11) & 0x17FFFFCC9CFFEELL);
  v89 = v88
      + (((v88 + 0x4D2AFD9848B886) >> 7) ^ 0x200140C823404440)
      - (((v88 + 0x4D2AFD9848B886) >> 6) & 0x3FD7E6FB97F777ELL)
      + 3;
  v90 = v89 - ((2 * v89 + 0x4097D46AEA10E886) & 0x5F5BE97619D64C8CLL) - 0x7006210F7E0C6577;
  v91 = ((2 * ((v90 ^ 0xAFADF4BB0CEB2646) + 0x3DEAA251E4C860FCLL)) & 0xFF9FECFFFEF677EELL)
      + (((v90 ^ 0xAFADF4BB0CEB2646) + 0x3DEAA251E4C860FCLL) ^ 0xFFCFF67FFF7B3BF7);
  v92 = (((v91 + 0x3009800084C409) >> 31) ^ 0x7FF7F7FBFF39FFAALL)
      + v91
      + (((v91 + 0x3009800084C409) >> 30) & 0x3FE73FF54);
  v93 = (((v92 - 0x7FC7EE7BFEB53BA1) >> 8) ^ 0x5FB7F7E3FD79FCDFLL)
      + v92
      + (((v92 - 0x7FC7EE7BFEB53BA1) >> 7) & 0x16FEFC7FAF3F9BELL);
  v94 = (((v93 + 0x208019A003D0C780) >> 7) ^ 0x57DFD7F5FFFCB7FBLL)
      + v93
      + (((v93 + 0x208019A003D0C780) >> 6) & 0x3BFAFEBFFF96FF6);
  v95 = v94 - ((2 * v94 + 0x1140835407A81F0ALL) & 0x5FFA12EBB67D3378) - 0x762B4E020ED56BFLL;
  v96 = (v95 ^ 0x11B1CAAB3693ED73)
      + ((v95 >> 30) ^ 0xB130A50846233AECLL)
      + ((v95 >> 29) & 0x7FE37DF7ELL ^ 0xFFFFFFFF73F9AAA7)
      + 0x4ECF5AF7FF1BEFC1;
  v97 = (((((2 * v96) & 0x97B4F4EDBF2FF7BALL) + (v96 ^ 0x4BDA7A76DF97FBDDLL) - 0x4BDA7A76DF97FBDDLL) >> 13) ^ 0xF0F677ABDBFFBFDFLL)
      + ((2 * v96) & 0x97B4F4EDBF2FF7BALL)
      + (v96 ^ 0x4BDA7A76DF97FBDDLL)
      + (((((2 * v96) & 0x97B4F4EDBF2FF7BALL) + (v96 ^ 0x4BDA7A76DF97FBDDLL) - 0x4BDA7A76DF97FBDDLL) >> 12) & 0xCEF57B7FF7FBELL);
  v98 = v97
      + (((v97 - 0x3CD0F222BB97BBBCLL) >> 2) ^ 0xAA904A024088411)
      - (((v97 - 0x3CD0F222BB97BBBCLL) >> 1) & 0x6AADF6BFB7EEF7DCLL)
      + 1;
  v99 = v98 - ((2 * v98 + 0x710C127A40BF8064) & 0x532F0CEC3CB27762) - 0x1DE2704CC147041DLL;
  v100 = (((4 * v99) ^ 0x7964EEC4) - ((2 * ((4 * v99) ^ 0x7964EEC4)) & 0x5DF4F30) + 49260440) & v70 ^ v99;
  v101 = ((2 * ((v99 ^ 0x299786761E593BB1) - 0x3181FFAFEC090B44)) & 0x5F19FD7D37FBFAFCLL)
       + (((v99 ^ 0x299786761E593BB1) - 0x3181FFAFEC090B44) ^ 0xAF8CFEBE9BFDFD7ELL);
  v102 = v101
       + (((v101 + 0x5073014164020282) >> 25) ^ 0x8032B3140C1)
       - (((v101 + 0x5073014164020282) >> 24) & 0xF9A99D7E7CLL);
  v103 = v102
       + (((v102 + 0x5072F93E38D0C1C1) >> 9) ^ 0x775FF9FD3EFDC7F7)
       + (((v102 + 0x5072F93E38D0C1C1) >> 8) & 0xBFF3FA7DFB8FEELL);
  v104 = v103
       + ((v103 - 0x26ED00BF062D0636) & 0xFF37B59E6FBBD386)
       + (((v103 - 0x26ED00BF062D0636) >> 1) ^ 0x7F9BDACF37DDE9C3)
       + 1;
  v105 = v104 - ((2 * v104 - 0x4D11B71C7C15DFF4) & 0xD73D8A47418A5C3CLL) - 0x3AEA166A9D45C1DCLL;
  v106 = ((2 * v105) ^ 0xD73D8A47418A5C3CLL)
       - ((2 * ((2 * v105) ^ 0xD73D8A47418A5C3CLL)) & 0x4C268AF1CE9FC8E8)
       - 0x19ECBA8718B01B8BLL;
  v107 = (v105 ^ 0x5362818AD05837D4)
       + (v106 & 0x71F88952E13A3394 ^ 0x5EAAB68E57D55FFALL)
       + ((2 * v106) & 0x617102A540346708 ^ 0x402002A140144008)
       - 0x3EBAB7DEB6DF7FEELL;
  v108 = ((2 * v107) & 0x7FFD3EEB23AFF7FELL)
       + (v107 ^ 0xBFFE9F7591D7FBFFLL)
       + (((((2 * v107) & 0x7FFD3EEB23AFF7FELL) + (v107 ^ 0xBFFE9F7591D7FBFFLL) + 0x4001608A6E280401) >> 24) ^ 0x80B24010CF3000BDLL)
       - (((((2 * v107) & 0x7FFD3EEB23AFF7FELL) + (v107 ^ 0xBFFE9F7591D7FBFFLL) + 0x4001608A6E280401) >> 23) & 0x1DE619FFE84);
  v109 = v108
       + (((v108 - 0x40B0DF866107FCBCLL) >> 15) ^ 0x9A02190101218403)
       - (((v108 - 0x40B0DF866107FCBCLL) >> 14) & 0x3CDFDFDBCF7F8);
  v110 = v109
       + (((v109 + 0x254D07789DD67F41) >> 8) ^ 0xB9AFBEBDBBEF5FBELL)
       + (((v109 + 0x254D07789DD67F41) >> 7) & 0x15F7D7B77DEBF7CLL);
  v111 = STACK[0x4A0];
  LODWORD(v76) = LODWORD(STACK[0x510]) ^ a68 ^ LODWORD(STACK[0x4A0]);
  v112 = ((v76 & 0x95B91442 ^ 0x1080440) - ((2 * (v76 & 0x95B91442 ^ 0x1080440)) & 0xA320000) - 1927601391) ^ 0x8753E219;
  LODWORD(v109) = (v112 - ((2 * v112) & 0xA4268000) + 1376993317) ^ 0x5C62816D | ((v76 & 0x6A46EBBD ^ 0x22060108)
                                                                                - ((2 * (v76 & 0x6A46EBBD ^ 0x22060108)) & 0x80844470)
                                                                                - 999149000) ^ 0xAE709BAD;
  LODWORD(v109) = v109 - ((2 * v109) & 0xC890CBF4) - 465017350;
  v113 = ((4 * v109) ^ 0x912197E8) + 630090224 - ((2 * ((4 * v109) ^ 0x912197E8)) & 0x4B1CD3F0) + 11;
  LODWORD(v76) = (v76 & 0x10 | (32 * (((v76 & 0x10) >> 4) & 1)) | 0x7EF8DFC7) ^ 0x20;
  v114 = ((v113 ^ 0x258E69F0) & ((_DWORD)v76 - 2130239447)) == ((2 * ((v113 ^ 0x258E69F0) & ((_DWORD)v76 - 2130239447))) & 0x80590FB0);
  v115 = v110 + 2;
  v116 = 2 * (v110 + 2);
  v117 = (((v110 - 0x31E2CD829BD90196) >> 29) ^ 0xFB77BBBEEFD06FEDLL)
       + v110
       + 2
       + (((v110 - 0x31E2CD829BD90196) >> 28) & 0xDDFA0DFDALL);
  v118 = v117
       + (((v117 - 0x2D5A89418BA97185) >> 9) ^ 0x306104CCE0487C1DLL)
       - (((v117 - 0x2D5A89418BA97185) >> 8) & 0x3DF6663F6F07C4);
  LODWORD(v110) = v118
                + (((v118 - 0x5DBB8E0E6BF1EDA2) >> 5) ^ 0xFBF751DF)
                + (((v118 - 0x5DBB8E0E6BF1EDA2) >> 4) & 0xF7EEA3BE)
                + 1;
  v119 = 2 * v110 + 271417596;
  v120 = v110 - (v119 & 0x14829DF8) + 576196474;
  v121 = (4 * (v115 - ((v116 + 63848194) & 0x791D214)) + 381690412) ^ 0x8F23A428;
  v122 = v121 - ((2 * v121) & 0x8E20DD28) + 1192259221;
  LODWORD(STACK[0x260]) = v122;
  v123 = v122 & 0x2289850 ^ 0x1808047;
  LODWORD(v110) = (4 * (v110 - (v119 & 0x19166042)) + 310887036) ^ 0xB22CC084;
  LODWORD(v110) = (v110 - ((2 * v110) & 0x573395A8) - 1415984428) & 0x9A6FB9D0 ^ 0x8A6BB900;
  v124 = ((2 * v110) & 0x24585220) - v110 + 742643400;
  v125 = ((2 * v113) & 0x20DC63A0 ^ 0x1C43A0) + (v113 & 0x9A6FB9D0 ^ 0x75F05E09);
  v126 = (v109 & 0xFFFFFFEF ^ 0x5134D043)
       + (v109 & 0x1323CBC9 ^ 0x2030B98)
       - ((v109 & 0xFFFFFFEF ^ 0x5134D043) & 0x1323CBC9);
  v127 = v76 - 1614284486;
  v128 = -1648772888 - v76;
  if (v114)
    v128 = v127;
  v129 = (((4 * LODWORD(STACK[0x498])) ^ 0x7EB18DB8)
        - 950114692
        - ((2 * ((4 * LODWORD(STACK[0x498])) ^ 0x7EB18DB8)) & 0x8EBCEC80)
        + 4038) & 0x9A6FB9D0 ^ 0xB65E3311;
  v130 = v111 ^ a68 ^ (((2 * v129) & 0x74CA3480) - v129 + 94037393) ^ v126 ^ LODWORD(STACK[0x670]) ^ (v125 + v128 - ((2 * (v125 + v128) + 1451318828) & 0x6063545A) + 460478787);
  LODWORD(STACK[0x510]) = LODWORD(STACK[0x360]) ^ 0x9FE55ECF;
  LODWORD(STACK[0x520]) = LODWORD(STACK[0x364]) ^ 0xB8B43950;
  LODWORD(STACK[0x250]) = v123 - 1;
  v131 = v130 ^ v69 ^ v86 ^ v85 ^ v100 ^ v120 ^ v124 & 0xFFFFFFF0;
  LODWORD(STACK[0x240]) = v131;
  LODWORD(STACK[0x394]) = v131 ^ 0x15E7AEC6;
  v132 = LODWORD(STACK[0x244]) ^ 0x28;
  LODWORD(STACK[0x668]) = LODWORD(STACK[0x530]) ^ 0x90C31DE9;
  v133 = LODWORD(STACK[0x374]) ^ 2;
  LODWORD(STACK[0x670]) = LODWORD(STACK[0x570]) ^ 0x32959A43;
  v134 = LODWORD(STACK[0x298]) ^ LODWORD(STACK[0x36C]) ^ 0x8D6C5169;
  LODWORD(STACK[0x4B0]) = v72;
  LODWORD(STACK[0x660]) = v72 ^ 0xF727DBA8;
  v135 = STACK[0xB58];
  LODWORD(STACK[0x5C0]) = v68 - 1036;
  v136 = (v68 - 1515228593) ^ 0xA5AF7813;
  v137 = 2 * ((v136 & STACK[0x5F0]) - ((2 * (v136 & STACK[0x5F0])) & 0x56406AD8)) + 1447062232;
  v138 = ((v137 ^ 0x56406AD8) + 188199512 - 2 * ((v137 ^ 0x56406AD8) & 0xB37B25C ^ v137 & 4)) ^ 0xA5AF7813;
  v139 = (v138 ^ 0xAE98CA4B) & STACK[0x668];
  v140 = (((((v139 - ((2 * v139) & 0x60) + 48) & 0xF5 ^ 0x37C969D5) & 0x1A1)
         - 844003329
         + ((((v139 - ((2 * v139) & 0x60) + 48) & 0xF5 ^ 0x37C969D5) & 0x5E | v139 & 0xA) ^ 0x82045)) ^ 0xCDB9A9A1) >> LODWORD(STACK[0x678]);
  v141 = (v140 - ((2 * v140) & 0xC) - 122) ^ 0xFFFFFF86 | (((v138 ^ 0x4B) << v133)
                                                         - 8 * ((v138 ^ 0x4B) << v133 >> 2)
                                                         + 124) ^ 0x7C;
  v142 = (2 * ((STACK[0x608] & 0x1AB4AEAE) - ((2 * (STACK[0x608] & 0x1AB4AEAE)) & 0x4EC178E4)) - 826181404) ^ 0xCEC178E4;
  v143 = (v142 - ((2 * v142) & 0xCDD10898) + 1726514252) ^ 0x7C5C2AE2;
  v144 = (((v143 & STACK[0x670]) + 370888427 - ((2 * (v143 & STACK[0x670])) & 0x2C369DD6)) ^ 0x161B4EEB) >> LODWORD(STACK[0x680]);
  v145 = (((v143 & STACK[0x660]) + 1568415224 - ((2 * (v143 & STACK[0x660])) & 0xBAF83BF0)) ^ 0x5D7C1DF8) << LODWORD(STACK[0x640]);
  v146 = 4 * (v132 ^ (v141 - ((2 * v141) & 0x20) - 112));
  *(_DWORD *)(STACK[0xB30] + v146) = LODWORD(STACK[0x5E0]) ^ LODWORD(STACK[0x5D0]) ^ (v145
                                                                                    - ((2 * v145) & 0x1D314FD8)
                                                                                    - 1902598164) ^ (v144 - ((2 * v144) & 0x7A2C08D0) + 1024853096) ^ 0x4045C015;
  *(_DWORD *)(v135 + v146) = v134 ^ 0xA1F699C6;
  return ((uint64_t (*)(uint64_t))((char *)*(&off_100260750
                                                    + ((31
                                                      * (((v136 - 1515227557 - ((2 * v136 + 2) & 0x4B5EF026) + 441) ^ 0xA5AF7800) > 0xFF)) ^ v68))
                                          - 8))(3468785892);
}

#error "1000EE3DC: too big function (funcsize=0)"

uint64_t sub_1001025FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(a7
                                        + 8
                                        * (((dword_100277CEC == 1197784504) * ((292 * (v7 ^ 0x92) - 1096) ^ (v7 - 29))) ^ v7))
                            - 4))();
}

uint64_t sub_100102654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  kern_return_t v9;

  v9 = IOMainPort(0, (mach_port_t *)&STACK[0x99C]);
  return ((uint64_t (*)(void))(*(_QWORD *)(a7
                                        + 8
                                        * ((223
                                          * ((((v7 + 45) ^ ((((v7 - 1540196730) & 0x5BCD8FCD ^ 0xFE736112) & (2 * v9))
                                                          + (v9 ^ 0x7F39B3EF) == 2134488047)) & 1) == 0)) ^ v7))
                            - 8))();
}

uint64_t sub_1001026CC()
{
  uint64_t v0;
  int v1;
  _BOOL4 v2;

  v2 = IOServiceMatching((const char *)&STACK[0x15E1]) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((v2 * (v1 + 1086)) ^ v1)) - 8))();
}

uint64_t sub_1001026FC(const __CFDictionary *a1)
{
  uint64_t v1;
  int v2;
  kern_return_t MatchingServices;

  MatchingServices = IOServiceGetMatchingServices(STACK[0x99C], a1, (io_iterator_t *)&STACK[0xA2C]);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((1570
                                          * (((2 * MatchingServices) & 0xEEEEEFF2) + (MatchingServices ^ 0x777777F9) == 2004318201)) ^ v2))
                            - ((77 * (v2 ^ 0xA4) + 451745605) & 0xE512EEED)
                            + 1733))();
}

uint64_t sub_100102774()
{
  uint64_t v0;
  int v1;
  io_object_t v2;

  v2 = IOIteratorNext(STACK[0xA2C]);
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((930
                                * (((v1 ^ (((2 * v2) & 0xEFF9BEDC) + (v2 ^ ((v1 ^ 0x657) + 2013059233)) == 2013060974)) & 1) == 0)) ^ v1)))();
}

uint64_t sub_1001027D8@<X0>(int a1@<W8>)
{
  int v1;
  kern_return_t v2;

  v2 = IOServiceOpen(a1 + (((v1 ^ 0x438) - 1058) | 0x64D) - 2013062715, mach_task_self_, 0, (io_connect_t *)&STACK[0x9FC]);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((108 * (((2 * v2) & 0x7DFFFEFE) + (v2 ^ 0x3EFFFF7F) == 1056964479)) ^ v1 ^ 0x438))
                            - 12))();
}

uint64_t sub_10010285C()
{
  io_object_t v0;
  int v1;
  uint64_t v2;

  dword_100277CEC = (v1 ^ 0x26F ^ LODWORD(STACK[0x9FC]) ^ 0x47F7FB70)
                  + ((2 * LODWORD(STACK[0x9FC])) & 0x8FEFFB7A)
                  - 9650181;
  IOObjectRelease(v0);
  v2 = IOObjectRelease(STACK[0xA2C]);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_100260750
                                                    + (((dword_100277CEC == 1197784504) * ((146 * (v1 ^ 0x4AA)) ^ 0x2F9)) ^ ((v1 ^ 0x26F) - 1591)))
                                          - 4))(v2);
}

void sub_100102904()
{
  unint64_t v0;

  STACK[0x8A0] = v0;
  JUMPOUT(0x100102E6CLL);
}

uint64_t sub_100102910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  __int16 v8;
  uint64_t v9;
  int v10;
  _OWORD *v11;
  char *v12;

  v11 = (_OWORD *)(STACK[0x648] + 17);
  v12 = (char *)&STACK[0xBB0] + v9;
  *(_DWORD *)v12 = v10 ^ 0x765D19C3;
  *((_WORD *)v12 + 2) = v8 - 13854;
  *(_OWORD *)((char *)&STACK[0xBB0] + v9 + 6) = *v11;
  return ((uint64_t (*)(void))(*(_QWORD *)(a7 + 8 * ((543 * (((v7 + 136739231) & 0xF7D983FE ^ 0x21ELL) == 16)) ^ v7))
                            - 8))();
}

uint64_t sub_10010299C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;

  return (*(uint64_t (**)(void))(a7 + 8 * (((v7 - 133) * (v8 != 1164808565)) ^ v7)))();
}

uint64_t sub_1001029C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;

  return (*(uint64_t (**)(void))(a7
                              + 8
                              * (((v9 ^ 0x2A9)
                                * ((v10 | ((unint64_t)(v10 < v8) << 32)) != 1164808565)) | v7)))();
}

uint64_t sub_100102A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;

  v14 = v10 < v8;
  *(_BYTE *)(v12 + v9 - 0x3FC4A616BA58A379) = *((_BYTE *)&STACK[0xBB0] + v11 - 0x5B21EAA23382D7BFLL) - 40;
  if (v14 == v13 - 0x6B477BDC80FE3E06 < v8)
    v14 = v13 - 0x6B477BDC80FE3E06 < v10;
  return (*(uint64_t (**)(void))(a7 + 8 * (v7 | (16 * v14))))();
}

uint64_t sub_100102AD4@<X0>(_DWORD *a1@<X2>, void *a2@<X4>, uint64_t a3@<X6>, int a4@<W8>)
{
  int v4;
  unint64_t v5;
  int v6;
  kern_return_t v8;
  unint64_t v9;
  _BOOL4 v10;

  a1[30] = v6 - 1164808565;
  STACK[0x750] = 16;
  v8 = IOConnectCallStructMethod(a4 - 1197784504, 0x20u, a1, 0x7CuLL, a2, &STACK[0x750]);
  v9 = STACK[0x750];
  STACK[0x8A0] = v5;
  v10 = v9 == ((v4 + 972) | 0x48u) - 1725 && v8 == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * ((1622 * v10) ^ v4)) - 12))();
}

uint64_t sub_100102B60()
{
  int v0;
  _BOOL4 v2;

  v2 = (*(_DWORD *)(STACK[0x688] + 96) & 2) == ((((v0 - 1610570414) | 0x4B14390) + 1531845054) ^ 0x559)
    || LODWORD(STACK[0x82C]) != 458470046;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((466 * v2) ^ (v0 + 581))) - 4))();
}

uint64_t sub_100102C48()
{
  int v0;
  _BYTE *v1;
  _BOOL4 v2;

  STACK[0x850] = 256;
  v1 = (_BYTE *)STACK[0x688];
  LOBYTE(STACK[0xC00]) = *(_BYTE *)(STACK[0x688] + 12) ^ 0x35;
  LOBYTE(STACK[0xC01]) = v1[13] ^ 0x35;
  LOBYTE(STACK[0xC02]) = v1[14] ^ 0x35;
  LOBYTE(STACK[0xC03]) = v1[15] ^ 0x35;
  LOBYTE(STACK[0xC04]) = v1[16] ^ 0x35;
  LOBYTE(STACK[0xC05]) = v1[17] ^ 0x35;
  LOBYTE(STACK[0xC06]) = v1[18] ^ (((v0 + 72) | 4) - 112);
  LOBYTE(STACK[0xC07]) = v1[19] ^ 0x35;
  LOBYTE(STACK[0xC08]) = v1[20] ^ 0x35;
  LOBYTE(STACK[0xC09]) = v1[21] ^ 0x35;
  LOBYTE(STACK[0xC0A]) = v1[22] ^ 0x35;
  LOBYTE(STACK[0xC0B]) = v1[23] ^ 0x35;
  LOBYTE(STACK[0xC0C]) = v1[24] ^ 0x35;
  LOBYTE(STACK[0xC0D]) = v1[25] ^ 0x35;
  LOBYTE(STACK[0xC0E]) = v1[26] ^ 0x35;
  LOBYTE(STACK[0xC0F]) = v1[27] ^ 0x35;
  LOBYTE(STACK[0xC10]) = v1[28] ^ 0x35;
  LOBYTE(STACK[0xC11]) = v1[29] ^ 0x35;
  LOBYTE(STACK[0xC12]) = v1[30] ^ 0x35;
  LOBYTE(STACK[0xC13]) = v1[31] ^ 0x35;
  LOBYTE(STACK[0xC14]) = v1[32] ^ 0x35;
  LOBYTE(STACK[0xC15]) = v1[33] ^ 0x35;
  LOBYTE(STACK[0xC16]) = v1[34] ^ 0x35;
  LOBYTE(STACK[0xC17]) = v1[35] ^ 0x35;
  LOBYTE(STACK[0xC18]) = v1[36] ^ 0x35;
  LOBYTE(STACK[0xC19]) = v1[37] ^ 0x35;
  LOBYTE(STACK[0xC1A]) = v1[38] ^ 0x35;
  LOBYTE(STACK[0xC1B]) = v1[39] ^ 0x35;
  LOBYTE(STACK[0xC1C]) = v1[40] ^ 0x35;
  LOBYTE(STACK[0xC1D]) = v1[41] ^ 0x35;
  LOBYTE(STACK[0xC1E]) = v1[42] ^ 0x35;
  LOBYTE(STACK[0xC1F]) = v1[43] ^ 0x35;
  v2 = aks_absinthe_generate(1u, STACK[0xAC0], (LODWORD(STACK[0x82C]) - 458470030), (uint64_t)&STACK[0xC00], 32, (void *)STACK[0x900], &STACK[0x850]) == 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((171 * v2) ^ v0)) - 4))();
}

void sub_100102E48()
{
  STACK[0x688] = STACK[0x958];
  JUMPOUT(0x100102E54);
}

uint64_t sub_100102E7C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  __int16 v3;
  unsigned int v4;
  int v5;

  *(_DWORD *)a1 = 2023518720;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1279805853;
  *(_QWORD *)(a1 + 64) = 0x4E36C53A99817805;
  *(_DWORD *)(a1 + 72) = 286036353;
  *(_BYTE *)(a1 + 8) = (v4 >> (((v5 ^ 0x89) - 82) ^ 0xD5)) ^ 0x9E;
  *(_BYTE *)(a1 + 9) = (23 * (v5 ^ 0x89) - 78) ^ BYTE2(v4);
  *(_BYTE *)(a1 + 10) = BYTE1(v4) ^ 0xCD;
  *(_BYTE *)(a1 + 11) = v4 ^ 0xCD;
  *(_WORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 96) = v2;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 1494274718;
  *(_QWORD *)(a1 + 120) = 0x6262E0568D5240A8;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 495404763;
  *(_DWORD *)(a1 + 128) = 0;
  return (*(uint64_t (**)(void))(v1 + 8 * (v5 ^ (400 * ((v2 - 2038988233) > 6)))))();
}

uint64_t sub_100102F7C@<X0>(int a1@<W8>)
{
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1680 * (STACK[0xA58] != 0)) ^ (a1 - 1582))) - 12))();
}

uint64_t sub_100102FA8()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v3 + 4) = dword_10023DB00[v1];
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((74 * (v0 ^ 0x2DA)) ^ 0x88)) - (74 * (v0 ^ 0x2DAu) - 693) + 709))();
}

uint64_t sub_100103020()
{
  int v0;
  int v1;

  return ((uint64_t (*)(void))((char *)*(&off_100260750 + (((v1 < v0 - 1741) * ((v0 - 1500) ^ 0x392)) ^ (v0 - 290))) - 8))();
}

uint64_t sub_10010305C@<X0>(int a1@<W1>, char a2@<W2>, int a3@<W4>, int a4@<W5>, int a5@<W8>)
{
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * (int)(((a3 & ~((((v5 - a5) | (a5 - v5)) >> ((a5 ^ (a2 + 41)) + 82)) ^ (a1 + a5 - 1)))
                                               * a4) ^ (a1 + a5 + 267)))
                            - 12))();
}

uint64_t sub_1001030A0(unsigned int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  char v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  int v16;

  v16 = (v10 + 108) | 0x462;
  *(_BYTE *)(v11 + (v13 - 885716705)) = (v16
                                                     - a2
                                                     + 50
                                                     + ((v9 ^ a1) >> (v8 + a2))
                                                     + ((v16 - 101) ^ a7)
                                                     - (a8 & (2 * ((v9 ^ a1) >> (v8 + a2))))
                                                     + 112) ^ v15;
  return ((uint64_t (*)(void))(*(_QWORD *)(v14
                                        + 8
                                        * ((509
                                          * (v13
                                           - ((v16
                                                              - a2
                                                              + 50
                                                              + ((v9 ^ a1) >> (v8 + a2))
                                                              + ((v16 - 101) ^ a7)
                                                              - (a8 & (2 * ((v9 ^ a1) >> (v8 + a2))))
                                                              + 112) != v15) == v12)) ^ v16))
                            - 12))();
}

uint64_t sub_100104130@<X0>(int a1@<W1>, char a2@<W2>, int a3@<W4>, int a4@<W5>, int a5@<W8>)
{
  return sub_10010305C(a1, a2, a3, a4, a5);
}

uint64_t sub_100104138()
{
  unint64_t v0;

  STACK[0x9F0] = v0;
  STACK[0xAA8] = STACK[0x678];
  return ((uint64_t (*)(unint64_t))STACK[0x428])(STACK[0x430]);
}

uint64_t sub_100104154()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (int)((((((v0 - 1255) | 0x85) ^ 0xFFFFFA24) + 349 * (v0 ^ 0x505))
                                               * (*(_DWORD *)(v2 + 4) == -1223708077)) ^ v0))
                            - 12))();
}

uint64_t sub_1001041A4()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  v4 = v0;
  STACK[0xA90] = v2;
  STACK[0x6F8] = v3;
  v5 = STACK[0x8A0];
  STACK[0x708] = (unint64_t)&STACK[0xBB0] + STACK[0x8A0];
  STACK[0x8A0] = v5 + 16;
  STACK[0x7F8] = 0;
  STACK[0x9B8] = 0;
  LODWORD(STACK[0x8EC]) = 495404763;
  STACK[0x6E8] = 1;
  v6 = container_system_group_path_for_identifier(0, "systemgroup.com.apple.pisco.suinfo", &STACK[0x6E8]) == 0;
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((v1 ^ 0xEF ^ v6) & 1) * ((v1 - 1577170293) & 0x5E01B6CD ^ 0x616)) ^ v1)))();
}

uint64_t sub_100104244()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((51 * (STACK[0x6E8] == 1)) ^ v0))
                            - (v0 + 562)
                            + 1737))();
}

uint64_t sub_100104274()
{
  const char *v0;
  int v1;
  size_t v2;
  BOOL v3;

  v2 = strlen(v0);
  v3 = malloc_type_malloc(((2 * v2) & 0xFE9D6DFFF8F9FBACLL) + (v2 ^ 0xFF4EB6FFFC7CFDD6) + 0xB1490003830247, 0xAE21939FuLL) == 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((760 * ((v3 ^ (v1 + 98)) & 1)) ^ v1)) - 4))();
}

uint64_t sub_100104314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  return (*(uint64_t (**)(void))(a3 + 8 * ((v4 + 419) ^ (107 * (v3 == 0xFF4EB6FFFC7CFDD6)))))();
}

uint64_t sub_100104390@<X0>(uint64_t a1@<X2>, int a2@<W8>)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;

  v11 = v3 < v4;
  *(_BYTE *)(v7 + v10 - 0x4D3A09D04695911ALL) = *(_BYTE *)(v6 + v9 - 0x6B822E0319913C21);
  if (v11 == v8 - 0x1C74F948877CCC94 < v2)
    v11 = v8 - 0x1C74F948877CCC94 < v3;
  return (*(uint64_t (**)(void))(a1 + 8 * ((!v11 * v5) ^ a2)))();
}

uint64_t sub_100104428()
{
  void *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  int v4;
  FILE *v5;

  strcpy(&v2[v3 + v1], "/Library/ProvenanceV2/psc.id");
  free(v0);
  v5 = fopen(v2, "rb");
  free(v2);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (((16 * (((v4 - 25) ^ (v5 == 0)) & 1)) & 0xBF | ((((v4 - 25) ^ (v5 == 0)) & 1) << 6)) ^ v4))
                            - (v4 + 1110)
                            + 1392))();
}

uint64_t sub_1001044E4()
{
  int v0;
  FILE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;

  fseek(v1, 0, 2);
  v2 = ftell(v1);
  v3 = v2 - ((2 * (_DWORD)v2) & 0x7FB63C92) + 0x1BFDB1E49;
  v4 = ((v3 & ((v0 - 1214) ^ 0xFFFFFF49) ^ 0x15B7BF99)
      + ((v0 + 1479754377) & 0xA7CCBECF ^ 0x3C995984820806EFLL ^ v3 & 0x93390523)
      - ((v3 & ((v0 - 1214) ^ 0xFFFFFF49) ^ 0x15B7BF99) & 0x93390523)) ^ 0x4D34924317585A3;
  v5 = (v4 | 0x348BAD5A8E7DAE95) - (v4 | 0xCB7452A57182516ALL) - 0x348BAD5A8E7DAE96;
  fseek(v1, 0, 0);
  v6 = malloc_type_malloc(v5 ^ 0xCC1BDFA865D8FC5, 0xFAA3BBA4uLL);
  STACK[0x7F8] = (unint64_t)v6;
  return ((uint64_t (*)(void))*(&off_100260750 + ((((v6 != 0) << 8) | ((v6 != 0) << 9)) ^ v0)))();
}

uint64_t sub_100104628(void *a1)
{
  FILE *v1;
  size_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  LODWORD(STACK[0x688]) = 546355592;
  LODWORD(STACK[0x680]) = 50950829;
  v5 = fread(a1, 1uLL, v2, v1);
  v6 = v4 ^ 0x41D ^ (v5 - 1440368279 - ((2 * v5) & 0x544B72D2u)) ^ 0x208806082AF35BC1;
  v7 = ((2 * v6) & 0x1100410C6C82F9ALL) - v6 + 0x37603D039C9BE832;
  STACK[0x678] = v7 ^ 0xFB78FB1BC823E46BLL;
  return ((uint64_t (*)(void))*(&off_100260750 + ((915 * ((v7 ^ 0xFB78FB1BC823E46BLL ^ v3) == 0xE0517DEA5233659FLL)) ^ v4)))();
}

uint64_t sub_10010471C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v6;
  int v7;

  return (*(uint64_t (**)(void))(a6 + 8 * (((*v6 == 1) * (((v7 + 843) | 0xAA) ^ 0x535)) ^ v7)))();
}

uint64_t sub_100104760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;

  return (*(uint64_t (**)(uint64_t))(a6
                                            + 8
                                            * (int)((((v7 + 91556117) & 0xFA8AF6BE ^ ((v7 - 45) | 0x422) ^ 0x136)
                                                   * ((v6 ^ 0x17E83B0B1C4D0E31uLL) > 1)) ^ v7)))(0xFE18453BD02C913);
}

uint64_t sub_100104810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  return (*(uint64_t (**)(_QWORD, unint64_t))(a6
                                                             + 8
                                                             * ((23
                                                               * (*(unsigned __int8 *)(v9 + a1 + v7) != (((((2 * v8) ^ 0xA2) - 4) & 0xFA | 4) ^ 0xB4))) ^ v8)))((v6 - 1259088347), (unint64_t)((v6 - 1259088347) < 0x1491AAC4) << 32);
}

uint64_t sub_100104870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v14 = a2 + a1 + v7 + v13 + 0xE11204C9075D11BLL;
  v15 = (((v12 - 44 + *(unsigned __int8 *)v14 - ((*(unsigned __int8 *)v14 << (v12 + 75)) & 0x9C)) << 8) + 17408) ^ 0xFFFFCE00;
  LOWORD(v14) = (v15 - ((2 * v15) & 0xD200) + 27001) ^ 0x6979 | (*(unsigned __int8 *)(v14 + 1)
                                                               - ((2 * *(unsigned __int8 *)(v14 + 1)) & 0x1E4)
                                                               + 24050) ^ 0x5DF2;
  LODWORD(v14) = (unsigned __int16)(v14 - ((2 * v14) & 0x9FB0) + 20440) ^ 0x4FD8;
  v16 = v6 + (v14 ^ 0x7BDBFEFB) + ((v10 + 512) & (2 * (_DWORD)v14)) - 2078015224;
  return (*(uint64_t (**)(void))(a6
                              + 8
                              * ((1303
                                * (v11 > (v16 | ((unint64_t)(v16 < v9) << 32))
                                       + 0xFE184535D64F472
                                       + v8)) ^ v12)))();
}

uint64_t sub_100104990()
{
  int v0;
  void *v1;

  STACK[0x978] = 0x19F0AA8D777D8E1DLL;
  v1 = malloc_type_malloc(0x15uLL, 0x1EF50C9BuLL);
  STACK[0xA58] = (unint64_t)v1;
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((341 * ((((v0 ^ 0xB9) + 1) ^ (v1 == 0)) & 1)) ^ v0))
                            - 12))();
}

uint64_t sub_100104EDC(_BYTE *a1)
{
  int v1;
  _BYTE *v2;
  unint64_t v4;

  sub_1001EC3DC(byte_100215990, (char *)&STACK[0xBC0], 0x10uLL);
  *a1 = ((v2[4] & 0x7F ^ 0xD7) - ((2 * (v2[4] & 0x7F ^ 0xD7)) & 0x72) - 71) ^ 0xB9;
  a1[1] = v2[12] ^ 0x35;
  a1[2] = (69 * (v1 ^ 0x23)) ^ v2[13] ^ 0x6C;
  a1[3] = v2[14] ^ 0x35;
  a1[4] = v2[15] ^ 0x35;
  a1[5] = v2[16] ^ 0x35;
  a1[6] = v2[17] ^ 0x35;
  a1[7] = v2[18] ^ 0x35;
  a1[8] = v2[19] ^ 0x35;
  a1[9] = v2[20] ^ 0x35;
  a1[10] = v2[21] ^ 0x35;
  a1[11] = v2[22] ^ 0x35;
  a1[12] = v2[23] ^ 0x35;
  a1[13] = v2[24] ^ 0x35;
  a1[14] = v2[25] ^ 0x35;
  a1[15] = v2[26] ^ 0x35;
  a1[16] = v2[27] ^ 0x35;
  a1[17] = v2[8] ^ 0x33;
  a1[18] = v2[9] ^ 0x33;
  a1[19] = v2[10] ^ 0x33;
  a1[20] = v2[11] ^ 0x33;
  v4 = STACK[0xA58] + 1;
  STACK[0xAD0] += 32;
  LODWORD(STACK[0xAFC]) = 0;
  STACK[0xAE8] = v4;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((13 * (v4 == 0)) ^ v1)) - 4))();
}

void sub_100105074()
{
  JUMPOUT(0x10010C488);
}

uint64_t sub_10010507C()
{
  int v0;
  unint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;

  STACK[0x690] = v1;
  STACK[0xAE0] = 0;
  STACK[0xB10] = 0;
  STACK[0xB08] = 0;
  STACK[0xAD8] = 0;
  STACK[0xB00] = 0;
  STACK[0xB18] = 0;
  v2 = LOBYTE(STACK[0xBC4]);
  STACK[0xB20] = 0;
  v3 = (v2 ^ 0x3D) - ((2 * (v2 ^ 0x3D)) & 0x12) + 854290441;
  v4 = (v3 ^ 0xCD148F9B) + 1;
  v3 ^= 0x32EB7009u;
  v5 = v3 + (v4 ^ 0x7F99F573) + ((2 * v4) & 0xFF33EAE6) - 2140796275;
  LOBYTE(v2) = ((v2 ^ 0xD8) - ((2 * (v2 ^ 0xD8) + 54) & 0xEF) + 18) ^ v2 ^ ((v2 ^ 0xC2)
                                                                          - ((2 * (v2 ^ 0xC2) + 2) & 0xF4)
                                                                          - 5);
  LODWORD(STACK[0xAFC]) = -1879803947;
  v6 = byte_10023BF00[((v5 + 1332117162 - ((2 * v5) & 0x9ECD1A1C) + 3684) ^ 0xB09972F0) + v3];
  v7 = byte_10021D340[LOBYTE(STACK[0xBCD]) ^ 0x9CLL];
  v8 = ((v2 ^ 0x30) + (~(2 * v2 + 4) | 0xF9) + 30);
  v9 = (v7 - ((2 * v7 + 126) & 0xDC) - 83) ^ 0xA2;
  v10 = ((v9 - ((2 * v9) & 0xD0)) << 16) + 90701824;
  v11 = byte_10023EDC0[LOBYTE(STACK[0xBC2]) ^ 0x46];
  v12 = byte_1002274C0[LOBYTE(STACK[0xBCF]) ^ 0x32] ^ 0x3D;
  v13 = ((v10 ^ 0x5680000) - ((2 * v10) & 0x15240000) - 896378602) ^ 0xCA925916 | (v12 - ((2 * v12) & 0x15C) - 404084050) ^ 0xE7EA2AAE;
  v14 = ((((v6 ^ v8 ^ 0x41) - ((2 * (v6 ^ v8)) & 0x34)) << 24) - 1711276032) ^ 0x9A000000;
  v15 = byte_10021D340[LOBYTE(STACK[0xBC5]) ^ 0x73];
  v16 = v11 ^ 0xCE ^ (((16 * v11) ^ 0x79) - 6);
  v17 = (((v16 - ((2 * v16) & 0x1A0) + 12728301) << 8) - 7424) ^ 0xC237D000;
  v18 = byte_1002274C0[LOBYTE(STACK[0xBC3]) ^ 0x95] ^ 0x3D;
  v19 = (v17 - ((2 * v17) & 0x115B9800) - 928134120) ^ 0xC8ADCC18 | (v18 - ((2 * v18) & 0x1E8) - 94012940) ^ 0xFA6579F4;
  HIDWORD(v21) = v15 + 1;
  LODWORD(v21) = (v15 << 24) - 1090519040;
  v20 = v21 >> 25;
  v22 = v20 - 101;
  v23 = (2 * v20) & 0x34;
  HIDWORD(v21) = (~v23 + v22) ^ 0x1A;
  LODWORD(v21) = (v23 - v22) << 24;
  v24 = ((((((v21 >> 31) - ((2 * (v21 >> 31)) & 0x30) + 24) ^ 0x10)
         - ((2 * (((v21 >> 31) - ((2 * (v21 >> 31)) & 0x30) + 24) ^ 0x10)) & 0x70)) << 16)
       - 1539833856) ^ 0xA4380000;
  v25 = (v24 - ((2 * v24) & 0x72220000) + 957470611) ^ 0x3911D793 | (v14 - ((2 * v14) & 0x16000000) - 1946429871) ^ 0x8BFBD651;
  v26 = v25 - ((2 * v25) & 0xE3686C18);
  v27 = byte_10021D340[LOBYTE(STACK[0xBC1]) ^ 0x99];
  v28 = v27 + (~(2 * v27 + 126) | 0x6B) + 10;
  v29 = LOBYTE(STACK[0xBC8]) ^ 0x83 ^ byte_10023BF00[LOBYTE(STACK[0xBC8]) ^ 9];
  v30 = (((v29 - ((2 * v29) & 0x46)) << 24) + 587202560) ^ 0x23000000;
  v31 = (((v28 ^ 0x44) - ((2 * v28) & 0x10)) << 16) + 1745354752;
  v32 = byte_1002274C0[LOBYTE(STACK[0xBC7]) ^ 0xD0];
  v33 = ((v31 ^ 0x68080000) - ((2 * v31) & 0x27680000) + 1404356581) ^ 0x53B4C7E5 | (v19
                                                                                   - ((2 * v19) & 0x595848E6)
                                                                                   - 1398004621) ^ 0xACAC2473;
  v34 = v33 - ((2 * v33) & 0x2054AD6E);
  v35 = (v32 ^ 0x3D) - 78;
  v36 = byte_1002274C0[LOBYTE(STACK[0xBCB]) ^ 0xDLL] ^ 0x3D;
  v37 = (v30 - ((2 * v30) & 0x72000000) - 1175254943) ^ 0xB9F30861 | (v36 - ((2 * v36) & 0x138) - 1603867236) ^ 0xA066ED9C;
  v38 = (((2 * v32) ^ 0x7A) + 65) & 0x64;
  v39 = v34 + 271210167;
  v40 = (v35 ^ 0xC7) + ((2 * v35) & 0x8E) + (v38 ^ 0x53) + ((2 * v38) ^ 0x7F) + 39;
  v41 = byte_10023EDC0[LOBYTE(STACK[0xBC6]) ^ 0x72];
  v42 = (v26 - 239847924) ^ 0xF1B4360C | (v40 - ((2 * v40) & 0xE6) + 591043187) ^ 0x233A9A73;
  v43 = v41 ^ 0xB6 ^ (((16 * v41) ^ 0x70) - ((2 * ((16 * v41) ^ 0x70)) & 0x40) + 32);
  v44 = (((v43 - ((2 * v43) & 0x48)) << 8) - 1967447040) ^ 0x8ABB2400;
  v45 = byte_10021D340[LOBYTE(STACK[0xBC9]) ^ 0x73];
  v46 = (v42 - ((2 * v42) & 0x3AB8A740) - 1654893664) ^ 0x9D5C53A0 | (v44 - ((2 * v44) & 0x889E200) + 1145368902) ^ 0x4444F146;
  v47 = byte_10023EDC0[LOBYTE(STACK[0xBCE]) ^ 0x46];
  v48 = ((16 * v47) ^ 0xFFFFFFA0) - 32 * (v47 & 1) - 112;
  v49 = (((((((2 * v45 + 126) & 0xE8) - v45 - 52) ^ 0x83)
         - ((2 * ((((2 * v45 + 126) & 0xE8) - v45 - 52) ^ 0x83)) & 0x186)) << 16)
       + 113442816) ^ 0x6C30000;
  v50 = (v49 - ((2 * v49) & 0x5BA60000) - 304911902) ^ 0xEDD369E2 | (v37 - ((2 * v37) & 0xD3977900) + 1774959744) ^ 0x69CBBC80;
  v47 ^= 0xFFFFFFCD;
  v51 = 2 * (((v48 ^ 0x40) & v47) - ((2 * ((v48 ^ 0x40) & v47)) & 0x12)) + 18;
  v52 = (((v48 ^ 0x40) + v47) ^ 0x65)
      + ((2 * ((v48 ^ 0x40) + v47)) & 0xCA)
      + (v51 ^ 0x9F)
      + ((2 * v51) & 0xE4 ^ 0xDB)
      + 15;
  v53 = (((v52 - ((2 * v52) & 0x112)) << 8) - 1331590912) ^ 0xB0A18900;
  v54 = LOBYTE(STACK[0xBC0]);
  v55 = byte_10023EDC0[LOBYTE(STACK[0xBCA]) ^ 0x50];
  v56 = (v53 - ((2 * v53) & 0x5B77EE00) + 1841035104) ^ 0x6DBBF760 | (v13 - ((2 * v13) & 0x4CDE7292) + 644823369) ^ 0x266F3949;
  v57 = LOBYTE(STACK[0xBCC]) ^ 0x13 ^ byte_10023BF00[LOBYTE(STACK[0xBCC]) ^ 0xELL];
  v58 = (((v57 - ((2 * v57) & 0x9A)) << 24) - 855638016) ^ 0xCD000000;
  v59 = (v56 - ((2 * v56) & 0xDDDE610) - 957418744) ^ 0xC6EEF308 | (v58 - ((2 * v58) & 0x9FFFFFFF) - 812239916) ^ 0xCF9633D4;
  LODWORD(STACK[0x590]) = v59 - ((2 * v59) & 0x6E133012) - 1224108023;
  v60 = byte_10023BF00[v54 ^ 0xB0];
  v61 = ((((v55 ^ 0xCB ^ (((16 * v55) ^ 0x70) - ((2 * ((16 * v55) ^ 0x70)) & 0xA0) + 83))
         - ((2 * (v55 ^ 0xCB ^ (((16 * v55) ^ 0x70) - ((2 * ((16 * v55) ^ 0x70)) & 0xA0) + 83))) & 0x180)) << 8)
       + 793362432) ^ 0x2F49C000;
  v62 = (v61 - ((2 * v61) & 0x9FA1400) - 2063791602) ^ 0x84FD0A0E | (v50 - ((2 * v50) & 0xE35629BC) + 1907037406) ^ 0x71AB14DE;
  LODWORD(STACK[0x678]) = (2 * v62) & 0x9009B4F6;
  LODWORD(STACK[0x670]) = v62 - 939206021;
  v63 = ((((v54 ^ 0xEA ^ v60) - ((2 * (v54 ^ 0xEA ^ v60)) & 0x62)) << 24) - 1325400064) ^ 0xB1000000;
  v64 = v63 - ((2 * v63) & 0x44444444) + 576259460;
  LODWORD(STACK[0x5D0]) = v64;
  LODWORD(STACK[0x5B0]) = v64 ^ 0x22590584;
  v65 = v64 ^ 0x22590584 | v39 ^ 0x102A56B7;
  LODWORD(STACK[0x688]) = (2 * v65) & 0xD61878FE;
  LODWORD(STACK[0x680]) = v65 - 351519617;
  LODWORD(STACK[0x4F0]) = (v46 - ((2 * v46) & 0xB3791440) - 641955296) ^ 0x6A04A9C2;
  v66 = *(unsigned __int8 *)STACK[0xAE8];
  LOBYTE(STACK[0xBB0]) = v66
                       + ((-2 * (((v0 ^ 0xDD) - 21) ^ 0xE6)) & 0x7C)
                       + ((-65 * (((v0 ^ 0xDD) - 21) ^ 0xE6)) ^ 0xBE)
                       - 83;
  v67 = (-1950399707 * ((v66 ^ 0xE7FEFEFF) + 2 * v66)
       - 93799706
       - 2
       * ((-1950399707 * ((v66 ^ 0xE7FEFEFF) + 2 * v66) + 153161604) & 0x596665F7 ^ (-1950399707
                                                                                   * ((v66 ^ 0xE7FEFEFF) + 2 * v66)
                                                                                   - 93799706) & 1)
       - 400639340) ^ 0xC726516C;
  v68 = ((v67 + 1363901570) ^ 0x86F5081)
      + ((v67 % 0x101) ^ 0x8EFFF55F)
      + ((2 * (v67 % 0x101)) & 0x2BE)
      - ((2 * (v67 + 1363901570)) & 0xEF215EFC)
      + 1;
  v69 = v68 - ((2 * v68 - 786336706) & 0x9F67AC14) - 1203466199;
  v70 = (v69 ^ ((v69 ^ 0xB04C29F5) - ((2 * (v69 ^ 0xB04C29F5) + 2) & 0x7BCF7DD0) + 1038597865) ^ ((v69 ^ 0x612CE48)
                                                                                                - 1235294274
                                                                                                - ((2
                                                                                                  * ((v69 ^ 0x612CE48) - 1235294274)) & 0x3B7A90EC)
                                                                                                - 1648539530) ^ 0xEFE92094)
      - 1235294275;
  v71 = (v70 - ((2 * v70) & 0xD914D8A4) + 1821011026) ^ 0x84AF9580;
  v72 = v71 - ((2 * v71 + 247228098) & 0xEEF6B272) + 2128186522;
  v73 = (v72 ^ 0x8884A6C6) - 400164397 - ((2 * ((v72 ^ 0x8884A6C6) - 400164397)) & 0xA5235046);
  HIDWORD(v21) = v72 ^ 0x777B5939;
  LODWORD(v21) = v72;
  v74 = (((v21 >> 31) ^ 0xFF7B6FFA)
       + 1724881600
       + ((2 * (v21 >> 31)) & 0xFEF6DFF4)
       + 1
       - ((2 * (((v21 >> 31) ^ 0xFF7B6FFA) + 1724881600 + ((2 * (v21 >> 31)) & 0xFEF6DFF4) + 1) - 1064895006) & 0xC1D9281C)
       + 1093669631) ^ v72 ^ 0xCCE96C80;
  return ((uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_100260750 + (v0 ^ 0x67)))(v74 ^ 0xCC7FE076, 1602222075, (v73 - 762206173) ^ 0xF5D68839 ^ v74, 2399139167, 4157600684, 1844307839, 3688615678, 3195797173);
}

void sub_100105E0C()
{
  JUMPOUT(0x100105A84);
}

uint64_t sub_100105E14(int a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;

  v5 = LODWORD(STACK[0x670]) - LODWORD(STACK[0x678]);
  LODWORD(STACK[0x5C0]) = v5;
  LODWORD(STACK[0x550]) = v5 ^ 0x8B8A9857 ^ (v4 + 1929141655);
  v6 = a1 ^ 0x9F27C539 ^ ((LOBYTE(STACK[0xBB0]) - 107)
                        - ((2 * (LOBYTE(STACK[0xBB0]) - 107)) & 0xFA)
                        + 1150607229);
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)*(&off_100260750 + ((60 * ((((v3 ^ 0x7AB78B3D) + 2058849085 - ((((v3 ^ 0x7AB78B3D) << (v4 + 6)) + 2) & 0xF56F167A) + 1) & 3) == 1)) ^ (v4 + 1929141655)))
                                                                                               - 4))(v6 - ((2 * v6 + 864704412) & 0xB7663488) + 1970816530, 250, a3, 1150607229, 2670183737, 864704412, 1970816530);
}

void sub_100105F44()
{
  JUMPOUT(0x100105E90);
}

uint64_t sub_100105F4C()
{
  int v0;

  LODWORD(STACK[0x630]) = LODWORD(STACK[0x680]) - LODWORD(STACK[0x688]);
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((v0 + 31) ^ 0x7E)) - 8))();
}

void sub_1001062B4()
{
  JUMPOUT(0x100105FFCLL);
}

uint64_t sub_1001062BC(int a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v4 = ((v3 + (a1 ^ v3) - ((2 * (a1 ^ v3) + 2) & v1) + 1) ^ v3) % 3;
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((957 * ((v4 ^ 0x7CFDEFFF) + 2 * v4 != 2097016831)) ^ (v2 - 221)))
                            - 8))();
}

void sub_1001063DC()
{
  JUMPOUT(0x100106328);
}

uint64_t sub_1001063EC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  int v117;
  int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  int v154;
  int v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  int v166;
  int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  int v181;
  unsigned int v182;
  int v183;
  int v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  int v190;
  unsigned int v191;
  int v192;
  int v193;
  int v194;
  unsigned int v195;
  int v196;
  unsigned int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  int v219;
  int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  int v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  int v238;
  unsigned int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  char v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  int v254;
  unsigned int v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  int v263;
  int v264;
  int v265;
  unsigned int v266;
  unsigned int v267;
  unint64_t v268;
  int v269;
  unsigned int v270;
  unsigned int v271;
  int v272;
  int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  int v277;
  int v278;
  unsigned int v279;
  unsigned int v280;
  int v281;
  int v282;
  unsigned int v283;
  int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  int v297;
  int v298;
  unsigned int v299;
  unsigned int v300;
  int v301;
  int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  int v308;
  int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  int v319;
  int v320;
  unsigned int v321;
  int v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  void *v326;

  v6 = (v5 - 173) | 0x20u;
  STACK[0x670] = v6;
  v7 = 844964643 * (v2 ^ v4) - (((v6 + 616186907) * (v2 ^ v4)) & 0x2A67DFDA) - 1791758355;
  LODWORD(v6) = -1570454587 * v1 - ((1154058122 * v1 + 1914578826) & 0xAA1FD2DC) + 236911923;
  v8 = -134217728 * ((3 * (v2 ^ v4)) & 3) - 1946157056 * (v2 ^ v4) - 1928720963;
  v9 = -913864192 * v1 - ((51319808 * v1 + 72291328) & 0x63EA400) - 1589191224;
  v10 = ((2 * ((v8 ^ 0x8D0A0DBD) & 0xFC000000 | (v7 >> 6))) & 0xBFFFF9FE ^ 0x4A9997E)
      + (((v8 ^ 0x8D0A0DBD) & 0xFC000000 | (v7 >> 6)) ^ 0x5DAB3340);
  v11 = ((192114608 * (v0 ^ 0x6B249523) - ((384229216 * (v0 ^ 0x6B249523)) & 0x481347E0) - 1542872078) ^ 0xA409A3F2) & 0xFFFFFFF0 | ((-524863749 * (v0 ^ 0x6B249523) - ((24014326 * (v0 ^ 0x6B249523)) & 0xCE14E1Cu) - 2039437554) >> 28);
  v12 = ((2 * v11) & 0xAF27FBB6 ^ 0x10) + (v11 ^ 0xD793FDD3);
  v13 = ((-1365622360 * v3 - ((1563722576 * v3) & 0x894D4430) - 995712482) ^ 0xC4A6A21E) & 0xFFFFFFF8 | ((-170702795 * v3 - ((732336234 * v3) & 0x282627E0u) + 336794608) >> 29);
  v14 = v13 ^ 0x7FFBBAD5;
  v15 = (2 * v13) & 0xFFF775AA;
  v16 = ((2 * ((v9 ^ 0x831F53C8) & 0xFFFFFE00 | (v6 >> 23))) & 0x3F7BFFF8 ^ 0x350)
      + (((v9 ^ 0x831F53C8) & 0xFFFFFE00 | (v6 >> 23)) ^ 0x9FBDFE56);
  v17 = v12 + v14 + v15 - v16 + v10 - 668681334;
  v18 = ((-2123366400 * v17 - ((48234496 * v17 + 1889533952) & 0x8EA00000) + 2142135932) ^ 0xC75E667C) & 0xFFF00000 | ((741165079 * v17 - ((408588334 * v17 + 445863690) & 0x12665B70u) + 1182587197) >> 12);
  HIDWORD(v19) = v12 + 5;
  LODWORD(v19) = (-1279558367 * v12 - ((1735850562 * v12 - 973164662) & 0xF700DDC2) + 1585432230) ^ 0xFB806EE0;
  v20 = ((2 * v18) & 0x6FDE3DAC ^ 0x102424) + (v18 ^ 0x37E78DE4);
  LODWORD(v6) = (v19 >> 5) - ((2 * (v19 >> 5)) & 0x6C4BCECE) - 1239029913;
  v21 = ((377029380 * v10 - ((754058760 * v10 + 50601480) & 0x31D8C930) - 1704037473) ^ 0x98EC649B) & 0xFFFFFFFC | ((((-1958968958 * v10 - 2134833278) & 0x8C55A8B2) + 979484479 * v10 - 109795355) >> 30);
  v22 = ((2 * v21) & 0xFFFF7FFF) + (v21 ^ 0xFFFFBFFF);
  v23 = 1337753485 * (v6 ^ 0xB625E767) - ((528023322 * (v6 ^ 0xB625E767)) & 0x35ABBDFE) - 1697259777;
  v24 = 71091677 * v22 - ((142183354 * v22 + 728239034) & 0x2DAF54DC) - 863260597;
  v25 = ((-2019103020 * v16 - ((256761256 * v16 + 1653044896) & 0x75963F90) - 334570726) ^ 0xBACB1FCA) & 0xFFFFFFFC | ((1642707893 * v16 - ((1137932138 * v16 + 413261224) & 0x5CADAF6C) + 2057815690) >> 30);
  v26 = ((2 * v25) & 0xEE67EBF6 ^ 4) + (v25 ^ 0x7733F5F9) + v20;
  v27 = (v6 ^ 0x882B3B79 ^ (v26 - ((2 * v26 + 565827166) & 0x7C1DB83C) - 1897150643)) - v22 - 16385;
  v28 = v27 ^ 0x7FDF682F;
  v29 = -1146936625 * (((2 * v27) & 0xFFBED05E) + (v27 ^ 0x7FDF682F))
      - ((2001094046 * (((2 * v27) & 0xFFBED05E) + (v27 ^ 0x7FDF682F)) + 120522750) & 0x734AB212)
      - 46342904;
  v30 = -141561440 * (v6 ^ 0xB625E767) - ((-283122880 * (v6 ^ 0xB625E767)) & 0x9846E580) + 1277391561;
  v31 = 2112093288 * (v6 ^ 0xB625E767) - ((-70780720 * (v6 ^ 0xB625E767)) & 0xB0C0B580) + 1482709696;
  v32 = (-774594648 * v20 - ((-1549189296 * v20 + 258585376) & 0x9274EE50) + 1357861052) ^ 0xC93A772C;
  v33 = ((v32 & 0xFFFFFFF8 | ((1513788405 * v20 - ((-1267390486 * v20 - 504547740) & 0xD19BE982) + 1506054131) >> 29)) ^ 3)
      - ((2 * v32) & 0x1EBE0D0)
      + 16117864;
  LODWORD(v6) = ((-1610612736 * v22 - 1610612736) & 0x80000000) - 805306368 * v22 - 1712537214;
  v34 = (((v23 >> 27) & 0x1C) - 32 * (v23 >> 31) - 671544048) ^ 0xDF2839F1;
  HIDWORD(v19) = v28 + 1;
  LODWORD(v19) = v29 ^ 0xB9A55908;
  v35 = (v19 >> 1) - ((2 * (v19 >> 1)) & 0xB50B67EE) + 1518711799;
  v36 = (((2 * v34) & 0x29D0) - v34 - 908891371) ^ 0xC1025FE4 | ((((v30 ^ 0x4C2372C9) & 0xFFFFFFFC | (v31 >> 30)) ^ 1)
                                                               - ((2 * ((v30 ^ 0x4C2372C9) & 0xFFFFFFFC | (v31 >> 30))) & 0xFCCC84)
                                                               - 2139199918) ^ 0x807E6652;
  HIDWORD(v19) = v36 ^ 1;
  LODWORD(v19) = (v36 - ((2 * v36) & 0x17B4618) + 12428044) ^ 0x679F3C38;
  v37 = -721323363 * (v35 ^ 0x5A85B3F7) - ((-1442646726 * (v35 ^ 0x5A85B3F7)) & 0xE0A8F9C0) - 262898464;
  v38 = 2107421365 * (v33 ^ 0xF5F068) - ((2067359082 * (v33 ^ 0xF5F068)) & 0x57C8670C) - 1411107962;
  v39 = 973078528 * (v35 ^ 0x5A85B3F7) - ((1946157056 * (v35 ^ 0x5A85B3F7)) & 0x50000000) - 1452590526;
  v40 = ((v6 ^ 0xC9ECC182) & 0xF0000000 | (v24 >> 4)) ^ 0x96D7AA6;
  v41 = v40 - ((2 * v40) & 0xB69B59C0) - 615666464;
  v42 = -886353920 * (v33 ^ 0xF5F068) - ((374775808 * (v33 ^ 0xF5F068)) & 0x7BBC2000) - 1109518346;
  v43 = v41 ^ 0xDB4DACE0;
  v44 = -1761270391 * (v41 ^ 0xDB4DACE0) - ((772426514 * (v41 ^ 0xDB4DACE0)) & 0xB122D242) - 661559007;
  v45 = ((v19 >> 2) - 244528850 + (~(2 * (v19 >> 2)) | 0x1D266DA5)) ^ v41 ^ v33 ^ 0x2999819F ^ v35;
  v46 = ((v39 ^ 0xA96B3A42) & 0xFE000000 | (v37 >> 7)) ^ 0x1E0A8F9;
  v47 = v46 - ((2 * v46) & 0xB4B27BA4) + 1515797970;
  v48 = ((v42 ^ 0xBDDE17F6) & 0xFFFFF000 | (v38 >> 20)) ^ 0xABE;
  v49 = v48 - ((2 * v48) & 0x11F6A210) + 150688008;
  v50 = ((1259470848 * v43 - ((-1776025600 * v43) & 0x9A400000) - 853472509) ^ 0xCD210B03) & 0xFFFE0000 | (v44 >> 15);
  v51 = (v50 ^ 0xBB7E43FE) + ((2 * v50) & 0x76FFE5B8 ^ 0x36000) + 1149242660 + (v49 ^ 0x8FB5108);
  v52 = v47 ^ (v51 - ((2 * v51) & 0xF893572E) + 2085202839);
  v53 = (((-945815552 * v45 - ((-1891631104 * v45) & 0xFB800000) + 2110705686) ^ 0x7DCED016) & 0xFFE00000 | ((1719619133 * v45 - ((218012794 * v45) & 0xDA90344u) + 114590114) >> 11)) ^ 0xDA90;
  v54 = v53 - ((2 * v53) & 0xE4F4D906) + 1920625795;
  v55 = 2 * (((v52 ^ 0x26109645) & (v54 ^ 0x727A6C83)) - ((2 * ((v52 ^ 0x26109645) & (v54 ^ 0x727A6C83))) & 0x4031AB64))
      - 1070486684;
  v56 = -152148793 * (v49 ^ v47 ^ v54 ^ 0x4E2FEEAA)
      - ((1843186062 * (v49 ^ v47 ^ v54 ^ 0x4E2FEEAA)) & 0x5F187E10)
      + 797720328;
  v57 = (v54 ^ 0x546AFAC6 ^ v52) + (v55 ^ 0x9404149E) - 1412808698 + ((2 * v55) & 0xA86B7FF4 ^ 0x806356C0);
  v58 = v57 - ((2 * v57) & 0xC2DB2F3E) + 1634572191;
  LODWORD(STACK[0x610]) = v58 ^ 0x616D979F;
  v59 = 2 * (((v58 ^ 0x616D979F) & (v56 ^ 0x2F8C3F08)) - ((2 * ((v58 ^ 0x616D979F) & (v56 ^ 0x2F8C3F08))) & 0x7F49278A))
      + 2135500682;
  v60 = (v56 ^ 0x4EE1A897 ^ v58) + (v59 ^ 0x2B65B75) - 2113895679 + ((2 * v59) & 0xFBFEF9FC ^ 0xFA924914);
  v61 = ((2 * v60) & 0x33E8DFEE) + (v60 ^ 0x19F46FF7);
  LODWORD(STACK[0x618]) = 2 * v61;
  LODWORD(STACK[0x620]) = v61;
  v62 = v61 - ((2 * v61 - 1697733612) & 0xC24B9E38) - 1366482650;
  v63 = v62 ^ 0x6125CF1C;
  LODWORD(STACK[0x4C0]) = v62 ^ v58;
  v64 = v62 ^ v58 ^ 0x485883;
  v65 = v63 + (v47 ^ 0x5A593DD2) - ((2 * (v63 + (v47 ^ 0x5A593DD2))) & 0x6BFE3126) + 905910419;
  v66 = -1909726993 * v63 - 1422458309 - ((475513310 * v63) & 0x566E05E6) + 184;
  LODWORD(STACK[0x5A0]) = v65;
  LODWORD(v6) = 1847209695 * (v65 ^ 0x35FF1893) - ((204758462 * (v65 ^ 0x35FF1893)) & 0xEAADEAC) - 2024444074;
  v67 = 2 * ((v63 & (v54 ^ 0x727A6C83)) + 1843186062 - ((2 * (v63 & (v54 ^ 0x727A6C83))) & 0x5BB9947E)) + 354;
  LODWORD(STACK[0x628]) = v62;
  v68 = (v54 ^ 0x135FA39F ^ v62) + (v67 ^ 0x845C6AB3) - 1608908493 + ((2 * v67) & 0xBFCBFD98 ^ 0xB7432898);
  v69 = v68 - ((2 * v68) & 0x218FEF00) - 1865943168;
  LODWORD(STACK[0x688]) = v69;
  v70 = 786366464 * (v65 ^ 0x35FF1893) - ((1572732928 * (v65 ^ 0x35FF1893)) & 0x532E0000) + 697798724;
  v71 = ((1571042304 * (v69 ^ 0x90C7F780) - ((-1152882688 * (v69 ^ 0x90C7F780)) & 0xA5B16800) + 1389934150) ^ 0x52D8B646) & 0xFFFFFC00 | ((198666509 * (v69 ^ 0x90C7F780) - ((397333018 * (v69 ^ 0x90C7F780)) & 0x96A5AA04) + 1263719682) >> 22);
  v72 = ((2 * v71) & 0xDD7EBF76 ^ 0x252) + (v71 ^ 0xEEBF5E96);
  LODWORD(STACK[0x608]) = v64;
  v73 = ((2 * ((v70 ^ 0x29979044) & 0xFFFF0000 | WORD1(v6))) & 0xE5BFF7EE ^ 0x106AA)
      + (((v70 ^ 0x29979044) & 0xFFFF0000 | WORD1(v6)) ^ 0xF2DF7CA2);
  LODWORD(v6) = ((1002438656 * v63 - ((2004877312 * v63) & 0x74000000) - 1171417457) ^ 0xBA2D968F) & 0xFFC00000 | (v66 >> 10);
  v74 = (((260087808 * v64 - ((520175616 * v64) & 0x879DC000) - 1009847888) ^ 0xC3CEF1B0) & 0xFFFFE000 | ((-2048885755 * v64 - ((197195786 * v64) & 0x647BD706u) - 1304564861) >> 19)) ^ 0x1647;
  v75 = v74 - ((2 * v74) & 0xE9521842) - 190247903;
  v76 = ((2 * v6) & 0xF977FDFC ^ 0x559980) + (v6 ^ 0xFC91333E) - v73 + v72;
  v77 = v75 ^ 0x44CE7440 ^ (v76 - ((2 * v76 + 248068732) & 0x60CEF0C2) - 1211361889);
  v78 = ((-40894464 * v77 - ((-81788928 * v77) & 0xFE400000) + 2133237479) ^ 0x7F269EE7) & 0xFFF00000 | ((435343321 * v77 - ((870686642 * v77) & 0xE8639DC6) + 1949421283) >> 12);
  v79 = ((2 * v78) & 0x7AF4A758 ^ 0x48618) + (v78 ^ 0xBD7D10B0);
  v80 = (((-1316814848 * v72 - ((587595776 * v72 + 815661056) & 0x31F80000) - 783551787) ^ 0x18FCF2D5) & 0xFFFF0000 | ((182563203 * v72 - ((365126406 * v72 + 588083358) & 0xC6BDFE40) - 186271889) >> 16)) ^ 0xE35E;
  v81 = v80 - ((2 * v80) & 0x1F7C4ED8) + 264120172;
  HIDWORD(v19) = ~v73;
  LODWORD(v19) = 943187215 * v73 - ((275761694 * v73 + 483824398) & 0x116C1456) - 954117198;
  v82 = ((2 * (v19 >> 3)) & 0xDAFF5FFE ^ 0x22D028A) + ((v19 >> 3) ^ 0xFC696EBA) + v79;
  LODWORD(v6) = v82 - ((2 * v82 - 1442056022) & 0x9A1ACD2E) - 1575787796;
  v83 = ((2019670016 * (v75 ^ 0xF4A90C21) - ((1891856384 * (v75 ^ 0xF4A90C21)) & 0x79C18000) + 1021363592) ^ 0x3CE0C588) & 0xFFFFF800 | ((1257180215 * (v75 ^ 0xF4A90C21) - ((-1780606866 * (v75 ^ 0xF4A90C21)) & 0xBCB67B6A) - 564445771) >> 21);
  v84 = ((2 * v83) & 0xBBFD75FC ^ 0x5E4) + (v83 ^ 0x5DFEBC0C);
  v85 = -1045817253 * v79 - ((-2091634506 * v79 - 488094792) & 0xC5C522B4) + 1414968118;
  v86 = v81 ^ 0xFBE276C;
  v87 = 289091809 * (v81 ^ 0xFBE276C) - ((578183618 * (v81 ^ 0xFBE276C)) & 0xD5C45E8A) + 1793208133;
  v79 *= 204308480;
  v88 = v85 >> 17;
  v89 = (((v79 + 284033024) & 0xFFFF8000 | (v85 >> 17)) ^ 0x8803125)
      + v79
      + ((2 * ((v79 + 284033024) & 0xFFFF8000 | (v85 >> 17))) & 0xEEFFFF56 ^ 0xFFFF9DBD);
  v90 = ((v88 ^ 0xFFFFCE8E) - ((2 * (v88 ^ 0xFFFFCE8E) + 2) & 0xD85D8392) + 1815003594) ^ v88 ^ (v89
                                                                                               - ((2 * v89 + 282853210) & 0xAABB6968)
                                                                                               - 573852575);
  LODWORD(v6) = ((2 * ((v81 ^ 0x42B341FB ^ v6) - v84 + 1576975102)) & 0xFF7CA734)
              + (((v81 ^ 0x42B341FB ^ v6) - v84 + 1576975102) ^ 0x7FBE539A);
  v91 = (v90 ^ 0xB973440C)
      + v79
      + 284033024
      - 2 * (((v90 ^ 0xB973440C) + v79 + 284033024) & 0x6684C653 ^ v90 & 0x11)
      + 1719977538;
  v92 = 1986118144 * v86 - ((1824752640 * v86) & 0x4D563400) + 648747709;
  v93 = ((-2145703632 * v6 - ((3560032 * v6 + 1063080512) & 0x2FA10620) + 1467952186) ^ 0x97D0831A) & 0xFFFFFFF0 | ((-1207848301 * (_DWORD)v6 - ((1879270694 * (_DWORD)v6 - 1745496796) & 0xD0B471C0) - 1269488782) >> 28);
  v94 = ((2 * v93) & 0xC37CFD7A ^ 8) + (v93 ^ 0xE1BE7EBB);
  LODWORD(v6) = v91 ^ 0x6684C642;
  v95 = (984171782 * (v91 ^ 0x6684C642)) & 0x93019440;
  v96 = ((v92 ^ 0x26AB1ABD) & 0xFFFFFE00 | (v87 >> 23)) ^ 0xD5;
  v97 = v96 - ((2 * v96) & 0xA43A4DD0) - 769841432;
  v98 = -1483399605 * v94 - 269721608 - ((1328168086 * v94 - 156536510) & 0xE92D6A0C) + 3503;
  v99 = -1799663310 * v84 - ((695640676 * v84 + 924203208) & 0x5450E610) - 978088084;
  v100 = v94 + 507609411 + (v97 ^ 0xB499E0AA ^ v91);
  v101 = v100 ^ 0xBEBFFF37;
  v102 = (2 * v100) & 0x7D7FFE6E;
  v103 = ((v99 & 0xFFFFFFFE | ((((-1799663310 * v84 - 1685382044) & 0xA585CF7C) - 1247651993 * v84 - 545814001) >> 31)) ^ 0x179496D6)
       + ((2 * v99) & 0x7B79CBBC ^ 0x5050C210);
  v104 = (1968343564 * v6 - ((-358280168 * v6) & 0x8259E7B8)) & 0xFFFFFFFC | ((v95 - 492085891 * (_DWORD)v6 + 914306527) >> 30);
  v105 = v101 - v103 + v102;
  v106 = -162153024 * v105 - ((-324306048 * v105 + 114462848) & 0xB3A62680) - 583246929;
  v107 = -224147104 * v94 - ((1699189440 * v94 + 1433282624) & 0x498E3C00) - 1887555037;
  v108 = (v106 ^ 0xD9D3136F) & 0xFFFFFFC0 | ((735663863 * v105
                                            - ((1471327726 * v105 + 404441666) & 0x579B84B8)
                                            + 937125757) >> 26);
  v109 = (v108 ^ 0xA) + 1231580582 - ((2 * v108) & 0x92D0E36A) + 1039;
  v110 = ((v107 ^ 0x24C71E03) & 0xFFFFFFE0 | (v98 >> 27)) ^ 0xE;
  LODWORD(v6) = v110 - ((2 * v110) & 0xE25818B4) - 248771494;
  v111 = ((1507413208 * v103 - ((-1280140880 * v103 - 1704703648) & 0xEAB526E0) - 1030965215) ^ 0xF55A9371) & 0xFFFFFFF8 | ((-348444261 * v103 - ((1450595126 * v103 + 860653868) & 0x615662A4) + 1246852584) >> 29);
  v112 = ((2 * (v104 - 1054018596)) & 0xBEF7BFDA ^ 0x8251A798) + ((v104 - 1054018596) ^ 0x1E572C31) + (v6 ^ 0xF12C0C5A);
  v113 = v112 + (v111 ^ 0xBFCEEFD1) + ((2 * v111) & 0x7F9DDFA8 ^ 8) + 1622487103;
  v114 = ((2 * (v112 + 545529875)) & 0xDFFEFB94) + ((v112 + 545529875) ^ 0xEFFF7DCA);
  v115 = (v113 - ((2 * v113) & 0x3B857AE2) + 499301745) ^ v109;
  HIDWORD(v19) = v109 ^ 0x1B5;
  LODWORD(v19) = v106 ^ 0xD9D31000;
  v116 = (((-1438646272 * v114 - ((1417674752 * v114 + 1392508928) & 0x69800000) + 510616054) ^ 0xB4EF61F6) & 0xFFC00000 | ((600736425 * v114 - ((1201472850 * v114 - 137182388) & 0xCF81A5BA) + 1672098947) >> 10)) ^ 0x19F034;
  v117 = (v116 - ((2 * v116) & 0xEE90FE0A) - 146243835) ^ ((v19 >> 10) - ((2 * (v19 >> 10)) & 0xB2338BD2) - 652622359);
  HIDWORD(v19) = v117 ^ 0x2991BC;
  LODWORD(v19) = v117 ^ 0x8A400000;
  v118 = ((v19 >> 22) - ((2 * (v19 >> 22)) & 0x21855ABE) - 1866289825) ^ 0x706FEFCF;
  v119 = (-921885487 * v118 - ((-1843770974 * v118) & 0xFB041B8C) - 41808442) ^ v115;
  v120 = ((2 * v119) ^ 0x52518204) - 2 * (((2 * v119) ^ 0x52518204) & 0x146CD0EE ^ (2 * v119) & 2) + 1953288429;
  v121 = (v119 ^ 0xB549C831) + (v120 & 0x38C21266 ^ 0x4FB7EF38) + ((2 * v120) & 0x71842488 ^ 0x60802088) - 2146959196;
  v122 = v121 - ((2 * v121) & 0xC5A9CB76) + 1658119611;
  v123 = v122 ^ v109 ^ 0x2BBC940E;
  v124 = -407839463 * v123 - ((1331804722 * v123) & 0x6C69C8BA) - 1238047651;
  v125 = (v115 ^ 0x54AACCC4)
       + (v122 ^ 0x9D2B1A44)
       + 1
       - ((2 * ((v115 ^ 0x54AACCC4) + (v122 ^ 0x9D2B1A44) + 1)) & 0x168653C0)
       - 1958532640;
  LODWORD(STACK[0x540]) = v122 ^ v109;
  v126 = -939524096 * v123 - ((((v122 ^ v109) << 31) + (v123 << 28)) & 0xAAAAAAAA);
  v127 = ((-1019281408 * (v122 ^ v6 ^ 0x93F8E9E1) - ((108920832 * (v122 ^ v6 ^ 0x93F8E9E1)) & 0x38DE0000) + 477062487) ^ 0x1C6F6557) & 0xFFFF0000 | ((-932265153 * (v122 ^ v6 ^ 0x93F8E9E1) - ((-1864530306 * (v122 ^ v6 ^ 0x93F8E9E1)) & 0xB3B1CEE0) - 640096400) >> 16);
  v128 = ((2 * v127) & 0xDB95FDEC ^ 0x1B1A0) + (v127 ^ 0x6DCA272E);
  LODWORD(STACK[0x4E0]) = v122;
  v129 = ((2 * ((v126 - 770061125) ^ 0xD219CCBB | (v124 >> 5))) & 0xE76E6DBE ^ 0x3624C04)
       + (((v126 - 770061125) ^ 0xD219CCBB | (v124 >> 5)) ^ 0xF60691FD);
  v130 = ((876609536 * (v125 ^ 0x8B4329E0) - ((1753219072 * (v125 ^ 0x8B4329E0)) & 0xEC800000) - 162739603) ^ 0xF64CCA6D) & 0xFFC00000 | ((-1957866287 * (v125 ^ 0x8B4329E0) - ((379234722 * (v125 ^ 0x8B4329E0)) & 0xF6D74BD6) - 76831253) >> 10);
  v131 = ((2 * v130) & 0xF553AFF6 ^ 0x51A5D2) + (v130 ^ 0xFA970D12);
  v132 = ((714735616 * (v122 ^ 0x62D4E5BB) - ((1429471232 * (v122 ^ 0x62D4E5BB)) & 0x8B240000) - 980277237) ^ 0xC592280B) & 0xFFFE0000 | ((1818858829 * (v122 ^ 0x62D4E5BB) - ((-657249638 * (v122 ^ 0x62D4E5BB)) & 0xED39E02C) - 157487082) >> 15);
  v133 = (v132 ^ 0x5F9486D7) + ((2 * v132) & 0xBF2AD7DC ^ 0x2D250) + v128 + v129 - v131 + 787996461;
  v134 = -1007545717 * v128 - ((132392214 * v128 + 77367516) & 0x6CE5384) + 968191536;
  v135 = -116832896 * v128 - ((303205120 * v128 + 239365632) & 0x142AAE00) + 825724467;
  v136 = ((-1918894080 * v133 - ((457179136 * v133 - 339738624) & 0xDD000000) + 1685942249) ^ 0xEE9D6FE9) & 0xFFE00000 | ((-742505363 * v133 - ((-1485010726 * v133 + 1543501662) & 0xF03AD43E) + 639460814) >> 11);
  v137 = ((2 * v136) & 0xCEDFF7F2 ^ 0x1E0752) + (v136 ^ 0x6770F854);
  v138 = (v135 ^ 0xA155733) & 0xFFFFFF80 | (v134 >> 25);
  v139 = v138 ^ 0xCFDFBFD6;
  v140 = (2 * v138) & 0x9FBF7F2E;
  v141 = ((1107296256 * v129 - (((v129 << 26) + 0x4000000) & 0x38000000) - 1626957152) ^ 0x1D069AA0) & 0xFE000000 | ((-1985904479 * v129 - ((323158338 * v129 + 170916738) & 0x40FAF090) - 443189751) >> 7);
  v142 = ((2 * v141) & 0xAE9CFFEE ^ 0x280F5E0) + (v141 ^ 0x560E8507);
  v143 = ((553648128 * v131 - ((1107296256 * v131 + 1241513984) & 0xA4000000) + 1998967821) ^ 0xD225D40D) & 0xFF000000 | ((1254474017 * v131 - ((-1786019262 * v131 - 1002448054) & 0xE4A56B58) - 730684591) >> 8);
  v144 = ((2 * v143) & 0xCF5DE6FE ^ 0x144A46A) + (v143 ^ 0xE75CA1CA);
  LOBYTE(v66) = ((v66 & 8 | 0x45) - (v66 & 1 | 0xBA) - 70) ^ 0x64;
  LOBYTE(v66) = ((2 * v66) | 0xBE) - v66 + 33;
  v145 = ((-80322113 * v137 - ((-160644226 * v137 + 921129074) & 0x829F5F10) + 1556305857) ^ 0x414FAF88) >> ~(_BYTE)v66;
  v146 = ((v145 - ((2 * v145) & 0x3AC1AA8) - 2116678316) ^ 0x81D60D54) >> (v66 ^ 0xF6);
  v147 = ((2 * v146) & 0xBEFF5ADE) + (v146 ^ 0xDF7FAD6F);
  v148 = v139 + (v140 ^ 2) + v142 - v144 - v137 + 858522223;
  v149 = -351613019 * v144 - ((-703226038 * v144 + 986102858) & 0xD4577E86) - 2020663960;
  v150 = (1239945263 * v148 - ((-1815076770 * v148 + 181867306) & 0xC998AEE6) - 365436664) >> 16;
  v151 = 271515648 * v148 - ((543031296 * v148 + 321519616) & 0xCEB40000) - 252750602;
  v152 = ((v151 & 0x20000000) + (v151 & 0xF66A0000 ^ 0x3997FFFF) + (v151 & 0x20000000 | 0xDFEB2456) + 1) ^ 0x7ECF24DE;
  v153 = v147 - 545259520 * v137 + 0x8000000;
  v154 = 671088640 * v144 + 1354991617 - ((1342177280 * v144 + 1342177280) & 0x55555555);
  LOBYTE(v34) = ~(((2 * (v150 & 0xBD ^ 0xBC)) & 0x60) - (v150 & 0xBD ^ 0xBC) - 49);
  v155 = (((2 * (v150 & 0x1ABD ^ 0x100862BC)) & 0x20001060) - (v150 & 0x1ABD ^ 0x100862BC) + 662304463) ^ 0x377194FF | v151 & 0x9950000;
  v156 = (((2 * (((v150 & 0xE542 ^ 0x5C99380B) - 1) ^ 0xE0BBDC7B)) & 0x8454880)
        - (((v150 & 0xE542 ^ 0x5C99380B) - 1) ^ 0xE0BBDC7B)
        + 2035306815) ^ 0xC572D10E;
  LODWORD(STACK[0x5F0]) = v122 ^ v6;
  LODWORD(STACK[0x520]) = v125;
  v157 = v122 ^ v6 ^ v109 ^ v125;
  v158 = (((((2 * v152) & 0x26A80110) - v152 + 1823144710) ^ 0x6DACFB8E | v156)
        - ((2 * ((((2 * v152) & 0x26A80110) - v152 + 1823144710) ^ 0x6DACFB8E | v156)) & 0xBB8754D6)
        + 1573104235) ^ 0x5DC3AA6B | ((v155 ^ 0x1100000) - 2 * ((v155 ^ 0x1100000) & 0x610660BD ^ v34 & 9) - 414818122) ^ 0xE74660B6;
  v159 = ((2 * v158) & 0xFF3FDF98) + (v158 ^ 0x7F9FEFCC);
  v160 = ((1409286144 * v142 - ((671088640 * v142 + 1744830464) & 0x40000000) + 347887621) ^ 0x20BC5805) & 0xFC000000 | ((-597694891 * v142 - ((952093866 * v142 + 1990013434) & 0x44EC8BD2) - 574300442) >> 6);
  v161 = -309554688 * v147 - 1822248448;
  v162 = v160 ^ 0x7EE626B0;
  v163 = (2 * v160) & 0xFCDFFF4E ^ 0x13B20E;
  v164 = (-1745435063 * v153 - ((804097170 * v153 + 915628722) & 0x23073C94u) - 858959965) >> 24;
  v165 = -154777344 * v153 - (v161 & 0xB8B47A00) + 638293549;
  v166 = v164 ^ 0x4F;
  LODWORD(STACK[0x570]) = v157;
  if (v157 == 1372828084)
    v166 = 33;
  v167 = (v166 & (v164 ^ 0x91)) - 2 * (v166 & (v164 ^ 0x91) & 3);
  v168 = ((2 * ((v154 + 2300) ^ 0x28C390FD | (v149 >> 5))) & 0x7E19FF5E ^ 0x600BB54)
       + (((v154 + 2300) ^ 0x28C390FD | (v149 >> 5)) ^ 0xBC5DA255);
  v169 = (v165 & 0x22E12100 ^ 0x4CDF396D | 0x111D4533) - (v165 & 0x22E12100 ^ 0x4CDF396D | 0xEEE2BACC) - 287130932;
  v170 = (v167 + 586574339) ^ 0x22F66A03 | (((v165 & 0x99024A00 ^ 0xAA40028B) - 1) & 0xFF3FFFFF | v165 & 0x441C9400) ^ 0x761A1E8A;
  v171 = v162 + v163 + v168 - v153 - v159 - 973731805;
  v172 = ((2 * (v169 ^ 0x5D825D5E | v164 & 0xDE)) & 0x4BFDA3E2 ^ 0x120)
       + ((v169 ^ 0x5D825D5E | v164 & 0xDE) ^ 0xE5FED161)
       + (v170 ^ 0x31BFDCAF)
       + ((2 * v170) & 0x637FB95E);
  v173 = v172 - 2 * ((v172 + 1749111136) & 0x40FF4BCF ^ v172 & 8) - 1455383257;
  v174 = ((-585842332 * v159 - ((-1171684664 * v159 + 1939542176) & 0x98F09898)) & 0xFFFFFFFC | ((-146460583 * v159
                                                                                                - ((1854562482 * v159
                                                                                                  + 1558627368) & 0x4FA62B0E)
                                                                                                - 700024933) >> 30))
       - 2042243940;
  v175 = ((2 * v174) & 0xFD1BFBFA ^ 0x98109898) + (v174 ^ 0x32F5B1B3);
  v176 = (((260308992 * v168 - ((520617984 * v168 + 294125568) & 0x2A780000) + 2114097928) ^ 0x953E9308) & 0xFFFC0000 | ((356336609 * v168 - ((712673218 * v168 + 1307243618) & 0x6C69C8C8) + 489315989) >> 14)) ^ 0x2D8D3;
  v177 = ((-1175453696 * v171 - ((1944059904 * v171 + 801112064) & 0xAF400000) - 276187608) ^ 0x57A9B628) & 0xFFF00000 | ((687160223 * v171 - ((1374320446 * v171 + 1002271484) & 0x80654EB2) + 1578197207) >> 12);
  v178 = ((2 * v177) & 0xCEDBFB9E ^ 0x80214) + (v177 ^ 0x6769FEE5);
  v179 = (((v173 ^ 0xC0FF4BC7) - v175 - ((2 * ((v173 ^ 0xC0FF4BC7) - v175) - 48497670) & 0xCBABF120) - 463210867) ^ 0x4F342F48)
       - v178
       + 1735261647;
  v180 = ((v176 - ((2 * v176) & 0x84899E9A) - 1035677875) ^ 0x2BB848A ^ v173) - (v178 + v175) + 1711012812;
  v181 = v180 - ((2 * v180) & 0x1C51EA4A) - 1909918427;
  v182 = (1298035837 * (((2 * v179) & 0xF5DF7F7E) + (v179 ^ 0x7AEFBFBF))
        - ((448588026 * (((2 * v179) & 0xF5DF7F7E) + (v179 ^ 0x7AEFBFBF)) + 1976936314) & 0x45966046)
        + 498467808) ^ v181;
  LODWORD(STACK[0x4B0]) = v182;
  v183 = (v182 ^ 0x2CE3C506) - ((2 * (v182 ^ 0x2CE3C506) + 18174754) & 0x7189E3C) + 1947662511;
  LODWORD(STACK[0x678]) = v183;
  v184 = v183 ^ 0x38C4F1E;
  v185 = (v184 & (v181 ^ 0x8E28F525)) - ((2 * (v184 & (v181 ^ 0x8E28F525))) & 0x662CE152);
  v186 = v178 - 1735261647 + v184 + 567841531 - ((2 * (v178 - 1735261647 + v184)) & 0x43B125F6);
  v187 = ((2 * (v175 + 24248835 + v184)) & 0xFFBFEF6E) + ((v175 + 24248835 + v184) ^ 0x7FDFF7B7);
  v188 = ((v184 + (v181 ^ 0x8E28F525)) ^ 0x7D1FF7BD)
       + ((2 * (v184 + (v181 ^ 0x8E28F525))) & 0xFA3FEF7A)
       + ((2 * v185 + 1714217298) ^ 0xA40E2955)
       + ((2 * (2 * v185 + 1714217298)) & 0x7BBA6FF0 ^ 0xB7E7BD5F)
       + 1;
  v189 = v188 - ((2 * v188 + 24805496) & 0x18B1CAA0) - 854186612;
  LODWORD(STACK[0x510]) = v189;
  v190 = v189 ^ 0xC58E550;
  v191 = -835817011 * v184 - ((-1671634022 * v184) & 0xF822F0E2) - 65963919;
  LODWORD(STACK[0x680]) = v186;
  v192 = v186 ^ 0x21D892FB;
  v193 = 1019416519 * v192 - ((2038833038 * v192) & 0x6FE85074);
  LODWORD(STACK[0x500]) = v187 - 2145384375;
  if (v187 - 2145384375 >= 0xF510DE7C)
    v194 = -261890701;
  else
    v194 = -445334545;
  LODWORD(STACK[0x5E0]) = v194;
  v195 = ((-(((v187 << 28) + 0x10000000) & 0x30000000) - 2013265920 * v187 - 459708269) ^ 0x1C996893) & 0xF8000000 | ((-1679190127 * v187 - ((936587042 * v187 + 1760657586) & 0x59C71618) - 514045083) >> 5);
  v196 = 1558419968 * v184 - ((969356288 * v184) & 0x608B6000);
  v197 = 1643700224 * v192 - ((-1007566848 * v192) & 0xA47E0000);
  v198 = (v195 ^ 0x3AD8C7E7)
       + (v195 ^ 0x56610C5)
       + ((2 * v195) & 0x7FFDE6C4 ^ 0x7533DF7F)
       + ((2 * v195) & 0x7F7FB77E ^ 0xA4E3030);
  v199 = ((v197 - 767621827) ^ 0xD23F053D) & 0xFFFFE000 | ((v193 - 1208735686) >> 19);
  v200 = ((2 * v199) & 0x3973FDFE ^ 0x2DFC) + (v199 ^ 0x9CB9E801);
  v201 = ((2 * v195) & 0xE7F5FD9E ^ 0x2C43890)
       + (v195 ^ 0xF69DE297)
       + ((2 * v198 - 2139214006) ^ 0xF5FAFC60)
       + ((2 * (2 * v198 - 2139214006)) & 0xEBF5F8C0);
  v202 = v201 - ((2 * v201 + 739510690) & 0xD78AF44A) - 2117107978;
  v203 = (((v196 + 809873523) ^ 0x3045B073) & 0xFFFFFE00 | (v191 >> 23)) ^ 0x1F8;
  v204 = v203 - ((2 * v203) & 0xAD6E7B5A) + 1454849453;
  v205 = ((581304320 * v190 - ((1162608640 * v190) & 0xDD140000) - 292844490) ^ 0xEE8B8C36) & 0xFFFE0000 | ((-1653501613 * v190 - ((987964070 * v190) & 0xA455E93C) - 768936802) >> 15);
  v206 = ((2 * v205) & 0xBFFCFFFE ^ 0x48AA) + (v205 ^ 0x5FFFDBAA);
  v207 = ((v200 + 1665532161 + (v204 ^ 0x3D724788 ^ v202)) ^ 0xD7F6FFA9)
       - v206
       + ((2 * (v200 + 1665532161 + (v204 ^ 0x3D724788 ^ v202))) & 0xAFEDFF52);
  v208 = v202 ^ 0x6BC57A25;
  v209 = -2019870771 * (v202 ^ 0x6BC57A25) - ((255225754 * (v202 ^ 0x6BC57A25)) & 0x173F1D8C) + 195006150;
  v210 = -1067558529 * v200 - ((-2135117058 * v200 + 1759752446) & 0xB334F586) - 1911794878;
  v211 = (335544320 * v207 - ((671088640 * v207 + 1879048192) & 0x9FFFFFFF) + 93238609) ^ 0x4D8EB551;
  v212 = (-1797732091 * v207 - ((699503114 * v207 + 418516828) & 0x7A9900CC) - 909801452) >> 6;
  v213 = ((v212 | v211) ^ 0xF53201) - 2 * (((v212 | v211) ^ 0xF53201) & 0x6BFC327C ^ v212 & 8);
  v214 = 1501495296 * v200 - ((16646144 * v200 + 16646144) & 0x1780000) + 1497043837;
  v215 = 1020903016 * v208 - ((2041806032 * v208) & 0x8B72FAC0);
  v216 = ((2 * ((v214 ^ 0x80BC137D) & 0xFFFF0000 | HIWORD(v210))) & 0xEFFE9CEA ^ 0x9020)
       + (((v214 ^ 0x80BC137D) & 0xFFFF0000 | HIWORD(v210)) ^ 0x77FF97EF);
  v217 = ((v215 - 977699482) ^ 0xC5B97D66) & 0xFFFFFFF8 | (v209 >> 29);
  v218 = v217 - ((2 * v217) & 0xF6934CF8) + 2068424316;
  v219 = 2 * v216 + 268526358;
  v220 = v219 ^ 0x285205;
  v221 = (2 * v219) & 0xFFAF5BF4;
  v222 = ((-2124698916 * v206 - ((45569464 * v206 + 55268792) & 0x9BC32810) - 813220121) ^ 0x4DE1940B) & 0xFFFFFFFC | ((542567095 * v206 - ((1085134190 * v206 - 1059924626) & 0xE3372F6C) + 1376060013) >> 30);
  v223 = ((2 * v222) & 0xEB7CD3BE ^ 2) + (v222 ^ 0xF5BE69DE);
  v224 = (v213 - 335793548) ^ 0xEBFC3274;
  v225 = 1896977585 * v224 - ((-501012126 * v224) & 0xA81E26BA) - 737209507;
  v226 = v218 ^ 0x90B59408 ^ (v213 - 335793548);
  v227 = (~(1480728888 * v216 + 1692385640) | 0x75A9B587) + 740364444 * v216;
  v228 = ((-1777301426 * v216 + 1496838234) & 0xFE31A168) + 888650713 * v216;
  v229 = v220
       - v221
       - v223
       + ((v216 - 2013222662 + v226 + 2193) ^ 0x53EFFBCF)
       + ((2 * (v216 - 2013222662 + v226 + 2193)) & 0xA7DFF79E)
       + 1158497794;
  v230 = (((573740576 * v224 - ((73739328 * v224) & 0x2ADE82C0) + 359612797) ^ 0x156F417D) & 0xFFFFFFE0 | (v225 >> 27)) ^ 0x1A;
  v231 = v230 - ((2 * v230) & 0x4F34E7EA);
  v232 = ((v227 + 2006648308) ^ 0xC52B253F) & 0xFFFFFFFC | ((v228 + 1414215454) >> 30);
  v233 = v232 - 2 * (v232 & 0x1BB6B95F ^ ((v228 + 1414215454) >> 30) & 2) + 464959837;
  v234 = ((1634190592 * v229 - ((47155712 * v229 + 111663616) & 0x27909C00) - 1222886581) ^ 0x93C84E4B) & 0xFFFFFF00 | ((123824069 * v229 - ((247648138 * v229 + 809936858) & 0x96F65B64) - 476151393) >> 24);
  v235 = ((2 * v234) & 0xDCDF76F6 ^ 0x96) + (v234 ^ 0xEE6FBBB0);
  v236 = 44593339 * v235 - ((89186678 * v235 + 122190414) & 0x13EE88A6) + 2107343226;
  v237 = (((457703424 * v223 - ((915406848 * v223 + 1754267648) & 0x79100000) + 1892775222) ^ 0xBC897536) & 0xFFF80000 | ((1752761193 * v223 - ((-789444910 * v223 - 1367085806) & 0xFA33DE1E) - 732174952) >> 13)) ^ 0x3E8CF;
  LOBYTE(v225) = ((v225 >> 27) & 4 ^ 0xE5) - ((v225 >> 27) & 4) + ((v225 >> 27) & 0x1E ^ 8);
  v238 = (v233 ^ 0x3C2CCAA8 ^ (v231 + 664433653)) + 294666848 + v235 + 549;
  v239 = v237 - ((2 * v237) & 0xC696A4AA) + 1665880661;
  v240 = v239 ^ 0x634B5255;
  v241 = (~(428203022 * (v239 ^ 0x634B5255)) | 0xAAB2CA1B) + 1287843335 * (v239 ^ 0x634B5255) - 1431921933;
  v242 = v239 ^ 0xA27ACFF6 ^ (v238 - ((2 * v238) & 0x82633B46) - 1053712989);
  v243 = (v225 & 0x66 ^ 1 | v225 & 0x98) - 1;
  v244 = ((-54826807 * v242 - ((964088210 * v242) & 0x27F3FB52) - 1812333143) ^ 0x93F9FDA9) >> (v243 ^ 0xF6);
  v245 = v244 - ((2 * v244) & 0x27C0CB70);
  v246 = 1356953088 * v235 - ((-1581061120 * v235 - 1863017472) & 0xA5C94000) - 1688277490;
  v247 = ((-536870912 * (((v231 + 664433653) ^ 0x279A73F5) & 1)
         - 805306368 * ((v231 + 664433653) ^ 0x279A73F5)
         - 1780633389) ^ 0x95DDB0D3) & 0xF0000000 | ((-1510210467 * ((v231 + 664433653) ^ 0x279A73F5)
                                                    - ((1274546362 * ((v231 + 664433653) ^ 0x279A73F5)) & 0x6E0F0504)
                                                    - 1224244606) >> 4);
  v248 = ((2 * v247) & 0xE7EF4DEC ^ 0x6E04040) + (v247 ^ 0xF887DEDE);
  v249 = (-219307228 * v242) ^ 0xFBEFF9DB;
  v250 = (-438614456 * v242) & 0xF7DFF3B0;
  v251 = ((-869343120 * v240 - ((408797408 * v240) & 0x25E57980) - 1829585726) ^ 0x92F2BCC2) & 0xFFFFFFF0 | (v241 >> 28);
  v252 = ((v246 ^ 0x52E4A00E) & 0xFFFFFE00 | (v236 >> 23)) ^ 0x113;
  v253 = ((2 * v251) & 0xEFF3FFF6 ^ 0x14) + (v251 ^ 0x77F9FFF1) - v248;
  v254 = v253 - ((2 * v253 + 2012958198) & 0x5FBE295A) - 1411597400;
  v255 = v252 - ((2 * v252) & 0x8CAE8D7A) + 1180124861;
  v256 = 2
       * (((v254 ^ 0x2FDF14AD) & (v255 ^ 0x465746BD)) - ((2 * ((v254 ^ 0x2FDF14AD) & (v255 ^ 0x465746BD))) & 0x673A7310))
       - 415599856;
  v257 = (((v245 + 333473208) ^ 0x13E065B8) >> (v243 ^ 0xE8))
       - 2 * ((((v245 + 333473208) ^ 0x13E065B8) >> (v243 ^ 0xE8)) & 0x3F)
       + 319;
  v258 = v249
       + v250
       + (v257 ^ 0xF9ECFF44)
       + ((2 * v257) & 0xF6 ^ 0x76)
       - 2
       * ((v249 + v250 + (v257 ^ 0xF9ECFF44) + ((2 * v257) & 0xF6 ^ 0x76) + 170067626) & 0xFFF933B ^ (v249 + v250 + (v257 ^ 0xF9ECFF44)) & 1)
       + 438475236;
  v259 = (v254 ^ v255 ^ 0x69885210) + (v256 ^ 0x1BCB88AF) + 51250241 + ((2 * v256) & 0xF9E3F77C ^ 0xC860E620);
  v260 = (v259 ^ 0xCF7BB7F3) + ((2 * v259) & 0x9EF76FE6) + 813975565 + (v258 ^ 0xFFF933A);
  v261 = v260 - ((2 * v260) & 0x263A550E);
  v262 = (v258 ^ 0xFFF933A)
       + 1391156377
       * (((2 * (v248 + 201873674 + (v255 ^ 0x465746BD))) & 0xF1EDF7FE)
        + ((v248 + 201873674 + (v255 ^ 0x465746BD)) ^ 0x78F6FBFF))
       - 255934311;
  v263 = v262 - ((2 * v262) & 0x3BE87886) - 1644938173;
  v261 += 320678535;
  v264 = (v263 ^ v261 ^ 0x42A11380) + 1;
  v265 = v263 ^ v261 ^ 0x6C691E6;
  LODWORD(STACK[0x4D0]) = v265;
  LODWORD(STACK[0x560]) = v258;
  v266 = v264 + (v261 ^ 0x131D2A87) - ((2 * (v264 + (v261 ^ 0x131D2A87))) & 0xE54FD19E) - 223876913;
  LODWORD(STACK[0x580]) = v266;
  v267 = v264 + (v255 ^ 0x465746BD) - ((2 * (v264 + (v255 ^ 0x465746BD))) & 0x953BFFAC) - 895615018;
  HIDWORD(v268) = v263 ^ ~v261;
  LODWORD(v268) = (1810100545 * (v263 ^ v261 ^ 0xBD5EEC7F)
                 - 105477048
                 - ((-674766206 * (v263 ^ v261 ^ 0xBD5EEC7F)) & 0xF36D1894)
                 + 2) ^ 0xF9B68C48;
  v269 = (v268 >> 2) - ((2 * (v268 >> 2)) & 0xF7B24A22) + 2077828369;
  LODWORD(STACK[0x660]) = v267;
  v270 = (((v267 << 29) ^ 0x20000000) - 326405743 + ((2 * ((v267 << 29) ^ 0x20000000) + 0x40000000) & 0x80000000)) ^ 0xCC8B7191 | ((1570816535 * (v267 ^ 0xCA9DFFD6) - ((-1153334226 * (v267 ^ 0xCA9DFFD6)) & 0x8B991106) + 1171032195) >> 3) ^ 0x8B99110;
  v271 = v270 - ((2 * v270) & 0xC0DC4BCA);
  LODWORD(STACK[0x530]) = v265 ^ v258;
  HIDWORD(v268) = v265 ^ v258 ^ 3;
  LODWORD(v268) = (-2094532911 * (v265 ^ v258 ^ 0xB467EEA3)
                 + 1940768080
                 - ((105901474 * (v265 ^ v258 ^ 0xB467EEA3)) & 0xE75B8AAE)
                 + 7) ^ 0x73ADC550;
  v272 = (v268 >> 3) - ((2 * (v268 >> 3)) & 0x5E74E3E4) + 792359410;
  v273 = v272 ^ 0x2F3A71F2;
  v274 = -826717667 * (v272 ^ 0x2F3A71F2) - ((-1653435334 * (v272 ^ 0x2F3A71F2)) & 0xD3A7EA2E) + 1775498519;
  v275 = ((1992468288 * (v266 ^ 0xF2A7E8CF) - ((-310030720 * (v266 ^ 0xF2A7E8CF)) & 0x84390600) + 1109164855) ^ 0x421C8337) & 0xFFFFFFC0 | ((1037765277 * (v266 ^ 0xF2A7E8CF) - ((2075530554 * (v266 ^ 0xF2A7E8CF)) & 0x4067B6CE) - 1607214233) >> 26);
  v276 = ((2 * v275) & 0xC4DFBFFE ^ 0x50) + (v275 ^ 0x626FDFD7);
  v277 = v269 ^ v272 ^ 0x348D7106;
  v278 = (v271 + 1617831397) ^ 0x606E25E5;
  v279 = ((2 * (((v271 + 1617831397) ^ v277) - v276 + 1651499007)) & 0xDFF6D7A6)
       + ((((v271 + 1617831397) ^ v277) - v276 + 1651499007) ^ 0xEFFB6BD3);
  v280 = -652470813 * v279 - ((-1304941626 * v279 - 599381554) & 0xE0D64BF2) - 561104160;
  v281 = ((59574554 * v278) & 0x351CBADC) - 29787277 * v278;
  v282 = 59574554 * v278 - ((119149108 * v278) & 0x74EB8BC8) + 980796900;
  v283 = (v282 & 0xFFFFFFFE | ((v281 + 1701946001) >> 31)) ^ 0x3A75C5E4;
  v284 = v283 - 2 * (v283 & 0x221A48CB ^ v282 & 0xA) + 572147905;
  v285 = -2110409303 * v276 - ((74148690 * v276 + 435530578) & 0xF044EB22) + 85805882;
  v286 = (((1468792832 * v279 - ((-1357381632 * v279 - 1489502208) & 0xA2700000) - 1529460171) ^ 0x513A4A35) & 0xFFFC0000 | (v280 >> 14)) ^ 0x3C1AC;
  v287 = 1800536064 * v276 - ((-693895168 * v276 + 1453588480) & 0xE3C00000) + 489907431;
  v288 = v286 - 2 * (v286 & 0x708E065F ^ (v280 >> 14) & 1) - 259127714;
  v289 = ((-1525776384 * v273 - ((1243414528 * v273) & 0xB2000000) - 654297474) ^ 0xD900367E) & 0xFFFF8000 | (v274 >> 17);
  v290 = ((2 * v289) & 0x6F5D7FF6 ^ 0x69D2) + (v289 ^ 0xB7AE8B12);
  v291 = ((2 * ((v287 ^ 0x71E164E7) & 0xFFFE0000 | (v285 >> 15))) & 0xDFDBF596 ^ 0x3E080)
       + (((v287 ^ 0x71E164E7) & 0xFFFE0000 | (v285 >> 15)) ^ 0x6FEC0A8F);
  v292 = 1843957469 * v291 - ((-607052358 * v291 + 1324599682) & 0xBA4AE53C) + 77551455;
  v293 = (v284 ^ 0xD2944E9F ^ v288) - (v291 + v290) + 664582854;
  v294 = ((2 * v293) & 0xBDBEDBF2) + (v293 ^ 0x5EDF6DF9);
  HIDWORD(v268) = (v280 >> 14) ^ 4;
  LODWORD(v268) = (-1879532367 * (v288 ^ 0xF08E065E) - 400305712 - ((535902562 * (v288 ^ 0xF08E065E)) & 0xD047A3A6) + 3) ^ 0xE823D1D0;
  v295 = -1975125367 * v294 - ((344716562 * v294 + 1440216958) & 0x58D116DA) + 1465157420;
  v296 = ((1327401336 * v290 - ((-1640164624 * v290 - 639803728) & 0x9EA8DC60) - 1136452211) ^ 0x4F546E35) & 0xFFFFFFF8 | ((-1981558481 * v290 - ((331850334 * v290 + 456895446) & 0x7261DA84) + 1187955501) >> 29);
  v297 = (v296 ^ 1) - ((2 * v296) & 0x29A7097C);
  v298 = (v268 >> 3) - ((2 * (v268 >> 3)) & 0xA735A0E0) - 744828816;
  v299 = v298 ^ 0xD39AD070;
  v300 = -2097495347 * (v298 ^ 0xD39AD070) - ((99976602 * (v298 ^ 0xD39AD070)) & 0x2A046120) - 1795018608;
  v297 += 349406398;
  v301 = -1085202432 * v294 - ((245514240 * v294 + 250593280) & 0xD5A8000) + 103097067;
  v302 = 498728960 * v291 - ((997457920 * v291 + 319029248) & 0x46FC0000) + 1828730350;
  v303 = ((v301 ^ 0x86AD42EB) & 0xFFFFE000 | (v295 >> 19)) ^ 0x58D;
  v304 = v303 - 2 * (v303 & 0x7977C85F ^ (v295 >> 19) & 0x10);
  v305 = 2
       * (((v298 ^ 0xD39AD070) & (v297 ^ 0x14D384BE))
        - ((2 * ((v298 ^ 0xD39AD070) & (v297 ^ 0x14D384BE))) & 0x53EDA0B6)
        + 1777782883)
       - 16;
  v306 = ((v302 ^ 0xA37E35EE) & 0xFFFE0000 | (v292 >> 15)) ^ 0xBA4A;
  v307 = (v297 ^ 0xC74954CE ^ v298) + (v305 ^ 0xACF65F19) - 2132541359 + ((2 * v305) & 0xFE37FF5C ^ 0xA613414C);
  v308 = v306 - ((2 * v306) & 0x1EAA3F18) + 257236876;
  v309 = v308 ^ 0xF551F8C;
  v310 = 901433759 * (v308 ^ 0xF551F8C) - ((1802867518 * (v308 ^ 0xF551F8C)) & 0xCB8F7A8C) - 439894714;
  v311 = v308 ^ (v304 - 109590449) ^ 0x1C5C2424 ^ (v307 - ((2 * v307) & 0xD4FDE7CE) - 360778777);
  v312 = -1895857437 * v311 - ((503252422 * v311) & 0x189BE4E6) + 206434931;
  v313 = -1049526272 * v311 - ((48431104 * v311) & 0x17BD0000);
  v314 = ((-1757413376 * ((v304 - 109590449) ^ 0xF977C84F)
         - ((780140544 * ((v304 - 109590449) ^ 0xF977C84F)) & 0x53800000)
         + 701171724) ^ 0x29CB080C) & 0xFFC00000 | ((-1046001059 * ((v304 - 109590449) ^ 0xF977C84F)
                                                   - ((-2092002118 * ((v304 - 109590449) ^ 0xF977C84F)) & 0xE6297032)
                                                   + 1930737689) >> 10);
  v315 = ((2 * v314) & 0xF3DF8FFC ^ 0x198A5C) + (v314 ^ 0xF9F302D0);
  v316 = (((v313 + 199141004) ^ 0xBDEA68C) & 0xFFFF8000 | (v312 >> 17)) ^ 0x626;
  v317 = (((-1218890784 * v309 - ((1857185728 * v309) & 0x943FCE40) - 903878866) ^ 0xCA1FE72E) & 0xFFFFFFE0 | (v310 >> 27)) ^ 0x1C;
  v318 = (((-175793664 * v299 - ((1795896320 * v299) & 0x611DB000) + 814667859) ^ 0x308ED853) & 0xFFFFFE00 | (v300 >> 23)) ^ 0x12A;
  v319 = v318 - ((2 * v318) & 0x634D064A) + 832996133;
  v320 = v315 + 101726210 + (v319 ^ 0x31A68325);
  v321 = v315 + 101726210 + ((v317 - ((2 * v317) & 0x1B6D4520) - 1917410672) ^ 0xBC1021B5 ^ v319);
  v322 = v316 - ((2 * v316) & 0x69789306) + 884754819;
  v323 = (v320 ^ 0xB5E99CB7) + ((2 * v320) & 0x6BD3396E) + 1242981193 + (v322 ^ 0x34BC4983);
  v324 = v322 ^ (v321 - ((2 * v321) & 0x1DD07F20) - 1897382000) ^ 0x72D02F99 ^ (((2 * v323) & 0xEEFB6FAE)
                                                                              + (v323 ^ 0x777DB7D7)
                                                                              - 2
                                                                              * ((((2 * v323) & 0xEEFB6FAE)
                                                                                + (v323 ^ 0x777DB7D7)
                                                                                + 1469379776) & 0x4884599A ^ (((2 * v323) & 0xEEFB6FAE) + (v323 ^ 0x777DB7D7)) & 0x10)
                                                                              + 538529354);
  v325 = v324 - ((2 * v324 - 1701039570) & 0xD1C879F2);
  LODWORD(STACK[0x640]) = v325 - 1238215152;
  LODWORD(STACK[0x690]) = ((v325 - 1238215152) ^ 0x68E43CF9)
                        + (v322 ^ 0x34BC4983)
                        - ((2 * (((v325 - 1238215152) ^ 0x68E43CF9) + (v322 ^ 0x34BC4983))) & 0x8183DB0E)
                        - 1061032569;
  LODWORD(STACK[0x668]) = ((v325 - 1238215152) ^ 0x971BC306)
                        + v315
                        - ((2 * (((v325 - 1238215152) ^ 0x971BC306) + v315) + 203452422) & 0xB9C26B22)
                        - 487494252;
  v326 = malloc(0x408uLL);
  STACK[0xAF0] = (unint64_t)v326;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((480 * (v326 != 0)) ^ v5)) - 8))();
}

uint64_t sub_10010A834(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  char v78;
  char v79;
  char v80;
  int v81;
  unsigned int v82;

  v11 = v6 - 364;
  v12 = STACK[0x630];
  LODWORD(STACK[0x480]) = LODWORD(STACK[0x630]) ^ 0x4A8412A9;
  LODWORD(STACK[0x458]) = (STACK[0x608] & v7) - ((2 * (STACK[0x608] & v7)) & 0x135D5128) + 162441364;
  LODWORD(STACK[0x450]) = (v7 | LODWORD(STACK[0x610])) - ((2 * (v7 | LODWORD(STACK[0x610]))) & 0xF12CEBE) + 126445407;
  v13 = STACK[0x628];
  LODWORD(STACK[0x4A0]) = LODWORD(STACK[0x628]) >> 8;
  LODWORD(STACK[0x608]) = HIBYTE(v13) ^ 0xEF9384C4;
  LODWORD(STACK[0x478]) = v9
                        + LODWORD(STACK[0x5E0])
                        + v5
                        - 1700049830
                        - ((2 * (v9 + LODWORD(STACK[0x5E0]) + v5 - 1700049830)) & 0xA40D85E2)
                        + 1376174833;
  LODWORD(STACK[0x438]) = v10 - 1238215144;
  v14 = STACK[0x640];
  v15 = LODWORD(STACK[0x640]) ^ v1;
  v16 = (v15 & 0x684CEC41 ^ 0x65014960)
      + (v15 & 0x200CE841 ^ 0x903CB01D)
      - ((v15 & 0x684CEC41 ^ 0x65014960) & 0x240CE961);
  v17 = LODWORD(STACK[0x690]) ^ v3;
  v18 = ((STACK[0x690] & 0xFFFFFDFF ^ 0x82EA3D4A)
       + (STACK[0x690] & 0x4D4B7045 ^ 0x4D014005)
       - ((STACK[0x690] & 0xFFFFFDFF ^ 0x82EA3D4A) & 0x4D4B7045)) ^ 0xD4030C9;
  LODWORD(STACK[0x44C]) = (v18 | 0xB800E353) - (v18 | 0x47FF1CAC) + 1207901356;
  v19 = ((v15 & 0x9212020E ^ 0x1800E20F | v15 & 0x5A111B0) - 1) ^ 0xBF12E266;
  v20 = LODWORD(STACK[0x668]) ^ 0xDCE13591;
  LODWORD(STACK[0x440]) = v20 - 449817616 + v2 - ((2 * (v20 - 449817616 + v2)) & 0xA24107DE) - 786398225;
  v21 = (v19 - ((2 * v19) & 0x3640718) + 32695180) ^ 0x3450E14E | v16 ^ 0x913DF85D;
  v22 = v21 - ((2 * v21) & 0xE2182546) - 250867037;
  LODWORD(STACK[0x464]) = v22;
  v23 = (((-1933756032 * v17 - ((427455232 * v17) & 0xB26BEA00) + 1496708475) ^ 0x5935F57B) & 0xFFFFFF80 | ((119110259 * v17 - ((238220518 * v17) & 0x88A5442C) + 1146266134) >> 25)) ^ 0x22;
  v24 = v23 - ((2 * v23) & 0xB9732648) + 1555665700;
  v25 = (1811939328 * v4 - ((-671088640 * v4) & 0xDFFFFFFF) + 1824568893) ^ 0x6CC0B63D | ((-292073701 * v4
                                                                                         - ((-584147402 * v4) & 0xB071846C)
                                                                                         + 1480114742) >> 6);
  v26 = ((2 * v25) & 0xBFBF77CE ^ 0x2814600) + (v25 ^ 0xDEBF58EF);
  v27 = ((-899678208 * (v22 ^ 0xF10C12A3) - ((348127232 * (v22 ^ 0xF10C12A3)) & 0x4C800000) - 1505034311) ^ 0xA64AFFB9) & 0xFFE00000 | ((1892111955 * (v22 ^ 0xF10C12A3) - ((562998438 * (v22 ^ 0xF10C12A3)) & 0x2BA06130) - 1781518184) >> 11);
  v28 = ((2 * v27) & 0xD6F0AC6E ^ 0x20240C) + (v27 ^ 0xEB6AEC31);
  v29 = ((-228342528 * v20 - ((617056768 * v20) & 0x25B33A00) + 316251456) ^ 0x12D99D40) & 0xFFFFFF00 | ((-1259183163 * v20 - ((1776600970 * v20) & 0x86A040BE) + 1129324639) >> 24);
  v30 = ((2 * v29) & 0xFCFDDDD2 ^ 0x82) + (v29 ^ 0xFE7EEEAA);
  v31 = v26 - v30 - ((2 * (v26 - v30) + 1027499524) & 0xAB102DAE) - 198751783;
  v32 = 2 * (((v31 ^ 0xD58816D7) & (v24 ^ 0x5CB99324)) - ((2 * ((v31 ^ 0xD58816D7) & (v24 ^ 0x5CB99324))) & 0x30E7E7E4))
      + 820504548;
  v33 = (v24 ^ 0x893185F3 ^ v31) + (v32 ^ 0x4F99230F) - 2139014379 + ((2 * v32) & 0xFEFD89D4 ^ 0x60CD89C0);
  HIDWORD(v34) = (v33 ^ 0xDAFFFDF7) + v28;
  LODWORD(v34) = (1772274431 * (((2 * v33) & 0xB5FFFBEE) + HIDWORD(v34) - 1359450201)
                - ((1397065214 * (((2 * v33) & 0xB5FFFBEE) + HIDWORD(v34) - 1359450201) + 217516458) & 0x4E84B098)
                + 1841159457) ^ 0x2742584C;
  v35 = (v34 >> 1) - ((2 * (v34 >> 1)) & 0xA13414E8) + 1352272500;
  v36 = 1225264699 * (v35 ^ 0x509A0A74) - ((303045750 * (v35 ^ 0x509A0A74)) & 0x6EB873E8) + 928791028;
  v37 = ((-448640624 * v28 - ((1250202400 * v28 + 488088608) & 0x53A83560) - 127931195) ^ 0x29D41AB5) & 0xFFFFFFF0 | ((-296475495 * v28 - ((-592950990 * v28 - 640583102) & 0x90A4A51A) + 893063086) >> 28);
  v38 = ((2 * v37) & 0xFBED5FFE ^ 8) + (v37 ^ 0xFDF6AFFB);
  v39 = ((151893760 * (v24 ^ 0x5CB99324) - ((303787520 * (v24 ^ 0x5CB99324)) & 0xF2C6BA00) - 110928598) ^ 0xF9635D2A) & 0xFFFFFF00 | ((990449079 * (v24 ^ 0x5CB99324) - ((1980898158 * (v24 ^ 0x5CB99324)) & 0x83B9267E) + 1104974655) >> 24);
  v40 = ((2 * v39) & 0x7FF7BEF8 ^ 0x80) + (v39 ^ 0xBFFBDF3D);
  v41 = ((508559360 * v30 - ((480247808 * v30 + 308281344) & 0x17000000) - 1799668710) ^ 0x8B8B3C1A) & 0xFFF00000 | ((1757266405 * v30 - ((-780434486 * v30 + 950223142) & 0x8BA2A7AC) - 501025687) >> 12);
  v42 = (v41 ^ 0x45D15) - 1063075560 - ((2 * (v41 ^ 0x45D15)) & 0x81459774) + 2722;
  v43 = 513021603 * v38 - ((220736838 * v38 + 247729478) & 0x99C7566) - 63946410;
  v44 = 189890560 * v38 - ((379781120 * v38 + 111345664) & 0x7F6D0000) + 1124613543;
  v45 = v40 + 1074008254 + (v42 ^ 0x9038C1CE ^ v35);
  v46 = 238747648 * (v35 ^ 0x509A0A74) - ((209059840 * (v35 ^ 0x509A0A74)) & 0xF920000);
  v47 = -1293815639 * v40 - 2 * ((-1293815639 * v40 + 2100901668) & 0x71105D5F ^ (-1293815639 * v40) & 3) + 1850315904;
  LODWORD(STACK[0x670]) = HIWORD(v13) ^ 0xF3640A8A;
  v48 = 1895322752 * v40 - ((-504321792 * v40 + 959915008) & 0xDF251B00) - 1943134313;
  v49 = ((v45 + 4038) ^ 0xBFFFFFC) - v38 + ((2 * (v45 + 4038)) & 0x17FFFFF8);
  v50 = -1183072685 * v49 - ((1928821926 * v49 - 1944283662) & 0xB753FA42) - 1581758438;
  v51 = 1275068416 * v49 - ((-1744830464 * v49 - 939524096) & 0xE0000000) + 1473182561;
  v52 = (((v46 + 130614907) ^ 0x7C9067B) & 0xFFFF0000 | HIWORD(v36)) ^ 0x375C;
  v53 = v52 - ((2 * v52) & 0x94CAB38C) - 899327546;
  v54 = ((2 * ((v51 ^ 0x73CEFB61) & 0xFC000000 | (v50 >> 6))) & 0xCFCF79BE ^ 0x2CD49A8)
      + (((v51 ^ 0x73CEFB61) & 0xFC000000 | (v50 >> 6)) ^ 0x66891B2B);
  v55 = ((v44 ^ 0x3FB6BDA7) & 0xFFFF8000 | (v43 >> 17)) ^ 0x4267;
  v56 = v55 - ((2 * v55) & 0x9A51F3D2) - 852952599;
  v57 = ((v48 ^ 0xEF928D97) & 0xFFFFFF80 | (v47 >> 25)) ^ 0x78;
  v58 = ((v57 - ((2 * v57) & 0x793E58C) - 2083917114) ^ 0x49ACAB00 ^ v53) - 1743240415 + v54;
  v59 = v58 - ((2 * v58) & 0x79E92D4C) + 1022662310;
  v60 = v56 ^ 0xCD28F9E9;
  v61 = 2 * (((v59 ^ 0x3CF496A6) & (v56 ^ 0xCD28F9E9)) - ((2 * ((v59 ^ 0x3CF496A6) & (v56 ^ 0xCD28F9E9))) & 0x2EB79E20))
      - 1363698144;
  v62 = (v56 ^ 0xF1DC6F4F ^ v59) + (v61 ^ 0xD3D820CE) - 2104475374 + ((2 * v61) & 0xFADF7DDC ^ 0x584F3C40);
  v63 = STACK[0x678];
  LODWORD(STACK[0x5E0]) = HIBYTE(LODWORD(STACK[0x678])) ^ 0x68BFC8D0;
  LODWORD(STACK[0x610]) = HIWORD(v63) ^ 0x98FF956B;
  v64 = (((824180736 * (v53 ^ 0xCA6559C6) - ((1648361472 * (v53 ^ 0xCA6559C6)) & 0x69400000) - 1262964430) ^ 0xB4B8B132) & 0xFFE00000 | ((-1225981559 * (v53 ^ 0xCA6559C6) - ((1843004178 * (v53 ^ 0xCA6559C6)) & 0x45430A04) + 581010690) >> 11)) ^ 0x45430;
  v65 = v64 - ((2 * v64) & 0xAF64FFBE) + 1471315935;
  v66 = (((-1978697760 * v60 - ((337571776 * v60) & 0xE27E4B00) + 1899963807) ^ 0x713F259F) & 0xFFFFFFE0 | ((877689791 * v60 - ((1755379582 * v60) & 0xD6857820) + 1799535632) >> 27)) ^ 0xD;
  v67 = (((1896947712 * (((2 * v62) & 0x93F7D8F4) + (v62 ^ 0xC9FBEC7A))
         - ((1646411776 * (((2 * v62) & 0x93F7D8F4) + (v62 ^ 0xC9FBEC7A)) + 1756200960) & 0x630FC000)
         + 635347271) ^ 0x3187E147) & 0xFFFFE000 | ((1312000137 * (((2 * v62) & 0x93F7D8F4) + (v62 ^ 0xC9FBEC7A))
                                                   - ((-1670967022 * (((2 * v62) & 0x93F7D8F4) + (v62 ^ 0xC9FBEC7A))
                                                     - 1803598484) & 0x918A08A2)
                                                   + 319072007) >> 19)) ^ 0x918;
  v68 = (((-1369833472 * v54 - ((481558528 * v54 + 255066112) & 0x332C0000) + 556884721) ^ 0x199762F1) & 0xFFFE0000 | ((-551430355 * v54 - ((1044622938 * v54 + 97191834) & 0x215B8050) + 328418293) >> 15)) ^ 0x1215B;
  v69 = v68 - ((2 * v68) & 0xABB98FA) - 2057450371;
  v70 = ((2 * ((v65 ^ 0x57B27FDF) + (v69 ^ 0x7AA23382) + 1)) & 0xFC3FBE8E)
      + (((v65 ^ 0x57B27FDF) + (v69 ^ 0x7AA23382) + 1) ^ 0x7E1FDF47);
  v71 = v67 - ((2 * v67) & 0x3A4F87EA) - 1658338315;
  v72 = (v69 ^ 0x855DCC7D) + ((v66 - ((2 * v66) & 0xC3B47818) - 505791476) ^ 0xB66843D3 ^ v65);
  v73 = ((2 * v72) & 0xAD6C437E) + (v72 ^ 0x56B621BF) + (v71 ^ 0x62D83C0A);
  v74 = v73 - 2 * ((v73 + 692706882) & 0x2097FEFF ^ v73 & 1) - 907944640;
  LODWORD(STACK[0x498]) = (v14 >> 8) ^ 0x21DEC382;
  v75 = v71 ^ (v70 - ((2 * v70 + 45601304) & 0x2330F8EA) - 1829476991) ^ v74;
  LODWORD(STACK[0x470]) = v75 ^ 0x80539606;
  v76 = (v75 ^ 0x2EA553E8)
      + (v74 ^ 0x2097FEFE)
      - ((2 * ((v75 ^ 0x2EA553E8) + (v74 ^ 0x2097FEFE))) & 0xFA70B282)
      - 46638783;
  LODWORD(STACK[0x468]) = v69;
  v77 = v69 ^ 0x888891BE ^ v75;
  LODWORD(STACK[0x430]) = LODWORD(STACK[0x620]) - ((LODWORD(STACK[0x618]) + 181314580) & 0x9D4CF16) - 766396011;
  LODWORD(STACK[0x618]) = v76;
  v78 = (((v76 ^ 0x40) + 101 + ~((2 * (v76 ^ 0x40) + 70) & 0x82)) ^ 0x41) + (v12 ^ 0xB);
  v79 = ((v78 & 0xFE) - ((2 * v78) & 0x14) + 11) ^ 0x66;
  v80 = 98 - -31 * v79;
  LOBYTE(v74) = 62 * v79;
  v81 = LODWORD(STACK[0x5F0]) ^ LODWORD(STACK[0x660]);
  LODWORD(STACK[0x620]) = v77;
  LOBYTE(v76) = v11 + 5;
  LODWORD(STACK[0x5F0]) = HIWORD(v14);
  v82 = ((((v80 - (v74 & v76)) ^ v63 ^ v13 ^ v14) ^ 0xDA)
       - ((2 * (((v80 - (v74 & v76)) ^ v63 ^ v13 ^ v14) ^ 0xDA)) & 0x126)
       + 1630282643) ^ 0x856CA590;
  *(_DWORD *)(a1 + 4 * ((v80 - (v74 & v76)) ^ 0x62u)) = v81 ^ v77 ^ 0x73A409A2 ^ dword_100239C20[(v82 - ((2 * v82) & 0x40011A72) - 1550611143) ^ 0x47D30BD1];
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * v11) - 8))();
}

void sub_10010B960()
{
  JUMPOUT(0x10010B8FCLL);
}

uint64_t sub_10010B970@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  int v3;
  void *v4;

  LODWORD(STACK[0x630]) = v1;
  v2 = a1 + 488;
  v3 = (a1 - 2053462276) & 0x7A655ADC;
  v4 = malloc(0x404uLL);
  STACK[0xB00] = (unint64_t)v4;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + (((v4 == 0) * (v3 - 633)) ^ v2))
                            - ((15 * (v2 ^ 0x282u)) ^ 0x223)))();
}

uint64_t sub_10010B9E0(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  __int16 v17;
  unsigned int v18;

  v5 = STACK[0x5D0];
  LODWORD(STACK[0x428]) = v4;
  LODWORD(STACK[0x424]) = v4 ^ v5;
  v6 = ((v4 ^ v5 ^ 0x2B348DEA) - ((2 * (v4 ^ v5 ^ 0x2B348DEA) + 1827475886) & 0x757198A6) - 1322298070) ^ 0x8A294BF1;
  v7 = ((v6 - ((2 * v6 + 1827475886) & 0x757198A6) - 1322298070) ^ 0x3AB8CC53) + (LODWORD(STACK[0x5C0]) ^ 0xC804DA69);
  v8 = ((LODWORD(STACK[0x4A0]) << 7) ^ 0x3092E780) - 615150768;
  LODWORD(STACK[0x5C0]) = v3;
  v9 = ((unsigned __int16)LODWORD(STACK[0x678]) >> 9) ^ 0x8D000A2F;
  v10 = ((((unsigned __int16)v1 >> 9) ^ 0x32478227)
       + ((v1 >> 9) & 0x1B ^ 0xCC986018)
       - ((((unsigned __int16)v1 >> 9) ^ 0x32478227) & 0x3242021B)) ^ 0xCC9DE05B | v8 ^ 0xDB558B50;
  v11 = v10 - ((2 * v10) & 0xA6) + 211;
  v12 = ((v9 | 0xD4250312) - (v9 | 0x2BDAFCED) + 735771885) ^ 0x5925091A | (((v3 << 7) ^ 0x1C62780) - 909767656) ^ 0xC9C60C18;
  v13 = v12 - ((2 * v12) & 0x56) + 171;
  LOBYTE(v7) = (((((2 * v7) & 0xDC) + (v7 ^ 0x6E)) & 0xFE) - ((2 * (((2 * v7) & 0xDC) + (v7 ^ 0x6E)) + 36) & 0x18) + 30) ^ 0xCF;
  HIDWORD(v14) = v13 ^ v11 ^ 0x5C;
  LODWORD(v14) = (v13 ^ ~v11) << 24;
  v15 = LODWORD(STACK[0x498]) ^ (((((v14 >> 31) - ((2 * (v14 >> 31)) & 4) + 6) ^ 2) - 4)
                               - ((2 * ((((v14 >> 31) - ((2 * (v14 >> 31)) & 4) + 6) ^ 2) - 4)) & 0xD6)
                               + 235);
  LOBYTE(v13) = -117 * v7 - 19;
  LODWORD(STACK[0x628]) = v2 ^ 0x255;
  v16 = (v15 ^ (v13 - ((22 * v7) & 0xDA)));
  v17 = (v16 ^ 0x51) - ((2 * (v16 ^ 0x51)) & 0xF2) + 31609;
  v18 = (((v16 ^ 0x4038) - ((2 * (v16 ^ 0x4038)) & 0x12C) + 268646550) ^ 0x10037835)
      + (((v16 ^ 0x262004A4) - (((v2 ^ 0x255) + 201328485) & (2 * (v16 ^ 0x262004A4))) + 513384217) ^ 0xEC5DFDEF);
  *(_DWORD *)(a1 + 4 * ((v13 - ((22 * v7) & 0xDA)) ^ 0xEDu)) = LODWORD(STACK[0x688]) ^ LODWORD(STACK[0x680]) ^ LODWORD(STACK[0x690]) ^ (v18 - ((2 * v18) & 0x2BEB38B8) + 368417884) ^ 0x5E82BB5 ^ dword_100218850[((v17 & 0x7A3 ^ 0x225D3482) + (v17 & 0x85C ^ 0x9A20859) - 1) ^ 0x2BFF3787];
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + v2) - 8))();
}

void sub_10010BD90()
{
  JUMPOUT(0x10010BC90);
}

uint64_t sub_10010BDA0()
{
  unsigned int v0;
  void *v1;

  v0 = STACK[0x628];
  v1 = malloc(0x408uLL);
  STACK[0xB08] = (unint64_t)v1;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((338 * (v1 != 0)) ^ v0)) - (((v0 - 169) | 0x181) ^ 0x1A9)))();
}

uint64_t sub_10010BDF0(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v4 = LODWORD(STACK[0x480]) ^ LODWORD(STACK[0x620]) ^ 0x3165A916;
  v5 = (2 * v4 + 111957800) & 0x5F04112;
  v4 -= 1102164963;
  v6 = ((((v4 - v5) ^ 0x3165A916) - ((2 * ((v4 - v5) ^ 0x3165A916) + 111957800) & 0x5F04112) - 1102164963) ^ 0x82F82089)
     + LODWORD(STACK[0x5B0]);
  v7 = ((v6 - ((2 * v6) & 0x531BF81E) - 1450312689) | v4 & 1) ^ 0xD833D85A;
  v8 = (v7 - 1989991019 + (~(2 * v7) | 0xED39B4D5) + 1) ^ 0x89632595;
  v9 = ((STACK[0x5A0] & 0x6F406499 ^ 0x62002090)
      - ((2 * (STACK[0x5A0] & 0x6F406499 ^ 0x62002090)) & 0x9E00C810)
      + 1597992232) ^ 0xA7F7C2C;
  v10 = (((v2 - 405) | 0x2A8) - 333472139) * v8
      - ((2 * (((v2 - 405) | 0x2A8) - 333472139) * v8) & 0xF930114)
      - 2016837494;
  v11 = ((v10 ^ v1) & 0x39 ^ 0xAE302B18) + ((v10 ^ v1) & 0xC6 ^ 0x45) - 1;
  v12 = dword_100219EA0[((v11 & 0x240007AB ^ 0x104CC482) + (v11 ^ 0xACB0332D) - ((v11 ^ 0xACB0332D) & 0x801FAB)) ^ 0x364CC728];
  *(_DWORD *)(a1
            + 4
            * (((((v2 + 107) | 0xA8) + 117) * v8 - ((2 * (((v2 + 107) | 0xA8) + 117) * v8) & 0x14) - 118) ^ 0x8Au)) = STACK[0x5A0] & 0x90BF9B66 ^ ((v9 | 0xAE8FCE75) - (v9 | 0x5170318A) + 1366307210) ^ LODWORD(STACK[0x478]) ^ LODWORD(STACK[0x668]) ^ 0x666518F5 ^ (v12 - ((2 * v12 + 575539174) & 0xEBCB76D4) + 118275933);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * v2) - 12))();
}

void sub_10010C060()
{
  JUMPOUT(0x10010BFD0);
}

uint64_t sub_10010C068()
{
  int v0;
  void *v1;

  v1 = malloc(0x404uLL);
  STACK[0xAE0] = (unint64_t)v1;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((1968 * (v1 != 0)) ^ v0))
                            - (((v0 - 174) | 0x21) ^ (v0 + 1743436805) & 0x9815457F ^ 0x61ELL)))();
}

uint64_t sub_10010C0D4()
{
  int v0;
  int v1;
  unsigned int v2;
  unsigned int v3;

  LODWORD(STACK[0x690]) = LODWORD(STACK[0x590]) ^ 0xB7099816;
  v1 = LODWORD(STACK[0x570]) ^ 0x51D3B1B4;
  v2 = v1
     + (((LODWORD(STACK[0x570]) ^ 0xB745A94) + 1) ^ 0xFDDFFFFF)
     + ((2 * ((LODWORD(STACK[0x570]) ^ 0xB745A94) + 1)) & 0xFBBFFFFE)
     + 35651585;
  v3 = ((v2 - ((2 * v2) & 0xFFB68E24) - 2406638) ^ 0x24B8EC) + v1;
  return sub_1000D0EC8(1307574272, 446097052, 223048526, (v3 - ((2 * v3) & 0x538FB3CE) + 700963303) ^ LODWORD(STACK[0x660]) ^ LODWORD(STACK[0x560]) ^ LODWORD(STACK[0x580]) ^ LODWORD(STACK[0x468]) ^ LODWORD(STACK[0x618]) ^ v0 ^ 0xAF4371B9, 0x23u, 650, 752438);
}

void sub_10010C4D8(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  _QWORD *v7;
  int *v8;
  _DWORD *v9;

  a1[17] ^= v6 ^ LOBYTE(STACK[0xBB0]) ^ 0xE2;
  a1[18] ^= LOBYTE(STACK[0xBB1]) ^ 0x7D;
  a1[19] ^= LOBYTE(STACK[0xBB2]) ^ 0x1A;
  a1[20] ^= LOBYTE(STACK[0xBB3]) ^ 0x25;
  v9 = (_DWORD *)STACK[0xA10];
  *v9 = 2023518721;
  *v7 = a1;
  *v8 = LODWORD(STACK[0x978]) ^ 0x777D8E08;
  *(_QWORD *)STACK[0x650] = v9;
  sub_1000B6114((uint64_t)a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_10010C578(uint64_t a1)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1680 * (a1 != 0)) ^ (v1 - 1582))) - 12))();
}

void sub_10010C5A0(void *a1)
{
  free(a1);
  JUMPOUT(0x10010C5A8);
}

uint64_t sub_10010C5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v9 = STACK[0x888];
  LODWORD(STACK[0x888]) = v6 + 1086 + LODWORD(STACK[0x888]) - 1740;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8 * ((((v9 + 1973728165) < 0x80000001) * (v6 ^ 0x5FE)) ^ v6))
                                                                                                - 8))(a1, a2, a3, a4, a5, a6, v7);
}

uint64_t sub_10010C604@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int8x16_t *v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;

  v9.i64[0] = 0x6262626262626262;
  v9.i64[1] = 0x6262626262626262;
  v10.i64[0] = 0xB1B1B1B1B1B1B1B1;
  v10.i64[1] = 0xB1B1B1B1B1B1B1B1;
  *(int8x16_t *)(v1 + (((v5 - 1020) ^ v3) & (a1 + v4))) = vaddq_s8(vsubq_s8(*v2, vandq_s8(vaddq_s8(*v2, *v2), v9)), v10);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v8
                                                               + 8
                                                               * ((209 * ((((v7 ^ 0x22D) + v6) & 0x1FFFFFFF0) == 16)) | v5))
                                                   - 8))(((v7 ^ 0x22D) + v6) & 0x1FFFFFFF0, (((v7 ^ 0x22D) + v6) & 0x1FFFFFFF0) - 16);
}

void sub_10010C674()
{
  JUMPOUT(0x10010C63CLL);
}

uint64_t sub_10010C680@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * ((((a2 ^ 0x215) + ((a2 - 31) | 0x60) - 568) * (v2 == a1)) ^ a2)))();
}

uint64_t sub_10010C6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  LODWORD(STACK[0x6F4]) = v9;
  STACK[0x840] = *(_QWORD *)(v11 + 8 * v10);
  LODWORD(STACK[0x668]) = a8 ^ 0x556;
  LODWORD(STACK[0x670]) = (a8 ^ 0x556) + 1790221395;
  LODWORD(STACK[0x688]) = -514044794;
  LODWORD(STACK[0x680]) = 2042623983;
  LODWORD(STACK[0x678]) = -1076953617;
  v12 = 80 * ((14 * ((v10 + 1510) ^ 0x644)) ^ 0x4FEu);
  STACK[0x8A0] += v12;
  LODWORD(STACK[0x7EC]) = *(_DWORD *)(v8 + 72);
  LODWORD(STACK[0x7B4]) = *(_DWORD *)(v8 + 76);
  LODWORD(STACK[0x700]) = *(_DWORD *)(v8 + 80);
  LODWORD(STACK[0x804]) = *(_DWORD *)(v8 + 84);
  return (*(uint64_t (**)(void))(v11
                              + 8
                              * (int)((((char)(*(_BYTE *)(v8 + 96) ^ 0x5F) < (char)(((80
                                                                                    * ((14 * ((v10 - 26) ^ 0x44)) ^ 0xFE)
                                                                                    - 32) | 0x88)
                                                                                  + 78))
                                     * ((v12 + 617) ^ 0x3B7)) | v12)))();
}

uint64_t sub_10010C6C8@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W5>, int a5@<W8>)
{
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _BOOL4 v28;

  v12 = *(unsigned __int8 *)(STACK[0x688] + v6);
  v13 = 1364176807 * (((2 * v12) & 0x1FC) + (v12 ^ 0xFD6EFBFE))
      - ((-1566613682 * (((2 * v12) & 0x1FC) + (v12 ^ 0xFD6EFBFE)) + 1508505244) & v10)
      - 57790411;
  v14 = ((2 * (v6 + (a4 ^ 0x174E9896 ^ v13))) & 0x97FD3DD6) + ((v6 + (a4 ^ 0x174E9896 ^ v13)) ^ 0x4BFE9EEB);
  v15 = (((v14 - 1274978027) >> 16) ^ 0x75FDFDFB) + v14 + ((2 * ((v14 - 1274978027) >> 16)) & 0x1FBF6);
  v16 = (((v15 + 1040409370) >> 8) ^ a2) + v15 + ((2 * ((v15 + 1040409370) >> 8)) & 0x1FFF752);
  v17 = ((v16 - 1090295951) ^ a1 ^ v5)
      + a5
      - 2 * (((v16 - 1090295951) ^ a1 ^ v5) & 0x14C4ACF ^ ((v16 - 1090295951) ^ a1) & v7);
  v18 = v16 - ((2 * v16 + 520833190) & 0x5A2B8CBA) - 56923472;
  v19 = ((2 * (v6 + (v13 ^ 0x628CF2BA ^ v18))) & 0xBFAFFE7E) + ((v6 + (v13 ^ 0x628CF2BA ^ v18)) ^ 0x5FD7FF3F);
  v20 = v19 + 2 * ((v19 - 1607991103) >> 16) + (((v19 - 1607991103) >> 16) ^ 0xBE77FFFF);
  v21 = (((v20 - 508559166) >> 8) ^ 0x57BF6FCF) + v20 + (((v20 - 508559166) >> 7) & 0x17EDF9E);
  v22 = ((v21 - 1980722957) ^ v17 ^ a5)
      + a3
      - 2 * (((v21 - 1980722957) ^ v17 ^ a5) & (a3 + 5) ^ ((v21 - 1980722957) ^ v17) & v7);
  v23 = v21 - ((2 * v21 + 887462826) & 0x7055E4B6) + 1386070064;
  v24 = ((2 * (v6 + (v13 ^ 0xF7B3C6BC ^ v23))) & 0xAFBCECF6) + ((v6 + (v13 ^ 0xF7B3C6BC ^ v23)) ^ 0xD7DE767B);
  v25 = (((v24 + 673286533) >> 16) ^ 0x9FEBBC9A) + v24 + ((2 * ((v24 + 673286533) >> 16)) & 0x17934);
  v26 = (((v25 - 2009740053) >> 8) ^ 0x7EFBD5DB) + v25 + (((v25 - 2009740053) >> 7) & 0x1F7ABB6);
  v27 = ((v26 + 154793744) ^ v22 ^ a3)
      + v5
      - 2 * (((v26 + 154793744) ^ v22 ^ a3) & (v5 + 4) ^ ((v26 + 154793744) ^ v22) & 4);
  if (v8 < 0x6FBFF4B7 != v6 - 1555404989 < 0xA34A6742)
    v28 = v8 < 0x6FBFF4B7;
  else
    v28 = v6 - 1555404989 < v9;
  return ((uint64_t (*)(uint64_t))*(&off_100260750 + ((!v28 * v11) ^ STACK[0x678])))(v27);
}

uint64_t sub_10010CA90(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;

  v8 = STACK[0x678] + 391;
  v9 = LODWORD(STACK[0x660]) == -768964959;
  v10 = STACK[0x510];
  if (LODWORD(STACK[0x660]) != -768964959)
    v10 = STACK[0x438];
  LODWORD(STACK[0x2A8]) = v10;
  v11 = STACK[0x4F0];
  if (v9)
    v11 = STACK[0x428];
  LODWORD(STACK[0x498]) = v11;
  v12 = STACK[0x5C0];
  if (v9)
    v12 = STACK[0x530];
  LODWORD(STACK[0x428]) = v12;
  v13 = STACK[0x500];
  if (v9)
    v13 = STACK[0x37C];
  LODWORD(STACK[0x510]) = v13;
  v14 = LODWORD(STACK[0x668]) == -961433487;
  v15 = STACK[0x3DC];
  if (LODWORD(STACK[0x668]) == -961433487)
    v15 = STACK[0x3D8];
  LODWORD(STACK[0x478]) = v15;
  v16 = STACK[0x410];
  if (!v14)
    v16 = STACK[0x3F0];
  LODWORD(STACK[0x438]) = v16;
  v17 = *(unsigned __int8 *)(STACK[0x688] + v7);
  v18 = 1364176807 * (((2 * v17) & 0xFFFFFFE3) + (v17 ^ 0x7FC6F6F1))
      - ((-1566613682 * (((2 * v17) & 0xFFFFFFE3) + (v17 ^ 0x7FC6F6F1)) + 1510888338) & ((5 * (v8 ^ 0x353)) ^ 0x94BF47FF))
      - 144258374;
  v19 = ((2 * (v7 + (a6 ^ 0x92880C80 ^ v18))) & 0x77FEBFCE) + ((v7 + (a6 ^ 0x92880C80 ^ v18)) ^ 0xBBFF5FE7);
  v20 = (((v19 + 1140891673) >> 16) ^ 0x3F3F6FFF) + v19 + (((v19 + 1140891673) >> 15) & 0xDFFE);
  v21 = (((v20 + 79769626) >> 8) ^ 0xF7F33CF9) + v20 + (((v20 + 79769626) >> 7) & 0x1E679F2);
  v22 = (a1 ^ v6 ^ (v21 + 214823713)) - 608310368 - ((2 * (a1 ^ v6 ^ (v21 + 214823713))) & 0xB77BD740);
  v23 = v21 - ((2 * v21 + 983588870) & 0x501BBFAA) - 983691304;
  v24 = ((2 * (v7 + (v18 ^ 0x62527F24 ^ v23))) & 0xCE76BDCE) + ((v7 + (v18 ^ 0x62527F24 ^ v23)) ^ 0x673B5EE7);
  v25 = (((v24 - 1731944167) >> 16) ^ 0x97FFF5FA) + v24 + ((2 * ((v24 - 1731944167) >> 16)) & 0x1EBF4);
  v26 = (((v25 + 12888863) >> 8) ^ 0x59FF3EEF) + v25 + (((v25 + 12888863) >> 7) & 0x1FE7DDE);
  v27 = ((v26 - 1497011152) ^ v22 ^ 0xDBBDEBA0)
      - 1580791855
      - 2 * (((v26 - 1497011152) ^ v22 ^ 0xDBBDEBA0) & 0x21C707DF ^ ((v26 - 1497011152) ^ v22) & 0xE);
  v28 = v26 - ((2 * v26 + 244273700) & 0x18D84144) + 1135856052;
  v29 = ((2 * (v7 + (v18 ^ 0x46338053 ^ v28))) & 0x5772FFE6) + ((v7 + (v18 ^ 0x46338053 ^ v28)) ^ 0x2BB97FF3);
  v30 = (((v29 - 733577203) >> 16) ^ 0xA36DCBFD)
      + v29
      + ((2 * ((v29 - 733577203) >> 16)) & 0x197FA);
  v31 = (((v30 + 819508240) >> 8) ^ 0xBF7FAC77) + v30 + (((v30 + 819508240) >> 7) & 0xFF58EE);
  return ((uint64_t (*)(_QWORD))((char *)*(&off_100260750 + ((1148 * (v7 + 1 > 0xF)) ^ v8)) - 4))(((v31 + 1901660057) ^ v27 ^ 0xA1C707D1)+ v6- 2 * (((v31 + 1901660057) ^ v27 ^ 0xA1C707D1) & (v6 + 8) ^ ((v31 + 1901660057) ^ v27) & 8));
}

uint64_t sub_10010CF18(int a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  char v44;
  BOOL v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  _BOOL4 v72;

  v6 = (((a3 + 1003346128) >> 8) ^ 0x7AADD7B) + a3 + (((a3 + 1003346128) >> 7) & 0x155BAF6);
  v7 = v6 + (((v6 + 874707797) >> 5) ^ 0x71084186) - (((v6 + 874707797) >> 4) & 0xDEF7CF2) + 1;
  v8 = v7 - ((2 * v7 - 2043317348) & 0xEB224994) + 950787736;
  v9 = ((2 * ((v8 ^ 0x759124CA) - 1879573490)) & 0xD9F279DC) + (((v8 ^ 0x759124CA) - 1879573490) ^ 0x6CF93CEE);
  v10 = (((v9 - 1828273390) >> 10) ^ 0xDDF42E9C) + v9 + (((v9 - 1828273390) >> 9) & 0x685D38);
  v11 = ((v10 - 1257073546) & 0xFBFEFBFC) + v10 + (((v10 - 1257073546) >> 1) ^ 0x7DFF7DFE);
  v12 = v11 - ((2 * v11 + 1847995632) & 0xEE877044) + 777440922;
  v13 = ((2 * ((v12 ^ 0xF743B822) + 1287124013)) & 0xCFDAFFEC) + (((v12 ^ 0xF743B822) + 1287124013) ^ 0x67ED7FF6);
  v14 = v13 + (((v13 - 1743618038) >> 13) ^ 0x3886001) - (((v13 - 1743618038) >> 12) & 0xF3FFC);
  v15 = v14 + (((v14 - 1802887159) >> 6) ^ 0x80584210) - (((v14 - 1802887159) >> 5) & 0x74F7BDE) + 2;
  v16 = v15 - ((2 * v15 + 677624814) & 0x768DABAE) - 814173234;
  v17 = ((2 * ((v16 ^ 0xBB46D5D7) - 1282870125)) & 0xFDC4FBDE) + (((v16 ^ 0xBB46D5D7) - 1282870125) ^ 0x7EE27DEF);
  v18 = (((v17 - 2128772591) >> 8) ^ 0x75FBF6EB) + v17 + (((v17 - 2128772591) >> 7) & 0x1F7EDD6);
  v19 = (((v18 + 186747686) >> 2) ^ 0x75EEFF1F) + v18 + (((v18 + 186747686) >> 1) & 0x6BDDFE3E);
  v20 = v19 - ((2 * v19 + 711268366) & 0x5D4C5246) - 1009208022;
  v21 = ((2 * ((v20 ^ 0x2EA62923) + 707258702)) & 0x7FFFFBBE) + (((v20 ^ 0x2EA62923) + 707258702) ^ 0x3FFFFDDF);
  v22 = (((v21 - 1073741279) >> 13) ^ 0x7EADB95F)
      + v21
      + (((v21 - 1073741279) >> 12) & 0xB72BE);
  v23 = (((v22 + 1095911618) >> 3) ^ 0x7BE6DF19) + v22 + (((v22 + 1095911618) >> 2) & 0x37CDBE32);
  v24 = v23 - ((2 * v23 + 181850962) & 0x3093C26A) + 1572162270;
  v25 = (v24 ^ 0x13C6B7BF) + ((v24 >> 11) ^ 0xE278D6) + ((2 * (v24 >> 11)) ^ 0xFFFB0E53) - 14680063;
  v26 = (((((2 * v25) & 0x6FEDF7A6) + (v25 ^ 0x37F6FBD3) - 938933203) >> 5) ^ 0xDD57BDFB)
      + ((2 * v25) & 0x6FEDF7A6)
      + (v25 ^ 0x37F6FBD3)
      + (((((2 * v25) & 0x6FEDF7A6) + (v25 ^ 0x37F6FBD3) - 938933203) >> 4) & 0xAAF7BF6);
  v27 = v26 - ((2 * v26 - 714961820) & 0xDD1F4AEC) - 650056792;
  v28 = (v27 ^ 0xDAD3718E) + ((v27 >> 12) ^ 0xE81BB137) + 401204225 + ((2 * (v27 >> 12)) & 0x13C7FE ^ 0xFFECBD91);
  v29 = (((((2 * v28) & 0xF7CFADEE) + (v28 ^ 0xFBE7D6F7) + 68692233) >> 7) ^ 0x6FB7FFFD)
      + ((2 * v28) & 0xF7CFADEE)
      + (v28 ^ 0xFBE7D6F7)
      + (((((2 * v28) & 0xF7CFADEE) + (v28 ^ 0xFBE7D6F7) + 68692233) >> 6) & 0x36FFFFA);
  v30 = v29 - ((2 * v29 + 683692568) & 0x2A034790) + 694275284;
  v31 = ((2 * ((v30 ^ 0x9501A3C8) - 2045107421)) & 0x76F7FDBA) + (((v30 ^ 0x9501A3C8) - 2045107421) ^ 0x3B7BFEDD);
  v32 = (((v31 - 997981917) >> 11) ^ 0xEF7D7B9A) + v31 + (((v31 - 997981917) >> 10) & 0x3AF734);
  v33 = v32 + (((v32 - 720992887) >> 8) ^ 0x100C00) - (((v32 - 720992887) >> 7) & 0x1DFE7FE);
  v34 = v33 + 1 - 2 * ((v33 + 1425439113) & 0x546F761E ^ (v33 + 1) & 4) - 1452937310;
  v35 = (v34 ^ 0xEEFFF849) + ((v34 >> 8) ^ 0xA47F7FC) + ((v34 >> 7) & 0xADEFF6 ^ 0xFF72100F) - 178849795;
  v36 = (((((2 * v35) & 0x3F77F26C) + (v35 ^ 0x9FBBF936) + 1615070922) >> 8) ^ 0x5FFFE1FA)
      + ((2 * v35) & 0x3F77F26C)
      + (v35 ^ 0x9FBBF936)
      + (((((2 * v35) & 0x3F77F26C) + (v35 ^ 0x9FBBF936) + 1615070922) >> 7) & 0x1FFC3F4);
  v37 = v16 ^ v4 ^ v27 ^ (v36 - ((2 * v36 + 8931744) & 0xBAEC945A) + 1572499197);
  v38 = (((2 * (v37 & 7 ^ 1)) | 0x89C334EC) - (v37 & 7 ^ 1) + 991847818) ^ 0xC2739235;
  v39 = ((2 * v38) | 0xAE88A7DA) - v38 + 683387923;
  v40 = (-v37 & 7) - ((-2 * v37) & 4) - 137147974;
  LODWORD(STACK[0x37C]) = v39;
  v41 = v39 ^ 0x819CAA2D;
  if ((v39 ^ 0x819CAA2D) == 0x504AF182)
    v42 = 0;
  else
    v42 = 255;
  LODWORD(STACK[0x3A0]) = v40;
  STACK[0x3C8] = v40 ^ 0xF7D349BA;
  LODWORD(STACK[0x3DC]) = v41;
  v43 = (v42 << (v40 ^ 0xBA)) - ((2 * (v42 << (v40 ^ 0xBA))) & 0xDC70D3C4) + 1849190882;
  v44 = (((_BYTE)v42 << (v40 ^ 0xBA)) - ((2 * ((_BYTE)v42 << (v40 ^ 0xBA))) & 0xC4) - 30) ^ 0x1D;
  if (v41 == 1347088770)
    v44 = 0;
  v45 = LODWORD(STACK[0x660]) == -768964959;
  v46 = STACK[0x670];
  if (LODWORD(STACK[0x660]) == -768964959)
    v46 = STACK[0x464];
  LODWORD(STACK[0x480]) = v46;
  v47 = STACK[0x640];
  if (!v45)
    v47 = STACK[0x350];
  LODWORD(STACK[0x470]) = v47;
  v48 = STACK[0x5F0];
  if (LODWORD(STACK[0x668]) != -961433487)
    v48 = STACK[0x4B0];
  LODWORD(STACK[0x464]) = v48;
  v49 = v12 ^ v3 ^ v24;
  v50 = v8 ^ a1 ^ v20 ^ v30;
  v51 = v49 ^ v34;
  LODWORD(STACK[0x3EC]) = (v50 & 0xFFFFFF80 ^ 0xC3991600)
                        + (v50 & 0x5A10B800 ^ 0x1800A823)
                        - ((v50 & 0xFFFFFF80 ^ 0xC3991600) & 0x5A10B800);
  v52 = ((v50 & 0x7B ^ 0x1716AC5E) - (v50 & 4)) ^ 0x8B3DD38D;
  v53 = ((v52 | 0xC86BD1C5) - (v52 | 0x37942E3A) + 932458042) ^ 0x5440AE0F;
  LODWORD(STACK[0x640]) = v37;
  v54 = ((v37 & 0xFFFFFFF8 ^ 0xE6C89096) + (v37 & 0x86837C48 ^ 0x36C49) - ((v37 & 0xFFFFFFF8 ^ 0xE6C89096) & 0x86837C4A)) ^ 0xC5C0487C;
  LODWORD(STACK[0x4B0]) = ((2 * v54) | 0x82359154) - v54;
  v55 = (v43 & 0xBC ^ 0xCD8D439C) + (v43 ^ 0x2B062) - ((v43 ^ 0x2B062) & 0x290BC);
  LODWORD(STACK[0x678]) = (33686018 * (v55 ^ 0xCD8D633C)) & 0x7553D8E2;
  LODWORD(STACK[0x4F0]) = 16843009 * (v55 ^ 0xCD8D633C) + 984214641;
  v56 = ((1593835520 * (v55 ^ 0xCD8D633C) - (((v55 << 30) - ((v55 ^ 0xCD8D633C) << 25)) & 0x4E000000) + 661633956) ^ 0x276FBBA4) & (v49 ^ v34 ^ 0x6E9D6C30);
  LODWORD(STACK[0x500]) = v56 - ((2 * v56) & 0x58000000) + 741683604;
  LODWORD(STACK[0x530]) = v50 ^ 0xDD87C213;
  v57 = ((v44 & (v50 ^ 0x13)) - ((2 * (v44 & (v50 ^ 0x13))) & 0xB0) + 88) ^ 0x23;
  LODWORD(STACK[0x4A0]) = ((2 * v57) | 0x59B43690) - v57 - 752491336;
  v58 = v50 ^ (v50 >> 8) ^ HIWORD(v50) ^ 0xEA12148D;
  v59 = ((v58 & 0x25 ^ 0xDAD1A224) + (v58 & 0xDA ^ 0x99) - 1) ^ 0xD9EBB6B5;
  LODWORD(STACK[0x5F0]) = v50;
  v60 = (v59 - ((2 * v59) & 0x4028FC) - 2002684802) ^ HIBYTE(v50) ^ 0x8B9B60E1;
  v61 = 16843009 * v60 - ((33686018 * v60) & 0x22A7445A) - 1856789971;
  v62 = 0xE668D621 % STACK[0x680];
  v63 = v51 ^ (v51 >> 8) ^ HIWORD(v51) ^ 0x43A9FC43;
  LODWORD(STACK[0x5C0]) = v51;
  v64 = (((v63 & 0xFD ^ 0xB7FCEEA8) & 0xADD ^ 0x31820A45)
       + (((v63 & 0xFD ^ 0xB7FCEEA8) & 0x422 | v63 & 2) ^ 0x4D4521)
       - 1) ^ HIBYTE(v51) ^ 0x31CF41B6;
  v65 = (*(_QWORD *)(STACK[0xB70] + 8 * v62) ^ 0xC9C9C9C9C9C9C9C9) + 2103980986;
  v66 = 16843009 * v64 - ((33686018 * v64) & 0x2BE3F53A) - 1779303779;
  v67 = (*(_QWORD *)(STACK[0xB70]
                   + 8
                   * (((v65 ^ 0x7FFBFEDBBAF7B7BFLL) - 0x7FFBFEDBBAF7B7BFLL + ((2 * v65) & 0xFFF7FDB775EF6F7ELL))
                    % STACK[0x5A0])) ^ 0xC9C9C9C9C9C9C9C9)
      + 815561086;
  v68 = (*(_QWORD *)(STACK[0xB70]
                   + 8
                   * (((v67 ^ 0xC5FDFFE2B53ACDFFLL) + 0x3A02001D4AC53201 + ((2 * v67) & 0x8BFBFFC56A759BFELL))
                    % STACK[0x5A0])) ^ 0xC9C9C9C9C9C9C9C9)
      + 925802721;
  v69 = *(_QWORD *)(STACK[0xB70]
                  + 8
                  * (((v68 ^ 0xA5EDB77DC587BFBCLL) + 0x5A1248823A784044 + ((2 * v68) & 0x4BDB6EFB8B0F7F78))
                   % STACK[0x5A0]));
  v70 = 2 * v69 - ((4 * v69) & 0x82A3FA21813DA9DCLL) + 0x4151FD10C09ED4EFLL;
  LODWORD(v69) = (v69
                + (v70 & 0x9393939393939392 ^ 0x2362B51A901298C7)
                + ((2 * v70) & 0x2301272306272724 ^ 0xFDFEDDDEFFDADEFBLL)
                - 0x58A95A40189C30FFLL)
               % STACK[0x5A0];
  v71 = ((v69 - ((2 * v69) & 0xA71E7054) - 745588694) ^ 0xAC70639E)
      + 1348416194
      + ((2 * (v69 - ((2 * v69) & 0xA71E7054) - 745588694)) & 0xFFFEB768 ^ 0xA71E3040);
  LODWORD(STACK[0x2E8]) = 33686018 * v53;
  LODWORD(STACK[0x3D8]) = (33686018 * v53) & 0xC6C3E736;
  LODWORD(STACK[0x2E0]) = v53;
  LODWORD(STACK[0x3C0]) = 16843009 * v53 + 1667363739;
  LODWORD(STACK[0x410]) = v61;
  LODWORD(STACK[0x3F0]) = v66;
  LODWORD(STACK[0x670]) = v66 ^ v61;
  v72 = v71 < 0xD05E8E76;
  if (v71 >= 0xD05E8E76)
    v72 = v71 > 0xD05E8E77;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)*(&off_100260750 + ((343 * !v72) ^ v5)) - 4))(3495857782, 0xF4DAB4D8B0D3CEELL);
}

void sub_10010E350()
{
  JUMPOUT(0x10010DD10);
}

uint64_t sub_10010E358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  int v9;

  v8 = STACK[0x5B0];
  if (LODWORD(STACK[0x660]) != -768964959)
    v8 = STACK[0x580];
  LODWORD(STACK[0x580]) = v8;
  LODWORD(STACK[0x5B0]) = LODWORD(STACK[0x5E0]) ^ 0x495762DF;
  LODWORD(STACK[0x340]) = LODWORD(STACK[0x3C0]) - LODWORD(STACK[0x3D8]);
  v9 = LODWORD(STACK[0x4F0]) - LODWORD(STACK[0x678]);
  LODWORD(STACK[0x4F0]) = v9;
  LODWORD(STACK[0x3D8]) = LODWORD(STACK[0x4A0]) ^ v9;
  LODWORD(STACK[0x298]) = LODWORD(STACK[0x3F0]) ^ 0xE5C66371;
  STACK[0x678] = (a7 + 1110836179) & 0xBDC9FBFF;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((1685 * (v7 - 1487072877 >= STACK[0x680])) ^ a7))
                            - 8))();
}

void sub_10010EAE4()
{
  JUMPOUT(0x10010E468);
}

uint64_t sub_10010EB00@<X0>(int a1@<W8>)
{
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * a1) - 12))(4294967189, 42);
}

void sub_10010EBC4()
{
  JUMPOUT(0x10010EB78);
}

void sub_10010EBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v8 = (((v7 & 0xF0) >> 4) ^ 9 | v7 ^ 0xFFFFFF95)
     - ((2 * (((v7 & 0xF0) >> 4) ^ 9 | v7 ^ 0xFFFFFF95)) & 0x6A)
     - 75;
  v9 = (v8 >> (((v6 + 7) ^ 0xCF) & 0xF6)) ^ 0x2D | v8 ^ 0xFFFFFFB5;
  v10 = ((v9 & 1 | (((v9 - 2 * (v9 & 1) + 3) & 2) == 0)) == 0) | 0xFFFFFFC0;
  sub_1000B6114(a1, a2, a3, a4, a5, a6, -42022* (((2 * ((((2 * v10) | 0xFFFFFFD8) - v10 - 108) ^ 0x25)) & 0xEE)+ ((((2 * v10) | 0xFFFFFFD8) - v10 - 108) ^ 0x2261695A))+ 2118165674);
}

uint64_t sub_10010EC84()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  v3 = IOObjectRelease(STACK[0x734]);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_100260750
                                                    + (((*(_DWORD *)(v1 + 3308) != v0) * (((v2 - 1037) | 0x100) ^ 0x3C2)) | (v2 - 1037) | 0x100))
                                          - ((((v2 - 1037) | 0x100) + 112) | 0x208u)
                                          + 1588))(v3);
}

uint64_t sub_10010ECE0(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;

  *(_BYTE *)(v11 + ((int)a2 + v8) % a1) ^= *(_BYTE *)(a2 + v12 + a6) ^ v13;
  v14 = (((a2 + 1 - v7) | (unint64_t)(v7 - (a2 + 1))) >> (v10 ^ a7)) & 1;
  return (*(uint64_t (**)(void))(v9 + 8 * ((v14 | (4 * v14)) ^ (v8 + (int)v7 + 265))))();
}

uint64_t sub_10010ED44(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v7 + ((int)a5 - 1544884126) % a1) ^= *(_BYTE *)(a5 + v8 - 1544884126) ^ 0xE6;
  return (*(uint64_t (**)(void))(v5 + 8 * ((1912 * (a5 + 1 == a4 + 64)) ^ v6)))();
}

uint64_t sub_10010EDAC(unsigned int a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v6 + ((int)v5 - 2139391791) % a1) ^= *(_BYTE *)(v5 + v7 + (v3 - 4) - 2139392764) ^ 0x2C;
  return (*(uint64_t (**)(void))(v4 + 8 * ((1504 * (v5 + 1 != a3 + 319)) ^ v3)))();
}

uint64_t sub_10010EE10@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t (*v17)(void);

  v8 = (v4 - 1339267178) % a1;
  v9 = (v4 - 1339267185) % a1;
  v10 = (v4 - 1339267215) % a1;
  v11 = *(unsigned __int8 *)(v7 + v10);
  HIDWORD(v13) = -(int)v10 ^ v11 ^ *(unsigned __int8 *)(a2 + (v10 & 0xF)) ^ *(unsigned __int8 *)(v5 + (v10 & 0xF) + 2) ^ *(unsigned __int8 *)(v6 + (v10 & 0xF) + 2);
  LODWORD(v13) = ((105 * (v10 & 0xF)) ^ v11 ^ byte_100215930[v10 & 0xF] ^ byte_100217EC0[v10 & 0xF] ^ byte_10021B1D0[v10 & 0xF]) << 24;
  v12 = v13 >> 26;
  v14 = (v4 - 1339267355) % a1;
  HIDWORD(v13) = *(unsigned __int8 *)(a2 + (v9 & 0xF)) ^ *(unsigned __int8 *)(v7 + v9) ^ *(unsigned __int8 *)(v5 + (v9 & 0xF) + 2) ^ *(unsigned __int8 *)(v6 + (v9 & 0xF) + 2) ^ (87 * (v9 & 0xF));
  LODWORD(v13) = HIDWORD(v13) << 24;
  v15 = v13 >> 31;
  LODWORD(v10) = byte_100215930[v14 & 0xF] ^ *(unsigned __int8 *)(v7 + v14) ^ byte_100217EC0[v14 & 0xF];
  v16 = byte_10021B1D0[v14 & 0xF];
  HIDWORD(v13) = v10 ^ v14 ^ v16;
  LODWORD(v13) = (v10 ^ (105 * (((v4 - 1339267355) % a1) & 0xF)) ^ v16) << 24;
  v17 = (uint64_t (*)(void))*(&off_100260750 + ((28 * (v4 + 1 != v3 + 256)) ^ v2));
  *(_BYTE *)(v7 + v8) ^= (105 * (v8 & 0xF)) ^ (87 * (v8 & 0xF)) ^ *(_BYTE *)(a2 + (v8 & 0xF)) ^ *(_BYTE *)(v5 + (v8 & 0xF) + 2) ^ *(_BYTE *)(v6 + (v8 & 0xF) + 2) ^ (v15 + (((v2 + 68) | 0xC0) ^ 0xD8) - ((2 * v15) & 0x12)) ^ (v12 - ((2 * v12) & 0x48) - 92) ^ byte_100215930[v8 & 0xF] ^ byte_100217EC0[v8 & 0xF] ^ byte_10021B1D0[v8 & 0xF] ^ ((v13 >> 27) - ((2 * (v13 >> 27)) & 0x90) - 56) ^ 0x65;
  return v17();
}

uint64_t sub_10010F000()
{
  int v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  int v6;

  v3 = STACK[0x940];
  v4 = STACK[0x788];
  v5 = ((v0 ^ 0x4E4) + 202138569) & 0xF3F39FEF;
  STACK[0x8A0] -= 448;
  *(_QWORD *)(v3 + 64) = 0x6205527E24145F56;
  *(_QWORD *)(v3 + 72) = 0x6396BFB8EB1E3730;
  *(_QWORD *)(v3 + 80) = 0x9C69404714E1C8CFLL;
  *(_QWORD *)(v3 + 92) = 0xEA2EC3AA4C3E9D2CLL;
  STACK[0x9A8] = v5 + *(_QWORD *)(v2 + 8 * (v0 ^ 0x4E4)) - 1010;
  STACK[0xAA0] = v3;
  LODWORD(STACK[0x894]) = v4;
  STACK[0x710] = v1;
  v6 = ((2 * ((v5 - 1811858719) & 0x6BFEC7FD ^ 0x69A) - 52) & (2 * *(_DWORD *)(v3 + 68)) ^ 0x78)
     + (*(_DWORD *)(v3 + 68) & 0x3F ^ 0xD936EBC3);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)((1310
                                               * ((((v4 ^ 0xEEC1CB6E) + 650712067 + v6) ^ 0xBBDF6D6A)
                                                + 1142985302
                                                + ((2 * ((v4 ^ 0xEEC1CB6E) + 650712067 + v6)) & 0x77BEDAD4) < 0xFFFFFFC0)) ^ v5))
                            - 8))();
}

uint64_t sub_10010F018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unint64_t v4;
  int v5;
  uint64_t v6;

  STACK[0x8A0] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6
                                                                                 + 8
                                                                                 * (((((v3 - 1233406449) & 0x49844EDD)
                                                                                    + 293)
                                                                                   * ((v5 - 546355592) < 0x7D1)) ^ v3))
                                                                     - 8))(a1, a2, a3, 4294924389);
}

uint64_t sub_10010F068()
{
  return sub_10013A198();
}

uint64_t sub_10010F088()
{
  unint64_t v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;

  v10 = v3 < v4;
  *(_BYTE *)(v6 + v8 - 0x72D381F2486801FELL) = 15 * (v1 ^ 0x3F) + *(_BYTE *)(v5 + v2 - 0x29F27ED6AE2D377BLL) - 85;
  if (v10 == v7 - 0x4FB80415D6DBB925 < v0)
    v10 = v7 - 0x4FB80415D6DBB925 < v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((111 * !v10) ^ v1)) - 4))();
}

void sub_10010F130(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;

  LODWORD(STACK[0x9EC]) = a2 + v5;
  STACK[0x840] = (a5 + 1508) + *(_QWORD *)(a1 + 8 * a5) - 1571;
  JUMPOUT(0x10010F164);
}

uint64_t sub_10010F1EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unsigned __int8 a5@<W8>)
{
  uint64_t v5;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5
                                                                                 + 8
                                                                                 * ((1888
                                                                                   * (a5 == (a4 ^ 0x5C))) ^ a4))
                                                                     - ((a4 - 278) ^ 0x297)))(a1, a2, a3, 1548403731);
}

uint64_t sub_10010F230(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v13 = (unsigned __int8 *)(v7 + a1 + a4);
  v14 = ((((v13[1] ^ v11) - ((2 * (v13[1] ^ v11)) & 0xE6)) << 8) + 1552577280) ^ 0x5C8A7300;
  v15 = (v14 - 697038554 - ((2 * v14) & 0x2CE81200)) ^ 0xD6740926 | ((*v13 ^ v11)
                                                                   + ((4 * v10) ^ 0xD4F04B4)
                                                                   - ((2 * (*v13 ^ v11)) & 0x1F0)) ^ 0xD4F0EF8;
  v16 = ((((v13[2] ^ v11) - (v12 & (2 * (v13[2] ^ v11)))) << 16) + 1446051840) ^ 0x56310000;
  v17 = (v15 - 1288618852 - ((2 * v15) & 0x66627938)) ^ 0xB3313C9C | (v16 - 1102261865 - ((2 * v16) & 0x7C980000)) ^ 0xBE4CD197;
  LODWORD(v13) = ((((v13[3] ^ v11) - ((2 * (v13[3] ^ v11)) & 0x6C)) << 24) + 905969664) ^ 0x36000000;
  LODWORD(v13) = (v17 + 770999828 - ((2 * v17) & 0x5BE90C28)) ^ 0x2DF48614 | ((_DWORD)v13
                                                                            - 1164756354
                                                                            - ((2 * (_DWORD)v13) & 0x74000000)) ^ 0xBA933A7E;
  *(_DWORD *)(a2 + ((a4 + v9) & 0xFFFFFFFC)) = (_DWORD)v13 + v8 - ((2 * (_DWORD)v13) & 0xDC1928E2);
  return ((uint64_t (*)(void))(*(_QWORD *)(a7 + 8 * ((1626 * (a4 + 4 + v9 < 0x40)) ^ v10)) - 4))();
}

uint64_t sub_10010F3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;
  int v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(a7 + 8 * ((615 * ((v9 + 1 + v7) < 0x10)) ^ v8)) - 4))();
}

uint64_t sub_10010F5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;
  int v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(a7
                                        + 8
                                        * (((8 * ((v8 + 1 + v7) < 0x20)) | (((v8 + 1 + v7) < 0x20) << 6)) ^ v9))
                            - 4))();
}

uint64_t sub_10010F808@<X0>(uint64_t a1@<X6>, int a2@<W8>)
{
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((111 * ((v3 + 1 + v2) < 0x30)) ^ a2)) - 8))();
}

uint64_t sub_10010F994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(a7
                                        + 8
                                        * (((2 * ((v8 + 1 + v7) < 0x40)) | (32
                                                                                        * ((v8 + 1 + v7) < 0x40))) ^ a5))
                            - 12))();
}

uint64_t sub_10010FB4C@<X0>(int a1@<W2>, int a2@<W3>, uint64_t a3@<X6>, int a4@<W8>)
{
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  LODWORD(STACK[0x7EC]) = a1;
  LODWORD(STACK[0x700]) = a2;
  LODWORD(STACK[0x7B4]) = v6;
  LODWORD(STACK[0x804]) = a4;
  v8 = v4[19];
  v4[18] = (v4[18] ^ v5) + (a1 ^ v5) + v5 - (v7 & (2 * ((v4[18] ^ v5) + (a1 ^ v5))));
  v4[19] = (v8 ^ v5) + (v6 ^ v5) + v5 - (v7 & (2 * ((v8 ^ v5) + (v6 ^ v5))));
  v9 = v4[21];
  v10 = (v4[20] ^ v5) + (LODWORD(STACK[0x700]) ^ v5);
  v4[20] = v10 + v5 - (v7 & (2 * v10));
  v4[21] = (v9 ^ v5) + (LODWORD(STACK[0x804]) ^ v5) + v5 - (v7 & (2 * ((v9 ^ v5) + (LODWORD(STACK[0x804]) ^ v5))));
  STACK[0x8A0] -= 320;
  return ((uint64_t (*)(uint64_t, uint64_t))STACK[0x840])(a3, 413486843);
}

uint64_t sub_1001104F8()
{
  uint64_t v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((53
                                          * (((LODWORD(STACK[0x690]) + 72) ^ (LODWORD(STACK[0x9EC])
                                                                                             - 526565115 > (LODWORD(STACK[0x894]) ^ 0xEEC1CB6E))) & 1)) ^ (LODWORD(STACK[0x690]) - 132)))
                            - 12))();
}

uint64_t sub_10011073C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v10 = ((_BYTE)a2 + (_BYTE)a5) & 0xF;
  *(_BYTE *)(STACK[0xAA0] + 2087596544 + (((v7 - 516) | 0x2Au) ^ 0xFFFFFFFF8391CE3BLL)) = *(_BYTE *)(STACK[0x710] + (a2 + a5)) ^ *(_BYTE *)(a7 + v10) ^ *(_BYTE *)(v10 + v9 + 3) ^ byte_10023E8A0[v10 + 2] ^ (25 * v10) ^ v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * v7) - 8))();
}

uint64_t sub_1001107EC(uint64_t a1, int8x16_t a2, int8x16_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  int8x16_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;

  *v9 = vaddq_s8(vsubq_s8(*(int8x16_t *)(v11 + (a5 + a9)), vandq_s8(vaddq_s8(*(int8x16_t *)(v11 + (a5 + a9)), *(int8x16_t *)(v11 + (a5 + a9))), a2)), a3);
  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v14
                                                              + 8
                                                              * (((((v10 - 1687) ^ v12) == 16) * v13) ^ (v10 - 820)))
                                                  - 12))(a1, (a5 + 64));
}

uint64_t sub_10011084C(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;
  _BOOL4 v5;

  v5 = a3 - 7203682 < (a2 + 49639498);
  if (a2 + 49639498 < (v3 - 420441109) != (a3 - 7203682) < 0x238629D2)
    v5 = a2 + 49639498 < (v3 - 420441109);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((957 * v5) ^ (v3 - 1016435003)))
                            - ((v3 - 1016434458) ^ 0x6C5)))();
}

uint64_t sub_10011086C(uint64_t a1, int a2, int a3)
{
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((491
                                          * (((LODWORD(STACK[0x690]) - 706) | 0x244u) + a2 - 526565179 - 1615 < (LODWORD(STACK[0x690]) ^ 0x46C ^ a3 ^ 0xEEC1C9CF))) ^ (LODWORD(STACK[0x690]) - 513)))
                            - 12))();
}

uint64_t sub_100110884()
{
  uint64_t v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((74
                                          * ((char)((LOBYTE(STACK[0x690]) - 17) ^ *(_DWORD *)(STACK[0x720] + 96) ^ 0xBD) < (char)(((LOBYTE(STACK[0x690]) + 85) | 0x48) ^ (LOBYTE(STACK[0x690]) - 12)))) ^ (LODWORD(STACK[0x690]) - 17)))
                            - 8))();
}

uint64_t sub_1001108DC()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8
                                             * (int)((((v0 + 2001053315) & 0x88BA5EDF ^ 0x3A4) * (v1 == 168)) ^ v0))
                            - 4))();
}

uint64_t sub_100110918@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((*(_DWORD *)(a1 + 92) != (((v1 - 297) | 0x68C) ^ 0x4C3E9BD1))
                                          * (((v1 + 286) | 0x445) ^ 0x377)) ^ v1))
                            - 4))();
}

uint64_t sub_100110968@<X0>(uint64_t a1@<X8>)
{
  int v1;
  _BYTE *v2;
  int v3;
  int v4;
  unsigned int v5;
  _BOOL4 v6;
  _BOOL4 v7;

  v2 = (_BYTE *)STACK[0x920];
  v3 = v1 - 1379;
  v4 = *(_DWORD *)(a1 + 72);
  *v2 = HIBYTE(v4) ^ 0x15;
  v2[1] = unk_100215931 ^ BYTE2(v4) ^ unk_100217EC1 ^ 0x69 ^ unk_10021B1D1 ^ 0x5B;
  v2[2] = BYTE1(v4) ^ 0xD2 ^ unk_100215932 ^ unk_100217EC2 ^ unk_10021B1D2 ^ 0x14;
  v2[3] = v4 ^ 0x3B ^ unk_100215933 ^ unk_100217EC3 ^ unk_10021B1D3 ^ 0x31;
  v5 = *(_DWORD *)(a1 + 92) + 643329409;
  v6 = v5 < 0x72970A9D;
  v7 = v5 > 0x72970AA1;
  if (v6)
    v7 = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)*(&off_100260750 + ((564 * v7) ^ v3)) - 4))(105, 140, 0x594994671AE9EDF7, 91, 0x594994671AE9EDF8, 20, 0x594994671AE9EDF9, 49);
}

void sub_100110B50()
{
  JUMPOUT(0x100110A10);
}

uint64_t sub_100110B58()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((((v1 - 1719) | 0x6C8) ^ 0x668) * (v0 == 171)) ^ (v1 - 1362)))
                            - 4))();
}

uint64_t sub_100110B8C@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((((*(_DWORD *)(a1 + 92) == 1279171868) ^ (v1 + 1)) & 1)
                                          * (((v1 + 313524382) | 0x21400505) ^ 0x33F00428)) ^ v1))
                            - 4))();
}

uint64_t sub_100110BE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  _BYTE *v5;
  int v6;
  unsigned int v7;
  _BOOL4 v8;
  _BOOL4 v9;

  v4 = 2 * (v3 ^ (v2 + 912));
  v5 = (_BYTE *)STACK[0x920];
  v6 = *(_DWORD *)(a2 + 72);
  *v5 = v6 ^ 0xA8;
  v5[1] = unk_100215921 ^ BYTE1(v6) ^ unk_10023AD74 ^ 0x1F ^ 0x14;
  v5[2] = BYTE2(v6) ^ 0x32 ^ unk_100215922 ^ unk_10023AD75 ^ 0x4B;
  v5[3] = HIBYTE(v6) ^ 0x4B ^ unk_100215923 ^ unk_10023AD76 ^ 0xAF;
  v7 = *(_DWORD *)(a2 + 92) + 1049204722;
  v8 = v7 < 0x8AC8350E;
  if (v8)
    v9 = v8;
  else
    v9 = v7 > 0x8AC83512;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((1405 * v9) ^ v4)) - 4))();
}

void sub_100110DD8()
{
  JUMPOUT(0x100110C60);
}

uint64_t sub_100110DE0()
{
  return ((uint64_t (*)(void))STACK[0xA38])();
}

uint64_t sub_100110DF0()
{
  int v0;
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((49
                                * (((9 * (v0 ^ 0xCE)) ^ ((((v0 - 1052) ^ 0xFFFFFD4E)
                                                                                          + (unint64_t)(v0 - 1725)) >> 32)) & 1)) ^ (v0 - 568))))();
}

void sub_100110E60(uint64_t a1, char a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_BYTE *)(STACK[0x718] + a1) ^= *(_BYTE *)(v4 + a1) ^ a2 ^ v2 ^ v3;
  JUMPOUT(0x100110E20);
}

uint64_t sub_100110E88()
{
  int v0;
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((78
                                * ((*(unsigned int *)(STACK[0x758] + 92) | ((unint64_t)(*(_DWORD *)(STACK[0x758] + 92) < 0x4C3E9D1Cu) << 32))
                                 + 396797075 == ((v0 - 409) ^ 0x63E5449BLL))) ^ (v0 - 550))))();
}

uint64_t sub_100110EF8()
{
  STACK[0x8A0] -= 32;
  return ((uint64_t (*)(void))STACK[0x780])();
}

uint64_t sub_100110F0C()
{
  int v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  int v5;

  v2 = STACK[0x848];
  v3 = STACK[0xA70] - 0x40AF9B25784C106DLL;
  STACK[0xB40] = v3;
  STACK[0xB48] = v2;
  STACK[0xB38] = v3;
  STACK[0xB50] = v3;
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  v5 = !v4;
  return (*(uint64_t (**)(void))(v1 + 8 * ((1394 * v5) ^ (v0 - 1143))))();
}

uint64_t sub_100110F5C()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;
  void *v4;
  void *v5;
  BOOL v6;
  int v7;

  v2 = 2 * (v0 ^ 0x611);
  v3 = v2 ^ 0x3EE;
  STACK[0xB30] = 0;
  v4 = malloc(0x408uLL);
  STACK[0xB58] = (unint64_t)v4;
  v5 = malloc(0x404uLL);
  STACK[0xB30] = (unint64_t)v5;
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  v7 = !v6;
  LODWORD(STACK[0x688]) = v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((v7 * (v3 - 591)) ^ v2)) - 8))();
}

uint64_t sub_100110FBC()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  unsigned int v119;
  int v120;
  int v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  int v140;
  int v141;
  int v142;
  unsigned int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  int v152;
  unsigned int v153;
  int v154;
  int v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  int v159;
  int v160;
  int v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  unsigned int v174;
  unsigned int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  unsigned int v180;
  int v181;
  unint64_t v182;
  int v183;
  int v184;
  int v185;
  int v186;
  unsigned int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  unsigned int v195;
  int v196;
  unsigned int v197;
  int v198;
  int v199;
  int v200;
  unsigned int v201;
  int v202;
  int v203;
  int v204;
  unsigned int v205;
  int v206;
  int v207;
  unsigned int v208;
  int v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  unsigned int v219;
  int v220;
  unsigned int v221;
  int v222;
  int v223;
  unsigned int v224;
  int v225;
  int v226;
  unsigned int v227;
  unsigned int v228;
  int v229;
  int v230;
  unsigned int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  unsigned int v240;
  unsigned int v241;
  int v242;
  unsigned int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  unsigned int v264;
  unsigned int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  unsigned int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  unsigned int v285;
  int v286;
  unsigned int v287;
  unsigned int v288;
  int v289;
  unsigned int v290;
  int v291;
  int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  int v296;
  unsigned int v297;
  int v298;
  unsigned int v299;
  int v300;
  unint64_t v301;
  unsigned int v302;
  int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  int v308;
  unsigned int v309;
  int v310;
  unsigned int v311;
  int v312;
  int v313;
  int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  int v318;
  int v319;
  unsigned int v320;
  unsigned int v321;
  int v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  int v326;
  unsigned int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  unsigned int v334;
  int v335;
  unsigned int v336;
  unsigned int v337;
  char v338;
  uint64_t v339;
  unsigned int v340;
  int v341;
  unsigned int v342;
  unsigned int v343;
  int v344;
  int v345;
  uint64_t v346;
  int v347;
  unsigned int v348;
  int v349;
  int v350;
  unsigned int v351;
  unsigned int v352;
  int v353;
  int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  int v358;
  unsigned int v359;
  unsigned int v360;
  int v361;
  int v362;
  int v363;
  unsigned int v364;
  int v365;
  unsigned int v366;
  int v367;
  int v368;
  int v369;
  int v370;
  int v371;
  int v372;
  int v373;
  int v374;
  unsigned int v375;
  unsigned int v376;
  int v377;
  unsigned int v378;
  int v379;
  int v380;
  int v381;
  unsigned int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  unsigned int v388;
  unsigned int v389;
  int v390;
  unsigned int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  unsigned int v396;
  unsigned int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  unsigned int v402;
  unsigned int v403;
  int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  int v408;
  unint64_t v409;
  int v410;
  unsigned int v411;
  int v412;
  int v413;
  unsigned int v414;
  unsigned int v415;
  int v416;
  unsigned int v417;
  int v418;
  int v419;
  int v420;
  unsigned int v421;
  int v422;
  unsigned int v423;
  int v424;
  int v425;
  int v426;
  unsigned int v427;
  unsigned int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int v434;
  int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  unsigned int v441;
  unsigned int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  int v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  int v459;
  BOOL v460;
  int v461;
  int v462;
  int v463;
  int v464;
  unsigned int v465;
  int v466;
  __int16 v467;
  int v468;
  unint64_t v469;
  int v470;
  int v471;
  int v472;
  int v473;
  unsigned int v474;
  int v475;
  unsigned int v476;
  int v477;
  int v478;
  unsigned int v479;
  int v480;
  int v481;
  unsigned int v482;
  int v483;
  int v484;
  int v485;
  unsigned int v486;
  unsigned int v487;
  int v488;
  int v489;
  int v490;
  unsigned int v491;
  int v492;
  int v493;
  int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  unsigned int v499;
  int v500;
  int v501;
  int v502;
  int v503;
  int v504;
  int v505;
  int v506;
  int v507;
  unsigned int v508;
  unsigned int v509;
  int v510;
  int v511;
  unsigned int v512;
  unsigned int v513;
  int v514;
  unsigned int v515;
  int v516;
  int v517;
  int v518;
  unsigned int v519;
  int v520;
  int v521;
  int v522;
  unsigned int v523;
  unsigned int v524;
  unsigned int v525;
  int v526;
  int v527;
  unsigned int v528;
  int v529;
  int v530;
  int v531;
  int v532;
  unsigned int v533;
  int v534;
  int v535;
  int v536;
  unsigned int v537;
  unsigned int v538;
  int v539;
  int v540;
  int v541;
  int v542;
  int v543;
  unsigned int v544;
  unsigned int v545;
  unsigned int v546;
  unsigned int v547;
  unsigned int v548;
  unsigned int v549;
  int v550;
  int v551;
  int v552;
  int v553;
  unsigned int v554;
  int v555;
  unsigned int v556;
  int v557;
  int v558;
  int v559;
  int v560;
  int v561;
  int v562;
  int v563;
  int v564;
  int v565;
  int v566;
  int v567;
  int v568;
  int v569;
  int v570;
  int v571;
  int v572;
  int v573;
  unsigned int v574;
  int v575;
  unsigned int v576;
  unsigned int v577;
  unsigned int v578;
  unsigned int v579;
  int v580;
  unsigned int v581;
  unsigned int v582;
  int v583;
  int v584;
  unsigned int v585;
  unsigned int v586;
  unsigned int v587;
  int v588;
  int v589;
  unsigned int v590;
  int v591;
  unsigned int v592;
  int v593;
  unsigned int v594;
  unsigned int v595;
  int v596;
  unsigned int v597;
  unsigned int v598;
  unsigned int v599;
  unsigned int v600;
  unsigned int v601;
  unsigned int v602;
  unsigned int v603;
  unsigned int v604;
  int v605;
  unsigned int v606;
  unsigned int v607;
  int v608;
  unsigned int v609;
  unsigned int v610;
  unsigned int v611;
  unint64_t v612;
  unsigned int v613;
  int v614;
  unsigned int v615;
  int v616;
  int v617;
  unsigned int v618;
  unsigned int v619;
  unsigned int v620;
  _BOOL4 v621;

  v1 = byte_100224DF0[v0[14] ^ 0xDELL];
  HIDWORD(v2) = ~v1;
  LODWORD(v2) = (v1 ^ 0x52) << 24;
  v3 = (v2 >> 25) - ((2 * (v2 >> 25)) & 0xFFFFFFF4) + 122;
  v4 = ((((v3 ^ 0x74) - ((2 * (v3 ^ 0x74)) & 0x14A)) << 8) - 1501780736) ^ 0xA67CA500;
  v5 = byte_100224DF0[v0[10] ^ 0x9CLL];
  HIDWORD(v2) = ~v5;
  LODWORD(v2) = (v5 ^ 0x52) << 24;
  v6 = v0[13] ^ 0xC8;
  v7 = ((((((v2 >> 25) + (~(2 * (v2 >> 25)) | 0x5F) + 81) ^ 0xF8)
        - ((2 * (((v2 >> 25) + (~(2 * (v2 >> 25)) | 0x5F) + 81) ^ 0xF8)) & 0xAC)) << 8)
      - 1074768384) ^ 0xBFF05600;
  v8 = v7 - ((2 * v7) & 0x6C402800) + 1981813828;
  v9 = byte_10021AFD0[v6] - 2 * ((byte_10021AFD0[v6] + 104) & 0x4F ^ byte_10021AFD0[v6] & 7) + 48;
  v10 = ((v9 >> 4) & 4 | 0xFFFFFFD8) ^ v9;
  LOBYTE(v6) = v6
             - 11
             * ((((unsigned __int16)(117 * v6) >> 8)
                                + (((v6 - ((unsigned __int16)(117 * v6) >> 8)) & 0xFE) >> 1)) >> 3);
  v11 = ((((v10 ^ 0x95) - ((2 * (v10 ^ 0x95)) & 0x102)) << 16) + 1904279552) ^ 0x71810000;
  v12 = byte_100224DF0[v0[5] ^ 0x50];
  v13 = (v11 + 1073504318 + (~(2 * v11) | 0x8007FFFF) + 1) ^ 0x3FFC603E | (v4 - ((2 * v4) & 0x5F19FE00) + 1871511403) ^ 0x6F8CFF6B;
  HIDWORD(v2) = ~v12;
  LODWORD(v2) = (v12 ^ 0x52) << 24;
  v14 = (unsigned __int8 *)STACK[0xB48];
  v15 = ((((((v2 >> 25) - ((2 * (v2 >> 25)) & 0xEA) - 11) ^ 0xB5)
         - ((2 * (((v2 >> 25) - ((2 * (v2 >> 25)) & 0xEA) - 11) ^ 0xB5)) & 0x8E)) << 16)
       - 1689845760) ^ 0x9B470000;
  v16 = byte_10023A140[*v0 ^ 0x3DLL];
  v17 = ((((v16 ^ 4) - ((2 * v16) & 0x46)) << 24) - 1560281088) ^ 0xA3000000;
  LODWORD(v6) = byte_10021AFD0[*(unsigned __int8 *)(STACK[0xB48]
                                                  + (-10 - (((2 * v6) & 0x16) + (v6 ^ 0xEB)))
                                                  + (((2 * v6) & 0x16) + (v6 ^ 0xEB) + 21)) ^ 0x12];
  v18 = (~(2 * v6 + 16) | 0xFFFFFFD1) + v6 - 128;
  v19 = *(unsigned __int8 *)(STACK[0xB48] + 6);
  STACK[0x560] = v19;
  v20 = byte_10021AFD0[v19 ^ 0x22] - 2 * (byte_10021AFD0[v19 ^ 0x22] & 7) + 111;
  v21 = v18 ^ 0x65 ^ ((v18 >> 4) & 4 | 0x98);
  v22 = (v21 - ((2 * v21) & 0x142) + 703156897) ^ 0x29E952A1 | v8 ^ 0x76201444;
  v23 = v22 - ((2 * v22) & 0x32BCE2C0);
  v24 = (((((v20 >> 4) & 4 ^ v20 ^ 0x13) - ((2 * ((v20 >> 4) & 4 ^ v20 ^ 0x13)) & 0x1D4)) << 8)
       - 989926912) ^ 0xC4FEEA00;
  v25 = v14[4];
  STACK[0x570] = v25;
  v26 = (v24 - ((2 * v24) & 0x17C9A600) + 1273287639) ^ 0x4BE4D3D7 | (v15 - ((2 * v15) & 0x73900000) - 104323414) ^ 0xF9C826AA;
  v27 = byte_10021AFD0[v25 ^ 0xB8]
      - 2 * ((byte_10021AFD0[v25 ^ 0xB8] + 104) & 0x4F ^ byte_10021AFD0[v25 ^ 0xB8] & 2)
      - 75;
  v28 = v27 ^ 0x53 ^ ((v27 >> 4) & 4 | 0x78);
  v29 = ((((~(2 * v28) | 0x25) + v28) << 24) - 301989888) ^ 0xED000000;
  v30 = v14[1];
  STACK[0x4E0] = v30;
  v31 = (v26 - ((2 * v26) & 0xA57EACC8) - 759212444) ^ 0xD2BF5664 | (v29 - ((2 * v29) & 0xAAAAAAAA) + 1434816703) ^ 0x558590BF;
  v32 = byte_100224DF0[v30 ^ 2];
  HIDWORD(v2) = ~v32;
  LODWORD(v2) = (v32 ^ 0x52) << 24;
  v33 = v31 - ((2 * v31) & 0x4C61545E);
  v34 = ((((((v2 >> 25) - ((2 * (v2 >> 25)) & 0x42) - 95) ^ 0xB0)
         - ((2 * (((v2 >> 25) - ((2 * (v2 >> 25)) & 0x42) - 95) ^ 0xB0)) & 0x68)) << 16)
       + 1681129472) ^ 0x64340000;
  v35 = v14[15];
  STACK[0x580] = v35;
  v36 = (v34 - ((2 * v34) & 0x12580000) - 919802156) ^ 0xC92CEED4 | (v17 - ((2 * v17) & 0x77777777) + 995186751) ^ 0x3B51583F;
  v37 = v36 - 936298741 + (~(2 * v36) | 0x6F9D91E9);
  v38 = byte_10021AFD0[v35 ^ 0x3A]
      - 2 * ((byte_10021AFD0[v35 ^ 0x3A] + 104) & 0x7D ^ byte_10021AFD0[v35 ^ 0x3A] & 1)
      - 28;
  v39 = (v38 >> 4) & 4 ^ v38;
  v40 = v14[9];
  STACK[0x4A0] = v40;
  v41 = byte_100224DF0[v40 ^ 0x2B];
  HIDWORD(v2) = ~v41;
  LODWORD(v2) = (v41 ^ 0x52) << 24;
  v42 = ((((((v2 >> 25) - ((2 * (v2 >> 25)) & 0x44) + 34) ^ 0xDC)
         - ((2 * (((v2 >> 25) - ((2 * (v2 >> 25)) & 0x44) + 34) ^ 0xDC)) & 0x126)) << 16)
       + 1586692096) ^ 0x5E930000;
  v43 = (v42 - ((2 * v42) & 0x4D700000) - 424115308) ^ 0xE6B88394 | (v23 + 1499361632) ^ 0x595E7160;
  v44 = v43 - ((2 * v43) & 0x7D9F8392);
  v45 = v14[3];
  STACK[0x4D0] = v45;
  v46 = byte_100224DF0[v45 ^ 0x5B];
  HIDWORD(v2) = ~v46;
  LODWORD(v2) = (v46 ^ 0x52) << 24;
  v47 = (v37 + 1) ^ 0xC831370B | ((((v2 >> 25) - ((2 * (v2 >> 25)) & 0x84) - 62) ^ 0xDF)
                                - ((2 * (((v2 >> 25) - ((2 * (v2 >> 25)) & 0x84) - 62) ^ 0xDF)) & 0x1C6)
                                - 1228194333) ^ 0xB6CB3DE3;
  v48 = v14[7];
  STACK[0x4B0] = v48;
  v49 = byte_10021AFD0[v48 ^ 0xFB]
      - 2 * ((byte_10021AFD0[v48 ^ 0xFB] + 40) & 0x3D ^ byte_10021AFD0[v48 ^ 0xFB] & 4)
      - 95;
  v50 = (v33 - 1506760145) ^ 0xA630AA2F | (((v49 ^ (v49 >> 4) & 4) ^ 0xFC)
                                         - ((2 * (v49 ^ (v49 >> 4) & 4 ^ 0xFC)) & 0x18)
                                         - 1080043764) ^ 0xBF9FD70C;
  v51 = v50 - ((2 * v50) & 0xB0CDC1CE) - 664346393;
  LODWORD(STACK[0x5D0]) = v51;
  v52 = v14[8];
  STACK[0x498] = v52;
  v53 = byte_100224DF0[v52 ^ 5];
  HIDWORD(v2) = ~v53;
  LODWORD(v2) = (v53 ^ 0x52) << 24;
  v54 = ((v2 >> 25) - ((2 * (v2 >> 25)) & 0xE2) - 15) ^ 0x95;
  v55 = (((v54 + (~(2 * (_BYTE)v54) | 0xFFFFFF9F)) << 24) + 822083584) ^ 0x30000000;
  v56 = (v55 - ((2 * v55) & 0xD2000000) + 1769885423) ^ 0x697E4EEF | (v44 - 19938871) ^ 0xFECFC1C9;
  v57 = v56 - ((2 * v56) & 0x7A5BDF9E) - 1121062961;
  LODWORD(STACK[0x660]) = v57;
  STACK[0x5C0] = (unint64_t)v14;
  v58 = v14[2];
  STACK[0x520] = v58;
  v59 = byte_10023A140[v58 ^ 0x7D] ^ 0x19;
  v60 = (((v59 - ((2 * v59) & 0x90)) << 8) - 459520000) ^ 0xE49C4800;
  v61 = byte_10023F2C0[v14[12] ^ 0x5ALL];
  v62 = ((((v61 ^ 0xCF) - ((2 * (v61 ^ 0xCF)) & 0xFFFFFFCF)) << 24) + 1728053248) ^ 0x67000000;
  v63 = (v62 - ((2 * v62) & 0x3E000000) + 530532491) ^ 0x1F9F488B | ((v39 ^ 0x7C)
                                                                   - ((2 * (v39 ^ 0x7C)) & 0x122)
                                                                   - 1140502383) ^ 0xBC055091;
  v64 = (v63 - ((2 * v63) & 0xF9182BE6) - 57928205) ^ 0xFC8C15F3 | (v13 - ((2 * v13) & 0x9086E886) + 1212380227) ^ 0x48437443;
  LODWORD(v58) = (v64 - ((2 * v64) & 0x7D93FEEA) + 1053425525) ^ 0x17749192;
  LODWORD(STACK[0x670]) = v58;
  v65 = (v47 - ((2 * v47) & 0x87F416BC) + 1140460382) ^ 0x43FA0B5E | (v60 - ((2 * v60) & 0x55FA1200) - 352515667) ^ 0xEAFD09AD;
  v66 = v65 - ((2 * v65) & 0x8D9B9DAC) + 1187892950;
  LODWORD(STACK[0x678]) = v66;
  v67 = dword_100217EF0[v10 ^ 0xD0];
  HIDWORD(v2) = v67 ^ 0x37C6;
  LODWORD(v2) = v67 ^ 0xA1F60000;
  v68 = (v2 >> 16) - ((2 * (v2 >> 16)) & 0xE3184DC4) - 242473246;
  v69 = dword_100217EF0[v61 ^ 0x6A];
  HIDWORD(v2) = v69 ^ 0xC6;
  LODWORD(v2) = v69 ^ 0xA1F63700;
  v70 = dword_10021B5F0[v39 ^ 0x18] ^ ((v2 >> 8) - 536390203 - ((2 * (v2 >> 8)) & 0xC00EB880) + 1659);
  v71 = dword_100217EF0[v3 ^ 0xFB];
  HIDWORD(v2) = v71 ^ 0xF637C6;
  LODWORD(v2) = v71 ^ 0xA1000000;
  v72 = v68 ^ v70 ^ ((v2 >> 24) - ((2 * (v2 >> 24)) & 0x48C17030) + 610318360) ^ v66;
  LODWORD(STACK[0x640]) = v72;
  v73 = v72 ^ v51 ^ v57;
  LODWORD(STACK[0x5E0]) = v73;
  v74 = v72 ^ v51;
  v75 = v58 ^ v73 ^ 0x5F5B1B52;
  LODWORD(v58) = v73 ^ 0x5F5B1B52;
  LODWORD(STACK[0x608]) = v73 ^ 0x5F5B1B52;
  v76 = dword_100217EF0[((BYTE2(v75) ^ 0x276AEC10 | 0xCDE94229) - (BYTE2(v75) ^ 0x276AEC10 | 0x3216BDD6) + 840351190) ^ 0xEA83AEF8];
  HIDWORD(v2) = v76 ^ 0x37C6;
  LODWORD(v2) = v76 ^ 0xA1F60000;
  v77 = (v2 >> 16) - ((2 * (v2 >> 16)) & 0xBB862160) + 1573064880;
  v78 = dword_1002277E0[HIBYTE(v75) ^ 0x89];
  HIDWORD(v2) = v78 ^ 0x164;
  LODWORD(v2) = v78 ^ 0x94CC7A00;
  v79 = (v2 >> 9) + 49098405 + (~(2 * (v2 >> 9)) | 0xFA25A2B7);
  v80 = (((2 * v79) ^ 0x5DA5D48) - 2 * (((2 * v79) ^ 0x5DA5D48) & 0x10F4D41E ^ (2 * v79) & 4) + 284480539) & 0x32119686 ^ 0x119086;
  v81 = ((v80 | 0x2CF28000) - (v80 | 0xD30D7FFF) - 754089985) ^ v79;
  HIDWORD(v2) = v81 ^ 0xA2;
  LODWORD(v2) = v81 ^ 0x3F9A3D00;
  v82 = (v2 >> 8) - ((2 * (v2 >> 8)) & 0x43D11516) + 568887947;
  v83 = (((2 * (BYTE1(v75) ^ 0xF7)) & 0x120) - (BYTE1(v75) ^ 0xF7) - 1448727697) ^ 0x60241E49;
  v84 = ((v75 ^ 0x54) - 2 * ((v75 ^ 0x54) & 0x7F) + 2943) ^ 0xB82;
  v85 = dword_100217EF0[(((2 * v83) & 0x8004602C) - v83 - 1079996439) ^ 0x7622BA7C];
  HIDWORD(v2) = v85 ^ 0xF637C6;
  LODWORD(v2) = v85 ^ 0xA1000000;
  v86 = ((v2 >> 24) - ((2 * (v2 >> 24)) & 0xE18B3B0C) + 1891999110) ^ v77 ^ v72 ^ v82;
  v87 = (v84 - ((2 * v84 + 822565292) & 0x25478A3C) + 1260876276) ^ dword_100225E80[(((2 * (v75 ^ 0x73)) | 0x1635A35E)
                                                                                   - (v75 ^ 0x73)
                                                                                   - 186306991) ^ 0xB1AD192];
  v88 = ((2 * v86) & 0x7DDFB9FC ^ 0x3C5118A4) + (v86 ^ 0x20D751AD);
  v89 = (((v86 ^ v87 ^ 0x929DAACF) + 1) ^ 0x1F7E37F9) + v88 + ((2 * ((v86 ^ v87 ^ 0x929DAACF) + 1)) & 0x3EFC6FF2);
  v90 = v88
      + 1091576578
      + (v87 ^ ((v87 ^ 0xCA5279C) - ((2 * (v87 ^ 0xCA5279C) + 2) & 0xD4E3FA7A) + 1785855294) ^ 0xD3A40E1D ^ (v89 - ((2 * v89 + 1126422034) & 0x951E5686) + 1814107724));
  LODWORD(v52) = v90 - ((2 * v90) & 0x8FA1AD26) + 1204868755;
  LODWORD(STACK[0x5F0]) = v75 ^ 0x5D24E9AB;
  LODWORD(STACK[0x510]) = v72 ^ v51;
  LODWORD(STACK[0x5A0]) = v52 ^ v72 ^ v51;
  LODWORD(STACK[0x500]) = v52;
  v91 = v52 ^ v72 ^ v51 ^ v58;
  LODWORD(v58) = v91 ^ v75 ^ 0x5D24E9AB;
  v92 = v91;
  LODWORD(STACK[0x680]) = v91;
  LOBYTE(v72) = v91 ^ v75 ^ 0xAB;
  LODWORD(STACK[0x540]) = v58;
  v93 = dword_10021B5F0[((unsigned __int16)(v58 ^ 0x93FE) >> 8) ^ 0xD7];
  HIDWORD(v2) = v93 ^ 0xB5E83C;
  LODWORD(v2) = v93 ^ 0x79000000;
  v94 = (v2 >> 24) - ((2 * (v2 >> 24)) & 0xAF7BEF38) - 675416164;
  v95 = (v58 ^ 0x847E93FE) >> 1;
  v96 = ((((v58 ^ 0x847E93FE) >> 24) ^ 0x51)
       - 1425187015
       + ((2 * (((v58 ^ 0x847E93FE) >> 24) ^ 0x51) + 172) & 0xC4 ^ 0x9EFCBFFF)) ^ dword_100225E80[((v58 ^ 0x847E93FE) >> 24) ^ 0xB6];
  v97 = (((v95 & 0x5B ^ 0xE6649709) & 0x86201118 ^ 0x10000190)
       + ((v95 & 0x5B ^ 0xE6649709 | v95 & 0x24) ^ 0xAFB7F668)
       - (((v95 & 0x5B ^ 0xE6649709 | v95 & 0x24) ^ 0xAFB7F668) & 0x48912118)) ^ 0x97625098 | (((((_BYTE)v72 << 7) - 114) & 0x80 ^ 0x26040380)
                                                                                             + 2
                                                                                             * ((((_BYTE)v72 << 7) - 114) & 0x80)
                                                                                             - 853203062) ^ 0xF3292B8A;
  v98 = v97 - ((2 * v97) & 0x5BC99A38) - 1377514212;
  HIDWORD(v2) = v96 ^ 0xFFFFFFFB;
  LODWORD(v2) = v96 ^ 0xF0D73000;
  v99 = (v2 >> 8) - ((2 * (v2 >> 8)) & 0xED18EB58) + 1988916652;
  LOWORD(v84) = (((2 * v98) ^ 0xD6) - ((2 * ((2 * v98) ^ 0xD6)) & 0xAA) - 43) & 0xFE ^ 0x2C;
  v100 = ((_WORD)v84 - ((2 * (_WORD)v84) & 0xD8) + 1389) & 0x7FE ^ 0x594 | (v98 >> 7) ^ 0x15BC99B;
  v101 = (((2 * (BYTE2(v58) ^ 0xEB)) | 0x7ECF80E0) - (BYTE2(v58) ^ 0xEB) + 1083719568) ^ 0xBB678098;
  v102 = dword_1002277E0[(-803735391 - v101 + ((2 * v101) | 0x5FC7AEBE) + 274432) ^ 0x2BE39710];
  HIDWORD(v2) = v102 ^ 0x164;
  LODWORD(v2) = v102 ^ 0x94CC7A00;
  v103 = (v2 >> 9) - ((2 * (v2 >> 9)) & 0xCD12AA14) - 427207414;
  v104 = (((2 * v103) ^ 0xCD12AA14) - ((2 * ((2 * v103) ^ 0xCD12AA14)) & 0x3605BA04) + 453172482) & 0x32119686 ^ 0x22118404;
  v105 = (((2 * v104) | 0x1212F462) - v104 - 151616049) ^ v103;
  HIDWORD(v2) = v105 ^ 0xA8BF;
  LODWORD(v2) = v105 ^ 0xDE150000;
  v106 = v94 ^ dword_10021B5F0[(v100 - ((2 * v100) & 0x1065202) - 930928383) ^ 0xC88329AC] ^ v99 ^ ((v2 >> 16)
                                                                                                  - ((2 * (v2 >> 16)) & 0x1C1E85E0)
                                                                                                  + 235881200);
  v107 = v74 ^ 0xE4690A35 ^ v106;
  v108 = v92 ^ 0xBCBC787B ^ v107;
  v109 = v107;
  LODWORD(STACK[0x550]) = v107;
  v110 = v108 ^ v58 ^ 0x847E93FE;
  LODWORD(STACK[0x590]) = v108;
  v111 = dword_10021B5F0[HIBYTE(v110) ^ 0xAB];
  HIDWORD(v2) = v111 ^ 0x3C;
  LODWORD(v2) = v111 ^ 0x79B5E800;
  v112 = ((v2 >> 8) - ((2 * (v2 >> 8)) & 0xAEF895B6) - 679720229) ^ dword_10021B5F0[(((v108 ^ v58 ^ 0xFE) ^ 0x4A)
                                                                                   + (v110 & 0xE3 ^ 0xBA1)
                                                                                   - (((v108 ^ v58 ^ 0xFE) ^ 0x4A) & 0xFFFFFFE3)) ^ 0xB91];
  v113 = v110 ^ 0x8B0C92F;
  LODWORD(STACK[0x530]) = v110 ^ 0x8B0C92F;
  v114 = dword_10021B5F0[((BYTE2(v110) ^ 0x1E) + (HIWORD(v110) & 0x19 ^ 0x501) - ((BYTE2(v110) ^ 0x1E) & 0x19)) ^ 0x5DE];
  HIDWORD(v2) = v114 ^ 0xE83C;
  LODWORD(v2) = v114 ^ 0x79B50000;
  v115 = (v2 >> 16) - ((2 * (v2 >> 16)) & 0x9FE091B4) + 1341147354;
  v116 = dword_100217EF0[(((v110 >> 8) & 0x16 ^ 0x29C7B903) + ((v110 >> 8) & 0xE9) - 1) ^ 0x29C7B9DF];
  HIDWORD(v2) = v116 ^ 0xF637C6;
  LODWORD(v2) = v116 ^ 0xA1000000;
  LODWORD(STACK[0x4C0]) = v106 ^ v52;
  v117 = v112 ^ ((v2 >> 24) - 1958725055 + (~(2 * (v2 >> 24)) | 0xE97F8B7F)) ^ v115 ^ v106 ^ v52;
  LODWORD(STACK[0x464]) = v117 ^ v109;
  LODWORD(STACK[0x668]) = v117;
  v118 = v117 ^ v109 ^ 0x4E92F357;
  v119 = v118 ^ v108 ^ v113;
  v120 = dword_1002277E0[(((2 * ((v118 ^ v108 ^ v113) ^ 0xB)) | 0xB9909DA)
                        - ((v118 ^ v108 ^ v113) ^ 0xB)
                        + 1513323283) & 0x3FFFFFFF ^ 0x25CC8410];
  HIDWORD(v2) = v120 ^ 0x164;
  LODWORD(v2) = v120 ^ 0x94CC7A00;
  v121 = (v2 >> 9) - ((2 * (v2 >> 9)) & 0xEDC5D6D4) - 152900758;
  v122 = (((2 * v121) ^ 0xEDC5D6D4) - ((2 * ((2 * v121) ^ 0xEDC5D6D4)) & 0x684A740) + 591549345) & 0x32119686 ^ 0x32011480;
  LODWORD(v61) = dword_100217EF0[((HIWORD(v119) & 0x6E ^ 0x823) + (HIWORD(v119) & 0x91) - 1) ^ 0x8B2];
  HIDWORD(v2) = v61 ^ 0x37C6;
  LODWORD(v2) = v61 ^ 0xA1F60000;
  LODWORD(v61) = (v2 >> 16) - ((2 * (v2 >> 16)) & 0x78F192A0) + 1014548816;
  LODWORD(v19) = ((2 * (BYTE1(v119) ^ 0x5B)) | 0x62956E58) - (BYTE1(v119) ^ 0x5B) - 826980140;
  LODWORD(v19) = dword_1002277E0[((v19 & 0x314A8896 ^ 0x44008813) + (v19 & 0x3769 ^ 0x80117729) - 1) ^ 0xF55B48C9];
  HIDWORD(v2) = v19 ^ 0x164;
  LODWORD(v2) = v19 ^ 0x94CC7A00;
  LODWORD(v19) = (v2 >> 9) - ((2 * (v2 >> 9)) & 0xA33AEF54) + 1369274282;
  LODWORD(v19) = (((2 * v19) ^ 0xA33AEF54) - ((2 * ((2 * v19) ^ 0xA33AEF54)) & 0x305DDEAC) + 942600022) & 0x32119686 ^ v19;
  LODWORD(v52) = v119 ^ 0x9231D2B;
  LODWORD(STACK[0x3F8]) = v119 ^ 0x9231D2B;
  HIDWORD(v2) = v19 ^ 0x19662E;
  LODWORD(v2) = v19 ^ 0x60000000;
  LODWORD(v19) = (v2 >> 24) - ((2 * (v2 >> 24)) & 0x3CBDEA34);
  v123 = ((HIBYTE(v119) ^ 0x1E) - ((2 * (HIBYTE(v119) ^ 0x1E) + 481708) & 0x74152) + 2094239615) ^ dword_100225E80[HIBYTE(v119) ^ 0xF9];
  HIDWORD(v2) = v123 ^ 0x30;
  LODWORD(v2) = v123 ^ 0xC6116000;
  LODWORD(v58) = v61 ^ v121 ^ ((((v122 | 0x21DB42AD) - (v122 | 0xDE24BD52) - 568017582) & 0xAAC69237 ^ 0x82269252)
                             + (((v122 | 0x21DB42AD) - (v122 | 0xDE24BD52) - 568017582) & 0x55196D88 ^ 0x114C89)
                             - 1) ^ v117 ^ ((v2 >> 8) - ((2 * (v2 >> 8)) & 0xC6C209EC) - 480181002) ^ (v19 - 1637944038);
  v124 = v118 ^ v108 ^ 0x9B19AA4;
  LODWORD(STACK[0x424]) = v124;
  v125 = v58 ^ 0xA157852C;
  v126 = v58;
  LODWORD(v58) = v58 ^ 0xA157852C ^ v118;
  LODWORD(STACK[0x430]) = v58;
  LODWORD(v58) = v58 ^ 0x45ABA2A8;
  v127 = v58 ^ v124;
  v128 = v58;
  LODWORD(STACK[0x4F0]) = v58;
  BYTE2(v118) = BYTE2(v127) ^ BYTE2(v52);
  v129 = ((((v127 ^ v52) >> 24) ^ 0x26)
        + 810854433
        + ((2 * (((v127 ^ v52) >> 24) ^ 0x26) + 428) & 0x294 ^ 0x9EFEAFFF)) ^ dword_100225E80[((v127 ^ v52) >> 24) ^ 0xC1];
  v130 = ((unsigned __int16)(v127 ^ v52) >> 8);
  v131 = (v130 ^ 0x39) - ((2 * (v130 ^ 0x39)) & 0xFA) + 993204093;
  HIDWORD(v2) = v129 ^ 0xD3;
  LODWORD(v2) = v129 ^ 0x758E7900;
  v132 = (v2 >> 8) - ((2 * (v2 >> 8)) & 0x2A5394) - 2146096694;
  v133 = (((2 * (v130 ^ 0xBF)) | 0x1512602) - (v130 ^ 0xBF) + 2069327103) & 0x7FFFFFF ^ 0x4A893D8;
  v134 = (v133 - ((2 * v133 + 17258924) & 0x1179C52) + 961510143) ^ dword_100225E80[((v131 & 0x3810073E ^ 0x400E416)
                                                                                   + (v131 ^ 0x7A350369)
                                                                                   - ((v131 ^ 0x7A350369) & 0x4004073E)) ^ 0x3D12F392];
  HIDWORD(v2) = v134 ^ 0x954CB0;
  LODWORD(v2) = v134 ^ 0x82000000;
  v135 = (v2 >> 24) - ((2 * (v2 >> 24)) & 0xC18635D8) - 524084500;
  LODWORD(v58) = (((v127 ^ v52) & 0x65 ^ 0x4B5A4D01) + ((v127 ^ v52) & 0x9A ^ 0x83) - 1) ^ 0x8A68D564;
  LODWORD(v52) = v127 ^ v52 ^ 0xAC8794A;
  LODWORD(STACK[0x410]) = v52;
  v136 = (((2 * (BYTE2(v118) ^ 0xB0)) | 0x3AE5EF5C) - (BYTE2(v118) ^ 0xB0) + 1653409874) ^ 0x8B0ACC8F;
  LODWORD(STACK[0x418]) = v127;
  v137 = (v75 ^ 0xDB6DE861)
       + (((v75 ^ 0xDD79179E) + 1) ^ 0xFAA76FDF)
       + ((2 * ((v75 ^ 0xDD79179E) + 1)) & 0xF54EDFBE)
       + 89690145;
  v138 = dword_10021B5F0[((v136 | 0xEB61211C) - (v136 | 0x149EDEE3) + 345956067) ^ 0xFD191AC4];
  v139 = ((v137 ^ 0x7BD93B3F) - 2077834047 + ((2 * v137) & 0xF7B2767E)) | v138 ^ 0x79B5E83C;
  HIDWORD(v2) = (v139 - ((2 * v139) & 0x3C3E) + 40479) ^ 0x9E1F;
  LODWORD(v2) = v138 ^ 0x79B50000;
  LODWORD(v61) = dword_10021B5F0[((_DWORD)v58 - ((2 * (_DWORD)v58) & 0x8064237A) + 1790318013) ^ 0xAB848D07] ^ v125 ^ v132 ^ v135 ^ 0xBE179ABE ^ ((v2 >> 16) - ((2 * (v2 >> 16)) & 0xED0300F6) - 159285125);
  LODWORD(STACK[0x3F0]) = v61;
  v140 = v61 ^ v128;
  HIDWORD(v2) = v61 ^ v128 ^ 0x2E83E;
  LODWORD(v2) = v61 ^ v128 ^ 0xB4B00000;
  v141 = ((v2 >> 18) - ((2 * (v2 >> 18)) & 0x35C1245E) + 450925103) ^ (((v127 << 14) ^ 0x428B8000)
                                                                     - ((v127 << 15) & 0xA080000)
                                                                     + 84159885);
  HIDWORD(v2) = v141 ^ (v127 >> 18) ^ 0x29DD;
  LODWORD(v2) = v141 ^ 0xE8C14000;
  v142 = (v2 >> 14) - ((2 * (v2 >> 14)) & 0x309DFBB4) + 407829978;
  LODWORD(STACK[0x3E0]) = v142;
  LODWORD(v35) = v52 ^ 0x6C3571D1 ^ v142;
  v143 = ((WORD1(v35) & 0xBB ^ 0xFFD8A713) + (WORD1(v35) & 0x44 ^ 0x41) - 1) ^ 0xCF586547;
  v144 = dword_1002277E0[(((2 * v143) & 0x8B48) - v143 + 2139327067) ^ 0x4F03484F];
  HIDWORD(v2) = v144 ^ 0x164;
  LODWORD(v2) = v144 ^ 0x94CC7A00;
  v145 = (v2 >> 9) - ((2 * (v2 >> 9)) & 0x30275AE4) - 1743540878;
  LODWORD(v58) = (((2 * v145) ^ 0x30275AE4) - ((2 * ((2 * v145) ^ 0x30275AE4)) & 0x7F48AF4) + 66733434) & 0x32119686 ^ 0x30008602;
  LODWORD(v58) = ((v58 | 0xDDBD4A84) - (v58 | 0x2242B57B) + 574797179) ^ 0xD3BF22B5;
  v146 = (v58 - ((2 * v58) & 0x7655D828) - 1154814956) ^ v145;
  HIDWORD(v2) = v146 ^ 0x3CD5;
  LODWORD(v2) = v146 ^ 0x1EAF0000;
  v147 = (v2 >> 16) - ((2 * (v2 >> 16)) & 0x6ABE0ACA) - 1252063899;
  v148 = ((BYTE1(v35) ^ 0xC0C5096 | 0x9B742079) - (BYTE1(v35) ^ 0xC0C5096 | 0x648BDF86) + 1686888326) ^ 0x977870CE;
  v149 = (v148 - ((2 * v148 + 1896307116) & 0x43C6FC90) + 1516710686) ^ dword_100225E80[(((v35 >> 8) & 0xC3 ^ 0x49248140)
                                                                                       + ((v35 >> 8) & 0x3C ^ 0x100205)
                                                                                       - 1) ^ 0x49348382];
  v150 = (v149 ^ ((v149 ^ 0x5C42032E) - ((2 * (v149 ^ 0x5C42032E) - 951107638) & 0xE67AFE9C) + 1457856307) ^ ((v149 ^ 0x3FE59CCA) - ((2 * (v149 ^ 0x3FE59CCA) + 2) & 0xE764F454) - 206407125) ^ 0xC0956651)
       + 1671929828;
  v151 = ((2 * v150) & 0x417492EE) + (v150 ^ 0xA0BA4977);
  HIDWORD(v2) = v151 + 4568713;
  LODWORD(v2) = v151 + 1598404233;
  v152 = dword_100217EF0[(((2 * (v52 ^ 0xD1 ^ v142 ^ 0xBA4A335E)) | 0x7EBCF1A8)
                        - (v52 ^ 0xD1 ^ v142 ^ 0xBA4A335E)
                        - 1063155924) & 0x81044FFF ^ 0x81044B51] ^ v61 ^ ((v2 >> 24)
                                                                        - ((2 * (v2 >> 24)) & 0xE71CE00C)
                                                                        - 208769018) ^ 0xD4B1F1B4 ^ v147;
  LODWORD(v58) = (v152 & 0x2387EEED ^ 0x80A73FA5) - ((2 * (v152 & 0x2387EEED ^ 0x80A73FA5)) & 0x464B40D8) + 2070782078;
  v153 = ((v152 & 0xCC001110 ^ 0xE9816B31) + (v152 & 0x10780002 ^ 0x10600003) - 2) ^ 0xC5B1FB2A;
  v154 = (v153 - ((2 * v153) & 0x70802260) - 1203609740) ^ 0x1802CF7C | v58 ^ 0xFB4F337E;
  LODWORD(STACK[0x3D4]) = v35;
  LODWORD(STACK[0x438]) = BYTE3(v35);
  LODWORD(v58) = dword_100217EF0[BYTE3(v35) ^ 0xBA];
  HIDWORD(v2) = v58 ^ 0xC6;
  LODWORD(v2) = v58 ^ 0xA1F63700;
  LODWORD(v58) = (v154 - ((2 * v154) & 0x8A4A773C) + 1160067998) ^ ((v2 >> 8)
                                                                  - ((2 * (v2 >> 8)) & 0x8188E708)
                                                                  + 1086616452);
  LODWORD(STACK[0x408]) = v61 ^ v128;
  v155 = v61 ^ v128 ^ 0xAFA3E26B ^ v58;
  LODWORD(v61) = v58;
  LODWORD(STACK[0x440]) = v155;
  LODWORD(v58) = v155 ^ v142;
  v156 = v155 ^ v142 ^ 0xEC2D6AB6;
  LODWORD(v52) = v156 ^ v35;
  LODWORD(v35) = v156;
  LODWORD(STACK[0x3C0]) = v156;
  v157 = ((v52 ^ 0x1A) + 263172 - ((2 * v52) & 0x1C8) + 3040) ^ 0x40F14;
  v158 = (((2 * (v52 ^ 0x800A14D6)) | 0xC29C2272) - (v52 ^ 0x800A14D6) - 1632506169) ^ 0xE14405E2;
  v159 = dword_1002277E0[((BYTE2(v52) ^ 0x95 | 0x9B6351F9) - (BYTE2(v52) ^ 0x95 | 0x649CAE06) + 1687989766) ^ 0x9B635116];
  HIDWORD(v2) = v159 ^ 0x164;
  LODWORD(v2) = v159 ^ 0x94CC7A00;
  v160 = (v2 >> 9) - ((2 * (v2 >> 9)) & 0x53449698) + 698501964;
  v161 = ((2 * v160) ^ 0x53449698) - ((2 * ((2 * v160) ^ 0x53449698)) & 0x35FE2B04) + 2063537538;
  v162 = ((v161 & 0x32118600 ^ 0xC0024219 | v161 & 0x1086) - 1) ^ v160;
  HIDWORD(v2) = v162 ^ 0x8A54;
  LODWORD(v2) = v162 ^ 0xDA350000;
  v163 = (v2 >> 16) - ((2 * (v2 >> 16)) & 0x41B40BBA) - 1596324387;
  v164 = v52;
  LODWORD(v52) = dword_100217EF0[BYTE1(v52) ^ 0x44];
  HIDWORD(v2) = v52 ^ 0xF637C6;
  LODWORD(v2) = v52 ^ 0xA1000000;
  LODWORD(v52) = (v2 >> 24) - ((2 * (v2 >> 24)) & 0xD38102BA) - 373259939;
  LODWORD(STACK[0x3C8]) = v164;
  v165 = dword_10021B5F0[HIBYTE(v164) ^ 0x31];
  HIDWORD(v2) = v165 ^ 0x3C;
  LODWORD(v2) = v165 ^ 0x79B5E800;
  v166 = v52 ^ dword_100225E80[v158] ^ ((v2 >> 8) - ((2 * (v2 >> 8)) & 0x46F1A73A) - 1552362595) ^ (v157
                                                                                                  - ((2 * v157 + 822565292) & 0x38B638DE)
                                                                                                  + 350144837) ^ v163;
  LODWORD(v52) = v140 ^ 0x90621B27 ^ v166;
  v167 = v58 ^ 0x52F29CEC ^ v52;
  v168 = v52;
  LODWORD(STACK[0x394]) = v52;
  LODWORD(v58) = v167 ^ v164;
  v169 = v167;
  LODWORD(STACK[0x3A8]) = v167;
  LODWORD(v52) = ((v167 ^ v164) >> 16);
  v170 = ((v52 ^ 0x26) - ((2 * (v52 ^ 0x26)) & 0xF4) + 2042471034) ^ 0x7BEDE26E;
  LODWORD(v52) = (v52 ^ 0xFFFFFF2D) - 820035806 + ((2 * v52) | 0x61C181BE);
  LODWORD(v52) = ((v52 & 0x30202764 ^ 0x8102740) + (v52 ^ 0x3325C03F) - ((v52 ^ 0x3325C03F) & 0xC12764)) ^ 0x3B3427A4;
  LODWORD(v52) = (v52 - ((2 * v52 + 1896307116) & 0x78F8FA30) + 889203182) ^ dword_100225E80[((v170 | 0x8C94A101)
                                                                                            - (v170 | 0x736B5EFE)
                                                                                            + 1936416510) ^ 0x8EC4E126];
  HIDWORD(v2) = v52 ^ 0xFFFFFF81;
  LODWORD(v2) = v52 ^ 0x7E220000;
  LODWORD(v52) = (v2 >> 16) - ((2 * (v2 >> 16)) & 0xB187F2FE) + 1489238399;
  v171 = dword_10021B5F0[(((2 * (BYTE1(v58) ^ 0x20018473)) | 0xBCD484FE) - (BYTE1(v58) ^ 0x20018473) + 563461505) ^ 0xFE6BC66B];
  HIDWORD(v2) = v171 ^ 0xB5E83C;
  LODWORD(v2) = v171 ^ 0x79000000;
  v172 = (v2 >> 24) - ((2 * (v2 >> 24)) & 0xC8731CD0) - 465990040;
  v173 = (v58 & 0x51) + (v58 ^ 0xFFFFFFDF) + (v58 | 0x26685AE) + 1;
  v174 = (((2 * (v58 ^ 0x8411004)) & 0x2016C) - (v58 ^ 0x8411004) - 329723063) ^ 0xE419C3BD;
  v175 = ((v173 & 0x3D0055A7 ^ 0x3D0050A4) + (v173 & 0xC2FFAA58 ^ 0x648009) - 1) ^ 0x3F025535;
  v176 = v58 ^ 0x34E61783;
  LODWORD(STACK[0x3EC]) = v58 ^ 0x34E61783;
  LODWORD(v58) = dword_1002277E0[BYTE3(v58) ^ 0x59];
  HIDWORD(v2) = v58 ^ 0x164;
  LODWORD(v2) = v58 ^ 0x94CC7A00;
  LODWORD(v58) = (v2 >> 9) - 1037548371 + (~(2 * (v2 >> 9)) | 0x7BAF76A7);
  v177 = (((2 * v58) ^ 0x84508958) - ((2 * ((2 * v58) ^ 0x84508958)) & 0x156167C8) + 179352549) & 0x32119686 ^ 0x10110602;
  LODWORD(v58) = ((v177 | 0x4CF3F86F) - (v177 | 0xB30C0790) - 1291057264) ^ v58;
  HIDWORD(v2) = v58 ^ 0xFFFFFFC7;
  LODWORD(v2) = v58 ^ 0x9D5EBF00;
  v178 = v166 ^ v61;
  v179 = v172 ^ dword_100225E80[v174] ^ v166 ^ v61 ^ (v175 - ((2 * v175 + 1896307116) & 0x673EB480) - 333248746) ^ v52 ^ ((v2 >> 8) - ((2 * (v2 >> 8)) & 0xDDF6CE72) - 285513927);
  v180 = v179 ^ v35 ^ v176;
  v181 = dword_1002277E0[HIBYTE(v180) ^ 0x4A];
  v182 = *(unsigned __int8 *)(STACK[0x5C0] + 13);
  STACK[0x388] = v182;
  LODWORD(STACK[0x380]) = (v182 ^ 0x3F) - 12 * ((171 * (v182 ^ 0x3F)) >> 11);
  HIDWORD(v2) = v181 ^ 0x164;
  LODWORD(v2) = v181 ^ 0x94CC7A00;
  v183 = (v2 >> 9) - ((2 * (v2 >> 9)) & 0xC5E19B6) + 103746779;
  v184 = (((2 * v183) ^ 0xC5E19B6) - ((2 * ((2 * v183) ^ 0xC5E19B6)) & 0x20B46034) + 811216923) & 0x32119686 ^ v183;
  HIDWORD(v2) = v184 ^ 0x5B;
  LODWORD(v2) = v184 ^ 0x37BB8B00;
  v185 = v2 >> 8;
  LODWORD(v182) = dword_1002277E0[BYTE1(v180) ^ 0x4E];
  HIDWORD(v2) = v182 ^ 0x164;
  LODWORD(v2) = v182 ^ 0x94CC7A00;
  LODWORD(v182) = (v2 >> 9) - ((2 * (v2 >> 9)) & 0xDC134838) + 1846125596;
  LODWORD(v58) = ((2 * v182) ^ 0xDC134838) - ((2 * ((2 * v182) ^ 0xDC134838)) & 0xC920210) + 1179189512;
  LODWORD(v182) = ((v58 & 0x32119686 ^ 0x8684)
                 + (v58 & 0x22009482 ^ 0xAE2C505B)
                 - ((v58 & 0x32119686 ^ 0x8684) & 0x22009482)) & 0xFE1FFFFE ^ v182;
  HIDWORD(v2) = v182 ^ 0x8061C0;
  LODWORD(v2) = v182 ^ 0xC3FFFFFF;
  LODWORD(v182) = (v2 >> 24) - ((2 * (v2 >> 24)) & 0xC7222974) + 1670452410;
  LODWORD(v58) = dword_1002277E0[((BYTE2(v180) ^ 0xA4 | 0x2D69B186) - (BYTE2(v180) ^ 0xA4 | 0xD2964E79) - 761901447) ^ 0x2D69B193];
  HIDWORD(v2) = v58 ^ 0x164;
  LODWORD(v2) = v58 ^ 0x94CC7A00;
  LODWORD(v58) = (v2 >> 9) - ((2 * (v2 >> 9)) & 0x5CDDD016) + 779020299;
  v186 = ((2 * v58) ^ 0x5CDDD016) - ((2 * ((2 * v58) ^ 0x5CDDD016)) & 0x3AD65894) + 1567304778;
  v187 = (v186 & 0x32108406 ^ 0x8E2C697D) + (v186 & 0x11280 ^ 0x10201) - 2;
  LODWORD(v58) = ((v187 & 0x22034BF8 ^ 0x410102D1) + (v187 ^ 0x3E4A6D2E) - ((v187 ^ 0x3E4A6D2E) & 0xA2634BF8)) ^ v58;
  HIDWORD(v2) = v58 ^ 0x3620;
  LODWORD(v2) = v58 ^ 0x6CEF0000;
  LODWORD(v58) = (v2 >> 16) - ((2 * (v2 >> 16)) & 0xEA5E16E0) + 1966017392;
  LODWORD(STACK[0x378]) = v180;
  LOWORD(v187) = (v180 & 0xB6 ^ 0xF1A7) + (v180 & 0x49) - 1;
  v188 = dword_1002277E0[((v187 & 0x1F5 ^ 0x9418AEC0) + (v187 & 0xA ^ 0x20014003) - 1) ^ 0xB419EF66];
  HIDWORD(v2) = v188 ^ 0x164;
  LODWORD(v2) = v188 ^ 0x94CC7A00;
  v189 = (v2 >> 9) - ((2 * (v2 >> 9)) & 0x1CC9F41A) + 241498637;
  v190 = v189 ^ (((2 * v189) ^ 0x1CC9F41A) - ((2 * ((2 * v189) ^ 0x1CC9F41A)) & 0x3130F534) + 949516955) & 0x32119686 ^ (v185 - 444569665 + (~(2 * v185) | 0x34FF3083)) ^ v182 ^ v179 ^ 0xB8147BC0 ^ 0x21B39616 ^ v58;
  LODWORD(STACK[0x37C]) = v190;
  v191 = v179 ^ v35 ^ 0x2C51AF9B;
  LODWORD(STACK[0x404]) = v191;
  LODWORD(v35) = STACK[0x680];
  LODWORD(STACK[0x458]) = (LODWORD(STACK[0x680]) ^ 0x24B15DED ^ v169)
                        - ((2 * (LODWORD(STACK[0x680]) ^ 0x24B15DED ^ v169) + 132102218) & 0x4F8DE94)
                        - 227783825;
  v192 = v179 ^ v168;
  LODWORD(v52) = v190 ^ v179 ^ v168;
  LODWORD(v14) = v52 ^ v191 ^ 0x6099139C;
  v193 = STACK[0x510];
  LODWORD(v58) = LODWORD(STACK[0x510]) ^ 0xD79DE9B8;
  LODWORD(v182) = ((2 * ((v52 ^ v191 ^ 0x99532C3) + v58)) & 0x43FEFD5C)
                + (((v52 ^ v191 ^ 0x99532C3) + v58) ^ 0xA1FF7EAE);
  LODWORD(STACK[0x478]) = v182 - ((2 * v182 + 589812622) & 0x3951FB5E) + 1312614262;
  v194 = STACK[0x464];
  v195 = LODWORD(STACK[0x464]) ^ 0xDAB597A7;
  v196 = STACK[0x540];
  v197 = (LODWORD(STACK[0x540]) ^ 0x8BAF0A15)
       + v195
       + 1
       - ((2 * ((LODWORD(STACK[0x540]) ^ 0x8BAF0A15) + v195 + 1)) & 0xD76C9784)
       - 340374590;
  v198 = STACK[0x5D0];
  LODWORD(v182) = (LODWORD(STACK[0x5D0]) ^ 0xB0643DB7) + 1299289891;
  v199 = v182 ^ 0xBDF2BFDF;
  v200 = (2 * v182) & 0x7BE57FBE;
  LODWORD(v19) = v126;
  v201 = v126 ^ 0xC41F6F1C;
  LODWORD(v182) = ((2 * ((v35 ^ 0xDE60BDF) + (v126 ^ 0xC41F6F1C) + 1)) & 0x8E6DBF7A)
                + (((v35 ^ 0xDE60BDF) + (v126 ^ 0xC41F6F1C) + 1) ^ 0x4736DFBD);
  v202 = STACK[0x500];
  v203 = (LODWORD(STACK[0x500]) ^ 0x5C2D1783) + (v61 ^ 0xF050DED) + 1;
  v204 = v182 - ((2 * v182 + 1168422830) & 0x7203CD0C) - 606846371;
  v205 = v178 ^ 0xE0258B25;
  LODWORD(STACK[0x450]) = (LODWORD(STACK[0x668]) ^ 0x48BF0429 ^ v178 ^ 0xE0258B25)
                        - ((2 * (LODWORD(STACK[0x668]) ^ 0x48BF0429 ^ v178 ^ 0xE0258B25) - 772342212) & 0xDB363C32)
                        - 694772425;
  LODWORD(STACK[0x5B0]) = v199 + v200 + 1108164641 + v195;
  LODWORD(STACK[0x374]) = v52 ^ 0xBBA76913;
  v206 = ((2 * v203) & 0x73FCF7FC)
       + (v203 ^ 0x39FE7BFE)
       - ((2 * (((2 * v203) & 0x73FCF7FC) + (v203 ^ 0x39FE7BFE)) + 1952407130) & 0x5E369638)
       + 1766521417;
  LODWORD(STACK[0x470]) = (LODWORD(STACK[0x5E0]) ^ 0x605134F1 ^ v52 ^ 0xBBA76913)
                        - ((2 * (LODWORD(STACK[0x5E0]) ^ 0x605134F1 ^ v52 ^ 0xBBA76913) + 148052344) & 0x578A98E0)
                        - 265365204;
  LODWORD(v35) = v196;
  LODWORD(STACK[0x4F0]) = (v196 ^ 0x135F363B ^ LODWORD(STACK[0x4F0]))
                        - ((2 * (v196 ^ 0x135F363B ^ LODWORD(STACK[0x4F0])) + 843590444) & 0xCA6C1024)
                        - 27648600;
  LODWORD(v52) = v180 ^ 0xE1445727 ^ v14;
  v207 = (v192 ^ 0x188E48DA ^ v52) - ((2 * (v192 ^ 0x188E48DA ^ v52) - 1181361762) & 0x87BFA258) + 548060667;
  v208 = ((2 * ((v179 ^ 0xD46DE7FF) + (v192 ^ 0x882522F2) + 1)) & 0xB7BFFDD6)
       + (((v179 ^ 0xD46DE7FF) + (v192 ^ 0x882522F2) + 1) ^ 0x5BDFFEEB);
  v209 = ((2 * ((v61 ^ 0xF050DED) + v201)) & 0x7BFFDF76)
       + (((v61 ^ 0xF050DED) + v201) ^ 0xBDFFEFBB)
       - 2
       * ((((2 * ((v61 ^ 0xF050DED) + v201)) & 0x7BFFDF76) + (((v61 ^ 0xF050DED) + v201) ^ 0xBDFFEFBB) + 1191752630) & 0x7E31C8BB ^ (((v61 ^ 0xF050DED) + v201) ^ 0xBDFFEFBB) & 1)
       - 986022800;
  LODWORD(STACK[0x468]) = v208 - ((2 * v208 + 1662954196) & 0x5BB32B74) - 546772188;
  v210 = ((2 * ((v178 ^ 0xDAC07C61) + (LODWORD(STACK[0x5A0]) ^ 0x9205180))) & 0xFDBA7C30)
       + (((v178 ^ 0xDAC07C61) + (LODWORD(STACK[0x5A0]) ^ 0x9205180)) ^ 0x7EDD3E18);
  v211 = -2003259451 - v210 - ((1207580852 - 2 * v210) & 0xC93726D6);
  v212 = v193;
  v213 = STACK[0x3F8];
  v214 = (v193 ^ 0x24B63371 ^ v213) - ((2 * (v193 ^ 0x24B63371 ^ v213) + 692771284) & 0x4E6B5C38) + 2077956870;
  v215 = STACK[0x430];
  v216 = ((v58 + 813040745) ^ 0xFFFD7BFE)
       + ((2 * (v58 + 813040745)) & 0xFFFAF7FC)
       + 164401
       + (LODWORD(STACK[0x430]) ^ 0x22A46179)
       + 465;
  LODWORD(v182) = v179 ^ 0xB8147BC0 ^ v198;
  LODWORD(v58) = v198 ^ v214 ^ v211 ^ 0x87D6679D;
  v217 = v212 ^ 0x7E2E181D;
  v218 = LODWORD(STACK[0x680]) ^ 0x40D6534E;
  v219 = LODWORD(STACK[0x5A0]) ^ 0xBBEFF6EE;
  LODWORD(STACK[0x2B8]) = v209;
  LODWORD(STACK[0x2B4]) = v207;
  v220 = v207 ^ v209;
  LODWORD(STACK[0x540]) = v35 ^ 0xC69F5284 ^ v220;
  LODWORD(STACK[0x44C]) = v218 ^ v220;
  LODWORD(STACK[0x510]) = v219 ^ v220;
  LODWORD(STACK[0x420]) = v202 ^ 0x111D4F12 ^ v220;
  v221 = v194 ^ 0xB591EE6F;
  v222 = v19 ^ 0x4633D902;
  LODWORD(STACK[0x3BC]) = v61 ^ 0x8C1E4CBD;
  v223 = LODWORD(STACK[0x5B0]) - ((2 * LODWORD(STACK[0x5B0])) & 0x26379758) - 1826894932;
  v224 = v216 - ((2 * v216) & 0x88F9105A) + 1149012013;
  LODWORD(STACK[0x464]) = v224;
  v225 = v224 ^ v223;
  v226 = v224 ^ v223 ^ 0x20B7B25C ^ v205;
  LODWORD(STACK[0x3B8]) = v179 ^ 0xC801A12F;
  LODWORD(STACK[0x3B0]) = v192 ^ 0x6BB69BDD;
  LODWORD(STACK[0x500]) = v223;
  LODWORD(STACK[0x398]) = v223 ^ v211;
  v227 = v223 ^ v211 ^ 0x1E8C7998 ^ v14;
  LODWORD(STACK[0x428]) = v197 ^ 0x2A20DF55;
  v228 = v227 + (v197 ^ 0x2A20DF55);
  v229 = 2 * ((v227 & (v197 ^ 0x2A20DF55)) - ((2 * (v227 & (v197 ^ 0x2A20DF55))) & 0x5BDECB14)) - 606156012;
  LODWORD(v61) = 2 * &unk_10023F4C0;
  LODWORD(STACK[0x430]) = v61;
  v230 = (&unk_10023F4C0 ^ 0x7DFFC7FD) - 2113914877 + (v61 & 0xFBFF8FE0);
  v231 = ((2 * v228) & 0xDF7AEFDE) + (v228 ^ 0x6FBD77EF) + (v229 ^ 0xEFC68A1D) + ((2 * v229) & 0x97CF7DEC ^ 0x6872EBD7);
  LODWORD(STACK[0x39C]) = v231 - ((2 * v231 - 1202418158) & 0xD4B0F326) - 964509540;
  v232 = LODWORD(STACK[0x408]) ^ v225;
  LODWORD(STACK[0x2CC]) = v197 ^ 0x30FA0595;
  v233 = v223 ^ v211 ^ v197 ^ 0x30FA0595;
  LODWORD(v52) = v52 ^ v233;
  v234 = ((v230 ^ 0x37EDFFFF) + ((2 * v230) & 0x6FDBFFFE) - 938344447 + (v232 ^ 0xA6276776 ^ v52)) ^ 0x57D7FEBA;
  v235 = LODWORD(STACK[0x640]) ^ 0x13E179D2;
  v236 = LODWORD(STACK[0x410]) ^ 0xE52335F;
  LODWORD(STACK[0x3AC]) = LODWORD(STACK[0x404]) ^ 0x812A0FE1;
  LODWORD(STACK[0x3A0]) = v52 ^ 0x97A991BC;
  LODWORD(v52) = LODWORD(STACK[0x418]) ^ 0xDB85809A;
  LODWORD(STACK[0x2C8]) = v206;
  LODWORD(STACK[0x418]) = v222 ^ v206 ^ v204;
  LODWORD(STACK[0x408]) = v215 ^ 0xA088D767 ^ v206 ^ v204;
  LODWORD(STACK[0x410]) = v236 ^ v206 ^ v204;
  LODWORD(STACK[0x404]) = v52 ^ v206 ^ v204;
  LODWORD(v52) = LODWORD(STACK[0x3F0]) ^ v225;
  v237 = (v234 + 982110410) ^ v52;
  v238 = v52 ^ 0xCECD9E8;
  v239 = v225 ^ 0x74CBEC8B ^ LODWORD(STACK[0x3EC]);
  v240 = LODWORD(STACK[0x660]) ^ v211 ^ 0xC5E76D7E;
  v241 = LODWORD(STACK[0x424]) ^ 0x82496324;
  v242 = LODWORD(STACK[0x678]) ^ v211 ^ 0x411498C5;
  LODWORD(STACK[0x480]) = v211;
  v243 = LODWORD(STACK[0x670]) ^ v211 ^ 0xEB2327B1;
  v244 = v182 ^ 0x216E6C22;
  LODWORD(STACK[0x2AC]) = v214;
  v245 = v182 ^ 0x216E6C22 ^ v214;
  v246 = v240 ^ v245;
  v247 = v242 ^ v245;
  v248 = v243 ^ v245;
  LODWORD(STACK[0x2BC]) = v182;
  v249 = v58 ^ v182;
  if ((v237 & 1) != 0)
    v250 = v246;
  else
    v250 = v249;
  LODWORD(STACK[0x3F0]) = v250;
  if ((v237 & 1) != 0)
    v251 = v249;
  else
    v251 = v247;
  LODWORD(STACK[0x678]) = v251;
  if ((v237 & 1) != 0)
    v252 = v248;
  else
    v252 = v246;
  LODWORD(STACK[0x670]) = v252;
  if ((v237 & 1) != 0)
    v253 = v247;
  else
    v253 = v248;
  LODWORD(STACK[0x3EC]) = v253;
  v254 = LODWORD(STACK[0x608]) ^ 0x2FE50441;
  v255 = LODWORD(STACK[0x5F0]) ^ 0x5295A02B;
  LODWORD(STACK[0x2C0]) = v204;
  v256 = LODWORD(STACK[0x458]) ^ v204;
  LODWORD(STACK[0x680]) = v256;
  v257 = v235 ^ v256;
  v258 = v254 ^ v256;
  if ((v237 & 1) != 0)
    v259 = v217 ^ v256;
  else
    v259 = v257;
  LODWORD(STACK[0x5E0]) = v259;
  if ((v237 & 1) != 0)
    v260 = v258;
  else
    v260 = v217 ^ v256;
  LODWORD(STACK[0x3E8]) = v260;
  v261 = v255 ^ v256;
  if ((v237 & 1) != 0)
    v262 = v257;
  else
    v262 = v261;
  LODWORD(STACK[0x3E4]) = v262;
  if ((v237 & 1) != 0)
    v263 = v261;
  else
    v263 = v258;
  LODWORD(STACK[0x5A0]) = v263;
  v264 = LODWORD(STACK[0x590]) ^ 0xB29E4D2F;
  v265 = LODWORD(STACK[0x550]) ^ 0x957532A2;
  v266 = LODWORD(STACK[0x4C0]) ^ 0x11729AC1;
  v267 = LODWORD(STACK[0x530]) ^ 0x234E11C2;
  LODWORD(STACK[0x2B0]) = v244;
  v268 = v244 ^ LODWORD(STACK[0x4F0]);
  LODWORD(STACK[0x3C4]) = v268;
  v269 = v264 ^ v268;
  v270 = v265 ^ v268;
  v271 = v266 ^ v268;
  if ((v237 & 1) != 0)
    v272 = v269;
  else
    v272 = v270;
  LODWORD(STACK[0x590]) = v272;
  if ((v237 & 1) != 0)
    v273 = v270;
  else
    v273 = v271;
  LODWORD(STACK[0x640]) = v273;
  if ((v237 & 1) != 0)
    v274 = v271;
  else
    v274 = v267 ^ v268;
  LODWORD(STACK[0x550]) = v274;
  if ((v237 & 1) != 0)
    v275 = v267 ^ v268;
  else
    v275 = v269;
  LODWORD(STACK[0x608]) = v275;
  v276 = LODWORD(STACK[0x450]) ^ v223;
  v277 = v241 ^ v276;
  v278 = LODWORD(STACK[0x668]) ^ 0xE281755A ^ v276;
  if ((v237 & 1) != 0)
    v279 = v213 ^ 0x63F05CFE ^ v276;
  else
    v279 = v277;
  LODWORD(STACK[0x530]) = v279;
  if ((v237 & 1) != 0)
    v280 = v278;
  else
    v280 = v213 ^ 0x63F05CFE ^ v276;
  LODWORD(STACK[0x3DC]) = v280;
  if ((v237 & 1) != 0)
    v281 = v221 ^ v276;
  else
    v281 = v278;
  LODWORD(STACK[0x4C0]) = v281;
  if ((v237 & 1) != 0)
    v282 = v277;
  else
    v282 = v221 ^ v276;
  LODWORD(STACK[0x3D8]) = v282;
  v283 = v232 ^ 0x35E482D;
  LODWORD(STACK[0x3B4]) = v225;
  v284 = v225 ^ 0x4FBE4964 ^ LODWORD(STACK[0x3D4]);
  v285 = v225 ^ 0xC748EFE0 ^ LODWORD(STACK[0x3E0]);
  LODWORD(STACK[0x3A4]) = LODWORD(STACK[0x3C8]) ^ 0x1DD48ADA;
  if ((v237 & 1) != 0)
    v286 = v283;
  else
    v286 = v238;
  LODWORD(STACK[0x3D4]) = v286;
  if ((v237 & 1) == 0)
    v238 = v284;
  LODWORD(STACK[0x5F0]) = v238;
  if ((v237 & 1) != 0)
    v287 = v284;
  else
    v287 = v285;
  LODWORD(STACK[0x3C8]) = v287;
  if ((v237 & 1) != 0)
    v288 = v285;
  else
    v288 = v283;
  LODWORD(STACK[0x5D0]) = v288;
  LODWORD(STACK[0x3C0]) ^= 0xB8663ADu;
  v289 = v225 ^ 0x3305132A ^ LODWORD(STACK[0x3A8]);
  v290 = v225 ^ 0xE8A0E425 ^ LODWORD(STACK[0x394]);
  if ((v237 & 1) != 0)
    v291 = v226;
  else
    v291 = v239;
  LODWORD(STACK[0x424]) = v291;
  if ((v237 & 1) != 0)
    v292 = v239;
  else
    v292 = v289;
  LODWORD(STACK[0x668]) = v292;
  if ((v237 & 1) == 0)
    v289 = v290;
  LODWORD(STACK[0x394]) = v289;
  if ((v237 & 1) != 0)
    v293 = v290;
  else
    v293 = v226;
  LODWORD(STACK[0x660]) = v293;
  LODWORD(STACK[0x3A8]) = LODWORD(STACK[0x378]) ^ 0x92A79226;
  LODWORD(STACK[0x384]) = v233;
  v294 = v233 ^ 0xBE5E21D3 ^ LODWORD(STACK[0x374]);
  v295 = v233 ^ 0xE40B5D6B ^ LODWORD(STACK[0x37C]);
  v296 = byte_10021AFD0[STACK[0x498] ^ 0x1D];
  v297 = v296 - ((2 * v296 - 48) & 0xFFFFFFB6) - 61;
  v298 = ((((v297 >> 4) & 4 ^ v297 ^ 0x27) - ((2 * ((v297 >> 4) & 4 ^ v297 ^ 0x27)) & 0x9A)) << 24) - 855638016;
  v299 = (v298 ^ 0xCD000000) - ((2 * v298) & 0x24000000) + 304603734;
  v300 = byte_100224DF0[STACK[0x4A0] ^ 0x15];
  HIDWORD(v301) = ~v300;
  LODWORD(v301) = (v300 ^ 0x52) << 24;
  v302 = ((((((v301 >> 25) - ((2 * (v301 >> 25)) & 0x56) + 43) ^ 0xB8)
          - ((2 * (((v301 >> 25) - ((2 * (v301 >> 25)) & 0x56) + 43) ^ 0xB8)) & 0xC4)) << 16)
        - 1654521856) ^ 0x9D620000;
  v303 = v302 - ((2 * v302) & 0xC120000) + 1175050791;
  v304 = (v303 & 0x100000 | 0xB9EDBFFB) - (v303 & 0xB50000 | 0x3940B97B) + (v303 & 0x100000 | 0x9008158);
  v305 = (((v303 & 0x4A0000 ^ 0x3FFFFC) + 6967676) & 0x4A0000 | v299 & 0xE9000000) ^ 0x20000;
  v306 = ((v304 & 0x6AC40000 ^ 0x2A461AA3 | v304 & 0x95310000) - 1) ^ 0xA3E21AA2 | (((v299 & 0x16000000 ^ 0x82875DA7) & 0x14034020 ^ 0x5C188243 | (v299 & 0x16000000 ^ 0x82875DA7) & 0x2841D80)
                                                                                  - 1) ^ 0x4C9FDFE2;
  v307 = (v306 - ((2 * v306) & 0xC58D8566) - 490290509) ^ 0xE2C6C2B3 | (v305 - ((2 * v305) & 0xC2140000) - 408180612) ^ 0xE7ABA87C;
  v308 = byte_10023A140[STACK[0x4E0] ^ 0xD8] ^ 3;
  v309 = (((v308 - ((2 * v308) & 0x10A)) << 16) - 1736114176) ^ 0x98850000;
  v310 = byte_10023F2C0[STACK[0x4D0] ^ 0x79] ^ 0x7C;
  v311 = (v309 - ((2 * v309) & 0x47680000) + 1672740882) ^ 0x63B40012 | (v310 - ((2 * v310) & 0x32) - 1391414247) ^ 0xAD10B419;
  v312 = byte_10021AFD0[STACK[0x4B0] ^ 0x68];
  v313 = v312 - ((2 * v312 + 80) & 0x56);
  v314 = byte_10021AFD0[*(unsigned __int8 *)(STACK[0x5C0] + 11) ^ 0x88];
  v315 = v314 - 2 * ((v314 + 8) & 0x1D ^ v314 & 1) - 124;
  v316 = (v307 - ((2 * v307) & 0x757400E4) - 1162215310) ^ 0xBABA0072 | (((v315 ^ (v315 >> 4) & 4) ^ 0x1C)
                                                                       - ((2 * (v315 ^ (v315 >> 4) & 4 ^ 0x1C)) & 0x34)
                                                                       - 1652147430) ^ 0x9D863B1A;
  v317 = v316 - ((2 * v316) & 0xF7D7AC04);
  v318 = byte_100224DF0[STACK[0x388] ^ 0xBE];
  HIDWORD(v301) = ~v318;
  LODWORD(v301) = (v318 ^ 0x52) << 24;
  v319 = ((v301 >> 25) - ((2 * (v301 >> 25)) & 0x60) - 80) ^ 0xAA;
  v320 = ((((~(2 * v319) | 0xFEB9) + v319) << 16) - 1734082560) ^ 0x98A30000;
  v321 = v320 - ((2 * v320) & 0x1C7A0000);
  v322 = byte_10023A140[STACK[0x560] ^ 0x16] ^ 0x50;
  v323 = (((v322 - ((2 * v322) & 0x178)) << 8) - 753288192) ^ 0xD319BC00;
  v324 = (v313 - 109) ^ 0x76 ^ (93 - (((v313 - 109) >> 4) & 4));
  v325 = (v323 - ((2 * v323) & 0x55D6DC00) - 1427411299) ^ 0xAAEB6E9D | (v324
                                                                       - ((2 * v324) & 0x88)
                                                                       + 548141892) ^ 0x20ABFB44;
  v326 = byte_10021AFD0[*(unsigned __int8 *)STACK[0x5C0] ^ 0x13];
  v327 = v326 - 2 * ((v326 + 8) & 0xB ^ v326 & 1) - 14;
  v328 = v327 ^ 0xA7 ^ (-((v327 >> 4) & 4) - 58);
  v329 = (((v328 - 2 * (v328 & 0x3F)) << 24) + 1056964608) ^ 0x3F000000;
  v330 = (v329 - ((2 * v329) & 0x34000000) + 447706200) ^ 0x1AAF7458 | (v311 - ((2 * v311) & 0x67E44AF2) + 871507321) ^ 0x33F22579;
  v331 = v330 - ((2 * v330) & 0xF3C18E0);
  v332 = byte_10023A140[STACK[0x570] ^ 0x3F] ^ 0xBF;
  v333 = (((v332 - ((2 * v332) & 0x72)) << 24) + 956301312) ^ 0x39000000;
  v334 = (v325 - ((2 * v325) & 0x4186F0CE) - 524060569) ^ 0xE0C37867 | (v333 - ((2 * v333) & 0x9C000000) + 1316771753) ^ 0x4E7C57A9;
  v335 = byte_10023A140[*(unsigned __int8 *)(STACK[0x5C0] + 10) ^ 0x7BLL] ^ 0x6D;
  v336 = (((v335 - ((2 * v335) & 0x108)) << 8) - 1718582272) ^ 0x99908400;
  v337 = (v317 - 68430334) ^ 0xFBEBD602 | (v336 - ((2 * v336) & 0x350ECA00) + 445080869) ^ 0x1A876525;
  v338 = (LODWORD(STACK[0x380]) ^ 0x7F) + 2 * LOBYTE(STACK[0x380]);
  v339 = byte_10023F2C0[*(unsigned __int8 *)(STACK[0x5C0] + 14) ^ 0x57];
  v340 = ((((v339 ^ 0xE6) - ((2 * (v339 ^ 0xE6)) & 0x1A0)) << 8) - 1090138112) ^ 0xBF05D000;
  v341 = byte_10023A140[*(unsigned __int8 *)(STACK[0x5C0] + 5) ^ 0x6BLL] ^ 0x9A;
  v342 = (((v341 - ((2 * v341) & 0xE6)) << 16) - 1955397632) ^ 0x8B730000;
  v343 = (v342 - ((2 * v342) & 0x737E0000) - 1178625739) ^ 0xB9BF9935 | (v334 - ((2 * v334) & 0xF97EC458) - 54566356) ^ 0xFCBF622C;
  v344 = v343 - ((2 * v343) & 0x47405B0A) - 1549783675;
  v345 = (v340 - ((2 * v340) & 0x4355D200) + 1638590891) ^ 0x61AAE9AB | (v321 + 2117927029) ^ 0x7E3D0075;
  v346 = byte_10023A140[*(unsigned __int8 *)(STACK[0x5C0]
                                           + (-117 - v338)
                                           + (v338 - 127)) ^ 0xA4];
  v347 = (((v346 ^ 0xC8) - 2 * (v346 & 3)) << 24) - 2097152000;
  v348 = (v347 ^ 0x83000000) - ((2 * v347) & 0xA0000000);
  v349 = byte_100224DF0[STACK[0x580] ^ 0xF1];
  HIDWORD(v301) = ~v349;
  LODWORD(v301) = (v349 ^ 0x52) << 24;
  v350 = (v301 >> 25) - ((2 * (v301 >> 25)) & 0xFFFFFFE3) + 113;
  v351 = (v345 - ((2 * v345) & 0x452307F2) - 1567521799) ^ 0xA29183F9 | (v348 + 1349925364) ^ 0x507639F4;
  v352 = (v351 - ((2 * v351) & 0x10145B9E) + 134884815) ^ 0x80A2DCF | ((v350 ^ 0xE4)
                                                                     - ((2 * (v350 ^ 0xE4)) & 0x170)
                                                                     - 951140680) ^ 0xC74EBEB8;
  v353 = v352 - ((2 * v352) & 0x11F4DDE8) - 1996853516;
  v354 = byte_10023F2C0[STACK[0x520] ^ 0x5B] ^ 0xCE;
  v355 = (((v354 - ((2 * v354) & 0xFFFFFFEF)) << 8) + 360969984) ^ 0x1583F700;
  v356 = (v355 - ((2 * v355) & 0x7F981400) - 3405159) ^ 0xFFCC0A99 | (v331 - 2019685264) ^ 0x879E0C70;
  v357 = ((((v353 ^ 0x81134DD2) >> (STACK[0x438] & 0x10 ^ 0x10))
         - ((2 * ((v353 ^ 0x81134DD2) >> (STACK[0x438] & 0x10 ^ 0x10))) & 0x6A8CE376)
         - 1253674565) ^ 0xB54671BB) >> (STACK[0x438] & 0x10);
  v358 = (v357 - ((2 * v357) & 0x8C) + 70);
  v359 = (v358 ^ 0x82486946) + (v358 & 0xBB ^ 0x15B014B9) - ((v358 ^ 0x82486946) & 0x24808BB);
  v360 = ((v359 ^ 0x95B07573)
        - 2 * (((v359 ^ 0x95B07573) + 948153558) & 0x28801D3F ^ (v359 ^ 0x95B07573) & 1)
        + 1695812116) ^ dword_100225E80[((v358 ^ 0x75FF8C95 | 0x5F41F0B1) - (v358 ^ 0x75FF8C95 | 0xA0BE0F4E) - 1598156978) ^ 0x2ABE7C4D];
  HIDWORD(v301) = v360 ^ 0xDFA7;
  LODWORD(v301) = v360 ^ 0xAECE0000;
  v361 = (v301 >> 16) - ((2 * (v301 >> 16)) & 0xEFAE390A) - 136897403;
  v362 = dword_100217EF0[v346 ^ 0x6D];
  HIDWORD(v301) = v362 ^ 0xC6;
  LODWORD(v301) = v362 ^ 0xA1F63700;
  LODWORD(v346) = (v301 >> 8) + 1238622422 + ~((2 * (v301 >> 8)) & 0x93A7C1AA);
  LODWORD(v339) = dword_10021B5F0[v339 ^ 0x87];
  HIDWORD(v301) = v339 ^ 0xB5E83C;
  LODWORD(v301) = v339 ^ 0x79000000;
  v363 = v346 ^ dword_100225E80[v350 ^ 0xED] ^ ((v301 >> 24)
                                                               - ((2 * (v301 >> 24)) & 0xD93D0B02)
                                                               - 325155455) ^ (((2 * (v350 ^ 0xA)) & 0x7C)
                                                                             + (v350 ^ 0x6FEF7E34)
                                                                             + 490432070
                                                                             + ((2
                                                                               * ((((2 * (v350 ^ 0xA)) & 0x7C)
                                                                                 + (v350 ^ 0x6FEF7E34)
                                                                                 + 664) & 0x3AF ^ (v350 ^ 0x6FEF7E34 | 0xFFFFFFFD))) ^ 0x21064805)) ^ (v356 - ((2 * v356) & 0x3735B9F6) - 1684349701) ^ v361;
  LODWORD(v339) = v344 ^ 0x53130CF1 ^ v363;
  LODWORD(STACK[0x580]) = v339;
  LODWORD(v339) = (v337 - ((2 * v337) & 0xC59CFB02) - 489783935) ^ 0x2E44399E ^ v339;
  v364 = v339 ^ v353;
  v365 = v339;
  LODWORD(STACK[0x570]) = v339;
  LODWORD(v339) = dword_1002277E0[(((2 * ((v339 ^ v353) ^ 0x55)) | 0x5A52CAE4)
                                 - ((v339 ^ v353) ^ 0x55)
                                 + 1389795982) ^ 0xAD296591];
  HIDWORD(v301) = v339 ^ 0x164;
  LODWORD(v301) = v339 ^ 0x94CC7A00;
  LODWORD(v339) = (v301 >> 9) - ((2 * (v301 >> 9)) & 0x37F7AA86) - 1677994685;
  v366 = ((BYTE1(v364) ^ 0xE | 0xB89E4E64) - (BYTE1(v364) ^ 0xE | 0x4761B19B) + 1197584795) ^ 0x98944864;
  v367 = dword_10021B5F0[(((2 * v366) | 0xE7B7CC6E) - v366 + 203692489) ^ 0xD3D1E016];
  HIDWORD(v301) = v367 ^ 0xB5E83C;
  LODWORD(v301) = v367 ^ 0x79000000;
  v368 = (v301 >> 24) - ((2 * (v301 >> 24)) & 0x38D8869A) - 1670626483;
  v369 = dword_1002277E0[((HIWORD(v364) & 0x8B ^ 0x188) + (HIWORD(v364) & 0x74 ^ 0x31) - 1) ^ 0x183];
  HIDWORD(v301) = v369 ^ 0x164;
  LODWORD(v301) = v369 ^ 0x94CC7A00;
  v370 = (v301 >> 9) - ((2 * (v301 >> 9)) & 0x961711D8) + 1259047148;
  LODWORD(v346) = ((2 * v370) ^ 0x961711D8) - ((2 * ((2 * v370) ^ 0x961711D8)) & 0x1E0C8EFC) + 1862682495;
  LODWORD(v346) = (v346 & 0x32119686 ^ 0x22108686)
                + (v346 & 0x10600 ^ 0x44CB6851)
                - ((v346 & 0x32119686 ^ 0x22108686) & 0x10600);
  v371 = ((v346 & 0x21D3800 ^ 0x4A843121 | v346 & 0x3002C686) - 1) ^ v370;
  HIDWORD(v301) = v371 ^ 0xC0CE;
  LODWORD(v301) = v371 ^ 0x100000;
  LODWORD(v346) = (v301 >> 16) - ((2 * (v301 >> 16)) & 0x4F5C5B8A) - 1481757243;
  v372 = v364 ^ 0x71C9DB05;
  v373 = dword_10021B5F0[HIBYTE(v364) ^ 0x2B];
  HIDWORD(v301) = v373 ^ 0x3C;
  LODWORD(v301) = v373 ^ 0x79B5E800;
  LODWORD(v339) = v339 ^ ((v301 >> 8) - ((2 * (v301 >> 8)) & 0x8F853ADA) - 943547027) ^ v368 ^ (((2 * v339) ^ 0x37F7AA86)
                                                                                              - ((2
                                                                                                * ((2 * v339) ^ 0x37F7AA86)) & 0x180ECBBC)
                                                                                              + 201811423) & 0x32119686 ^ 0xE33AF76D ^ v346;
  v374 = v339 ^ v344;
  LODWORD(v346) = v365 ^ v339 ^ v344;
  LODWORD(STACK[0x520]) = v372;
  v375 = v372 ^ v346 ^ 0x1DA1A8B4;
  v376 = (((2 * (BYTE2(v375) ^ 0xAA)) & 0x1D0) - (BYTE2(v375) ^ 0xAA) - 13540585) ^ 0xDF5BE63F;
  v377 = (((2 * v376) | 0x6E30AC9C) - v376 - 924341838) ^ 0x1772D332;
  v378 = ((BYTE2(v375) ^ 0x3D) + (HIWORD(v375) & 0xF4 ^ 0xB4B76AC0) - ((BYTE2(v375) ^ 0x3D) & 0xF4)) ^ 0xB4B77AF4;
  v379 = (v377 - ((2 * v377 + 17258924) & 0x3BCDE0E) + 2053250013) ^ dword_100225E80[(((2 * v378) | 0x22F1F880)
                                                                                    - v378
                                                                                    - 293141568) ^ 0x1178EC64];
  HIDWORD(v301) = v379 ^ 0xED9E;
  LODWORD(v301) = v379 ^ 0xC3800000;
  v380 = (v301 >> 16) - ((2 * (v301 >> 16)) & 0xD93DCB9E) + 1822352847;
  v381 = ((2 * (BYTE1(v375) ^ 0xE8)) & 0x174) - (BYTE1(v375) ^ 0xE8) - 1473103291;
  v382 = ((v381 & 0x21873 ^ 0x50C08072) + (v381 ^ 0x20233A85) - ((v381 ^ 0x20233A85) & 0x88010073)) ^ 0x50D29843;
  v383 = dword_10021B5F0[((v372 ^ v346) >> 24) ^ 0x9A];
  HIDWORD(v301) = v383 ^ 0x3C;
  LODWORD(v301) = v383 ^ 0x79B5E800;
  v384 = (v301 >> 8) - ((2 * (v301 >> 8)) & 0x28D974AE) + 342669911;
  v385 = (v382 - ((2 * v382 + 285694380) & 0x128A2368) - 2117550454) ^ dword_100225E80[((BYTE1(v375) ^ 0x124C0106 | 0xDBBD1697)
                                                                                      - (BYTE1(v375) ^ 0x124C0106 | 0x2442E968)
                                                                                      + 608364904) ^ 0xC9F1176E];
  HIDWORD(v301) = v385 ^ 0x1B932D;
  LODWORD(v301) = v385 ^ 0xCB000000;
  LODWORD(v339) = dword_100217EF0[(v372 ^ v346) ^ 0x4C] ^ v339;
  LODWORD(STACK[0x380]) = v363;
  v386 = v384 ^ v339 ^ v363 ^ ((v301 >> 24) - ((2 * (v301 >> 24)) & 0x7BE70440) - 1108114912) ^ v380;
  v387 = v386 ^ v374;
  LODWORD(STACK[0x4D0]) = v386 ^ 0xC458DA69;
  v388 = v386 ^ v374 ^ 0x76850118 ^ v372;
  v389 = (((v388 >> 8) & 0xE1) + ((v388 >> 8) & 0x1E ^ 0x86561605) - 1) ^ 0x8296159A;
  v390 = ((2 * (v388 >> 8)) ^ 0x319BA) - ((2 * ((2 * (v388 >> 8)) ^ 0x319BA)) & 0x1B0) + 728;
  v391 = (((v390 & 0x1AC ^ 0x3200EAC) + (v390 & 0x1A0 ^ 0x844CB103) - ((v390 & 0x1AC ^ 0x3200EAC) & 0x5A0)) ^ 0x876CBA07)
       + (((v389 | 0x237AEBC3) - (v389 | 0xDC85143C) - 595258308) ^ 0x1F39449E);
  v392 = (v391 - ((2 * v391) & 0x528122) - 1071038319) ^ dword_100225E80[BYTE1(v388) ^ 0xF2];
  HIDWORD(v301) = v392 ^ 0x77C208;
  LODWORD(v301) = v392 ^ 0x42000000;
  LODWORD(v339) = dword_1002277E0[HIBYTE(v388) ^ 0x53];
  v393 = (v301 >> 24) - ((2 * (v301 >> 24)) & 0xC5631E66) + 1655803699;
  HIDWORD(v301) = v339 ^ 0x164;
  LODWORD(v301) = v339 ^ 0x94CC7A00;
  LODWORD(v339) = (v301 >> 9) - ((2 * (v301 >> 9)) & 0xC1AEA250) + 1624723752;
  v394 = ((2 * v339) ^ 0xC1AEA250) + 2115632990 - 2 * (((2 * v339) ^ 0xC1AEA250) & 0x1E1A079C ^ (2 * v339) & 0xC) + 2098;
  v395 = ((v394 & 0x30000686 ^ 0x348A0933 | v394 & 0x2119000) - 1) ^ 0x36B82FB6;
  LODWORD(v339) = (v395 - ((2 * v395) & 0x40616D08) - 315572332) ^ v339;
  HIDWORD(v301) = v339 ^ 0x3A;
  LODWORD(v301) = v339 ^ 0xBC415900;
  LODWORD(v339) = (v301 >> 8) - ((2 * (v301 >> 8)) & 0x358DC0E4) + 449241202;
  v396 = ((v387 ^ 0x18 ^ v372 ^ 0x39)
        + (v388 & 0xD4 ^ 0xE9AF2FC4)
        - ((v387 ^ 0x18 ^ v372 ^ 0x39) & 0xD4)) ^ 0xC9BB2C87;
  v397 = v388 ^ 0xFB477B1A;
  v398 = dword_100217EF0[BYTE2(v388) ^ 0x20];
  HIDWORD(v301) = v398 ^ 0x37C6;
  LODWORD(v301) = v398 ^ 0xA1F60000;
  v399 = dword_10021B5F0[((v396 | 0xFB230DB5) - (v396 | 0x4DCF24A) + 81588810) ^ 0xDB370E9F] ^ ((v301 >> 16)
                                                                                              - ((2 * (v301 >> 16)) & 0xDA65BB12)
                                                                                              - 315433591) ^ v386 ^ 0xC458DA69 ^ v393 ^ 0xAD1B3303 ^ v339;
  v400 = v346 ^ 0x246EE62C ^ v387 ^ 0x76850118;
  LODWORD(STACK[0x378]) = v400;
  LODWORD(STACK[0x4B0]) = v387 ^ 0x18ACDBF0;
  v401 = v400 ^ v387 ^ 0x18ACDBF0 ^ v399;
  v402 = v401 ^ v397;
  LODWORD(v339) = ((2 * (v401 ^ v397)) & 0xB8) + ((v401 ^ v397) ^ 0xFFFFFFDC) - 2671708;
  v403 = ((v339 & 0x60901620 ^ 0x28C621) + (v339 & 0x30509DF) + 0x7FFFFFFF) ^ 0xE3BDDD7D;
  v404 = STACK[0x39C];
  if ((v237 & 1) != 0)
    v405 = STACK[0x39C];
  else
    v405 = v294;
  LODWORD(STACK[0x3F8]) = v405;
  if ((v237 & 1) != 0)
    v406 = v294;
  else
    v406 = v295;
  LODWORD(STACK[0x4A0]) = v406;
  v407 = STACK[0x3A0];
  if ((v237 & 1) != 0)
    v404 = STACK[0x3A0];
  LODWORD(STACK[0x498]) = v404;
  v408 = dword_1002277E0[v403];
  if ((v237 & 1) != 0)
    v407 = v295;
  LODWORD(STACK[0x3E0]) = v407;
  HIDWORD(v409) = v408 ^ 0x164;
  LODWORD(v409) = v408 ^ 0x94CC7A00;
  LODWORD(STACK[0x560]) = LODWORD(STACK[0x440]) ^ 0x790F46E8;
  v410 = (v409 >> 9) - ((2 * (v409 >> 9)) & 0xADD60F58) + 1458243500;
  v411 = (((2 * v410) ^ 0xADD60F58) - 2 * (((2 * v410) ^ 0xADD60F58) & 0x9DA8FBE ^ (2 * v410) & 2) + 702189501) & 0x32119686 ^ 0x22008406;
  v412 = dword_1002277E0[((BYTE1(v402) ^ 0x60A388C0) - ((2 * (BYTE1(v402) ^ 0x60A388C0)) & 0x40000046) + 542114339) ^ 0x40F38AD2];
  HIDWORD(v409) = v412 ^ 0x164;
  LODWORD(v409) = v412 ^ 0x94CC7A00;
  v413 = (v409 >> 9) - ((2 * (v409 >> 9)) & 0xA8255094) + 1410508874;
  v414 = ((2 * v413) ^ 0xA8255094) - 2 * (((2 * v413) ^ 0xA8255094) & 0x5C5549E ^ (2 * v413) & 2) + 1170560156;
  v415 = ((v414 & 0x10101282 ^ 0x102010DB) + (v414 & 0x22018404 ^ 0x81810005) - 2) ^ v413;
  HIDWORD(v409) = v415 ^ 0x363B92;
  LODWORD(v409) = v415 ^ 0xC4000000;
  v416 = (v409 >> 24) - ((2 * (v409 >> 24)) & 0x8DB23B96) - 958849589;
  v417 = ((BYTE2(v402) ^ 0x24) + 84203153 + ((2 * (BYTE2(v402) ^ 0x24) + 428) & 0x374 ^ 0xEEFDAFFF)) ^ dword_100225E80[BYTE2(v402) ^ 0xC3];
  HIDWORD(v409) = v417 ^ 0xAB23;
  LODWORD(v409) = v417 ^ 0x4EDF0000;
  v418 = (v409 >> 16) - ((2 * (v409 >> 16)) & 0xD0D69AD8) - 395621012;
  v419 = dword_100217EF0[HIBYTE(v402) ^ 0xF9];
  HIDWORD(v409) = v419 ^ 0xC6;
  LODWORD(v409) = v419 ^ 0xA1F63700;
  v420 = v410 ^ ((v409 >> 8) - ((2 * (v409 >> 8)) & 0xDD090B48) + 1854178724) ^ (((2 * v411) | 0x94B75FCC)
                                                                               - v411
                                                                               - 1247522790) ^ v418 ^ 0x31FC595D ^ v416;
  LODWORD(STACK[0x37C]) = v397;
  v421 = v387 ^ 0x2CC49952 ^ v420 ^ v397;
  v422 = v387 ^ 0x2CC49952 ^ v420;
  v423 = v421 ^ 0xD0E25E58;
  v424 = (BYTE1(v423) ^ 0x87) + ((v423 >> 8) & 0x6F ^ 0x55FC1A68) - ((BYTE1(v423) ^ 0x87) & 0x6F);
  v425 = dword_100217EF0[((v424 & 0x115C0B8E ^ 0x2A00A188) + (v424 ^ 0xD1FD1A26) - ((v424 ^ 0xD1FD1A26) & 0x8000038E)) ^ 0x3F5DAB56];
  HIDWORD(v409) = v425 ^ 0xF637C6;
  LODWORD(v409) = v425 ^ 0xA1000000;
  v426 = (v409 >> 24) - ((2 * (v409 >> 24)) & 0x12DAD50) - 2137598296;
  v427 = ((2 * (BYTE2(v423) ^ 0x8F6EF4C6)) & 0x600093E) - (BYTE2(v423) ^ 0x8F6EF4C6) - 588254368;
  v428 = ((v427 & 0x130101C7 ^ 0xAA2650C0) + (v427 ^ 0x5109070F) - ((v427 ^ 0x5109070F) & 0x1A8951C7)) ^ 0xB927510C;
  v429 = (HIWORD(v423) & 0x79 ^ 0x3E479740) + (HIWORD(v423) & 0x86 ^ 0x85) - 1;
  v430 = (v428 - ((2 * v428 + 17258924) & 0x3893860) - 95926010) ^ dword_100225E80[((v429 & 0xB0B ^ 0x86130902)
                                                                                  + (v429 & 0x4F4 ^ 0x20202465)
                                                                                  - 1) ^ 0xA6332A27];
  v431 = v421 ^ 0x4325780C;
  HIDWORD(v409) = v430 ^ 0x1EA9;
  LODWORD(v409) = v430 ^ 0x439A0000;
  v432 = dword_10021B5F0[HIBYTE(v421) ^ 0x62];
  v433 = (v409 >> 16) - ((2 * (v409 >> 16)) & 0x7E273F48) - 1089232988;
  HIDWORD(v409) = v432 ^ 0x3C;
  LODWORD(v409) = v432 ^ 0x79B5E800;
  v434 = (v409 >> 8) - ((2 * (v409 >> 8)) & 0x8345BEB8) - 1046290596;
  v435 = ((v423 ^ 0x40) - ((2 * v423) & 0x16A) + 166681013) ^ 0x9EF5D15;
  v436 = dword_1002277E0[((v435 | 0x8493D83B) - (v435 | 0x7B6C27C4) + 2070685636) ^ 0x8493DC74];
  HIDWORD(v409) = v436 ^ 0x164;
  LODWORD(v409) = v436 ^ 0x94CC7A00;
  v437 = (v409 >> 9) - ((2 * (v409 >> 9)) & 0x11C804B8) + 149160540;
  v438 = (((2 * v437) ^ 0x11C804B8) - 2 * (((2 * v437) ^ 0x11C804B8) & 0xA9F2F3E ^ (2 * v437) & 6) + 178204472) & 0x32119686 ^ 0x1209362A;
  v439 = v426 ^ v434 ^ v437 ^ v399 ^ v420 ^ v433 ^ 0x61A3064B ^ (((2 * v438) & 0x1201C) - v438 - 1090703631);
  v440 = v439 ^ v401;
  LODWORD(STACK[0x440]) = v439 ^ v401 ^ 0xE056B400;
  v441 = v439 ^ v401 ^ 0xE056B400 ^ v431;
  v442 = ((HIBYTE(v441) ^ 0x69) - 666800576 + ((2 * (HIBYTE(v441) ^ 0x69) + 428) & 0x2D2 ^ 0xCEFCFFFF)) ^ dword_100225E80[HIBYTE(v441) ^ 0x8E];
  HIDWORD(v409) = v442 ^ 0xF0;
  LODWORD(v409) = v442 ^ 0x1DE34300;
  v443 = v409 >> 8;
  v444 = LODWORD(STACK[0x478]) ^ LODWORD(STACK[0x468]);
  v445 = LODWORD(STACK[0x3BC]) ^ v444;
  v446 = STACK[0x4F0];
  v447 = STACK[0x470];
  v448 = LODWORD(STACK[0x470]) ^ LODWORD(STACK[0x4F0]);
  LODWORD(STACK[0x35C]) = v448;
  v449 = LODWORD(STACK[0x3B8]) ^ v448;
  v450 = LODWORD(STACK[0x3B0]) ^ v448;
  v451 = LODWORD(STACK[0x3AC]) ^ v448;
  v452 = LODWORD(STACK[0x3A4]) ^ v444;
  v453 = LODWORD(STACK[0x3C0]) ^ v444;
  LODWORD(STACK[0x36C]) = v445;
  if ((v237 & 1) == 0)
    v445 = v452;
  LODWORD(STACK[0x3C0]) = v445;
  LODWORD(STACK[0x330]) = v453;
  if ((v237 & 1) != 0)
    v454 = v452;
  else
    v454 = v453;
  LODWORD(STACK[0x374]) = v454;
  v455 = LODWORD(STACK[0x3A8]) ^ v448;
  v456 = STACK[0x540];
  if ((v237 & 1) != 0)
    v456 = STACK[0x420];
  LODWORD(STACK[0x3A8]) = v456;
  v457 = STACK[0x44C];
  if ((v237 & 1) == 0)
    v457 = STACK[0x510];
  LODWORD(STACK[0x39C]) = v457;
  v458 = STACK[0x408];
  if ((v237 & 1) != 0)
    v458 = STACK[0x404];
  LODWORD(STACK[0x3A4]) = v458;
  v459 = STACK[0x418];
  if ((v237 & 1) == 0)
    v459 = STACK[0x410];
  LODWORD(STACK[0x3A0]) = v459;
  LODWORD(STACK[0x340]) = v449;
  LODWORD(STACK[0x338]) = v450;
  if ((v237 & 1) != 0)
    v449 = v450;
  LODWORD(STACK[0x3BC]) = v449;
  LODWORD(STACK[0x328]) = v451;
  LODWORD(STACK[0x300]) = v455;
  if ((v237 & 1) == 0)
    v455 = v451;
  LODWORD(STACK[0x3B8]) = v455;
  LODWORD(STACK[0x5C0]) = v237;
  v460 = (v237 & 2) == 0;
  v461 = STACK[0x424];
  v462 = STACK[0x394];
  if ((v237 & 2) != 0)
    v463 = STACK[0x394];
  else
    v463 = STACK[0x424];
  LODWORD(STACK[0x4E0]) = v463;
  if ((v237 & 2) == 0)
    v461 = v462;
  LODWORD(STACK[0x368]) = v461;
  v464 = v443 - ((2 * v443) & 0x47FFCC32) + 603973145;
  v465 = (BYTE2(v441) ^ 0x7D | 0x1F811491) - (BYTE2(v441) ^ 0x7D | 0xE07EEB6E) - 528553106;
  v466 = ((v441 & 0xEC ^ 0x380C4FFB) - (v441 & 0x13)) ^ 0x380C4F55;
  v467 = ((2 * (v441 ^ 0x1E)) & 0x26) - (v441 ^ 0x1E) + 15340;
  v468 = dword_10021B5F0[((v465 & 0xA810143 ^ 0x600D2843) + (v465 ^ 0x1F901718) - ((v465 ^ 0x1F901718) & 0x110143)) ^ 0x6A8C2A51];
  HIDWORD(v469) = v468 ^ 0xE83C;
  LODWORD(v469) = v468 ^ 0x79B50000;
  v470 = dword_100217EF0[(((2 * (BYTE1(v441) ^ 0x40010EC4)) & 0x5E4) - (BYTE1(v441) ^ 0x40010EC4) + 1960668429) ^ 0x34DC6315];
  v471 = (v469 >> 16) - ((2 * (v469 >> 16)) & 0xA651C0A8);
  HIDWORD(v469) = v470 ^ 0xF637C6;
  LODWORD(v469) = v470 ^ 0xA1000000;
  v472 = (v471 - 752295852) ^ dword_100225E80[((v467 & 0x703 ^ 0x2CDA603) + (v467 & 0x8FC ^ 0x8CD) - 1) ^ 0x2CDA574] ^ ((v469 >> 24) - ((2 * (v469 >> 24)) & 0xFAA454E8) - 44946828) ^ (v466 - ((2 * v466 + 1896307116) & 0x51050BDE) + 639517893) ^ v464;
  v473 = v472 ^ v422;
  v474 = v472 ^ v422 ^ 0xEA910A24 ^ v431;
  v475 = dword_1002277E0[HIBYTE(v474) ^ 0x7E];
  HIDWORD(v469) = v475 ^ 0x164;
  LODWORD(v469) = v475 ^ 0x94CC7A00;
  v476 = v472 ^ v422 ^ 0xEA910A24 ^ v440;
  LODWORD(STACK[0x394]) = v476;
  v477 = (v469 >> 9) - ((2 * (v469 >> 9)) & 0x2E1FA1FC) - 1760571138;
  v478 = (((2 * v477) ^ 0x2E1FA1FC) - 2 * (((2 * v477) ^ 0x2E1FA1FC) & 0x183AFF7E ^ (2 * v477) & 2) + 943390589) & 0x32119686 ^ 0x2009402;
  v479 = (((2 * v478) & 0x232008) - v478 - 1295767622) ^ 0xA2CC2CA2;
  v480 = (v479 - ((2 * v479) & 0x20489EF4) + 472141691) ^ v477;
  v481 = (v474 ^ 0xB7)
       + 856067665
       + ((2 * (((v474 ^ 0xB7) + 214) & 0x17B ^ (v474 ^ 0xB7 | 0x7FFFFFFE))) ^ 0x71054003);
  v482 = (((2 * (v474 ^ 0xF3)) | 0x81BC0F38) - (v474 ^ 0xF3) - 1088292764) ^ 0x4A4A1708;
  HIDWORD(v469) = v480 ^ 0x19;
  LODWORD(v469) = v480 ^ 0xA8B70100;
  v483 = (v469 >> 8) - ((2 * (v469 >> 8)) & 0x6E220ED2) + 923862889;
  v484 = dword_1002277E0[((BYTE2(v474) ^ 0x880C026E | 0xCDFA9533) - (BYTE2(v474) ^ 0x880C026E | 0x32056ACC) + 839215820) ^ 0x45F69731];
  HIDWORD(v469) = v484 ^ 0x164;
  LODWORD(v469) = v484 ^ 0x94CC7A00;
  v485 = (v469 >> 9) - ((2 * (v469 >> 9)) & 0xAF34DD9C) + 1469738702;
  v486 = (((2 * v485) ^ 0xAF34DD9C) - ((2 * ((2 * v485) ^ 0xAF34DD9C)) & 0x1FAEFE80) + 802651969) & 0x32119686 ^ v485;
  v487 = v474 ^ 0xD7C240A3;
  LODWORD(STACK[0x350]) = v474 ^ 0xD7C240A3;
  v488 = BYTE1(v474);
  v489 = ((v488 ^ 0x2A) - ((2 * (v488 ^ 0x2A)) & 0x1FC) + 766) ^ 0x2F1;
  HIDWORD(v469) = v486 ^ 0xEF4C;
  LODWORD(v469) = v486 ^ 0x740F0000;
  v490 = (v469 >> 16) - ((2 * (v469 >> 16)) & 0x43F4F276) - 1577420485;
  v491 = (((2 * (v488 ^ 0x7F)) & 0xFFFFFFE3) - (v488 ^ 0x7F) + 1825867278) ^ 0xBEBCE032;
  v492 = (v489 - ((2 * v489 + 1896307116) & 0x48736DC8) + 1555915706) ^ dword_100225E80[((v491 | 0xB33D4374)
                                                                                       - (v491 | 0x4CC2BC8B)
                                                                                       + 1287830667) ^ 0x615525F5];
  HIDWORD(v469) = v492 ^ 0x67347D;
  LODWORD(v469) = v492 ^ 0xA6000000;
  v493 = v490 ^ dword_100225E80[(v482 - ((2 * v482) & 0x97915C2) + 79465185) ^ 0xE289AD6];
  v494 = v472 ^ v439;
  v495 = v493 ^ v472 ^ v439 ^ v481 ^ ((v469 >> 24) - ((2 * (v469 >> 24)) & 0xE883936C) - 197015114) ^ v483;
  v496 = v472 ^ v422 ^ 0x442369EF ^ v495;
  LODWORD(STACK[0x3B0]) = v496;
  v497 = v496 ^ v476;
  v498 = v496 ^ v476 ^ 0x2550FE62;
  v499 = (((v496 ^ v476) ^ 0x62 ^ v487 ^ 0xD1 | 0x79605CDE)
        - ((v496 ^ v476) ^ 0x62 ^ v487 ^ 0xD1 | 0x869FA321)
        - 2036358367) ^ 0xBB6818DC;
  v500 = dword_10021B5F0[((((unsigned __int16)(v496 ^ v476 ^ 0xFE62 ^ v487) >> 8) ^ 0x3C)
                        + (((v498 ^ v487) >> 8) & 0x55 ^ 0x941)
                        - ((((unsigned __int16)(v496 ^ v476 ^ 0xFE62 ^ v487) >> 8) ^ 0x3C) & 0x55555555)) ^ 0x933];
  HIDWORD(v469) = v500 ^ 0xB5E83C;
  LODWORD(v469) = v500 ^ 0x79000000;
  v501 = (v469 >> 24) - ((2 * (v469 >> 24)) & 0xFDF3E32C) + 2130309526;
  v502 = v498 ^ v487 ^ 0x2B1A80F6;
  v503 = ((v498 ^ v487) >> 16) ^ 0xBB;
  v504 = dword_10021B5F0[((v498 ^ v487) >> 24) ^ 0x25];
  HIDWORD(v469) = v504 ^ 0x3C;
  LODWORD(v469) = v504 ^ 0x79B5E800;
  v505 = dword_10021B5F0[(((2 * v499) & 0x8C793438) - v499 - 1178376733) ^ 0x7BCB21D8] ^ ((v469 >> 8)
                                                                                        - ((2 * (v469 >> 8)) & 0xD23B5E9E)
                                                                                        - 383930545);
  v506 = dword_1002277E0[(((2 * v503) & 0xFFFFFFDF) - v503 + 821021968) ^ 0x30EFCDF7];
  HIDWORD(v469) = v506 ^ 0x164;
  LODWORD(v469) = v506 ^ 0x94CC7A00;
  v507 = (v469 >> 9) - ((2 * (v469 >> 9)) & 0xB0912DFC) - 666331394;
  v508 = ((2 * v507) ^ 0xB0912DFC) - ((2 * ((2 * v507) ^ 0xB0912DFC)) & 0x268D6C94) + 1397143114;
  v509 = ((v508 & 0x32119686 ^ 0x2019680)
        + (v508 & 0x20119604 ^ 0x2D94005C)
        - ((v508 & 0x32119686 ^ 0x2019680) & 0x20119604)) ^ 0xBC9D9ED6;
  v510 = (((2 * v509) & 0x208FC554) - v509 + 1673010260) ^ v507;
  HIDWORD(v469) = v510 ^ 0x1520;
  LODWORD(v469) = v510 ^ 0x3B7D0000;
  v511 = v501 ^ v505 ^ ((v469 >> 16) - ((2 * (v469 >> 16)) & 0xC8E40970) + 1685193912);
  v512 = v511 ^ v495 ^ 0xFE941E97;
  v513 = v511 ^ v473 ^ 0x816D895F;
  v514 = v513 ^ v497 ^ 0x2B990279;
  LODWORD(STACK[0x320]) = v513;
  LODWORD(STACK[0x348]) = v514;
  v515 = v502 ^ v514;
  v516 = dword_1002277E0[(((2 * ((v498 ^ v487) ^ 0xF6 ^ v514 ^ 0x1028523F)) & 0x5020AA)
                        - ((v498 ^ v487) ^ 0xF6 ^ v514 ^ 0x1028523F)
                        - 1210921046) ^ 0xA7FA9D06];
  HIDWORD(v469) = v516 ^ 0x164;
  LODWORD(v469) = v516 ^ 0x94CC7A00;
  v517 = (v469 >> 9) - ((2 * (v469 >> 9)) & 0xE74E72AA) + 1940339029;
  v518 = dword_10021B5F0[((v502 ^ v514) >> 24) ^ 0x98];
  v519 = (((2 * v517) ^ 0xE74E72AA) - ((2 * ((2 * v517) ^ 0xE74E72AA)) & 0x1E1E9360) + 789531057) & 0x32119686 ^ 0x32019604;
  HIDWORD(v469) = v518 ^ 0x3C;
  LODWORD(v469) = v518 ^ 0x79B5E800;
  v520 = dword_100217EF0[((((v502 ^ v514) >> 8) & 0x2B)
                        - 1004395777
                        + (((v502 ^ v514) >> 8) & 0xD4 ^ 0x8000011)) ^ 0xCC22232D];
  v521 = (v469 >> 8) - ((2 * (v469 >> 8)) & 0xAA2002FE);
  HIDWORD(v469) = v520 ^ 0xF637C6;
  LODWORD(v469) = v520 ^ 0xA1000000;
  v522 = (v469 >> 24) - ((2 * (v469 >> 24)) & 0x3B0B2348) + 495292836;
  v523 = ((BYTE2(v515) ^ 0xA5 | 0x205332F8) - (BYTE2(v515) ^ 0xA5 | 0xDFACCD07) - 542323449) ^ 0xE8F178A5;
  v524 = v515 ^ 0xD83756C7;
  LODWORD(STACK[0x310]) = v515 ^ 0xD83756C7;
  v525 = ((BYTE2(v515) ^ 0x810106A3) + (HIWORD(v515) & 0x3E ^ 0x3AEA291C) - ((BYTE2(v515) ^ 0x810106A3) & 0x8000003E)) ^ 0x3BEB2FF6;
  v526 = (v525 - ((2 * v525 + 17258924) & 0xBF2F642) - 1099094025) ^ dword_100225E80[(((2 * v523) & 0xB7869506)
                                                                                    - v523
                                                                                    + 607958396) ^ 0xEC9EFF08];
  HIDWORD(v469) = v526 ^ 0xF9B8;
  LODWORD(v469) = v526 ^ 0x7A70000;
  v527 = v517 ^ (v521 - 720371329) ^ v522 ^ v512 ^ ((v469 >> 16) - ((2 * (v469 >> 16)) & 0xA0317160) + 1343797424) ^ 0xCFE79535 ^ ((((v519 | 0x635E5CD8) - (v519 | 0x9CA1A327) - 1667128537) & 0xE228F80E ^ 0xC8286102) + (((v519 | 0x635E5CD8) - (v519 | 0x9CA1A327) - 1667128537) ^ 0x22D6989C) - ((((v519 | 0x635E5CD8) - (v519 | 0x9CA1A327) - 1667128537) ^ 0x22D6989C) & 0xE2A8F806));
  v528 = LODWORD(STACK[0x500]) ^ 0x931BCBAC;
  LODWORD(STACK[0x2A4]) = v528;
  HIDWORD(v469) = STACK[0x5B0];
  LODWORD(v469) = v528;
  v529 = v469 >> 1;
  HIDWORD(v469) = v495 ^ ~LODWORD(STACK[0x464]);
  LODWORD(v469) = v495 ^ LODWORD(STACK[0x464]) ^ 0x4FF3F83C;
  v530 = ((v469 >> 1) - ((2 * (v469 >> 1)) & 0x961F9B00) - 888156800) ^ (v529 - 1621661199 + (~(2 * v529) | 0xC1512C1F));
  HIDWORD(v469) = v530 ^ 0x5458A470;
  LODWORD(v469) = v530;
  v531 = (v469 >> 31) - ((2 * (v469 >> 31)) & 0xF82D0F68) - 65632332;
  HIDWORD(v469) = v447 ^ 0x70;
  LODWORD(v469) = v447 ^ 0x2BC54C00;
  v532 = (v469 >> 8) - ((2 * (v469 >> 8)) & 0xC509958A) + 1652869829;
  v533 = v513 ^ 0xFBDD246D ^ v527;
  LODWORD(STACK[0x318]) = v527;
  v534 = STACK[0x428];
  v535 = 2 * ((v533 & STACK[0x428]) - ((2 * (v533 & STACK[0x428])) & 0xB8954D6)) - 1953934122;
  HIDWORD(v469) = v512 ^ v446 ^ 0x76;
  LODWORD(v469) = v512 ^ v446 ^ 0x24BBA00;
  v536 = ((v469 >> 8) - ((2 * (v469 >> 8)) & 0xCE2C94B8) + 1729514076) ^ v532;
  HIDWORD(v469) = v536 ^ 0xBE4C5;
  LODWORD(v469) = v536 ^ 0x88000000;
  LODWORD(STACK[0x2A0]) = (v469 >> 24) - ((2 * (v469 >> 24)) & 0x2206E8D4) + 285439082;
  v537 = ((2 * (v533 + v534)) & 0xE7BF1DAE)
       + ((v533 + v534) ^ 0xF3DF8ED7)
       + (v535 ^ 0x13998CD5)
       + ((2 * v535) & 0xCFDE4FF8 ^ 0xF8EDF657);
  LODWORD(STACK[0x5B0]) = v537 - ((2 * v537 + 1746874958) & 0x413ABF3C) + 346880197;
  v538 = (&unk_10023F4C0 ^ 0x5F959FFF) - 1603641343 + (STACK[0x430] & 0xBF2B3FE0);
  v539 = STACK[0x384];
  v540 = v497 ^ LODWORD(STACK[0x384]) ^ v527;
  v541 = STACK[0x3B4];
  v542 = LODWORD(STACK[0x3B4]) ^ v422 ^ v439;
  v543 = v540 ^ v524;
  v544 = (v538 ^ 0x60E8F7FF) + ((2 * v538) & 0xC1D1EFFE) - 1625880575 + (v540 ^ v524 ^ v542 ^ 0x147B103);
  v545 = ((2 * v544) & 0xDAFF7776)
       + (v544 ^ 0xED7FBBBB)
       - ((2 * (((2 * v544) & 0xDAFF7776) + (v544 ^ 0xED7FBBBB)) - 1072771634) & 0xDBB4850A)
       - 840849044;
  v546 = (&unk_10023F4C0 ^ 0xFF96CFC7) + 6893625 + (STACK[0x430] & 0xFF2D9F80);
  v547 = ((2 * (v543 ^ v542 ^ 0x45548C90)) & 0xEFEFD938 ^ 0x88265920) + (v543 ^ v542 ^ 0xF6B05D9F);
  v548 = (&unk_10023F4C0 ^ 0xDD6BF5F0) + 580127248 + (STACK[0x430] & 0xBAD7EBE0);
  v549 = ((2 * v546) & 0xDFDD777A) + (v546 ^ 0x6FEEBBBD) + v547;
  v550 = v549 - ((2 * v549 + 1262548114) & 0x41339DA0) - 2043000551;
  v551 = v439 ^ v541;
  v552 = v550 ^ 0x2099CED0;
  v553 = (v439 ^ LODWORD(STACK[0x3B4]) ^ 0x53BACB10 ^ v550) + (v550 ^ 0x2099CED0) + 1;
  v554 = ((2 * v548) & 0xFFD9BCDE) + (v548 ^ 0x7FECDE6F) + v547;
  LODWORD(STACK[0x2F8]) = (2 * v554 + 189050670) & 0x18AE1F0A;
  LODWORD(STACK[0x29C]) = v554 + 1643734812;
  LODWORD(STACK[0x298]) = (v439 ^ v541 ^ ((v439 ^ v541 ^ 0x732305C0)
                                        - ((2 * (v439 ^ v541 ^ 0x732305C0) + 2) & 0x7CAC1C36)
                                        + 1045827100) ^ 0x8927C6FE ^ (v553 - ((2 * v553) & 0x775A65B4) + 1001206490))
                        + v552;
  LODWORD(STACK[0x2D8]) = LODWORD(STACK[0x580]) ^ 0x2478D38C;
  v555 = v545 ^ v439 ^ v541;
  v556 = LODWORD(STACK[0x520]) ^ 0xAB95E919 ^ LODWORD(STACK[0x680]);
  v557 = LODWORD(STACK[0x570]) ^ 0x5B4F7FCE ^ LODWORD(STACK[0x680]);
  v558 = STACK[0x670];
  if (v460)
    v558 = STACK[0x678];
  LODWORD(STACK[0x428]) = v558;
  v559 = STACK[0x3EC];
  if (v460)
    v559 = STACK[0x3F0];
  LODWORD(STACK[0x430]) = v559;
  v560 = STACK[0x5E0];
  if (v460)
    v560 = STACK[0x5A0];
  LODWORD(STACK[0x364]) = v560;
  v561 = STACK[0x3E8];
  if (v460)
    v561 = STACK[0x3E4];
  LODWORD(STACK[0x360]) = v561;
  if (v460)
    v562 = STACK[0x39C];
  else
    v562 = STACK[0x3A8];
  v563 = STACK[0x550];
  if (v460)
    v563 = STACK[0x590];
  LODWORD(STACK[0x438]) = v563;
  v564 = STACK[0x3DC];
  if (v460)
    v564 = STACK[0x3D8];
  LODWORD(STACK[0x308]) = v564;
  if (v460)
    v565 = STACK[0x530];
  else
    v565 = STACK[0x4C0];
  if (v460)
    v566 = STACK[0x3A0];
  else
    v566 = STACK[0x3A4];
  if (v460)
    v567 = STACK[0x3D4];
  else
    v567 = STACK[0x3C8];
  if (v460)
    v568 = STACK[0x5D0];
  else
    v568 = STACK[0x5F0];
  if (v460)
    v569 = STACK[0x668];
  else
    v569 = STACK[0x660];
  v570 = STACK[0x3BC];
  if (!v460)
    v570 = STACK[0x3B8];
  LODWORD(STACK[0x370]) = v570;
  if (v460)
    v571 = STACK[0x3E0];
  else
    v571 = STACK[0x3F8];
  v572 = STACK[0x4A0];
  if (!v460)
    v572 = STACK[0x498];
  LODWORD(STACK[0x388]) = v572;
  if ((v555 & 1) == 0)
    v556 = v557;
  LODWORD(STACK[0x294]) = v556;
  LODWORD(STACK[0x520]) = LODWORD(STACK[0x378]) ^ 0xA2C76354;
  v573 = STACK[0x3C4];
  v574 = LODWORD(STACK[0x4B0]) ^ 0x28B79191 ^ LODWORD(STACK[0x3C4]);
  if ((v555 & 1) == 0)
    v574 = LODWORD(STACK[0x4D0]) ^ 0xDC0E7E3F ^ LODWORD(STACK[0x3C4]);
  LODWORD(STACK[0x2F0]) = v574;
  LODWORD(STACK[0x3AC]) = v541 ^ 0x6D436511 ^ v441;
  v575 = v541 ^ 0xE2EF9B8 ^ LODWORD(STACK[0x440]);
  v576 = v542 ^ 0x9BDCCA92;
  v577 = v444 ^ 0xB25D66B0 ^ v494;
  v578 = v444 ^ 0xBB586F7B ^ LODWORD(STACK[0x350]);
  v579 = v444 ^ 0xE566B955 ^ v473;
  LODWORD(STACK[0x2E8]) = LODWORD(STACK[0x560]) ^ v444;
  v580 = v444 ^ 0x2D68EBBE ^ LODWORD(STACK[0x394]);
  v581 = v541 ^ 0xB790973E ^ v502;
  v582 = v531 ^ 0xEEF5CB57;
  v583 = v541 ^ 0x6776BA14 ^ v498;
  v584 = v541 ^ 0x2FEA6D6F ^ LODWORD(STACK[0x3B0]);
  if ((v555 & 1) != 0)
    v585 = v577;
  else
    v585 = v578;
  LODWORD(STACK[0x394]) = v585;
  if ((v555 & 1) != 0)
    v577 = v579;
  LODWORD(STACK[0x3B4]) = v577;
  if ((v555 & 1) != 0)
    v586 = v580;
  else
    v586 = v579;
  if ((v555 & 1) != 0)
    v587 = v578;
  else
    v587 = v580;
  LODWORD(STACK[0x3B0]) = v587;
  v588 = LODWORD(STACK[0x35C]) ^ 0x43C5C663 ^ LODWORD(STACK[0x348]);
  v589 = STACK[0x35C];
  v590 = LODWORD(STACK[0x35C]) ^ 0xD7E608F8 ^ LODWORD(STACK[0x310]);
  v591 = v543 ^ 0x196E19D8;
  if ((v555 & 1) != 0)
    v592 = v540 ^ 0x1BFADEDE;
  else
    v592 = LODWORD(STACK[0x398]) ^ 0xE74E7409 ^ LODWORD(STACK[0x5B0]);
  if ((v555 & 1) != 0)
    v593 = v591;
  else
    v593 = v540 ^ 0x1BFADEDE;
  if ((v555 & 1) != 0)
    v594 = LODWORD(STACK[0x398]) ^ 0xE74E7409 ^ LODWORD(STACK[0x5B0]);
  else
    v594 = v539 ^ 0xA25895CA ^ LODWORD(STACK[0x318]);
  if ((v555 & 1) != 0)
    v595 = v539 ^ 0xA25895CA ^ LODWORD(STACK[0x318]);
  else
    v595 = v591;
  LODWORD(STACK[0x2A8]) = v551;
  v596 = v551 ^ 0x415F882F;
  LODWORD(STACK[0x28C]) = v575;
  if ((v555 & 1) != 0)
    v597 = v575;
  else
    v597 = v576;
  LODWORD(STACK[0x570]) = v597;
  LODWORD(STACK[0x290]) = v596;
  if ((v555 & 1) != 0)
    v598 = v576;
  else
    v598 = v596;
  LODWORD(STACK[0x264]) = v598;
  if ((v555 & 1) != 0)
    v599 = v582;
  else
    v599 = v581;
  LODWORD(STACK[0x5B0]) = v599;
  LODWORD(STACK[0x284]) = v584;
  if ((v555 & 1) != 0)
    v600 = v584;
  else
    v600 = v582;
  LODWORD(STACK[0x288]) = v583;
  if ((v555 & 1) != 0)
    v601 = v581;
  else
    v601 = v583;
  LODWORD(STACK[0x27C]) = v588;
  LODWORD(STACK[0x268]) = v590;
  if ((v555 & 1) != 0)
    v602 = v590;
  else
    v602 = v588;
  LODWORD(STACK[0x398]) = v602;
  LODWORD(STACK[0x580]) = v555;
  if ((v555 & 2) != 0)
    v603 = v600;
  else
    v603 = v601;
  LODWORD(STACK[0x2E0]) = v603;
  if ((v555 & 2) != 0)
    v600 = v601;
  LODWORD(STACK[0x2D0]) = v600;
  LODWORD(STACK[0x260]) = v589 ^ 0xD1FE8F0E ^ LODWORD(STACK[0x320]);
  LODWORD(STACK[0x25C]) = LODWORD(STACK[0x2A0]) ^ 0x9FA3CDC5;
  LODWORD(STACK[0x384]) = v571;
  LODWORD(STACK[0x4D0]) = v567;
  LODWORD(STACK[0x320]) = v567 ^ 0x5888C774;
  LODWORD(STACK[0x440]) = v562;
  LODWORD(STACK[0x35C]) = v562 ^ 0xF21BEF8;
  v604 = (((v571 ^ 0x6A587993) - ((2 * (v571 ^ 0x6A587993) - 1059470582) & 0x92E897DE) + 702623092) ^ 0xDDD1284F)
       + (v562 ^ 0xF21BEF8);
  LODWORD(STACK[0x378]) = v565;
  v605 = ((v604 - ((2 * v604) & 0x75166D24) - 1165281646) ^ 0x61E90884) + (v568 ^ 0x5888C774);
  LODWORD(STACK[0x424]) = v566;
  LODWORD(STACK[0x310]) = v569;
  v606 = (v605 ^ 0x3DFFB079) - 1040167033 + ((2 * v605) & 0x7BFF60F2);
  LODWORD(STACK[0x318]) = v568;
  v607 = (LODWORD(STACK[0x4E0]) ^ 0x32CAF966)
       + (v568 ^ 0xCE51389F ^ ((v567 ^ 0x5888C774) - ((2 * (v567 ^ 0x5888C774) + 937308564) & 0x2DB3FFD6) - 1295443787))
       + 1;
  v608 = 2 * (((2 * v607) & 0x1953FE46) + (v607 ^ 0x4CA9FF23)) + 1722548666;
  v609 = ((2 * v608) & 0x68FCE74C)
       + (v608 ^ 0xB47E73A6)
       - ((2 * (((2 * v608) & 0x68FCE74C) + (v608 ^ 0xB47E73A6)) + 415267768) & 0x5F2653A0)
       + 2079549357;
  v610 = ((v569 ^ v566 ^ ((v565 ^ 0x91A4AC7D) - ((2 * (v565 ^ 0x91A4AC7D) + 99801830) & 0x8CA74958) - 917695969)) >> 1) ^ 0x3D3A9FD7;
  v611 = v610 - ((2 * v610 + 1015697154) & 0x9E658A3A) - 310907746;
  v612 = STACK[0xB38];
  v613 = ((v606 >> 1) ^ 0xEFFBFFDE)
       + (v606 & 0xDFF7FFBC)
       - ((2 * (((v606 >> 1) ^ 0xEFFBFFDE) + (v606 & 0xDFF7FFBC)) + 259683322) & 0xB9AC080)
       + 1569364541;
  v614 = *(_QWORD *)(STACK[0xB38]
                   + 8
                   * ((*(_QWORD *)(STACK[0xB38]
                                 + 8 * (*(_QWORD *)(STACK[0xB38] + 8 * ((*(_DWORD *)STACK[0xB38] & 1) == 0)) & 1)) & 1) == 0)) & 1;
  v615 = ((~(2 * v614) + v614 + 1587757938) ^ 0x457EFD8C)
       - 1756399428
       + ((2 * (~(2 * v614) + v614 + 1587757938)) & 0x350204FA ^ 0x350204E2);
  v616 = LODWORD(STACK[0x688]) + 760;
  v617 = STACK[0x298];
  LODWORD(STACK[0x2A0]) = (2 * LODWORD(STACK[0x298])) & 0xB9884242;
  LODWORD(STACK[0x26C]) = v617 - 591126239;
  LODWORD(STACK[0x254]) = LODWORD(STACK[0x2D8]) ^ LODWORD(STACK[0x680]);
  LODWORD(STACK[0x258]) = LODWORD(STACK[0x520]) ^ v573;
  LODWORD(STACK[0x4B0]) = v609;
  LODWORD(STACK[0x560]) = v611;
  LODWORD(STACK[0x520]) = v613;
  LODWORD(STACK[0x280]) = v586;
  v618 = STACK[0x394];
  if ((v555 & 2) != 0)
    v618 = v586;
  LODWORD(STACK[0x2D8]) = v618;
  LODWORD(STACK[0x688]) = v592;
  LODWORD(STACK[0x270]) = v595;
  if ((v555 & 2) != 0)
    v619 = v592;
  else
    v619 = v595;
  LODWORD(STACK[0x348]) = v619;
  LODWORD(STACK[0x278]) = v593;
  LODWORD(STACK[0x274]) = v594;
  if ((v555 & 2) != 0)
    v620 = v594;
  else
    v620 = v593;
  LODWORD(STACK[0x350]) = v620;
  *(_QWORD *)(STACK[0xB50] + 8 * ((v616 - 58) - 1300)) = *(_QWORD *)(v612
                                                                                   + 8
                                                                                   * ((v616 - 58) - 1300)) ^ 0x9696969696969696;
  v621 = v615 > 0xB32D37BA;
  if (v615 < 0xB32D37B9)
    v621 = 1;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((226 * !v621) ^ v616)) - 12))();
}

uint64_t sub_100117A8C()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((395 * (STACK[0x880] != 0)) ^ v0))
                            - ((((v0 + 343) | 0xA1u) - 783) ^ (v0 - 283))))();
}

uint64_t sub_100117AD0()
{
  unsigned int v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v3 = STACK[0x718];
  STACK[0xB28] = v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (int)((1340 * (v3 != 0)) ^ v0)) - (v0 ^ 0x19ELL)))();
}

uint64_t sub_100117B08()
{
  unint64_t v0;
  unsigned __int8 *v1;
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  BOOL v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  unint64_t v137;
  unsigned int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  char v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  char v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  int v152;
  unsigned int v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  int v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  unsigned int v174;
  int v175;
  int v176;
  int v177;
  unsigned int v178;
  int v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  int v185;
  unsigned int v186;
  int v187;
  int v188;
  int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  int v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  unsigned int v199;
  int v200;
  int v201;
  unsigned int v202;
  int v203;
  int v204;
  unsigned int v205;
  int v206;
  unsigned int v207;
  unsigned int v208;
  int v209;
  int v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  int v214;
  int v215;
  unsigned int v216;
  int v217;
  unsigned int v218;
  int v219;
  int v220;
  int v221;
  unsigned int v222;
  int v223;
  unsigned int v224;
  unsigned int v225;
  int v226;
  unsigned int v227;
  int v228;
  unsigned int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  unsigned int v234;
  int v235;
  int v236;
  unsigned int v237;
  int v238;
  int v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  int v245;
  unsigned int v246;
  unsigned int v247;
  int v248;
  unsigned int v249;
  unsigned int v250;
  int v251;
  int v252;
  int v253;
  unsigned int v254;
  unsigned int v255;
  int v256;
  unsigned int v257;
  int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  int v267;
  unsigned int v268;
  int v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  unint64_t v279;
  int v280;
  unsigned int v281;
  unsigned int v282;
  int v283;
  unsigned int v284;
  unsigned int v285;
  int v286;
  int v287;
  unsigned int v288;
  int v289;
  int v290;
  unsigned int v291;
  int v292;
  unsigned int v293;
  unsigned int v294;
  int v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  int v299;
  unsigned int v300;
  unsigned int v301;
  int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  int v306;
  int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  int v312;
  unsigned int v313;
  unsigned int v314;
  int v315;
  unsigned int v316;
  int v317;
  unsigned int v318;
  int v319;
  unsigned int v320;
  int v321;
  unsigned int v322;
  unsigned int v323;
  int v324;
  unsigned int v325;
  int v326;
  unsigned int v327;
  unsigned int v328;
  int v329;
  int v330;
  unsigned int v331;
  int v332;
  int v333;
  int v334;
  unsigned int v335;
  int v336;
  unsigned int v337;
  int v338;
  int v339;
  unsigned int v340;
  int v341;
  unsigned int v342;
  int v343;
  unsigned int v344;
  unsigned int v345;
  int v346;
  unsigned int v347;
  unsigned int v348;
  int v349;
  unsigned int v350;
  int v351;
  int v352;
  int v353;
  unsigned int v354;
  int v355;
  int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  unsigned int v360;
  int v361;
  int v362;
  unsigned int v363;
  int v364;
  unsigned int v365;
  unsigned int v366;
  unint64_t v367;
  _BYTE *v368;
  unsigned int v369;
  unsigned int v370;
  unsigned int v371;
  int v372;
  unsigned int v373;
  unsigned int v374;
  int v375;
  unsigned int v376;
  int v377;
  int v378;
  unsigned int v379;
  unint64_t v380;
  unint64_t v381;
  unsigned int v382;

  v3 = v1[9];
  STACK[0x688] = v2;
  v4 = byte_100224EF0[v3 ^ 0xF3];
  v5 = ((v0 - 118) ^ (32 * v4)) - 118;
  LOBYTE(v3) = (v5 & 0x40 ^ 0xFD) + 2 * (v5 & 0x40);
  v6 = v3 + 8;
  STACK[0x680] = v0;
  v7 = (v3 + 3) & (v4 ^ 0x80);
  v8 = 2 - v3;
  if ((v7 & 0xC0) != 0)
    v9 = v8;
  else
    v9 = v6;
  v10 = byte_10021D850[v1[3] ^ 0xAELL];
  STACK[0x678] = v10;
  v11 = *v1;
  HIDWORD(v12) = v11 ^ 1;
  LODWORD(v12) = ((v11 ^ 0x99) - 1467118160 - ((2 * (v11 ^ 0x99)) & 0x166) + 3) ^ 0xA88D8DB0;
  v13 = (v12 >> 2) - ((2 * (v12 >> 2)) & 0x92261702);
  v14 = (((2 * v11) ^ 0x32) - ((2 * ((2 * v11) ^ 0x32)) & 0xF7) + 26) & 0x2E;
  LOBYTE(v11) = (v11 ^ 0xE) + (v14 ^ 0x75) + ((2 * v14) ^ 0x14) - 127;
  HIDWORD(v12) = (v13 - 1995240575) ^ 0x227406B5;
  LODWORD(v12) = -1225984898 - v13;
  v15 = byte_100224BF0[((v12 >> 30) - ((2 * (v12 >> 30)) & 0x338F3360) - 1714972240) ^ 0x345BAD85] ^ (v11 - ((2 * v11) & 0xE0) - 16) ^ 0xBF;
  v16 = (((v15 - ((2 * v15) & 0x88888888)) << 24) + 1140850688) ^ 0x44000000;
  LODWORD(v10) = (v16 - ((2 * v16) & 0x6E000000) - 1220448350) ^ 0xB7416FA2 | ((v10 ^ 0x37)
                                                                             - ((2 * (v10 ^ 0x37)) & 0x74)
                                                                             + 2015234618) ^ 0x781E0A3A;
  v17 = byte_10023DD90[v1[2] ^ 0x4CLL];
  v18 = ((~(82 * v17 + 22) | 0xBB) + 105 * v17 + 46) ^ 0x3B;
  v19 = (((v18 + 12557982 - ((2 * v18) & 0xC)) << 8) + 223232) ^ 0xBFA20600;
  v20 = byte_100224EF0[v1[1] ^ 0xA5];
  v21 = (((32 * v20) ^ 0x20) - ((2 * ((32 * v20) ^ 0x20)) & 0x40) - 77) ^ v20;
  v22 = ((((((((32 * v20) ^ 0x20) - ((2 * ((32 * v20) ^ 0x20)) & 0x40) - 77) ^ v20) ^ 0x66)
         - ((2 * (v21 ^ 0x66)) & 0x4E)) << 16)
       - 1356398592) ^ 0xAF270000;
  LODWORD(v10) = (v10 - ((2 * v10) & 0xD51ACBBC) - 359832098) ^ 0xEA8D65DE | (v19 - ((2 * v19) & 0x720E4600) + 2030511009) ^ 0x790723A1;
  LODWORD(v10) = (v10 - ((2 * v10) & 0xD6B3FA8E) + 1801059655) ^ 0x6B59FD47 | (v22 - ((2 * v22) & 0x37780000) + 465323134) ^ 0x1BBC447E;
  v23 = v10 - ((2 * v10) & 0x1193B3CA) + 147446245;
  LODWORD(v10) = ((BYTE1(v23) ^ 0xF9 | 0x32DEDC47) - (BYTE1(v23) ^ 0xF9 | 0xCD2123B8) - 853466184) ^ 0x2DEDC6F;
  v24 = v10 - ((2 * v10) & 0xD631344) - 961443422;
  v25 = (v24 & 0xFFFFF7FF ^ 0x19060CCB)
      + (v24 & 0xFFFFF7FF ^ 0x7620A984)
      + ((2 * v24) & 0xFEDDAFB8 ^ 0x13BEECF7)
      + ((2 * v24) & 0xDF6F0AD8 ^ 0xCD630248);
  v26 = ((v25 - 1883809166) & 0xCC591789) == ((2 * (v25 - 1883809166)) & 0x90B00C02);
  v27 = ((v4 ^ 0x99) + v9 - 5 - ((2 * ((v4 ^ 0x99) + v9 - 5)) & 0x48) - 92) ^ v5 & 0xA0;
  LOWORD(v22) = byte_10023DD90[v1[10] ^ 0xCCLL];
  LOWORD(v22) = (105 * v22 - ((82 * (_BYTE)v22 + 22) & 0x78) - 57) ^ 0x85;
  LOWORD(v22) = (((v22 - ((2 * (_WORD)v22) & 0x1A2)) << 8) - 12032) ^ 0xD100;
  LOWORD(v10) = (v22 - ((2 * v22) & 0x600) - 31802) ^ 0x83C6;
  v28 = byte_10021D850[v1[7] ^ 0x56];
  v29 = byte_10021D850[v1[15] ^ 0x2BLL];
  v30 = byte_10021D850[v1[11] ^ 0xA1] ^ 0x37;
  v31 = (v30 + 1056 - ((2 * v30) & 0x122) + 2673) ^ 0xE91;
  v32 = (v10 - ((2 * v10) & 0x1E60) + 3888) ^ 0xF30 | (v31 - ((2 * v31) & 8) + 14340) ^ 0x3804;
  v33 = v32 - ((2 * v32) & 0xFB42) - 607;
  LODWORD(v10) = byte_10023DD90[v1[14] ^ 0x8BLL];
  LODWORD(v10) = (105 * v10 - ((22 - 46 * v10) & 0xF2) + 4) ^ 0x7D;
  LODWORD(v10) = (((v10 - ((2 * (_DWORD)v10) & 0x62)) << 8) + 180105472) ^ 0xABC3100;
  LODWORD(v10) = (v10 - ((2 * v10) & 0x21353000) - 1868916644) ^ 0x909A985C | ((v29 ^ 0x37)
                                                                             - ((2 * (v29 ^ 0x37)) & 0x1E8)
                                                                             + 981718004) ^ 0x3A83D3F4;
  v34 = ((v1[12] ^ 0x49) - ((2 * (v1[12] ^ 0x49) + 46) & 0x3CC) + 125) ^ byte_100224BF0[v1[12] ^ 0xAELL];
  v35 = ((((v34 ^ 0x98) - ((2 * (v34 ^ 0x98)) & 0x6E)) << 24) + 922746880) ^ 0x37000000;
  v36 = byte_100224EF0[v1[13] ^ 0x2FLL];
  v37 = ((2 * v36) ^ 0xFFFFFFBA) - ((2 * ((2 * v36) ^ 0xFFFFFFBA)) & 0xFFFFFFA4) + 82;
  v38 = ((2 * ((v36 ^ 0xFFFFFFDD) + 68)) & 0xFFFFFFAA) + (((v36 ^ 0xFFFFFFDD) + 68) ^ 0xFFFFFFD5);
  v39 = ((v37 & 0xFFFFFF88 | (16 * ((v37 >> 3) & 1))) ^ 0xFFFFFF91) + v38;
  v40 = (-126 - 32 * v38) ^ 0xBF ^ (v39 - ((2 * v39 + 52) & 0xCE) + 1);
  v41 = (((v40 - ((2 * v40) & 0xD6)) << 16) - 1586823168) ^ 0xA16B0000;
  v42 = (v41 - ((2 * v41) & 0x2B240000) + 361945438) ^ 0x1592D95E | (v35 - ((2 * v35) & 0x68000000) + 879746769) ^ 0x346FDED1;
  LODWORD(v10) = (v42 - ((2 * v42) & 0xC931A8BA) + 1687737437) ^ 0x6498D45D | (v10
                                                                             - ((2 * v10) & 0x36192318)
                                                                             + 1527550348) ^ 0x5B0C918C;
  v43 = v10 - ((2 * v10) & 0x2A1F17CE) + 353340391;
  v44 = ((((v43 ^ 0x75873C28) >> (((v33 & 0x10 ^ 0x12) + 101) & 0x10))
        - ((2 * ((v43 ^ 0x75873C28) >> (((v33 & 0x10 ^ 0x12) + 101) & 0x10))) & 0x3E75877A)
        + 523944893) ^ 0x1F3AC3BD) >> (((v33 & 0x10 ^ 0x12) + 101) ^ 0x77);
  v45 = (v44 - ((2 * v44) & 0x6A) - 75) ^ 0xAE;
  v46 = (((2 * v45) & 0x1B6) - v45 - 1972460764) ^ 0x8E26AA2D;
  v47 = dword_100216740[(((2 * v46) | 0x4F8B4DEE) - v46 - 667264759) ^ 0x238DAFFD];
  v48 = v25 + 1066026114;
  v49 = 538677150 - v25;
  if (v26)
    v49 = v48;
  v50 = dword_10021A6B0[v28 ^ 0xCA];
  HIDWORD(v51) = v50 ^ 0xFFFFFF8F;
  LODWORD(v51) = v50 ^ 0xF6C24D00;
  v52 = dword_10023D700[(byte_100224BF0[v1[8] ^ 4] ^ ((v1[8] ^ 0xE3)
                                                                       - ((2 * (v1[8] ^ 0xE3) + 46) & 0xD4)
                                                                       + 1)) ^ 0xB3] ^ v47 ^ (((32 * v47) ^ 0xD0C62000)
                                                                                            - ((2
                                                                                              * ((32 * v47) ^ 0xD0C62000)) & 0x8114C680)
                                                                                            + 1082811207) ^ dword_10021BF10[v24 ^ 0xE6DAE5E9 ^ (v49 - ((2 * v49 + 957111026) & 0xB864F76E) - 122115792)] ^ ((v51 >> 8) - ((2 * (v51 >> 8)) & 0x9D036CDA) + 1317123693);
  v53 = v24 ^ v52;
  v54 = (((v24 ^ v52) ^ 0xFF9E9E71) + 6382001 + ((2 * (v24 ^ v52 ^ 0x73836A78)) & 0x9E ^ 0x8C)) % 0x62;
  v55 = (v28 ^ 0x37) - ((2 * (v28 ^ 0x37)) & 0xBBBBBBBB);
  v56 = byte_100224BF0[v1[4] ^ 0x5BLL] ^ 0x6B ^ ((v1[4] ^ 0xBC)
                                                                - ((2 * (v1[4] ^ 0xBC) + 46) & 0xB2)
                                                                + 112);
  v57 = (((v56 - ((2 * v56) & 0x52)) << 24) + 687865856) ^ 0x29000000;
  v58 = (v57 - 211779000 + (~(2 * v57) | 0x19FFFFFF) + 1) ^ 0xF3608248 | (v55 + 1707147485) ^ 0x65C100DD;
  v59 = byte_10023DD90[v1[6] ^ 0xBBLL];
  v60 = (105 * v59 - ((22 - 46 * v59) & 0xF6) + 6) ^ 0xB5;
  v61 = (((v60 - ((2 * v60) & 0x132)) << 8) + 546412800) ^ 0x20919900;
  v62 = byte_100224EF0[v1[5] ^ 0xF0];
  v63 = (((32 * v62) ^ 0xFFFFFFB0) - 3) ^ v62;
  v64 = ((((v63 ^ 0xB8) - ((2 * (v63 ^ 0xB8)) & 0x16A)) << 16) - 290127872) ^ 0xEEB50000;
  v65 = (v64 - ((2 * v64) & 0x13BC0000) + 165553529) ^ 0x9DE2579 | (v61 - ((2 * v61) & 0x5C5FAC00) - 298854912) ^ 0xEE2FD600;
  v66 = (v65 - ((2 * v65) & 0x4FE0B232) - 1477420775) ^ 0xA7F05919 | (v58 - ((2 * v58) & 0x5EFFB9D2) + 796908777) ^ 0x2F7FDCE9;
  v67 = v66 - ((2 * v66) & 0x9865B004) + 1278400514;
  v68 = HIBYTE(v23) & 0xA4;
  v69 = (v68 ^ 0xFFFFFFFB) + (v23 >> 31 << 8) + 379122222;
  v70 = v69 & 0x53A79108 ^ 0x50A58103 | v69 & 0xAC586EA4;
  v71 = HIBYTE(v23) & 0x5B;
  v72 = (((2 * (v71 ^ 0x10259)) & 0x422) - (v71 ^ 0x10259) + 99701838) ^ 0x8DB55D46;
  v73 = ((v71 ^ 0x51 | 0x5629EB61) - (v71 ^ 0x51 | 0xA9D6149E) - 1445587810) ^ 0x7609A335;
  v74 = (((2 * v73) | 0x18D77D96) - v73 + 1939095861) ^ 0x3E048E71 ^ (((2 * v72) & 0x880C90) - v72 + 446396855) | (((2 * (v68 ^ 0x80009020)) & 0x10140) - (v68 ^ 0x80009020) + 49445454) & 0x2036BEC ^ 0xC87F89C2 ^ (v70 - 1);
  v75 = dword_100216740[v63 ^ 0xC9];
  LOWORD(v72) = (HIBYTE(v33) ^ 0x88) - ((2 * (HIBYTE(v33) ^ 0x88)) & 0x92) + 9545;
  v76 = (v72 & 0x15A ^ 0xB381C103) + (v72 & 0x6A5);
  v77 = (((2 * (HIBYTE(v33) ^ 0xF8)) & 0xEEEEEEEE) - (HIBYTE(v33) ^ 0xF8) + 648) ^ 0xFFFFFDAB;
  v78 = v77 - ((2 * v77 + 226) & 0x285DA67C) + 338613167;
  v79 = --v76 ^ 0xA8ACF4C9;
  v80 = v78 ^ v76 ^ 0xA8ACF4C9 ^ 0x826FD718 ^ ((v76 ^ 0x4C7E3B68)
                                             - ((2 * (v76 ^ 0x4C7E3B68) + 2) & 0x1AD868F0)
                                             - 1922288519);
  v81 = dword_10021A6B0[v29 ^ 0x4B];
  HIDWORD(v51) = v81 ^ 0xFFFFFF8F;
  LODWORD(v51) = v81 ^ 0xF6C24D00;
  v82 = v75 ^ dword_10023D700[HIBYTE(v23) ^ 4] ^ (((32 * v75) ^ 0xD0C62000)
                                                - ((2 * ((32 * v75) ^ 0xD0C62000)) & 0x6064E440)
                                                + 808612398) ^ ((v51 >> 8) - ((2 * (v51 >> 8)) & 0xB5BA5CA8) - 623038892) ^ dword_10021BF10[v80 + 112] ^ (v74 - 1705651097 + (~(2 * v74) | 0xCB545733));
  v83 = dword_100216740[v27 ^ 0x94];
  v84 = dword_10021A6B0[STACK[0x678] ^ 0xA1];
  HIDWORD(v51) = v84 ^ 0xFFFFFF8F;
  LODWORD(v51) = v84 ^ 0xF6C24D00;
  v85 = v83 ^ dword_10023D700[HIBYTE(v67) ^ 0x95] ^ (((32 * v83) ^ 0xD0C62000)
                                                   - ((2 * ((32 * v83) ^ 0xD0C62000)) & 0x9E8CFC40)
                                                   + 1330019891) ^ ((v51 >> 8)
                                                                  - ((2 * (v51 >> 8)) & 0x77AECE36)
                                                                  + 1003972379) ^ dword_10021BF10[(((v43 >> 8) & 0x8B ^ 0xD990918A)
                                                                                                 + ((v43 >> 8) & 0x74 ^ 0x61)
                                                                                                 - 1) ^ 0xD99091A6];
  v86 = dword_100216740[v21 ^ 0xCA];
  v87 = ((2 * (BYTE1(v67) ^ 0x1805DE7)) & 0x200B1CC) - (BYTE1(v67) ^ 0x1805DE7) + 884082457;
  v88 = (((v67 >> 8) & 0x79 ^ 0xEDDC34F7) - ((v67 >> 8) & 0x86)) ^ 0x55DE31D4;
  v89 = dword_10021A6B0[(((2 * (v33 ^ 0x15)) & 0xA6) - (v33 ^ 0x15) + 684) ^ 0x290];
  HIDWORD(v51) = v89 ^ 0xFFFFFF8F;
  LODWORD(v51) = v89 ^ 0xF6C24D00;
  v90 = dword_10023D700[v34 ^ 0xD5] ^ v86 ^ (((32 * v86) ^ 0xD0C62000)
                                                            - ((2 * ((32 * v86) ^ 0xD0C62000)) & 0xE20EF180)
                                                            - 251168547) ^ dword_10021BF10[((v88 | 0x6C8F73B8)
                                                                                          - (v88 | 0x93708C47)
                                                                                          - 1821340601) ^ 0xD48D7648] ^ v87 ^ ((v51 >> 8) - ((2 * (v51 >> 8)) & 0x636EDCBC) + 834104926);
  v91 = ((BYTE2(v85) ^ 0xD2) - ((2 * (BYTE2(v85) ^ 0xD2)) & 0xAE) + 442626903) ^ 0x18ADE7C7;
  v92 = dword_100216740[(((2 * v91) & 0x50819D8) - v91 - 246877421) ^ 0xF384E725];
  v93 = dword_10021A6B0[((v90 ^ 0x43) + (v90 & 0x53 ^ 0x210) - ((v90 ^ 0x43) & 0x53)) ^ 0x2C7];
  HIDWORD(v51) = v93 ^ 0xFFFFFF8F;
  LODWORD(v51) = v93 ^ 0xF6C24D00;
  v94 = v82 ^ v79;
  v95 = dword_10023D700[HIBYTE(v94) ^ 0x81] ^ v92 ^ (((32 * v92) ^ 0xD0C62000)
                                                   - ((2 * ((32 * v92) ^ 0xD0C62000)) & 0xAC09E180)
                                                   - 704319283) ^ ((v51 >> 8)
                                                                 - ((2 * (v51 >> 8)) & 0xDD891674)
                                                                 + 1858374458) ^ (((v53 >> 8) & 0xB ^ 0xDCBEDD01)
                                                                                + (((v53 >> 8) ^ 0x63D950) & 0xF4 ^ 0xD1)
                                                                                - 1) ^ dword_10021BF10[((BYTE1(v53) ^ 0xCE | 0x6667BABC) - (BYTE1(v53) ^ 0xCE | 0x99984543) - 1718074045) ^ 0x6667BA8F];
  v96 = dword_100216740[((BYTE2(v52) ^ 0xC060E073 | 0x4580CC20) - (BYTE2(v52) ^ 0xC060E073 | 0xBA7F33DF) - 1166068769) ^ 0x85E02CB0];
  v97 = (((HIWORD(v90) & 0xFE ^ 0x9E) + (HIWORD(v90) & 0xB2 ^ 0x420) - ((HIWORD(v90) & 0xFE ^ 0x9E) & 0xB2)) & 0xFFFFFFFE | HIWORD(v90) & 1) ^ 0x41B;
  v98 = dword_10021A6B0[v94 ^ 0x56];
  HIDWORD(v51) = v98 ^ 0xFFFFFF8F;
  LODWORD(v51) = v98 ^ 0xF6C24D00;
  v99 = dword_10023D700[HIBYTE(v85) ^ 0x26] ^ dword_10021BF10[((BYTE1(v90) ^ 0x7B)
                                                             + ((v90 >> 8) & 0xDC ^ 0xB84)
                                                             - ((BYTE1(v90) ^ 0x7B) & 0xDC)) ^ 0xB81] ^ v96 ^ ((v51 >> 8) - ((2 * (v51 >> 8)) & 0x48CF4B8) + 38173276) ^ (((2 * (BYTE1(v90) ^ 0x690801D2)) | 0x81E01758) - (BYTE1(v90) ^ 0x690801D2) - 1089473452) ^ (((32 * v96) ^ 0x74B81A80) - ((2 * ((32 * v96) ^ 0x74B81A80)) & 0x90184300) + 1208754576);
  v100 = dword_100216740[(v97 + 1717714272 - ((2 * v97) & 0x4CC47AF0) + 24) ^ 0x66623D60];
  v101 = ((v100 ^ 0x9179CEFF) - ((2 * (v100 ^ 0x9179CEFF) + 172483498) & 0xE165AA9E) + 1977009956) ^ v100 ^ ((v100 ^ 0x945A3F2B) + 1453682257 + (~(2 * (v100 ^ 0x945A3F2B) + 2) | 0x52B52361));
  v102 = (v101 ^ 0x4DB27BD4) - 2 * (((v101 ^ 0x4DB27BD4) + 86241748) & 0x41E3B5A7 ^ v101 & 2) + 1191683961;
  LOBYTE(v96) = v85 ^ BYTE1(v43);
  v103 = ((((v94 ^ 0xDDC27AD2) >> 8) & 0xCA ^ 0x7928414B) + (((v94 ^ 0xDDC27AD2) >> 8) & 0x35) - 1) ^ 0x2B08C47B;
  v104 = (((2 * (((unsigned __int16)(v94 ^ 0x7AD2) >> 8) ^ 0xF6)) | 0x638A7A7A)
        - (((unsigned __int16)(v94 ^ 0x7AD2) >> 8) ^ 0xF6)
        - 835009853) ^ 0x22D51D7D;
  v105 = ((((((v90 << 6) ^ 0x4DD59900) - ((2 * ((v90 << 6) ^ 0x4DD59900)) & 0xAB1AF100) + 1435334810) | 0x3FFFFFE0)
         - 323764768) & 0xC0000000 | (v90 >> 26)) ^ 0x4000000D;
  v106 = v105 - ((2 * v105) & 0x8000000E) - 933267769;
  HIDWORD(v51) = v106 ^ 0x2678F391;
  LODWORD(v51) = v106;
  v107 = dword_10021A6B0[((v96 & 0xFD ^ 0xB4) + (v96 & 0xAC ^ 0x50A) - ((v96 & 0xFD ^ 0xB4) & 0xAC)) & 0xFFFFFFFD ^ 0x7E67A0E8 ^ (2120720616 - (v96 & 2) - 2 * (((v96 & 2 ^ 0xB3) & 0x12 | 0x7FFFFF6D) ^ (v96 & 2 ^ 0xB3 | 0x7FFFFFED)) + 1355)];
  v108 = (v51 >> 30) - ((2 * (v51 >> 30)) & 0xA688865A);
  HIDWORD(v51) = v107 ^ 0xFFFFFF8F;
  LODWORD(v51) = v107 ^ 0xF6C24D00;
  v109 = dword_10021BF10[((v104 | 0x3CA14090) - (v104 | 0xC35EBF6F) - 1017200785) ^ 0x2FB16045] ^ ((v51 >> 8)
                                                                                                 - ((2 * (v51 >> 8)) & 0x217D1A50)
                                                                                                 + 280923432) ^ dword_10023D700[HIBYTE(v52) ^ 0x1E] ^ v102 ^ (((2 * v103) & 0x441C366) - v103 + 2039160396) ^ (((32 * v102) ^ 0x3C76B4A0) - ((2 * ((32 * v102) ^ 0x3C76B4A0)) & 0x30156800) + 403354631);
  v110 = dword_100216740[BYTE2(v82) ^ 0x90];
  v111 = (v54 ^ 0xBBF5A7F)
       + 2 * v54
       + ((2 * ((v53 ^ 0x73836A3E) + (v54 ^ 0xFFFFFF02) - ((2 * v54) & 0xFA) - 2)) & 0x1FC)
       + (((v53 ^ 0x3E) + (v54 ^ 2) - ((2 * v54) & 0xFA) - 2) ^ 0x7FF7B7FE);
  v112 = dword_10021A6B0[(v111 - 1463670114 + (~(2 * v111 + 1754389254) | 0x970D85CB)) ^ 0x34793DA9];
  v113 = ((v112 << 25) & 0xFC000000 ^ 0x1C000000) + ((v112 << 24) ^ 0x71DFC7BA);
  v114 = v110 ^ dword_10021BF10[((BYTE1(v85) ^ 0xB1) + 1433412372 - ((2 * (BYTE1(v85) ^ 0xB1)) & 0x1B8) + 200) ^ 0x55702314] ^ (((32 * v110) ^ 0xD0C62000) - ((2 * ((32 * v110) ^ 0xD0C62000)) & 0xD74A0780) + 1805976531) ^ ((BYTE1(v85) ^ 0x73) - ((2 * (BYTE1(v85) ^ 0x73)) & 0x2E) - 8160489) & 0x92000FFF ^ dword_10023D700[(v108 - 750501075) ^ 0x6BDA565B];
  v115 = (((v113 + 18888774) & 0xFF000000 | (v112 >> 8)) ^ 0x98F61209)
       + v113
       + ((2 * ((v113 + 18888774) & 0xFF000000 | (v112 >> 8))) & 0xCFFE5F76 ^ 0xFE13FBED);
  v116 = (((v112 >> 8) ^ 0xFF093DB2) - ((2 * ((v112 >> 8) ^ 0xFF093DB2) + 2) & 0xF365CE20) + 2041767697) ^ (v112 >> 8) ^ (v115 - ((2 * v115 - 767635450) & 0xBE4C5056) + 1212518446);
  HIDWORD(v51) = v114 ^ 0x6F6;
  LODWORD(v51) = v114 ^ 0xDD48B000;
  v117 = (v51 >> 12) - ((2 * (v51 >> 12)) & 0xB2E3039C) - 646872626;
  HIDWORD(v51) = v116 ^ 0xD76;
  LODWORD(v51) = (((v116 ^ 0xA6620D76) + v113 + 18888774) ^ 0xBFABFF97)
               + 1079246953
               + ((2 * ((v116 ^ 0xA6620D76) + v113 + 18888774)) & 0x7F57FF2E);
  v118 = ((v51 >> 12) - ((2 * (v51 >> 12)) & 0x473BCC40) + 597550624) ^ v117;
  HIDWORD(v51) = v118 ^ 0x8DE02;
  LODWORD(v51) = v118 ^ 0x7100000;
  v119 = (v51 >> 20) - ((2 * (v51 >> 20)) & 0x95655336) - 894260837;
  v120 = ((((v119 ^ 0x245AA9C9) >> (v43 & 8 ^ 8))
         - ((2 * ((v119 ^ 0x245AA9C9) >> (v43 & 8 ^ 8))) & 0x2E078E04)
         - 1761360126) ^ 0x9703C702) >> (v43 & 8);
  LOBYTE(v110) = v120 - ((2 * v120) & 0xAA) + 85;
  v121 = dword_100216740[BYTE2(v99) ^ 0xA];
  v122 = ((v119 & 0x72 ^ 0x85740003) - (v119 & 0x8D) + 24716) ^ 0x917461AD;
  v123 = (((2 * v122) | 0xB7DEC06A) - v122 + 605069259) ^ 0xCFEF616D;
  v124 = BYTE1(v109);
  v125 = dword_10021A6B0[v123];
  HIDWORD(v51) = v125 ^ 0xFFFFFF8F;
  LODWORD(v51) = v125 ^ 0xF6C24D00;
  v126 = dword_100216740[BYTE2(v109) ^ 0x8D];
  v127 = dword_10023D700[HIBYTE(v95) ^ 0xA1] ^ v121 ^ dword_10021BF10[((BYTE1(v109) ^ 0xF7)
                                                                     + ((v109 >> 8) & 0xAC ^ 0x908)
                                                                     - ((BYTE1(v109) ^ 0xF7) & 0xAC)) ^ 0x973] ^ (((32 * v121) ^ 0xD0C62000) - ((2 * ((32 * v121) ^ 0xD0C62000)) & 0xC17CCC00) + 1623090712) ^ ((v51 >> 8) - ((2 * (v51 >> 8)) & 0xA9F43AE2) - 721805967);
  v128 = (v110 ^ 0xE7) + (v110 & 0x9A ^ 0x84233118) - ((v110 ^ 0xE7) & 0x9A);
  v129 = dword_10021A6B0[(((2 * (v95 ^ 0xD7409)) | 0x83F762B0)
                        - (v95 ^ 0xD7409)
                        + 1040469672) ^ 0xC1F6C5B6];
  HIDWORD(v51) = v129 ^ 0xFFFFFF8F;
  LODWORD(v51) = v129 ^ 0xF6C24D00;
  v130 = dword_10023D700[HIBYTE(v99) ^ 0x96] ^ v126 ^ (((32 * v126) ^ 0xD0C62000)
                                                     - ((2 * ((32 * v126) ^ 0xD0C62000)) & 0x2E390800)
                                                     + 387744787) ^ ((v51 >> 8)
                                                                   - ((2 * (v51 >> 8)) & 0x8363C546)
                                                                   + 1102176931) ^ dword_10021BF10[((v110 & 0x53 ^ 0x80061C03)
                                                                                                  + (v110 & 0xAC ^ 0x1A0E1A5)
                                                                                                  - 1) ^ 0x81A6FD82];
  v131 = dword_100216740[(((2 * (BYTE2(v119) ^ 0x18808053)) | 0xF49B3DB0) - (BYTE2(v119) ^ 0x18808053) + 95576360) ^ 0xE2CD1EC9];
  v132 = v131 ^ 0x6BA5C0D4;
  if ((v131 & 0x1000000) != 0)
    v133 = 0x1000000;
  else
    v133 = -16777216;
  v134 = v133 + v132 - 2 * ((v133 + v132) & 0x112969C5 ^ v132 & 4) + 287926721;
  v135 = ((v95 >> 8) & 0x79 ^ 0x3941A748) + ((v95 >> 8) & 0x86 ^ 0x81) - 1;
  v136 = dword_10021A6B0[v99 ^ 0x1B];
  HIDWORD(v137) = v136 ^ 0xFFFFFF8F;
  LODWORD(v137) = v136 ^ 0xF6C24D00;
  v138 = dword_10023D700[HIBYTE(v109) ^ 0x8B] ^ BYTE1(v95) ^ dword_10021BF10[((v135 & 0x7B5 ^ 0xA032184)
                                                                            + (v135 & 0x84A ^ 0x40A08049)
                                                                            - 1) ^ 0x4AA3A66D] ^ ((v137 >> 8)
                                                                                                - ((2 * (v137 >> 8)) & 0x84631172)
                                                                                                + 1110542521) ^ v134 ^ (((32 * v134) ^ 0xA15302A0) - ((2 * ((32 * v134) ^ 0xA15302A0)) & 0x8A8A4700) - 985324646);
  v139 = dword_100216740[((BYTE2(v95) ^ 0x482B0497) - ((2 * (BYTE2(v95) ^ 0x482B0497)) & 0x80400878) - 501172676) ^ 0xAA0BB22F];
  v140 = dword_10021A6B0[v109 ^ 0x2F];
  HIDWORD(v137) = v140 ^ 0xFFFFFF8F;
  LODWORD(v137) = v140 ^ 0xF6C24D00;
  v141 = dword_10023D700[HIBYTE(v119) ^ 9] ^ v139 ^ (((v99 >> 8) & 0xC8 ^ 0xE978849) + ((v99 >> 8) & 0x37) - 1) ^ dword_10021BF10[((BYTE1(v99) ^ 0x2C7008D1 | 0xBB136560) - (BYTE1(v99) ^ 0x2C7008D1 | 0x44EC9A9F) + 1156356767) ^ 0x97636D10] ^ (((32 * v139) ^ 0xD0C62000) - ((2 * ((32 * v139) ^ 0xD0C62000)) & 0xE6CF3A40) - 211313376) ^ ((v137 >> 8) - ((2 * (v137 >> 8)) & 0x55019C56) - 1434399189);
  v142 = v127 ^ v124;
  v143 = (BYTE1(v137) - ((2 * BYTE1(v137)) & 0x56) + 43) & 0x10;
  v144 = (v142 ^ ~HIWORD(v119) & 0x1000001 ^ 0x93559465) >> v143;
  HIDWORD(v137) = v141 ^ 0x1DA;
  LODWORD(v137) = v141 ^ 0x739D6400;
  v145 = (v137 >> 10) - ((2 * (v137 >> 10)) & 0x81F306BE) + 1090093919;
  v146 = ((v144 - ((2 * v144) & 0x2EF01A14) + 393743626) ^ 0x17780D0A) >> (v143 ^ 0x10);
  v147 = v146 - 2 * (v146 & 1);
  HIDWORD(v137) = v145 ^ 0x149C97;
  LODWORD(v137) = v145 ^ 0x86800000;
  v148 = (v137 >> 22) - ((2 * (v137 >> 22)) & 0xE879CF9E) - 197335089;
  v149 = v130 ^ v128 & 0x80001FFF;
  v150 = ((BYTE2(v130) ^ 2) - ((v130 >> 15) & 0x1D2) - 1938855447) ^ 0xA82F21FB;
  v151 = dword_100216740[(((2 * v150) & 0x80015E4) - v150 + 837711117) ^ 0x15AE3DA6];
  v152 = ((v137 >> 22) - ((2 * (v137 >> 22)) & 0x9E) - 49) ^ 0x82;
  v153 = ((BYTE1(v138) ^ 0xFFFFFF7F) - 2057771225 + ((2 * BYTE1(v138)) | 0xF54E31B4)) ^ 0x70B71AFA;
  v154 = dword_10021A6B0[(((2 * v152) | 0x4C1BA472) - v152 + 1509043655) ^ 0xA60DD2B5];
  HIDWORD(v137) = v154 ^ 0xFFFFFF8F;
  LODWORD(v137) = v154 ^ 0xF6C24D00;
  v155 = dword_10023D700[HIBYTE(v127) ^ 0xBF] ^ v151 ^ dword_10021BF10[((v153 | 0x6FEEB25C)
                                                                      - (v153 | 0x90114DA3)
                                                                      - 1877914205) ^ 0x65FEB0A5] ^ ((v137 >> 8) - ((2 * (v137 >> 8)) & 0xF2269F76) - 116174917) ^ ((BYTE1(v138) ^ 0x8848E409) + ((v138 >> 8) & 0x36 ^ 0x33A21936) - ((BYTE1(v138) ^ 0x8848E409) & 0x8008E036)) ^ (((32 * v151) ^ 0xD0C62000) - ((2 * ((32 * v151) ^ 0xD0C62000)) & 0x55C55A40) + 719498535);
  v156 = ((HIWORD(v138) & 0x77 ^ 0xFA107151) + (HIWORD(v138) & 0x88 ^ 0x81) - 1) ^ 0x2B80D9F5;
  v157 = dword_100216740[(v156 - ((2 * v156) & 0x301446E) + 197845559) ^ 0xDA5A4AD3];
  v158 = ((BYTE1(v148) ^ 0x3D | 0xB2978492) - (BYTE1(v148) ^ 0x3D | 0x4D687B6D) + 1298692973) ^ 0xF0DFC492;
  v159 = ((((v148 >> 8) & 6) + (BYTE1(v148) ^ 0xA6)) | 0xB6E4EA00) - ((BYTE1(v148) ^ 0xA6) & 6);
  v160 = dword_10021A6B0[((v142 ^ 0x45C9808C | 0x841CB1EC)
                        - (v142 ^ 0x45C9808C | 0x7BE34E13)
                        + 2078494227) ^ 0xC1D531B7];
  HIDWORD(v137) = v160 ^ 0xFFFFFF8F;
  LODWORD(v137) = v160 ^ 0xF6C24D00;
  v161 = dword_10023D700[HIBYTE(v149) ^ 0x4A] ^ dword_10021BF10[((v159 & 0x20A0A9B2 ^ 0x480011A0)
                                                               + (v159 ^ 0xB1A6EE17)
                                                               - ((v159 ^ 0xB1A6EE17) & 0x50201B2)) ^ 0x6AE0BD40] ^ v157 ^ ((v137 >> 8) + 809773427 + (~(2 * (v137 >> 8)) | 0x9F77AD1B)) ^ (v158 - ((2 * v158) & 0xD3693246) - 374040285) ^ (((32 * v157) ^ 0xD0C62000) - ((2 * ((32 * v157) ^ 0xD0C62000)) & 0x8076E40) + 67352352);
  v162 = dword_100216740[((BYTE2(v148) ^ 0xA8) + (HIWORD(v148) & 0x7B ^ 0x1753) - ((BYTE2(v148) ^ 0xA8) & 0x7B)) ^ 0x171F];
  v163 = (33 * (v162 ^ 0x6E863100)) ^ 0x6EF0E36F;
  v164 = (66 * (v162 ^ 0x6E863100)) & 0xDDE1C6DE;
  v165 = v127 >> 8;
  v166 = ((BYTE1(v127) ^ 0x8A) + ((v127 >> 8) & 0x33 ^ 0x34CFC131) - ((BYTE1(v127) ^ 0x8A) & 0x33333333)) ^ 0x344D5B3B;
  v167 = ((((2 * v162) ^ 0xDD0C6200) - 463771648 - 2 * (((2 * v162) ^ 0xDD0C6200) & 0x645B683C ^ (2 * v162) & 0x14) + 41) ^ 0xE45B6800) & ((((v162 << 6) ^ 0xA18C4000) - ((2 * ((v162 << 6) ^ 0xA18C4000)) & 0xACF79A80) - 696529581) ^ 0xD67BCD53);
  v168 = v164 + v163 + (v167 ^ 0xDEC854B2) - ((2 * v167) & 0x426F569A) + 1;
  v169 = dword_10021A6B0[((v149 ^ 0xAF) - ((2 * (v149 ^ 0xAF)) & 0xF6) + 2427) ^ 0x961];
  HIDWORD(v137) = v169 ^ 0xFFFFFF8F;
  LODWORD(v137) = v169 ^ 0xF6C24D00;
  v170 = HIBYTE(v148) ^ 0xD3;
  v171 = dword_10021BF10[((v165 & 0x77 ^ 0x18E) - (v165 & 0x88)) ^ 0x16A] ^ (v166 - ((2 * v166) & 0x47410) + 293550600) ^ dword_10023D700[HIBYTE(v138) ^ 0x21] ^ ((v137 >> 8) - ((2 * (v137 >> 8)) & 0x7F97DF0C) - 1077153914) ^ (v168 - ((2 * v168 + 1686998972) & 0x85913EE6) + 1963943761);
  v172 = (((2 * ((v147 - 127) ^ 0xD4)) | 0x9F030F90)
        - ((v147 - 127) ^ 0xD4)
        + 813594680) ^ 0x8F0A87DC;
  v173 = dword_100216740[((v172 | 0x939ECCED) - (v172 | 0x6C613312) + 1818309394) ^ 0xD315CCB4];
  v174 = v149 >> 8;
  v175 = (v149 >> 8) & 0x6D ^ 0xA2D0925;
  v176 = BYTE1(v149);
  v177 = ((v176 ^ 0x48) + v175 - ((v176 ^ 0x48) & 0x6D)) ^ 0xA2D8965;
  v178 = v173 ^ dword_10023D700[v170] ^ (((32 * v173) ^ 0xD0C62000)
                                       - ((2 * ((32 * v173) ^ 0xD0C62000)) & 0x2DBA8600)
                                       - 1763884268);
  v179 = (v176 ^ 0xA3) + (v174 & 0x30 ^ 0x297C1F10) - ((v176 ^ 0xA3) & 0x30);
  v180 = dword_10021BF10[((v179 & 0x5D1EE3 ^ 0x908100C0) + (v179 ^ 0x497E5F23) - ((v179 ^ 0x497E5F23) & 0x20051EE3)) ^ 0xD0DF5E14];
  v181 = v180 ^ 0xA762988C;
  v182 = (v180 ^ 0xA762988C) + (v180 ^ 0xD42A6181 ^ v178) + 1;
  v183 = ((v138 & 0x27 ^ 0xBFF22004) + (v138 & 0xD8 ^ 9) - 1) ^ 0xBEF3A316;
  v184 = (v178 ^ ((v178 ^ 0x7348F90D) - ((2 * (v178 ^ 0x7348F90D) + 2) & 0x6E75C264) - 1220878029) ^ (v182 - ((2 * v182) & 0x548141C8) + 708878564) ^ 0x11CD4724)
       + v181;
  v185 = dword_10021A6B0[(v183 - ((2 * v183) & 0x2FDCA) + 739606245) ^ 0x2D14FD82];
  HIDWORD(v137) = v185 ^ 0xFFFFFF8F;
  LODWORD(v137) = v185 ^ 0xF6C24D00;
  v186 = (v184 - ((2 * v184) & 0xBA5FF08C) + 1563424838) ^ ((v137 >> 8) - ((2 * (v137 >> 8)) & 0x7061C114) - 1204756342) ^ ((v177 | 0x745168CB) - (v177 | 0x8BAE9734) - 1951492300);
  v187 = dword_100216740[BYTE2(v161) ^ 0x55];
  v188 = (v186 ^ 0x8C) - ((2 * (v186 ^ 0x8C)) & 0x142) - 1747142751;
  v189 = dword_10021A6B0[((v188 & 0x83540E18 ^ 0x8000A00) + (v188 ^ 0x87DEB53A) - ((v188 ^ 0x87DEB53A) & 0x10000E18)) ^ 0x8B560C74];
  HIDWORD(v137) = v189 ^ 0xFFFFFF8F;
  LODWORD(v137) = v189 ^ 0xF6C24D00;
  v190 = v187 ^ dword_10023D700[HIBYTE(v155) ^ 0xD0] ^ dword_10021BF10[BYTE1(v171) ^ 0xE3] ^ (((32 * v187) ^ 0xD0C62000)
                                                                                            + 1146938365
                                                                                            + (~(2
                                                                                               * ((32 * v187) ^ 0xD0C62000)) | 0x7746383F)) ^ ((BYTE1(v171) ^ 0x180C0091) + ((v171 >> 8) & 0xD5 ^ 0x452F944) - ((BYTE1(v171) ^ 0x180C0091) & 0x80400D5)) ^ ((v137 >> 8) - ((2 * (v137 >> 8)) & 0x469E1AF2) + 592383353);
  v191 = ((HIWORD(v171) & 0x1B ^ 0xB8A86003) + (HIWORD(v171) & 0xE4 ^ 0xE1) - 1) ^ 0x594A9627;
  v192 = (((v186 >> 8) & 0x90 ^ 0xF507FA81) + ((v186 >> 8) & 0x6F) - 1) ^ 0xF4A3D695;
  v193 = dword_100216740[(v191 - ((2 * v191) & 0x4201EECE) + 555022183) ^ 0xC0F601D4];
  v194 = dword_10021A6B0[(((2 * (v155 ^ 0x41)) | 0x95BEA02)
                        - (v155 ^ 0x41)
                        + 1800538879) & 0x1FFFFFFF ^ 0x14ADF5F0];
  v195 = (v194 >> 8) & 0x128C8F;
  v196 = (((2 * (v195 ^ 0x49D7C9C3)) & 0x92208186) - (v195 ^ 0x49D7C9C3) + 13614396) ^ 0x9A1A74C2;
  v197 = ((v194 >> 7) & 0x5191E ^ 0xD15F26FA)
       + (v195 ^ 0x17506C82)
       + ((((v194 >> 8) ^ 0x16E44EC2) + 1) ^ 0xFE6CE71F)
       + ((2 * (((v194 >> 8) ^ 0x16E44EC2) + 1)) & 0x2CD9CE3E);
  v198 = (((2 * v196) & 0x13E00D64) - v196 + 1980741965) ^ (v197 - ((2 * v197 + 96924100) & 0x246D5674) - 1793448932) ^ 0x37299247;
  v199 = ((v194 << 24) ^ 0xE6FFBADD) + ((v194 << 25) & 0xD2000000 ^ 0x12000000) - 1778367197 + v198;
  v200 = v199 - 2 * (v199 & 0x3C6F513D ^ v198 & 1) - 1133555396;
  v201 = dword_100216740[BYTE2(v186) ^ 0xF2];
  v202 = dword_10023D700[HIBYTE(v161) ^ 0xFD] ^ v193 ^ (((32 * v193) ^ 0xD0C62000)
                                                      - ((2 * ((32 * v193) ^ 0xD0C62000)) & 0x446C9000)
                                                      - 1573500918) ^ v200 ^ ((v192 | 0x6066538F)
                                                                            - (v192 | 0x9F99AC70)
                                                                            - 1617318800) ^ dword_10021BF10[(((v186 >> 8) & 0x2B ^ 0x9FBBCC03) + ((v186 >> 8) & 0xD4 ^ 0xC1) - 1) ^ 0x9FBBCCB6];
  LOWORD(v200) = ((2 * (BYTE1(v155) ^ 0xC3)) & 0xC) - (BYTE1(v155) ^ 0xC3) - 23303;
  v203 = ((v161 ^ 0xC4) - ((2 * (v161 ^ 0xC4)) & 0x162) - 1458855247) ^ 0x398AAAB3;
  v204 = dword_10021A6B0[(v203 - ((2 * v203) & 0x17C6) + 643465187) ^ 0xB6DB77FF];
  HIDWORD(v137) = v204 ^ 0xFFFFFF8F;
  LODWORD(v137) = v204 ^ 0xF6C24D00;
  v205 = v201 ^ BYTE1(v155) ^ dword_10023D700[HIBYTE(v171) ^ 0x7B] ^ dword_10021BF10[((v200 & 0x6E9 ^ 0x5569221)
                                                                                    + (v200 & 0x116 ^ 0x8884911)
                                                                                    - 1) ^ 0xDDEDF9D] ^ ((v137 >> 8) - ((2 * (v137 >> 8)) & 0xA36288F8) - 776911748) ^ (((32 * v201) ^ 0xD0C62000) - ((2 * ((32 * v201) ^ 0xD0C62000)) & 0xF93D4980) - 56711979);
  v206 = dword_10023D700[HIBYTE(v186) ^ 0x24];
  v207 = (v206 ^ 0x8B138B19) + 1;
  v206 ^= 0xF83DEE3B;
  v208 = v206 + (v207 ^ 0x5BE7B7E7) + ((2 * v207) & 0xB7CF6FCE) - 1541912551;
  v209 = dword_100216740[BYTE2(v155) ^ 0x32];
  v210 = ((v208 - 1048142656 + (~(2 * v208) | 0x7CF2C681)) ^ 0x3E796341) + v206;
  v211 = BYTE1(v161) ^ 0xD79EDE36;
  v212 = v161 >> 8;
  v213 = 2 * (v161 >> 8);
  v214 = v213 & 0x7A ^ 0x13;
  v215 = (v213 ^ 0x1FAAA16) - ((2 * (v213 ^ 0x1FAAA16)) & 0xA0) + 464;
  v216 = v211 + v214 + (v215 & 0xE0) - ((2 * v215) & 0x40) + 677454194;
  v217 = dword_10021A6B0[v171 ^ 0xAE];
  HIDWORD(v137) = v217 ^ 0xFFFFFF8F;
  LODWORD(v137) = v217 ^ 0xF6C24D00;
  v218 = dword_10021BF10[v216] ^ v209 ^ (((32 * v209) ^ 0xD0C62000)
                                       - ((2 * ((32 * v209) ^ 0xD0C62000)) & 0xE4210940)
                                       - 233798493) ^ ((v137 >> 8) - ((2 * (v137 >> 8)) & 0xED3EC150) + 1990156456) ^ (v210 - ((2 * v210) & 0x15E1FDE2) - 1963917583);
  v219 = dword_100216740[BYTE2(v202) ^ 0x81];
  v220 = (BYTE1(v205) ^ 0xE1) + ((v205 >> 8) & 0xB0 ^ 0x72A0010) - ((BYTE1(v205) ^ 0xE1) & 0xB0);
  v221 = dword_10021A6B0[(((2 * ((v218 ^ v212) ^ 0x510800FF)) | 0x10A8733C)
                        - ((v218 ^ v212) ^ 0x510800FF)
                        - 139737502) ^ 0x595C39A6];
  HIDWORD(v137) = v221 ^ 0xFFFFFF8F;
  LODWORD(v137) = v221 ^ 0xF6C24D00;
  v222 = dword_10023D700[HIBYTE(v190) ^ 0xC] ^ v219 ^ dword_10021BF10[((v220 & 0x39C69 ^ 0x89C18C01)
                                                                     + (v220 & 0x6396 ^ 0x40182281)
                                                                     - 1) ^ 0xC9DBAE39] ^ (((32 * v219) ^ 0xD0C62000)
                                                                                         - ((2
                                                                                           * ((32 * v219) ^ 0xD0C62000)) & 0xFB7E1E80)
                                                                                         - 37810347) ^ (((2 * (BYTE1(v205) ^ 0x7CFC2EA3)) & 0xA08048E0) - (BYTE1(v205) ^ 0x7CFC2EA3) + 767302287) ^ ((v137 >> 8) - ((2 * (v137 >> 8)) & 0x3F762E34) - 1615128806);
  v223 = dword_100216740[BYTE2(v205) ^ 0xE3];
  v224 = ((BYTE1(v218) ^ 0x72) + ((v218 >> 8) & 0x31 ^ 0xB4176A01) - ((BYTE1(v218) ^ 0x72) & 0x31)) ^ 0xFD574E79;
  v225 = (((2 * (BYTE2(v218) ^ 0x59)) | 0x6E770562) - (BYTE2(v218) ^ 0x59) + 1220836687) ^ 0xB69A2231;
  v226 = dword_10021A6B0[(((2 * (v190 ^ 0xAA)) | 0xC459C326)
                        - (v190 ^ 0xAA)
                        + 500375149) ^ 0xE22CE188];
  HIDWORD(v137) = v226 ^ 0xFFFFFF8F;
  LODWORD(v137) = v226 ^ 0xF6C24D00;
  v227 = dword_10023D700[HIBYTE(v202) ^ 0xA4] ^ v223 ^ (((32 * v223) ^ 0xD0C62000)
                                                      - ((2 * ((32 * v223) ^ 0xD0C62000)) & 0xABD23E00)
                                                      + 1441341190) ^ dword_10021BF10[(((2 * v224) | 0x506A860C)
                                                                                     - v224
                                                                                     + 1472904442) ^ 0xE1756766] ^ (((2 * (BYTE1(v218) ^ 0xDD)) & 0x1A) - (BYTE1(v218) ^ 0xDD) + 24562) ^ ((v137 >> 8) - ((2 * (v137 >> 8)) & 0x6599537C) - 1295210050);
  v228 = dword_100216740[(((2 * v225) | 0xEE25B544) - v225 - 1997724322) ^ 0x76B37A49];
  v229 = v228 ^ ((BYTE1(v190) ^ 0xA11C0440 | 0x41CE5A5F) - (BYTE1(v190) ^ 0xA11C0440 | 0xBE31A5A0) - 1104042592) ^ dword_10023D700[HIBYTE(v205) ^ 0x49] ^ dword_10021BF10[(((2 * (BYTE1(v190) ^ 0xB6)) & 0x20) - (BYTE1(v190) ^ 0xB6) + 1519) ^ 0x579] ^ (((32 * v228) ^ 0xD0C62000) - ((2 * ((32 * v228) ^ 0xD0C62000)) & 0x4C62E080) + 640774224);
  HIDWORD(v137) = v229 ^ 0x17;
  LODWORD(v137) = v229 ^ 0xE20E9040;
  v230 = (v137 >> 6) - ((2 * (v137 >> 6)) & 0xA837DCDA) - 736366995;
  v231 = dword_10021A6B0[v202 ^ 0x5D];
  HIDWORD(v137) = v231 ^ 0xFFFFFF8F;
  LODWORD(v137) = v231 ^ 0xF6C24D00;
  v232 = (v137 >> 8) + 1324161024 - ((2 * (v137 >> 8)) & 0x9DDA304E) + 39;
  HIDWORD(v137) = v232 ^ 0xFFFFFFE7;
  LODWORD(v137) = v232 ^ 0x4EED1800;
  v233 = (v137 >> 6) - ((2 * (v137 >> 6)) & 0xB4BC2DB8) - 631367972;
  HIDWORD(v137) = v233 ^ 0x3EAC78C ^ v230;
  LODWORD(v137) = v233 ^ ~v230;
  v234 = (v137 >> 26) - ((2 * (v137 >> 26)) & 0x9E4F2FE4) + 1327994866;
  v235 = (((2 * (BYTE2(v190) ^ 0xE2)) & 0x158) - (BYTE2(v190) ^ 0xE2) - 1781319597) ^ 0x55FFA831;
  v236 = dword_100216740[((v235 | 0xDEFAA830) - (v235 | 0x210557CF) + 553998287) ^ 0x1ED638D4];
  LOWORD(v235) = (v205 ^ 0x48) + (v205 & 0x63 ^ 0x8323) - ((v205 ^ 0x48) & 0x63);
  v237 = ((BYTE1(v202) ^ 0xDD | 0x154F97A8) - (BYTE1(v202) ^ 0xDD | 0xEAB06857) - 357537705) ^ 0x914FD529;
  v238 = dword_10021A6B0[((v235 & 0xCBED ^ 0xE82DC80C) + (v235 & 0x3412 ^ 0x10401013) - 1) ^ 0xF86D5B7F];
  HIDWORD(v137) = v238 ^ 0xFFFFFF8F;
  LODWORD(v137) = v238 ^ 0xF6C24D00;
  v239 = dword_100216740[BYTE2(v222) ^ 0xDC];
  v240 = v236 ^ dword_10023D700[HIBYTE(v218) ^ 0xD0] ^ dword_10021BF10[(v237 - ((2 * v237) & 0x251341CE) - 1836474137) ^ 0x1689E2B3] ^ ((v137 >> 8) + 2029420408 + (~(2 * (v137 >> 8)) | 0xE130111)) ^ (((32 * v236) ^ 0xD0C62000) - ((2 * ((32 * v236) ^ 0xD0C62000)) & 0x23B1A280) + 299422023);
  v241 = v239 ^ dword_10023D700[HIBYTE(v240) ^ 0x7C] ^ (((32 * v239) ^ 0xD0C62000)
                                                      - ((v239 << 6) & 0x40101B80)
                                                      + 537398727) ^ 0xA6C84EE6;
  v242 = ((v241 & 0xDDE3163B ^ 0x90630623)
        + (v241 & 0x901003A ^ 0x910681C)
        - ((v241 & 0xDDE3163B ^ 0x90630623) & 0x901003A)) ^ 0x555609A;
  v243 = ((BYTE1(v227) ^ 0x33 | 0xF7137C32) - (BYTE1(v227) ^ 0x33 | 0x8EC83CD) + 149717965) ^ 0xF601FE12;
  v244 = (v241 & 0xC000) + (v241 & 0x14C0C0 ^ 0xFFEBFFBF) + (v241 & 0xC000 | 0xF61F27D9);
  v245 = (v241 & 0x2080104 | v241 & 0x20002800 ^ 0x20000001) + 1291108455;
  v246 = ((v245 & 0x44C40104 ^ 0x10000100) + (v245 ^ 0xE7EDD444) - ((v245 ^ 0xE7EDD444) & 0x88000124)) ^ 0x57D5150C | (v244 | 1) ^ 0xF60B2759;
  v247 = (v246 - ((2 * v246) & 0x248DBD84) + 306634434) ^ 0x1246DEC2 | (v242 - ((2 * v242) & 0x88261388) - 1005368892) ^ 0xC4964140;
  v248 = dword_10021A6B0[v234 ^ 0x85];
  HIDWORD(v137) = v248 ^ 0xFFFFFF8F;
  LODWORD(v137) = v248 ^ 0xF6C24D00;
  v249 = dword_10021BF10[BYTE1(v227) ^ 0xBB] ^ (((2 * v243) | 0xF4D6DC7A) - v243 + 93622723) ^ ((v137 >> 8)
                                                                                              - ((2 * (v137 >> 8)) & 0x62806AA6)
                                                                                              + 826291539) ^ (v247 - ((2 * v247) & 0xAF805264) + 1472211250);
  v250 = (((LOBYTE(dword_10021BF10[BYTE1(v227) ^ 0xBB]) ^ (((2 * v243) | 0x7A) - v243 - 61) ^ (BYTE1(v137) - ((2 * BYTE1(v137)) & 0xA6) + 83) ^ (v247 - ((2 * v247) & 0x64) + 50)) ^ 0xFFD959DF)
        + 2532946
        + ((2 * v249) & 0x15C ^ 0x40))
       % 0x72;
  v251 = ((v202 >> 8) & 0x74 ^ 0x435) + ((v202 >> 8) & 0x8B);
  v252 = dword_100216740[((HIWORD(v227) & 4)
                        + (BYTE2(v227) ^ 0x18D88AD)
                        - ((BYTE2(v227) ^ 0x18D88AD) & 0x898004)
                        + 436351744) ^ 0x1B063BD7];
  v253 = (((v234 >> 8) & 0x53 ^ 0xA12401) + ((v234 >> 8) & 0xAC ^ 0x1058C225) - 1) ^ 0x11798A28;
  v254 = ((BYTE1(v234) ^ 0x44) - ((2 * (BYTE1(v234) ^ 0x44)) & 0xFFFFFF0F) + 143704711) ^ 0x88D0AEC7;
  v255 = v240 ^ (v251 - 1);
  v256 = dword_10021A6B0[(v240 ^ (v251 - 1)) ^ 0x5B];
  HIDWORD(v137) = v256 ^ 0xFFFFFF8F;
  LODWORD(v137) = v256 ^ 0xF6C24D00;
  v257 = v252 ^ dword_10023D700[HIBYTE(v222) ^ 0xF5] ^ (((32 * v252) ^ 0xD0C62000)
                                                      - ((2 * ((32 * v252) ^ 0xD0C62000)) & 0xC5B7E940)
                                                      - 488901460) ^ ((v137 >> 8)
                                                                    - ((2 * (v137 >> 8)) & 0xD0AB94E6)
                                                                    - 397030797) ^ (((2 * v253) | 0xE4DD096C)
                                                                                  - v253
                                                                                  + 227638090) ^ dword_10021BF10[(v254 - ((2 * v254) & 0x804C02) + 871249409) ^ 0xB3AE5ADD];
  v258 = dword_100216740[BYTE2(v234) ^ 0x4B];
  v259 = (((32 * v258) ^ 0xD0C62000) - ((2 * ((32 * v258) ^ 0xD0C62000)) & 0x3C4A23C0) - 1641737749) ^ v258;
  HIDWORD(v137) = v259 ^ 0x49E9B5;
  LODWORD(v137) = v259 ^ 0xD6000000;
  v260 = (v137 >> 25) - ((2 * (v137 >> 25)) & 0x448B3940) + 574987424;
  HIDWORD(v137) = v260 ^ 0x33333333;
  LODWORD(v137) = v260 ^ 0x57213380;
  v261 = dword_10021A6B0[((v222 ^ 0xFFFFFFFC) - 883106570 + ((2 * v222) | 0x69464616)) ^ 0x34A32340];
  v262 = ((BYTE1(v255) ^ 0xB | 0xC348E016) - (BYTE1(v255) ^ 0xB | 0x3CB71FE9) + 1018634217) ^ 0x41C8AB8E;
  v263 = ((BYTE2(v240) ^ 0x24) - ((2 * (BYTE2(v240) ^ 0x24)) & 0xFFFFFFBF) + 1330272479) ^ 0x8B4AD8CD;
  v264 = dword_100216740[((v263 | 0xD17D64E3) - (v263 | 0x2E829B1C) + 780311324) ^ 0x157DE4CD];
  v265 = dword_10021BF10[(v262 - ((2 * v262) & 0x1639775C) - 1961051218) ^ 0x99CF0F8] ^ dword_10023D700[HIBYTE(v227) ^ 0x3C] ^ (((v261 << 24) ^ 0x8F000000) - ((2 * ((v261 << 24) ^ 0x8F000000)) & 0xEFFFFFFF) + 2008364344) ^ (((v255 >> 8) & 0x41) + (BYTE1(v255) ^ 0xFFFFFF71) + (BYTE1(v255) | 0x577ED1BE) + 1) ^ ((v137 >> 7) - ((2 * (v137 >> 7)) & 0x4C9A84A6) - 1504886189);
  v266 = ((2 * (v227 ^ 0xADACE597)) | 0xF169C632) - (v227 ^ 0xADACE597) - 2025120537;
  v267 = BYTE1(v222);
  v268 = (((2 * (v267 ^ 0xB1054ABA)) & 0x42080122) - (v267 ^ 0xB1054ABA) + 1477013102) ^ 0xAE4D29D1;
  v269 = dword_10021A6B0[((v266 & 0xC5180599 ^ 0x5410018) + (v266 ^ 0xCABE3DE1) - ((v266 ^ 0xCABE3DE1) & 0x57B3599)) ^ 0xDADD0EB9];
  HIDWORD(v137) = v269 ^ 0xFFFFFF8F;
  LODWORD(v137) = v269 ^ 0xF6C24D00;
  v270 = v264 ^ (((2 * v268) | 0xF963FA18) - v268 + 55444212) ^ dword_10021BF10[(((2 * (v267 ^ 0x80600965)) | 0x3B62147C)
                                                                               - (v267 ^ 0x80600965)
                                                                               + 1649341890) ^ 0x1DD1032E] ^ dword_10023D700[HIBYTE(v234) ^ 0x79] ^ (((32 * v264) ^ 0xD0C62000) - ((2 * ((32 * v264) ^ 0xD0C62000)) & 0xA3403340) - 778036802) ^ ((v137 >> 8) - ((2 * (v137 >> 8)) & 0x73B8537C) - 1176753730);
  v271 = v265 ^ (v261 >> 8);
  v272 = HIBYTE(v265) ^ 0x26;
  v274 = (((2 * (BYTE1(v270) ^ 0x83)) & 0x42) - (BYTE1(v270) ^ 0x83) - 336398882) ^ 0xEB70C56A;
  v275 = v274 - ((2 * v274) & 0x100631C) + 346913166;
  v276 = (v250 ^ 0x6716E61A) - 1729553946 + ((2 * v250) & 0x34);
  if ((v250 ^ 0xF9B7DFFF) + 2 * v250 != -105390081)
    v276 = 0;
  v277 = (((v249 ^ 0x259C4071) - v276) ^ 0xE7) + ((2 * ((v249 ^ 0x259C4071) - v276)) & 0xCE) + 25;
  v278 = dword_10021A6B0[(v277 + 1507896119 - ((2 * v277) & 0x108) + 77) ^ 0x59E0AB37];
  HIDWORD(v279) = v278 ^ 0xFFFFFF8F;
  LODWORD(v279) = v278 ^ 0xF6C24D00;
  v280 = dword_100216740[BYTE2(v270) ^ 0x74];
  v273 = dword_100216740[(((2 * (BYTE2(v271) ^ 0xD)) & 0x174) - (BYTE2(v271) ^ 0xD) + 9029) ^ 0x23D1];
  v281 = v273 ^ dword_10023D700[HIBYTE(v257) ^ 0x2A] ^ dword_10021BF10[v275 ^ 0x142F49F6] ^ (((32 * v273) ^ 0xD0C62000)
                                                                                           - ((2
                                                                                             * ((32 * v273) ^ 0xD0C62000)) & 0x7CEDC700)
                                                                                           + 1047978900) ^ v275 ^ ((v279 >> 8) - ((2 * (v279 >> 8)) & 0xC0409D24) - 534753646);
  v282 = (((v249 >> 8) & 0xA4 ^ 0xB7E4C305) + ((v249 >> 8) & 0x5B) - 1) ^ 0x7770B14C;
  v283 = dword_10021A6B0[((v257 ^ 0x504E94B)
                        - ((2 * (v257 ^ 0x504E94B)) & 0x8084216)
                        + 1993750283) ^ 0x73D2DE0E];
  HIDWORD(v279) = v283 ^ 0xFFFFFF8F;
  LODWORD(v279) = v283 ^ 0xF6C24D00;
  v284 = HIBYTE(v249) ^ 0x25;
  v285 = dword_10023D700[v272] ^ v280 ^ dword_10021BF10[(v282 - ((2 * v282) & 0x800880A0) - 400275120) ^ 0x28B03B28] ^ (((32 * v280) ^ 0xD0C62000) - ((2 * ((32 * v280) ^ 0xD0C62000)) & 0x167CE000) - 1958842347) ^ ((v279 >> 8) - ((2 * (v279 >> 8)) & 0x56A46C9E) + 726808143) ^ ((BYTE1(v249) ^ 0x5600840) + ((v249 >> 8) & 0xDA ^ 0x9A9FB79A) - ((BYTE1(v249) ^ 0x5600840) & 0x10008DA));
  v286 = dword_100216740[(((2 * (BYTE2(v249) ^ 0x581887B8)) | 0xC52B00C4) - (BYTE2(v249) ^ 0x581887B8) + 493518750) ^ 0xBA8D075E];
  v287 = dword_10021A6B0[v271 ^ 0x67];
  HIDWORD(v279) = v287 ^ 0xFFFFFF8F;
  LODWORD(v279) = v287 ^ 0xF6C24D00;
  v288 = v286 ^ dword_10023D700[HIBYTE(v270) ^ 0xA2] ^ dword_10021BF10[BYTE1(v257) ^ 0x35] ^ (((2 * (BYTE1(v257) ^ 0xB3)) & 0x1AC)
                                                                                            - (BYTE1(v257) ^ 0xB3)
                                                                                            + 2089) ^ (((32 * v286) ^ 0xD0C62000) - ((2 * ((32 * v286) ^ 0xD0C62000)) & 0xB3674A80) + 1504945481) ^ ((v279 >> 8) - ((2 * (v279 >> 8)) & 0x35709F1A) - 1699197043);
  v289 = ((HIWORD(v257) & 0x2E ^ 0x1F565E21) + (HIWORD(v257) & 0xD1) - 1) ^ 0x15575E9E;
  v290 = dword_100216740[(((2 * v289) & 0x1402007C) - v289 + 1891680705) ^ 0x7AC1C1F2];
  v291 = (((v271 >> 8) & 0x11 ^ 0xD2637B30) + ((v271 >> 8) & 0xCC ^ 0x8D) - 1) ^ 0xD6C27B35;
  v292 = ((v271 >> 8) & 2)
       + ((v271 >> 8) & 0x22 ^ 0x2203402F)
       - (((v271 >> 8) & 0x22 ^ 0x2203402F) & 0x2004003)
       - 871888944;
  v293 = ((BYTE1(v271) ^ 0x8C) - ((2 * (BYTE1(v271) ^ 0x8C)) & 0x10A) - 535402875) ^ 0xC010639D;
  v294 = (((2 * v291) & 0x84000B4) - v291 + 198645669) & 0x661A9CDD ^ 0x9FF777FF;
  v295 = dword_10021A6B0[(((2 * (v270 ^ 0x10A80EC)) & 0x1014A)
                        - (v270 ^ 0x10A80EC)
                        + 1191861082) ^ 0x4600DB89];
  HIDWORD(v279) = v295 ^ 0xFFFFFF8F;
  LODWORD(v279) = v295 ^ 0xF6C24D00;
  v296 = v290 ^ dword_10023D700[v284] ^ v292 ^ (((32 * v290) ^ 0xD0C62000)
                                              - ((2 * ((32 * v290) ^ 0xD0C62000)) & 0x7712C780)
                                              - 1148623912) ^ ((v279 >> 8)
                                                             - 1835160881
                                                             - ((2 * (v279 >> 8)) & 0x253B6972)
                                                             + 2538) ^ dword_10021BF10[((v293 | 0x5560F645)
                                                                                      - (v293 | 0xAA9F09BA)
                                                                                      - 1432417862) ^ 0x7566F350] ^ (v294 + 1067996247 + ((2 * v294) & 0x4C1028A8 ^ 0xCCBF7FFB));
  v297 = dword_100216740[BYTE2(v285) ^ 0xE4];
  v298 = (((2 * (v296 ^ 0x28)) | 0xFBE79B48) - (v296 ^ 0x28) + 34353756) ^ 0xD9F32C84;
  v299 = dword_10021A6B0[((v298 | 0xFC122EEE) - (v298 | 0x3EDD111) + 65917201) ^ 0xD812CFC0];
  HIDWORD(v279) = v299 ^ 0xFFFFFF8F;
  LODWORD(v279) = v299 ^ 0xF6C24D00;
  v300 = dword_10023D700[HIBYTE(v281) ^ 0xF] ^ v297 ^ dword_10021BF10[(((2 * (BYTE1(v288) ^ 0x42150060)) | 0xBE8A279A)
                                                                     - (BYTE1(v288) ^ 0x42150060)
                                                                     + 549121075) ^ 0x9D501331] ^ (((32 * v297) ^ 0xD0C62000)
                                                                                                 - ((2 * ((32 * v297) ^ 0xD0C62000)) & 0x1792DBC0)
                                                                                                 + 197750271) ^ ((BYTE1(v288) ^ 0xB001008E | 0xB7239A54) - (BYTE1(v288) ^ 0xB001008E | 0x48DC65AB) + 1222403499) ^ ((v279 >> 8) - ((2 * (v279 >> 8)) & 0xC426C6) - 2141056157);
  v301 = ((v296 >> 8) & 0x40) + (BYTE1(v296) ^ 0xFFFFFF58) + (BYTE1(v296) | 0x73779FBF) + 1;
  v302 = dword_100216740[((HIWORD(v288) & 0x65 ^ 0x113AC024) + (HIWORD(v288) & 0x9A ^ 0x8240001B) - 1) ^ 0x937AC063];
  v303 = (((v296 >> 8) & 0x10) + (BYTE1(v296) ^ 0xFFFFFF1D) + (BYTE1(v296) | 0x9A6422EF) + 1) ^ 0xB216240F;
  v304 = dword_10021A6B0[(((2 * (v281 ^ 0x47F9CC93)) | 0xCBDCC2E2)
                        - (v281 ^ 0x47F9CC93)
                        + 437362319) ^ 0xA217AD6E];
  v305 = ((v304 << 24) ^ 0x8F000000) - ((2 * ((v304 << 24) ^ 0x8F000000)) & 0x2000000) - 2120525093;
  v306 = dword_10023D700[HIBYTE(v285) ^ 0xF3] ^ v302 ^ dword_10021BF10[((v303 | 0xADA654FB)
                                                                      - (v303 | 0x5259AB04)
                                                                      + 1381608196) ^ 0x85D45280] ^ (v304 >> 8);
  v307 = dword_100216740[(((2 * (BYTE2(v296) ^ 0xBE)) | 0xAE4EF542) - (BYTE2(v296) ^ 0xBE) + 685278559) ^ 0xD7277AD5];
  v308 = v306 ^ (((32 * v302) ^ 0xD0C62000) - ((2 * ((32 * v302) ^ 0xD0C62000)) & 0x285A3C0) + 21156329) ^ ((v301 & 0xB7A9E709 ^ 0x9489C000) + (v301 ^ 0x63723F19) - ((v301 ^ 0x63723F19) & 0xB7A9E709));
  v309 = v305 ^ v308 ^ 0x6D51162A;
  v310 = ((BYTE1(v281) ^ 0xD4) + ((v281 >> 8) & 0xBC ^ 0x5F57AD28) - ((BYTE1(v281) ^ 0xD4) & 0xBC)) ^ 0xFA5FA9DD;
  v311 = BYTE1(v281) ^ 0xC1;
  v312 = dword_100216740[BYTE2(v281) ^ 0xB8];
  v313 = dword_10021A6B0[((v285 ^ 0xDBB3D1FC | 0x31A882F8)
                        - (v285 ^ 0xDBB3D1FC | 0xCE577D07)
                        - 833127161) ^ 0xEA1B53F8];
  v314 = v307 ^ dword_10023D700[HIBYTE(v288) ^ 0xB9] ^ dword_10021BF10[v311] ^ (((32 * v307) ^ 0xD0C62000)
                                                                              - ((v307 << 6) & 0x4E020E00)
                                                                              + 654378757) ^ (v310
                                                                                            + 2022541751
                                                                                            - ((2 * v310) & 0x40100F54)
                                                                                            + 3571) ^ (v313 >> 8) ^ (((v313 << 24) ^ 0x8F000000) - ((2 * ((v313 << 24) ^ 0x8F000000)) & 0x55555555) + 713699365);
  v315 = ((v285 >> 7) & 0x1CE) - BYTE1(v285) - 1368804840;
  v316 = ((v288 ^ 0xFFFFFFEC) + 1005155918 + ((2 * v288) | 0x882D1366)) ^ 0x50FEC811;
  v317 = dword_10021A6B0[(((2 * v316) | 0x7E7D469E) - v316 - 1061069647) ^ 0xABD6E21E];
  HIDWORD(v279) = v317 ^ 0xFFFFFF8F;
  LODWORD(v279) = v317 ^ 0xF6C24D00;
  v318 = dword_10023D700[HIBYTE(v296) ^ 0x7D] ^ dword_10021BF10[((v315 & 0x4400164 ^ 0x100164)
                                                               + (v315 ^ 0x7EE90209)
                                                               - ((v315 ^ 0x7EE90209) & 0x803164)) ^ 0xD4508110] ^ BYTE1(v285) ^ v312 ^ ((v279 >> 8) - ((2 * (v279 >> 8)) & 0x3DE54BE) - 2115032481) ^ (((32 * v312) ^ 0xD0C62000) - ((2 * ((32 * v312) ^ 0xD0C62000)) & 0x69FF1200) + 889162013);
  v319 = dword_10023E8C0[((HIWORD(v308) & 1 | 0x200034) + (HIWORD(v308) & 0xFE ^ 0x3016C80F) + 971) ^ 0x3036CCD3];
  HIDWORD(v279) = v319 ^ 6;
  LODWORD(v279) = v319 ^ 0x4D943000;
  v320 = ((BYTE1(v314) ^ 0x47 | 0x28FDB5AD) - (BYTE1(v314) ^ 0x47 | 0xD7024A52) - 687715758) ^ 0x2E6F159D;
  v321 = HIBYTE(v300) ^ dword_100216340[HIBYTE(v300) ^ 0x47] ^ dword_10023CC80[(((2 * v320) & 0x26920E60)
                                                                              - v320
                                                                              + 1823930575) ^ 0x6A245880] ^ 0xF8D04879 ^ ((v279 >> 10) - ((2 * (v279 >> 10)) & 0x590F3CA) - 2100790811);
  v322 = ((2 * (v321 & 0xA1A9E454 ^ 0x1092014)) | 0x4D565802) - (v321 & 0xA1A9E454 ^ 0x1092014) + 1498731519;
  v323 = ((v322 & 0x78DDA48 ^ 0x1858249 | v322 & 0xE87225B4) - 1) ^ 0x7876E0C | (((2 * (v321 & 0x5E561BAB ^ 0xAC583986)) | 0x8EE4D128)
                                                                               - (v321 & 0x5E561BAB ^ 0xAC583986)
                                                                               + 948803436) ^ 0x6F7A5890;
  v324 = dword_10023A970[v318 ^ 0xE3];
  HIDWORD(v279) = v324 ^ 0xBE34;
  LODWORD(v279) = v324 ^ 0x72AC0000;
  v325 = (v279 >> 18) - ((2 * (v279 >> 18)) & 0x3914C0F0) - 1668652936;
  v326 = ((2 * ((v325 >> 2) & 0x21D899CA ^ 0x20909842)) & 0x40A02010)
       - ((v325 >> 2) & 0x21D899CA ^ 0x20909842)
       + 1602857430;
  v327 = v325 ^ BYTE1(v314) ^ ((v326 & 0x6D09262A ^ 0x6806262D | v326 & 0x92F0D9D0) - 1) ^ (v323
                                                                                          - ((2 * v323) & 0x733CB426)
                                                                                          + 966679059);
  v328 = HIBYTE(v309) ^ 0x9FD6542B;
  v329 = dword_100216340[HIBYTE(v309) ^ 0x8A] ^ 0x5602D4BC;
  v330 = (v328 & v329) - ((2 * (v328 & v329)) & 0x1A042950);
  v331 = ((v328 + v329) ^ 0xFE1EDD75)
       + ((2 * (v328 + v329)) & 0xFC3DBAEA)
       + ((2 * v330 - 1710986416) ^ 0x1B05C941)
       + ((2 * (2 * v330 - 1710986416)) & 0xFDFCBBDC ^ 0xCBF76D7F);
  v332 = v331 + 1 - 2 * ((v331 + 14647419) & 0x2480641F ^ (v331 + 1) & 1) - 1520442216;
  v333 = dword_10023E8C0[BYTE2(v314) ^ 0xB2];
  HIDWORD(v279) = v333 ^ 6;
  LODWORD(v279) = v333 ^ 0x4D943000;
  v334 = (v279 >> 10) - ((2 * (v279 >> 10)) & 0xD748F04) + 112871298;
  v335 = ((v300 ^ 0xDE | 0x70D5945) - (v300 ^ 0xDE | 0xF8F2A6BA) - 118315334) ^ 0xB7D69C4;
  v336 = dword_10023A970[((v335 | 0x41BA7EFC) - (v335 | 0xBE458103) - 1102741245) ^ 0x4DCA4E61];
  HIDWORD(v279) = v336 ^ 0xBE34;
  LODWORD(v279) = v336 ^ 0x72AC0000;
  v337 = (v279 >> 18) - ((2 * (v279 >> 18)) & 0x6777225E) + 867930415;
  v338 = (((2 * ((v337 >> 2) & 0x21D899CA ^ 0x20C810C2)) & 0x40B00394)
        - ((v337 >> 2) & 0x21D899CA ^ 0x20C810C2)
        - 1685791199) ^ 0x19824E0D;
  v339 = dword_10023E8C0[BYTE2(v318) ^ 0x1B];
  v340 = v334 ^ dword_10023CC80[((BYTE1(v318) ^ 0xF1) - 451744019 - ((v318 >> 7) & 8) + 1815) ^ 0xE512F6F3] ^ (((2 * (BYTE1(v318) ^ 0xFE)) | 0x4108C71E) - (BYTE1(v318) ^ 0xFE) + 1601936497) ^ v337 ^ v332 ^ ((v338 | 0x49B3312A) - (v338 | 0xB64CCED5) - 1236480299);
  HIDWORD(v279) = v339 ^ 6;
  LODWORD(v279) = v339 ^ 0x4D943000;
  v341 = (((2 * (BYTE1(v300) ^ 0xC7)) & 0xB6) - (BYTE1(v300) ^ 0xC7) + 1460073380) ^ 0x7706F1E4;
  v342 = BYTE1(v300) ^ 0x50;
  LOBYTE(v337) = (v340 & 0x12 ^ 6 | 0x6E) - (v340 & 0x12 ^ 6 | 0x91) - 111;
  v343 = dword_10023A970[v308 ^ 5];
  v344 = ((((v343 ^ 0x72ACBE34u) >> (v337 ^ 0x78))
         - ((2 * ((v343 ^ 0x72ACBE34u) >> (v337 ^ 0x78))) & 0x7E94EFE)
         + 66365311) ^ 0x3F4A77F) >> (v337 ^ 0x6A);
  v345 = (v344 - ((2 * v344) & 0x368D6374) - 1689865798) ^ 0x9B46B1BA | (((v343 << 14) ^ 0x2F8D0000)
                                                                       - ((2 * ((v343 << 14) ^ 0x2F8D0000)) & 0x64910000)
                                                                       - 1303869637) ^ 0xB248873B;
  v346 = (HIWORD(v300) & 0x74 ^ 0x73C3DB65) + (HIWORD(v300) & 0x8B) - 1;
  v347 = dword_10023E8C0[((v346 & 0x2A1 ^ 0x802CD080) + (v346 & 0x5E ^ 0x8800055) - 1) ^ 0x88ACD252];
  v348 = v345 - ((2 * v345) & 0xEF62D6A2) - 139367599;
  v349 = ((v348 >> 2) & 0x21D899CA ^ 0x881148) - ((2 * ((v348 >> 2) & 0x21D899CA ^ 0x881148)) & 0x40B01290) - 1502073000;
  v350 = ((HIBYTE(v314) ^ 0x80000089) - 1590621635 + (~(2 * (HIBYTE(v314) ^ 0x80000089)) | 0xFFFFFF87)) ^ dword_100216340[HIBYTE(v314) ^ 0xAC] ^ dword_10023CC80[v342] ^ (v341 - ((2 * v341) & 0x40002E3C) + 1735620382) ^ ((v279 >> 10) - 617202638 - ((2 * (v279 >> 10)) & 0xB66C90D6) + 3129) ^ v348 ^ ((v349 & 0xD2F7CF40 ^ 0x50C38801 | v349 & 0x2D0830BA) - 1);
  v351 = (BYTE1(v309) ^ 0x44) - ((2 * (BYTE1(v309) ^ 0x44)) & 0x5E) - 1268961489;
  v352 = BYTE1(v309) ^ 0x165D86EC;
  v353 = dword_10023CC80[(((((((v309 >> 8) & 0x4C) + v352) | 0x49205000) - (v352 & 0x1650824C)) & 0x539F ^ 0x1490231B)
                        + ((((((v309 >> 8) & 0x4C) + v352) | 0x49205000) - (v352 & 0x1650824C)) ^ 0xE929D8A4)
                        - (((((((v309 >> 8) & 0x4C) + v352) | 0x49205000) - (v352 & 0x1650824C)) ^ 0xE929D8A4) & 0x4039F)) ^ 0xB490FFC6];
  v354 = HIBYTE(v318) ^ (v347 >> 10) ^ dword_100216340[HIBYTE(v318) ^ 0x11] ^ (((v347 << 22) ^ 0x1800000)
                                                                             - ((2 * ((v347 << 22) ^ 0x1800000)) & 0xC1000000)
                                                                             + 1621307158);
  v355 = (v353 ^ 0x163C5814) + (v353 ^ 0x40A76DFD ^ v354) + 1;
  v356 = (v354 ^ ((v354 ^ 0x569B35E9) - ((2 * (v354 ^ 0x569B35E9) + 2) & 0x3A627D3E) - 1657717088) ^ (v355 - ((2 * v355) & 0x559581CE) + 717930727) ^ 0x1E9F346E)
       + (v353 ^ 0x163C5814);
  v357 = v356 - ((2 * v356) & 0xFDF20A4C) + 2130248998;
  v358 = dword_10023A970[v314 ^ 0x2C];
  v359 = (v358 << 8) ^ 0xACBE3400;
  v360 = (v359 - ((2 * v359) & 0x3D03FE00) - 1635647672) & 0xFC000000 ^ 0x960120B9;
  v361 = (v359 - ((2 * v359) & 0x1F69C00) + 50023983) & 0x3FFFF00 ^ 0x3F85200;
  v362 = (((2 * v360) & 0x14000110) - v360 + 1947728241) ^ 0x7E16D9C8 | HIBYTE(v358) ^ 0x72;
  v363 = (v362 - ((2 * v362) & 0xB8000DD0) + 1589524200) ^ 0x5EBE36E8 | ((v361 | 0x625A4F3B)
                                                                       - (v361 | 0x9DA5B0C4)
                                                                       - 1650085692) ^ 0x6359533B;
  v364 = v363 - ((2 * v363) & 0x1C11136C) - 1912043082;
  HIDWORD(v279) = v364 ^ 0x37B27AC;
  LODWORD(v279) = v364 ^ 0x5C000000;
  v365 = (v279 >> 26) - ((2 * (v279 >> 26)) & 0x12131B38) + 151621020;
  v366 = v357 ^ ((v351 & 0x10403996 ^ 0xA021090) + (v351 ^ 0x957C2D2F) - ((v351 ^ 0x957C2D2F) & 0x20213996)) ^ v365 ^ (((((v365 >> 2) & 0x21D899CA ^ 0xAE7CF71D) - 1) & 0x100000 | (((v365 >> 2) & 0x21D899CA ^ 0xAE7CF71D) - 1) & 0x21C899CA ^ 0x4AE9C87F) + 511);
  v367 = STACK[0xB28];
  v368 = (_BYTE *)STACK[0xB28];
  *(_BYTE *)(v367 + 10) = byte_1002276C0[((BYTE1(v350) ^ 0x902A1FE | 0x216E8663)
                                        - (BYTE1(v350) ^ 0x902A1FE | 0xDE91799C)
                                        - 560891492) ^ 0x286C2775] ^ 0x15;
  v369 = ((2 * (BYTE1(v366) ^ 0x4A)) & 0xFFFFFF07) - (BYTE1(v366) ^ 0x4A) + 2004443772;
  *(_BYTE *)(v367 + 14) = byte_1002276C0[((v369 & 0x4168037A ^ 0x80028502)
                                        + (v369 ^ 0x5F6962F8)
                                        - ((v369 ^ 0x5F6962F8) & 0x2010037A)) ^ 0xC96A87F0] ^ 0x86;
  v370 = (((2 * (BYTE2(v327) ^ 0xB3)) & 0x1F0) - (BYTE2(v327) ^ 0xB3) - 1461751033) ^ 0xA4575237;
  *(_BYTE *)(v367 + 1) = byte_100225D80[(v370 - ((2 * v370) & 0x800002C) - 2028503018) ^ 0x8B9FA14ALL] ^ 0x86;
  *(_BYTE *)(v367 + 13) = byte_100225D80[(((2 * (BYTE2(v366) ^ 0x621AA)) | 0xB05A0E98)
                                        - (BYTE2(v366) ^ 0x621AA)
                                        - 1479345996) ^ 0x582B2629] ^ 0x86;
  LOBYTE(v357) = ((v350 ^ 0x38 | 0x98) - (v350 ^ 0x38 | 0x67) + 103) ^ 0xDA;
  LOBYTE(v370) = byte_10021D240[((v350 & 6 | 0xA0020000 | ((v350 & 0x2F ^ 0xF8) - (v350 & 0xD0)) & 0xFFFFFFF9 ^ 0x48C199E9)
                               + 401408) ^ 0xE8C9B989];
  LOBYTE(v357) = ((2 * v357) & 0x74) - v357 + 69;
  LOBYTE(v367) = ((v357 ^ 0x61) & (v370 ^ 0x1A)) - ((2 * ((v357 ^ 0x61) & (v370 ^ 0x1A))) & 0x1C);
  LOBYTE(v370) = (v370 ^ v357 ^ 0x7B) + ((2 * v367 + 28) ^ 0x43) + ((2 * (2 * v367 + 28)) & 0xBF ^ 0x38) - 95;
  v368[11] = v370 - ((2 * v370) & 0x4C) + 38;
  LOBYTE(v370) = byte_10023C660[HIBYTE(v327) ^ 0xCELL];
  *v368 = (v370 - ((2 * v370 + 28) & 0x3E) - 19) ^ 0x1A;
  v371 = ((BYTE2(v340) ^ 0x9422C2) + (HIWORD(v340) & 0xE4 ^ 0xB943C124) - ((BYTE2(v340) ^ 0x9422C2) & 0x8022E4)) ^ 0x46A83EFE;
  v372 = (((2 * (BYTE2(v340) ^ 0x79)) | 0x354FFE78) - (BYTE2(v340) ^ 0x79) + 1163395268) & 0x3FFFFFFF;
  v373 = v372 ^ (v371 - ((2 * v371 + 76) & 0xCC8D2EA2) + 1715902327) ^ 0x8518FEE ^ ((v372 ^ 0xC55800B8)
                                                                                  - ((2 * (v372 ^ 0xC55800B8) + 2) & 0xA961CFF0)
                                                                                  + 1420879865);
  v368[5] = byte_100225D80[(v373 - 1931922883 + (~(2 * v373 + 74) | 0xE64D9AFD) + 106) ^ 0x8CD9323D] ^ 0x3D;
  v368[2] = byte_1002276C0[(((v327 >> 8) & 0xCF ^ 0x1C6) + ((v327 >> 8) & 0x30 ^ 0x11) - 1) ^ 0x11ALL] ^ 0xDF;
  v368[9] = byte_100225D80[(((2 * (BYTE2(v350) ^ 0xD6)) | 0x983F51D2) - (BYTE2(v350) ^ 0xD6) - 1277143273) ^ 0x4C1FA85F] ^ 0x20;
  LOBYTE(v373) = byte_10023C660[HIBYTE(v366) ^ 0x6DLL];
  v350 >>= 24;
  v368[12] = (v373 - ((2 * v373 - 100) & 0x96) + 25) ^ 0xA2;
  v374 = (v350 ^ 0xFFFFFF1D) + 1;
  v350 ^= 0x51u;
  v375 = v350 + (v374 ^ 0x2F6FBFEE) + ((2 * v374) & 0x5EDF7FDC) - 795852782;
  v376 = ((v375 - ((2 * v375) & 0x2528C1E6) - 1835769613) ^ 0x6D6B9F0D) + v350;
  LOBYTE(v376) = byte_10023C660[(v376 - ((2 * v376) & 0x443A76A4) + 572341074) ^ 0x221D3BA1];
  v368[8] = (v376 - ((2 * v376 - 100) & 0x90) + 22) ^ 0xEE;
  v377 = (v340 ^ 0x8A) + (v340 & 0x93 ^ 0x35A4BF11) - ((v340 ^ 0x8A) & 0x93);
  LOBYTE(v377) = (byte_10021D240[((v377 & 0x31204709 ^ 0x88184501)
                                + (v377 ^ 0x31223A0A)
                                - ((v377 ^ 0x31223A0A) & 0x4004709)) ^ 0xB9BEC23ELL] ^ 0x1A)
               + (v340 ^ 0xE2);
  v368[7] = (v377 - ((2 * v377) & 0x9A) - 51) ^ 0x6F;
  v368[6] = byte_1002276C0[(((2 * (BYTE1(v340) ^ 0x320C11B2)) & 0x102306) - (BYTE1(v340) ^ 0x320C11B2u) - 149658500) ^ 0xC5187568] ^ 0x2F;
  LOBYTE(v377) = (byte_10021D240[((v327 ^ 0x26C480B8)
                                + (v327 & 0xB5 ^ 0x99105B05)
                                - ((v327 ^ 0x26C480B8) & 0x480B5)) ^ 0xBFD05B89] ^ 0x1A)
               + (v327 ^ 0x42);
  v368[3] = (v377 - ((2 * v377) & 0x56) + 43) ^ 0xE1;
  v378 = (v366 & 0xC3 ^ 0x56C7DF81) + (v366 & 0x3C ^ 0x31) - 1;
  LOBYTE(v378) = (v366 ^ 0xB7)
               + (byte_10021D240[((v378 & 0x2417674 ^ 0x200034)
                                + (v378 ^ 0xC2CBFFC3)
                                - ((v378 ^ 0xC2CBFFC3) & 0x10043674)) ^ 0x86695677] ^ 0x1A);
  v368[15] = (v378 - ((2 * v378) & 0x48) - 92) ^ 0xD7;
  LOBYTE(v378) = byte_10023C660[HIBYTE(v340) ^ 0xF5];
  v368[4] = (v378 - ((2 * v378 - 100) & 0xD0) - 74) ^ 0xED;
  v379 = STACK[0x680] - 114;
  v380 = STACK[0x688] + 637049731;
  v381 = v379 ^ 0xFFFFFFFFDA076559;
  v382 = 1755343967
       * (((v380 + v381) ^ *(_DWORD *)(qword_1002789B8 + (int)(dword_100278BC0 & 0xC7090E2C))) & 0x7FFFFFFF);
  *(_BYTE *)(v380 + v381) ^= byte_10023F8C0[((_BYTE)v381 - 125) & 0xF | (16
                                                                       * ((1755343967 * (v382 ^ HIWORD(v382))) >> 24))] ^ (95 * (v382 ^ BYTE2(v382)));
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + (int)v379) - 12))();
}

void sub_10011D610()
{
  JUMPOUT(0x10011D59CLL);
}

void sub_10011D618()
{
  JUMPOUT(0x10011D64CLL);
}

uint64_t sub_10011D6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;

  v5 = v3 + 83306269;
  v6 = STACK[0x96C];
  STACK[0x8A0] -= 640;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4
                                                                       + 8
                                                                       * (v5 ^ 0x4F72CFC ^ (1193
                                                                                          * (((((v6 - v5) | (v5 - v6)) >> (((v5 + 34) ^ 0xA) + ((v5 + 31) | 0x10))) & 1) == 0)))))(a1, a2, a3, 4294924393);
}

void sub_10011D748()
{
  _DWORD *v0;
  uint64_t v1;

  v0 = (_DWORD *)STACK[0x830];
  STACK[0x6A8] = STACK[0x830] + 40;
  v0[26] = 605314902;
  v0[27] = 1644515966;
  v0[28] = -350341328;
  v0[29] = 1670823864;
  v0[30] = 350341327;
  v0[31] = -1670823865;
  v0[33] = 1279171884;
  v0[34] = -366034006;
  v1 = (LODWORD(STACK[0x88C]) - 1947712291);
  LODWORD(STACK[0x86C]) = v1;
  STACK[0x928] = (v1 | ((unint64_t)(v1 < 0x5C2E07) << 32)) + 0x33EC7F25B4F85B6BLL;
  JUMPOUT(0x10011D81CLL);
}

void sub_10011D8A0()
{
  JUMPOUT(0x10011D8A8);
}

uint64_t sub_10011D934@<X0>(int a1@<W2>, int a2@<W7>, int a3@<W8>)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  char v11;
  _BOOL4 v12;

  v9 = a2 - 974;
  v10 = a1 + 1;
  v11 = *(_BYTE *)(STACK[0x9A0] + (a1 - 603198772));
  *(_BYTE *)(v3 + (a3 - 518144652)) = v11 - ((2 * v11) & 0x62) - 79;
  v12 = v10 + v4 < v6;
  if (v6 < v7 != v10 + v4 < v5)
    v12 = v6 < v7;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v8 + 8 * ((1619 * !v12) ^ v9)) - 8))(3776822644);
}

void sub_10011D9D0()
{
  JUMPOUT(0x10011D96CLL);
}

uint64_t sub_10011D9E0(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  v8 = a2 + v5;
  v9 = (*(_DWORD *)(v2 + 68) ^ v3) + v8 + v3 - (v4 & (2 * ((*(_DWORD *)(v2 + 68) ^ v3) + v8)));
  *(_DWORD *)(v2 + 68) = v9;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((((v9 ^ v3) < v8) * (v6 - 424)) ^ v6)) - 12))();
}

uint64_t sub_10011DA24()
{
  uint64_t v0;
  int v1;

  *(_DWORD *)(v0 + 64) = *(_DWORD *)(v0 + 64) + ((v1 + 748) | 0x209) - 1740;
  return ((uint64_t (*)(void))STACK[0x918])();
}

uint64_t sub_10011DA4C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  int v8;

  v2 = (v0 - 1734);
  v3 = STACK[0xA70];
  v4 = STACK[0x6A8];
  STACK[0x780] = *(_QWORD *)(v1 + 8 * (v0 - 1680)) + (v2 ^ 0xFFFFFFFFFFFFFFFBLL);
  v5 = (v0 + 1907619550) & 0x8E4C07FD;
  STACK[0x758] = v4;
  v6 = STACK[0x8A0];
  v7 = (char *)&STACK[0xBB0] + STACK[0x8A0];
  STACK[0x6C0] = (unint64_t)v7;
  STACK[0x8A0] = v6 + (v5 ^ 0x589);
  STACK[0x7D0] = v3;
  STACK[0xA38] = *(_QWORD *)(v1 + 8 * (int)v2);
  STACK[0x720] = v4;
  STACK[0x920] = (unint64_t)v7;
  v8 = ((2 * *(_DWORD *)(v4 + 68)) & 0x62 ^ 0x60) + (*(_DWORD *)(v4 + 68) & ((v5 - 766) ^ 0x294) ^ 0xF6B7EFCF);
  *(_BYTE *)(v4 + (v8 + 155717647)) = 49;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (int)((23
                                               * (v8 + (((_DWORD)v5 + 1982751316) & 0x89D19ECF ^ 0x948091A) > 0xFFFFFFC7)) ^ v5))
                            - 4))();
}

uint64_t sub_10011DCDC()
{
  unsigned int v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _BOOL4 v5;
  int v9;

  v2 = STACK[0x718];
  v3 = STACK[0x718] + 16;
  v5 = STACK[0x718] < (unint64_t)&unk_100215970 && v3 > (unint64_t)&unk_100215960;
  if (v2 < (unint64_t)&unk_100215940 && v3 > (unint64_t)byte_100215930)
    v5 = 1;
  if (v2 < (unint64_t)&unk_100217ED0 && v3 > (unint64_t)byte_100217EC0)
    v5 = 1;
  v9 = v2 < (unint64_t)&unk_10021B1E0 && v3 > (unint64_t)byte_10021B1D0 || v5;
  return (*(uint64_t (**)(void))(v1 + 8 * ((115 * ((((v0 - 238) ^ v0 ^ v9) & 1) == 0)) ^ v0)))();
}

uint64_t sub_10011DD7C@<X0>(int8x16_t *a1@<X8>)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  unint64_t v5;
  unsigned int v6;

  v3 = (v1 ^ 0x11E) - 1074;
  *a1 = veorq_s8(*a1, (int8x16_t)xmmword_1002158C0);
  v4 = (v3 + 712) | 0x120;
  v5 = STACK[0x940];
  *(_QWORD *)(v5 + 64) = 0x6205527E24145F56;
  *(_QWORD *)(v5 + 72) = 0x6396BFB8EB1E3730;
  *(_QWORD *)(v5 + 80) = 0x9C69404714E1C8CFLL;
  *(_QWORD *)(v5 + 92) = 0xEA2EC3AA4C3E9D2CLL;
  STACK[0x9A8] = *(_QWORD *)(v2 + 8 * v3);
  STACK[0xAA0] = v5;
  LODWORD(STACK[0x894]) = -289289346;
  STACK[0x710] = (unint64_t)&unk_10021CD14;
  v6 = ((2 * ((v4 - 1811858719) & 0x6BFEC7FD ^ 0x69A) - 52) & (2 * *(_DWORD *)(v5 + 68)) ^ 0x78)
     + (*(_DWORD *)(v5 + 68) & 0x3F ^ 0xD936EBC3);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((1310
                                          * (((v6 + 650712083) ^ 0xBBDF6D6A)
                                           + 1142985302
                                           + ((2 * (v6 + 650712083)) & 0x77BEDAD4) < 0xFFFFFFC0)) ^ v4))
                            - 8))();
}

uint64_t sub_10011DE18@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(a1 + v4 - 2095062103) ^= *(_BYTE *)(v3 + v4 - 2095062103) ^ 0x66;
  return (*(uint64_t (**)(void))(v5 + 8 * (((v4 + 1 != v2 + 16) * (v1 ^ 0x526)) ^ v1)))();
}

void sub_10011DE60()
{
  JUMPOUT(0x10011DD9CLL);
}

uint64_t sub_10011DEF4()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 8 * (v0 ^ 0x756)) - 4))(0x5048710326010761, (v0 ^ 0x756u) - 345);
}

void sub_10011DFCC()
{
  JUMPOUT(0x10011DF78);
}

uint64_t sub_10011DFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  char v4;
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5
                                                                       + 8
                                                                       * ((((((v3 - 278) | 0x50C) - 166) ^ (v3 + 717))
                                                                         * (v4 == 14)) ^ v3)))(a1, a2, a3, 4294924393);
}

uint64_t sub_10011E014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W8>)
{
  int v8;
  uint64_t v9;

  STACK[0x8A0] += 16;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 + 8 * ((1980 * (((a8 + 8) & 0xF) == (((((v8 - 726) | 0x202) + 1122504512) ^ 0x42E81253) & (2 * (a8 + 8))))) ^ v8)) - 8))(a1, a2, a3, a4, a5, a6, a7, 3172462002);
}

uint64_t sub_10011E09C()
{
  _BYTE *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  STACK[0x688] = (unint64_t)&STACK[0xBB0] + v2;
  *(_OWORD *)((char *)&STACK[0xBB0] + v2) = xmmword_1002158B0;
  v4 = 1755343967
     * ((v0 ^ *(_DWORD *)(qword_1002789B8 + (dword_100278BC0 & (v1 - 955708643)))) & 0x7FFFFFFF);
  *((_BYTE *)&STACK[0x1600] + STACK[0xAD0]) = byte_10023F8C0[16 * (((v4 ^ HIWORD(v4)) * (v1 + 1755343184)) >> 24)] ^ *v0 ^ (95 * (v4 ^ BYTE2(v4)));
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((v1 - 9) | 9)) - 4))();
}

void sub_10011E178()
{
  JUMPOUT(0x10011E110);
}

uint64_t sub_10011E184()
{
  unint64_t v0;
  uint64_t v1;
  int v2;
  unint64_t v3;
  uint64_t v4;

  STACK[0xAD0] = v1 + 32;
  STACK[0xB60] = v0;
  STACK[0xB68] = v3;
  STACK[0xB80] = v0;
  STACK[0xB70] = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (v2 ^ (2 * (STACK[0x688] != v0)))) - 4))();
}

uint64_t sub_10011E20C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((((v1 - 86) ^ 0x23A) * (v0 != 0)) ^ v1)) - 12))();
}

uint64_t sub_10011E234()
{
  char *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  char *v4;
  char v5;

  v4 = (char *)&STACK[0x1600] + v1;
  *v4 = *v0;
  v4[1] = v0[1];
  v4[2] = v0[2];
  v4[3] = v0[3];
  v4[4] = v0[4];
  v4[5] = v0[5];
  v4[6] = v0[6];
  v4[7] = v0[7];
  v4[8] = v0[8];
  v4[9] = v0[9];
  v4[10] = v0[10];
  v4[11] = v0[11];
  v4[12] = v0[12];
  v4[13] = v0[13];
  v4[14] = v0[14];
  v5 = v0[15];
  STACK[0x688] = (unint64_t)v4;
  v4[15] = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((((v2 - 516) ^ 0x23A) * (v0 != 0)) ^ (v2 - 430))) - 12))();
}

uint64_t sub_10011E2F0()
{
  int v0;
  int v1;
  uint64_t v2;
  BOOL v4;

  v4 = (v1 & 0xF ^ 0x20D40E) - ((2 * (v1 & 0xF ^ 0x20D40E)) & 0x41A812) != -2151420
    || v1 == ((v0 - 149240930) & 0x8E53CEF) + 537001315;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((156 * (((v0 - 86) ^ v4) & 1)) ^ v0)) - 12))();
}

uint64_t sub_10011E370()
{
  int v0;
  int v1;
  unsigned int v2;
  unint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  LODWORD(STACK[0x670]) = v0;
  LODWORD(STACK[0x3D4]) = v1;
  v3 = 193 * (v2 ^ 0x4C5);
  STACK[0xB78] = 0;
  v4 = malloc(0x408uLL);
  STACK[0xB88] = (unint64_t)v4;
  v5 = malloc(0x408uLL);
  STACK[0xB78] = (unint64_t)v5;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  v8 = !v7;
  v9 = (uint64_t)*(&off_100260750 + ((v8 * ((v2 ^ 0x4C5) + 631)) ^ v2));
  STACK[0x678] = v3;
  return ((uint64_t (*)(void *, uint64_t))(v9 - v3 + 378))(v5, v6);
}

#error "10011E3E0: too big function (funcsize=0)"

void sub_10012E93C()
{
  JUMPOUT(0x10012E2F8);
}

uint64_t sub_10012E948()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((((*(unsigned int *)(STACK[0x698] + 112) ^ 0x76F586F3A50F3C40)
                                           - 0x76F586F30358CC33
                                           + ((2 * (*(_DWORD *)(STACK[0x698] + 112) ^ 0x5910D29Eu)) & 0x1F83FDDBCLL) == 4173800107)
                                          * (5 * (v0 ^ 0x6C4) + 66)) ^ (v0 - 1169)))
                            - 4))();
}

uint64_t sub_10012EA20()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1541 * (dword_100277CEC == 1197784504)) ^ ((v0 + 789) | 0x80)))
                            - (((((v0 + 789) | 0x80) + 963119996) & 0xC697F6F9)
                             + (unint64_t)(((v0 + 789) | 0x80u) - 830))
                            + 1720))();
}

uint64_t sub_10012EC24()
{
  int v0;
  unint64_t v1;
  kern_return_t v2;

  STACK[0x688] = v1;
  v2 = IOMainPort(0, (mach_port_t *)&STACK[0x974]);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((29
                                        * (((v2 << (((v0 + 55) & 0xDD) + 104)) & 0xAE776DFE) + (v2 ^ 0xD73BB6FF) != -683952385)) ^ v0))
                            - 8))();
}

uint64_t sub_10012ECA8()
{
  int v0;
  _BOOL4 v1;

  v1 = IOServiceMatching((const char *)&STACK[0x15E1]) != 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((1592 * v1) ^ v0)) - 8))();
}

uint64_t sub_10012ECF4(const __CFDictionary *a1)
{
  int v1;
  int v2;
  kern_return_t MatchingServices;

  LODWORD(STACK[0x680]) = v1;
  MatchingServices = IOServiceGetMatchingServices(STACK[0x974], a1, (io_iterator_t *)&STACK[0x734]);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((787
                                        * (((MatchingServices << ((8 * v2) ^ 0xC9)) & 0x7EEFFDF6)
                                         + ((82 * (v2 ^ 0x89) + 1064827355) ^ MatchingServices) == 1064828667)) ^ v2))
                            - 8))();
}

uint64_t sub_10012ED88()
{
  int v0;
  uint64_t v1;
  io_object_t v2;

  v2 = IOIteratorNext(STACK[0x734]);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((((v2 << ((v0 - 67) & 0xEF ^ 0xCC)) & 0xF7F9F1DE) + (v2 ^ 0xFBFCF8EF) == -67307281)
                                          * ((v0 - 1044) ^ 0x114)) ^ v0))
                            - 8))();
}

uint64_t sub_10012EDFC@<X0>(int a1@<W8>)
{
  int v1;
  kern_return_t v2;

  v2 = IOServiceOpen(a1 + v1 + 67307013, mach_task_self_, 0, (io_connect_t *)&STACK[0x704]);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((1909 * (((2 * v2) & 0x73FF67F6) + (v2 ^ 0xB9FFB3FB) == -1174424581)) ^ v1))
                            - 12))();
}

uint64_t sub_10012EE70()
{
  char v0;
  io_object_t v1;
  uint64_t v2;

  *(_DWORD *)(v2 + 3308) = (LODWORD(STACK[0x704]) ^ 0x776FFFFB)
                         - 806044227
                         + ((LODWORD(STACK[0x704]) << (((v0 - 64) | 1) + 52)) & 0xEEDFFFF6);
  IOObjectRelease(v1);
  return sub_10010EC84();
}

uint64_t sub_10012EEB8()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)((char *)&STACK[0xBB0] + v2) = 0;
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (int)((123
                                     * ((v0 ^ 9 ^ ((unint64_t)&STACK[0xBB0]
                                                                  + v1
                                                                  - v3
                                                                  + 0x40AF9B25784C1051 < (v0 ^ 0x628uLL))) & 1)) ^ v0)))();
}

uint64_t sub_10012EF80()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)(v4 + v0) = *(_OWORD *)(v3 + v0);
  return (*(uint64_t (**)(void))(v5 + 8 * (((v0 != 16) * (((v2 + v1) & 0x307E5FDF) + 595)) ^ v2)))();
}

uint64_t sub_10012EFBC()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(v3 + v1) = *(_DWORD *)(v2 + v1);
  return (*(uint64_t (**)(void))(v4 + 8 * ((46 * (v1 + 4 != (((v0 - 389) | 0x240) ^ 0x2FELL))) ^ v0)))();
}

uint64_t sub_10012EFF8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v3 + v6 - 0x1CC047BF395CE745) = *(_BYTE *)(v1 + v5 - 0xDD46EE5EB465E56);
  return (*(uint64_t (**)(void))(v7 + 8 * (((v4 + 1 != v0 + 36) * (v2 + 520)) ^ v2)))();
}

uint64_t sub_10012F058()
{
  int v0;
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;

  *(_DWORD *)(v1 + 68) = 36;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((58
                                          * ((v2 ^ 0xFBC77FFFF6ED05EDLL)
                                           + 0x4388000DB589A4ELL
                                           + ((((v0 - 2088416173) & 0x7C7AB3DF) + 0x15FFBABD9) & (2
                                                                                                  * (v2 ^ 0x5910D29E))) != 2337698241)) ^ v0))
                            - 4))();
}

uint64_t sub_10012F124()
{
  int v0;
  unint64_t v1;
  unint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;

  v10 = v2 < v1;
  *(_BYTE *)(v4 + ((v0 + 51) ^ 0xA7C5A374DDE343B0) + v6) = *(_BYTE *)(v5 + v8 - 0x31AD9354BCD330F2);
  if (v10 == v7 - 0x505E43F50E0879ABLL < v1)
    v10 = v7 - 0x505E43F50E0879ABLL < v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((v10 * v3) ^ v0)) - 4))();
}

uint64_t sub_10012F1B4@<X0>(int a1@<W8>)
{
  int v1;
  _DWORD *v2;
  int v3;
  _BOOL4 v4;

  v2[34] = v1;
  STACK[0x860] = 140;
  v4 = IOConnectCallStructMethod(a1 - 1197784504, 0x23u, v2, 0x8CuLL, v2, &STACK[0x860]) == 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((v4 * (v3 + 642)) ^ v3)) - 12))();
}

uint64_t sub_10012F210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8 * (((*(_DWORD *)(v6 + 68) == 36) * (((v7 - 1416493854) & 0x546DFEDD) - 1712)) ^ v7))
                                                                                                - (v7 ^ 0x2E0u)
                                                                                                + 481))(a1, a2, a3, a4, a5, a6, 4294925247);
}

uint64_t sub_10012F25C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((25
                                          * (v2 - ((uint64_t)&STACK[0xBB0] + v1) - 0x40AF9B25784C1051 >= (unint64_t)(a1 ^ 0x19u) - 484)) ^ a1))
                            - 12))();
}

uint64_t sub_10012F2E8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)(v2 + v0) = *(_OWORD *)(v3 + v0);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((1135 * (v0 + 16 == ((v1 + 460) ^ 0x3E0))) ^ v1))
                            - 12))();
}

uint64_t sub_10012F320@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_DWORD *)(v8 + v7) = *(_DWORD *)(v9 + v7);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v10 + 8 * ((2018 * (v7 + 4 != ((a7 + 781) ^ 0x6E9))) ^ a7))
                                                                                               - 4))(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_10012F35C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)(v9 + v11 - 0xF231AED482677C8) = *(_BYTE *)(v8 + v12 - 0x4E2C008362DF0AE2);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v13 + 8 * ((736 * (v10 + (a7 ^ 0x720u) - 1740 == v7 + 36)) ^ a7))
                                                                                               - 12))(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_10012F3D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((LODWORD(STACK[0x690]) - 1539) ^ (417 * (a7 == 0))))
                            - ((LODWORD(STACK[0x690]) - 1516) | 0x102u)
                            + 479))();
}

uint64_t sub_10012F408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;

  return (*(uint64_t (**)(void))(v7
                              + 8
                              * ((2026
                                * (((a7 == 5 * (LODWORD(STACK[0x690]) ^ 0x61D) - 1040) ^ (LODWORD(STACK[0x690]) + 18)) & 1)) ^ (LODWORD(STACK[0x690]) - 723))))();
}

uint64_t sub_10012F468()
{
  int v0;
  BOOL v1;

  v1 = malloc_type_malloc(0x20uLL, 0x71F90CFBuLL) == 0;
  return ((uint64_t (*)(void))*(&off_100260750 + ((((v1 ^ (v0 - 1)) & 1) * (v0 - 362)) | v0)))();
}

uint64_t sub_10012F4B0(_BYTE *a1)
{
  int v1;
  uint64_t v2;

  *a1 = STACK[0xBB0];
  a1[1] = STACK[0xBB1];
  a1[2] = STACK[0xBB2];
  a1[3] = STACK[0xBB3];
  a1[4] = STACK[0xBB4];
  a1[5] = STACK[0xBB5];
  a1[6] = STACK[0xBB6];
  a1[7] = STACK[0xBB7];
  a1[8] = STACK[0xBB8];
  a1[9] = STACK[0xBB9];
  a1[10] = STACK[0xBBA];
  a1[11] = STACK[0xBBB];
  a1[12] = STACK[0xBBC];
  a1[13] = STACK[0xBBD];
  a1[14] = STACK[0xBBE];
  a1[15] = STACK[0xBBF];
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)((1734
                                               * (((((v1 - 18) & 0x7F) - 1) ^ ((unint64_t)&a1[-STACK[0x7D8] + 0x40AF9B25784C107DLL] < 0x10)) & 1)) ^ (v1 + 2086557678) & 0x83A1A77F))
                            - 12))();
}

void sub_10012F5F4(unint64_t a1)
{
  int8x16_t *v1;
  int8x16_t *v2;
  int v3;
  uint64_t v4;
  int8x16_t v5;
  int8x16_t v6;

  v5.i64[0] = 0xEAEAEAEAEAEAEAEALL;
  v5.i64[1] = 0xEAEAEAEAEAEAEAEALL;
  v6.i64[0] = 0xF5F5F5F5F5F5F5F5;
  v6.i64[1] = 0xF5F5F5F5F5F5F5F5;
  *v1 = vaddq_s8(vsubq_s8(*v2, vandq_s8(vaddq_s8(*v2, *v2), v5)), v6);
  STACK[0x770] = a1;
  LODWORD(STACK[0x8DC]) = -510232838;
  STACK[0x8A0] = v4 + ((224 * (v3 ^ 0x37A) + 260) | 0x142u) - 828 - 906;
  JUMPOUT(0x10012F71CLL);
}

uint64_t sub_10012F724@<X0>(int a1@<W6>, int a2@<W8>)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)(((a1 == 0) * ((v2 + a2) & 0xF77E3AE9 ^ 0xF33C37C5)) ^ v2))
                            - ((v2 + 1836221489) & 0x928D79C5 ^ 0x8DLL)))();
}

uint64_t sub_10012F77C()
{
  return sub_1000B6158();
}

uint64_t sub_10012F79C()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((743 * (((STACK[0xA68] == 0) ^ ((v0 ^ 0x2F) + 1)) & 1)) ^ v0))
                            - 12))();
}

uint64_t sub_10012F7D4()
{
  int v0;
  void *v1;

  free(v1);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (((STACK[0x938] != 0) * (((((v0 + 1029) | 0x228) - 1705) | 0x6C8) ^ 0x6AC)) ^ ((v0 + 1029) | 0x228)))
                            - 8))();
}

uint64_t sub_10012F838(void *a1)
{
  int v1;
  int v2;

  free(a1);
  LODWORD(STACK[0xA24]) = v2;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((1422 * (STACK[0x8B8] != 0)) ^ (v1 - 1307))) - 8))();
}

uint64_t sub_10012F874(void *a1)
{
  int v1;

  free(a1);
  LODWORD(STACK[0xAB4]) = 870479216;
  return ((uint64_t (*)(void))*(&off_100260750 + ((53 * (STACK[0x770] == 0)) ^ (v1 - 1338))))();
}

uint64_t sub_10012F8B0()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1971 * (STACK[0xA78] != 0)) ^ (v0 - 890))) - 8))();
}

uint64_t sub_10012F8D8()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1422 * (STACK[0x8B8] != 0)) ^ (((v0 - 1122) | 0x481) - 1307)))
                            - 8))();
}

uint64_t sub_10012F910()
{
  int v0;
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1 + 8 * ((53 * (STACK[0x770] == 0)) ^ (v0 - 1338))))();
}

uint64_t sub_10012F934(void *a1)
{
  int v1;

  free(a1);
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((1971 * (STACK[0xA78] != 0)) ^ (v1 - 890))) - 8))();
}

uint64_t sub_10012F968(void *a1)
{
  int v1;
  int v2;
  int v3;

  free(a1);
  return ((uint64_t (*)(unint64_t))*(&off_100260750
                                                    + (((v3 != 0) * (((v2 + v1 - 369824392) | 2) ^ 0x141)) ^ (v1 - 1151))))(STACK[0x9D8]);
}

uint64_t sub_10012F9BC@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * ((182 * (((a1 == 0) ^ (a2 & v2) ^ 0x8B) & 1)) ^ a2 & v2)))();
}

uint64_t sub_10012F9EC(void *a1)
{
  int v1;
  uint64_t v2;

  free(a1);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((14 * (STACK[0x7A0] == 0)) ^ (v1 - 794))) - 12))();
}

void sub_10012FA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t *v7;
  _DWORD *v8;

  v8 = *(_DWORD **)(STACK[0x658] + 48);
  *v7 = a1;
  *(_DWORD *)STACK[0x630] = (LOWORD(STACK[0x936]) | ((LOWORD(STACK[0x936]) < ((v6 + 641332880) & 0xEDD ^ 0x3C81u)) << 16))
                          - 14924;
  *(_QWORD *)STACK[0x620] = STACK[0x7A0];
  *v8 = (LOWORD(STACK[0x76E]) | ((LOWORD(STACK[0x76E]) < 0x79B7u) << 16)) - 31159;
  sub_1000B6114(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_10012FA9C()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((14 * (STACK[0x7A0] == 0)) ^ (v0 - 794))) - 12))();
}

void sub_10012FAC4(void *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  free(a1);
  sub_1000B6114(v2, v3, v4, v5, v6, v7, v1);
}

uint64_t sub_10012FB18(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t (*v8)(void);
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  STACK[0xAD0] = v12 - 32;
  v14 = (a8 + v10 + 1283) | 8u;
  STACK[0x8A0] = (v14 ^ 0xFFFFFFFFFFFFFAFCLL) + v11;
  v8 = *(uint64_t (**)(void))(v13
                           + 8 * (int)(((STACK[0x7C0] != 0) * ((((v14 ^ 0x758) - 116) ^ 0x414) + 450)) ^ v14 ^ 0x758));
  LODWORD(STACK[0x5F0]) = a4;
  return v8();
}

uint64_t sub_10012FB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;

  v7 = LODWORD(STACK[0x3B4]) ^ LODWORD(STACK[0x3E4]) ^ LODWORD(STACK[0x248]) ^ 0x5A7A2689;
  v8 = LODWORD(STACK[0x5F0]) ^ LODWORD(STACK[0x3E4]) ^ LODWORD(STACK[0x248]) ^ 0x82164830;
  v9 = (STACK[0x550] & 1) == 0;
  if ((STACK[0x550] & 1) != 0)
    v10 = STACK[0x384];
  else
    v10 = STACK[0x350];
  v11 = STACK[0x3B0];
  if ((STACK[0x550] & 1) == 0)
    v11 = STACK[0x2E8];
  LODWORD(STACK[0x670]) = v11;
  if (v9)
    v12 = v7;
  else
    v12 = STACK[0x37C];
  if (v9)
    v13 = STACK[0x380];
  else
    v13 = v8;
  if (v9)
    v14 = v8;
  else
    v14 = v7;
  if (v9)
    v15 = STACK[0x340];
  else
    v15 = STACK[0x348];
  if (v9)
    v16 = STACK[0x388];
  else
    v16 = STACK[0x394];
  v17 = LODWORD(STACK[0x660]) == -768964959;
  v18 = STACK[0x590];
  if (LODWORD(STACK[0x660]) == -768964959)
    v18 = STACK[0x560];
  LODWORD(STACK[0x384]) = v18;
  v19 = STACK[0x424];
  if (v17)
    v19 = STACK[0x420];
  LODWORD(STACK[0x388]) = v19;
  v20 = STACK[0x540];
  if (v17)
    v20 = STACK[0x4D0];
  LODWORD(STACK[0x380]) = v20;
  v21 = STACK[0x458];
  if (!v17)
    v21 = STACK[0x450];
  LODWORD(STACK[0x394]) = v21;
  v22 = STACK[0x44C];
  if (!v17)
    v22 = STACK[0x440];
  LODWORD(STACK[0x4D0]) = v22;
  v23 = STACK[0x438];
  if (!v17)
    v23 = STACK[0x428];
  LODWORD(STACK[0x418]) = v23;
  v24 = STACK[0x510];
  LODWORD(STACK[0x438]) = v10;
  if (v17)
    v24 = v10;
  LODWORD(STACK[0x2CC]) = v24;
  LODWORD(STACK[0x424]) = v12;
  LODWORD(STACK[0x420]) = v13;
  if (v17)
    v25 = v13;
  else
    v25 = v12;
  LODWORD(STACK[0x560]) = v25;
  v26 = STACK[0x4F0];
  LODWORD(STACK[0x428]) = v14;
  if (!v17)
    v26 = v14;
  LODWORD(STACK[0x590]) = v26;
  v27 = STACK[0x640];
  LODWORD(STACK[0x350]) = v15;
  if (v17)
    v27 = v15;
  LODWORD(STACK[0x3B4]) = v27;
  v28 = STACK[0x500];
  LODWORD(STACK[0x37C]) = v16;
  if (!v17)
    v28 = v16;
  LODWORD(STACK[0x3B0]) = v28;
  if ((STACK[0x3E0] & 1) != 0)
    v29 = STACK[0x298];
  else
    v29 = STACK[0x2B0];
  if ((STACK[0x3E0] & 1) != 0)
    v30 = STACK[0x278];
  else
    v30 = STACK[0x284];
  if ((STACK[0x3E0] & 1) != 0)
    v31 = STACK[0x28C];
  else
    v31 = STACK[0x2C8];
  v32 = STACK[0x270];
  if ((STACK[0x3E0] & 1) != 0)
    v32 = STACK[0x250];
  LODWORD(STACK[0x5F0]) = v32;
  v33 = LODWORD(STACK[0x668]) == -961433487;
  v34 = STACK[0x3E8];
  if (LODWORD(STACK[0x668]) != -961433487)
    v34 = STACK[0x3DC];
  LODWORD(STACK[0x270]) = v34;
  v35 = STACK[0x24C];
  if (!v33)
    v35 = STACK[0x230];
  LODWORD(STACK[0x440]) = v35;
  v36 = STACK[0x22C];
  if (!v33)
    v36 = STACK[0x228];
  LODWORD(STACK[0x458]) = v36;
  v37 = v6 ^ 0x32;
  v38 = STACK[0x3D8];
  if (v33)
    v38 = STACK[0x3C8];
  LODWORD(STACK[0x44C]) = v38;
  v39 = STACK[0x3C4];
  if (!v33)
    v39 = STACK[0x3C0];
  LODWORD(STACK[0x2B0]) = v39;
  STACK[0x678] = (v37 - 2014188314) & 0x780E10E7;
  LODWORD(STACK[0x540]) = LODWORD(STACK[0x5D0]) ^ 0x574CFFD3 ^ v37;
  v40 = STACK[0x3F8];
  LODWORD(STACK[0x3C4]) = v29;
  if (v33)
    v40 = v29;
  LODWORD(STACK[0x2C8]) = v40;
  LODWORD(STACK[0x3DC]) = v30;
  LODWORD(STACK[0x3D8]) = v31;
  if (v33)
    v41 = v30;
  else
    v41 = v31;
  LODWORD(STACK[0x450]) = v41;
  v42 = a6 - 1764038626 + ((unint64_t)(a6 < 0x692517E2) << 32);
  *(_QWORD *)(STACK[0xB70] + 8 * v42) = *(_QWORD *)(STACK[0xB80] + 8 * v42) ^ 0xC9C9C9C9C9C9C9C9;
  return ((uint64_t (*)(void))*(&off_100260750 + ((50 * (a6 - 1764038625 < STACK[0x680])) ^ v37)))();
}

void sub_1001303F4()
{
  JUMPOUT(0x10012FE0CLL);
}

uint64_t sub_100130420()
{
  int v0;
  uint64_t v1;
  int v2;
  BOOL v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;

  if ((STACK[0x550] & 1) != 0)
    v2 = STACK[0x3A4];
  else
    v2 = STACK[0x3A0];
  v3 = LODWORD(STACK[0x660]) == -768964959;
  v4 = STACK[0x468];
  if (LODWORD(STACK[0x660]) != -768964959)
    v4 = STACK[0x464];
  LODWORD(STACK[0x3E8]) = v4;
  v5 = STACK[0x424];
  if (!v3)
    v5 = STACK[0x420];
  LODWORD(STACK[0x550]) = v5;
  v6 = STACK[0x4E0];
  if (v3)
    v6 = STACK[0x4C0];
  LODWORD(STACK[0x4E0]) = v6;
  v7 = STACK[0x670];
  LODWORD(STACK[0x464]) = v2;
  if (!v3)
    v7 = v2;
  LODWORD(STACK[0x468]) = v7;
  v8 = STACK[0x4B0];
  if (!v3)
    v8 = STACK[0x4A0];
  LODWORD(STACK[0x4C0]) = v8;
  v9 = STACK[0x498];
  if (!v3)
    v9 = STACK[0x480];
  LODWORD(STACK[0x420]) = v9;
  v10 = STACK[0x478];
  if (!v3)
    v10 = STACK[0x470];
  LODWORD(STACK[0x424]) = v10;
  LODWORD(STACK[0x3A4]) = LODWORD(STACK[0x294]) - LODWORD(STACK[0x254]);
  if ((STACK[0x3E0] & 1) != 0)
    v11 = STACK[0x2C0];
  else
    v11 = STACK[0x2B4];
  v12 = LODWORD(STACK[0x668]) == -961433487;
  v13 = STACK[0x2AC];
  if (LODWORD(STACK[0x668]) == -961433487)
    v13 = STACK[0x2A8];
  LODWORD(STACK[0x2C0]) = v13;
  v14 = STACK[0x3EC];
  if (!v12)
    v14 = STACK[0x2E0];
  LODWORD(STACK[0x2AC]) = v14;
  v15 = v1
      + (((unint64_t)(v1 - 0x7773979C74BE25F5) >> 24) ^ 0x820001426B001800)
      - (((unint64_t)(v1 - 0x7773979C74BE25F5) >> 23) & 0x17B29FFCFFELL);
  v16 = v15
      + (((v15 + 0x68C67212041C20BLL) >> 14) ^ 0xFFFEFFBC3BBAE7FFLL)
      + (((v15 + 0x68C67212041C20BLL) >> 13) & 0x5FF787775CFFELL);
  v17 = v16
      + (((v16 + 0x68D6764E486DA0CLL) >> 7) ^ 0x40002110940240B1)
      - (((v16 + 0x68D6764E486DA0CLL) >> 6) & 0x3FFBDDED7FB7E9CLL)
      + 2;
  v18 = v17 - ((2 * v17 - 0x72E573575EF6CD4ELL) & 0xC326463D59876512) + 0x28206972FD484BE2;
  v19 = ((2 * ((v18 ^ 0x6193231EACC3B289) + 0x1E624C75B7D25465)) & 0xD363FFABFEBFCB72)
      + (((v18 ^ 0x6193231EACC3B289) + 0x1E624C75B7D25465) ^ 0xE9B1FFD5FF5FE5B9);
  v20 = (((v19 + 0x164E002A00A01A47) >> 28) ^ 0x6FFDB7EFFFFFF5EFLL)
      + v19
      + (((v19 + 0x164E002A00A01A47) >> 27) & 0x1FFFFFEBDELL);
  v21 = (((v20 - 0x59AFB7C5FF5FDBA8) >> 8) ^ 0xEEFBFEBEEFF97EFBLL)
      + v20
      + (((v20 - 0x59AFB7C5FF5FDBA8) >> 7) & 0x1F7FD7DDFF2FDF6);
  v22 = v21
      + (((v21 - 0x48ABB684EF595AA3) >> 2) ^ 0x832C04902C113C18)
      - (((v21 - 0x48ABB684EF595AA3) >> 1) & 0x79A7F6DFA7DD87CELL)
      + 1;
  v23 = v22 - ((2 * v22 + 0x85089D5C92AD288) & 0x1A5314A111C6DB02) - 0x3EAE30C49287293BLL;
  v24 = ((2 * ((v23 ^ 0x8D298A5088E36D81) + 0x79858CF42C6EB4C9)) & 0xEBFC7BFFFF7FB6F6)
      + (((v23 ^ 0x8D298A5088E36D81) + 0x79858CF42C6EB4C9) ^ 0xF5FE3DFFFFBFDB7BLL);
  v25 = (((v24 + 0xA01C20000402485) >> 27) ^ 0x7FBEADCEFFFBEBEFLL)
      + v24
      + (((v24 + 0xA01C20000402485) >> 26) & 0x1DFFF7D7DELL);
  v26 = v25
      + (((v25 - 0x75BCEBCEFFBBC76ALL) >> 14) ^ 0x845083A114012082)
      - (((v25 - 0x75BCEBCEFFBBC76ALL) >> 13) & 0x6F8BDD7FDBEFALL);
  v27 = v26
      + (((v26 + 0x5F2908FEC431814) >> 6) ^ 0x8890188C0060C008)
      - (((v26 + 0x5F2908FEC431814) >> 5) & 0x6DFCEE7FF3E7FEELL)
      + 2;
  v28 = v27 - ((2 * v27 - 0x53B0FF8283B4FECLL) & 0xDB364F9453E154E0) - 0x15026031EA2CFD86;
  v29 = ((2 * ((v28 ^ 0x6D9B27CA29F0AA70) + 0x285B60A07B22FE6FLL)) & 0xF9BEFFF975FFFE6CLL)
      + (((v28 ^ 0x6D9B27CA29F0AA70) + 0x285B60A07B22FE6FLL) ^ 0xFCDF7FFCBAFFFF36);
  v30 = v29
      + (((v29 + 0x3208003450000CALL) >> 27) ^ 0x880008A0DC842A11)
      - (((v29 + 0x3208003450000CALL) >> 26) & 0x3E46F7ABDCLL);
  v31 = v30
      + (((v30 + 0x7B207762687BD6B9) >> 11) ^ 0x1409404088A84A09)
      - (((v30 + 0x7B207762687BD6B9) >> 10) & 0x2D7F7EEEAF6BECLL);
  v32 = v31
      + (((v31 + 0x67173721DFD38CB0) >> 7) ^ 0xBE7DF7FE7BD9FF91)
      + (((v31 + 0x67173721DFD38CB0) >> 6) & 0xFBEFFCF7B3FF22)
      + 2;
  v33 = v32 - ((2 * v32 + 0x51327E46C7F31A3ALL) & 0x8CE8D0BCF2B0F222) + 0x6F0DA781DD52062ELL;
  v34 = v33 ^ v18;
  v35 = ((2 * ((v33 ^ 0xC674685E79587911) + 0x2CA9E7BAB642E976)) & 0x8DCDBCF9BE7FE3FELL)
      + (((v33 ^ 0xC674685E79587911) + 0x2CA9E7BAB642E976) ^ 0xC6E6DE7CDF3FF1FFLL);
  v36 = (((v35 + 0x3919218320C00E01) >> 27) ^ 0x761D2D3FFF7FB8DFLL)
      + v35
      + (((v35 + 0x3919218320C00E01) >> 26) & 0x3FFEFF71BELL);
  v37 = v36
      + (((v36 - 0x3D040BBCDEBFAADELL) >> 8) ^ 0x4019111722130500)
      - (((v36 - 0x3D040BBCDEBFAADELL) >> 7) & 0x1CDDDD1BBD9F5FELL);
  v38 = v37
      + (((v37 - 0x7D1D1CD400D2AFDELL) >> 6) ^ 0x7F7B9FFF8AEFFB8BLL)
      + (((v37 - 0x7D1D1CD400D2AFDELL) >> 5) & 0x6F73FFF15DFF716)
      + 1;
  v39 = v38 - ((2 * v38 + 0x6CE8658E87AA92CLL) & 0xE676C258174260D4) - 0x95D5BA780217B00;
  v40 = (v39 ^ 0xC9CE7A509B39F6AELL)
      + ((v39 >> 24) ^ 0xA8018A6DCE38D031)
      + ((v39 >> 23) & 0xB7FF7AFEAALL ^ 0xFFFFFF6C638F5FDDLL)
      + 0x57FE755BFFBD7F57;
  v41 = (((((2 * v40) & 0xF5EBD12E9BFDF8D2) + (v40 ^ 0x7AF5E8974DFEFC69) - 0x7AF5E8974DFEFC69) >> 10) ^ 0x1F7EB57EB6EE5C1DLL)
      + ((2 * v40) & 0xF5EBD12E9BFDF8D2)
      + (v40 ^ 0x7AF5E8974DFEFC69)
      + (((((2 * v40) & 0xF5EBD12E9BFDF8D2) + (v40 ^ 0x7AF5E8974DFEFC69) - 0x7AF5E8974DFEFC69) >> 9) & 0x7D6AFD6DDCB83ALL);
  v42 = v41
      + (((v41 + 0x658B61E9FB12A77ALL) >> 5) ^ 0x12D2088003243688)
      - (((v41 + 0x658B61E9FB12A77ALL) >> 4) & 0xA5BEEFFF9B792EELL);
  v43 = v42
      + 1
      + (((v42 - 0xCB3434890CCD6BBLL) >> 29) ^ 0x240A08600028010ELL)
      - (((v42 - 0xCB3434890CCD6BBLL) >> 28) & 0xFFFAFFDE2);
  v44 = v43
      + (((v43 - 0x30BD4BA890F4D7CALL) >> 11) ^ 0x777E65FECFBFF766)
      + (((v43 - 0x30BD4BA890F4D7CALL) >> 10) & 0x3CCBFD9F7FEECCLL);
  v45 = v44
      + (((v44 + 0x57C44E589F4B30D0) >> 8) ^ 0x982810500A010401)
      - (((v44 + 0x57C44E589F4B30D0) >> 7) & 0x1AFDF5FEBFDF7FCLL)
      + 2;
  v46 = STACK[0x5F0];
  LODWORD(STACK[0x4B0]) = v11;
  if (v12)
    v46 = v11;
  LODWORD(STACK[0x278]) = v46;
  return sub_10010C6C8(v0 ^ v34 ^ 0x2B24B6E ^ (v45 - ((2 * v45 + 714365338) & 0x65E8754C) + 1212049267), 2130705321, 152827930, -1328064443, -2125706550);
}

uint64_t sub_1001311F0(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((38 * ((v2 ^ 0x18A549EF ^ (67 * (v2 ^ 0x4CD))) - a2 < 7)) ^ v2))
                            - 4))();
}

uint64_t sub_100131250()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v0 + (v2 + v1)) = 0xB1B1B1B1B1B1B1B1;
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1798 * (((v3 + 1759192548) & 0x9724D97F) - 372 == ((v4 + 1) & 0x1FFFFFFF8))) ^ v3)))();
}

uint64_t sub_1001312B0(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)((1439 * (v1 != v2)) ^ a1)) - (a1 ^ 0x178)))();
}

uint64_t sub_1001312FC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_BYTE *)(v1 + (v4 + v2)) = -79;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * (int)((240
                                               * (((7 * (v5 ^ v3)) & ~(a1 + v4 + 1) | ((a1 + v4 + 1) ^ ~(7 * (v5 ^ v3))) & (a1 + v4 + 1 - 7 * (v5 ^ v3))) >> 31)) ^ (7 * (v5 ^ v3) + 324)))
                            - 4))();
}

void sub_100131358()
{
  JUMPOUT(0x100131310);
}

uint64_t sub_100131360(uint64_t a1, int a2)
{
  char v2;
  unint64_t v3;
  char v4;
  char v5;
  int v6;
  int v7;
  _BYTE *v8;
  char v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  char v52;
  char v53;
  char v54;
  char v55;
  unsigned int v56;
  unsigned int v57;
  unsigned __int8 v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unint64_t v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  unsigned int v101;
  char v102;
  char v103;
  unint64_t v104;
  unsigned int v105;
  int v106;
  int v107;
  char v108;
  char v109;
  char v110;
  char v111;
  int v112;

  LODWORD(STACK[0x670]) = 0;
  LODWORD(STACK[0x5F0]) = a2 | 0x400;
  v10 = v8[109] ^ v3;
  LODWORD(STACK[0x560]) = ((a2 | 0x400) - 1767931186) & 0x69607FF7;
  v11 = v10 - ((v10 << ((a2 - 50) & 0xF7 ^ 0xE6)) & 0x1D8) - 1788685588;
  v12 = v8[21] ^ v3;
  LODWORD(STACK[0x678]) = ((a2 | 0x400) + 1012609835) & 0xC3A4C9FF;
  v13 = v12 - ((v12 << ((a2 + 43) ^ 0x4D)) & 0x136) - 851535717;
  v14 = ((v13 ^ 0xCD3E989B | v11 ^ 0x9562D2EC) - ((2 * (v13 ^ 0xCD3E989B | v11 ^ 0x9562D2EC)) & 0xCCCCCCCC) + 38) & 0x73;
  v15 = ((v13 ^ 0x8522809B) & (v11 ^ 0x12EC)) - ((2 * ((v13 ^ 0x8522809B) & (v11 ^ 0x12EC))) & 0x6AE5001C) + 896696334;
  v16 = ((v14 ^ 0x22 | v15 ^ 0x3572800E)
       - 2 * ((v14 ^ 0x22 | v15 ^ 0x3572800E) & 0x655BE99F ^ (v15 ^ 0x3572800E) & 0xC)
       + 1700522387) ^ 0x655BE993;
  v17 = ((2 * v16 * v16 * v16) & 0x5FFE73B8) + ((v16 * v16 * v16) ^ 0x2FFF39DC);
  v18 = STACK[0x680];
  LOBYTE(v15) = *(_BYTE *)(STACK[0x680] + (v8[40] & 0x3F ^ v3));
  LOBYTE(v13) = ((v15 & 0x50 ^ 0x99) + (v15 & 0x25) - 1) ^ 0xFC | (((v8[352] & 0x8A ^ 0x7D) - 65) & 0xF1 | -(v8[352] & 0x8A ^ 0x7D) & 0x7E) ^ 0xB0;
  LOBYTE(v13) = v13 - 2 * (v13 & 0x21 ^ v15 & 1) - 96;
  LOBYTE(v15) = v8[355];
  v19 = STACK[0x688];
  v20 = (*(_BYTE *)(STACK[0x688] + (v8[52] & 0x3F ^ v3)) ^ 0xE6) & (v15 ^ 0xE6);
  LOBYTE(v15) = (v20 + (~(2 * v20) | 0xCF) - 103) ^ 0x98 | ((v15 & 0xB8 ^ 0xE7) - 1) ^ 0xFE;
  LOBYTE(v13) = v13 ^ 0xA0;
  LOBYTE(v15) = (v15 - ((2 * v15) & 0xA0) + 80) ^ 0x50;
  v21 = ~((v15 | v13) - ((2 * (v15 | v13)) & 0x3A) + 61);
  LOBYTE(v13) = ((v21 & 0x2B) - ((2 * v21) & 0x12) + 29) ^ 0x1F | ((v15 & v13) - ((2 * (v15 & v13)) & 0x52) - 87) ^ 0xA9;
  LOBYTE(v13) = (v8[94] ^ v3) + (v13 ^ 0x12) - ((2 * v13) & 0xDA) - 18;
  v8[94] = v13 - ((2 * v13) & 0x58) + 44;
  LOBYTE(v13) = (v8[139] & 0x36 ^ 0x82) + (v8[139] & 0x12 ^ 0x51) - ((v8[139] & 0x36 ^ 0x82) & 0x92);
  LOBYTE(v13) = (v13 ^ 0x75 | byte_100217C60[v8[85] & 0x3F ^ v3] & 0x40)
              - 2 * (((v13 ^ 0x75) & 0x46 | byte_100217C60[v8[85] & 0x3F ^ v3] & 0x40) ^ v13 & 2)
              + 68;
  v22 = *(unsigned __int8 *)(v18 + (v8[157] & 0x3F ^ v3));
  v8[64] ^= 0x39 ^ ((v13 & 0xF7 ^ 0x4C) + ((2 * v13) & 0x62 ^ 0xEF) + 58);
  LODWORD(STACK[0x5E0]) = (v22 ^ 0x19) - ((2 * (_BYTE)v22 + 12) & 8);
  v23 = ((v8[125] & 0xC9) - ((2 * v8[125]) & 0x10) - 82) ^ 0x24;
  v24 = ((v23 | 0xFFFFFFB8) - (v23 | 0x47) + 71) & 0xFFFFFFF9 ^ 0x3A;
  v25 = *(unsigned __int8 *)(v18 + (v8[104] & 0x3F ^ v3));
  LODWORD(STACK[0x5D0]) = v24 - ((2 * v24) & 0xFFFFFFDF);
  v26 = v8[387];
  v27 = ((v26 & 0xA ^ 0xFFFFFF83 | v26 & v7) - 1) ^ 0xFFFFFFDC;
  v28 = ((((v27 + 108 - ((2 * v27) & 0xD8)) ^ 0x2A | (((2 * (v26 & 0xA1 ^ 0xFFFFFFE1)) | 7) - (v26 & 0xA1 ^ 0xFFFFFFE1)) ^ 0x46)
        - ((2 * (v27 + 108)) & 8)
        - 124) ^ 0xFFFFFF84) & (((v25 ^ 0xFFFFFFE6) * (v25 ^ 0xFFFFFFE6)
                               - ((2 * (v25 ^ 0xFFFFFFE6) * (v25 ^ 0xFFFFFFE6)) & 0xFFFFFFA8)
                               + 84) ^ 0x54);
  LODWORD(STACK[0x668]) = v28 - ((2 * v28) & 0x20);
  LOBYTE(v28) = (v8[52] ^ 0xD3) + (v8[175] ^ v3) + 1;
  v8[175] = v28 - ((2 * v28) & 0x58) + 44;
  v29 = 205 * (*(unsigned __int8 *)(v19 + (v8[44] & 0x3F ^ v3)) ^ 0xE6);
  LODWORD(STACK[0x5C0]) = (v29 >> 10) - ((v29 >> 9) & 0x6C);
  v8[100] = (v8[100] ^ v3) - ((2 * (v8[100] ^ v3) + 122) & 0x58) + 41;
  v8[327] = 26;
  LOBYTE(v29) = (v8[386] ^ 0xE6) + (*(_BYTE *)(v18 + (v8[17] & 0x3F ^ v3)) ^ 0xE6);
  v8[386] = v29 - ((2 * v29) & 0xCC) - 26;
  LOBYTE(v29) = byte_100217C60[v8[57] & 0x3F ^ v3];
  LOBYTE(v29) = (107 - ((v29 & 0x60) + (v29 | 0xEC))) ^ 0x77;
  LOBYTE(v26) = (v8[415] & 4 ^ 0x44) - (v8[415] & 4) + (v8[415] & 0x8C ^ 8);
  LOBYTE(v29) = (127 - (((v26 & 0xD4 ^ 0x6F) - (v26 | v4) - 44) ^ 0xA7)) ^ 0x7F | (((2 * v29) & 0x64) - v29 - 55) ^ 0xC0;
  v30 = (v29 - ((2 * v29) & 0xC6) - 29) ^ 0xE3;
  v31 = (v8[101] ^ v3)
      + ((v30 / 3u) ^ 0x27)
      - (((171 * v30) >> 8) & 0xB0)
      - 39;
  v8[101] = v31 - ((2 * v31) & 0x58) + 44;
  LOBYTE(v31) = byte_100217C60[v8[217] & 0x3F ^ v3];
  v32 = (((v31 & 0x75 ^ 0xFFFFFF8F) + ((2 * (v31 & 0x75 ^ 0xFFFFFF8F)) & 0x48 ^ 0xFFFFFFEB) + 47) ^ 0x2E) & (v8[398] ^ 0xFFFFFFE6);
  v33 = (v32 + (~(2 * v32) | 0xFFFFFFBB) + 35) ^ 0x22 | ((((v31 & 0x8A ^ 0xFFFFFFFD) - 81) & 0xFFFFFF83)
                                                       - (((v31 & 0x8A ^ 0xFFFFFFFD) - 81) | 0xFFFFFFA3)
                                                       + 127) ^ 0x50;
  v34 = (v33 - ((2 * v33) & 0x7A) - 67) ^ 0xFFFFFFBD | (v8[7] >> 1) ^ 0x16;
  LOBYTE(v34) = (v8[249] ^ v3) + (v34 ^ 0x40) - 2 * (v34 & 0x3F) - 64;
  v8[249] = v34 - ((2 * v34) & 0x58) + 44;
  v8[30] ^= 0x58u;
  LOBYTE(v16) = (*(_BYTE *)(v18 + (v8[241] & 0x3F ^ v3)) & 0xFC ^ 0xE7) - 1;
  LOBYTE(v34) = ((v16 & 0x87 ^ 5) + (v16 ^ 0x9A) - ((v16 ^ 0x9A) & 0x87)) ^ 0x1F | ((v8[383] & 3 ^ 2)
                                                                                  - 2 * (v8[383] & 1)
                                                                                  - 119) ^ 0x89;
  LOBYTE(v34) = (v34 - ((2 * v34) & 0xDF) - 17) ^ 0xEF;
  v8[215] = v34 * v34 * v34 + (~(2 * v34 * v34 * v34) | 0xA7) + 45;
  LODWORD(STACK[0x660]) = v17;
  v8[446] = *(_BYTE *)(v18 + ((28 - (_BYTE)v17) & 0x3F));
  v35 = (*(_BYTE *)(v18 + (v8[13] & 0x3F ^ v3)) & v3 ^ 0x3B) + 61;
  v36 = (v35 & v3 ^ 0x8F) - ((2 * v35) & 0x40) + 46;
  LOBYTE(v25) = (v8[146] ^ 0x75) - 89 + ((2 * (v8[146] ^ 8)) & 0xB2);
  LOBYTE(v25) = ((2 * v25 * v25 * v25) & 0xF6) + ((v25 * v25 * v25) ^ 0xFB);
  v37 = (((v36 ^ 0x22222222) & 0xEF) - ((2 * v36) & 0x102) - 1849324159) ^ 0x91C58D81;
  v8[381] = ((v37 << ((v25 + 5) & 7)) - ((2 * (v37 << ((v25 + 5) & 7))) & 0xE0) - 16) ^ ((v37 >> ((3 - v25) & 7))
                                                                                       - ((2 * (v37 >> ((3 - v25) & 7))) & 0x5A)
                                                                                       + 45) ^ 0x3B;
  v38 = (v8[131] ^ v3)
      - ((2 * (v8[131] ^ v3)) & 0x164)
      + 418557106;
  v39 = (v8[393] ^ 0xE6) - ((2 * (v8[393] ^ 0xE6)) & 0x174) - 1836848454;
  v40 = (((v39 ^ 0x9283EABA | v38 ^ 0x18F2ACB2) - ((2 * (v39 ^ 0x9283EABA | v38 ^ 0x18F2ACB2)) & 0x560) + 688) ^ 0x2B0) & (((v8[400] ^ 0xE6) - ((2 * (v8[400] ^ 0xE6)) & 0x15A) + 1646354861) ^ 0x622161AD);
  v41 = (v40 - ((2 * v40) & 0x11230EC8) - 2003728540) ^ 0x88918764 | (((v39 ^ 0x1082A2BA) & (v38 ^ 0xCB2))
                                                                    - ((2 * ((v39 ^ 0x1082A2BA) & (v38 ^ 0xCB2))) & 0x41D298AA)
                                                                    + 1625902165) ^ 0x60E94C55;
  LOBYTE(v38) = *(_BYTE *)(v19 + (v8[220] & 0x3F ^ v3)) & 3;
  LOBYTE(v38) = ((v38 ^ 6) + 2 * ((v38 ^ 6 | 0x79) ^ v38) - 77) ^ 0xB1;
  LOBYTE(v38) = ((2 * v38) & 0xFA) + (v38 ^ 0xFD);
  v42 = (v41 - ((2 * v41) & 0x3ED17D38) + 526958236) ^ 0x1F68BE9C;
  v43 = ((v42 >> (v38 + 3)) - ((2 * (v42 >> (v38 + 3))) & 0xA) + 5) ^ ((v42 << (5 - v38))
                                                                     - ((2 * (v42 << (5 - v38))) & 0x4C)
                                                                     + 38);
  LOBYTE(v43) = (v8[330] ^ 0xE6) + (v43 ^ 0x5E) + ((2 * v43) & 0xFB ^ 0x42) - 125;
  v8[330] = v43 - ((2 * v43) & 0xCC) - 26;
  v44 = (v8[10] >> 1) ^ 0x16;
  LOBYTE(v39) = *(_BYTE *)(v19 + (v8[27] & 0x3F ^ v3));
  LOBYTE(v39) = (v39 ^ 0x19) + 2 * (v39 ^ 0xE6) + 1;
  LOBYTE(v39) = ((2 * v39 * v39) & 0xDE) + ((v39 * v39) ^ 0xEF);
  v45 = (v44 - ((2 * v44) & 0x30) - 2099754728) ^ 0x82D84918;
  v46 = ((v45 >> ((v39 + 1) & 7)) - ((2 * (v45 >> ((v39 + 1) & 7))) & 0xF8) + 252) ^ ((v45 << ((7 - v39) & 7))
                                                                                    - ((2 * (v45 << ((7 - v39) & 7))) & 0xDA)
                                                                                    + 109);
  LOBYTE(v46) = (v8[67] ^ v3) + (v46 ^ 0x14) + ((2 * v46) & 0xF4 ^ 0xDF) + 124;
  v8[67] = v46 - ((2 * v46) & 0x58) + 44;
  LOBYTE(v46) = byte_100217C60[v8[136] & 0x3F ^ v3] & 0xAC;
  LOBYTE(v46) = (v8[195] ^ v3) + (v46 ^ 0x69) + (v3 ^ (2 * v46)) - 127;
  v47 = *(unsigned __int8 *)(v18 + (v8[182] & 0x3F ^ v3));
  v8[195] = v46 + (~(2 * v46) | 0xA7) + 45;
  v48 = ((2 * ((v47 ^ 0xFFFFFFE6) + 13)) & 0x7A) + (((v47 ^ 0xFFFFFFE6) + 13) ^ 0xFFFFFFBD);
  v49 = 171 * (byte_100217C60[v8[56] & 0x3F ^ v3] ^ 0xE3);
  v50 = (v49 >> 9) ^ 0xFFFFFFD9;
  v51 = (v49 >> 8) & 0xB2;
  LOBYTE(v49) = *(_BYTE *)(v18 + (v8[196] & 0x3F ^ v3)) ^ 0xE6;
  LOBYTE(v17) = *(_BYTE *)(v19 + (v8[21] & 0x3F ^ v3)) ^ 0xE6;
  v52 = (v17 | v49) - 2 * ((v17 | v49) & 7) - 57;
  v53 = (v52 & 9 ^ 0x4A) - (v52 & 0x40 | 0xBD);
  LOBYTE(v49) = (((v53 - 67) ^ 0x4B) + ((v53 + 61) & 0x82) - (((v53 - 67) ^ 0x4B) & 0x82)) ^ 0xC2 | ((v17 & v49) - ((2 * (v17 & v49)) & 0xA8) + 84) ^ 0x54;
  v54 = (*(_BYTE *)(v19 + (v8[127] & 0x3F ^ v3)) ^ 0xE6) + (v49 ^ 0x30) - ((2 * v49) & 0x9F) - 48;
  v55 = (v8[423] ^ 0xE6) + (v54 ^ 0x75) + ((2 * v54) & 0xEA) - 117;
  v8[423] = v55 - ((2 * v55) & 0xCC) - 26;
  v56 = *(_BYTE *)(v19 + (v8[65] & 0x3F ^ v3)) & 2;
  v57 = ((((v56 & 0xFFFFFFFB | (4 * ((v56 >> 1) & 1))) ^ 0xA) - 114) ^ 0xFFFFFF92) & (v8[140] ^ v3);
  v8[369] = v57 - ((2 * v57) & 0x4C) - 26;
  LOBYTE(v32) = (v8[134] & 0x89 ^ 0x1A) + 30;
  v58 = ((v32 | 0x74) + ((2 * v32) & 0x10 ^ 0x7F) - 55) ^ 0xC8;
  v8[321] = v58 / 5u - (((205 * v58) >> 9) & 0xCC) - 26;
  v59 = 171 * (v8[339] ^ 0xE6);
  v60 = ((v59 >> 9) - ((v59 >> 8) & 0x22222222) + 17) & 0x4D ^ 4;
  LOBYTE(v57) = (*(_BYTE *)(v18 + (v8[39] & 0x3F ^ v3)) ^ 0xE6) + 50;
  LOBYTE(v31) = (v57 ^ 0x3B) + ((2 * v57) & 0x36) + 5;
  LOBYTE(v31) = (((((2 * v60) | 0xA2) - v60 + 47) & 0x4E ^ 0x45) - ((-48 - (((2 * v60) | 0xA2) - v60)) | 0x4E) - 2) ^ 0x90 | ((v31 & 0x32) - ((2 * v31) & 0x20) - 44) ^ v4;
  LOBYTE(v31) = (v8[330] ^ 0xE6) + (v31 ^ 0xBF) + 2 * (v31 & 0x3F) + 65;
  v8[330] = v31 - ((2 * v31) & 0xCC) - 26;
  LOBYTE(v60) = (((2 * (v8[322] & 7 ^ 4)) | 0x32) - (v8[322] & 7 ^ 4) - 25) ^ 0x1B;
  LOBYTE(v60) = ((2 * v60) & 0xD2) + (v60 ^ 0x69);
  v61 = ((0x37u >> ((1 - v60) & 7)) - ((0x6Eu >> ((1 - v60) & 7)) & 0x32) + 244192281) ^ ((55 << (v60 - 105))
                                                                                        - ((110 << (v60 - 105)) & 0x25A0C36)
                                                                                        + 19727899);
  v62 = (((v61 & 0xFFFFFFD2 ^ 0xFA3122F) - ((2 * (v61 & 0xFFFFFFD2 ^ 0xFA3122F)) & 0x2FC) + 894) ^ 0x37E) & (((v8[401] ^ 0xE6) - ((2 * (v8[401] ^ 0xE6)) & 0xC6) - 1695866269) ^ 0x9AEB2263);
  v63 = (v62 - ((2 * v62) & 0x479BBF40) - 473047136) ^ 0xE3CDDFA0 | v61 & v6;
  LODWORD(STACK[0x590]) = ((LODWORD(STACK[0x668]) + 16) ^ 0x5B)
                        + ((v63 - ((2 * v63) & 0xB0) - 40) ^ 0xFFFFFFF7)
                        + ((2 * (v63 - ((2 * v63) & 0xB0) - 40)) & 0x5E ^ 0x10);
  LOBYTE(v63) = (v8[237] ^ v3) + (byte_100217C60[v8[201] & 0x3F ^ v3] ^ 0xFA);
  v8[237] = v63 - ((2 * v63) & 0x58) + 44;
  v64 = *(unsigned __int8 *)(v19 + (v8[120] & 0x3F ^ v3)) ^ 0xE6;
  v65 = (v8[400] ^ 0xE6) - (v3 & (2 * (v8[400] ^ 0xE6))) - 898166250;
  v66 = v64 - ((2 * v64) & 0x1F0) + 2064123128;
  v67 = (((v66 ^ 0x7B0804F8 | v65 ^ 0xCA771216) - ((2 * (v66 ^ 0x7B0804F8 | v65 ^ 0xCA771216)) & 0x1DA) + 237) ^ 0xED) & (((v8[392] ^ 0xE6) - ((2 * v8[392]) & 0x12) - 1526673655) ^ 0xA500CF09);
  v68 = (v67 - ((2 * v67) & 0xFC0373C) - 941614178) ^ 0xC7E01B9E | (((v66 ^ 0x4A0000F8) & (v65 ^ 0x71216))
                                                                  - ((2 * ((v66 ^ 0x4A0000F8) & (v65 ^ 0x71216))) & 0x1F92A56C)
                                                                  - 1882631498) ^ 0x8FC952B6;
  v69 = ((v8[436] ^ 0xE6) - ((2 * (v8[436] ^ 0xE6)) & 0x46) + 94770211) ^ 0x5A61423;
  v70 = v68 - ((2 * v68) & 0x239EFF16) + 298811275;
  v71 = ((v70 ^ 0x11CF7F8B | v69) - ((2 * (v70 ^ 0x11CF7F8B | v69)) & 0x30) + 88) & 0x4F ^ 0x20A0069;
  v72 = (((2 * v71) & 0x4140014) - v71 - 1379872523) ^ 0xAFCAD0D4 | (((v70 ^ 0x78B) & v69)
                                                                   - ((2 * ((v70 ^ 0x78B) & v69)) & 0x15CCFB64)
                                                                   - 1964606030) ^ 0x8AE67DB2;
  LODWORD(STACK[0x580]) = v72 - ((2 * v72) & 0xAE);
  LODWORD(STACK[0x668]) = v48;
  v73 = v8[327];
  v74 = ((*(unsigned __int8 *)(v18 + (((_BYTE)v48 + 3) & 0x3F)) >> 1) ^ 0x73) & (v73 ^ 0x66);
  LOBYTE(v73) = ((((v8[208] ^ v3) + 43) ^ 0x7F) + 2 * ((v8[208] ^ v3) + 43) - 127) & (v73 ^ 0x19);
  LOBYTE(v74) = (v73 - ((2 * v73) & 0xFB) + 125) ^ 0x7D | (v74 - ((2 * v74) & 0xB0) - 40) ^ 0xD8;
  LOBYTE(v74) = (v8[335] ^ 0xE6) + (v74 ^ 0xF5) + ((2 * v74) & 0xEA) + 11;
  v8[335] = v74 - ((2 * v74) & 0xCC) - 26;
  LOBYTE(v74) = *(_BYTE *)(v19 + (v8[162] & 0x3F ^ v3));
  LOBYTE(v49) = (((v74 & 0x81 ^ 0xFE) - 2 * (v74 & 0x81) + 123) ^ 0x87) & (v8[323] ^ 0xE6);
  LOBYTE(v74) = (v49 - ((2 * v49) & 0x94) - 54) ^ v5 | (((2 * (v74 & 0x7E ^ 0x24)) | 0xA) - (v74 & 0x7E ^ 0x24) + 123) & 0xFE ^ 0xC6;
  v8[394] ^= (((v74 + (~(2 * v74) | 0x15) - 10) & 0xFE) >> 1) ^ 0x7A;
  LOBYTE(v49) = *(_BYTE *)(v18 + (v8[65] & 0x3F ^ v3)) ^ 0xE6;
  v8[356] ^= 0x7A ^ (v49 - ((2 * v49 + 98) & 0xA8) - 123);
  LOBYTE(v49) = (v8[103] ^ 0xD3) + (v8[436] ^ 0xE6) + 1;
  v8[436] = v49 - ((2 * v49) & 0xCC) - 26;
  v75 = *(unsigned __int8 *)(v19 + (v8[173] & 0x3F ^ v3));
  v76 = ((2 * v75) ^ 0xFFFFFFCB) + (v8[227] ^ v3) + ((16 * (v75 >> 2)) ^ 0x6F) - 6;
  v8[227] = v76 - ((2 * v76) & 0x58) + 44;
  v77 = v50 + v51 + 39;
  STACK[0x640] = v77;
  v8[383] ^= *(_BYTE *)(v19 + (v77 & 0x3F)) ^ 0xE6;
  LOBYTE(v77) = (v8[26] ^ v3) * (v8[26] ^ v3);
  LOBYTE(v77) = (v8[350] ^ 0xE6) + (v77 ^ 0xC8) - ((2 * v77) & 0x6E) + 56;
  v8[350] = v77 - ((2 * v77) & 0xCC) - 26;
  LOBYTE(v76) = *(_BYTE *)(v18 + (v8[136] & 0x3F ^ v3)) ^ 0xE6;
  LOBYTE(v16) = (v8[385] ^ 0xE6) - ((2 * (v8[385] ^ 0xE6)) & 0xB6) + 91;
  LOBYTE(v76) = v76 - ((2 * v76) & 0x96) - 53;
  LOBYTE(v77) = (((v76 ^ 0xCB | v16 ^ 0x5B) - ((2 * (v76 ^ 0xCB | v16 ^ 0x5B)) & 0x8E) + 71) ^ 0x47) & (((v8[378] ^ 0xE6) - ((2 * (v8[378] ^ 0xE6)) & 0x94) - 54) ^ 0xCA);
  LOBYTE(v77) = (v77 - ((2 * v77) & 0xD8) - 20) ^ 0xEC | (((v76 ^ 0xCB) & (v16 ^ 0x5B))
                                                        - ((2 * ((v76 ^ 0xCB) & (v16 ^ 0x5B))) & 0x94)
                                                        + 74) ^ 0x4A;
  LOBYTE(v16) = v77 - ((2 * v77) & 0x42) + 33;
  LOBYTE(v76) = (((2 * (v16 & 0xBD ^ 0xA5)) & 0x3E) - (v16 & 0xBD ^ 0xA5) - 30) ^ 0x24;
  LOBYTE(v17) = ((2 * v76) | 0x74) - v76 + 70;
  v78 = (v8[374] >> 1) ^ 0x73;
  LOBYTE(v16) = (((v16 | 0x3D) - ((2 * v16) & 0x84) - 78) ^ 0xD2) & ((v78 - ((2 * v78) & 0xA8) - 44) ^ 0xD4);
  LOBYTE(v16) = v17 ^ 0xF8 | (v16 - ((2 * v16) & 0x16) + 11) ^ 0xB;
  v8[358] = (v16 - ((2 * v16) & 0x6E) - 73) ^ 0x51;
  v79 = (v8[422] ^ 0xE6) - ((2 * (v8[422] ^ 0xE6)) & 0x140) - 1124769376;
  v80 = v79 & 0x8A ^ 0x81;
  v81 = (((v8[92] ^ v3) - ((2 * v8[92]) & 0x1A4) + 1204136914) ^ 0x4C52BD2) & (v79 ^ 0x1E5F);
  v82 = (v81 - ((2 * v81) & 0x3CD6AA50) + 1584092456) ^ 0x5E6B5528 | (v80 + 67) & 0xBBBBBBBB;
  LOBYTE(v80) = ((2 * ((79 - (((205 * (v8[155] ^ v3)) >> 10) & 7 ^ 0x46)) ^ 9)) & 0x76)
              + ((79 - (((205 * (v8[155] ^ v3)) >> 10) & 7 ^ 0x46)) ^ 0xB2);
  v83 = (v82 - ((2 * v82) & 0x7A63AFCE) + 1026676711) ^ 0x3D31D7E7;
  v84 = ((v83 << (v80 + 69)) - ((2 * (v83 << (v80 + 69))) & 0xC0) + 96) ^ ((v83 >> ((3 - v80) & 7))
                                                                         - ((2 * (v83 >> ((3 - v80) & 7))) & 0xC4)
                                                                         + 226);
  LOBYTE(v84) = (v8[395] ^ 0xE6) + (v84 ^ 0xE2) + ((2 * (v84 & 0x1F)) ^ 0xFB) - 95;
  v8[395] = v84 - ((2 * v84) & 0xCC) - 26;
  v8[345] ^= 0xFDu;
  LOBYTE(v84) = (v8[366] ^ 0xE6) * (v8[366] ^ 0xE6);
  LOBYTE(v84) = (v84 - ((2 * v84) & 0xBF) - 33) ^ 0xDF;
  LOBYTE(v84) = (v8[343] ^ 0xE6) + ((-90 * v84) & 0xF7) + ((-45 * v84) ^ 0x7B) - 123;
  v8[343] = v84 - ((2 * v84) & 0xCC) - 26;
  LOBYTE(v84) = (2 * *(_BYTE *)(v19 + (v8[85] & 0x3F ^ v3))) ^ 0xCC;
  v8[96] = (~(2 * v84) + v84) ^ v3;
  v85 = (v8[39] & 0x58 ^ 8) + ((v8[39] >> 1) & 0x6C ^ 0xFFFFFFBB) - 89;
  LODWORD(STACK[0x5A0]) = v85;
  LOBYTE(v17) = (*(_BYTE *)(v18 + (((v85 & 0xFE) - ((2 * (_BYTE)v85) & 0x54) + 43) & 0x3E ^ 0x2ALL)) ^ 0xE6) & (byte_100217C60[v8[33] & 0x3F ^ v3] ^ 5);
  v8[373] ^= (v17 - ((2 * v17) & 0xAA) + 85) ^ 0x55;
  LOBYTE(v17) = v8[239] & 0x3F ^ 0xB4;
  v86 = (((v17 - ((2 * v17) & 0x7C) - 2) & 0xE3 ^ 0x81)
                        + ((v17 - ((2 * v17) & 0x7C) - 2) ^ 0x66)
                        - (((v17 - ((2 * v17) & 0x7C) - 2) ^ 0x66) & 0xE3)) ^ 0xE3;
  v87 = *(unsigned __int8 *)(v19 + v86) ^ 0xFFFFFFE6 | v8[148] ^ v3;
  v88 = (((2 * (v87 + 14)) & 4) + ((v87 + 14 - ((2 * v87) & 0x1C)) & 0xFFFFFFC6 ^ 0xFFFFFFBF) + 69) ^ 0x44;
  v89 = ((((2 * v88) | 0x1C) - v88 - 14) ^ 0x48 | *(_BYTE *)(v19 + (v8[105] & 0x3F ^ v3)) & 0x18)
      - 2
      * ((((((2 * v88) | 0x1C) - v88 - 14) ^ 0x48) & 0x33 | *(_BYTE *)(v19 + (v8[105] & 0x3F ^ v3)) & 0x10) ^ (((2 * v88) | 0x1C) - v88 - 14) & 2);
  LOBYTE(v87) = v8[354];
  LOBYTE(v88) = (v8[221] ^ v3) & (v87 ^ 0xE6);
  LOBYTE(v87) = (v8[339] ^ 0xE6) & (v87 ^ 0x19);
  LOBYTE(v88) = (v87 - ((2 * v87) & 0x5E) + 47) ^ 0x2F | (v88 + (~(2 * v88) | 0x99) + 52) ^ 0x33;
  v8[441] = (v88 - ((2 * v88) & 0x22) + 17) & 0x7F ^ 0xF7;
  v90 = 205 * (*(unsigned __int8 *)(v18 + (v8[171] & 0x3F ^ v3)) ^ 0xE6);
  v91 = (v8[24] ^ v3) + ((v90 >> 10) ^ 0xFFFFFFEB) + ((v90 >> 9) & 0x56) + 21;
  v8[44] ^= 0x61 ^ (v91 + (~(2 * v91) | 0x3D) + 98);
  v92 = (~((~((v8[137] >> 1) & 0x24) | 0x32) + ((v8[137] >> 1) & 0x20 | 0xD)) & 0x24 | v8[329] & 0x53) ^ 0x66;
  v8[423] ^= 0xCB ^ (v92 - ((2 * v92) & 0x87) - 53);
  v8[344] ^= 0xAB ^ (3 * (((v8[67] | 0x2F) - (v2 & (2 * (v8[67] | 0x2F))) + 53) ^ 0x35)
                                    + (~(6 * (((v8[67] | 0x2F) - (v2 & (2 * (v8[67] | 0x2F))) + 53) ^ 0x35)) | 0xA9)
                                    - 84);
  v8[370] = 83;
  v8[419] ^= 0xBDu;
  LOBYTE(v77) = ((v8[400] & 0xA1 ^ 0x7E) + 44) ^ v4;
  v93 = *(_BYTE *)(v18 + (v8[37] & 0x3F ^ v3)) & 0x5E ^ 0x1C;
  LOBYTE(v77) = ((((v93 - ((2 * v93) & 0x38) - 100) & 0x2E ^ 0xD) - ((v93 - ((2 * v93) & 0x38) - 100) | 0x2F) - 2) | (v77 + 110) & 0xA1) ^ 0x1A;
  LOBYTE(v77) = ((v77 - ((2 * v77) & 0xA8) - 44) ^ 0xDA) + (v8[188] ^ v3);
  LODWORD(STACK[0x5B0]) = byte_100217C60[v86];
  LOBYTE(v92) = v8[61] ^ v3;
  v94 = byte_100217C60[v8[193] & 0x3F ^ v3] ^ 5;
  LOBYTE(v50) = (((v94 | v92) - 2 * ((v94 | v92) & 0xF) + 15) ^ 0xF) & (v8[403] ^ 0xE6);
  v95 = (v50 - ((2 * v50) & 0xF4) - 6) ^ 0xFA | ((v94 & v92) - ((2 * (v94 & v92)) & 0xC) + 6) ^ 6;
  v96 = (v8[357] ^ 0xE6) + (v95 ^ 0x20) - ((2 * v95) & 0xBF) - 32;
  v8[357] = v96 + (~(2 * v96) | 0x33) - 25;
  v97 = *(_BYTE *)(v18 + (v8[159] & 0x3F ^ v3)) ^ 0xE6;
  LODWORD(STACK[0x608]) = v89 - 79;
  v98 = ((v97 & ((v89 - 79) ^ 0x4E)) - ((2 * (v97 & ((v89 - 79) ^ 0x4E))) & 0x58) + 44) & 0x9D ^ 0x2E;
  v8[371] ^= 0x85 ^ (v98 + (~(2 * v98) | 0xF5) - 122);
  LOBYTE(v92) = (v8[116] ^ v3) - ((2 * (v8[116] ^ v3)) & 0xC2) + 97;
  LOBYTE(v50) = (v8[416] ^ 0xE6) - (v3 & (2 * (v8[416] ^ 0xE6))) + 22;
  v99 = (((v50 ^ 0x16 | v92 ^ 0x61) - ((2 * (v50 ^ 0x16 | v92 ^ 0x61)) & 4) - 126) ^ 0x82) & (((v8[349] ^ 0xE6)
                                                                                             - ((2 * (v8[349] ^ 0xE6)) & 0xA2)
                                                                                             + 81) ^ 0x51);
  v100 = (v99 - ((2 * v99) & 0x94) - 54) ^ 0xCA | (((v50 ^ 0x16) & (v92 ^ 0x61))
                                                 - ((2 * ((v50 ^ 0x16) & (v92 ^ 0x61))) & 0xE2)
                                                 + 113) ^ 0x71;
  v101 = (((v85 & 0xFE) - ((2 * v85) & 0x54) - 1211791829) >> 1) ^ 0x5BE2C315;
  v102 = v100 - ((2 * v100) & 0x52) + 41;
  LOBYTE(v84) = (((v102 ^ 0x29 | v101) - ((2 * (v102 ^ 0x29 | v101)) & 0xA8) + 84) ^ 0x54) & (((v8[321] ^ 0xE6) + 0x80) ^ 0x80);
  v103 = (v84 - ((2 * v84) & 0x34) + 26) ^ 0x1A | (((v102 ^ 0x29) & v101) - ((2 * ((v102 ^ 0x29) & v101)) & 0xB6) - 37) ^ 0xDB;
  v8[347] = (v103 - ((2 * v103) & 0x62) - 79) ^ 0x57;
  LOBYTE(v77) = v77 - ((2 * v77) & 0x58) + 44;
  v8[188] = v77;
  LODWORD(v77) = *(unsigned __int8 *)(v19 + (v77 & 0x3F ^ v3));
  HIDWORD(v104) = v77 ^ 2;
  LODWORD(v104) = (v77 ^ 0xFFFFFFE7) << 24;
  LOBYTE(v77) = (v8[381] ^ 0xE6) - ((2 * (v8[381] ^ 0xE6)) & 0x3F);
  LOBYTE(v101) = (((2 * (v8[4] & 7 ^ 3)) | 4) - (v8[4] & 7 ^ 3) - 2) ^ 5;
  LOBYTE(v101) = ((2 * v101) & 0xBC) + (v101 ^ 0xDE);
  v105 = ((v8[430] ^ 0xE6) - ((2 * (v8[430] ^ 0xE6)) & 0x1E0) + 2111102448) ^ 0x7DD4DDF0;
  v106 = (v105 << (v101 + 34)) - ((2 * (v105 << (v101 + 34))) & 0x13E84114) - 1980489590;
  v107 = (v105 >> ((6 - v101) & 7)) - ((2 * (v105 >> ((6 - v101) & 7))) & 0x418734A0) + 1623431760;
  LOBYTE(v101) = (v8[415] ^ 0xE6) - ((2 * (v8[415] ^ 0xE6)) & 7);
  v8[151] = v3;
  LOBYTE(v78) = v8[247] ^ v3;
  v108 = *(_BYTE *)(v19 + (v8[41] & 0x3F ^ v3)) ^ 0xE6;
  LOBYTE(v78) = v78 - ((2 * v78) & 0xA) + 5;
  v109 = v108 - ((2 * v108) & 7) - 125;
  LOBYTE(v101) = (((v109 ^ 0x83 | v78 ^ 5) - ((2 * (v109 ^ 0x83 | v78 ^ 5)) & 0x30) + 24) ^ 0x18) & ((v101 - 125) ^ 0x83);
  v110 = (v101 - ((2 * v101) & 0x28) + 20) ^ 0x14 | (((v109 ^ 0x83) & (v78 ^ 5))
                                                   - ((2 * ((v109 ^ 0x83) & (v78 ^ 5))) & 6)
                                                   - 125) ^ 0x83;
  LOBYTE(v107) = v106 ^ 0xDA ^ v107;
  v111 = (v110 - ((2 * v110) & 0xB2) - 39) ^ 0xD9;
  LOBYTE(v77) = (((v111 | v107) - ((2 * (v111 | v107)) & 0x10) - 120) ^ 0x88) & ((v77 - 97) ^ 0x9F);
  LOBYTE(v77) = (v77 - ((2 * v77) & 0x9C) - 50) ^ 0xCE | ((v111 & v107) - ((2 * (v111 & v107)) & 0x94) + 74) ^ 0x4A;
  LOBYTE(v77) = (v8[354] ^ 0xE6)
              + ((v77 - ((2 * v77) & 0xBC) - 34) ^ 0xEB)
              + (v2 & (2 * (v77 - ((2 * v77) & 0xBC) - 34)) ^ v9)
              - 53;
  v8[354] = v77 - ((2 * v77) & 0xCC) - 26;
  LOBYTE(v77) = v8[442] ^ 0xE6;
  LOBYTE(v18) = v77 - 86;
  LOBYTE(v77) = v77 - 86 - ((2 * v77) & 0x55);
  LOBYTE(v18) = ((v77 & 0x23 ^ 1) - ((2 * v18) & 4) - 58) ^ 0xC4;
  LOBYTE(v77) = (((v8[372] ^ 0xE6) - ((2 * (v8[372] ^ 0xE6)) & 7) - 125) ^ 0x83) & (v77 ^ 0x55);
  LOBYTE(v77) = (v18 - ((2 * v18) & 0x58) + 44) ^ 0xD | (v77 - ((2 * v77) & 0x6C) - 74) ^ 0xB6;
  LOBYTE(v77) = (v77 - ((2 * v77) & 0x98) - 52) ^ 0xCC;
  v8[339] = ((2 * v77 * v77) & 0x33) - v77 * v77 - 26;
  LOBYTE(v77) = (v8[444] & 0x25 ^ 0xB6) + (v8[444] & 0x21 ^ 9) - ((v8[444] & 0x25 ^ 0xB6) & 0x23);
  LOBYTE(v77) = (v8[322] ^ 0xE6) + (v77 & 0xF5 ^ 0x37) + ((2 * v77) & 0xE3 ^ 0x99) + 117;
  LOBYTE(v77) = (v8[361] ^ 0xE6) + (v77 ^ 0xBC) + ((2 * v77) & 0x78) + 68;
  v8[361] = v77 - ((2 * v77) & 0xCC) - 26;
  LODWORD(v77) = (89 * (LODWORD(STACK[0x788]) != -289289362)) ^ LODWORD(STACK[0x5F0]);
  LODWORD(STACK[0x570]) = LODWORD(STACK[0x5E0]) + 2;
  LODWORD(STACK[0x5D0]) += 107;
  v112 = LODWORD(STACK[0x590]) - 47;
  LODWORD(STACK[0x5E0]) = LODWORD(STACK[0x580]) + 218;
  LODWORD(STACK[0x5F0]) = (v104 >> 26) - ((2 * (v104 >> 26)) & 0x76) + 59;
  return ((uint64_t (*)(void *, _QWORD))*(&off_100260750 + (int)v77))(&unk_100215910, v112 ^ 0x7Fu);
}

uint64_t sub_10013380C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;

  v4 = STACK[0x560];
  v5 = (LODWORD(STACK[0x560]) - 130361069) & 0x7C526BF;
  v6 = (v3 + (LODWORD(STACK[0x560]) ^ 0x362) - 1413) ^ v2;
  LODWORD(STACK[0x670]) = v6;
  if (v6 <= 1)
    v7 = 1;
  else
    v7 = v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)*(&off_100260750
                                                                               + (((4
                                                                                  * ((v7 - 17) < 0xFFFFFFF7)) | (16 * ((v7 - 17) < 0xFFFFFFF7))) ^ v4))
                                                                     - v5
                                                                     + 1710))(a1, a2, 1127335163, 1127335163);
}

uint64_t sub_100133888()
{
  unsigned int v0;
  unsigned int v1;

  return ((uint64_t (*)(void))*(&off_100260750 + ((667 * (((v1 < 0x10) ^ (v0 - 29) ^ 0xA5) & 1)) ^ v0)))();
}

uint64_t sub_1001338C4()
{
  int v0;
  int v1;
  _OWORD *v2;

  *v2 = xmmword_1002158A0;
  return ((uint64_t (*)(__n128))((char *)*(&off_100260750
                                                   + ((1454
                                                     * (((v0 + 663221928) & 0xD87806AB ^ 0x431) == (v1 & 0xFFFFFFF0))) ^ (v0 - 1428)))
                                         - 12))((__n128)xmmword_1002158A0);
}

uint64_t sub_10013392C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;
  int v8;

  LODWORD(STACK[0x678]) = (2 * v6) ^ 0x90E;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_100260750
                                                                                                 + (int)(((((2 * v6) ^ 0xFFFFF2C2) + v6 + 356) * (v8 != v7)) ^ v6)))(a1, a2, 1127335163, a4, a5, a6, 9);
}

uint64_t sub_10013398C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))*(&off_100260750
                                                                     + ((19 * (((v3 - 1405) & v5) == 0)) ^ v3)))(a1, a2, a3, (_DWORD)a3 + v4 + ((v3 - 893) | 0x4B2u) - 1722);
}

uint64_t sub_1001339D0(uint64_t a1)
{
  unsigned int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int8x16x4_t v8;

  LODWORD(STACK[0x5C0]) = v2 & 0xFFFFFFF8;
  v8.val[0].i64[0] = v1 & 8;
  v8.val[0].i64[1] = v1 & 8 | 1;
  v8.val[1].i64[0] = v8.val[0].i64[0] | 2;
  v8.val[1].i64[1] = ((v5 ^ 0x149) - 1049) & v1 | 3;
  v8.val[2].i64[0] = v8.val[0].i64[0] | 4;
  v8.val[2].i64[1] = v8.val[0].i64[0] | 5;
  v8.val[3].i64[0] = v8.val[0].i64[0] | 6;
  v8.val[3].i64[1] = v8.val[0].i64[0] | 7;
  *(int8x8_t *)(v3 + v1) = veor_s8(veor_s8(veor_s8(veor_s8(*(int8x8_t *)(a1 + v8.val[0].i64[0]), *(int8x8_t *)(v4 + v8.val[0].i64[0])), *(int8x8_t *)(v6 + v8.val[0].i64[0] + 4)), (int8x8_t)0x1818181818181818), vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v8, (int8x16_t)xmmword_1002048A0), (int8x8_t)0x5959595959595959));
  return ((uint64_t (*)(__n128))((char *)*(&off_100260750 + ((620 * ((v2 & 0xFFFFFFF8) - 8 == v1)) ^ v5)) - 4))((__n128)xmmword_1002048A0);
}

void sub_100133AAC()
{
  JUMPOUT(0x100133A08);
}

uint64_t sub_100133AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;

  LODWORD(STACK[0x678]) = (v7 + 1006949213) & 0xC3FB29CD;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_100260750
                                                                                                 + ((439 * (((v6 == LODWORD(STACK[0x5C0])) ^ (v7 - 52)) & 1)) ^ v7)))(a1, a2, 1127335163, a4, a5, a6, 9);
}

uint64_t sub_100133B30@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W3>, int a4@<W8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v8 = 7 * (a4 ^ 0x62D);
  v9 = 166 * (v8 ^ 0x423);
  LODWORD(STACK[0x678]) = v9;
  *(_BYTE *)(v5 + (a3 - 1127335163)) = *(_BYTE *)(a1 + ((a3 - 1127335163) & 0xFLL)) ^ *(_BYTE *)((((_BYTE)a3 + 5) & 0xF) + v7 + 4) ^ *(_BYTE *)(v6 + ((a3 - 1127335163) & 0xFLL)) ^ (89 * ((a3 + 5) & 0xF)) ^ 0x18;
  return ((uint64_t (*)(void))*(&off_100260750 + (((a3 != (v8 ^ (a2 - 1056)) + v4) * (v9 ^ 0x3D7)) ^ v8)))();
}

void sub_100133BC4()
{
  JUMPOUT(0x100133B74);
}

uint64_t sub_100133BCC(char *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, char a8)
{
  int v8;
  char v9;
  char v10;
  _BYTE *v11;
  int v12;
  char v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  _BYTE *v17;
  uint64_t v18;
  char v19;
  char v20;
  int v21;
  char v22;
  char *v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  char v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  char v71;
  char v72;
  char v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;

  v19 = a8 ^ 0x46;
  v20 = v9 + v10;
  v21 = LODWORD(STACK[0x570]) ^ LODWORD(STACK[0x5D0]);
  v22 = (*v11 ^ 0xC9 ^ ((LOBYTE(STACK[0x678]) - 12) | 0x10)) + 127;
  *v11 = (((((2 * v22) & 0xEF) + (v22 ^ 0x77)) ^ 0xA1) + ((2 * (((2 * v22) & 0xEF) + (v22 ^ 0x77))) & 0x42) - 24) ^ 0x99;
  if (v8 == v14 + 1)
    v23 = a1;
  else
    v23 = a1 + 1;
  v24 = *v23;
  if (v8 == v14 + 1)
    v25 = 0;
  else
    v25 = v15;
  v26 = v24 ^ v25;
  if (v8 == v14 + 1)
    v27 = 4;
  else
    v27 = 5;
  v28 = v26 ^ *(_BYTE *)(v18 + v27);
  if (v8 == v14 + 1)
    v29 = v17;
  else
    v29 = v17 + 1;
  v30 = v28 ^ *v29;
  if (v8 == v14 + 1)
    v31 = v11;
  else
    v31 = v11 + 1;
  v32 = (((v30 ^ *v31) - 20) ^ 0x7F) + 2 * ((v30 ^ *v31) - 20) - 39;
  *v31 = v30 ^ ((v32 ^ 0x48) + ((2 * v32) & 0x90) + 96);
  v33 = STACK[0x670];
  v34 = 2u % LODWORD(STACK[0x670]);
  v35 = (v34 * v15) ^ a1[v34] ^ *(_BYTE *)(v18 + v34 + 4) ^ v17[v34];
  v36 = (((v35 ^ v11[v34]) + 111) ^ 0x9F) + 2 * (((v35 ^ v11[v34]) + 111) & 0x1F) + 127;
  v11[v34] = v35 ^ ((v36 ^ 0xCE) + ((2 * v36) & 0x9C) + 20);
  v37 = 3 % v33;
  v38 = (byte_1002159E0[v37] ^ v11[v37] ^ (-79 * v37) ^ byte_10023A950[v37] ^ byte_1002246B0[v37 | 4])
      + LODWORD(STACK[0x5A0]);
  v11[v37] = a1[v37] ^ (v37 * v15) ^ *(_BYTE *)(v18 + (v37 | 4)) ^ v17[v37] ^ (((((2 * v38) & 0x2E) + (v38 ^ 0x97) + 108) ^ 0x73)
                                                                             + ((2 * (((2 * v38) & 0x2E) + (v38 ^ 0x97))
                                                                               - 40) & 0xE7)
                                                                             - 118);
  v39 = STACK[0x788];
  v40 = LODWORD(STACK[0x788]) ^ v14;
  v41 = 4 % v40;
  v42 = (v41 * v15) ^ a1[v41] ^ *(_BYTE *)(v41 + v18 + 4) ^ v17[v41];
  v43 = (((v42 ^ v11[v41]) - 3) ^ 0xBE) + ((2 * ((v42 ^ v11[v41]) - 3)) & 0x7C) + 96;
  v11[v41] = v42 ^ ((v43 ^ 0x58) + ((2 * v43) & 0xB0) - 118);
  v44 = v16 % v40;
  v45 = (v44 * v15) ^ a1[v44] ^ *(_BYTE *)(v44 + v18 + 4) ^ v17[v44];
  v46 = (v45 ^ v11[v44]) + 17;
  v11[v44] = v45 ^ (((((2 * v46) & 0x76) + (v46 ^ 0xBB) + 127) ^ 0xA2)
                  + ((2 * (((2 * v46) & 0x76) + (v46 ^ 0xBB)) + 126) & 0x44)
                  + 36);
  v47 = 6 % v40;
  v48 = (byte_1002159E0[v47] ^ v11[v47] ^ (-79 * v47) ^ byte_10023A950[v47] ^ byte_1002246B0[v47 + 4]) + v19;
  v11[v47] = a1[v47] ^ (v47 * v15) ^ *(_BYTE *)(v18 + v47 + 4) ^ v17[v47] ^ ((v48 ^ 0x58) + ((2 * v48) & 0xB0) - 88);
  v49 = 7 % v40;
  v50 = (v49 * v15) ^ a1[v49] ^ *(_BYTE *)(v49 + v18 + 4) ^ v17[v49];
  v11[v49] = v50 ^ ((((v50 ^ v11[v49]) + 47) ^ 0x6F) + ((2 * ((v50 ^ v11[v49]) + 47)) & 0xDF) - 111);
  v51 = 8 % v40;
  v52 = v20 + (byte_1002159E0[v51] ^ v11[v51] ^ (-79 * v51) ^ byte_10023A950[v51] ^ byte_1002246B0[v51 + 4]) + 58;
  v11[v51] = a1[v51] ^ (v51 * v15) ^ *(_BYTE *)(v18 + v51 + 4) ^ v17[v51] ^ ((((v52 ^ 0x7F) + 2 * v52 - 18) ^ 0x99)
                                                                           + ((2 * ((v52 ^ 0x7F) + 2 * v52) + 28) & 0x33)
                                                                           - 6);
  v53 = a7 % v40;
  LOBYTE(v40) = (a1[v53] ^ v11[v53] ^ (v53 * v15) ^ *(_BYTE *)(v53 + v18 + 4) ^ v17[v53]) - 118;
  v11[v53] = byte_1002159A0[v53] ^ (63 * v53) ^ byte_100229530[v53 + 1] ^ byte_10023C760[v53 + 7] ^ ((v40 ^ 0x1F) + 2 * (v40 & 0x1F) - 31);
  LODWORD(v53) = v39 ^ v14;
  v54 = 0xA % (v39 ^ v14);
  v55 = (63 * v54) ^ byte_1002159A0[v54] ^ byte_100229530[v54 + 1] ^ byte_10023C760[v54 + 7];
  v56 = ((LODWORD(STACK[0x660]) + 36) ^ 0x10)
      - ((2 * (LODWORD(STACK[0x660]) + 36)) & 0xFFFFFFDF)
      + (v55 ^ v11[v54])
      - 16;
  v11[v54] = v55 ^ (((((2 * v56) & 0xBF) + (v56 ^ 0xDF) + 122) ^ 0xED)
                  + ((2 * (((2 * v56) & 0xBF) + (v56 ^ 0xDF)) - 12) & 0xDA)
                  - 70);
  v57 = 0xB % v53;
  LOBYTE(v55) = (63 * v57) ^ byte_1002159A0[v57] ^ byte_100229530[v57 + 1] ^ byte_10023C760[v57 + 7];
  v11[v57] = v55 ^ ((((v55 ^ v11[v57]) - 44) ^ 0x77) + ((2 * ((v55 ^ v11[v57]) - 44)) & 0xEF) - 119);
  v58 = 0xC % v53;
  v59 = (63 * v58) ^ byte_1002159A0[v58] ^ byte_100229530[v58 + 1] ^ byte_10023C760[v58 + 7];
  LODWORD(v57) = (v59 ^ v11[v58])
               + ~(((2 * (LODWORD(STACK[0x5E0]) - 3)) ^ 0xFFFFFFAE) + ((LODWORD(STACK[0x5E0]) - 3) ^ 0x28));
  v11[v58] = v59 ^ (((((2 * v57) & 0xD4) + (v57 ^ 0x6A) + 88) ^ 0x7F) + 2 * (((2 * v57) & 0xD4) + (v57 ^ 0x6A)) - 49);
  LODWORD(v57) = STACK[0x788];
  v60 = LODWORD(STACK[0x788]) ^ v14;
  v61 = 0xD % v60;
  v62 = (byte_1002159E0[v61] ^ v11[v61] ^ (-79 * v61) ^ byte_10023A950[v61] ^ byte_1002246B0[v61 + 4])
      + (LODWORD(STACK[0x5B0]) ^ v16);
  LOBYTE(v62) = (v62 ^ 0xF6) + ((2 * v62) & 0xEC) + 28;
  v11[v61] = byte_1002159A0[v61] ^ (63 * v61) ^ byte_100229530[v61 + 1] ^ byte_10023C760[v61 + 7] ^ ((v62 ^ 0xD6) + ((2 * v62) & 0xAC) + 24);
  v63 = 0xE % v60;
  v64 = (63 * v63) ^ byte_1002159A0[v63] ^ byte_100229530[v63 + 1] ^ byte_10023C760[v63 + 7];
  v65 = (v64 ^ v11[v63]) + 42;
  v11[v63] = v64 ^ ((((v13 & (2 * v65)) + (v65 ^ 0x6D) - 97) | 0x72)
                  - ((96 - ((v13 & (2 * v65)) + (v65 ^ 0x6D))) & 0x72)
                  - 12);
  v66 = 0xF % v60;
  v67 = (63 * v66) ^ byte_1002159A0[v66] ^ byte_100229530[v66 + 1] ^ byte_10023C760[v66 + 7];
  v11[v66] = v67 ^ ((((v67 ^ v11[v66]) + 14) ^ 0x37) + ((2 * ((v67 ^ v11[v66]) + 14)) & 0x6E) + 112);
  LODWORD(v57) = v57 ^ v14;
  v68 = 0x10 % v57;
  v69 = v12
      + a2
      + (byte_1002159E0[v68 & 0xF] ^ v11[v68] ^ byte_10023A950[v68 & 0xF] ^ byte_1002246B0[(v68 & 0xF) + 4] ^ (-79 * (v68 & 0xF)))
      - 127;
  v11[v68] = byte_1002159A0[v68 & 0xF] ^ (63 * (v68 & 0xF)) ^ byte_100229530[(v68 & 0xF) + 1] ^ byte_10023C760[(v68 & 0xF) + 7] ^ ((((v69 ^ 0xFE) + 4 * (v69 >> 1) + 96) ^ 0xC1) + ((2 * ((v69 ^ 0xFE) + 4 * (v69 >> 1)) - 64) & 0x83) - 31);
  v70 = 0x11 % v57;
  v71 = byte_100229530[(v70 & 0xF) + 1] ^ byte_1002159A0[v70 & 0xF];
  v72 = 63 * (v70 & 0xF);
  LOBYTE(v68) = byte_10023C760[(v70 & 0xF) + 7];
  v73 = (v71 ^ v11[v70] ^ v68 ^ v72) + 35;
  v11[v70] = v71 ^ v72 ^ v68 ^ (((2 * v73) & 0xFB)
                              + (v73 ^ 0xFD)
                              + ((15 - (((2 * v73) & 0xFB) + (v73 ^ 0xFD))) | 0xCD)
                              + ((((2 * v73) & 0xFB) + (v73 ^ 0xFD) + 48) | 0xCD)
                              + 55);
  v74 = 0x12 % v57;
  v75 = (a1[v74 & 0xF] ^ v11[v74] ^ *(unsigned __int8 *)((v74 & 0xF) + v18 + 4) ^ ((v74 & 0xF) * v15) ^ v17[v74 & 0xF])
      + (LODWORD(STACK[0x5F0]) ^ 0xFFFFFF86);
  v11[v74] = byte_1002159A0[v74 & 0xF] ^ (63 * (v74 & 0xF)) ^ byte_100229530[(v74 & 0xF) + 1] ^ byte_10023C760[(v74 & 0xF) + 7] ^ ((v75 ^ 0x7B) + ((2 * v75) & 0xF7) - 123);
  v76 = STACK[0x788];
  LODWORD(v74) = LODWORD(STACK[0x788]) ^ v14;
  v77 = 0x13 % v74;
  LOBYTE(v70) = (byte_1002159E0[v77 & 0xF] ^ v11[v77] ^ byte_10023A950[v77 & 0xF] ^ byte_1002246B0[(v77 & 0xF) + 4] ^ (-79 * (v77 & 0xF)))
              + STACK[0x640];
  LOBYTE(v59) = (v70 ^ 0xF6) + ((2 * v70) & 0xEC) + 30;
  v11[v77] = byte_100215950[v77 & 0xF] ^ (-59 * (v77 & 0xF)) ^ byte_100215A90[(v77 & 0xF) + 1] ^ byte_10023BEE0[(v77 & 0xF) + 1] ^ ((v59 ^ 0xF2) + ((2 * v59) & 0xE4) - 6);
  v78 = 0x14 % v74;
  v79 = (v78 & 0xF) + 1;
  LOBYTE(v63) = byte_100215A90[v79] ^ byte_100215950[v78 & 0xF];
  LOBYTE(v79) = byte_10023BEE0[v79];
  v80 = -59 * (v78 & 0xF);
  v81 = (v63 ^ v11[v78] ^ v79 ^ v80) - 64;
  v11[v78] = v63 ^ v80 ^ v79 ^ ((v81 ^ 0xF7) + ((2 * v81) & 0xEF) + 9);
  v82 = 0x15 % v74;
  v83 = (v82 & 0xF) + 1;
  LOBYTE(v63) = byte_100215A90[v83];
  LOBYTE(v83) = byte_10023BEE0[v83];
  LOBYTE(v63) = v63 ^ byte_100215950[v82 & 0xF];
  LOBYTE(v78) = -59 * (v82 & 0xF);
  LOBYTE(v79) = (v63 ^ v11[v82] ^ v83 ^ v78) - 26;
  v11[v82] = v63 ^ v78 ^ v83 ^ ((v79 ^ 0x55) + ((2 * v79) & 0xAA) - 85);
  LODWORD(v82) = v76 ^ v14;
  v84 = 0x16 % (v76 ^ v14);
  v85 = (v84 & 0xF) + 1;
  LOBYTE(v83) = byte_100215A90[v85] ^ byte_100215950[v84 & 0xF];
  LOBYTE(v85) = byte_10023BEE0[v85];
  LOBYTE(v78) = -59 * (v84 & 0xF);
  LOBYTE(v79) = (v83 ^ v11[v84] ^ v85 ^ v78) - 95;
  v11[v84] = v83 ^ v78 ^ v85 ^ ((v79 ^ 0xA7) + ((2 * v79) & 0x4E) + 89);
  v86 = 0x17 % v82;
  LOBYTE(v78) = (byte_1002159E0[v86 & 0xF] ^ v11[v86] ^ byte_10023A950[v86 & 0xF] ^ byte_1002246B0[(v86 & 0xF) + 4] ^ (-79 * (v86 & 0xF)))
              + (v21 ^ 0xB5);
  v11[v86] = byte_100215950[v86 & 0xF] ^ (-59 * (v86 & 0xF)) ^ byte_100215A90[(v86 & 0xF) + 1] ^ byte_10023BEE0[(v86 & 0xF) + 1] ^ ((v78 ^ 0xF4) + ((2 * v78) & 0xE8) + 12);
  v87 = 0x18 % v82;
  v88 = (v87 & 0xF) + 1;
  LOBYTE(v83) = byte_100215A90[v88] ^ byte_100215950[v87 & 0xF];
  LOBYTE(v88) = byte_10023BEE0[v88];
  LOBYTE(v78) = -59 * (v87 & 0xF);
  LOBYTE(v79) = (v83 ^ v11[v87] ^ v88 ^ v78) - 118;
  v11[v87] = v83 ^ v78 ^ v88 ^ ((v79 ^ 0x1D) + ((2 * v79) & 0x3A) - 29);
  v89 = 0x19 % v82;
  v90 = (v89 & 0xF) + 1;
  LOBYTE(v79) = byte_100215A90[v90] ^ byte_100215950[v89 & 0xF];
  LOBYTE(v90) = byte_10023BEE0[v90];
  LOBYTE(v83) = -59 * (v89 & 0xF);
  LOBYTE(v78) = (v79 ^ v11[v89] ^ v90 ^ v83) - 125;
  v11[v89] = v79 ^ v83 ^ v90 ^ ((v78 ^ 0x6D) + ((2 * v78) & 0xDA) - 109);
  LODWORD(v89) = STACK[0x788];
  LODWORD(v83) = LODWORD(STACK[0x788]) ^ v14;
  v91 = 0x1A % v83;
  v92 = (v91 & 0xF) + 1;
  v93 = byte_100215A90[v92];
  LOBYTE(v92) = byte_10023BEE0[v92];
  LOBYTE(v90) = -59 * (v91 & 0xF);
  LOBYTE(v79) = v93 ^ byte_100215950[v91 & 0xF];
  LOBYTE(v78) = (v79 ^ v11[v91] ^ v92 ^ v90) + 118;
  v11[v91] = v79 ^ v90 ^ v92 ^ ((v78 ^ 0x3A) + ((2 * v78) & 0x74) - 58);
  v94 = 0x1B % v83;
  LOBYTE(v59) = byte_100215A90[(v94 & 0xF) + 1] ^ byte_100215950[v94 & 0xF] ^ (-59 * (v94 & 0xF)) ^ byte_10023BEE0[(v94 & 0xF) + 1];
  v11[v94] = v59 ^ ((((v59 ^ v11[v94]) - 122) ^ 0xAB) + ((2 * (v59 ^ v11[v94]) + 12) & 0x56) + 6);
  v95 = 0x1C % v83;
  v96 = (v95 & 0xF) + 2;
  v97 = byte_100215EF0[v96];
  LOBYTE(v96) = byte_100227BE0[v96];
  LOBYTE(v90) = 87 * (v95 & 0xF);
  LOBYTE(v79) = v97 ^ byte_1002159D0[v95 & 0xF];
  LOBYTE(v75) = (v79 ^ v11[v95] ^ v96 ^ v90) + 115;
  v11[v95] = v79 ^ v90 ^ v96 ^ ((v75 ^ 0x75) + ((2 * v75) & 0xEA) - 117);
  v98 = 0x1D % v83;
  v99 = LODWORD(STACK[0x668])
      + (byte_1002159E0[v98 & 0xF] ^ v11[v98] ^ byte_10023A950[v98 & 0xF] ^ byte_1002246B0[(v98 & 0xF) + 4] ^ (-79 * (v98 & 0xF)))
      + 67;
  v11[v98] = byte_1002159D0[v98 & 0xF] ^ (87 * (v98 & 0xF)) ^ byte_100215EF0[(v98 & 0xF) + 2] ^ byte_100227BE0[(v98 & 0xF) + 2] ^ ((v99 ^ 0x9D) + ((2 * v99) & 0x3A) + 99);
  v100 = 0x1E % (v89 ^ v14);
  v101 = (v100 & 0xF) + 2;
  v102 = byte_100215EF0[v101];
  LOBYTE(v101) = byte_100227BE0[v101];
  LOBYTE(v90) = 87 * (v100 & 0xF);
  LOBYTE(v79) = v102 ^ byte_1002159D0[v100 & 0xF];
  LOBYTE(v83) = (v79 ^ v11[v100] ^ v101 ^ v90) + 81;
  v11[v100] = v79 ^ v90 ^ v101 ^ (((((2 * v83) & 0x9F) + (v83 ^ 0xCF) + 117) ^ 0x10)
                                + ((2 * (((2 * v83) & 0x9F) + (v83 ^ 0xCF)) + 42) & 0x20)
                                - 84);
  v103 = 0x1F % (v89 ^ v14);
  v104 = (byte_1002159E0[v103 & 0xF] ^ v11[v103] ^ byte_10023A950[v103 & 0xF] ^ (-79 * (v103 & 0xF)) ^ byte_1002246B0[(v103 & 0xF) + 4])
       + (LODWORD(STACK[0x608]) ^ 0xFFFFFFB1);
  LOBYTE(v104) = (v104 ^ 0xE9) + ((2 * v104) & 0xD2) + 64;
  v105 = (v103 & 0xF) + 2;
  v106 = byte_100215EF0[v105];
  v11[v103] = byte_1002159D0[v103 & 0xF] ^ (87 * (v103 & 0xF)) ^ v106 ^ byte_100227BE0[v105] ^ ((v104 ^ 0xDF)
                                                                                              + ((2 * v104) & 0xBF)
                                                                                              - 8);
  return sub_10010ECE0(v89 ^ v14, 1353391120, 2139391791, 1544884126, v106, -1353391120, 118);
}

uint64_t sub_100134BB0()
{
  int v0;
  const char *v1;
  size_t v2;
  _BOOL4 v3;

  v2 = strlen(v1);
  v3 = malloc_type_malloc((((v0 + 45) - 0x1246301214006F8 + ((v0 + 779) | 0x110u)) & (2 * v2))+ (v2 ^ 0x7F6DCE7F6F5FFFDFLL)- 0x7F6DCE7F6F5FFFC2, 0xBDDA8B5EuLL) != 0;
  return ((uint64_t (*)(void))*(&off_100260750 + ((108 * v3) ^ v0)))();
}

uint64_t sub_100134C50()
{
  unint64_t v0;
  uint64_t v1;
  int v2;

  STACK[0x688] = v0;
  LODWORD(STACK[0x690]) = umask(0);
  return ((uint64_t (*)(void))*(&off_100260750
                             + ((51 * (v1 - 0x7F6DCE7ED59C0C4CLL + 59 * (v2 ^ 0x545u) == 2579757280)) ^ v2)))();
}

uint64_t sub_100134CE8@<X0>(uint64_t a1@<X2>, unint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  _BOOL4 v12;

  *(_BYTE *)(v4 + v8 - 0x160E6E96EA222CD3) = *(_BYTE *)(v3 + v7 - 0x747201F4DF06898DLL);
  v10 = v5 - 0x7F7076D6225EB42CLL;
  v11 = (a2 < v6) ^ (v10 < v6);
  v12 = v10 < a2;
  if (v11)
    v12 = a2 < v6;
  return (*(uint64_t (**)(void))(a1 + 8 * ((!v12 * v2) ^ v9)))();
}

uint64_t sub_100134D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;
  uint64_t v5;
  int v7;

  strcpy((char *)&v4[v5 - 0x7F6DCE7F6F5FFFDFLL], "/Library");
  v7 = mkdir(v4, 0x1EDu);
  return (*(uint64_t (**)(void))(a3
                              + 8
                              * ((30
                                * (((((528 * (v3 ^ 0x54F) - 471015201) & 0x1C131F7E) + 1476375916) & (2 * v7))
                                 + (v7 ^ 0xABFFDCF5) != -1409295116)) ^ v3)))();
}

uint64_t sub_100134E40()
{
  int v0;
  _BOOL4 v1;

  v1 = *__error() == v0 - 1039;
  return ((uint64_t (*)(void))*(&off_100260750 + ((v1 * ((v0 - 800) ^ 0x73)) ^ v0)))();
}

uint64_t sub_100134E84()
{
  uint64_t v0;
  const char *v1;
  void *v2;
  int v3;
  int v4;

  qmemcpy(v2, "/ProvenanceV2", 13);
  *(_BYTE *)(v0 + 249) = 0;
  v4 = mkdir(v1, 0x1EDu);
  return ((uint64_t (*)(void))*(&off_100260750
                             + ((547 * (((2 * v4) & 0x776B298E) + (v4 ^ 0xBBB594C7) == -1145727802)) ^ v3)))();
}

uint64_t sub_100134F04()
{
  int v0;
  _BOOL4 v1;

  v1 = *__error() == 17;
  return ((uint64_t (*)(void))*(&off_100260750 + ((v1 * (v0 ^ 0x47E)) ^ v0)))();
}

uint64_t sub_100134F44()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = (v3 + 187487503) & 0xF4D327D0;
  *(_DWORD *)v0 = 1668509743;
  *(_WORD *)(v0 + 4) = 26926;
  *(_BYTE *)(v0 + 6) = 100;
  *(_BYTE *)(v2 + v4 - 0x7F6DCE7F6F6000C3 + v5) = 0;
  *(_BYTE *)(v2 + STACK[0x688]) = 0;
  umask(STACK[0x690]);
  free(v1);
  return ((uint64_t (*)(void))*(&off_100260750 + (int)((((v5 + 100) ^ 0x53) - 296) | v5)))();
}

uint64_t sub_100134FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8
                                                                                                  + 8 * ((1298 * ((((9 * (v7 ^ 0x1F1) - 1277) ^ (v6 == 0)) & 1) == 0)) ^ v7)))(a1, a2, a3, a4, a5, a6, 4294924388);
}

uint64_t sub_100135024()
{
  const char *v0;
  int v1;
  uint64_t v2;
  int v3;

  umask(0x12u);
  v3 = open(v0, 289);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((124
                                          * ((int)(((2 * v3) & 0xEBEFFFE6) + (v3 ^ 0xF5F7FFF3) - 1979187187) <= (int)(((v1 + 368238712) & 0xEA0D1AFE) - 181))) ^ v1))
                            - 4))();
}

uint64_t sub_1001350B8@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  v2 = fcntl(a1 + 168296461, 64);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_100260750
                                                    + ((113
                                                      * ((((_DWORD)v2 == ((v1 + 17) ^ 0xC5)) ^ (v1 - 1)) & 1)) ^ v1))
                                          - 8))(v2);
}

uint64_t sub_10013511C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8
                                                                                                  + 8 * (int)(((((v7 - 619083101) & 0x24E674EF ^ 0xFFFFFE25) + v7 + 45) * (v6 == 0)) ^ v7)))(a1, a2, a3, a4, a5, a6, 4294924388);
}

uint64_t sub_100135164()
{
  int v0;
  _BOOL4 v1;

  v1 = *__error() == 2;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((v1 * ((v0 - 1144) ^ 0x157)) ^ (v0 - 1144)))
                            - ((v0 - 1891529167) & 0x70BE6F9B ^ 0x302)))();
}

uint64_t sub_1001351C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const char *v9;
  int v10;
  uint64_t v11;

  v11 = open_dprotected_np(v9, 801, 4, 0);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_100260750
                                                    + ((113
                                                      * ((int)(((2 * v11) & 0xBFFA6BFA)
                                                             + (v11 ^ 0x5FFD35FD)
                                                             + (((v10 ^ 0x71) + 990413883) ^ 0x1B0A4EEC)) > (int)(((v10 ^ 0x71) + 990413883) & 0xC4F77BD5 ^ 0xFFFFFF3A))) ^ v10 ^ 0x71))
                                          - 8))(v11);
}

uint64_t sub_10013526C()
{
  int v0;
  int v1;
  int v2;
  unint64_t v3;
  ssize_t v4;

  v3 = LODWORD(STACK[0x9D0]);
  v4 = write(v0 + v1 + 1741, (const void *)STACK[0x9C8], (v3 - 1232404166));
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((1539
                                        * ((v4 ^ 0xBFFF26AEE231DEFDLL)
                                         + ((2 * v4) & 0x7FFE4D5DC463BDFALL)
                                         + ((v2 + 1979977354) & 0x89FBF3BA ^ 0x87069F6B467EB3A5)
                                         - ((v3 | ((unint64_t)(v3 < 0x4974FEC6) << 32))
                                          + 0x36F79922D021246CLL) == 0x100E2CF70F1A6C7ALL)) ^ v2))
                            - 8))();
}

uint64_t sub_100135358@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  int v4;

  ftruncate(v3, a1 - 0x36F799231996263CLL + (v4 + 581));
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (((((v4 + 581) ^ 0x5C7) + v1 + v2 >= 0) * (((v4 + 1412) | 0x84) ^ 0x68A)) ^ (v4 + 581)))
                            - 12))();
}

uint64_t sub_1001353F0(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  v3 = close(a1);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_100260750
                                                    + (((v2 < v1 - 1741) * ((v1 - 1500) ^ 0x392)) ^ (v1 - 290)))
                                          - 8))(v3);
}

uint64_t sub_100135430@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))((char *)*(&off_100260750 + (a1 ^ (1248 * (v1 == -42925))))
                            - ((a1 - 1796027734) & 0x6B0D34FB ^ 0xF9)))();
}

uint64_t sub_100135480()
{
  int v0;
  const char *v1;
  int v2;
  _BOOL4 v3;

  v2 = strlen(v1);
  v3 = CFURLCreateFromFileSystemRepresentation(kCFAllocatorDefault, (const UInt8 *)v1, (v2 ^ 0x6E7CFBDC) - 1853684700 + ((2 * v2) & 0xDCF9F7B8), 0) == 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((v3 * (((v0 + 25) | 0x41) + 111)) ^ v0))
                            - ((v0 + 2007225606) & 0x885C2B3F ^ 0x13FLL)))();
}

uint64_t sub_100135520(const __CFURL *a1)
{
  void *v1;
  mode_t v2;
  int v3;

  CFURLSetResourcePropertyForKey(a1, kCFURLIsExcludedFromBackupKey, kCFBooleanTrue, 0);
  CFRelease(a1);
  umask(v2);
  free(v1);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((((STACK[0x9C8] != 0) << 7) | ((STACK[0x9C8] != 0) << 10)) ^ ((((v3 - 58) | 0x26) ^ 0x53) - 154)))
                            - (((((v3 - 58) | 0x26) ^ 0x53) - 154) ^ 0x607u)
                            - (((((v3 - 58) | 0x26) ^ 0x53u) - 1596698888) ^ 0xFFFFFFFF5F2BA96BLL)))();
}

void sub_100135600(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  free(a1);
  sub_1000B6114(v7, v8, v9, v10, v11, v12, a7);
}

uint64_t sub_100135608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, unint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  _BOOL4 v14;

  v14 = v10 < a6 || v8 + v9 + (((v12 ^ a7) + 527) ^ a8) < v10;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((v14 * v11) ^ v12)) - 8))();
}

uint64_t sub_100135644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;

  v12 = 1755343967 * ((*(_DWORD *)(a3 + a4) ^ (v8 + v5)) & 0x7FFFFFFF);
  v13 = (v12 ^ HIWORD(v12)) * (v4 + 1755342966);
  LODWORD(v13) = byte_100216B40[v13 >> 24] ^ *(unsigned __int8 *)(v8 + v5) ^ byte_100219160[(v13 >> 24) + 2] ^ byte_10023D5F0[v13 >> 24] ^ v13 ^ (-95 * (v13 >> 24));
  *(_BYTE *)(v7 + v5) = *(_BYTE *)(v10 + v5) ^ (v13 - ((2 * v13) & 0x5A) - 83);
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((((v4 + 25) ^ v6) * (v5 == 254)) ^ (v4 + 25)))
                            - ((v4 + 25) ^ v11 ^ v9)))();
}

uint64_t sub_1001358A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, unint64_t a8)
{
  return sub_100135608(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1001358AC()
{
  uint64_t v0;
  int v1;
  int v2;
  char *v3;
  char *v4;

  v2 = LODWORD(STACK[0x670]) + LODWORD(STACK[0x668]) - 101702587;
  v3 = (char *)&STACK[0xBB0] + v0 + 383;
  STACK[0x8A0] = STACK[0x660] + (v1 - 1180) + 1035;
  STACK[0x680] = (unint64_t)&STACK[0xBB0] + v0 + 319;
  sub_1001EC3DC(byte_10023C620, (char *)&STACK[0xBB0] + v0 + 319, 0x40uLL);
  STACK[0x688] = (unint64_t)v3;
  v4 = sub_1001EC3DC(byte_100229657, v3, 0x40uLL);
  return ((uint64_t (*)(char *))((char *)*(&off_100260750
                                                   + (v1 ^ (924 * ((v2 + 452649520) < 0xF8))))
                                         - ((v1 - 1231) | 0x4C1u)
                                         + 1215))(v4);
}

uint64_t sub_100135958()
{
  int v0;
  int v1;
  uint64_t v2;
  _BYTE *v3;
  int v4;
  uint64_t v5;

  LODWORD(STACK[0x788]) = -289289346;
  *v3 = *(_BYTE *)(v2 + 0u % (v0 + v1 + 8));
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8 * ((43 * (((v4 + 1180939513) ^ 0x4663B9BDLL) == 319)) ^ v4))
                            - 8))();
}

uint64_t sub_1001359FC@<X0>(int a1@<W0>, int a2@<W8>)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t (*v13)(void);

  v6 = *(unsigned __int8 *)(v4 + (v3 + a2 + 44) % 0x13Fu);
  v7 = (unsigned __int16)(v3
                        + 19264
                        - 319
                        * ((unsigned __int16)(((39651 * (unsigned __int16)(v3 + 19264)) >> 16)
                                                             + ((unsigned __int16)((v3
                                                                                  + 19264
                                                                                  - ((39651
                                                                                    * (unsigned __int16)(v3 + 19264)) >> 16)) & 0xFFFE) >> 1)) >> 8));
  v8 = __PAIR64__(v6 ^ 0xCu, (v6 ^ 0x20u) << 24) >> 29;
  v9 = *(unsigned __int8 *)(v4 + (v3 + a2) % 0x13Fu);
  HIDWORD(v10) = v9 ^ 4;
  LODWORD(v10) = (v9 ^ 0x28) << 24;
  v11 = ((v10 >> 27) ^ 0xFFFFFFE5)
      + ((2 * (v10 >> 27)) & 0xFFFFFFCA)
      + (*(unsigned __int8 *)(v4 + v7) ^ 0x34 ^ (v8 - ((v8 << ((a2 + a1 + 94) ^ 0x20)) & 0x30) + 24))
      + 27;
  HIDWORD(v10) = *(unsigned __int8 *)(v4 + (v3 + a2 - 98) % 0x13Fu);
  LODWORD(v10) = (HIDWORD(v10) ^ 0x2C) << 24;
  v12 = ((v10 >> 25) ^ 0xFFFFFFC1) - ((2 * (v10 >> 25)) & 0x7C) + (v11 ^ 0x6A) + 1;
  LOBYTE(v11) = v12 + ((2 * v11) & 0xD4) - 2 * ((v12 + ((2 * v11) & 0xD4) + 20) & 0x2D ^ v12 & 1);
  v13 = (uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (a1 ^ (v2 + 2196) ^ (573 * (((v3 + 1 - a1) | (a1 - (v3 + 1))) >= 0))))
                          - 8);
  *(_BYTE *)(v4 + v7) = v11;
  return v13();
}

void sub_100135B70()
{
  JUMPOUT(0x100135B7CLL);
}

uint64_t sub_100135BFC(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((2 * (((v1 + 8 == a1) ^ (v2 + 92)) & 1)) & 0xF7 | (8 * (((v1 + 8 == a1) ^ (v2 - 932)) & 1))) ^ v2))
                            - 4))();
}

uint64_t sub_100135C3C@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W8>)
{
  int v3;
  char v4;
  char v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v7 + (a2 - 785609392)) = (((v3 ^ v6) >> (v4 - 6))
                                                   - ((a3 + 1 + (a3 ^ v5) + 112) & (2 * ((v3 ^ v6) >> (v4 - 6))))
                                                   + 125) ^ 0xA3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((1451
                                          * (a2
                                           - ((((v3 ^ v6) >> (v4 - 6))
                                                              - ((a3 + 1 + (a3 ^ v5) + 112) & (2
                                                                                             * ((v3 ^ v6) >> (v4 - 6))))
                                                              + 125) != 0xA3) == a1 + 203)) ^ a3))
                            - 4))();
}

void sub_100135CB4()
{
  unint64_t v0;

  STACK[0x8A0] = 0;
  STACK[0x988] = v0;
  STACK[0xA18] = STACK[0x688];
  JUMPOUT(0x100135CD8);
}

uint64_t sub_100135E98@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((v1 - 1171) ^ ((2 * (a1 == 0)) | ((a1 == 0) << 6)))) - 4))();
}

uint64_t sub_100135EC4()
{
  int v0;
  uint64_t v1;

  byte_1002789B0 = 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((v0 - 1153) | 0x410 | (35 * (*(char *)(STACK[0x650] + 1) < 2))))
                            - ((((v0 - 1153) | 0x410) ^ 0x696u)
                             + 149)
                            + 347))();
}

uint64_t sub_100135F20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  int v7;
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8
                                                                                                  + 8 * ((((v7 ^ 0x792) - 426) * (a7 == 1)) ^ v7)))(a1, a2, a3, a4, a5, a6, 4294924380);
}

void sub_100135F48()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v0 - 1539;
  v3 = 1189216979 * ((1484279903 - ((v1 - 192) | 0x5878505F) + ((v1 - 192) | 0xA787AFA0)) ^ 0x896CA366);
  v4 = v2 + 1510;
  v5 = v2 + LODWORD(STACK[0x81C]) - 672224850 + v3;
  *(_QWORD *)(v1 - 176) = STACK[0x650];
  *(_DWORD *)(v1 - 184) = v5;
  *(_DWORD *)(v1 - 192) = v4 ^ v3;
  sub_10018E460(v1 - 192);
  sub_1000B6114(v6, v7, v8, v9, v10, v11, *(_DWORD *)(v1 - 188));
}

uint64_t sub_100135FD0@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2 + 8 * ((((v1 - 1086) ^ 0x2F5) * (a1 != 0)) ^ (v1 - 801))))();
}

void sub_100135FF8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  int v7;

  if (LODWORD(STACK[0x9E0]) == (a7 ^ 0x79887F47))
    v7 = -42023;
  else
    v7 = -42920;
  sub_1000B6114(a1, a2, a3, a4, a5, a6, v7);
}

uint64_t sub_100136028@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8 * ((639 * (a7 == ((v7 + 3) ^ 0xCF))) ^ v7))
                                                                                                - 4))(a1, a2, a3, a4, a5, a6, 4294924380);
}

uint64_t sub_10013605C()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;

  if (*(unsigned __int8 *)(STACK[0x650] + 2) == (v2 ^ 0xCC))
    v4 = v0;
  else
    v4 = -42018;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)(((v4 == 0) * ((v1 + 983582453) & 0xC55FBBFD ^ 0x2F8)) ^ v1))
                            - 4))();
}

uint64_t sub_1001360B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  _BOOL4 v14;

  v8 = (((a7 ^ 0x570) - 1390) ^ 0xFFFFF15F)
     + ((*(unsigned __int8 *)(STACK[0x650] + 3) - ((2 * *(unsigned __int8 *)(STACK[0x650] + 3)) & 0x1A)) << 8)
     - 25344;
  v9 = ((v8 ^ 0xFFFF8D00) - 27904 + (~(2 * v8) | 0xFFFFDBFF)) ^ 0xFFFF92FF | (*(unsigned __int8 *)(STACK[0x650] + 4)
                                                                            + 8690
                                                                            + (~(2
                                                                               * *(unsigned __int8 *)(STACK[0x650] + 4)) | 0xFFFFFE1D)) ^ 0x21F1;
  v10 = (v9 - ((2 * v9) & 0x3076) - 26565) ^ 0x983B;
  v11 = ((2 * v10) & 0x1AF6A) + ((unsigned __int16)v10 ^ 0xFFEBD7B5) + 776186655;
  v12 = LODWORD(STACK[0x81C]) - 372386224;
  v13 = (v12 < 0x2E2F82D4) ^ (v11 < 0x2E2F82D4);
  v14 = v11 < v12;
  if (v13)
    v14 = v12 < 0x2E2F82D4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 8 * ((1716 * v14) ^ a7))
                                                                                                - 12))(a1, a2, a3, a4, a5, a6, 4294925278);
}

uint64_t sub_1001361D0()
{
  int v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  int v4;

  v3 = STACK[0x650] + 5;
  v4 = 1189216979 * (((v2 - 192) & 0x97A295A5 | ~((v2 - 192) | 0x97A295A5)) ^ 0x46B6669C);
  *(_DWORD *)(v2 - 192) = (v0 + 1361) ^ v4;
  *(_DWORD *)(v2 - 184) = v4 + 476348231 + v1;
  *(_QWORD *)(v2 - 176) = v3;
  sub_10018E460(v2 - 192);
  return ((uint64_t (*)(void))*(&off_100260750
                             + (((*(_DWORD *)(v2 - 188) == ((v0 + 1409116768) & 0xAC0297FD) - 957)
                               * ((v0 + 1390) ^ 0x193)) ^ v0)))();
}

uint64_t sub_100136288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  int v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 + 8 * ((1443 * (*(unsigned __int8 *)(STACK[0x650] + (v7 + 1321040)) == (((v8 + 18) | 5) ^ (v8 + 16)))) ^ v8))
                                                                                                - 12))(a1, a2, a3, a4, a5, a6, 4294925278);
}

uint64_t sub_1001362E0()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  unint64_t v5;
  __int16 v6;
  int v7;
  _BOOL4 v8;

  v5 = ((v3 + 1527115432) | ((unint64_t)(v3 + 1527115432 < (((v0 & 0x5301CEFA) + 1539) ^ 0x5A2u)
                                                                              + 1525793512) << 32))
     + STACK[0x650]
     - 1525794391;
  v6 = (((*(unsigned __int8 *)v5 - ((2 * *(unsigned __int8 *)v5) & 0xB8)) << 8) + 23552) ^ 0x5C00;
  LOWORD(v5) = (v6 - ((2 * v6) & 0xB200) - 9983) ^ 0xD901 | (*(unsigned __int8 *)(v5 + 1)
                                                           - ((2 * *(unsigned __int8 *)(v5 + 1)) & 0x196)
                                                           + 2251) ^ 0x8CB;
  LODWORD(v5) = (unsigned __int16)(v5 - ((2 * v5) & 0x2810) + 5128) ^ 0x1408;
  LODWORD(v5) = ((v2 + 3922) & (2 * v5)) + (v5 ^ 0x7FDDDF5E) - 429163034;
  v7 = ((v4 + 568832192) < 0x66495D44) ^ (v5 < 0x66495D44);
  v8 = v5 < v4 + 568832192;
  if (v7)
    v8 = (v4 + 568832192) < 0x66495D44;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1283 * v8) ^ v0 & 0x5301CEFAu)) - 4))();
}

uint64_t sub_100136430@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  _BOOL4 v12;

  v12 = v9 == 2145247070 || STACK[0x650] + v10 + a7 + (v7 ^ 0x230u) == 0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8 * ((210 * v12) ^ v7))
                                                                                                - 12))(a1, a2, a3, a4, a5, a6, 4294925273);
}

uint64_t sub_100136484()
{
  int v0;
  int v1;
  unsigned int v2;
  void *v3;

  v2 = ((v0 - 2145247070) & 0xFFFFFFF0 ^ 0x37ABB37F) + ((2 * (v0 - 2145247070)) & 0x6F5766E0);
  LODWORD(STACK[0x9D0]) = v2 + 298404718;
  v3 = malloc_type_malloc(v2 - 933999448, 0xEE36C167uLL);
  STACK[0x9C8] = (unint64_t)v3;
  return ((uint64_t (*)(void))*(&off_100260750 + ((1124 * (v3 != 0)) ^ v1)))();
}

uint64_t sub_100136504(uint64_t a1)
{
  int v1;
  __int16 v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;

  *(_WORD *)a1 = 513;
  *(_BYTE *)(a1 + 2) = ((unsigned __int16)(v2 - ((((v5 - 317) | 0x490) ^ 0xFBF2) & (2 * v2 - 26334)) - 13259) >> 8) ^ 0x7F;
  *(_BYTE *)(a1 + 3) = (v2 - ((((v5 - 61) | 0x90) ^ 0xF2) & (2 * v2 + 34)) + 53) ^ 0xA4;
  *(_BYTE *)(a1 + 4) = ((unsigned __int16)(v2 - v1 - ((2 * (v2 - v1) + 6110) & 0x2718) - 16517) >> 8) ^ 0x93;
  *(_BYTE *)(a1 + 5) = (v2 - v1 - ((2 * (v2 - v1) - 34) & 0x18) + 123) ^ 0x8C;
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((v5 + 1085) ^ (42
                                              * (((v1 + 1341028784) | ((unint64_t)(v3 < v4) << 32)) != 3486275854)))))();
}

uint64_t sub_100136610(uint64_t a1)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;

  *(_BYTE *)(v6 + a1 + 601 * (v1 ^ 0x59Eu) - 0x1D2DE0147D34107ELL) = *(_BYTE *)(v5 + v8 - 0x513F94EB6E173DBALL);
  v10 = v3 < v2;
  if (v10 == v7 - 0x2242D5E3F9160B8ALL < v2)
    v10 = v7 - 0x2242D5E3F9160B8ALL < v3;
  return (*(uint64_t (**)(void))(v9 + 8 * ((v10 * v4) ^ v1)))();
}

uint64_t sub_1001366A8@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((440
                                          * (((((v1 - 808) ^ 0x19Bu) + 0x7FE5A3577FF73D8ELL) ^ (a1 + 1211247599))
                                           - 0x7FE5A3577043E03ELL
                                           + (((uint64_t)(a1 + 1211247599) << (((v1 - 40) | 0x25) ^ 0xAEu)) & 0xFFCB46AEFFEE7B3ELL) == 263413089)) ^ v1))
                            - 8))();
}

void sub_10013674C()
{
  int v0;
  int v1;

  LODWORD(STACK[0x6F0]) = ((261 * (v0 ^ 0x14)) ^ 0xE8A52EE3) + v1;
  JUMPOUT(0x10013A18CLL);
}

uint64_t sub_10013677C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  int v7;
  uint64_t v8;

  byte_1002789B0 = 1;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8 * (((LODWORD(STACK[0x9E0]) != 2038988232) * ((v7 - 732) ^ 0x281)) | a7))
                                                                                                - 8))(a1, a2, a3, a4, a5, a6, 4294925273);
}

uint64_t sub_1001367C0()
{
  int v0;
  int v1;

  v1 = strcmp("mobactivationd", __progname);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((1650
                                        * (((((v0 ^ 0x17E) + 409) ^ (((2 * v1) & 0x9ED897BA) + (v1 ^ 0xCF6C4BDD) == -814986275)) & 1) == 0)) ^ v0))
                            - 4))();
}

uint64_t sub_100136840()
{
  const char **v0;
  int v1;
  int v2;

  v2 = strcmp("mobileactivationd", *v0);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((620
                                        * ((((v1 - 409) ^ 0x7F9D9D3D) & (2 * v2))
                                         + ((((v1 - 319630379) & 0x130D2BF3) - 1076966424) ^ v2) != -1076965415)) ^ v1))
                            - 12))();
}

uint64_t sub_1001368BC()
{
  const char **v0;
  unsigned int v1;
  int v2;

  v2 = strcmp("findmydeviced", *v0);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (((((v2 << ((v1 + 59) ^ 0x2D)) & 0x9EF957FA) + (v2 ^ 0x4F7CABFD) != 1333570557)
                                        * ((v1 ^ 0x17E) + 733)) ^ v1))
                            - 4))();
}

uint64_t sub_100136934()
{
  const char **v0;
  int v1;
  int v2;

  v2 = strcmp("findmydeviced-nano-support", *v0);
  return ((uint64_t (*)(void))*(&off_100260750
                             + ((1128
                               * (((((v1 - 32) | 0x11) ^ 0xBEFA56A3) & (2 * v2)) + (v2 ^ 0xDF7D2BDF) != (v1 ^ 0xDF7D2AF3))) ^ v1)))();
}

uint64_t sub_1001369A8()
{
  const char **v0;
  int v1;
  int v2;
  int v3;

  v3 = strcmp("identityservicesd", *v0);
  return ((uint64_t (*)(void))*(&off_100260750
                             + ((49
                               * ((((31 * (v1 ^ 0x13D)) ^ 0x9FDA945E) & (2 * v3))
                                + ((((v1 + 1854351842) & 0x9178D78F) + 1340950864) ^ v3) == (v2 | 0x4FED4950))) ^ v1)))();
}

uint64_t sub_100136A38()
{
  const char **v0;
  int v1;
  int v2;

  v2 = strcmp("amsaccountsd", *v0);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (((((2 * v2) & 0xBEF917FE) + (v2 ^ 0xDF7C8BFF) == -545485825)
                                        * ((v1 - 978) ^ 0x412 ^ ((v1 - 978) | 0x281) ^ 0x682)) | v1))
                            - 4))();
}

uint64_t sub_100136AA8()
{
  const char **v0;
  int v1;
  int v2;

  v2 = strcmp("AppStore", *v0);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (((((2 * v2) & 0x7FFB5FF2) + (v2 ^ 0xBFFDAFF9) != -1073893383)
                                        * ((v1 ^ 0x693) - 653)) ^ v1))
                            - 8))();
}

uint64_t sub_100136B04()
{
  const char **v0;
  int v1;
  int v2;

  v2 = strcmp("itunesstored", *v0);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (((((2 * v2) & 0x3EB957FA) + ((v1 + 257832897) ^ v2 ^ 0x10029020) != 526167037)
                                        * ((v1 - 397) ^ 0x18C)) ^ v1))
                            - 8))();
}

uint64_t sub_100136B78()
{
  const char **v0;
  int v1;
  int v2;
  int v3;
  int v4;

  v3 = strcmp("StoreKitUIService", *v0);
  v4 = ((2 * v3) & 0x1EBC77BA) + (v3 ^ (v1 + 1052));
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (int)(v2 ^ (v1 + 2100) ^ (103
                                                                * ((((v4 - v2) | (v2 - v4)) >> ((v2 - v1 + 16) ^ 0x33)) & 1))))
                            - 12))();
}

uint64_t sub_100136BF4()
{
  const char **v0;
  int v1;
  int v2;

  v2 = strcmp("appstored", *v0);
  return ((uint64_t (*)(void))*(&off_100260750
                             + ((1579
                               * (((v2 << ((-125 * (((v1 - 36) | 0x20) ^ 0x2D)) ^ 0x8E)) & 0x5FDB7FB6)
                                + (v2 ^ 0xAFEDBFDB) != -1343373349)) ^ v1)))();
}

uint64_t sub_100136C68()
{
  const char **v0;
  int v1;
  int v2;

  v2 = strcmp("Fitness", *v0);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (((((2 * v2) & 0x3FF9F7F2) + (v2 ^ 0x9FFCFBF9) != -1610810375)
                                        * ((v1 ^ 0x34) - 248)) ^ v1))
                            - 12))();
}

uint64_t sub_100136CC8()
{
  const char **v0;
  int v1;
  int v2;

  v2 = strcmp("appinstallationmetricsd", *v0);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((355
                                        * (((5 * (v1 ^ 0x49F) + 1333603696) ^ v2) + ((2 * v2) & 0x9EFA5FFE) != 1333604351)) ^ v1))
                            - 8))();
}

uint64_t sub_100136D40()
{
  const char **v0;
  int v1;
  int v2;
  int v3;
  int v4;

  v3 = strcmp("attributionkitd", *v0);
  v4 = ((2 * v3) & 0x1E9AFFB6) + (v3 ^ (v2 + 1044));
  return ((uint64_t (*)(void))*(&off_100260750
                             + (int)((v2 + ((v1 + 1890746543) | 0x205) + 161) ^ v1 ^ (634
                                                                                    * (((v4 - v1) | (v1 - v4)) >> 31)))))();
}

uint64_t sub_100136DB4()
{
  const char **v0;
  int v1;
  int v2;

  v2 = strcmp("test", *v0);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (((((2 * v2) & 0x1EBD57BE) + (v2 ^ 0xF5EABDF) != 257862623)
                                        * (131 * (((v1 + 1890746825) | 0x219) ^ 0x3B8) + 20)) ^ (v1 + 1890747469)))
                            - 12))();
}

uint64_t sub_100136E3C()
{
  const char **v0;
  int v1;
  int v2;

  v2 = strcmp("ProvenanceCombo", *v0);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((1941
                                        * (((2 * v2) & 0x5EBD97FA)
                                         + ((((v1 + 1003436850) & 0xC430C39F) + 794741102) ^ v2) == 794741757)) ^ v1))
                            - ((v1 + 784) ^ 0x6C1)))();
}

uint64_t sub_100136EC4()
{
  int v0;
  void *v1;

  v1 = malloc_type_malloc(0x98uLL, 0x10300401EA5018FuLL);
  STACK[0xA10] = (unint64_t)v1;
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((1868
                                        * (((v1 == 0) ^ (75 * ((v0 + 78) & 0xEF ^ 0xCF) + 1)) & 1)) ^ v0))
                            - 8))();
}

uint64_t sub_100136F40@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  unint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  _BOOL4 v6;

  v6 = a2 < v2;
  *(_BYTE *)(a1
           + ((v4 - 1497249851) | ((unint64_t)((v4 - 1497249851) < 0x269FA71D) << 32))
           - 647997213) = 0;
  if (v6 == v2 > 0xFB35D62)
    v6 = a2 > 0xFB35D62;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((!v6 * ((v3 - 1301005328) & 0x4D8BC271 ^ 0x2B5)) ^ v3)) - 12))();
}

void sub_100136FFC()
{
  JUMPOUT(0x100136FACLL);
}

uint64_t sub_100137004()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char *v3;
  int v4;
  char *v5;
  FILE *v6;

  v5 = &v3[v1 + v0];
  *((_QWORD *)v5 + 59) = 0x7972617262694C2FLL;
  qmemcpy(&v5[(v4 - 409224070) & 0x186443EA], "/ProvenanceV2", 13);
  *(_QWORD *)&v5[v4 - 75 + 189] = 0x6975732E6373702FLL;
  v5[501] = 0;
  free(v2);
  v6 = fopen(v3, "rb");
  free(v3);
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((1017 * (v6 != 0)) ^ v4)) - 8))();
}

uint64_t sub_1001370D4()
{
  FILE *v0;
  int v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  fseek(v0, 0, 2);
  v3 = ftell(v0);
  v4 = (((v1 + 22349792) | 0x40200002) ^ 0xFEAE175F) + v3 - ((2 * v3) & 0x7FB63C92) - 4;
  v5 = ((v1 + 22349792) ^ 0x7EC73592 ^ (2 * v4) & 0xFFD37FAA) + (v4 ^ 0xC032A19C);
  LODWORD(STACK[0x78C]) = v5 - 92276240;
  v6 = fseek(v0, 0, 0);
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * ((519 * (v5 - 2146025429 > 0x31)) | v1)))(v6);
}

uint64_t sub_1001371B4()
{
  uint64_t v0;
  int v1;
  size_t v2;
  void *v3;
  void *v4;
  BOOL v5;
  int v6;

  v3 = malloc_type_malloc(v2, 0x33D658CuLL);
  STACK[0x7B8] = (unint64_t)v3;
  v4 = malloc_type_malloc(v2, 0x293AA273uLL);
  STACK[0x6B8] = (unint64_t)v4;
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 1;
  v6 = !v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((v6 * (v1 - 923)) ^ v1)) - 12))();
}

uint64_t sub_100137220()
{
  uint64_t v0;
  FILE *v1;
  void *v2;
  int v3;
  size_t v4;
  int v5;

  v5 = fread(v2, 1uLL, v4, v1);
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((1437 * ((_DWORD)v4 == ((v5 - ((2 * v5) & 0x544B72D2) - 1440368279) ^ 0xAA25B969))) ^ (v3 - 626))))();
}

uint64_t sub_1001372A4()
{
  uint64_t v0;
  int v1;
  int v2;

  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((542
                                * (((v2 - 92276231) & 0xF) == (((v2 - 92276231) << ((v1 - 25) & 0xFA ^ 0x13)) & ((v1 ^ 0x466) - 1356)))) ^ v1)))();
}

uint64_t sub_100137314@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((56
                                          * ((v2 | ((unint64_t)(v2 < 0x7A69B9C5) << 32))
                                           - 956642588 != ((a1 - 989165592) & 0x3AF573F1) + 1097106297)) ^ a1))
                            - 12))();
}

uint64_t sub_1001373AC()
{
  int v0;
  int v1;
  FILE *v2;
  void *v3;
  int v4;
  uint64_t v5;

  v4 = v0 + 1098188770;
  free(v3);
  STACK[0x7B8] = 0;
  v5 = fclose(v2);
  LODWORD(STACK[0x874]) = v1;
  return ((uint64_t (*)(uint64_t))((char *)*(&off_100260750 + ((240 * (v4 ^ 0x41750910)) | 9))
                                          - ((240 * (v4 ^ 0x41750910) - 1943259665) & 0x73D3CEFD)
                                          + 1733))(v5);
}

uint64_t sub_100137404@<X0>(int a1@<W8>)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;

  v8 = v2 < v1;
  *(_BYTE *)(v4 + v7 - 0x63D1D571F12D6FACLL) = *(_BYTE *)(v3 + v6 - 0x5625C435AD2988E2);
  if (v8 == v5 - 0x46735A98979AB355 < v1)
    v8 = v5 - 0x46735A98979AB355 < v2;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((v8 * ((a1 ^ 0x466) - 248)) ^ a1)) - 12))();
}

uint64_t sub_1001374A0@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  _BOOL4 v3;

  v2 = ((v1 - 365) ^ 0x562) * a1;
  STACK[0x7F0] = 1;
  v3 = container_system_group_path_for_identifier(0, "systemgroup.com.apple.pisco.suinfo", &STACK[0x7F0]) == 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((v3 * (v2 ^ 0xC5)) | (v1 - 365)))
                            - ((v1 - 1430) ^ 0x133)))();
}

uint64_t sub_100137508()
{
  int v0;
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1 + 8 * ((1928 * (STACK[0x7F0] == (((v0 - 247) | 0x124u) ^ 0x165))) ^ v0)))();
}

uint64_t sub_100137544()
{
  int v0;
  uint64_t v1;
  io_object_t v2;
  uint64_t v3;

  *(_DWORD *)(v1 + 3308) = ((v0 + 1910899623) & 0x8E19FFEF ^ 0x6F7EBB30)
                         + (LODWORD(STACK[0x6B4]) ^ 0xD7E5FFBB)
                         + ((2 * LODWORD(STACK[0x6B4])) & 0xAFCBFF76);
  IOObjectRelease(v2);
  v3 = IOObjectRelease(STACK[0x6CC]);
  return sub_10013A444(v3);
}

uint64_t sub_100137594(double a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)(v1 + v4) = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (((v5 == 0) * v3) | v2)) - 4))();
}

uint64_t sub_1001375BC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v1 ^ (473 * (v0 != v2))))
                            - ((v1 + 1058) ^ 0xFFFFFFFFFFFFF92FLL)
                            - ((v1 + 1393170451) & 0xACF5E567)))();
}

uint64_t sub_100137604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v13 = a6 + 1;
  v14 = (a6 + v7);
  *(_BYTE *)(v11 + (a5 + v9)) = *(_BYTE *)(v10 + v14) ^ *((_BYTE *)&unk_100215920 + (v14 & 0xF)) ^ byte_10023AD70[(v14 & 0xF) + 3] ^ byte_10023E8A0[(v14 & 0xF) + 2] ^ (25 * (v14 & 0xF)) ^ 0xB1;
  return ((uint64_t (*)(_BYTE *, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v12
                                                                                 + 8
                                                                                 * ((732 * (v13 + v7 < v8)) ^ (307 * (a7 ^ 0x614))))
                                                                     - 12))(byte_10023AD70, 1540, byte_10023E8A0, 25);
}

void sub_1001376A8()
{
  JUMPOUT(0x100137640);
}

uint64_t sub_1001376B8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned __int8 *v15;
  int v16;
  unint64_t v17;

  v15 = (unsigned __int8 *)(*(_QWORD *)(v11 + 8)
                          + (int)((v8 ^ 0x399)
                                + ((((v8 - 758) | 5) + 2 * a2 + 1965792619) ^ 0xED7CEBDB)
                                + ((2 * (((v8 - 758) | 5) + 2 * a2 + 1965792619)) & 0xDAF9D7B4)
                                + 310580150));
  v16 = *v15;
  v17 = ((((v15 ^ *(_DWORD *)(v10 + a1)) & 0x7FFFFFFF) * v9) ^ ((((v15 ^ *(_DWORD *)(v10 + a1)) & 0x7FFFFFFF)
                                                                             * v9) >> 16))
      * v9;
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((1390
                                        * (v16 != (*(_BYTE *)((v17 >> 24) + v12 + 3) ^ *(_BYTE *)(a8 + (v17 >> 24)) ^ *(_BYTE *)((v17 >> 24) + v13 + 2) ^ v17 ^ (BYTE3(v17) * v14)))) ^ v8))
                            - 8))();
}

uint64_t sub_100137784(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char *v16;
  char v17;
  unint64_t v18;

  v16 = (char *)(a7 + (v9 ^ 0x7B6BBF6F) - 2070658927 + (((a4 ^ 0x30F) - 153650308) & v11));
  v17 = *v16;
  LODWORD(v16) = ((v16 ^ v8) & 0x7FFFFFFF) * (v10 + a4 + 1630 - 1741);
  v18 = (v16 ^ (v16 >> 16)) * v10;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15
                                        + 8
                                        * ((199
                                          * ((char)(*(_BYTE *)(a8 + (v18 >> 24)) ^ v17 ^ *(_BYTE *)((v18 >> 24) + v12 + 3) ^ *(_BYTE *)((v18 >> 24) + v13 + 2) ^ v18 ^ (BYTE3(v18) * v14)) > 47)) ^ a4))
                            - 8))();
}

uint64_t sub_10013783C(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, int a5)
{
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (a5 ^ (244 * (a3 < 0x3Au)))) - (((a5 - 787) | 0x22u) ^ 0x67)))();
}

uint64_t sub_100137888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;

  v13 = (_BYTE *)(a7 + (int)((v8 ^ 0x775DD5FF) + ((a5 - 288) | 0x400) + ((2 * v8) & 0xEEBBABFC) - 2002639934));
  v14 = ((((v13 ^ v7) & 0x7FFFFFFF) * v9) ^ ((((v13 ^ v7) & 0x7FFFFFFF) * v9) >> 16)) * v9;
  return ((uint64_t (*)(void))(*(_QWORD *)(v12
                                        + 8
                                        * (((char)(v14 ^ *v13 ^ *(_BYTE *)(v10 + (v14 >> 24)) ^ *(_BYTE *)(v11 + (v14 >> 24) + 2) ^ *(_BYTE *)(a6 + (v14 >> 24)) ^ (-95 * BYTE3(v14))) < 48) | (a5 - 490)))
                            - 8))();
}

uint64_t sub_100137A4C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  return ((uint64_t (*)(void))(*(_QWORD *)(v14
                                        + 8
                                        * ((39
                                          * ((char)(a3 ^ a7 ^ *(_BYTE *)(a8 + v12) ^ (v12 * v13) ^ *(_BYTE *)(v11 + v8) ^ *(_BYTE *)(v10 + ((v9 - 1339) ^ 0x106) + v12)) > (char)(((v9 - 65) & 0x7B) - 27))) ^ (v9 - 1339)))
                            - ((v9 - 2077890389) & 0x7BDA11FE)
                            + 230))();
}

uint64_t sub_100137AE0@<X0>(unsigned __int8 a1@<W8>)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;

  if (a1 >= (((v2 + 5) & 0xDD) - 102))
    v5 = 1085724678;
  else
    v5 = v1 - 242230317;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (int)((226
                                               * (((((v2 - 1669636603) & 0x6384A7DD ^ 0x13193E11) + v3) & (((((v2 - 1669636603) & 0x6384A7DD) - 1362) ^ 0x3F492682u) + v5)) >> 31)) | (((v2 - 1669636603) & 0x6384A7DD) - 1480)))
                            - 4))();
}

uint64_t sub_100137CA4@<X0>(int a1@<W1>, uint64_t a2@<X5>, char a3@<W8>)
{
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE *v12;
  unint64_t v13;

  v11 = (16 * v6 - (((((v8 ^ 0x65) + 87) & 0xF6 ^ 0x76) + 32 * v6) & 0x40) + 107) ^ 0xAB | (a3 - 7);
  v12 = (_BYTE *)(v7 + a1 - 1164587208);
  v13 = ((((v12 ^ v3) & 0x7FFFFFFF) * v5) ^ ((((v12 ^ v3) & 0x7FFFFFFF) * v5) >> 16)) * v5;
  *v12 = v13 ^ (-95 * BYTE3(v13)) ^ *(_BYTE *)(v10 + (v13 >> 24)) ^ *(_BYTE *)((v13 >> 24) + v4 + 2) ^ *(_BYTE *)(a2 + (v13 >> 24)) ^ (v11 + (((v8 ^ 0x65) - 59) & 0x97) - ((2 * v11) & 0x22) + 12) ^ 0x11;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (v8 ^ 0x465 ^ (350 * ((a1 - 1164587207) > 0x13))))
                            - 8))();
}

uint64_t sub_100137DC4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1001376B8(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_100137DD0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((((a3 - 1207662886) & 0x47FB7BBF) + 215) * (LODWORD(STACK[0x680]) == 0)) ^ a3))
                            - (a3 + 118)
                            + 375))();
}

uint64_t sub_100137E14@<X0>(unsigned int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1706 * (*(_QWORD *)(v1 + 8) != 0)) ^ a1))
                            - (((a1 - 727) | 0x605) ^ 0x6C1)))();
}

uint64_t sub_100137E4C(void *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  free(a1);
  *(_QWORD *)(v1 + 8) = v3;
  *(_DWORD *)(v1 + 16) = 1990266993;
  *(_DWORD *)v1 = 65;
  STACK[0x8C0] = 1;
  v4 = (uint64_t (*)(void))((char *)*(&off_100260750
                                   + (((container_system_group_path_for_identifier(0, "systemgroup.com.apple.pisco.suinfo", &STACK[0x8C0]) != 0)* (((v2 - 1229) | 0x423) ^ 0x2B1)) ^ (v2 - 1362)))- ((v2 - 1261) ^ 0x1E8));
  return v4();
}

uint64_t sub_100137E6C()
{
  int v0;
  void *v1;
  int v2;
  uint64_t v3;
  int v4;

  v4 = v0;
  free(v1);
  LODWORD(STACK[0x874]) = 546355592;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((v4 == 0) | (8 * (v4 == 0)) | v2 ^ 0x9B))
                            - (((v2 ^ 0x9B) - 1943259665) & 0x73D3CEFD)
                            + 1733))();
}

uint64_t sub_100137E94()
{
  LODWORD(STACK[0x888]) = 173755484;
  return sub_100137EA4();
}

void sub_100137EA4()
{
  sub_1000B0D7C();
  JUMPOUT(0x100137ECCLL);
}

uint64_t sub_100137F90()
{
  int v0;
  unsigned int v1;
  char *v2;
  CFStringEncoding SystemEncoding;
  _BOOL4 v4;

  v1 = v0 & 0x9E96CF67;
  v2 = off_100277CE0;
  LOBYTE(STACK[0xB99]) = (((v0 & 0x67) + 74) ^ 0x97 ^ (((v0 & 0x67) + 29) | 0x20)) + *off_100277CE0;
  LOBYTE(STACK[0xB9A]) = v2[1] - 102;
  LOBYTE(STACK[0xB9B]) = v2[2] - 102;
  LOBYTE(STACK[0xB9C]) = v2[3] - 102;
  LOBYTE(STACK[0xB9D]) = v2[4] - 102;
  LOBYTE(STACK[0xB9E]) = v2[5] - 102;
  LOBYTE(STACK[0xB9F]) = v2[6] - 102;
  LOBYTE(STACK[0xBA0]) = v2[7] - 102;
  LOBYTE(STACK[0xBA1]) = v2[8] - 102;
  LOBYTE(STACK[0xBA2]) = v2[9] - 102;
  LOBYTE(STACK[0xBA3]) = v2[10] - 102;
  LOBYTE(STACK[0xBA4]) = v2[11] - 102;
  LOBYTE(STACK[0xBA5]) = v2[12] - 102;
  LOBYTE(STACK[0xBA6]) = v2[13] - 102;
  LOBYTE(STACK[0xBA7]) = v2[14] - 102;
  LOBYTE(STACK[0xBA8]) = v2[15] - 102;
  LOBYTE(STACK[0xBA9]) = v2[16] - 102;
  LOBYTE(STACK[0xBAA]) = v2[17] - 102;
  LOBYTE(STACK[0xBAB]) = v2[18] - 102;
  LOBYTE(STACK[0xBAC]) = v2[19] - 102;
  LOBYTE(STACK[0xBAD]) = v2[20] - 102;
  LOBYTE(STACK[0xBAE]) = v2[21] - 102;
  LOBYTE(STACK[0xBAF]) = off_100277CE0[22] - 102;
  SystemEncoding = CFStringGetSystemEncoding();
  v4 = CFStringCreateWithCString(0, (const char *)&STACK[0xB99], SystemEncoding) != 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + (int)((1428 * v4) ^ v1)) - 12))();
}

uint64_t sub_100138114(uint64_t a1)
{
  int v1;
  _BOOL4 v2;

  v2 = MGCopyAnswer(a1, 0) != 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((2023 * v2) ^ v1)) - 12))();
}

uint64_t sub_100138148()
{
  int v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  STACK[0x668] = v1;
  STACK[0x8A0] += 64;
  v3 = STACK[0x8E0];
  STACK[0x640] = STACK[0x8E0];
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((2 * (v3 != 0)) | (4 * (v3 != 0))) ^ (v0 + 627))) - 8))();
}

uint64_t sub_1001381A8(const void *a1)
{
  unint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  CFTypeID v5;
  uint64_t v6;
  unint64_t v7;
  CFTypeID TypeID;
  _BOOL4 v9;

  STACK[0x660] = v1;
  STACK[0x680] = (unint64_t)&STACK[0xBB0] + v1;
  v4 = -16
     * (((((&STACK[0xBB0] + v1) ^ (v2 + 29)) ^ 2)
       + 2 * (&STACK[0xBB0] + v1)
       + 1) & 2)
     - 0x844BD49333D7290;
  STACK[0x688] = (v4 ^ 0x32CC2959313DBF0ELL) + 0x7FBDDF3BBFDADDC0 + (~(2 * v4) & 0x8A66854D998400E0);
  v5 = CFGetTypeID(a1);
  v6 = v5 ^ 0x6D5FFF76E5FF7FA7;
  v7 = (2 * v5) & 0xDABFFEEDCBFEFF4ELL;
  TypeID = CFStringGetTypeID();
  v9 = v6 + (TypeID ^ 0x800D880480648A12) + v7 - ((TypeID << ((v2 - 29) ^ 0xECu)) & 0xFFE4EFF6FF36EBDALL) + 1 == ((v2 - 72273555) & 0x7D318C9B ^ 0xED6D877B66640DA9);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((2 * v9) | (8 * v9)) ^ (v2 + 2028126237))) - 12))();
}

uint64_t sub_100138310()
{
  const __CFString *v0;
  unsigned int v1;
  uint64_t v2;
  CFIndex Length;
  void *v4;

  Length = CFStringGetLength(v0);
  v4 = malloc_type_malloc(((Length << (v1 - 9 + 2 * (v1 ^ 0xF3) + 55)) & 0xDBFFC6DFBDFDFEDCLL)+ (Length ^ 0x6DFFE36FDEFEFF6ELL)- 0x6DFFE36FDEFEFF6DLL, 0x9EBEB066uLL);
  STACK[0x7E0] = (unint64_t)v4;
  return ((uint64_t (*)(const __CFString *))(*(_QWORD *)(v2 + 8 * ((585 * (v4 != 0)) ^ v1)) - 8))(v0);
}

uint64_t sub_1001383D8(const __CFString *a1)
{
  char *v1;
  CFIndex v2;
  int v3;
  uint64_t v4;
  char *v5;
  CFStringEncoding SystemEncoding;
  Boolean CString;
  _BOOL4 v9;

  v5 = v1;
  SystemEncoding = CFStringGetSystemEncoding();
  STACK[0x458] = (unint64_t)a1;
  CString = CFStringGetCString(a1, v5, v2, SystemEncoding);
  v9 = (((((v3 - 99) & 0xB6) - 94) & (2 * CString)) + (CString ^ 0xDB)) != 219;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((v9 | (4 * v9)) ^ v3)) - 4))();
}

uint64_t sub_100138454()
{
  int v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  _BOOL4 v4;

  v3 = (((v0 + 553713811) << (v1 + 65)) & 0xFFD3A2FE) + ((v0 + 553713811) ^ 0xFFE9D17F);
  LODWORD(STACK[0x8CC]) = v3 + 1991720670;
  v4 = malloc_type_malloc((v1 ^ 0x24B) + 1452790 + v3, 0x18BA6C9CuLL) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1992 * v4) ^ v1)) - 4))();
}

uint64_t sub_100138508()
{
  int v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((*(_DWORD *)(STACK[0x8E0] + 16) >= ((((v0 - 1453) | 0x201) - 329199750) & 0x139F2FFF ^ (v1 + 416)))
                                * ((((v0 - 1453) | 0x201) - 134) ^ 0x173)) ^ ((v0 - 1453) | 0x201))))();
}

void sub_100138510()
{
  const void *v0;

  CFRelease(v0);
  JUMPOUT(0x100138E00);
}

uint64_t sub_100138524()
{
  const void *v0;
  unsigned int v1;
  uint64_t v2;
  CFTypeID v3;
  unint64_t v4;
  unint64_t v5;
  CFTypeID TypeID;

  v3 = CFGetTypeID(v0);
  v4 = v3 ^ 0xFF16FFBAEFFA7749;
  v5 = (2 * v3) & 0xFE2DFF75DFF4EE92;
  TypeID = CFDataGetTypeID();
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((1000
                                          * (v4
                                           + (TypeID ^ 0x2C0210A20081520)
                                           + v5
                                           - (((v1 + 1632163538) & 0x9EB723F7 ^ 0xFA7FBDEBBFEFD508) & (2 * TypeID)) != 0x1D720C510028C69)) ^ v1))
                            - 4))();
}

uint64_t sub_1001385D8()
{
  const void *v0;
  int v1;
  uint64_t v2;
  CFTypeID v3;
  uint64_t v4;
  unint64_t v5;
  CFTypeID TypeID;

  v3 = CFGetTypeID(v0);
  v4 = v3 ^ 0x491FBF3EF7FF7FE5;
  v5 = (2 * v3) & 0x923F7E7DEFFEFFCALL;
  TypeID = CFNumberGetTypeID();
  return ((uint64_t (*)(const void *))(*(_QWORD *)(v2
                                                           + 8
                                                           * ((797
                                                             * (v4
                                                              + (TypeID ^ 0x1E20292541070804)
                                                              + v5
                                                              - ((2 * TypeID) & 0xC3BFADB57DF1EFF6)
                                                              + 1 == ((v1 - 1891809565) & 0xF7DFFE6F ^ 0x673FE864BE1BC1E0))) ^ v1))
                                               - 4))(v0);
}

uint64_t sub_1001386A0(const __CFNumber *a1)
{
  char v1;
  int v2;
  uint64_t v3;
  Boolean Value;

  STACK[0x458] = (unint64_t)a1;
  Value = CFNumberGetValue(a1, kCFNumberSInt64Type, &STACK[0x6D0]);
  return ((uint64_t (*)(unint64_t))(*(_QWORD *)(v3
                                                               + 8
                                                               * ((119
                                                                 * ((((2 * Value) & 0xBF)
                                                                                    + (Value ^ 0x5F)) != ((v2 ^ (v1 - 38)) ^ 0x55))) ^ v2))
                                                   - 4))(STACK[0x458]);
}

uint64_t sub_1001386FC()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  void *v4;

  LODWORD(STACK[0x8CC]) = v0 + 8;
  v4 = malloc_type_malloc(8uLL, 0xD29E14C9uLL);
  return ((uint64_t (*)(unint64_t))(*(_QWORD *)(v3 + 8 * ((944 * (v4 != 0)) ^ v2))
                                                   - ((((v2 - 1757585853) & 0xEFDFE70F) - v1 - 1263) ^ 0x13CLL)))(STACK[0x458]);
}

uint64_t sub_10013876C()
{
  _BYTE *v0;
  int v1;
  uint64_t v2;
  int v3;

  *v0 = (HIBYTE(STACK[0x6D0]) - ((STACK[0x6D0] >> 55) & 0x90) + 72) ^ (((v1 + 70) ^ 0x60) + 42);
  v0[1] = (HIWORD(STACK[0x6D0]) - ((STACK[0x6D0] >> 47) & 0xE4) - 14) ^ 0xF2;
  v0[2] = (((unsigned __int16)WORD2(STACK[0x6D0]) >> 8) - ((STACK[0x6D0] >> 39) & 0x5A) - 83) ^ 0xAD;
  v0[3] = (HIDWORD(STACK[0x6D0]) - ((STACK[0x6D0] >> 31) & 0xE4) - 14) ^ 0xF2;
  v0[4] = (((HIBYTE(LODWORD(STACK[0x6D0])) - ((LODWORD(STACK[0x6D0]) >> 23) & 0xF6) - 125) ^ 5) - 8) ^ 0x7E;
  v0[5] = (HIWORD(LODWORD(STACK[0x6D0])) - ((LODWORD(STACK[0x6D0]) >> 15) & 0x56) - 85) ^ 0xAB;
  v0[6] = (BYTE1(LODWORD(STACK[0x6D0])) - ((LODWORD(STACK[0x6D0]) >> 7) & 0x1E) + 15) ^ 0xF;
  v0[7] = (LOBYTE(STACK[0x6D0]) - ((2 * LOBYTE(STACK[0x6D0])) & 0xB2) + 89) ^ 0x59;
  v3 = malloc_type_malloc(8uLL, 0xDD79556CuLL) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((32 * v3) | (v3 << 6)) ^ v1)) - 8))();
}

uint64_t sub_1001388E0()
{
  uint64_t v0;
  _BYTE *v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unint64_t v7;

  v5 = 3 * (v3 ^ (v2 + 208));
  v6 = 1755343967
     * ((*(_DWORD *)(qword_1002789B8 + (dword_100278BC0 & 0xFFFFFFFFB2A98008)) ^ v1) & 0x7FFFFFFF);
  v7 = 1755343967 * (v6 ^ HIWORD(v6));
  *v1 = byte_10023BBC0[v7 >> 24] ^ *(_BYTE *)((v5 - 282) + v0 + 0x3F22FA18022DAF9DLL - 0x3F22FA18022DAFBBLL) ^ byte_100217DB0[(v7 >> 24) + 3] ^ byte_100229550[(v7 >> 24) + 2] ^ v7 ^ (13 * BYTE3(v7));
  return ((uint64_t (*)(char *, _BYTE *, uint64_t, unint64_t))(*(_QWORD *)(v4 + 8 * (v5 ^ 0x535)) - 8))(&aHAwAwAwAwAwAwA[784], byte_100229550, 13, 0xAABDF864E597DC21);
}

void sub_100138A18()
{
  JUMPOUT(0x100138990);
}

uint64_t sub_100138A28()
{
  const __CFData *v0;
  int v1;
  uint64_t v2;
  int Length;
  unsigned int v4;
  int v5;

  Length = CFDataGetLength(v0);
  v4 = (((v1 - 474) ^ 0x7866B0A3 ^ ((v1 + 34159637) | 0x85140408)) & (2
                                                                    * (Length - ((2 * Length) & 0x60EE6068) - 1334366156)) ^ 0x606A6028)
     + ((Length - ((2 * Length) & 0x60EE6068) - 1334366156) ^ 0x4FCAC969);
  LODWORD(STACK[0x8CC]) = v4 + 1994594048;
  v5 = malloc_type_malloc(v4 + 4327075, 0x8DF370BBuLL) != 0;
  return ((uint64_t (*)(const __CFData *))(*(_QWORD *)(v2 + 8 * ((32 * v5) | (v5 << 7) | (v1 - 474))) - 8))(v0);
}

uint64_t sub_100138AFC(const __CFData *a1)
{
  unsigned int v1;
  int v2;
  uint64_t v3;
  UInt8 *v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  _BOOL4 v8;
  CFRange v10;

  v7 = (_QWORD *)(STACK[0x688] + STACK[0x680] - 0x45354B2BBDDA103ELL);
  v10.length = (v3 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v3 < v1) << 32)) - 1990266973;
  *v7 = 0;
  v7[1] = v10.length;
  STACK[0x458] = (unint64_t)a1;
  v10.location = 0;
  CFDataGetBytes(a1, v10, v4);
  v8 = malloc_type_malloc(((v2 - 1045) ^ 0x420693u) + v5, 0xE2457E5FuLL) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((196 * v8) ^ v2)) - 12))();
}

uint64_t sub_100138B94()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((485 * ((v1 << 32) + v2 + (v0 ^ 0x475u) + 1155131492 != 3145398513)) ^ v0))
                            - 12))();
}

void sub_100138C10(int a1@<W8>)
{
  LODWORD(STACK[0xAB0]) = a1;
  JUMPOUT(0x100138C3CLL);
}

uint64_t sub_100138C44@<X0>(int a1@<W8>)
{
  __int16 v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((677 * ((unsigned __int16)(v1 ^ ((a1 ^ 0x59B) + 870)) > 1u)) ^ v2))
                            - (a1 | 0x20Cu)
                            + 1729))();
}

uint64_t sub_100138C90()
{
  int v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(*(_QWORD *)(v3
                                     + 8
                                     * ((211
                                       * (((unsigned __int16)((v0 + 916) ^ v1 ^ 0x2F) ^ ((v0 ^ 0x797) + 2145054745))
                                        + ((2 * ((v0 + 916) ^ v1 ^ 0x2F)) & 0x1EDCC) == 2145056486)) ^ v0))
                         - 12);
  STACK[0x608] = v2;
  return v4();
}

uint64_t sub_100138D10(void *a1)
{
  int v1;

  free(a1);
  return ((uint64_t (*)(unint64_t))((char *)*(&off_100260750
                                                             + ((1291 * (LODWORD(STACK[0x6E4]) == 0)) ^ (v1 - 1558)))
                                                   - ((v1 - 134364910) & 0x8F1F7E2A ^ 0x871D460ELL)))(STACK[0x458]);
}

void sub_100138DA0(const void *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v3 = STACK[0x640];
  *(_DWORD *)(v3 + 16) = STACK[0x8CC];
  *(_QWORD *)(v3 + 8) = v2;
  STACK[0x8A0] = v1;
  CFRelease(a1);
  JUMPOUT(0x100138DE8);
}

uint64_t sub_100138E58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W8>)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6
                                                                                 + 8
                                                                                 * (((10 * (v4 ^ 0x14B) + 831)
                                                                                   * (a4 == v5 + 41)) ^ v4))
                                                                     - 8))(a1, a2, a3, 4294924389);
}

uint64_t sub_100138E90()
{
  unsigned int v0;
  _BOOL4 v1;

  v1 = malloc_type_malloc(0x14uLL, 0xAACB7BF8uLL) == 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((1322 * ((((v0 + 101) ^ v1) & 1) == 0)) ^ v0)) - v0 + 371))();
}

uint64_t sub_100138EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;
  uint64_t v9;

  LODWORD(STACK[0x680]) = v7;
  v9 = (int)((((v8 + 1246443855) & 0xB5B4C7FE) - 1297515502) & dword_100278BC0);
  LODWORD(STACK[0x688]) = -1614807042;
  return sub_1001376B8(v9, 1164587208, a3, a4, a5, (uint64_t)byte_10023D5F0, a7, (uint64_t)byte_10023BBC0);
}

uint64_t sub_100138F84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W8>)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6
                                                                                 + 8
                                                                                 * (((a4 == ((v4 - 1033284508) & 0x3D96AEFF ^ (v5 + 1099)))
                                                                                   * (v4 + 1497)) ^ v4))
                                                                     - 8))(a1, a2, a3, 4294924389);
}

uint64_t sub_100138FCC()
{
  unsigned int v0;
  BOOL v1;

  v1 = malloc_type_malloc(0x19uLL, 0xFD034588uLL) == 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((367 * ((v1 ^ (v0 + 42)) & 1)) ^ v0)) - 4))();
}

uint64_t sub_100139038(_BYTE *a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  char *v5;
  char v6;
  int v7;
  unint64_t v8;
  unint64_t v9;

  v5 = *(char **)(v1 + 8);
  v6 = *v5;
  v7 = *(_DWORD *)(qword_1002789B8 + (dword_100278BC0 & 0xFFFFFFFFB2A98008));
  v8 = ((1755343967 * ((v5 ^ v7) & 0x7FFFFFFF)) ^ ((1755343967 * ((v5 ^ v7) & 0x7FFFFFFF)) >> 16))
     * (((v2 - 663) | 0x401) ^ 0x68A0681E);
  v9 = 1755343967
     * ((1755343967 * ((a1 ^ v7) & 0x7FFFFFFF)) ^ ((1755343967 * ((a1 ^ v7) & 0x7FFFFFFF)) >> 16));
  *a1 = byte_100216B40[v8 >> 24] ^ v6 ^ byte_100219160[(v8 >> 24) + 2] ^ byte_10023D5F0[v8 >> 24] ^ byte_100216B40[v9 >> 24] ^ byte_100219160[(v9 >> 24) + 2] ^ byte_10023D5F0[v9 >> 24] ^ v8 ^ v9 ^ (-95 * BYTE3(v8)) ^ (-95 * BYTE3(v9));
  return (*(uint64_t (**)(void))(v3 + 8 * v2))();
}

void sub_100139154()
{
  JUMPOUT(0x100139098);
}

uint64_t sub_10013915C()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (v0 ^ (23 * (v1 != 0))))
                            - (v0 ^ 0x8F5F3728)
                            - ((v0 - 308165010) & 0x125E35FF)
                            + 2405381136))();
}

uint64_t sub_1001391B0()
{
  int v0;
  void *v1;
  int v2;
  int v3;
  int v4;

  v4 = (v0 + 1889586423) | 0x180;
  free(v1);
  LODWORD(STACK[0x874]) = v3;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((v2 == 0) | (8 * (v2 == 0)) | v4))
                            - ((v4 - 1943259665) & 0x73D3CEFD)
                            + 1733))();
}

uint64_t sub_1001391D8@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8 * (((((a1 + 380784414) & 0x294DB6FF) - 308) * (*(_QWORD *)(v1 + 8) != 0)) ^ a1)))();
}

void sub_100139214(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  free(a1);
  *(_QWORD *)(v1 + 8) = v2;
  JUMPOUT(0x100139224);
}

uint64_t sub_10013929C()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((STACK[0x8C0] == 1) * (((v0 - 581737750) ^ 0x22AC9372) + v0 - 61)) ^ v0))
                            - 12))();
}

uint64_t sub_1001392E0@<X0>(int a1@<W8>)
{
  const char *v1;
  int v2;
  uint64_t v3;
  size_t v4;
  _BOOL4 v5;

  v3 = (v2 - a1 + 1920470123) & 0xB0348776;
  v4 = strlen(v1);
  v5 = malloc_type_malloc(((v3 ^ 0x3EBF17FFD7F9F57ELL) & (2 * v4)) + (v4 ^ 0x9F5F8BFFEBFCF994) + 0x60A074001403068ALL, 0xAE21939FuLL) == 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((965 * v5) ^ v2)) - 12))();
}

void sub_100139388()
{
  void *v0;

  free(v0);
  JUMPOUT(0x1001393ACLL);
}

uint64_t sub_1001393EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4
                                                                                 + 8
                                                                                 * ((2016
                                                                                   * (*(unsigned __int8 *)STACK[0x6B8] == (((v3 + 120) | 2) - 89))) ^ v3))
                                                                     - (v3 + 1261)
                                                                     + 1733))(a1, a2, a3, 4294924391);
}

uint64_t sub_100139430()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  int v4;

  v3 = STACK[0x8A0];
  v4 = 230600693 * (((v2 - 192) & 0xB0AAFE3F | ~((v2 - 192) | 0xB0AAFE3F)) ^ 0x9D6987EB);
  *(_DWORD *)(v2 - 164) = LODWORD(STACK[0x78C]) - v4 - 127064485;
  *(_DWORD *)(v2 - 192) = (v1 - 414) ^ v4;
  *(_QWORD *)(v2 - 184) = (char *)&STACK[0xBB0] + v3;
  *(_QWORD *)(v2 - 176) = v0;
  sub_1001E0108((_DWORD *)(v2 - 192));
  return ((uint64_t (*)(void))*(&off_100260750 + ((59 * (*(_DWORD *)(v2 - 168) != 0)) ^ v1)))();
}

uint64_t sub_100139508()
{
  int v0;
  unint64_t v1;
  int v2;
  uint64_t v3;

  STACK[0x8A0] = v1;
  STACK[0x680] = 0;
  LODWORD(STACK[0x660]) = v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8
                                             * ((1852 * ((((v0 - 1686) | 0x1C0) ^ 0x1F7) == -42903)) ^ (v0 - 1423)))
                            - 4))();
}

uint64_t sub_100139518()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * ((278 * (v0 + 1 == v2 + 16)) ^ v1)))();
}

uint64_t sub_1001395A0@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v4 = (((v1 >> 4) ^ 0xF8246007)
      - 2 * ((a1 - 641 + ((a1 - 1016708466) & 0x3C99BFDD) - 2213) & (v1 >> 4) ^ ((v1 >> 4) ^ 0xF8246007) & 0x46690C1E)
      + 1181289494) ^ 0x46690C16 | v1 ^ v2;
  v5 = ((((int)(v4 - ((2 * v4) & 0x45D44A14) - 1561713398) >> 2) ^ 0xE8BA8942)
      - ((2 * (((int)(v4 - ((2 * v4) & 0x45D44A14) - 1561713398) >> 2) ^ 0xE8BA8942)) & 0x957412EE)
      - 893777545) ^ 0xCABA0977 | (v4 - ((2 * v4) & 0x45D44A14) - 1561713398) ^ 0xA2EA250A;
  return (*(uint64_t (**)(void))(v3 + 8 * ((469 * ((v5 & 1 | ((((v5 + 2) >> 1) & 1) == 0)) == 0)) ^ a1)))();
}

uint64_t sub_100139674@<X0>(unint64_t a1@<X0>, int a2@<W8>)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  STACK[0x428] = v2;
  STACK[0x430] = a1;
  STACK[0x438] = v3;
  v6 = (a2 + 1102579597);
  v7 = ((2 * (_QWORD)&STACK[0x7E8]) & 0xC5DFFDFFD6FBDFF8)
     - 0x62EFFEFFEB7DEFFFLL
     + ((unint64_t)&STACK[0x7E8] ^ 0x62EFFEFFAAC5E384 ^ v6);
  STACK[0x450] = ((v7 % 0x25) ^ 0x5FBFABBFFD27DFBBLL)
               - 0x5FBFABBFFD27DFABLL
               + ((2 * (v7 % 0x25)) & 0x76);
  v8 = STACK[0x688] + STACK[0x680] - 0x45354B2BBDDA103ELL;
  v9 = 1856021207 * ((v5 - 192) ^ 0xED14979B4E69D6FELL);
  LODWORD(STACK[0x44C]) = (v4 + 1860574894) & 0x9119DEEE;
  LODWORD(STACK[0x670]) = v4 - 1252392926;
  *(int32x4_t *)&STACK[0x560] = vdupq_n_s32(0xCE7A6DCD);
  *(int32x4_t *)&STACK[0x550] = vdupq_n_s32(0x2C3F9E5u);
  *(int32x4_t *)&STACK[0x540] = vdupq_n_s32(0x40A9A9BEu);
  *(int32x4_t *)&STACK[0x530] = vdupq_n_s32(0x3F565640u);
  v10 = 516615401
      * ((2 * ((v5 - 192) & 0x48D57A0D0CC69FA0) - (v5 - 192) - 0x48D57A0D0CC69FA4) ^ 0x3F960D89805A666ELL);
  LODWORD(STACK[0x680]) = -380625658;
  STACK[0x678] = STACK[0xAA8];
  STACK[0x688] = v8;
  STACK[0x440] = v8 + 16;
  STACK[0x5F0] = v9;
  STACK[0x470] = 694118461 - v9;
  STACK[0x498] = v10;
  STACK[0x468] = v10 + 419711402;
  *(int32x4_t *)&STACK[0x5E0] = vdupq_n_s32(0xF2AC030B);
  *(int32x4_t *)&STACK[0x5D0] = vdupq_n_s32(0x7FFFFFFEu);
  *(int32x4_t *)&STACK[0x5C0] = vdupq_n_s32(0x775A672Eu);
  *(int32x4_t *)&STACK[0x5B0] = vdupq_n_s32(0x6D29B7D4u);
  *(int32x4_t *)&STACK[0x5A0] = vdupq_n_s32(0xC96B2414);
  *(int32x4_t *)&STACK[0x590] = vdupq_n_s32(0xF2AC030A);
  *(int32x4_t *)&STACK[0x580] = vdupq_n_s32(0xE9501D06);
  *(int32x4_t *)&STACK[0x570] = vdupq_n_s32(0x904BAFB8);
  *(int32x4_t *)&STACK[0x520] = vdupq_n_s32(0xBA104401);
  *(int32x4_t *)&STACK[0x510] = vdupq_n_s32(0x4001019Fu);
  *(int32x4_t *)&STACK[0x500] = vdupq_n_s32(0x4D217929u);
  *(int32x4_t *)&STACK[0x4F0] = vdupq_n_s32(0xD13E67B2);
  *(int32x4_t *)&STACK[0x4E0] = vdupq_n_s32(0xE051628A);
  *(int32x4_t *)&STACK[0x4D0] = vdupq_n_s32(0x202C8C14u);
  *(int32x4_t *)&STACK[0x4C0] = vdupq_n_s32(0x9016460A);
  *(int32x4_t *)&STACK[0x4B0] = vdupq_n_s32(0x609E32D4u);
  *(int32x4_t *)&STACK[0x4A0] = vdupq_n_s32(0x4825D7DCu);
  *(int32x4_t *)&STACK[0x480] = vdupq_n_s32(0xC87FA3Fu);
  LODWORD(STACK[0x478]) = 2002413358;
  return sub_10010305C(-1102580827, 141, 1, 22, v6);
}

uint64_t sub_100139A74(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a2
                                        + 8
                                        * ((58
                                          * (v3 + 0x60A074007A7FD0F8 != ((v2 - 1509833819) & 0x59FE377F ^ 0x667CCBF7))) ^ v2))
                            - 8))();
}

uint64_t sub_100139B0C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;

  v11 = v2 < v4;
  *(_BYTE *)(v6 + v10 - 0xD05A22989016BA1) = *(_BYTE *)(v5 + v9 - 0x2964FBFC17A1BD6ALL);
  if (v11 == v7 - 0x4EE90E7D979C443CLL < (unint64_t)(v8 ^ 0x72Du) + a2)
    v11 = v7 - 0x4EE90E7D979C443CLL < v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((v11 * v3) ^ v8)) - 8))();
}

uint64_t sub_100139BA0()
{
  unint64_t v0;
  unint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  char v13;
  _BOOL4 v14;

  v11 = *(_DWORD *)(qword_1002789B8 + (dword_100278BC0 & 0xFFFFFFFFB2A98008)) ^ (v4 + v6 + 1554110436);
  v12 = 1755343967 * ((1755343967 * (v11 & 0x7FFFFFFF)) ^ ((1755343967 * (v11 & 0x7FFFFFFFu)) >> 16));
  v13 = byte_10023BBC0[v12 >> 24] ^ *(_BYTE *)(v9 + v3 + (v7 ^ 0x8625374A6402DB87)) ^ byte_100217DB0[(v12 >> 24) + 3] ^ byte_100229550[(v12 >> 24) + 2] ^ v12 ^ (13 * BYTE3(v12));
  if (v1 < v0 != v5 - 0x69811A54A982107 < v0)
    v14 = v1 < v0;
  else
    v14 = v5 - 0x69811A54A982107 < v1;
  *(_BYTE *)(v4 + v6 - 0x6018E046A35E281CLL) = v13;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((v14 * v2) ^ v8)) - 12))();
}

uint64_t sub_100139CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  LODWORD(STACK[0x6E4]) = a6;
  return sub_100138C90();
}

uint64_t sub_100139CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BOOL4 v9;
  unint64_t v10;
  int v11;
  _BOOL4 v12;

  v7 = (STACK[0x680] & 0x15754) + 320832379 + (((v3 ^ 0x658) + 200123613) ^ v5);
  v8 = v6 + v4 + 653925208;
  v9 = v8 < 0x650711C4;
  v10 = (v7 + 1174004454) | ((unint64_t)(v7 < v3 + 520957517) << 32);
  v11 = v9 ^ (v10 < 0x650711C4);
  v12 = v10 <= v8;
  if (!v11)
    v9 = v12;
  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * ((14 * v9) ^ v3)) - 4))();
}

uint64_t sub_100139DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  LODWORD(STACK[0x670]) = STACK[0x890];
  return sub_1000D4E30(4294953326, a7 - 0x3749BB5A557E7DA5, 105, a7 - 1935219079, a5, 4864, a7, 22062);
}

uint64_t sub_100139E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  int v9;

  LODWORD(STACK[0x670]) = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(a7
                                                                                 + 8
                                                                                 * ((966
                                                                                   * ((v7 ^ 0x737E9E7F65F3FFA5)
                                                                                    - 0x737E9E7F3749FFE3
                                                                                    + ((v7 << ((2 * (v9 + 23)) ^ 0xC9u)) & 0xCBE7FF4ALL) == 782892994)) ^ (v9 - 233)))
                                                                     - 12))(a1, a2, STACK[0x628]);
}

uint64_t sub_100139F38@<X0>(uint64_t a1@<X2>, uint64_t a2@<X6>, int a3@<W8>)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;

  v10 = v4 < v3;
  *(_BYTE *)(v9 + ((a3 - 1358) ^ 0x907AF2DF57432EEFLL) + v7) = (*(_BYTE *)(v6 + a1 - 0x1634CF424AD9C6FBLL) ^ 0x3F)
                                                                           + 2
                                                                           * (*(_BYTE *)(v6 + a1 - 0x1634CF424AD9C6FBLL) & 0x3F)
                                                                           - 3;
  if (v10 == v8 - 0x25D4F355F8D0751DLL < v3)
    v10 = v8 - 0x25D4F355F8D0751DLL < v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(a2 + 8 * ((!v10 * v5) ^ a3)) - 12))();
}

uint64_t sub_100139FFC()
{
  unsigned __int8 v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2 + 8 * ((120 * (v0 != (v1 + ((v1 + 61) & 0xDD) + 79))) ^ v1)))();
}

void sub_10013A040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v11 = (v9 - 277) | 0x102;
  v12 = ((v9 - 21) | 2) - 63;
  v14 = *(_DWORD *)(v8 + 64);
  v13 = *(_DWORD *)(v8 + 68);
  *(_BYTE *)(v8 + 56) = (((_BYTE)v13 << v12) ^ 0xF0) + (~(2 * (((_BYTE)v13 << v12) ^ 0xF0)) | 0x9F) - 78;
  *(_BYTE *)(v8 + 57) = (v13 >> 5) ^ 0x22;
  *(_BYTE *)(v8 + 58) = (v13 >> 13) ^ 0x9B;
  *(_BYTE *)(v8 + 59) = (v13 >> 21) ^ 0xA1;
  HIDWORD(v15) = v14 + 468426922;
  LODWORD(v15) = v13 ^ 0x60000000;
  *(_BYTE *)(v8 + 60) = ((v15 >> 29) - ((2 * (v15 >> 29)) & 0xD6) - 21) ^ 0x5A;
  *(_BYTE *)(v8 + 61) = ((~((v14 - 605314902) >> 4) | 0xF3)
                       + ((v14 - 605314902) >> 5)
                       + 7) ^ 0xB7;
  *(_BYTE *)(v8 + 62) = (((v14 - 605314902) >> 13) - (((v14 - 605314902) >> 12) & 0xA8) + 84) ^ 0xE5;
  *(_BYTE *)(v8 + 63) = (((v14 - 605314902) >> 21) - (((v14 - 605314902) >> 20) & 0x12) + 9) ^ 0xB8;
  STACK[0x840] = (((v11 - 296) | 0x20u) ^ 0xFFFFFFFFFFFFFFC6) + *(_QWORD *)(v10 + 8 * ((v11 - 296) | 0x20));
  LODWORD(STACK[0x668]) = a8 ^ 0x556;
  LODWORD(STACK[0x670]) = (a8 ^ 0x556) + 1790221395;
  LODWORD(STACK[0x688]) = -514044794;
  LODWORD(STACK[0x680]) = 2042623983;
  LODWORD(STACK[0x678]) = -1076953617;
  JUMPOUT(0x10010F164);
}

uint64_t sub_10013A130()
{
  int v0;
  unsigned __int16 v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((v1 == (unsigned __int16)(5 * (v0 ^ 0x422) - 139))
                                          * (((2 * v0) ^ 0x95C) + 504)) ^ v0))
                            - 8))();
}

void sub_10013A170()
{
  JUMPOUT(0x10013A188);
}

uint64_t sub_10013A198()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((1019 * (dword_100277CEC == v1)) ^ v0))
                            - (11 * (v0 ^ 0x554u)
                             + v2)
                            + 1179))();
}

uint64_t sub_10013A1E4()
{
  int v0;
  int v1;
  kern_return_t v2;

  LODWORD(STACK[0x660]) = v1;
  v2 = IOMainPort(0, (mach_port_t *)&STACK[0xA28]);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((1196
                                        * (((82 * (v0 ^ 0x156) - 451158573) ^ v2) + ((2 * v2) & 0xCA37BF7E) == -451158081)) | v0))
                            - 8))();
}

uint64_t sub_10013A250()
{
  int v0;
  BOOL v1;

  v1 = IOServiceMatching((const char *)&STACK[0x15E1]) == 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((229 * ((v1 ^ (41 * (v0 ^ 0x5C) + 1)) & 1)) ^ v0))
                            - 8))();
}

uint64_t sub_10013A2A0(const __CFDictionary *a1)
{
  int v1;
  kern_return_t MatchingServices;

  MatchingServices = IOServiceGetMatchingServices(STACK[0xA28], a1, (io_iterator_t *)&STACK[0x6CC]);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((1612
                                        * (((7 * (v1 ^ 0x104) + 2129657258) & (2 * MatchingServices))
                                         + (MatchingServices ^ 0x3F77FFFB) == 1064828923)) ^ v1))
                            - ((4 * v1) ^ 0x548)))();
}

uint64_t sub_10013A318()
{
  int v0;
  uint64_t v1;
  io_object_t v2;

  v2 = IOIteratorNext(STACK[0x6CC]);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((((2 * v2) & 0x95EFBEDC) + (v2 ^ 0xCAF7DF6E) == -889725074)
                                          * ((v0 - 989109965) & 0x3AF49FB6 ^ 0x316)) ^ v0))
                            - 8))();
}

void sub_10013A37C()
{
  JUMPOUT(0x10013A410);
}

uint64_t sub_10013A384@<X0>(int a1@<W8>)
{
  int v1;
  kern_return_t v2;

  v2 = IOServiceOpen(a1 + 889725074, mach_task_self_, 0, (io_connect_t *)&STACK[0x6B4]);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (int)(((((2 * v2) & 0x32BE7EF4) + (v2 ^ 0x995F3F7A) == -1721811078)
                                             * (((v1 + 1607384009) & 0xA03147CD) - 315)) ^ v1))
                            - 12))();
}

uint64_t sub_10013A444@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 + 8 * ((1269 * (*(_DWORD *)(v10 + 3308) != v9 + (a7 | v7) - 847)) ^ v8))
                                                                                                - 4))(a1, a2, a3, a4, a5, a6, 4294924396);
}

uint64_t sub_10013A47C()
{
  int v0;
  int v1;
  _DWORD *v2;
  unsigned int v3;
  uint64_t v4;

  *v2 = v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((2 * v0) ^ 0x68D)
                                          * ((v3 | ((unint64_t)(v3 < 0x2090B988) << 32)) == 546355592)) ^ v0))
                            - 8))();
}

uint64_t sub_10013A524@<X0>(int a1@<W8>)
{
  _DWORD *v1;
  int v2;
  int v3;
  _BOOL4 v4;

  v1[501] = v3 - 546355592;
  STACK[0xAC8] = 2008;
  v4 = IOConnectCallStructMethod(a1 - 1197784504, 0x22u, v1, 0x7D8uLL, v1, &STACK[0xAC8]) == 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((v4 * (v2 + 159)) ^ v2)) - 4))();
}

uint64_t sub_10013A58C()
{
  uint64_t (*v0)(void);
  unint64_t v1;

  STACK[0x8A0] = v1;
  return v0();
}

uint64_t sub_10013A594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * ((167 * (a7 == ((LODWORD(STACK[0x690]) - 1706) ^ 0x23))) ^ (LODWORD(STACK[0x690]) - 350)))
                            - 4))();
}

void sub_10013A5D0()
{
  *(_BYTE *)(STACK[0x9C8] + (LODWORD(STACK[0x6F0]) - 542170979)) = 0x80;
  JUMPOUT(0x10013A624);
}

uint64_t sub_10013A69C()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((((v1 - 2006230721) | 0x31008050) + 1184113003) * (v0 == 0)) ^ (v1 - 546)))
                            - ((v1 - 1604) | 0x224u)
                            + 677))();
}

uint64_t sub_10013A6F0()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)((11 * (v0 ^ 0xB96BE023)) ^ 0xD2)) - 4))();
}

void sub_10013A7A0()
{
  JUMPOUT(0x10013A750);
}

uint64_t sub_10013A7A8()
{
  int v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;

  v9 = v2 < v1;
  *(_BYTE *)(v4 + v7 - 0x43A1922699E5887ALL) = *(_BYTE *)(v3 + v6 - 0x19354F63E159EE0DLL);
  if (v9 == v5 - 0x5B5F2A1360F1471BLL < v1)
    v9 = v5 - 0x5B5F2A1360F1471BLL < v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((19 * ((((v0 - 355) ^ v9) & 1) == 0)) ^ v0)) - 8))();
}

uint64_t sub_10013A844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * (((2 * (((a7 == 0) ^ (LOBYTE(STACK[0x690]) + 26)) & 1)) & 0xF7 | (8 * (((a7 == 0) ^ (LODWORD(STACK[0x690]) - 1914082534)) & 1))) ^ (LODWORD(STACK[0x690]) - 246)))
                            - 8))();
}

uint64_t sub_10013A880()
{
  int v0;
  uint64_t v1;
  int v2;

  v2 = STACK[0x874];
  STACK[0x680] = 0;
  LODWORD(STACK[0x660]) = v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8
                                             * ((1852 * ((((v0 - 1686) | 0x1C0) ^ 0x1F7) == -42903)) ^ (v0 - 1423)))
                            - 4))();
}

uint64_t sub_10013A894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4
                                                                                 + 8
                                                                                 * ((1699
                                                                                   * (*(_BYTE *)(STACK[0x6B8] + 2) == 1)) ^ (v3 - 1914082535) & 0x72168FF9u))
                                                                     - ((((v3 - 1914082535) & 0x72168FF9) + 50) ^ 0x4DFu)
                                                                     + 1733))(a1, a2, a3, 4294924392);
}

uint64_t sub_10013A8F4()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((1033
                                * (*(unsigned __int8 *)(v1 + v2 - 546355592 + (v0 ^ 0x3E8u) - 505) == (((v0 - 82) | 0x20) ^ 0xE0))) ^ v0)))();
}

uint64_t sub_10013A944()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  _BOOL4 v5;

  v3 = 10 * (v0 ^ 0x1CA);
  v4 = v1 - 1119544050 + v3;
  if (v4 < 0xDDD5D886 != (int)v1 - 1119543554 < ((v3 - 174) ^ 0xDDD5D7BE) + ((v3 - 174) | 0xC8))
    v5 = (int)v1 - 1119543554 < ((v3 - 174) ^ 0xDDD5D7BE) + ((v3 - 174) | 0xC8);
  else
    v5 = (int)v1 - 1119543554 >= v4;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 8 * ((1516 * v5) ^ v3)) - 8))(1, v1);
}

uint64_t sub_10013A9E0@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  return (*(uint64_t (**)(void))(v6 + 8 * (((a1 & ~(a3 ^ (*(_BYTE *)(v5 + (a2 + a4)) == 0))) * v4) ^ a3)))();
}

void sub_10013AA10()
{
  JUMPOUT(0x10013A984);
}

uint64_t sub_10013AA18(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((a2 == 128) * (((v2 + 556) | 0x2C1) ^ 0x5CA)) ^ v2))
                            - ((v2 + 136864798) & 0xF7D79F0D ^ 0x504)))();
}

uint64_t sub_10013AA70()
{
  int v0;
  void *v1;
  void *v2;
  BOOL v3;
  int v4;

  v1 = malloc_type_malloc(0x10uLL, 0x4E5327F9uLL);
  STACK[0x7C0] = (unint64_t)v1;
  v2 = malloc_type_malloc(0x10uLL, 0x4EAEF4CEuLL);
  STACK[0x848] = (unint64_t)v2;
  if (v1)
    v3 = v2 == 0;
  else
    v3 = 1;
  v4 = v3;
  return ((uint64_t (*)(void))*(&off_100260750 + (((((v0 - 1164) ^ v4) & 1) == 0) | v0)))();
}

uint64_t sub_10013AAD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;

  v7 = ((2 * *(unsigned __int8 *)(v4 + 3)) & 0x5C) + (*(unsigned __int8 *)(v4 + 3) ^ 0xFFFFFF2E);
  v8 = v7 + 1953753600;
  v9 = v5 - v7;
  LODWORD(STACK[0x79C]) = v9 - 229;
  LODWORD(STACK[0x88C]) = v8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6
                                                                       + 8
                                                                       * ((458
                                                                         * (((v9 + 3) & 0xF)
                                                                          + ((((v3 | 0x5C) + 36) | 0x40C) ^ 0x2625E1CF)
                                                                          - ((2 * (v9 + 3)) & 8) != 640017603)) ^ (v3 | 0x5C))))(a1, a2, a3, 4294924393);
}

uint64_t sub_10013AB60(unint64_t a1, uint64_t a2, unint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v9;

  STACK[0x880] = a3;
  STACK[0x790] = a1;
  STACK[0x718] = v6 + 510;
  STACK[0x940] = v6 + 528;
  LODWORD(STACK[0x788]) = -289289327;
  STACK[0x680] = v5 + 4;
  v9 = v5 == -4 && v4 != ((v3 + 377) ^ 0x25B) + 1953753376;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((v9 * (48 * ((v3 + 377) ^ 0x25B) - 427)) ^ (v3 + 377))) - 12))();
}

uint64_t sub_10013AC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v11;

  v11 = a6 == (v7 ^ 0x6A2) + 1990265947 || v8 != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((v11 * ((v6 + v7 - 672) ^ (v6 - 496))) ^ v7)) - 12))();
}

uint64_t sub_10013AC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  STACK[0x660] = v7;
  LODWORD(STACK[0x670]) = v6;
  LODWORD(STACK[0x688]) = a1 - 1614625540;
  v8 = qword_1002789B8;
  v9 = dword_100278BC0 & 0xFFFFFFFFB2A98008;
  LODWORD(STACK[0x668]) = a6;
  STACK[0x678] = (a5 - a6);
  return sub_100135608(a1, (a6 + v6 - 1350088456), v8, v9, a5, 0x80621F8u, 0x3E8u, 0xFFFFFFFFD9DE3836);
}

uint64_t sub_10013ACF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8
                                                                                                  + 8 * ((((101 * (v7 ^ 0x6CF)) ^ (v7 - 610)) * ((_DWORD)v6 == 0)) ^ (v7 - 1385))))(a1, a2, a3, a4, a5, a6, v6);
}

uint64_t sub_10013AD30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;

  return (*(uint64_t (**)(void))(v7
                              + 8
                              * ((((LODWORD(STACK[0x690]) ^ 0x644) + 257 + 5 * (LODWORD(STACK[0x690]) ^ 0x644) + 847)
                                * (a7 == 0)) ^ (LODWORD(STACK[0x690]) - 1347))))();
}

uint64_t sub_10013AD6C()
{
  int v0;
  int v1;
  void *v2;

  v1 = LODWORD(STACK[0x89C]) - LODWORD(STACK[0xA50]);
  LODWORD(STACK[0x8EC]) = v1;
  v2 = malloc_type_malloc(v1 + ((v0 + 291) ^ 0xE278BB88), 0xB996B06BuLL);
  STACK[0x9B8] = (unint64_t)v2;
  return ((uint64_t (*)(void))*(&off_100260750 + ((1502 * (v2 != 0)) ^ v0)))();
}

uint64_t sub_10013ADD0()
{
  int v0;
  uint64_t v1;
  char v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (((8 * ((v2 & 3) == 0)) | (((v2 & 3) == 0) << 7)) ^ v0))
                            - (v0 - 693)
                            + 709))();
}

uint64_t sub_10013AE00()
{
  arc4random();
  return sub_10013AE2C();
}

uint64_t sub_10013AE2C@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 + v4 - 2056426868) = a1 ^ 8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1518 * (v5 + (v3 ^ 0x7B7u) - 125 - 1280 == v2 + 16)) ^ v3)) - 4))();
}

uint64_t sub_10013AE78(int a1, int a2)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((442
                                          * (v2 - a2 + ((a1 - 217228017) & 0xCF2A65F ^ 0x1F62B92Bu) >= ((a1 - 84317223) & 0x50697FF ^ 0x672u))) ^ a1))
                            - 12))();
}

uint64_t sub_10013AEFC(uint64_t a1, char a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v15;

  v12 = v10 + v9 + a8 + 1551;
  v15 = ((10 - a2) & 0xFu) < (v12 & 0xF) || v12 > ((a3 - 618) | 0x200) - 1537 || 1496755164 - v8 < v12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((225 * (((a3 + 39) ^ v15) & 1)) ^ a3)) - 8))();
}

uint64_t sub_10013AF6C(uint64_t a1, char a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BOOL4 v19;

  v10 = (v4 + v5) + v8;
  v11 = v10 - v7 - v6;
  v12 = (a2 + 5) & 0xF;
  v13 = v10 - ((_QWORD)&unk_100215920 + v12);
  v14 = -v12 - (_QWORD)byte_10023AD70 + v10 - ((a4 ^ 0x325u) + 1310);
  v15 = -v12 - (_QWORD)byte_10023E8A0 + v10 - 2;
  v19 = v13 > 0xF && v11 > 0xF && v14 + 1695 >= ((4 * (a4 ^ 0x325u)) ^ 0x600uLL) && v15 > 0xF;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((28 * v19) ^ a4)) - 12))();
}

uint64_t sub_10013B00C(void *a1)
{
  int v1;

  free(a1);
  STACK[0x6B8] = 0;
  return ((uint64_t (*)(void))*(&off_100260750
                             + (((*(_QWORD *)(STACK[0x8E0] + 8) == 0)
                               * (((474 * (v1 ^ 0x2D6) - 1046433721) & 0x3E5F4FBF) - 940)) ^ (474 * (v1 ^ 0x2D6)))))();
}

uint64_t sub_10013B06C(void *a1)
{
  uint64_t v1;

  free(a1);
  *(_QWORD *)(v1 + 8) = 0;
  *(_DWORD *)(v1 + 16) = 1990266973;
  STACK[0x8A0] -= 144;
  return ((uint64_t (*)(void))STACK[0x808])();
}

uint64_t sub_10013B09C()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((v0 - 1350) ^ (15 * (v1 == 0))))
                            - ((159 * (v0 ^ 0x6CBu)) ^ 0x3B2)))();
}

uint64_t sub_10013B0D8()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((986 * (v1 != (((v0 - 1214) | 0x80) ^ 0x28F))) ^ (v0 - 1349)))
                            - 8))();
}

uint64_t sub_10013B124@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;
  int v3;

  v2 = a1 - 729;
  v3 = *(unsigned __int8 *)STACK[0x648];
  LODWORD(STACK[0x690]) = v2 + v3 - 1223708077 - ((2 * v3) & 0xAE) - 221;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((((char)v3 < (char)(v2 + 35)) * ((v2 ^ 0x2B) - 198)) | v2)) - 12))();
}

uint64_t sub_10013B184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  char v7;
  uint64_t v8;
  int v9;
  unsigned __int8 v10;

  v9 = a7 - 224;
  v10 = a7 + 115;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8 * ((1364 * ((v10 ^ ((-(((~v9 | 0xFFFFFF00) + (((v10 | 0xB) ^ 0xA0) + v7)) ^ (~(_BYTE)v9 + ((v10 | 0xB) ^ 0xA0) + v7)) | ((~v9 | 0xFFFFFF00) + (((v10 | 0xB) ^ 0xA0) + v7))) >> 15)) & 1)) ^ (v9 + 956)))
                                                                                                - 12))(a1, a2, a3, a4, a5, a6, 4294925295);
}

uint64_t sub_10013B1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v6;
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8 * (int)(((v6 == ((v7 + 53) ^ 0xFB)) * ((v7 + 338709813) & 0xEBCFB35F ^ 0x349)) ^ v7))
                                                                                                - 4))(a1, a2, a3, a4, a5, a6, 4294925295);
}

uint64_t sub_10013B23C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  uint64_t v7;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7
                                                                                                  + 8 * ((1237 * (LODWORD(STACK[0x6A4]) - 1041036908 >= ((((a7 - 1319416676) & 0x4EA4B3FF) + 1234) ^ 0x68Eu))) ^ a7)))(a1, a2, a3, a4, a5, a6, 4294925278);
}

uint64_t sub_10013B2A0()
{
  int v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = STACK[0x958];
  v3 = ~STACK[0x648];
  STACK[0x688] = STACK[0x958];
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((v3 + v2 + ((v0 - 1595679438) & 0x5F1C23FF) - 785 < 0x10)
                                          * ((v0 + 46) ^ 0x1FB)) ^ v0))
                            - 4))();
}

uint64_t sub_10013B344@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v5 + a1 - 0x3A03A2395EF99A87) = *(_BYTE *)(v4 + v2 - 0x60D51A211B09A23ALL)
                                             - ((117 * (v3 ^ 0x2A) + 11) & (2
                                                                          * *(_BYTE *)(v4 + v2 - 0x60D51A211B09A23ALL)))
                                             + 53;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((4 * (v6 + 1 == v1 + 16)) | ((v6 + 1 == v1 + 16) << 8)) ^ v3))
                            - 4))();
}

uint64_t sub_10013B3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  _BOOL4 v13;
  _BOOL4 v14;

  v9 = ((*(unsigned __int8 *)(STACK[0x648] + 65) - ((2 * *(unsigned __int8 *)(STACK[0x648] + 65)) & 0xC8)) << 8) + 25600;
  v10 = ((v9 ^ 0x6400) - ((v9 << ((((v7 - 91) | 1) ^ 4) & 0x37)) & 0x2200) - 28286) ^ 0xFFFF9182 | (*(unsigned __int8 *)(STACK[0x648] + 66)
                                                                                                  - ((2 * *(unsigned __int8 *)(STACK[0x648] + 66)) & 0x96)
                                                                                                  + 2379) ^ 0x94B;
  LOWORD(v10) = v10 - ((2 * v10) & 0xF214) - 1782;
  LOWORD(STACK[0x872]) = v10;
  v11 = (unsigned __int16)v10 ^ 0xF90A;
  LODWORD(STACK[0x680]) = 2 * v11;
  v12 = 2 * v11 + ((unsigned __int16)v10 ^ 0x96CF06F5) - 1398789968;
  v13 = v12 < 0x4370286C;
  v14 = v12 > v6 + 90386944;
  if ((v6 + 90386944) < 0x4370286C != v13)
    v14 = v13;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8
                                                                                                  + 8 * ((1245 * !v14) ^ v7)))(a1, a2, a3, a4, a5, a6, 4294925278);
}

uint64_t sub_10013B4FC()
{
  size_t v0;
  int v1;
  void *v2;

  v2 = malloc_type_malloc(v0, 0xA23FB50CuLL);
  STACK[0x678] = (unint64_t)v2 + 0x4E36C53A99817805;
  STACK[0xA80] = (unint64_t)v2 + 0x4E36C53A99817805;
  return ((uint64_t (*)(void))*(&off_100260750 + (((v2 != 0) * (((v1 ^ 0xC2) + 1328) ^ 0x271)) ^ v1)))();
}

uint64_t sub_10013B560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;

  v5 = (v3 ^ 0xBB3B8FDFBF7FFFBELL) + 0x44C47020F7A1AE8BLL + ((2 * (int)v3) & 0x1FF7CLL) == ((v4 - 264) ^ 0xB721AEDCLL);
  return (*(uint64_t (**)(void))(a3 + 8 * (((4 * v5) | (v5 << 6)) ^ v4)))();
}

uint64_t sub_10013B600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X6>, unint64_t a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BOOL4 v9;

  v9 = v4 < a4;
  *(_BYTE *)(v6 + a1 - 0x2A2D4C3DC919F48ELL) = *(_BYTE *)(v5 + a3 - 0x4924F95ABA6A3D25)
                                             - ((2 * *(_BYTE *)(v5 + a3 - 0x4924F95ABA6A3D25)) & 0x34)
                                             - 102;
  if (v9 == v7 - 0x44250FD4E13FBBDBLL < a4)
    v9 = v7 - 0x44250FD4E13FBBDBLL < v4;
  return (*(uint64_t (**)(void))(a2 + 8 * (((4 * !v9) | (!v9 << 6)) ^ v8)))();
}

void sub_10013B6A0()
{
  unsigned int v0;
  uint64_t v1;

  STACK[0x9A8] = *(_QWORD *)(v1 + 8 * (int)(v0 - 1709)) + (v0 ^ 0xFFFFFFFFFFFFF935);
  JUMPOUT(0x10013B7A0);
}

uint64_t sub_10013B868(int a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;

  v9 = v6 + v5;
  if ((v9 + 1) > 0x40)
    v10 = v9 + 1;
  else
    v10 = 64;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((102 * (v7 - a1 - a4 + v10 < ((v4 + 166706765) & 0xF61045F7 ^ 0x4FC))) ^ v4))
                            - ((v4 + 166706765) ^ 0x9EFBEF7)))();
}

uint64_t sub_10013B90C(int a1, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6, int a7)
{
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v14;

  v10 = a4 + a1;
  v11 = (a5 ^ 0x43B ^ (v7 + 201)) + v10;
  if (v11 <= 0x40)
    v11 = a6;
  v12 = a7 + v11;
  v14 = v8 - v10 < v12 || v12 > 0xF;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((466 * (((a5 + 18) ^ v14) & 1)) ^ a5)) - 4))();
}

uint64_t sub_10013B970(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  v9 = (a1 + v5) + v7;
  v10 = v9 - v2;
  v11 = (unint64_t)(v9 - v2) < 0x10;
  v12 = v9 - v3 - 3;
  if (v12 < 0x10)
    v11 = 1;
  v13 = v9 - v4 - 2;
  if (v13 < 0x10)
    v11 = 1;
  v14 = (unint64_t)(v9 - v6) < 0x10 || v11;
  if (v10 < (((a2 - 72) | 0x40Du) ^ 0xFFFFFFFFFFFFF82DLL) + ((a2 + 312) | 0x170u))
    v14 = 1;
  if (v12 < 0x10)
    v14 = 1;
  if (v13 < 0x10)
    v14 = 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((1044 * ((v14 & 1) == 0)) | a2)) - 12))();
}

uint64_t sub_10013BA10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int8x16_t *v4;
  uint64_t v5;
  uint64_t v6;

  *(int8x16_t *)(v5 + (((v3 ^ 0x3B8u) + 4294967095) & (v1 + a1))) = veorq_s8(*v4, (int8x16_t)xmmword_1002158D0);
  return (*(uint64_t (**)(__n128))(v6 + 8 * ((193 * (((v2 + 1) & 0x1FFFFFFF0) == 16)) ^ v3)))((__n128)xmmword_1002158D0);
}

void sub_10013BA74()
{
  JUMPOUT(0x10013BA4CLL);
}

void sub_10013BA80()
{
  JUMPOUT(0x10013BA90);
}

uint64_t sub_10013BB00()
{
  unsigned int v0;
  unsigned int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;

  v6 = (*(_DWORD *)(v3 + 68) ^ v0) + v1 + v0 - (v4 & (2 * ((*(_DWORD *)(v3 + 68) ^ v0) + v1)));
  *(_DWORD *)(v3 + 68) = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * (int)((((v6 ^ v0) >= v1)
                                               * ((((v2 - 79) | 0x60) ^ 0xFFFFFF02) + ((v2 + 62) | 0x40))) ^ v2))
                            - 4))();
}

void sub_10013BB58()
{
  JUMPOUT(0x10013BB68);
}

uint64_t sub_10013BC14(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((((a2 - 413486843) < 0x38)
                                          * ((v2 - 155) ^ 0x5E ^ (v2 - 1851043592) & 0x6E54ACFF)) ^ (v2 - 1361)))
                            - 4))();
}

uint64_t sub_10013BC70()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)((980
                                               * ((char)((((v1 - 53) & 0xDE) - 104) ^ *(_BYTE *)(v0 + 96)) >= (char)(((((v1 - 53) & 0xDE) + 94) ^ 0xA6) + ((v1 - 53) & 0xDE) + 102))) ^ (v1 + 953554891) & 0xC729E3DE))
                            - 12))();
}

uint64_t sub_10013BCCC()
{
  unsigned __int8 v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((1949 * (v0 == ((v1 + 19) ^ 0xB2 ^ (2 * v1) ^ 0xBE))) ^ v1)))();
}

void sub_10013BD04()
{
  uint64_t v0;
  char v1;
  char v2;
  int v3;
  unsigned int v4;
  unint64_t v5;

  v2 = v1 ^ 0x17;
  v3 = *(_DWORD *)(v0 + 64);
  v4 = *(_DWORD *)(v0 + 68);
  *(_BYTE *)(v0 + 56) = (((v3 - 605314902) >> 21)
                       - (((v3 - 605314902) >> 21 << (v2 - 65)) & 0x56)
                       - 85) ^ 0x1A;
  *(_BYTE *)(v0 + 57) = (((v3 - 605314902) >> 13) - (((v3 - 605314902) >> 12) & 0xB6) - 37) ^ 0x6A;
  HIDWORD(v5) = v3 + 468426922;
  LODWORD(v5) = v4 ^ 0x60000000;
  *(_BYTE *)(v0 + 58) = (((v3 - 605314902) >> 5) - (((v3 - 605314902) >> 4) & 0xFC) - 2) ^ 0x4F;
  *(_BYTE *)(v0 + 59) = ((v5 >> 29) - ((2 * (v5 >> 29)) & 0x2A) - 107) ^ 0x24;
  *(_BYTE *)(v0 + 60) = (v4 >> 21) ^ 0xA1;
  *(_BYTE *)(v0 + 61) = (v4 >> 13) ^ 0x9B;
  *(_BYTE *)(v0 + 62) = (v4 >> 5) ^ 0x22;
  JUMPOUT(0x10013BDF4);
}

uint64_t sub_10013BE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v10 + 8 * (v7 ^ (1695 * ((v8 + v9 + 1782) < 0x40)))) - ((42 * (v7 ^ 0x2BE) - 850) | 6u) + 30))(a1, a2, a3, a4, a5, a6, a7, LODWORD(STACK[0x690]));
}

uint64_t sub_10013BE70()
{
  int v0;
  int v1;
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (((v0 - v1 - v2 + 96 >= (v3 ^ 0x375u)) * (v3 + 585)) ^ v3)) - 8))();
}

uint64_t sub_10013BEB4()
{
  unsigned int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8 * ((((((v1 ^ 0x1F4) - 476) ^ 0x667) - 1672) * (v0 < 0xF)) ^ v1 ^ 0x1F4))
                            - 8))();
}

uint64_t sub_10013BEF0@<X0>(int a1@<W1>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)&v6 = 0xB1B1B1B1B1B1B1B1;
  *((_QWORD *)&v6 + 1) = 0xB1B1B1B1B1B1B1B1;
  *(_OWORD *)(v2 + (a1 + a2)) = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((((v3 & 0x1FFFFFFF0) == 16) * (v4 ^ 7)) ^ (v4 - 720))) - 4))();
}

uint64_t sub_10013BF34(__n128 a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  *(__n128 *)(v1 + v4) = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (((v5 == 0) * v3) ^ v2)) - 4))();
}

uint64_t sub_10013BF5C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((((7 * (v2 ^ 0x35E)) ^ 0x2BC) * (v0 != v1)) ^ v2)) - 4))();
}

uint64_t sub_10013BF98()
{
  char v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((433 * ((v0 & 8) == (((v1 - 667) | 0x82u) ^ 0xAALL))) ^ v1))
                            - ((v1 - 1895265012) & 0x70F776FD ^ 0x6C5)))();
}

uint64_t sub_10013BFF8@<X0>(int a1@<W1>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  *(_QWORD *)(v2 + (v4 + a1 + a2)) = 0xB1B1B1B1B1B1B1B1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8 * (((v4 - (v3 & 0x1FFFFFFF8) == -8) * (((v5 - 39) | 0x228) - 423)) | v5))
                            - 4))();
}

uint64_t sub_10013C048@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  uint64_t v4;

  *(_BYTE *)(v1 + (v2 + a1)) = -79;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (int)((117 * ((v2 + 1 + a1) < 0x40)) ^ (v3 - 1058)))
                            - (v3 ^ 0x6C5)))();
}

void sub_10013C090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;

  STACK[0x840] = *(_QWORD *)(v9 + 8 * v8);
  LODWORD(STACK[0x668]) = a8 ^ 0x556;
  LODWORD(STACK[0x670]) = (a8 ^ 0x556) + 1790221395;
  LODWORD(STACK[0x688]) = -514044794;
  LODWORD(STACK[0x680]) = 2042623983;
  LODWORD(STACK[0x678]) = -1076953617;
  JUMPOUT(0x10010F164);
}

uint64_t sub_10013C0A8(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (a1 ^ (499 * (v1 == v2)))) - ((a1 - 197) ^ 0x48Eu) + 1153))();
}

void sub_10013C0D8()
{
  unsigned int v0;
  int v1;
  uint64_t v2;

  LODWORD(STACK[0x730]) = v1;
  STACK[0x840] = *(_QWORD *)(v2 + 8 * (int)v0) + (v0 ^ 0xFFFFFFFFFFFFFFF7);
  JUMPOUT(0x10013C100);
}

uint64_t sub_10013C1BC@<X0>(int a1@<W2>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(v8 + (v6 + a2)) = *(_BYTE *)(v7 + v2 - 526565179) ^ *(_BYTE *)(v3 + ((v2 - 526565179) & 0xF)) ^ *(_BYTE *)(((v2 - 526565179) & 0xF) + v4 + 3) ^ (((v2 - 59) & 0xF) * (((a1 ^ 0xB6) - 80) & 0x17 ^ 0x1A)) ^ *(_BYTE *)(((v2 - 526565179) & 0xF) + v5 + 2) ^ 0xB1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((1462 * ((v6 - 1496755164) < 0x40)) ^ a1 ^ 0x5B6))
                            - 12))();
}

void sub_10013C260()
{
  JUMPOUT(0x10013C1F0);
}

uint64_t sub_10013C268(int a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  unint64_t v12;
  int v13;
  _BOOL4 v14;

  v11 = v1 < v2;
  *(_BYTE *)(v3 + v4 + v8) = 0;
  v12 = v3 + v9 + (v5 & v6);
  v13 = v11 ^ (v12 < v2);
  v14 = v12 < v1;
  if (!v13)
    v11 = v14;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((!v11 * a1) ^ v7)) - 4))();
}

uint64_t sub_10013C2B8(int a1)
{
  return sub_10013C268(a1);
}

uint64_t sub_10013C2C0(void *a1)
{
  int v1;
  unsigned int v2;

  v2 = (v1 + 1779892486) & 0x95E8FFD6;
  free(a1);
  STACK[0x7B8] = 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + (int)(((STACK[0x6B8] != 0) * ((v2 ^ 0x160) + 1010)) ^ v2)) - 8))();
}

uint64_t sub_10013C318(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return (*(uint64_t (**)(void))(v6 + 8 * ((208 * (v4 + 8 != ((v5 - 1487276188) & 0x58A60EED ^ (v5 + 434 + a4)))) ^ v5)))();
}

uint64_t sub_10013C404(void *a1)
{
  unint64_t v1;
  int v2;
  unint64_t v3;
  int v4;
  unsigned int v5;
  int v6;

  STACK[0x8A0] = STACK[0x5D0];
  v5 = ((v2 ^ 0x19B) + 1581196815) & 0xA1C0DEDD;
  STACK[0x948] = v1;
  STACK[0x8F0] = STACK[0x678];
  free(a1);
  v6 = STACK[0x5F0];
  STACK[0x680] = v3;
  LODWORD(STACK[0x660]) = v4;
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (int)((1852 * (v6 == (((v5 - 1686) | 0x1C0) ^ 0x1F7))) ^ (v5 - 1423)))
                            - 4))();
}

uint64_t sub_10013C44C()
{
  int v0;
  int v1;
  uint64_t v2;

  LODWORD(STACK[0x72C]) = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((1404
                                          * ((LODWORD(STACK[0x82C]) | ((unint64_t)(LODWORD(STACK[0x82C]) < 0x1B53B28EuLL) << 32))
                                           - 332463153 != ((v1 + 2134350393) & 0xF2FEFFFD ^ ((v1 + 1368)
                                                                                           + 1974740772)))) ^ v1))
                            - 4))();
}

uint64_t sub_10013C4C0()
{
  return sub_10013C268(23);
}

uint64_t sub_10013C51C@<X0>(int a1@<W1>, int a2@<W8>)
{
  uint64_t v2;

  LODWORD(STACK[0x82C]) = a2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((972 * (((STACK[0x7B8] == 0) ^ ((a1 ^ 0x78) + 1)) & 1)) ^ a1 ^ 0x72369A5B))
                            - 12))();
}

uint64_t sub_10013C534()
{
  unsigned int v0;
  uint64_t v1;
  unint64_t v2;

  v2 = STACK[0x680];
  LODWORD(STACK[0x890]) = *(unsigned __int8 *)(STACK[0x680] + 1)
                        - (((v0 ^ 0xB8) - 176) & (2 * *(unsigned __int8 *)(STACK[0x680] + 1)))
                        + 1985812931;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((67 * (*(unsigned __int8 *)(v2 + 6) != ((v0 - 17) ^ 0x7D))) ^ v0))
                            - 8))();
}

uint64_t sub_10013C590()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((233
                                          * ((LODWORD(STACK[0x72C]) | ((unint64_t)(LODWORD(STACK[0x72C]) < 0x456D9175uLL) << 32)) != 1164808565)) ^ v0))
                            - 8))();
}

uint64_t sub_10013C610@<X0>(unint64_t a1@<X8>)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;

  v6 = v2 < v3;
  *((_BYTE *)&STACK[0xBB0] + v4 - 0x7874E3F8E112FF29) = 40;
  if (v6 == v4 - 0x7874E3F8AD22A4CALL < a1)
    v6 = v4 - 0x7874E3F8AD22A4CALL < v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((2 * !v6) | (8 * !v6)) ^ (v1 - 1110)))
                            - (v1 - 1368)
                            + 365))();
}

uint64_t sub_10013C6D4@<X0>(int a1@<W8>)
{
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((*(unsigned __int8 *)STACK[0x680] - 1 < 2)
                                          * ((a1 - 1178359376) & 0x463C579F ^ 0x7B0)) ^ a1))
                            - 4))();
}

uint64_t sub_10013C760()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (((STACK[0x6B8] != 0) * ((v0 ^ 0x160) + 1010)) ^ v0)) - 8))();
}

uint64_t sub_10013C888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;

  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((131 * (v8 + 8 != a8)) ^ v9))
                            - ((((v9 - 707) | 0x470u) + 217) ^ 0x6C5)))();
}

uint64_t sub_10013C8C8(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3;
  int v4;
  int v5;

  v5 = v4 - 116;
  STACK[0x8A0] = STACK[0x5C0];
  STACK[0x740] = v3;
  STACK[0xA48] = STACK[0x678];
  free(a3);
  STACK[0x7C0] = 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + (((((v5 + 108) | 0x481) - 920) * (STACK[0x848] != 0)) ^ v5)) - 8))();
}

void sub_10013C92C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) - 928048777 * (((a1 | 0x634B8ECF) - (a1 | 0x9CB47130) - 1665896144) ^ 0x4557FBA2);
  __asm { BR              X10 }
}

uint64_t sub_10013C9E4()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((445
                                          * (((*(_QWORD *)(v1 + 120) == 0x6262E0568D5240A8) ^ (((v0 + 22) ^ 0xBF) - 23)) & 1)) ^ (v0 + 278)))
                            - 4))();
}

uint64_t sub_10013CB30()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * ((((v0 - 559) ^ 0x204) * (v2 != v1)) ^ v0)))();
}

uint64_t sub_10013CB54@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8 * (((*(_QWORD *)(v1 - 0x6262E0568D5240A0) != 0) * (a1 - 371)) ^ a1))
                            - 8))();
}

uint64_t sub_10013CB88@<X0>(void *a1@<X0>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v4 = a2 - 488;
  free(a1);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8
                                             * ((v4 + 806) | (8 * (*(_QWORD *)(v2 - 0x6262E0568D524090) == 0))))
                            - 4))();
}

uint64_t sub_10013CBC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BOOL4 v4;

  free((void *)(v1 - 0x6262E0568D5240A8));
  *(_QWORD *)(v0 + 120) = 0x6262E0568D5240A8;
  v4 = malloc_type_malloc(0x28uLL, 0x1010040725982CDuLL) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)((((v3 + 619220206) & 0xDB1772D6 ^ (v3 - 1790488947) & 0x6AB8B56F ^ 0x56D)
                                               * v4) ^ (v3 + 1114)))
                            - 4))();
}

uint64_t sub_10013CCB4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v6;
  void *v7;

  v6 = *(_DWORD *)(v1 + 20) + v2;
  *a1 = *(_QWORD *)(v1 + 40) ^ v2;
  a1[1] = 0;
  a1[3] = 0;
  v7 = malloc_type_malloc((v6 - 1808951162), 0x45FA0C94uLL);
  a1[1] = (uint64_t)v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((57 * (((v4 - 107) ^ (v7 == 0)) & 1)) ^ v4))
                            - 12))();
}

uint64_t sub_10013CD18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BOOL4 v4;

  *(_DWORD *)(v0 + 16) = v2;
  v4 = (v2 | ((unint64_t)(v2 < 0x6BD2677A) << 32)) + 307034700 != (v3 ^ 0x418u)
                                                                                     - 157
                                                                                     + 2115985648;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((v4 | (8 * v4)) ^ v3 ^ 0x418)) - 12))();
}

uint64_t sub_10013CDA4@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;

  v9 = v3 < v2;
  *(_BYTE *)(v5 + a1 - 0x4AB2092B44DC0CF6) = *(_BYTE *)(v4 + *(_QWORD *)(v7 + 32) - 0x46CAA1F943420962)
                                             - ((a2 ^ 0x2D) & (2
                                                             * *(_BYTE *)(v4
                                                                        + *(_QWORD *)(v7 + 32)
                                                                        - 0x46CAA1F943420962)))
                                             - 81;
  if (v9 == v6 - 0x75FCE2784E5EFC13 < v2)
    v9 = v6 - 0x75FCE2784E5EFC13 < v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((v9 | (8 * v9)) ^ a2)) - 12))();
}

uint64_t sub_10013CE4C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  void *v5;

  v5 = malloc_type_malloc(*(_DWORD *)(v0 + 28) ^ v2 ^ 0x7670799Bu, 0x4C9DE76uLL);
  *(_QWORD *)(v1 + 24) = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8 * ((725 * (((v5 == 0) ^ (v4 + 90) ^ 0x5B) & 1)) ^ v4))
                            - 12))();
}

uint64_t sub_10013CEA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;

  *(_DWORD *)(v0 + 32) = v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (v3 ^ (104
                                               * ((v1 ^ 0xEFBFFFFFDCDCF7FFLL)
                                                + 0x10400000C98F0068
                                                + ((2 * v1) & 0x1B9B9EFFELL) == 2792093799))))
                            - 12))();
}

uint64_t sub_10013CF58(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  _BOOL4 v11;

  v11 = v2 < v3;
  *(_BYTE *)(v6 + a1 - 0x220F83238F6918E4) = *(_BYTE *)(v5 + *v8 - 0x5514BB7B4338F102)
                                             - (((v10 + 61) & 0xBF ^ 0x73) & (2
                                                                            * *(_BYTE *)(v5 + *v8 - 0x5514BB7B4338F102)))
                                             - 81;
  if (v11 == v7 - 0x766F905786A7B282 < v1)
    v11 = v7 - 0x766F905786A7B282 < v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((!v11 * v4) ^ v10)) - 12))();
}

void sub_10013D014(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 120) = a1;
  *(_DWORD *)(v2 + 96) = (*(_DWORD *)(v2 + 96) & 0xFFFFFFFB ^ 0x79887DCC)
                       + 2038987977
                       + ((2
                         * ((*(_DWORD *)(v2 + 96) & 0xFFFFFFFB ^ 0x79887DCC) & (3 * (v1 ^ 0x176) + 2038987977) ^ (*(_DWORD *)(v2 + 96) | 0x7FFFFFED))) ^ 0x2D)
                       + 260;
  *(_DWORD *)v2 = 2023518722;
  *(_DWORD *)(v2 + 4) = -1223708077;
  *v3 = v2;
}

uint64_t xtiKg(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  unint64_t v5;
  _DWORD v7[2];
  uint64_t v8;
  char *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v5 = 444472921
     * ((((unint64_t)v7 | 0xEA735D22C64C6F32)
       - ((unint64_t)v7 | 0x158CA2DD39B390CDLL)
       + 0x158CA2DD39B390CDLL) ^ 0x6A6885817B3808DCLL);
  v10 = v5 ^ 0x68D9B3A5;
  v8 = a4;
  v9 = (char *)&loc_1000B1094 + v5 - 4;
  v12 = a2;
  v13 = a1;
  v7[0] = v5 ^ a5;
  v7[1] = v5 ^ a3;
  sub_1000B0FEC((uint64_t)v7);
  return v11;
}

uint64_t sub_10013D5F4(uint64_t result)
{
  unint64_t v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  _BOOL4 v6;
  int v7;

  v1 = 1606104089 * ((((2 * result) | 0x3ADB71A5212363FCLL) - result - 0x1D6DB8D29091B1FELL) ^ 0xDFD343E6E586F3C0);
  v2 = *(_DWORD *)(result + 24) ^ (1606104089 * ((((2 * result) | 0x212363FC) - result + 1869499906) ^ 0xE586F3C0));
  v3 = *(_QWORD *)(result + 32) + v1;
  v4 = *(_QWORD *)result - v1;
  v5 = (uint64_t)v4 < (uint64_t)v3;
  v6 = v4 < v3;
  v7 = v5;
  if (((*(_DWORD *)(result + 12) ^ (1606104089
                                   * ((((2 * (_DWORD)result) | 0x212363FC) - (_DWORD)result + 1869499906) ^ 0xE586F3C0))) & 1) != 0)
    v6 = v7;
  if (!v6)
    v2 = *(_DWORD *)(result + 20) - 1606104089 * ((((2 * result) | 0x212363FC) - result + 1869499906) ^ 0xE586F3C0);
  *(_DWORD *)(result + 8) = *(_DWORD *)(result + 16) ^ (1606104089
                                                      * ((((2 * result) | 0x212363FC) - result + 1869499906) ^ 0xE586F3C0)) ^ v2;
  return result;
}

void sub_10013D690(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_10013D714@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((785 * (*(_DWORD *)(a1 + 8) + a2 == 640809546)) ^ v2))
                            - ((v2 + 1423) ^ 0x63BLL)))();
}

uint64_t sub_10013D754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;

  v11 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 56))
    v12 = v11 == 0x353232397341B08CLL;
  else
    v12 = 1;
  v13 = v12;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 + 8 * ((15 * (((v9 + 114) ^ v13) & 1)) ^ v9)) - 2 * (v9 ^ 0x661u) + 152))(a1, v11, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_10013D7B4@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((25
                                          * (((*(_DWORD *)(a1 + 4) - a2) ^ 0x41800A13) == *(_DWORD *)(a1 + 48)
                                                                                        + a2
                                                                                        + ((v2 - 1439) ^ 0xB544CA68))) | (v2 - 1423)))
                            - 8))();
}

uint64_t sub_10013D80C@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  char v3;
  uint64_t v4;
  int v5;
  _BOOL4 v7;

  v5 = (v3 & 0xF ^ 0x71E4164B | 0x4BCDD096) - ((v2 - 1271779627) | v3 & 0xF ^ 0x71E4164B);
  v7 = *(_DWORD *)(a1 + 64) - a2 != 290818466 || v5 != -2047371403;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((v7 * ((v2 ^ 0x30) - 116)) ^ v2)) - 8))();
}

_DWORD *sub_10013D880(_DWORD *result)
{
  int v1;

  *result = v1;
  return result;
}

#error "10013D8A4: too big function (funcsize=0)"

void sub_10018DCB8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, int a20,int a21,int a22,int a23,int a24,int a25,char a26,uint64_t a27,int a28,int a29)
{
  int v29;
  int v30;
  int v31;
  int v32;
  int v36;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;

  if (v32 == 52)
    a19 = a4;
  LODWORD(STACK[0x2D8]) = a19;
  if (v32 == 52)
    a20 = v31;
  LODWORD(STACK[0x2D4]) = a20;
  if (v32 == 52)
    a22 = v30;
  LODWORD(STACK[0x2CC]) = a22;
  v36 = LODWORD(STACK[0x458]) + 669;
  if (v32 == 52)
    a21 = v29;
  LODWORD(STACK[0x2D0]) = a21;
  v38 = ((LODWORD(STACK[0x28C]) + 1) & 3) + 1893226842 - (((LODWORD(STACK[0x28C]) + 1) << (v36 ^ 0x73)) & 4);
  v39 = STACK[0x42C];
  v40 = ((((a29 + 2) & 3) + 1182176802 - ((2 * (a29 + 2)) & 4)) | LODWORD(STACK[0x42C])) ^ 0x46769622;
  v41 = (LODWORD(STACK[0x274]) + 1) & 3;
  v42 = (v41 - 1306575377 - 2 * v41) ^ 0xB21F3DEF | LODWORD(STACK[0x42C]);
  LODWORD(STACK[0x2C0]) = (v42 ^ 0x3EFB7FF7) - 9569301 + ((2 * v42) & 0x7DF6FFEE);
  v43 = (((a25 + 9112610) & 3) + 1629555866 - ((2 * (a25 + 9112610)) & 4)) ^ 0x61210C9A | v39;
  LODWORD(STACK[0x2B0]) = (v43 ^ 0x4BE6BF7E) - 50466856 + ((2 * v43) & 0x158D66DC);
  v44 = (LODWORD(STACK[0x428]) + 2) & 3 | v39;
  v45 = (((a26 + 81) & 3) + 590103129 - 2 * ((a26 + 81) & 1)) ^ 0x232C4259 | v39;
  v46 = ((LODWORD(STACK[0x278]) + 1) & 3 | v39)
      - 2
      * (((LODWORD(STACK[0x278]) + 1) & 3 | v39) ^ (LODWORD(STACK[0x278]) + 1) & 2);
  v47 = (LODWORD(STACK[0x27C]) + 2) & 3;
  v48 = (v47 - 1056220193 - 2 * v47) ^ 0xC10B5BDF | v39;
  LODWORD(STACK[0x428]) = (v48 ^ 0x3B762EAD) - 840049665 + ((2 * v48) & 0x76EC5D5A);
  v49 = ((STACK[0x280] & 3) + 62153145 - 2 * (STACK[0x280] & 1)) ^ 0x3B461B9 | v39;
  LODWORD(STACK[0x2A0]) = (v49 ^ 0xFFCAFAFF) + 1564463026 + ((2 * v49) & 0x7F95F5FE);
  LODWORD(STACK[0x438]) = v39 | 0xD7FD50A0 | (LODWORD(STACK[0x430]) - 1) & 3;
  LODWORD(STACK[0x298]) = ((v38 ^ 0x70D8595A | v39) ^ 0xBEEF57FE)
                        + 2078277408
                        + ((2 * (v38 ^ 0x70D8595A | v39)) & 0x1C4E0D7C);
  LODWORD(STACK[0x28C]) = a18 + 1263796212;
  LODWORD(STACK[0x2B8]) = v40 - ((2 * v40) & 0x1000809E) + 134665807;
  LODWORD(STACK[0x2A8]) = v44 - 2146609709 - ((2 * v44) & 0x1C) + 11;
  LODWORD(STACK[0x274]) = v45 - ((2 * v45) & 0x28A0620C) + 930361670;
  LODWORD(STACK[0x440]) = v46 + 1461125917;
  JUMPOUT(0x10013FC20);
}

void sub_10018DFF4(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_10018E070(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD v7[3];
  int v8;
  uint64_t v9;

  v5 = *(_QWORD *)(v2 + 24);
  v6 = 941074649 * (((v7 | 0xB3A4DD8A) - (v7 & 0xB3A4DD8A)) ^ 0xB36C12EE);
  v7[1] = *(_QWORD *)(v2 + 16);
  v7[2] = v5;
  LODWORD(v7[0]) = v6 - 1425378415 + v1 + 239;
  v9 = v4;
  v8 = a1 - v6;
  sub_1001DFF94(v7);
  *(_DWORD *)(v3 + 16) = HIDWORD(v7[0]);
}

void sub_10018E460(uint64_t a1)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;

  v1 = 1189216979 * ((2 * (a1 & 0xB5105BF) - a1 - 189859264) ^ 0xDA45F686);
  v2 = *(_DWORD *)a1 ^ v1;
  if (*(_QWORD *)(a1 + 16))
    v3 = *(_DWORD *)(a1 + 8) - v1 == 475027196;
  else
    v3 = 1;
  v4 = v3;
  __asm { BR              X8 }
}

uint64_t sub_10018E534()
{
  int v0;
  int v1;
  void *v2;

  v2 = malloc_type_malloc((((v0 + 138) ^ 0xFFFFFE3E) & (v1 - 475027181) ^ 0x57BFDFDF)+ ((v0 ^ 0xAF7FBEE4) & (2 * (v1 - 475027181)))- 1472192461, 0x69448721uLL);
  STACK[0x3A8] = (unint64_t)v2;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((939 * (v2 != 0)) ^ v0)) - 4))();
}

uint64_t sub_10018E5BC(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;

  STACK[0x358] = v6;
  *a1 = 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(a4
                                        + 8
                                        * ((29
                                          * ((((v7 | ((unint64_t)(v7 < v5) << 32)) == 475027196) ^ (11 * (v4 ^ 0x4B))) & 1)) ^ v4))
                            - 8))();
}

uint64_t sub_10018E678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;

  v13 = v5 < v4;
  *(_BYTE *)(v8 + v11 - 0x2DC1E73D7BCF3CB6) = *(_BYTE *)(((v10 + 997) | 4u) + v7 + v12 - 0x70C8EF7C0E1664A0);
  if (v13 == v9 - 0x2529CB755DDA9528 < v4)
    v13 = v9 - 0x2529CB755DDA9528 < v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(a4 + 8 * ((v13 * v6) ^ v10)) - 8))();
}

uint64_t sub_10018E70C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X3>, unint64_t a3@<X4>, int a4@<W8>)
{
  int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;

  STACK[0x338] = v7;
  STACK[0x350] = a1;
  LODWORD(STACK[0x34C]) = v6;
  STACK[0x340] = a3;
  *(_BYTE *)(a3 + v5 - 0x217F59977FC75E46) = 0x80;
  return ((uint64_t (*)(void))(*(_QWORD *)(a2
                                        + 8
                                        * ((117 * (((a4 + 785031716) & 0xD13558B7 ^ 0xCB34FFB6) + v4 > 0x7FFFFFFE)) ^ a4))
                            - 4))();
}

uint64_t sub_10018E790@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  *(_BYTE *)(v4 + ((3 * (a2 ^ 0x586)) ^ (v3 + 145)) + v2) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * (((v2 + v3 > v5) * v6) ^ a2)) - 4))();
}

uint64_t sub_10018E7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(a4 + 8 * (((dword_100277CEC == 1197784504) * ((v4 + 89) ^ 0xBD)) ^ v4))
                            - (((v4 + 83) | 0x100u) ^ 0x1EALL)))();
}

uint64_t sub_10018E818()
{
  int v0;
  kern_return_t v1;

  v1 = IOMainPort(0, (mach_port_t *)&STACK[0x3C4]);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (((((2 * v1) & 0xFFFF36DE) + (v1 ^ 0x7FFF9B6F) == 2147457903)
                                        * (((8 * v0) ^ 0x1D0) - 1710)) ^ v0))
                            - 4))();
}

uint64_t sub_10018E86C()
{
  int v0;
  uint64_t v1;
  _BOOL4 v2;

  strcpy((char *)(v1 - 215), "com_apple_driver_FairPlayIOKit");
  v2 = IOServiceMatching((const char *)(v1 - 215)) != 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((1318 * v2) ^ v0)) - ((v0 + 292) | 0x4A0u) + 1708))();
}

uint64_t sub_10018E900(const __CFDictionary *a1)
{
  int v1;
  kern_return_t MatchingServices;

  MatchingServices = IOServiceGetMatchingServices(STACK[0x3C4], a1, (io_iterator_t *)&STACK[0x360]);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((1394
                                        * (((2 * MatchingServices) & 0xDF7EDFFE)
                                         + (MatchingServices ^ ((v1 ^ 0x59A) + 1874815625)) == 1874817023)) ^ v1))
                            - ((v1 + 1476) ^ 0x6B4)))();
}

uint64_t sub_10018E978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  io_object_t v6;

  v6 = IOIteratorNext(STACK[0x360]);
  return ((uint64_t (*)(void))(*(_QWORD *)(a4
                                        + 8
                                        * ((189
                                          * ((((107 * (v4 ^ 0x566)) ^ (((2 * v6) & 0xD7ABF4FC) + (v6 ^ 0xEBD5FA7E) == -338298242)) & 1) == 0)) ^ v4))
                            - 8))();
}

uint64_t sub_10018E9DC@<X0>(int a1@<W8>)
{
  int v1;
  kern_return_t v2;

  v2 = IOServiceOpen(a1 + 338298242, mach_task_self_, 0, (io_connect_t *)&STACK[0x378]);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((28
                                        * (((v2 << (-42 * (v1 ^ 0x7E) + 81)) & 0x78FF67FC) + (v2 ^ 0xBC7FB3FE) != -1132481538)) ^ v1 ^ 0x191))
                            - 8))();
}

uint64_t sub_10018EA68()
{
  int v0;
  int v1;
  io_object_t v2;
  uint64_t v3;
  uint64_t v4;

  IOObjectRelease(v2);
  v4 = IOObjectRelease(STACK[0x360]);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_100260750
                                                    + (((*(_DWORD *)(v3 + 3308) == v1) * (((v0 - 1610) | 0x180) ^ 0x1A1)) ^ (v0 - 1565)))
                                          - 12))(v4);
}

uint64_t sub_10018EAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;

  LODWORD(STACK[0x510]) = 0;
  return ((uint64_t (*)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)(a4
                                                                                   + 8
                                                                                   * ((27
                                                                                     * ((v5 | ((unint64_t)(v5 < 0x511B57D6) << 32))
                                                                                      + 1135769905 == 28 * (v4 ^ 0x1E3u) + 2496516219)) ^ v4))
                                                                       - 4))(a1, a2, &STACK[0x510]);
}

uint64_t sub_10018EBA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;

  v14 = v7 < v9;
  *(_BYTE *)(v11 + v13 - 0x6F1BBE0CE1938ABCLL) = *(_BYTE *)(v10 + a5 - 0x5C7293304D46266);
  if (v14 == v12 - 0x7AF88F636F6F810 < (unint64_t)((v5 - 478) | 0x84u) + v6)
    v14 = v12 - 0x7AF88F636F6F810 < v7;
  return ((uint64_t (*)(BOOL))(*(_QWORD *)(a4 + 8 * ((!v14 * v8) ^ v5)) - 4))(v12 - 0x7AF88F636F6F810 < v7);
}

uint64_t sub_10018EC40@<X0>(void *a1@<X2>, unint64_t a2@<X4>, int a3@<W8>)
{
  int v3;
  int v4;
  int v5;
  _BOOL4 v6;

  STACK[0x330] = a2;
  LODWORD(STACK[0xCE4]) = v4 + v3;
  STACK[0x478] = 2008;
  STACK[0x328] = (unint64_t)a1;
  v6 = IOConnectCallStructMethod(a3 - 1197784504, 0x22u, a1, 0x7D8uLL, a1, &STACK[0x478]) == 0;
  return ((uint64_t (*)(void))*(&off_100260750 + ((v6 * ((16 * (v5 ^ 0xE7)) ^ 0x522)) ^ v5)))();
}

uint64_t sub_10018ECAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;

  return (*(uint64_t (**)(void))(a3
                              + 8
                              * (int)(((LODWORD(STACK[0xCE4]) - v4 == v3)
                                     * ((v5 - 1334674570) ^ 0xB0727C59 ^ (428 * (v5 ^ 0x88)))) ^ v5)))();
}

uint64_t sub_10018ECF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(a3
                                        + 8
                                        * ((78 * (((v5 + 1599546412 - v4) | (v4 - (v5 + 1599546412))) >= 0)) ^ ((int)v4 + 1334675341)))
                            - ((v4 ^ (v3 + 589))
                             + 462)
                            + 899))();
}

uint64_t sub_10018EDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;

  v12 = v5 < v4;
  *(_BYTE *)(v9 + a4 - 0x772B6EFA3BF7139ELL) = *(_BYTE *)(v8 + v11 - 0x3192EBE1C4EA65A8);
  if (v12 == v10 - 0x12697B86E9B1E352 < v4)
    v12 = v10 - 0x12697B86E9B1E352 < v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * ((!v12 * v6) ^ v7)) - 12))();
}

uint64_t sub_10018EE64@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;

  STACK[0x3F0] = 0x7BB775407D70C8E2;
  v5 = 230600693 * ((v4 - 152) ^ 0xD23C862B);
  *(_DWORD *)(v4 - 124) = (a2 ^ 0x13CCB390)
                        - v5
                        + 2013195452
                        + ((a2 << (((v3 - 17) ^ 0x9D) + v3 + 19)) & 0xF5AFE6E8 ^ 0xD02680C8);
  v6 = STACK[0x350];
  *(_QWORD *)(v4 - 144) = a1 + v2;
  *(_QWORD *)(v4 - 136) = v6;
  *(_DWORD *)(v4 - 152) = (v3 + 251) ^ v5;
  sub_1001E0108((_DWORD *)(v4 - 152));
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((1259 * (*(_DWORD *)(v4 - 128) == 0)) ^ v3)) - 4))();
}

uint64_t sub_10018EF34()
{
  int v0;
  BOOL v1;

  STACK[0x490] = 1;
  v1 = container_system_group_path_for_identifier(0, "systemgroup.com.apple.pisco.suinfo", &STACK[0x490]) == 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((((v1 ^ (v0 + 1)) & 1) * (42 * (v0 ^ 0xCF) + 33)) ^ v0))
                            - 12))();
}

uint64_t sub_10018EF98()
{
  uint64_t v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((26 * (STACK[0x490] == (v1 + 578) - 1711)) ^ v1))
                            - 12))();
}

uint64_t sub_10018EFC8()
{
  unsigned int v0;
  const char *v1;
  size_t v2;
  _BOOL4 v3;

  v2 = strlen(v1);
  v3 = malloc_type_malloc((v2 ^ 0x7F5EBAEF6C5FFBFDLL ^ v0 ^ 0x40E) + ((2 * v2) & 0xFEBD75DED8BFF73ALL) + (v0 ^ 0x80A1451093A000EFLL), 0xBDDA8B5EuLL) != 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + (int)((293 * v3) ^ v0)) - 12))();
}

uint64_t sub_10018F05C()
{
  int v0;
  unint64_t v1;

  LODWORD(STACK[0x310]) = umask(0);
  STACK[0x318] = v1;
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((239 * (v1 + (v0 ^ 0x3EC7F2BEu) - 0x7F5EBAEEEE68DD1ELL == 3166638429)) ^ v0))
                            - 12))();
}

uint64_t sub_10018F0F4@<X0>(unint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;

  *(_BYTE *)(v3 + v9 - 0x64EA68701FB662CLL) = *(_BYTE *)(v6 + v2 + v8 - 0x720860B23EFB7B39);
  v11 = v4 - 0x281EACE23B562FC6 < a1;
  if (a1 < v7 != v4 - 0x281EACE23B562FC6 < v7)
    v11 = a1 < v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((!v11 * v1) ^ v5)) - 12))();
}

uint64_t sub_10018F184()
{
  int v0;
  const char *v1;
  uint64_t v2;
  int v3;

  strcpy((char *)&v1[STACK[0x318] - 0x7F5EBAEF6C5FFB9DLL], "/Library");
  STACK[0x320] = (unint64_t)v1;
  v3 = mkdir(v1, 0x1EDu);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((v0 - 1053290981) ^ (2
                                                              * ((v0 ^ 0x27 ^ (((((2 * v3) & 0x7D8FE5BE) + (v3 ^ 0x3EC7F2DF) - v0) | (v0 - (((2 * v3) & 0x7D8FE5BE) + (v3 ^ 0x3EC7F2DFu)))) >> ((v0 ^ 0x62) + 99))) & 1))))
                            - 4))();
}

uint64_t sub_10018F23C()
{
  int v0;
  uint64_t v1;
  _BOOL4 v2;

  v2 = *__error() != 17;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((v2 * (v0 + 500)) ^ v0)) - (v0 ^ 0x112u) + 487))();
}

uint64_t sub_10018F27C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v3;

  strcpy((char *)(v0 + 570), "/ProvenanceV2");
  v3 = mkdir((const char *)STACK[0x320], 0x1EDu);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((118
                                          * (((2 * v3) & 0x67DBAB8E) + (v3 ^ ((v1 ^ 0x6A8) - 1276259405)) != -1276258874)) ^ v1))
                            - 4))();
}

uint64_t sub_10018F314()
{
  int v0;
  uint64_t v1;
  signed int v2;

  v2 = ((*__error() == ((v0 - 145) | 0x68) - 474) * ((v0 - 1852257) & 0xF4FF797F ^ 0xF4E33EED)) ^ v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * v2) - 4))();
}

uint64_t sub_10018F378()
{
  uint64_t v0;
  void *v1;
  int v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 583) = 0x6975732E6373702FLL;
  *(_BYTE *)(STACK[0x318] - 0x7F5EBAEF6C5FFDCFLL + STACK[0x320] + 591) = 0;
  STACK[0x320] = 0;
  umask(STACK[0x310]);
  free(v1);
  return (*(uint64_t (**)(void))(v3 + 8 * ((v2 - 941826616) & 0x433FEBEF)))();
}

uint64_t sub_10018F424()
{
  unsigned int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)((((v0 + 1308) ^ 0x6E5) * (STACK[0x320] == 0)) ^ v0))
                            - (v0 ^ 0x190)))();
}

void sub_10018F464(void *a1)
{
  int v1;
  uint64_t v2;
  void *v3;

  free(a1);
  free(v3);
  *(_DWORD *)(v2 + 4) = v1;
}

uint64_t sub_100190E08(int a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  _BOOL4 v6;

  if (v2 < v3 != v4 + v1 < v3)
    v6 = v2 < v3;
  else
    v6 = v4 + v1 < v2;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((v6 * a1) ^ v5)) - 8))();
}

uint64_t sub_1001914F4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,unsigned int a40,int a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  int a66;
  unsigned int a70;
  int a72;
  int a73;
  int a74;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  BOOL v78;
  int v81;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v109;

  v78 = LODWORD(STACK[0x328]) == -315061333;
  if (LODWORD(STACK[0x328]) == -315061333)
    a66 = a41;
  HIDWORD(a36) = a66;
  if (LODWORD(STACK[0x328]) == -315061333)
    a74 = a73;
  LODWORD(STACK[0x208]) = a74;
  v81 = STACK[0x330];
  if (v78)
    v81 = STACK[0x2F8];
  LODWORD(STACK[0x204]) = v81;
  if ((STACK[0x2E8] & 2) != 0)
    a40 = a70;
  v83 = STACK[0x350];
  if ((STACK[0x2E8] & 2) == 0)
    v83 = STACK[0x21C];
  v109 = __PAIR64__(a40, v83);
  LODWORD(STACK[0x350]) = a33 - 154123353;
  LODWORD(STACK[0x330]) = a31 + HIDWORD(a31);
  LODWORD(STACK[0x21C]) = HIDWORD(a30) ^ a32;
  LODWORD(a62) = a72 ^ 0x3199466D;
  HIDWORD(a30) = HIDWORD(a33) ^ 0xE85C78FF;
  LODWORD(STACK[0x2F8]) = HIDWORD(a33) ^ 0x6FB56AA;
  v84 = ((v75 + 1107432187) | 0x85A86140)
      + (unint64_t)v77
      + ((unint64_t)(v77 < v76) << 32)
      - 0x104CC0AE1;
  v85 = *(_QWORD *)(STACK[0x4A8] + 8 * v84) ^ 0xAEAEAEAEAEAEAEAELL;
  v86 = 0x5F3D51B5D321F3ADLL * v85 - ((0xE7AA36BA643E75ALL * v85) & 0x9C0205775A3526ALL) + 0x4E0102BBAD1A935;
  v87 = ((2 * ((v74 ^ 0xD70042CD3D8E5C0ELL ^ v86) + v84)) & 0xEB5FFF97BEF5FF66)
      + (((v74 ^ 0xD70042CD3D8E5C0ELL ^ v86) + v84) ^ 0x75AFFFCBDF7AFFB3);
  v88 = v87
      + (((v87 - 0x75AFFFCBDF7AFFB3) >> 32) ^ 0xC322009C11008C41)
      - (((v87 - 0x75AFFFCBDF7AFFB3) >> 31) & 0x1DDFEE77CLL);
  v89 = v88
      + (((v88 - 0x38D20067F07B8BF4) >> 16) ^ 0x3F1B579BFBBEF9FDLL)
      + (((v88 - 0x38D20067F07B8BF4) >> 15) & 0xAF37F77DF3FALL);
  v90 = v89
      + (((v89 - 0x77ED5803EC3A85F1) >> 8) ^ 0x8288099040082100)
      - (((v89 - 0x77ED5803EC3A85F1) >> 7) & 0xEFECDF7FEFBDFELL)
      + 2;
  LODWORD(v89) = v90 - ((2 * v90 + 125481498) & 0xF1F9656);
  v91 = v90 - ((2 * v90 + 0x42187B6119171EDALL) & 0x459B1ED95A3B0054) - 0x7C2632E2C656F069;
  v92 = 0x5F3D51B5D321F3ADLL * v85 - ((0xBE7AA36BA643E75ALL * v85) & 0xF8016C756A7E6C20) + 0x7C00B63AB53F3610;
  v93 = ((2 * v91) ^ 0x459B1ED95A3B0054)
      - ((2 * ((2 * v91) ^ 0x459B1ED95A3B0054)) & 0x1515B3A0159C7194)
      + 0xA8AD9D00ACE38CALL;
  v94 = (v91 ^ 0x794C102815D3B64ALL)
      + (v93 & 0xB7033E89719C6CC0 ^ 0x1966E3FE6F56F15FLL)
      + ((2 * v93) & 0x26007410C3309100 ^ 0x400300001101100)
      - 0x1B64FB7E6FDAD99FLL;
  v95 = ((2 * ((v92 ^ 0x7F3AA8C0F2D6C52ELL ^ (v94 - ((2 * v94) & 0x6743DF48FD3E67CLL) + 0x33A1EFA47E9F33ELL)) + v84)) & 0xFF9BDB563FFB3FFELL)
      + (((v92 ^ 0x7F3AA8C0F2D6C52ELL ^ (v94 - ((2 * v94) & 0x6743DF48FD3E67CLL) + 0x33A1EFA47E9F33ELL)) + v84) ^ 0xFFCDEDAB1FFD9FFFLL);
  v96 = v95
      + (((v95 + 0x321254E0026001) >> 32) ^ 0x20A00146098C6D82)
      - (((v95 + 0x321254E0026001) >> 31) & 0x1ECE724FALL);
  v97 = v96
      + (((v96 - 0x206DEEF1298A0D81) >> 16) ^ 0xE0D9C7EDBBBF77EFLL)
      + (((v96 - 0x206DEEF1298A0D81) >> 15) & 0x18FDB777EEFDELL);
  v98 = v97
      + (((v97 - 0x147B6DEE5498570) >> 8) ^ 0x3471100011450120)
      - (((v97 - 0x147B6DEE5498570) >> 7) & 0x11DDFFFDD75FDBELL)
      + 2;
  v99 = v98 - ((2 * v98 + 316863196) & 0x1868E6A0);
  v100 = ((2 * (v98 + 158431598)) & 0x77FD7BDC) + ((v98 + 158431598) ^ 0xBBFEBDEE);
  v101 = v98 - ((2 * v98 + 0x294EF54F61BCC5CLL) & 0x3DB590138F012E78) + 0x20253FB4428E7D6ALL;
  v102 = ((2 * ((v86 ^ 0x9A3AD8227D513E09 ^ v101) + v84)) & 0xFFFA7BCFD3CDD29ELL)
       + (((v86 ^ 0x9A3AD8227D513E09 ^ v101) + v84) ^ 0x7FFD3DE7E9E6E94FLL);
  v103 = v102
       + (((v102 - 0x7FFD3DE7E9E6E94FLL) >> 32) ^ 0xC080152259A80066)
       - (((v102 - 0x7FFD3DE7E9E6E94FLL) >> 31) & 0x14CAFFF32)
       + 1;
  v104 = v103 - ((2 * v103 + 0x7F0559EB78E22C94) & 0xBA3453B08E5D93F2) - 0x63632931FC601FBDLL;
  v105 = 2
       * ((((v104 >> 16) ^ 0xDD1A29D8472ELL) & (v104 ^ 0x29D8472EC9F9))
        - ((2 * (((v104 >> 16) ^ 0xDD1A29D8472ELL) & (v104 ^ 0x29D8472EC9F9))) & 0x1A062F4A88A64))
       - 0x56A25F9D0B57759CLL;
  v106 = (v104 ^ 0xDD1AF4C26EF68ED7 ^ (v104 >> 16))
       + (v105 ^ 0x28798030F3D9BLL)
       + 0x56A0D80508584801
       + ((2 * v105) & 0x52BE4FF5EF4F6FFCLL ^ 0x52BA40C5E94104C8);
  v107 = ((2 * v106) & 0x78D5FEBE79BBFDCELL)
       + (v106 ^ 0x3C6AFF5F3CDDFEE7)
       + (((((2 * v106) & 0x78D5FEBE79BBFDCELL) + (v106 ^ 0x3C6AFF5F3CDDFEE7) - 0x3C6AFF5F3CDDFEE7) >> 8) ^ 0x5020040840A4420)
       - (((((2 * v106) & 0x78D5FEBE79BBFDCELL) + (v106 ^ 0x3C6AFF5F3CDDFEE7) - 0x3C6AFF5F3CDDFEE7) >> 7) & 0x1FBFF7EF7EB77BELL);
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)*(&off_100260750 + ((88 * ((v77 & 0xFFFFFFFE) != v76 - 1)) ^ v75)) - 12))(v100 - ((2 * v100 - 107024156) & 0xCCBA9DE2) - 483604637, 3811362659, 3218045342, a4 ^ ((_DWORD)v89 + 1531782200) ^ (v99 + 363195582) ^ 0x1189EBC0 ^ ((_DWORD)v107+ 1- 2* (((_DWORD)v107 + 521649401) & 0x1A3253BF ^ ((_DWORD)v107 + 1) & 4u)- 649457485), 1531782200, 0xDD1AF4C26EF68ED7, 835515170, 1187175654, a9, a10, a11, a12, a13, a14, a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           v109,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62,
           a63,
           a64);
}

void sub_100191E34()
{
  JUMPOUT(0x100191678);
}

#error "1001949B4: call analysis failed (funcsize=1832)"

uint64_t sub_1001949BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a67;
  int a68;
  int a69;
  int a70;
  int a71;
  int v71;
  unsigned int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  int v94;

  v73 = STACK[0x280];
  if (LODWORD(STACK[0x328]) == -315061333)
    v73 = STACK[0x27C];
  LODWORD(a38) = v73;
  LODWORD(STACK[0x338]) = a68 ^ 0x469E4E42;
  LODWORD(a51) = LODWORD(STACK[0x2C8]) ^ 0x3096450C;
  LODWORD(a26) = a26 - a71;
  HIDWORD(a25) = a69 - a70;
  LODWORD(STACK[0x280]) = LODWORD(STACK[0x270]) ^ 0x49DD2801;
  LODWORD(STACK[0x27C]) = a30 - a67;
  v74 = STACK[0x4A8];
  LODWORD(STACK[0x350]) = 223 * (a6 ^ 0x3AD);
  v75 = v72 - 1389159816 + ((unint64_t)(v72 < LODWORD(STACK[0x350]) + 1389159370) << 32);
  v76 = 0x5F3D51B5D321F3ADLL * (*(_QWORD *)(v74 + 8 * v75) ^ 0xAEAEAEAEAEAEAEAELL)
      - ((0xBE7AA36BA643E75ALL * (*(_QWORD *)(v74 + 8 * v75) ^ 0xAEAEAEAEAEAEAEAELL)) & 0xD20D7122EDD468A4)
      + 0x6906B89176EA3452;
  v77 = ((2 * ((a1 ^ 0x8604011440B61650 ^ v76) + v75)) & 0xFFFCFBFF7F7DDB5ELL)
      + (((a1 ^ 0x8604011440B61650 ^ v76) + v75) ^ 0x7FFE7DFFBFBEEDAFLL);
  v78 = v77
      + (((v77 - 0x7FFE7DFFBFBEEDAFLL) >> 32) ^ 0x40CC20010154142DLL)
      - (((v77 - 0x7FFE7DFFBFBEEDAFLL) >> 31) & 0x1FD57D7A4);
  v79 = v78
      + (((v78 + 0x3F3561FF3EECFE24) >> 16) ^ 0xDF67F5EF7FEEE3BFLL)
      + (((v78 + 0x3F3561FF3EECFE24) >> 15) & 0x1EBDEFFDDC77ELL);
  v80 = v79
      + (((v79 + 0x5FCD6C0FBEFE1A65) >> 8) ^ 0xE4C825004803C880)
      - (((v79 + 0x5FCD6C0FBEFE1A65) >> 7) & 0x6FB5FF6FF86EFELL)
      + 2;
  v81 = v80 - ((2 * v80 + 0x64110B31D12D7D46) & 0x527A37296CB3297ELL) - 0x24BA5ED2610FAC9ELL;
  LODWORD(v80) = (2 * (v80 - ((2 * v80 - 785547962) & 0x6CB3297E) - 1628417182)) ^ 0x6CB3297E;
  LODWORD(v80) = (v80 - ((2 * v80) & 0xEF354F1C) - 140859506) & v71 ^ 0x44442828;
  v82 = ((2 * ((v76 ^ 0xC03BA305C0B3A0EDLL ^ v81) + v75)) & 0xEAFC7B9EF6F74FF2)
      + (((v76 ^ 0xC03BA305C0B3A0EDLL ^ v81) + v75) ^ 0x757E3DCF7B7BA7F9);
  v83 = v82
      + (((v82 - 0x757E3DCF7B7BA7F9) >> 32) ^ 0x98620A0230110686)
      - (((v82 - 0x757E3DCF7B7BA7F9) >> 31) & 0x19FDDF2F2);
  v84 = v83
      + (((v83 - 0xDE047D1AB8CAE7FLL) >> 16) ^ 0xEE6FAFE7E8DE2CFFLL)
      + (((v83 - 0xDE047D1AB8CAE7FLL) >> 15) & 0x15FCFD1BC59FELL);
  v85 = v84
      + (((v84 + 0x3B008466B952482) >> 8) ^ 0x7A3D0092C0808A22)
      + 2
      - (((v84 + 0x3B008466B952482) >> 7) & 0x185FEDA7EFEEBBALL);
  v86 = v85 - ((2 * v85 + 0xEC8C7A39620E3CLL) & 0x73C804244624CC8CLL) - 0x5A5B7B0C03C929CLL;
  LODWORD(v85) = (2 * (v85 - ((2 * v85 + 962727484) & 0x4624CC8C) + 1069772132)) ^ 0x4624CC8C;
  v87 = ((_DWORD)v85 - ((2 * (_DWORD)v85) & 0x33EA950C) - 1711977849) & v71 ^ v86;
  v88 = ((2 * ((v76 ^ 0xD0E2BA8355F85214 ^ v86) + v75)) & 0xFFBFFFF995F77F76)
      + (((v76 ^ 0xD0E2BA8355F85214 ^ v86) + v75) ^ 0x7FDFFFFCCAFBBFBBLL);
  v89 = v88
      + (((v88 - 0x7FDFFFFCCAFBBFBBLL) >> 32) ^ 0x810D00126910E960)
      - (((v88 - 0x7FDFFFFCCAFBBFBBLL) >> 31) & 0x12DDE2D3ELL);
  v90 = v89
      + (((v89 - 0xED000F340CA91BLL) >> 16) ^ 0xD9D3E3EFDFC37C5BLL)
      + (((v89 - 0xED000F340CA91BLL) >> 15) & 0x1C7DFBF86F8B6);
  v91 = v90 + (((v90 + 0x253F1C00EC2FDA8ALL) >> 8) ^ 0x8100320141A42A20) + 2;
  v92 = v91 - (((v90 + 0x253F1C00EC2FDA8ALL) >> 7) & 0x1FF9BFD7CB7ABBELL);
  v93 = (v92 - 1433685912) ^ 0xD141084C ^ (((2 * v92 - ((4 * v92 - 1439776352) & 0xE94A0E84) + 1237084178) & v71 ^ 0x27F40E9D)
                                         - 1) & v71;
  LODWORD(v79) = 2 * (v92 - ((2 * v92 + 944781904) & 0x6CB84404) + 1384398634);
  LODWORD(v79) = (v79 ^ 0x6CB84404) - 2 * ((v79 ^ 0x6CB84404) & 0x289E2D6 ^ v79 & 0x12) + 42590917;
  LODWORD(v79) = ((v79 & 0xF8058048 ^ 0x7010004B) + (v79 & 0x56A7C24 ^ 0x4A4705) - 2) ^ 0xF19CA423;
  LODWORD(v80) = a8 ^ v81 ^ (((((2 * v80) | 0x2C7C0636) - v80 - 373162779) & 0x721ED54B ^ 0x700E5440)
                           + ((((2 * v80) | 0x2C7C0636) - v80 - 373162779) ^ 0x87308B0B)
                           - (((((2 * v80) | 0x2C7C0636) - v80 - 373162779) ^ 0x87308B0B) & 0x721ED548)) ^ v87 ^ 0x63C8E97D ^ (((2 * v79) | 0xC7349934) - v79 + 476427110) ^ (v92 - ((2 * v92 + 944781904) & 0x6CB84404) + 1384398634);
  v94 = ((v80 & 0xA2FBE306 ^ 0xF3C106) - ((2 * (v80 & 0xA2FBE306 ^ 0xF3C106)) & 0x15C004) - 586487598) & 0xFFFFE31E ^ 0xFDD8E116 | (((2 * (v80 & 0x5D041CF9 ^ 0x10C0)) | 0x530EFE6A) - (v80 & 0x5D041CF9 ^ 0x10C0) + 1450737867) ^ 0xED8763DC;
  return ((uint64_t (*)(unint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_100260750 + (int)(((8 * (v72 - 1389159815 > 1)) | (16 * (v72 - 1389159815 > 1))) ^ a6)))(v92 - ((2 * v92 - 0x497BAEEDC7AFC5B0) & 0xDE05730A6CB84404) + 0x4A44E20E52843F2ALL, 227550054, ~(2 * (v93 & 0x9F971F ^ (v91 & 1))) + v93 + 10458911, v87, 0x195B1FC63DBF96F0, a6, 2322451083, v94 + 227550054 + (~(2 * v94) | 0xE4DFB935), a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62,
           a63);
}

void sub_100195674()
{
  JUMPOUT(0x100194AE0);
}

uint64_t sub_10019567C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,int a30,uint64_t a31,int a32,int a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,int a63)
{
  unsigned __int8 a64;
  int a68;
  int a70;
  int a72;
  int v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;

  LODWORD(STACK[0x328]) = a23 - a24;
  v72 = ((2 * (a70 ^ LODWORD(STACK[0x2B8]) ^ LODWORD(STACK[0x27C]))) ^ 0x4D7CBE50)
      - ((2 * ((2 * (a70 ^ LODWORD(STACK[0x2B8]) ^ LODWORD(STACK[0x27C]))) ^ 0x4D7CBE50)) & 0x28DA30FC)
      + 342694014;
  v73 = (v72 & 0x246BD864 ^ 0x24D8D913 | v72 & 0xD9042408) - 1;
  LODWORD(STACK[0x2B8]) = v73 & 0xDC4CE408 ^ 0xCE100401 | v73 & 0x21231864;
  v74 = 0x5F3D51B5D321F3ADLL * (*(_QWORD *)STACK[0x4A8] ^ 0xAEAEAEAEAEAEAEAELL)
      - ((0x3E7AA36BA643E75ALL * (*(_QWORD *)STACK[0x4A8] ^ 0xAEAEAEAEAEAEAEAELL)) & 0x46BE85F90739CE66)
      + 0x235F42FC839CE733;
  v90 = 0x5F3D51B5D321F3ADLL * (*(_QWORD *)(STACK[0x4A8] + 8) ^ 0xAEAEAEAEAEAEAEAELL)
      - ((0xBE7AA36BA643E75ALL * (*(_QWORD *)(STACK[0x4A8] + 8) ^ 0xAEAEAEAEAEAEAEAELL)) & 0xA4545B06A8A9D098)
      + 0x522A2D835454E84CLL;
  v75 = ((2 * v74) & 0xE7DB7FBFAAEFFBE8 ^ 0x834859ABA864CA60) + (v74 ^ 0xB64B930A2BC598C7);
  v76 = v75
      + (((v75 - 0x73EDBFDFD577FDF4) >> 32) ^ 0x99998840051E8250)
      - (((v75 - 0x73EDBFDFD577FDF4) >> 31) & 0x1F5C2FB5ELL);
  v77 = v76
      + (((v76 - 0xD87481FDA968044) >> 16) ^ 0xBD7DD5F71FFF1ADCLL)
      + (((v76 - 0xD87481FDA968044) >> 15) & 0x1ABEE3FFE35B8);
  v78 = v77
      + (((v77 + 0x34FAE1E9056A64E0) >> 8) ^ 0xA871011042680086)
      - (((v77 + 0x34FAE1E9056A64E0) >> 7) & 0x11DFDDF7B2FFEF2)
      + 2;
  v79 = v78 - ((2 * v78 - 0x78E5C13B96C25DD0) & 0x80C2CAF46B79946ELL) + 0x3EE84DC6A5B9B4FLL;
  v80 = ((2 * (v79 ^ v74)) & 0xFEDDE9FD33D5EDFELL ^ 0xC65C490D20404808) + (v79 ^ v74 ^ 0x1C50D3782FCADBFBLL);
  v81 = v80
      + (((v80 + 0x910B0166150901) >> 32) ^ 0x208403E12470B821)
      - (((v80 + 0x910B0166150901) >> 31) & 0x1B71E8FBCLL);
  v82 = v81
      + (((v81 - 0x1FF2F8DFBE5BAF20) >> 16) ^ 0x1DEDB6EBFE7EBAAELL)
      + (((v81 - 0x1FF2F8DFBE5BAF20) >> 15) & 0x16DD7FCFD755CLL);
  v83 = v82
      + (((v82 - 0x3DE0AFCBBCDA69CELL) >> 8) ^ 0x8083000581184A89)
      - (((v82 - 0x3DE0AFCBBCDA69CELL) >> 7) & 0xF9FFF4FDCF6AECLL)
      + 2;
  v84 = v83 - ((2 * v83 - 0xEC0E28F98AC8F32) & 0xDEDB08A590008C60) - 0x17F2ECF504560169;
  v85 = ((2 * (v84 ^ v74)) & 0x42DE3FEDFFDAFEBELL ^ 0x440D4C97184206) + (v84 ^ v74 ^ 0x6D5DD958B471DE5CLL);
  v86 = v85
      + (((unint64_t)(v85 + 0x5E90E009001280A1) >> 32) ^ 0x203C9000308212C5)
      - (((unint64_t)(v85 + 0x5E90E009001280A1) >> 31) & 0x19EFBDA74);
  v87 = v86
      + (((v86 + 0x3E545008CF906DDCLL) >> 16) ^ 0xFFD41F3EBF8A79FFLL)
      + (((v86 + 0x3E545008CF906DDCLL) >> 15) & 0x3E7D7F14F3FELL);
  v88 = v87
      + (((v87 + 0x3E8030CA1005F3DDLL) >> 8) ^ 0xC7A4110444030000)
      - (((v87 + 0x3E8030CA1005F3DDLL) >> 7) & 0xB7DDF777F9FFFELL)
      + 2;
  v89 = v88 - ((2 * v88 + 0x1BBEBC9E7B3EC136) & 0x1D065A14D790869ELL) - 0x439D74A656985C16;
  v91 = ((2 * ((v90 ^ 0xDCA900893F9CAB03 ^ v89) + 1)) & 0xFFC6B66FF3F13FB4)
      + (((v90 ^ 0xDCA900893F9CAB03 ^ v89) + 1) ^ 0xFFE35B37F9F89FDALL);
  v92 = v91
      + (((v91 + 0x1CA4C806076026) >> 32) ^ 0x87230B5100828DCCLL)
      - (((v91 + 0x1CA4C806076026) >> 31) & 0x1FEFAE466);
  v93 = v92
      + (((v92 + 0x78F999770584D25ALL) >> 16) ^ 0xDAFFFFFF65B1FAFBLL)
      + (((v92 + 0x78F999770584D25ALL) >> 15) & 0x1FFFECB63F5F6);
  v94 = v93
      + (((v93 - 0x62066688602D28A1) >> 8) ^ 0x24902602A89A94)
      - (((v93 - 0x62066688602D28A1) >> 7) & 0x1B6DFB3FAAECAD6)
      + 2;
  v95 = v94 - ((2 * v94 + 0x3BAA12A33A547992) & 0xF0CEC08137924B12) + 0x163C699238F36252;
  v96 = ((2 * v95) ^ 0xF0CEC08137924B12)
      - ((2 * ((2 * v95) ^ 0xF0CEC08137924B12)) & 0x95CFC4770B056B5CLL)
      + 0x4AE7E23B8582B5AELL;
  v95 ^= 0x23E6FF04230713E9uLL;
  v97 = v95
      + (v96 & 0xB7033E89719C6CC0 ^ 0x599899DFFA7E6337)
      + ((2 * v96) & 0x26067500E3388900 ^ 0x406440003000900)
      - 0x5B9BBBD6FBFE47B7;
  v98 = v97 - 2 * (v97 & 0x60DE2E8F3E4B2457 ^ v95 & 1) + 0x60DE2E8F3E4B2456;
  v99 = (v98 ^ 0x60DE2E8F3E4B2456)
      - 2
      * (((v98 ^ 0x60DE2E8F3E4B2456) + 0x5B819F44B8CE3660) & 0x7AD92E3AABA726DCLL ^ (v98 ^ 0x60DE2E8F3E4B2456) & 4)
      - 0x29A532809B8AA2C8;
  v100 = ((2 * ((v99 ^ v90) & 0xD362FDD1353660F8 ^ 0x3028D1024104098)) & 0xA6807A2028248120)
       - ((v99 ^ v90) & 0xD362FDD1353660F8 ^ 0x3028D1024104098)
       - 0x7FCD3D38DE1A5693;
  v101 = (((v99 ^ v90) & 0x2C9D022ECAC99F07 ^ 0x49C000880899500 | 0xC1B04F6DD07EE998)
        - ((v99 ^ v90) & 0x2C9D022ECAC99F07 ^ 0x49C000880899500 | 0x3E4FB0922F811667)
        + 0x3E4FB0922F811667) ^ 0x5DF4E54D9870E39CLL;
  v102 = ((v100 & 0xCD429450834AC708 ^ 0x45401410810A4201 | v100 & 0x32BD6BA37CB528F0) - 1) ^ 0xC6125A52B1CDEB60 | (((2 * v101) & 0x14CEDDC3FCC6730ALL) - v101 + 0x7598911E019CC67ALL) ^ 0xC5D1391E03DAD77ALL;
  v103 = (v102 ^ 0x3D9FCA1F7F533CE7)
       + ((2 * v102) & 0x7B3F943EFEA679CELL)
       + ((((v102 ^ 0x3D9FCA1F7F533CE7) + ((2 * v102) & 0x7B3F943EFEA679CELL) - 0x3D9FCA1F7F533CE6) >> 32) ^ 0xA0081448C40400A1)
       - ((((v102 ^ 0x3D9FCA1F7F533CE7) + ((2 * v102) & 0x7B3F943EFEA679CELL) - 0x3D9FCA1F7F533CE6) >> 31) & 0x77F7FEBC);
  v104 = v103
       + (((v103 + 0x22582197BCA8C279) >> 16) ^ 0x4DF3CDFBE9F2F7EDLL)
       + (((v103 + 0x22582197BCA8C279) >> 15) & 0x19BF7D3E5EFDALL);
  v105 = v104
       + 0x3A40A567DBABF4FBLL
       + (((v104 - 0x2B9BAC642D4A3574) >> 8) ^ 0x4041010020E67100)
       - (((v104 - 0x2B9BAC642D4A3574) >> 7) & 0x17DFDFFBE331DFELL)
       + 2;
  v106 = v105 - ((2 * v105 - 0x4C3AA59853B936E2) & 0xC5CBD195F67CF48ELL) - 0x43376A012E9E212ALL;
  v107 = (v106 ^ 0x62E5E8CAFB3E7A47)
       - 2 * (((v106 ^ 0x62E5E8CAFB3E7A47) + 0x17033E89719C6CC0) & 0x1E49935387B783F7 ^ v106 & 0x30)
       + 0x554CD1DCF953F087;
  v108 = ((2 * ((v90 ^ 0xCC63BED0D3E36B8BLL ^ v107) + 1)) & 0x75F767FFDEFEEECELL)
       + (((v90 ^ 0xCC63BED0D3E36B8BLL ^ v107) + 1) ^ 0x3AFBB3FFEF7F7767);
  v109 = v108
       + (((v108 - 0x3AFBB3FFEF7F7767) >> 32) ^ 0x809017A101237804)
       - (((v108 - 0x3AFBB3FFEF7F7767) >> 31) & 0x1FDB90FF6);
  v110 = v109
       + (((v109 + 0x4474345F0F5D1095) >> 16) ^ 0x371BEB4FFFF731B5)
       + (((v109 + 0x4474345F0F5D1095) >> 15) & 0x1D69FFFEE636ALL);
  v111 = v110
       + (((v110 + 0xD58490F0F65DEE0) >> 8) ^ 0x90C928002000240CLL)
       - (((v110 + 0xD58490F0F65DEE0) >> 7) & 0x6DAFFFBFFFB7E6);
  v112 = (((v111 - 0xF98974BEA9A581ALL) >> 30) ^ 0x774F3B7FDB771F7FLL)
       + v111
       + 2
       + (((v111 - 0xF98974BEA9A581ALL) >> 29) & 0x7B6EE3EFELL);
  v113 = (((v112 + 0x79182D3439EE8865) >> 12) ^ 0xC7E133FB31FDFEFFLL)
       + v112
       + (((v112 + 0x79182D3439EE8865) >> 11) & 0x267F663FBFDFELL);
  v114 = v113
       + (((v113 - 0x4EC906C6F80F769ALL) >> 7) ^ 0x8408506412500)
       - (((v113 - 0x4EC906C6F80F769ALL) >> 6) & 0x3EF7EF5F37DB5FELL)
       + 1;
  v115 = v114 - ((2 * v114 + 0x625D7168035EC8CALL) & 0xE97EE72A12FDE43ELL) - 0x5A11D3B6F4D1A97CLL;
  v116 = ((2 * ((v115 ^ 0xF4BF7395097EF21FLL) + 0x288AB139EA2E5744)) & 0xE6FF5F57FDBD1F76)
       + (((v115 ^ 0xF4BF7395097EF21FLL) + 0x288AB139EA2E5744) ^ 0x737FAFABFEDE8FBBLL);
  v117 = v116
       + (((v116 - 0x737FAFABFEDE8FBBLL) >> 24) ^ 0xBC80620A50844461)
       - (((v116 - 0x737FAFABFEDE8FBBLL) >> 23) & 0x1EB5EF7773CLL);
  v118 = v117
       + (((v117 - 0x300011B64F62D41CLL) >> 13) ^ 0x48541C0C842A4108)
       - (((v117 - 0x300011B64F62D41CLL) >> 12) & 0x7C7E6F7AB7DEELL);
  v119 = v118
       + (((v118 - 0x78542DC2D38D1524) >> 5) ^ 0x8411122608442580)
       - (((v118 - 0x78542DC2D38D1524) >> 4) & 0x7DDDBB3EF77B4FELL)
       + 3;
  v120 = v119 - ((2 * v119 + 0x735802E485D8AB2) & 0x9224864939CCA530) - 0x3352FCC43EEAE80FLL;
  v121 = (v120 ^ 0xE1034D759F4647B8)
       + ((v120 >> 31) ^ 0x9F305609F85218A9)
       + ((v120 >> 30) & 0x38B56FB7ALL ^ 0xFFFFFFFC7FFBCEADLL)
       + 0x60CFA9F7C5AB7DBFLL;
  v122 = (((((2 * v121) & 0xFDDF7DDAFFFF81FCLL) + (v121 ^ 0xFEEFBEED7FFFC0FELL) + 0x110411280003F02) >> 11) ^ 0x3BBE7FF7EF5FEDD6)
       + ((2 * v121) & 0xFDDF7DDAFFFF81FCLL)
       + (v121 ^ 0xFEEFBEED7FFFC0FELL)
       + (((((2 * v121) & 0xFDDF7DDAFFFF81FCLL) + (v121 ^ 0xFEEFBEED7FFFC0FELL) + 0x110411280003F02) >> 10) & 0x3CFFEFDEBFDBACLL);
  v123 = (((v122 - 0x3AAE3EE56F5FAED4) >> 4) ^ 0x7F5CFDB377DFBB7FLL)
       + v122
       + (((v122 - 0x3AAE3EE56F5FAED4) >> 3) & 0x1EB9FB66EFBF76FELL);
  v124 = v123 - ((2 * v123 - 0x74167931CE7ED4A6) & 0xC24D2D9632EC5F6CLL) - 0x58E4A5CDCDC93A9DLL;
  v125 = ((2 * ((v124 ^ 0x612696CB19762FB6) + 0x1E4A8A832E7300A6)) & 0xFDE17F1FA1FFB67ELL)
       + (((v124 ^ 0x612696CB19762FB6) + 0x1E4A8A832E7300A6) ^ 0xFEF0BF8FD0FFDB3FLL);
  v126 = v125
       + (((v125 + 0x10F40702F0024C1) >> 30) ^ 0x8A14AD011C118031)
       - (((v125 + 0x10F40702F0024C1) >> 29) & 0x5C7DCFF9CLL);
  v127 = v126
       + (((v126 + 0x76FA936F12EEA490) >> 15) ^ 0xEAB9FFDFFF9FDFBALL)
       + (((v126 + 0x76FA936F12EEA490) >> 14) & 0x3FFBFFF3FBF74);
  v128 = v127
       + (((v127 - 0x73BF6C70ECB13B2ALL) >> 8) ^ 0xFF0EB77AFFFB5E9ELL)
       + (((v127 - 0x73BF6C70ECB13B2ALL) >> 7) & 0x1D6EF5FFF6BD3CLL)
       + 1;
  v129 = v128 - ((2 * v128 + 0x1A63B82826A6CC6ELL) & 0x83307D049FDC2926) - 0x3135E5699CBE8536;
  v130 = ((2 * ((v129 ^ 0x41983E824FEE1493) + 0x2C1E97BC5C429E81)) & 0xC87FAE5EDFFFDFF6)
       + (((v129 ^ 0x41983E824FEE1493) + 0x2C1E97BC5C429E81) ^ 0xE43FD72F6FFFEFFBLL);
  v131 = (((v130 + 0x1BC028D090001005) >> 27) ^ 0x36FDEBD7F4D79CBFLL)
       + v130
       + (((v130 + 0x1BC028D090001005) >> 26) & 0x2FE9AF397ELL);
  v132 = (((v131 - 0x1B3DC30764D78CBALL) >> 15) ^ 0xF5DF7BFE60FDFAB7)
       + v131
       + (((v131 - 0x1B3DC30764D78CBALL) >> 14) & 0x2F7FCC1FBF56ELL);
  v133 = (((v132 - 0x111D3F05C5D58771) >> 8) ^ 0x7FFFF9D5A9DFF7DELL)
       + v132
       + (((v132 - 0x111D3F05C5D58771) >> 7) & 0x1FFF3AB53BFEFBCLL);
  v134 = v133 - ((2 * v133 + 0x5DC58E4920950162) & 0x471DEA4217220AD4) + 0x1271BC459BDB861BLL;
  v135 = (v134 ^ 0x3F9F7086A7EED5FALL)
       + ((v134 >> 30) ^ 0xBDEFBF5D07881CA6)
       + ((v134 >> 29) & 0x3F3EBBD78 ^ 0x1F0EB8430)
       + 0x421040A2060A2144;
  v136 = (((((2 * v135) & 0xF782BBDFDF1DB7FELL) + (v135 ^ 0xFBC15DEFEF8EDBFFLL) + 0x43EA21010712401) >> 8) ^ 0xB7FF6EFF7B7FD9EBLL)
       + ((2 * v135) & 0xF782BBDFDF1DB7FELL)
       + (v135 ^ 0xFBC15DEFEF8EDBFFLL)
       + (((((2 * v135) & 0xF782BBDFDF1DB7FELL) + (v135 ^ 0xFBC15DEFEF8EDBFFLL) + 0x43EA21010712401) >> 7) & 0x1FEDDFEF6FFB3D6);
  v137 = v136
       + (((v136 + 0x4C3F331094F14A16) >> 8) ^ 0x2550600AEC0492BLL)
       - (((v136 + 0x4C3F331094F14A16) >> 7) & 0x155F3FEA27F6DA8)
       + 1;
  v138 = v137 - ((2 * v137 - 0x6C2BA5E0339DFE2CLL) & 0xDB23A16AC411FAA6) - 0x4884023AB7C601C3;
  v139 = ((2 * ((v138 ^ 0x6D91D0B56208FD53) + 0x75D572E7727DD82)) & 0xB747CFFF0FCADEEELL)
       + (((v138 ^ 0x6D91D0B56208FD53) + 0x75D572E7727DD82) ^ 0xDBA3E7FF87E56F77);
  v140 = (((v139 + 0x245C1800781A9089) >> 29) & 0x7DFB8EE6ELL)
       + (((v139 + 0x245C1800781A9089) >> 30) ^ 0x55FBFE8FEFDC7737);
  v141 = v140
       + v139
       + ((2 * v140 + 0x540802E020471192) ^ 0x8441010080D4CA0FLL)
       - ((2 * (2 * v140 + 0x540802E020471192)) & 0xF77DFDFEFE566BE0);
  v142 = v141
       + (((v141 + 0x4A1F187007694F43) >> 9) ^ 0x1604514C02F568DCLL)
       - (((v141 + 0x4A1F187007694F43) >> 8) & 0xF75D67FA152E46);
  v143 = v142
       + (((v142 + 0x341AC7240473E667) >> 7) ^ 0x6FD8BFFDFF653FEBLL)
       + (((v142 + 0x341AC7240473E667) >> 6) & 0x3B17FFBFECA7FD6);
  LODWORD(v98) = (((_DWORD)v143 + 1 - ((2 * ((_DWORD)v143 + 1) + 169692406) & 0x1F41B390u) + 347045955) >> 2) & 0x1DBD7AF5 ^ 0xCB40034;
  v144 = (((2 * v98) | 0x3C15C372) - v98 + 1643454023) ^ 0x930873FF;
  LODWORD(STACK[0x300]) = 67 * (LODWORD(STACK[0x350]) ^ 0x1BD);
  LODWORD(STACK[0x268]) = v144;
  LODWORD(STACK[0x260]) = v144 & 0x8137420A;
  LODWORD(STACK[0x318]) = LODWORD(STACK[0x2E0]) ^ 0x35F37427;
  LODWORD(STACK[0x2B8]) = a30 ^ a68;
  LODWORD(STACK[0x338]) = a30 ^ a68 ^ 0x4848D2A4;
  LODWORD(STACK[0x328]) = LODWORD(STACK[0x21C]) ^ 0x6408D0B4;
  v145 = STACK[0x4A0];
  v146 = (2 * ((STACK[0x308] & 0xC5F5353) - ((2 * (STACK[0x308] & 0xC5F5353)) & 0xB4CB872)) - 1957906318) ^ 0x8B4CB872;
  v147 = (v146 - 362110525 + (~(2 * v146) | 0x2B2ABC7B)) ^ 0xE635F291;
  v148 = (v147 & STACK[0x338]) + 1248142135 - ((2 * (v147 & STACK[0x338])) & 0x94CA466E);
  v149 = (((v147 & STACK[0x328]) - 911930745 - ((2 * (v147 & STACK[0x328])) & 0x934A150E)) ^ 0xC9A50A87) << LODWORD(STACK[0x340]);
  v150 = (((v148 ^ 0x4A652337) >> LODWORD(STACK[0x330]))
        - 1073180374
        - ((2 * ((v148 ^ 0x4A652337) >> LODWORD(STACK[0x330]))) & 0x80112254)) ^ 0xC008912A | (v149
                                                                                             + 2027048344
                                                                                             - ((2 * v149) & 0xF1A49B30)) ^ 0x78D24D98;
  v151 = 4 * (a64 ^ 0x55u);
  *(_DWORD *)(STACK[0x4C0] + v151) = a33 ^ a72 ^ 0x42952603 ^ (v150 - ((2 * v150) & 0xEBB4F0FA) - 170231683);
  *(_DWORD *)(v145 + v151) = a33 ^ a72 ^ 0xE23662B2;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)*(&off_100260750 + SLODWORD(STACK[0x350]))
                                                                                                - 12))(2136970370, 3221786922, 1845183310, 2772586886, 2717358262, 2027048344, 1717708016);
}

#error "1001992C0: too big function (funcsize=0)"

void sub_1001AD2F8()
{
  JUMPOUT(0x1001AD2A8);
}

uint64_t sub_1001AD304@<X0>(uint64_t a1@<X2>, int a2@<W3>, int a3@<W8>, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t (*v6)(void);
  unint64_t v7;

  LODWORD(STACK[0x318]) = a2;
  v4 = (a3 - 210625942);
  v5 = ((unint64_t)&STACK[0x444] ^ 0x7DDA7FCDEFFAEAFFLL)
     - 0x7DDA7FCDEFFAEAFFLL
     + ((2 * (_QWORD)&STACK[0x444]) & 0xFBB4FF9BDFF5D5F8);
  STACK[0x328] = ((2 * (v5 % 0x25)) & 0x4CLL)
               + ((v5 % 0x25) ^ v4 ^ 0xFFE7F3FEDEFFFFE5)
               + 0x180C012100012ALL;
  v6 = (uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * (int)(v4 ^ 0x613))
                         - (((v4 ^ 0x7B3) - 565) ^ (v4 + 892)));
  v7 = STACK[0x3F0];
  STACK[0x310] = STACK[0x3F0];
  STACK[0x350] = STACK[0x418];
  STACK[0x320] = (unint64_t)&a4 + v7 - 0x7BB775407D70C3C2;
  return v6();
}

uint64_t sub_1001AD470(int8x16_t a1, int8x16_t a2, int32x4_t a3, int8x16_t a4, int32x4_t a5, int8x16_t a6, int8x16_t a7, int8x16_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int8x16_t v37;

  v27 = 4 * v12;
  v28 = v16 + 4 * v12;
  v29 = v14 | v12;
  v30 = v12 + 4;
  LODWORD(v29) = *(_DWORD *)(v16 + 4 * v29);
  v26.i32[0] = *(_DWORD *)(v16 + (v27 | 4));
  v26.i32[1] = v29;
  v26.i32[2] = *(_DWORD *)(v16 + (v27 | 0xC));
  v31 = vextq_s8(a1, v26, 0xCuLL);
  v32 = v26;
  v32.i32[3] = *(_DWORD *)(v16 + 4 * v30);
  v33 = (int8x16_t)vaddq_s32((int32x4_t)veorq_s8((int8x16_t)vaddq_s32((int32x4_t)vorrq_s8(v31, a2), a3), a4), a5);
  v34 = veorq_s8(vandq_s8(v32, a6), a7);
  v35 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vorrq_s8(v34, a8), (int32x4_t)vorrq_s8(v34, (int8x16_t)v17)), v17), v18);
  v36 = (int32x4_t)veorq_s8(vorrq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vorrq_s8((int8x16_t)vaddq_s32(v35, v35), v19), v35), v20), veorq_s8(v33, v21)), v22);
  v37.i32[0] = *(_DWORD *)(v15 + 4 * ((*(_DWORD *)(v16 + (v27 | 4)) & 1) == 0));
  v37.i32[1] = *(_DWORD *)(v15 + 4 * ((v29 & 1) == 0));
  v37.i32[2] = *(_DWORD *)(v15 + 4 * (~*(_DWORD *)(v16 + (v27 | 0xC)) & 1));
  v37.i32[3] = *(_DWORD *)(v15 + 4 * ((v32.i8[12] & 1) == 0));
  *(int8x16_t *)v28 = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v28 + 1588), v37), v25), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsubq_s32(v36, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v36, v36), v23)), v24), 1uLL));
  return ((uint64_t (*)(void))(*(_QWORD *)(a12 + 8 * ((1022 * (v30 != 224)) ^ v13)) - 8))();
}

uint64_t sub_1001AD58C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, int a3@<W5>, int a4@<W6>, int a5@<W8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;

  v10 = (unsigned int *)(v7 + 4 * (v6 + v8));
  v11 = ((((a4 + 5 * (a5 ^ 0x11) + 3985) | v5) + 421544968) ^ 0x629199BE) - 1301341158;
  v12 = v6 + 1;
  v13 = *(_DWORD *)(v7 + 4 * (v12 + v8));
  v14 = (a3 - (v13 & 0x7FFFFFFE ^ 0x3D4BF1B0 | a3) + (v13 & 0x7FFFFFFE ^ 0x3D4BF1B0 | 0x6B63DD2F)) ^ 0x36B5A2B;
  v15 = ((((2 * v14) | 0x4E2E362) - v14 - 40989105) | v11 ^ 0xAE20F9D3) ^ 0x535939;
  *v10 = v10[397] ^ *(_DWORD *)(v9 - 184 + 4 * ((v13 & 1) == 0)) ^ ((v15 - ((2 * v15) & 0xBC54B998) + 1579834572) >> 1) ^ 0x2645C819;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((504 * (v12 != a2 + 3)) ^ a5)) - 8))();
}

uint64_t sub_1001AD6B4()
{
  int v0;
  uint64_t v1;
  int8x16_t v2;
  int8x16_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int8x16_t v11;

  v3 = (int8x16_t)vld1q_dup_f32((const float *)&aHAwAwAwAwAwAwA[912]);
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  v2.i64[0] = *(_QWORD *)&aHAwAwAwAwAwAwA[916];
  v2.i32[2] = *(_DWORD *)&aHAwAwAwAwAwAwA[924];
  v5 = vextq_s8(v3, v2, 0xCuLL);
  v6 = v2;
  v6.i32[3] = *(_DWORD *)&aHAwAwAwAwAwAwA[928];
  v7 = vandq_s8(v5, v4);
  v8 = (int32x4_t)veorq_s8(vandq_s8(v6, (int8x16_t)vdupq_n_s32(0x7FFFFFFEu)), (int8x16_t)vdupq_n_s32(0x24AF0CCEu));
  v9 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v8, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v8, v8), (int8x16_t)vdupq_n_s32(0x8E02B88u))), vdupq_n_s32(0x847015C4)), (int8x16_t)vdupq_n_s32(0xB4FC4584));
  v10 = (int32x4_t)veorq_s8(vorrq_s8((int8x16_t)vaddq_s32(vsubq_s32(v9, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v9, v9), (int8x16_t)vdupq_n_s32(0x5F1C27FCu))), vdupq_n_s32(0x2F8E13FEu)), v7), (int8x16_t)vdupq_n_s32(0x6CCC114Cu));
  v11.i32[0] = *(_DWORD *)(v1 + 4 * ((aHAwAwAwAwAwAwA[916] & 1) == 0));
  v11.i32[1] = *(_DWORD *)(v1 + 4 * (*(_DWORD *)&aHAwAwAwAwAwAwA[920] & ((v0 - 216) ^ 0x396u) ^ 1));
  v11.i32[2] = *(_DWORD *)(v1 + 4 * (~*(_DWORD *)&aHAwAwAwAwAwAwA[924] & 1));
  v11.i32[3] = *(_DWORD *)(v1 + 4 * (~*(_DWORD *)&aHAwAwAwAwAwAwA[928] & 1));
  *(int8x16_t *)&aHAwAwAwAwAwAwA[912] = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)&aHAwAwAwAwAwAwA[4], v11), (int8x16_t)vdupq_n_s32(0x4720AB1Fu)), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsubq_s32(v10, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v10, v10), (int8x16_t)vdupq_n_s32(0x39C13580u))), vdupq_n_s32(0x9CE09AC0)), 1uLL));
  return ((uint64_t (*)(void))*(&off_100260750 + v0))();
}

void sub_1001AD840()
{
  JUMPOUT(0x1001AD758);
}

uint64_t sub_1001AD84C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;
  unsigned int v4;

  v4 = ((((((428 * ((a1 + 452215587) & 0xE50BBFF5 ^ 0x6B4) + 505050048) & *v2 ^ 0x9C102201) - 1) & 0x5F0A6F38 | *v2 & 0x41000508) ^ 0x940A0701)
      + (((((428 * ((a1 + 452215587) & 0xE50BBFF5 ^ 0x6B4) + 505050048) & *v2 ^ 0x9C102201) - 1) & 0x20F590C6 | *v2 & 0x20E58086) ^ 0x751001)
      - 2) ^ 0xDF0E6B3C;
  v2[623] = v2[396] ^ *(_DWORD *)(v3 - 184 + 4 * ((*v2 & 1) == 0)) ^ (((v4 | ((v2[623] & 0x80000000) - 1572641050) ^ 0xA24366E6)
                                                                       - ((2 * v4) & 0x38A62B50)
                                                                       + 475207080) >> 1) ^ 0x7796CAB;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((47 * (LODWORD(STACK[0x424]) < 0x270)) ^ a1)) - 12))();
}

uint64_t sub_1001AD974()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  unint64_t v5;
  uint64_t v6;

  v3 = LODWORD(STACK[0x424])++;
  *(_DWORD *)(v1 + 3304) = v3 + 73583858;
  v4 = *(_DWORD *)aHAwAwAwAwAwAwA;
  v5 = 516615401 * (((~(v2 - 152) | 0x3E25FA4912891144) + ((v2 - 152) | 0xC1DA05B6ED76EEBBLL)) ^ 0x49668DCD9E15E888);
  *(_QWORD *)(v2 - 120) = v5 + 3574677777u;
  *(_DWORD *)(v2 - 112) = (v0 - 185257513) ^ v5;
  *(_DWORD *)(v2 - 108) = v5 + v0 + 1787044281 - 45;
  *(_DWORD *)(v2 - 128) = v5 ^ (v0 + 1787044281) ^ 0xC;
  *(_DWORD *)(v2 - 152) = v5 + 1;
  *(_DWORD *)(v2 - 148) = v0 + 1787044281 - v5;
  *(_QWORD *)(v2 - 136) = (v4 - 1414407980) ^ v5;
  v6 = sub_1000B1B88(v2 - 152);
  return ((uint64_t (*)(uint64_t))((char *)*(&off_100260750 + *(int *)(v2 - 144)) - 12))(v6);
}

void sub_1001ADA7C()
{
  unsigned int v0;
  unsigned int v1;
  int v2;

  if (v0 >= v1)
    v2 = *(_DWORD *)aHAwAwAwAwAwAwA + 1;
  else
    v2 = 694118461;
  *(_DWORD *)aHAwAwAwAwAwAwA = v2;
  JUMPOUT(0x1001ADC14);
}

uint64_t sub_1001ADC98(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((324 * (v1 + 8 == ((v2 + 674) ^ a1 ^ (v2 + 1632772207) & 0x9EADDBFF))) ^ v2))
                            - 4))();
}

uint64_t sub_1001ADCE0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 - 184) = 0x905856A00950E67FLL;
  LODWORD(STACK[0x424]) = dword_100277CE8 - 73583857;
  v3 = *(unsigned int *)aHAwAwAwAwAwAwA;
  v4 = 1856021207 * ((v2 + 0x3092E5873C345D6FLL - 2 * ((v2 - 152) & 0x3092E5873C345E07)) ^ 0xDD86721C725D88F9);
  *(_DWORD *)(v2 - 140) = v0 - 1229013907 + v4;
  *(_QWORD *)(v2 - 136) = v3 - v4;
  *(_QWORD *)(v2 - 128) = v4 ^ v1;
  *(_DWORD *)(v2 - 120) = v4 + v0 + 1123495865;
  *(_DWORD *)(v2 - 116) = v4;
  *(_DWORD *)(v2 - 148) = v4 ^ (v0 - 1229013907) ^ 7;
  *(_DWORD *)(v2 - 144) = (v0 - 1229013788) ^ v4;
  v5 = sub_1001DFC88(v2 - 152);
  return ((uint64_t (*)(uint64_t))*(&off_100260750 + *(int *)(v2 - 152)))(v5);
}

uint64_t sub_1001ADDC0()
{
  int v0;
  uint64_t v1;
  int v2;
  uint32_t v3;
  unsigned int v4;
  int v5;

  LODWORD(STACK[0x2D0]) = v0;
  STACK[0x308] = (unint64_t)malloc_type_malloc(STACK[0x2B8], 0xC5732911uLL);
  v3 = arc4random();
  v4 = v3 + 1465998909 - ((v3 << (((v2 + 80) | 0x40) ^ 0x41)) & 0xAEC2BC7A);
  *(_DWORD *)&aHAwAwAwAwAwAwA[4] = v4;
  LODWORD(STACK[0x328]) = 1465998908;
  v5 = v4 ^ LODWORD(STACK[0x328]) ^ (v4 >> 30);
  *(_DWORD *)(v1 + 4) = ((((v2 - 1456) | 0x440) - 792) ^ 0xF0FFDCC3 ^ (1812433253 * v5))
                      + ((-670100790 * v5) & 0xE1FFBDD6)
                      + 1717665619
                      - ((2
                        * (((((v2 - 1456) | 0x440) - 792) ^ 0xF0FFDCC3 ^ (1812433253 * v5))
                         + ((-670100790 * v5) & 0xE1FFBDD6))
                        + 503333420) & 0xAEC2BC7A);
  return ((uint64_t (*)(void))*(&off_100260750 + ((v2 - 1456) | 0x449)))();
}

void sub_1001ADEE4()
{
  JUMPOUT(0x1001ADE78);
}

uint64_t sub_1001ADF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const float *v4;
  int8x16_t v5;
  int8x16_t v6;

  v5 = (int8x16_t)vld1q_dup_f32(v4);
  v6.i64[0] = 0x8000000080000000;
  v6.i64[1] = 0x8000000080000000;
  return sub_1001AD470(v5, v6, vdupq_n_s32(0x19204408u), (int8x16_t)vdupq_n_s32(0x629199BEu), vdupq_n_s32(0xB26F1C1A), (int8x16_t)vdupq_n_s32(0x7FFFFFFEu), (int8x16_t)vdupq_n_s32(0x3D4BF1B0u), (int8x16_t)vdupq_n_s32(0x6B63DD2Fu), a1, a2, a3, a4);
}

uint64_t sub_1001AE87C()
{
  unint64_t v0;

  STACK[0x448] = v0;
  STACK[0x400] = STACK[0x308];
  return ((uint64_t (*)(void))STACK[0x2A0])();
}

uint64_t sub_1001AE890()
{
  free((void *)STACK[0x2A8]);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + ((1339
                                        * (LODWORD(STACK[0x37C]) == (((LODWORD(STACK[0x34C]) ^ 0x620) + 1835992012) ^ 0x6D6F057C ^ (2 * (LODWORD(STACK[0x34C]) ^ 0x620))))) ^ (LODWORD(STACK[0x34C]) - 1073)))
                            - 8))();
}

void sub_1001AE920()
{
  const void *v0;

  LODWORD(STACK[0x520]) = STACK[0x38C];
  STACK[0x518] = STACK[0x2C0];
  STACK[0x3F0] = STACK[0x2D8];
  CFRelease(v0);
  JUMPOUT(0x1001AE980);
}

uint64_t sub_1001AE9C0@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((26 * (a1 >= (v1 ^ (v5 - 66)))) ^ v2)) - v4 + 132))();
}

uint64_t sub_1001AE9EC@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((((a1 == v3 + 41) ^ v1) & 1)
                                          * ((v1 - 297365962) & 0x11B971CD ^ 0x1BD)) ^ v1))
                            - 4))();
}

uint64_t sub_1001AEA38()
{
  unsigned int v0;
  _BOOL4 v1;

  v1 = malloc_type_malloc(0x14uLL, 0xAACB7BF8uLL) != 0;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((1530 * v1) ^ v0)) - 193 * (v0 ^ 0x1C5) + 768))();
}

uint64_t sub_1001AEA88()
{
  int v0;
  unint64_t v1;
  unint64_t v2;
  int v3;
  unsigned int v4;
  unint64_t v5;

  STACK[0x2F8] = v2;
  STACK[0x2F0] = v1;
  v3 = 134 * (v0 ^ 0x30E);
  v4 = ((STACK[0x518] ^ *(_DWORD *)(qword_1002789B8 + ((v3 - 200036676) & dword_100278BC0))) & 0x7FFFFFFF)
     * (((v3 + 1189855848) & 0xB91439FF) + 1755343547);
  v5 = 1755343967 * (v4 ^ HIWORD(v4));
  return ((uint64_t (*)(uint64_t))*(&off_100260750
                                           + ((115
                                             * (*(unsigned __int8 *)STACK[0x518] == (byte_1002409E0[v5 >> 24] ^ byte_10023B5C0[v5 >> 24] ^ byte_10021D950[v5 >> 24] ^ v5 ^ (-33 * BYTE3(v5))))) ^ v3)))(400697702);
}

uint64_t sub_1001AEBEC(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE *v12;
  unint64_t v13;
  int v14;

  v12 = (_BYTE *)(v6 + (int)((v2 ^ 0xFE363FBB) + 29999173 + (v5 & 0xFC6C7F74)));
  v13 = (((((v12 ^ v1) & 0x7FFFFFFF) * v4) >> (((v8 ^ 0xD) + 37) ^ 0xA)) ^ (((v12 ^ v1) & 0x7FFFFFFF)
                                                                                        * v4))
      * v4;
  v14 = (char)(v13 ^ *v12 ^ *(_BYTE *)(v3 + (v13 >> 24)) ^ *(_BYTE *)(v9 + (v13 >> 24)) ^ *(_BYTE *)((v13 >> 24) + v7 + 1) ^ (BYTE3(v13) * v11));
  return (*(uint64_t (**)(uint64_t, _QWORD))(v10 + 8 * ((((v14 > 47) << 7) | ((v14 > 47) << 10)) ^ v8)))(a1, ((2 * v14) & 0xF26FFFBE) + (v14 ^ 0x7937FFDF));
}

uint64_t sub_1001AECB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11
                                        + 8
                                        * ((((char)(v8 ^ *(_BYTE *)(a7 + a3) ^ *(_BYTE *)(a8 + a3) ^ *(_BYTE *)(v9 + a3) ^ ((v10 ^ 0x2A) * a3)) < 58)
                                          * (v10 - 1304)) ^ v10))
                            - 4))();
}

uint64_t sub_1001AECFC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE *v13;
  unint64_t v14;

  v13 = (_BYTE *)(v9 + (int)((a5 ^ 0x5BEBD7BF) - 1542182846 + ((2 * a5) & 0xB7D7AF7C)));
  v14 = ((v7 + (v8 ^ 0x45) - 330 - 1338) ^ ((v8 ^ 0x45) - 1500))
      * ((((v13 ^ v5) & 0x7FFFFFFF) * v7) ^ ((((v13 ^ v5) & 0x7FFFFFFF) * v7) >> 16));
  LODWORD(v13) = (char)(*(_BYTE *)(v6 + (v14 >> 24)) ^ *v13 ^ *(_BYTE *)(v11 + (v14 >> 24)) ^ *(_BYTE *)((v14 >> 24) + v10 + 1) ^ v14 ^ (BYTE3(v14) * v12)) > 47;
  return ((uint64_t (*)(uint64_t, _QWORD))((char *)*(&off_100260750
                                                            + (((32 * (int)v13) | ((_DWORD)v13 << 9)) ^ ((v8 ^ 0x45) - 1292)))
                                                  - 8))(a1, (a2 - 939300095));
}

uint64_t sub_1001AEF4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W4>, int a4@<W8>)
{
  uint64_t v4;
  int v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v4
                                                             + 8
                                                             * ((27
                                                               * ((((v5 - 742) ^ (v5 + 403781776) & 0xE7EEC379 ^ (a3 < 0x3Au)) & 1) == 0)) ^ v5)))(a1, a2, ((2 * a4) & 0x73FF7FFE) + (a4 ^ 0xB9FFBFFF));
}

uint64_t sub_1001AEFB8()
{
  int v0;
  unsigned int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((v1 <= (v0 - 48)) * (285 * (v0 ^ 0x175) - 1213)) ^ v0))
                            - 8))();
}

uint64_t sub_1001AEFEC@<X0>(unsigned __int8 a1@<W4>, int a2@<W8>)
{
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((4 * (((a1 < 0x47u) ^ (5 * (a2 ^ 0xC5) + a2 + 31 + 1)) & 1)) & 0xF7 | (8 * (((a1 < 0x47u) ^ (5 * (a2 ^ 0x5C5) + a2 + 287 + 1)) & 1)) | a2))
                            - 8))();
}

uint64_t sub_1001AF030(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v4;

  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (int)(((((v4 - 966378781) ^ 0xC6663C53) + 1291) * (a4 > 0x60)) ^ v4))
                            - 8))();
}

uint64_t sub_1001AF06C@<X0>(int a1@<W1>, int a2@<W2>, unsigned __int8 a3@<W4>, int a4@<W8>)
{
  int v4;

  if (a3 >= 0x67u)
    v4 = 1303956645;
  else
    v4 = a2 - 1816590944 + a4 + 966380073;
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (int)((1856
                                             * (((a1 + 1053070576) & (((4 * (a4 + 966380073)) ^ 0x3247299Au) + v4)) >> 31)) ^ (a4 + 966378781)))
                            - ((53 * ((a4 + 966380073) ^ 0x6B4u)) ^ 0xDCLL)))();
}

uint64_t sub_1001AF130@<X0>(int a1@<W0>, char a2@<W1>, int a3@<W8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  char v13;
  _BYTE *v14;
  unint64_t v15;

  v12 = a3 ^ 0x19C4;
  v13 = (16 * a2 - (((((v12 - 100) | 4) ^ 0xA4) + 32 * a2) & 0xE0) + 121) ^ 0x79 | (v7 + 90);
  v14 = (_BYTE *)(v8 + a1 - 400697702);
  v15 = ((((v14 ^ v4) & 0x7FFFFFFF) * v6) ^ ((((v14 ^ v4) & 0x7FFFFFFF) * v6) >> 16)) * v6;
  *v14 = v15 ^ (BYTE3(v15) * v11) ^ *(_BYTE *)(v5 + (v15 >> 24)) ^ *(_BYTE *)(v10 + (v15 >> 24)) ^ *(_BYTE *)((v15 >> 24) + v9 + 1) ^ 0xAD ^ (v13 - ((2 * v13) & 0x5A) - 83);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v12 | (8 * ((a1 - 400697701) > 0x13)))) - 12))();
}

void sub_1001AF220()
{
  JUMPOUT(0x1001AEB10);
}

uint64_t sub_1001AF228@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;
  int v3;

  return (*(uint64_t (**)(void))(v1 + 8 * (((v2 + 657) * (a1 == v3 + 26)) ^ v2)))();
}

uint64_t sub_1001AF24C()
{
  int v0;
  _BOOL4 v1;

  v1 = malloc_type_malloc(0x19uLL, 0xFD034588uLL) != 0;
  return ((uint64_t (*)(void))*(&off_100260750 + ((((v0 - 338539421) & 0x142DB737 ^ 0x464) * v1) ^ v0)))();
}

uint64_t sub_1001AF2A0(_BYTE *a1)
{
  unsigned int v1;
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;

  STACK[0x2F8] = v3;
  STACK[0x2F0] = v2;
  v4 = *(_DWORD *)(qword_1002789B8 + (dword_100278BC0 & 0xFFFFFFFFF413B3F8));
  v5 = 1755343967
     * ((1755343967 * ((STACK[0x518] ^ v4) & 0x7FFFFFFF)) ^ ((1755343967
                                                                          * ((STACK[0x518] ^ v4) & 0x7FFFFFFF)) >> 16));
  v6 = 1755343967
     * ((1755343967 * ((a1 ^ v4) & 0x7FFFFFFF)) ^ ((1755343967 * ((a1 ^ v4) & 0x7FFFFFFF)) >> 16));
  *a1 = byte_10023ECC0[v5 >> (v1 - 15)] ^ *(_BYTE *)STACK[0x518] ^ byte_10023A840[v5 >> (v1 - 15)] ^ byte_10021AAB0[(v5 >> (v1 - 15)) + 1] ^ byte_10023ECC0[v6 >> 24] ^ byte_10023A840[v6 >> 24] ^ byte_10021AAB0[(v6 >> 24) + 1] ^ v5 ^ v6 ^ (41 * (v5 >> (v1 - 15))) ^ (41 * BYTE3(v6));
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + v1) - 4))();
}

void sub_1001AF3C4()
{
  JUMPOUT(0x1001AF2FCLL);
}

uint64_t sub_1001AF3CC()
{
  int v0;
  int v1;
  unsigned int v2;

  v2 = v1 + 70;
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (((8 * (((v0 == 0) ^ (v2 + v2 + 91)) & 1)) & 0xEF | (16 * (((v0 == 0) ^ (v2 + v2 + 91)) & 1))) ^ v2))
                            - 4))();
}

void sub_1001AF408()
{
  void *v0;

  free(v0);
  JUMPOUT(0x10018F478);
}

uint64_t sub_1001AF418@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((1616 * (STACK[0x518] != 0)) ^ (a1 | 4)))
                            - (((((a1 | 4) + 868) | 0x280u) + 12) ^ ((a1 | 4u) + 1508))))();
}

uint64_t sub_1001AF460(void *a1)
{
  int v1;
  _BYTE *v2;
  unint64_t v3;
  int v4;

  free(a1);
  STACK[0x518] = v3;
  LODWORD(STACK[0x340]) = v4 + 25;
  LODWORD(STACK[0x520]) = STACK[0x340];
  LODWORD(STACK[0x510]) = 65;
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((8 * (*v2 == 1)) | ((*v2 == 1) << 9) | (v1 - 1499)))
                            - ((v1 + 1937795367) & 0x8C7F90FD)
                            + 201))();
}

uint64_t sub_1001AF5A4()
{
  int v0;
  uint64_t v1;
  unint64_t v2;
  int v3;
  unint64_t v4;
  int v5;

  v2 = *(unsigned __int8 *)STACK[0x330];
  STACK[0x320] = v2;
  v3 = ((2 * v2) & 0xE4) + (v2 ^ 0xDBF59F72);
  v4 = STACK[0x338];
  LODWORD(STACK[0x308]) = v3;
  v5 = v4 - v3;
  LODWORD(STACK[0x2E0]) = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((1724
                                          * ((((_BYTE)v5 + ((v0 - 37) ^ 0xB3)) & 0xF) == 2 * (((_BYTE)v5 + ((v0 - 37) ^ 0xB3)) & 3))) ^ v0))
                            - 12))();
}

uint64_t sub_1001AF614()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;
  unint64_t v4;
  BOOL v5;
  char v6;

  v2 = (v0 + 43) | 2;
  v3 = v2 + LODWORD(STACK[0x308]) + 788528302;
  v4 = STACK[0x350] + 3;
  STACK[0x2B0] = STACK[0x3F0];
  LODWORD(STACK[0x2E8]) = 1935652661;
  LODWORD(STACK[0x474]) = 1935652661;
  STACK[0x338] = v4;
  if (v4)
    v5 = 1;
  else
    v5 = v3 == 183868706;
  v6 = !v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((2 * ((v6 ^ (v2 - 1)) & 1)) & 0xEF | (16 * ((v6 ^ (v2 - 1)) & 1))) ^ v2))
                            - ((8 * (v2 ^ 0x1D4u)) ^ 0x6B8)))();
}

uint64_t sub_1001AF6A4()
{
  int v0;
  int v1;
  int v2;
  char *v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = (v1 - 258) | 0x1C4;
  v3 = (char *)&STACK[0x4D0] + STACK[0x2B0] - 0x7BB775407D70C8A2;
  STACK[0x328] = (unint64_t)(v3 + 255);
  STACK[0x2C0] = (unint64_t)(v3 + 510);
  STACK[0x330] = (unint64_t)v3;
  STACK[0x300] = (unint64_t)(v3 + 528);
  v4 = STACK[0x340];
  v5 = (LODWORD(STACK[0x340]) - 1816283062);
  STACK[0x318] = (v0 + LODWORD(STACK[0x340]) - 1456910838);
  v6 = qword_1002789B8;
  v7 = dword_100278BC0 & 0xFFFFFFFFF413B3F8;
  STACK[0x310] = -v4 + 1031026413;
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)*(&off_100260750
                                                                      + ((((((v2 ^ 0x2CC) + 800236343) & 0xD04D5BF7 ^ 0xBF8561ACuLL)
                                                                         + 296520604 < v5)
                                                                        * (((v2 ^ 0x2CC) + 194) ^ 0x393)) ^ v2 ^ 0x2CC))
                                                            - 8))(v6, v7);
}

uint64_t sub_1001AF7F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;

  v13 = ((*(_DWORD *)(a1 + a2) ^ (v5 + v2)) & 0x7FFFFFFF) * v4;
  v14 = (v13 ^ HIWORD(v13)) * v4;
  LODWORD(v14) = byte_10023ECC0[v14 >> 24] ^ *(unsigned __int8 *)(v5 + v2) ^ byte_10023A840[v14 >> 24] ^ byte_10021AAB0[(v14 >> 24) + 1] ^ v14 ^ ((v14 >> 24) * (v7 - 270));
  *(_BYTE *)(STACK[0x330] + v2) = *(_BYTE *)(v6 + v2) ^ (v14 - (v8 & (2 * v14)) - 103);
  return ((uint64_t (*)(void))((char *)*(&off_100260750
                                      + (((v2 + 1 + v3 != ((((v7 - 143) ^ v10) * v11) ^ (unint64_t)(v3 + 416)))
                                        * v12) ^ (v7 - 143)))
                            - ((v7 - 143) ^ v9)
                            + 764))();
}

void sub_1001AFA0C()
{
  JUMPOUT(0x1001AF7B0);
}

void sub_1001AFA14()
{
  int v0;
  void *v1;

  STACK[0x3F0] = STACK[0x2B0];
  free(v1);
  STACK[0x518] = 0;
  LODWORD(STACK[0x520]) = v0;
  JUMPOUT(0x10018F478);
}

uint64_t sub_1001AFA24()
{
  int v0;
  int v1;
  char *v2;
  char *v3;

  v1 = LODWORD(STACK[0x340]) + LODWORD(STACK[0x308]) + 1428728482;
  v2 = (char *)&STACK[0x4D0] + STACK[0x2B0] - 0x7BB775407D70C8A2;
  STACK[0x3F0] = STACK[0x2B0] + 1088;
  STACK[0x340] = (unint64_t)(v2 + 959);
  sub_1001EC3DC(byte_10023C620, v2 + 959, 0x40uLL);
  STACK[0x318] = (unint64_t)(v2 + 1023);
  v3 = sub_1001EC3DC(byte_100229657, v2 + 1023, 0x40uLL);
  return ((uint64_t (*)(char *))((char *)*(&off_100260750
                                                   + ((((v0 - 383) ^ 0x196 ^ (5 * (v0 ^ 0x112)))
                                                     * ((v1 - 1855095041) < 0xF8)) ^ v0))
                                         - 4))(v3);
}

uint64_t sub_1001AFAE8()
{
  unsigned int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;

  v4 = (v2 - 1402945422) & 0x539F3F36;
  LODWORD(STACK[0x474]) = 1935652826;
  *(_BYTE *)(v3 + 640) = *(_BYTE *)(STACK[0x330] + 0 % ((v4 ^ v0) + v1));
  return ((uint64_t (*)(void))((char *)*(&off_100260750 + ((((v4 - 776) | 0x2C4) - 563) ^ v4)) - 12))();
}

uint64_t sub_1001AFBB0()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t (*v11)(void);

  v5 = (unsigned __int16)(v3 + 14256) % (unsigned __int16)(((v4 - 748) | 0x218) - 219);
  v6 = *(unsigned __int8 *)(v1 + (v3 + v0 + 142) % 0x13Fu);
  HIDWORD(v8) = v6 ^ 0x18;
  LODWORD(v8) = v6 << 24;
  v7 = v8 >> 29;
  HIDWORD(v8) = *(unsigned __int8 *)(v1 + (v3 + v0 + 98) % 0x13Fu);
  LODWORD(v8) = (HIDWORD(v8) ^ 0x18) << 24;
  v9 = ((v8 >> 27) ^ 0xFFFFFFDB)
     + ((2 * (v8 >> 27)) & 0xFFFFFFB6)
     + (*(unsigned __int8 *)(v1 + v5) ^ (v7 + (~(2 * v7) | 0x37) - 27) ^ 0xFFFFFFFC)
     + 37;
  HIDWORD(v8) = *(unsigned __int8 *)(v1 + (v3 + v0) % 0x13Fu);
  LODWORD(v8) = (HIDWORD(v8) ^ 0x18) << 24;
  v10 = ((v8 >> 25) ^ 0xFFFFFFD2) - ((2 * (v8 >> 25)) & 0x5A) + (v9 ^ 0x27) + ((2 * v9) & 0x4E) + 1;
  v11 = (uint64_t (*)(void))((char *)*(&off_100260750 + ((476 * (v3 + 1 != v2 + 1276)) ^ v4)) - 12);
  *(_BYTE *)(v1 + v5) = v10 - ((2 * v10 + 12) & 0x30) + 30;
  return v11();
}

_QWORD *sub_1001AFCF4@<X0>(unsigned int a1@<W1>, int a2@<W3>, int a3@<W8>)
{
  char v3;
  char v4;
  _BYTE *v5;
  int v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  unsigned int v23;
  char v24;
  char v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  char v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned __int8 v63;
  unsigned int v64;
  unsigned int v65;
  char v66;
  char v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  int v92;
  int v93;
  char v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  int v108;
  char v109;
  unsigned int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  unint64_t v115;
  unsigned int v116;
  int v117;
  int v118;
  char v119;
  char v120;
  int v121;
  int v122;

  LODWORD(STACK[0x310]) = 0;
  v8 = (v5[109] ^ 0x18)
     - ((((a3 - 217) | 2) - 197) & (2 * (v5[109] ^ 0x18)))
     + 1554726207;
  v9 = v5[21];
  LODWORD(STACK[0x280]) = (a3 - 217) ^ 0x122;
  v10 = ((((a3 + 39) ^ 0x22) - 75) ^ v9)
      + 406554332
      + (~(2 * ((((a3 + 39) ^ 0x22) - 75) ^ v9)) | 0xFFFFFE47)
      + 1;
  v11 = ((v10 ^ 0x183B86DC | v8 ^ 0x5CAB3D3F) - ((2 * (v10 ^ 0x183B86DC | v8 ^ 0x5CAB3D3F)) & 0xDDDDDDDD) + 46) & 0x73 ^ 0x31;
  v12 = ((((v11 | 0x27751349) - (v11 | 0xD88AECB6) - 661984074) & 0x57501D7 ^ 0x8086104)
       + (((v11 | 0x27751349) - (v11 | 0xD88AECB6) - 661984074) ^ 0xB7F59ED3)
       - ((((v11 | 0x27751349) - (v11 | 0xD88AECB6) - 661984074) ^ 0xB7F59ED3) & 0x85D7)) ^ 0x9DFD685E | (((v10 ^ 0x182B06DC) & (v8 ^ v6)) - ((2 * ((v10 ^ 0x182B06DC) & (v8 ^ v6))) & 0x32) - 1782902759) ^ 0x95BB1019;
  v13 = (v12 - ((2 * v12) & 0x44DBCDB2) + 1651369689) ^ 0x626DE6D9;
  v14 = ((2 * v13 * v13 * v13) & 0xAEBFFFFE) + ((v13 * v13 * v13) ^ 0xD75FFFFF);
  v15 = STACK[0x340];
  LOBYTE(v8) = *(_BYTE *)(STACK[0x340] + (v5[40] & 0x3F ^ 0x18)) & 0x75 ^ 0x31;
  LOBYTE(v8) = (((v8 - ((2 * v8) & 0x22) + 19) & 0x86 ^ 0x82)
              + ((v8 - ((2 * v8) & 0x22) + 19) ^ 0x4C)
              - (((v8 - ((2 * v8) & 0x22) + 19) ^ 0x4C) & 0x86)) ^ 0x8C | ((((v5[352] & 0x80) - (v5[352] | 0xF5)) ^ 0xB0)
                                                                         - 1) ^ 0x38;
  v16 = v8 - (v4 & (2 * v8)) - 37;
  LOBYTE(v8) = v5[355];
  v17 = STACK[0x318];
  LOBYTE(v10) = (*(_BYTE *)(STACK[0x318] + (v5[52] & 0x3F ^ 0x18)) ^ 0xE6) & (v8 ^ 0xE6);
  LOBYTE(v8) = (v10 - ((2 * v10) & 0x46) + 35) ^ 0x23 | (((2 * v8) & 0x10) + (v8 & 0xB8 ^ 0xDF) + 120) ^ 0x4F;
  v18 = v16 ^ v3;
  v19 = (v8 - ((2 * v8) & 0x56) + 43) ^ 0x2B;
  LOBYTE(v8) = (v18 | v19) - 2 * ((v18 | v19) & 3);
  LOBYTE(v8) = ((-36 - v8) | 0xDE) + ((v8 + 51) & 0xA);
  v20 = (((-35 - v8) ^ 0x33) + ((93 - v8) & 0x83) - (((-35 - v8) ^ 0x33) & 0x83)) ^ 0x4D | ((v18 & v19)
                                                                                          - ((2 * (v18 & v19)) & 0xD6)
                                                                                          - 21) ^ 0xEB;
  v21 = (v5[94] ^ 0x18) + (v20 ^ 0x8B) - ((2 * v20) & 0xE8) + 117;
  v5[94] = v21 - ((2 * v21) & 0x30) + 24;
  v22 = v5[139];
  v23 = (v5[366] ^ 0xFFFFFFE6) * (v5[366] ^ 0xFFFFFFE6);
  LODWORD(STACK[0x298]) = (v5[343] ^ 0xFFFFFFE6) - 45 * (~v23 + 2 * v23);
  v24 = (((v22 & 0x12 ^ 0x12) - (v22 & 0x12) + (v22 & 0x36 ^ 4)) | byte_100217C60[v5[85] & 0x3F ^ 0x18] & 0x40) ^ 6;
  v25 = (v24 - ((2 * v24) & 0x6A) + 53) & 0xF7 ^ 0x3D;
  v5[64] ^= (v25 - 2 * (v25 & 1) + 1) ^ 1;
  v26 = *(unsigned __int8 *)(v15 + (v5[157] & 0x3F ^ 0x18)) ^ 0x19;
  LODWORD(STACK[0x2D0]) = v26 - 2 * (v26 & 1);
  v27 = (v5[125] & 0x41) + (v5[125] & 0x88 ^ 9) + 15;
  v28 = (((v27 & 0xFFFFFF8E ^ 0xFFFFFF89) - 1) & 0xFFFFFFFD | v27 & 0x51) ^ 0xFFFFFF9A;
  LODWORD(STACK[0x2C8]) = v28 - ((2 * v28) & 0xFFFFFFF9);
  v29 = *(unsigned __int8 *)(v15 + (v5[104] & 0x3F ^ 0x18)) ^ 0xFFFFFFE6;
  v30 = v5[387];
  v31 = ((v30 & 0xA1 ^ 0xFFFFFF9B) + (v30 & 0xA1 ^ 0xA0 | 0xFFFFFFC7) + ((v30 & 0xA1 ^ 0xA0) & 0x20) - 63) ^ 0xFFFFFFC3;
  v32 = v31 | ((((v30 & 0x26) + (v30 & 0x3E ^ 0x36)) | 0xFFFFFF80) - ((v30 & 0x3E ^ 0x36) & 0xFFFFFFE7)) ^ 0xFFFFFF88;
  v33 = ((v32 - 2 * (v32 & 0x77 ^ v31 & 1) + 118) ^ 0x76) & ((v29 * v29 - ((2 * v29 * v29) & 0x38) - 100) ^ 0xFFFFFF9C);
  LODWORD(STACK[0x2B8]) = v33 - ((2 * v33) & 0xFFFFFF8A);
  LOBYTE(v33) = (v5[52] ^ 0xE7) + (v5[175] ^ 0x18) + 1;
  v5[175] = v33 - ((2 * v33) & 0x30) + 24;
  v34 = 205 * (*(unsigned __int8 *)(v17 + (v5[44] & 0x3F ^ 0x18)) ^ 0xE6);
  LODWORD(STACK[0x2A8]) = (v34 >> 10) - ((v34 >> 9) & 0x1E);
  v5[100] = (v5[100] ^ 0x18) - ((2 * (v5[100] ^ 0x18) + 58) & 0x30) + 21;
  v5[327] = 26;
  LOBYTE(v34) = (v5[386] ^ 0xE6) + (*(_BYTE *)(v15 + (v5[17] & 0x3F ^ 0x18)) ^ 0xE6);
  LOBYTE(v31) = byte_100217C60[v5[57] & 0x3F ^ 0x18];
  v5[386] = v34 - ((2 * v34) & 0xCC) - 26;
  LOBYTE(v34) = ((v31 & 0x60 ^ 0x25) + (v31 & 0x13) - 1) ^ 0x74;
  LOBYTE(v11) = ((v34 | 0xE8) - (v34 | 0x17) + 23) ^ 0xB9 | ((v5[415] & 0x8C ^ 0x7B)
                                                           + ((2 * (v5[415] & 0x8C)) | 0x2C)
                                                           + 107) ^ 0x96;
  v35 = (v11 - ((2 * v11) & 0x8C) - 58) ^ 0xC6;
  v36 = (v5[101] ^ 0x18)
      + (((171 * v35) >> 9) ^ 0x30)
      - (((171 * v35) >> 8) & 0x9E)
      - 48;
  v5[101] = v36 - ((2 * v36) & 0x30) + 24;
  v37 = byte_100217C60[v5[217] & 0x3F ^ 0x18];
  v38 = (((v37 & 0x75 ^ 0xFFFFFF8F) - ((2 * v37) & 0x60) + 48) ^ 0x30) & (v5[398] ^ 0xFFFFFFE6);
  v39 = (v38 - ((2 * v38) & 0xFFFFFFCF) + 103) ^ 0x67 | ((v37 & 0x8A) - ((2 * v37) & 0x14) + 59) ^ 0x3B;
  v40 = (v39 - ((2 * v39) & 0xFFFFFFE7) - 13) ^ 0xFFFFFFF3 | (v5[7] >> 1) ^ 0xC;
  LOBYTE(v40) = (v5[249] ^ 0x18) + (v40 ^ 0x18) - ((2 * v40) & 0xCF) - 24;
  v5[249] = v40 + (~(2 * v40) | 0xCF) + 25;
  v5[30] ^= 0x58u;
  LOBYTE(v40) = *(_BYTE *)(v15 + (v5[241] & 0x3F ^ 0x18));
  LOBYTE(v40) = (v40 & 0xE4 ^ 0x7C) - (v40 | 0xE7) - 25;
  LOBYTE(v40) = (((v40 ^ 0x67) + ((2 * v40) & 0x40) - 35) | v5[383] & 3 ^ 2) ^ 0xDC;
  LOBYTE(v34) = (v40 - ((2 * v40) & 0x2C) - 106) ^ 0x96;
  LOBYTE(v34) = (((v34 * v34) ^ 0x5E) + ((2 * v34 * v34) & 0xBC) - 94) * v34;
  LODWORD(STACK[0x2E8]) = v14;
  LOBYTE(v40) = *(_BYTE *)(v15 + ((63 - (_BYTE)v14) & 0x3F));
  v5[215] = v34 + (~(2 * v34) | 0xCF) + 25;
  LOBYTE(v34) = *(_BYTE *)(v15 + (v5[13] & 0x3F ^ 0x18));
  v5[446] = v40;
  v41 = ((((v34 & 0x2C ^ 0x1F) + 63) & 0x2C ^ 0xAB) - ((2 * ((v34 & 0x2C ^ 0x1F) + 63)) & 8) - 44) ^ 0xD4;
  LOBYTE(v40) = (v5[146] ^ 0xAA) + 78 + ((2 * (v5[146] ^ 0x10)) & 0x64);
  LOBYTE(v40) = ((2 * ((v40 * v40 + 16) ^ 0x10) * v40) & 0x54) + ((((v40 * v40 + 16) ^ 0x10) * v40) ^ 0xAA);
  v42 = (v41 - ((2 * v41) & 0x1F6) - 1643132165) ^ 0x9E0FCAFB;
  v5[381] = ((v42 << ((v40 + 6) & 7)) - ((2 * (v42 << ((v40 + 6) & 7))) & 0x6A) + 53) ^ ((v42 >> ((2 - v40) & 7))
                                                                                       - ((2 * (v42 >> ((2 - v40) & 7))) & 0x26)
                                                                                       + 19) ^ 0xC0;
  v43 = (v5[131] ^ 0x18) - ((2 * (v5[131] ^ 0x18)) & 0x172) + 554257337;
  v44 = (v5[393] ^ 0xE6) - ((2 * (v5[393] ^ 0xE6)) & 0xCA) + 655203941;
  v45 = (((v44 ^ 0x270D9E65 | v43 ^ 0x21094BB9) - ((2 * (v44 ^ 0x270D9E65 | v43 ^ 0x21094BB9)) & 0x3FD2) + 8169) ^ 0x1FE9) & (((v5[400] ^ 0xE6) - ((2 * (v5[400] ^ 0xE6)) & 0x68) + 1055408436) ^ 0x3EE84134);
  v46 = (v45 - ((2 * v45) & 0x80E92B4) + 1141328218) ^ 0x4407495A | (((v44 ^ 0x21090E65) & (v43 ^ 0x3B9))
                                                                   - ((2 * ((v44 ^ 0x21090E65) & (v43 ^ 0x3B9))) & 0x5F909852)
                                                                   - 272085975) ^ 0xEFC84C29;
  LOBYTE(v43) = *(_BYTE *)(v17 + (v5[220] & 0x3F ^ 0x18)) & 3 ^ 6;
  LOBYTE(v8) = (v43 - ((2 * v43) & 4) - 50) ^ 0xD6;
  LOBYTE(v8) = ((2 * v8) & 0xE7) + (v8 ^ 0xF3);
  v47 = (v46 - ((2 * v46) & 0x62C05DFE) + 1902128895) ^ 0x71602EFF;
  LOBYTE(v47) = ((v47 >> (v8 + 13)) - ((2 * (v47 >> (v8 + 13))) & 0xF2) + 121) ^ ((v47 << (-5 - v8))
                                                                                - ((2 * (v47 << (-5 - v8))) & 0xAE)
                                                                                + 87);
  LOBYTE(v47) = (v5[330] ^ 0xE6) + (v47 ^ 0x51) + ((2 * v47) ^ 0x5C) - 127;
  v5[330] = v47 - ((2 * v47) & 0xCC) - 26;
  v48 = (v5[10] >> 1) ^ 0xC;
  LOBYTE(v43) = *(_BYTE *)(v17 + (v5[27] & 0x3F ^ 0x18));
  LOBYTE(v43) = (v43 ^ 0x19) + 2 * (v43 ^ 0xE6) + 1;
  LOBYTE(v43) = ((2 * v43 * v43) & 0x42) + ((v43 * v43) ^ 0x21);
  v49 = (v48 - ((2 * v48) & 0xB8) + 858890332) ^ 0x3331A05C;
  v50 = ((v49 >> ((v43 - 1) & 7)) - ((2 * (v49 >> ((v43 - 1) & 7))) & 0x98) + 76) ^ ((v49 << ((1 - v43) & 7))
                                                                                   - ((2 * (v49 << ((1 - v43) & 7))) & 0xC2)
                                                                                   + 225);
  v51 = (v5[67] ^ 0x18) + (v50 ^ 0x2C) + ((4 * (v50 >> 1)) ^ 0xFFFFFFA7) - 128;
  v5[67] = v51 - ((2 * v51) & 0x30) + 24;
  LOBYTE(v51) = byte_100217C60[v5[136] & 0x3F ^ 0x18] & 0xAC ^ 0x84;
  LOBYTE(v51) = ((((2 * v51) & 0x18) - v51 - 77) ^ 0x36) - 1;
  v52 = v5[195];
  LOBYTE(v51) = (v52 ^ 0x18) + (v51 & 0xEF ^ 0x6B) + ((2 * v51) & 0xD8 ^ 0x28) - 125;
  v5[195] = v51 + ~(2 * (v51 & 0x99 ^ v52 & 1)) + 25;
  v53 = (*(unsigned __int8 *)(v15 + (v5[182] & 0x3F ^ 0x18)) ^ 0xFFFFFFE6) + 13;
  v54 = ((2 * v53) & 0xFFFFFFAC) + (v53 ^ 0x56);
  v55 = 171 * (byte_100217C60[v5[56] & 0x3F ^ 0x18] ^ 0xE3);
  v56 = ((v55 >> 8) & 0xF2) + ((v55 >> 9) ^ 0x79);
  v57 = *(unsigned __int8 *)(v15 + (v5[196] & 0x3F ^ 0x18)) ^ 0xFFFFFFE6;
  v58 = *(unsigned __int8 *)(v17 + (v5[21] & 0x3F ^ 0x18)) ^ 0xFFFFFFE6;
  v59 = ((v58 | v57) - ((2 * (v58 | v57)) & 0x18) + 12) & 0x49 ^ 9;
  v60 = (((2 * v59) & 0xFFFFFF8F) - v59 - 70) ^ 0xFFFFFFBA;
  v61 = ((v60 | 0xFFFFFFA1) - (v60 | 0x5E) + 94) ^ 0xFFFFFFA0 | ((v58 & v57) + (~(2 * (v58 & v57)) | 0xFFFFFFA5) - 82) ^ 0xFFFFFFAD;
  v62 = (*(unsigned __int8 *)(v17 + (v5[127] & 0x3F ^ 0x18)) ^ 0xFFFFFFE6)
      + (v5[423] ^ 0xFFFFFFE6)
      + (v61 ^ 0xFFFFFF87)
      - 16 * (v61 >> 3)
      + 121;
  v5[423] = v62 - ((2 * v62) & 0xCC) - 26;
  LOBYTE(v62) = (((*(_BYTE *)(v17 + (v5[65] & 0x3F ^ 0x18)) & 2 ^ 0xA) - 52) ^ 0xDC) & (v5[140] ^ 8);
  v5[369] = v62 - ((2 * v62) & 4) - 26;
  v63 = ((v5[134] & 0x89 ^ 0x3E) - ((2 * (v5[134] & 0x89 ^ 0x3E) + 28) & 0x10) + 86) ^ 0xF8;
  v5[321] = v63 / 5u - (((205 * v63) >> 9) & 0xCC) - 26;
  v64 = 171 * (v5[339] ^ 0xE6);
  v65 = ((v64 >> 9) - ((v64 >> 8) & 0x6A) + 53) & 0x4D ^ 0xFFFFFFC4;
  v66 = (*(_BYTE *)(v15 + (v5[39] & 0x3F ^ 0x18)) ^ 0xE6) + 50;
  v67 = (v66 ^ 0x3B) + ((2 * v66) & 0x36) + 5;
  LOBYTE(v65) = (((2 * v65) | 0x4C) - v65 + 90) ^ 0x67 | ((v67 & 0x32) - ((2 * v67) & 0x20) - 36) ^ 0xDC;
  LOBYTE(v65) = (v5[330] ^ 0xE6) + (v65 ^ 0xB2) + ((2 * v65) & 0x64) + 78;
  v5[330] = v65 - ((2 * v65) & 0xCC) - 26;
  LOBYTE(v65) = (v5[322] & 7 ^ 6 | 0x8D) - (v5[322] & 7 ^ 6 | 0x72) + 114;
  LOBYTE(v57) = v65 ^ 0xD2;
  LOBYTE(v58) = v65 ^ 0xD;
  v68 = ((a1 >> ((7 - (((2 * v58) & 0xBE) + v57)) & 7))
       - ((0x6Eu >> ((7 - (((2 * v58) & 0xBE) + v57)) & 7)) & 0x36)
       - 1453256741) ^ ((a1 << (((2 * v58) & 0xBE) + v57 - 95))
                      - 1431738406
                      + (~(110 << (((2 * v58) & 0xBE) + v57 - 95)) | 0xAAAD304D));
  v69 = ((((v68 & a2 ^ 0x3C8682F) + 78284 + ((2 * (v68 & a2 ^ 0x3C8682F)) & 0x26380 ^ 0x3FFE7)) | 1) ^ 0x131CC) & (((v5[401] ^ 0xE6) - ((2 * (v5[401] ^ 0xE6)) & 0x144) - 1457111134) ^ 0xA9263FA2);
  v70 = (v69 - ((2 * v69) & 0x368F65AE) - 1689799977) ^ 0x9B47B2D7 | ((v68 & 0x2C | 0x258CDFD3)
                                                                    - ((v68 & 0x2D)
                                                                     + 264832)
                                                                    + (((v68 & 0x2D) + 264832) & 0x40AAC)) ^ 0x258CDFD3;
  v71 = v70 + (~(2 * v70) | 0xFFFFFFC9) - 100;
  LODWORD(STACK[0x2A0]) = v71 ^ 0xFFFFFF8E;
  LODWORD(STACK[0x29C]) = (2 * v71) & 0x2A ^ 0x22;
  LOBYTE(v71) = (v5[237] ^ 0x18) + (byte_100217C60[v5[201] & 0x3F ^ 0x18] ^ 0xFA);
  v5[237] = v71 - ((2 * v71) & 0x30) + 24;
  v72 = *(unsigned __int8 *)(v17 + (v5[120] & 0x3F ^ 0x18)) ^ 0xE6;
  v73 = (v5[400] ^ 0xE6) - 2 * ((v5[400] ^ 0xE6) & 0x7F) + 1473653631;
  v74 = v72 - ((2 * v72) & 0x9E) + 265454415;
  v75 = (((v74 ^ 0xFD2834F | v73 ^ 0x57D62B7F) - ((2 * (v74 ^ 0xFD2834F | v73 ^ 0x57D62B7F)) & 0x816) + 3083) ^ 0xC0B) & (((v5[392] ^ 0xE6) - ((2 * (v5[392] ^ 0xE6)) & 0x142) + 2006919329) ^ 0x779F28A1);
  v76 = (v75 - ((2 * v75) & 0x260FAF48) + 319281060) ^ 0x1307D7A4 | (((v74 ^ 0x7D0034F) & (v73 ^ 0x22B7F))
                                                                   - ((2 * ((v74 ^ 0x7D0034F) & (v73 ^ 0x22B7F))) & 0x311BF0E0)
                                                                   - 661784464) ^ 0xD88DF870;
  v77 = ((v5[436] ^ 0xE6) - ((2 * (v5[436] ^ 0xE6)) & 0x1E4) + 1103120626) ^ 0x41C048F2;
  v78 = v76 - ((2 * v76) & 0x7A0EE6B6) + 1023898459;
  v79 = ((v78 ^ 0x3D07735B | v77) - ((2 * (v78 ^ 0x3D07735B | v77)) & 0x1C) + 14) & 0x4F ^ 0x47;
  v80 = (v79 - 530376418 - ((2 * v79) & 0xFFFFFF8F) + 57) ^ 0xE063191E | (((v78 ^ 0x35B) & v77)
                                                                        - ((2 * ((v78 ^ 0x35B) & v77)) & 0x32DBCD1E)
                                                                        + 1500374671) ^ 0x596DE68F;
  LODWORD(STACK[0x290]) = v80 - ((2 * v80) & 0xF2);
  LODWORD(STACK[0x308]) = v54;
  v81 = v5[327];
  v82 = ((*(unsigned __int8 *)(v15 + (((_BYTE)v54 + 42) & 0x3F)) >> 1) ^ 0x73) & (v81 ^ 0x66);
  LOBYTE(v81) = ((((v5[208] ^ 0x18) + 43) ^ 0x3A) + ((2 * ((v5[208] ^ 0x18) + 43)) & 0x74) - 58) & (v81 ^ 0x19);
  v83 = (v81 + (~(2 * v81) | 0x63) + 79) ^ v7 | (v82 - ((2 * v82) & 0xCC) + 102) ^ 0x66;
  v84 = (v5[335] ^ 0xE6) + (v83 ^ 0xD7) + ((2 * v83) & 0xAE) + 41;
  v5[335] = v84 - ((2 * v84) & 0xCC) - 26;
  v85 = *(_BYTE *)(v17 + (v5[162] & 0x3F ^ 0x18));
  LOBYTE(v82) = (((v85 & 0x81 ^ 0xFE) + ((2 * (v85 & 0x81)) ^ 0xBB) - 92) ^ 0xA3) & (v5[323] ^ 0xE6);
  v86 = (v82 - ((2 * v82) & 0x6C) + 54) ^ 0x36 | v85 & 0x7E ^ 0x66;
  LOBYTE(v82) = *(_BYTE *)(v15 + (v5[65] & 0x3F ^ 0x18));
  v5[394] ^= (((v86 + (~(2 * v86) | 0xA1) + 48) & 0xFE) >> 1) ^ 0x17;
  v5[356] ^= 0x1A ^ ((v82 ^ 0xE6) - ((2 * (v82 ^ 0xE6) + 98) & 0x68) + 101);
  v87 = (v5[103] ^ 0xE7) + (v5[436] ^ 0xE6) + 1;
  v5[436] = v87 - ((2 * v87) & 0xCC) - 26;
  v88 = *(_BYTE *)(v17 + (v5[173] & 0x3F ^ 0x18));
  v89 = ~(((2 * v88) ^ 0x33) + ((4 * v88) ^ 0x98)) + (v5[227] ^ 0x18);
  v5[227] = v89 - ((2 * v89) & 0x30) + 24;
  LODWORD(STACK[0x2D8]) = v56;
  v5[383] ^= *(_BYTE *)(v17 + (((_BYTE)v56 + 7) & 0x3F)) ^ 0xE6;
  v90 = (v5[26] ^ 0x18) * (v5[26] ^ 0x18);
  v91 = (v5[350] ^ 0xE6) + (v90 ^ 0xC9) - ((2 * v90) & 0x6C) + 55;
  v5[350] = v91 - ((2 * v91) & 0xCC) - 26;
  LOBYTE(v82) = *(_BYTE *)(v15 + (v5[136] & 0x3F ^ 0x18)) ^ 0xE6;
  LOBYTE(v65) = (v5[385] ^ 0xE6) - ((2 * (v5[385] ^ 0xE6)) & 0xBE) + 95;
  LOBYTE(v82) = v82 - ((2 * v82) & 0x1F) - 113;
  LOBYTE(v8) = (((v82 ^ 0x8F | v65 ^ 0x5F) - ((2 * (v82 ^ 0x8F | v65 ^ 0x5F)) & 0xAE) + 87) ^ 0x57) & (((v5[378] ^ 0xE6) - ((2 * (v5[378] ^ 0xE6)) & 0x1C) + 14) ^ 0xE);
  LOBYTE(v8) = (v8 - ((2 * v8) & 0x86) + 67) ^ 0x43 | (((v82 ^ 0x8F) & (v65 ^ 0x5F))
                                                     - ((2 * ((v82 ^ 0x8F) & (v65 ^ 0x5F))) & 0xE8)
                                                     - 12) ^ 0xF4;
  LOBYTE(v8) = v8 - ((2 * v8) & 0xE8) - 12;
  LOBYTE(v65) = ((v8 & 0xBD ^ 0x3C | 0x6F) - (v8 & 0xBD ^ 0x3C | 0x90) - 112) ^ 0x8D;
  LOBYTE(v82) = ((2 * v65) | 0x88) - v65 + 60;
  v92 = (v5[374] >> 1) ^ 0x73;
  LOBYTE(v8) = (((v8 & 0xC2 ^ 0xFD) - ((2 * (v8 & 0xC2 ^ 0xFD)) & 4) - 26) ^ 0x1E) & ((v92 - ((2 * v92) & 0x30) - 104) ^ 0x98);
  LOBYTE(v8) = (v8 - ((2 * v8) & 0xA2) - 47) ^ 0xD1 | v82 ^ 0xAE;
  v5[358] = (v8 - ((2 * v8) & 0x36) - 101) ^ 0x7D;
  v93 = v5[422] ^ 0xE6;
  v94 = v93 - 34;
  v95 = v93 + 1824918494 - ((2 * v93) & 0x184) - 28;
  v96 = (v95 & 0x8A ^ 0x41D41509) + (v94 & 2 ^ 0xB22BE206) - ((v95 & 0x8A ^ 0x41D41509) & 0x40141403);
  v97 = (v95 ^ 0x743D) & (((v5[92] ^ 0x18)
                         - ((2 * (v5[92] ^ 0x18)) & 0x112)
                         - 791297655) ^ 0xD0D5C189);
  v98 = (v97 - ((2 * v97) & 0x18BD41DC) - 1939955474) ^ 0x8C5EA0EE | v96 ^ 0xB3EBE38C;
  v99 = 205 * (v5[155] ^ 0x18);
  LOBYTE(v99) = ((v99 >> 10) - ((v99 >> 9) & 4) + 2) & 7 ^ 6;
  LOBYTE(v99) = (v99 - 2 * (v99 & 3) + 91) ^ 0x4F;
  LOBYTE(v82) = ((v99 | 0x5E) - (v99 | 0xA1) + 33) ^ 0xCE;
  v100 = (v98 - ((2 * v98) & 0x5CC5DE48) - 295506140) ^ 0xEE62EF24;
  v101 = v100 << ((((v99 | 0x5E) - (v99 | 0xA1) + 33) ^ 0x36) + ((2 * v82) & 0xF0) + 8);
  v102 = (v101 + (~(2 * v101) | 0xFFFFFF61) + 208) ^ ((v100 >> (-(char)v82 & 7))
                                                    - 2 * ((v100 >> (-(char)v82 & 7)) & 1)
                                                    + 1);
  LOBYTE(v38) = (v5[395] ^ 0xE6) + (v102 ^ 0xCC) + ((2 * v102) & 0xFB ^ 0x67) - 1;
  v5[395] = v38 - ((2 * v38) & 0xCC) - 26;
  v5[345] ^= 0xFDu;
  v5[343] = LOBYTE(STACK[0x298]) - 45 + (~(2 * (LOBYTE(STACK[0x298]) - 45)) | 0x33) - 25;
  v103 = v5[69] & 0xAC ^ 0xFFFFFF88;
  LODWORD(STACK[0x298]) = (((((v103 | 0xFFFFFFE2) - (v103 | 0x1D) + 29) & 0xFFFFFFBC ^ 0x62)
                          + ((2 * ((v103 | 0xFFFFFFE2) - (v103 | 0x1D) + 29)) & 0x30 ^ 0x7F)
                          + 89) ^ 0x58)
                        * (*(unsigned __int8 *)(v15 + (v5[116] & 0x3F ^ 0x18)) ^ 0x19);
  LOBYTE(v103) = (2 * *(_BYTE *)(v17 + (v5[85] & 0x3F ^ 0x18))) ^ 0xCC;
  v5[96] = (v103 - ((2 * v103) & 0x4C) - 89) ^ 0x40;
  v104 = (v5[39] & 0x48 ^ 8) + ((v5[39] >> 1) & 0x6C ^ 0x3B) + 47;
  LODWORD(STACK[0x288]) = v104;
  v105 = (v104 & 0xFE) - ((2 * v104) & 0xF0) - 276130184;
  LOBYTE(v102) = (*(_BYTE *)(v15 + (((v104 & 0xFE) - ((2 * (_BYTE)v104) & 0xF0) + 120) & 0x3E ^ 0x38)) ^ 0xE6) & (byte_100217C60[v5[33] & 0x3F ^ 0x18] ^ 5);
  v5[373] ^= 0x89 ^ (v102 - ((2 * v102) & 0x12) - 119);
  LOBYTE(v102) = (v5[239] & 0x3F ^ 0x35) + (v5[239] & 0x3D ^ 0x88) - ((v5[239] & 0x3F ^ 0x35) & 0xFD);
  v106 = ((v102 & 0x9F ^ 0x8E) + (v102 ^ 0x51) - ((v102 ^ 0x51) & 0x9F)) ^ 0x5ELL;
  LOBYTE(v102) = *(_BYTE *)(v17 + v106) ^ 0xE6 | v5[148] ^ 0x18;
  LOBYTE(v102) = ((v102 + (~(2 * v102) | 0xC3) - 97) & 0xC6 ^ 0xC3) - 1;
  v107 = *(unsigned __int8 *)(v17 + (v5[105] & 0x3F ^ 0x18));
  v108 = ((32 * ((v107 >> 4) & 1)) | 0x49) - (v107 & 0x18);
  LOBYTE(v102) = ((v102 & 0x84 ^ 0xA1) + (v102 ^ 0x4C) - ((v102 ^ 0x4C) & 0x84)) ^ 0xAD | ((v108 ^ 0xF6)
                                                                                         + ((2 * v108) & 0xA0)
                                                                                         + 44) ^ 0x6B;
  v109 = v102 - ((2 * v102) & 0x60);
  LOBYTE(v108) = v5[354];
  LOBYTE(v102) = (v5[221] ^ 0x18) & (v108 ^ 0xE6);
  LOBYTE(v108) = (v5[339] ^ 0xE6) & (v108 ^ 0x19);
  LOBYTE(v102) = (v108 - ((2 * v108) & 0xFB) - 3) ^ 0xFD | (v102 - ((2 * v102) & 0xB2) - 39) ^ 0xD9;
  v5[441] = (v102 - ((2 * v102) & 0xCF) + 39) & 0x7F ^ 0xC1;
  v110 = 205 * (*(unsigned __int8 *)(v15 + (v5[171] & 0x3F ^ 0x18)) ^ 0xE6);
  v111 = (v5[24] ^ 0x18) + ((v110 >> 10) ^ 0x59) + ((v110 >> 9) & 0x32) - 89;
  v5[44] ^= 0x62 ^ (v111 - ((2 * v111) & 0xC4) + 98);
  v112 = (v5[137] >> 1) & 0x24 ^ 0xE;
  LOBYTE(v112) = ((v112 | 0x62) - (v112 | 0x9D) - 99) ^ 0x68 | v5[329] & 0x53 ^ 0x42;
  v5[423] ^= 0x97 ^ (v112 + (~(2 * v112) | 0xD1) - 104);
  v5[344] ^= (3 * (((v5[67] & 0xD0 ^ 0x3F) + ((2 * (v5[67] & 0xD0)) ^ 0x9D) - 14) ^ 0xF1)
                             - ((6 * (((v5[67] & 0xD0 ^ 0x3F) + ((2 * (v5[67] & 0xD0)) ^ 0x9D) - 14) ^ 0xF1)) & 0xD8)
                             - 18) ^ 0xEE;
  v5[370] = 83;
  v5[419] ^= 0xBDu;
  LOBYTE(v108) = *(_BYTE *)(v15 + (v5[37] & 0x3F ^ 0x18));
  LOBYTE(v112) = ((v108 & 0x56 ^ 0x74) - (v108 | 0xF7)) ^ 0x3B | ((v5[400] & 0xA1 ^ 0xC1)
                                                                - ((2 * (v5[400] & 0xA1 ^ 0xC1)) & 0x83)
                                                                - 51) ^ 0xAC;
  LOBYTE(v112) = ((v112 - ((2 * v112) & 0x6C) - 74) ^ 0xB8) + (v5[188] ^ 0x18);
  LODWORD(STACK[0x294]) = byte_100217C60[v106];
  LOBYTE(v55) = v112 - ((2 * v112) & 0x30);
  LOBYTE(v112) = v5[61] ^ 0x18;
  LOBYTE(v104) = byte_100217C60[v5[193] & 0x3F ^ 0x18] ^ 5;
  LOBYTE(v108) = (((v104 | v112) - ((2 * (v104 | v112)) & 0xE4) + 114) ^ 0x72) & (v5[403] ^ 0xE6);
  LOBYTE(v104) = (v108 + (~(2 * v108) | 0xDD) + 18) ^ 0x11 | ((v104 & v112) - ((2 * (v104 & v112)) & 0x14) + 10) ^ 0xA;
  LOBYTE(v104) = (v5[357] ^ 0xE6) + (v104 ^ 0xC2) - ((2 * v104) & 0x7A) + 62;
  v5[357] = v104 - ((2 * v104) & 0xCC) - 26;
  LOBYTE(v112) = (*(_BYTE *)(v15 + (v5[159] & 0x3F ^ 0x18)) ^ 0xE6) & ((v109 - 80) ^ 0x4F);
  LOBYTE(v112) = (((v112 - ((2 * v112) & 0x76) + 59) & 0x9C ^ 0x85) - ((v112 + 1) | 0xFE) - 2) ^ 0x21;
  LOBYTE(v112) = ((v112 | 0xC3) - (v112 | 0x3C) + 60) & 0xDD ^ 0x7E;
  v5[371] ^= (v112 - ((2 * v112) & 0x10) + 8) ^ 8;
  LOBYTE(v108) = (v5[116] ^ 0x18) - ((2 * (v5[116] ^ 0x18)) & 0xB6) - 37;
  LOBYTE(v59) = (v5[416] ^ 0xE6) - ((2 * (v5[416] ^ 0xE6)) & 0x6C) + 54;
  LOBYTE(v92) = (((v59 ^ 0x36 | v108 ^ 0xDB) - ((2 * (v59 ^ 0x36 | v108 ^ 0xDB)) & 0x8E) + 71) ^ 0x47) & (((v5[349] ^ 0xE6) - ((2 * (v5[349] ^ 0xE6)) & 0xC8) + 100) ^ 0x64);
  LOBYTE(v92) = (v92 - ((2 * v92) & 0x3A) - 99) ^ 0x9D | (((v59 ^ 0x36) & (v108 ^ 0xDB))
                                                        - ((2 * ((v59 ^ 0x36) & (v108 ^ 0xDB))) & 0xB2)
                                                        - 39) ^ 0xD9;
  v113 = (v105 >> 1) ^ 0x77C54B3C;
  LOBYTE(v92) = v92 - ((2 * v92) & 0x7C) + 62;
  LOBYTE(v112) = (((v92 ^ 0x3E | v113) - ((2 * (v92 ^ 0x3E | v113)) & 0xEA) - 11) ^ 0xF5) & (((v5[321] ^ 0xE6)
                                                                                            - ((2 * (v5[321] ^ 0xE6)) & 0x1A)
                                                                                            - 115) ^ 0x8D);
  LOBYTE(v113) = (v112 - ((2 * v112) & 0x6A) + 53) ^ 0x35 | (((v92 ^ 0x3E) & v113)
                                                           - ((2 * ((v92 ^ 0x3E) & v113)) & 0x46)
                                                           - 93) ^ 0xA3;
  v5[347] = (v113 - ((2 * v113) & 0x4A) + 37) ^ 0xC3;
  v5[188] = v55 + 24;
  v114 = *(unsigned __int8 *)(v17 + (((_BYTE)v55 + 24) & 0x3F ^ 0x18));
  HIDWORD(v115) = v114 ^ 2;
  LODWORD(v115) = (v114 ^ 0xFFFFFFE7) << 24;
  LOBYTE(v55) = 2 * (((2 * ((v5[4] & 7 ^ 3) & 3) - (v5[4] & 7 ^ 3) + 20) ^ 0x17) & 0xF)
              + ((2 * ((v5[4] & 7 ^ 3) & 3) - (v5[4] & 7 ^ 3) + 20) ^ 0x78);
  v116 = ((v5[430] ^ 0xE6) - ((2 * v5[430]) & 0x12) + 1169180425) ^ 0x45B04709;
  v117 = (v116 << (v55 - 111)) - ((2 * (v116 << (v55 - 111))) & 0x59843EF8) - 1396564100;
  v118 = (v116 >> ((7 - v55) & 7)) - ((2 * (v116 >> ((7 - v55) & 7))) & 0x167C6E30) - 1958856936;
  v119 = *(_BYTE *)(v17 + (v5[41] & 0x3F ^ 0x18));
  LOBYTE(v101) = (v5[247] ^ 0x18) - ((2 * v5[247]) & 0x46) + 35;
  v120 = (v119 ^ 0xE6) - ((2 * v119) & 0x32) + 25;
  LOBYTE(v55) = (((v120 ^ 0x19 | v101 ^ 0x23) - ((2 * (v120 ^ 0x19 | v101 ^ 0x23)) & 0x92) - 55) ^ 0xC9) & (((v5[415] ^ 0xE6) - ((2 * v5[415]) & 0x10) + 8) ^ 8);
  LOBYTE(v55) = (v55 - ((2 * v55) & 0xBA) + 93) ^ 0x5D | (((v120 ^ 0x19) & (v101 ^ 0x23))
                                                        - ((2 * ((v120 ^ 0x19) & (v101 ^ 0x23))) & 0x90)
                                                        - 56) ^ 0xC8;
  LOBYTE(v118) = v117 ^ 0x64 ^ v118;
  LOBYTE(v55) = (v55 - ((2 * v55) & 0xBC) + 94) ^ 0x5E;
  LOBYTE(v112) = (((v55 | v118) - ((2 * (v55 | v118)) & 0xA2) + 81) ^ 0x51) & (((v5[381] ^ 0xE6)
                                                                              - ((2 * (v5[381] ^ 0xE6)) & 0x50)
                                                                              + 40) ^ 0x28);
  LOBYTE(v112) = (v112 - ((2 * v112) & 0xB2) + 89) ^ 0x59 | ((v55 & v118) - ((2 * (v55 & v118)) & 0xCE) + 103) ^ 0x67;
  LOBYTE(v112) = (v5[354] ^ 0xE6)
               + ((v112 - ((2 * v112) & 0xE0) + 112) ^ 0x87)
               + ((2 * (v112 - ((2 * v112) & 0xE0) + 112)) & 0xEF ^ 0xE0)
               + 9;
  v5[354] = v112 - ((2 * v112) & 0xCC) - 26;
  LOBYTE(v112) = (v5[442] ^ 0xE6) - ((2 * (v5[442] ^ 0xE6)) & 0xDD) - 18;
  LOBYTE(v118) = (((v5[372] ^ 0xE6) - ((2 * (v5[372] ^ 0xE6)) & 0xB6) + 91) ^ 0x5B) & (v112 ^ 0x11);
  LOBYTE(v112) = (v118 - ((2 * v118) & 0x42) + 33) ^ 0x21 | ((v112 & 0xE3 ^ 0x3E) + 60) & 0x23;
  LOBYTE(v112) = (v112 - ((2 * v112) & 0x74) - 70) ^ 0xBA;
  v5[339] = (v112 * v112 + (~(2 * v112 * v112) | 0x57) - 43) ^ 0x32;
  LOBYTE(v112) = v5[444] & 0x25 ^ 0x2D;
  LOBYTE(v112) = (v5[322] ^ 0xE6)
               + (((v112 | 0xE0) - (v112 | 0x1F) + 31) & 0xE5 ^ 0x29)
               + ((2 * ((v112 | 0xE0) - (v112 | 0x1F) + 31)) & 0x4A ^ 0xAD)
               + 63;
  LOBYTE(v112) = (v5[361] ^ 0xE6) + (v112 ^ 0xFD) + ((2 * v112) & 0xFB) + 3;
  v5[361] = v112 - ((2 * v112) & 0xCC) - 26;
  v121 = (61 * (LODWORD(STACK[0x474]) == 1935652810)) ^ a3;
  v122 = LODWORD(STACK[0x2B8]) + 69;
  LODWORD(STACK[0x28C]) = LODWORD(STACK[0x2A8]) - 49;
  v5[151] = 24;
  LODWORD(STACK[0x2A8]) = LODWORD(STACK[0x290]) + 138;
  LODWORD(STACK[0x2C8]) = (v115 >> 26) - ((2 * (v115 >> 26)) & 0x60) - 80;
  return ((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, void *, void *))*(&off_100260750 + v121))(qword_100215970, v122 ^ 0xEu, &unk_10023B1A0, &unk_100215900);
}

