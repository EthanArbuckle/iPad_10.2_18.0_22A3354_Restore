void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1C3BD3770]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1Tm(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1C3BD377C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void std::__tree<std::__value_type<std::string,OVM::Var>,std::__map_value_compare<std::string,std::__value_type<std::string,OVM::Var>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OVM::Var>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,OVM::Var>,std::__map_value_compare<std::string,std::__value_type<std::string,OVM::Var>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OVM::Var>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,OVM::Var>,std::__map_value_compare<std::string,std::__value_type<std::string,OVM::Var>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OVM::Var>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,OVM::Var>,std::__map_value_compare<std::string,std::__value_type<std::string,OVM::Var>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OVM::Var>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void **std::__tree<std::__value_type<std::string,OVM::Var>,std::__map_value_compare<std::string,std::__value_type<std::string,OVM::Var>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OVM::Var>>>::__find_equal<std::string>(_QWORD *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  void **v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  _QWORD *v16;
  BOOL v17;
  void **v19;

  v9 = (void **)(a1 + 1);
  if (a1 + 1 == (_QWORD *)a2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      v12 = (_QWORD *)a2;
    }
    else
    {
      v11 = *(_QWORD **)a2;
      if (*(_QWORD *)a2)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)v11[1];
        }
        while (v11);
      }
      else
      {
        v16 = (_QWORD *)a2;
        do
        {
          v12 = (_QWORD *)v16[2];
          v17 = *v12 == (_QWORD)v16;
          v16 = v12;
        }
        while (v17);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, a5) & 0x80) == 0)
        return (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
    }
    if (*(_QWORD *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a2 + 32), a5) & 0x80) != 0)
  {
    a4 = (uint64_t *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 8);
    if (v13)
    {
      v14 = *(void ***)(a2 + 8);
      do
      {
        v15 = v14;
        v14 = (void **)*v14;
      }
      while (v14);
    }
    else
    {
      v19 = (void **)a2;
      do
      {
        v15 = (void **)v19[2];
        v17 = *v15 == v19;
        v19 = v15;
      }
      while (!v17);
    }
    if (v15 == v9)
      goto LABEL_27;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, v15 + 4) & 0x80) != 0)
    {
      v13 = *a4;
LABEL_27:
      if (v13)
      {
        *a3 = v15;
        return v15;
      }
      else
      {
        *a3 = (void **)a2;
      }
      return (void **)a4;
    }
    return (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  *a3 = (void **)a2;
  *a4 = a2;
  return (void **)a4;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

void OVM::InterpreterImpl::RunSubroutine(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  void **v8;
  uint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t *v23[2];
  std::string v24;
  std::string v25;
  void *__p[2];
  std::string::size_type v27;
  _QWORD v28[4];
  __int128 v29;
  uint64_t v30;
  void **v31;

  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>>>::find<std::string>(a1[6], (void **)a2);
  if ((void **)(a1[6] + 8) == v8)
  {
    *((_BYTE *)&v24.__r_.__value_.__s + 23) = 17;
    strcpy((char *)&v24, "No script named <");
    v14 = *(char *)(a2 + 23);
    if (v14 >= 0)
      v15 = (const std::string::value_type *)a2;
    else
      v15 = *(const std::string::value_type **)a2;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a2 + 23);
    else
      v16 = *(_QWORD *)(a2 + 8);
    v17 = std::string::append(&v24, v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v25, "> found", 7uLL);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v27 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    OVM::Error::Error<>((std::string **)&v29, (uint64_t)__p);
    v21 = v30;
    v22 = v29;
    v30 = 0;
    v29 = 0uLL;
    v31 = (void **)&v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
    *(_OWORD *)a4 = v22;
    *(_QWORD *)(a4 + 16) = v21;
    memset(v28, 0, 24);
    *(_BYTE *)(a4 + 24) = 0;
    *(_QWORD *)&v29 = v28;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    if (SHIBYTE(v27) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  else
  {
    v9 = (uint64_t *)v8[8];
    v23[0] = (uint64_t *)v8[7];
    v23[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 1);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    OVM::InterpreterImpl::RunSubroutine((OVM::InterpreterImpl *)a1, v23, a3, &v29);
    *(_OWORD *)a4 = v29;
    *(_QWORD *)(a4 + 16) = v30;
    *(_BYTE *)(a4 + 24) = 1;
    if (v9)
    {
      v12 = (unint64_t *)(v9 + 1);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        (*(void (**)(uint64_t *))(*v9 + 16))(v9);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v9);
      }
    }
  }
}

void sub_1C3513F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_1C3513F54(void *a1, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::string *a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,char *a21,__int128 a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v27;
  int v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;

  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a2 == 1)
  {
    v27 = __cxa_begin_catch(a1);
    a13 = (std::string *)(*(uint64_t (**)(void *))(*(_QWORD *)v27 + 16))(v27);
    a21 = (char *)operator new(0x19uLL);
    a22 = xmmword_1C35B9970;
    strcpy(a21, "While executing script ");
    v28 = *(char *)(v23 + 23);
    if (v28 >= 0)
      v29 = (const std::string::value_type *)v23;
    else
      v29 = *(const std::string::value_type **)v23;
    if (v28 >= 0)
      v30 = *(unsigned __int8 *)(v23 + 23);
    else
      v30 = *(_QWORD *)(v23 + 8);
    v31 = std::string::append((std::string *)&a21, v29, v30);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    *(_QWORD *)(v24 - 96) = *((_QWORD *)&v31->__r_.__value_.__l + 2);
    *(_OWORD *)(v24 - 112) = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    OVM::Error::Unexpected<char const*,std::string>((char **)&a13, (__int128 *)(v24 - 112), v24 - 80);
    *(_OWORD *)v22 = *(_OWORD *)(v24 - 80);
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(v24 - 64);
    *(_QWORD *)(v24 - 72) = 0;
    *(_QWORD *)(v24 - 64) = 0;
    *(_QWORD *)(v24 - 80) = 0;
    *(_BYTE *)(v22 + 24) = 0;
    a17 = (void **)(v24 - 80);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
    if (*(char *)(v24 - 89) < 0)
      operator delete(*(void **)(v24 - 112));
    if (SHIBYTE(a22) < 0)
      operator delete(a21);
    __cxa_end_catch();
    JUMPOUT(0x1C3513EF0);
  }
  JUMPOUT(0x1C3513F4CLL);
}

void sub_1C3514054(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 89) < 0)
    operator delete(*(void **)(v26 - 112));
  if (a26 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1C3513F4CLL);
}

uint64_t OVM::InterpreterImpl::RunSubroutine@<X0>(OVM::InterpreterImpl *a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  __int128 *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  const OVM::Expression ***v27;
  const OVM::Expression ***v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  void *exception;
  __int128 *v38;
  std::__shared_weak_count *v39;
  void *__p[2];
  void **v41;

  v6 = **a2;
  v7 = ((*a2)[1] - v6) >> 5;
  v9 = *a3;
  v8 = a3[1];
  if (v7 != 0xAAAAAAAAAAAAAAABLL * ((v8 - *a3) >> 3))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringUtil::Format((StringUtil *)"Expected %zu parameters but passed %zu", __p, ((*a2)[1] - **a2) >> 5, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
    MEMORY[0x1C3BD3068](exception, __p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v8 != v9)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = *(unsigned int *)(v6 + 32 * v11);
      v14 = *(unsigned int *)(v9 + 24 * v11);
      if ((_DWORD)v13 != (_DWORD)v14)
      {
        v32 = v6 + 32 * v11;
        v33 = (_QWORD *)(v32 + 8);
        if (*(char *)(v32 + 31) < 0)
          v33 = (_QWORD *)*v33;
        StringUtil::Format((StringUtil *)"Parameter %u (%s) expected type %d, got type %d", __p, v12, v33, v13, v14);
        v34 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1C3BD3068](v34, __p);
        __cxa_throw(v34, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v11 = (v12 + 1);
      v12 = v11;
    }
    while (v7 > v11);
  }
  std::deque<std::map<std::string,std::shared_ptr<OVM::Var>>>::emplace_back<>(a1);
  v15 = *a3;
  if (a3[1] != *a3)
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (__int128 *)(v15 + 24 * v16);
      v19 = (char *)operator new(0x30uLL);
      *((_QWORD *)v19 + 1) = 0;
      *((_QWORD *)v19 + 2) = 0;
      *(_QWORD *)v19 = &off_1E7D89B90;
      v20 = *v18;
      *((_QWORD *)v19 + 5) = *((_QWORD *)v18 + 2);
      *(_OWORD *)(v19 + 24) = v20;
      __p[0] = v19 + 24;
      __p[1] = v19;
      v21 = *((_QWORD *)a1 + 5) + *((_QWORD *)a1 + 4) - 1;
      v22 = (uint64_t **)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * (v21 / 0xAA)) + 24 * (v21 % 0xAA));
      v41 = (void **)(**a2 + 32 * v16 + 8);
      v23 = std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, v41, (uint64_t)&std::piecewise_construct, (__int128 **)&v41);
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)(v23 + 7), (__int128 *)__p);
      v24 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v25 = (unint64_t *)((char *)__p[1] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v15 = *a3;
      v16 = ++v17;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) > v17);
  }
  *a4 = 1;
  a4[4] = 0;
  v27 = (const OVM::Expression ***)(*a2)[3];
  v28 = (const OVM::Expression ***)(*a2)[4];
  while (v27 != v28)
  {
    OVM::InterpreterImpl::Evaluate(a1, *v27, &v38);
    v29 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    ++v27;
  }
  return std::deque<std::map<std::string,std::shared_ptr<OVM::Var>>>::pop_back(a1);
}

void sub_1C3514424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1C3514430);
}

void OVM::Error::Unexpected<char const*,std::string>(char **a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  char v6;
  __int128 v7;
  uint64_t v8;
  void **v9;

  std::string::basic_string[abi:ne180100]<0>(__p, *a1);
  OVM::Error::Error<std::string>((uint64_t *)&v7, (uint64_t)__p, a2);
  *(_OWORD *)a3 = v7;
  *(_QWORD *)(a3 + 16) = v8;
  v8 = 0;
  v7 = 0uLL;
  v9 = (void **)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_1C35144BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void StringUtil::Format(StringUtil *this@<X0>, _QWORD *a2@<X8>, ...)
{
  char *__s;
  va_list va;

  va_start(va, a2);
  __s = 0;
  vasprintf(&__s, (const char *)this, va);
  if (__s)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, __s);
    free(__s);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<FAILED TO VASPRINTF>");
  }
}

uint64_t std::shared_ptr<OVM::Var>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void OVM::InterpreterImpl::Evaluate(OVM::InterpreterImpl *this@<X0>, const OVM::Expression **a2@<X1>, __int128 **a3@<X8>)
{
  _QWORD *v5;
  __int128 *v6;
  _QWORD *v7;
  void *exception;

  switch(*((_DWORD *)a2 + 2))
  {
    case 0:
      OVM::InterpreterImpl::Evaluate(this, a2, a3);
      return;
    case 1:
      OVM::InterpreterImpl::Evaluate(this, (void **)a2, a3);
      return;
    case 2:
      OVM::InterpreterImpl::Evaluate(this, a2, a3);
      return;
    case 3:
      OVM::InterpreterImpl::Evaluate(this, (const OVM::ObjCClass *)a2, a3);
      return;
    case 4:
      OVM::InterpreterImpl::Evaluate(this, (const OVM::FunctionCall *)a2, a3);
      return;
    case 5:
      OVM::InterpreterImpl::Evaluate(this, a2);
    case 6:
      OVM::InterpreterImpl::Evaluate(this, a2, a3);
      return;
    case 7:
      OVM::InterpreterImpl::Evaluate(this, (const OVM::Loop *)a2, a3);
      return;
    case 8:
      OVM::InterpreterImpl::Evaluate((const OVM::StringLiteral *)a2, a3);
      return;
    case 9:
      v5 = operator new(0x30uLL);
      v5[1] = 0;
      v5[2] = 0;
      *v5 = &off_1E7D89B90;
      v5[4] = a2[2];
      *((_DWORD *)v5 + 10) = 1;
      a3[1] = (__int128 *)v5;
      *((_DWORD *)v5 + 6) = 2;
      v6 = (__int128 *)(v5 + 3);
      goto LABEL_16;
    case 0xA:
      OVM::InterpreterImpl::Evaluate(this, a2, a3);
      return;
    case 0xB:
      OVM::InterpreterImpl::Evaluate(this, a2, a3);
      return;
    case 0xC:
      OVM::InterpreterImpl::Evaluate(this, (const OVM::DictionaryLiteral *)a2, a3);
      return;
    case 0xD:
      OVM::InterpreterImpl::Evaluate(this, (const OVM::ArrayLiteral *)a2, a3);
      return;
    case 0xE:
      v7 = operator new(0x30uLL);
      v7[1] = 0;
      v7[2] = 0;
      *v7 = &off_1E7D89B90;
      v7[4] = 0;
      *((_DWORD *)v7 + 10) = 2;
      a3[1] = (__int128 *)v7;
      *((_DWORD *)v7 + 6) = 3;
      v6 = (__int128 *)(v7 + 3);
LABEL_16:
      *a3 = v6;
      break;
    case 0xF:
      OVM::InterpreterImpl::Evaluate(this, (const OVM::CompoundExpression *)a2);
      break;
    default:
      printf("EVALUATE %d\n", *((_DWORD *)a2 + 2));
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1C3BD305C](exception, ":shrug:");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
}

{
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  unint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  unint64_t *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  _QWORD *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  _OWORD *v115;
  __int128 v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  __int128 *v123;
  std::__shared_weak_count *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  _QWORD v127[2];
  uint64_t v128;
  std::__shared_weak_count *v129;
  __int128 *v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  __int128 *v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  __int128 v138;
  __int128 *v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;

  OVM::InterpreterImpl::Evaluate(this, a2 + 2);
  OVM::InterpreterImpl::Evaluate(this, a2 + 3);
  *a3 = 0;
  a3[1] = 0;
  switch(*((_DWORD *)a2 + 8))
  {
    case 0:
      v6 = (_OWORD *)v141;
      v7 = *v139;
      *(_QWORD *)(v141 + 16) = *((_QWORD *)v139 + 2);
      *v6 = v7;
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100](a3, &v141);
      break;
    case 1:
      if (*(_DWORD *)(v141 + 16) != 1 || *((_DWORD *)v139 + 4) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v62 = *(_QWORD *)(v141 + 8);
      v63 = *((_QWORD *)v139 + 1);
      v64 = operator new(0x30uLL);
      v64[1] = 0;
      v64[2] = 0;
      *((_DWORD *)v64 + 6) = 2;
      *v64 = &off_1E7D89B90;
      v64[4] = v63 + v62;
      *((_DWORD *)v64 + 10) = 1;
      *(_QWORD *)&v138 = v64 + 3;
      *((_QWORD *)&v138 + 1) = v64;
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)a3, &v138);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v65 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v13 = __ldaxr(v65);
        while (__stlxr(v13 - 1, v65));
        goto LABEL_164;
      }
      break;
    case 2:
      if (*(_DWORD *)(v141 + 16) != 1 || *((_DWORD *)v139 + 4) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v46 = *(_QWORD *)(v141 + 8);
      v47 = *((_QWORD *)v139 + 1);
      v48 = operator new(0x30uLL);
      v48[1] = 0;
      v48[2] = 0;
      *((_DWORD *)v48 + 6) = 2;
      *v48 = &off_1E7D89B90;
      v48[4] = v46 - v47;
      *((_DWORD *)v48 + 10) = 1;
      *(_QWORD *)&v138 = v48 + 3;
      *((_QWORD *)&v138 + 1) = v48;
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)a3, &v138);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v13 = __ldaxr(v49);
        while (__stlxr(v13 - 1, v49));
        goto LABEL_164;
      }
      break;
    case 3:
      if (*(_DWORD *)(v141 + 16) != 1 || *((_DWORD *)v139 + 4) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v54 = *(_QWORD *)(v141 + 8);
      v55 = *((_QWORD *)v139 + 1);
      v56 = operator new(0x30uLL);
      v56[1] = 0;
      v56[2] = 0;
      *((_DWORD *)v56 + 6) = 2;
      *v56 = &off_1E7D89B90;
      v56[4] = v55 * v54;
      *((_DWORD *)v56 + 10) = 1;
      *(_QWORD *)&v138 = v56 + 3;
      *((_QWORD *)&v138 + 1) = v56;
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)a3, &v138);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v57 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v13 = __ldaxr(v57);
        while (__stlxr(v13 - 1, v57));
        goto LABEL_164;
      }
      break;
    case 4:
      if (*(_DWORD *)(v141 + 16) != 1 || *((_DWORD *)v139 + 4) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v24 = *(_QWORD *)(v141 + 8);
      v25 = *((_QWORD *)v139 + 1);
      v26 = operator new(0x30uLL);
      v26[1] = 0;
      v26[2] = 0;
      *v26 = &off_1E7D89B90;
      *((_DWORD *)v26 + 6) = 2;
      v26[4] = v24 / v25;
      *((_DWORD *)v26 + 10) = 1;
      *(_QWORD *)&v138 = v26 + 3;
      *((_QWORD *)&v138 + 1) = v26;
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)a3, &v138);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v13 = __ldaxr(v27);
        while (__stlxr(v13 - 1, v27));
        goto LABEL_164;
      }
      break;
    case 5:
      if (*(_DWORD *)(v141 + 16) != 1 || *((_DWORD *)v139 + 4) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v70 = *(_QWORD *)(v141 + 8);
      v71 = *((_QWORD *)v139 + 1);
      v72 = operator new(0x30uLL);
      v72[1] = 0;
      v72[2] = 0;
      *v72 = &off_1E7D89B90;
      *((_DWORD *)v72 + 6) = 2;
      v72[4] = v70 % v71;
      *((_DWORD *)v72 + 10) = 1;
      *(_QWORD *)&v138 = v72 + 3;
      *((_QWORD *)&v138 + 1) = v72;
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)a3, &v138);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v73 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v13 = __ldaxr(v73);
        while (__stlxr(v13 - 1, v73));
        goto LABEL_164;
      }
      break;
    case 6:
      if (*(_DWORD *)(v141 + 16) != 1 || *((_DWORD *)v139 + 4) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v78 = *(_QWORD *)(v141 + 8);
      v79 = *((_QWORD *)v139 + 1);
      v80 = operator new(0x30uLL);
      v80[1] = 0;
      v80[2] = 0;
      *((_DWORD *)v80 + 6) = 2;
      *v80 = &off_1E7D89B90;
      v80[4] = v78 << v79;
      *((_DWORD *)v80 + 10) = 1;
      *(_QWORD *)&v138 = v80 + 3;
      *((_QWORD *)&v138 + 1) = v80;
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)a3, &v138);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v81 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v13 = __ldaxr(v81);
        while (__stlxr(v13 - 1, v81));
        goto LABEL_164;
      }
      break;
    case 7:
      if (*(_DWORD *)(v141 + 16) != 1 || *((_DWORD *)v139 + 4) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v58 = *(_QWORD *)(v141 + 8);
      v59 = *((_QWORD *)v139 + 1);
      v60 = operator new(0x30uLL);
      v60[1] = 0;
      v60[2] = 0;
      *((_DWORD *)v60 + 6) = 2;
      *v60 = &off_1E7D89B90;
      v60[4] = v58 >> v59;
      *((_DWORD *)v60 + 10) = 1;
      *(_QWORD *)&v138 = v60 + 3;
      *((_QWORD *)&v138 + 1) = v60;
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)a3, &v138);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v13 = __ldaxr(v61);
        while (__stlxr(v13 - 1, v61));
        goto LABEL_164;
      }
      break;
    case 8:
      v136 = v141;
      v137 = v142;
      if (v142)
      {
        p_shared_owners = (unint64_t *)&v142->__shared_owners_;
        do
          v87 = __ldxr(p_shared_owners);
        while (__stxr(v87 + 1, p_shared_owners));
      }
      v88 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v136);
      v134 = v139;
      v135 = v140;
      if (v140)
      {
        v89 = (unint64_t *)&v140->__shared_owners_;
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
      }
      v91 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v134);
      v92 = operator new(0x30uLL);
      v92[6] = 2;
      *((_QWORD *)v92 + 1) = 0;
      *((_QWORD *)v92 + 2) = 0;
      *(_QWORD *)v92 = &off_1E7D89B90;
      *((_QWORD *)v92 + 4) = v88 == v91;
      v92[10] = 1;
      *(_QWORD *)&v138 = v92 + 6;
      *((_QWORD *)&v138 + 1) = v92;
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)a3, &v138);
      v93 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v94 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      v96 = v135;
      if (v135)
      {
        v97 = (unint64_t *)&v135->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      v11 = v137;
      if (v137)
      {
        v99 = (unint64_t *)&v137->__shared_owners_;
        do
          v13 = __ldaxr(v99);
        while (__stlxr(v13 - 1, v99));
        goto LABEL_164;
      }
      break;
    case 9:
      v125 = v141;
      v126 = v142;
      if (v142)
      {
        v32 = (unint64_t *)&v142->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v34 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v125);
      v123 = v139;
      v124 = v140;
      if (v140)
      {
        v35 = (unint64_t *)&v140->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v37 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v123);
      v38 = operator new(0x30uLL);
      v38[6] = 2;
      *((_QWORD *)v38 + 1) = 0;
      *((_QWORD *)v38 + 2) = 0;
      *(_QWORD *)v38 = &off_1E7D89B90;
      *((_QWORD *)v38 + 4) = v34 != v37;
      v38[10] = 1;
      *(_QWORD *)&v138 = v38 + 6;
      *((_QWORD *)&v138 + 1) = v38;
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)a3, &v138);
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v40 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = v124;
      if (v124)
      {
        v43 = (unint64_t *)&v124->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v11 = v126;
      if (v126)
      {
        v45 = (unint64_t *)&v126->__shared_owners_;
        do
          v13 = __ldaxr(v45);
        while (__stlxr(v13 - 1, v45));
        goto LABEL_164;
      }
      break;
    case 0xA:
      if (*(_DWORD *)(v141 + 16) != 1 || *((_DWORD *)v139 + 4) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v82 = *(_QWORD *)(v141 + 8);
      v83 = *((_QWORD *)v139 + 1);
      v84 = operator new(0x30uLL);
      v84[6] = 2;
      *((_QWORD *)v84 + 1) = 0;
      *((_QWORD *)v84 + 2) = 0;
      *(_QWORD *)v84 = &off_1E7D89B90;
      *((_QWORD *)v84 + 4) = v82 < v83;
      v84[10] = 1;
      *(_QWORD *)&v138 = v84 + 6;
      *((_QWORD *)&v138 + 1) = v84;
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)a3, &v138);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v85 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v13 = __ldaxr(v85);
        while (__stlxr(v13 - 1, v85));
        goto LABEL_164;
      }
      break;
    case 0xB:
      if (*(_DWORD *)(v141 + 16) != 1 || *((_DWORD *)v139 + 4) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v20 = *(_QWORD *)(v141 + 8);
      v21 = *((_QWORD *)v139 + 1);
      v22 = operator new(0x30uLL);
      v22[6] = 2;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = 0;
      *(_QWORD *)v22 = &off_1E7D89B90;
      *((_QWORD *)v22 + 4) = v20 <= v21;
      v22[10] = 1;
      *(_QWORD *)&v138 = v22 + 6;
      *((_QWORD *)&v138 + 1) = v22;
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)a3, &v138);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v13 = __ldaxr(v23);
        while (__stlxr(v13 - 1, v23));
        goto LABEL_164;
      }
      break;
    case 0xC:
      if (*(_DWORD *)(v141 + 16) != 1 || *((_DWORD *)v139 + 4) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v28 = *(_QWORD *)(v141 + 8);
      v29 = *((_QWORD *)v139 + 1);
      v30 = operator new(0x30uLL);
      v30[6] = 2;
      *((_QWORD *)v30 + 1) = 0;
      *((_QWORD *)v30 + 2) = 0;
      *(_QWORD *)v30 = &off_1E7D89B90;
      *((_QWORD *)v30 + 4) = v28 > v29;
      v30[10] = 1;
      *(_QWORD *)&v138 = v30 + 6;
      *((_QWORD *)&v138 + 1) = v30;
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)a3, &v138);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v13 = __ldaxr(v31);
        while (__stlxr(v13 - 1, v31));
        goto LABEL_164;
      }
      break;
    case 0xD:
      if (*(_DWORD *)(v141 + 16) != 1 || *((_DWORD *)v139 + 4) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v74 = *(_QWORD *)(v141 + 8);
      v75 = *((_QWORD *)v139 + 1);
      v76 = operator new(0x30uLL);
      v76[6] = 2;
      *((_QWORD *)v76 + 1) = 0;
      *((_QWORD *)v76 + 2) = 0;
      *(_QWORD *)v76 = &off_1E7D89B90;
      *((_QWORD *)v76 + 4) = v74 >= v75;
      v76[10] = 1;
      *(_QWORD *)&v138 = v76 + 6;
      *((_QWORD *)&v138 + 1) = v76;
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)a3, &v138);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v77 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v13 = __ldaxr(v77);
        while (__stlxr(v13 - 1, v77));
        goto LABEL_164;
      }
      break;
    case 0xE:
      v132 = v141;
      v133 = v142;
      if (v142)
      {
        v14 = (unint64_t *)&v142->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v132);
      if (v16)
      {
        v130 = v139;
        v131 = v140;
        if (v140)
        {
          v17 = (unint64_t *)&v140->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v19 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v130) != 0;
      }
      else
      {
        v19 = 0;
      }
      v100 = operator new(0x30uLL);
      v100[1] = 0;
      v100[2] = 0;
      *((_DWORD *)v100 + 6) = 2;
      *v100 = &off_1E7D89B90;
      v100[4] = v19;
      *((_DWORD *)v100 + 10) = 1;
      *(_QWORD *)&v138 = v100 + 3;
      *((_QWORD *)&v138 + 1) = v100;
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)a3, &v138);
      v101 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v102 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      if (v16)
      {
        v104 = v131;
        if (v131)
        {
          v105 = (unint64_t *)&v131->__shared_owners_;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
      }
      v11 = v133;
      if (v133)
      {
        v107 = (unint64_t *)&v133->__shared_owners_;
        do
          v13 = __ldaxr(v107);
        while (__stlxr(v13 - 1, v107));
        goto LABEL_164;
      }
      break;
    case 0xF:
      v128 = v141;
      v129 = v142;
      if (v142)
      {
        v50 = (unint64_t *)&v142->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      v52 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v128);
      if (v52)
      {
        v53 = 1;
      }
      else
      {
        v127[0] = v139;
        v127[1] = v140;
        if (v140)
        {
          v108 = (unint64_t *)&v140->__shared_owners_;
          do
            v109 = __ldxr(v108);
          while (__stxr(v109 + 1, v108));
        }
        v53 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)v127) != 0;
      }
      v110 = operator new(0x30uLL);
      v110[1] = 0;
      v110[2] = 0;
      *((_DWORD *)v110 + 6) = 2;
      *v110 = &off_1E7D89B90;
      v110[4] = v53;
      *((_DWORD *)v110 + 10) = 1;
      *(_QWORD *)&v138 = v110 + 3;
      *((_QWORD *)&v138 + 1) = v110;
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)a3, &v138);
      v111 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v112 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      if (!v52)
        std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)v127);
      v11 = v129;
      if (v129)
      {
        v114 = (unint64_t *)&v129->__shared_owners_;
        do
          v13 = __ldaxr(v114);
        while (__stlxr(v13 - 1, v114));
        goto LABEL_164;
      }
      break;
    case 0x10:
      if (*(_DWORD *)(v141 + 16) != 1 || *((_DWORD *)v139 + 4) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v8 = *(_QWORD *)(v141 + 8);
      v9 = *((_QWORD *)v139 + 1);
      v10 = operator new(0x30uLL);
      v10[1] = 0;
      v10[2] = 0;
      *((_DWORD *)v10 + 6) = 2;
      *v10 = &off_1E7D89B90;
      v10[4] = v9 & v8;
      *((_DWORD *)v10 + 10) = 1;
      *(_QWORD *)&v138 = v10 + 3;
      *((_QWORD *)&v138 + 1) = v10;
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)a3, &v138);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        goto LABEL_164;
      }
      break;
    case 0x11:
      if (*(_DWORD *)(v141 + 16) != 1 || *((_DWORD *)v139 + 4) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v66 = *(_QWORD *)(v141 + 8);
      v67 = *((_QWORD *)v139 + 1);
      v68 = operator new(0x30uLL);
      v68[1] = 0;
      v68[2] = 0;
      *((_DWORD *)v68 + 6) = 2;
      *v68 = &off_1E7D89B90;
      v68[4] = v67 | v66;
      *((_DWORD *)v68 + 10) = 1;
      *(_QWORD *)&v138 = v68 + 3;
      *((_QWORD *)&v138 + 1) = v68;
      std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)a3, &v138);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v69 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v13 = __ldaxr(v69);
        while (__stlxr(v13 - 1, v69));
LABEL_164:
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      break;
    default:
      break;
  }
  if (*((_BYTE *)a2 + 36))
  {
    v115 = (_OWORD *)v141;
    v116 = **a3;
    *(_QWORD *)(v141 + 16) = *((_QWORD *)*a3 + 2);
    *v115 = v116;
  }
  v117 = v140;
  if (v140)
  {
    v118 = (unint64_t *)&v140->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v142;
  if (v142)
  {
    v121 = (unint64_t *)&v142->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
}

void sub_1C35147EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t OVM::InterpreterImpl::Evaluate(OVM::InterpreterImpl *a1, const OVM::Expression **a2)
{
  const OVM::Expression *v2;

  v2 = *a2;
  if (!v2)
    OVM::InterpreterImpl::Evaluate();
  return OVM::InterpreterImpl::Evaluate(a1, v2);
}

void OVM::InterpreterImpl::Evaluate(OVM::InterpreterImpl *this@<X0>, const OVM::Expression **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  void **v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  void *exception;
  void *v31;
  __int128 v32;
  unsigned int *v33;
  std::__shared_weak_count *v34;
  __int128 *v35;

  v6 = (uint64_t *)(a2 + 6);
  if (a2[6])
  {
    OVM::InterpreterImpl::Evaluate(this, a2 + 6);
  }
  else
  {
    v7 = (char *)operator new(0x30uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_1E7D89B90;
    *((_DWORD *)v7 + 10) = 0;
    v34 = (std::__shared_weak_count *)v7;
    *((_DWORD *)v7 + 6) = 1;
    v33 = (unsigned int *)(v7 + 24);
  }
  v8 = *((_QWORD *)this + 5) + *((_QWORD *)this + 4) - 1;
  v9 = a2 + 2;
  v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>>>::find<std::string>(*(_QWORD *)(*((_QWORD *)this + 1) + 8 * (v8 / 0xAA)) + 24 * (v8 % 0xAA), (void **)a2 + 2);
  v11 = *((_QWORD *)this + 5) + *((_QWORD *)this + 4) - 1;
  v12 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * (v11 / 0xAA));
  v13 = v11 % 0xAA;
  if ((void **)(v12 + 24 * (v11 % 0xAA) + 8) != v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    MEMORY[0x1C3BD3068](exception, &v32);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v14 = *v6;
  v15 = v33;
  if (v14)
  {
    v16 = *((unsigned int *)a2 + 10);
    if (*v33 != (_DWORD)v16)
    {
      if (*((char *)a2 + 39) < 0)
        v9 = (_QWORD *)*v9;
      StringUtil::Format((StringUtil *)"Initializing expr for variable %s is %d expected %d", &v32, v9, *v33, v16);
      v31 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1C3BD3068](v31, &v32);
      __cxa_throw(v31, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
  v17 = (char *)operator new(0x30uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_1E7D89B90;
  v18 = *(_OWORD *)v15;
  *((_QWORD *)v17 + 5) = *((_QWORD *)v15 + 2);
  *(_OWORD *)(v17 + 24) = v18;
  *(_QWORD *)&v32 = v17 + 24;
  *((_QWORD *)&v32 + 1) = v17;
  v35 = (__int128 *)(a2 + 2);
  v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v12 + 24 * v13), (void **)a2 + 2, (uint64_t)&std::piecewise_construct, &v35);
  v20 = (_QWORD *)std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)(v19 + 7), &v32);
  v21 = v20[1];
  *a3 = *v20;
  a3[1] = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

{
  void *v5;
  const OVM::Expression **v6;
  const OVM::Expression **i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  __int128 v19;
  int64x2_t v20;
  _OWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  const char **v25;
  const char *v26;
  const char *Uid;
  uint64_t v28;
  id v29;
  id v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t *v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  unint64_t *v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  uint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  uint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  unint64_t *v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  uint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  uint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  uint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  uint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  unint64_t *v353;
  std::__shared_weak_count *v354;
  unint64_t *p_shared_owners;
  unint64_t v356;
  unint64_t *v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  unint64_t *v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  uint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  uint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  uint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  unint64_t *v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  uint64_t v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  uint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  uint64_t v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  uint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  unint64_t *v425;
  std::__shared_weak_count *v426;
  unint64_t *v427;
  unint64_t v428;
  uint64_t v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  uint64_t v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  uint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  uint64_t v441;
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  uint64_t v445;
  std::__shared_weak_count *v446;
  unint64_t *v447;
  unint64_t v448;
  std::__shared_weak_count *v449;
  unint64_t *v450;
  unint64_t v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  unint64_t *v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  uint64_t v468;
  std::__shared_weak_count *v469;
  unint64_t *v470;
  unint64_t v471;
  uint64_t v472;
  std::__shared_weak_count *v473;
  unint64_t *v474;
  unint64_t v475;
  uint64_t v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  uint64_t v480;
  std::__shared_weak_count *v481;
  unint64_t *v482;
  unint64_t v483;
  uint64_t v484;
  std::__shared_weak_count *v485;
  unint64_t *v486;
  unint64_t v487;
  std::__shared_weak_count *v488;
  unint64_t *v489;
  unint64_t v490;
  std::__shared_weak_count *v491;
  unint64_t *v492;
  unint64_t v493;
  std::__shared_weak_count *v494;
  unint64_t *v495;
  unint64_t v496;
  std::__shared_weak_count *v497;
  unint64_t *v498;
  unint64_t v499;
  std::__shared_weak_count *v500;
  unint64_t *v501;
  unint64_t v502;
  unint64_t *v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  uint64_t v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  uint64_t v511;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  uint64_t v515;
  std::__shared_weak_count *v516;
  unint64_t *v517;
  unint64_t v518;
  uint64_t v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  uint64_t v523;
  std::__shared_weak_count *v524;
  unint64_t *v525;
  unint64_t v526;
  uint64_t v527;
  std::__shared_weak_count *v528;
  unint64_t *v529;
  unint64_t v530;
  uint64_t v531;
  std::__shared_weak_count *v532;
  unint64_t *v533;
  unint64_t v534;
  std::__shared_weak_count *v535;
  unint64_t *v536;
  unint64_t v537;
  std::__shared_weak_count *v538;
  unint64_t *v539;
  unint64_t v540;
  std::__shared_weak_count *v541;
  unint64_t *v542;
  unint64_t v543;
  std::__shared_weak_count *v544;
  unint64_t *v545;
  unint64_t v546;
  std::__shared_weak_count *v547;
  unint64_t *v548;
  unint64_t v549;
  std::__shared_weak_count *v550;
  unint64_t *v551;
  unint64_t v552;
  std::__shared_weak_count *v553;
  unint64_t *v554;
  unint64_t v555;
  unint64_t *v556;
  _QWORD *v557;
  char *v558;
  int v559;
  std::__shared_weak_count *v560;
  unint64_t *v561;
  unint64_t v562;
  uint64_t v563;
  std::__shared_weak_count *v564;
  unint64_t *v565;
  unint64_t v566;
  uint64_t v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  uint64_t v571;
  std::__shared_weak_count *v572;
  unint64_t *v573;
  unint64_t v574;
  uint64_t v575;
  std::__shared_weak_count *v576;
  unint64_t *v577;
  unint64_t v578;
  uint64_t v579;
  std::__shared_weak_count *v580;
  unint64_t *v581;
  unint64_t v582;
  uint64_t v583;
  std::__shared_weak_count *v584;
  unint64_t *v585;
  unint64_t v586;
  uint64_t v587;
  std::__shared_weak_count *v588;
  unint64_t *v589;
  unint64_t v590;
  std::__shared_weak_count *v591;
  unint64_t *v592;
  unint64_t v593;
  std::__shared_weak_count *v594;
  unint64_t *v595;
  unint64_t v596;
  std::__shared_weak_count *v597;
  unint64_t *v598;
  unint64_t v599;
  std::__shared_weak_count *v600;
  unint64_t *v601;
  unint64_t v602;
  std::__shared_weak_count *v603;
  unint64_t *v604;
  unint64_t v605;
  std::__shared_weak_count *v606;
  unint64_t *v607;
  unint64_t v608;
  std::__shared_weak_count *v609;
  unint64_t *v610;
  unint64_t v611;
  unint64_t *v612;
  std::__shared_weak_count *v613;
  unint64_t *v614;
  unint64_t v615;
  void *exception;
  void *v617;
  void *v618;
  uint64_t v619;
  uint64_t v621;
  std::__shared_weak_count *v622;
  uint64_t v623;
  std::__shared_weak_count *v624;
  uint64_t v625;
  std::__shared_weak_count *v626;
  uint64_t v627;
  std::__shared_weak_count *v628;
  uint64_t v629;
  std::__shared_weak_count *v630;
  uint64_t v631;
  std::__shared_weak_count *v632;
  uint64_t v633;
  std::__shared_weak_count *v634;
  uint64_t v635;
  std::__shared_weak_count *v636;
  uint64_t v637;
  std::__shared_weak_count *v638;
  uint64_t v639;
  std::__shared_weak_count *v640;
  uint64_t v641;
  std::__shared_weak_count *v642;
  uint64_t v643;
  std::__shared_weak_count *v644;
  uint64_t v645;
  std::__shared_weak_count *v646;
  uint64_t v647;
  std::__shared_weak_count *v648;
  uint64_t v649;
  std::__shared_weak_count *v650;
  uint64_t v651;
  std::__shared_weak_count *v652;
  uint64_t v653;
  std::__shared_weak_count *v654;
  uint64_t v655;
  std::__shared_weak_count *v656;
  uint64_t v657;
  std::__shared_weak_count *v658;
  uint64_t v659;
  std::__shared_weak_count *v660;
  uint64_t v661;
  std::__shared_weak_count *v662;
  uint64_t v663;
  std::__shared_weak_count *v664;
  uint64_t v665;
  std::__shared_weak_count *v666;
  uint64_t v667;
  std::__shared_weak_count *v668;
  uint64_t v669;
  std::__shared_weak_count *v670;
  uint64_t v671;
  std::__shared_weak_count *v672;
  uint64_t v673;
  std::__shared_weak_count *v674;
  uint64_t v675;
  std::__shared_weak_count *v676;
  uint64_t v677;
  std::__shared_weak_count *v678;
  uint64_t v679;
  std::__shared_weak_count *v680;
  uint64_t v681;
  std::__shared_weak_count *v682;
  uint64_t v683;
  std::__shared_weak_count *v684;
  uint64_t v685;
  std::__shared_weak_count *v686;
  uint64_t v687;
  std::__shared_weak_count *v688;
  uint64_t v689;
  std::__shared_weak_count *v690;
  uint64_t v691;
  std::__shared_weak_count *v692;
  uint64_t v693;
  std::__shared_weak_count *v694;
  uint64_t v695;
  std::__shared_weak_count *v696;
  uint64_t v697;
  std::__shared_weak_count *v698;
  uint64_t v699;
  std::__shared_weak_count *v700;
  uint64_t v701;
  std::__shared_weak_count *v702;
  uint64_t v703;
  std::__shared_weak_count *v704;
  uint64_t v705;
  std::__shared_weak_count *v706;
  uint64_t v707;
  std::__shared_weak_count *v708;
  uint64_t v709;
  std::__shared_weak_count *v710;
  uint64_t v711;
  std::__shared_weak_count *v712;
  uint64_t v713;
  std::__shared_weak_count *v714;
  uint64_t v715;
  std::__shared_weak_count *v716;
  uint64_t v717;
  std::__shared_weak_count *v718;
  uint64_t v719;
  std::__shared_weak_count *v720;
  uint64_t v721;
  std::__shared_weak_count *v722;
  uint64_t v723;
  std::__shared_weak_count *v724;
  uint64_t v725;
  std::__shared_weak_count *v726;
  uint64_t v727;
  std::__shared_weak_count *v728;
  uint64_t v729;
  std::__shared_weak_count *v730;
  uint64_t v731;
  std::__shared_weak_count *v732;
  uint64_t v733;
  std::__shared_weak_count *v734;
  uint64_t v735;
  std::__shared_weak_count *v736;
  uint64_t v737;
  std::__shared_weak_count *v738;
  uint64_t v739;
  std::__shared_weak_count *v740;
  uint64_t v741;
  std::__shared_weak_count *v742;
  uint64_t v743;
  std::__shared_weak_count *v744;
  uint64_t v745;
  std::__shared_weak_count *v746;
  uint64_t v747;
  std::__shared_weak_count *v748;
  uint64_t v749;
  std::__shared_weak_count *v750;
  uint64_t v751;
  std::__shared_weak_count *v752;
  uint64_t v753;
  std::__shared_weak_count *v754;
  uint64_t v755;
  std::__shared_weak_count *v756;
  uint64_t v757;
  std::__shared_weak_count *v758;
  uint64_t v759;
  std::__shared_weak_count *v760;
  uint64_t v761;
  std::__shared_weak_count *v762;
  uint64_t v763;
  std::__shared_weak_count *v764;
  uint64_t v765;
  std::__shared_weak_count *v766;
  uint64_t v767;
  std::__shared_weak_count *v768;
  uint64_t v769;
  std::__shared_weak_count *v770;
  uint64_t v771;
  std::__shared_weak_count *v772;
  uint64_t v773;
  std::__shared_weak_count *v774;
  uint64_t v775;
  std::__shared_weak_count *v776;
  uint64_t v777;
  std::__shared_weak_count *v778;
  uint64_t v779;
  std::__shared_weak_count *v780;
  uint64_t v781;
  std::__shared_weak_count *v782;
  uint64_t v783;
  std::__shared_weak_count *v784;
  uint64_t v785;
  std::__shared_weak_count *v786;
  uint64_t v787;
  std::__shared_weak_count *v788;
  uint64_t v789;
  std::__shared_weak_count *v790;
  uint64_t v791;
  std::__shared_weak_count *v792;
  uint64_t v793;
  std::__shared_weak_count *v794;
  uint64_t v795;
  std::__shared_weak_count *v796;
  uint64_t v797;
  std::__shared_weak_count *v798;
  uint64_t v799;
  std::__shared_weak_count *v800;
  __int128 v801;
  int64x2_t v802;
  _QWORD v803[2];
  uint64_t v804;
  std::__shared_weak_count *v805;
  int64x2_t *v806;
  int64x2_t v807;
  uint64_t v808;
  _QWORD *v809;

  OVM::InterpreterImpl::Evaluate(this, a2 + 2);
  if (*(_DWORD *)v804 != 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1C3BD305C](exception, "Attempting to send to a non NSObj");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (*(_DWORD *)(v804 + 16) != 2)
    std::__throw_bad_variant_access[abi:ne180100]();
  v5 = *(void **)(v804 + 8);
  v802 = 0uLL;
  v803[0] = 0;
  v6 = (const OVM::Expression **)a2[3];
  for (i = (const OVM::Expression **)a2[4]; v6 != i; ++v6)
  {
    OVM::InterpreterImpl::Evaluate(this, v6);
    v8 = v802.i64[1];
    if (v802.i64[1] >= v803[0])
    {
      v9 = (v802.i64[1] - v802.i64[0]) >> 4;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v11 = v803[0] - v802.i64[0];
      if ((v803[0] - v802.i64[0]) >> 3 > v10)
        v10 = v11 >> 3;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
        v12 = 0xFFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      v809 = v803;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<OVM::Var>>>((uint64_t)v803, v12);
      v15 = &v13[16 * v9];
      *(_OWORD *)v15 = v801;
      v801 = 0uLL;
      v16 = (_QWORD *)v802.i64[1];
      v17 = (_QWORD *)v802.i64[0];
      if (v802.i64[1] == v802.i64[0])
      {
        v20 = vdupq_n_s64(v802.u64[1]);
        v18 = &v13[16 * v9];
      }
      else
      {
        v18 = &v13[16 * v9];
        do
        {
          v19 = *((_OWORD *)v16 - 1);
          v16 -= 2;
          *((_OWORD *)v18 - 1) = v19;
          v18 -= 16;
          *v16 = 0;
          v16[1] = 0;
        }
        while (v16 != v17);
        v20 = v802;
      }
      v21 = v15 + 16;
      v802.i64[0] = (uint64_t)v18;
      v807 = v20;
      v22 = v803[0];
      v803[0] = &v13[16 * v14];
      v808 = v22;
      v806 = (int64x2_t *)v20.i64[0];
      std::__split_buffer<std::shared_ptr<OVM::Var>>::~__split_buffer((uint64_t)&v806);
      v802.i64[1] = (uint64_t)v21;
      if (*((_QWORD *)&v801 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v801 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v801 + 1) + 16))(*((_QWORD *)&v801 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v801 + 1));
        }
      }
    }
    else
    {
      *(_OWORD *)v802.i64[1] = v801;
      v802.i64[1] = v8 + 16;
    }
  }
  v25 = (const char **)(a2 + 7);
  v26 = (const char *)(a2 + 7);
  if (*((char *)a2 + 79) < 0)
    v26 = *v25;
  Uid = sel_getUid(v26);
  v28 = (v802.i64[1] - v802.i64[0]) >> 4;
  if (*((_DWORD *)a2 + 12) == 3)
  {
    switch(v28)
    {
      case 0:
        v29 = objc_msgSend(v5, Uid);
        goto LABEL_670;
      case 1:
        v354 = *(std::__shared_weak_count **)(v802.i64[0] + 8);
        v799 = *(_QWORD *)v802.i64[0];
        v800 = v354;
        if (v354)
        {
          p_shared_owners = (unint64_t *)&v354->__shared_owners_;
          do
            v356 = __ldxr(p_shared_owners);
          while (__stxr(v356 + 1, p_shared_owners));
        }
        v29 = objc_msgSend(v5, Uid, OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v799));
        v55 = v800;
        if (!v800)
          goto LABEL_670;
        v357 = (unint64_t *)&v800->__shared_owners_;
        do
          v57 = __ldaxr(v357);
        while (__stlxr(v57 - 1, v357));
        break;
      case 2:
        v204 = *(std::__shared_weak_count **)(v802.i64[0] + 8);
        v797 = *(_QWORD *)v802.i64[0];
        v798 = v204;
        if (v204)
        {
          v205 = (unint64_t *)&v204->__shared_owners_;
          do
            v206 = __ldxr(v205);
          while (__stxr(v206 + 1, v205));
        }
        v207 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v797);
        v208 = *(std::__shared_weak_count **)(v802.i64[0] + 24);
        v795 = *(_QWORD *)(v802.i64[0] + 16);
        v796 = v208;
        if (v208)
        {
          v209 = (unint64_t *)&v208->__shared_owners_;
          do
            v210 = __ldxr(v209);
          while (__stxr(v210 + 1, v209));
        }
        v29 = objc_msgSend(v5, Uid, v207, OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v795));
        v211 = v796;
        if (v796)
        {
          v212 = (unint64_t *)&v796->__shared_owners_;
          do
            v213 = __ldaxr(v212);
          while (__stlxr(v213 - 1, v212));
          if (!v213)
          {
            ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
            std::__shared_weak_count::__release_weak(v211);
          }
        }
        v55 = v798;
        if (!v798)
          goto LABEL_670;
        v214 = (unint64_t *)&v798->__shared_owners_;
        do
          v57 = __ldaxr(v214);
        while (__stlxr(v57 - 1, v214));
        break;
      case 3:
        v226 = *(std::__shared_weak_count **)(v802.i64[0] + 8);
        v793 = *(_QWORD *)v802.i64[0];
        v794 = v226;
        if (v226)
        {
          v227 = (unint64_t *)&v226->__shared_owners_;
          do
            v228 = __ldxr(v227);
          while (__stxr(v228 + 1, v227));
        }
        v229 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v793);
        v230 = *(std::__shared_weak_count **)(v802.i64[0] + 24);
        v791 = *(_QWORD *)(v802.i64[0] + 16);
        v792 = v230;
        if (v230)
        {
          v231 = (unint64_t *)&v230->__shared_owners_;
          do
            v232 = __ldxr(v231);
          while (__stxr(v232 + 1, v231));
        }
        v233 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v791);
        v234 = *(std::__shared_weak_count **)(v802.i64[0] + 40);
        v789 = *(_QWORD *)(v802.i64[0] + 32);
        v790 = v234;
        if (v234)
        {
          v235 = (unint64_t *)&v234->__shared_owners_;
          do
            v236 = __ldxr(v235);
          while (__stxr(v236 + 1, v235));
        }
        v29 = objc_msgSend(v5, Uid, v229, v233, OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v789));
        v237 = v790;
        if (v790)
        {
          v238 = (unint64_t *)&v790->__shared_owners_;
          do
            v239 = __ldaxr(v238);
          while (__stlxr(v239 - 1, v238));
          if (!v239)
          {
            ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
            std::__shared_weak_count::__release_weak(v237);
          }
        }
        v240 = v792;
        if (v792)
        {
          v241 = (unint64_t *)&v792->__shared_owners_;
          do
            v242 = __ldaxr(v241);
          while (__stlxr(v242 - 1, v241));
          if (!v242)
          {
            ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
            std::__shared_weak_count::__release_weak(v240);
          }
        }
        v55 = v794;
        if (!v794)
          goto LABEL_670;
        v243 = (unint64_t *)&v794->__shared_owners_;
        do
          v57 = __ldaxr(v243);
        while (__stlxr(v57 - 1, v243));
        break;
      case 4:
        v31 = *(std::__shared_weak_count **)(v802.i64[0] + 8);
        v787 = *(_QWORD *)v802.i64[0];
        v788 = v31;
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v34 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v787);
        v35 = *(std::__shared_weak_count **)(v802.i64[0] + 24);
        v785 = *(_QWORD *)(v802.i64[0] + 16);
        v786 = v35;
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        v38 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v785);
        v39 = *(std::__shared_weak_count **)(v802.i64[0] + 40);
        v783 = *(_QWORD *)(v802.i64[0] + 32);
        v784 = v39;
        if (v39)
        {
          v40 = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        v42 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v783);
        v43 = *(std::__shared_weak_count **)(v802.i64[0] + 56);
        v781 = *(_QWORD *)(v802.i64[0] + 48);
        v782 = v43;
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        v29 = objc_msgSend(v5, Uid, v34, v38, v42, OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v781));
        v46 = v782;
        if (v782)
        {
          v47 = (unint64_t *)&v782->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v49 = v784;
        if (v784)
        {
          v50 = (unint64_t *)&v784->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        v52 = v786;
        if (v786)
        {
          v53 = (unint64_t *)&v786->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v55 = v788;
        if (!v788)
          goto LABEL_670;
        v56 = (unint64_t *)&v788->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        break;
      case 5:
        v362 = *(std::__shared_weak_count **)(v802.i64[0] + 8);
        v779 = *(_QWORD *)v802.i64[0];
        v780 = v362;
        if (v362)
        {
          v363 = (unint64_t *)&v362->__shared_owners_;
          do
            v364 = __ldxr(v363);
          while (__stxr(v364 + 1, v363));
        }
        v365 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v779);
        v366 = *(std::__shared_weak_count **)(v802.i64[0] + 24);
        v777 = *(_QWORD *)(v802.i64[0] + 16);
        v778 = v366;
        if (v366)
        {
          v367 = (unint64_t *)&v366->__shared_owners_;
          do
            v368 = __ldxr(v367);
          while (__stxr(v368 + 1, v367));
        }
        v369 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v777);
        v370 = *(std::__shared_weak_count **)(v802.i64[0] + 40);
        v775 = *(_QWORD *)(v802.i64[0] + 32);
        v776 = v370;
        if (v370)
        {
          v371 = (unint64_t *)&v370->__shared_owners_;
          do
            v372 = __ldxr(v371);
          while (__stxr(v372 + 1, v371));
        }
        v373 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v775);
        v374 = *(std::__shared_weak_count **)(v802.i64[0] + 56);
        v773 = *(_QWORD *)(v802.i64[0] + 48);
        v774 = v374;
        if (v374)
        {
          v375 = (unint64_t *)&v374->__shared_owners_;
          do
            v376 = __ldxr(v375);
          while (__stxr(v376 + 1, v375));
        }
        v377 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v773);
        v378 = *(std::__shared_weak_count **)(v802.i64[0] + 72);
        v771 = *(_QWORD *)(v802.i64[0] + 64);
        v772 = v378;
        if (v378)
        {
          v379 = (unint64_t *)&v378->__shared_owners_;
          do
            v380 = __ldxr(v379);
          while (__stxr(v380 + 1, v379));
        }
        v29 = objc_msgSend(v5, Uid, v365, v369, v373, v377, OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v771));
        v381 = v772;
        if (v772)
        {
          v382 = (unint64_t *)&v772->__shared_owners_;
          do
            v383 = __ldaxr(v382);
          while (__stlxr(v383 - 1, v382));
          if (!v383)
          {
            ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
            std::__shared_weak_count::__release_weak(v381);
          }
        }
        v384 = v774;
        if (v774)
        {
          v385 = (unint64_t *)&v774->__shared_owners_;
          do
            v386 = __ldaxr(v385);
          while (__stlxr(v386 - 1, v385));
          if (!v386)
          {
            ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
            std::__shared_weak_count::__release_weak(v384);
          }
        }
        v387 = v776;
        if (v776)
        {
          v388 = (unint64_t *)&v776->__shared_owners_;
          do
            v389 = __ldaxr(v388);
          while (__stlxr(v389 - 1, v388));
          if (!v389)
          {
            ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
            std::__shared_weak_count::__release_weak(v387);
          }
        }
        v390 = v778;
        if (v778)
        {
          v391 = (unint64_t *)&v778->__shared_owners_;
          do
            v392 = __ldaxr(v391);
          while (__stlxr(v392 - 1, v391));
          if (!v392)
          {
            ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
            std::__shared_weak_count::__release_weak(v390);
          }
        }
        v55 = v780;
        if (!v780)
          goto LABEL_670;
        v393 = (unint64_t *)&v780->__shared_owners_;
        do
          v57 = __ldaxr(v393);
        while (__stlxr(v57 - 1, v393));
        break;
      case 6:
        v426 = *(std::__shared_weak_count **)(v802.i64[0] + 8);
        v769 = *(_QWORD *)v802.i64[0];
        v770 = v426;
        if (v426)
        {
          v427 = (unint64_t *)&v426->__shared_owners_;
          do
            v428 = __ldxr(v427);
          while (__stxr(v428 + 1, v427));
        }
        v429 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v769);
        v430 = *(std::__shared_weak_count **)(v802.i64[0] + 24);
        v767 = *(_QWORD *)(v802.i64[0] + 16);
        v768 = v430;
        if (v430)
        {
          v431 = (unint64_t *)&v430->__shared_owners_;
          do
            v432 = __ldxr(v431);
          while (__stxr(v432 + 1, v431));
        }
        v433 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v767);
        v434 = *(std::__shared_weak_count **)(v802.i64[0] + 40);
        v765 = *(_QWORD *)(v802.i64[0] + 32);
        v766 = v434;
        if (v434)
        {
          v435 = (unint64_t *)&v434->__shared_owners_;
          do
            v436 = __ldxr(v435);
          while (__stxr(v436 + 1, v435));
        }
        v437 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v765);
        v438 = *(std::__shared_weak_count **)(v802.i64[0] + 56);
        v763 = *(_QWORD *)(v802.i64[0] + 48);
        v764 = v438;
        if (v438)
        {
          v439 = (unint64_t *)&v438->__shared_owners_;
          do
            v440 = __ldxr(v439);
          while (__stxr(v440 + 1, v439));
        }
        v441 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v763);
        v442 = *(std::__shared_weak_count **)(v802.i64[0] + 72);
        v761 = *(_QWORD *)(v802.i64[0] + 64);
        v762 = v442;
        if (v442)
        {
          v443 = (unint64_t *)&v442->__shared_owners_;
          do
            v444 = __ldxr(v443);
          while (__stxr(v444 + 1, v443));
        }
        v445 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v761);
        v446 = *(std::__shared_weak_count **)(v802.i64[0] + 88);
        v759 = *(_QWORD *)(v802.i64[0] + 80);
        v760 = v446;
        if (v446)
        {
          v447 = (unint64_t *)&v446->__shared_owners_;
          do
            v448 = __ldxr(v447);
          while (__stxr(v448 + 1, v447));
        }
        v29 = objc_msgSend(v5, Uid, v429, v433, v437, v441, v445, OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v759));
        v449 = v760;
        if (v760)
        {
          v450 = (unint64_t *)&v760->__shared_owners_;
          do
            v451 = __ldaxr(v450);
          while (__stlxr(v451 - 1, v450));
          if (!v451)
          {
            ((void (*)(std::__shared_weak_count *))v449->__on_zero_shared)(v449);
            std::__shared_weak_count::__release_weak(v449);
          }
        }
        v452 = v762;
        if (v762)
        {
          v453 = (unint64_t *)&v762->__shared_owners_;
          do
            v454 = __ldaxr(v453);
          while (__stlxr(v454 - 1, v453));
          if (!v454)
          {
            ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
            std::__shared_weak_count::__release_weak(v452);
          }
        }
        v455 = v764;
        if (v764)
        {
          v456 = (unint64_t *)&v764->__shared_owners_;
          do
            v457 = __ldaxr(v456);
          while (__stlxr(v457 - 1, v456));
          if (!v457)
          {
            ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
            std::__shared_weak_count::__release_weak(v455);
          }
        }
        v458 = v766;
        if (v766)
        {
          v459 = (unint64_t *)&v766->__shared_owners_;
          do
            v460 = __ldaxr(v459);
          while (__stlxr(v460 - 1, v459));
          if (!v460)
          {
            ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
            std::__shared_weak_count::__release_weak(v458);
          }
        }
        v461 = v768;
        if (v768)
        {
          v462 = (unint64_t *)&v768->__shared_owners_;
          do
            v463 = __ldaxr(v462);
          while (__stlxr(v463 - 1, v462));
          if (!v463)
          {
            ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
            std::__shared_weak_count::__release_weak(v461);
          }
        }
        v55 = v770;
        if (!v770)
          goto LABEL_670;
        v464 = (unint64_t *)&v770->__shared_owners_;
        do
          v57 = __ldaxr(v464);
        while (__stlxr(v57 - 1, v464));
        break;
      case 7:
        v262 = *(std::__shared_weak_count **)(v802.i64[0] + 8);
        v757 = *(_QWORD *)v802.i64[0];
        v758 = v262;
        if (v262)
        {
          v263 = (unint64_t *)&v262->__shared_owners_;
          do
            v264 = __ldxr(v263);
          while (__stxr(v264 + 1, v263));
        }
        v265 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v757);
        v266 = *(std::__shared_weak_count **)(v802.i64[0] + 24);
        v755 = *(_QWORD *)(v802.i64[0] + 16);
        v756 = v266;
        if (v266)
        {
          v267 = (unint64_t *)&v266->__shared_owners_;
          do
            v268 = __ldxr(v267);
          while (__stxr(v268 + 1, v267));
        }
        v269 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v755);
        v270 = *(std::__shared_weak_count **)(v802.i64[0] + 40);
        v753 = *(_QWORD *)(v802.i64[0] + 32);
        v754 = v270;
        if (v270)
        {
          v271 = (unint64_t *)&v270->__shared_owners_;
          do
            v272 = __ldxr(v271);
          while (__stxr(v272 + 1, v271));
        }
        v273 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v753);
        v274 = *(std::__shared_weak_count **)(v802.i64[0] + 56);
        v751 = *(_QWORD *)(v802.i64[0] + 48);
        v752 = v274;
        if (v274)
        {
          v275 = (unint64_t *)&v274->__shared_owners_;
          do
            v276 = __ldxr(v275);
          while (__stxr(v276 + 1, v275));
        }
        v277 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v751);
        v278 = *(std::__shared_weak_count **)(v802.i64[0] + 72);
        v749 = *(_QWORD *)(v802.i64[0] + 64);
        v750 = v278;
        if (v278)
        {
          v279 = (unint64_t *)&v278->__shared_owners_;
          do
            v280 = __ldxr(v279);
          while (__stxr(v280 + 1, v279));
        }
        v281 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v749);
        v282 = *(std::__shared_weak_count **)(v802.i64[0] + 88);
        v747 = *(_QWORD *)(v802.i64[0] + 80);
        v748 = v282;
        if (v282)
        {
          v283 = (unint64_t *)&v282->__shared_owners_;
          do
            v284 = __ldxr(v283);
          while (__stxr(v284 + 1, v283));
        }
        v285 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v747);
        v286 = *(std::__shared_weak_count **)(v802.i64[0] + 104);
        v745 = *(_QWORD *)(v802.i64[0] + 96);
        v746 = v286;
        if (v286)
        {
          v287 = (unint64_t *)&v286->__shared_owners_;
          do
            v288 = __ldxr(v287);
          while (__stxr(v288 + 1, v287));
        }
        v29 = objc_msgSend(v5, Uid, v265, v269, v273, v277, v281, v285, OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v745));
        v289 = v746;
        if (v746)
        {
          v290 = (unint64_t *)&v746->__shared_owners_;
          do
            v291 = __ldaxr(v290);
          while (__stlxr(v291 - 1, v290));
          if (!v291)
          {
            ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
            std::__shared_weak_count::__release_weak(v289);
          }
        }
        v292 = v748;
        if (v748)
        {
          v293 = (unint64_t *)&v748->__shared_owners_;
          do
            v294 = __ldaxr(v293);
          while (__stlxr(v294 - 1, v293));
          if (!v294)
          {
            ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
            std::__shared_weak_count::__release_weak(v292);
          }
        }
        v295 = v750;
        if (v750)
        {
          v296 = (unint64_t *)&v750->__shared_owners_;
          do
            v297 = __ldaxr(v296);
          while (__stlxr(v297 - 1, v296));
          if (!v297)
          {
            ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
            std::__shared_weak_count::__release_weak(v295);
          }
        }
        v298 = v752;
        if (v752)
        {
          v299 = (unint64_t *)&v752->__shared_owners_;
          do
            v300 = __ldaxr(v299);
          while (__stlxr(v300 - 1, v299));
          if (!v300)
          {
            ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
            std::__shared_weak_count::__release_weak(v298);
          }
        }
        v301 = v754;
        if (v754)
        {
          v302 = (unint64_t *)&v754->__shared_owners_;
          do
            v303 = __ldaxr(v302);
          while (__stlxr(v303 - 1, v302));
          if (!v303)
          {
            ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
            std::__shared_weak_count::__release_weak(v301);
          }
        }
        v304 = v756;
        if (v756)
        {
          v305 = (unint64_t *)&v756->__shared_owners_;
          do
            v306 = __ldaxr(v305);
          while (__stlxr(v306 - 1, v305));
          if (!v306)
          {
            ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
            std::__shared_weak_count::__release_weak(v304);
          }
        }
        v55 = v758;
        if (!v758)
          goto LABEL_670;
        v307 = (unint64_t *)&v758->__shared_owners_;
        do
          v57 = __ldaxr(v307);
        while (__stlxr(v57 - 1, v307));
        break;
      case 8:
        v504 = *(std::__shared_weak_count **)(v802.i64[0] + 8);
        v743 = *(_QWORD *)v802.i64[0];
        v744 = v504;
        if (v504)
        {
          v505 = (unint64_t *)&v504->__shared_owners_;
          do
            v506 = __ldxr(v505);
          while (__stxr(v506 + 1, v505));
        }
        v507 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v743);
        v508 = *(std::__shared_weak_count **)(v802.i64[0] + 24);
        v741 = *(_QWORD *)(v802.i64[0] + 16);
        v742 = v508;
        if (v508)
        {
          v509 = (unint64_t *)&v508->__shared_owners_;
          do
            v510 = __ldxr(v509);
          while (__stxr(v510 + 1, v509));
        }
        v511 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v741);
        v512 = *(std::__shared_weak_count **)(v802.i64[0] + 40);
        v739 = *(_QWORD *)(v802.i64[0] + 32);
        v740 = v512;
        if (v512)
        {
          v513 = (unint64_t *)&v512->__shared_owners_;
          do
            v514 = __ldxr(v513);
          while (__stxr(v514 + 1, v513));
        }
        v515 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v739);
        v516 = *(std::__shared_weak_count **)(v802.i64[0] + 56);
        v737 = *(_QWORD *)(v802.i64[0] + 48);
        v738 = v516;
        if (v516)
        {
          v517 = (unint64_t *)&v516->__shared_owners_;
          do
            v518 = __ldxr(v517);
          while (__stxr(v518 + 1, v517));
        }
        v519 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v737);
        v520 = *(std::__shared_weak_count **)(v802.i64[0] + 72);
        v735 = *(_QWORD *)(v802.i64[0] + 64);
        v736 = v520;
        if (v520)
        {
          v521 = (unint64_t *)&v520->__shared_owners_;
          do
            v522 = __ldxr(v521);
          while (__stxr(v522 + 1, v521));
        }
        v523 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v735);
        v524 = *(std::__shared_weak_count **)(v802.i64[0] + 88);
        v733 = *(_QWORD *)(v802.i64[0] + 80);
        v734 = v524;
        if (v524)
        {
          v525 = (unint64_t *)&v524->__shared_owners_;
          do
            v526 = __ldxr(v525);
          while (__stxr(v526 + 1, v525));
        }
        v527 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v733);
        v528 = *(std::__shared_weak_count **)(v802.i64[0] + 104);
        v731 = *(_QWORD *)(v802.i64[0] + 96);
        v732 = v528;
        if (v528)
        {
          v529 = (unint64_t *)&v528->__shared_owners_;
          do
            v530 = __ldxr(v529);
          while (__stxr(v530 + 1, v529));
        }
        v531 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v731);
        v532 = *(std::__shared_weak_count **)(v802.i64[0] + 120);
        v729 = *(_QWORD *)(v802.i64[0] + 112);
        v730 = v532;
        if (v532)
        {
          v533 = (unint64_t *)&v532->__shared_owners_;
          do
            v534 = __ldxr(v533);
          while (__stxr(v534 + 1, v533));
        }
        v29 = objc_msgSend(v5, Uid, v507, v511, v515, v519, v523, v527, v531, OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v729));
        v535 = v730;
        if (v730)
        {
          v536 = (unint64_t *)&v730->__shared_owners_;
          do
            v537 = __ldaxr(v536);
          while (__stlxr(v537 - 1, v536));
          if (!v537)
          {
            ((void (*)(std::__shared_weak_count *))v535->__on_zero_shared)(v535);
            std::__shared_weak_count::__release_weak(v535);
          }
        }
        v538 = v732;
        if (v732)
        {
          v539 = (unint64_t *)&v732->__shared_owners_;
          do
            v540 = __ldaxr(v539);
          while (__stlxr(v540 - 1, v539));
          if (!v540)
          {
            ((void (*)(std::__shared_weak_count *))v538->__on_zero_shared)(v538);
            std::__shared_weak_count::__release_weak(v538);
          }
        }
        v541 = v734;
        if (v734)
        {
          v542 = (unint64_t *)&v734->__shared_owners_;
          do
            v543 = __ldaxr(v542);
          while (__stlxr(v543 - 1, v542));
          if (!v543)
          {
            ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
            std::__shared_weak_count::__release_weak(v541);
          }
        }
        v544 = v736;
        if (v736)
        {
          v545 = (unint64_t *)&v736->__shared_owners_;
          do
            v546 = __ldaxr(v545);
          while (__stlxr(v546 - 1, v545));
          if (!v546)
          {
            ((void (*)(std::__shared_weak_count *))v544->__on_zero_shared)(v544);
            std::__shared_weak_count::__release_weak(v544);
          }
        }
        v547 = v738;
        if (v738)
        {
          v548 = (unint64_t *)&v738->__shared_owners_;
          do
            v549 = __ldaxr(v548);
          while (__stlxr(v549 - 1, v548));
          if (!v549)
          {
            ((void (*)(std::__shared_weak_count *))v547->__on_zero_shared)(v547);
            std::__shared_weak_count::__release_weak(v547);
          }
        }
        v550 = v740;
        if (v740)
        {
          v551 = (unint64_t *)&v740->__shared_owners_;
          do
            v552 = __ldaxr(v551);
          while (__stlxr(v552 - 1, v551));
          if (!v552)
          {
            ((void (*)(std::__shared_weak_count *))v550->__on_zero_shared)(v550);
            std::__shared_weak_count::__release_weak(v550);
          }
        }
        v553 = v742;
        if (v742)
        {
          v554 = (unint64_t *)&v742->__shared_owners_;
          do
            v555 = __ldaxr(v554);
          while (__stlxr(v555 - 1, v554));
          if (!v555)
          {
            ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
            std::__shared_weak_count::__release_weak(v553);
          }
        }
        v55 = v744;
        if (!v744)
          goto LABEL_670;
        v556 = (unint64_t *)&v744->__shared_owners_;
        do
          v57 = __ldaxr(v556);
        while (__stlxr(v57 - 1, v556));
        break;
      case 9:
        v85 = *(std::__shared_weak_count **)(v802.i64[0] + 8);
        v727 = *(_QWORD *)v802.i64[0];
        v728 = v85;
        if (v85)
        {
          v86 = (unint64_t *)&v85->__shared_owners_;
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 1, v86));
        }
        v88 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v727);
        v89 = *(std::__shared_weak_count **)(v802.i64[0] + 24);
        v725 = *(_QWORD *)(v802.i64[0] + 16);
        v726 = v89;
        if (v89)
        {
          v90 = (unint64_t *)&v89->__shared_owners_;
          do
            v91 = __ldxr(v90);
          while (__stxr(v91 + 1, v90));
        }
        v92 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v725);
        v93 = *(std::__shared_weak_count **)(v802.i64[0] + 40);
        v723 = *(_QWORD *)(v802.i64[0] + 32);
        v724 = v93;
        if (v93)
        {
          v94 = (unint64_t *)&v93->__shared_owners_;
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
        v96 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v723);
        v97 = *(std::__shared_weak_count **)(v802.i64[0] + 56);
        v721 = *(_QWORD *)(v802.i64[0] + 48);
        v722 = v97;
        if (v97)
        {
          v98 = (unint64_t *)&v97->__shared_owners_;
          do
            v99 = __ldxr(v98);
          while (__stxr(v99 + 1, v98));
        }
        v100 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v721);
        v101 = *(std::__shared_weak_count **)(v802.i64[0] + 72);
        v719 = *(_QWORD *)(v802.i64[0] + 64);
        v720 = v101;
        if (v101)
        {
          v102 = (unint64_t *)&v101->__shared_owners_;
          do
            v103 = __ldxr(v102);
          while (__stxr(v103 + 1, v102));
        }
        v104 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v719);
        v105 = *(std::__shared_weak_count **)(v802.i64[0] + 88);
        v717 = *(_QWORD *)(v802.i64[0] + 80);
        v718 = v105;
        if (v105)
        {
          v106 = (unint64_t *)&v105->__shared_owners_;
          do
            v107 = __ldxr(v106);
          while (__stxr(v107 + 1, v106));
        }
        v108 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v717);
        v109 = *(std::__shared_weak_count **)(v802.i64[0] + 104);
        v715 = *(_QWORD *)(v802.i64[0] + 96);
        v716 = v109;
        if (v109)
        {
          v110 = (unint64_t *)&v109->__shared_owners_;
          do
            v111 = __ldxr(v110);
          while (__stxr(v111 + 1, v110));
        }
        v112 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v715);
        v113 = *(std::__shared_weak_count **)(v802.i64[0] + 120);
        v713 = *(_QWORD *)(v802.i64[0] + 112);
        v714 = v113;
        if (v113)
        {
          v114 = (unint64_t *)&v113->__shared_owners_;
          do
            v115 = __ldxr(v114);
          while (__stxr(v115 + 1, v114));
        }
        v116 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v713);
        v117 = *(std::__shared_weak_count **)(v802.i64[0] + 136);
        v711 = *(_QWORD *)(v802.i64[0] + 128);
        v712 = v117;
        if (v117)
        {
          v118 = (unint64_t *)&v117->__shared_owners_;
          do
            v119 = __ldxr(v118);
          while (__stxr(v119 + 1, v118));
        }
        v29 = objc_msgSend(v5, Uid, v88, v92, v96, v100, v104, v108, v112, v116, OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v711));
        v120 = v712;
        if (v712)
        {
          v121 = (unint64_t *)&v712->__shared_owners_;
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 - 1, v121));
          if (!v122)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v120);
          }
        }
        v123 = v714;
        if (v714)
        {
          v124 = (unint64_t *)&v714->__shared_owners_;
          do
            v125 = __ldaxr(v124);
          while (__stlxr(v125 - 1, v124));
          if (!v125)
          {
            ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
            std::__shared_weak_count::__release_weak(v123);
          }
        }
        v126 = v716;
        if (v716)
        {
          v127 = (unint64_t *)&v716->__shared_owners_;
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
        v129 = v718;
        if (v718)
        {
          v130 = (unint64_t *)&v718->__shared_owners_;
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
        }
        v132 = v720;
        if (v720)
        {
          v133 = (unint64_t *)&v720->__shared_owners_;
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
        }
        v135 = v722;
        if (v722)
        {
          v136 = (unint64_t *)&v722->__shared_owners_;
          do
            v137 = __ldaxr(v136);
          while (__stlxr(v137 - 1, v136));
          if (!v137)
          {
            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
            std::__shared_weak_count::__release_weak(v135);
          }
        }
        v138 = v724;
        if (v724)
        {
          v139 = (unint64_t *)&v724->__shared_owners_;
          do
            v140 = __ldaxr(v139);
          while (__stlxr(v140 - 1, v139));
          if (!v140)
          {
            ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
            std::__shared_weak_count::__release_weak(v138);
          }
        }
        v141 = v726;
        if (v726)
        {
          v142 = (unint64_t *)&v726->__shared_owners_;
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if (!v143)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
        }
        v55 = v728;
        if (!v728)
          goto LABEL_670;
        v144 = (unint64_t *)&v728->__shared_owners_;
        do
          v57 = __ldaxr(v144);
        while (__stlxr(v57 - 1, v144));
        break;
      default:
        v617 = __cxa_allocate_exception(0x10uLL);
        if (*((char *)a2 + 79) < 0)
          v25 = (const char **)*v25;
        StringUtil::Format((StringUtil *)"Arity %s %zu too high for me", &v806, v25, (v802.i64[1] - v802.i64[0]) >> 4);
        MEMORY[0x1C3BD3068](v617, &v806);
        __cxa_throw(v617, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
LABEL_670:
    v557 = operator new(0x30uLL);
    v557[1] = 0;
    v557[2] = 0;
    *v557 = &off_1E7D89B90;
    *((_DWORD *)v557 + 6) = 3;
    v558 = (char *)(v557 + 3);
    v557[4] = v29;
    v559 = 2;
  }
  else
  {
    switch(v28)
    {
      case 0:
        v30 = objc_msgSend(v5, Uid);
        goto LABEL_735;
      case 1:
        v358 = *(std::__shared_weak_count **)(v802.i64[0] + 8);
        v709 = *(_QWORD *)v802.i64[0];
        v710 = v358;
        if (v358)
        {
          v359 = (unint64_t *)&v358->__shared_owners_;
          do
            v360 = __ldxr(v359);
          while (__stxr(v360 + 1, v359));
        }
        v30 = objc_msgSend(v5, Uid, OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v709));
        v82 = v710;
        if (!v710)
          goto LABEL_735;
        v361 = (unint64_t *)&v710->__shared_owners_;
        do
          v84 = __ldaxr(v361);
        while (__stlxr(v84 - 1, v361));
        break;
      case 2:
        v215 = *(std::__shared_weak_count **)(v802.i64[0] + 8);
        v707 = *(_QWORD *)v802.i64[0];
        v708 = v215;
        if (v215)
        {
          v216 = (unint64_t *)&v215->__shared_owners_;
          do
            v217 = __ldxr(v216);
          while (__stxr(v217 + 1, v216));
        }
        v218 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v707);
        v219 = *(std::__shared_weak_count **)(v802.i64[0] + 24);
        v705 = *(_QWORD *)(v802.i64[0] + 16);
        v706 = v219;
        if (v219)
        {
          v220 = (unint64_t *)&v219->__shared_owners_;
          do
            v221 = __ldxr(v220);
          while (__stxr(v221 + 1, v220));
        }
        v30 = objc_msgSend(v5, Uid, v218, OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v705));
        v222 = v706;
        if (v706)
        {
          v223 = (unint64_t *)&v706->__shared_owners_;
          do
            v224 = __ldaxr(v223);
          while (__stlxr(v224 - 1, v223));
          if (!v224)
          {
            ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
            std::__shared_weak_count::__release_weak(v222);
          }
        }
        v82 = v708;
        if (!v708)
          goto LABEL_735;
        v225 = (unint64_t *)&v708->__shared_owners_;
        do
          v84 = __ldaxr(v225);
        while (__stlxr(v84 - 1, v225));
        break;
      case 3:
        v244 = *(std::__shared_weak_count **)(v802.i64[0] + 8);
        v703 = *(_QWORD *)v802.i64[0];
        v704 = v244;
        if (v244)
        {
          v245 = (unint64_t *)&v244->__shared_owners_;
          do
            v246 = __ldxr(v245);
          while (__stxr(v246 + 1, v245));
        }
        v247 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v703);
        v248 = *(std::__shared_weak_count **)(v802.i64[0] + 24);
        v701 = *(_QWORD *)(v802.i64[0] + 16);
        v702 = v248;
        if (v248)
        {
          v249 = (unint64_t *)&v248->__shared_owners_;
          do
            v250 = __ldxr(v249);
          while (__stxr(v250 + 1, v249));
        }
        v251 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v701);
        v252 = *(std::__shared_weak_count **)(v802.i64[0] + 40);
        v699 = *(_QWORD *)(v802.i64[0] + 32);
        v700 = v252;
        if (v252)
        {
          v253 = (unint64_t *)&v252->__shared_owners_;
          do
            v254 = __ldxr(v253);
          while (__stxr(v254 + 1, v253));
        }
        v30 = objc_msgSend(v5, Uid, v247, v251, OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v699));
        v255 = v700;
        if (v700)
        {
          v256 = (unint64_t *)&v700->__shared_owners_;
          do
            v257 = __ldaxr(v256);
          while (__stlxr(v257 - 1, v256));
          if (!v257)
          {
            ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
            std::__shared_weak_count::__release_weak(v255);
          }
        }
        v258 = v702;
        if (v702)
        {
          v259 = (unint64_t *)&v702->__shared_owners_;
          do
            v260 = __ldaxr(v259);
          while (__stlxr(v260 - 1, v259));
          if (!v260)
          {
            ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
            std::__shared_weak_count::__release_weak(v258);
          }
        }
        v82 = v704;
        if (!v704)
          goto LABEL_735;
        v261 = (unint64_t *)&v704->__shared_owners_;
        do
          v84 = __ldaxr(v261);
        while (__stlxr(v84 - 1, v261));
        break;
      case 4:
        v58 = *(std::__shared_weak_count **)(v802.i64[0] + 8);
        v697 = *(_QWORD *)v802.i64[0];
        v698 = v58;
        if (v58)
        {
          v59 = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
        v61 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v697);
        v62 = *(std::__shared_weak_count **)(v802.i64[0] + 24);
        v695 = *(_QWORD *)(v802.i64[0] + 16);
        v696 = v62;
        if (v62)
        {
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
        }
        v65 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v695);
        v66 = *(std::__shared_weak_count **)(v802.i64[0] + 40);
        v693 = *(_QWORD *)(v802.i64[0] + 32);
        v694 = v66;
        if (v66)
        {
          v67 = (unint64_t *)&v66->__shared_owners_;
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
        }
        v69 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v693);
        v70 = *(std::__shared_weak_count **)(v802.i64[0] + 56);
        v691 = *(_QWORD *)(v802.i64[0] + 48);
        v692 = v70;
        if (v70)
        {
          v71 = (unint64_t *)&v70->__shared_owners_;
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
        }
        v30 = objc_msgSend(v5, Uid, v61, v65, v69, OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v691));
        v73 = v692;
        if (v692)
        {
          v74 = (unint64_t *)&v692->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        v76 = v694;
        if (v694)
        {
          v77 = (unint64_t *)&v694->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        v79 = v696;
        if (v696)
        {
          v80 = (unint64_t *)&v696->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        v82 = v698;
        if (!v698)
          goto LABEL_735;
        v83 = (unint64_t *)&v698->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        break;
      case 5:
        v394 = *(std::__shared_weak_count **)(v802.i64[0] + 8);
        v689 = *(_QWORD *)v802.i64[0];
        v690 = v394;
        if (v394)
        {
          v395 = (unint64_t *)&v394->__shared_owners_;
          do
            v396 = __ldxr(v395);
          while (__stxr(v396 + 1, v395));
        }
        v397 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v689);
        v398 = *(std::__shared_weak_count **)(v802.i64[0] + 24);
        v687 = *(_QWORD *)(v802.i64[0] + 16);
        v688 = v398;
        if (v398)
        {
          v399 = (unint64_t *)&v398->__shared_owners_;
          do
            v400 = __ldxr(v399);
          while (__stxr(v400 + 1, v399));
        }
        v401 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v687);
        v402 = *(std::__shared_weak_count **)(v802.i64[0] + 40);
        v685 = *(_QWORD *)(v802.i64[0] + 32);
        v686 = v402;
        if (v402)
        {
          v403 = (unint64_t *)&v402->__shared_owners_;
          do
            v404 = __ldxr(v403);
          while (__stxr(v404 + 1, v403));
        }
        v405 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v685);
        v406 = *(std::__shared_weak_count **)(v802.i64[0] + 56);
        v683 = *(_QWORD *)(v802.i64[0] + 48);
        v684 = v406;
        if (v406)
        {
          v407 = (unint64_t *)&v406->__shared_owners_;
          do
            v408 = __ldxr(v407);
          while (__stxr(v408 + 1, v407));
        }
        v409 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v683);
        v410 = *(std::__shared_weak_count **)(v802.i64[0] + 72);
        v681 = *(_QWORD *)(v802.i64[0] + 64);
        v682 = v410;
        if (v410)
        {
          v411 = (unint64_t *)&v410->__shared_owners_;
          do
            v412 = __ldxr(v411);
          while (__stxr(v412 + 1, v411));
        }
        v30 = objc_msgSend(v5, Uid, v397, v401, v405, v409, OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v681));
        v413 = v682;
        if (v682)
        {
          v414 = (unint64_t *)&v682->__shared_owners_;
          do
            v415 = __ldaxr(v414);
          while (__stlxr(v415 - 1, v414));
          if (!v415)
          {
            ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
            std::__shared_weak_count::__release_weak(v413);
          }
        }
        v416 = v684;
        if (v684)
        {
          v417 = (unint64_t *)&v684->__shared_owners_;
          do
            v418 = __ldaxr(v417);
          while (__stlxr(v418 - 1, v417));
          if (!v418)
          {
            ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
            std::__shared_weak_count::__release_weak(v416);
          }
        }
        v419 = v686;
        if (v686)
        {
          v420 = (unint64_t *)&v686->__shared_owners_;
          do
            v421 = __ldaxr(v420);
          while (__stlxr(v421 - 1, v420));
          if (!v421)
          {
            ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
            std::__shared_weak_count::__release_weak(v419);
          }
        }
        v422 = v688;
        if (v688)
        {
          v423 = (unint64_t *)&v688->__shared_owners_;
          do
            v424 = __ldaxr(v423);
          while (__stlxr(v424 - 1, v423));
          if (!v424)
          {
            ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
            std::__shared_weak_count::__release_weak(v422);
          }
        }
        v82 = v690;
        if (!v690)
          goto LABEL_735;
        v425 = (unint64_t *)&v690->__shared_owners_;
        do
          v84 = __ldaxr(v425);
        while (__stlxr(v84 - 1, v425));
        break;
      case 6:
        v465 = *(std::__shared_weak_count **)(v802.i64[0] + 8);
        v679 = *(_QWORD *)v802.i64[0];
        v680 = v465;
        if (v465)
        {
          v466 = (unint64_t *)&v465->__shared_owners_;
          do
            v467 = __ldxr(v466);
          while (__stxr(v467 + 1, v466));
        }
        v468 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v679);
        v469 = *(std::__shared_weak_count **)(v802.i64[0] + 24);
        v677 = *(_QWORD *)(v802.i64[0] + 16);
        v678 = v469;
        if (v469)
        {
          v470 = (unint64_t *)&v469->__shared_owners_;
          do
            v471 = __ldxr(v470);
          while (__stxr(v471 + 1, v470));
        }
        v472 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v677);
        v473 = *(std::__shared_weak_count **)(v802.i64[0] + 40);
        v675 = *(_QWORD *)(v802.i64[0] + 32);
        v676 = v473;
        if (v473)
        {
          v474 = (unint64_t *)&v473->__shared_owners_;
          do
            v475 = __ldxr(v474);
          while (__stxr(v475 + 1, v474));
        }
        v476 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v675);
        v477 = *(std::__shared_weak_count **)(v802.i64[0] + 56);
        v673 = *(_QWORD *)(v802.i64[0] + 48);
        v674 = v477;
        if (v477)
        {
          v478 = (unint64_t *)&v477->__shared_owners_;
          do
            v479 = __ldxr(v478);
          while (__stxr(v479 + 1, v478));
        }
        v480 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v673);
        v481 = *(std::__shared_weak_count **)(v802.i64[0] + 72);
        v671 = *(_QWORD *)(v802.i64[0] + 64);
        v672 = v481;
        if (v481)
        {
          v482 = (unint64_t *)&v481->__shared_owners_;
          do
            v483 = __ldxr(v482);
          while (__stxr(v483 + 1, v482));
        }
        v484 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v671);
        v485 = *(std::__shared_weak_count **)(v802.i64[0] + 88);
        v669 = *(_QWORD *)(v802.i64[0] + 80);
        v670 = v485;
        if (v485)
        {
          v486 = (unint64_t *)&v485->__shared_owners_;
          do
            v487 = __ldxr(v486);
          while (__stxr(v487 + 1, v486));
        }
        v30 = objc_msgSend(v5, Uid, v468, v472, v476, v480, v484, OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v669));
        v488 = v670;
        if (v670)
        {
          v489 = (unint64_t *)&v670->__shared_owners_;
          do
            v490 = __ldaxr(v489);
          while (__stlxr(v490 - 1, v489));
          if (!v490)
          {
            ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
            std::__shared_weak_count::__release_weak(v488);
          }
        }
        v491 = v672;
        if (v672)
        {
          v492 = (unint64_t *)&v672->__shared_owners_;
          do
            v493 = __ldaxr(v492);
          while (__stlxr(v493 - 1, v492));
          if (!v493)
          {
            ((void (*)(std::__shared_weak_count *))v491->__on_zero_shared)(v491);
            std::__shared_weak_count::__release_weak(v491);
          }
        }
        v494 = v674;
        if (v674)
        {
          v495 = (unint64_t *)&v674->__shared_owners_;
          do
            v496 = __ldaxr(v495);
          while (__stlxr(v496 - 1, v495));
          if (!v496)
          {
            ((void (*)(std::__shared_weak_count *))v494->__on_zero_shared)(v494);
            std::__shared_weak_count::__release_weak(v494);
          }
        }
        v497 = v676;
        if (v676)
        {
          v498 = (unint64_t *)&v676->__shared_owners_;
          do
            v499 = __ldaxr(v498);
          while (__stlxr(v499 - 1, v498));
          if (!v499)
          {
            ((void (*)(std::__shared_weak_count *))v497->__on_zero_shared)(v497);
            std::__shared_weak_count::__release_weak(v497);
          }
        }
        v500 = v678;
        if (v678)
        {
          v501 = (unint64_t *)&v678->__shared_owners_;
          do
            v502 = __ldaxr(v501);
          while (__stlxr(v502 - 1, v501));
          if (!v502)
          {
            ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
            std::__shared_weak_count::__release_weak(v500);
          }
        }
        v82 = v680;
        if (!v680)
          goto LABEL_735;
        v503 = (unint64_t *)&v680->__shared_owners_;
        do
          v84 = __ldaxr(v503);
        while (__stlxr(v84 - 1, v503));
        break;
      case 7:
        v308 = *(std::__shared_weak_count **)(v802.i64[0] + 8);
        v667 = *(_QWORD *)v802.i64[0];
        v668 = v308;
        if (v308)
        {
          v309 = (unint64_t *)&v308->__shared_owners_;
          do
            v310 = __ldxr(v309);
          while (__stxr(v310 + 1, v309));
        }
        v311 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v667);
        v312 = *(std::__shared_weak_count **)(v802.i64[0] + 24);
        v665 = *(_QWORD *)(v802.i64[0] + 16);
        v666 = v312;
        if (v312)
        {
          v313 = (unint64_t *)&v312->__shared_owners_;
          do
            v314 = __ldxr(v313);
          while (__stxr(v314 + 1, v313));
        }
        v315 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v665);
        v316 = *(std::__shared_weak_count **)(v802.i64[0] + 40);
        v663 = *(_QWORD *)(v802.i64[0] + 32);
        v664 = v316;
        if (v316)
        {
          v317 = (unint64_t *)&v316->__shared_owners_;
          do
            v318 = __ldxr(v317);
          while (__stxr(v318 + 1, v317));
        }
        v319 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v663);
        v320 = *(std::__shared_weak_count **)(v802.i64[0] + 56);
        v661 = *(_QWORD *)(v802.i64[0] + 48);
        v662 = v320;
        if (v320)
        {
          v321 = (unint64_t *)&v320->__shared_owners_;
          do
            v322 = __ldxr(v321);
          while (__stxr(v322 + 1, v321));
        }
        v323 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v661);
        v324 = *(std::__shared_weak_count **)(v802.i64[0] + 72);
        v659 = *(_QWORD *)(v802.i64[0] + 64);
        v660 = v324;
        if (v324)
        {
          v325 = (unint64_t *)&v324->__shared_owners_;
          do
            v326 = __ldxr(v325);
          while (__stxr(v326 + 1, v325));
        }
        v327 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v659);
        v328 = *(std::__shared_weak_count **)(v802.i64[0] + 88);
        v657 = *(_QWORD *)(v802.i64[0] + 80);
        v658 = v328;
        if (v328)
        {
          v329 = (unint64_t *)&v328->__shared_owners_;
          do
            v330 = __ldxr(v329);
          while (__stxr(v330 + 1, v329));
        }
        v331 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v657);
        v332 = *(std::__shared_weak_count **)(v802.i64[0] + 104);
        v655 = *(_QWORD *)(v802.i64[0] + 96);
        v656 = v332;
        if (v332)
        {
          v333 = (unint64_t *)&v332->__shared_owners_;
          do
            v334 = __ldxr(v333);
          while (__stxr(v334 + 1, v333));
        }
        v30 = objc_msgSend(v5, Uid, v311, v315, v319, v323, v327, v331, OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v655));
        v335 = v656;
        if (v656)
        {
          v336 = (unint64_t *)&v656->__shared_owners_;
          do
            v337 = __ldaxr(v336);
          while (__stlxr(v337 - 1, v336));
          if (!v337)
          {
            ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
            std::__shared_weak_count::__release_weak(v335);
          }
        }
        v338 = v658;
        if (v658)
        {
          v339 = (unint64_t *)&v658->__shared_owners_;
          do
            v340 = __ldaxr(v339);
          while (__stlxr(v340 - 1, v339));
          if (!v340)
          {
            ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
            std::__shared_weak_count::__release_weak(v338);
          }
        }
        v341 = v660;
        if (v660)
        {
          v342 = (unint64_t *)&v660->__shared_owners_;
          do
            v343 = __ldaxr(v342);
          while (__stlxr(v343 - 1, v342));
          if (!v343)
          {
            ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
            std::__shared_weak_count::__release_weak(v341);
          }
        }
        v344 = v662;
        if (v662)
        {
          v345 = (unint64_t *)&v662->__shared_owners_;
          do
            v346 = __ldaxr(v345);
          while (__stlxr(v346 - 1, v345));
          if (!v346)
          {
            ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
            std::__shared_weak_count::__release_weak(v344);
          }
        }
        v347 = v664;
        if (v664)
        {
          v348 = (unint64_t *)&v664->__shared_owners_;
          do
            v349 = __ldaxr(v348);
          while (__stlxr(v349 - 1, v348));
          if (!v349)
          {
            ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
            std::__shared_weak_count::__release_weak(v347);
          }
        }
        v350 = v666;
        if (v666)
        {
          v351 = (unint64_t *)&v666->__shared_owners_;
          do
            v352 = __ldaxr(v351);
          while (__stlxr(v352 - 1, v351));
          if (!v352)
          {
            ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
            std::__shared_weak_count::__release_weak(v350);
          }
        }
        v82 = v668;
        if (!v668)
          goto LABEL_735;
        v353 = (unint64_t *)&v668->__shared_owners_;
        do
          v84 = __ldaxr(v353);
        while (__stlxr(v84 - 1, v353));
        break;
      case 8:
        v560 = *(std::__shared_weak_count **)(v802.i64[0] + 8);
        v653 = *(_QWORD *)v802.i64[0];
        v654 = v560;
        if (v560)
        {
          v561 = (unint64_t *)&v560->__shared_owners_;
          do
            v562 = __ldxr(v561);
          while (__stxr(v562 + 1, v561));
        }
        v563 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v653);
        v564 = *(std::__shared_weak_count **)(v802.i64[0] + 24);
        v651 = *(_QWORD *)(v802.i64[0] + 16);
        v652 = v564;
        if (v564)
        {
          v565 = (unint64_t *)&v564->__shared_owners_;
          do
            v566 = __ldxr(v565);
          while (__stxr(v566 + 1, v565));
        }
        v567 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v651);
        v568 = *(std::__shared_weak_count **)(v802.i64[0] + 40);
        v649 = *(_QWORD *)(v802.i64[0] + 32);
        v650 = v568;
        if (v568)
        {
          v569 = (unint64_t *)&v568->__shared_owners_;
          do
            v570 = __ldxr(v569);
          while (__stxr(v570 + 1, v569));
        }
        v571 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v649);
        v572 = *(std::__shared_weak_count **)(v802.i64[0] + 56);
        v647 = *(_QWORD *)(v802.i64[0] + 48);
        v648 = v572;
        if (v572)
        {
          v573 = (unint64_t *)&v572->__shared_owners_;
          do
            v574 = __ldxr(v573);
          while (__stxr(v574 + 1, v573));
        }
        v575 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v647);
        v576 = *(std::__shared_weak_count **)(v802.i64[0] + 72);
        v645 = *(_QWORD *)(v802.i64[0] + 64);
        v646 = v576;
        if (v576)
        {
          v577 = (unint64_t *)&v576->__shared_owners_;
          do
            v578 = __ldxr(v577);
          while (__stxr(v578 + 1, v577));
        }
        v579 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v645);
        v580 = *(std::__shared_weak_count **)(v802.i64[0] + 88);
        v643 = *(_QWORD *)(v802.i64[0] + 80);
        v644 = v580;
        if (v580)
        {
          v581 = (unint64_t *)&v580->__shared_owners_;
          do
            v582 = __ldxr(v581);
          while (__stxr(v582 + 1, v581));
        }
        v583 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v643);
        v584 = *(std::__shared_weak_count **)(v802.i64[0] + 104);
        v641 = *(_QWORD *)(v802.i64[0] + 96);
        v642 = v584;
        if (v584)
        {
          v585 = (unint64_t *)&v584->__shared_owners_;
          do
            v586 = __ldxr(v585);
          while (__stxr(v586 + 1, v585));
        }
        v587 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v641);
        v588 = *(std::__shared_weak_count **)(v802.i64[0] + 120);
        v639 = *(_QWORD *)(v802.i64[0] + 112);
        v640 = v588;
        if (v588)
        {
          v589 = (unint64_t *)&v588->__shared_owners_;
          do
            v590 = __ldxr(v589);
          while (__stxr(v590 + 1, v589));
        }
        v30 = objc_msgSend(v5, Uid, v563, v567, v571, v575, v579, v583, v587, OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v639));
        v591 = v640;
        if (v640)
        {
          v592 = (unint64_t *)&v640->__shared_owners_;
          do
            v593 = __ldaxr(v592);
          while (__stlxr(v593 - 1, v592));
          if (!v593)
          {
            ((void (*)(std::__shared_weak_count *))v591->__on_zero_shared)(v591);
            std::__shared_weak_count::__release_weak(v591);
          }
        }
        v594 = v642;
        if (v642)
        {
          v595 = (unint64_t *)&v642->__shared_owners_;
          do
            v596 = __ldaxr(v595);
          while (__stlxr(v596 - 1, v595));
          if (!v596)
          {
            ((void (*)(std::__shared_weak_count *))v594->__on_zero_shared)(v594);
            std::__shared_weak_count::__release_weak(v594);
          }
        }
        v597 = v644;
        if (v644)
        {
          v598 = (unint64_t *)&v644->__shared_owners_;
          do
            v599 = __ldaxr(v598);
          while (__stlxr(v599 - 1, v598));
          if (!v599)
          {
            ((void (*)(std::__shared_weak_count *))v597->__on_zero_shared)(v597);
            std::__shared_weak_count::__release_weak(v597);
          }
        }
        v600 = v646;
        if (v646)
        {
          v601 = (unint64_t *)&v646->__shared_owners_;
          do
            v602 = __ldaxr(v601);
          while (__stlxr(v602 - 1, v601));
          if (!v602)
          {
            ((void (*)(std::__shared_weak_count *))v600->__on_zero_shared)(v600);
            std::__shared_weak_count::__release_weak(v600);
          }
        }
        v603 = v648;
        if (v648)
        {
          v604 = (unint64_t *)&v648->__shared_owners_;
          do
            v605 = __ldaxr(v604);
          while (__stlxr(v605 - 1, v604));
          if (!v605)
          {
            ((void (*)(std::__shared_weak_count *))v603->__on_zero_shared)(v603);
            std::__shared_weak_count::__release_weak(v603);
          }
        }
        v606 = v650;
        if (v650)
        {
          v607 = (unint64_t *)&v650->__shared_owners_;
          do
            v608 = __ldaxr(v607);
          while (__stlxr(v608 - 1, v607));
          if (!v608)
          {
            ((void (*)(std::__shared_weak_count *))v606->__on_zero_shared)(v606);
            std::__shared_weak_count::__release_weak(v606);
          }
        }
        v609 = v652;
        if (v652)
        {
          v610 = (unint64_t *)&v652->__shared_owners_;
          do
            v611 = __ldaxr(v610);
          while (__stlxr(v611 - 1, v610));
          if (!v611)
          {
            ((void (*)(std::__shared_weak_count *))v609->__on_zero_shared)(v609);
            std::__shared_weak_count::__release_weak(v609);
          }
        }
        v82 = v654;
        if (!v654)
          goto LABEL_735;
        v612 = (unint64_t *)&v654->__shared_owners_;
        do
          v84 = __ldaxr(v612);
        while (__stlxr(v84 - 1, v612));
        break;
      case 9:
        v145 = *(std::__shared_weak_count **)(v802.i64[0] + 8);
        v637 = *(_QWORD *)v802.i64[0];
        v638 = v145;
        if (v145)
        {
          v146 = (unint64_t *)&v145->__shared_owners_;
          do
            v147 = __ldxr(v146);
          while (__stxr(v147 + 1, v146));
        }
        v148 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v637);
        v149 = *(std::__shared_weak_count **)(v802.i64[0] + 24);
        v635 = *(_QWORD *)(v802.i64[0] + 16);
        v636 = v149;
        if (v149)
        {
          v150 = (unint64_t *)&v149->__shared_owners_;
          do
            v151 = __ldxr(v150);
          while (__stxr(v151 + 1, v150));
        }
        v619 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v635);
        v152 = *(std::__shared_weak_count **)(v802.i64[0] + 40);
        v633 = *(_QWORD *)(v802.i64[0] + 32);
        v634 = v152;
        if (v152)
        {
          v153 = (unint64_t *)&v152->__shared_owners_;
          do
            v154 = __ldxr(v153);
          while (__stxr(v154 + 1, v153));
        }
        v155 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v633);
        v156 = *(std::__shared_weak_count **)(v802.i64[0] + 56);
        v631 = *(_QWORD *)(v802.i64[0] + 48);
        v632 = v156;
        if (v156)
        {
          v157 = (unint64_t *)&v156->__shared_owners_;
          do
            v158 = __ldxr(v157);
          while (__stxr(v158 + 1, v157));
        }
        v159 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v631);
        v160 = *(std::__shared_weak_count **)(v802.i64[0] + 72);
        v629 = *(_QWORD *)(v802.i64[0] + 64);
        v630 = v160;
        if (v160)
        {
          v161 = (unint64_t *)&v160->__shared_owners_;
          do
            v162 = __ldxr(v161);
          while (__stxr(v162 + 1, v161));
        }
        v163 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v629);
        v164 = *(std::__shared_weak_count **)(v802.i64[0] + 88);
        v627 = *(_QWORD *)(v802.i64[0] + 80);
        v628 = v164;
        if (v164)
        {
          v165 = (unint64_t *)&v164->__shared_owners_;
          do
            v166 = __ldxr(v165);
          while (__stxr(v166 + 1, v165));
        }
        v167 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v627);
        v168 = *(std::__shared_weak_count **)(v802.i64[0] + 104);
        v625 = *(_QWORD *)(v802.i64[0] + 96);
        v626 = v168;
        if (v168)
        {
          v169 = (unint64_t *)&v168->__shared_owners_;
          do
            v170 = __ldxr(v169);
          while (__stxr(v170 + 1, v169));
        }
        v171 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v625);
        v172 = *(std::__shared_weak_count **)(v802.i64[0] + 120);
        v623 = *(_QWORD *)(v802.i64[0] + 112);
        v624 = v172;
        if (v172)
        {
          v173 = (unint64_t *)&v172->__shared_owners_;
          do
            v174 = __ldxr(v173);
          while (__stxr(v174 + 1, v173));
        }
        v175 = OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v623);
        v176 = *(std::__shared_weak_count **)(v802.i64[0] + 136);
        v621 = *(_QWORD *)(v802.i64[0] + 128);
        v622 = v176;
        if (v176)
        {
          v177 = (unint64_t *)&v176->__shared_owners_;
          do
            v178 = __ldxr(v177);
          while (__stxr(v178 + 1, v177));
        }
        v30 = objc_msgSend(v5, Uid, v148, v619, v155, v159, v163, v167, v171, v175, OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>((uint64_t)&v621));
        v179 = v622;
        if (v622)
        {
          v180 = (unint64_t *)&v622->__shared_owners_;
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 - 1, v180));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
            std::__shared_weak_count::__release_weak(v179);
          }
        }
        v182 = v624;
        if (v624)
        {
          v183 = (unint64_t *)&v624->__shared_owners_;
          do
            v184 = __ldaxr(v183);
          while (__stlxr(v184 - 1, v183));
          if (!v184)
          {
            ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
            std::__shared_weak_count::__release_weak(v182);
          }
        }
        v185 = v626;
        if (v626)
        {
          v186 = (unint64_t *)&v626->__shared_owners_;
          do
            v187 = __ldaxr(v186);
          while (__stlxr(v187 - 1, v186));
          if (!v187)
          {
            ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
            std::__shared_weak_count::__release_weak(v185);
          }
        }
        v188 = v628;
        if (v628)
        {
          v189 = (unint64_t *)&v628->__shared_owners_;
          do
            v190 = __ldaxr(v189);
          while (__stlxr(v190 - 1, v189));
          if (!v190)
          {
            ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
            std::__shared_weak_count::__release_weak(v188);
          }
        }
        v191 = v630;
        if (v630)
        {
          v192 = (unint64_t *)&v630->__shared_owners_;
          do
            v193 = __ldaxr(v192);
          while (__stlxr(v193 - 1, v192));
          if (!v193)
          {
            ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
            std::__shared_weak_count::__release_weak(v191);
          }
        }
        v194 = v632;
        if (v632)
        {
          v195 = (unint64_t *)&v632->__shared_owners_;
          do
            v196 = __ldaxr(v195);
          while (__stlxr(v196 - 1, v195));
          if (!v196)
          {
            ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
            std::__shared_weak_count::__release_weak(v194);
          }
        }
        v197 = v634;
        if (v634)
        {
          v198 = (unint64_t *)&v634->__shared_owners_;
          do
            v199 = __ldaxr(v198);
          while (__stlxr(v199 - 1, v198));
          if (!v199)
          {
            ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
            std::__shared_weak_count::__release_weak(v197);
          }
        }
        v200 = v636;
        if (v636)
        {
          v201 = (unint64_t *)&v636->__shared_owners_;
          do
            v202 = __ldaxr(v201);
          while (__stlxr(v202 - 1, v201));
          if (!v202)
          {
            ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
            std::__shared_weak_count::__release_weak(v200);
          }
        }
        v82 = v638;
        if (!v638)
          goto LABEL_735;
        v203 = (unint64_t *)&v638->__shared_owners_;
        do
          v84 = __ldaxr(v203);
        while (__stlxr(v84 - 1, v203));
        break;
      default:
        v618 = __cxa_allocate_exception(0x10uLL);
        if (*((char *)a2 + 79) < 0)
          v25 = (const char **)*v25;
        StringUtil::Format((StringUtil *)"Arity %s %zu too high for me", &v806, v25, (v802.i64[1] - v802.i64[0]) >> 4);
        MEMORY[0x1C3BD3068](v618, &v806);
        __cxa_throw(v618, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
LABEL_735:
    if (*((_DWORD *)a2 + 12) == 1)
    {
      v557 = operator new(0x30uLL);
      v559 = 0;
      v557[1] = 0;
      v557[2] = 0;
      *v557 = &off_1E7D89B90;
      *((_DWORD *)v557 + 6) = 1;
      v558 = (char *)(v557 + 3);
    }
    else
    {
      v557 = operator new(0x30uLL);
      v557[1] = 0;
      v557[2] = 0;
      *v557 = &off_1E7D89B90;
      *((_DWORD *)v557 + 6) = 2;
      v558 = (char *)(v557 + 3);
      v557[4] = v30;
      v559 = 1;
    }
  }
  *((_DWORD *)v557 + 10) = v559;
  *a3 = v558;
  a3[1] = v557;
  v806 = &v802;
  std::vector<std::shared_ptr<OVM::Var>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v806);
  v613 = v805;
  if (v805)
  {
    v614 = (unint64_t *)&v805->__shared_owners_;
    do
      v615 = __ldaxr(v614);
    while (__stlxr(v615 - 1, v614));
    if (!v615)
    {
      ((void (*)(std::__shared_weak_count *))v613->__on_zero_shared)(v613);
      std::__shared_weak_count::__release_weak(v613);
    }
  }
}

{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t v33;
  void *exception;
  _QWORD v35[2];
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v38 = 0;
  v39 = 0;
  OVM::InterpreterImpl::Evaluate(this, a2 + 2);
  switch(*((_DWORD *)a2 + 3))
  {
    case 0:
      if (*(_DWORD *)v36 != 4)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1C3BD305C](exception, "Deref a not-pointer?");
LABEL_42:
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      if (*(_DWORD *)(v36 + 16) != 3)
LABEL_38:
        std::__throw_bad_variant_access[abi:ne180100]();
      v5 = *(_QWORD *)(v36 + 8);
      *a3 = v5;
      v6 = (_QWORD *)operator new();
      *v6 = &off_1E7D89C00;
      v6[1] = 0;
      v6[2] = 0;
      v6[3] = v5;
      a3[1] = v6;
LABEL_19:
      v21 = v37;
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = v39;
      if (v39)
      {
        v25 = (unint64_t *)&v39->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      return;
    case 1:
      v19 = v36;
      v16 = operator new(0x30uLL);
      v16[1] = 0;
      v16[2] = 0;
      *((_DWORD *)v16 + 6) = 4;
      v17 = (char *)(v16 + 3);
      *v16 = &off_1E7D89B90;
      v16[4] = v19;
      v18 = 3;
      goto LABEL_15;
    case 2:
      v12 = v36;
      if (*(_DWORD *)(v36 + 16) != 1)
        goto LABEL_38;
      v13 = *(_QWORD *)(v36 + 8) - 1;
      goto LABEL_11;
    case 3:
      v12 = v36;
      if (*(_DWORD *)(v36 + 16) != 1)
        goto LABEL_38;
      v13 = *(_QWORD *)(v36 + 8) + 1;
LABEL_11:
      *(_QWORD *)(v12 + 8) = v13;
      v14 = v37;
      *a3 = v12;
      a3[1] = v14;
      v36 = 0;
      v37 = 0;
      goto LABEL_19;
    case 4:
      v7 = v36;
      if (*(_DWORD *)(v36 + 16) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v8 = operator new(0x30uLL);
      v8[1] = 0;
      v8[2] = 0;
      *v8 = &off_1E7D89B90;
      v9 = *(_QWORD *)(v7 + 8);
      *((_DWORD *)v8 + 6) = 2;
      v10 = (char *)(v8 + 3);
      v8[4] = v9;
      *((_DWORD *)v8 + 10) = 1;
      v11 = v9 - 1;
      goto LABEL_18;
    case 5:
      v7 = v36;
      if (*(_DWORD *)(v36 + 16) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v8 = operator new(0x30uLL);
      v8[1] = 0;
      v8[2] = 0;
      *v8 = &off_1E7D89B90;
      v20 = *(_QWORD *)(v7 + 8);
      *((_DWORD *)v8 + 6) = 2;
      v10 = (char *)(v8 + 3);
      v8[4] = v20;
      *((_DWORD *)v8 + 10) = 1;
      v11 = v20 + 1;
LABEL_18:
      *(_QWORD *)(v7 + 8) = v11;
      *a3 = v10;
      a3[1] = v8;
      v38 = 0;
      v39 = 0;
      goto LABEL_19;
    case 6:
      v27 = v37;
      v35[0] = v36;
      v35[1] = v37;
      if (v37)
      {
        v28 = (unint64_t *)&v37->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = OVM::InterpreterImpl::EvaluateTruthiness((uint64_t)v35);
      v31 = operator new(0x30uLL);
      v31[1] = 0;
      v31[2] = 0;
      *((_DWORD *)v31 + 6) = 2;
      *v31 = &off_1E7D89B90;
      v31[4] = v30 ^ 1u;
      *((_DWORD *)v31 + 10) = 1;
      *a3 = v31 + 3;
      a3[1] = v31;
      if (v27)
      {
        v32 = (unint64_t *)&v27->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      goto LABEL_19;
    case 7:
      if (*(_DWORD *)(v36 + 16) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v15 = *(_QWORD *)(v36 + 8);
      v16 = operator new(0x30uLL);
      v16[1] = 0;
      v16[2] = 0;
      *((_DWORD *)v16 + 6) = 2;
      v17 = (char *)(v16 + 3);
      *v16 = &off_1E7D89B90;
      v16[4] = -v15;
      v18 = 1;
LABEL_15:
      *((_DWORD *)v16 + 10) = v18;
      *a3 = v17;
      a3[1] = v16;
      goto LABEL_19;
    default:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1C3BD305C](exception, "Unsupported unary operator");
      goto LABEL_42;
  }
}

void sub_1C3514ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

__n128 OVM::InterpreterImpl::Evaluate@<Q0>(OVM::InterpreterImpl *this@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  void **v7;
  void **v8;
  __n128 result;
  unint64_t v10;
  char *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  void **v15;
  void **v16;
  char *v17;
  void *exception;
  _QWORD v19[3];

  v6 = *((_QWORD *)this + 5) + *((_QWORD *)this + 4) - 1;
  v7 = a2 + 2;
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>>>::find<std::string>(*(_QWORD *)(*((_QWORD *)this + 1) + 8 * (v6 / 0xAA)) + 24 * (v6 % 0xAA), a2 + 2);
  v10 = *((_QWORD *)this + 5) + *((_QWORD *)this + 4) - 1;
  if ((void **)(*(_QWORD *)(*((_QWORD *)this + 1) + 8 * (v10 / 0xAA)) + 24 * (v10 % 0xAA) + 8) == v8)
  {
    v14 = *((_QWORD *)this + 8);
    if (!v14
      || (v15 = std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>>>::find<std::string>(v14, v7), (void **)(*((_QWORD *)this + 8) + 8) == v15))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      if (*((char *)a2 + 39) < 0)
        v7 = (void **)*v7;
      StringUtil::Format((StringUtil *)"NameError, cannot resolve reference to %s", v19, v7);
      MEMORY[0x1C3BD3068](exception, v19);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v16 = v15;
    v17 = (char *)operator new(0x30uLL);
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = 0;
    *(_QWORD *)v17 = &off_1E7D89B90;
    result = *(__n128 *)(v16 + 7);
    *((_QWORD *)v17 + 5) = v16[9];
    *(__n128 *)(v17 + 24) = result;
    *a3 = v17 + 24;
    a3[1] = v17;
  }
  else
  {
    v11 = (char *)v8[8];
    *a3 = v8[7];
    a3[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  return result;
}

void sub_1C3514CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_1C3517744(_Unwind_Exception *a1)
{
  int v1;
  void *v2;
  uint64_t v3;

  if (*(char *)(v3 - 105) < 0)
  {
    operator delete(*(void **)(v3 - 128));
    if ((v1 & 1) == 0)
    {
LABEL_6:
      *(_QWORD *)(v3 - 192) = v3 - 176;
      std::vector<std::shared_ptr<OVM::Var>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 192));
      std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100](v3 - 144);
      _Unwind_Resume(a1);
    }
  }
  else if (!v1)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v2);
  goto LABEL_6;
}

_QWORD *OVM::InterpreterImpl::Evaluate@<X0>(OVM::InterpreterImpl *this@<X0>, const OVM::ObjCClass *a2@<X1>, _QWORD *a3@<X8>)
{
  const char **v5;
  const char *v6;
  Class Class;
  Class v8;
  _QWORD *v9;
  _QWORD *result;
  void *exception;
  void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string v18;
  __int128 v19;
  std::string::size_type v20;

  v5 = (const char **)((char *)a2 + 16);
  if (((***((uint64_t (****)(_QWORD, char *))this + 9))(*((_QWORD *)this + 9), (char *)a2 + 16) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    MEMORY[0x1C3BD3068](exception, &v19);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (*((char *)a2 + 39) < 0)
    v6 = *v5;
  else
    v6 = (const char *)v5;
  Class = objc_getClass(v6);
  if (!Class)
  {
    v12 = __cxa_allocate_exception(0x10uLL);
    *((_BYTE *)&v18.__r_.__value_.__s + 23) = 16;
    strcpy((char *)&v18, "Cannot get class");
    v13 = *((char *)a2 + 39);
    if (v13 >= 0)
      v14 = (const std::string::value_type *)v5;
    else
      v14 = (const std::string::value_type *)*((_QWORD *)a2 + 2);
    if (v13 >= 0)
      v15 = *((unsigned __int8 *)a2 + 39);
    else
      v15 = *((_QWORD *)a2 + 3);
    v16 = std::string::append(&v18, v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v20 = v16->__r_.__value_.__r.__words[2];
    v19 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C3BD3068](v12, &v19);
    __cxa_throw(v12, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v8 = Class;
  v9 = operator new(0x30uLL);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &off_1E7D89B90;
  v9[4] = v8;
  *((_DWORD *)v9 + 10) = 2;
  a3[1] = v9;
  *((_DWORD *)v9 + 6) = 3;
  result = v9 + 3;
  *a3 = result;
  return result;
}

void sub_1C3517EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  char v22;

  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if ((v22 & 1) != 0)
    __cxa_free_exception(v21);
  _Unwind_Resume(exception_object);
}

void OVM::InterpreterImpl::Evaluate(OVM::InterpreterImpl *this@<X0>, const OVM::FunctionCall *a2@<X1>, _QWORD *a3@<X8>)
{
  const OVM::Expression **v4;
  const OVM::Expression **i;
  _OWORD *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  void *exception;
  _QWORD v31[2];
  __int128 v32;
  uint64_t v33;
  void *__p;
  _QWORD *v35;
  char *v36;

  __p = 0;
  v35 = 0;
  v36 = 0;
  v4 = (const OVM::Expression **)*((_QWORD *)a2 + 2);
  for (i = (const OVM::Expression **)*((_QWORD *)a2 + 3); v4 != i; ++v4)
  {
    OVM::InterpreterImpl::Evaluate(this, v4);
    v6 = v35;
    if (v35 >= (_QWORD *)v36)
    {
      v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (_BYTE *)__p) >> 3);
      v10 = v9 + 1;
      if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((v36 - (_BYTE *)__p) >> 3) > v10)
        v10 = 0x5555555555555556 * ((v36 - (_BYTE *)__p) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v36 - (_BYTE *)__p) >> 3) >= 0x555555555555555)
        v11 = 0xAAAAAAAAAAAAAAALL;
      else
        v11 = v10;
      if (v11)
        v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v36, v11);
      else
        v12 = 0;
      v13 = &v12[8 * (((char *)v35 - (_BYTE *)__p) >> 3)];
      v14 = *(_OWORD *)v32;
      *((_QWORD *)v13 + 2) = *(_QWORD *)(v32 + 16);
      *(_OWORD *)v13 = v14;
      v16 = (char *)__p;
      v15 = (char *)v35;
      v17 = &v12[24 * v9];
      if (v35 != __p)
      {
        do
        {
          v18 = *(_OWORD *)(v15 - 24);
          *((_QWORD *)v17 - 1) = *((_QWORD *)v15 - 1);
          *(_OWORD *)(v17 - 24) = v18;
          v17 -= 24;
          v15 -= 24;
        }
        while (v15 != v16);
        v15 = (char *)__p;
      }
      v8 = v13 + 24;
      __p = v17;
      v35 = v13 + 24;
      v36 = &v12[24 * v11];
      if (v15)
        operator delete(v15);
    }
    else
    {
      v7 = *(_OWORD *)v32;
      v35[2] = *(_QWORD *)(v32 + 16);
      *v6 = v7;
      v8 = (_QWORD *)v6 + 3;
    }
    v35 = v8;
    if (*((_QWORD *)&v32 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 16))(*((_QWORD *)&v32 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v32 + 1));
      }
    }
  }
  v21 = std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>>>::find<std::string>(*((_QWORD *)this + 6), (void **)a2 + 5);
  if ((void **)(*((_QWORD *)this + 6) + 8) == v21)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    MEMORY[0x1C3BD3068](exception, &v32);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v22 = (std::__shared_weak_count *)v21[8];
  v31[0] = v21[7];
  v31[1] = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  OVM::InterpreterImpl::RunSubroutine(&v32, this, v31, &__p);
  v25 = (char *)operator new(0x30uLL);
  *((_QWORD *)v25 + 1) = 0;
  *((_QWORD *)v25 + 2) = 0;
  *(_QWORD *)v25 = &off_1E7D89B90;
  *(_OWORD *)(v25 + 24) = v32;
  *((_QWORD *)v25 + 5) = v33;
  *a3 = v25 + 24;
  a3[1] = v25;
  if (v22)
  {
    v26 = (unint64_t *)&v22->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p)
  {
    v35 = __p;
    operator delete(__p);
  }
}

void sub_1C3518208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      if (a19)
        operator delete(a19);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

_QWORD *OVM::InterpreterImpl::Evaluate@<X0>(const OVM::StringLiteral *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v4 = (_QWORD *)((char *)a1 + 16);
  if (*((char *)a1 + 39) < 0)
    v4 = (_QWORD *)*v4;
  v5 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v4, 1);
  v6 = operator new(0x30uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E7D89B90;
  v6[4] = v5;
  *((_DWORD *)v6 + 10) = 2;
  a2[1] = v6;
  *((_DWORD *)v6 + 6) = 3;
  result = v6 + 3;
  *a2 = result;
  return result;
}

_QWORD *OVM::InterpreterImpl::Evaluate@<X0>(OVM::InterpreterImpl *this@<X0>, const OVM::Expression **a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  const OVM::Expression **v12;
  const OVM::Expression **v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *result;
  std::__shared_weak_count *v18;
  char v19[8];
  std::__shared_weak_count *v20;

  OVM::InterpreterImpl::Evaluate(this, a2 + 2);
  v6 = OVM::InterpreterImpl::EvaluateTruthiness((uint64_t)v19);
  v7 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (char *)(a2 + 3);
  v11 = 6;
  if (v6)
    v11 = 3;
  else
    v10 = (char *)(a2 + 6);
  v12 = (const OVM::Expression **)a2[v11];
  v13 = (const OVM::Expression **)*((_QWORD *)v10 + 1);
  while (v12 != v13)
  {
    OVM::InterpreterImpl::Evaluate(this, v12);
    if (v18)
    {
      v14 = (unint64_t *)&v18->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)())v18->__on_zero_shared)();
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    ++v12;
  }
  v16 = operator new(0x30uLL);
  v16[1] = 0;
  v16[2] = 0;
  *v16 = &off_1E7D89B90;
  *((_DWORD *)v16 + 10) = 0;
  a3[1] = v16;
  *((_DWORD *)v16 + 6) = 1;
  result = v16 + 3;
  *a3 = result;
  return result;
}

void sub_1C3518428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C35191C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100](v6 - 64);
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100](v6 - 48);
  _Unwind_Resume(a1);
}

void OVM::InterpreterImpl::Evaluate(OVM::InterpreterImpl *this, const OVM::Expression **a2)
{
  char *exception;
  __int128 v5;

  exception = (char *)__cxa_allocate_exception(0x18uLL);
  OVM::InterpreterImpl::Evaluate(this, a2 + 2);
  *(_QWORD *)exception = &off_1E7D89B48;
  *(_OWORD *)(exception + 8) = v5;
}

void sub_1C3519318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1C351970C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  __cxa_free_exception(v13);
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1C3519720(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_1C351972C(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __cxa_end_catch();
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1C3519770);
}

void sub_1C351973C(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1C3519770);
}

_QWORD *OVM::InterpreterImpl::Evaluate@<X0>(OVM::InterpreterImpl *this@<X0>, const OVM::Loop *a2@<X1>, _QWORD *a3@<X8>)
{
  const OVM::Expression **v6;
  uint64_t v7;
  uint64_t *p_shared_owners;
  unint64_t v9;
  const OVM::Expression **v10;
  const OVM::Expression **v11;
  uint64_t *v12;
  unint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const OVM::Expression **v18;
  const OVM::Expression **v19;
  std::__shared_weak_count *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *result;
  std::__shared_weak_count *v27;
  char v28[8];
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;

  v7 = *((_QWORD *)a2 + 2);
  v6 = (const OVM::Expression **)((char *)a2 + 16);
  if (v7)
  {
    OVM::InterpreterImpl::Evaluate(this, v6);
    if (v30)
    {
      p_shared_owners = &v30->__shared_owners_;
      do
        v9 = __ldaxr((unint64_t *)p_shared_owners);
      while (__stlxr(v9 - 1, (unint64_t *)p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  if (*((_DWORD *)a2 + 16) == 1)
  {
    v10 = (const OVM::Expression **)*((_QWORD *)a2 + 5);
    v11 = (const OVM::Expression **)*((_QWORD *)a2 + 6);
    while (v10 != v11)
    {
      OVM::InterpreterImpl::Evaluate(this, v10);
      if (v31)
      {
        v12 = &v31->__shared_owners_;
        do
          v13 = __ldaxr((unint64_t *)v12);
        while (__stlxr(v13 - 1, (unint64_t *)v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      ++v10;
    }
  }
  while (1)
  {
    OVM::InterpreterImpl::Evaluate(this, (const OVM::Expression **)a2 + 3);
    v14 = OVM::InterpreterImpl::EvaluateTruthiness((uint64_t)v28);
    v15 = v29;
    if (v29)
    {
      v16 = (unint64_t *)&v29->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (!v14)
      break;
    v18 = (const OVM::Expression **)*((_QWORD *)a2 + 5);
    v19 = (const OVM::Expression **)*((_QWORD *)a2 + 6);
    while (v18 != v19)
    {
      OVM::InterpreterImpl::Evaluate(this, v18);
      v20 = v31;
      if (v31)
      {
        v21 = &v31->__shared_owners_;
        do
          v22 = __ldaxr((unint64_t *)v21);
        while (__stlxr(v22 - 1, (unint64_t *)v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      ++v18;
    }
    if (*((_QWORD *)a2 + 4))
    {
      OVM::InterpreterImpl::Evaluate(this, (const OVM::Expression **)a2 + 4);
      if (v27)
      {
        v23 = (unint64_t *)&v27->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)())v27->__on_zero_shared)();
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
  }
  v25 = operator new(0x30uLL);
  v25[1] = 0;
  v25[2] = 0;
  *v25 = &off_1E7D89B90;
  *((_DWORD *)v25 + 10) = 0;
  a3[1] = v25;
  *((_DWORD *)v25 + 6) = 1;
  result = v25 + 3;
  *a3 = result;
  return result;
}

void sub_1C35199B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *OVM::InterpreterImpl::Evaluate@<X0>(OVM::InterpreterImpl *this@<X0>, const OVM::DictionaryLiteral *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *result;
  void *exception;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v7 = *((_QWORD *)a2 + 2);
  v6 = *((_QWORD *)a2 + 3);
  v8 = (v6 - v7) >> 3;
  v9 = objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v8);
  v10 = objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v8);
  if (v6 != v7)
  {
    v11 = 0;
    if (v8 <= 1)
      v12 = 1;
    else
      v12 = v8;
    do
    {
      OVM::InterpreterImpl::Evaluate(this, (const OVM::Expression **)(*((_QWORD *)a2 + 2) + 8 * v11));
      if (*(_DWORD *)v20 != 3)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1C3BD305C](exception, "Adding a non-nsobject to a dictinoary?");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      if (*(_DWORD *)(v20 + 16) != 2)
        std::__throw_bad_variant_access[abi:ne180100]();
      if ((v11 & 1) != 0)
        v13 = (void *)v10;
      else
        v13 = (void *)v9;
      objc_msgSend(v13, "addObject:", *(_QWORD *)(v20 + 8));
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)())v21->__on_zero_shared)();
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  v16 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:", v10, v9);
  v17 = operator new(0x30uLL);
  v17[1] = 0;
  v17[2] = 0;
  *v17 = &off_1E7D89B90;
  v17[4] = v16;
  *((_DWORD *)v17 + 10) = 2;
  a3[1] = v17;
  *((_DWORD *)v17 + 6) = 3;
  result = v17 + 3;
  *a3 = result;
  return result;
}

void sub_1C3519B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *OVM::InterpreterImpl::Evaluate@<X0>(OVM::InterpreterImpl *this@<X0>, const OVM::ArrayLiteral *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  const OVM::Expression **v7;
  const OVM::Expression **v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *result;
  void *exception;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v6 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", (uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3);
  v7 = (const OVM::Expression **)*((_QWORD *)a2 + 2);
  v8 = (const OVM::Expression **)*((_QWORD *)a2 + 3);
  while (v7 != v8)
  {
    OVM::InterpreterImpl::Evaluate(this, v7);
    if (*(_DWORD *)v15 != 3)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1C3BD305C](exception, "Adding a non-nsobject to an array?");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (*(_DWORD *)(v15 + 16) != 2)
      std::__throw_bad_variant_access[abi:ne180100]();
    objc_msgSend(v6, "addObject:", *(_QWORD *)(v15 + 8));
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)())v16->__on_zero_shared)();
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    ++v7;
  }
  v11 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v6);
  v12 = operator new(0x30uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_1E7D89B90;
  v12[4] = v11;
  *((_DWORD *)v12 + 10) = 2;
  a3[1] = v12;
  *((_DWORD *)v12 + 6) = 3;
  result = v12 + 3;
  *a3 = result;
  return result;
}

void sub_1C3519CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t OVM::InterpreterImpl::Evaluate(OVM::InterpreterImpl *this, const OVM::CompoundExpression *a2)
{
  const OVM::Expression **v4;
  const OVM::Expression **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v9;

  v4 = (const OVM::Expression **)*((_QWORD *)a2 + 2);
  v5 = (const OVM::Expression **)*((_QWORD *)a2 + 3);
  while (v4 != v5)
  {
    OVM::InterpreterImpl::Evaluate(this, v4);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)())v9->__on_zero_shared)();
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    ++v4;
  }
  return OVM::InterpreterImpl::Evaluate(this, (const OVM::Expression **)a2 + 5);
}

void OVM::InterpreterImpl::EarlyReturn::~EarlyReturn(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E7D89B48;
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)&this[1]);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&off_1E7D89B48;
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)&this[1]);
  std::exception::~exception(this);
  JUMPOUT(0x1C3BD30ECLL);
}

uint64_t OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  char *v5;

  v1 = *(unsigned int *)(*(_QWORD *)a1 + 16);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v2 = *(_QWORD *)a1 + 8;
  v5 = &v4;
  return ((uint64_t (*)(char **, uint64_t))*(&off_1E7D89BD0 + v1))(&v5, v2);
}

uint64_t OVM::InterpreterImpl::EvaluateTruthiness(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  char *v5;

  v1 = *(unsigned int *)(*(_QWORD *)a1 + 16);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v2 = *(_QWORD *)a1 + 8;
  v5 = &v4;
  return ((uint64_t (*)(char **, uint64_t))*(&off_1E7D89B60 + v1))(&v5, v2);
}

_QWORD *std::shared_ptr<OVM::Var>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void OVM::Interpreter::RunSubroutine(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  _OWORD v30[3];
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v7 = *a1;
  v6 = (std::__shared_weak_count *)a1[1];
  v29 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = *a4;
  v10 = (std::__shared_weak_count *)a4[1];
  v28 = v10;
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  memset(v30, 0, sizeof(v30));
  v31 = v7;
  v32 = v6;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v33 = a5;
  v34 = v11;
  v35 = v10;
  if (v10)
  {
    v16 = (unint64_t *)&v10->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  OVM::InterpreterImpl::RunSubroutine((uint64_t *)v30, a2, a3, a6);
  v18 = v35;
  if (v35)
  {
    v19 = (unint64_t *)&v35->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v32;
  if (v32)
  {
    v22 = (unint64_t *)&v32->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::deque<std::map<std::string,std::shared_ptr<OVM::Var>>>::~deque[abi:ne180100](v30);
  if (v28)
  {
    v24 = (unint64_t *)&v28->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v29)
  {
    v26 = (unint64_t *)&v29->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1C351A08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  OVM::InterpreterImpl::~InterpreterImpl((OVM::InterpreterImpl *)&a13);
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void OVM::InterpreterImpl::~InterpreterImpl(OVM::InterpreterImpl *this)
{
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::deque<std::map<std::string,std::shared_ptr<OVM::Var>>>::~deque[abi:ne180100](this);
}

std::string **OVM::Error::Error<>(std::string **a1, uint64_t a2)
{
  std::string *v3;
  std::string v5;
  __int128 v6;

  *(_QWORD *)&v6 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v5 = *(std::string *)a2;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = (std::string *)operator new(0x18uLL);
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3 + 1;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a1 + 2), (__int128 *)&v5, &v6, v3);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1C351A1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(exception_object);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E7D89560, MEMORY[0x1E0DE42D0]);
}

void sub_1C351A2CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1C351A42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t *OVM::Error::Error<std::string>(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  std::string *v5;
  std::string *v6;
  uint64_t v7;
  std::string v9;
  __int128 v10;

  *(_QWORD *)&v10 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v9 = *(std::string *)a2;
  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  v5 = (std::string *)operator new(0x18uLL);
  *a1 = (uint64_t)v5;
  a1[1] = (uint64_t)v5;
  a1[2] = (uint64_t)&v5[1];
  v6 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a1 + 2), (__int128 *)&v9, &v10, v5);
  a1[1] = (uint64_t)v6;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    v6 = (std::string *)a1[1];
  }
  if ((unint64_t)v6 >= a1[2])
  {
    v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1, a3);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a1, a3);
    v7 = (uint64_t)&v6[1];
  }
  a1[1] = v7;
  return a1;
}

void sub_1C351A718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_1C351A7B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1C351A8CC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::deque<std::map<std::string,std::shared_ptr<OVM::Var>>>::emplace_back<>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = a1[1];
  v3 = a1[2];
  v4 = 170 * ((v3 - v2) >> 3) - 1;
  if (v3 == v2)
    v4 = 0;
  if (v4 == a1[5] + a1[4])
  {
    std::deque<std::map<std::string,std::shared_ptr<OVM::Var>>>::__add_back_capacity(a1);
    v2 = a1[1];
    v3 = a1[2];
  }
  if (v3 == v2)
  {
    v6 = 0;
  }
  else
  {
    v5 = a1[5] + a1[4];
    v6 = (_QWORD *)(*(_QWORD *)(v2 + 8 * (v5 / 0xAA)) + 24 * (v5 % 0xAA));
  }
  v6[2] = 0;
  v6[1] = 0;
  *v6 = v6 + 1;
  v7 = a1[4];
  v8 = a1[5] + 1;
  a1[5] = v8;
  v9 = v7 + v8;
  v10 = a1[1];
  v11 = (_QWORD *)(v10 + 8 * (v9 / 0xAA));
  v12 = *v11 + 24 * (v9 % 0xAA);
  if (a1[2] == v10)
    v12 = 0;
  if (v12 == *v11)
    v12 = *(v11 - 1) + 4080;
  return v12 - 24;
}

void std::deque<std::map<std::string,std::shared_ptr<OVM::Var>>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<std::map<std::string,std::shared_ptr<OVM::Var>> *,std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<std::map<std::string,std::shared_ptr<OVM::Var>> *,std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<std::map<std::string,std::shared_ptr<OVM::Var>> *,std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::map<std::string,std::shared_ptr<OVM::Var>> *,std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1C351AE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::map<std::string,std::shared_ptr<OVM::Var>> *,std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::map<std::string,std::shared_ptr<OVM::Var>> *,std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::map<std::string,std::shared_ptr<OVM::Var>> *,std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *> &>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::map<std::string,std::shared_ptr<OVM::Var>> *,std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *> &>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<OVM::Var>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t std::__split_buffer<std::shared_ptr<OVM::Var>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::shared_ptr<OVM::Var>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<OVM::InterpreterImpl::EvaluateTruthiness(std::shared_ptr<OVM::Var>)::$_0,OVM::InterpreterImpl::EvaluateTruthiness(std::shared_ptr<OVM::Var>)::$_1,OVM::InterpreterImpl::EvaluateTruthiness(std::shared_ptr<OVM::Var>)::$_2,OVM::InterpreterImpl::EvaluateTruthiness(std::shared_ptr<OVM::Var>)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,long,NSObject *,OVM::Var*> &>()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<OVM::InterpreterImpl::EvaluateTruthiness(std::shared_ptr<OVM::Var>)::$_0,OVM::InterpreterImpl::EvaluateTruthiness(std::shared_ptr<OVM::Var>)::$_1,OVM::InterpreterImpl::EvaluateTruthiness(std::shared_ptr<OVM::Var>)::$_2,OVM::InterpreterImpl::EvaluateTruthiness(std::shared_ptr<OVM::Var>)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,long,NSObject *,OVM::Var*> &>(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<OVM::InterpreterImpl::EvaluateTruthiness(std::shared_ptr<OVM::Var>)::$_0,OVM::InterpreterImpl::EvaluateTruthiness(std::shared_ptr<OVM::Var>)::$_1,OVM::InterpreterImpl::EvaluateTruthiness(std::shared_ptr<OVM::Var>)::$_2,OVM::InterpreterImpl::EvaluateTruthiness(std::shared_ptr<OVM::Var>)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,long,NSObject *,OVM::Var*> &>(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<OVM::InterpreterImpl::EvaluateTruthiness(std::shared_ptr<OVM::Var>)::$_0,OVM::InterpreterImpl::EvaluateTruthiness(std::shared_ptr<OVM::Var>)::$_1,OVM::InterpreterImpl::EvaluateTruthiness(std::shared_ptr<OVM::Var>)::$_2,OVM::InterpreterImpl::EvaluateTruthiness(std::shared_ptr<OVM::Var>)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,long,NSObject *,OVM::Var*> &>(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

uint64_t std::deque<std::map<std::string,std::shared_ptr<OVM::Var>>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0xAA];
    v7 = (uint64_t)*v6 + 24 * (v5 % 0xAA);
    v8 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::destroy(v7, *(_QWORD **)(v7 + 8));
        v7 += 24;
        if (v7 - (_QWORD)*v6 == 4080)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 85;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 170;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<std::map<std::string,std::shared_ptr<OVM::Var>> *,std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *>>::~__split_buffer((uint64_t)a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<OVM::Var>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<OVM::Var>>,0>(uint64_t a1)
{
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__split_buffer<std::map<std::string,std::shared_ptr<OVM::Var>> *,std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void **std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>>>::find<std::string>(uint64_t a1, void **a2)
{
  void **v2;
  _QWORD *v3;
  void **v5;
  char v6;
  _QWORD *v7;

  v2 = (void **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (void **)(a1 + 8);
  do
  {
    v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = (void **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1C351B94C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<OVM::Var>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<OVM::Var>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7D89B90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<OVM::Var>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7D89B90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BD30ECLL);
}

uint64_t std::deque<std::map<std::string,std::shared_ptr<OVM::Var>>>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;

  v2 = a1[5] + a1[4] - 1;
  v3 = *(_QWORD *)(a1[1] + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA);
  std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::destroy(v3, *(_QWORD **)(v3 + 8));
  --a1[5];
  return std::deque<std::map<std::string,std::shared_ptr<OVM::Var>>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<std::map<std::string,std::shared_ptr<OVM::Var>>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 170 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0xAA)
    a2 = 1;
  if (v5 < 0x154)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<void * OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>(std::shared_ptr<OVM::Var>)::{lambda(std::monostate)#1},void * OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>(std::shared_ptr<OVM::Var>)::{lambda(long)#1},void * OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>(std::shared_ptr<OVM::Var>)::{lambda(NSObject *)#1},void * OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>(std::shared_ptr<OVM::Var>)::{lambda(OVM::Var*)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,long,NSObject *,OVM::Var*> &>()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<void * OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>(std::shared_ptr<OVM::Var>)::{lambda(std::monostate)#1},void * OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>(std::shared_ptr<OVM::Var>)::{lambda(long)#1},void * OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>(std::shared_ptr<OVM::Var>)::{lambda(NSObject *)#1},void * OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>(std::shared_ptr<OVM::Var>)::{lambda(OVM::Var*)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,long,NSObject *,OVM::Var*> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<void * OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>(std::shared_ptr<OVM::Var>)::{lambda(std::monostate)#1},void * OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>(std::shared_ptr<OVM::Var>)::{lambda(long)#1},void * OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>(std::shared_ptr<OVM::Var>)::{lambda(NSObject *)#1},void * OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>(std::shared_ptr<OVM::Var>)::{lambda(OVM::Var*)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,long,NSObject *,OVM::Var*> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

void std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<void * OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>(std::shared_ptr<OVM::Var>)::{lambda(std::monostate)#1},void * OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>(std::shared_ptr<OVM::Var>)::{lambda(long)#1},void * OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>(std::shared_ptr<OVM::Var>)::{lambda(NSObject *)#1},void * OVM::InterpreterImpl::GetUnsafe<std::shared_ptr<OVM::Var>>(std::shared_ptr<OVM::Var>)::{lambda(OVM::Var*)#1}>>::operator()[abi:ne180100]<std::__variant_detail::__alt<3ul,OVM::Var*> &>(uint64_t a1, _DWORD **a2)
{
  _QWORD *exception;

  switch(**a2)
  {
    case 1:
    case 4:
      exception = __cxa_allocate_exception(8uLL);
      *exception = MEMORY[0x1E0DE5040] + 16;
      __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
    default:
      return;
  }
}

void std::__shared_ptr_pointer<OVM::Var *,OVM::InterpreterImpl::Evaluate(OVM::UnaryOperator const*)::$_0,std::allocator<OVM::Var>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BD30ECLL);
}

uint64_t std::__shared_ptr_pointer<OVM::Var *,OVM::InterpreterImpl::Evaluate(OVM::UnaryOperator const*)::$_0,std::allocator<OVM::Var>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void sub_1C351C288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_1C351C420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OVM::Deserialize(OVM *this@<X0>, uint64_t a2@<X8>)
{
  OVM *v3;
  unsigned __int8 *v4;
  OVM *v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  size_t v9;
  OVM *v10;
  void *v11;
  id v12;
  _QWORD *v13;
  uint64_t i;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  id v20;
  uint64_t k;
  void *v22;
  int v23;
  void *v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  OVM *v28;
  uint64_t **v29;
  _OWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id obj;
  id v42;
  void *v43;
  uint64_t v44;
  void *v45;
  id v46;
  OVM *v48;
  id v49;
  int v50[4];
  int v51[4];
  uint64_t *v52[3];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  id v59;
  std::string *v60;
  std::string __p;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[128];
  __int128 v67;
  uint64_t v68;
  _QWORD v69[13];
  std::string v70;
  _QWORD v71[7];

  v71[4] = *MEMORY[0x1E0C80C00];
  v48 = this;
  if ((unint64_t)-[OVM length](v48, "length") <= 4)
  {
    OVM::Error::Unexpected<char const(&)[37]>("Deserialize less than 5 bytes data?!", (uint64_t)&v67);
LABEL_3:
    *(_OWORD *)a2 = v67;
    *(_QWORD *)(a2 + 16) = v68;
    v68 = 0;
    v67 = 0uLL;
    *(_BYTE *)(a2 + 24) = 0;
    *(_QWORD *)&v62 = &v67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
    goto LABEL_4;
  }
  v3 = objc_retainAutorelease(v48);
  v4 = (unsigned __int8 *)-[OVM bytes](v3, "bytes");
  if (*v4 != 2)
  {
    StringUtil::Format((StringUtil *)"Bad version %d", &v70, *v4);
    OVM::Error::Error<>((std::string **)&v67, (uint64_t)&v70);
    v7 = v68;
    *(_OWORD *)v50 = v67;
    v68 = 0;
    v67 = 0uLL;
    v60 = (std::string *)&v67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
    *(_OWORD *)a2 = *(_OWORD *)v50;
    *(_QWORD *)(a2 + 16) = v7;
    *(_QWORD *)&v63 = 0;
    v62 = 0uLL;
    *(_BYTE *)(a2 + 24) = 0;
    *(_QWORD *)&v67 = &v62;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    goto LABEL_4;
  }
  v5 = objc_retainAutorelease(v3);
  v6 = *(unsigned int *)(-[OVM bytes](v5, "bytes") + 1);
  if (v6 > 0x100000)
  {
    OVM::Error::Unexpected<char const(&)[40]>("Desrialized plugins should not be > 1MB", (uint64_t)&v67);
    goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", v6);
  v42 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v8 = (uint8_t *)objc_msgSend(v42, "bytes");
  v9 = objc_msgSend(v42, "length");
  v10 = objc_retainAutorelease(v5);
  if (compression_decode_buffer(v8, v9, (const uint8_t *)(-[OVM bytes](v10, "bytes") + 5), -[OVM length](v10, "length") - 5, 0, COMPRESSION_LZ4) != v6)
  {
    OVM::Error::Unexpected<char const(&)[21]>("Decompression failed", (uint64_t)&v67);
    *(_OWORD *)a2 = v67;
    *(_QWORD *)(a2 + 16) = v68;
    v68 = 0;
    v67 = 0uLL;
    *(_BYTE *)(a2 + 24) = 0;
    *(_QWORD *)&v62 = &v67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
    goto LABEL_70;
  }
  v59 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v42, 0, &v59);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v59;
  v37 = v12;
  v38 = v11;
  if (!v11 || v12)
  {
    objc_msgSend(v12, "localizedFailureReason");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = v34;
    if (v34)
      objc_msgSend(v34, "asCXXString");
    else
      memset(&v70, 0, sizeof(v70));
    OVM::Error::Error<>((std::string **)&v67, (uint64_t)&v70);
    v36 = v68;
    *(_OWORD *)v51 = v67;
    v68 = 0;
    v67 = 0uLL;
    v60 = (std::string *)&v67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
    *(_OWORD *)a2 = *(_OWORD *)v51;
    *(_QWORD *)(a2 + 16) = v36;
    *(_QWORD *)&v63 = 0;
    v62 = 0uLL;
    *(_BYTE *)(a2 + 24) = 0;
    *(_QWORD *)&v67 = &v62;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);

    goto LABEL_69;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    OVM::Error::Unexpected<char const(&)[21]>("Wrong top-level type", (uint64_t)&v67);
    *(_OWORD *)a2 = v67;
    *(_QWORD *)(a2 + 16) = v68;
    v68 = 0;
    v67 = 0uLL;
    *(_BYTE *)(a2 + 24) = 0;
    *(_QWORD *)&v62 = &v67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
    goto LABEL_69;
  }
  v13 = operator new(0x30uLL);
  v13[1] = 0;
  v13[2] = 0;
  *v13 = &off_1E7D8A068;
  v13[5] = 0;
  v13[4] = 0;
  v13[3] = v13 + 4;
  *(_QWORD *)&v58 = v13 + 3;
  *((_QWORD *)&v58 + 1) = v13;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  obj = v11;
  v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v66, 16);
  if (!v40)
  {
LABEL_58:

    *(_OWORD *)a2 = v58;
    v58 = 0uLL;
    *(_BYTE *)(a2 + 24) = 1;
    goto LABEL_68;
  }
  v39 = *(_QWORD *)v55;
LABEL_16:
  v44 = 0;
  while (1)
  {
    if (*(_QWORD *)v55 != v39)
      objc_enumerationMutation(obj);
    v43 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * v44);
    objc_msgSend(obj, "objectForKeyedSubscript:");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      break;
    v46 = v45;
    std::string::basic_string[abi:ne180100]<0>(&v67, "parameters");
    std::string::basic_string[abi:ne180100]<0>(v69, "instructions");
    *(_QWORD *)&v62 = &v67;
    *((_QWORD *)&v62 + 1) = 2;
    OVM::AssertKeys(v46, (uint64_t **)&v62);
    for (i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v69[i + 2]) < 0)
        operator delete((void *)v69[i]);
    }
    v15 = (char *)operator new(0x48uLL);
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = 0;
    *(_QWORD *)v15 = &off_1E7D89C88;
    *(_OWORD *)(v15 + 24) = 0u;
    v16 = (uint64_t *)(v15 + 24);
    *(_OWORD *)(v15 + 40) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    *(_QWORD *)&v53 = v15 + 24;
    *((_QWORD *)&v53 + 1) = v15;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    objc_msgSend(v46, "objectForKeyedSubscript:", CFSTR("parameters"));
    v49 = (id)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v62, &v67, 16);
    if (v17)
    {
      v18 = *(_QWORD *)v63;
      do
      {
        for (j = 0; j != v17; ++j)
        {
          if (*(_QWORD *)v63 != v18)
            objc_enumerationMutation(v49);
          v20 = *(id *)(*((_QWORD *)&v62 + 1) + 8 * j);
          std::string::basic_string[abi:ne180100]<0>(&v70, "type");
          std::string::basic_string[abi:ne180100]<0>(v71, "name");
          v52[0] = (uint64_t *)&v70;
          v52[1] = (uint64_t *)2;
          OVM::AssertKeys(v20, v52);
          for (k = 0; k != -6; k -= 3)
          {
            if (SHIBYTE(v71[k + 2]) < 0)
              operator delete((void *)v71[k]);
          }
          objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("type"));
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = OVM::TypeInfo::ToType(objc_msgSend(v22, "intValue"));
          objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("name"));
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = v24;
          if (!v24)
          {
            memset(&v70, 0, sizeof(v70));
            LODWORD(v60) = v23;
LABEL_38:
            __p = v70;
            goto LABEL_39;
          }
          objc_msgSend(v24, "asCXXString");
          LODWORD(v60) = v23;
          if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_38;
          std::string::__init_copy_ctor_external(&__p, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v70.__r_.__value_.__l.__data_);
LABEL_39:

          v26 = *((_QWORD *)v15 + 4);
          if (v26 >= *((_QWORD *)v15 + 5))
          {
            v27 = std::vector<OVM::Param>::__push_back_slow_path<OVM::Param>(v16, (uint64_t)&v60);
          }
          else
          {
            std::vector<OVM::Param>::__construct_one_at_end[abi:ne180100]<OVM::Param>((uint64_t)v16, (uint64_t)&v60);
            v27 = v26 + 32;
          }
          *((_QWORD *)v15 + 4) = v27;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        v17 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v62, &v67, 16);
      }
      while (v17);
    }

    objc_msgSend(v46, "objectForKeyedSubscript:", CFSTR("instructions"));
    v28 = (OVM *)objc_claimAutoreleasedReturnValue();
    OVM::DeserializeExpressions(v28, (uint64_t **)&v70);
    std::vector<std::unique_ptr<OVM::Expression>>::__vdeallocate((_QWORD *)v15 + 6);
    *((std::string *)v15 + 2) = v70;
    memset(&v70, 0, sizeof(v70));
    v60 = &v70;
    std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);

    v29 = (uint64_t **)v58;
    if (v43)
    {
      objc_msgSend(v43, "asCXXString");
    }
    else
    {
      v67 = 0uLL;
      v68 = 0;
    }
    *(_QWORD *)&v62 = &v67;
    v30 = std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v29, (void **)&v67, (uint64_t)&std::piecewise_construct, (_OWORD **)&v62);
    std::shared_ptr<OVM::Var>::operator=[abi:ne180100]((uint64_t)v30 + 56, &v53);
    if (SHIBYTE(v68) < 0)
      operator delete((void *)v67);
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
    if (*((_QWORD *)&v53 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }

    if (++v44 == v40)
    {
      v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v66, 16);
      if (!v40)
        goto LABEL_58;
      goto LABEL_16;
    }
  }
  OVM::Error::Unexpected<char const(&)[22]>("Wrong subroutine type", (uint64_t)&v67);
  *(_OWORD *)a2 = v67;
  *(_QWORD *)(a2 + 16) = v68;
  v68 = 0;
  v67 = 0uLL;
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)&v62 = &v67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);

LABEL_68:
  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)&v58);
LABEL_69:

LABEL_70:
LABEL_4:

}

void sub_1C351CD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{

  std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void OVM::Error::Unexpected<char const(&)[37]>(char *__s@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v4;
  __int128 v5;
  uint64_t v6;
  void **v7;

  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  OVM::Error::Error<>((std::string **)&v5, (uint64_t)__p);
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  v6 = 0;
  v5 = 0uLL;
  v7 = (void **)&v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1C351D1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OVM::Error::Unexpected<char const(&)[40]>(char *__s@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v4;
  __int128 v5;
  uint64_t v6;
  void **v7;

  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  OVM::Error::Error<>((std::string **)&v5, (uint64_t)__p);
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  v6 = 0;
  v5 = 0uLL;
  v7 = (void **)&v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1C351D244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OVM::Error::Unexpected<char const(&)[21]>(char *__s@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v4;
  __int128 v5;
  uint64_t v6;
  void **v7;

  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  OVM::Error::Error<>((std::string **)&v5, (uint64_t)__p);
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  v6 = 0;
  v5 = 0uLL;
  v7 = (void **)&v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1C351D2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OVM::Error::Unexpected<char const(&)[22]>(char *__s@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v4;
  __int128 v5;
  uint64_t v6;
  void **v7;

  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  OVM::Error::Error<>((std::string **)&v5, (uint64_t)__p);
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  v6 = 0;
  v5 = 0uLL;
  v7 = (void **)&v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1C351D364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OVM::Error::Unexpected<char const*>(char **a1@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v4;
  __int128 v5;
  uint64_t v6;
  void **v7;

  std::string::basic_string[abi:ne180100]<0>(__p, *a1);
  OVM::Error::Error<>((std::string **)&v5, (uint64_t)__p);
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  v6 = 0;
  v5 = 0uLL;
  v7 = (void **)&v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1C351D3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OVM::Error::Add(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a1, a2);
    result = v3 + 24;
  }
  a1[1] = result;
  return result;
}

void OVM::AssertKeys(void *a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  void *v10;
  uint64_t *v11;
  void *exception;
  id v13;
  _QWORD v14[3];

  v13 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1C3BD305C](exception, "Expected a dictionary");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v3 = a2[1];
  if (v3)
  {
    v4 = *a2;
    v5 = 24 * (_QWORD)v3;
    do
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCXXString:", v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "objectForKeyedSubscript:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v7)
      {
        v8 = __cxa_allocate_exception(0x10uLL);
        v9 = v4;
        v10 = v8;
        v11 = v9;
        if (*((char *)v9 + 23) < 0)
          v11 = (uint64_t *)*v9;
        StringUtil::Format((StringUtil *)"Missing mandatory key %s", v14, v11);
        MEMORY[0x1C3BD3068](v10, v14);
        __cxa_throw(v10, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }

}

void sub_1C351D598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  __cxa_free_exception(v17);

  _Unwind_Resume(a1);
}

void OVM::DeserializeExpressions(OVM *this@<X0>, uint64_t **a2@<X8>)
{
  OVM *v4;
  OVM *v5;
  NSDictionary *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  int64x2_t v24;
  uint64_t v25;
  uint64_t *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int64x2_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = this;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v5 = v4;
  v7 = -[OVM countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v27, v36, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v28 != v8)
          objc_enumerationMutation(v5);
        OVM::DeserializeExprsesion(&v35, *(OVM **)(*((_QWORD *)&v27 + 1) + 8 * i), v6);
        v11 = a2[1];
        v10 = (unint64_t)a2[2];
        if ((unint64_t)v11 >= v10)
        {
          v12 = v11 - *a2;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v14 = v10 - (_QWORD)*a2;
          if (v14 >> 2 > v13)
            v13 = v14 >> 2;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          v34 = a2 + 2;
          if (v15)
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::map<std::string,std::shared_ptr<OVM::Var>> *>>((uint64_t)(a2 + 2), v15);
          else
            v16 = 0;
          v17 = (uint64_t *)&v16[8 * v12];
          v18 = &v16[8 * v15];
          v33 = v18;
          v19 = v35;
          v35 = 0;
          *v17 = v19;
          v20 = v17 + 1;
          v32.i64[1] = (uint64_t)(v17 + 1);
          v22 = *a2;
          v21 = a2[1];
          if (v21 == *a2)
          {
            v25 = 0;
            v24 = vdupq_n_s64((unint64_t)v21);
          }
          else
          {
            do
            {
              v23 = *--v21;
              *v21 = 0;
              *--v17 = v23;
            }
            while (v21 != v22);
            v24 = *(int64x2_t *)a2;
            v20 = (uint64_t *)v32.i64[1];
            v18 = v33;
            v25 = v35;
          }
          *a2 = v17;
          a2[1] = v20;
          v32 = v24;
          v26 = a2[2];
          a2[2] = (uint64_t *)v18;
          v33 = (char *)v26;
          v31 = v24.i64[0];
          std::__split_buffer<std::unique_ptr<OVM::Expression>>::~__split_buffer((uint64_t)&v31);
          a2[1] = v20;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        }
        else
        {
          *v11 = v35;
          a2[1] = v11 + 1;
        }
      }
      v7 = -[OVM countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v27, v36, 16);
    }
    while (v7);
  }

}

void sub_1C351D810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  va_list va;

  va_start(va, a14);

  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<OVM::Subroutine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7D89C88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<OVM::Subroutine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7D89C88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BD30ECLL);
}

void std::__shared_ptr_emplace<OVM::Subroutine>::__on_zero_shared(uint64_t a1)
{
  void **v1;
  void **v2;

  v1 = (void **)(a1 + 24);
  v2 = (void **)(a1 + 48);
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<OVM::Param>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<OVM::Param>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<OVM::Param>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<OVM::Param>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::vector<OVM::Param>::__construct_one_at_end[abi:ne180100]<OVM::Param>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::string *v4;
  __int128 v5;

  v3 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v3 = *(_DWORD *)a2;
  v4 = (std::string *)(v3 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_QWORD *)(a1 + 8) = v3 + 32;
}

void sub_1C351D9D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<OVM::Param>::__push_back_slow_path<OVM::Param>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OVM::Param>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v17 = v11;
  v18 = &v10[32 * v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  v12 = (std::string *)(v11 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v11 = v17;
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  v17 = v11 + 32;
  std::vector<OVM::Param>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<OVM::Param>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1C351DAD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<OVM::Param>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<OVM::Param>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<OVM::Param>,std::reverse_iterator<OVM::Param*>,std::reverse_iterator<OVM::Param*>,std::reverse_iterator<OVM::Param*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<OVM::Param>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<OVM::Param>,std::reverse_iterator<OVM::Param*>,std::reverse_iterator<OVM::Param*>,std::reverse_iterator<OVM::Param*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  int v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  v16 = 0;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = *(_DWORD *)(v9 - 32);
      v9 -= 32;
      *(_DWORD *)(v7 - 32) = v10;
      v11 = (std::string *)(v7 - 24);
      if (*(char *)(v9 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a3 - 24), *(_QWORD *)(a3 - 16));
        v7 = *((_QWORD *)&v18 + 1);
      }
      else
      {
        v12 = *(_OWORD *)(v9 + 8);
        *(_QWORD *)(v7 - 8) = *(_QWORD *)(v9 + 24);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      v7 -= 32;
      *((_QWORD *)&v18 + 1) = v7;
      a3 = v9;
    }
    while (v9 != a5);
    v13 = v18;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<OVM::Param>,std::reverse_iterator<OVM::Param*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

void sub_1C351DC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<OVM::Param>,std::reverse_iterator<OVM::Param*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<OVM::Param>,std::reverse_iterator<OVM::Param*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<OVM::Param>,std::reverse_iterator<OVM::Param*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<OVM::Param>,std::reverse_iterator<OVM::Param*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    v1 += 32;
  }
}

uint64_t std::__split_buffer<OVM::Param>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<OVM::Param>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<OVM::Param>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t OVM::TypeInfo::ToType(uint64_t this)
{
  std::bad_cast *exception;
  std::bad_cast *v2;

  if ((this - 1) > 3)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v2 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v2, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  return this;
}

void OVM::DeserializeExprsesion(uint64_t *__return_ptr a1@<X8>, OVM *this@<X0>, NSDictionary *a3@<X1>)
{
  OVM *v3;
  void *v4;
  int v5;
  uint64_t *v6[4];
  void *__p[2];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = this;
  std::string::basic_string[abi:ne180100]<0>(__p, "etype");
  v6[0] = (uint64_t *)__p;
  v6[1] = (uint64_t *)1;
  OVM::AssertKeys(v3, v6);
  if (v8 < 0)
    operator delete(__p[0]);
  -[OVM objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", CFSTR("etype"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = OVM::Expression::ToKind(objc_msgSend(v4, "intValue"));

  __asm { BR              X10 }
}

void sub_1C351DE60(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13, uint64_t a14, __int128 a15, uint64_t a16, uint64_t a17, __int128 __p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  void *v42;
  uint64_t *v43;
  id v44;
  uint64_t i;
  OVM *v46;
  void *v47;
  int v48;
  void *v49;
  NSDictionary *v50;
  void *v51;
  uint64_t v52;
  uint64_t *v53;
  std::string *v54;
  int v55;
  uint64_t *v56[4];
  __int128 v57;
  uint64_t v58;
  _QWORD v59[23];

  v44 = v42;
  std::string::basic_string[abi:ne180100]<0>(&v57, "type");
  std::string::basic_string[abi:ne180100]<0>(v59, "name");
  v56[0] = (uint64_t *)&v57;
  v56[1] = (uint64_t *)2;
  OVM::AssertKeys(v44, v56);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v59[i + 2]) < 0)
      operator delete((void *)v59[i]);
  }
  objc_msgSend(v44, "objectForKeyedSubscript:", CFSTR("initializer"));
  v46 = (OVM *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "objectForKeyedSubscript:", CFSTR("type"));
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = OVM::TypeInfo::ToType(objc_msgSend(v47, "intValue"));
  objc_msgSend(v44, "objectForKeyedSubscript:", CFSTR("name"));
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = v49;
  if (v49)
  {
    objc_msgSend(v49, "asCXXString");
    if (v46)
    {
LABEL_7:
      OVM::DeserializeExprsesion((uint64_t *)v56, v46, v50);
      goto LABEL_10;
    }
  }
  else
  {
    v57 = 0uLL;
    v58 = 0;
    if (v46)
      goto LABEL_7;
  }
  v56[0] = 0;
LABEL_10:
  v52 = operator new();
  v53 = v56[0];
  *(_DWORD *)(v52 + 8) = 0;
  *(_QWORD *)v52 = off_1E7D89CD8;
  v54 = (std::string *)(v52 + 16);
  if (SHIBYTE(v58) < 0)
  {
    std::string::__init_copy_ctor_external(v54, (const std::string::value_type *)v57, *((std::string::size_type *)&v57 + 1));
    v55 = SHIBYTE(v58);
    *(_DWORD *)(v52 + 40) = v48;
    *(_QWORD *)(v52 + 48) = v53;
    *v43 = v52;
    if (v55 < 0)
      operator delete((void *)v57);
  }
  else
  {
    *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v57;
    *(_QWORD *)(v52 + 32) = v58;
    *(_DWORD *)(v52 + 40) = v48;
    *(_QWORD *)(v52 + 48) = v53;
    *v43 = v52;
  }

}

void sub_1C351EFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;

  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  MEMORY[0x1C3BD30EC](v34, 0x10B3C40558ED239);
  if (a29 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<OVM::Expression>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t OVM::Expression::ToKind(uint64_t this)
{
  std::bad_cast *exception;
  std::bad_cast *v2;

  if (this > 0xF)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v2 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v2, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  return this;
}

void OVM::Declaration::~Declaration(OVM::Declaration *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E7D89CD8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E7D89CD8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  JUMPOUT(0x1C3BD30ECLL);
}

void OVM::Value::~Value(void **this)
{
  *this = off_1E7D89D20;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = off_1E7D89D20;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x1C3BD30ECLL);
}

uint64_t std::make_unique[abi:ne180100]<OVM::ObjCMessage,std::unique_ptr<OVM::Expression>,std::vector<std::unique_ptr<OVM::Expression>>,std::string,OVM::TypeInfo::Type>@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void *__p[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  v10 = operator new();
  v11 = *a1;
  *a1 = 0;
  v17 = v11;
  v15 = *a2;
  v16 = *((_QWORD *)a2 + 2);
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v14 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  OVM::ObjCMessage::ObjCMessage(v10, &v17, (uint64_t)&v15, (__int128 *)__p, *a4);
  *a5 = v10;
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  v18 = (void **)&v15;
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v18);
  result = v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C351FB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  std::make_unique[abi:ne180100]<OVM::ObjCMessage,std::unique_ptr<OVM::Expression>,std::vector<std::unique_ptr<OVM::Expression>>,std::string,OVM::TypeInfo::Type>(&a16, &a20);
  MEMORY[0x1C3BD30EC](v20, 0x10B3C4059E6A044);
  _Unwind_Resume(a1);
}

uint64_t OVM::ObjCMessage::ObjCMessage(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4, int a5)
{
  uint64_t v6;
  std::string *v7;
  __int128 v8;

  *(_DWORD *)(a1 + 8) = 2;
  *(_QWORD *)a1 = off_1E7D89D58;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a1 + 48) = a5;
  v7 = (std::string *)(a1 + 56);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v8 = *a4;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_1C351FC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  uint64_t v14;

  v12 = v11;
  a10 = v12;
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v14 = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v10 + 16) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void OVM::ObjCMessage::~ObjCMessage(void **this)
{
  void *v2;
  void **v3;

  *this = off_1E7D89D58;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  v3 = this + 3;
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = this[2];
  this[2] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
}

{
  void *v2;
  void **v3;

  *this = off_1E7D89D58;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  v3 = this + 3;
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = this[2];
  this[2] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1C3BD30EC](this, 0x10B3C4059E6A044);
}

void OVM::ObjCClass::~ObjCClass(void **this)
{
  *this = off_1E7D89D90;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = off_1E7D89D90;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x1C3BD30ECLL);
}

void std::make_unique[abi:ne180100]<OVM::FunctionCall,std::string,std::vector<std::unique_ptr<OVM::Expression>>>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  void **v11;

  v6 = operator new();
  *(_OWORD *)__p = *(_OWORD *)a1;
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  OVM::FunctionCall::FunctionCall(v6, (__int128 *)__p, (uint64_t)&v7);
  *a3 = v6;
  v11 = (void **)&v7;
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_1C351FE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v20 - 40) = v19;
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (a18 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD30EC](v18, 0x10B3C406AA0CD03);
  _Unwind_Resume(a1);
}

uint64_t OVM::FunctionCall::FunctionCall(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::string *v4;
  __int128 v5;

  *(_DWORD *)(a1 + 8) = 4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E7D89DC8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = (std::string *)(a1 + 40);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_1C351FF3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void OVM::FunctionCall::~FunctionCall(void **this)
{
  void **v2;

  *this = off_1E7D89DC8;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  v2 = this + 2;
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;

  *this = off_1E7D89DC8;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  v2 = this + 2;
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x1C3BD30EC](this, 0x10B3C406AA0CD03);
}

void OVM::StringLiteral::~StringLiteral(void **this)
{
  *this = off_1E7D89E00;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = off_1E7D89E00;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x1C3BD30ECLL);
}

void OVM::Conditional::~Conditional(OVM::Conditional *this)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = off_1E7D89E38;
  v3 = (void **)((char *)this + 48);
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = off_1E7D89E38;
  v3 = (void **)((char *)this + 48);
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x1C3BD30EC](this, 0x10A1C402F18DB2ELL);
}

void OVM::IntegerLiteral::~IntegerLiteral(OVM::IntegerLiteral *this)
{
  JUMPOUT(0x1C3BD30ECLL);
}

uint64_t OVM::BinaryOperator::ToKind(uint64_t this)
{
  std::bad_cast *exception;
  std::bad_cast *v2;

  if (this > 0x11)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v2 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v2, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  return this;
}

void OVM::BinaryOperator::~BinaryOperator(OVM::BinaryOperator *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7D89EA8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7D89EA8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1C3BD30ECLL);
}

uint64_t OVM::UnaryOperator::ToKind(uint64_t this)
{
  std::bad_cast *exception;
  std::bad_cast *v2;

  if (this > 7)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v2 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v2, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  return this;
}

void OVM::UnaryOperator::~UnaryOperator(OVM::UnaryOperator *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7D89EE0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7D89EE0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1C3BD30ECLL);
}

void OVM::Return::~Return(OVM::Return *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7D89F18;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7D89F18;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1C3BD30ECLL);
}

void OVM::Loop::~Loop(OVM::Loop *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  *(_QWORD *)this = off_1E7D89F50;
  v5 = (void **)((char *)this + 40);
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  *(_QWORD *)this = off_1E7D89F50;
  v5 = (void **)((char *)this + 40);
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  MEMORY[0x1C3BD30EC](this, 0x10A1C407AE6A5FBLL);
}

void OVM::DictionaryLiteral::~DictionaryLiteral(OVM::DictionaryLiteral *this)
{
  void **v1;

  *(_QWORD *)this = off_1E7D89F88;
  v1 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_1E7D89F88;
  v2 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x1C3BD30EC](this, 0x10A1C4037ACD87BLL);
}

void OVM::ArrayLiteral::~ArrayLiteral(OVM::ArrayLiteral *this)
{
  void **v1;

  *(_QWORD *)this = off_1E7D89FC0;
  v1 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_1E7D89FC0;
  v2 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x1C3BD30EC](this, 0x10A1C4037ACD87BLL);
}

void OVM::NullPointerLiteral::~NullPointerLiteral(OVM::NullPointerLiteral *this)
{
  JUMPOUT(0x1C3BD30ECLL);
}

void OVM::CompoundExpression::~CompoundExpression(OVM::CompoundExpression *this)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = off_1E7D8A030;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = off_1E7D8A030;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x1C3BD30EC](this, 0x10A1C409BA56AB0);
}

void std::vector<std::unique_ptr<OVM::Expression>>::__vdeallocate(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v1);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<OVM::Script>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7D8A068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<OVM::Script>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7D8A068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BD30ECLL);
}

void std::__shared_ptr_emplace<OVM::Script>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
}

_OWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void sub_1C352314C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_1C3524110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C35248D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SelectByNameCmd(void *a1)
{
  id v1;
  size_t v2;
  char *v3;
  id v4;
  const void *v5;
  size_t v6;

  v1 = a1;
  v2 = objc_msgSend(v1, "length") + 6;
  v3 = (char *)malloc_type_calloc(v2, 1uLL, 0xAF3D730EuLL);
  *(_DWORD *)v3 = 304128;
  v3[4] = objc_msgSend(v1, "length");
  v4 = objc_retainAutorelease(v1);
  v5 = (const void *)objc_msgSend(v4, "bytes");
  v6 = objc_msgSend(v4, "length");

  memcpy(v3 + 5, v5, v6);
  return objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", v3, v2, 1);
}

id EndOfTransactionCmd(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  size_t v6;
  char *v7;
  unsigned __int8 v8;
  id v9;
  const void *v10;
  size_t v11;
  char *v12;
  void *v13;
  id v14;
  void *v15;

  v3 = a2;
  v4 = a1;
  v5 = objc_msgSend(v3, "length");
  v6 = v5 + objc_msgSend(v4, "length") + 7;
  v7 = (char *)malloc_type_calloc(v6, 1uLL, 0xAD33FF6AuLL);
  v8 = objc_msgSend(v4, "length") + 6;
  *(_DWORD *)v7 = 44672;
  v7[4] = 0;
  v7[4] = v5 + objc_msgSend(v4, "length") + 2;
  v7[5] = objc_msgSend(v4, "length");
  v9 = objc_retainAutorelease(v4);
  v10 = (const void *)objc_msgSend(v9, "bytes");
  v11 = objc_msgSend(v9, "length");

  memcpy(v7 + 6, v10, v11);
  v12 = &v7[v8];
  *v12 = v5;
  if (objc_msgSend(v3, "length"))
  {
    v13 = v12 + 1;
    v14 = objc_retainAutorelease(v3);
    memcpy(v13, (const void *)objc_msgSend(v14, "bytes"), objc_msgSend(v14, "length"));
  }
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", v7, v6, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

uint64_t GetSW(void *a1)
{
  id v1;
  id v2;
  uint64_t U16BE;

  v1 = a1;
  if ((unint64_t)objc_msgSend(v1, "length") < 2)
  {
    U16BE = 0;
  }
  else
  {
    v2 = objc_retainAutorelease(v1);
    U16BE = ReadU16BE((const unsigned __int8 *)(objc_msgSend(v2, "length") + objc_msgSend(v2, "bytes") - 2));
  }

  return U16BE;
}

id Find(void *a1, void *a2)
{
  id v3;
  uint64_t (**v4)(id, void *);
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v5 = v3;
  v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        if ((v4[2](v4, v9) & 1) != 0)
        {
          v6 = v9;
          goto LABEL_11;
        }
      }
      v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_11:

  return v6;
}

id Filter(void *a1, void *a2)
{
  id v3;
  unsigned int (**v4)(id, _QWORD);
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)objc_opt_new();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v6 = v3;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i);
        if (v4[2](v4, v11))
          objc_msgSend(v5, "addObject:", v11, (_QWORD)v13);
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v8);
  }

  return v5;
}

_QWORD *CircularBufferInit(_QWORD *a1, size_t a2)
{
  bzero(a1, a2);
  a1[2] = (char *)a1 + a2;
  a1[3] = a2 - 32;
  *a1 = a1 + 4;
  return a1;
}

void *CircularBufferAdd(const void **a1, uint64_t a2, unsigned int a3)
{
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  v4[0] = a2;
  v4[1] = a3;
  return CircularBufferAddScattered(a1, (uint64_t)v4, 1);
}

void *CircularBufferAddScattered(const void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int16 v6;
  __int16 *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t i;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  char *v17;
  void *result;
  size_t *v19;
  unsigned __int16 __dst;
  unsigned __int16 __src;

  v3 = a3;
  v6 = 0;
  if (a3)
  {
    v7 = (__int16 *)(a2 + 8);
    v8 = a3;
    do
    {
      v9 = *v7;
      v7 += 8;
      v6 += v9;
      --v8;
    }
    while (v8);
  }
  __src = v6;
  v10 = v6;
  v11 = v6 + 2;
  if ((_BYTE *)a1[2] - (_BYTE *)(a1 + 4) <= v11)
    CircularBufferAddScattered_cold_1();
  v12 = (char *)a1[1];
  if (!v12)
  {
    v12 = (char *)*a1;
    a1[1] = *a1;
  }
  __dst = 0;
  for (i = (unint64_t)a1[3]; i < v11; a1[3] = (const void *)i)
  {
    ReadCircular((uint64_t)a1, v12, (char *)&__dst, 2uLL);
    v14 = __dst + 2;
    v15 = a1[2];
    v16 = (unint64_t)a1[1] + v14;
    if (v16 <= (unint64_t)v15)
      v17 = 0;
    else
      v17 = (char *)((char *)(a1 + 4) - v15);
    v12 = &v17[v16];
    a1[1] = &v17[v16];
    i = (unint64_t)a1[3] + v14;
  }
  result = CircularWrite((uint64_t)a1, (char *)&__src, 2uLL);
  if (v3)
  {
    v19 = (size_t *)(a2 + 8);
    do
    {
      result = CircularWrite((uint64_t)a1, (char *)*(v19 - 1), *v19);
      v19 += 2;
      --v3;
    }
    while (v3);
  }
  a1[3] = (char *)a1[3] - v10 - 2;
  return result;
}

void *ReadCircular(uint64_t a1, const void *a2, char *__dst, size_t __n)
{
  size_t v6;
  size_t v7;
  char *v9;
  size_t v10;

  v6 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)a2 + __n <= v6)
  {
    v9 = __dst;
    v10 = __n;
  }
  else
  {
    v7 = v6 - (_QWORD)a2;
    if ((uint64_t)(v6 - (_QWORD)a2) < 0)
      ReadCircular_cold_1();
    memcpy(__dst, a2, v6 - (_QWORD)a2);
    v9 = &__dst[v7];
    a2 = (const void *)(a1 + 32);
    v10 = __n - v7;
  }
  return memcpy(v9, a2, v10);
}

void *CircularWrite(uint64_t a1, char *__src, size_t __n)
{
  void *v6;
  size_t v7;
  size_t v8;
  size_t v9;
  void *result;
  size_t v11;

  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 + __n <= v7)
  {
    result = memcpy(v6, __src, __n);
    v11 = *(_QWORD *)a1 + __n;
  }
  else
  {
    v8 = v7 - (_QWORD)v6;
    if ((uint64_t)(v7 - (_QWORD)v6) < 0)
      CircularWrite_cold_1();
    memcpy(v6, __src, v7 - (_QWORD)v6);
    v9 = __n - v8;
    result = memcpy((void *)(a1 + 32), &__src[v8], v9);
    v11 = a1 + 32 + v9;
  }
  *(_QWORD *)a1 = v11;
  return result;
}

void CircularBufferDump(const void **a1, uint64_t a2)
{
  char *v2;
  size_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  unsigned __int16 __dst;

  v2 = (char *)a1[1];
  if (v2)
  {
    LOWORD(v5) = 0;
    __dst = 0;
    v6 = (char *)(a1 + 4);
    do
    {
      ReadCircular((uint64_t)a1, v2, (char *)&__dst, 2uLL);
      if ((unsigned __int16)v5 <= __dst)
        v5 = __dst;
      else
        v5 = (unsigned __int16)v5;
      v7 = (unint64_t)&v2[__dst + 2];
      v8 = (unint64_t)a1[2];
      if (v7 <= v8)
        v9 = 0;
      else
        v9 = &v6[-v8];
      v2 = &v9[v7];
    }
    while (&v9[v7] != *a1);
    v10 = (char *)malloc_type_malloc(v5, 0x3576A657uLL);
    if (v10)
    {
      v11 = v10;
      bzero(v10, v5);
      v12 = (char *)a1[1];
      do
      {
        ReadCircular((uint64_t)a1, v12, (char *)&__dst, 2uLL);
        v13 = v12 + 2;
        v14 = (unint64_t)a1[2];
        if ((unint64_t)(v12 + 2) <= v14)
          v15 = 0;
        else
          v15 = &v6[-v14];
        v16 = &v15[(_QWORD)v13];
        ReadCircular((uint64_t)a1, &v15[(_QWORD)v13], v11, __dst);
        v17 = (unint64_t)&v16[__dst];
        v18 = a1[2];
        if (v17 <= (unint64_t)v18)
          v19 = 0;
        else
          v19 = (char *)(v6 - v18);
        v12 = &v19[v17];
        (*(void (**)(uint64_t))(a2 + 16))(a2);
      }
      while (v12 != *a1);
      free(v11);
    }
  }
}

void sub_1C3535B68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C3535C50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C35361D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t ReadS32BE(const DERItem *a1)
{
  return bswap32(*(_DWORD *)a1->data);
}

uint64_t ReadU16BE(const unsigned __int8 *a1)
{
  return bswap32(*(unsigned __int16 *)a1) >> 16;
}

uint64_t ReadU16BE(const DERItem *a1)
{
  return bswap32(*(unsigned __int16 *)a1->data) >> 16;
}

const __CFString *DecodeTransactionDetail(unsigned __int8 *a1)
{
  int v2;
  const __CFString *result;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  _DWORD v8[2];
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (*a1 << 16) | (a1[1] << 8) | a1[2];
  if (v2 > 131327)
  {
    if (v2 <= 131839)
    {
      if (v2 > 131583)
      {
        switch(v2)
        {
          case 131584:
            return CFSTR("PurchaseAdmission");
          case 131585:
            return CFSTR("PurchaseAdmissionParking");
          case 131586:
            return CFSTR("PurchaseAdmissionGarden");
        }
      }
      else
      {
        switch(v2)
        {
          case 131328:
            return CFSTR("PurchaseRetail");
          case 131329:
            return CFSTR("PurchaseRetailMerchant");
          case 131330:
            return CFSTR("PurchaseRetailGasStation");
        }
      }
    }
    else if (v2 < 196608)
    {
      switch(v2)
      {
        case 131840:
          return CFSTR("PurchaseRefund");
        case 131841:
          return CFSTR("PurchaseRefundReturn");
        case 131842:
          return CFSTR("PurchaseRefundCancellation");
      }
    }
    else if (v2 > 197119)
    {
      if (v2 == 197120)
        return CFSTR("TopUpServer");
      if (v2 == 0x40000)
        return CFSTR("CardRead");
    }
    else
    {
      if (v2 == 196608)
        return CFSTR("TopUp");
      if (v2 == 196864)
        return CFSTR("TopUpContactless");
    }
    goto LABEL_60;
  }
  if (v2 <= 66559)
  {
    if (v2 > 66303)
    {
      switch(v2)
      {
        case 66304:
          return CFSTR("TransitTrain");
        case 66305:
          return CFSTR("TransitTrainMaglev");
        case 66306:
          return CFSTR("TransitTrainShinkansen");
      }
    }
    else
    {
      switch(v2)
      {
        case 65536:
          return CFSTR("Transit");
        case 65792:
          return CFSTR("TransitMetro");
        case 66048:
          return CFSTR("TransitBus");
      }
    }
LABEL_60:
    ATLLogObject();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *a1;
      v6 = a1[1];
      v7 = a1[2];
      v8[0] = 67109632;
      v8[1] = v5;
      v9 = 1024;
      v10 = v6;
      v11 = 1024;
      v12 = v7;
      _os_log_impl(&dword_1C3511000, v4, OS_LOG_TYPE_ERROR, "Bogus transaction type 0x%X | 0x%X | 0x%X, returning unknown", (uint8_t *)v8, 0x14u);
    }

    return CFSTR("Unknown");
  }
  if (v2 > 66815)
  {
    if (v2 <= 66817)
    {
      if (v2 == 66816)
        return CFSTR("TransitSpecial");
      else
        return CFSTR("TransitSpecialGreenCarUsed");
    }
    if (v2 == 66818)
      return CFSTR("TransitSpecialGreenCarSeated");
    if (v2 == 0x20000)
      return CFSTR("Purchase");
    goto LABEL_60;
  }
  switch(v2)
  {
    case 66560:
      result = CFSTR("TransitOther");
      break;
    case 66561:
      result = CFSTR("TransitOtherTaxi");
      break;
    case 66562:
      result = CFSTR("TransitOtherFerry");
      break;
    case 66563:
      result = CFSTR("TransitOtherBike");
      break;
    default:
      goto LABEL_60;
  }
  return result;
}

uint64_t DecodeBCD(const unsigned __int8 *a1, uint64_t a2)
{
  uint64_t i;
  unsigned int v3;

  for (i = 0; a2; --a2)
  {
    v3 = *a1++;
    i = (v3 & 0xF) + 100 * i + 10 * (v3 >> 4);
  }
  return i;
}

uint64_t DecodeBCD(const DERItem *a1)
{
  DERSize length;
  uint64_t result;
  DERByte *data;
  unsigned int v5;

  length = a1->length;
  if (!length)
    return 0;
  result = 0;
  data = a1->data;
  do
  {
    v5 = *data++;
    result = (v5 & 0xF) + 100 * result + 10 * (v5 >> 4);
    --length;
  }
  while (length);
  return result;
}

uint64_t DecodeBCD(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned __int8 *v5;
  unsigned int v6;

  if (!a3)
    return 0;
  result = 0;
  v5 = (unsigned __int8 *)&a1[a2];
  do
  {
    v6 = *v5++;
    result = (v6 & 0xF) + 100 * result + 10 * (v6 >> 4);
    --a3;
  }
  while (a3);
  return result;
}

uint64_t EncodeBCD(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t result;

  if (!a2)
    return 0;
  v2 = 0;
  v3 = a2;
  do
  {
    v4 = *a1++;
    v2 = v4 | (v2 << 8);
    --v3;
  }
  while (v3);
  v5 = 0;
  result = 0;
  do
  {
    result += ((v2 % 0x64 % 0xA) | (16 * (v2 % 0x64 / 0xA))) << v5;
    v5 += 8;
    v2 /= 0x64uLL;
    --a2;
  }
  while (a2);
  return result;
}

void sub_1C354C3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id location,char a31)
{
  id *v31;

  objc_destroyWeak(v31);
  _Block_object_dispose(&a31, 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C354C758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C354CFB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C354D330(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id FelicaGetDataFileSystemCommand(__int16 a1, __int16 a2)
{
  uint64_t v3;
  __int16 v4;
  __int16 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0x5FE07070000C280;
  v4 = a1;
  v5 = a2;
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v3, 12);
  return (id)objc_claimAutoreleasedReturnValue();
}

id FeliCaGetBlockDataFromGetDataCommand(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  const char *v6;
  NSObject *v7;
  int v8;
  void *v9;
  int v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "length") != 21)
  {
    ATLLogObject();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 67109120;
      v12 = objc_msgSend(v1, "length");
      _os_log_impl(&dword_1C3511000, v7, OS_LOG_TYPE_DEFAULT, "GET DATA response length if unexpected: %u", (uint8_t *)&v11, 8u);
    }

    goto LABEL_13;
  }
  v2 = objc_msgSend(objc_retainAutorelease(v1), "bytes");
  v3 = v2;
  if (!*(_BYTE *)(v2 + 3))
  {
    if (!*(_BYTE *)(v2 + 4))
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v2 + 5, 16);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_14;
    }
    ATLLogObject();
    v4 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    v8 = *(unsigned __int8 *)(v3 + 4);
    v11 = 67109120;
    v12 = v8;
    v6 = "GET DATA response returned an unexpected Status Flag 2 %d";
    goto LABEL_11;
  }
  ATLLogObject();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(v3 + 3);
    v11 = 67109120;
    v12 = v5;
    v6 = "GET DATA response returned an unexpected Status Flag 1 %d";
LABEL_11:
    _os_log_impl(&dword_1C3511000, v4, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v11, 8u);
  }
LABEL_12:

LABEL_13:
  v9 = 0;
LABEL_14:

  return v9;
}

void sub_1C355EB1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C355EC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a5);

  caulk::__expected_detail::base<std::shared_ptr<OVM::Script>,OVM::Error>::~base((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t caulk::expected<std::shared_ptr<OVM::Script>,OVM::Error>::value(uint64_t result)
{
  __int128 **v1;
  void *exception;
  std::string v3;

  v1 = (__int128 **)result;
  if (!*(_BYTE *)(result + 24))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    memset(&v3, 0, sizeof(v3));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v3, *v1, v1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v1[1] - (char *)*v1) >> 3));
    caulk::bad_expected_access<OVM::Error>::bad_expected_access((uint64_t)exception, (__int128 **)&v3);
  }
  return result;
}

void sub_1C355ED68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1C355F4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;

  if (!a18)
  {
    *(_QWORD *)(v27 - 128) = &a15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 128));
  }
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C355FE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  if (!a18)
  {
    *(_QWORD *)(v28 - 128) = &a15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 128));
  }
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C35606A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;

  if (!a18)
  {
    *(_QWORD *)(v27 - 128) = &a15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 128));
  }
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C3560F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;

  if (!a18)
  {
    *(_QWORD *)(v27 - 128) = &a15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 128));
  }
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C35617FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;

  v29 = v27;

  if (!a18)
  {
    *(_QWORD *)(v28 - 128) = &a15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 128));
  }
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C356209C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;

  if (!a18)
  {
    *(_QWORD *)(v27 - 112) = &a15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 112));
  }
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C3562B88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 2640;
  while (1)
  {
    if (*(char *)(v2 + v4 - 25) < 0)
      operator delete(*(void **)(v2 + v4 - 48));
    v4 -= 48;
    if (!v4)
    {
      MEMORY[0x1C3BD30EC](v1, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

void sub_1C356321C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 1416;
  while (1)
  {
    if (*(char *)(v2 + v4 - 1) < 0)
      operator delete(*(void **)(v2 + v4 - 24));
    v4 -= 24;
    if (!v4)
    {
      MEMORY[0x1C3BD30EC](v1, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

void sub_1C356333C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL AllowlistClassChecker::IsClassAllowed(uint64_t a1, void **a2)
{
  return *(_QWORD *)(a1 + 8) + 8 != (_QWORD)std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Subroutine const>>>>::find<std::string>(*(_QWORD *)(a1 + 8), a2);
}

std::string *ctu::join<std::__wrap_iter<std::string const*>>@<X0>(std::string *__str@<X0>, std::string *a2@<X1>, void *a3@<X2>, size_t a4@<X3>, std::string *a5@<X8>)
{
  std::string *v8;
  std::string *i;
  std::string::size_type v11;
  void **v12;
  std::string::size_type v13;
  void **p_p;
  std::string::size_type v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type size;
  void *__p;
  std::string::size_type v20;
  uint64_t v21;

  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  if (__str != a2)
  {
    v8 = __str;
    __str = std::string::operator=(a5, __str);
    for (i = v8 + 1; i != a2; ++i)
    {
      if (a3)
      {
        std::string::basic_string[abi:ne180100](&__p, a3, a4);
        v11 = HIBYTE(v21);
        v12 = (void **)__p;
        v13 = v20;
      }
      else
      {
        v13 = 0;
        v12 = 0;
        v11 = 0;
        __p = 0;
        v20 = 0;
        v21 = 0;
      }
      if ((v11 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = v12;
      if ((v11 & 0x80u) == 0)
        v15 = v11;
      else
        v15 = v13;
      std::string::append(a5, (const std::string::value_type *)p_p, v15);
      if (SHIBYTE(v21) < 0)
        operator delete(__p);
      v16 = SHIBYTE(i->__r_.__value_.__r.__words[2]);
      if (v16 >= 0)
        v17 = (const std::string::value_type *)i;
      else
        v17 = (const std::string::value_type *)i->__r_.__value_.__r.__words[0];
      if (v16 >= 0)
        size = HIBYTE(i->__r_.__value_.__r.__words[2]);
      else
        size = i->__r_.__value_.__l.__size_;
      __str = std::string::append(a5, v17, size);
    }
  }
  return __str;
}

void sub_1C35634AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void caulk::bad_expected_access<OVM::Error>::~bad_expected_access(std::exception *a1)
{
  std::exception *v2;

  a1->__vftable = (std::exception_vtbl *)off_1E7D8ADA8;
  v2 = a1 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  std::exception::~exception(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1C356363C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1C3563754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t caulk::bad_expected_access<OVM::Error>::bad_expected_access(uint64_t a1, __int128 **a2)
{
  *(_QWORD *)a1 = off_1E7D8ADA8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 8), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  return a1;
}

void sub_1C35637BC(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t caulk::bad_expected_access<OVM::Error>::~bad_expected_access(std::exception *a1)
{
  std::exception *v3;

  a1->__vftable = (std::exception_vtbl *)off_1E7D8ADA8;
  v3 = a1 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
  std::exception::~exception(a1);
  return MEMORY[0x1C3BD30EC]();
}

uint64_t caulk::__expected_detail::base<std::shared_ptr<OVM::Script>,OVM::Error>::~base(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 24))
  {
    std::shared_ptr<OVM::Script const>::~shared_ptr[abi:ne180100](a1);
  }
  else
  {
    v3 = (void **)a1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E90], MEMORY[0x1E0DE4380]);
}

uint64_t std::map<std::string,OVM::Var>::map[abi:ne180100](uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,OVM::Var>,std::__map_value_compare<std::string,std::__value_type<std::string,OVM::Var>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OVM::Var>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,OVM::Var> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_1C3563914(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,OVM::Var>,std::__map_value_compare<std::string,std::__value_type<std::string,OVM::Var>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OVM::Var>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,OVM::Var>,std::__map_value_compare<std::string,std::__value_type<std::string,OVM::Var>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OVM::Var>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,OVM::Var> const&>(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,OVM::Var>,std::__map_value_compare<std::string,std::__value_type<std::string,OVM::Var>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OVM::Var>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,OVM::Var>,std::__map_value_compare<std::string,std::__value_type<std::string,OVM::Var>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OVM::Var>>>::__construct_node<std::pair<std::string const,OVM::Var> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<OVM::Var>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<OVM::Var>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

__n128 std::__tree<std::__value_type<std::string,OVM::Var>,std::__map_value_compare<std::string,std::__value_type<std::string,OVM::Var>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OVM::Var>>>::__construct_node<std::pair<std::string const,OVM::Var> const&>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __n128 result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *((_QWORD *)v6 + 9) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1C3563A3C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,OVM::Var>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,OVM::Var>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::set<std::string>::set[abi:ne180100](uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_1C3563B0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,OVM::Var>,std::__map_value_compare<std::string,std::__value_type<std::string,OVM::Var>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OVM::Var>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1C3563BA4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,OVM::Var>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AllowlistClassChecker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7D8ADD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AllowlistClassChecker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7D8ADD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BD30ECLL);
}

id ATLLogObject()
{
  if (ATLLogObject_onceToken != -1)
    dispatch_once(&ATLLogObject_onceToken, &__block_literal_global_9);
  return (id)ATLLogObject_logObject;
}

void LogBinary(os_log_type_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  NSObject *v16;
  _BOOL4 v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  void *v25;
  __int128 v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  FormatLogv(a2, a3, a6, (uint64_t)&a9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:freeWhenDone:", a4, a5, 0);
  v14 = objc_msgSend(v12, "length");
  v15 = v14 + objc_msgSend(v13, "length") + 1;
  ATLLogObject();
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = os_log_type_enabled(v16, a1);
  if (v15 > 0x1FF)
  {
    if (v17)
    {
      *(_DWORD *)buf = 138412290;
      v28 = v12;
      _os_log_impl(&dword_1C3511000, v16, a1, "%@", buf, 0xCu);
    }

    if (objc_msgSend(v13, "length"))
    {
      v20 = 0;
      v21 = 0;
      *(_QWORD *)&v19 = 138412290;
      v26 = v19;
      do
      {
        if ((unint64_t)(objc_msgSend(v13, "length", v26) + v20) > 0x1FF)
          v22 = 512;
        else
          v22 = objc_msgSend(v13, "length") + v20;
        objc_msgSend(v13, "subdataWithRange:", v21, v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        ATLLogObject();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, a1))
        {
          objc_msgSend(v23, "base64EncodedStringWithOptions:", 0);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = v26;
          v28 = v25;
          _os_log_impl(&dword_1C3511000, v24, a1, "%@", buf, 0xCu);

        }
        v21 += 512;
        v20 -= 512;
      }
      while (v21 < objc_msgSend(v13, "length"));
    }
  }
  else
  {
    if (v17)
    {
      objc_msgSend(v13, "base64EncodedStringWithOptions:", 0);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v28 = v12;
      v29 = 2112;
      v30 = v18;
      _os_log_impl(&dword_1C3511000, v16, a1, "%@ %@", buf, 0x16u);

    }
  }

}

id FormatLogv(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v7;
  objc_class *v8;
  id v9;
  void *v10;
  void *v11;

  v7 = (void *)MEMORY[0x1E0CB37A0];
  v8 = (objc_class *)MEMORY[0x1E0CB3940];
  v9 = a3;
  v10 = (void *)objc_msgSend([v8 alloc], "initWithFormat:arguments:", v9, a4);

  objc_msgSend(v7, "stringWithFormat:", CFSTR("%s/%d : %@"), a1, a2, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

uint64_t DERParseSequenceSpec(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  DERLogContext *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint8_t buf[16];

  v8 = objc_alloc_init(DERLogContext);
  v9 = *(unsigned __int16 *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 18))
    v11 = DERParseUnsortedSequenceC((unsigned __int8 **)a1, v9, v10, a3, a4, *(_BYTE *)(a2 + 19));
  else
    v11 = DERParseSequenceC((unsigned __int8 **)a1, v9, v10, a3, a4);
  v14 = v11;
  if ((_DWORD)v11)
  {
    LogBinary(OS_LOG_TYPE_ERROR, (uint64_t)"DERParseSequenceSpec", 37, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), CFSTR("parse %s failed with %d"), v12, v13, *(_QWORD *)a2);
    -[DERLogContext dumpLogs](v8, "dumpLogs");
    ATLLogObject();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C3511000, v15, OS_LOG_TYPE_ERROR, "------ END OF DER DUMP -----", buf, 2u);
    }

  }
  return v14;
}

uint64_t DERParseSequenceSpec(void *a1, uint64_t a2, char *a3, size_t a4)
{
  id v7;
  uint64_t v8;
  _QWORD v10[2];

  v7 = objc_retainAutorelease(a1);
  v8 = objc_msgSend(v7, "length", objc_msgSend(v7, "bytes"));

  v10[1] = v8;
  return DERParseSequenceSpec((uint64_t)v10, a2, a3, a4);
}

uint64_t DERDecodeItemCtx(uint64_t a1, unint64_t *a2)
{
  DERLogContext *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t buf[16];

  v4 = objc_alloc_init(DERLogContext);
  v5 = DERDecodeItem((unsigned __int8 **)a1, a2);
  v8 = v5;
  if ((_DWORD)v5)
  {
    LogBinary(OS_LOG_TYPE_ERROR, (uint64_t)"DERDecodeItemCtx", 62, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), CFSTR("parse failed with %d"), v6, v7, v5);
    -[DERLogContext dumpLogs](v4, "dumpLogs");
    ATLLogObject();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C3511000, v9, OS_LOG_TYPE_ERROR, "------ END OF DER DUMP -----", buf, 2u);
    }

  }
  return v8;
}

void sub_1C356836C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1C356A2EC()
{
  uint64_t v0;

  v0 = sub_1C35B6AE0();
  __swift_allocate_value_buffer(v0, qword_1EF8D9970);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF8D9970);
  return sub_1C35B6AD4();
}

uint64_t sub_1C356A360()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C3580744();
  if (v1 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    qword_1EF8DB880 = result;
    *(_QWORD *)algn_1EF8DB888 = v1;
  }
  return result;
}

uint64_t sub_1C356A3B0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C3580744();
  if (v1 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    qword_1EF8DB890 = result;
    *(_QWORD *)algn_1EF8DB898 = v1;
  }
  return result;
}

uint64_t sub_1C356A3F8()
{
  uint64_t result;

  sub_1C3575208(0, &qword_1EF8D9A00);
  result = sub_1C35B6D80();
  qword_1EF8DB8A0 = result;
  return result;
}

uint64_t sub_1C356A43C()
{
  uint64_t result;

  sub_1C3575208(0, &qword_1EF8D9A00);
  result = sub_1C35B6D80();
  qword_1EF8DB8A8 = result;
  return result;
}

id sub_1C356A480()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v5;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9A78);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C35BB2A0;
  if (qword_1EF8D9998 != -1)
    swift_once();
  v1 = (void *)qword_1EF8DB8A0;
  *(_QWORD *)(v0 + 32) = qword_1EF8DB8A0;
  v2 = qword_1EF8D99A0;
  v3 = v1;
  if (v2 != -1)
    swift_once();
  v5 = (void *)qword_1EF8DB8A8;
  *(_QWORD *)(v0 + 40) = qword_1EF8DB8A8;
  sub_1C35B6CF0();
  qword_1EF8DB8B0 = v0;
  return v5;
}

BOOL static AssociatedReader.< infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;

  v4 = *a1;
  v5 = a1[1];
  sub_1C3573B04(*a1, v5);
  if ((v6 & 1) != 0)
    return (unint64_t)a1[2] < *(_QWORD *)(a2 + 16);
  else
    sub_1C3575E18(v4, v5);
  return v7;
}

uint64_t sub_1C356A62C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;

  v2 = v1;
  MEMORY[0x1C3BD2C6C](8224, 0xE200000000000000, a1);
  sub_1C35B6E10();
  sub_1C35B6C9C();
  sub_1C35B6C9C();
  sub_1C357F9BC(*v2, v2[1]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
  sub_1C3575338((unint64_t *)&qword_1EF8D9A40, &qword_1ED7E1280, MEMORY[0x1E0DEAF20]);
  sub_1C35B6C48();
  swift_bridgeObjectRelease();
  sub_1C35B6C9C();
  swift_bridgeObjectRelease();
  sub_1C35B6C9C();
  sub_1C35B6C9C();
  sub_1C35B6C9C();
  sub_1C35B6F3C();
  sub_1C35B6C9C();
  swift_bridgeObjectRelease();
  sub_1C35B6C9C();
  sub_1C35B6C9C();
  sub_1C35B6C9C();
  sub_1C357F9BC(v2[3], v2[4]);
  sub_1C35B6C48();
  swift_bridgeObjectRelease();
  sub_1C35B6C9C();
  swift_bridgeObjectRelease();
  sub_1C35B6C9C();
  sub_1C35B6C9C();
  swift_bridgeObjectRelease();
  sub_1C35B6C9C();
  sub_1C357F9BC(v2[5], v2[6]);
  sub_1C35B6C48();
  swift_bridgeObjectRelease();
  sub_1C35B6C9C();
  swift_bridgeObjectRelease();
  sub_1C35B6C9C();
  return 0;
}

uint64_t AssociatedReader.description.getter()
{
  return sub_1C356A62C(0);
}

void static AssociatedReader.__derived_struct_equals(_:_:)(uint64_t *a1, uint64_t a2)
{
  char v4;
  char v5;

  sub_1C3573B04(*a1, a1[1]);
  if ((v4 & 1) != 0 && a1[2] == *(_QWORD *)(a2 + 16))
  {
    sub_1C3573B04(a1[3], a1[4]);
    if ((v5 & 1) != 0)
      sub_1C3573B04(a1[5], a1[6]);
  }
}

uint64_t sub_1C356A998()
{
  return sub_1C356A62C(0);
}

void sub_1C356A9A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v3 = a1[2];
  v2 = a1[3];
  v5 = a1[4];
  v4 = a1[5];
  v6 = a1[6];
  v7 = *(_QWORD *)(a2 + 16);
  sub_1C3573B04(*a1, a1[1]);
  if ((v8 & 1) != 0 && v3 == v7)
  {
    sub_1C3573B04(v2, v5);
    if ((v9 & 1) != 0)
      sub_1C3573B04(v4, v6);
  }
}

BOOL sub_1C356AA58(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  BOOL v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = *(_QWORD *)(a2 + 16);
  sub_1C3573B04(*a1, v3);
  if ((v6 & 1) != 0)
    return v4 < v5;
  else
    sub_1C3575E18(v2, v3);
  return v7;
}

BOOL sub_1C356AB30(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  BOOL v7;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_1C3573B04(*a2, v4);
  if ((v6 & 1) != 0)
    v7 = v5 < v2;
  else
    sub_1C3575E18(v3, v4);
  return !v7;
}

BOOL sub_1C356AC0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  BOOL v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = *(_QWORD *)(a2 + 16);
  sub_1C3573B04(*a1, v3);
  if ((v6 & 1) != 0)
    v7 = v4 < v5;
  else
    sub_1C3575E18(v2, v3);
  return !v7;
}

BOOL sub_1C356ACE8(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  BOOL v7;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_1C3573B04(*a2, v4);
  if ((v6 & 1) != 0)
    return v5 < v2;
  else
    sub_1C3575E18(v3, v4);
  return v7;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> clearAuxiliaryElements(secureElement:)(TransceiverWrapper *secureElement)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8[2];

  v8[1] = *(id *)MEMORY[0x1E0C80C00];
  if (qword_1EF8D9990 != -1)
    swift_once();
  v2 = (void *)sub_1C35B6A44();
  v8[0] = 0;
  v3 = -[TransceiverWrapper transceive:error:](secureElement, sel_transceive_error_, v2, v8);

  v4 = v8[0];
  if (v3)
  {
    sub_1C35B6A5C();
    v6 = v5;

    __asm { BR              X10 }
  }
  v7 = v4;
  sub_1C35B69C0();

  swift_willThrow();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> processAuxiliaryElements(secureElement:passInformation:)(TransceiverWrapper *secureElement, NSArray passInformation)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  objc_class *v11;
  uint64_t v12;
  uint64_t v13;
  objc_class *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  unint64_t v27;
  void *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  TransceiverWrapper *v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  v6 = sub_1C35B69CC();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFB58];
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78]();
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x1E0DEE9D8];
  v11 = passInformation.super.isa;
  sub_1C35B6D74();

  sub_1C3574134(&qword_1ED7E11F0, v7, MEMORY[0x1E0CAFB80]);
  while (1)
  {
    sub_1C35B6D8C();
    if (!v36)
      break;
    sub_1C3573DC0(&v35, v34);
    sub_1C356B65C(v34, &v33);
    if (v2)
    {
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v34);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
      swift_bridgeObjectRelease();
      return;
    }
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v34);
    sub_1C356ECC0(v33);
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
  v12 = v37;
  if (qword_1EF8D9968 != -1)
    swift_once();
  v13 = sub_1C35B6AE0();
  __swift_project_value_buffer(v13, (uint64_t)qword_1EF8D9970);
  v14 = v11;
  v15 = swift_bridgeObjectRetain();
  v16 = sub_1C35B6AC8(v15);
  v17 = sub_1C35B6D68();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (_DWORD *)swift_slowAlloc();
    v32 = secureElement;
    v19 = v18;
    *v18 = 134218240;
    *(_QWORD *)&v35 = -[objc_class count](v14, sel_count);
    sub_1C35B6D98();

    *((_WORD *)v19 + 6) = 2048;
    *(_QWORD *)&v35 = *(_QWORD *)(v12 + 16);
    sub_1C35B6D98();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C3511000, v16, v17, "Got %ld passes from wallet, retrieved %ld auxiliary elements", (uint8_t *)v19, 0x16u);
    v20 = v19;
    secureElement = v32;
    MEMORY[0x1C3BD380C](v20, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
    v16 = v14;
  }

  if (*(_QWORD *)(v12 + 16))
  {
    v21 = sub_1C356C608(v12);
    swift_bridgeObjectRelease();
    if (v21)
    {
      sub_1C356C7A0(&secureElement->super, v21);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
      *(_QWORD *)&v35 = 0;
      *((_QWORD *)&v35 + 1) = 0xE000000000000000;
      sub_1C35B6E10();
      sub_1C35B6C9C();
      sub_1C35B6C9C();
      sub_1C3577C3C(v35, *((uint64_t *)&v35 + 1), 8, 0);
      swift_willThrow();
    }
  }
  else
  {
    v22 = swift_bridgeObjectRelease();
    v23 = sub_1C35B6AC8(v22);
    v24 = sub_1C35B6D38();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1C3511000, v23, v24, "No associated reader identifiers found for pass, clearing the aux elements on the SE", v25, 2u);
      MEMORY[0x1C3BD380C](v25, -1, -1);
    }

    v26 = sub_1C356C328(secureElement);
    if (v2
      || (sub_1C3573D7C((uint64_t)v26, v27), clearAuxiliaryElements(secureElement:)(secureElement), (v3 = v28) != 0))
    {
      v29 = sub_1C35B6AC8(v26);
      v30 = sub_1C35B6D68();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v31 = 0;
        _os_log_impl(&dword_1C3511000, v29, v30, "Error SW during clear, most likely Lyon is not installed", v31, 2u);
        MEMORY[0x1C3BD380C](v31, -1, -1);
      }

    }
  }
  sub_1C356C088(secureElement);
}

void sub_1C356B65C(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  NSObject *log;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_1C3575174((uint64_t)a1, (uint64_t)&v33);
  sub_1C3575208(0, (unint64_t *)&qword_1EF8D95A0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
    v33 = 0;
    v34 = 0xE000000000000000;
    sub_1C35B6E10();
    swift_bridgeObjectRelease();
    v33 = 0xD00000000000002DLL;
    v34 = 0x80000001C35C5010;
    __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
    swift_getDynamicType();
    sub_1C35B7008();
    sub_1C35B6C9C();
    swift_bridgeObjectRelease();
    sub_1C3577C3C(v33, v34, 8, 0);
    swift_willThrow();
    return;
  }
  v5 = (void *)v35;
  v6 = sub_1C35B6C60();
  v8 = sub_1C3584C3C(v6, v7);
  if (v2)
  {
    swift_bridgeObjectRelease();

    return;
  }
  v10 = v8;
  v11 = v9;
  swift_bridgeObjectRelease();
  if (v11)
  {
    if (v10 == 0xD000000000000012 && v11 == 0x80000001C35C4D60)
    {
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    v12 = sub_1C35B6F48();
    swift_bridgeObjectRelease();
    if ((v12 & 1) != 0)
    {
LABEL_10:
      v13 = sub_1C35B6C60();
      v15 = sub_1C35857A4(v13, v14);
      v17 = v16;
      swift_bridgeObjectRelease();
      if (v17 == 1)
      {
        if (qword_1EF8D9968 != -1)
          swift_once();
        v18 = sub_1C35B6AE0();
        v19 = __swift_project_value_buffer(v18, (uint64_t)qword_1EF8D9970);
        v20 = sub_1C35B6AC8(v19);
        v21 = sub_1C35B6D50();
        if (os_log_type_enabled(v20, v21))
        {
          v22 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v22 = 0;
          _os_log_impl(&dword_1C3511000, v20, v21, "Failed to find key identifier for pass, skipping", v22, 2u);
          MEMORY[0x1C3BD380C](v22, -1, -1);
        }

      }
      else
      {
        if (v17)
        {
          sub_1C3575254(v15, v17);
          sub_1C3580744();
          if (v23 >> 60 != 15)
            __asm { BR              X10 }
        }
        if (qword_1EF8D9968 != -1)
          swift_once();
        v24 = sub_1C35B6AE0();
        __swift_project_value_buffer(v24, (uint64_t)qword_1EF8D9970);
        v25 = swift_bridgeObjectRetain();
        v26 = sub_1C35B6AC8(v25);
        v27 = sub_1C35B6D50();
        log = v26;
        if (os_log_type_enabled(v26, v27))
        {
          v28 = (uint8_t *)swift_slowAlloc();
          v31 = swift_slowAlloc();
          v33 = v31;
          *(_DWORD *)v28 = 136315138;
          if (v17)
            v29 = v15;
          else
            v29 = 7104878;
          if (v17)
            v30 = v17;
          else
            v30 = 0xE300000000000000;
          swift_bridgeObjectRetain();
          v35 = sub_1C3598590(v29, v30, &v33);
          sub_1C35B6D98();
          swift_bridgeObjectRelease();
          sub_1C3575240(v15, v17);
          sub_1C3575240(v15, v17);
          _os_log_impl(&dword_1C3511000, log, v27, "Key identifier was not hex string with valid length: %s... skipping", v28, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BD380C](v31, -1, -1);
          MEMORY[0x1C3BD380C](v28, -1, -1);

        }
        else
        {
          sub_1C3575240(v15, v17);
          sub_1C3575240(v15, v17);

        }
      }
    }
  }

  *a2 = MEMORY[0x1E0DEE9D8];
}

void sub_1C356BF9C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1C35A53E4(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_1C356F3EC(v4);
  *a1 = v2;
}

uint64_t sub_1C356C004(uint64_t *a1)
{
  uint64_t v2;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a1 = v2;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v2 < 0 || (v2 & 0x4000000000000000) != 0)
    sub_1C35A5420(v2);
  v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v6[0] = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  v6[1] = v4;
  sub_1C3570EB8(v6);
  return sub_1C35B6CF0();
}

void sub_1C356C088(void *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  id v24[2];

  v24[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = sub_1C3580744();
  if (v3 >> 60 == 15)
    __break(1u);
  v4 = v2;
  v5 = v3;
  v6 = (void *)sub_1C35B6A44();
  sub_1C3574174(v4, v5);
  v7 = (id)SelectByNameCmd(v6);

  v8 = sub_1C35B6A5C();
  v10 = v9;

  v11 = (void *)sub_1C35B6A44();
  sub_1C3573D7C(v8, v10);
  v24[0] = 0;
  v12 = objc_msgSend(a1, sel_transceive_error_, v11, v24);

  v13 = v24[0];
  if (v12)
  {
    v14 = sub_1C35B6A5C();
    sub_1C3573D7C(v14, v15);

  }
  else
  {
    v16 = v13;
    v17 = (void *)sub_1C35B69C0();

    swift_willThrow();
    if (qword_1EF8D9968 != -1)
      swift_once();
    v18 = sub_1C35B6AE0();
    v19 = __swift_project_value_buffer(v18, (uint64_t)qword_1EF8D9970);
    v20 = sub_1C35B6AC8(v19);
    v21 = sub_1C35B6D50();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = (void *)swift_slowAlloc();
      v24[0] = v23;
      *(_DWORD *)v22 = 136315138;
      sub_1C3598590(0xD000000000000038, 0x80000001C35C4FD0, (uint64_t *)v24);
      sub_1C35B6D98();
      _os_log_impl(&dword_1C3511000, v20, v21, "Function: %s -- Failed to transceive select CRS", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BD380C](v23, -1, -1);
      MEMORY[0x1C3BD380C](v22, -1, -1);
    }

  }
}

void *sub_1C356C328(void *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v23[4];

  v23[3] = *(id *)MEMORY[0x1E0C80C00];
  v2 = sub_1C3580744();
  if (v3 >> 60 == 15)
    __break(1u);
  v4 = v2;
  v5 = v3;
  v6 = (void *)sub_1C35B6A44();
  sub_1C3574174(v4, v5);
  v7 = (id)SelectByNameCmd(v6);

  v8 = sub_1C35B6A5C();
  v10 = v9;

  v11 = (void *)sub_1C35B6A44();
  sub_1C3573D7C(v8, v10);
  if (qword_1EF8D99A8 != -1)
    swift_once();
  sub_1C3575208(0, &qword_1EF8D9A00);
  v12 = (void *)sub_1C35B6CD8();
  v23[0] = 0;
  v13 = objc_msgSend(a1, sel_transceiveAndCheckSW_inArray_error_, v11, v12, v23);

  v14 = v23[0];
  if (v13)
  {
    v15 = (void *)sub_1C35B6A5C();
    v17 = v16;

    sub_1C357F9BC((uint64_t)v15, v17);
    v23[0] = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
    sub_1C3575338((unint64_t *)&qword_1EF8D9A40, &qword_1ED7E1280, MEMORY[0x1E0DEAF20]);
    v19 = sub_1C35B6C48();
    v21 = v20;
    swift_bridgeObjectRelease();
    v23[0] = (id)v19;
    v23[1] = v21;
    sub_1C3574188();
    LOBYTE(v19) = sub_1C35B6DB0();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
      sub_1C3577C3C(0xD000000000000032, 0x80000001C35C4EA0, 8, 0);
      swift_willThrow();
      sub_1C3573D7C((uint64_t)v15, v17);
    }
  }
  else
  {
    v15 = v14;
    sub_1C35B69C0();

    swift_willThrow();
  }
  return v15;
}

uint64_t sub_1C356C608(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[32];
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  v16 = MEMORY[0x1E0DEE9D8];
  sub_1C35991C8(0, v2, 0);
  v3 = v16;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_1C3575174(i, (uint64_t)v15);
      if (!swift_dynamicCast())
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1C35991C8(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v16;
      }
      v6 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_1C35991C8(v5 > 1, v6 + 1, 1);
        v3 = v16;
      }
      *(_QWORD *)(v3 + 16) = v6 + 1;
      v7 = v3 + 56 * v6;
      *(_QWORD *)(v7 + 32) = v9;
      *(_OWORD *)(v7 + 40) = v10;
      *(_QWORD *)(v7 + 56) = v11;
      *(_QWORD *)(v7 + 64) = v12;
      *(_QWORD *)(v7 + 72) = v13;
      *(_QWORD *)(v7 + 80) = v14;
      if (!--v2)
        return v3;
    }
    swift_release();
    sub_1C35751B0(0, 0xF000000000000000, 0, 0, 0, 0, 0);
    return 0;
  }
  return v3;
}

void *sub_1C356C7A0(NSObject *a1, uint64_t a2)
{
  uint64_t v2;
  void *result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  unint64_t v50;
  uint64_t v51;
  __int16 v52;
  __int16 v53;
  char v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint8_t *buf[2];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95[8];
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 __dst;
  uint64_t v101;
  unint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  unint64_t v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  result = sub_1C356C328(a1);
  if (!v2)
  {
    sub_1C3573D7C((uint64_t)result, v6);
    v7 = sub_1C356D5A4(a1);
    v8 = v7;
    if (*(_QWORD *)(v7 + 16))
    {
      v85 = a1;
      *(_QWORD *)v95 = a2;
      swift_bridgeObjectRetain();
      sub_1C356BF9C((uint64_t *)v95);
      v9 = *(_QWORD *)v95;
      v10 = sub_1C3576F64((uint64_t)&unk_1E7D8B040);
      v101 = v10;
      v102 = v11;
      v13 = *(_QWORD *)(v9 + 16);
      if (v13)
      {
        v14 = 32;
        *(_QWORD *)&v12 = 136315138;
        v88 = v12;
        v87 = MEMORY[0x1E0DEE9B8] + 8;
        *(_OWORD *)buf = xmmword_1C35BB2C0;
        v86 = v8;
        v92 = v9;
        while (1)
        {
          v15 = *(_OWORD *)(v9 + v14);
          v16 = *(_OWORD *)(v9 + v14 + 16);
          v17 = *(_OWORD *)(v9 + v14 + 32);
          v106 = *(_QWORD *)(v9 + v14 + 48);
          v104 = v16;
          v105 = v17;
          v103 = v15;
          sub_1C3575114((uint64_t *)&v103, (void (*)(uint64_t, uint64_t))sub_1C3573E48);
          if (qword_1EF8D9968 != -1)
            swift_once();
          v18 = sub_1C35B6AE0();
          __swift_project_value_buffer(v18, (uint64_t)qword_1EF8D9970);
          sub_1C3575114((uint64_t *)&v103, (void (*)(uint64_t, uint64_t))sub_1C3573E48);
          v19 = sub_1C3575114((uint64_t *)&v103, (void (*)(uint64_t, uint64_t))sub_1C3573E48);
          v20 = sub_1C35B6AC8(v19);
          v21 = sub_1C35B6D44();
          if (os_log_type_enabled(v20, v21))
          {
            v22 = v14;
            v23 = swift_slowAlloc();
            v24 = swift_slowAlloc();
            *(_QWORD *)v95 = v24;
            *(_DWORD *)v23 = v88;
            v25 = sub_1C356A62C(0);
            *(_QWORD *)(v23 + 4) = sub_1C3598590(v25, v26, (uint64_t *)v95);
            swift_bridgeObjectRelease();
            sub_1C3575114((uint64_t *)&v103, (void (*)(uint64_t, uint64_t))sub_1C3573D7C);
            sub_1C3575114((uint64_t *)&v103, (void (*)(uint64_t, uint64_t))sub_1C3573D7C);
            _os_log_impl(&dword_1C3511000, v20, v21, "%s", (uint8_t *)v23, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C3BD380C](v24, -1, -1);
            v27 = v23;
            v14 = v22;
            MEMORY[0x1C3BD380C](v27, -1, -1);
          }
          else
          {
            sub_1C3575114((uint64_t *)&v103, (void (*)(uint64_t, uint64_t))sub_1C3573D7C);
            sub_1C3575114((uint64_t *)&v103, (void (*)(uint64_t, uint64_t))sub_1C3573D7C);
          }

          if (*(_QWORD *)(v8 + 16))
          {
            v29 = *((_QWORD *)&v105 + 1);
            v30 = v106;
            sub_1C3573E48(*((uint64_t *)&v105 + 1), v106);
            v31 = sub_1C35ABC70(v29, v30);
            if ((v32 & 1) != 0)
            {
              v89 = v14;
              v33 = *(_BYTE *)(*(_QWORD *)(v8 + 56) + v31);
              sub_1C3573D7C(v29, v30);
              v34 = sub_1C35B6A2C();
              v36 = v35;
              sub_1C35B6A80();
              sub_1C3573D7C(v34, v36);
              __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E12A8);
              v37 = swift_allocObject();
              *(_OWORD *)(v37 + 16) = xmmword_1C35BB2C0;
              *(_BYTE *)(v37 + 32) = v33;
              v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1288);
              v98 = v38;
              v39 = sub_1C3575338((unint64_t *)&qword_1ED7E1290, &qword_1ED7E1288, MEMORY[0x1E0CB1B08]);
              v99 = v39;
              *(_QWORD *)v95 = v37;
              v40 = __swift_project_boxed_opaque_existential_1Tm(v95, v38);
              v41 = *v40;
              v42 = *(_QWORD *)(*v40 + 16);
              v90 = v13;
              if (v42)
              {
                if (v42 <= 0xE)
                {
                  *(_QWORD *)((char *)&__dst + 6) = 0;
                  *(_QWORD *)&__dst = 0;
                  BYTE14(__dst) = v42;
                  memcpy(&__dst, (const void *)(v41 + 32), v42);
                  v45 = __dst;
                  v46 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
                  swift_bridgeObjectRetain();
                }
                else
                {
                  sub_1C35B696C();
                  swift_allocObject();
                  swift_bridgeObjectRetain();
                  v43 = sub_1C35B6930();
                  v44 = v43;
                  if (v42 >= 0x7FFFFFFF)
                  {
                    sub_1C35B69FC();
                    v45 = swift_allocObject();
                    *(_QWORD *)(v45 + 16) = 0;
                    *(_QWORD *)(v45 + 24) = v42;
                    v46 = v44 | 0x8000000000000000;
                  }
                  else
                  {
                    v45 = v42 << 32;
                    v46 = v43 | 0x4000000000000000;
                  }
                }
              }
              else
              {
                swift_bridgeObjectRetain();
                v45 = 0;
                v46 = 0xC000000000000000;
              }
              v51 = *((_QWORD *)&v104 + 1);
              v50 = v105;
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v95);
              sub_1C35B6A80();
              sub_1C3573D7C(v45, v46);
              sub_1C3573E48(v51, v50);
              sub_1C356EAEC(v51, v50);
              v53 = v52;
              sub_1C3573D7C(v51, v50);
              if ((v53 & 0x100) != 0)
              {
                __break(1u);
                swift_release();
                __break(1u);
                JUMPOUT(0x1C356D584);
              }
              if ((v53 & 1) != 0)
                v54 = 3;
              else
                v54 = 2;
              v55 = swift_allocObject();
              *(_OWORD *)(v55 + 16) = xmmword_1C35BB2C0;
              *(_BYTE *)(v55 + 32) = v54;
              v98 = v38;
              v99 = v39;
              *(_QWORD *)v95 = v55;
              v56 = __swift_project_boxed_opaque_existential_1Tm(v95, v38);
              v57 = *v56;
              v58 = *(_QWORD *)(*v56 + 16);
              if (v58)
              {
                v14 = v89;
                if (v58 <= 0xE)
                {
                  *(_QWORD *)((char *)&__dst + 6) = 0;
                  *(_QWORD *)&__dst = 0;
                  BYTE14(__dst) = v58;
                  memcpy(&__dst, (const void *)(v57 + 32), v58);
                  v61 = __dst;
                  v62 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
                  swift_bridgeObjectRetain();
                }
                else
                {
                  sub_1C35B696C();
                  swift_allocObject();
                  swift_bridgeObjectRetain();
                  v59 = sub_1C35B6930();
                  v60 = v59;
                  if (v58 >= 0x7FFFFFFF)
                  {
                    sub_1C35B69FC();
                    v61 = swift_allocObject();
                    *(_QWORD *)(v61 + 16) = 0;
                    *(_QWORD *)(v61 + 24) = v58;
                    v62 = v60 | 0x8000000000000000;
                  }
                  else
                  {
                    v61 = v58 << 32;
                    v62 = v59 | 0x4000000000000000;
                  }
                }
              }
              else
              {
                swift_bridgeObjectRetain();
                v61 = 0;
                v62 = 0xC000000000000000;
                v14 = v89;
              }
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v95);
              *(_QWORD *)v95 = v61;
              v96 = v62;
              v63 = sub_1C35B6A8C();
              v65 = v64;
              sub_1C35B6A80();
              sub_1C3573D7C(v63, v65);
              v66 = *(_QWORD *)v95;
              v67 = v96;
              sub_1C35B6A80();
              sub_1C3573D7C(v66, v67);
              sub_1C3575114((uint64_t *)&v103, (void (*)(uint64_t, uint64_t))sub_1C3573D7C);
              v8 = v86;
              v9 = v92;
              v13 = v90;
              goto LABEL_9;
            }
            v28 = sub_1C3573D7C(v29, v30);
          }
          v47 = sub_1C35B6AC8(v28);
          v48 = sub_1C35B6D50();
          if (os_log_type_enabled(v47, v48))
          {
            v49 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v49 = 0;
            _os_log_impl(&dword_1C3511000, v47, v48, "Endpoint not found for in Lyon Instance, skipping", v49, 2u);
            MEMORY[0x1C3BD380C](v49, -1, -1);

            sub_1C3575114((uint64_t *)&v103, (void (*)(uint64_t, uint64_t))sub_1C3573D7C);
          }
          else
          {
            sub_1C3575114((uint64_t *)&v103, (void (*)(uint64_t, uint64_t))sub_1C3573D7C);

          }
          v9 = v92;
LABEL_9:
          v14 += 56;
          if (!--v13)
          {
            swift_bridgeObjectRelease();
            swift_release();
            v68 = v101;
            v69 = v102;
            goto LABEL_42;
          }
        }
      }
      v68 = v10;
      v69 = v11;
      swift_bridgeObjectRelease();
      swift_release();
LABEL_42:
      sub_1C3573E48(v68, v69);
      sub_1C357766C(v68, v69);
      v71 = v70;
      v73 = v72;
      sub_1C3573D7C(v68, v69);
      v79 = sub_1C356E348(v85, v71, v73, v74, v75, v76, v77, v78, 0, v85, v86, v87, (uint8_t *)v88, *((uint64_t *)&v88 + 1), v89, v90, (int)buf[0], BYTE4(buf[0]), (uint64_t)buf[1],
              v92,
              v93,
              v94,
              v95[0],
              v96,
              v97);
      sub_1C3573D7C(v71, v73);
      if ((v79 & 1) != 0)
      {
        __dst = xmmword_1C35BB2D0;
        __asm { BR              X10 }
      }
      if (qword_1EF8D9968 != -1)
        swift_once();
      v80 = sub_1C35B6AE0();
      v81 = __swift_project_value_buffer(v80, (uint64_t)qword_1EF8D9970);
      v82 = sub_1C35B6AC8(v81);
      v83 = sub_1C35B6D68();
      if (os_log_type_enabled(v82, v83))
      {
        v84 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v84 = 0;
        _os_log_impl(&dword_1C3511000, v82, v83, "Applet configuration has not changed", v84, 2u);
        MEMORY[0x1C3BD380C](v84, -1, -1);
      }

      return (void *)sub_1C3573D7C(v101, v102);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
      sub_1C3577C3C(0xD000000000000034, 0x80000001C35C4EE0, 8, 0);
      return (void *)swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_1C356D5A4(void *a1)
{
  uint64_t v2;
  char *v3;
  unint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  id v20[4];

  v20[3] = *(id *)MEMORY[0x1E0C80C00];
  sub_1C35B6AE0();
  MEMORY[0x1E0C80A78]();
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1C3576F64((uint64_t)&unk_1E7D8B018);
  v16 = v4;
  v5 = (void *)sub_1C35B6A44();
  if (qword_1EF8D99A8 != -1)
    swift_once();
  sub_1C3575208(0, &qword_1EF8D9A00);
  v6 = (void *)sub_1C35B6CD8();
  v20[0] = 0;
  v7 = objc_msgSend(a1, sel_transceiveAndCheckSW_inArray_error_, v5, v6, v20);

  v8 = v20[0];
  if (v7)
  {
    v18 = v3;
    sub_1C35B6A5C();
    v10 = v9;

    v19 = sub_1C35AB0E0(MEMORY[0x1E0DEE9D8]);
    v17 = v10;
    __asm { BR              X10 }
  }
  v11 = v8;
  v12 = sub_1C35B69C0();

  swift_willThrow();
  sub_1C3573D7C(v15, v16);
  return v12;
}

uint64_t sub_1C356E348(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t log, uint64_t a11, uint64_t a12, uint8_t *buf, uint64_t a14, uint64_t a15, uint64_t a16, int a17, os_log_type_t type, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25)
{
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  id v34[4];

  v34[3] = *(id *)MEMORY[0x1E0C80C00];
  if (qword_1EF8D9990 != -1)
    swift_once();
  v26 = (void *)sub_1C35B6A44();
  v34[0] = 0;
  v27 = objc_msgSend(a1, sel_transceive_error_, v26, v34);

  v28 = v34[0];
  if (v27)
  {
    sub_1C35B6A5C();
    v30 = v29;

    __asm { BR              X9 }
  }
  v31 = v28;
  sub_1C35B69C0();

  swift_willThrow();
  return v32 & 1;
}

void sub_1C356EAEC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_1C356ECC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1C357FF60(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C356EE14(uint64_t a1)
{
  char **v1;
  int64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1C3580298(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *((_QWORD *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C356EF58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1C3580390(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C356F0A8(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1C35B6EDC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1C35B6EDC();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x1C3BD2DF8](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1C3573770(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = sub_1C35B6EDC();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_1C35B6CF0();
  }
  __break(1u);
  return result;
}

uint64_t sub_1C356F260()
{
  sub_1C35B6FB4();
  sub_1C35B6C30();
  return sub_1C35B6FD8();
}

uint64_t sub_1C356F2C0()
{
  sub_1C3574134(&qword_1EF8D9A28, (uint64_t (*)(uint64_t))type metadata accessor for ATLError, (uint64_t)&protocol conformance descriptor for ATLError);
  return sub_1C35B6990();
}

uint64_t sub_1C356F310()
{
  sub_1C35B6FB4();
  sub_1C35B6C30();
  return sub_1C35B6FD8();
}

_QWORD *sub_1C356F36C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1C356F37C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_1C356F388(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1C356F39C(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

void sub_1C356F3D0()
{
  JUMPOUT(0x1C3BD380CLL);
}

_BYTE **sub_1C356F3DC(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

void sub_1C356F3EC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *__dst;
  uint64_t v78;
  uint64_t v79;

  v2 = v1;
  v4 = a1[1];
  if (sub_1C35B6F30() >= v4)
  {
    if (v4 < 0)
    {
LABEL_101:
      __break(1u);
      __break(1u);
      __break(1u);
      JUMPOUT(0x1C3570C78);
    }
    if (v4)
      sub_1C3571904(0, v4, 1, (uint64_t)a1);
  }
  else
  {
    if (v4 >= 0)
      v5 = v4;
    else
      v5 = v4 + 1;
    if (v4 < -1)
    {
      sub_1C35B6EC4();
      __break(1u);
      JUMPOUT(0x1C3570E28);
    }
    v73 = a1;
    if (v4 >= 2)
    {
      v6 = v5 >> 1;
      v7 = sub_1C35B6D08();
      *(_QWORD *)(v7 + 16) = v6;
      v74 = v7;
      __dst = (char *)(v7 + 32);
      goto LABEL_12;
    }
    v8 = (char *)MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    v74 = MEMORY[0x1E0DEE9D8];
    if (v4 == 1)
    {
LABEL_12:
      v9 = 0;
      v10 = *a1;
      v8 = (char *)MEMORY[0x1E0DEE9D8];
      v75 = v4;
      v78 = *a1;
      while (1)
      {
        v11 = v9 + 1;
        v76 = v9;
        if (v9 + 1 < v4)
          __asm { BR              X10 }
        if (v11 < v9)
          goto LABEL_100;
        v79 = v9 + 1;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = sub_1C359C43C(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
        v13 = *((_QWORD *)v8 + 2);
        v12 = *((_QWORD *)v8 + 3);
        v14 = v13 + 1;
        v10 = v78;
        v9 = v79;
        if (v13 >= v12 >> 1)
        {
          v64 = sub_1C359C43C((char *)(v12 > 1), v13 + 1, 1, v8);
          v10 = v78;
          v9 = v79;
          v8 = v64;
        }
        *((_QWORD *)v8 + 2) = v14;
        v15 = v8 + 32;
        v16 = &v8[16 * v13 + 32];
        *(_QWORD *)v16 = v76;
        *((_QWORD *)v16 + 1) = v9;
        if (v13)
        {
          while (1)
          {
            v17 = v14 - 1;
            if (v14 >= 4)
            {
              v22 = &v15[16 * v14];
              v23 = *((_QWORD *)v22 - 8);
              v24 = *((_QWORD *)v22 - 7);
              v28 = __OFSUB__(v24, v23);
              v25 = v24 - v23;
              if (v28)
                goto LABEL_85;
              v27 = *((_QWORD *)v22 - 6);
              v26 = *((_QWORD *)v22 - 5);
              v28 = __OFSUB__(v26, v27);
              v20 = v26 - v27;
              v21 = v28;
              if (v28)
                goto LABEL_86;
              v29 = v14 - 2;
              v30 = &v15[16 * v14 - 32];
              v32 = *(_QWORD *)v30;
              v31 = *((_QWORD *)v30 + 1);
              v28 = __OFSUB__(v31, v32);
              v33 = v31 - v32;
              if (v28)
                goto LABEL_88;
              v28 = __OFADD__(v20, v33);
              v34 = v20 + v33;
              if (v28)
                goto LABEL_91;
              if (v34 >= v25)
              {
                v52 = &v15[16 * v17];
                v54 = *(_QWORD *)v52;
                v53 = *((_QWORD *)v52 + 1);
                v28 = __OFSUB__(v53, v54);
                v55 = v53 - v54;
                if (v28)
                {
                  __break(1u);
                  JUMPOUT(0x1C3570C3CLL);
                }
                v45 = v20 < v55;
                goto LABEL_52;
              }
            }
            else
            {
              if (v14 != 3)
              {
                v46 = *((_QWORD *)v8 + 4);
                v47 = *((_QWORD *)v8 + 5);
                v28 = __OFSUB__(v47, v46);
                v39 = v47 - v46;
                v40 = v28;
                goto LABEL_46;
              }
              v19 = *((_QWORD *)v8 + 4);
              v18 = *((_QWORD *)v8 + 5);
              v28 = __OFSUB__(v18, v19);
              v20 = v18 - v19;
              v21 = v28;
            }
            if ((v21 & 1) != 0)
              goto LABEL_87;
            v29 = v14 - 2;
            v35 = &v15[16 * v14 - 32];
            v37 = *(_QWORD *)v35;
            v36 = *((_QWORD *)v35 + 1);
            v38 = __OFSUB__(v36, v37);
            v39 = v36 - v37;
            v40 = v38;
            if (v38)
              goto LABEL_90;
            v41 = &v15[16 * v17];
            v43 = *(_QWORD *)v41;
            v42 = *((_QWORD *)v41 + 1);
            v28 = __OFSUB__(v42, v43);
            v44 = v42 - v43;
            if (v28)
              goto LABEL_93;
            if (__OFADD__(v39, v44))
              goto LABEL_94;
            if (v39 + v44 >= v20)
            {
              v45 = v20 < v44;
LABEL_52:
              if (v45)
                v17 = v29;
              goto LABEL_54;
            }
LABEL_46:
            if ((v40 & 1) != 0)
              goto LABEL_89;
            v48 = &v15[16 * v17];
            v50 = *(_QWORD *)v48;
            v49 = *((_QWORD *)v48 + 1);
            v28 = __OFSUB__(v49, v50);
            v51 = v49 - v50;
            if (v28)
              goto LABEL_92;
            if (v51 < v39)
              goto LABEL_63;
LABEL_54:
            v56 = v17 - 1;
            if (v17 - 1 >= v14)
            {
              __break(1u);
LABEL_82:
              __break(1u);
LABEL_83:
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
LABEL_86:
              __break(1u);
LABEL_87:
              __break(1u);
LABEL_88:
              __break(1u);
LABEL_89:
              __break(1u);
LABEL_90:
              __break(1u);
LABEL_91:
              __break(1u);
LABEL_92:
              __break(1u);
LABEL_93:
              __break(1u);
LABEL_94:
              __break(1u);
              JUMPOUT(0x1C3570C30);
            }
            if (!v10)
            {
              __break(1u);
              JUMPOUT(0x1C3570CB4);
            }
            v57 = v8;
            v58 = v2;
            v59 = &v15[16 * v56];
            v60 = *(_QWORD *)v59;
            v61 = &v15[16 * v17];
            v62 = *((_QWORD *)v61 + 1);
            sub_1C3572298((char *)(v10 + 56 * *(_QWORD *)v59), (char *)(v10 + 56 * *(_QWORD *)v61), v10 + 56 * v62, __dst);
            if (v58)
            {
LABEL_78:
              swift_bridgeObjectRelease();
              *(_QWORD *)(v74 + 16) = 0;
              swift_bridgeObjectRelease();
              return;
            }
            if (v62 < v60)
              goto LABEL_82;
            if (v17 > *((_QWORD *)v57 + 2))
              goto LABEL_83;
            *(_QWORD *)v59 = v60;
            *(_QWORD *)&v15[16 * v56 + 8] = v62;
            v63 = *((_QWORD *)v57 + 2);
            if (v17 >= v63)
              goto LABEL_84;
            v8 = v57;
            v14 = v63 - 1;
            memmove(&v15[16 * v17], v61 + 16, 16 * (v63 - 1 - v17));
            *((_QWORD *)v57 + 2) = v63 - 1;
            v2 = 0;
            v10 = v78;
            v9 = v79;
            if (v63 <= 2)
              goto LABEL_63;
          }
        }
        v14 = 1;
LABEL_63:
        v4 = v75;
        if (v9 >= v75)
          goto LABEL_66;
      }
    }
    v14 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_66:
    v65 = v8;
    if (v14 >= 2)
    {
      v66 = *v73;
      while (1)
      {
        v67 = v14 - 2;
        if (v14 < 2)
        {
          __break(1u);
          JUMPOUT(0x1C3570C48);
        }
        if (!v66)
          __break(1u);
        v68 = v2;
        v69 = *(_QWORD *)&v65[16 * v67 + 32];
        v70 = *(_QWORD *)&v65[16 * v14 + 24];
        sub_1C3572298((char *)(v66 + 56 * v69), (char *)(v66 + 56 * *(_QWORD *)&v65[16 * v14 + 16]), v66 + 56 * v70, __dst);
        if (v68)
          goto LABEL_78;
        if (v70 < v69)
          break;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v65 = sub_1C359C748((uint64_t)v65);
        if (v67 >= *((_QWORD *)v65 + 2))
          goto LABEL_98;
        v71 = &v65[16 * v67 + 32];
        *(_QWORD *)v71 = v69;
        *((_QWORD *)v71 + 1) = v70;
        v72 = *((_QWORD *)v65 + 2);
        if (v14 > v72)
          goto LABEL_99;
        memmove(&v65[16 * v14 + 16], &v65[16 * v14 + 32], 16 * (v72 - v14));
        *((_QWORD *)v65 + 2) = v72 - 1;
        v14 = v72 - 1;
        v2 = 0;
        if (v72 <= 2)
          goto LABEL_79;
      }
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
      __break(1u);
      goto LABEL_101;
    }
LABEL_79:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v74 + 16) = 0;
    swift_bridgeObjectRelease();
  }
}

void sub_1C3570EB8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  void **v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  id v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  __int128 v111;
  char v112;
  char v113;
  void *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void **__dst;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;

  v2 = a1;
  v3 = a1[1];
  v4 = sub_1C35B6F30();
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if (v3)
      sub_1C35720C8(0, v3, 1, v2);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v126 = v2;
  v127 = v4;
  if (v3 < 2)
  {
    v9 = (char *)MEMORY[0x1E0DEE9D8];
    v140 = MEMORY[0x1E0DEE9D8];
    __dst = (void **)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v50 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      goto LABEL_101;
    }
  }
  else
  {
    v6 = v2;
    v7 = v5 >> 1;
    sub_1C3575208(0, (unint64_t *)&qword_1EF8D95A0);
    v8 = sub_1C35B6D08();
    *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    v2 = v6;
    __dst = (void **)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    v140 = v8;
  }
  v10 = 0;
  v11 = *v2;
  v124 = *v2 - 8;
  v125 = *v2 + 16;
  v9 = (char *)MEMORY[0x1E0DEE9D8];
  v131 = v3;
  v137 = *v2;
  while (1)
  {
    v12 = v10;
    v13 = v10 + 1;
    v132 = v9;
    v130 = v10;
    if (v10 + 1 < v3)
    {
      v14 = *(void **)(v11 + 8 * v13);
      v15 = *(void **)(v11 + 8 * v10);
      v16 = sub_1C35B6C60();
      v18 = v17;
      v19 = v14;
      v20 = v15;
      sub_1C3585208(v16, v18, &v139);
      if (v1)
      {
        swift_bridgeObjectRelease();

LABEL_115:
        swift_bridgeObjectRelease();
        *(_QWORD *)((v140 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
        sub_1C35B6CF0();
        swift_bridgeObjectRelease();
        return;
      }
      swift_bridgeObjectRelease();
      v22 = *((_QWORD *)&v139 + 1);
      v21 = v139;
      v23 = sub_1C35B6C60();
      sub_1C3585208(v23, v24, &v138);
      swift_bridgeObjectRelease();
      v26 = *((_QWORD *)&v138 + 1);
      v25 = v138;
      sub_1C3575E18(v21, v22);
      v128 = v27;
      sub_1C3573D7C(v21, v22);
      sub_1C3573D7C(v25, v26);

      v12 = v130;
      v3 = v131;
      v13 = v130 + 2;
      if (v130 + 2 < v131)
      {
        v28 = (void **)(v125 + 8 * v130);
        while (1)
        {
          v133 = v13;
          v30 = *(v28 - 1);
          v29 = *v28;
          v31 = sub_1C35B6C60();
          v33 = v32;
          v34 = v29;
          v35 = v30;
          sub_1C3585208(v31, v33, &v139);
          swift_bridgeObjectRelease();
          v36 = v139;
          v37 = sub_1C35B6C60();
          sub_1C3585208(v37, v38, &v138);
          swift_bridgeObjectRelease();
          v39 = v138;
          sub_1C3575E18(v36, *((uint64_t *)&v36 + 1));
          v41 = v40;
          sub_1C3573D7C(v36, *((unint64_t *)&v36 + 1));
          sub_1C3573D7C(v39, *((unint64_t *)&v39 + 1));

          if (((v128 ^ v41) & 1) != 0)
            break;
          v9 = v132;
          v13 = v133 + 1;
          ++v28;
          v3 = v131;
          if (v131 == v133 + 1)
          {
            v13 = v131;
            goto LABEL_21;
          }
        }
        v9 = v132;
        v13 = v133;
        v3 = v131;
LABEL_21:
        v12 = v130;
      }
      v11 = v137;
      if ((v128 & 1) != 0)
      {
        if (v13 < v12)
          goto LABEL_141;
        if (v12 < v13)
        {
          v42 = (uint64_t *)(v124 + 8 * v13);
          v43 = v13;
          v44 = v12;
          v45 = (uint64_t *)(v137 + 8 * v12);
          do
          {
            if (v44 != --v43)
            {
              if (!v137)
                goto LABEL_144;
              v46 = *v45;
              *v45 = *v42;
              *v42 = v46;
            }
            ++v44;
            --v42;
            ++v45;
          }
          while (v44 < v43);
        }
      }
    }
    if (v13 >= v3)
      goto LABEL_39;
    if (__OFSUB__(v13, v12))
      goto LABEL_138;
    if (v13 - v12 >= v127)
    {
LABEL_39:
      if (v13 < v12)
        goto LABEL_136;
      goto LABEL_40;
    }
    if (__OFADD__(v12, v127))
      goto LABEL_139;
    v47 = v12 + v127 >= v3 ? v3 : v12 + v127;
    if (v47 < v12)
      break;
    if (v13 == v47)
      goto LABEL_39;
    v98 = v124 + 8 * v13;
    v123 = v47;
    do
    {
      v99 = *(void **)(v11 + 8 * v13);
      v100 = v12;
      v129 = v98;
      v135 = v13;
      while (1)
      {
        v101 = *(void **)v98;
        v102 = sub_1C35B6C60();
        v104 = v103;
        v105 = v99;
        v106 = v101;
        sub_1C3585208(v102, v104, &v139);
        if (v1)
        {
          swift_bridgeObjectRelease();

          goto LABEL_115;
        }
        swift_bridgeObjectRelease();
        v107 = v139;
        v108 = sub_1C35B6C60();
        sub_1C3585208(v108, v109, &v138);
        v110 = v106;
        swift_bridgeObjectRelease();
        v111 = v138;
        sub_1C3575E18(v107, *((uint64_t *)&v107 + 1));
        v113 = v112;
        sub_1C3573D7C(v107, *((unint64_t *)&v107 + 1));
        sub_1C3573D7C(v111, *((unint64_t *)&v111 + 1));

        if ((v113 & 1) == 0)
          break;
        v11 = v137;
        v12 = v130;
        if (!v137)
          goto LABEL_145;
        v114 = *(void **)v98;
        v99 = *(void **)(v98 + 8);
        *(_QWORD *)v98 = v99;
        *(_QWORD *)(v98 + 8) = v114;
        v98 -= 8;
        ++v100;
        v115 = v135;
        if (v135 == v100)
          goto LABEL_97;
      }
      v11 = v137;
      v115 = v135;
      v12 = v130;
LABEL_97:
      v13 = v115 + 1;
      v98 = v129 + 8;
    }
    while (v13 != v123);
    v13 = v123;
    v9 = v132;
    if (v123 < v12)
      goto LABEL_136;
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v9 = sub_1C359C43C(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
    v49 = *((_QWORD *)v9 + 2);
    v48 = *((_QWORD *)v9 + 3);
    v50 = v49 + 1;
    v11 = v137;
    if (v49 >= v48 >> 1)
    {
      v116 = sub_1C359C43C((char *)(v48 > 1), v49 + 1, 1, v9);
      v11 = v137;
      v9 = v116;
    }
    *((_QWORD *)v9 + 2) = v50;
    v51 = v9 + 32;
    v52 = &v9[16 * v49 + 32];
    *(_QWORD *)v52 = v12;
    *((_QWORD *)v52 + 1) = v13;
    v134 = v13;
    if (v49)
    {
LABEL_45:
      v53 = v50 - 1;
      if (v50 >= 4)
      {
        v58 = &v51[16 * v50];
        v59 = *((_QWORD *)v58 - 8);
        v60 = *((_QWORD *)v58 - 7);
        v64 = __OFSUB__(v60, v59);
        v61 = v60 - v59;
        if (v64)
          goto LABEL_121;
        v63 = *((_QWORD *)v58 - 6);
        v62 = *((_QWORD *)v58 - 5);
        v64 = __OFSUB__(v62, v63);
        v56 = v62 - v63;
        v57 = v64;
        if (v64)
          goto LABEL_122;
        v65 = v50 - 2;
        v66 = &v51[16 * v50 - 32];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v64 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v64)
          goto LABEL_124;
        v64 = __OFADD__(v56, v69);
        v70 = v56 + v69;
        if (v64)
          goto LABEL_127;
        if (v70 >= v61)
        {
          v88 = &v51[16 * v53];
          v90 = *(_QWORD *)v88;
          v89 = *((_QWORD *)v88 + 1);
          v64 = __OFSUB__(v89, v90);
          v91 = v89 - v90;
          if (v64)
            goto LABEL_135;
          v81 = v56 < v91;
        }
        else
        {
LABEL_58:
          if ((v57 & 1) != 0)
            goto LABEL_123;
          v65 = v50 - 2;
          v71 = &v51[16 * v50 - 32];
          v73 = *(_QWORD *)v71;
          v72 = *((_QWORD *)v71 + 1);
          v74 = __OFSUB__(v72, v73);
          v75 = v72 - v73;
          v76 = v74;
          if (v74)
            goto LABEL_126;
          v77 = &v51[16 * v53];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v64 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v64)
            goto LABEL_129;
          if (__OFADD__(v75, v80))
            goto LABEL_130;
          if (v75 + v80 < v56)
            goto LABEL_70;
          v81 = v56 < v80;
        }
        if (v81)
          v53 = v65;
      }
      else
      {
        if (v50 == 3)
        {
          v55 = *((_QWORD *)v9 + 4);
          v54 = *((_QWORD *)v9 + 5);
          v64 = __OFSUB__(v54, v55);
          v56 = v54 - v55;
          v57 = v64;
          goto LABEL_58;
        }
        v82 = *((_QWORD *)v9 + 4);
        v83 = *((_QWORD *)v9 + 5);
        v64 = __OFSUB__(v83, v82);
        v75 = v83 - v82;
        v76 = v64;
LABEL_70:
        if ((v76 & 1) != 0)
          goto LABEL_125;
        v84 = &v51[16 * v53];
        v86 = *(_QWORD *)v84;
        v85 = *((_QWORD *)v84 + 1);
        v64 = __OFSUB__(v85, v86);
        v87 = v85 - v86;
        if (v64)
          goto LABEL_128;
        if (v87 < v75)
          goto LABEL_87;
      }
      v92 = v53 - 1;
      if (v53 - 1 >= v50)
      {
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
        break;
      }
      if (!v11)
        goto LABEL_142;
      v93 = &v51[16 * v92];
      v94 = *(_QWORD *)v93;
      v95 = &v51[16 * v53];
      v96 = *((_QWORD *)v95 + 1);
      sub_1C357325C((void **)(v11 + 8 * *(_QWORD *)v93), (void **)(v11 + 8 * *(_QWORD *)v95), v11 + 8 * v96, __dst);
      if (v1)
        goto LABEL_115;
      if (v96 < v94)
        goto LABEL_118;
      if (v53 > *((_QWORD *)v9 + 2))
        goto LABEL_119;
      *(_QWORD *)v93 = v94;
      *(_QWORD *)&v51[16 * v92 + 8] = v96;
      v97 = *((_QWORD *)v9 + 2);
      if (v53 >= v97)
        goto LABEL_120;
      v50 = v97 - 1;
      memmove(&v51[16 * v53], v95 + 16, 16 * (v97 - 1 - v53));
      *((_QWORD *)v9 + 2) = v97 - 1;
      v11 = v137;
      if (v97 <= 2)
        goto LABEL_87;
      goto LABEL_45;
    }
    v50 = 1;
LABEL_87:
    v3 = v131;
    v10 = v134;
    if (v134 >= v131)
    {
LABEL_101:
      if (v50 >= 2)
      {
        v117 = *v126;
        while (1)
        {
          v118 = v50 - 2;
          if (v50 < 2)
            goto LABEL_131;
          if (!v117)
            goto LABEL_143;
          v119 = *(_QWORD *)&v9[16 * v118 + 32];
          v120 = *(_QWORD *)&v9[16 * v50 + 24];
          sub_1C357325C((void **)(v117 + 8 * v119), (void **)(v117 + 8 * *(_QWORD *)&v9[16 * v50 + 16]), v117 + 8 * v120, __dst);
          if (v1)
            goto LABEL_115;
          if (v120 < v119)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v9 = sub_1C359C748((uint64_t)v9);
          if (v118 >= *((_QWORD *)v9 + 2))
            goto LABEL_133;
          v121 = &v9[16 * v118 + 32];
          *(_QWORD *)v121 = v119;
          *((_QWORD *)v121 + 1) = v120;
          v122 = *((_QWORD *)v9 + 2);
          if (v50 > v122)
            goto LABEL_134;
          memmove(&v9[16 * v50 + 16], &v9[16 * v50 + 32], 16 * (v122 - v50));
          *((_QWORD *)v9 + 2) = v122 - 1;
          v50 = v122 - 1;
          if (v122 <= 2)
            goto LABEL_115;
        }
      }
      goto LABEL_115;
    }
  }
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  sub_1C35B6EC4();
  __break(1u);
}

void sub_1C3571904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
    __asm { BR              X10 }
}

void sub_1C35720C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  char v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  if (a3 != a2)
  {
    v5 = a3;
    v6 = *a4;
    v7 = *a4 + 8 * a3 - 8;
    v23 = a1;
    v26 = *a4;
    while (2)
    {
      v8 = *(void **)(v6 + 8 * v5);
      v25 = v7;
      v27 = v5;
      while (1)
      {
        v30 = a1;
        v9 = *(void **)v7;
        v10 = sub_1C35B6C60();
        v12 = v11;
        v13 = v8;
        v14 = v9;
        sub_1C3585208(v10, v12, &v29);
        if (v4)
        {

          swift_bridgeObjectRelease();
          return;
        }
        swift_bridgeObjectRelease();
        v15 = v29;
        v16 = sub_1C35B6C60();
        sub_1C3585208(v16, v17, &v28);
        swift_bridgeObjectRelease();
        v18 = v28;
        sub_1C3575E18(v15, *((uint64_t *)&v15 + 1));
        v20 = v19;
        sub_1C3573D7C(v15, *((unint64_t *)&v15 + 1));
        sub_1C3573D7C(v18, *((unint64_t *)&v18 + 1));

        if ((v20 & 1) == 0)
          break;
        v6 = v26;
        v21 = v27;
        if (!v26)
        {
          __break(1u);
          return;
        }
        v22 = *(void **)v7;
        v8 = *(void **)(v7 + 8);
        *(_QWORD *)v7 = v8;
        *(_QWORD *)(v7 + 8) = v22;
        v7 -= 8;
        a1 = v30 + 1;
        if (v27 == v30 + 1)
          goto LABEL_10;
      }
      v6 = v26;
      v21 = v27;
LABEL_10:
      v5 = v21 + 1;
      v7 = v25 + 8;
      a1 = v23;
      if (v5 != a2)
        continue;
      break;
    }
  }
}

uint64_t sub_1C3572298(char *__src, char *a2, unint64_t a3, char *__dst)
{
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  char *v12;
  char *v13;
  const void *v14;
  void *v15[3];

  v15[1] = *(void **)MEMORY[0x1E0C80C00];
  v6 = a2 - __src;
  v7 = (a2 - __src) / 56;
  v8 = a3 - (_QWORD)a2;
  v9 = (uint64_t)(a3 - (_QWORD)a2) / 56;
  v14 = __dst;
  v15[0] = __src;
  v11 = a3;
  v12 = __dst;
  if (v7 < v9)
  {
    if (v6 >= -55)
    {
      if (__dst != __src || &__src[56 * v7] <= __dst)
      {
        memmove(__dst, __src, 56 * v7);
        a3 = v11;
        __dst = v12;
      }
      v13 = &__dst[56 * v7];
      if ((unint64_t)a2 < a3 && v6 >= 56)
        __asm { BR              X10 }
      goto LABEL_16;
    }
LABEL_17:
    sub_1C35B6F0C();
    __break(1u);
    JUMPOUT(0x1C357318CLL);
  }
  if (v8 < -55)
    goto LABEL_17;
  if (__dst != a2 || &a2[56 * v9] <= __dst)
  {
    memmove(__dst, a2, 56 * v9);
    __dst = v12;
  }
  v13 = &__dst[56 * v9];
  v15[0] = a2;
  if (__src < a2 && v8 >= 56)
    __asm { BR              X10 }
LABEL_16:
  sub_1C359C534(v15, &v14, &v13);
  return 1;
}

uint64_t sub_1C357325C(void **__src, void **a2, unint64_t a3, void **__dst)
{
  uint64_t v4;
  void **v5;
  void **v6;
  void **v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  char v26;
  void **v27;
  void **v28;
  void **v29;
  void **v30;
  void **v31;
  void *v32;
  void **v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  __int128 v44;
  char v45;
  char v46;
  void **v47;
  void **v48;
  uint64_t result;
  void **v50;
  void **v51;
  void **v52;
  unint64_t v53;
  void **v55;
  void **v56;
  void **v57;
  void **v58;
  void **v59;
  void **v60;
  __int128 v61;
  __int128 v62;
  void **v63;
  void **v64;
  void **v65;

  v5 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v65 = __src;
  v64 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v29 = &v5[v13];
      v63 = v29;
      v65 = v6;
      if (v7 >= v6 || v11 < 8)
        goto LABEL_48;
      v30 = (void **)(a3 - 8);
      v31 = v6;
      v56 = v5;
      v58 = v7;
      while (1)
      {
        v60 = v6;
        v53 = (unint64_t)v29;
        v33 = v29 - 1;
        v32 = *(v29 - 1);
        v34 = *(v31 - 1);
        v50 = v31 - 1;
        v35 = sub_1C35B6C60();
        v37 = v36;
        v38 = v32;
        v39 = v34;
        sub_1C3585208(v35, v37, &v62);
        if (v4)
          break;
        swift_bridgeObjectRelease();
        v40 = v62;
        v41 = sub_1C35B6C60();
        sub_1C3585208(v41, v42, &v61);
        v43 = v39;
        swift_bridgeObjectRelease();
        v44 = v61;
        sub_1C3575E18(v40, *((uint64_t *)&v40 + 1));
        v46 = v45;
        v51 = v30 + 1;
        sub_1C3573D7C(v40, *((unint64_t *)&v40 + 1));
        sub_1C3573D7C(v44, *((unint64_t *)&v44 + 1));

        if ((v46 & 1) != 0)
        {
          v47 = v58;
          v31 = v50;
          v48 = v56;
          v29 = (void **)v53;
          if (v51 != v60 || v30 >= v60)
            *v30 = *v50;
          v65 = v50;
        }
        else
        {
          v63 = v33;
          v48 = v56;
          v47 = v58;
          if ((unint64_t)v51 < v53 || (unint64_t)v30 >= v53 || v51 != (void **)v53)
            *v30 = *v33;
          v31 = v60;
          v29 = v33;
        }
        if (v31 > v47)
        {
          --v30;
          v6 = v31;
          if (v29 > v48)
            continue;
        }
        goto LABEL_48;
      }

      goto LABEL_47;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v52 = &v5[v10];
    v63 = v52;
    if ((unint64_t)v6 >= a3 || v8 < 8)
      goto LABEL_48;
    while (1)
    {
      v57 = v7;
      v59 = v6;
      v14 = *v6;
      v55 = v5;
      v15 = *v5;
      v16 = sub_1C35B6C60();
      v18 = v17;
      v19 = v14;
      v20 = v15;
      sub_1C3585208(v16, v18, &v62);
      if (v4)
        break;
      swift_bridgeObjectRelease();
      v21 = v62;
      v22 = sub_1C35B6C60();
      sub_1C3585208(v22, v23, &v61);
      swift_bridgeObjectRelease();
      v24 = v61;
      sub_1C3575E18(v21, *((uint64_t *)&v21 + 1));
      v26 = v25;
      sub_1C3573D7C(v21, *((unint64_t *)&v21 + 1));
      sub_1C3573D7C(v24, *((unint64_t *)&v24 + 1));

      if ((v26 & 1) != 0)
      {
        v27 = v57;
        v28 = v59 + 1;
        v5 = v55;
        if (v57 < v59 || v57 >= v28 || v57 != v59)
          *v57 = *v59;
      }
      else
      {
        v27 = v57;
        if (v57 != v55)
          *v57 = *v55;
        v5 = v55 + 1;
        v64 = v55 + 1;
        v28 = v59;
      }
      v7 = v27 + 1;
      v65 = v7;
      if (v5 < v52)
      {
        v6 = v28;
        if ((unint64_t)v28 < a3)
          continue;
      }
      goto LABEL_48;
    }

LABEL_47:
    swift_bridgeObjectRelease();
LABEL_48:
    sub_1C359C5F4(&v65, &v64, &v63);
    return 1;
  }
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C3573770(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1C35B6EDC();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1C35B6EDC();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1C3575338(&qword_1EF8D9A38, &qword_1EF8D9A30, MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9A30);
          v12 = sub_1C35A4C64(v16, i, a3);
          v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for ExpressMode.PassConfig();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C357397C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_1C3596CAC((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_1C3573A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_1C35B693C();
  v11 = result;
  if (result)
  {
    result = sub_1C35B6954();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_1C35B6948();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_1C3596CAC(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_1C3573B04(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1C3573B50()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1C3573B84 + dword_1C3573D5C[v0 >> 62]))();
}

uint64_t sub_1C3573B94@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_1C3573D7C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

_OWORD *sub_1C3573DC0(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1C3573DD4()
{
  unint64_t result;

  result = qword_1EF8D9A10;
  if (!qword_1EF8D9A10)
  {
    result = MEMORY[0x1C3BD3788](&protocol conformance descriptor for AssociatedReader, &type metadata for AssociatedReader);
    atomic_store(result, (unint64_t *)&qword_1EF8D9A10);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AssociatedReader(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_1C3573E48(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t destroy for AssociatedReader(uint64_t a1)
{
  sub_1C3573D7C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_1C3573D7C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return sub_1C3573D7C(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t *initializeWithCopy for AssociatedReader(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = a2[1];
  sub_1C3573E48(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  v7 = a2[4];
  sub_1C3573E48(v6, v7);
  a1[3] = v6;
  a1[4] = v7;
  v9 = a2[5];
  v8 = a2[6];
  sub_1C3573E48(v9, v8);
  a1[5] = v9;
  a1[6] = v8;
  return a1;
}

uint64_t *assignWithCopy for AssociatedReader(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = *a2;
  v5 = a2[1];
  sub_1C3573E48(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1C3573D7C(v6, v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  sub_1C3573E48(v8, v9);
  v10 = a1[3];
  v11 = a1[4];
  a1[3] = v8;
  a1[4] = v9;
  sub_1C3573D7C(v10, v11);
  v13 = a2[5];
  v12 = a2[6];
  sub_1C3573E48(v13, v12);
  v14 = a1[5];
  v15 = a1[6];
  a1[5] = v13;
  a1[6] = v12;
  sub_1C3573D7C(v14, v15);
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AssociatedReader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1C3573D7C(v4, v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_1C3573D7C(v6, v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v8;
  sub_1C3573D7C(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssociatedReader(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AssociatedReader(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssociatedReader()
{
  return &type metadata for AssociatedReader;
}

void type metadata accessor for ATLError(uint64_t a1)
{
  sub_1C357538C(a1, &qword_1EF8D9A18);
}

uint64_t sub_1C3574108()
{
  return sub_1C3574134(&qword_1EF8D9A20, (uint64_t (*)(uint64_t))type metadata accessor for ATLError, (uint64_t)&unk_1C35BB3C0);
}

uint64_t sub_1C3574134(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1C3BD3788](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C3574174(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1C3573D7C(a1, a2);
  return a1;
}

unint64_t sub_1C3574188()
{
  unint64_t result;

  result = qword_1EF8D9A48;
  if (!qword_1EF8D9A48)
  {
    result = MEMORY[0x1C3BD3788](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EF8D9A48);
  }
  return result;
}

uint64_t sub_1C35741CC@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  __int128 v22;

  v11 = sub_1C35B6C60();
  v13 = v12;
  sub_1C3573E48(a3, a4);
  sub_1C3584670(v11, v13);
  if (v5)
  {
    sub_1C3573D7C(a3, a4);
    swift_bridgeObjectRelease();

    return sub_1C3573D7C(a3, a4);
  }
  else
  {
    swift_bridgeObjectRelease();
    v14 = sub_1C35B6C60();
    sub_1C358493C(v14, v15, &v22);
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v22 + 1) >> 60 != 15)
      __asm { BR              X10 }
    if (qword_1EF8D9968 != -1)
      swift_once();
    v17 = sub_1C35B6AE0();
    v18 = __swift_project_value_buffer(v17, (uint64_t)qword_1EF8D9970);
    v19 = sub_1C35B6AC8(v18);
    v20 = sub_1C35B6D50();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_1C3511000, v19, v20, "Priority Reader Identifier should be present and 8 bytes long", v21, 2u);
      MEMORY[0x1C3BD380C](v21, -1, -1);
    }
    sub_1C3573D7C(a3, a4);

    result = sub_1C3573D7C(a3, a4);
    *a5 = 0;
    a5[1] = 0xF000000000000000;
    a5[2] = 0;
    a5[3] = 0;
    a5[4] = 0;
    a5[5] = 0;
    a5[6] = 0;
  }
  return result;
}

void sub_1C3574A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, unint64_t a14, uint64_t a15, uint64_t a16)
{
  unint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  unint64_t v26;
  uint64_t v27;

  if (BYTE6(v19) == 65)
  {

    v27 = *(_QWORD *)(v21 - 96);
    v26 = *(_QWORD *)(v21 - 88);
    sub_1C3575268(a16, a14);
    sub_1C3575268(a12, v19);
    sub_1C3573D7C(v27, v26);
    sub_1C3573E48(a16, a14);
    sub_1C3573E48(a12, v19);
    sub_1C3573E48(v17, v16);
    sub_1C3573D7C(v17, v16);
    sub_1C3574174(a12, v19);
    sub_1C3574174(a16, a14);
    sub_1C3573D7C(a16, a14);
    sub_1C3573D7C(a12, v19);
    JUMPOUT(0x1C3574450);
  }
  if (qword_1EF8D9968 != -1)
    swift_once();
  v22 = sub_1C35B6AE0();
  __swift_project_value_buffer(v22, (uint64_t)qword_1EF8D9970);
  v23 = sub_1C35B6AC8();
  v24 = sub_1C35B6D50();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v25 = 0;
    _os_log_impl(&dword_1C3511000, v23, v24, "Public Key length should be 65 bytes", v25, 2u);
    MEMORY[0x1C3BD380C](v25, -1, -1);

    sub_1C3573D7C(v17, v16);
    sub_1C3574174(a12, v19);
    JUMPOUT(0x1C3574724);
  }

  sub_1C3574174(a16, a14);
  sub_1C3574174(a12, v19);
  sub_1C3573D7C(v17, v16);

  JUMPOUT(0x1C3574974);
}

void sub_1C3574A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;

  if (!__OFSUB__(HIDWORD(a12), (_DWORD)a12))
  {
    if (HIDWORD(a12) - (_DWORD)a12 == 65)
    {

      v27 = *(_QWORD *)(v21 - 96);
      v26 = *(_QWORD *)(v21 - 88);
      sub_1C3575268(a16, a14);
      sub_1C3575268(a12, v19);
      sub_1C3573D7C(v27, v26);
      sub_1C3573E48(a16, a14);
      sub_1C3573E48(a12, v19);
      sub_1C3573E48(v17, v16);
      sub_1C3573D7C(v17, v16);
      sub_1C3574174(a12, v19);
      sub_1C3574174(a16, a14);
      sub_1C3573D7C(a16, a14);
      sub_1C3573D7C(a12, v19);
      JUMPOUT(0x1C3574450);
    }
    if (qword_1EF8D9968 == -1)
    {
      v22 = sub_1C35B6AE0(0);
      __swift_project_value_buffer(v22, (uint64_t)&unk_1EF8D9970);
      v23 = sub_1C35B6AC8();
      v24 = sub_1C35B6D50();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v25 = 0;
        _os_log_impl(&dword_1C3511000, v23, v24, "Public Key length should be 65 bytes", v25, 2u);
        MEMORY[0x1C3BD380C](v25, -1, -1);

        sub_1C3573D7C(v17, v16);
        sub_1C3574174(a12, v19);
        JUMPOUT(0x1C3574724);
      }

      sub_1C3574174(a16, a14);
      sub_1C3574174(a12, v19);
      sub_1C3573D7C(v17, v16);

      JUMPOUT(0x1C3574974);
    }
    JUMPOUT(0x1C3574CF0);
  }
  __break(1u);
  JUMPOUT(0x1C3574D0CLL);
}

void sub_1C3574AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__OFSUB__(*(_QWORD *)(a12 + 24), *(_QWORD *)(a12 + 16)))
  {
    __break(1u);
    JUMPOUT(0x1C3574D10);
  }
  JUMPOUT(0x1C3574ABCLL);
}

_QWORD *sub_1C3574D40(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  id v5;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];
  _QWORD v33[7];
  _OWORD v34[3];
  uint64_t v35;
  unint64_t v36;

  if (a1 >> 62)
    goto LABEL_37;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  for (; v10; v10 = sub_1C35B6EDC())
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v11 = (id)MEMORY[0x1C3BD2DEC](0, a1);
    }
    else
    {
      if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_41;
      }
      v11 = *(id *)(a1 + 32);
    }
    v5 = v11;
    if (!(a2 >> 62))
    {
      v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v12)
        goto LABEL_42;
      goto LABEL_8;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v23 = sub_1C35B6EDC();
    swift_bridgeObjectRelease();
    v12 = v23;
    if (!v23)
    {
LABEL_42:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
LABEL_8:
    v13 = 0;
    v36 = a2 & 0xC000000000000001;
    v26 = a2 & 0xFFFFFFFFFFFFFF8;
    v27 = a2;
    v25 = (char *)(a2 + 32);
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v28 = v12;
    v29 = v10 - 1;
    while (1)
    {
      if (v36)
      {
        v15 = (id)MEMORY[0x1C3BD2DEC](v13, v27);
      }
      else
      {
        if (v13 >= *(_QWORD *)(v26 + 16))
          goto LABEL_35;
        v15 = *(id *)&v25[8 * v13];
      }
      a2 = (unint64_t)v15;
      v16 = v5;
      v5 = (id)a2;
      sub_1C3573E48(a3, a4);
      sub_1C35741CC(v16, v5, a3, a4, v33);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v14;
      }
      sub_1C357527C((uint64_t)v33, (uint64_t)v34);
      if (*((_QWORD *)&v34[0] + 1) >> 60 == 15)
      {
        v30 = 0u;
        v31 = 0u;
      }
      else
      {
        *((_QWORD *)&v31 + 1) = &type metadata for AssociatedReader;
        v17 = swift_allocObject();
        *(_QWORD *)&v30 = v17;
        v18 = v34[1];
        v19 = v34[2];
        *(_OWORD *)(v17 + 16) = v34[0];
        *(_OWORD *)(v17 + 32) = v18;
        *(_OWORD *)(v17 + 48) = v19;
        *(_QWORD *)(v17 + 64) = v35;
      }

      if (*((_QWORD *)&v31 + 1))
      {
        sub_1C3573DC0(&v30, v32);
        sub_1C3573DC0(v32, &v30);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v14 = sub_1C357FF60(0, v14[2] + 1, 1, v14);
        a2 = v14[2];
        v20 = v14[3];
        if (a2 >= v20 >> 1)
          v14 = sub_1C357FF60((_QWORD *)(v20 > 1), a2 + 1, 1, v14);
        v14[2] = a2 + 1;
        sub_1C3573DC0(&v30, &v14[4 * a2 + 4]);
      }
      else
      {
        sub_1C35752C4((uint64_t)&v30);
      }
      if (v29 == v13)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v14;
      }
      v21 = v13 + 1;
      if ((a1 & 0xC000000000000001) != 0)
      {
        v22 = (id)MEMORY[0x1C3BD2DEC](v13 + 1, a1);
      }
      else
      {
        if (v21 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_36;
        v22 = *(id *)(a1 + 40 + 8 * v13);
      }
      v5 = v22;
      if (__OFADD__(v21, 1))
        break;
      if (v28 == ++v13)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v14;
      }
    }
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (_QWORD *)MEMORY[0x1E0DEE9D8];
}

uint64_t *sub_1C3575114(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  return a1;
}

uint64_t sub_1C3575174(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1C35751B0(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  if (a2 >> 60 != 15)
  {
    sub_1C3573D7C(result, a2);
    sub_1C3573D7C(a4, a5);
    return sub_1C3573D7C(a6, a7);
  }
  return result;
}

uint64_t sub_1C3575208(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1C3575240(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1C3575254(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1C3575268(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1C3573E48(a1, a2);
  return a1;
}

uint64_t sub_1C357527C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9A60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C35752C4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9A68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C3575304()
{
  uint64_t v0;

  sub_1C3573D7C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_1C3573D7C(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  sub_1C3573D7C(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  return swift_deallocObject();
}

uint64_t sub_1C3575338(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1C3BD3788](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1C357538C(a1, &qword_1EF8D9A80);
}

void sub_1C357538C(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1C35753D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9A88);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1C35BB480;
    v5 = sub_1C35B6C60();
    v6 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v4 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v4 + 32) = v5;
    *(_QWORD *)(v4 + 40) = v7;
    v8 = sub_1C35B6C60();
    *(_QWORD *)(v4 + 88) = v6;
    *(_QWORD *)(v4 + 64) = v8;
    *(_QWORD *)(v4 + 72) = v9;
    *(_QWORD *)(v4 + 96) = sub_1C35B6C60();
    *(_QWORD *)(v4 + 104) = v10;
    *(_QWORD *)(v4 + 152) = v6;
    *(_QWORD *)(v4 + 120) = v6;
    *(_QWORD *)(v4 + 128) = a1;
    *(_QWORD *)(v4 + 136) = a2;
    sub_1C3575924();
    swift_bridgeObjectRetain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9A88);
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1C35BB2C0;
    v12 = sub_1C35B6C60();
    v13 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v11 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v11 + 32) = v12;
    *(_QWORD *)(v11 + 40) = v14;
    v15 = sub_1C35B6C60();
    *(_QWORD *)(v11 + 88) = v13;
    *(_QWORD *)(v11 + 64) = v15;
    *(_QWORD *)(v11 + 72) = v16;
    sub_1C3575924();
  }
  return sub_1C35B6D2C();
}

uint64_t sub_1C35754F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_1C35B6FB4();
  sub_1C35B6FC0();
  if (v1)
    sub_1C35B6C84();
  return sub_1C35B6FD8();
}

uint64_t sub_1C3575564()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + 8))
    return sub_1C35B6FC0();
  sub_1C35B6FC0();
  return sub_1C35B6C84();
}

uint64_t sub_1C35755C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_1C35B6FB4();
  sub_1C35B6FC0();
  if (v1)
    sub_1C35B6C84();
  return sub_1C35B6FD8();
}

uint64_t sub_1C3575630(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  v4 = a2[1];
  if (!v3)
    return v4 == 0;
  if (!v4)
    return 0;
  if (*a1 == *a2 && v3 == v4)
    return 1;
  else
    return sub_1C35B6F48();
}

uint64_t sub_1C357567C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;

  v6 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *v4;
  v21 = v12;
  *v6 = 0x8000000000000000;
  v14 = sub_1C35ABC5C(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }
  v5 = v13;
  if (*(_QWORD *)(v12 + 24) >= v17)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_6;
LABEL_10:
    sub_1C359DE9C();
    v12 = v21;
    goto LABEL_6;
  }
  sub_1C359CD58(v17, isUniquelyReferenced_nonNull_native);
  v12 = v21;
  v18 = sub_1C35ABC5C(a3, a4);
  if ((v5 & 1) != (v19 & 1))
  {
    result = sub_1C35B6F6C();
    __break(1u);
    return result;
  }
  v14 = v18;
LABEL_6:
  *v6 = v12;
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
    sub_1C359DAC8(v14, a3, a4, MEMORY[0x1E0DEE9E8], (_QWORD *)*v6);
    swift_bridgeObjectRetain();
  }
  sub_1C359E3B4(&v21, a1, a2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C35757F0(uint64_t result)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;

  v1 = 0;
  v2 = result + 56;
  v3 = 1 << *(_BYTE *)(result + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(result + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  while (v5)
  {
    v7 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v8 = v7 | (v1 << 6);
LABEL_5:
    if (*(_QWORD *)(*(_QWORD *)(result + 48) + 16 * v8 + 8))
      return 1;
  }
  v9 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v9 >= v6)
    return 0;
  v10 = *(_QWORD *)(v2 + 8 * v9);
  ++v1;
  if (v10)
    goto LABEL_24;
  v1 = v9 + 1;
  if (v9 + 1 >= v6)
    return 0;
  v10 = *(_QWORD *)(v2 + 8 * v1);
  if (v10)
    goto LABEL_24;
  v1 = v9 + 2;
  if (v9 + 2 >= v6)
    return 0;
  v10 = *(_QWORD *)(v2 + 8 * v1);
  if (v10)
    goto LABEL_24;
  v1 = v9 + 3;
  if (v9 + 3 >= v6)
    return 0;
  v10 = *(_QWORD *)(v2 + 8 * v1);
  if (v10)
    goto LABEL_24;
  v1 = v9 + 4;
  if (v9 + 4 >= v6)
    return 0;
  v10 = *(_QWORD *)(v2 + 8 * v1);
  if (v10)
  {
LABEL_24:
    v5 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v1 << 6);
    goto LABEL_5;
  }
  v11 = v9 + 5;
  if (v11 >= v6)
    return 0;
  v10 = *(_QWORD *)(v2 + 8 * v11);
  if (v10)
  {
    v1 = v11;
    goto LABEL_24;
  }
  while (1)
  {
    v1 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v1 >= v6)
      return 0;
    v10 = *(_QWORD *)(v2 + 8 * v1);
    ++v11;
    if (v10)
      goto LABEL_24;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1C3575924()
{
  unint64_t result;

  result = qword_1EF8D95A0;
  if (!qword_1EF8D95A0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF8D95A0);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ExpressModeRejectedPass.Conflict(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ExpressModeRejectedPass.Conflict()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for ExpressModeRejectedPass.Conflict(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for ExpressModeRejectedPass.Conflict(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpressModeRejectedPass.Conflict(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ExpressModeRejectedPass.Conflict(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_1C3575AB4(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1C3575AD0(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ExpressModeRejectedPass.Conflict()
{
  return &type metadata for ExpressModeRejectedPass.Conflict;
}

uint64_t destroy for ExpressModeRejectedPass()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s24AppletTranslationLibrary23ExpressModeRejectedPassVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ExpressModeRejectedPass(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ExpressModeRejectedPass(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpressModeRejectedPass(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpressModeRejectedPass(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExpressModeRejectedPass()
{
  return &type metadata for ExpressModeRejectedPass;
}

unint64_t sub_1C3575CAC()
{
  unint64_t result;

  result = qword_1EF8D9A90;
  if (!qword_1EF8D9A90)
  {
    result = MEMORY[0x1C3BD3788](&unk_1C35BB4B8, &type metadata for ExpressModeRejectedPass.Conflict);
    atomic_store(result, (unint64_t *)&qword_1EF8D9A90);
  }
  return result;
}

uint64_t Data.popPrefix(_:)(uint64_t a1)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X10 }
  sub_1C3576D60();
  swift_allocError();
  return swift_willThrow();
}

void sub_1C3575E18(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9AD8);
  MEMORY[0x1E0C80A78]();
  __asm { BR              X9 }
}

uint64_t sub_1C3575EAC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1C3573E48(v2, v3);
  sub_1C3573E48(v2, v3);
  sub_1C3573E48(v0, v1);
  sub_1C35B6AB0();
  v4 = sub_1C3573D7C(v2, v3);
  return ((uint64_t (*)(uint64_t))((char *)&loc_1C3575F0C + *((int *)qword_1C35760E8 + (v1 >> 62))))(v4);
}

BOOL sub_1C3575F1C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;

  sub_1C3573E48(v1, v2);
  *(_QWORD *)(v5 - 112) = v4;
  sub_1C35B6AB0();
  *(_QWORD *)(v5 - 104) = v2;
  *(_QWORD *)(v5 - 96) = v1;
  sub_1C3573D7C(v1, v2);
  v6 = *(int *)(v0 + 56);
  *(_BYTE *)(v3 + v6) = 0;
  sub_1C35B6AA4();
  sub_1C3577120();
  do
  {
    sub_1C35B6D8C();
    if ((*(_BYTE *)(v5 - 65) & 1) != 0 || (v7 = *(char *)(v5 - 66), sub_1C35B6D8C(), *(_BYTE *)(v5 - 67) == 1))
    {
      *(_BYTE *)(v3 + v6) = 1;
      sub_1C3577180(v3, &qword_1EF8D9AD8);
      __asm { BR              X11 }
    }
    v8 = *(unsigned __int8 *)(v5 - 68);
  }
  while (v8 == v7);
  v9 = (char)v8;
  sub_1C3577180(v3, &qword_1EF8D9AD8);
  return v7 < v9;
}

void sub_1C3576118(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v3[3] = MEMORY[0x1E0CB0338];
  v3[4] = MEMORY[0x1E0CB0318];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1C357617C
     + *((int *)qword_1C35763B0 + (__swift_project_boxed_opaque_existential_1Tm(v3, MEMORY[0x1E0CB0338])[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_1C357618C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_1C3573E48(v1, v0);
  sub_1C35ABBE8(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_1C3573D7C(v1, v0);
  v4 = v12;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v13);
  return v4;
}

uint64_t sub_1C35763C0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = MEMORY[0x1E0DEAC20];
  v8[4] = MEMORY[0x1E0CB1AA8];
  v8[0] = a1;
  v8[1] = a2;
  v2 = __swift_project_boxed_opaque_existential_1Tm(v8, MEMORY[0x1E0DEAC20]);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = sub_1C35AC960(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = sub_1C35ACA20((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = sub_1C35ACA98((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v8);
  return v6;
}

uint64_t sub_1C3576478(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  __int128 v20;
  __int128 v21[2];
  uint64_t v22;
  _QWORD v23[7];

  v23[5] = *MEMORY[0x1E0C80C00];
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9AA0);
  v3 = MEMORY[0x1E0C80A78](v2);
  MEMORY[0x1E0C80A78](v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9AA8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9AB0);
  v7 = MEMORY[0x1E0C80A78](v18);
  v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v15 - v10;
  *(_QWORD *)&v20 = a1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9AB8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9AC0);
  if (!swift_dynamicCast())
  {
    v15 = 0;
    v22 = 0;
    memset(v21, 0, sizeof(v21));
    sub_1C3577180((uint64_t)v21, &qword_1EF8D9AC8);
    v17 = &v15;
    v21[0] = xmmword_1C35BB2D0;
    v16 = *(int *)(v4 + 48);
    *v9 = a1;
    v9[1] = 0;
    v12 = (char *)v9 + *(int *)(v18 + 44);
    v13 = sub_1C35B6AA4();
    v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
    v19(v12, 1, 1, v13);
    sub_1C3577048((uint64_t)v9, (uint64_t)v6);
    *(_QWORD *)&v6[v16] = 0;
    v16 = a1;
    swift_bridgeObjectRetain();
    sub_1C3577048((uint64_t)v6, (uint64_t)v11);
    __asm { BR              X12 }
  }
  sub_1C3577168(v21, (uint64_t)v23);
  __swift_project_boxed_opaque_existential_1Tm(v23, v23[3]);
  sub_1C35B6978();
  swift_bridgeObjectRelease();
  v21[0] = v20;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v23);
  return *(_QWORD *)&v21[0];
}

void sub_1C3576A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x1C3576B9CLL);
}

void sub_1C3576BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x1C3576D2CLL);
}

unint64_t sub_1C3576D60()
{
  unint64_t result;

  result = qword_1EF8D9A98;
  if (!qword_1EF8D9A98)
  {
    result = MEMORY[0x1C3BD3788](&protocol conformance descriptor for DataAccessError, &type metadata for DataAccessError);
    atomic_store(result, (unint64_t *)&qword_1EF8D9A98);
  }
  return result;
}

Swift::UInt8 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Data.safePopFirst()()
{
  Swift::UInt8 result;

  __asm { BR              X12 }
  return result;
}

void sub_1C3576DD4()
{
  uint64_t v0;

  if (BYTE6(v0))
  {
    sub_1C3576E5C();
  }
  else
  {
    sub_1C3576D60();
    swift_allocError();
    swift_willThrow();
  }
}

void sub_1C3576E5C()
{
  __asm { BR              X9 }
}

uint64_t sub_1C3576E90()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!BYTE6(v2))
    goto LABEL_13;
  sub_1C35ADD20(v0, v2);
  if ((v4 & 0x100) != 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = v4;
  if (!v3)
  {
    v7 = BYTE6(v2);
    v6 = 1;
    goto LABEL_9;
  }
  if (v3 == 1)
  {
    v6 = (int)v0 + 1;
    v7 = v0 >> 32;
    goto LABEL_9;
  }
  v8 = *(_QWORD *)(v0 + 16);
  v6 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(v0 + 24);
LABEL_9:
  if (v7 < v6)
  {
LABEL_14:
    __break(1u);
    JUMPOUT(0x1C3576F54);
  }
  v9 = sub_1C35B6A2C();
  v11 = v10;
  sub_1C3573D7C(v0, v2);
  *v1 = v9;
  v1[1] = v11;
  return v5;
}

uint64_t sub_1C3576F64(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  unint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1288);
  v10 = sub_1C3576FFC();
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1Tm(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_1C35ABBE8(v3, v4, &v7);
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v8);
  return v5;
}

unint64_t sub_1C3576FFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED7E1290;
  if (!qword_1ED7E1290)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED7E1288);
    result = MEMORY[0x1C3BD3788](MEMORY[0x1E0CB1B08], v1);
    atomic_store(result, (unint64_t *)&qword_1ED7E1290);
  }
  return result;
}

uint64_t sub_1C3577048(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9AB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3577090(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9AA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C35770D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9AA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1C3577120()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF8D9AD0;
  if (!qword_1EF8D9AD0)
  {
    v1 = sub_1C35B6AA4();
    result = MEMORY[0x1C3BD3788](MEMORY[0x1E0CB02D0], v1);
    atomic_store(result, (unint64_t *)&qword_1EF8D9AD0);
  }
  return result;
}

uint64_t sub_1C3577168(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1C3577180(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id sub_1C35771BC()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MetroStateMonitor()), sel_init);
  qword_1EF8DB8B8 = (uint64_t)result;
  return result;
}

_BYTE *sub_1C35772B4@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1C35772C0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = a3 & 1;
  v8 = *(_QWORD *)(v3 + OBJC_IVAR____TtC24AppletTranslationLibrary17MetroStateMonitor_state);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 20));
  v9 = *(unsigned __int8 *)(v8 + 16);
  *(_BYTE *)(v8 + 16) = a3;
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 20));
  result = swift_release();
  if (v9 != v7)
  {
    if (qword_1EF8D99B8 != -1)
      swift_once();
    v11 = sub_1C35B6AE0();
    __swift_project_value_buffer(v11, (uint64_t)qword_1EF8D9AE0);
    v12 = swift_bridgeObjectRetain_n();
    v13 = sub_1C35B6AC8(v12);
    v14 = sub_1C35B6D68();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc();
      v16 = swift_slowAlloc();
      v17 = v16;
      *(_DWORD *)v15 = 67109378;
      sub_1C35B6D98();
      *(_WORD *)(v15 + 8) = 2080;
      swift_bridgeObjectRetain();
      sub_1C3598590(a1, a2, &v17);
      sub_1C35B6D98();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C3511000, v13, v14, "Metro state changed -> %{BOOL}d : %s", (uint8_t *)v15, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x1C3BD380C](v16, -1, -1);
      MEMORY[0x1C3BD380C](v15, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return notify_post("com.apple.private.atl.metro.state.changed");
  }
  return result;
}

id sub_1C357758C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MetroStateMonitor();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for MetroStateMonitor()
{
  return objc_opt_self();
}

uint64_t sub_1C35775EC()
{
  uint64_t v0;

  v0 = sub_1C35B6AE0();
  __swift_allocate_value_buffer(v0, qword_1EF8D9AE0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF8D9AE0);
  return sub_1C35B6AD4();
}

void sub_1C357766C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t);

  sub_1C35B6BE8();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940];
  MEMORY[0x1E0C80A78]();
  sub_1C35B6B1C();
  MEMORY[0x1E0C80A78]();
  sub_1C3574134(&qword_1EF8D9B30, v3, MEMORY[0x1E0CA9930]);
  sub_1C35B6B04();
  __asm { BR              X10 }
}

uint64_t sub_1C3577770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;

  *(_QWORD *)(v7 - 128) = v5;
  *(_WORD *)(v7 - 120) = v4;
  *(_BYTE *)(v7 - 118) = BYTE2(v4);
  *(_BYTE *)(v7 - 117) = BYTE3(v4);
  *(_BYTE *)(v7 - 116) = BYTE4(v4);
  *(_BYTE *)(v7 - 115) = BYTE5(v4);
  sub_1C35B6AEC();
  sub_1C3573D7C(v5, v4);
  sub_1C35B6AF8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 160) + 8))(v3, v2);
  *(_QWORD *)(v7 - 104) = v0;
  *(_QWORD *)(v7 - 96) = sub_1C3574134(&qword_1EF8D9B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA92F8], MEMORY[0x1E0CA92D8]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 - 128));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16))(boxed_opaque_existential_1, v1, v0);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(v7 - 128), *(_QWORD *)(v7 - 104));
  sub_1C35B6978();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v0);
  v9 = *(_QWORD *)(v7 - 144);
  __swift_destroy_boxed_opaque_existential_0Tm(v7 - 128);
  return v9;
}

void sub_1C35779D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X11 }
}

uint64_t sub_1C3577AE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[3] = MEMORY[0x1E0DEAC20];
  v14[4] = MEMORY[0x1E0CB1AA8];
  v14[0] = a1;
  v14[1] = a2;
  v4 = __swift_project_boxed_opaque_existential_1Tm(v14, MEMORY[0x1E0DEAC20]);
  v5 = (_BYTE *)*v4;
  if (*v4 && (v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      v8 = sub_1C35AC960(v5, v6);
      v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      v8 = sub_1C35ACA20((uint64_t)v5, (uint64_t)v6);
      v9 = v13 | 0x8000000000000000;
    }
    else
    {
      v8 = sub_1C35ACA98((uint64_t)v5, (uint64_t)v6);
      v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0xC000000000000000;
  }
  result = __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

unint64_t sub_1C3577BAC()
{
  unint64_t result;

  result = qword_1EF8D9B48;
  if (!qword_1EF8D9B48)
  {
    result = MEMORY[0x1C3BD3788](MEMORY[0x1E0CB0310], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EF8D9B48);
  }
  return result;
}

unint64_t sub_1C3577BF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF8D9B50;
  if (!qword_1EF8D9B50)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF8D9B40);
    result = MEMORY[0x1C3BD3788](MEMORY[0x1E0DEB8A8], v1);
    atomic_store(result, (unint64_t *)&qword_1EF8D9B50);
  }
  return result;
}

id sub_1C3577C3C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  char v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  _OWORD v23[2];
  __int128 v24;
  unint64_t v25;

  sub_1C35AAF90(MEMORY[0x1E0DEE9D8]);
  if (a2)
  {
    v8 = sub_1C35B6C60();
    v10 = v9;
    v25 = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v24 = a1;
    *((_QWORD *)&v24 + 1) = a2;
    sub_1C3573DC0(&v24, v23);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1C359D67C(v23, v8, v10, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a4)
  {
    v12 = sub_1C35B6C60();
    v14 = v13;
    v15 = a4;
    v16 = sub_1C35B69B4();
    v25 = sub_1C35782A0();
    *(_QWORD *)&v24 = v16;
    sub_1C3573DC0(&v24, v23);
    v17 = swift_isUniquelyReferenced_nonNull_native();
    sub_1C359D67C(v23, v12, v14, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  v18 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v19 = (void *)sub_1C35B6C54();
  v20 = (void *)sub_1C35B6C0C();
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, a3, v20);

  return v21;
}

uint64_t static DataAccessError.__derived_enum_equals(_:_:)()
{
  return 1;
}

uint64_t DataAccessError.hash(into:)()
{
  return sub_1C35B6FC0();
}

uint64_t DataAccessError.hashValue.getter()
{
  sub_1C35B6FB4();
  sub_1C35B6FC0();
  return sub_1C35B6FD8();
}

uint64_t sub_1C3577E88()
{
  return 1;
}

uint64_t sub_1C3577E90()
{
  sub_1C35B6FB4();
  sub_1C35B6FC0();
  return sub_1C35B6FD8();
}

uint64_t sub_1C3577ED0()
{
  return sub_1C35B6FC0();
}

uint64_t sub_1C3577EF4()
{
  sub_1C35B6FB4();
  sub_1C35B6FC0();
  return sub_1C35B6FD8();
}

uint64_t static ATLError._nsErrorDomain.getter()
{
  return 0x412E436A624F5F5FLL;
}

unint64_t sub_1C3577F68()
{
  unint64_t result;

  result = qword_1EF8D9B58;
  if (!qword_1EF8D9B58)
  {
    result = MEMORY[0x1C3BD3788]("m\b}$", &type metadata for DataAccessError);
    atomic_store(result, (unint64_t *)&qword_1EF8D9B58);
  }
  return result;
}

uint64_t sub_1C3577FAC()
{
  sub_1C3578260(&qword_1EF8D9A28, (uint64_t)&protocol conformance descriptor for ATLError);
  return sub_1C35B69A8();
}

uint64_t sub_1C3577FE4()
{
  sub_1C3578260(&qword_1EF8D9A28, (uint64_t)&protocol conformance descriptor for ATLError);
  return sub_1C35B699C();
}

uint64_t sub_1C357801C()
{
  return sub_1C3578260(&qword_1EF8D9B60, (uint64_t)&protocol conformance descriptor for ATLError);
}

uint64_t sub_1C3578040()
{
  return sub_1C3578260(&qword_1EF8D9B68, (uint64_t)&unk_1C35BB420);
}

uint64_t sub_1C3578064()
{
  return sub_1C3578260(&qword_1EF8D9B70, (uint64_t)&unk_1C35BB3E8);
}

unint64_t sub_1C357808C()
{
  unint64_t result;

  result = qword_1EF8D9B78;
  if (!qword_1EF8D9B78)
  {
    result = MEMORY[0x1C3BD3788](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EF8D9B78);
  }
  return result;
}

uint64_t sub_1C35780D0()
{
  return 0x412E436A624F5F5FLL;
}

uint64_t sub_1C35780F4()
{
  return sub_1C3578260((unint64_t *)&qword_1EF8D9A50, (uint64_t)&protocol conformance descriptor for ATLError);
}

uint64_t sub_1C3578118()
{
  sub_1C3578260(&qword_1EF8D9A28, (uint64_t)&protocol conformance descriptor for ATLError);
  return sub_1C35B6984();
}

uint64_t getEnumTagSinglePayload for DataAccessError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for DataAccessError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C35781FC + 4 * asc_1C35BB550[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C357821C + 4 * byte_1C35BB555[v4]))();
}

_BYTE *sub_1C35781FC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C357821C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C3578224(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C357822C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C3578234(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C357823C(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1C3578248()
{
  return 0;
}

ValueMetadata *type metadata accessor for DataAccessError()
{
  return &type metadata for DataAccessError;
}

uint64_t sub_1C3578260(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for ATLError(255);
    result = MEMORY[0x1C3BD3788](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1C35782A0()
{
  unint64_t result;

  result = qword_1EF8D9A08;
  if (!qword_1EF8D9A08)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF8D9A08);
  }
  return result;
}

void sub_1C35782DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x1C3578428);
}

BOOL sub_1C357845C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1C357D058(*a1, *a2);
}

BOOL sub_1C3578468(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1C3578480()
{
  sub_1C35B6FB4();
  sub_1C35B6FCC();
  return sub_1C35B6FD8();
}

uint64_t sub_1C35784CC()
{
  return sub_1C35B6FCC();
}

uint64_t sub_1C3578500()
{
  sub_1C35B6FB4();
  sub_1C35B6FCC();
  return sub_1C35B6FD8();
}

unsigned __int8 *sub_1C3578548@<X0>(unsigned __int8 *result@<X0>, char *a2@<X8>)
{
  int v2;
  char v3;
  char v4;

  v2 = *result;
  if (v2 == 2)
    v3 = 1;
  else
    v3 = 2;
  if (v2 == 1)
    v4 = 0;
  else
    v4 = v3;
  *a2 = v4;
  return result;
}

void sub_1C3578568(char *a1@<X8>)
{
  _BYTE *v1;
  char v2;

  if (*v1)
    v2 = 2;
  else
    v2 = 1;
  *a1 = v2;
}

uint64_t sub_1C3578580()
{
  sub_1C35B6FB4();
  sub_1C35B6FCC();
  return sub_1C35B6FD8();
}

uint64_t sub_1C35785C4()
{
  return sub_1C35B6FCC();
}

uint64_t sub_1C35785F0()
{
  sub_1C35B6FB4();
  sub_1C35B6FCC();
  return sub_1C35B6FD8();
}

uint64_t sub_1C3578630@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1C357D1A8(*a1);
  *a2 = result;
  return result;
}

void sub_1C3578658(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1 + 1;
}

BOOL sub_1C3578668(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1C357867C()
{
  sub_1C35B6FB4();
  sub_1C35B6FCC();
  return sub_1C35B6FD8();
}

uint64_t sub_1C35786C0()
{
  return sub_1C35B6FCC();
}

uint64_t sub_1C35786E8()
{
  sub_1C35B6FB4();
  sub_1C35B6FCC();
  return sub_1C35B6FD8();
}

uint64_t sub_1C3578728@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1C357D1D4(*a1);
  *a2 = result;
  return result;
}

void sub_1C3578750(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

BOOL sub_1C357875C(char *a1, char *a2)
{
  return asc_1C35C539B[*a1] == asc_1C35C539B[*a2];
}

uint64_t sub_1C3578780()
{
  sub_1C35B6FB4();
  sub_1C35B6FCC();
  return sub_1C35B6FD8();
}

uint64_t sub_1C35787CC()
{
  return sub_1C35B6FCC();
}

uint64_t sub_1C3578800()
{
  sub_1C35B6FB4();
  sub_1C35B6FCC();
  return sub_1C35B6FD8();
}

uint64_t sub_1C3578848@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1C357D5BC(*a1);
  *a2 = result;
  return result;
}

void sub_1C3578870(_BYTE *a1@<X8>)
{
  char *v1;

  *a1 = asc_1C35C539B[*v1];
}

void sub_1C3578888()
{
  __int128 *v0;
  __int128 v1;

  sub_1C357D1E8(v0, &v1);
  __asm { BR              X12 }
}

uint64_t sub_1C35788D0@<X0>(char a1@<W8>)
{
  if ((a1 & 1) != 0)
    return 1;
  else
    return 2;
}

uint64_t sub_1C35789D4(__int128 *a1, __int128 *a2)
{
  char v3;
  __int128 v5[3];
  _OWORD v6[3];

  sub_1C357D1E8(a1, v5);
  sub_1C357D1E8(a2, v6);
  sub_1C357C508(v5);
  return v3 & 1;
}

id sub_1C3578A5C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LyonSwiftDecoder()), sel_init);
  qword_1EF8D9B80 = (uint64_t)result;
  return result;
}

id sub_1C3578AC4()
{
  _BYTE *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  objc_super v6;

  v1 = &v0[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointIdentifier];
  *v1 = 0;
  v1[1] = 0;
  v2 = &v0[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_readerIdentifier];
  *v2 = 0;
  v2[1] = 0;
  v3 = OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointNotFoundReason;
  v0[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointNotFoundReason] = 4;
  v0[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_state] = 0x80;
  *v1 = 0;
  v1[1] = 0;
  v4 = v0;
  swift_bridgeObjectRelease();
  *(_WORD *)&v4[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_sw] = -28672;
  v0[v3] = 4;
  v4[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_antiRelayResult] = 0;
  v4[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_requestAuth] = 0;

  v6.receiver = v4;
  v6.super_class = (Class)type metadata accessor for LyonSwiftDecoder();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t sub_1C3578BB4(__int128 *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int8x16_t v7;
  int8x16_t v9[2];
  unint64_t v10;
  __int16 v11;
  char v12;

  sub_1C357D1E8(a1, v9);
  v6 = (v10 >> 60) & 3 | (4 * v12);
  if (v6 == 4)
  {
    v10 &= 0xCFFFFFFFFFFFFFFFLL;
    return sub_1C357B764((uint64_t)a1, a2, a3);
  }
  if (v6 != 11)
  {
    if (v6 != 12)
      return sub_1C35AB35C(MEMORY[0x1E0DEE9D8]);
    if (v11)
      return sub_1C35AB35C(MEMORY[0x1E0DEE9D8]);
    v7 = vorrq_s8(v9[0], v9[1]);
    if (*(_QWORD *)&vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)) | v10)
      return sub_1C35AB35C(MEMORY[0x1E0DEE9D8]);
    return sub_1C357B764((uint64_t)a1, a2, a3);
  }
  v10 &= 0xCFFFFFFFFFFFFFFFLL;
  sub_1C3579DB4(v9[0].i16[0]);
  return sub_1C35AB35C(MEMORY[0x1E0DEE9D8]);
}

unint64_t sub_1C3578C9C(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  __int16 v106;
  __int16 v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116[2];
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unsigned __int8 v123;
  char v124;

  v4 = v3;
  sub_1C357D1E8(a1, &v118);
  v8 = v118;
  sub_1C357D1E8(a1, &v119);
  v9 = v122;
  switch((v122 >> 60) & 3 | (4 * v124))
  {
    case 1uLL:
      v122 &= 0xCFFFFFFFFFFFFFFFLL;
      v10 = v122;
      v101 = v119;
      v11 = v120;
      v12 = v121;
      v13 = v123;
      v113 = *((_QWORD *)&v119 + 1);
      sub_1C3573E48(*((uint64_t *)&v119 + 1), v120);
      sub_1C3573E48(v12, v10);
      if (qword_1EF8D99C8 != -1)
        swift_once();
      v14 = sub_1C35B6AE0();
      v15 = __swift_project_value_buffer(v14, (uint64_t)qword_1EF8D9B88);
      v16 = sub_1C35B6AC8(v15);
      v17 = sub_1C35B6D50();
      v111 = v13;
      v105 = v10;
      v108 = v11;
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc();
        v19 = swift_slowAlloc();
        v116[0] = v19;
        *(_DWORD *)v18 = 136315138;
        if (v13 == 4)
          v20 = 0;
        else
          v20 = v13 + 1;
        LOBYTE(v117) = v20;
        BYTE1(v117) = v13 == 4;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9C30);
        v21 = sub_1C35B6C78();
        v117 = sub_1C3598590(v21, v22, v116);
        sub_1C35B6D98();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C3511000, v16, v17, "Endpoint not found: %s", v18, 0xCu);
        swift_arrayDestroy();
        v23 = v19;
        v11 = v108;
        MEMORY[0x1C3BD380C](v23, -1, -1);
        MEMORY[0x1C3BD380C](v18, -1, -1);
      }

      if ((v13 - 3) >= 2u)
      {
        sub_1C357F9BC(v113, v11);
        v116[0] = v80;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
        sub_1C357D374();
        v81 = sub_1C35B6C48();
        v83 = v82;
        swift_bridgeObjectRelease();
        v84 = (uint64_t *)(v4 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointIdentifier);
        *v84 = v81;
        v84[1] = v83;
        swift_bridgeObjectRelease();
        v25 = v12;
        v24 = v105;
        sub_1C357F9BC(v12, v105);
        v116[0] = v85;
        v86 = sub_1C35B6C48();
        v88 = v87;
        v11 = v108;
        swift_bridgeObjectRelease();
        v89 = (uint64_t *)(v4 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_readerIdentifier);
        *v89 = v86;
        v89[1] = v88;
        swift_bridgeObjectRelease();
      }
      else
      {
        v25 = v12;
        v24 = v105;
      }
      *(_BYTE *)(v4 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_state) = v101 | 0x40;
      *(_BYTE *)(v4 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointNotFoundReason) = v111;
      v51 = sub_1C35AB35C(MEMORY[0x1E0DEE9D8]);
      sub_1C3573D7C(v25, v24);
      v52 = v113;
      v53 = v11;
      goto LABEL_20;
    case 2uLL:
      v122 &= 0xCFFFFFFFFFFFFFFFLL;
      v26 = v122;
      v27 = v119;
      v106 = v120;
      v28 = v121;
      *(_BYTE *)(v4 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_state) = BYTE2(v120);
      sub_1C3573E48(v27, *((unint64_t *)&v27 + 1));
      v102 = a2;
      v103 = v28;
      v29 = v26;
      v109 = v26;
      sub_1C3573E48(v28, v26);
      sub_1C357F9BC(v27, *((uint64_t *)&v27 + 1));
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
      sub_1C357D374();
      v30 = sub_1C35B6C48();
      v32 = v31;
      swift_bridgeObjectRelease();
      v33 = (uint64_t *)(v4 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointIdentifier);
      *v33 = v30;
      v33[1] = v32;
      swift_bridgeObjectRelease();
      sub_1C357F9BC(v28, v29);
      v34 = sub_1C35B6C48();
      v36 = v35;
      swift_bridgeObjectRelease();
      v37 = (uint64_t *)(v4 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_readerIdentifier);
      *v37 = v34;
      v37[1] = v36;
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9C18);
      v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = xmmword_1C35BBB60;
      sub_1C35B6C60();
      v39 = MEMORY[0x1E0DEA968];
      sub_1C35B6DEC();
      v40 = sub_1C35B6C60();
      *(_QWORD *)(v38 + 96) = v39;
      *(_QWORD *)(v38 + 72) = v40;
      *(_QWORD *)(v38 + 80) = v41;
      sub_1C35B6DEC();
      *(_QWORD *)(v38 + 168) = v39;
      *(_QWORD *)(v38 + 144) = v102;
      *(_QWORD *)(v38 + 152) = a3;
      strcpy((char *)v116, "selectStatus");
      swift_bridgeObjectRetain();
      sub_1C35B6DEC();
      *(_QWORD *)(v38 + 240) = MEMORY[0x1E0DEB418];
      *(_QWORD *)(v38 + 216) = 36864;
      strcpy((char *)v116, "command");
      sub_1C35B6DEC();
      *(_QWORD *)(v38 + 312) = MEMORY[0x1E0DEE068];
      *(_WORD *)(v38 + 288) = v106;
      sub_1C35B6DEC();
      sub_1C357F9BC(v27, *((uint64_t *)&v27 + 1));
      v42 = sub_1C35B6C48();
      v44 = v43;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v38 + 384) = v39;
      *(_QWORD *)(v38 + 360) = v42;
      *(_QWORD *)(v38 + 368) = v44;
      sub_1C35B6DEC();
      sub_1C357F9BC(v103, v109);
      v45 = sub_1C35B6C48();
      v47 = v46;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v38 + 456) = v39;
      *(_QWORD *)(v38 + 432) = v45;
      *(_QWORD *)(v38 + 440) = v47;
      strcpy((char *)v116, "informative");
      HIDWORD(v116[1]) = -352321536;
      sub_1C35B6DEC();
      v48 = *(_BYTE *)(v4 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_antiRelayResult);
      *(_QWORD *)(v38 + 528) = MEMORY[0x1E0DEDE70];
      *(_BYTE *)(v38 + 504) = v48;
      sub_1C35B6C60();
      sub_1C35B6DEC();
      v49 = MEMORY[0x1E0DEAFA0];
      *(_QWORD *)(v38 + 600) = MEMORY[0x1E0DEAFA0];
      *(_BYTE *)(v38 + 576) = 1;
      sub_1C35B6C60();
      sub_1C35B6DEC();
      *(_QWORD *)(v38 + 672) = v49;
      *(_BYTE *)(v38 + 648) = 1;
      sub_1C35B6C60();
      sub_1C35B6DEC();
      *(_QWORD *)(v38 + 744) = v49;
      *(_BYTE *)(v38 + 720) = 0;
      v116[0] = sub_1C35B6C60();
      v116[1] = v50;
      sub_1C35B6DEC();
      *(_QWORD *)(v38 + 816) = MEMORY[0x1E0DEB418];
      *(_QWORD *)(v38 + 792) = 1000;
      v51 = sub_1C35AB35C(v38);
      sub_1C3573D7C(v103, v109);
      v53 = *((_QWORD *)&v27 + 1);
      v52 = v27;
      goto LABEL_20;
    case 6uLL:
      v122 &= 0xCFFFFFFFFFFFFFFFLL;
      v54 = v119;
      *(_BYTE *)(v3 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_state) = v120 | 0x40;
      sub_1C3573E48(v8, *((unint64_t *)&v8 + 1));
      sub_1C357F9BC(v54, *((uint64_t *)&v54 + 1));
      v116[0] = v55;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
      sub_1C357D374();
      v56 = sub_1C35B6C48();
      v58 = v57;
      swift_bridgeObjectRelease();
      v59 = (uint64_t *)(v4 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointIdentifier);
      *v59 = v56;
      v59[1] = v58;
      swift_bridgeObjectRelease();
      sub_1C357D248((uint64_t)a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3574174, (uint64_t (*)(void))sub_1C3573D7C);
      *(_BYTE *)(v4 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_requestAuth) = 1;
      return sub_1C35AB35C(MEMORY[0x1E0DEE9D8]);
    case 8uLL:
      v122 &= 0xCFFFFFFFFFFFFFFFLL;
      v60 = v119;
      if (sub_1C3587684(v119, (uint64_t)&unk_1E7D8B0B8))
      {
        *(_BYTE *)(v3 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_antiRelayResult) = v60;
        return sub_1C35AB35C(MEMORY[0x1E0DEE9D8]);
      }
      else
      {
        *(_BYTE *)(v3 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_state) = -127;
        if (qword_1EF8D99C8 != -1)
          swift_once();
        v91 = sub_1C35B6AE0();
        v92 = __swift_project_value_buffer(v91, (uint64_t)qword_1EF8D9B88);
        v93 = sub_1C35B6AC8(v92);
        v94 = sub_1C35B6D50();
        if (os_log_type_enabled(v93, v94))
        {
          v95 = (uint8_t *)swift_slowAlloc();
          v96 = swift_slowAlloc();
          v116[0] = v96;
          *(_DWORD *)v95 = 136315138;
          LOBYTE(v117) = v60;
          v97 = sub_1C35B6C78();
          v117 = sub_1C3598590(v97, v98, v116);
          sub_1C35B6D98();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C3511000, v93, v94, "Applet detected an attack: %s", v95, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BD380C](v96, -1, -1);
          MEMORY[0x1C3BD380C](v95, -1, -1);
        }

        type metadata accessor for ATLError(0);
        v51 = v99;
        sub_1C357D200();
        swift_allocError();
        *v100 = 5;
        swift_willThrow();
      }
      return v51;
    case 10uLL:
      v122 &= 0xCFFFFFFFFFFFFFFFLL;
      v115 = v3;
      v61 = v9 & 0xCFFFFFFFFFFFFFFFLL;
      v110 = v9 & 0xCFFFFFFFFFFFFFFFLL;
      v107 = v119;
      v62 = *((_QWORD *)&v119 + 1);
      v63 = v120;
      v64 = v121;
      v112 = v121;
      v114 = *((_QWORD *)&v119 + 1);
      *(_BYTE *)(v3 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_state) = -127;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9C18);
      v65 = swift_allocObject();
      *(_OWORD *)(v65 + 16) = xmmword_1C35BBB50;
      sub_1C35B6C60();
      v104 = v63;
      sub_1C3573E48(v62, v63);
      sub_1C3573E48(v64, v61);
      v66 = MEMORY[0x1E0DEA968];
      sub_1C35B6DEC();
      v67 = sub_1C35B6C60();
      *(_QWORD *)(v65 + 96) = v66;
      *(_QWORD *)(v65 + 72) = v67;
      *(_QWORD *)(v65 + 80) = v68;
      sub_1C35B6DEC();
      *(_QWORD *)(v65 + 168) = v66;
      *(_QWORD *)(v65 + 144) = a2;
      *(_QWORD *)(v65 + 152) = a3;
      strcpy((char *)v116, "didError");
      swift_bridgeObjectRetain();
      sub_1C35B6DEC();
      *(_QWORD *)(v65 + 240) = MEMORY[0x1E0DEAFA0];
      *(_BYTE *)(v65 + 216) = 1;
      strcpy((char *)v116, "command");
      v116[1] = 0xE700000000000000;
      sub_1C35B6DEC();
      sub_1C3578888();
      v70 = asc_1C35C539B[v69];
      *(_QWORD *)(v65 + 312) = MEMORY[0x1E0DEDE70];
      *(_BYTE *)(v65 + 288) = v70;
      sub_1C35B6DEC();
      sub_1C357F9BC(v114, v63);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
      sub_1C357D374();
      v71 = sub_1C35B6C48();
      v73 = v72;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v65 + 384) = v66;
      *(_QWORD *)(v65 + 360) = v71;
      *(_QWORD *)(v65 + 368) = v73;
      sub_1C35B6DEC();
      sub_1C357F9BC(v112, v110);
      v74 = sub_1C35B6C48();
      v76 = v75;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v65 + 456) = v66;
      *(_QWORD *)(v65 + 432) = v74;
      *(_QWORD *)(v65 + 440) = v76;
      v116[0] = 0x737574617473;
      v116[1] = 0xE600000000000000;
      sub_1C35B6DEC();
      v77 = *(_WORD *)(v115 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_sw);
      v78 = MEMORY[0x1E0DEE068];
      *(_QWORD *)(v65 + 528) = MEMORY[0x1E0DEE068];
      *(_WORD *)(v65 + 504) = v77;
      strcpy((char *)v116, "informative");
      sub_1C35B6DEC();
      *(_QWORD *)(v65 + 600) = v78;
      *(_WORD *)(v65 + 576) = v107;
      sub_1C35B6DEC();
      *(_QWORD *)(v65 + 672) = v78;
      *(_WORD *)(v65 + 648) = 0;
      v116[0] = sub_1C35B6C60();
      v116[1] = v79;
      sub_1C35B6DEC();
      *(_QWORD *)(v65 + 744) = MEMORY[0x1E0DEAFA0];
      *(_BYTE *)(v65 + 720) = 1;
      v51 = sub_1C35AB35C(v65);
      sub_1C3573D7C(v112, v110);
      v52 = v114;
      v53 = v104;
LABEL_20:
      sub_1C3573D7C(v52, v53);
      return v51;
    case 11uLL:
      v122 &= 0xCFFFFFFFFFFFFFFFLL;
      sub_1C3579DB4(v119);
      return sub_1C35AB35C(MEMORY[0x1E0DEE9D8]);
    default:
      return sub_1C35AB35C(MEMORY[0x1E0DEE9D8]);
  }
}

unint64_t sub_1C3579B78(__int128 *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int16 v20;
  char v21;

  sub_1C357D1E8(a1, &v15);
  v8 = v15;
  sub_1C357D1E8(a1, &v16);
  v9 = v16;
  switch((v19 >> 60) & 3 | (4 * v21))
  {
    case 0uLL:
      v19 &= 0xCFFFFFFFFFFFFFFFLL;
      v10 = sub_1C357A778(a1, a2, a3);
      if (!v4)
        return v10;
      return v3;
    case 4uLL:
      v19 &= 0xCFFFFFFFFFFFFFFFLL;
      v10 = sub_1C357B1B8((uint64_t)a1, a2, a3);
      if (!v4)
        return v10;
      return v3;
    case 5uLL:
      v19 &= 0xCFFFFFFFFFFFFFFFLL;
      if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_state) & 0x81) == 0)
        return sub_1C35AB35C(MEMORY[0x1E0DEE9D8]);
      v11 = *((_QWORD *)&v16 + 1);
      sub_1C357D248((uint64_t)a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3575268, (uint64_t (*)(void))sub_1C3573E48);
      v12 = sub_1C357E6E4(v9, v11, a2, a3);
      goto LABEL_9;
    case 9uLL:
      v19 &= 0xCFFFFFFFFFFFFFFFLL;
      v13 = *((_QWORD *)&v16 + 1);
      sub_1C3573E48(v8, *((unint64_t *)&v8 + 1));
      v12 = (unint64_t)sub_1C3579F90(v9, v13);
LABEL_9:
      v3 = v12;
      sub_1C357D248((uint64_t)a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3574174, (uint64_t (*)(void))sub_1C3573D7C);
      return v3;
    case 11uLL:
      v19 &= 0xCFFFFFFFFFFFFFFFLL;
      sub_1C3579DB4(v16);
      return sub_1C35AB35C(MEMORY[0x1E0DEE9D8]);
    case 12uLL:
      if (v20 || v19 | (unint64_t)v16 | v18 | v17 | *((_QWORD *)&v16 + 1))
      {
        if (!v20 && (_QWORD)v16 == 3 && !(v18 | v19 | v17 | *((_QWORD *)&v16 + 1)))
          *(_BYTE *)(v3 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_state) = -127;
        return sub_1C35AB35C(MEMORY[0x1E0DEE9D8]);
      }
      else
      {
        v10 = sub_1C357B764((uint64_t)a1, a2, a3);
        if (v4)
          return v3;
      }
      return v10;
    default:
      return sub_1C35AB35C(MEMORY[0x1E0DEE9D8]);
  }
}

void sub_1C3579DB4(__int16 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v2 = v1;
  if (qword_1EF8D99C8 != -1)
    swift_once();
  v4 = sub_1C35B6AE0();
  v5 = __swift_project_value_buffer(v4, (uint64_t)qword_1EF8D9B88);
  v6 = sub_1C35B6AC8(v5);
  v7 = sub_1C35B6D50();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v15 = v9;
    *(_DWORD *)v8 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9A58);
    v10 = swift_allocObject();
    v11 = MEMORY[0x1E0DEE068];
    *(_OWORD *)(v10 + 16) = xmmword_1C35BB2C0;
    v12 = MEMORY[0x1E0DEE0D0];
    *(_QWORD *)(v10 + 56) = v11;
    *(_QWORD *)(v10 + 64) = v12;
    *(_WORD *)(v10 + 32) = a1;
    v13 = sub_1C35B6C6C();
    sub_1C3598590(v13, v14, &v15);
    sub_1C35B6D98();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C3511000, v6, v7, "Fatal Lyon Error: SW=0x%s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BD380C](v9, -1, -1);
    MEMORY[0x1C3BD380C](v8, -1, -1);
  }

  if (*(__int16 *)(v2 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_sw) == -28672)
    *(_WORD *)(v2 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_sw) = a1;
}

uint8_t *sub_1C3579F90(uint64_t a1, unint64_t a2)
{
  char *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint8_t *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17[3];

  v3 = (uint64_t *)&v2[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointIdentifier];
  if (*(_QWORD *)&v2[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointIdentifier + 8])
  {
    v17[0] = a1;
    v17[1] = a2;
    swift_bridgeObjectRetain();
    sub_1C3573E48(a1, a2);
    __asm { BR              X9 }
  }
  if (qword_1EF8D99C8 != -1)
    swift_once();
  v6 = sub_1C35B6AE0();
  v7 = __swift_project_value_buffer(v6, (uint64_t)qword_1EF8D9B88);
  v8 = v2;
  v9 = (uint8_t *)v7;
  v10 = sub_1C35B6AC8(v8);
  v11 = sub_1C35B6D50();
  if (os_log_type_enabled(v10, v11))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v17[0] = v12;
    *(_DWORD *)v9 = 136315138;
    if (v3[1])
    {
      v13 = *v3;
      v14 = v3[1];
    }
    else
    {
      v14 = 0xE300000000000000;
      v13 = 7104878;
    }
    swift_bridgeObjectRetain();
    sub_1C3598590(v13, v14, v17);
    sub_1C35B6D98();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C3511000, v10, v11, "Missing mandatory information in Share Session: ep:%s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BD380C](v12, -1, -1);
    MEMORY[0x1C3BD380C](v9, -1, -1);

  }
  else
  {

  }
  type metadata accessor for ATLError(0);
  sub_1C357D200();
  swift_allocError();
  *v15 = 3;
  swift_willThrow();
  return v9;
}

unint64_t sub_1C357A778(__int128 *a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  _BYTE *v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  unint64_t v14;
  uint8_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int16 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char type;
  __int16 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  __int128 v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;

  v4 = v3;
  sub_1C357D1E8(a1, &v52);
  v9 = *((_QWORD *)&v52 + 1);
  v8 = v53;
  sub_1C357D1E8(a1, &v54);
  if ((v56 >> 60) & 3 | (4 * v57))
  {
    if (qword_1EF8D99C8 != -1)
      swift_once();
    v10 = sub_1C35B6AE0();
    v11 = __swift_project_value_buffer(v10, (uint64_t)qword_1EF8D9B88);
    v12 = sub_1C35B6AC8(v11);
    v13 = sub_1C35B6D50();
    v14 = v13;
    if (os_log_type_enabled(v12, v13))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1C3511000, v12, (os_log_type_t)v14, "Wrong handler", v15, 2u);
      MEMORY[0x1C3BD380C](v15, -1, -1);
    }

    type metadata accessor for ATLError(0);
    sub_1C357D200();
    swift_allocError();
    *v16 = 3;
    swift_willThrow();
  }
  else
  {
    v56 &= 0xCFFFFFFFFFFFFFFFLL;
    v17 = (uint64_t *)&v4[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointIdentifier];
    if (*(_QWORD *)&v4[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointIdentifier + 8]
      && *(_QWORD *)&v4[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_readerIdentifier + 8])
    {
      v44 = v54;
      v47 = WORD1(v54);
      v48 = *(_QWORD *)&v4[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointIdentifier + 8];
      v49 = *(_QWORD *)&v4[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_readerIdentifier + 8];
      v45 = *v17;
      v46 = *(_QWORD *)&v4[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_readerIdentifier];
      if (v55 >> 60 != 15)
        __asm { BR              X10 }
      sub_1C357D248((uint64_t)a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3575268, (uint64_t (*)(void))sub_1C3573E48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v44)
        v26 = 64;
      else
        v26 = 0;
      if ((v4[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_state] & 0x81) != 0)
        v27 = 2;
      else
        v27 = 1;
      type = v27;
      v43 = v26;
      v4[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_state] = -127;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9C18);
      v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_1C35BBB50;
      sub_1C35B6C60();
      v29 = MEMORY[0x1E0DEA968];
      sub_1C35B6DEC();
      v30 = sub_1C35B6C60();
      *(_QWORD *)(v28 + 96) = v29;
      *(_QWORD *)(v28 + 72) = v30;
      *(_QWORD *)(v28 + 80) = v31;
      sub_1C35B6DEC();
      *(_QWORD *)(v28 + 168) = v29;
      *(_QWORD *)(v28 + 144) = a2;
      *(_QWORD *)(v28 + 152) = a3;
      swift_bridgeObjectRetain();
      sub_1C35B6DEC();
      *(_QWORD *)(v28 + 240) = MEMORY[0x1E0DEAFA0];
      *(_BYTE *)(v28 + 216) = v44 ^ 1;
      v50 = 0x646E616D6D6F63;
      v51 = 0xE700000000000000;
      sub_1C35B6DEC();
      sub_1C3578888();
      v33 = asc_1C35C539B[v32];
      v34 = MEMORY[0x1E0DEDE70];
      *(_QWORD *)(v28 + 312) = MEMORY[0x1E0DEDE70];
      *(_BYTE *)(v28 + 288) = v33;
      sub_1C35B6DEC();
      *(_QWORD *)(v28 + 384) = v34;
      *(_BYTE *)(v28 + 360) = type;
      sub_1C35B6DEC();
      *(_QWORD *)(v28 + 456) = v29;
      *(_QWORD *)(v28 + 432) = v45;
      *(_QWORD *)(v28 + 440) = v48;
      sub_1C35B6DEC();
      *(_QWORD *)(v28 + 528) = v29;
      *(_QWORD *)(v28 + 504) = v46;
      *(_QWORD *)(v28 + 512) = v49;
      v50 = 0x737574617473;
      v51 = 0xE600000000000000;
      sub_1C35B6DEC();
      v35 = *(_WORD *)&v4[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_sw];
      v36 = MEMORY[0x1E0DEE068];
      *(_QWORD *)(v28 + 600) = MEMORY[0x1E0DEE068];
      *(_WORD *)(v28 + 576) = v35;
      sub_1C35B6DEC();
      *(_QWORD *)(v28 + 672) = v36;
      *(_WORD *)(v28 + 648) = v47;
      v50 = 0x746C75736572;
      v51 = 0xE600000000000000;
      sub_1C35B6DEC();
      *(_QWORD *)(v28 + 744) = v36;
      *(_WORD *)(v28 + 720) = v43;
      v14 = sub_1C35AB35C(v28);
      sub_1C357D248((uint64_t)a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3574174, (uint64_t (*)(void))sub_1C3573D7C);
    }
    else
    {
      sub_1C3575268(v9, v8);
      if (qword_1EF8D99C8 != -1)
        swift_once();
      v18 = sub_1C35B6AE0();
      __swift_project_value_buffer(v18, (uint64_t)qword_1EF8D9B88);
      v19 = v4;
      v20 = sub_1C35B6AC8(v19);
      v21 = sub_1C35B6D50();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = swift_slowAlloc();
        v23 = swift_slowAlloc();
        v50 = v23;
        *(_DWORD *)v22 = 136315394;
        if (v17[1])
        {
          v24 = *v17;
          v25 = v17[1];
        }
        else
        {
          v24 = 7104878;
          v25 = 0xE300000000000000;
        }
        swift_bridgeObjectRetain();
        v58 = sub_1C3598590(v24, v25, &v50);
        sub_1C35B6D98();

        swift_bridgeObjectRelease();
        *(_WORD *)(v22 + 12) = 2080;
        if (*(_QWORD *)&v19[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_readerIdentifier + 8])
        {
          v37 = *(_QWORD *)&v19[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_readerIdentifier];
          v38 = *(_QWORD *)&v19[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_readerIdentifier + 8];
        }
        else
        {
          v37 = 7104878;
          v38 = 0xE300000000000000;
        }
        swift_bridgeObjectRetain();
        v58 = sub_1C3598590(v37, v38, &v50);
        sub_1C35B6D98();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C3511000, v20, v21, "Missing mandatory information in ControlFlow: ep:%s\n, readerId:%s", (uint8_t *)v22, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1C3BD380C](v23, -1, -1);
        MEMORY[0x1C3BD380C](v22, -1, -1);

      }
      else
      {

      }
      type metadata accessor for ATLError(0);
      v14 = v39;
      sub_1C357D200();
      swift_allocError();
      *v40 = 3;
      swift_willThrow();
      sub_1C357D248((uint64_t)a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3574174, (uint64_t (*)(void))sub_1C3573D7C);
    }
  }
  return v14;
}

unint64_t sub_1C357B1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v10;
  char v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v4 = v3;
  v5 = (uint64_t *)&v3[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointIdentifier];
  v6 = *(_QWORD *)&v3[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointIdentifier + 8];
  if (v6
    && (v7 = *(_QWORD *)&v3[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_readerIdentifier + 8]) != 0)
  {
    v34 = *v5;
    v35 = *(_QWORD *)&v3[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_readerIdentifier];
    sub_1C3578888();
    v36 = word_1C35BBADE[v10];
    v32 = asc_1C35C539B[v10];
    if ((v3[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_state] & 0x81) != 0)
      v11 = 2;
    else
      v11 = 1;
    v33 = v11;
    v3[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_state] = -127;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9C18);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C35BBB50;
    sub_1C35B6C60();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = MEMORY[0x1E0DEA968];
    sub_1C35B6DEC();
    v14 = sub_1C35B6C60();
    *(_QWORD *)(inited + 96) = v13;
    *(_QWORD *)(inited + 72) = v14;
    *(_QWORD *)(inited + 80) = v15;
    sub_1C35B6DEC();
    *(_QWORD *)(inited + 168) = v13;
    *(_QWORD *)(inited + 144) = a2;
    *(_QWORD *)(inited + 152) = a3;
    swift_bridgeObjectRetain();
    sub_1C35B6DEC();
    *(_QWORD *)(inited + 240) = MEMORY[0x1E0DEAFA0];
    *(_BYTE *)(inited + 216) = 1;
    sub_1C35B6DEC();
    v16 = MEMORY[0x1E0DEDE70];
    *(_QWORD *)(inited + 312) = MEMORY[0x1E0DEDE70];
    *(_BYTE *)(inited + 288) = v32;
    sub_1C35B6DEC();
    *(_QWORD *)(inited + 384) = v16;
    *(_BYTE *)(inited + 360) = v33;
    sub_1C35B6DEC();
    *(_QWORD *)(inited + 456) = v13;
    *(_QWORD *)(inited + 432) = v34;
    *(_QWORD *)(inited + 440) = v6;
    sub_1C35B6DEC();
    *(_QWORD *)(inited + 528) = v13;
    *(_QWORD *)(inited + 504) = v35;
    *(_QWORD *)(inited + 512) = v7;
    v37 = 0x737574617473;
    v38 = 0xE600000000000000;
    sub_1C35B6DEC();
    v17 = *(_WORD *)&v4[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_sw];
    v18 = MEMORY[0x1E0DEE068];
    *(_QWORD *)(inited + 600) = MEMORY[0x1E0DEE068];
    *(_WORD *)(inited + 576) = v17;
    sub_1C35B6DEC();
    *(_QWORD *)(inited + 672) = v18;
    *(_WORD *)(inited + 648) = v36;
    v37 = sub_1C35B6C60();
    v38 = v19;
    sub_1C35B6DEC();
    *(_QWORD *)(inited + 744) = MEMORY[0x1E0DEAFA0];
    *(_BYTE *)(inited + 720) = 0;
    return sub_1C35AB35C(inited);
  }
  else
  {
    if (qword_1EF8D99C8 != -1)
      swift_once();
    v21 = sub_1C35B6AE0();
    __swift_project_value_buffer(v21, (uint64_t)qword_1EF8D9B88);
    v22 = v3;
    v23 = sub_1C35B6AC8(v22);
    v24 = sub_1C35B6D50();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc();
      v26 = swift_slowAlloc();
      v37 = v26;
      *(_DWORD *)v25 = 136315394;
      if (v5[1])
      {
        v27 = *v5;
        v28 = v5[1];
      }
      else
      {
        v27 = 7104878;
        v28 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      v39 = sub_1C3598590(v27, v28, &v37);
      sub_1C35B6D98();

      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      if (*(_QWORD *)&v22[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_readerIdentifier + 8])
      {
        v29 = *(_QWORD *)&v22[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_readerIdentifier];
        v30 = *(_QWORD *)&v22[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_readerIdentifier + 8];
      }
      else
      {
        v29 = 7104878;
        v30 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      v39 = sub_1C3598590(v29, v30, &v37);
      sub_1C35B6D98();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C3511000, v23, v24, "Missing mandatory information in Dummy: ep:%s\n, readerId:%s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C3BD380C](v26, -1, -1);
      MEMORY[0x1C3BD380C](v25, -1, -1);

    }
    else
    {

    }
    type metadata accessor for ATLError(0);
    sub_1C357D200();
    swift_allocError();
    *v31 = 3;
    return swift_willThrow();
  }
}

uint64_t sub_1C357B764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v7;
  char v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int16 v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t v32;
  unint64_t v33;

  v4 = v3;
  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_requestAuth) & 1) != 0)
    v7 = -4091;
  else
    v7 = word_1C35CE060[*(char *)(v3
                                + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointNotFoundReason)];
  v29 = v7;
  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_state) & 0x81) != 0)
    v8 = 2;
  else
    v8 = 1;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_state) = -127;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9C10);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C35BBB80;
  *(_QWORD *)(inited + 32) = sub_1C35B6C60();
  *(_QWORD *)(inited + 40) = v10;
  v11 = sub_1C35B6C60();
  v12 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v11;
  *(_QWORD *)(inited + 56) = v13;
  *(_QWORD *)(inited + 72) = v12;
  *(_QWORD *)(inited + 80) = 0xD000000000000010;
  *(_QWORD *)(inited + 88) = 0x80000001C35C52D0;
  *(_QWORD *)(inited + 96) = a2;
  *(_QWORD *)(inited + 104) = a3;
  *(_QWORD *)(inited + 120) = v12;
  *(_QWORD *)(inited + 128) = 0x726F727245646964;
  *(_QWORD *)(inited + 136) = 0xE800000000000000;
  v14 = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(inited + 144) = 1;
  *(_QWORD *)(inited + 168) = v14;
  *(_QWORD *)(inited + 176) = 0x646E616D6D6F63;
  *(_QWORD *)(inited + 184) = 0xE700000000000000;
  sub_1C3578888();
  v16 = MEMORY[0x1E0DEDE70];
  *(_BYTE *)(inited + 192) = asc_1C35C539B[v15];
  *(_QWORD *)(inited + 216) = v16;
  *(_QWORD *)(inited + 224) = 0xD000000000000012;
  *(_QWORD *)(inited + 232) = 0x80000001C35C52F0;
  *(_BYTE *)(inited + 240) = v8;
  *(_QWORD *)(inited + 264) = v16;
  *(_QWORD *)(inited + 272) = 0x737574617473;
  *(_QWORD *)(inited + 280) = 0xE600000000000000;
  v17 = MEMORY[0x1E0DEE068];
  *(_WORD *)(inited + 288) = *(_WORD *)(v3 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_sw);
  *(_QWORD *)(inited + 312) = v17;
  *(_QWORD *)(inited + 320) = 0x74616D726F666E69;
  *(_QWORD *)(inited + 328) = 0xEB00000000657669;
  *(_BYTE *)(inited + 336) = *(_BYTE *)(v3 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_antiRelayResult);
  *(_QWORD *)(inited + 360) = v16;
  *(_QWORD *)(inited + 368) = 0x746C75736572;
  *(_QWORD *)(inited + 376) = 0xE600000000000000;
  *(_QWORD *)(inited + 408) = v17;
  *(_WORD *)(inited + 384) = v29;
  *(_QWORD *)(inited + 416) = sub_1C35B6C60();
  *(_QWORD *)(inited + 424) = v18;
  *(_QWORD *)(inited + 456) = v14;
  *(_BYTE *)(inited + 432) = 1;
  swift_bridgeObjectRetain();
  v19 = sub_1C35AAF90(inited);
  v20 = *(_QWORD *)(v4 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointIdentifier + 8);
  if (v20)
  {
    v21 = *(_QWORD *)(v4 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointIdentifier);
    v32 = v12;
    *(_QWORD *)&v31 = v21;
    *((_QWORD *)&v31 + 1) = v20;
    sub_1C3573DC0(&v31, v30);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v33 = v19;
    sub_1C359D67C(v30, 0xD000000000000012, 0x80000001C35C5310, isUniquelyReferenced_nonNull_native);
    v19 = v33;
    swift_bridgeObjectRelease();
  }
  v23 = (uint64_t *)(v4 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_readerIdentifier);
  v24 = *(_QWORD *)(v4 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_readerIdentifier + 8);
  if (v24)
  {
    v25 = *v23;
    v32 = v12;
    *(_QWORD *)&v31 = v25;
    *((_QWORD *)&v31 + 1) = v24;
    sub_1C3573DC0(&v31, v30);
    swift_bridgeObjectRetain();
    v26 = swift_isUniquelyReferenced_nonNull_native();
    v33 = v19;
    sub_1C359D67C(v30, 0xD000000000000010, 0x80000001C35C5240, v26);
    v19 = v33;
    swift_bridgeObjectRelease();
  }
  v27 = sub_1C3581030(v19);
  swift_bridgeObjectRelease();
  return v27;
}

id sub_1C357BCE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const char *a8)
{
  void *v8;

  sub_1C357F0B4(a8);
  v8 = (void *)sub_1C35B6C0C();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1C357BD90()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t result;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_state) = 0x80;
  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointIdentifier);
  *v1 = 0;
  v1[1] = 0;
  swift_bridgeObjectRelease();
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_readerIdentifier);
  *v2 = 0;
  v2[1] = 0;
  result = swift_bridgeObjectRelease();
  *(_WORD *)(v0 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_sw) = -28672;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_endpointNotFoundReason) = 4;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_antiRelayResult) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_requestAuth) = 0;
  return result;
}

id sub_1C357BE4C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LyonSwiftDecoder();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for LyonSwiftDecoder()
{
  return objc_opt_self();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for LyonConstants.AntiRelayResult(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LyonConstants.AntiRelayResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1C357BFC4 + 4 * byte_1C35BB736[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1C357BFF8 + 4 * byte_1C35BB731[v4]))();
}

uint64_t sub_1C357BFF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C357C000(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C357C008);
  return result;
}

uint64_t sub_1C357C014(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C357C01CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1C357C020(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C357C028(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C357C034(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1C357C03C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for LyonConstants.AntiRelayResult()
{
  return &type metadata for LyonConstants.AntiRelayResult;
}

uint64_t getEnumTagSinglePayload for LyonConstants.ReasonEndpointNotFound(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LyonConstants.ReasonEndpointNotFound(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1C357C130 + 4 * byte_1C35BB740[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1C357C164 + 4 * byte_1C35BB73B[v4]))();
}

uint64_t sub_1C357C164(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C357C16C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C357C174);
  return result;
}

uint64_t sub_1C357C180(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C357C188);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1C357C18C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C357C194(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LyonConstants.ReasonEndpointNotFound()
{
  return &type metadata for LyonConstants.ReasonEndpointNotFound;
}

ValueMetadata *type metadata accessor for LyonConstants()
{
  return &type metadata for LyonConstants;
}

uint64_t getEnumTagSinglePayload for LyonConstants.State(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0x7E)
    goto LABEL_17;
  if (a2 + 130 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 130) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 130;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 130;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 130;
  }
LABEL_17:
  v6 = ((*a1 >> 6) & 0xFFFFFF83 | (4 * ((*a1 >> 1) & 0x1F))) ^ 0x7F;
  if (v6 >= 0x7D)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for LyonConstants.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 130 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 130) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x7E)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x7D)
    return ((uint64_t (*)(void))((char *)&loc_1C357C2AC + 4 * byte_1C35BB74A[v4]))();
  *a1 = a2 - 126;
  return ((uint64_t (*)(void))((char *)sub_1C357C2E0 + 4 * byte_1C35BB745[v4]))();
}

uint64_t sub_1C357C2E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C357C2E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C357C2F0);
  return result;
}

uint64_t sub_1C357C308(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C357C310);
  *(_BYTE *)result = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
  return result;
}

uint64_t sub_1C357C314(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C357C31C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C357C328(_BYTE *a1)
{
  int v1;

  v1 = (char)*a1;
  if (v1 >= 0)
    return *a1 >> 6;
  else
    return v1 & 1 | 2u;
}

_BYTE *sub_1C357C344(_BYTE *result)
{
  *result &= 0x3Fu;
  return result;
}

_BYTE *sub_1C357C354(_BYTE *result, unsigned int a2)
{
  if (a2 < 2)
    *result = *result & 1 | ((_BYTE)a2 << 6);
  else
    *result = a2 & 1 | 0x80;
  return result;
}

ValueMetadata *type metadata accessor for LyonConstants.State()
{
  return &type metadata for LyonConstants.State;
}

unint64_t sub_1C357C394()
{
  unint64_t result;

  result = qword_1EF8D9C00;
  if (!qword_1EF8D9C00)
  {
    result = MEMORY[0x1C3BD3788](&unk_1C35BB88C, &type metadata for LyonConstants.ReasonEndpointNotFound);
    atomic_store(result, (unint64_t *)&qword_1EF8D9C00);
  }
  return result;
}

unint64_t sub_1C357C3DC()
{
  unint64_t result;

  result = qword_1EF8D9C08;
  if (!qword_1EF8D9C08)
  {
    result = MEMORY[0x1C3BD3788](&unk_1C35BB92C, &type metadata for LyonConstants.AntiRelayResult);
    atomic_store(result, (unint64_t *)&qword_1EF8D9C08);
  }
  return result;
}

uint64_t sub_1C357C420()
{
  uint64_t v0;

  v0 = sub_1C35B6AE0();
  __swift_allocate_value_buffer(v0, qword_1EF8D9B88);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF8D9B88);
  return sub_1C35B6AD4();
}

uint64_t sub_1C357C494(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x1C357C4F4);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_1C357C4AC + *((int *)qword_1C357C4F8 + (a4 >> 62))))(v5);
}

void sub_1C357C508(__int128 *a1)
{
  __int128 v1;

  sub_1C357D1E8(a1, &v1);
  __asm { BR              X11 }
}

uint64_t sub_1C357C56C@<X0>(uint64_t a1@<X8>)
{
  int v1;
  __int128 *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v10;
  char v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v18 = a1 & 0xCFFFFFFFFFFFFFFFLL;
  v5 = v16;
  v4 = v17;
  sub_1C357D1E8(v2, &v12);
  if ((v14 >> 60) & 3 | (4 * v15))
    goto LABEL_7;
  v6 = 0;
  v14 &= 0xCFFFFFFFFFFFFFFFLL;
  if (((v1 ^ v12) & 1) == 0 && WORD1(v12) == HIWORD(v1))
  {
    v7 = *((_QWORD *)&v12 + 1);
    v8 = v13;
    if (v4 >> 60 == 15)
    {
      if (v13 >> 60 == 15)
      {
        sub_1C357D248(v3, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3575268, (uint64_t (*)(void))sub_1C3573E48);
        sub_1C357D248((uint64_t)v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3575268, (uint64_t (*)(void))sub_1C3573E48);
LABEL_11:
        v6 = 1;
        return v6 & 1;
      }
    }
    else if (v13 >> 60 != 15)
    {
      sub_1C357D248(v3, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3575268, (uint64_t (*)(void))sub_1C3573E48);
      sub_1C357D248((uint64_t)v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3575268, (uint64_t (*)(void))sub_1C3573E48);
      sub_1C3573B04(v5, v4);
      v11 = v10;
      sub_1C357D248((uint64_t)v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3574174, (uint64_t (*)(void))sub_1C3573D7C);
      sub_1C357D248(v3, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3574174, (uint64_t (*)(void))sub_1C3573D7C);
      if ((v11 & 1) != 0)
        goto LABEL_11;
      goto LABEL_7;
    }
    sub_1C357D248(v3, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3575268, (uint64_t (*)(void))sub_1C3573E48);
    sub_1C357D248((uint64_t)v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3575268, (uint64_t (*)(void))sub_1C3573E48);
    sub_1C3574174(v5, v4);
    sub_1C3574174(v7, v8);
LABEL_7:
    v6 = 0;
  }
  return v6 & 1;
}

BOOL sub_1C357D058(unsigned __int8 a1, unsigned __int8 a2)
{
  if (a1 >> 6)
  {
    if (a1 >> 6 == 1)
    {
      if ((a2 & 0xC0) != 0x40)
        return 0;
      return ((a2 ^ a1) & 1) == 0;
    }
    if (a1 == 128)
    {
      if (a2 == 128)
        return 1;
    }
    else if (a2 == 129)
    {
      return 1;
    }
  }
  else if (a2 < 0x40u)
  {
    return ((a2 ^ a1) & 1) == 0;
  }
  return 0;
}

uint64_t sub_1C357D0C8(int a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  result = (a1 - 1);
  if (result >= 4u)
  {
    if (qword_1EF8D99C8 != -1)
      swift_once();
    v2 = sub_1C35B6AE0();
    v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EF8D9B88);
    v4 = sub_1C35B6AC8(v3);
    v5 = sub_1C35B6D50();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1C3511000, v4, v5, "Unexpected reason for ep not found", v6, 2u);
      MEMORY[0x1C3BD380C](v6, -1, -1);
    }

    return 4;
  }
  return result;
}

uint64_t sub_1C357D1A8(unsigned __int8 a1)
{
  if (a1 <= 4u)
    return (0x302010004uLL >> (8 * a1));
  else
    return 4;
}

uint64_t sub_1C357D1D4(uint64_t result)
{
  if (result >= 5u)
    return 5;
  else
    return result;
}

_OWORD *sub_1C357D1E8(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 27) = *(__int128 *)((char *)a1 + 27);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

unint64_t sub_1C357D200()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF8D9A50;
  if (!qword_1EF8D9A50)
  {
    type metadata accessor for ATLError(255);
    result = MEMORY[0x1C3BD3788](&protocol conformance descriptor for ATLError, v1);
    atomic_store(result, (unint64_t *)&qword_1EF8D9A50);
  }
  return result;
}

uint64_t sub_1C357D248(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t (*)(void)), uint64_t (*a3)(void))
{
  sub_1C357D294(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40), *(_BYTE *)(a1 + 42), a2, a3);
  return a1;
}

uint64_t sub_1C357D294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t (*)(void)), uint64_t (*a9)(void))
{
  uint64_t (*v10)(void);
  uint64_t result;
  uint64_t (*v12)(void);

  v10 = a9;
  switch((a5 >> 60) & 3 | (4 * a7))
  {
    case 0uLL:
      return a8(a2, a3, a9);
    case 1uLL:
    case 10uLL:
      v12 = a9;
      ((void (*)(uint64_t, uint64_t))a9)(a2, a3);
      goto LABEL_5;
    case 2uLL:
    case 3uLL:
      v12 = a9;
      a9();
LABEL_5:
      v10 = v12;
      goto LABEL_6;
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
LABEL_6:
      result = v10();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1C357D374()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF8D9A40;
  if (!qword_1EF8D9A40)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED7E1280);
    result = MEMORY[0x1C3BD3788](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EF8D9A40);
  }
  return result;
}

uint64_t sub_1C357D3C0(char a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  v2 = a1 + 1;
  if ((a1 + 1) < 0x19u && ((0x1F1DFF9u >> v2) & 1) != 0)
    return byte_1C35BBB06[v2];
  if (qword_1EF8D99C8 != -1)
    swift_once();
  v3 = sub_1C35B6AE0();
  v4 = __swift_project_value_buffer(v3, (uint64_t)qword_1EF8D9B88);
  v5 = sub_1C35B6AC8(v4);
  v6 = sub_1C35B6D50();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v15 = v8;
    *(_DWORD *)v7 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9A58);
    v9 = swift_allocObject();
    v10 = MEMORY[0x1E0DEDE70];
    *(_OWORD *)(v9 + 16) = xmmword_1C35BB2C0;
    v11 = MEMORY[0x1E0DEDEC8];
    *(_QWORD *)(v9 + 56) = v10;
    *(_QWORD *)(v9 + 64) = v11;
    *(_BYTE *)(v9 + 32) = a1;
    v12 = sub_1C35B6C6C();
    sub_1C3598590(v12, v13, &v15);
    sub_1C35B6D98();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C3511000, v5, v6, "Unknown event type %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BD380C](v8, -1, -1);
    MEMORY[0x1C3BD380C](v7, -1, -1);
  }

  return 20;
}

uint64_t sub_1C357D5BC(char a1)
{
  if ((a1 + 1) > 0x18u)
    return 20;
  else
    return byte_1C35BBB1F[(char)(a1 + 1)];
}

void sub_1C357D5E8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1C357D630(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;

  if (!BYTE6(a2))
  {
    sub_1C3576D60();
    swift_allocError();
    swift_willThrow();
    return sub_1C3573D7C(v7, v8);
  }
  sub_1C3576E5C();
  v5 = sub_1C357D3C0(v4);
  if (v2)
    return sub_1C3573D7C(v7, v8);
  if (v5 != 20)
    __asm { BR              X12 }
  result = sub_1C3573D7C(v7, v8);
  *(_QWORD *)v3 = 4;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 3;
  return result;
}

void sub_1C357E218()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;

  Data.popPrefix(_:)(BYTE6(v0));
  if (v1)

  sub_1C3573D7C(v3, v2);
  JUMPOUT(0x1C357D6A4);
}

void sub_1C357E488()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (BYTE6(v0))
  {
    sub_1C3576E5C();
    sub_1C357D0C8(v5);
    JUMPOUT(0x1C357D6A4);
  }
  sub_1C3576D60();
  swift_allocError();
  swift_willThrow();
  sub_1C3573D7C(v4, v1);
  sub_1C3573D7C(v3, v2);
  JUMPOUT(0x1C357E144);
}

unint64_t sub_1C357E6E4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (qword_1EF8D99C8 != -1)
    swift_once();
  v8 = sub_1C35B6AE0();
  __swift_project_value_buffer(v8, (uint64_t)qword_1EF8D9B88);
  sub_1C3573E48(a1, a2);
  swift_bridgeObjectRetain();
  sub_1C3573E48(a1, a2);
  v9 = swift_bridgeObjectRetain();
  v10 = sub_1C35B6AC8(v9);
  v11 = sub_1C35B6D38();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v19 = v18;
    *(_DWORD *)v12 = 136315394;
    sub_1C357F9BC(a1, a2);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
    v17 = a3;
    sub_1C357D374();
    v13 = sub_1C35B6C48();
    v15 = v14;
    swift_bridgeObjectRelease();
    sub_1C3598590(v13, v15, &v19);
    sub_1C35B6D98();
    swift_bridgeObjectRelease();
    sub_1C3573D7C(a1, a2);
    sub_1C3573D7C(a1, a2);
    *(_WORD *)(v12 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_1C3598590(v17, a4, &v19);
    sub_1C35B6D98();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C3511000, v10, v11, "messageInExchange %s for aid %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C3BD380C](v18, -1, -1);
    MEMORY[0x1C3BD380C](v12, -1, -1);

  }
  else
  {
    sub_1C3573D7C(a1, a2);
    sub_1C3573D7C(a1, a2);

    swift_bridgeObjectRelease_n();
  }
  return sub_1C35AB35C(MEMORY[0x1E0DEE9D8]);
}

unint64_t sub_1C357E994(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v4;
  void *v5;
  unsigned __int8 *v6;
  unsigned int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t (*v38)(__int128 *, uint64_t, uint64_t);
  uint64_t v39;
  __int128 v40[3];
  uint64_t v41;

  v6 = v4;
  v11 = v6[OBJC_IVAR____TtC24AppletTranslationLibrary16LyonSwiftDecoder_state];
  if (v11 >> 6)
  {
    if (v11 >> 6 == 1)
    {
      v38 = sub_1C357F1E0;
    }
    else
    {
      if (v11 != 128)
        return sub_1C35AB35C(MEMORY[0x1E0DEE9D8]);
      v38 = (uint64_t (*)(__int128 *, uint64_t, uint64_t))sub_1C357F218;
    }
  }
  else
  {
    v38 = (uint64_t (*)(__int128 *, uint64_t, uint64_t))sub_1C357F1F8;
  }
  *(_QWORD *)(swift_allocObject() + 16) = v6;
  v12 = v6;
  sub_1C3573E48(a1, a2);
  sub_1C357D5E8(a1, a2);
  if (v5)
  {
    if (qword_1EF8D99C8 != -1)
      swift_once();
    v24 = sub_1C35B6AE0();
    __swift_project_value_buffer(v24, (uint64_t)qword_1EF8D9B88);
    sub_1C3573E48(a1, a2);
    v25 = sub_1C3573E48(a1, a2);
    v26 = sub_1C35B6AC8(v25);
    v27 = sub_1C35B6D50();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v39 = swift_slowAlloc();
      v41 = v39;
      *(_DWORD *)v28 = 136315138;
      sub_1C357F9BC(a1, a2);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
      sub_1C357D374();
      v29 = sub_1C35B6C48();
      v31 = v30;
      swift_bridgeObjectRelease();
      sub_1C3598590(v29, v31, &v41);
      sub_1C35B6D98();
      swift_bridgeObjectRelease();
      sub_1C3573D7C(a1, a2);
      sub_1C3573D7C(a1, a2);
      _os_log_impl(&dword_1C3511000, v26, v27, "LyonDecoder eventHandler error: %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BD380C](v39, -1, -1);
      MEMORY[0x1C3BD380C](v28, -1, -1);
    }
    else
    {
      sub_1C3573D7C(a1, a2);
      sub_1C3573D7C(a1, a2);
    }

    type metadata accessor for ATLError(0);
    v23 = v32;
    sub_1C357D200();
    swift_allocError();
    *v33 = 3;
    swift_willThrow();

    swift_release();
  }
  else
  {
    v37 = a3;
    if (qword_1EF8D99C8 != -1)
      swift_once();
    v13 = sub_1C35B6AE0();
    __swift_project_value_buffer(v13, (uint64_t)qword_1EF8D9B88);
    v14 = v12;
    sub_1C357D248((uint64_t)v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3575268, (uint64_t (*)(void))sub_1C3573E48);
    v36 = v14;
    v15 = sub_1C357D248((uint64_t)v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3575268, (uint64_t (*)(void))sub_1C3573E48);
    v16 = sub_1C35B6AC8(v15);
    v17 = sub_1C35B6D38();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc();
      v35 = swift_slowAlloc();
      v41 = v35;
      *(_DWORD *)v18 = 136315394;
      sub_1C3578888();
      v19 = sub_1C35B6C78();
      sub_1C3598590(v19, v20, &v41);
      sub_1C35B6D98();
      swift_bridgeObjectRelease();
      sub_1C357D248((uint64_t)v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3574174, (uint64_t (*)(void))sub_1C3573D7C);
      sub_1C357D248((uint64_t)v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3574174, (uint64_t (*)(void))sub_1C3573D7C);
      *(_WORD *)(v18 + 12) = 2080;
      v21 = sub_1C35B6C78();
      sub_1C3598590(v21, v22, &v41);
      sub_1C35B6D98();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C3511000, v16, v17, "Received event %s in state %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C3BD380C](v35, -1, -1);
      MEMORY[0x1C3BD380C](v18, -1, -1);

    }
    else
    {
      sub_1C357D248((uint64_t)v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3574174, (uint64_t (*)(void))sub_1C3573D7C);
      sub_1C357D248((uint64_t)v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3574174, (uint64_t (*)(void))sub_1C3573D7C);

    }
    v23 = v38(v40, v37, a4);
    swift_release();
    sub_1C357D248((uint64_t)v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3574174, (uint64_t (*)(void))sub_1C3573D7C);
  }
  return v23;
}

unint64_t sub_1C357EFC8()
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9C18);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C35BB480;
  sub_1C35B6C60();
  sub_1C35B6DEC();
  *(_QWORD *)(inited + 96) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(inited + 72) = 1;
  sub_1C35B6C60();
  sub_1C35B6DEC();
  *(_QWORD *)(inited + 168) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 144) = 1000;
  return sub_1C35AB35C(inited);
}

uint64_t sub_1C357F0B4(const char *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;

  if (qword_1EF8D99C8 != -1)
    swift_once();
  v2 = sub_1C35B6AE0();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EF8D9B88);
  v4 = sub_1C35B6AC8(v3);
  v5 = sub_1C35B6D50();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1C3511000, v4, v5, a1, v6, 2u);
    MEMORY[0x1C3BD380C](v6, -1, -1);
  }

  type metadata accessor for ATLError(0);
  sub_1C357D200();
  swift_allocError();
  *v7 = 2;
  return swift_willThrow();
}

uint64_t sub_1C357F1BC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1C357F1E0(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3578BB4(a1, a2, a3);
}

unint64_t sub_1C357F1F8(__int128 *a1, uint64_t a2, unint64_t a3)
{
  return sub_1C3579B78(a1, a2, a3);
}

unint64_t sub_1C357F218(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3578C9C(a1, a2, a3);
}

uint64_t getEnumTagSinglePayload for LyonConstants.EventType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LyonConstants.EventType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_1C357F314 + 4 * byte_1C35BB77A[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_1C357F348 + 4 * byte_1C35BB775[v4]))();
}

uint64_t sub_1C357F348(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C357F350(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C357F358);
  return result;
}

uint64_t sub_1C357F364(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C357F36CLL);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_1C357F370(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C357F378(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LyonConstants.EventType()
{
  return &type metadata for LyonConstants.EventType;
}

uint64_t destroy for LyonConstants.Event(uint64_t a1)
{
  return sub_1C357D294(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40), *(_BYTE *)(a1 + 42), (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3574174, (uint64_t (*)(void))sub_1C3573D7C);
}

uint64_t initializeWithCopy for LyonConstants.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 42);
  v9 = *(unsigned __int16 *)(a2 + 40);
  sub_1C357D294(*(_QWORD *)a2, v4, v5, v6, v7, v9, v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3575268, (uint64_t (*)(void))sub_1C3573E48);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_WORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 42) = v8;
  return a1;
}

uint64_t assignWithCopy for LyonConstants.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 42);
  v9 = *(unsigned __int16 *)(a2 + 40);
  sub_1C357D294(*(_QWORD *)a2, v4, v5, v6, v7, v9, v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3575268, (uint64_t (*)(void))sub_1C3573E48);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v15 = *(unsigned __int16 *)(a1 + 40);
  *(_WORD *)(a1 + 40) = v9;
  v16 = *(_BYTE *)(a1 + 42);
  *(_BYTE *)(a1 + 42) = v8;
  sub_1C357D294(v10, v11, v12, v13, v14, v15, v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3574174, (uint64_t (*)(void))sub_1C3573D7C);
  return a1;
}

__n128 __swift_memcpy43_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 27) = *(_OWORD *)(a2 + 27);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for LyonConstants.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_WORD *)(a2 + 40);
  v5 = *(_BYTE *)(a2 + 42);
  v6 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 32) = v3;
  v12 = *(unsigned __int16 *)(a1 + 40);
  *(_WORD *)(a1 + 40) = v4;
  v13 = *(_BYTE *)(a1 + 42);
  *(_BYTE *)(a1 + 42) = v5;
  sub_1C357D294(v6, v8, v7, v9, v10, v12, v13, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1C3574174, (uint64_t (*)(void))sub_1C3573D7C);
  return a1;
}

uint64_t getEnumTagSinglePayload for LyonConstants.Event(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3F4 && *(_BYTE *)(a1 + 43))
    return (*(_DWORD *)a1 + 1012);
  v3 = ((*(_QWORD *)(a1 + 32) >> 60) & 3 | (4 * *(unsigned __int8 *)(a1 + 42))) ^ 0x3FF;
  if (v3 >= 0x3F3)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for LyonConstants.Event(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3F3)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 42) = 0;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 1012;
    if (a3 >= 0x3F4)
      *(_BYTE *)(result + 43) = 1;
  }
  else
  {
    if (a3 >= 0x3F4)
      *(_BYTE *)(result + 43) = 0;
    if (a2)
    {
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_QWORD *)(result + 32) = (-a2 & 3) << 60;
      *(_WORD *)(result + 40) = 0;
      *(_BYTE *)(result + 42) = -a2 >> 2;
    }
  }
  return result;
}

uint64_t sub_1C357F68C(uint64_t a1)
{
  if (((*(_QWORD *)(a1 + 32) >> 60) & 3 | (4 * *(_BYTE *)(a1 + 42))) <= 0xBu)
    return (*(_QWORD *)(a1 + 32) >> 60) & 3 | (4 * *(_BYTE *)(a1 + 42));
  else
    return (*(_DWORD *)a1 + 12);
}

uint64_t sub_1C357F6B4(uint64_t result)
{
  *(_QWORD *)(result + 32) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_1C357F6C4(uint64_t result, unsigned int a2)
{
  if (a2 < 0xC)
  {
    *(_QWORD *)(result + 32) = *(_QWORD *)(result + 32) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 3) << 60);
    *(_BYTE *)(result + 42) = a2 >> 2;
  }
  else
  {
    *(_QWORD *)result = a2 - 12;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 42) = 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for LyonConstants.Event()
{
  return &type metadata for LyonConstants.Event;
}

uint64_t getEnumTagSinglePayload for LyonConstants.TransactionType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LyonConstants.TransactionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C357F7F4 + 4 * byte_1C35BB784[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C357F828 + 4 * byte_1C35BB77F[v4]))();
}

uint64_t sub_1C357F828(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C357F830(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C357F838);
  return result;
}

uint64_t sub_1C357F844(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C357F84CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C357F850(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C357F858(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1C357F864(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for LyonConstants.TransactionType()
{
  return &type metadata for LyonConstants.TransactionType;
}

unint64_t sub_1C357F884()
{
  unint64_t result;

  result = qword_1EF8D9C38;
  if (!qword_1EF8D9C38)
  {
    result = MEMORY[0x1C3BD3788](&unk_1C35BB9EC, &type metadata for LyonConstants.TransactionType);
    atomic_store(result, (unint64_t *)&qword_1EF8D9C38);
  }
  return result;
}

unint64_t sub_1C357F8CC()
{
  unint64_t result;

  result = qword_1EF8D9C40;
  if (!qword_1EF8D9C40)
  {
    result = MEMORY[0x1C3BD3788](&unk_1C35BBAB4, &type metadata for LyonConstants.EventType);
    atomic_store(result, (unint64_t *)&qword_1EF8D9C40);
  }
  return result;
}

uint64_t sub_1C357F924(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1C357F9BC(a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
  sub_1C3575338((unint64_t *)&qword_1EF8D9A40, &qword_1ED7E1280, MEMORY[0x1E0DEAF20]);
  v2 = sub_1C35B6C48();
  swift_bridgeObjectRelease();
  return v2;
}

void sub_1C357F9BC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_1C357FA14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = BYTE6(v22);
  if (BYTE6(v22))
  {
    *(_QWORD *)(v3 - 104) = v2;
    v5 = BYTE6(v22);
    sub_1C35991AC(0, BYTE6(v22), 0);
    v2 = *(_QWORD *)(v3 - 104);
    if ((_DWORD)v1)
    {
      if ((_DWORD)v1 == 1)
        v6 = (int)a1;
      else
        v6 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v6 = 0;
    }
    *(_QWORD *)(v3 - 136) = v22 & 0x3FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v3 - 128) = v1;
    while (v5)
    {
      if ((_DWORD)v1)
      {
        if ((_DWORD)v1 == 1)
        {
          if (v6 < (int)a1 || v6 >= a1 >> 32)
            goto LABEL_29;
          v7 = sub_1C35B693C();
          if (!v7)
          {
            __break(1u);
LABEL_36:
            __break(1u);
          }
          v8 = v7;
          v9 = sub_1C35B6954();
          v10 = v6 - v9;
          if (__OFSUB__(v6, v9))
            goto LABEL_32;
        }
        else
        {
          if (v6 < *(_QWORD *)(a1 + 16))
            goto LABEL_31;
          if (v6 >= *(_QWORD *)(a1 + 24))
            goto LABEL_33;
          v12 = sub_1C35B693C();
          if (!v12)
            goto LABEL_36;
          v8 = v12;
          v13 = sub_1C35B6954();
          v10 = v6 - v13;
          if (__OFSUB__(v6, v13))
            goto LABEL_34;
        }
        v11 = *(_BYTE *)(v8 + v10);
      }
      else
      {
        if (v6 >= BYTE6(v22))
          goto LABEL_30;
        *(_QWORD *)(v3 - 118) = a1;
        *(_WORD *)(v3 - 110) = v22;
        *(_BYTE *)(v3 - 108) = BYTE2(v22);
        *(_BYTE *)(v3 - 107) = BYTE3(v22);
        *(_BYTE *)(v3 - 106) = BYTE4(v22);
        *(_BYTE *)(v3 - 105) = BYTE5(v22);
        v11 = *(_BYTE *)(v3 - 118 + v6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9A58);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_1C35BB2C0;
      *(_QWORD *)(v14 + 56) = MEMORY[0x1E0DEDE70];
      *(_QWORD *)(v14 + 64) = MEMORY[0x1E0DEDEC8];
      *(_BYTE *)(v14 + 32) = v11;
      v15 = sub_1C35B6C6C();
      v17 = v16;
      *(_QWORD *)(v3 - 104) = v2;
      v19 = *(_QWORD *)(v2 + 16);
      v18 = *(_QWORD *)(v2 + 24);
      if (v19 >= v18 >> 1)
      {
        sub_1C35991AC(v18 > 1, v19 + 1, 1);
        v2 = *(_QWORD *)(v3 - 104);
      }
      *(_QWORD *)(v2 + 16) = v19 + 1;
      v20 = v2 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v15;
      *(_QWORD *)(v20 + 40) = v17;
      ++v6;
      --v5;
      --v4;
      v1 = *(_QWORD *)(v3 - 128);
      if (!v4)
        return v2;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    __break(1u);
    JUMPOUT(0x1C357FD2CLL);
  }
  return v2;
}

void sub_1C357FD54()
{
  __asm { BR              X12 }
}

uint64_t sub_1C357FDA4()
{
  char v0;
  _QWORD v2[3];
  uint64_t v3;
  uint64_t v4;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1298);
  v4 = sub_1C3575338((unint64_t *)&qword_1ED7E1200, &qword_1ED7E1298, MEMORY[0x1E0CB25E0]);
  LOBYTE(v2[0]) = v0;
  __swift_project_boxed_opaque_existential_1Tm(v2, v3);
  sub_1C35B6A14();
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v2);
}

_QWORD *sub_1C357FE54(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E12A0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C35805C8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1C357FF60(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9C68);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C3580A84(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1C358006C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1210);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C3580B78(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1C3580178(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1C35804B0(a1, a2, a3, a4, &qword_1EF8D9C58, &qword_1ED7E1280);
}

_QWORD *sub_1C358018C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9C60);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C3580C68(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1C3580298(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E12A8);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v12 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1C3580E48(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1C3580390(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1208);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C3580D58(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1C358049C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1C35804B0(a1, a2, a3, a4, &qword_1EF8D9C48, &qword_1EF8D9C50);
}

_QWORD *sub_1C35804B0(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 25;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v16 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4])
          memmove(v16, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C3580F2C(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

char *sub_1C35805C8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C35806B0(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      sub_1C35B696C();
      swift_allocObject();
      sub_1C35B6960();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_1C35B69FC();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1C3580744()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  swift_bridgeObjectRetain();
  v0 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    sub_1C35B6CA8();
    if (!v1)
      break;
    v2 = sub_1C35B6C3C();
    v4 = v3;
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v0 = sub_1C357FE54(0, v0[2] + 1, 1, v0);
      v6 = v0[2];
      v5 = v0[3];
      if (v6 >= v5 >> 1)
        v0 = sub_1C357FE54((_QWORD *)(v5 > 1), v6 + 1, 1, v0);
      v0[2] = v6 + 1;
      v0[v6 + 4] = v2;
    }
  }
  swift_bridgeObjectRelease();
  v7 = v0[2];
  if ((v7 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  v8 = sub_1C35B6C90();
  swift_bridgeObjectRelease();
  if (v7 != v8)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = sub_1C35806B0(v7 >> 1);
  if (v7)
  {
    v11 = v0[2];
    if (v11)
    {
      if (v11 > 1)
      {
        v12 = v0[5] | (16 * v0[4]);
        if ((v12 & 0x8000000000000000) == 0 && v12 < 0x100)
          __asm { BR              X11 }
        sub_1C35B6EC4();
        __break(1u);
        JUMPOUT(0x1C3580A74);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  v13 = v9;
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1C3580A84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C3580B78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C3580C68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C3580D58(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

char *sub_1C3580E48(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C3580F2C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C3581030(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  _OWORD v37[3];
  _OWORD v38[2];
  __int128 v39;
  _OWORD v40[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9CC8);
    v2 = sub_1C35B6F00();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v28 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v27)
        goto LABEL_37;
      v14 = *(_QWORD *)(v28 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v27)
          goto LABEL_37;
        v14 = *(_QWORD *)(v28 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v27)
            goto LABEL_37;
          v14 = *(_QWORD *)(v28 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    sub_1C3575174(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(_QWORD *)&v39 = v19;
    *((_QWORD *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(_QWORD *)&v37[0] = v19;
    *((_QWORD *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1C3573DC0(v38, v32);
    v33 = v29;
    v34 = v30;
    v35 = v31;
    sub_1C3573DC0(v32, v36);
    v29 = v33;
    v30 = v34;
    v31 = v35;
    sub_1C3573DC0(v36, v37);
    sub_1C3573DC0(v37, &v33);
    result = sub_1C35B6DD4();
    v20 = -1 << *(_BYTE *)(v2 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(_QWORD *)(v10 + 32) = v31;
    result = (uint64_t)sub_1C3573DC0(&v33, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_1C3584624();
    return v2;
  }
  v14 = *(_QWORD *)(v28 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

id sub_1C3581434()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AlphonsoSwiftDecoder()), sel_init);
  qword_1EF8D9C70 = (uint64_t)result;
  return result;
}

uint64_t sub_1C35815C8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t inited;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9CD0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C35BB480;
  *(_QWORD *)(inited + 32) = 0x61655273656C6966;
  *(_QWORD *)(inited + 40) = 0xE900000000000064;
  *(_QWORD *)(inited + 48) = 193;
  *(_WORD *)(inited + 56) = 0;
  *(_QWORD *)(inited + 64) = 0;
  *(_QWORD *)(inited + 72) = 0;
  *(_BYTE *)(inited + 80) = -64;
  *(_QWORD *)(inited + 88) = &unk_1E7D8B0E0;
  strcpy((char *)(inited + 96), "filesWritten");
  *(_BYTE *)(inited + 109) = 0;
  *(_WORD *)(inited + 110) = -5120;
  *(_QWORD *)(inited + 112) = 194;
  *(_WORD *)(inited + 120) = 0;
  *(_QWORD *)(inited + 128) = 0;
  *(_QWORD *)(inited + 136) = 0;
  *(_BYTE *)(inited + 144) = -64;
  *(_QWORD *)(inited + 152) = &unk_1E7D8B130;
  v10 = 225;
  v11 = 0;
  v12 = inited;
  v13 = 1;
  v14 = 64;
  v15 = MEMORY[0x1E0DEE9D8];
  v8 = a1;
  v9 = a2;
  sub_1C3573E48(a1, a2);
  v6 = sub_1C35AE2E8(&v8, (uint64_t)&v10);
  sub_1C3573D7C(v8, v9);
  if (v2)
  {
    sub_1C3573D7C(a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    inited = sub_1C3582968(v6);
    sub_1C3573D7C(a1, a2);
  }
  return inited;
}

id sub_1C3581988()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AlphonsoSwiftDecoder();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for AlphonsoSwiftDecoder()
{
  return objc_opt_self();
}

uint64_t sub_1C35819DC()
{
  uint64_t v0;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9A78);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C35BBBA0;
  *(_QWORD *)(v0 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 25541);
  *(_QWORD *)(v0 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 25540);
  *(_QWORD *)(v0 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 25539);
  *(_QWORD *)(v0 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 25538);
  *(_QWORD *)(v0 + 64) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 25537);
  *(_QWORD *)(v0 + 72) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 25536);
  result = sub_1C35B6CF0();
  qword_1EF8D9C78 = v0;
  return result;
}

uint64_t sub_1C3581ADC()
{
  uint64_t v0;

  v0 = sub_1C35B6AE0();
  __swift_allocate_value_buffer(v0, qword_1EF8D9C80);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF8D9C80);
  return sub_1C35B6AD4();
}

_OWORD *sub_1C3581B50@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _OWORD *a5@<X8>)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _OWORD *result;
  uint64_t v22;
  char v23;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = sub_1C35ABC5C(a2, a3);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a4 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        sub_1C3573DC0((_OWORD *)(v20[7] + 32 * v14), a5);
        return sub_1C3573DC0(a1, (_OWORD *)(v20[7] + 32 * v14));
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a4 & 1) == 0)
    {
      sub_1C359DB10();
      goto LABEL_7;
    }
    sub_1C359C75C(v17, a4 & 1);
    v22 = sub_1C35ABC5C(a2, a3);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1C359DA60(v14, a2, a3, a1, v20);
      *a5 = 0u;
      a5[1] = 0u;
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)sub_1C35B6F6C();
  __break(1u);
  return result;
}

void sub_1C3581CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!__OFADD__(a3, 2))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1C3581F48);
}

void sub_1C3581F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!__OFADD__(a3, 1))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1C358220CLL);
}

void sub_1C3582240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!__OFADD__(a3, 4))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1C35824E0);
}

void sub_1C3582514(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

unint64_t sub_1C3582568()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v7;
  char v8;
  unint64_t result;
  __int16 v10;
  __int16 v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _QWORD *v29;

  if (BYTE6(v2) == 5)
  {
    sub_1C3573E48(v3, v2);
    sub_1C3581F7C(v3, v2, 2);
    v8 = v7;
    result = sub_1C3573D7C(v3, v2);
    if (!v1)
    {
      sub_1C3573E48(v3, v2);
      sub_1C3581CA4(v3, v2, 3);
      v11 = v10;
      sub_1C3573D7C(v3, v2);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9C10);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C35BBB80;
      *(_QWORD *)(inited + 32) = sub_1C35B6C60();
      *(_QWORD *)(inited + 40) = v13;
      v14 = sub_1C35B6C60();
      v15 = MEMORY[0x1E0DEA968];
      *(_QWORD *)(inited + 48) = v14;
      *(_QWORD *)(inited + 56) = v16;
      *(_QWORD *)(inited + 72) = v15;
      *(_QWORD *)(inited + 80) = 0xD000000000000010;
      *(_QWORD *)(inited + 120) = v15;
      *(_QWORD *)(inited + 88) = 0x80000001C35C52D0;
      *(_QWORD *)(inited + 96) = v5;
      *(_QWORD *)(inited + 104) = v0;
      *(_QWORD *)(inited + 128) = sub_1C35B6C60();
      *(_QWORD *)(inited + 136) = v17;
      v18 = MEMORY[0x1E0DEDE70];
      *(_QWORD *)(inited + 168) = MEMORY[0x1E0DEDE70];
      *(_BYTE *)(inited + 144) = v4;
      *(_QWORD *)(inited + 176) = sub_1C35B6C60();
      *(_QWORD *)(inited + 184) = v19;
      *(_BYTE *)(inited + 192) = v8;
      *(_QWORD *)(inited + 216) = v18;
      strcpy((char *)(inited + 224), "selectStatus");
      *(_BYTE *)(inited + 237) = 0;
      *(_WORD *)(inited + 238) = -5120;
      *(_QWORD *)(inited + 264) = MEMORY[0x1E0DEE068];
      *(_WORD *)(inited + 240) = v11;
      *(_QWORD *)(inited + 272) = sub_1C35B6C60();
      *(_QWORD *)(inited + 280) = v20;
      *(_QWORD *)(inited + 312) = MEMORY[0x1E0DEAFA0];
      *(_BYTE *)(inited + 288) = 1;
      *(_QWORD *)(inited + 320) = sub_1C35B6C60();
      *(_QWORD *)(inited + 328) = v21;
      v22 = MEMORY[0x1E0DEB418];
      *(_QWORD *)(inited + 360) = MEMORY[0x1E0DEB418];
      *(_QWORD *)(inited + 336) = 0;
      *(_QWORD *)(inited + 368) = sub_1C35B6C60();
      *(_QWORD *)(inited + 376) = v23;
      *(_QWORD *)(inited + 408) = v22;
      *(_QWORD *)(inited + 384) = 0;
      *(_QWORD *)(inited + 416) = sub_1C35B6C60();
      *(_QWORD *)(inited + 424) = v24;
      *(_QWORD *)(inited + 456) = v22;
      *(_QWORD *)(inited + 432) = 2000;
      swift_bridgeObjectRetain();
      return sub_1C35AAF90(inited);
    }
  }
  else
  {
    if (qword_1EF8D99E0 != -1)
      swift_once();
    v25 = sub_1C35B6AE0();
    __swift_project_value_buffer(v25, (uint64_t)qword_1EF8D9C80);
    v26 = sub_1C3573E48(v3, v2);
    v27 = sub_1C35B6AC8(v26);
    v28 = sub_1C35B6D50();
    if (os_log_type_enabled(v27, v28))
    {
      *(_DWORD *)swift_slowAlloc() = 134218240;
      __asm { BR              X11 }
    }
    sub_1C3573D7C(v3, v2);

    type metadata accessor for ATLError(0);
    sub_1C357D200();
    swift_allocError();
    *v29 = 3;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1C3582968(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unsigned __int16 v20;
  unsigned __int16 v21;

  if (a1 >> 61 != 3)
  {
    sub_1C358462C();
    swift_allocError();
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)v16 = 4;
    *(_BYTE *)(v16 + 24) = 3;
    swift_willThrow();
    goto LABEL_13;
  }
  v3 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(v3 + 16))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = sub_1C35ABC5C(0x61655273656C6966, 0xE900000000000064);
  if ((v5 & 1) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
  if (v6 >> 61 != 1)
  {
    sub_1C358462C();
    swift_allocError();
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 16) = 0;
    *(_QWORD *)v17 = 4;
    *(_BYTE *)(v17 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 16);
  v7 = *(_QWORD *)(v6 + 24);
  v9 = *(_QWORD *)(v3 + 16);
  sub_1C3573E48(v8, v7);
  if (v9)
  {
    v10 = sub_1C35ABC5C(0x69725773656C6966, 0xEC0000006E657474);
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v10);
      swift_retain();
      swift_bridgeObjectRelease();
      if (v12 >> 61 == 1)
      {
        v13 = *(_QWORD *)((v12 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
        v14 = *(_QWORD *)((v12 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
        sub_1C3573E48(v13, v14);
        swift_release();
        sub_1C3573E48(v8, v7);
        sub_1C3581CA4(v8, v7, 0);
        v2 = v15;
        sub_1C3573D7C(v8, v7);
        if (v1)
        {
          swift_release();
          sub_1C3573D7C(v8, v7);
          sub_1C3573D7C(v13, v14);
        }
        else
        {
          sub_1C3581CA4(v13, v14, 0);
          v21 = v20;
          sub_1C3573D7C(v13, v14);
          sub_1C3573D7C(v8, v7);
          swift_release();
          return (unsigned __int16)v2 | (v21 << 16);
        }
        return v2;
      }
      sub_1C358462C();
      swift_allocError();
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = 0;
      *(_QWORD *)v18 = 4;
      *(_BYTE *)(v18 + 24) = 3;
      swift_willThrow();
      swift_release();
      sub_1C3573D7C(v8, v7);
LABEL_13:
      swift_release();
      return v2;
    }
  }
LABEL_18:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

void sub_1C3582C58(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

unint64_t sub_1C3582CAC()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  unsigned __int16 v7;
  unsigned __int16 v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  char v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  int v33;
  uint64_t v34;
  int v35;

  if (BYTE6(v2) == 19)
  {
    sub_1C3573E48(v3, v2);
    sub_1C3581CA4(v3, v2, 2);
    v8 = v7;
    sub_1C3573D7C(v3, v2);
    if (!v0)
    {
      sub_1C3573E48(v3, v2);
      sub_1C3582240(v3, v2, 4);
      v10 = v9;
      sub_1C3573D7C(v3, v2);
      v35 = v10;
      v11 = sub_1C35B6A8C();
      v13 = v12;
      sub_1C3573E48(v11, v12);
      v33 = sub_1C35815C8(v11, v13);
      v34 = v11;
      sub_1C3573E48(v3, v2);
      sub_1C3581F7C(v3, v2, 18);
      LOBYTE(v11) = v19;
      sub_1C3573D7C(v3, v2);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9C10);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C35BBB50;
      *(_QWORD *)(inited + 32) = sub_1C35B6C60();
      *(_QWORD *)(inited + 40) = v21;
      v22 = sub_1C35B6C60();
      v23 = MEMORY[0x1E0DEA968];
      *(_QWORD *)(inited + 48) = v22;
      *(_QWORD *)(inited + 56) = v24;
      *(_QWORD *)(inited + 72) = v23;
      *(_QWORD *)(inited + 80) = 0xD000000000000010;
      *(_QWORD *)(inited + 120) = v23;
      *(_QWORD *)(inited + 88) = 0x80000001C35C52D0;
      *(_QWORD *)(inited + 96) = v5;
      *(_QWORD *)(inited + 104) = v1;
      *(_QWORD *)(inited + 128) = sub_1C35B6C60();
      *(_QWORD *)(inited + 136) = v25;
      v26 = MEMORY[0x1E0DEDE70];
      *(_BYTE *)(inited + 144) = v4;
      *(_QWORD *)(inited + 168) = v26;
      *(_QWORD *)(inited + 176) = 0x737574617473;
      *(_QWORD *)(inited + 184) = 0xE600000000000000;
      v27 = MEMORY[0x1E0DEE068];
      *(_WORD *)(inited + 192) = v8;
      *(_QWORD *)(inited + 216) = v27;
      *(_QWORD *)(inited + 224) = 0x646E616D6D6F63;
      *(_QWORD *)(inited + 232) = 0xE700000000000000;
      *(_QWORD *)(inited + 264) = MEMORY[0x1E0DEE0F8];
      *(_DWORD *)(inited + 240) = v35;
      *(_QWORD *)(inited + 272) = sub_1C35B6C60();
      *(_QWORD *)(inited + 280) = v28;
      *(_QWORD *)(inited + 312) = v27;
      *(_WORD *)(inited + 288) = v33;
      *(_QWORD *)(inited + 320) = sub_1C35B6C60();
      *(_QWORD *)(inited + 328) = v29;
      *(_WORD *)(inited + 336) = HIWORD(v33);
      *(_QWORD *)(inited + 360) = v27;
      *(_QWORD *)(inited + 368) = 0xD000000000000012;
      *(_QWORD *)(inited + 376) = 0x80000001C35C5570;
      *(_BYTE *)(inited + 384) = v11;
      *(_QWORD *)(inited + 408) = v26;
      *(_QWORD *)(inited + 416) = 0x726F727245646964;
      *(_QWORD *)(inited + 424) = 0xE800000000000000;
      v30 = MEMORY[0x1E0DEAFA0];
      *(_BYTE *)(inited + 432) = v8 != 36864;
      *(_QWORD *)(inited + 456) = v30;
      *(_QWORD *)(inited + 464) = 0x746C75736572;
      *(_QWORD *)(inited + 472) = 0xE600000000000000;
      v31 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
      swift_bridgeObjectRetain();
      v32 = objc_msgSend(v31, sel_initWithUnsignedShort_, (v8 == 36864) << 6);
      *(_QWORD *)(inited + 504) = sub_1C3575208(0, &qword_1EF8D9A00);
      *(_QWORD *)(inited + 480) = v32;
      v1 = sub_1C35AAF90(inited);
      sub_1C3573D7C(v34, v13);
    }
  }
  else
  {
    if (qword_1EF8D99E0 != -1)
      swift_once();
    v14 = sub_1C35B6AE0();
    __swift_project_value_buffer(v14, (uint64_t)qword_1EF8D9C80);
    v15 = sub_1C3573E48(v3, v2);
    v16 = sub_1C35B6AC8(v15);
    v1 = sub_1C35B6D50();
    if (os_log_type_enabled(v16, (os_log_type_t)v1))
    {
      *(_DWORD *)swift_slowAlloc() = 134218240;
      __asm { BR              X11 }
    }
    sub_1C3573D7C(v3, v2);

    type metadata accessor for ATLError(0);
    sub_1C357D200();
    swift_allocError();
    *v17 = 3;
    swift_willThrow();
  }
  return v1;
}

void sub_1C35831F4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

unint64_t sub_1C3583248()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;
  unint64_t result;
  __int16 v10;
  __int16 v11;
  char v12;
  char v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _QWORD *v28;

  if (BYTE6(v0) == 6)
  {
    sub_1C3573E48(v2, v0);
    sub_1C3581F7C(v2, v0, 2);
    v8 = v7;
    result = sub_1C3573D7C(v2, v0);
    if (!v4)
    {
      sub_1C3573E48(v2, v0);
      sub_1C3581CA4(v2, v0, 3);
      v11 = v10;
      sub_1C3573D7C(v2, v0);
      sub_1C3573E48(v2, v0);
      sub_1C3581F7C(v2, v0, 5);
      v13 = v12;
      sub_1C3573D7C(v2, v0);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9C10);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C35BBBB0;
      *(_QWORD *)(inited + 32) = sub_1C35B6C60();
      *(_QWORD *)(inited + 40) = v15;
      v16 = sub_1C35B6C60();
      v17 = MEMORY[0x1E0DEA968];
      *(_QWORD *)(inited + 48) = v16;
      *(_QWORD *)(inited + 56) = v18;
      *(_QWORD *)(inited + 72) = v17;
      *(_QWORD *)(inited + 80) = 0xD000000000000010;
      *(_QWORD *)(inited + 120) = v17;
      *(_QWORD *)(inited + 88) = 0x80000001C35C52D0;
      *(_QWORD *)(inited + 96) = v5;
      *(_QWORD *)(inited + 104) = v1;
      *(_QWORD *)(inited + 128) = sub_1C35B6C60();
      *(_QWORD *)(inited + 136) = v19;
      v20 = MEMORY[0x1E0DEDE70];
      *(_QWORD *)(inited + 168) = MEMORY[0x1E0DEDE70];
      *(_BYTE *)(inited + 144) = v3;
      *(_QWORD *)(inited + 176) = sub_1C35B6C60();
      *(_QWORD *)(inited + 184) = v21;
      *(_QWORD *)(inited + 216) = v20;
      *(_BYTE *)(inited + 192) = v8;
      *(_QWORD *)(inited + 224) = sub_1C35B6C60();
      *(_QWORD *)(inited + 232) = v22;
      *(_QWORD *)(inited + 264) = MEMORY[0x1E0DEE068];
      *(_WORD *)(inited + 240) = v11;
      *(_QWORD *)(inited + 272) = sub_1C35B6C60();
      *(_QWORD *)(inited + 280) = v23;
      *(_QWORD *)(inited + 312) = v20;
      *(_BYTE *)(inited + 288) = v13;
      swift_bridgeObjectRetain();
      return sub_1C35AAF90(inited);
    }
  }
  else
  {
    if (qword_1EF8D99E0 != -1)
      swift_once();
    v24 = sub_1C35B6AE0();
    __swift_project_value_buffer(v24, (uint64_t)qword_1EF8D9C80);
    v25 = sub_1C3573E48(v2, v0);
    v26 = sub_1C35B6AC8(v25);
    v27 = sub_1C35B6D50();
    if (os_log_type_enabled(v26, v27))
    {
      *(_DWORD *)swift_slowAlloc() = 134218240;
      __asm { BR              X11 }
    }
    sub_1C3573D7C(v2, v0);

    type metadata accessor for ATLError(0);
    sub_1C357D200();
    swift_allocError();
    *v28 = 3;
    return swift_willThrow();
  }
  return result;
}

void sub_1C3583614(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1C3583664()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  const char *v8;
  _QWORD *v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (BYTE6(v1) < 2uLL)
  {
    if (qword_1EF8D99E0 != -1)
      swift_once();
    v3 = sub_1C35B6AE0();
    v4 = __swift_project_value_buffer(v3, (uint64_t)qword_1EF8D9C80);
    v5 = sub_1C35B6AC8(v4);
    v6 = sub_1C35B6D50();
    if (!os_log_type_enabled(v5, v6))
      goto LABEL_7;
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    v8 = "Invalid event data";
LABEL_6:
    _os_log_impl(&dword_1C3511000, v5, v6, v8, v7, 2u);
    MEMORY[0x1C3BD380C](v7, -1, -1);
LABEL_7:

    type metadata accessor for ATLError(0);
    sub_1C357D200();
    swift_allocError();
    *v9 = 3;
    swift_willThrow();
    return;
  }
  sub_1C3573E48(v2, v1);
  sub_1C3581F7C(v2, v1, 0);
  v11 = v10;
  sub_1C3573D7C(v2, v1);
  if (!v0)
  {
    sub_1C3573E48(v2, v1);
    sub_1C3581F7C(v2, v1, 1);
    v13 = v12;
    sub_1C3573D7C(v2, v1);
    if (v13 != 8)
    {
      if (qword_1EF8D99E0 != -1)
        swift_once();
      v15 = sub_1C35B6AE0();
      v16 = __swift_project_value_buffer(v15, (uint64_t)qword_1EF8D9C80);
      v5 = sub_1C35B6AC8(v16);
      v6 = sub_1C35B6D50();
      if (!os_log_type_enabled(v5, v6))
        goto LABEL_7;
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      v8 = "Invalid hci event version";
      goto LABEL_6;
    }
    switch(v11)
    {
      case 1:
        sub_1C3582514(v2, v1);
        goto LABEL_20;
      case 2:
        sub_1C3582C58(v2, v1);
        goto LABEL_20;
      case 3:
        sub_1C35831F4(v2, v1);
LABEL_20:
        sub_1C3581030(v14);
        swift_bridgeObjectRelease();
        return;
      case 18:
        goto LABEL_27;
      default:
        if (qword_1EF8D99E0 != -1)
          swift_once();
        v17 = sub_1C35B6AE0();
        __swift_project_value_buffer(v17, (uint64_t)qword_1EF8D9C80);
        sub_1C3573E48(v2, v1);
        v18 = sub_1C3573E48(v2, v1);
        v19 = sub_1C35B6AC8(v18);
        v20 = sub_1C35B6D38();
        if (os_log_type_enabled(v19, v20))
        {
          v21 = swift_slowAlloc();
          v25 = swift_slowAlloc();
          v26 = v25;
          *(_DWORD *)v21 = 16777730;
          sub_1C35B6D98();
          *(_WORD *)(v21 + 5) = 2080;
          sub_1C3573E48(v2, v1);
          v22 = sub_1C35B69F0();
          v24 = v23;
          sub_1C3573D7C(v2, v1);
          sub_1C3598590(v22, v24, &v26);
          sub_1C35B6D98();
          swift_bridgeObjectRelease();
          sub_1C3573D7C(v2, v1);
          sub_1C3573D7C(v2, v1);
          _os_log_impl(&dword_1C3511000, v19, v20, "Unkown event with event type %hhu and contents %s", (uint8_t *)v21, 0xFu);
          swift_arrayDestroy();
          MEMORY[0x1C3BD380C](v25, -1, -1);
          MEMORY[0x1C3BD380C](v21, -1, -1);
        }
        else
        {
          sub_1C3573D7C(v2, v1);
          sub_1C3573D7C(v2, v1);
        }

LABEL_27:
        sub_1C35AB35C(MEMORY[0x1E0DEE9D8]);
        break;
    }
  }
}

uint64_t sub_1C3583B8C(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  int SW;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  void *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t result;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  __int128 v96;
  __int128 v97;
  _OWORD v98[2];
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9C10);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C35BB480;
  *(_QWORD *)(inited + 32) = sub_1C35B6C60();
  *(_QWORD *)(inited + 40) = v7;
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(inited + 48) = 0;
  *(_QWORD *)(inited + 80) = sub_1C35B6C60();
  *(_QWORD *)(inited + 88) = v8;
  *(_QWORD *)(inited + 120) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9CC0);
  *(_QWORD *)(inited + 96) = MEMORY[0x1E0DEE9D8];
  v9 = sub_1C35AAF90(inited);
  swift_bridgeObjectRetain();
  v10 = sub_1C3580744();
  if (v11 >> 60 == 15)
    __break(1u);
  v12 = v10;
  v13 = v11;
  v14 = (void *)sub_1C35B6A44();
  sub_1C3574174(v12, v13);
  v15 = (id)SelectByNameCmd(v14);

  v16 = sub_1C35B6A5C();
  v18 = v17;

  v19 = (void *)sub_1C35B6A44();
  *(_QWORD *)&v98[0] = 0;
  v20 = objc_msgSend(a1, sel_transceiveAndCheckSW_error_, v19, v98);

  v21 = *(id *)&v98[0];
  if (!v20)
  {
    v67 = v21;
    v68 = (void *)sub_1C35B69C0();

    swift_willThrow();
    if (qword_1EF8D99E0 != -1)
      swift_once();
    v69 = sub_1C35B6AE0();
    __swift_project_value_buffer(v69, (uint64_t)qword_1EF8D9C80);
    v70 = swift_bridgeObjectRetain_n();
    v71 = sub_1C35B6AC8(v70);
    v72 = sub_1C35B6D50();
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc();
      v74 = swift_slowAlloc();
      *(_QWORD *)&v98[0] = v74;
      *(_DWORD *)v73 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v96 = sub_1C3598590(a2, a3, (uint64_t *)v98);
      sub_1C35B6D98();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C3511000, v71, v72, "Could not SELECT %s while getting applet state and history", v73, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BD380C](v74, -1, -1);
      MEMORY[0x1C3BD380C](v73, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v28 = sub_1C35AB35C(MEMORY[0x1E0DEE9D8]);
    sub_1C3573D7C(v16, v18);
    swift_bridgeObjectRelease();
    return v28;
  }
  v93 = (_QWORD *)v9;
  v94 = v16;
  v92 = v18;
  v22 = sub_1C35B6A5C();
  v24 = v23;

  sub_1C3573D7C(v22, v24);
  v25 = sub_1C3576F64((uint64_t)&unk_1E7D8B180);
  v27 = v26;
  v99 = v25;
  v100 = v26;
  sub_1C3573E48(v25, v26);
  sub_1C35B6ABC();
  sub_1C3573D7C(v25, v27);
  sub_1C35B6A38();
  v29 = v99;
  v28 = v100;
  sub_1C3573E48(v99, v100);
  v30 = (void *)sub_1C35B6A44();
  sub_1C3573D7C(v29, v28);
  if (qword_1EF8D99D8 != -1)
    swift_once();
  sub_1C3575208(0, &qword_1EF8D9A00);
  v31 = (void *)sub_1C35B6CD8();
  *(_QWORD *)&v98[0] = 0;
  v32 = objc_msgSend(a1, sel_transceiveAndCheckSW_inArray_keepingSW_error_, v30, v31, 1, v98);

  v33 = *(id *)&v98[0];
  if (!v32)
  {
    v75 = v33;
    sub_1C35B69C0();

    swift_willThrow();
    sub_1C3573D7C(v94, v92);
    v76 = v29;
    v77 = v28;
LABEL_21:
    sub_1C3573D7C(v76, v77);
    swift_bridgeObjectRelease();
    return v28;
  }
  v91 = sub_1C35B6A5C();
  v35 = v34;

  sub_1C35B6ABC();
  sub_1C35B6A38();
  v28 = v99;
  v36 = v100;
  sub_1C3573E48(v99, v100);
  v37 = (void *)sub_1C35B6A44();
  sub_1C3573D7C(v28, v36);
  v38 = (void *)sub_1C35B6CD8();
  *(_QWORD *)&v98[0] = 0;
  v39 = objc_msgSend(a1, sel_transceiveAndCheckSW_inArray_keepingSW_error_, v37, v38, 1, v98);

  v40 = *(id *)&v98[0];
  if (!v39)
  {
    v78 = v40;
    sub_1C35B69C0();

    swift_willThrow();
    sub_1C3573D7C(v94, v92);
    sub_1C3573D7C(v91, v35);
    v76 = v28;
    v77 = v36;
    goto LABEL_21;
  }
  v41 = sub_1C35B6A5C();
  v43 = v42;

  v44 = v91;
  v45 = (void *)sub_1C35B6A44();
  SW = GetSW(v45);

  v47 = v94;
  if (SW == 25536)
  {
    *((_QWORD *)&v97 + 1) = MEMORY[0x1E0DEAFA0];
    LOBYTE(v96) = 1;
    v48 = sub_1C35B6C60();
    v50 = v49;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1C3581B50(&v96, v48, v50, isUniquelyReferenced_nonNull_native, v98);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1C35752C4((uint64_t)v98);
    *((_QWORD *)&v97 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
    *(_QWORD *)&v96 = &unk_1E7D8B1A8;
    v52 = sub_1C35B6C60();
    v54 = v53;
    v55 = swift_isUniquelyReferenced_nonNull_native();
    v56 = v52;
    v44 = v91;
    sub_1C3581B50(&v96, v56, v54, v55, v98);
    v47 = v94;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1C35752C4((uint64_t)v98);
  }
  v57 = (void *)sub_1C35B6A44();
  v58 = GetSW(v57);

  if (v58 != 25536)
    goto LABEL_29;
  *((_QWORD *)&v97 + 1) = MEMORY[0x1E0DEAFA0];
  LOBYTE(v96) = 1;
  v59 = sub_1C35B6C60();
  v61 = v60;
  v62 = swift_isUniquelyReferenced_nonNull_native();
  v95 = (_QWORD *)v9;
  sub_1C3581B50(&v96, v59, v61, v62, v98);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1C35752C4((uint64_t)v98);
  v63 = sub_1C35B6C60();
  if (*(_QWORD *)(v9 + 16) && (v65 = sub_1C35ABC5C(v63, v64), (v66 & 1) != 0))
  {
    sub_1C3575174(*(_QWORD *)(v9 + 56) + 32 * v65, (uint64_t)&v96);
  }
  else
  {
    v96 = 0u;
    v97 = 0u;
  }
  v79 = v47;
  result = swift_bridgeObjectRelease();
  if (*((_QWORD *)&v97 + 1))
  {
    sub_1C3573DC0(&v96, v98);
    v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
    swift_dynamicCast();
    v82 = v93;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v82 = sub_1C358006C(0, v93[2] + 1, 1, v93);
      v95 = v82;
    }
    v84 = v82[2];
    v83 = v82[3];
    if (v84 >= v83 >> 1)
    {
      v82 = sub_1C358006C((_QWORD *)(v83 > 1), v84 + 1, 1, v82);
      v95 = v82;
    }
    v82[2] = v84 + 1;
    v85 = &v82[2 * v84];
    v85[4] = 0xD00000000000001ELL;
    v85[5] = 0x80000001C35C54F0;
    *((_QWORD *)&v97 + 1) = v81;
    *(_QWORD *)&v96 = v95;
    v86 = sub_1C35B6C60();
    v88 = v87;
    swift_bridgeObjectRetain();
    v89 = swift_isUniquelyReferenced_nonNull_native();
    sub_1C3581B50(&v96, v86, v88, v89, v98);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1C35752C4((uint64_t)v98);
    swift_bridgeObjectRelease();
    v44 = v91;
    v47 = v79;
LABEL_29:
    v90 = swift_bridgeObjectRetain();
    v28 = sub_1C3581030(v90);
    sub_1C3573D7C(v47, v92);
    swift_bridgeObjectRelease();
    sub_1C3573D7C(v41, v43);
    sub_1C3573D7C(v44, v35);
    sub_1C3573D7C(v99, v100);
    swift_bridgeObjectRelease();
    return v28;
  }
  __break(1u);
  return result;
}

unint64_t sub_1C3584538()
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9C18);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C35BB480;
  sub_1C35B6C60();
  sub_1C35B6DEC();
  *(_QWORD *)(inited + 96) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(inited + 72) = 1;
  sub_1C35B6C60();
  sub_1C35B6DEC();
  *(_QWORD *)(inited + 168) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 144) = 2000;
  return sub_1C35AB35C(inited);
}

uint64_t sub_1C3584624()
{
  return swift_release();
}

unint64_t sub_1C358462C()
{
  unint64_t result;

  result = qword_1EF8D9CD8;
  if (!qword_1EF8D9CD8)
  {
    result = MEMORY[0x1C3BD3788](&unk_1C35BC024, &type metadata for ASN1Error);
    atomic_store(result, (unint64_t *)&qword_1EF8D9CD8);
  }
  return result;
}

uint64_t sub_1C3584670(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  uint64_t v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)&v6[0] = a1;
  *((_QWORD *)&v6[0] + 1) = a2;
  swift_bridgeObjectRetain_n();
  v3 = objc_msgSend(v2, sel___swift_objectForKeyedSubscript_, sub_1C35B6F54());
  swift_unknownObjectRelease();
  if (v3)
  {
    sub_1C35B6DBC();
    swift_unknownObjectRelease();
    sub_1C3573DC0(v6, &v7);
    swift_bridgeObjectRelease();
    sub_1C3575174((uint64_t)&v7, (uint64_t)v6);
    if ((swift_dynamicCast() & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v7);
      return v5;
    }
    else
    {
      sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
      *(_QWORD *)&v6[0] = 0;
      *((_QWORD *)&v6[0] + 1) = 0xE000000000000000;
      sub_1C35B6E10();
      swift_bridgeObjectRelease();
      strcpy((char *)v6, "Value for key ");
      HIBYTE(v6[0]) = -18;
      sub_1C35B6C9C();
      sub_1C35B6C9C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9ED0);
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C35B6C9C();
      __swift_project_boxed_opaque_existential_1Tm(&v7, v8);
      swift_getDynamicType();
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C3577C3C(*(uint64_t *)&v6[0], *((uint64_t *)&v6[0] + 1), 8, 0);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v7);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
    sub_1C35B6E10();
    swift_bridgeObjectRelease();
    sub_1C35B6C9C();
    sub_1C3577C3C(0xD000000000000016, 0x80000001C35C5DC0, 8, 0);
    return swift_willThrow();
  }
}

uint64_t sub_1C358493C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  void *v3;
  void *v4;
  id v6;
  uint64_t result;
  __int128 v8;
  _OWORD v9[2];
  __int128 v10;
  uint64_t v11;

  v4 = v3;
  *(_QWORD *)&v9[0] = a1;
  *((_QWORD *)&v9[0] + 1) = a2;
  swift_bridgeObjectRetain_n();
  v6 = objc_msgSend(v4, sel___swift_objectForKeyedSubscript_, sub_1C35B6F54());
  swift_unknownObjectRelease();
  if (v6)
  {
    sub_1C35B6DBC();
    swift_unknownObjectRelease();
    sub_1C3573DC0(v9, &v10);
    swift_bridgeObjectRelease();
    sub_1C3575174((uint64_t)&v10, (uint64_t)v9);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9EC0);
    if ((swift_dynamicCast() & 1) != 0)
    {
      result = __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v10);
      *a3 = v8;
    }
    else
    {
      sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
      *(_QWORD *)&v9[0] = 0;
      *((_QWORD *)&v9[0] + 1) = 0xE000000000000000;
      sub_1C35B6E10();
      swift_bridgeObjectRelease();
      strcpy((char *)v9, "Value for key ");
      HIBYTE(v9[0]) = -18;
      sub_1C35B6C9C();
      sub_1C35B6C9C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9EC8);
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C35B6C9C();
      __swift_project_boxed_opaque_existential_1Tm(&v10, v11);
      swift_getDynamicType();
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C3577C3C(*(uint64_t *)&v9[0], *((uint64_t *)&v9[0] + 1), 8, 0);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v10);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
    sub_1C35B6E10();
    swift_bridgeObjectRelease();
    sub_1C35B6C9C();
    sub_1C3577C3C(0xD000000000000016, 0x80000001C35C5DC0, 8, 0);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1C3584C18(uint64_t a1, uint64_t a2)
{
  return sub_1C3584F30(a1, a2, &qword_1EF8D9EB0, &qword_1EF8D9EB8);
}

uint64_t sub_1C3584C3C(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  uint64_t v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)&v6[0] = a1;
  *((_QWORD *)&v6[0] + 1) = a2;
  swift_bridgeObjectRetain_n();
  v3 = objc_msgSend(v2, sel___swift_objectForKeyedSubscript_, sub_1C35B6F54());
  swift_unknownObjectRelease();
  if (v3)
  {
    sub_1C35B6DBC();
    swift_unknownObjectRelease();
    sub_1C3573DC0(v6, &v7);
    swift_bridgeObjectRelease();
    sub_1C3575174((uint64_t)&v7, (uint64_t)v6);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9EF8);
    if ((swift_dynamicCast() & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v7);
      return v5;
    }
    else
    {
      sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
      *(_QWORD *)&v6[0] = 0;
      *((_QWORD *)&v6[0] + 1) = 0xE000000000000000;
      sub_1C35B6E10();
      swift_bridgeObjectRelease();
      strcpy((char *)v6, "Value for key ");
      HIBYTE(v6[0]) = -18;
      sub_1C35B6C9C();
      sub_1C35B6C9C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9F00);
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C35B6C9C();
      __swift_project_boxed_opaque_existential_1Tm(&v7, v8);
      swift_getDynamicType();
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C3577C3C(*(uint64_t *)&v6[0], *((uint64_t *)&v6[0] + 1), 8, 0);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v7);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
    sub_1C35B6E10();
    swift_bridgeObjectRelease();
    sub_1C35B6C9C();
    sub_1C3577C3C(0xD000000000000016, 0x80000001C35C5DC0, 8, 0);
    return swift_willThrow();
  }
}

uint64_t sub_1C3584F0C(uint64_t a1, uint64_t a2)
{
  return sub_1C3584F30(a1, a2, &qword_1EF8D9EE8, &qword_1EF8D9EF0);
}

uint64_t sub_1C3584F30(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void *v4;
  id v7;
  _OWORD v9[2];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)&v9[0] = a1;
  *((_QWORD *)&v9[0] + 1) = a2;
  swift_bridgeObjectRetain_n();
  v7 = objc_msgSend(v4, sel___swift_objectForKeyedSubscript_, sub_1C35B6F54(), *(_QWORD *)&v9[0], *((_QWORD *)&v9[0] + 1));
  swift_unknownObjectRelease();
  if (v7)
  {
    sub_1C35B6DBC();
    swift_unknownObjectRelease();
    sub_1C3573DC0(v9, &v10);
    swift_bridgeObjectRelease();
    sub_1C3575174((uint64_t)&v10, (uint64_t)v9);
    __swift_instantiateConcreteTypeFromMangledName(a3);
    if ((swift_dynamicCast() & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v10);
      return v12;
    }
    else
    {
      sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
      *(_QWORD *)&v9[0] = 0;
      *((_QWORD *)&v9[0] + 1) = 0xE000000000000000;
      sub_1C35B6E10();
      swift_bridgeObjectRelease();
      strcpy((char *)v9, "Value for key ");
      HIBYTE(v9[0]) = -18;
      sub_1C35B6C9C();
      sub_1C35B6C9C();
      __swift_instantiateConcreteTypeFromMangledName(a4);
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C35B6C9C();
      __swift_project_boxed_opaque_existential_1Tm(&v10, v11);
      swift_getDynamicType();
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C3577C3C(*(uint64_t *)&v9[0], *((uint64_t *)&v9[0] + 1), 8, 0);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v10);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
    sub_1C35B6E10();
    swift_bridgeObjectRelease();
    sub_1C35B6C9C();
    sub_1C3577C3C(0xD000000000000016, 0x80000001C35C5DC0, 8, 0);
    return swift_willThrow();
  }
}

uint64_t sub_1C3585208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  void *v3;
  void *v4;
  id v6;
  uint64_t result;
  __int128 v8;
  _OWORD v9[2];
  __int128 v10;
  uint64_t v11;

  v4 = v3;
  *(_QWORD *)&v9[0] = a1;
  *((_QWORD *)&v9[0] + 1) = a2;
  swift_bridgeObjectRetain_n();
  v6 = objc_msgSend(v4, sel___swift_objectForKeyedSubscript_, sub_1C35B6F54());
  swift_unknownObjectRelease();
  if (v6)
  {
    sub_1C35B6DBC();
    swift_unknownObjectRelease();
    sub_1C3573DC0(v9, &v10);
    swift_bridgeObjectRelease();
    sub_1C3575174((uint64_t)&v10, (uint64_t)v9);
    if ((swift_dynamicCast() & 1) != 0)
    {
      result = __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v10);
      *a3 = v8;
    }
    else
    {
      sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
      *(_QWORD *)&v9[0] = 0;
      *((_QWORD *)&v9[0] + 1) = 0xE000000000000000;
      sub_1C35B6E10();
      swift_bridgeObjectRelease();
      strcpy((char *)v9, "Value for key ");
      HIBYTE(v9[0]) = -18;
      sub_1C35B6C9C();
      sub_1C35B6C9C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9ED8);
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C35B6C9C();
      __swift_project_boxed_opaque_existential_1Tm(&v10, v11);
      swift_getDynamicType();
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C3577C3C(*(uint64_t *)&v9[0], *((uint64_t *)&v9[0] + 1), 8, 0);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v10);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
    sub_1C35B6E10();
    swift_bridgeObjectRelease();
    sub_1C35B6C9C();
    sub_1C3577C3C(0xD000000000000016, 0x80000001C35C5DC0, 8, 0);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1C35854DC(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  uint64_t v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)&v6[0] = a1;
  *((_QWORD *)&v6[0] + 1) = a2;
  swift_bridgeObjectRetain_n();
  v3 = objc_msgSend(v2, sel___swift_objectForKeyedSubscript_, sub_1C35B6F54());
  swift_unknownObjectRelease();
  if (v3)
  {
    sub_1C35B6DBC();
    swift_unknownObjectRelease();
    sub_1C3573DC0(v6, &v7);
    swift_bridgeObjectRelease();
    sub_1C3575174((uint64_t)&v7, (uint64_t)v6);
    if ((swift_dynamicCast() & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v7);
      return v5;
    }
    else
    {
      sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
      *(_QWORD *)&v6[0] = 0;
      *((_QWORD *)&v6[0] + 1) = 0xE000000000000000;
      sub_1C35B6E10();
      swift_bridgeObjectRelease();
      strcpy((char *)v6, "Value for key ");
      HIBYTE(v6[0]) = -18;
      sub_1C35B6C9C();
      sub_1C35B6C9C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E50);
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C35B6C9C();
      __swift_project_boxed_opaque_existential_1Tm(&v7, v8);
      swift_getDynamicType();
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C3577C3C(*(uint64_t *)&v6[0], *((uint64_t *)&v6[0] + 1), 8, 0);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v7);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
    sub_1C35B6E10();
    swift_bridgeObjectRelease();
    sub_1C35B6C9C();
    sub_1C3577C3C(0xD000000000000016, 0x80000001C35C5DC0, 8, 0);
    return swift_willThrow();
  }
}

uint64_t sub_1C35857A4(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  uint64_t v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)&v6[0] = a1;
  *((_QWORD *)&v6[0] + 1) = a2;
  swift_bridgeObjectRetain_n();
  v3 = objc_msgSend(v2, sel___swift_objectForKeyedSubscript_, sub_1C35B6F54());
  swift_unknownObjectRelease();
  if (v3)
  {
    sub_1C35B6DBC();
    swift_unknownObjectRelease();
    sub_1C3573DC0(v6, &v7);
    swift_bridgeObjectRelease();
    sub_1C3575174((uint64_t)&v7, (uint64_t)v6);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9EF8);
    if ((swift_dynamicCast() & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v7);
      return v5;
    }
    else
    {
      sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
      *(_QWORD *)&v6[0] = 0;
      *((_QWORD *)&v6[0] + 1) = 0xE000000000000000;
      sub_1C35B6E10();
      swift_bridgeObjectRelease();
      strcpy((char *)v6, "Value for key ");
      HIBYTE(v6[0]) = -18;
      sub_1C35B6C9C();
      sub_1C35B6C9C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9F00);
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C35B6C9C();
      __swift_project_boxed_opaque_existential_1Tm(&v7, v8);
      swift_getDynamicType();
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C3577C3C(*(uint64_t *)&v6[0], *((uint64_t *)&v6[0] + 1), 8, 0);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v7);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t sub_1C35859F8(uint64_t a1, uint64_t a2)
{
  return sub_1C3586114(a1, a2, &qword_1EF8D9A70, &qword_1EF8D9EE0);
}

uint64_t sub_1C3585A1C(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  _OWORD v5[2];
  __int128 v6;
  uint64_t v7;
  unsigned __int8 v8;

  *(_QWORD *)&v5[0] = a1;
  *((_QWORD *)&v5[0] + 1) = a2;
  swift_bridgeObjectRetain_n();
  v3 = objc_msgSend(v2, sel___swift_objectForKeyedSubscript_, sub_1C35B6F54(), *(_QWORD *)&v5[0], *((_QWORD *)&v5[0] + 1));
  swift_unknownObjectRelease();
  if (v3)
  {
    sub_1C35B6DBC();
    swift_unknownObjectRelease();
    sub_1C3573DC0(v5, &v6);
    swift_bridgeObjectRelease();
    sub_1C3575174((uint64_t)&v6, (uint64_t)v5);
    if ((swift_dynamicCast() & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v6);
      return v8;
    }
    else
    {
      sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
      *(_QWORD *)&v5[0] = 0;
      *((_QWORD *)&v5[0] + 1) = 0xE000000000000000;
      sub_1C35B6E10();
      swift_bridgeObjectRelease();
      strcpy((char *)v5, "Value for key ");
      HIBYTE(v5[0]) = -18;
      sub_1C35B6C9C();
      sub_1C35B6C9C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E58);
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C35B6C9C();
      __swift_project_boxed_opaque_existential_1Tm(&v6, v7);
      swift_getDynamicType();
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C3577C3C(*(uint64_t *)&v5[0], *((uint64_t *)&v5[0] + 1), 8, 0);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v6);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 2;
  }
}

uint64_t sub_1C3585C64(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  uint64_t v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)&v6[0] = a1;
  *((_QWORD *)&v6[0] + 1) = a2;
  swift_bridgeObjectRetain_n();
  v3 = objc_msgSend(v2, sel___swift_objectForKeyedSubscript_, sub_1C35B6F54());
  swift_unknownObjectRelease();
  if (v3)
  {
    sub_1C35B6DBC();
    swift_unknownObjectRelease();
    sub_1C3573DC0(v6, &v7);
    swift_bridgeObjectRelease();
    sub_1C3575174((uint64_t)&v7, (uint64_t)v6);
    if ((swift_dynamicCast() & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v7);
      return v5;
    }
    else
    {
      sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
      *(_QWORD *)&v6[0] = 0;
      *((_QWORD *)&v6[0] + 1) = 0xE000000000000000;
      sub_1C35B6E10();
      swift_bridgeObjectRelease();
      strcpy((char *)v6, "Value for key ");
      HIBYTE(v6[0]) = -18;
      sub_1C35B6C9C();
      sub_1C35B6C9C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E50);
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C35B6C9C();
      __swift_project_boxed_opaque_existential_1Tm(&v7, v8);
      swift_getDynamicType();
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C3577C3C(*(uint64_t *)&v6[0], *((uint64_t *)&v6[0] + 1), 8, 0);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v7);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t sub_1C3585EB0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t *a5)
{
  void *v5;
  id v8;
  uint64_t v10;
  _OWORD v11[2];
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)&v11[0] = a1;
  *((_QWORD *)&v11[0] + 1) = a2;
  swift_bridgeObjectRetain_n();
  v8 = objc_msgSend(v5, sel___swift_objectForKeyedSubscript_, sub_1C35B6F54());
  swift_unknownObjectRelease();
  if (v8)
  {
    sub_1C35B6DBC();
    swift_unknownObjectRelease();
    sub_1C3573DC0(v11, &v12);
    swift_bridgeObjectRelease();
    sub_1C3575174((uint64_t)&v12, (uint64_t)v11);
    sub_1C3575208(0, a3);
    if ((swift_dynamicCast() & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v12);
      return v10;
    }
    else
    {
      sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
      *(_QWORD *)&v11[0] = 0;
      *((_QWORD *)&v11[0] + 1) = 0xE000000000000000;
      sub_1C35B6E10();
      swift_bridgeObjectRelease();
      strcpy((char *)v11, "Value for key ");
      HIBYTE(v11[0]) = -18;
      sub_1C35B6C9C();
      sub_1C35B6C9C();
      __swift_instantiateConcreteTypeFromMangledName(a5);
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C35B6C9C();
      __swift_project_boxed_opaque_existential_1Tm(&v12, v13);
      swift_getDynamicType();
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C3577C3C(*(uint64_t *)&v11[0], *((uint64_t *)&v11[0] + 1), 8, 0);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v12);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t sub_1C3586114(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void *v4;
  id v7;
  _OWORD v9[2];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)&v9[0] = a1;
  *((_QWORD *)&v9[0] + 1) = a2;
  swift_bridgeObjectRetain_n();
  v7 = objc_msgSend(v4, sel___swift_objectForKeyedSubscript_, sub_1C35B6F54(), *(_QWORD *)&v9[0], *((_QWORD *)&v9[0] + 1));
  swift_unknownObjectRelease();
  if (v7)
  {
    sub_1C35B6DBC();
    swift_unknownObjectRelease();
    sub_1C3573DC0(v9, &v10);
    swift_bridgeObjectRelease();
    sub_1C3575174((uint64_t)&v10, (uint64_t)v9);
    __swift_instantiateConcreteTypeFromMangledName(a3);
    if ((swift_dynamicCast() & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v10);
      return v12;
    }
    else
    {
      sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
      *(_QWORD *)&v9[0] = 0;
      *((_QWORD *)&v9[0] + 1) = 0xE000000000000000;
      sub_1C35B6E10();
      swift_bridgeObjectRelease();
      strcpy((char *)v9, "Value for key ");
      HIBYTE(v9[0]) = -18;
      sub_1C35B6C9C();
      sub_1C35B6C9C();
      __swift_instantiateConcreteTypeFromMangledName(a4);
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C35B6C9C();
      __swift_project_boxed_opaque_existential_1Tm(&v10, v11);
      swift_getDynamicType();
      sub_1C35B7008();
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C3577C3C(*(uint64_t *)&v9[0], *((uint64_t *)&v9[0] + 1), 8, 0);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v10);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t sub_1C358636C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1C35A53F8(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1C3599FE4(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1C35863D4(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    sub_1C35A540C();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_1C359A818(v6);
  return sub_1C35B6E70();
}

uint64_t sub_1C358644C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;
  uint64_t *v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v10 | (v8 << 6); ; i = __clz(__rbit64(v15)) + (v8 << 6))
  {
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v13 = v12[1];
    if (v13)
    {
      v20 = *v12;
      swift_bridgeObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1C358006C(0, v9[2] + 1, 1, v9);
        v9 = (_QWORD *)result;
      }
      v18 = v9[2];
      v17 = v9[3];
      if (v18 >= v17 >> 1)
      {
        result = (uint64_t)sub_1C358006C((_QWORD *)(v17 > 1), v18 + 1, 1, v9);
        v9 = (_QWORD *)result;
      }
      v9[2] = v18 + 1;
      v19 = &v9[2 * v18];
      v19[4] = v20;
      v19[5] = v13;
      if (v5)
        goto LABEL_4;
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_7:
    v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v14 >= v6)
      goto LABEL_29;
    v15 = *(_QWORD *)(v2 + 8 * v14);
    ++v8;
    if (!v15)
    {
      v8 = v14 + 1;
      if (v14 + 1 >= v6)
        goto LABEL_29;
      v15 = *(_QWORD *)(v2 + 8 * v8);
      if (!v15)
      {
        v8 = v14 + 2;
        if (v14 + 2 >= v6)
          goto LABEL_29;
        v15 = *(_QWORD *)(v2 + 8 * v8);
        if (!v15)
        {
          v8 = v14 + 3;
          if (v14 + 3 >= v6)
            goto LABEL_29;
          v15 = *(_QWORD *)(v2 + 8 * v8);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v15 - 1) & v15;
  }
  v16 = v14 + 4;
  if (v16 >= v6)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v9;
  }
  v15 = *(_QWORD *)(v2 + 8 * v16);
  if (v15)
  {
    v8 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v8 >= v6)
      goto LABEL_29;
    v15 = *(_QWORD *)(v2 + 8 * v8);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1C358663C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  v2 = swift_bridgeObjectRetain() + 48;
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v4 = *(_QWORD *)(v2 - 8);
    v5 = *(_QWORD *)(v2 - 16);
    swift_bridgeObjectRetain();
    v6 = swift_bridgeObjectRetain();
    v7 = sub_1C35A5710(v6, v5, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = *(_QWORD *)(v7 + 16);
    v9 = v3[2];
    v10 = v9 + v8;
    if (__OFADD__(v9, v8))
      break;
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v10 <= v3[3] >> 1)
    {
      if (*(_QWORD *)(v7 + 16))
        goto LABEL_14;
    }
    else
    {
      if (v9 <= v10)
        v12 = v9 + v8;
      else
        v12 = v9;
      v3 = sub_1C3580178(isUniquelyReferenced_nonNull_native, v12, 1, v3);
      if (*(_QWORD *)(v7 + 16))
      {
LABEL_14:
        v13 = v3[2];
        if ((v3[3] >> 1) - v13 < v8)
          goto LABEL_28;
        v14 = (unint64_t)&v3[v13 + 4];
        if (v7 + 32 < v14 + 8 * v8 && v14 < v7 + 32 + 8 * v8)
          goto LABEL_30;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
        swift_arrayInitWithCopy();
        if (v8)
        {
          v16 = v3[2];
          v17 = __OFADD__(v16, v8);
          v18 = v16 + v8;
          if (v17)
            goto LABEL_29;
          v3[2] = v18;
        }
        goto LABEL_4;
      }
    }
    if (v8)
      goto LABEL_27;
LABEL_4:
    swift_bridgeObjectRelease();
    v2 += 24;
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v3;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C3586834(unint64_t a1)
{
  uint64_t v2;

  if (!(a1 >> 62))
    return *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v2 = sub_1C35B6EDC();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1C3586890(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    sub_1C35991AC(0, v3, 0);
    v4 = v17;
    v6 = (unint64_t *)(a1 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      sub_1C3573E48(v7, *v6);
      sub_1C357F9BC(v7, v8);
      v16 = v2;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
      sub_1C3575338((unint64_t *)&qword_1EF8D9A40, &qword_1ED7E1280, MEMORY[0x1E0DEAF20]);
      v9 = sub_1C35B6C48();
      v11 = v10;
      swift_bridgeObjectRelease();
      sub_1C3573D7C(v7, v8);
      v13 = *(_QWORD *)(v17 + 16);
      v12 = *(_QWORD *)(v17 + 24);
      if (v13 >= v12 >> 1)
        sub_1C35991AC(v12 > 1, v13 + 1, 1);
      v6 += 2;
      *(_QWORD *)(v17 + 16) = v13 + 1;
      v14 = v17 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v9;
      *(_QWORD *)(v14 + 40) = v11;
      --v3;
      v2 = v16;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_1C35869F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  int64_t v4;
  int v5;
  int v6;
  char v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    sub_1C35B6E7C();
    result = sub_1C35A548C(a1);
    v4 = result;
    v6 = v5;
    v8 = v7 & 1;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(a1 + 32))
    {
      if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
        goto LABEL_11;
      if (*(_DWORD *)(a1 + 36) != v6)
        goto LABEL_12;
      v9 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v4);
      v11 = *v9;
      v10 = v9[1];
      swift_bridgeObjectRetain();
      sub_1C35753D0(v11, v10);
      swift_bridgeObjectRelease();
      sub_1C35B6E64();
      sub_1C35B6E88();
      sub_1C35B6E94();
      sub_1C35B6E70();
      result = sub_1C35A552C(v4, v6, v8 & 1, a1);
      v4 = result;
      v6 = v12;
      v8 = v13 & 1;
      if (!--v2)
      {
        sub_1C35AAC3C(result, v12, v13 & 1);
        return v14;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t sub_1C3586B54(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return v2;
  v3 = a1;
  v30 = MEMORY[0x1E0DEE9D8];
  sub_1C35991E4(0, v1, 0);
  v2 = v30;
  result = sub_1C35A5610(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v24 = v3 + 80;
  v25 = v1;
  v26 = v5;
  v27 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v28 = v7;
    v12 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
    v13 = v12[1];
    v29 = *v12;
    v14 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v6);
    v15 = v3;
    v17 = *(_QWORD *)(v30 + 16);
    v16 = *(_QWORD *)(v30 + 24);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (v17 >= v16 >> 1)
      result = sub_1C35991E4(v16 > 1, v17 + 1, 1);
    *(_QWORD *)(v30 + 16) = v17 + 1;
    v18 = (_QWORD *)(v30 + 24 * v17);
    v18[4] = v29;
    v18[5] = v13;
    v18[6] = v14;
    v9 = 1 << *(_BYTE *)(v15 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v27;
    v19 = *(_QWORD *)(v27 + 8 * v11);
    if ((v19 & (1 << v6)) == 0)
      goto LABEL_26;
    v3 = v15;
    v5 = v26;
    if (*(_DWORD *)(v15 + 36) != v26)
      goto LABEL_27;
    v20 = v19 & (-2 << (v6 & 0x3F));
    if (v20)
    {
      v9 = __clz(__rbit64(v20)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v25;
    }
    else
    {
      v21 = v11 + 1;
      v22 = (unint64_t)(v9 + 63) >> 6;
      v10 = v25;
      if (v11 + 1 < v22)
      {
        v23 = *(_QWORD *)(v27 + 8 * v21);
        if (v23)
        {
LABEL_20:
          v9 = __clz(__rbit64(v23)) + (v21 << 6);
        }
        else
        {
          while (v22 - 2 != v11)
          {
            v23 = *(_QWORD *)(v24 + 8 * v11++);
            if (v23)
            {
              v21 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v28 + 1;
    v6 = v9;
    if (v28 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1C3586D80(unsigned int a1)
{
  __int16 v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v2 = bswap32(a1) >> 16;
  v3[3] = MEMORY[0x1E0DEAC20];
  v3[4] = MEMORY[0x1E0CB1AA8];
  v3[0] = &v2;
  v3[1] = v3;
  __swift_project_boxed_opaque_existential_1Tm(v3, MEMORY[0x1E0DEAC20]);
  sub_1C35B6A20();
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v3);
}

void sub_1C3586E0C(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v3[3] = MEMORY[0x1E0CB0338];
  v3[4] = MEMORY[0x1E0CB0318];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1C3586E70
     + dword_1C3587014[__swift_project_boxed_opaque_existential_1Tm(v3, MEMORY[0x1E0CB0338])[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_1C3586E80()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v3;

  sub_1C3573E48(v1, v0);
  sub_1C35B6A20();
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v3);
}

uint64_t sub_1C3587024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25[2];
  uint64_t v26;
  _QWORD v27[7];

  v5 = v4;
  v27[5] = *MEMORY[0x1E0C80C00];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9AA0);
  v11 = MEMORY[0x1E0C80A78](v10);
  MEMORY[0x1E0C80A78](v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9DE0);
  MEMORY[0x1E0C80A78](v12);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9DE8);
  MEMORY[0x1E0C80A78](v16);
  v21 = a1;
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v17 = a1;
  v18 = a2;
  v19 = a3;
  v20 = a4;
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9DF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9AC0);
  if (!swift_dynamicCast())
  {
    v26 = 0;
    memset(v25, 0, sizeof(v25));
    sub_1C3577180((uint64_t)v25, &qword_1EF8D9AC8);
    __asm { BR              X12 }
  }
  sub_1C3577168(v25, (uint64_t)v27);
  v13 = __swift_project_boxed_opaque_existential_1Tm(v27, v27[3]);
  MEMORY[0x1E0C80A78](v13);
  *(&v15 - 2) = v5;
  sub_1C35B6978();
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v27);
}

BOOL sub_1C3587684(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = result;
  if (*(_BYTE *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 33; ; ++i)
  {
    v5 = i - 31;
    if (__OFADD__(i - 32, 1))
      break;
    v6 = *(unsigned __int8 *)(a2 + i);
    result = v6 == v3;
    if (v6 == v3 || v5 == v2)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C35876E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X8 }
  }
  return 0;
}

uint64_t sub_1C358806C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = sub_1C35B6F48();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_1C35B6F48() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C3588538(void *a1, int a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  void *v42;
  id v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  NSObject *v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  _BOOL4 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  __int128 v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  _QWORD v99[4];
  __int128 v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  int v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint8_t *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  NSObject *v120;
  unint64_t v121;
  uint64_t v122;
  _OWORD __s2[2];
  __int128 __s1;
  uint64_t v125;
  uint64_t v126[2];

  v3 = v2;
  v104 = a2;
  v126[1] = *MEMORY[0x1E0C80C00];
  v5 = sub_1C35B69CC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78]();
  v8 = (char *)v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v2[OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_internalBuild];
  v111 = v2;
  if (v9 == 1)
  {
    v10 = *(void **)&v2[OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_userDefaults];
    v11 = (void *)sub_1C35B6C54();
    LODWORD(v10) = objc_msgSend(v10, sel_BOOLForKey_, v11);

    if ((_DWORD)v10)
    {
      v12 = (void *)objc_opt_self();
      *(_QWORD *)&__s1 = 0;
      v13 = objc_msgSend(v12, sel_dataWithPropertyList_format_options_error_, a1, 200, 0, &__s1);
      v14 = (id)__s1;
      if (v13)
      {
        v15 = sub_1C35B6A5C();
        v17 = v16;

        sub_1C3573E48(v15, v17);
        v18 = sub_1C3573E48(v15, v17);
        v19 = sub_1C35B6AC8(v18);
        v20 = sub_1C35B6D38();
        v21 = v20;
        if (os_log_type_enabled(v19, v20))
        {
          v120 = v19;
          v22 = swift_slowAlloc();
          LODWORD(v118) = v21;
          v23 = (uint8_t *)v22;
          v119 = swift_slowAlloc();
          *(_QWORD *)&__s1 = v119;
          v116 = v23;
          *(_DWORD *)v23 = 136315138;
          *(_QWORD *)&v115 = v23 + 4;
          v24 = sub_1C35B6A50();
          *(_QWORD *)&__s2[0] = sub_1C3598590(v24, v25, (uint64_t *)&__s1);
          sub_1C35B6D98();
          swift_bridgeObjectRelease();
          sub_1C3573D7C(v15, v17);
          sub_1C3573D7C(v15, v17);
          v26 = v116;
          _os_log_impl(&dword_1C3511000, v120, (os_log_type_t)v118, "Raw Config : %s", v116, 0xCu);
          v27 = v119;
          swift_arrayDestroy();
          MEMORY[0x1C3BD380C](v27, -1, -1);
          MEMORY[0x1C3BD380C](v26, -1, -1);
          sub_1C3573D7C(v15, v17);

        }
        else
        {
          sub_1C3573D7C(v15, v17);

          sub_1C3573D7C(v15, v17);
          sub_1C3573D7C(v15, v17);
        }
        v3 = v111;
      }
      else
      {
        v28 = v14;
        v29 = (void *)sub_1C35B69C0();

        swift_willThrow();
        v117 = 0;
      }
    }
  }
  v126[0] = MEMORY[0x1E0DEE9D8];
  v30 = a1;
  sub_1C35B6D74();

  sub_1C3574134(&qword_1ED7E11F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFB58], MEMORY[0x1E0CAFB80]);
  while (1)
  {
    sub_1C35B6D8C();
    if (!v125)
      break;
    sub_1C3573DC0(&__s1, __s2);
    sub_1C3575174((uint64_t)__s2, (uint64_t)&v122);
    type metadata accessor for ExpressMode.PassConfig();
    swift_allocObject();
    v31 = v117;
    v32 = sub_1C3590738(&v122);
    v117 = v31;
    if (v31)
    {
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)__s2);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      return v5;
    }
    v33 = v32;
    v34 = __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)__s2);
    if (v33)
    {
      MEMORY[0x1C3BD2C78](v34);
      if (*(_QWORD *)((v126[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v126[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1C35B6CFC();
      sub_1C35B6D14();
      sub_1C35B6CF0();
      v3 = v111;
    }
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v114 = v126[0];
  v121 = v126[0];
  if ((v9 & 1) != 0
    && (v35 = *(void **)&v3[OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_userDefaults],
        v36 = (void *)sub_1C35B6C54(),
        v37 = (uint64_t)objc_msgSend(v35, sel_integerForKey_, v36),
        v36,
        v37 >= 1))
  {
    v38 = v3;
    v39 = sub_1C35B6AC8(v38);
    v40 = sub_1C35B6D68();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v41 = 134217984;
      v42 = (void *)sub_1C35B6C54();
      v43 = objc_msgSend(v35, sel_integerForKey_, v42);

      *(_QWORD *)&__s1 = v43;
      v3 = v111;
      sub_1C35B6D98();

      _os_log_impl(&dword_1C3511000, v39, v40, "Skipping compatibility check due to %ld", v41, 0xCu);
      MEMORY[0x1C3BD380C](v41, -1, -1);

    }
    else
    {

    }
    v106 = MEMORY[0x1E0DEE9D8];
    v44 = v114;
  }
  else
  {
    v44 = v114;
    v45 = swift_bridgeObjectRetain();
    v106 = sub_1C35A6F1C(v45, v104 & 1);
    swift_bridgeObjectRelease();
  }
  v122 = MEMORY[0x1E0DEE9E8];
  if (v44 >> 62)
  {
    swift_bridgeObjectRetain();
    v46 = sub_1C35B6EDC();
  }
  else
  {
    v46 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (v46)
  {
    v48 = 0;
    v105 = &v3[OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_logger];
    v113 = v44 & 0xC000000000000001;
    v109 = v44 & 0xFFFFFFFFFFFFFF8;
    v108 = v44 + 32;
    v99[3] = (char *)__s2 + 8;
    v101 = (char *)&__s1 + 8;
    *(_QWORD *)&v47 = 136315138;
    v103 = v47;
    *((_QWORD *)&v49 + 1) = 2;
    v115 = xmmword_1C35BB2C0;
    v102 = MEMORY[0x1E0DEE9B8] + 8;
    *(_QWORD *)&v49 = 136315394;
    v100 = v49;
    v112 = v46;
    do
    {
      if (v113)
      {
        v50 = MEMORY[0x1C3BD2DEC](v48, v44);
        v51 = __OFADD__(v48++, 1);
        if (v51)
          goto LABEL_74;
      }
      else
      {
        if (v48 >= *(_QWORD *)(v109 + 16))
        {
          __break(1u);
          JUMPOUT(0x1C358AA84);
        }
        v50 = *(_QWORD *)(v108 + 8 * v48);
        swift_retain();
        v51 = __OFADD__(v48++, 1);
        if (v51)
        {
LABEL_74:
          __break(1u);
          JUMPOUT(0x1C358AA7CLL);
        }
      }
      v52 = *(_QWORD *)(v50 + 144);
      if (v52 && *(_QWORD *)(v52 + 16) || (*(_BYTE *)(v50 + 160) & 1) != 0 || *(_QWORD *)(v50 + 152) != 2)
      {
        swift_release();
      }
      else
      {
        v53 = v121;
        v107 = v48;
        if (v121 >> 62)
        {
          swift_bridgeObjectRetain_n();
          v54 = sub_1C35B6EDC();
          swift_bridgeObjectRelease();
          v116 = (uint8_t *)v50;
          if (v54)
          {
LABEL_42:
            v119 = v53;
            v120 = (v53 & 0xC000000000000001);
            v55 = 4;
            *(_QWORD *)&v118 = v54;
            do
            {
              v56 = v55 - 4;
              if (v120)
              {
                v57 = MEMORY[0x1C3BD2DEC](v55 - 4, v53);
                v58 = v55 - 3;
                if (__OFADD__(v56, 1))
                  goto LABEL_73;
              }
              else
              {
                v57 = *(_QWORD *)(v53 + 8 * v55);
                swift_retain();
                v58 = v55 - 3;
                if (__OFADD__(v56, 1))
                {
LABEL_73:
                  __break(1u);
                  goto LABEL_74;
                }
              }
              v59 = *(_QWORD *)(v57 + 32);
              v60 = *(_QWORD *)(v57 + 40);
              v61 = *(_QWORD *)(v50 + 128);
              v62 = *(_QWORD *)(v50 + 136);
              if (v62 >> 60 != 15)
                __asm { BR              X10 }
              sub_1C3573E48(*(_QWORD *)(v57 + 32), *(_QWORD *)(v57 + 40));
              sub_1C3574174(v59, v60);
              sub_1C3574174(v61, v62);
              swift_release();
              ++v55;
              v53 = v119;
            }
            while (v58 != (_QWORD)v118);
          }
        }
        else
        {
          v54 = *(_QWORD *)((v121 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          v116 = (uint8_t *)v50;
          if (v54)
            goto LABEL_42;
        }
        swift_bridgeObjectRelease_n();
        v63 = swift_retain_n();
        v64 = sub_1C35B6AC8(v63);
        v65 = sub_1C35B6D38();
        if (os_log_type_enabled(v64, v65))
        {
          v66 = (_DWORD *)swift_slowAlloc();
          *(_QWORD *)&__s2[0] = swift_slowAlloc();
          *v66 = v103;
          v110 = *(_QWORD *)(v50 + 40);
          __asm { BR              X8 }
        }
        swift_release_n();

        v3 = v111;
        v44 = v114;
        v48 = v107;
      }
    }
    while (v48 != v112);
  }
  swift_bridgeObjectRelease();
  v67 = v117;
  v68 = sub_1C35A4644(&v121, &v122);
  v69 = v68;
  v117 = v67;
  if (!(v121 >> 62))
  {
    v70 = *(_QWORD *)((v121 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v70 >= v68)
      goto LABEL_57;
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  swift_bridgeObjectRetain();
  v70 = sub_1C35B6EDC();
  swift_bridgeObjectRelease();
  if (v70 < v69)
    goto LABEL_78;
LABEL_57:
  sub_1C35A7960(v69, v70);
  v71 = &v3[OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_logger];
  v72 = swift_bridgeObjectRetain_n();
  v73 = sub_1C35B6AC8(v72);
  v74 = sub_1C35B6D68();
  v75 = os_log_type_enabled(v73, v74);
  v120 = v71;
  if (v75)
  {
    v76 = swift_slowAlloc();
    v77 = swift_slowAlloc();
    *(_QWORD *)&__s1 = v77;
    *(_DWORD *)v76 = 134218498;
    swift_beginAccess();
    if (v121 >> 62)
    {
      swift_bridgeObjectRetain();
      v78 = sub_1C35B6EDC();
      swift_bridgeObjectRelease();
    }
    else
    {
      v78 = *(_QWORD *)((v121 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v126[0] = v78;
    sub_1C35B6D98();
    *(_WORD *)(v76 + 12) = 2080;
    v79 = swift_bridgeObjectRetain();
    v80 = MEMORY[0x1C3BD2C90](v79, &type metadata for ExpressModeRejectedPass);
    v82 = v81;
    swift_bridgeObjectRelease();
    v126[0] = sub_1C3598590(v80, v82, (uint64_t *)&__s1);
    sub_1C35B6D98();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v76 + 22) = 1024;
    LODWORD(v126[0]) = v104 & 1;
    sub_1C35B6D98();
    _os_log_impl(&dword_1C3511000, v73, v74, "  configCount %ld, Incompatible applets? %s useLegacyBehavior? %{BOOL}d", (uint8_t *)v76, 0x1Cu);
    v69 = MEMORY[0x1E0DEE9B8];
    swift_arrayDestroy();
    MEMORY[0x1C3BD380C](v77, -1, -1);
    MEMORY[0x1C3BD380C](v76, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n();

    v69 = MEMORY[0x1E0DEE9B8];
  }
  swift_beginAccess();
  v70 = v121;
  if (v121 >> 62)
  {
LABEL_79:
    swift_bridgeObjectRetain();
    v83 = sub_1C35B6EDC();
    v85 = (_QWORD *)&unk_1C35BB000;
    if (v83)
      goto LABEL_64;
    goto LABEL_80;
  }
  v83 = *(_QWORD *)((v121 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v85 = &unk_1C35BB000;
  if (v83)
  {
LABEL_64:
    if (v83 < 1)
    {
      __break(1u);
      JUMPOUT(0x1C358ABCCLL);
    }
    v86 = 0;
    v87 = v70 & 0xC000000000000001;
    *(_QWORD *)&v84 = v85[43];
    v118 = v84;
    v116 = (uint8_t *)(v69 + 8);
    v119 = v70;
    do
    {
      if (v87)
        MEMORY[0x1C3BD2DEC](v86, v70);
      else
        swift_retain();
      v95 = swift_retain_n();
      v96 = sub_1C35B6AC8(v95);
      v97 = sub_1C35B6D38();
      if (os_log_type_enabled(v96, v97))
      {
        v88 = swift_slowAlloc();
        v89 = v87;
        v90 = v83;
        v91 = swift_slowAlloc();
        v126[0] = v91;
        *(_DWORD *)v88 = v118;
        v92 = sub_1C3591458(2);
        *(_QWORD *)(v88 + 4) = sub_1C3598590(v92, v93, v126);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C3511000, v96, v97, "PassConfig:\n%s", (uint8_t *)v88, 0xCu);
        swift_arrayDestroy();
        v94 = v91;
        v83 = v90;
        v87 = v89;
        v70 = v119;
        MEMORY[0x1C3BD380C](v94, -1, -1);
        MEMORY[0x1C3BD380C](v88, -1, -1);

        swift_release();
      }
      else
      {

        swift_release_n();
      }
      ++v86;
    }
    while (v83 != v86);
  }
LABEL_80:
  swift_bridgeObjectRelease();
  v5 = v121;
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t *sub_1C358AD74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRetain();
  v5 = swift_bridgeObjectRetain();
  sub_1C356EF58(v5);
  v6 = swift_bridgeObjectRetain();
  v7 = sub_1C35A7858(v6);
  swift_bridgeObjectRelease();
  v8 = sub_1C3598F80(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1C356EF58(a2);
  v9 = swift_bridgeObjectRetain();
  v10 = sub_1C35A7858(v9);
  swift_bridgeObjectRelease();
  sub_1C3598F80(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1C356EE14(a3);
  v11 = swift_bridgeObjectRetain();
  v12 = sub_1C35A78F0(v11);
  swift_bridgeObjectRelease();
  sub_1C3598EAC(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1C358AED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_1C35B6FB4();
    sub_1C35B6A68();
    v4 = sub_1C35B6FD8() & ~(-1 << *(_BYTE *)(a3 + 32));
    if (((*(_QWORD *)(a3 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
      __asm { BR              X8 }
  }
  return 0;
}

BOOL sub_1C358B8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  char v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_1C3573B04(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  if ((v16 & 1) == 0)
  {
    v17 = *(_QWORD *)(a2 + 16);
    v39 = a3;
    if (v17)
    {
      v37 = a4;
      v38 = a8;
      swift_bridgeObjectRetain();
      v18 = (unint64_t *)(a2 + 40);
      while (1)
      {
        v20 = *(v18 - 1);
        v19 = *v18;
        sub_1C3573E48(v20, *v18);
        swift_bridgeObjectRetain();
        v21 = sub_1C35876E4(v20, v19, a6);
        swift_bridgeObjectRelease();
        sub_1C3573D7C(v20, v19);
        if ((v21 & 1) != 0)
          goto LABEL_29;
        v18 += 2;
        if (!--v17)
        {
          swift_bridgeObjectRelease();
          a4 = v37;
          a8 = v38;
          a3 = v39;
          break;
        }
      }
    }
    v22 = *(_QWORD *)(a3 + 16);
    if (v22)
    {
      swift_bridgeObjectRetain();
      v23 = (unint64_t *)(a3 + 40);
      while (1)
      {
        v25 = *(v23 - 1);
        v24 = *v23;
        sub_1C3573E48(v25, *v23);
        swift_bridgeObjectRetain();
        v26 = sub_1C35876E4(v25, v24, a7);
        swift_bridgeObjectRelease();
        sub_1C3573D7C(v25, v24);
        if ((v26 & 1) != 0)
          break;
        v23 += 2;
        if (!--v22)
        {
          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
      }
LABEL_29:
      swift_bridgeObjectRelease();
      return 1;
    }
  }
LABEL_12:
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a5 + 16) || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a5 + 24))
  {
    v28 = sub_1C35B6F48();
    v29 = 0;
    if ((v28 & 1) == 0)
    {
LABEL_19:
      if (!*(_QWORD *)(a4 + 16))
        goto LABEL_23;
LABEL_22:
      if (!((*(_QWORD *)(a8 + 16) == 0) | v29 & 1))
        return 1;
      goto LABEL_23;
    }
  }
  if ((*(_BYTE *)(a1 + 163) & 1) != 0)
  {
    v29 = 0;
    goto LABEL_19;
  }
  v29 = *(_BYTE *)(a5 + 163) ^ 1;
  if (*(_QWORD *)(a4 + 16))
    goto LABEL_22;
LABEL_23:
  v30 = *(_QWORD *)(a1 + 72);
  if (v30 >> 60 == 15)
    return 0;
  v31 = *(_QWORD *)(a1 + 64);
  v33 = *(_QWORD *)(a5 + 64);
  v32 = *(_QWORD *)(a5 + 72);
  if (v32 >> 60 == 15)
  {
    sub_1C3573E48(v31, v30);
    sub_1C3574174(v31, v30);
    sub_1C3574174(v33, v32);
    return 0;
  }
  sub_1C3575268(v31, v30);
  sub_1C3575268(v33, v32);
  sub_1C3573B04(v31, v30);
  v35 = v34;
  sub_1C3574174(v33, v32);
  sub_1C3574174(v31, v30);
  return (v35 & 1) != 0;
}

uint64_t sub_1C358BB08(unint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_internalBuild) == 1)
  {
    v3 = *(void **)(v1 + OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_userDefaults);
    v4 = v1;
    v5 = (void *)sub_1C35B6C54();
    LODWORD(v3) = objc_msgSend(v3, sel_BOOLForKey_, v5);

    v1 = v4;
    if ((_DWORD)v3)
    {
      v7 = sub_1C35B6AC8(v6);
      v8 = sub_1C35B6D68();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1C3511000, v7, v8, "Forcing slow mode due to debug pref", v9, 2u);
        MEMORY[0x1C3BD380C](v9, -1, -1);
      }

      return 0;
    }
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = sub_1C35B6EDC();
    swift_bridgeObjectRelease();
    if (v11 < 0)
    {
      __break(1u);
      JUMPOUT(0x1C358C6ECLL);
    }
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)v11 <= 1)
    return 1;
  v12 = 0;
  v33 = a1 & 0xC000000000000001;
  v28 = a1 + 32;
  v13 = 1;
  v29 = v11;
LABEL_14:
  v14 = v12;
  v30 = v13;
  v31 = v12;
  while (1)
  {
    if (v13 >= v11)
    {
      __break(1u);
      JUMPOUT(0x1C358C698);
    }
    if (v33)
    {
      v15 = MEMORY[0x1C3BD2DEC](v14, a1);
    }
    else
    {
      if (v14 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_52:
        __break(1u);
        JUMPOUT(0x1C358C6B8);
      }
      v15 = *(_QWORD *)(v28 + 8 * v14);
      swift_retain();
    }
    v16 = *(_QWORD *)(v15 + 80);
    sub_1C35A5698(v16);
    swift_release();
    v32 = v13;
    if (v33)
    {
      v17 = MEMORY[0x1C3BD2DEC](v13, a1);
    }
    else
    {
      if ((unint64_t)v13 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_52;
      v17 = *(_QWORD *)(v28 + 8 * v13);
      swift_retain();
    }
    v18 = *(_QWORD *)(v17 + 80);
    sub_1C35A5698(v18);
    swift_release();
    if (!v16)
      goto LABEL_30;
    if (v16 == 1)
      break;
    if (v16 != 2)
    {
      if (v18 && v18 != 2)
      {
        if (v18 == 1)
        {
          sub_1C35A56D4(v16);
          return 0;
        }
        if (v33)
        {
          v25 = MEMORY[0x1C3BD2DEC](v31, a1);
          v26 = MEMORY[0x1C3BD2DEC](v32, a1);
        }
        else
        {
          v25 = *(_QWORD *)(v28 + 8 * v31);
          v26 = *(_QWORD *)(v28 + 8 * v32);
          swift_retain();
          swift_retain();
        }
        v27 = sub_1C358C7A4(v25, v26, v1);
        swift_release();
        sub_1C35A56D4(v18);
        sub_1C35A56D4(v16);
        swift_release();
        if (!v27)
          return 0;
        goto LABEL_17;
      }
      sub_1C35A56D4(v16);
      goto LABEL_16;
    }
LABEL_30:
    if (v18 == 1)
    {
      if (v33)
      {
        v19 = MEMORY[0x1C3BD2DEC](v13, a1);
        v20 = *(_QWORD *)(v19 + 120);
        v21 = v20 >> 62;
        sub_1C3573E48(*(_QWORD *)(v19 + 112), v20);
        swift_unknownObjectRelease();
        __asm { BR              X8 }
      }
      __asm { BR              X9 }
    }
LABEL_16:
    sub_1C35A56D4(v18);
LABEL_17:
    v13 = v32 + 1;
    v11 = v29;
    v12 = v30;
    v14 = v31;
    if (v32 + 1 == v29)
    {
      v13 = v30 + 1;
      result = 1;
      if (v30 + 1 == v29)
        return result;
      goto LABEL_14;
    }
  }
  switch(v18)
  {
    case 0uLL:
      goto LABEL_36;
    case 1uLL:
      goto LABEL_17;
    case 2uLL:
LABEL_36:
      if (v33)
      {
        v22 = MEMORY[0x1C3BD2DEC](v31, a1);
        v23 = *(_QWORD *)(v22 + 120);
        v24 = v23 >> 62;
        sub_1C3573E48(*(_QWORD *)(v22 + 112), v23);
        swift_unknownObjectRelease();
        __asm { BR              X8 }
      }
      __asm { BR              X9 }
      break;
  }
  sub_1C35A56D4(v18);
  return 0;
}

BOOL sub_1C358C7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  void *v11;
  void *v12;
  unsigned int v13;
  void *v14;
  unsigned __int8 v15;
  void *v16;
  __objc2_class_ro *v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  void *v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  char v33;
  void *v34;

  v4 = *(_QWORD *)(a3 + OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_modulesRequiringSlowPath);
  v6 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 120);
  swift_bridgeObjectRetain();
  sub_1C3573E48(v6, v5);
  v7 = sub_1C35876E4(v6, v5, v4);
  sub_1C3573D7C(v6, v5);
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 112);
    v9 = *(_QWORD *)(a2 + 120);
    swift_bridgeObjectRetain();
    sub_1C3573E48(v8, v9);
    v10 = sub_1C35876E4(v8, v9, v4);
    sub_1C3573D7C(v8, v9);
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      return 0;
  }
  v11 = (void *)objc_opt_self();
  sub_1C357F9BC(v6, v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
  sub_1C3575338((unint64_t *)&qword_1EF8D9A40, &qword_1ED7E1280, MEMORY[0x1E0DEAF20]);
  sub_1C35B6C48();
  swift_bridgeObjectRelease();
  v12 = (void *)sub_1C35B6C54();
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v11, sel_isEMV_, v12);

  if (v13)
  {
    sub_1C357F9BC(*(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
    sub_1C35B6C48();
    swift_bridgeObjectRelease();
    v14 = (void *)sub_1C35B6C54();
    swift_bridgeObjectRelease();
    v15 = objc_msgSend(v11, sel_isEMV_, v14);

    if ((v15 & 1) != 0)
      return 0;
  }
  sub_1C357F9BC(v6, v5);
  sub_1C35B6C48();
  swift_bridgeObjectRelease();
  v16 = (void *)sub_1C35B6C54();
  swift_bridgeObjectRelease();
  v17 = &AlphonsoSwiftDecoder;
  v18 = objc_msgSend(v11, sel_isEMV_, v16);

  if (v18)
  {
    v34 = v11;
    v19 = *(_QWORD *)(a2 + 112);
    v20 = *(_QWORD *)(a2 + 120);
    sub_1C35B6C60();
    sub_1C3573E48(v19, v20);
    v21 = sub_1C3580744();
    v23 = v22;
    if (v22 >> 60 == 15)
    {
      sub_1C3574174(v19, v20);
      sub_1C3574174(v21, v23);
      v11 = v34;
      v17 = &AlphonsoSwiftDecoder;
    }
    else
    {
      sub_1C3573E48(v19, v20);
      sub_1C3573B04(v19, v20);
      v33 = v24;
      sub_1C3574174(v21, v23);
      sub_1C3573D7C(v19, v20);
      sub_1C3573D7C(v19, v20);
      v11 = v34;
      v17 = &AlphonsoSwiftDecoder;
      if ((v33 & 1) != 0)
        return 0;
    }
  }
  sub_1C357F9BC(*(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
  sub_1C35B6C48();
  swift_bridgeObjectRelease();
  v25 = (void *)sub_1C35B6C54();
  swift_bridgeObjectRelease();
  v26 = objc_msgSend(v11, v17[49].name, v25);

  if (v26)
  {
    sub_1C35B6C60();
    sub_1C3573E48(v6, v5);
    v27 = sub_1C3580744();
    v29 = v28;
    if (v28 >> 60 == 15)
    {
      sub_1C3574174(v6, v5);
      sub_1C3574174(v27, v29);
      return 1;
    }
    sub_1C3573E48(v6, v5);
    sub_1C3573B04(v6, v5);
    v31 = v30;
    sub_1C3574174(v27, v29);
    sub_1C3573D7C(v6, v5);
    sub_1C3573D7C(v6, v5);
    return (v31 & 1) == 0;
  }
  return 1;
}

uint64_t sub_1C358CC0C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v38;
  unint64_t __s1;
  unint64_t v40;

  v7 = a5;
  v8 = a1;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = swift_bridgeObjectRetain();
    v12 = sub_1C35757F0(v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) != 0)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
      sub_1C3577C3C(0xD000000000000023, 0x80000001C35C5B50, 8, 0);
      return swift_willThrow();
    }
    if (v9 != 1)
    {
      v13 = a2 + 72;
      v14 = 1;
      do
      {
        v15 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_49:
          __break(1u);
          JUMPOUT(0x1C358FEACLL);
        }
        swift_bridgeObjectRetain();
        v16 = swift_bridgeObjectRetain();
        v17 = sub_1C35757F0(v16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v17 & 1) != 0)
          goto LABEL_3;
        v13 += 24;
        ++v14;
      }
      while (v15 != v9);
    }
    swift_bridgeObjectRelease();
    v8 = a1;
    v7 = a5;
  }
  swift_bridgeObjectRetain_n();
  if (sub_1C3586834(v8))
  {
    if ((v8 & 0xC000000000000001) != 0)
    {
      v18 = MEMORY[0x1C3BD2DEC](0, v8);
    }
    else
    {
      v18 = *(_QWORD *)(v8 + 32);
      swift_retain();
    }
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease_n();
  v19 = MEMORY[0x1E0DEE9D8];
  if (v7 >> 60 == 15)
  {
    __s1 = MEMORY[0x1E0DEE9D8];
    v20 = sub_1C3586834(MEMORY[0x1E0DEE9D8]);
    if (v20)
    {
      v21 = v20;
      if (v20 < 1)
      {
        __break(1u);
        JUMPOUT(0x1C358FEF4);
      }
      v22 = 0;
      while (1)
      {
        if ((v19 & 0xC000000000000001) != 0)
        {
          v23 = MEMORY[0x1C3BD2DEC](v22, v19);
          if ((*(_BYTE *)(v23 + 104) & 1) != 0)
            goto LABEL_19;
        }
        else
        {
          v23 = *(_QWORD *)(v19 + 8 * v22 + 32);
          swift_retain();
          if ((*(_BYTE *)(v23 + 104) & 1) != 0)
            goto LABEL_19;
        }
        if ((a7 & 1) != 0 || *(_QWORD *)(v23 + 80) != 1)
        {
          sub_1C35B6E64();
          sub_1C35B6E88();
          sub_1C35B6E94();
          sub_1C35B6E70();
          goto LABEL_20;
        }
LABEL_19:
        swift_release();
LABEL_20:
        if (v21 == ++v22)
        {
          swift_release();
          v25 = __s1;
          goto LABEL_45;
        }
      }
    }
    swift_release();
    v25 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v40 = MEMORY[0x1E0DEE9D8];
    sub_1C3573E48(a4, v7);
    if (sub_1C3586834(v19))
    {
      if ((v19 & 0xC000000000000001) != 0)
      {
        v24 = MEMORY[0x1C3BD2DEC](0, v19);
      }
      else
      {
        v24 = *(_QWORD *)(v19 + 32);
        swift_retain();
      }
      __asm { BR              X8 }
    }
    swift_release();
    v25 = MEMORY[0x1E0DEE9D8];
    v26 = swift_bridgeObjectRetain();
    v27 = sub_1C3586834(v26);
    swift_bridgeObjectRelease();
    if (v27 < 0)
    {
      __break(1u);
      JUMPOUT(0x1C358FEE0);
    }
    if (v27)
    {
      v28 = 0;
      while (1)
      {
        if ((v40 & 0xC000000000000001) != 0)
        {
          v29 = MEMORY[0x1C3BD2DEC](v28);
        }
        else
        {
          if (*(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10) <= v28)
          {
            __break(1u);
            goto LABEL_49;
          }
          v29 = *(_QWORD *)(v40 + 8 * v28 + 32);
          swift_retain();
        }
        ++v28;
        swift_retain();
        v30 = swift_bridgeObjectRetain();
        v31 = sub_1C35A8250(v30, v29);
        swift_bridgeObjectRelease();
        swift_release();
        sub_1C356F0A8(v31);
        swift_release();
        if (v27 == v28)
        {
          v25 = v40;
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
    sub_1C3574174(a4, a5);
  }
LABEL_45:
  sub_1C358BB08(v25);
  sub_1C35A87C0(v25);
  if (!v38)
    __asm { BR              X9 }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C3590124(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if (a2 >> 60 == 15)
    return 7104878;
  sub_1C357F9BC(a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
  sub_1C3575338((unint64_t *)&qword_1EF8D9A40, &qword_1ED7E1280, MEMORY[0x1E0DEAF20]);
  v2 = sub_1C35B6C48();
  swift_bridgeObjectRelease();
  return v2;
}

void sub_1C35901D8(unint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;

  v8 = sub_1C3593EEC(a1);
  if (!v4)
  {
    v9 = v8;
    v10 = sub_1C3593EEC(a1);
    v11 = sub_1C3593EEC(a1);
    v12 = sub_1C3593EEC(a2);
    v13 = sub_1C3594690(v12, v11);
    v19 = OBJC_IVAR____TtCC24AppletTranslationLibrary11ExpressModeP33_F6A5673F67A2A086B8B4649671CBFF8221PTAExpressModeManager_homeEndpoints;
    v14 = *(_QWORD *)(v3
                    + OBJC_IVAR____TtCC24AppletTranslationLibrary11ExpressModeP33_F6A5673F67A2A086B8B4649671CBFF8221PTAExpressModeManager_homeEndpoints);
    swift_bridgeObjectRetain();
    v22 = sub_1C3596F14(v10, v14);
    swift_bridgeObjectRelease();
    v15 = OBJC_IVAR____TtCC24AppletTranslationLibrary11ExpressModeP33_F6A5673F67A2A086B8B4649671CBFF8221PTAExpressModeManager_hydraEndpoints;
    v16 = *(_QWORD *)(v3
                    + OBJC_IVAR____TtCC24AppletTranslationLibrary11ExpressModeP33_F6A5673F67A2A086B8B4649671CBFF8221PTAExpressModeManager_hydraEndpoints);
    swift_bridgeObjectRetain();
    v17 = sub_1C3596F14(v9, v16);
    swift_bridgeObjectRelease();
    v20 = OBJC_IVAR____TtCC24AppletTranslationLibrary11ExpressModeP33_F6A5673F67A2A086B8B4649671CBFF8221PTAExpressModeManager_lyonEndpoints;
    v18 = *(_QWORD *)(v3
                    + OBJC_IVAR____TtCC24AppletTranslationLibrary11ExpressModeP33_F6A5673F67A2A086B8B4649671CBFF8221PTAExpressModeManager_lyonEndpoints);
    swift_bridgeObjectRetain();
    v21 = sub_1C3596F14(v13, v18);
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0 || !*(_QWORD *)(v9 + 16))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      *(_QWORD *)(v3 + v15) = v9;
      swift_bridgeObjectRelease();
      sub_1C359483C(0, a3);
    }
    if ((v22 & 1) != 0 || !*(_QWORD *)(v10 + 16))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      *(_QWORD *)(v3 + v19) = v10;
      swift_bridgeObjectRelease();
      sub_1C359483C(1, a3);
    }
    if ((v21 & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      *(_QWORD *)(v3 + v20) = v13;
      swift_bridgeObjectRelease();
      sub_1C359483C(2, a3);
      sub_1C3595460(2, a3);
    }
  }
}

uint64_t sub_1C3590424@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  sub_1C3573E48(a1, a2);
  sub_1C3573E48(a3, a4);
  sub_1C3586E0C(a3, a4);
  return sub_1C3573D7C(a3, a4);
}

uint64_t sub_1C3590478(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  unsigned __int8 v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  sub_1C35B6C60();
  result = sub_1C3580744();
  if (v5 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v6 = result;
    v7 = v5;
    sub_1C3573B04(v2, v3);
    v9 = v8;
    sub_1C3574174(v6, v7);
    if ((v9 & 1) != 0)
      return 4;
    v11 = (void *)objc_opt_self();
    v12 = *(_QWORD *)(a1 + 32);
    v25 = *(_QWORD *)(a1 + 40);
    sub_1C357F9BC(v12, v25);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
    sub_1C3575338((unint64_t *)&qword_1EF8D9A40, &qword_1ED7E1280, MEMORY[0x1E0DEAF20]);
    sub_1C35B6C48();
    swift_bridgeObjectRelease();
    v13 = (void *)sub_1C35B6C54();
    swift_bridgeObjectRelease();
    v14 = objc_msgSend(v11, sel_supportsStepUp_, v13);

    if ((v14 & 1) != 0)
      return 5;
    v15 = objc_opt_self();
    sub_1C357F9BC(v12, v25);
    sub_1C35B6C48();
    swift_bridgeObjectRelease();
    v16 = (void *)sub_1C35B6C54();
    swift_bridgeObjectRelease();
    LOBYTE(v15) = objc_msgSend((id)v15, sel_supportsStepUp_, v16);

    if ((v15 & 1) != 0)
      return 5;
    v17 = *(_QWORD *)(a1 + 80);
    v18 = v17 >= 3;
    v19 = 0x10301u >> (8 * v17);
    if (v18)
      v10 = 2;
    else
      v10 = v19;
    if ((*(_BYTE *)(a1 + 164) & 1) != 0)
      return v10 | 0xFFFFFF80;
    v20 = sub_1C3593338();
    if (v20)
    {
      v21 = (_QWORD *)v20;
      sub_1C357F9BC(v12, v25);
      v22 = sub_1C35B6C48();
      v24 = v23;
      swift_bridgeObjectRelease();
      LOBYTE(v22) = sub_1C358806C(v22, v24, v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v22 & 1) != 0)
        return v10 | 0xFFFFFF80;
    }
    return v10;
  }
  return result;
}

uint64_t sub_1C3590738(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  id v77;
  id v78;
  uint64_t v79;
  int64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  id v87;
  id v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;

  v3 = v1;
  *(_BYTE *)(v1 + 164) = 0;
  sub_1C3575174((uint64_t)a1, (uint64_t)&v91);
  sub_1C3575208(0, (unint64_t *)&qword_1EF8D95A0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
    v91 = 0;
    v92 = 0xE000000000000000;
    sub_1C35B6E10();
    swift_bridgeObjectRelease();
    v91 = 0xD00000000000002DLL;
    v92 = 0x80000001C35C5010;
    __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
    swift_getDynamicType();
    sub_1C35B7008();
    sub_1C35B6C9C();
    swift_bridgeObjectRelease();
    sub_1C3577C3C(v91, v92, 8, 0);
    swift_willThrow();
    goto LABEL_6;
  }
  v5 = v93;
  v6 = sub_1C35B6C60();
  v8 = sub_1C3585A1C(v6, v7);
  if (v2)
  {

    swift_bridgeObjectRelease();
LABEL_6:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
LABEL_7:
    type metadata accessor for ExpressMode.PassConfig();
    swift_deallocPartialClassInstance();
    return v3;
  }
  v9 = v8;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v3 + 162) = v9 & 1;
  v10 = sub_1C35B6C60();
  v12 = sub_1C3585A1C(v10, v11);
  v14 = v12;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v3 + 161) = v14 & 1;
  if ((*(_BYTE *)(v3 + 162) & 1) == 0 && (v14 & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);

    type metadata accessor for ExpressMode.PassConfig();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v15 = sub_1C35B6C60();
  v17 = sub_1C35854DC(v15, v16);
  v19 = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 16) = v17;
  *(_QWORD *)(v3 + 24) = v19;
  v20 = sub_1C35B6C60();
  sub_1C35854DC(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v22 = sub_1C3580744();
  if (v23 >> 60 == 15)
  {
    sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
    v91 = 0;
    v92 = 0xE000000000000000;
    sub_1C35B6E10();
    swift_bridgeObjectRelease();
    v91 = 0x412074656C707041;
    v92 = 0xEB00000000204449;
    sub_1C35B6C9C();
    swift_bridgeObjectRelease();
    sub_1C35B6C9C();
    sub_1C3577C3C(v91, v92, 8, 0);
    swift_willThrow();

    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v24 = v22;
  v25 = v23;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 32) = v24;
  *(_QWORD *)(v3 + 40) = v25;
  v26 = sub_1C35B6C60();
  v28 = v27;
  sub_1C3573E48(v24, v25);
  sub_1C3585C64(v26, v28);
  v30 = v29;
  v90 = v24;
  swift_bridgeObjectRelease();
  if (v30)
  {
    v31 = sub_1C3580744();
  }
  else
  {
    v31 = 0;
    v32 = 0xF000000000000000;
  }
  *(_QWORD *)(v3 + 48) = v31;
  *(_QWORD *)(v3 + 56) = v32;
  v33 = sub_1C35B6C60();
  sub_1C3585C64(v33, v34);
  v36 = v35;
  swift_bridgeObjectRelease();
  if (v36)
  {
    v37 = sub_1C3580744();
  }
  else
  {
    v37 = 0;
    v38 = 0xF000000000000000;
  }
  *(_QWORD *)(v3 + 64) = v37;
  *(_QWORD *)(v3 + 72) = v38;
  v39 = sub_1C35B6C60();
  v41 = sub_1C35854DC(v39, v40);
  v43 = v42;
  v88 = (id)v41;
  swift_bridgeObjectRelease();
  v44 = sub_1C35B6C60();
  v46 = (void *)sub_1C3585EB0(v44, v45, (unint64_t *)&qword_1EF8D95A0, 0x1E0C99D80, &qword_1EF8D9E48);
  swift_bridgeObjectRelease();
  v47 = v46;
  *(_QWORD *)(v3 + 80) = sub_1C35A6AB8((uint64_t)v88, v43, v46);
  *(_QWORD *)(v3 + 88) = v48;
  *(_QWORD *)(v3 + 96) = v49;
  v50 = sub_1C35B6C60();
  v89 = (id)sub_1C3585EB0(v50, v51, &qword_1EF8D9A00, 0x1E0CB37E8, &qword_1EF8D9E40);
  swift_bridgeObjectRelease();
  if (v89)
    v52 = objc_msgSend(v89, sel_BOOLValue);
  else
    v52 = 0;
  *(_BYTE *)(v3 + 104) = v52;
  v53 = sub_1C35B6C60();
  v87 = (id)sub_1C3585EB0(v53, v54, &qword_1EF8D9A00, 0x1E0CB37E8, &qword_1EF8D9E40);
  swift_bridgeObjectRelease();
  if (v87)
    v55 = objc_msgSend(v87, sel_BOOLValue);
  else
    v55 = 0;
  *(_BYTE *)(v3 + 163) = v55;
  v56 = sub_1C35B6C60();
  sub_1C3585C64(v56, v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v85 = sub_1C3580744();
  v86 = v58;
  if (v58 >> 60 == 15)
  {
    sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
    v91 = 0;
    v92 = 0xE000000000000000;
    sub_1C35B6E10();
    swift_bridgeObjectRelease();
    v91 = 0xD000000000000011;
    v92 = 0x80000001C35C5CE0;
    sub_1C35B6C9C();
    swift_bridgeObjectRelease();
    sub_1C35B6C9C();
    sub_1C3577C3C(v91, v92, 8, 0);
    swift_willThrow();

    sub_1C3574174(v90, v25);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    sub_1C3573D7C(*(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
    sub_1C3574174(*(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56));
    sub_1C3574174(*(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72));
    sub_1C35A56D4(*(_QWORD *)(v3 + 80));
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 112) = v85;
  *(_QWORD *)(v3 + 120) = v86;
  v83 = sub_1C35B6C60();
  v60 = v59;
  sub_1C3573E48(v85, v86);
  sub_1C3585C64(v83, v60);
  v62 = v61;
  swift_bridgeObjectRelease();
  if (v62)
  {
    v63 = sub_1C3580744();
  }
  else
  {
    v63 = 0;
    v64 = 0xF000000000000000;
  }
  *(_QWORD *)(v3 + 128) = v63;
  *(_QWORD *)(v3 + 136) = v64;
  v65 = sub_1C35B6C60();
  v79 = sub_1C3586114(v65, v66, &qword_1ED7E1280, &qword_1EF8D9E38);
  swift_bridgeObjectRelease();
  if (v79)
  {
    v67 = *(_QWORD *)(v79 + 16);
    if (v67)
    {
      v68 = swift_bridgeObjectRetain() + 40;
      v84 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        swift_bridgeObjectRetain();
        v70 = sub_1C3580744();
        v81 = v71;
        v82 = v70;
        if (v71 >> 60 != 15)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v84 = sub_1C3580390(0, v84[2] + 1, 1, v84);
          v73 = v84[2];
          v72 = v84[3];
          v80 = v73 + 1;
          if (v73 >= v72 >> 1)
            v84 = sub_1C3580390((_QWORD *)(v72 > 1), v80, 1, v84);
          v84[2] = v80;
          v69 = &v84[2 * v73];
          v69[4] = v82;
          v69[5] = v81;
        }
        v68 += 16;
        --v67;
      }
      while (v67);
      swift_bridgeObjectRelease();
    }
    else
    {
      v84 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v84 = 0;
  }
  *(_QWORD *)(v3 + 144) = v84;
  v74 = sub_1C35B6C60();
  v76 = (void *)sub_1C3585EB0(v74, v75, &qword_1EF8D9A00, 0x1E0CB37E8, &qword_1EF8D9E40);
  swift_bridgeObjectRelease();
  if (v76)
  {
    v77 = v76;
    v78 = objc_msgSend(v77, sel_integerValue);

    sub_1C3574174(v85, v86);
    sub_1C3574174(v90, v25);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);

    sub_1C3574174(v90, v25);
    sub_1C3574174(v85, v86);
    v78 = 0;
  }
  *(_QWORD *)(v3 + 152) = v78;
  *(_BYTE *)(v3 + 160) = v76 == 0;
  return v3;
}

uint64_t sub_1C3591458(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  MEMORY[0x1C3BD2C6C](8224, 0xE200000000000000);
  sub_1C35B6E10();
  sub_1C35B6C9C();
  sub_1C35B6C9C();
  swift_bridgeObjectRetain();
  sub_1C35B6C9C();
  swift_bridgeObjectRelease();
  sub_1C35B6C9C();
  sub_1C35B6C9C();
  sub_1C35B6C9C();
  sub_1C357F9BC(v1[4], v1[5]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
  sub_1C3575338((unint64_t *)&qword_1EF8D9A40, &qword_1ED7E1280, MEMORY[0x1E0DEAF20]);
  sub_1C35B6C48();
  swift_bridgeObjectRelease();
  sub_1C35B6C9C();
  swift_bridgeObjectRelease();
  sub_1C35B6C9C();
  sub_1C35B6C9C();
  sub_1C35B6C9C();
  v2 = v1[7];
  if (v2 >> 60 != 15)
  {
    sub_1C357F9BC(v1[6], v2);
    sub_1C35B6C48();
    swift_bridgeObjectRelease();
  }
  sub_1C35B6C9C();
  swift_bridgeObjectRelease();
  sub_1C35B6C9C();
  sub_1C35B6C9C();
  sub_1C35B6C9C();
  v3 = v1[9];
  if (v3 >> 60 != 15)
  {
    sub_1C357F9BC(v1[8], v3);
    sub_1C35B6C48();
    swift_bridgeObjectRelease();
  }
  sub_1C35B6C9C();
  swift_bridgeObjectRelease();
  sub_1C35B6C9C();
  sub_1C35B6C9C();
  result = sub_1C35B6C9C();
  if (__OFADD__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    v5 = v1[11];
    v6 = v1[10];
    sub_1C35A5698(v6);
    sub_1C3591C10(a1 + 1, v6, v5);
    sub_1C35A56D4(v6);
    sub_1C35B6C9C();
    swift_bridgeObjectRelease();
    sub_1C35B6C9C();
    sub_1C35B6C9C();
    sub_1C35B6C9C();
    sub_1C35B6C9C();
    swift_bridgeObjectRelease();
    sub_1C35B6C9C();
    sub_1C35B6C9C();
    sub_1C35B6C9C();
    sub_1C35B6C9C();
    swift_bridgeObjectRelease();
    sub_1C35B6C9C();
    sub_1C35B6C9C();
    sub_1C35B6C9C();
    sub_1C357F9BC(v1[14], v1[15]);
    sub_1C35B6C48();
    swift_bridgeObjectRelease();
    sub_1C35B6C9C();
    swift_bridgeObjectRelease();
    sub_1C35B6C9C();
    sub_1C35B6C9C();
    sub_1C35B6C9C();
    v7 = v1[17];
    if (v7 >> 60 != 15)
    {
      sub_1C357F9BC(v1[16], v7);
      sub_1C35B6C48();
      swift_bridgeObjectRelease();
    }
    sub_1C35B6C9C();
    swift_bridgeObjectRelease();
    sub_1C35B6C9C();
    sub_1C35B6C9C();
    sub_1C35B6C9C();
    if (v1[18])
    {
      v8 = swift_bridgeObjectRetain();
      v9 = sub_1C3586890(v8);
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = MEMORY[0x1E0DEE9D8];
    }
    MEMORY[0x1C3BD2C90](v9, MEMORY[0x1E0DEA968]);
    sub_1C35B6C9C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1C35B6C9C();
    sub_1C35B6C9C();
    sub_1C35B6C9C();
    sub_1C35B6F3C();
    sub_1C35B6C9C();
    swift_bridgeObjectRelease();
    sub_1C35B6C9C();
    sub_1C35B6C9C();
    swift_bridgeObjectRelease();
    sub_1C35B6C9C();
    sub_1C35B6C9C();
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t sub_1C3591C10(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v6 = MEMORY[0x1C3BD2C6C](8224, 0xE200000000000000, a1);
  if (a2 <= 2)
  {
    v8 = v6;
    sub_1C35B6C9C();
    return v8;
  }
  v8 = v6;
  sub_1C35B6C9C();
  result = a1 + 1;
  if (!__OFADD__(a1, 1))
  {
    sub_1C3591DC0(result, a2, a3);
    sub_1C35B6C9C();
    swift_bridgeObjectRelease();
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C3591D28()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1C3573D7C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_1C3574174(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_1C3574174(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_1C35A56D4(*(_QWORD *)(v0 + 80));
  sub_1C3573D7C(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_1C3574174(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1C3591D80()
{
  sub_1C3591D28();
  return swift_deallocClassInstance();
}

uint64_t sub_1C3591D9C()
{
  return sub_1C3591458(0);
}

uint64_t sub_1C3591DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  int64_t v5;
  uint64_t v6;

  MEMORY[0x1C3BD2C6C](8224, 0xE200000000000000, a1);
  sub_1C35B6E10();
  sub_1C35B6C9C();
  sub_1C35B6C9C();
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    sub_1C35991AC(0, v4, 0);
    __asm { BR              X8 }
  }
  MEMORY[0x1C3BD2C90](MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEA968]);
  sub_1C35B6C9C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1C35B6C9C();
  sub_1C35B6C9C();
  sub_1C35B6C9C();
  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    sub_1C35991AC(0, v5, 0);
    __asm { BR              X8 }
  }
  MEMORY[0x1C3BD2C90](MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEA968]);
  sub_1C35B6C9C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1C35B6C9C();
  sub_1C35B6C9C();
  swift_bridgeObjectRelease();
  sub_1C35B6C9C();
  v6 = swift_bridgeObjectRetain();
  MEMORY[0x1C3BD2C90](v6, MEMORY[0x1E0DEDE70]);
  sub_1C35B6C9C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1C3592810()
{
  uint64_t v0;

  return sub_1C3591C10(0, *(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t sub_1C3592820(uint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = *a2;
  if (v4)
  {
    if (v4 != 1)
    {
      if (v4 == 2)
      {
        if (v5 != 2)
          return 0;
      }
      else
      {
        if (v5 < 3)
          return 0;
        v8 = a2[1];
        v7 = a2[2];
        v10 = a1[1];
        v9 = a1[2];
        if ((sub_1C35928C4(v4, v5) & 1) == 0 || (sub_1C35928C4(v10, v8) & 1) == 0 || !sub_1C35931D8(v9, v7))
          return 0;
      }
      return 1;
    }
    if (v5 == 1)
      return 1;
  }
  else if (!v5)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_1C35928C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

BOOL sub_1C35931D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  _BOOL8 result;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
    return 0;
  v3 = (unsigned __int8 *)(a1 + 33);
  v4 = (unsigned __int8 *)(a2 + 33);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_1C3593244()
{
  uint64_t *v0;

  return sub_1C3591DC0(0, *v0, v0[1]);
}

BOOL sub_1C3593254(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a2[1];
  v5 = a2[2];
  return (sub_1C35928C4(*a1, *a2) & 1) != 0 && (sub_1C35928C4(v2, v4) & 1) != 0 && sub_1C35931D8(v3, v5);
}

id sub_1C35932C0()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExpressMode(0)), sel_init);
  qword_1ED7E1260 = (uint64_t)result;
  return result;
}

uint64_t sub_1C35932F0()
{
  if (qword_1EF8D99F0 != -1)
    swift_once();
  qword_1EF8D9CE0 = qword_1EF8D9CE8;
  return swift_retain();
}

uint64_t sub_1C3593338()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_internalBuild) != 1)
    return 0;
  v1 = *(void **)(v0 + OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_userDefaults);
  v2 = (void *)sub_1C35B6C54();
  v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (v3)
  {
    sub_1C35B6DBC();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1C35AABF8((uint64_t)v6, (uint64_t)v7, &qword_1EF8D9A68);
  if (!v8)
  {
    sub_1C3577180((uint64_t)v7, &qword_1EF8D9A68);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
  if (swift_dynamicCast())
    return v5;
  else
    return 0;
}

void sub_1C359344C(void *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  unsigned __int8 *v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  uint8_t *v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  id v47[2];

  v2 = v1;
  v47[1] = *(id *)MEMORY[0x1E0C80C00];
  if ((byte_1EF8DB8C0 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E12A8);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1C35BBB70;
    *(_WORD *)(v4 + 32) = -3200;
    *(_BYTE *)(v4 + 34) = 2;
    v5 = v2[OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_internalBuild];
    if (v5 == 1
      && (v6 = *(void **)&v2[OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_userDefaults],
          v7 = (void *)sub_1C35B6C54(),
          LOBYTE(v6) = objc_msgSend(v6, sel_BOOLForKey_, v7),
          v7,
          (v6 & 1) != 0))
    {
      v8 = 90;
    }
    else
    {
      v8 = -91;
    }
    *(_BYTE *)(v4 + 35) = v8;
    v9 = sub_1C3576F64(v4);
    v11 = v10;
    swift_bridgeObjectRelease();
    v12 = (void *)sub_1C35B6A44();
    v47[0] = 0;
    v13 = objc_msgSend(a1, sel_transceive_error_, v12, v47);

    v14 = v47[0];
    if (v13)
    {
      v15 = sub_1C35B6A5C();
      sub_1C3573D7C(v15, v16);
    }
    else
    {
      v17 = v14;
      v13 = (id)sub_1C35B69C0();

      swift_willThrow();
    }

    byte_1EF8DB8C0 = 1;
    v18 = v2;
    v19 = sub_1C35B6AC8(v18);
    v20 = sub_1C35B6D68();
    if (!os_log_type_enabled(v19, v20))
    {

      sub_1C3573D7C(v9, v11);
LABEL_17:

      goto LABEL_18;
    }
    v21 = a1;
    v22 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v22 = 67109120;
    if (v5)
    {
      v23 = *(void **)&v18[OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_userDefaults];
      v24 = (void *)sub_1C35B6C54();
      LOBYTE(v23) = objc_msgSend(v23, sel_BOOLForKey_, v24);

      if ((v23 & 1) != 0)
      {
        v25 = 1;
LABEL_16:
        LODWORD(v47[0]) = v25;
        sub_1C35B6D98();

        _os_log_impl(&dword_1C3511000, v19, v20, "Configured express debug : enabled %{BOOL}d", v22, 8u);
        MEMORY[0x1C3BD380C](v22, -1, -1);
        sub_1C3573D7C(v9, v11);
        a1 = v21;
        goto LABEL_17;
      }
    }
    else
    {

    }
    v25 = 0;
    goto LABEL_16;
  }
LABEL_18:
  if (v2[OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_internalBuild] == 1)
  {
    v26 = *(void **)&v2[OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_userDefaults];
    v27 = (void *)sub_1C35B6C54();
    LODWORD(v26) = objc_msgSend(v26, sel_BOOLForKey_, v27);

    if ((_DWORD)v26)
    {
      v28 = sub_1C3576F64((uint64_t)&unk_1E7D8B6A0);
      v30 = v29;
      v31 = (void *)sub_1C35B6A44();
      v47[0] = 0;
      v32 = objc_msgSend(a1, sel_transceive_error_, v31, v47);

      v33 = v47[0];
      if (v32)
      {
        v34 = sub_1C35B6A5C();
        v36 = v35;

      }
      else
      {
        v37 = v33;
        v38 = (void *)sub_1C35B69C0();

        swift_willThrow();
        v34 = 0;
        v36 = 0xF000000000000000;
      }
      sub_1C3575268(v34, v36);
      v39 = sub_1C3575268(v34, v36);
      v40 = sub_1C35B6AC8(v39);
      v41 = sub_1C35B6D68();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc();
        v43 = (void *)swift_slowAlloc();
        v47[0] = v43;
        *(_DWORD *)v42 = 136315138;
        if (v36 >> 60 == 15)
        {
          v44 = 0xE700000000000000;
          v45 = 0x3E726F7272653CLL;
        }
        else
        {
          sub_1C357F9BC(v34, v36);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
          sub_1C3575338((unint64_t *)&qword_1EF8D9A40, &qword_1ED7E1280, MEMORY[0x1E0DEAF20]);
          v45 = sub_1C35B6C48();
          v44 = v46;
          swift_bridgeObjectRelease();
        }
        sub_1C3598590(v45, v44, (uint64_t *)v47);
        sub_1C35B6D98();
        swift_bridgeObjectRelease();
        sub_1C3574174(v34, v36);
        sub_1C3574174(v34, v36);
        _os_log_impl(&dword_1C3511000, v40, v41, "Express Mode Debug Log: %s", v42, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BD380C](v43, -1, -1);
        MEMORY[0x1C3BD380C](v42, -1, -1);
        sub_1C3573D7C(v28, v30);
        sub_1C3574174(v34, v36);

      }
      else
      {
        sub_1C3573D7C(v28, v30);
        sub_1C3574174(v34, v36);

        sub_1C3574174(v34, v36);
        sub_1C3574174(v34, v36);
      }
    }
  }
}

uint64_t sub_1C3593A5C()
{
  sub_1C35B6FB4();
  sub_1C35B6FC0();
  return sub_1C35B6FD8();
}

uint64_t sub_1C3593AA0()
{
  return sub_1C35B6FC0();
}

uint64_t sub_1C3593AC8()
{
  sub_1C35B6FB4();
  sub_1C35B6FC0();
  return sub_1C35B6FD8();
}

uint64_t sub_1C3593B08(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;

  v4 = sub_1C3576F64(a1);
  v6 = v5;
  v7 = *v2;
  v8 = v2[1];
  v13 = v5;
  sub_1C3573E48(*v2, v8);
  sub_1C3573E48(v4, v6);
  sub_1C3586E0C(v7, v8);
  sub_1C3573D7C(v7, v8);
  sub_1C3573D7C(v4, v6);
  v9 = sub_1C3576F64(a2);
  v11 = v10;
  sub_1C3573E48(v4, v13);
  sub_1C3586E0C(v9, v11);
  sub_1C3573D7C(v9, v11);
  sub_1C3573D7C(v4, v13);
  return v4;
}

uint64_t sub_1C3593BE0()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  sub_1C35B6FB4();
  sub_1C3573E48(v1, v2);
  sub_1C35B6A68();
  sub_1C3573D7C(v1, v2);
  sub_1C3573E48(v3, v4);
  sub_1C35B6A68();
  sub_1C3573D7C(v3, v4);
  sub_1C35B6FC0();
  return sub_1C35B6FD8();
}

uint64_t sub_1C3593C8C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  sub_1C3573E48(*v0, v2);
  sub_1C35B6A68();
  sub_1C3573D7C(v1, v2);
  sub_1C3573E48(v3, v4);
  sub_1C35B6A68();
  sub_1C3573D7C(v3, v4);
  return sub_1C35B6FC0();
}

uint64_t sub_1C3593D20()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  sub_1C35B6FB4();
  sub_1C3573E48(v1, v2);
  sub_1C35B6A68();
  sub_1C3573D7C(v1, v2);
  sub_1C3573E48(v3, v4);
  sub_1C35B6A68();
  sub_1C3573D7C(v3, v4);
  sub_1C35B6FC0();
  return sub_1C35B6FD8();
}

uint64_t sub_1C3593DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  char v6;
  char v7;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a2 + 32);
  sub_1C3573B04(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v6 & 1) == 0)
    return 0;
  sub_1C3573B04(v2, v3);
  if ((v7 & 1) != 0)
    return v4 ^ v5 ^ 1u;
  else
    return 0;
}

uint64_t sub_1C3593E44()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  type metadata accessor for ExpressMode.PTAExpressModeManager(0);
  v0 = swift_allocObject();
  result = sub_1C35B6AD4();
  v2 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCC24AppletTranslationLibrary11ExpressModeP33_F6A5673F67A2A086B8B4649671CBFF8221PTAExpressModeManager_homeEndpoints) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCC24AppletTranslationLibrary11ExpressModeP33_F6A5673F67A2A086B8B4649671CBFF8221PTAExpressModeManager_hydraEndpoints) = v2;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCC24AppletTranslationLibrary11ExpressModeP33_F6A5673F67A2A086B8B4649671CBFF8221PTAExpressModeManager_lyonEndpoints) = v2;
  qword_1EF8D9CE8 = v0;
  return result;
}

uint64_t sub_1C3593EEC(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    if (sub_1C35B6EDC())
    {
LABEL_3:
      if ((a1 & 0xC000000000000001) != 0)
      {
        v3 = MEMORY[0x1C3BD2DEC](0, a1);
      }
      else
      {
        if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          JUMPOUT(0x1C35945F4);
        }
        v3 = *(_QWORD *)(a1 + 32);
        swift_retain();
      }
      __asm { BR              X8 }
    }
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1C3594690(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19[5];
  uint64_t v20;
  _OWORD v21[2];
  char v22;

  v2 = result;
  v3 = 0;
  v20 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v16 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v8)
      goto LABEL_23;
    v17 = *(_QWORD *)(v4 + 8 * v16);
    ++v3;
    if (!v17)
    {
      v3 = v16 + 1;
      if (v16 + 1 >= v8)
        goto LABEL_23;
      v17 = *(_QWORD *)(v4 + 8 * v3);
      if (!v17)
      {
        v3 = v16 + 2;
        if (v16 + 2 >= v8)
          goto LABEL_23;
        v17 = *(_QWORD *)(v4 + 8 * v3);
        if (!v17)
        {
          v3 = v16 + 3;
          if (v16 + 3 >= v8)
            goto LABEL_23;
          v17 = *(_QWORD *)(v4 + 8 * v3);
          if (!v17)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v17 - 1) & v17;
    v10 = __clz(__rbit64(v17)) + (v3 << 6);
LABEL_5:
    v11 = *(_QWORD *)(v2 + 48) + 40 * v10;
    v12 = *(_BYTE *)(v11 + 32);
    v13 = *(_OWORD *)(v11 + 16);
    v21[0] = *(_OWORD *)v11;
    v21[1] = v13;
    v22 = v12;
    sub_1C35AA948((uint64_t *)v21, (void (*)(uint64_t, uint64_t))sub_1C3573E48);
    sub_1C359F098((uint64_t)v19, (uint64_t *)v21);
    v14 = v19[2];
    v15 = v19[3];
    sub_1C3573D7C(v19[0], v19[1]);
    result = sub_1C3573D7C(v14, v15);
  }
  v18 = v16 + 4;
  if (v18 >= v8)
  {
LABEL_23:
    swift_release();
    return v20;
  }
  v17 = *(_QWORD *)(v4 + 8 * v18);
  if (v17)
  {
    v3 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v17 = *(_QWORD *)(v4 + 8 * v3);
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_1C359483C(char a1, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t *v42;
  NSObject *v43;
  os_log_type_t v44;
  _DWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  void *v50;
  id v51;
  id v52;
  void *v53;
  void *v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  char v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v76;
  int64_t v77;
  unint64_t v78;
  int64_t v79;
  id v80[2];
  id v81;
  _OWORD v82[2];
  char v83;
  __int128 v84;
  _BYTE v85[16];
  _QWORD v86[4];

  v86[2] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1 == 1)
      v3 = &OBJC_IVAR____TtCC24AppletTranslationLibrary11ExpressModeP33_F6A5673F67A2A086B8B4649671CBFF8221PTAExpressModeManager_homeEndpoints;
    else
      v3 = &OBJC_IVAR____TtCC24AppletTranslationLibrary11ExpressModeP33_F6A5673F67A2A086B8B4649671CBFF8221PTAExpressModeManager_lyonEndpoints;
  }
  else
  {
    v3 = &OBJC_IVAR____TtCC24AppletTranslationLibrary11ExpressModeP33_F6A5673F67A2A086B8B4649671CBFF8221PTAExpressModeManager_hydraEndpoints;
  }
  v74 = *(_QWORD *)(v2 + *v3);
  swift_bridgeObjectRetain();
  v4 = sub_1C3580744();
  if (v5 >> 60 == 15)
    __break(1u);
  v6 = v4;
  v7 = v5;
  v8 = (void *)sub_1C35B6A44();
  v9 = (id)SelectByNameCmd(v8);

  v10 = sub_1C35B6A5C();
  v12 = v11;

  v13 = (void *)sub_1C35B6A44();
  sub_1C3573D7C(v10, v12);
  v80[0] = 0;
  v14 = objc_msgSend(a2, sel_transceiveAndCheckSW_error_, v13, v80);

  v15 = v80[0];
  if (!v14)
  {
    v68 = v15;
    swift_bridgeObjectRelease();
    sub_1C35B69C0();

    swift_willThrow();
    sub_1C3574174(v6, v7);
    return;
  }
  v70 = v6;
  v71 = v7;
  v16 = sub_1C35B6A5C();
  sub_1C3573D7C(v16, v17);

  v18 = sub_1C3576F64((uint64_t)&unk_1E7D8B600);
  v20 = v19;
  v21 = (void *)sub_1C35B6A44();
  v80[0] = 0;
  v22 = objc_msgSend(a2, sel_transceiveAndCheckSW_error_, v21, v80);

  v23 = v80[0];
  if (!v22)
  {
    v69 = v23;
    swift_bridgeObjectRelease();
    sub_1C35B69C0();

    swift_willThrow();
    goto LABEL_49;
  }
  v24 = sub_1C35B6A5C();
  sub_1C3573D7C(v24, v25);

  v26 = 0;
  v27 = v74;
  v76 = v74 + 56;
  v28 = 1 << *(_BYTE *)(v74 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & *(_QWORD *)(v74 + 56);
  v77 = (unint64_t)(v28 + 63) >> 6;
  v72 = v18;
  v73 = v20;
  while (1)
  {
    do
    {
      if (v30)
      {
        v34 = __clz(__rbit64(v30));
        v30 &= v30 - 1;
        v35 = v34 | (v26 << 6);
        goto LABEL_27;
      }
      if (__OFADD__(v26++, 1))
      {
        __break(1u);
        goto LABEL_54;
      }
      if (v26 >= v77)
        goto LABEL_47;
      v37 = *(_QWORD *)(v76 + 8 * v26);
      if (v37)
        goto LABEL_26;
      v38 = v26 + 1;
      if (v26 + 1 >= v77)
        goto LABEL_47;
      v37 = *(_QWORD *)(v76 + 8 * v38);
      if (!v37)
      {
        v38 = v26 + 2;
        if (v26 + 2 >= v77)
          goto LABEL_47;
        v37 = *(_QWORD *)(v76 + 8 * v38);
        if (!v37)
        {
          v38 = v26 + 3;
          if (v26 + 3 < v77)
          {
            v37 = *(_QWORD *)(v76 + 8 * v38);
            if (v37)
              goto LABEL_25;
            while (1)
            {
              v26 = v38 + 1;
              if (__OFADD__(v38, 1))
                break;
              if (v26 >= v77)
                goto LABEL_47;
              v37 = *(_QWORD *)(v76 + 8 * v26);
              ++v38;
              if (v37)
                goto LABEL_26;
            }
LABEL_54:
            __break(1u);
            JUMPOUT(0x1C35953DCLL);
          }
LABEL_47:
          swift_release();
LABEL_49:
          sub_1C3574174(v70, v71);
          sub_1C3573D7C(v18, v20);
          return;
        }
      }
LABEL_25:
      v26 = v38;
LABEL_26:
      v30 = (v37 - 1) & v37;
      v35 = __clz(__rbit64(v37)) + (v26 << 6);
LABEL_27:
      v39 = *(_QWORD *)(v27 + 48) + 40 * v35;
      v41 = *(_OWORD *)v39;
      v40 = *(_OWORD *)(v39 + 16);
      v83 = *(_BYTE *)(v39 + 32);
      v82[0] = v41;
      v82[1] = v40;
    }
    while ((v83 & 1) != 0);
    v78 = v30;
    v79 = v26;
    sub_1C35AA948((uint64_t *)v82, (void (*)(uint64_t, uint64_t))sub_1C3573E48);
    sub_1C35AA948((uint64_t *)v82, (void (*)(uint64_t, uint64_t))sub_1C3573E48);
    v42 = sub_1C35AA948((uint64_t *)v82, (void (*)(uint64_t, uint64_t))sub_1C3573E48);
    v43 = sub_1C35B6AC8(v42);
    v44 = sub_1C35B6D68();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (_DWORD *)swift_slowAlloc();
      v81 = (id)swift_slowAlloc();
      *v45 = 136315138;
      v84 = v82[0];
      sub_1C35AA990((uint64_t)&v84, (uint64_t)v85);
      sub_1C35AA990((uint64_t)v85, (uint64_t)v86);
      __asm { BR              X10 }
    }

    sub_1C35AA948((uint64_t *)v82, (void (*)(uint64_t, uint64_t))sub_1C3573D7C);
    sub_1C35AA948((uint64_t *)v82, (void (*)(uint64_t, uint64_t))sub_1C3573D7C);
    v46 = sub_1C3593B08((uint64_t)&unk_1E7D8B5B0, (uint64_t)&unk_1E7D8B5D8);
    v48 = v47;
    v49 = (void *)sub_1C35B6A44();
    if (qword_1EF8D99A8 != -1)
      swift_once();
    sub_1C3575208(0, &qword_1EF8D9A00);
    v50 = (void *)sub_1C35B6CD8();
    v80[0] = 0;
    v51 = objc_msgSend(a2, sel_transceiveAndCheckSW_inArray_error_, v49, v50, v80);

    v52 = v80[0];
    if (v51)
    {
      v31 = sub_1C35B6A5C();
      v33 = v32;
      sub_1C3573D7C(v46, v48);
      sub_1C35AA948((uint64_t *)v82, (void (*)(uint64_t, uint64_t))sub_1C3573D7C);
      sub_1C3573D7C(v31, v33);

      goto LABEL_13;
    }
    v53 = v52;
    v54 = (void *)sub_1C35B69C0();

    swift_willThrow();
    v80[0] = v54;
    v55 = v54;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E10);
    sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
    if (!swift_dynamicCast())
    {
      swift_release();
      sub_1C3574174(v70, v71);
      sub_1C3573D7C(v72, v73);
      sub_1C3573D7C(v46, v48);
      goto LABEL_52;
    }
    v56 = v54;
    v57 = v81;
    v58 = objc_msgSend(v81, sel_domain);
    v59 = sub_1C35B6C60();
    v61 = v60;

    if (v59 != 5002305 || v61 != 0xE300000000000000)
      break;
    swift_bridgeObjectRelease();
    v62 = v56;
LABEL_43:

    v65 = sub_1C35B6AC8(v64);
    v66 = sub_1C35B6D50();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v67 = 0;
      _os_log_impl(&dword_1C3511000, v65, v66, "Setup Failed.. continue", v67, 2u);
      MEMORY[0x1C3BD380C](v67, -1, -1);
    }
    sub_1C3573D7C(v46, v48);

    sub_1C35AA948((uint64_t *)v82, (void (*)(uint64_t, uint64_t))sub_1C3573D7C);
LABEL_13:
    v20 = v73;
    v27 = v74;
    v18 = v72;
    v30 = v78;
    v26 = v79;
  }
  v63 = sub_1C35B6F48();
  swift_bridgeObjectRelease();
  v62 = v56;
  if ((v63 & 1) != 0)
    goto LABEL_43;
  swift_release();
  sub_1C3574174(v70, v71);
  sub_1C3573D7C(v72, v73);
  sub_1C3573D7C(v46, v48);

LABEL_52:
  sub_1C35AA948((uint64_t *)v82, (void (*)(uint64_t, uint64_t))sub_1C3573D7C);

}

void sub_1C3595460(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t *v41;
  NSObject *v42;
  os_log_type_t v43;
  _DWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  void *v49;
  id v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  char v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  unint64_t v77;
  int64_t v78;
  id v79[2];
  id v80;
  _OWORD v81[2];
  char v82;
  __int128 v83;
  _BYTE v84[16];
  _QWORD v85[4];

  v85[2] = *MEMORY[0x1E0C80C00];
  v74 = *(_QWORD *)(v2
                  + OBJC_IVAR____TtCC24AppletTranslationLibrary11ExpressModeP33_F6A5673F67A2A086B8B4649671CBFF8221PTAExpressModeManager_lyonEndpoints);
  swift_bridgeObjectRetain();
  v3 = sub_1C3580744();
  if (v4 >> 60 == 15)
    __break(1u);
  v5 = v3;
  v6 = v4;
  v7 = (void *)sub_1C35B6A44();
  v8 = (id)SelectByNameCmd(v7);

  v9 = sub_1C35B6A5C();
  v11 = v10;

  v12 = (void *)sub_1C35B6A44();
  sub_1C3573D7C(v9, v11);
  v79[0] = 0;
  v13 = objc_msgSend(a2, sel_transceiveAndCheckSW_error_, v12, v79);

  v14 = v79[0];
  if (!v13)
  {
    v67 = v14;
    swift_bridgeObjectRelease();
    sub_1C35B69C0();

    swift_willThrow();
    sub_1C3574174(v5, v6);
    return;
  }
  v69 = v5;
  v70 = v6;
  v15 = sub_1C35B6A5C();
  sub_1C3573D7C(v15, v16);

  v17 = sub_1C3576F64((uint64_t)&unk_1E7D8B678);
  v19 = v18;
  v20 = (void *)sub_1C35B6A44();
  v79[0] = 0;
  v21 = objc_msgSend(a2, sel_transceiveAndCheckSW_error_, v20, v79);

  v22 = v79[0];
  if (!v21)
  {
    v68 = v22;
    swift_bridgeObjectRelease();
    sub_1C35B69C0();

    swift_willThrow();
    goto LABEL_44;
  }
  v23 = sub_1C35B6A5C();
  sub_1C3573D7C(v23, v24);

  v25 = 0;
  v26 = v74;
  v75 = v74 + 56;
  v27 = 1 << *(_BYTE *)(v74 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & *(_QWORD *)(v74 + 56);
  v76 = (unint64_t)(v27 + 63) >> 6;
  v71 = v17;
  v72 = v19;
  while (1)
  {
    do
    {
      if (v29)
      {
        v33 = __clz(__rbit64(v29));
        v29 &= v29 - 1;
        v34 = v33 | (v25 << 6);
        goto LABEL_22;
      }
      if (__OFADD__(v25++, 1))
      {
        __break(1u);
        goto LABEL_49;
      }
      if (v25 >= v76)
        goto LABEL_42;
      v36 = *(_QWORD *)(v75 + 8 * v25);
      if (v36)
        goto LABEL_21;
      v37 = v25 + 1;
      if (v25 + 1 >= v76)
        goto LABEL_42;
      v36 = *(_QWORD *)(v75 + 8 * v37);
      if (!v36)
      {
        v37 = v25 + 2;
        if (v25 + 2 >= v76)
          goto LABEL_42;
        v36 = *(_QWORD *)(v75 + 8 * v37);
        if (!v36)
        {
          v37 = v25 + 3;
          if (v25 + 3 < v76)
          {
            v36 = *(_QWORD *)(v75 + 8 * v37);
            if (v36)
              goto LABEL_20;
            while (1)
            {
              v25 = v37 + 1;
              if (__OFADD__(v37, 1))
                break;
              if (v25 >= v76)
                goto LABEL_42;
              v36 = *(_QWORD *)(v75 + 8 * v25);
              ++v37;
              if (v36)
                goto LABEL_21;
            }
LABEL_49:
            __break(1u);
            JUMPOUT(0x1C3595FF0);
          }
LABEL_42:
          swift_release();
LABEL_44:
          sub_1C3574174(v69, v70);
          sub_1C3573D7C(v17, v19);
          return;
        }
      }
LABEL_20:
      v25 = v37;
LABEL_21:
      v29 = (v36 - 1) & v36;
      v34 = __clz(__rbit64(v36)) + (v25 << 6);
LABEL_22:
      v38 = *(_QWORD *)(v26 + 48) + 40 * v34;
      v40 = *(_OWORD *)v38;
      v39 = *(_OWORD *)(v38 + 16);
      v82 = *(_BYTE *)(v38 + 32);
      v81[0] = v40;
      v81[1] = v39;
    }
    while (v82 != 1);
    v77 = v29;
    v78 = v25;
    sub_1C35AA948((uint64_t *)v81, (void (*)(uint64_t, uint64_t))sub_1C3573E48);
    sub_1C35AA948((uint64_t *)v81, (void (*)(uint64_t, uint64_t))sub_1C3573E48);
    v41 = sub_1C35AA948((uint64_t *)v81, (void (*)(uint64_t, uint64_t))sub_1C3573E48);
    v42 = sub_1C35B6AC8(v41);
    v43 = sub_1C35B6D68();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (_DWORD *)swift_slowAlloc();
      v80 = (id)swift_slowAlloc();
      *v44 = 136315138;
      v83 = v81[0];
      sub_1C35AA990((uint64_t)&v83, (uint64_t)v84);
      sub_1C35AA990((uint64_t)v84, (uint64_t)v85);
      __asm { BR              X10 }
    }

    sub_1C35AA948((uint64_t *)v81, (void (*)(uint64_t, uint64_t))sub_1C3573D7C);
    sub_1C35AA948((uint64_t *)v81, (void (*)(uint64_t, uint64_t))sub_1C3573D7C);
    v45 = sub_1C3593B08((uint64_t)&unk_1E7D8B628, (uint64_t)&unk_1E7D8B650);
    v47 = v46;
    v48 = (void *)sub_1C35B6A44();
    if (qword_1EF8D99A8 != -1)
      swift_once();
    sub_1C3575208(0, &qword_1EF8D9A00);
    v49 = (void *)sub_1C35B6CD8();
    v79[0] = 0;
    v50 = objc_msgSend(a2, sel_transceiveAndCheckSW_inArray_error_, v48, v49, v79);

    v51 = v79[0];
    if (v50)
    {
      v30 = sub_1C35B6A5C();
      v32 = v31;
      sub_1C3573D7C(v45, v47);
      sub_1C35AA948((uint64_t *)v81, (void (*)(uint64_t, uint64_t))sub_1C3573D7C);
      sub_1C3573D7C(v30, v32);

      goto LABEL_8;
    }
    v52 = v51;
    v53 = (void *)sub_1C35B69C0();

    swift_willThrow();
    v79[0] = v53;
    v54 = v53;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E10);
    sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
    if (!swift_dynamicCast())
    {
      swift_release();
      sub_1C3574174(v69, v70);
      sub_1C3573D7C(v71, v72);
      sub_1C3573D7C(v45, v47);
      goto LABEL_47;
    }
    v55 = v53;
    v56 = v80;
    v57 = objc_msgSend(v80, sel_domain);
    v58 = sub_1C35B6C60();
    v60 = v59;

    if (v58 != 5002305 || v60 != 0xE300000000000000)
      break;
    swift_bridgeObjectRelease();
    v61 = v55;
LABEL_38:

    v64 = sub_1C35B6AC8(v63);
    v65 = sub_1C35B6D50();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v66 = 0;
      _os_log_impl(&dword_1C3511000, v64, v65, "Setup Failed.. continue", v66, 2u);
      MEMORY[0x1C3BD380C](v66, -1, -1);
    }
    sub_1C3573D7C(v45, v47);

    sub_1C35AA948((uint64_t *)v81, (void (*)(uint64_t, uint64_t))sub_1C3573D7C);
LABEL_8:
    v26 = v74;
    v17 = v71;
    v19 = v72;
    v29 = v77;
    v25 = v78;
  }
  v62 = sub_1C35B6F48();
  swift_bridgeObjectRelease();
  v61 = v55;
  if ((v62 & 1) != 0)
    goto LABEL_38;
  swift_release();
  sub_1C3574174(v69, v70);
  sub_1C3573D7C(v71, v72);
  sub_1C3573D7C(v45, v47);

LABEL_47:
  sub_1C35AA948((uint64_t *)v81, (void (*)(uint64_t, uint64_t))sub_1C3573D7C);

}

uint64_t sub_1C3596074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0
     + OBJC_IVAR____TtCC24AppletTranslationLibrary11ExpressModeP33_F6A5673F67A2A086B8B4649671CBFF8221PTAExpressModeManager_logger;
  v2 = sub_1C35B6AE0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

id sub_1C35960F4()
{
  void *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  unint64_t v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  objc_super v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = v0;
  sub_1C35B6AD4();
  v46 = sub_1C35B6C60();
  v47 = v2;
  v48 = sub_1C35B6C60();
  v49 = v3;
  v45 = MEMORY[0x1E0DEE9D8];
  sub_1C3599254(0, 2, 0);
  v4 = v45;
  swift_bridgeObjectRetain_n();
  result = (id)sub_1C3580744();
  if (v6 >> 60 == 15)
    goto LABEL_8;
  v7 = result;
  v8 = v6;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v45 + 16);
  v9 = *(_QWORD *)(v45 + 24);
  if (v10 >= v9 >> 1)
  {
    sub_1C3599254(v9 > 1, v10 + 1, 1);
    v4 = v45;
  }
  *(_QWORD *)(v4 + 16) = v10 + 1;
  v11 = v4 + 16 * v10;
  *(_QWORD *)(v11 + 32) = v7;
  *(_QWORD *)(v11 + 40) = v8;
  swift_bridgeObjectRetain_n();
  result = (id)sub_1C3580744();
  if (v12 >> 60 == 15)
  {
LABEL_8:
    __break(1u);
  }
  else
  {
    v13 = result;
    v14 = v12;
    swift_bridgeObjectRelease();
    v45 = v4;
    v16 = *(_QWORD *)(v4 + 16);
    v15 = *(_QWORD *)(v4 + 24);
    if (v16 >= v15 >> 1)
    {
      sub_1C3599254(v15 > 1, v16 + 1, 1);
      v4 = v45;
    }
    *(_QWORD *)(v4 + 16) = v16 + 1;
    v17 = v4 + 16 * v16;
    *(_QWORD *)(v17 + 32) = v13;
    *(_QWORD *)(v17 + 40) = v14;
    v18 = OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_modulesRequiringSlowPath;
    swift_arrayDestroy();
    *(_QWORD *)&v1[v18] = v4;
    v19 = OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_reservedTCIs;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1208);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C35BBC60;
    *(_QWORD *)(inited + 32) = sub_1C3576F64((uint64_t)&unk_1E7D8B6C8);
    *(_QWORD *)(inited + 40) = v21;
    *(_QWORD *)(inited + 48) = sub_1C3576F64((uint64_t)&unk_1E7D8B6F0);
    *(_QWORD *)(inited + 56) = v22;
    *(_QWORD *)(inited + 64) = sub_1C3576F64((uint64_t)&unk_1E7D8B718);
    *(_QWORD *)(inited + 72) = v23;
    *(_QWORD *)(inited + 80) = sub_1C3576F64((uint64_t)&unk_1E7D8B740);
    *(_QWORD *)(inited + 88) = v24;
    *(_QWORD *)(inited + 96) = sub_1C3576F64((uint64_t)&unk_1E7D8B768);
    *(_QWORD *)(inited + 104) = v25;
    *(_QWORD *)(inited + 112) = sub_1C3576F64((uint64_t)&unk_1E7D8B790);
    *(_QWORD *)(inited + 120) = v26;
    *(_QWORD *)(inited + 128) = sub_1C3576F64((uint64_t)&unk_1E7D8B7B8);
    *(_QWORD *)(inited + 136) = v27;
    *(_QWORD *)(inited + 144) = sub_1C3576F64((uint64_t)&unk_1E7D8B7E0);
    *(_QWORD *)(inited + 152) = v28;
    *(_QWORD *)(inited + 160) = sub_1C3576F64((uint64_t)&unk_1E7D8B808);
    *(_QWORD *)(inited + 168) = v29;
    *(_QWORD *)(inited + 176) = sub_1C3576F64((uint64_t)&unk_1E7D8B830);
    *(_QWORD *)(inited + 184) = v30;
    *(_QWORD *)(inited + 192) = sub_1C3576F64((uint64_t)&unk_1E7D8B858);
    *(_QWORD *)(inited + 200) = v31;
    *(_QWORD *)(inited + 208) = sub_1C3576F64((uint64_t)&unk_1E7D8B880);
    *(_QWORD *)(inited + 216) = v32;
    *(_QWORD *)(inited + 224) = sub_1C3576F64((uint64_t)&unk_1E7D8B8A8);
    *(_QWORD *)(inited + 232) = v33;
    *(_QWORD *)(inited + 240) = sub_1C3576F64((uint64_t)&unk_1E7D8B8D0);
    *(_QWORD *)(inited + 248) = v34;
    *(_QWORD *)(inited + 256) = sub_1C3576F64((uint64_t)&unk_1E7D8B8F8);
    *(_QWORD *)(inited + 264) = v35;
    *(_QWORD *)(inited + 272) = sub_1C3576F64((uint64_t)&unk_1E7D8B920);
    *(_QWORD *)(inited + 280) = v36;
    *(_QWORD *)(inited + 288) = sub_1C3576F64((uint64_t)&unk_1E7D8B948);
    *(_QWORD *)(inited + 296) = v37;
    *(_QWORD *)(inited + 304) = sub_1C3576F64((uint64_t)&unk_1E7D8B970);
    *(_QWORD *)(inited + 312) = v38;
    *(_QWORD *)(inited + 320) = sub_1C3576F64((uint64_t)&unk_1E7D8B998);
    *(_QWORD *)(inited + 328) = v39;
    *(_QWORD *)(inited + 336) = sub_1C3576F64((uint64_t)&unk_1E7D8B9C0);
    *(_QWORD *)(inited + 344) = v40;
    v41 = sub_1C35A7858(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    *(_QWORD *)&v1[v19] = v41;
    v42 = OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_internalBuild;
    objc_opt_self();
    v1[v42] = +[AppletTranslator isInternalBuild]();
    v43 = OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_userDefaults;
    *(_QWORD *)&v1[v43] = +[AppletTranslator userDefaults]();

    v44.receiver = v1;
    v44.super_class = (Class)type metadata accessor for ExpressMode(0);
    return objc_msgSendSuper2(&v44, sel_init);
  }
  return result;
}

id sub_1C3596504()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExpressMode(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C35965A8()
{
  return type metadata accessor for ExpressMode(0);
}

uint64_t type metadata accessor for ExpressMode(uint64_t a1)
{
  return sub_1C3596694(a1, (uint64_t *)&unk_1ED7E1270);
}

uint64_t sub_1C35965C4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C35B6AE0();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ExpressMode.PassConfig()
{
  return objc_opt_self();
}

uint64_t sub_1C3596678()
{
  return type metadata accessor for ExpressMode.PTAExpressModeManager(0);
}

uint64_t type metadata accessor for ExpressMode.PTAExpressModeManager(uint64_t a1)
{
  return sub_1C3596694(a1, qword_1EF8D9D38);
}

uint64_t sub_1C3596694(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1C35966C8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C35B6AE0();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t destroy for ExpressMode.PTAExpressModeManager.PTAEndpointConfig(uint64_t a1)
{
  sub_1C3573D7C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return sub_1C3573D7C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for ExpressMode.PTAExpressModeManager.PTAEndpointConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_1C3573E48(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_1C3573E48(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for ExpressMode.PTAExpressModeManager.PTAEndpointConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_1C3573E48(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_1C3573D7C(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_1C3573E48(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  sub_1C3573D7C(v10, v11);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ExpressMode.PTAExpressModeManager.PTAEndpointConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1C3573D7C(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_1C3573D7C(v6, v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpressMode.PTAExpressModeManager.PTAEndpointConfig(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpressMode.PTAExpressModeManager.PTAEndpointConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExpressMode.PTAExpressModeManager.PTAEndpointConfig()
{
  return &type metadata for ExpressMode.PTAExpressModeManager.PTAEndpointConfig;
}

unint64_t destroy for ExpressMode.ExpressInfo(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s24AppletTranslationLibrary11ExpressModeC11ExpressInfoOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

unint64_t *assignWithCopy for ExpressMode.ExpressInfo(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;

  v4 = *a1;
  v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v6 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v6;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ExpressMode.ExpressInfo(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpressMode.ExpressInfo(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ExpressMode.ExpressInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 2;
  }
  return result;
}

uint64_t sub_1C3596C1C(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1C3596C34(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ExpressMode.ExpressInfo()
{
  return &type metadata for ExpressMode.ExpressInfo;
}

unint64_t sub_1C3596C68()
{
  unint64_t result;

  result = qword_1EF8D9DD8;
  if (!qword_1EF8D9DD8)
  {
    result = MEMORY[0x1C3BD3788](&unk_1C35BBDC0, &type metadata for ExpressMode.PTAExpressModeManager.PTAEndpointConfig);
    atomic_store(result, (unint64_t *)&qword_1EF8D9DD8);
  }
  return result;
}

void sub_1C3596CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1C3596D0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1C3596EF0);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_1C3596F14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v17;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v2 = 1 << *(_BYTE *)(a1 + 32);
    if (v2 < 64)
      v3 = ~(-1 << v2);
    else
      v3 = -1;
    v4 = v3 & *(_QWORD *)(a1 + 56);
    v5 = (unint64_t)(v2 + 63) >> 6;
    v6 = a2 + 56;
    if (v4)
    {
      v7 = __clz(__rbit64(v4));
LABEL_23:
      v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 40 * v7);
      v12 = *v11;
      v13 = v11[1];
      v14 = v11[2];
      v15 = v11[3];
      sub_1C35B6FB4();
      sub_1C3573E48(v12, v13);
      sub_1C3573E48(v14, v15);
      sub_1C3573E48(v12, v13);
      sub_1C35B6A68();
      sub_1C3573D7C(v12, v13);
      sub_1C3573E48(v14, v15);
      sub_1C35B6A68();
      sub_1C3573D7C(v14, v15);
      sub_1C35B6FC0();
      v17 = sub_1C35B6FD8() & ~(-1 << *(_BYTE *)(a2 + 32));
      if (((*(_QWORD *)(v6 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
        __asm { BR              X10 }
      sub_1C3573D7C(v12, v13);
      sub_1C3573D7C(v14, v15);
      return 0;
    }
    if ((unint64_t)(v2 + 63) >> 6 > 1)
    {
      v8 = *(_QWORD *)(a1 + 64);
      v9 = 1;
      if (v8)
        goto LABEL_22;
      v9 = 2;
      if (v5 <= 2)
        return 1;
      v8 = *(_QWORD *)(a1 + 72);
      if (v8)
        goto LABEL_22;
      v9 = 3;
      if (v5 <= 3)
        return 1;
      v8 = *(_QWORD *)(a1 + 80);
      if (v8)
        goto LABEL_22;
      v9 = 4;
      if (v5 <= 4)
        return 1;
      v8 = *(_QWORD *)(a1 + 88);
      if (v8)
      {
LABEL_22:
        v7 = __clz(__rbit64(v8)) + (v9 << 6);
        goto LABEL_23;
      }
      v10 = 5;
      if (v5 > 5)
      {
        v8 = *(_QWORD *)(a1 + 96);
        if (v8)
        {
          v9 = 5;
          goto LABEL_22;
        }
        while (1)
        {
          v9 = v10 + 1;
          if (__OFADD__(v10, 1))
            __break(1u);
          if (v9 >= v5)
            break;
          v8 = *(_QWORD *)(a1 + 56 + 8 * v9);
          ++v10;
          if (v8)
            goto LABEL_22;
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t sub_1C3598490(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  int64_t v5;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)result || a1 > *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v3 + 16) <= a1)
      v5 = a1;
    else
      v5 = *(_QWORD *)(v3 + 16);
    return sub_1C3599254(result, v5, 0);
  }
  return result;
}

uint64_t sub_1C35984F4(uint64_t result)
{
  _QWORD *v1;

  if (result + 1 > *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
    return sub_1C35B6CFC();
  return result;
}

uint64_t sub_1C3598520(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  sub_1C3598590(v6, v7, a3);
  v8 = *a1 + 8;
  sub_1C35B6D98();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_1C3598590(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1C3598660(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1C3575174((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1C3575174((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v12);
  return v7;
}

uint64_t sub_1C3598660(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1C35B6DA4();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1C3598818(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1C35B6E58();
  if (!v8)
  {
    sub_1C35B6EC4();
    __break(1u);
LABEL_17:
    result = sub_1C35B6F0C();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1C3598818(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1C35988AC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1C3598A84(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1C3598A84(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1C35988AC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1C3598A20(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1C35B6E1C();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1C35B6EC4();
      __break(1u);
LABEL_10:
      v2 = sub_1C35B6CB4();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1C35B6F0C();
    __break(1u);
LABEL_14:
    result = sub_1C35B6EC4();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_1C3598A20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E12A8);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1C3598A84(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E12A8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

void sub_1C3598BD0()
{
  __asm { BR              X12 }
}

uint64_t sub_1C3598C30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *, char *);
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v1;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  v8 = BYTE4(a1);
  v9 = BYTE5(a1);
  v10 = BYTE6(a1);
  result = v2(&v6, (char *)&v6 + BYTE6(a1));
  v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *v3 = v6;
  v3[1] = v5;
  return result;
}

uint64_t sub_1C3598E04(uint64_t (*a1)(uint64_t, uint64_t))
{
  int *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = sub_1C35B69E4();
  v4 = *v1;
  v5 = v1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  result = sub_1C35B693C();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v6 = result;
  result = sub_1C35B6954();
  v7 = v4 - result;
  if (__OFSUB__(v4, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v8 = v5 - v4;
  v9 = sub_1C35B6948();
  if (v9 >= v8)
    v10 = v8;
  else
    v10 = v9;
  return a1(v6 + v7, v6 + v7 + v10);
}

uint64_t sub_1C3598EAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E12A8);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * v4 - 64;
  v5 = sub_1C35A4D5C(&v7, (_BYTE *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_1C3584624();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t *sub_1C3598F80(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (uint64_t *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1208);
  v3 = (uint64_t *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_1C35A4EF0((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1C3584624();
  if (v6 != v1)
  {
    __break(1u);
    return (uint64_t *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

_QWORD *sub_1C3599064(unint64_t a1, void (*a2)(_QWORD *, uint64_t, unint64_t))
{
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, uint64_t, unint64_t);

  if (a1 >> 62)
    goto LABEL_10;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v4 <= 0)
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9A78);
      v5 = (_QWORD *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(_QWORD *, uint64_t, unint64_t))v4)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v4 = sub_1C35B6EDC();
    swift_bridgeObjectRelease();
    if (!v4)
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v5;
}

uint64_t sub_1C3599164()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if ((result & 1) == 0)
    return sub_1C3599254(0, *(_QWORD *)(v1 + 16) + 1, 1);
  return result;
}

uint64_t sub_1C35991AC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1C35992A8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1C35991C8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1C3599410(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1C35991E4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1C3599598(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1C3599200(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1C359971C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1C359921C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1C35998C4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1C3599238(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1C3599A4C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1C3599254(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1C3599BA8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1C3599270(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1C3599D10(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1C359928C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1C3599E98(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1C35992A8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1210);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C3599410(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9EA0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C3599598(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E68);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C359971C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E90);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 72 * v8)
      memmove(v10 + 4, a4 + 4, 72 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 72 * v8 || v12 >= v13 + 72 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E98);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C35998C4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9CD0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 4;
  v14 = a4 + 4;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v10 + 4, a4 + 4, v8 << 6);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E20);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C3599A4C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E12A0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C3599BA8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1208);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C3599D10(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9DF8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8)
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E00);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C3599E98(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E12A8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C3599FE4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  char v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;

  v3 = a1[1];
  result = sub_1C35B6F30();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_141;
    if (v3)
      return sub_1C359B808(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_150;
  v120 = v3;
  v116 = result;
  v111 = a1;
  if (v3 < 2)
  {
    v7 = MEMORY[0x1E0DEE9D8];
    v121 = (uint64_t *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v40 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      goto LABEL_103;
    }
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_1C35B6D08();
    *(_QWORD *)(v7 + 16) = v6;
    v121 = (uint64_t *)(v7 + 32);
  }
  v8 = 0;
  v9 = *a1;
  v112 = *a1 + 40;
  v110 = *a1 - 16;
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  v117 = v7;
  v11 = v120;
  v122 = *a1;
  do
  {
    v12 = v8;
    v13 = v8 + 1;
    if (v8 + 1 < v11)
    {
      v14 = (uint64_t *)(v9 + 16 * v13);
      v16 = *v14;
      v15 = v14[1];
      v17 = (uint64_t *)(v9 + 16 * v8);
      v18 = v8;
      v20 = *v17;
      v19 = v17[1];
      sub_1C3573E48(v16, v15);
      sub_1C3573E48(v20, v19);
      sub_1C3575E18(v16, v15);
      if (v1)
      {
        sub_1C3573D7C(v20, v19);
        sub_1C3573D7C(v16, v15);
        goto LABEL_116;
      }
      v22 = v21;
      sub_1C3573D7C(v20, v19);
      sub_1C3573D7C(v16, v15);
      v13 = v18 + 2;
      v12 = v18;
      if (v18 + 2 >= v120)
      {
        v9 = v122;
        if ((v22 & 1) != 0)
          goto LABEL_21;
      }
      else
      {
        v113 = v10;
        v114 = v18;
        v23 = (unint64_t *)(v112 + 16 * v18);
        v24 = v22;
        while (1)
        {
          v25 = v13;
          v26 = *(v23 - 1);
          v27 = *v23;
          v28 = *(v23 - 3);
          v29 = *(v23 - 2);
          sub_1C3573E48(v26, *v23);
          sub_1C3573E48(v28, v29);
          sub_1C3575E18(v26, v27);
          v31 = v30;
          sub_1C3573D7C(v28, v29);
          sub_1C3573D7C(v26, v27);
          if (((v24 ^ v31) & 1) != 0)
            break;
          v23 += 2;
          v13 = v25 + 1;
          if (v120 == v25 + 1)
          {
            v13 = v120;
            v10 = v113;
            goto LABEL_30;
          }
        }
        v10 = v113;
        v13 = v25;
LABEL_30:
        v12 = v114;
        v9 = v122;
        if ((v24 & 1) != 0)
        {
LABEL_21:
          if (v13 < v12)
            goto LABEL_145;
          v11 = v120;
          if (v12 < v13)
          {
            v32 = (__int128 *)(v110 + 16 * v13);
            v33 = v13;
            v34 = v12;
            v35 = (__int128 *)(v9 + 16 * v12);
            while (1)
            {
              if (v34 != --v33)
              {
                if (!v9)
                  goto LABEL_148;
                v36 = *v35;
                *v35 = *v32;
                *v32 = v36;
              }
              ++v34;
              --v32;
              ++v35;
              if (v34 >= v33)
                goto LABEL_32;
            }
          }
          goto LABEL_32;
        }
      }
      v11 = v120;
    }
LABEL_32:
    if (v13 >= v11)
      goto LABEL_40;
    if (__OFSUB__(v13, v12))
      goto LABEL_142;
    if (v13 - v12 >= v116)
    {
LABEL_40:
      if (v13 < v12)
        goto LABEL_140;
      goto LABEL_41;
    }
    v37 = v12 + v116;
    if (__OFADD__(v12, v116))
      goto LABEL_143;
    if (v37 >= v11)
      v37 = v11;
    if (v37 < v12)
    {
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      result = sub_1C35B6EC4();
      __break(1u);
      return result;
    }
    if (v13 == v37)
      goto LABEL_40;
    v115 = v12;
    v89 = (uint64_t *)(v9 + 16 * v13);
    v108 = v37;
    do
    {
      v119 = v13;
      v90 = (uint64_t *)(v9 + 16 * v13);
      v91 = *v90;
      v92 = v90[1];
      v93 = v12;
      v109 = v89;
      while (1)
      {
        v94 = *(v89 - 2);
        v95 = *(v89 - 1);
        sub_1C3573E48(v91, v92);
        sub_1C3573E48(v94, v95);
        sub_1C3575E18(v91, v92);
        if (v1)
        {
          sub_1C3573D7C(v94, v95);
          sub_1C3573D7C(v91, v92);
LABEL_116:
          swift_bridgeObjectRelease();
          *(_QWORD *)(v117 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        v97 = v96;
        sub_1C3573D7C(v94, v95);
        sub_1C3573D7C(v91, v92);
        if ((v97 & 1) == 0)
          break;
        v9 = v122;
        if (!v122)
          goto LABEL_147;
        v91 = *v89;
        v92 = v89[1];
        *(_OWORD *)v89 = *((_OWORD *)v89 - 1);
        *(v89 - 1) = v92;
        *(v89 - 2) = v91;
        v89 -= 2;
        if (v119 == ++v93)
          goto LABEL_98;
      }
      v9 = v122;
LABEL_98:
      v13 = v119 + 1;
      v89 = v109 + 2;
      v12 = v115;
    }
    while (v119 + 1 != v108);
    v13 = v108;
    if (v108 < v115)
      goto LABEL_140;
LABEL_41:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = sub_1C359C43C(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v39 = *((_QWORD *)v10 + 2);
    v38 = *((_QWORD *)v10 + 3);
    v40 = v39 + 1;
    v9 = v122;
    if (v39 >= v38 >> 1)
    {
      v98 = sub_1C359C43C((char *)(v38 > 1), v39 + 1, 1, v10);
      v9 = v122;
      v10 = v98;
    }
    *((_QWORD *)v10 + 2) = v40;
    v41 = v10 + 32;
    v42 = &v10[16 * v39 + 32];
    *(_QWORD *)v42 = v12;
    *((_QWORD *)v42 + 1) = v13;
    v118 = v13;
    if (v39)
    {
      while (2)
      {
        v43 = v40 - 1;
        if (v40 >= 4)
        {
          v48 = &v41[16 * v40];
          v49 = *((_QWORD *)v48 - 8);
          v50 = *((_QWORD *)v48 - 7);
          v54 = __OFSUB__(v50, v49);
          v51 = v50 - v49;
          if (v54)
            goto LABEL_125;
          v53 = *((_QWORD *)v48 - 6);
          v52 = *((_QWORD *)v48 - 5);
          v54 = __OFSUB__(v52, v53);
          v46 = v52 - v53;
          v47 = v54;
          if (v54)
            goto LABEL_126;
          v55 = v40 - 2;
          v56 = &v41[16 * v40 - 32];
          v58 = *(_QWORD *)v56;
          v57 = *((_QWORD *)v56 + 1);
          v54 = __OFSUB__(v57, v58);
          v59 = v57 - v58;
          if (v54)
            goto LABEL_128;
          v54 = __OFADD__(v46, v59);
          v60 = v46 + v59;
          if (v54)
            goto LABEL_131;
          if (v60 >= v51)
          {
            v78 = &v41[16 * v43];
            v80 = *(_QWORD *)v78;
            v79 = *((_QWORD *)v78 + 1);
            v54 = __OFSUB__(v79, v80);
            v81 = v79 - v80;
            if (v54)
              goto LABEL_135;
            v71 = v46 < v81;
          }
          else
          {
LABEL_59:
            if ((v47 & 1) != 0)
              goto LABEL_127;
            v55 = v40 - 2;
            v61 = &v41[16 * v40 - 32];
            v63 = *(_QWORD *)v61;
            v62 = *((_QWORD *)v61 + 1);
            v64 = __OFSUB__(v62, v63);
            v65 = v62 - v63;
            v66 = v64;
            if (v64)
              goto LABEL_130;
            v67 = &v41[16 * v43];
            v69 = *(_QWORD *)v67;
            v68 = *((_QWORD *)v67 + 1);
            v54 = __OFSUB__(v68, v69);
            v70 = v68 - v69;
            if (v54)
              goto LABEL_133;
            if (__OFADD__(v65, v70))
              goto LABEL_134;
            if (v65 + v70 < v46)
              goto LABEL_71;
            v71 = v46 < v70;
          }
          if (v71)
            v43 = v55;
        }
        else
        {
          if (v40 == 3)
          {
            v45 = *((_QWORD *)v10 + 4);
            v44 = *((_QWORD *)v10 + 5);
            v54 = __OFSUB__(v44, v45);
            v46 = v44 - v45;
            v47 = v54;
            goto LABEL_59;
          }
          v72 = *((_QWORD *)v10 + 4);
          v73 = *((_QWORD *)v10 + 5);
          v54 = __OFSUB__(v73, v72);
          v65 = v73 - v72;
          v66 = v54;
LABEL_71:
          if ((v66 & 1) != 0)
            goto LABEL_129;
          v74 = &v41[16 * v43];
          v76 = *(_QWORD *)v74;
          v75 = *((_QWORD *)v74 + 1);
          v54 = __OFSUB__(v75, v76);
          v77 = v75 - v76;
          if (v54)
            goto LABEL_132;
          if (v77 < v65)
            goto LABEL_88;
        }
        v82 = v43 - 1;
        if (v43 - 1 >= v40)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v9)
          goto LABEL_146;
        v83 = v10;
        v84 = &v41[16 * v82];
        v85 = *(_QWORD *)v84;
        v86 = &v41[16 * v43];
        v87 = *((_QWORD *)v86 + 1);
        sub_1C359BB48((uint64_t *)(v9 + 16 * *(_QWORD *)v84), (uint64_t *)(v9 + 16 * *(_QWORD *)v86), v9 + 16 * v87, v121);
        if (v1)
          goto LABEL_116;
        if (v87 < v85)
          goto LABEL_122;
        if (v43 > *((_QWORD *)v83 + 2))
          goto LABEL_123;
        *(_QWORD *)v84 = v85;
        *(_QWORD *)&v41[16 * v82 + 8] = v87;
        v88 = *((_QWORD *)v83 + 2);
        if (v43 >= v88)
          goto LABEL_124;
        v10 = v83;
        v40 = v88 - 1;
        memmove(&v41[16 * v43], v86 + 16, 16 * (v88 - 1 - v43));
        *((_QWORD *)v10 + 2) = v88 - 1;
        v9 = v122;
        if (v88 <= 2)
          goto LABEL_88;
        continue;
      }
    }
    v40 = 1;
LABEL_88:
    v11 = v120;
    v7 = v117;
    v8 = v118;
  }
  while (v118 < v120);
LABEL_103:
  v99 = v7;
  if (v40 >= 2)
  {
    v100 = *v111;
    do
    {
      v101 = v40 - 2;
      if (v40 < 2)
        goto LABEL_136;
      if (!v100)
        goto LABEL_149;
      v102 = v10;
      v103 = v10 + 32;
      v104 = *(_QWORD *)&v10[16 * v101 + 32];
      v105 = *(_QWORD *)&v10[16 * v40 + 24];
      sub_1C359BB48((uint64_t *)(v100 + 16 * v104), (uint64_t *)(v100 + 16 * *(_QWORD *)&v103[16 * v40 - 16]), v100 + 16 * v105, v121);
      if (v1)
        break;
      if (v105 < v104)
        goto LABEL_137;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v102 = sub_1C359C748((uint64_t)v102);
      if (v101 >= *((_QWORD *)v102 + 2))
        goto LABEL_138;
      v106 = &v102[16 * v101 + 32];
      *(_QWORD *)v106 = v104;
      *((_QWORD *)v106 + 1) = v105;
      v107 = *((_QWORD *)v102 + 2);
      if (v40 > v107)
        goto LABEL_139;
      v10 = v102;
      memmove(&v102[16 * v40 + 16], &v102[16 * v40 + 32], 16 * (v107 - v40));
      *((_QWORD *)v102 + 2) = v107 - 1;
      v40 = v107 - 1;
    }
    while (v107 > 2);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v99 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C359A818(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *__dst;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;

  v3 = a1[1];
  result = sub_1C35B6F30();
  if (result >= v3)
  {
    if (v3 < 0)
    {
      __break(1u);
LABEL_132:
      __break(1u);
      JUMPOUT(0x1C359B768);
    }
    if (v3)
      return sub_1C359B948(0, v3, 1, a1);
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
    {
      sub_1C35B6EC4();
      __break(1u);
      JUMPOUT(0x1C359B7E8);
    }
    v6 = result;
    v7 = (char *)MEMORY[0x1E0DEE9D8];
    v106 = v1;
    v98 = a1;
    if (v3 >= 2)
    {
      v8 = v5 >> 1;
      type metadata accessor for ExpressMode.PassConfig();
      v9 = sub_1C35B6D08();
      *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
      __dst = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
      v109 = v9;
LABEL_12:
      v10 = 0;
      v11 = *a1;
      v99 = *a1 + 16;
      v100 = v6;
      v97 = *a1 - 8;
      v104 = *a1;
      v102 = v3;
      while (1)
      {
        v12 = v10++;
        v101 = v7;
        if (v10 < v3)
        {
          v13 = *(_QWORD *)(v11 + 8 * v10);
          v14 = *(_QWORD *)(v11 + 8 * v12);
          v16 = *(_QWORD *)(v13 + 32);
          v15 = *(_QWORD *)(v13 + 40);
          swift_retain();
          swift_retain();
          sub_1C357F9BC(v16, v15);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
          sub_1C3575338((unint64_t *)&qword_1EF8D9A40, &qword_1ED7E1280, MEMORY[0x1E0DEAF20]);
          v17 = sub_1C35B6C48();
          v19 = v18;
          swift_bridgeObjectRelease();
          sub_1C357F9BC(*(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40));
          v20 = sub_1C35B6C48();
          v22 = v21;
          swift_bridgeObjectRelease();
          if (v17 == v20 && v19 == v22)
            v107 = 0;
          else
            v107 = sub_1C35B6F48();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          v10 = v12 + 2;
          if (v12 + 2 < v102)
          {
            v23 = v99 + 8 * v12;
            while (1)
            {
              v105 = v10;
              v24 = *(_QWORD *)(v23 - 8);
              v26 = *(_QWORD *)(*(_QWORD *)v23 + 32);
              v25 = *(_QWORD *)(*(_QWORD *)v23 + 40);
              swift_retain();
              swift_retain();
              sub_1C357F9BC(v26, v25);
              v108 = sub_1C35B6C48();
              v28 = v27;
              swift_bridgeObjectRelease();
              sub_1C357F9BC(*(_QWORD *)(v24 + 32), *(_QWORD *)(v24 + 40));
              v29 = sub_1C35B6C48();
              v31 = v30;
              swift_bridgeObjectRelease();
              if (v108 != v29)
                goto LABEL_23;
              if (v28 == v31)
                v32 = 0;
              else
LABEL_23:
                v32 = sub_1C35B6F48();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              if (((v107 ^ v32) & 1) != 0)
                break;
              v10 = v105 + 1;
              v23 += 8;
              if (v102 == v105 + 1)
              {
                v10 = v102;
                goto LABEL_28;
              }
            }
            v10 = v105;
          }
LABEL_28:
          v7 = v101;
          v11 = v104;
          if ((v107 & 1) != 0)
          {
            if (v10 < v12)
            {
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
              JUMPOUT(0x1C359B77CLL);
            }
            if (v12 < v10)
            {
              v33 = (uint64_t *)(v97 + 8 * v10);
              v34 = v10;
              v35 = v12;
              v36 = (uint64_t *)(v104 + 8 * v12);
              do
              {
                if (v35 != --v34)
                {
                  if (!v104)
                  {
                    __break(1u);
LABEL_137:
                    __break(1u);
                  }
                  v37 = *v36;
                  *v36 = *v33;
                  *v33 = v37;
                }
                ++v35;
                --v33;
                ++v36;
              }
              while (v35 < v34);
            }
          }
        }
        if (v10 < v102)
        {
          if (__OFSUB__(v10, v12))
            goto LABEL_132;
          if (v10 - v12 < v100)
          {
            v38 = v12 + v100;
            if (__OFADD__(v12, v100))
              goto LABEL_134;
            if (v38 >= v102)
              v38 = v102;
            if (v38 < v12)
              goto LABEL_135;
            if (v10 != v38)
              __asm { BR              X8 }
          }
        }
        if (v10 < v12)
          goto LABEL_130;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = sub_1C359C43C(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
        v40 = *((_QWORD *)v7 + 2);
        v39 = *((_QWORD *)v7 + 3);
        v41 = v40 + 1;
        v11 = v104;
        if (v40 >= v39 >> 1)
        {
          v90 = sub_1C359C43C((char *)(v39 > 1), v40 + 1, 1, v7);
          v11 = v104;
          v7 = v90;
        }
        *((_QWORD *)v7 + 2) = v41;
        v42 = v7 + 32;
        v43 = &v7[16 * v40 + 32];
        *(_QWORD *)v43 = v12;
        *((_QWORD *)v43 + 1) = v10;
        if (v40)
        {
          while (1)
          {
            v44 = v41 - 1;
            if (v41 >= 4)
            {
              v49 = &v42[16 * v41];
              v50 = *((_QWORD *)v49 - 8);
              v51 = *((_QWORD *)v49 - 7);
              v55 = __OFSUB__(v51, v50);
              v52 = v51 - v50;
              if (v55)
                goto LABEL_115;
              v54 = *((_QWORD *)v49 - 6);
              v53 = *((_QWORD *)v49 - 5);
              v55 = __OFSUB__(v53, v54);
              v47 = v53 - v54;
              v48 = v55;
              if (v55)
                goto LABEL_116;
              v56 = v41 - 2;
              v57 = &v42[16 * v41 - 32];
              v59 = *(_QWORD *)v57;
              v58 = *((_QWORD *)v57 + 1);
              v55 = __OFSUB__(v58, v59);
              v60 = v58 - v59;
              if (v55)
                goto LABEL_118;
              v55 = __OFADD__(v47, v60);
              v61 = v47 + v60;
              if (v55)
                goto LABEL_121;
              if (v61 >= v52)
              {
                v79 = &v42[16 * v44];
                v81 = *(_QWORD *)v79;
                v80 = *((_QWORD *)v79 + 1);
                v55 = __OFSUB__(v80, v81);
                v82 = v80 - v81;
                if (v55)
                  goto LABEL_125;
                v72 = v47 < v82;
                goto LABEL_82;
              }
            }
            else
            {
              if (v41 != 3)
              {
                v73 = *((_QWORD *)v7 + 4);
                v74 = *((_QWORD *)v7 + 5);
                v55 = __OFSUB__(v74, v73);
                v66 = v74 - v73;
                v67 = v55;
                goto LABEL_76;
              }
              v46 = *((_QWORD *)v7 + 4);
              v45 = *((_QWORD *)v7 + 5);
              v55 = __OFSUB__(v45, v46);
              v47 = v45 - v46;
              v48 = v55;
            }
            if ((v48 & 1) != 0)
              goto LABEL_117;
            v56 = v41 - 2;
            v62 = &v42[16 * v41 - 32];
            v64 = *(_QWORD *)v62;
            v63 = *((_QWORD *)v62 + 1);
            v65 = __OFSUB__(v63, v64);
            v66 = v63 - v64;
            v67 = v65;
            if (v65)
              goto LABEL_120;
            v68 = &v42[16 * v44];
            v70 = *(_QWORD *)v68;
            v69 = *((_QWORD *)v68 + 1);
            v55 = __OFSUB__(v69, v70);
            v71 = v69 - v70;
            if (v55)
              goto LABEL_123;
            if (__OFADD__(v66, v71))
              goto LABEL_124;
            if (v66 + v71 >= v47)
            {
              v72 = v47 < v71;
LABEL_82:
              if (v72)
                v44 = v56;
              goto LABEL_84;
            }
LABEL_76:
            if ((v67 & 1) != 0)
              goto LABEL_119;
            v75 = &v42[16 * v44];
            v77 = *(_QWORD *)v75;
            v76 = *((_QWORD *)v75 + 1);
            v55 = __OFSUB__(v76, v77);
            v78 = v76 - v77;
            if (v55)
              goto LABEL_122;
            if (v78 < v66)
              goto LABEL_93;
LABEL_84:
            v83 = v44 - 1;
            if (v44 - 1 >= v41)
            {
              __break(1u);
LABEL_112:
              __break(1u);
LABEL_113:
              __break(1u);
LABEL_114:
              __break(1u);
LABEL_115:
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
              JUMPOUT(0x1C359B748);
            }
            if (!v11)
            {
              __break(1u);
              JUMPOUT(0x1C359B790);
            }
            v84 = v7;
            v85 = &v42[16 * v83];
            v86 = *(_QWORD *)v85;
            v87 = &v42[16 * v44];
            v88 = *((_QWORD *)v87 + 1);
            sub_1C359BF00((char *)(v11 + 8 * *(_QWORD *)v85), (char *)(v11 + 8 * *(_QWORD *)v87), v11 + 8 * v88, __dst);
            if (v106)
              goto LABEL_109;
            if (v88 < v86)
              goto LABEL_112;
            if (v44 > *((_QWORD *)v84 + 2))
              goto LABEL_113;
            *(_QWORD *)v85 = v86;
            *(_QWORD *)&v42[16 * v83 + 8] = v88;
            v89 = *((_QWORD *)v84 + 2);
            if (v44 >= v89)
              goto LABEL_114;
            v7 = v84;
            v41 = v89 - 1;
            memmove(&v42[16 * v44], v87 + 16, 16 * (v89 - 1 - v44));
            *((_QWORD *)v84 + 2) = v89 - 1;
            v11 = v104;
            if (v89 <= 2)
              goto LABEL_93;
          }
        }
        v41 = 1;
LABEL_93:
        v3 = v102;
        if (v10 >= v102)
          goto LABEL_98;
      }
    }
    v109 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 == 1)
      goto LABEL_12;
    v41 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_98:
    if (v41 >= 2)
    {
      v91 = *v98;
      do
      {
        v92 = v41 - 2;
        if (v41 < 2)
          goto LABEL_126;
        if (!v91)
          goto LABEL_137;
        v93 = *(_QWORD *)&v7[16 * v92 + 32];
        v94 = *(_QWORD *)&v7[16 * v41 + 24];
        sub_1C359BF00((char *)(v91 + 8 * v93), (char *)(v91 + 8 * *(_QWORD *)&v7[16 * v41 + 16]), v91 + 8 * v94, __dst);
        if (v106)
          break;
        if (v94 < v93)
          goto LABEL_127;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = sub_1C359C748((uint64_t)v7);
        if (v92 >= *((_QWORD *)v7 + 2))
          goto LABEL_128;
        v95 = &v7[16 * v92 + 32];
        *(_QWORD *)v95 = v93;
        *((_QWORD *)v95 + 1) = v94;
        v96 = *((_QWORD *)v7 + 2);
        if (v41 > v96)
          goto LABEL_129;
        memmove(&v7[16 * v41 + 16], &v7[16 * v41 + 32], 16 * (v96 - v41));
        *((_QWORD *)v7 + 2) = v96 - 1;
        v41 = v96 - 1;
      }
      while (v96 > 2);
    }
LABEL_109:
    swift_bridgeObjectRelease();
    *(_QWORD *)((v109 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
    sub_1C35B6CF0();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1C359B808(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = v4;
  if (a3 != a2)
  {
    v6 = result;
    v7 = *a4;
    v8 = (uint64_t *)(*a4 + 16 * a3);
    v18 = result;
    v21 = *a4;
LABEL_3:
    v9 = (uint64_t *)(v7 + 16 * a3);
    v10 = *v9;
    v11 = v9[1];
    v20 = v8;
    v22 = a3;
    while (1)
    {
      v12 = *(v8 - 2);
      v13 = *(v8 - 1);
      sub_1C3573E48(v10, v11);
      sub_1C3573E48(v12, v13);
      v14 = v5;
      sub_1C3575E18(v10, v11);
      v16 = v15;
      sub_1C3573D7C(v12, v13);
      result = sub_1C3573D7C(v10, v11);
      if (v14)
        break;
      if ((v16 & 1) == 0)
      {
        v17 = v22;
        v5 = 0;
        v7 = v21;
LABEL_10:
        a3 = v17 + 1;
        v8 = v20 + 2;
        v6 = v18;
        if (a3 != a2)
          goto LABEL_3;
        return result;
      }
      v7 = v21;
      if (!v21)
      {
        __break(1u);
        return result;
      }
      v10 = *v8;
      v11 = v8[1];
      *(_OWORD *)v8 = *((_OWORD *)v8 - 1);
      *(v8 - 1) = v11;
      *(v8 - 2) = v10;
      v8 -= 2;
      ++v6;
      v17 = v22;
      v5 = 0;
      if (v22 == v6)
        goto LABEL_10;
    }
  }
  return result;
}

uint64_t sub_1C359B948(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v21 = result;
  if (a3 != a2)
  {
    v23 = *a4;
    v4 = (_QWORD *)(*a4 + 8 * a3 - 8);
LABEL_7:
    v6 = *(_QWORD *)(v23 + 8 * a3);
    v7 = v21;
    v22 = v4;
    v24 = a3;
    while (1)
    {
      v25 = v7;
      v8 = *v4;
      v9 = *(_QWORD *)(v6 + 32);
      v10 = *(_QWORD *)(v6 + 40);
      swift_retain();
      swift_retain();
      sub_1C357F9BC(v9, v10);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
      sub_1C3575338((unint64_t *)&qword_1EF8D9A40, &qword_1ED7E1280, MEMORY[0x1E0DEAF20]);
      v11 = sub_1C35B6C48();
      v13 = v12;
      swift_bridgeObjectRelease();
      sub_1C357F9BC(*(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40));
      v14 = sub_1C35B6C48();
      v16 = v15;
      swift_bridgeObjectRelease();
      if (v11 == v14 && v13 == v16)
      {
        swift_release();
        swift_release();
        result = swift_bridgeObjectRelease_n();
LABEL_5:
        v5 = v24;
LABEL_6:
        a3 = v5 + 1;
        v4 = v22 + 1;
        if (a3 == a2)
          return result;
        goto LABEL_7;
      }
      v18 = sub_1C35B6F48();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
        goto LABEL_5;
      if (!v23)
        break;
      v19 = *v4;
      v6 = v4[1];
      *v4 = v6;
      v4[1] = v19;
      --v4;
      v5 = v24;
      v7 = v25 + 1;
      if (v24 == v25 + 1)
        goto LABEL_6;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1C359BB48(uint64_t *__src, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  char *v22;
  uint64_t *v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  uint64_t *v32;
  unint64_t v33;
  char *v34;
  uint64_t result;
  uint64_t *v36;
  char *v38;
  unint64_t v39;
  uint64_t *v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t *v45;

  v4 = a2;
  v5 = __src;
  v6 = (char *)a2 - (char *)__src;
  v7 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v7 = (char *)a2 - (char *)__src;
  v8 = v7 >> 4;
  v9 = a3 - (_QWORD)a2;
  v10 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v10 = a3 - (_QWORD)a2;
  v11 = v10 >> 4;
  v45 = __src;
  v44 = a4;
  if (v8 >= v10 >> 4)
  {
    if (v9 < -15)
      goto LABEL_50;
    if (a4 != a2 || &a2[2 * v11] <= a4)
      memmove(a4, a2, 16 * v11);
    v22 = (char *)&a4[2 * v11];
    v43 = v22;
    v45 = v4;
    if (v5 >= v4 || v9 < 16)
    {
LABEL_49:
      sub_1C359C5F8((void **)&v45, (const void **)&v44, &v43);
      return 1;
    }
    v23 = (uint64_t *)(a3 - 16);
    v24 = v4;
    v36 = v5;
    while (1)
    {
      v39 = (unint64_t)v22;
      v41 = v4;
      v26 = *((_QWORD *)v22 - 2);
      v27 = *((_QWORD *)v22 - 1);
      v25 = v22 - 16;
      v28 = *(v24 - 2);
      v29 = *(v24 - 1);
      v24 -= 2;
      sub_1C3573E48(v26, v27);
      sub_1C3573E48(v28, v29);
      sub_1C3575E18(v26, v27);
      if (v42)
      {
        sub_1C3573D7C(v28, v29);
        sub_1C3573D7C(v26, v27);
        goto LABEL_49;
      }
      v31 = v30;
      v32 = v23 + 2;
      sub_1C3573D7C(v28, v29);
      sub_1C3573D7C(v26, v27);
      if ((v31 & 1) != 0)
      {
        v22 = (char *)v39;
        if (v32 != v41 || v23 >= v41)
          *(_OWORD *)v23 = *(_OWORD *)v24;
        v45 = v24;
      }
      else
      {
        v43 = v25;
        if ((unint64_t)v32 >= v39 && (unint64_t)v23 < v39)
        {
          v33 = (unint64_t)v36;
          if (v32 != (uint64_t *)v39)
            *(_OWORD *)v23 = *(_OWORD *)v25;
          v24 = v41;
          v22 = v25;
          v34 = (char *)a4;
          goto LABEL_44;
        }
        *(_OWORD *)v23 = *(_OWORD *)v25;
        v24 = v41;
        v22 = v25;
      }
      v33 = (unint64_t)v36;
      v34 = (char *)a4;
LABEL_44:
      if ((unint64_t)v24 > v33)
      {
        v23 -= 2;
        v4 = v24;
        if (v22 > v34)
          continue;
      }
      goto LABEL_49;
    }
  }
  if (v6 >= -15)
  {
    v12 = a4;
    if (a4 != __src || &__src[2 * v8] <= a4)
      memmove(a4, __src, 16 * v8);
    v38 = (char *)&a4[2 * v8];
    v43 = v38;
    if ((unint64_t)v4 < a3 && v6 >= 16)
    {
      while (1)
      {
        v13 = v5;
        v14 = *v4;
        v15 = v4[1];
        v16 = *v12;
        v17 = v12[1];
        sub_1C3573E48(*v4, v15);
        sub_1C3573E48(v16, v17);
        sub_1C3575E18(v14, v15);
        if (v42)
          break;
        v19 = v18;
        sub_1C3573D7C(v16, v17);
        sub_1C3573D7C(v14, v15);
        if ((v19 & 1) != 0)
        {
          v20 = v4 + 2;
          v21 = v13;
          if (v13 < v4 || v13 >= v20 || v13 != v4)
            *(_OWORD *)v13 = *(_OWORD *)v4;
        }
        else
        {
          v21 = v13;
          if (v13 != v12)
            *(_OWORD *)v13 = *(_OWORD *)v12;
          v12 += 2;
          v44 = v12;
          v20 = v4;
        }
        v42 = 0;
        v5 = v21 + 2;
        v45 = v5;
        if (v12 < (uint64_t *)v38)
        {
          v4 = v20;
          if ((unint64_t)v20 < a3)
            continue;
        }
        goto LABEL_49;
      }
      sub_1C3573D7C(v16, v17);
      sub_1C3573D7C(v14, v15);
    }
    goto LABEL_49;
  }
LABEL_50:
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C359BF00(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  char v45;
  char *v46;
  char *v47;
  uint64_t result;
  char *v49;
  char *v50;
  char *v51;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  const void *v61;
  char *v62;

  v5 = v4;
  v6 = __dst;
  v7 = a2;
  v8 = __src;
  v9 = a2 - __src;
  v10 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v10 = a2 - __src;
  v11 = v10 >> 3;
  v12 = a3 - (_QWORD)a2;
  v13 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v13 = a3 - (_QWORD)a2;
  v14 = v13 >> 3;
  v62 = __src;
  v61 = __dst;
  if (v11 >= v13 >> 3)
  {
    if (v12 < -7)
      goto LABEL_56;
    if (__dst != a2 || &a2[8 * v14] <= __dst)
      memmove(__dst, a2, 8 * v14);
    v31 = &v6[8 * v14];
    v60 = v31;
    v62 = v7;
    if (v8 >= v7 || v12 < 8)
    {
LABEL_55:
      sub_1C359C6A0((void **)&v62, &v61, &v60);
      return 1;
    }
    v32 = (char *)(a3 - 8);
    v33 = v7;
    v55 = v8;
    while (1)
    {
      v58 = v7;
      v53 = (unint64_t)v31;
      v34 = *((_QWORD *)v31 - 1);
      v35 = *((_QWORD *)v33 - 1);
      v49 = v31 - 8;
      v51 = v33 - 8;
      v37 = *(_QWORD *)(v34 + 32);
      v36 = *(_QWORD *)(v34 + 40);
      swift_retain();
      swift_retain();
      sub_1C357F9BC(v37, v36);
      v59 = v5;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
      sub_1C3575338((unint64_t *)&qword_1EF8D9A40, &qword_1ED7E1280, MEMORY[0x1E0DEAF20]);
      v38 = sub_1C35B6C48();
      v40 = v39;
      swift_bridgeObjectRelease();
      sub_1C357F9BC(*(_QWORD *)(v35 + 32), *(_QWORD *)(v35 + 40));
      v41 = sub_1C35B6C48();
      v43 = v42;
      swift_bridgeObjectRelease();
      v44 = v38 == v41 && v40 == v43;
      v45 = v44 ? 0 : sub_1C35B6F48();
      v46 = v32 + 8;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if ((v45 & 1) != 0)
        break;
      v60 = v49;
      v47 = v55;
      if ((unint64_t)v46 < v53 || (unint64_t)v32 >= v53)
      {
        *(_QWORD *)v32 = *(_QWORD *)v49;
        v33 = v58;
        v31 = v49;
        goto LABEL_53;
      }
      v5 = v59;
      if (v46 != (char *)v53)
        *(_QWORD *)v32 = *(_QWORD *)v49;
      v33 = v58;
      v31 = v49;
      if (v58 <= v55)
        goto LABEL_55;
LABEL_54:
      v32 -= 8;
      v7 = v33;
      if (v31 <= v6)
        goto LABEL_55;
    }
    v31 = (char *)v53;
    v47 = v55;
    v33 = v51;
    if (v46 != v58 || v32 >= v58)
      *(_QWORD *)v32 = *(_QWORD *)v51;
    v62 = v51;
LABEL_53:
    v5 = v59;
    if (v33 <= v47)
      goto LABEL_55;
    goto LABEL_54;
  }
  if (v9 >= -7)
  {
    if (__dst != __src || &__src[8 * v11] <= __dst)
      memmove(__dst, __src, 8 * v11);
    v50 = &v6[8 * v11];
    v60 = v50;
    if ((unint64_t)v7 < a3 && v9 >= 8)
    {
      while (1)
      {
        v54 = v8;
        v56 = v6;
        v57 = v7;
        v15 = *(_QWORD *)v7;
        v16 = *(_QWORD *)v6;
        v18 = *(_QWORD *)(v15 + 32);
        v17 = *(_QWORD *)(v15 + 40);
        swift_retain();
        swift_retain();
        v19 = v18;
        v20 = v5;
        sub_1C357F9BC(v19, v17);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
        sub_1C3575338((unint64_t *)&qword_1EF8D9A40, &qword_1ED7E1280, MEMORY[0x1E0DEAF20]);
        v21 = sub_1C35B6C48();
        v23 = v22;
        swift_bridgeObjectRelease();
        sub_1C357F9BC(*(_QWORD *)(v16 + 32), *(_QWORD *)(v16 + 40));
        v24 = sub_1C35B6C48();
        v26 = v25;
        swift_bridgeObjectRelease();
        if (v21 == v24 && v23 == v26)
          break;
        v28 = sub_1C35B6F48();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v28 & 1) == 0)
          goto LABEL_22;
        v29 = v57 + 8;
        v30 = v54;
        v5 = v20;
        if (v54 < v57 || v54 >= v29 || v54 != v57)
          *(_QWORD *)v54 = *(_QWORD *)v57;
LABEL_25:
        v8 = v30 + 8;
        if (v6 < v50)
        {
          v7 = v29;
          if ((unint64_t)v29 < a3)
            continue;
        }
        v62 = v8;
        goto LABEL_55;
      }
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
LABEL_22:
      v30 = v54;
      v5 = v20;
      if (v54 != v6)
        *(_QWORD *)v54 = *(_QWORD *)v6;
      v6 += 8;
      v61 = v56 + 8;
      v29 = v57;
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_56:
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

char *sub_1C359C43C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E28);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1C359C534(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -56)
  {
    result = (char *)sub_1C35B6F0C();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 56;
    if (result != v3 || result >= &v3[56 * v6])
      return (char *)memmove(result, v3, 56 * v6);
  }
  return result;
}

char *sub_1C359C5F8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_1C35B6F0C();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_1C359C6A0(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)sub_1C35B6F0C();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_1C359C748(uint64_t a1)
{
  return sub_1C359C43C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1C359C75C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E80);
  v6 = sub_1C35B6EF4();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_1C3573DC0(v24, v35);
      }
      else
      {
        sub_1C3575174((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_1C35B6FB4();
      sub_1C35B6C84();
      result = sub_1C35B6FD8();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)sub_1C3573DC0(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1C359CA58(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9EA8);
  v6 = sub_1C35B6EF4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v2;
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v33 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v33 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v32;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v33 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v33 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v21);
    v34 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
      sub_1C3573E48(v34, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21 + 8));
    sub_1C35B6FB4();
    sub_1C35B6A68();
    result = sub_1C35B6FD8();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v34;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      v19 = v34;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18) = v19;
    *(_BYTE *)(*(_QWORD *)(v7 + 56) + v18) = v30;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v32;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v31 = 1 << *(_BYTE *)(v5 + 32);
  if (v31 >= 64)
    bzero(v23, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v31;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1C359CD58(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E70);
  v36 = a2;
  v6 = sub_1C35B6EF4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1C35B6FB4();
    sub_1C35B6C84();
    result = sub_1C35B6FD8();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1C359D06C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E88);
  v37 = a2;
  v6 = sub_1C35B6EF4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    sub_1C35B6FB4();
    sub_1C35B6C84();
    result = sub_1C35B6FD8();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1C359D37C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E30);
  v6 = sub_1C35B6EF4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v2;
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v33 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v33 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v32;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v33 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v33 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(_WORD *)(*(_QWORD *)(v5 + 56) + 2 * v21);
    v34 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
      sub_1C3573E48(v34, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21 + 8));
    sub_1C35B6FB4();
    sub_1C35B6A68();
    result = sub_1C35B6FD8();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v34;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      v19 = v34;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18) = v19;
    *(_WORD *)(*(_QWORD *)(v7 + 56) + 2 * v18) = v30;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v32;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v31 = 1 << *(_BYTE *)(v5 + 32);
  if (v31 >= 64)
    bzero(v23, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v31;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

_OWORD *sub_1C359D67C(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  uint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1C35ABC5C(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v19);
        return sub_1C3573DC0(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1C359DB10();
      goto LABEL_7;
    }
    sub_1C359C75C(v15, a4 & 1);
    v21 = sub_1C35ABC5C(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1C359DA60(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)sub_1C35B6F6C();
  __break(1u);
  return result;
}

uint64_t sub_1C359D7AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1C35ABC5C(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1C359E050();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_release();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1C359D06C(v15, a4 & 1);
  v21 = sub_1C35ABC5C(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1C35B6F6C();
  __break(1u);
  return result;
}

uint64_t sub_1C359D90C(__int16 a1, uint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1C35ABC70(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_1C359E208();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_WORD *)(v18[7] + 2 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a2;
    v20[1] = a3;
    *(_WORD *)(v18[7] + 2 * v12) = a1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return sub_1C3573E48(a2, a3);
    }
    goto LABEL_14;
  }
  sub_1C359D37C(result, a4 & 1);
  result = sub_1C35ABC70(a2, a3);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1C35B6F6C();
  __break(1u);
  return result;
}

_OWORD *sub_1C359DA60(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1C3573DC0(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t sub_1C359DAC8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

void *sub_1C359DB10()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E80);
  v2 = *v0;
  v3 = sub_1C35B6EE8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_1C3575174(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1C3573DC0(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1C359DCF4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9EA8);
  v2 = *v0;
  v3 = sub_1C35B6EE8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15) = v17;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
    result = (void *)sub_1C3573E48(v17, *((unint64_t *)&v17 + 1));
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1C359DE9C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E70);
  v2 = *v0;
  v3 = sub_1C35B6EE8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1C359E050()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E88);
  v2 = *v0;
  v3 = sub_1C35B6EE8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_retain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1C359E208()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E30);
  v2 = *v0;
  v3 = sub_1C35B6EE8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 2 * v15;
    v17 = *(_WORD *)(*(_QWORD *)(v2 + 56) + 2 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_WORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)sub_1C3573E48(v19, *((unint64_t *)&v19 + 1));
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1C359E3B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;

  v7 = *v3;
  sub_1C35B6FB4();
  sub_1C35B6FC0();
  swift_bridgeObjectRetain();
  if (a3)
    sub_1C35B6C84();
  v8 = sub_1C35B6FD8();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = *v3;
    *v3 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    sub_1C35A1144(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    *v3 = v20;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  v11 = ~v9;
  v12 = *(_QWORD *)(v7 + 48);
  while (1)
  {
    v13 = (_QWORD *)(v12 + 16 * v10);
    v14 = v13[1];
    if (v14)
      break;
    if (!a3)
      goto LABEL_15;
LABEL_6:
    v10 = (v10 + 1) & v11;
    if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      goto LABEL_16;
  }
  if (!a3)
    goto LABEL_6;
  v15 = *v13 == a2 && v14 == a3;
  if (!v15 && (sub_1C35B6F48() & 1) == 0)
    goto LABEL_6;
  swift_bridgeObjectRelease();
LABEL_15:
  swift_bridgeObjectRelease();
  v16 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
  v17 = v16[1];
  *a1 = *v16;
  a1[1] = v17;
  swift_bridgeObjectRetain();
  return 0;
}

uint64_t sub_1C359E56C(_BYTE *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = MEMORY[0x1C3BD2F54](*(_QWORD *)(v6 + 40), a2, 1);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_1C35A12E4(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(unsigned __int8 *)(v10 + v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v10 + v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1C359E66C(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v10;
  uint64_t __s1;

  v6 = *v3;
  sub_1C35B6FB4();
  swift_bridgeObjectRetain();
  sub_1C35B6A68();
  v7 = sub_1C35B6FD8() & ~(-1 << *(_BYTE *)(v6 + 32));
  if (((*(_QWORD *)(v6 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    __asm { BR              X8 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  __s1 = *v10;
  *v10 = 0x8000000000000000;
  sub_1C3573E48(a2, a3);
  sub_1C35A1408(a2, a3, v7, isUniquelyReferenced_nonNull_native);
  *v10 = __s1;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1C359F098(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  __int128 v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t __s1;

  v4 = *v2;
  sub_1C35B6FB4();
  v6 = *a2;
  v5 = a2[1];
  swift_bridgeObjectRetain();
  sub_1C3573E48(v6, v5);
  sub_1C35B6A68();
  sub_1C3573D7C(v6, v5);
  v7 = a2[2];
  v8 = a2[3];
  sub_1C3573E48(v7, v8);
  sub_1C35B6A68();
  sub_1C3573D7C(v7, v8);
  v14 = (uint64_t)a2;
  sub_1C35B6FC0();
  v9 = sub_1C35B6FD8() & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
    __asm { BR              X10 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  __s1 = *v13;
  *v13 = 0x8000000000000000;
  sub_1C35AA948((uint64_t *)v14, (void (*)(uint64_t, uint64_t))sub_1C3573E48);
  sub_1C35A1E4C(v14, v9, isUniquelyReferenced_nonNull_native);
  *v13 = __s1;
  swift_bridgeObjectRelease();
  v11 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v14;
  *(_OWORD *)(a1 + 16) = v11;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(v14 + 32);
  return 1;
}

uint64_t sub_1C35A0574()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E78);
  v3 = sub_1C35B6E04();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_35;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_35;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_35;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_35:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_41;
                  if (v11 >= v8)
                    goto LABEL_35;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v21 = *v19;
      v20 = v19[1];
      sub_1C35B6FB4();
      sub_1C35B6FC0();
      if (v20)
        sub_1C35B6C84();
      result = sub_1C35B6FD8();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v21;
      v13[1] = v20;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1C35A086C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E60);
  result = sub_1C35B6E04();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v27 = v1;
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v14);
      result = MEMORY[0x1C3BD2F54](*(_QWORD *)(v4 + 40), v18, 1);
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1C35A0B00()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E08);
  v3 = sub_1C35B6E04();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_1C35B6FB4();
      sub_1C35B6A68();
      result = sub_1C35B6FD8();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1C35A0DDC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t i;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E18);
  v3 = sub_1C35B6E04();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v33 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v32 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    for (i = v2; ; v2 = i)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v10 << 6);
      }
      else
      {
        v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v32)
          goto LABEL_33;
        v16 = v33[v15];
        ++v10;
        if (!v16)
        {
          v10 = v15 + 1;
          if (v15 + 1 >= v32)
            goto LABEL_33;
          v16 = v33[v10];
          if (!v16)
          {
            v10 = v15 + 2;
            if (v15 + 2 >= v32)
              goto LABEL_33;
            v16 = v33[v10];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v32)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v31 = 1 << *(_BYTE *)(v2 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v33[v17];
              if (!v16)
              {
                while (1)
                {
                  v10 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v10 >= v32)
                    goto LABEL_33;
                  v16 = v33[v10];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v10 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      v18 = *(_QWORD *)(v2 + 48) + 40 * v14;
      v19 = *(_QWORD *)v18;
      v20 = *(_QWORD *)(v18 + 8);
      v21 = *(_QWORD *)(v18 + 16);
      v22 = *(_QWORD *)(v18 + 24);
      v23 = *(_BYTE *)(v18 + 32);
      sub_1C35B6FB4();
      sub_1C3573E48(v19, v20);
      sub_1C35B6A68();
      sub_1C3573D7C(v19, v20);
      sub_1C3573E48(v21, v22);
      sub_1C35B6A68();
      sub_1C3573D7C(v21, v22);
      sub_1C35B6FC0();
      result = sub_1C35B6FD8();
      v24 = -1 << *(_BYTE *)(v4 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v8 + 8 * v26);
        }
        while (v30 == -1);
        v11 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = *(_QWORD *)(v4 + 48) + 40 * v11;
      *(_QWORD *)v12 = v19;
      *(_QWORD *)(v12 + 8) = v20;
      *(_QWORD *)(v12 + 16) = v21;
      *(_QWORD *)(v12 + 24) = v22;
      *(_BYTE *)(v12 + 32) = v23;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1C35A1144(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_1C35A0574();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1C35A3294();
      goto LABEL_22;
    }
    sub_1C35A3958();
  }
  v11 = *v4;
  sub_1C35B6FB4();
  sub_1C35B6FC0();
  if (a2)
    sub_1C35B6C84();
  result = sub_1C35B6FD8();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v11 + 48);
    do
    {
      v16 = (_QWORD *)(v15 + 16 * a3);
      v17 = v16[1];
      if (v17)
      {
        if (a2)
        {
          v18 = *v16 == v8 && v17 == a2;
          if (v18 || (result = sub_1C35B6F48(), (result & 1) != 0))
          {
LABEL_21:
            result = sub_1C35B6F60();
            __break(1u);
            break;
          }
        }
      }
      else if (!a2)
      {
        goto LABEL_21;
      }
      a3 = (a3 + 1) & v14;
    }
    while (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_22:
  v19 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v20 = (uint64_t *)(*(_QWORD *)(v19 + 48) + 16 * a3);
  *v20 = v8;
  v20[1] = a2;
  v21 = *(_QWORD *)(v19 + 16);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (v22)
    __break(1u);
  else
    *(_QWORD *)(v19 + 16) = v23;
  return result;
}

uint64_t sub_1C35A12E4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1C35A086C();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1C35A3440();
      goto LABEL_14;
    }
    sub_1C35A3C20();
  }
  v8 = *v3;
  result = MEMORY[0x1C3BD2F54](*(_QWORD *)(*v3 + 40), v5, 1);
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(unsigned __int8 *)(v10 + a2) == (_DWORD)v5)
    {
LABEL_13:
      result = sub_1C35B6F60();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v10 + a2) == (_DWORD)v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v12 + 48) + a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_1C35A1408(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    if ((a4 & 1) != 0)
    {
      sub_1C35A0B00();
    }
    else
    {
      if (v9 > v8)
      {
        result = (uint64_t)sub_1C35A35D0();
        goto LABEL_10;
      }
      sub_1C35A3E84();
    }
    v10 = *v4;
    sub_1C35B6FB4();
    sub_1C35B6A68();
    result = sub_1C35B6FD8();
    a3 = result & ~(-1 << *(_BYTE *)(v10 + 32));
    if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
      __asm { BR              X8 }
  }
LABEL_10:
  v11 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v12 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * a3);
  *v12 = v7;
  v12[1] = a2;
  v13 = *(_QWORD *)(v11 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    JUMPOUT(0x1C35A1D70);
  }
  *(_QWORD *)(v11 + 16) = v15;
  return result;
}

uint64_t sub_1C35A1E4C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  v5 = (uint64_t *)result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  v20 = result;
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1C35A0DDC();
    }
    else
    {
      if (v7 > v6)
      {
        result = (uint64_t)sub_1C35A3780();
        goto LABEL_10;
      }
      sub_1C35A4134();
    }
    v8 = *v3;
    sub_1C35B6FB4();
    v10 = *v5;
    v9 = v5[1];
    sub_1C3573E48(*v5, v9);
    sub_1C35B6A68();
    sub_1C3573D7C(v10, v9);
    v11 = v5[2];
    v12 = v5[3];
    sub_1C3573E48(v11, v12);
    sub_1C35B6A68();
    sub_1C3573D7C(v11, v12);
    sub_1C35B6FC0();
    result = sub_1C35B6FD8();
    a2 = result & ~(-1 << *(_BYTE *)(v8 + 32));
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X10 }
  }
LABEL_10:
  v13 = *v19;
  *(_QWORD *)(*v19 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v14 = *(_QWORD *)(v13 + 48) + 40 * a2;
  v15 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v20;
  *(_OWORD *)(v14 + 16) = v15;
  *(_BYTE *)(v14 + 32) = *(_BYTE *)(v20 + 32);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
  {
    __break(1u);
    JUMPOUT(0x1C35A3108);
  }
  *(_QWORD *)(v13 + 16) = v18;
  return result;
}

void *sub_1C35A3294()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E78);
  v2 = *v0;
  v3 = sub_1C35B6DF8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    result = (void *)swift_bridgeObjectRetain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1C35A3440()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E60);
  v2 = *v0;
  v3 = sub_1C35B6DF8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1C35A35D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E08);
  v2 = *v0;
  v3 = sub_1C35B6DF8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_1C3573E48(v17, *((unint64_t *)&v17 + 1));
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1C35A3780()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E18);
  v2 = *v0;
  v3 = sub_1C35B6DF8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v13)
      goto LABEL_28;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_28;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
      {
        v9 = v23 + 2;
        if (v23 + 2 >= v13)
          goto LABEL_28;
        v24 = *(_QWORD *)(v6 + 8 * v9);
        if (!v24)
          break;
      }
    }
LABEL_27:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    LOBYTE(v17) = *(_BYTE *)(v17 + 32);
    v22 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v22 = v18;
    *(_QWORD *)(v22 + 8) = v19;
    *(_QWORD *)(v22 + 16) = v20;
    *(_QWORD *)(v22 + 24) = v21;
    *(_BYTE *)(v22 + 32) = v17;
    sub_1C3573E48(v18, v19);
    result = (void *)sub_1C3573E48(v20, v21);
  }
  v25 = v23 + 3;
  if (v25 >= v13)
    goto LABEL_28;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1C35A3958()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E78);
  v3 = sub_1C35B6E04();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_37:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v16 >= v29)
      goto LABEL_35;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_35;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_35;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v21 = *v19;
    v20 = v19[1];
    sub_1C35B6FB4();
    sub_1C35B6FC0();
    if (v20)
    {
      swift_bridgeObjectRetain();
      sub_1C35B6C84();
    }
    result = sub_1C35B6FD8();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v21;
    v13[1] = v20;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_35:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_35;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1C35A3C20()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E60);
  result = sub_1C35B6E04();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v14);
    result = MEMORY[0x1C3BD2F54](*(_QWORD *)(v4 + 40), v18, 1);
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1C35A3E84()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E08);
  v3 = sub_1C35B6E04();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_1C35B6FB4();
    sub_1C3573E48(v20, v21);
    sub_1C35B6A68();
    result = sub_1C35B6FD8();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1C35A4134()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t i;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E18);
  v3 = sub_1C35B6E04();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v31 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v32 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  for (i = v2; ; v2 = i)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v32)
      goto LABEL_33;
    v16 = *(_QWORD *)(v31 + 8 * v15);
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v32)
        goto LABEL_33;
      v16 = *(_QWORD *)(v31 + 8 * v10);
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v32)
          goto LABEL_33;
        v16 = *(_QWORD *)(v31 + 8 * v10);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    v18 = *(_QWORD *)(v2 + 48) + 40 * v14;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    v23 = *(_BYTE *)(v18 + 32);
    sub_1C35B6FB4();
    sub_1C3573E48(v19, v20);
    sub_1C3573E48(v21, v22);
    sub_1C3573E48(v19, v20);
    sub_1C35B6A68();
    sub_1C3573D7C(v19, v20);
    sub_1C3573E48(v21, v22);
    sub_1C35B6A68();
    sub_1C3573D7C(v21, v22);
    sub_1C35B6FC0();
    result = sub_1C35B6FD8();
    v24 = -1 << *(_BYTE *)(v4 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v8 + 8 * v26);
      }
      while (v30 == -1);
      v11 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 40 * v11;
    *(_QWORD *)v12 = v19;
    *(_QWORD *)(v12 + 8) = v20;
    *(_QWORD *)(v12 + 16) = v21;
    *(_QWORD *)(v12 + 24) = v22;
    *(_BYTE *)(v12 + 32) = v23;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v32)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v31 + 8 * v17);
  if (v16)
  {
    v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v10 >= v32)
      goto LABEL_33;
    v16 = *(_QWORD *)(v31 + 8 * v10);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1C35A4478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a8;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9DE8);
  result = MEMORY[0x1E0C80A78](v15);
  v18 = (uint64_t *)((char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    v19 = a2 - a1 - a3;
    if (__OFSUB__(a2 - a1, a3))
    {
      __break(1u);
      return result;
    }
    v20 = (_BYTE *)(a1 + a3);
    v21 = &v20[v19];
  }
  else
  {
    v21 = 0;
    v20 = 0;
  }
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = a4;
  v22[3] = a5;
  v22[4] = a6;
  v22[5] = a7;
  if (v20)
  {
    v23 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9DE0) + 48);
    swift_unknownObjectRetain_n();
    v24 = v31;
    *(_QWORD *)(v24 + v23) = sub_1C35A50EC(v31, v20, (_BYTE *)(v21 - v20), a4, a5, a6, a7);
    swift_unknownObjectRelease();
    return swift_release();
  }
  else
  {
    v25 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9DE0) + 48);
    *v18 = a4;
    v18[1] = a5;
    v18[2] = a6;
    v18[3] = a7;
    v18[4] = a6;
    v26 = (char *)v18 + *(int *)(v15 + 44);
    v27 = sub_1C35B6AA4();
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
    swift_unknownObjectRetain();
    v28(v26, 1, 1, v27);
    v29 = v31;
    sub_1C35AABF8((uint64_t)v18, v31, &qword_1EF8D9DE8);
    swift_unknownObjectRetain();
    result = swift_release();
    *(_QWORD *)(v29 + v25) = 0;
  }
  return result;
}

uint64_t sub_1C35A4644(unint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t i;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int isUniquelyReferenced_nonNull_bridgeObject;
  unint64_t v21;
  int v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v5 = swift_bridgeObjectRetain();
  v29 = a2;
  v6 = sub_1C35A49B0(v5, a2);
  v8 = v7;
  swift_bridgeObjectRelease();
  if (v2)
    return v6;
  if ((v8 & 1) == 0)
  {
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_54;
    if (*a1 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      v27 = sub_1C35B6EDC();
      swift_bridgeObjectRelease();
      if (v9 != v27)
        goto LABEL_6;
    }
    else if (v9 != *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (i = v6 + 5; ; ++i)
      {
        v11 = i - 4;
        v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          v13 = MEMORY[0x1C3BD2DEC](i - 4);
        }
        else
        {
          if ((v11 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          if (v11 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_45;
          v13 = *(_QWORD *)(v12 + 8 * i);
          swift_retain();
        }
        v14 = *v29;
        v15 = *(_QWORD *)(v13 + 32);
        v16 = *(_QWORD *)(v13 + 40);
        swift_bridgeObjectRetain();
        sub_1C3573E48(v15, v16);
        v9 = sub_1C358AED0(v15, v16, v14);
        swift_bridgeObjectRelease();
        sub_1C3573D7C(v15, v16);
        swift_release();
        if ((v9 & 1) == 0)
          break;
LABEL_32:
        v9 = i - 3;
        if (__OFADD__(v11, 1))
          goto LABEL_46;
        if (*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          v24 = sub_1C35B6EDC();
          swift_bridgeObjectRelease();
        }
        else
        {
          v24 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v9 == v24)
          return v6;
      }
      if (v11 == v6)
      {
LABEL_31:
        if (__OFADD__(v6++, 1))
          goto LABEL_47;
        goto LABEL_32;
      }
      v17 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        v18 = MEMORY[0x1C3BD2DEC](v6, *a1);
        v17 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v11 & 0x8000000000000000) != 0)
            goto LABEL_50;
          if (v11 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_51;
          v19 = *(_QWORD *)(v17 + 8 * i);
          swift_retain();
          goto LABEL_20;
        }
      }
      else
      {
        if ((v6 & 0x8000000000000000) != 0)
          goto LABEL_48;
        if (v6 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_49;
        v18 = *(_QWORD *)(v17 + 8 * v6 + 32);
        swift_retain();
        if ((v17 & 0xC000000000000001) == 0)
          goto LABEL_17;
      }
      v19 = MEMORY[0x1C3BD2DEC](i - 4, v17);
      v17 = *a1;
LABEL_20:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v17;
      if (!isUniquelyReferenced_nonNull_bridgeObject
        || (v17 & 0x8000000000000000) != 0
        || (v17 & 0x4000000000000000) != 0)
      {
        sub_1C35A5424(v17);
      }
      *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v19;
      swift_release();
      sub_1C35B6CF0();
      v21 = *a1;
      v22 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v21;
      if (!v22 || (v21 & 0x8000000000000000) != 0 || (v21 & 0x4000000000000000) != 0)
        sub_1C35A5424(v21);
      if ((v11 & 0x8000000000000000) != 0)
        goto LABEL_52;
      if (v11 >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_53;
      *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 8 * i) = v18;
      swift_release();
      sub_1C35B6CF0();
      goto LABEL_31;
    }
    return v6;
  }
  v25 = *a1;
  if (!(v25 >> 62))
    return *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v28 = sub_1C35B6EDC();
  swift_bridgeObjectRelease();
  return v28;
}

uint64_t sub_1C35A49B0(unint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (!(a1 >> 62))
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
    return 0;
  }
LABEL_13:
  swift_bridgeObjectRetain();
  v3 = sub_1C35B6EDC();
  swift_bridgeObjectRelease();
  if (!v3)
    return 0;
LABEL_3:
  for (i = 0; ; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = MEMORY[0x1C3BD2DEC](i, a1);
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 8 * i + 32);
      swift_retain();
    }
    v6 = *a2;
    v8 = *(_QWORD *)(v5 + 32);
    v7 = *(_QWORD *)(v5 + 40);
    swift_bridgeObjectRetain();
    sub_1C3573E48(v8, v7);
    v9 = sub_1C358AED0(v8, v7, v6);
    swift_bridgeObjectRelease();
    sub_1C3573D7C(v8, v7);
    swift_release();
    if ((v9 & 1) != 0)
      break;
    v10 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    if (v10 == v3)
      return 0;
  }
  return i;
}

uint64_t sub_1C35A4AFC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1C35B693C();
  if (!result || (result = sub_1C35B6954(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1C35B6948();
      return sub_1C35B6A20();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1C35A4B8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_1C35A4B9C + dword_1C35A4C44[a4 >> 62]))();
}

uint64_t sub_1C35A4BB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x1C35A4C3CLL);
  }
  return ((uint64_t (*)(void))((char *)&loc_1C35A4BEC + dword_1C35A4C54[a3]))();
}

uint64_t (*sub_1C35A4C64(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1C35A4CE8(v6, a2, a3);
  return sub_1C35A4CB8;
}

void sub_1C35A4CBC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_1C35A4CE8(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x1C3BD2DEC](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return sub_1C35A4D54;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C35A4D54()
{
  return swift_release();
}

_QWORD *sub_1C35A4D5C(_QWORD *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_BYTE *)(*(_QWORD *)(a4 + 48) + v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1C35A4EF0(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    *v11 = *v20;
    v11[1] = v22;
    if (v13 == v10)
    {
      sub_1C3573E48(v21, v22);
      goto LABEL_38;
    }
    v11 += 2;
    result = sub_1C3573E48(v21, v22);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_BYTE *sub_1C35A50EC(uint64_t a1, _BYTE *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  char v37;

  v34 = (unint64_t)a3;
  v35 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9AA0);
  v12 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v31 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9DE8);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (_BYTE **)((char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v18 = a4;
  v18[1] = a5;
  v18[2] = a6;
  v18[3] = a7;
  v18[4] = a6;
  v19 = (uint64_t)v18 + *(int *)(v16 + 44);
  v20 = sub_1C35B6AA4();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
  v33 = a2;
  if (a2)
  {
    a2 = (_BYTE *)v34;
    if (v34)
    {
      if ((v34 & 0x8000000000000000) != 0)
      {
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        JUMPOUT(0x1C35A53D4);
      }
      v22 = 0;
      while (1)
      {
        v32 = v22;
        v31 = v22 + 1;
        sub_1C3577090(v19, (uint64_t)v14);
        v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
        v24 = v23(v14, 1, v20);
        sub_1C3577180((uint64_t)v14, &qword_1EF8D9AA0);
        if (v24 == 1)
          break;
        if (v23((char *)v19, 1, v20) == 1)
          goto LABEL_20;
        sub_1C3574134((unint64_t *)&qword_1EF8D9AD0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB02C0], MEMORY[0x1E0CB02D0]);
        sub_1C35B6D8C();
        if (v37 == 1)
          break;
        v29 = v33;
        a2 = (_BYTE *)v34;
        *v33 = v36;
        v33 = v29 + 1;
        v22 = v31;
        if (v31 == a2)
          goto LABEL_17;
      }
      v25 = v18[4];
      v26 = v18[3] >> 1;
      if (v25 != v26)
      {
        if (v25 < v26 && v25 >= v18[2])
        {
          v28 = *(_QWORD *)(v18[1] + 16 * v25 + 8);
          v18[4] = v25 + 1;
          __asm { BR              X9 }
        }
        __break(1u);
        goto LABEL_19;
      }
      a2 = v32;
    }
  }
LABEL_17:
  sub_1C35AABF8((uint64_t)v18, v35, &qword_1EF8D9DE8);
  return a2;
}

uint64_t sub_1C35A53E4(uint64_t a1)
{
  return sub_1C3599410(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1C35A53F8(uint64_t a1)
{
  return sub_1C3599BA8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void sub_1C35A540C()
{
  JUMPOUT(0x1C3BD2ED0);
}

void sub_1C35A5424(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1C35B6EDC();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x1C3BD2DF8);
}

uint64_t sub_1C35A548C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_1C35A552C(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C35A5610(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

unint64_t sub_1C35A5698(unint64_t result)
{
  if (result >= 3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1C35A56D4(unint64_t result)
{
  if (result >= 3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1C35A5710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t i;
  uint64_t *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v4 = a1 + 56;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!v7)
    goto LABEL_7;
LABEL_4:
  v12 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v12 | (v10 << 6); ; i = __clz(__rbit64(v17)) + (v10 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v15 = v14[1];
    if (v15)
    {
      v19 = *v14;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1210);
      v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_1C35BB480;
      *(_QWORD *)(v20 + 32) = a2;
      *(_QWORD *)(v20 + 40) = a3;
      *(_QWORD *)(v20 + 48) = v19;
      *(_QWORD *)(v20 + 56) = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1C3580178(0, v11[2] + 1, 1, v11);
        v11 = (_QWORD *)result;
      }
      v22 = v11[2];
      v21 = v11[3];
      if (v22 >= v21 >> 1)
      {
        result = (uint64_t)sub_1C3580178((_QWORD *)(v21 > 1), v22 + 1, 1, v11);
        v11 = (_QWORD *)result;
      }
      v11[2] = v22 + 1;
      v11[v22 + 4] = v20;
      if (v7)
        goto LABEL_4;
    }
    else if (v7)
    {
      goto LABEL_4;
    }
LABEL_7:
    v16 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v16 >= v8)
      goto LABEL_29;
    v17 = *(_QWORD *)(v4 + 8 * v16);
    ++v10;
    if (!v17)
    {
      v10 = v16 + 1;
      if (v16 + 1 >= v8)
        goto LABEL_29;
      v17 = *(_QWORD *)(v4 + 8 * v10);
      if (!v17)
      {
        v10 = v16 + 2;
        if (v16 + 2 >= v8)
          goto LABEL_29;
        v17 = *(_QWORD *)(v4 + 8 * v10);
        if (!v17)
        {
          v10 = v16 + 3;
          if (v16 + 3 >= v8)
            goto LABEL_29;
          v17 = *(_QWORD *)(v4 + 8 * v10);
          if (!v17)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v17 - 1) & v17;
  }
  v18 = v16 + 4;
  if (v18 >= v8)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v11;
  }
  v17 = *(_QWORD *)(v4 + 8 * v18);
  if (v17)
  {
    v10 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v10 >= v8)
      goto LABEL_29;
    v17 = *(_QWORD *)(v4 + 8 * v10);
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1C35A594C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a1 <= a2)
    v4 = a2;
  else
    v4 = a1;
  if (a2 != a1)
  {
    if (a2 < a1)
    {
      __break(1u);
      __break(1u);
    }
    else if (v4 != a1)
    {
      __asm { BR              X8 }
    }
    __break(1u);
    JUMPOUT(0x1C35A5C44);
  }
  return MEMORY[0x1E0DEE9D8];
}

void *sub_1C35A5C7C(void *a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34[3];
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)&v32 = sub_1C35B6C60();
  *((_QWORD *)&v32 + 1) = v2;
  swift_bridgeObjectRetain();
  v3 = objc_msgSend(a1, sel___swift_objectForKeyedSubscript_, sub_1C35B6F54());
  swift_unknownObjectRelease();
  if (v3)
  {
    sub_1C35B6DBC();
    swift_unknownObjectRelease();
  }
  else
  {
    v32 = 0u;
    v33 = 0u;
  }
  sub_1C35AABF8((uint64_t)&v32, (uint64_t)v34, &qword_1EF8D9A68);
  if (v35)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9C50);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
      v34[0] = 0;
      v34[1] = 0xE000000000000000;
      sub_1C35B6E10();
      swift_bridgeObjectRelease();
      v34[0] = 0xD00000000000001ALL;
      v34[1] = 0x80000001C35C5DA0;
      v7 = 738;
      goto LABEL_44;
    }
    v4 = v30;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1C3577180((uint64_t)v34, &qword_1EF8D9A68);
    v4 = 0;
  }
  *(_QWORD *)&v32 = sub_1C35B6C60();
  *((_QWORD *)&v32 + 1) = v5;
  swift_bridgeObjectRetain();
  v6 = objc_msgSend(a1, sel___swift_objectForKeyedSubscript_, sub_1C35B6F54());
  swift_unknownObjectRelease();
  if (v6)
  {
    sub_1C35B6DBC();
    swift_unknownObjectRelease();
  }
  else
  {
    v32 = 0u;
    v33 = 0u;
  }
  sub_1C35AABF8((uint64_t)&v32, (uint64_t)v34, &qword_1EF8D9A68);
  if (v35)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9C50);
    if (swift_dynamicCast())
    {
      v8 = v30;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
    v34[0] = 0;
    v34[1] = 0xE000000000000000;
    sub_1C35B6E10();
    swift_bridgeObjectRelease();
    v34[0] = 0xD00000000000001ALL;
    v34[1] = 0x80000001C35C5DA0;
    v7 = 741;
LABEL_44:
    *(_QWORD *)&v32 = v7;
    sub_1C35B6F3C();
    sub_1C35B6C9C();
    swift_bridgeObjectRelease();
    sub_1C3577C3C(v34[0], v34[1], 8, 0);
    swift_willThrow();

    return a1;
  }
  swift_bridgeObjectRelease();
  sub_1C3577180((uint64_t)v34, &qword_1EF8D9A68);
  v8 = 0;
LABEL_16:
  *(_QWORD *)&v32 = sub_1C35B6C60();
  *((_QWORD *)&v32 + 1) = v9;
  swift_bridgeObjectRetain();
  v10 = objc_msgSend(a1, sel___swift_objectForKeyedSubscript_, sub_1C35B6F54());
  swift_unknownObjectRelease();
  if (v10)
  {
    sub_1C35B6DBC();
    swift_unknownObjectRelease();
  }
  else
  {
    v32 = 0u;
    v33 = 0u;
  }
  sub_1C35AABF8((uint64_t)&v32, (uint64_t)v34, &qword_1EF8D9A68);
  if (!v35)
  {
    v29 = a1;
    swift_bridgeObjectRelease();
    sub_1C3577180((uint64_t)v34, &qword_1EF8D9A68);
    v11 = 0;
    v12 = 0xF000000000000000;
    v36 = 0;
    if (!v4)
      goto LABEL_27;
LABEL_25:
    if (*(_QWORD *)(v4 + 16))
    {
      swift_bridgeObjectRetain_n();
      __asm { BR              X9 }
    }
    goto LABEL_27;
  }
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
    v34[0] = 0;
    v34[1] = 0xE000000000000000;
    sub_1C35B6E10();
    swift_bridgeObjectRelease();
    v34[0] = 0xD00000000000001ALL;
    v34[1] = 0x80000001C35C5DA0;
    v7 = 744;
    goto LABEL_44;
  }
  v29 = a1;
  v11 = v30;
  v12 = v31;
  swift_bridgeObjectRelease();
  v36 = v30;
  if (v4)
    goto LABEL_25;
LABEL_27:
  if (v8 && *(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain_n();
    __asm { BR              X9 }
  }
  if (v12 >> 60 != 15)
    __asm { BR              X10 }
  if (!v4)
    v4 = MEMORY[0x1E0DEE9D8];
  if (v8)
    v13 = v8;
  else
    v13 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = *(_QWORD *)(v4 + 16);
  v27 = v12;
  v28 = (void *)v4;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v15 = (unint64_t *)(v4 + 40);
    while (1)
    {
      v17 = *(v15 - 1);
      v16 = *v15;
      sub_1C3573E48(v17, *v15);
      if (qword_1ED7E1268 != -1)
        swift_once();
      v18 = *(_QWORD *)(qword_1ED7E1260 + OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_reservedTCIs);
      swift_bridgeObjectRetain();
      v19 = sub_1C358AED0(v17, v16, v18);
      swift_bridgeObjectRelease();
      sub_1C3573D7C(v17, v16);
      if ((v19 & 1) != 0)
        break;
      v15 += 2;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        v11 = v36;
        goto LABEL_47;
      }
    }
    swift_bridgeObjectRelease();
    a1 = v28;
    swift_bridgeObjectRelease();
    sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
    v34[0] = 0;
    v34[1] = 0xE000000000000000;
    sub_1C35B6E10();
    swift_bridgeObjectRelease();
    strcpy((char *)v34, "PrimaryTCIs ");
    BYTE5(v34[1]) = 0;
    HIWORD(v34[1]) = -5120;
    MEMORY[0x1C3BD2C90](v28, MEMORY[0x1E0CB0338]);
    sub_1C35B6C9C();
    goto LABEL_56;
  }
LABEL_47:
  v20 = *(_QWORD *)(v13 + 16);
  if (v20)
  {
    swift_bridgeObjectRetain();
    v21 = (unint64_t *)(v13 + 40);
    while (1)
    {
      v23 = *(v21 - 1);
      v22 = *v21;
      sub_1C3573E48(v23, *v21);
      if (qword_1ED7E1268 != -1)
        swift_once();
      v24 = *(_QWORD *)(qword_1ED7E1260 + OBJC_IVAR____TtC24AppletTranslationLibrary11ExpressMode_reservedTCIs);
      swift_bridgeObjectRetain();
      v25 = sub_1C358AED0(v23, v22, v24);
      swift_bridgeObjectRelease();
      sub_1C3573D7C(v23, v22);
      if ((v25 & 1) != 0)
        break;
      v21 += 2;
      if (!--v20)
      {

        swift_bridgeObjectRelease();
        v11 = v36;
        goto LABEL_57;
      }
    }
    a1 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
    v34[0] = 0;
    v34[1] = 0xE000000000000000;
    sub_1C35B6E10();
    swift_bridgeObjectRelease();
    strcpy((char *)v34, "AuxTCIs ");
    BYTE1(v34[1]) = 0;
    WORD1(v34[1]) = 0;
    HIDWORD(v34[1]) = -402653184;
    MEMORY[0x1C3BD2C90](v13, MEMORY[0x1E0CB0338]);
    sub_1C35B6C9C();
LABEL_56:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1C35B6C9C();
    sub_1C3577C3C(v34[0], v34[1], 8, 0);
    swift_willThrow();

    sub_1C3574174(v36, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a1;
  }

LABEL_57:
  sub_1C3574174(v11, v27);
  swift_bridgeObjectRelease();
  a1 = v28;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1C35A6AB8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v6 = a1;
  if (sub_1C35B6C60() == a1 && v7 == a2)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  v9 = sub_1C35B6F48();
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:

    return 0;
  }
  if (sub_1C35B6C60() == v6 && v11 == a2)
  {
    v6 = 2;
    swift_bridgeObjectRelease_n();

    return v6;
  }
  v12 = sub_1C35B6F48();
  swift_bridgeObjectRelease();
  if ((v12 & 1) != 0)
  {
    swift_bridgeObjectRelease();

    return 2;
  }
  if (sub_1C35B6C60() == v6 && v13 == a2)
    goto LABEL_17;
  v14 = sub_1C35B6F48();
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
    goto LABEL_22;
  if (sub_1C35B6C60() == v6 && v15 == a2)
  {
LABEL_17:
    swift_bridgeObjectRelease_n();
LABEL_23:

    return 1;
  }
  v16 = sub_1C35B6F48();
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  if (sub_1C35B6C60() == v6 && v17 == a2)
  {
    swift_bridgeObjectRelease();
LABEL_28:
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1208);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1C35BB480;
    *(_QWORD *)(v6 + 32) = sub_1C3576F64((uint64_t)&unk_1E7D8B1D8);
    *(_QWORD *)(v6 + 40) = v19;
    *(_QWORD *)(v6 + 48) = sub_1C3576F64((uint64_t)&unk_1E7D8B200);
    *(_QWORD *)(v6 + 56) = v20;

    return v6;
  }
  v18 = sub_1C35B6F48();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
    goto LABEL_28;
  if (sub_1C35B6C60() == v6 && v21 == a2)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v6 = sub_1C35B6F48();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0)
    {
      sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
      sub_1C35B6E10();
      swift_bridgeObjectRelease();
      sub_1C35B6F3C();
      v6 = v23;
      sub_1C35B6C9C();
      swift_bridgeObjectRelease();
      sub_1C3577C3C(0xD000000000000023, 0x80000001C35C5D40, 8, 0);
      swift_willThrow();

      return v6;
    }
  }
  if (a3)
  {
    v22 = sub_1C35A5C7C(a3);
    if (!v3)
      return (uint64_t)v22;
  }
  else
  {
    sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
    sub_1C35B6E10();
    swift_bridgeObjectRelease();
    sub_1C35B6F3C();
    sub_1C35B6C9C();
    swift_bridgeObjectRelease();
    sub_1C3577C3C(0xD000000000000023, 0x80000001C35C5D40, 8, 0);
    swift_willThrow();
  }
  return v6;
}

uint64_t sub_1C35A6F1C(unint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t j;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  BOOL v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t result;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;

  v83 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1C35B6EDC();
    if (!v3)
      goto LABEL_17;
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v3)
      goto LABEL_17;
  }
  if (v3 < 1)
  {
LABEL_114:
    __break(1u);
LABEL_115:
    sub_1C35B6F60();
    __break(1u);
LABEL_116:
    result = sub_1C35B6F6C();
    __break(1u);
    return result;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = MEMORY[0x1C3BD2DEC](i, a1);
      if (*(_BYTE *)(v5 + 162) != 1 || (*(_BYTE *)(v5 + 104) & 1) != 0)
      {
        swift_unknownObjectRelease();
      }
      else
      {
        sub_1C35B6E64();
        sub_1C35B6E88();
        sub_1C35B6E94();
        sub_1C35B6E70();
      }
    }
  }
  else
  {
    for (j = 0; j != v3; ++j)
    {
      v7 = *(_QWORD *)(a1 + 8 * j + 32);
      if (*(_BYTE *)(v7 + 162) == 1 && (*(_BYTE *)(v7 + 104) & 1) == 0)
      {
        swift_retain();
        sub_1C35B6E64();
        sub_1C35B6E88();
        sub_1C35B6E94();
        sub_1C35B6E70();
      }
    }
  }
LABEL_17:
  swift_bridgeObjectRelease();
  v8 = v83;
  v84 = (_QWORD *)sub_1C35AB21C(MEMORY[0x1E0DEE9D8]);
  if (v83 < 0 || (v83 & 0x4000000000000000) != 0)
    goto LABEL_112;
  v9 = *(_QWORD *)(v83 + 16);
  while (1)
  {
    if (!v9)
      goto LABEL_104;
    v10 = 0;
    v81 = v8 & 0xC000000000000001;
    v79 = v8 + 32;
    v76 = v8;
    v77 = v9;
LABEL_23:
    if ((a2 & 1) != 0)
      goto LABEL_29;
    if (v81)
      break;
    if (v10 < *(_QWORD *)(v8 + 16))
    {
      v11 = *(_QWORD **)(v79 + 8 * v10);
      if (v11[10] != 1)
        goto LABEL_29;
      swift_retain();
      goto LABEL_28;
    }
LABEL_111:
    __break(1u);
LABEL_112:
    swift_bridgeObjectRetain();
    v9 = sub_1C35B6EDC();
    swift_release();
    if (v9 < 0)
    {
      __break(1u);
      goto LABEL_114;
    }
  }
  v70 = *(_QWORD *)(MEMORY[0x1C3BD2DEC](v10, v8) + 80);
  swift_release();
  if (v70 == 1)
  {
    v11 = (_QWORD *)MEMORY[0x1C3BD2DEC](v10, v8);
LABEL_28:
    v12 = v11[2];
    v13 = v11[3];
    swift_bridgeObjectRetain();
    swift_release();
    sub_1C357567C(0, 0, v12, v13);
    swift_bridgeObjectRelease();
    v9 = v77;
  }
LABEL_29:
  v14 = v10 + 1;
  if (v10 + 1 != v9)
  {
    v75 = v10 + 1;
    v80 = v10;
    while (1)
    {
      if (v14 >= v9)
      {
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
        goto LABEL_111;
      }
      if (v81)
      {
        v16 = (_QWORD *)MEMORY[0x1C3BD2DEC](v10, v8);
      }
      else
      {
        if (v10 >= *(_QWORD *)(v8 + 16))
          goto LABEL_106;
        v16 = *(_QWORD **)(v79 + 8 * v10);
        swift_retain();
      }
      v18 = v16[10];
      v17 = v16[11];
      v19 = v16[12];
      sub_1C35A5698(v18);
      swift_release();
      if (v81)
      {
        v20 = (_QWORD *)MEMORY[0x1C3BD2DEC](v14, v8);
      }
      else
      {
        if ((unint64_t)v14 >= *(_QWORD *)(v8 + 16))
          goto LABEL_107;
        v20 = *(_QWORD **)(v79 + 8 * v14);
        swift_retain();
      }
      v21 = v20[10];
      v22 = v20[11];
      v23 = v20[12];
      sub_1C35A5698(v21);
      swift_release();
      if (v18)
      {
        if (v18 == 1)
        {
          if (!v21)
            goto LABEL_33;
          if (v21 != 1)
          {
            if (v21 == 2)
              goto LABEL_33;
LABEL_55:
            v15 = v21;
LABEL_32:
            sub_1C35A56D4(v15);
            goto LABEL_33;
          }
        }
        else if (v18 == 2)
        {
          if (v21 < 2)
            goto LABEL_33;
          if (v21 != 2)
            goto LABEL_55;
        }
        else
        {
          if (v21 <= 2)
          {
            v15 = v18;
            goto LABEL_32;
          }
          if (v81)
          {
            v24 = MEMORY[0x1C3BD2DEC](v80, v8);
            v25 = MEMORY[0x1C3BD2DEC](v14, v8);
          }
          else
          {
            v24 = *(_QWORD *)(v79 + 8 * v80);
            v25 = *(_QWORD *)(v79 + 8 * v14);
            swift_retain();
            swift_retain();
          }
          v78 = sub_1C358B8A0(v24, v18, v17, v19, v25, v21, v22, v23);
          swift_release();
          sub_1C35A56D4(v21);
          sub_1C35A56D4(v18);
          swift_release();
          v9 = v77;
          if (!v78)
            goto LABEL_33;
        }
      }
      else
      {
        if (v21 - 1 < 2)
          goto LABEL_33;
        if (v21)
          goto LABEL_55;
      }
      if (v81)
      {
        v26 = MEMORY[0x1C3BD2DEC](v14, v8);
        v28 = *(_QWORD *)(v26 + 16);
        v27 = *(_QWORD *)(v26 + 24);
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        v29 = MEMORY[0x1C3BD2DEC](v80, v8);
      }
      else
      {
        v30 = *(_QWORD *)(v79 + 8 * v14);
        v28 = *(_QWORD *)(v30 + 16);
        v27 = *(_QWORD *)(v30 + 24);
        v29 = *(_QWORD *)(v79 + 8 * v80);
        swift_bridgeObjectRetain();
        swift_retain();
      }
      v31 = *(_QWORD *)(v29 + 16);
      v32 = *(_QWORD *)(v29 + 24);
      swift_bridgeObjectRetain_n();
      swift_release();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v35 = sub_1C35ABC5C(v31, v32);
      v36 = v84[2];
      v37 = (v34 & 1) == 0;
      v38 = v36 + v37;
      if (__OFADD__(v36, v37))
        goto LABEL_108;
      v39 = v34;
      if (v84[3] >= v38)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1C359DE9C();
      }
      else
      {
        sub_1C359CD58(v38, isUniquelyReferenced_nonNull_native);
        v40 = sub_1C35ABC5C(v31, v32);
        if ((v39 & 1) != (v41 & 1))
          goto LABEL_116;
        v35 = v40;
      }
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0)
      {
        v84[(v35 >> 6) + 8] |= 1 << v35;
        v42 = (uint64_t *)(v84[6] + 16 * v35);
        *v42 = v31;
        v42[1] = v32;
        *(_QWORD *)(v84[7] + 8 * v35) = MEMORY[0x1E0DEE9E8];
        v43 = v84[2];
        v44 = __OFADD__(v43, 1);
        v45 = v43 + 1;
        if (v44)
          goto LABEL_110;
        v84[2] = v45;
        swift_bridgeObjectRetain();
      }
      v46 = v84[7];
      v47 = *(_QWORD *)(v46 + 8 * v35);
      sub_1C35B6FB4();
      sub_1C35B6FC0();
      swift_bridgeObjectRetain();
      sub_1C35B6C84();
      v48 = sub_1C35B6FD8();
      v49 = -1 << *(_BYTE *)(v47 + 32);
      v50 = v48 & ~v49;
      if (((*(_QWORD *)(v47 + 56 + ((v50 >> 3) & 0xFFFFFFFFFFFFF8)) >> v50) & 1) != 0)
      {
        v51 = ~v49;
        v52 = *(_QWORD *)(v47 + 48);
        while (1)
        {
          v53 = (_QWORD *)(v52 + 16 * v50);
          v54 = v53[1];
          if (v54)
          {
            v55 = *v53 == v28 && v54 == v27;
            if (v55 || (sub_1C35B6F48() & 1) != 0)
              break;
          }
          v50 = (v50 + 1) & v51;
          if (((*(_QWORD *)(v47 + 56 + ((v50 >> 3) & 0xFFFFFFFFFFFFF8)) >> v50) & 1) == 0)
            goto LABEL_83;
        }
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_83:
        swift_bridgeObjectRelease();
        v56 = 8 * v35;
        v57 = swift_isUniquelyReferenced_nonNull_native();
        v82 = *(_QWORD *)(v46 + v56);
        v8 = v82;
        *(_QWORD *)(v46 + v56) = 0x8000000000000000;
        v58 = *(_QWORD *)(v82 + 16);
        v59 = *(_QWORD *)(v82 + 24);
        swift_bridgeObjectRetain();
        if (v59 <= v58)
        {
          if (v57)
            sub_1C35A0574();
          else
            sub_1C35A3958();
          v8 = v82;
          sub_1C35B6FB4();
          sub_1C35B6FC0();
          sub_1C35B6C84();
          v60 = sub_1C35B6FD8();
          v61 = -1 << *(_BYTE *)(v82 + 32);
          v50 = v60 & ~v61;
          if (((*(_QWORD *)(v82 + 56 + ((v50 >> 3) & 0xFFFFFFFFFFFFF8)) >> v50) & 1) != 0)
          {
            v62 = ~v61;
            v63 = *(_QWORD *)(v82 + 48);
            do
            {
              v64 = (_QWORD *)(v63 + 16 * v50);
              v65 = v64[1];
              if (v65)
              {
                v66 = *v64 == v28 && v65 == v27;
                if (v66 || (sub_1C35B6F48() & 1) != 0)
                  goto LABEL_115;
              }
              v50 = (v50 + 1) & v62;
            }
            while (((*(_QWORD *)(v82 + 56 + ((v50 >> 3) & 0xFFFFFFFFFFFFF8)) >> v50) & 1) != 0);
          }
        }
        else if ((v57 & 1) == 0)
        {
          sub_1C35A3294();
          v8 = v82;
        }
        *(_QWORD *)(v8 + ((v50 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v50;
        v67 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v50);
        *v67 = v28;
        v67[1] = v27;
        v68 = *(_QWORD *)(v8 + 16);
        v44 = __OFADD__(v68, 1);
        v69 = v68 + 1;
        if (v44)
          goto LABEL_109;
        *(_QWORD *)(v8 + 16) = v69;
        *(_QWORD *)(v46 + v56) = v8;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
      }
      v8 = v76;
      v9 = v77;
LABEL_33:
      ++v14;
      v10 = v80;
      if (v14 == v9)
      {
        v10 = v75;
        goto LABEL_23;
      }
    }
  }
LABEL_104:
  swift_release();
  v71 = swift_bridgeObjectRetain();
  v72 = sub_1C3586B54(v71);
  swift_bridgeObjectRelease_n();
  return v72;
}

uint64_t sub_1C35A7858(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1C35AA904();
  result = sub_1C35B6D20();
  v8 = result;
  if (v2)
  {
    v4 = (unint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      sub_1C3573E48(v5, *v4);
      sub_1C359E66C(v7, v5, v6);
      sub_1C3573D7C(v7[0], v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1C35A78F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_1C35B6D20();
  v7 = result;
  if (v2)
  {
    v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_1C359E56C(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1C35A7960(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v21 = sub_1C35B6EDC();
  swift_bridgeObjectRelease();
  if (v21 < v2)
    goto LABEL_31;
LABEL_4:
  v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v7 = sub_1C35B6EDC();
    swift_bridgeObjectRelease();
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v12 = sub_1C35B6EDC();
    swift_bridgeObjectRelease();
    v9 = *v3;
    goto LABEL_15;
  }
  if (*v3 >> 62)
    goto LABEL_34;
  v7 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 - v6;
  if (__OFADD__(v7, v5))
    goto LABEL_36;
LABEL_8:
  v9 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v9;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v7 = 1;
  }
  if (v9 >> 62)
    goto LABEL_37;
  v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v8)
    v12 = v8;
  swift_bridgeObjectRetain();
  *v3 = MEMORY[0x1C3BD2DF8](v7, v12, 1, v9);
  swift_bridgeObjectRelease();
  v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = v11 + 32;
  v14 = (char *)(v11 + 32 + 8 * v4);
  type metadata accessor for ExpressMode.PassConfig();
  swift_arrayDestroy();
  if (!v5)
    return sub_1C35B6CF0();
  if (!(*v3 >> 62))
  {
    v15 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v22 = sub_1C35B6EDC();
  swift_bridgeObjectRelease();
  v16 = v22 - v2;
  if (__OFSUB__(v22, v2))
    goto LABEL_40;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (char *)(v13 + 8 * v2);
    if (v4 != v2 || v14 >= &v17[8 * v16])
      memmove(v14, v17, 8 * v16);
    if (!(*v3 >> 62))
    {
      v18 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      v19 = v18 + v5;
      if (!__OFADD__(v18, v5))
      {
LABEL_27:
        *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v19;
        return sub_1C35B6CF0();
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v23 = sub_1C35B6EDC();
    swift_bridgeObjectRelease();
    v19 = v23 + v5;
    if (!__OFADD__(v23, v5))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = sub_1C35B6F0C();
  __break(1u);
  return result;
}

uint64_t sub_1C35A7C58(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v3 = v2;
  if (qword_1ED7E1268 != -1)
    swift_once();
  sub_1C3588538(a1, a2 & 1);
  v7 = v2;
  if (!v2)
  {
    v8 = v6;
    v9 = *(_QWORD *)(v6 + 16);
    if (v9)
    {
      v26 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      sub_1C35B6E7C();
      sub_1C3575208(0, (unint64_t *)&qword_1EF8D95A0);
      v10 = (uint64_t *)(v8 + 48);
      v11 = MEMORY[0x1E0DEA968];
      do
      {
        v12 = *(v10 - 2);
        v13 = *(v10 - 1);
        v14 = *v10;
        v10 += 3;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9A88);
        v15 = swift_allocObject();
        *(_OWORD *)(v15 + 16) = xmmword_1C35BBC20;
        *(_QWORD *)(v15 + 32) = sub_1C35B6C60();
        *(_QWORD *)(v15 + 40) = v16;
        *(_QWORD *)(v15 + 88) = v11;
        *(_QWORD *)(v15 + 56) = v11;
        *(_QWORD *)(v15 + 64) = v12;
        *(_QWORD *)(v15 + 72) = v13;
        v17 = sub_1C35B6C60();
        *(_QWORD *)(v15 + 120) = v11;
        *(_QWORD *)(v15 + 96) = v17;
        *(_QWORD *)(v15 + 104) = v18;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v19 = v7;
        v20 = sub_1C35869F0(v14);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v15 + 152) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9A70);
        *(_QWORD *)(v15 + 128) = v20;
        v21 = sub_1C35B6C60();
        *(_QWORD *)(v15 + 184) = v11;
        *(_QWORD *)(v15 + 160) = v21;
        *(_QWORD *)(v15 + 168) = v22;
        v23 = swift_bridgeObjectRetain();
        v24 = sub_1C358644C(v23);
        v7 = v19;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v15 + 216) = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E1280);
        *(_QWORD *)(v15 + 192) = v24;
        sub_1C35B6D2C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1C35B6E64();
        sub_1C35B6E88();
        sub_1C35B6E94();
        sub_1C35B6E70();
        --v9;
      }
      while (v9);
      v3 = v26;
    }
    else
    {
      swift_bridgeObjectRetain();
      v3 = MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_1C35A7EE0(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  if (qword_1ED7E1268 != -1)
    swift_once();
  result = sub_1C3588538(a1, a3 & 1);
  if (!v3)
  {
    v9 = result;
    v10 = *(_QWORD *)(v8 + 16);
    v24 = v8;
    if (v10)
    {
      v23 = a2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11 = swift_bridgeObjectRetain();
      v12 = sub_1C35757F0(v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        sub_1C3575208(0, (unint64_t *)&qword_1EF8D9A08);
        sub_1C3577C3C(0xD000000000000023, 0x80000001C35C5B50, 8, 0);
        return swift_willThrow();
      }
      if (v10 != 1)
      {
        v13 = v24 + 72;
        a2 = 1;
        while (1)
        {
          v14 = a2 + 1;
          if (__OFADD__(a2, 1))
            break;
          swift_bridgeObjectRetain();
          v15 = swift_bridgeObjectRetain();
          v16 = sub_1C35757F0(v15);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v16 & 1) != 0)
            goto LABEL_6;
          v13 += 24;
          ++a2;
          if (v14 == v10)
            goto LABEL_12;
        }
        __break(1u);
        goto LABEL_32;
      }
LABEL_12:
      swift_bridgeObjectRelease();
      a2 = v23;
    }
    v25 = MEMORY[0x1E0DEE9D8];
    if (!(v9 >> 62))
    {
      v17 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (!v17)
        goto LABEL_33;
      goto LABEL_15;
    }
LABEL_32:
    swift_bridgeObjectRetain();
    result = sub_1C35B6EDC();
    v17 = result;
    if (!result)
      goto LABEL_33;
LABEL_15:
    if (v17 < 1)
    {
      __break(1u);
      return result;
    }
    if ((v9 & 0xC000000000000001) == 0)
    {
      v20 = a2;
      for (i = 0; i != v17; ++i)
      {
        if ((a3 & 1) != 0 || *(_QWORD *)(*(_QWORD *)(v9 + 8 * i + 32) + 80) != 1)
        {
          swift_retain();
          sub_1C35B6E64();
          sub_1C35B6E88();
          sub_1C35B6E94();
          sub_1C35B6E70();
        }
      }
      swift_bridgeObjectRelease();
      a2 = v20;
      goto LABEL_34;
    }
    for (j = 0; j != v17; ++j)
    {
      v19 = MEMORY[0x1C3BD2DEC](j, v9);
      if ((a3 & 1) != 0 || *(_QWORD *)(v19 + 80) != 1)
      {
        sub_1C35B6E64();
        sub_1C35B6E88();
        sub_1C35B6E94();
        sub_1C35B6E70();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
LABEL_33:
    swift_bridgeObjectRelease();
LABEL_34:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = sub_1C358BB08(v25);
    result = swift_release();
    *(_BYTE *)a2 = v22 & 1;
  }
  return result;
}

uint64_t sub_1C35A8250(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v10;

  v10 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
  {
LABEL_20:
    v4 = sub_1C35B6EDC();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      for (i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          v6 = MEMORY[0x1C3BD2DEC](i, a1);
          v7 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_17:
            __break(1u);
            return v10;
          }
        }
        else
        {
          if (i >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_20;
          }
          v6 = *(_QWORD *)(a1 + 8 * i + 32);
          swift_retain();
          v7 = i + 1;
          if (__OFADD__(i, 1))
            goto LABEL_17;
        }
        v8 = *(_QWORD *)(v6 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(v6 + 24) == *(_QWORD *)(a2 + 24);
        if (v8 || (sub_1C35B6F48() & 1) != 0)
        {
          sub_1C35B6E64();
          sub_1C35B6E88();
          sub_1C35B6E94();
          sub_1C35B6E70();
        }
        else
        {
          swift_release();
        }
        if (v7 == v4)
          return v10;
      }
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1C35A83C0(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
  v4 = 0;
  v5 = result + 40;
  v6 = MEMORY[0x1E0DEE9D8];
  v15 = result + 40;
  do
  {
    if (v4 <= v2)
      v7 = v2;
    else
      v7 = v4;
    v8 = (unint64_t *)(v5 + 16 * v4);
    for (i = v4; ; ++i)
    {
      if (v7 == i)
      {
        __break(1u);
        return result;
      }
      v10 = *(v8 - 1);
      v11 = *v8;
      v4 = i + 1;
      sub_1C3573E48(v10, *v8);
      if ((sub_1C35876E4(v10, v11, a2) & 1) == 0)
        break;
      result = sub_1C3573D7C(v10, v11);
      v8 += 2;
      if (v2 == v4)
        return v6;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
      result = sub_1C3599254(0, *(_QWORD *)(v6 + 16) + 1, 1);
    v13 = *(_QWORD *)(v6 + 16);
    v12 = *(_QWORD *)(v6 + 24);
    if (v13 >= v12 >> 1)
      result = sub_1C3599254(v12 > 1, v13 + 1, 1);
    *(_QWORD *)(v6 + 16) = v13 + 1;
    v14 = v6 + 16 * v13;
    *(_QWORD *)(v14 + 32) = v10;
    *(_QWORD *)(v14 + 40) = v11;
    v5 = v15;
  }
  while (v2 - 1 != i);
  return v6;
}

BOOL sub_1C35A8514(uint64_t a1, uint64_t a2, void *__s1)
{
  uint64_t __s2;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  __s2 = a1;
  v5 = a2;
  v6 = BYTE2(a2);
  v7 = BYTE3(a2);
  v8 = BYTE4(a2);
  v9 = BYTE5(a2);
  if (!__s1)
    __break(1u);
  return memcmp(__s1, &__s2, BYTE6(a2)) == 0;
}

uint64_t sub_1C35A85F4(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result;
  char *v8;
  BOOL v9;
  int64_t v10;
  size_t v11;

  result = sub_1C35B693C();
  v8 = (char *)result;
  if (result)
  {
    result = sub_1C35B6954();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }
  result = sub_1C35B6948();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (result >= v10)
    v11 = v10;
  else
    v11 = result;
  return memcmp(a4, v8, v11) == 0;
}

void sub_1C35A8690(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

BOOL sub_1C35A86CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;

  v21 = sub_1C35A8514(v16, v20 & 0xFFFFFFFFFFFFFFLL, v17);
  if (!v18)
    return v21;
  return v19;
}

void sub_1C35A87C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  const void **v35;
  _BYTE *v36;
  _BYTE *v37;
  int64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  __int16 v51;
  _BYTE v52[22];
  __int128 __dst;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v2 = v1;
  v61 = *MEMORY[0x1E0C80C00];
  if (a1 < 0 || (a1 & 0x4000000000000000) != 0)
    goto LABEL_70;
  v3 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  while (1)
  {
    v54 = v3;
    sub_1C35863D4(&v54);
    if (v2)
    {
      swift_release();
      __break(1u);
      JUMPOUT(0x1C35A9F44);
    }
    v4 = v54 < 0 || (v54 & 0x4000000000000000) != 0;
    v49 = v54;
    if (v4)
    {
      swift_bridgeObjectRetain();
      v2 = sub_1C35B6EDC();
      swift_release();
    }
    else
    {
      v2 = *(_QWORD *)(v54 + 16);
    }
    if ((unsigned __int128)(v2 * (__int128)18) >> 64 == (18 * v2) >> 63)
    {
      v59 = sub_1C35806B0(18 * v2);
      v60 = v5;
      *(_QWORD *)&v52[14] = MEMORY[0x1E0DEE9E8];
      v58 = xmmword_1C35BB2D0;
      if (v4)
      {
        swift_retain();
        v6 = sub_1C35B6EDC();
        v7 = v49;
      }
      else
      {
        v7 = v49;
        v8 = *(_QWORD *)(v49 + 16);
        swift_retain();
        v6 = v8;
      }
      v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v47 = v6;
      if (v6)
      {
        if (v6 < 1)
        {
          __break(1u);
          JUMPOUT(0x1C35A9EA4);
        }
        v10 = 0;
        v11 = v7 & 0xC000000000000001;
        do
        {
          if (v11)
          {
            v13 = MEMORY[0x1C3BD2DEC](v10, v7);
          }
          else
          {
            v13 = *(_QWORD *)(v7 + 8 * v10 + 32);
            swift_retain();
          }
          v14 = *(_QWORD *)(v13 + 80);
          if (v14 < 3)
          {
            swift_release();
            v7 = v49;
            v12 = v47;
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_release();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v9 = sub_1C358049C(0, v9[2] + 1, 1, v9);
            v16 = v9[2];
            v15 = v9[3];
            v7 = v49;
            v12 = v47;
            if (v16 >= v15 >> 1)
            {
              v7 = v49;
              v9 = sub_1C358049C((_QWORD *)(v15 > 1), v16 + 1, 1, v9);
              v12 = v47;
            }
            v9[2] = v16 + 1;
            v9[v16 + 4] = v14;
          }
          ++v10;
        }
        while (v12 != v10);
      }
      swift_release();
      v54 = MEMORY[0x1E0DEE9D8];
      v17 = v9[2];
      if (v17)
      {
        swift_bridgeObjectRetain();
        for (i = 0; i != v17; ++i)
        {
          v19 = swift_bridgeObjectRetain();
          sub_1C356EF58(v19);
        }
        swift_bridgeObjectRelease_n();
        v20 = v54;
      }
      else
      {
        swift_bridgeObjectRelease();
        v20 = MEMORY[0x1E0DEE9D8];
      }
      v45 = v20;
      sub_1C35AA904();
      v48 = sub_1C35B6C24();
      if (!v47)
      {
LABEL_65:
        swift_bridgeObjectRelease();
        swift_release();
        __asm { BR              X10 }
      }
      v21 = 0;
      v22 = v49;
      while (1)
      {
        if ((v49 & 0xC000000000000001) != 0)
        {
          v50 = (_QWORD *)MEMORY[0x1C3BD2DEC](v21);
        }
        else
        {
          if (v21 >= *(_QWORD *)(v22 + 16))
          {
            __break(1u);
            JUMPOUT(0x1C35A9E44);
          }
          v50 = *(_QWORD **)(v49 + 32 + 8 * v21);
          swift_retain();
        }
        if (__OFADD__(v21++, 1))
        {
          __break(1u);
          JUMPOUT(0x1C35A9E38);
        }
        if (!*(_QWORD *)(v48 + 16))
          goto LABEL_46;
        v24 = v50[4];
        v25 = v50[5];
        sub_1C3573E48(v24, v25);
        v26 = sub_1C35ABC70(v24, v25);
        if ((v27 & 1) == 0)
          break;
        v28 = *(unsigned __int16 *)(*(_QWORD *)(v48 + 56) + 2 * v26);
        sub_1C3573D7C(v24, v25);
        v29 = v50[10];
        if (!v29)
          goto LABEL_35;
        if (v29 == 1)
          __asm { BR              X8 }
        if (v29 != 2)
        {
          v30 = v50[12];
          swift_bridgeObjectRetain();
          sub_1C35A5698(v29);
          v31 = swift_bridgeObjectRetain();
          v32 = sub_1C35A83C0(v31, v45);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v54 = v29;
          swift_bridgeObjectRetain();
          sub_1C356EF58(v32);
          v46 = bswap32(v28);
          if (*(_QWORD *)(v54 + 16))
          {
            v33 = *(_QWORD *)(v54 + 32);
            v34 = *(_QWORD *)(v54 + 40);
            v51 = HIWORD(v46);
            v56 = MEMORY[0x1E0DEAC20];
            *(_QWORD *)&v57 = MEMORY[0x1E0CB1AA8];
            v54 = (uint64_t)&v51;
            v55 = v52;
            v35 = (const void **)__swift_project_boxed_opaque_existential_1Tm(&v54, MEMORY[0x1E0DEAC20]);
            v36 = *v35;
            if (*v35 && (v37 = v35[1], v38 = v37 - v36, v37 != v36))
            {
              if (v38 <= 14)
              {
                *(_QWORD *)((char *)&__dst + 6) = 0;
                *(_QWORD *)&__dst = 0;
                BYTE14(__dst) = (_BYTE)v37 - (_BYTE)v36;
                memcpy(&__dst, v36, v38);
                v39 = __dst;
                v40 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
                sub_1C3573E48(v33, v34);
              }
              else
              {
                sub_1C35B696C();
                swift_allocObject();
                sub_1C3573E48(v33, v34);
                v42 = sub_1C35B6930();
                v43 = v42;
                if ((unint64_t)v38 >= 0x7FFFFFFF)
                {
                  sub_1C35B69FC();
                  v39 = swift_allocObject();
                  *(_QWORD *)(v39 + 16) = 0;
                  *(_QWORD *)(v39 + 24) = v38;
                  v40 = v43 | 0x8000000000000000;
                }
                else
                {
                  v39 = v38 << 32;
                  v40 = v42 | 0x4000000000000000;
                }
              }
            }
            else
            {
              sub_1C3573E48(v33, v34);
              v39 = 0;
              v40 = 0xC000000000000000;
            }
            __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v54);
            *(_QWORD *)&__dst = v33;
            *((_QWORD *)&__dst + 1) = v34;
            v56 = MEMORY[0x1E0CB0338];
            *(_QWORD *)&v57 = MEMORY[0x1E0CB0318];
            v54 = v39;
            v55 = (_BYTE *)v40;
            v41 = (char *)&loc_1C35A9030
                + dword_1C35A9F94[__swift_project_boxed_opaque_existential_1Tm(&v54, MEMORY[0x1E0CB0338])[1] >> 62];
            __asm { BR              X9 }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v30 + 16))
            __asm { BR              X11 }
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_35:
          swift_release();
        }
        v22 = v49;
        if (v21 == v47)
          goto LABEL_65;
      }
      sub_1C3573D7C(v24, v25);
LABEL_46:
      __asm { BR              X11 }
    }
    __break(1u);
LABEL_70:
    v44 = swift_bridgeObjectRetain();
    v3 = (uint64_t)sub_1C3599064(v44, (void (*)(_QWORD *, uint64_t, unint64_t))sub_1C3573770);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1C35A9FC8()
{
  return sub_1C35B6A50();
}

uint64_t sub_1C35A9FD4()
{
  return swift_deallocObject();
}

_BYTE **sub_1C35A9FE4(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1C356F3DC(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_1C35A9FEC()
{
  return swift_deallocObject();
}

uint64_t sub_1C35A9FFC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1C35AA01C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return sub_1C3598520(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_1C35AA024()
{
  return swift_deallocObject();
}

uint64_t sub_1C35AA034()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_1C35AA03C()
{
  return swift_deallocObject();
}

uint64_t sub_1C35AA04C()
{
  uint64_t v0;

  return **(unsigned __int8 **)(v0 + 16);
}

uint64_t sub_1C35AA058()
{
  return swift_deallocObject();
}

uint64_t sub_1C35AA068()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 60 != 15)
    sub_1C3573D7C(*(_QWORD *)(v0 + 16), v1);
  return swift_deallocObject();
}

uint64_t sub_1C35AA09C()
{
  uint64_t v0;

  return sub_1C3590124(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1C35AA0A4()
{
  return swift_deallocObject();
}

uint64_t sub_1C35AA0B4()
{
  return swift_deallocObject();
}

uint64_t sub_1C35AA0C4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_1C35AA0E8@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_1C35AA114()
{
  return swift_deallocObject();
}

uint64_t sub_1C35AA124()
{
  return swift_deallocObject();
}

uint64_t sub_1C35AA134()
{
  return swift_deallocObject();
}

uint64_t sub_1C35AA144()
{
  return swift_deallocObject();
}

uint64_t sub_1C35AA154(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  (*(void (**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  v3 = *a1 + 4;
  result = sub_1C35B6D98();
  *a1 = v3;
  return result;
}

uint64_t sub_1C35AA1AC()
{
  return swift_deallocObject();
}

uint64_t sub_1C35AA1BC()
{
  return swift_deallocObject();
}

uint64_t sub_1C35AA1CC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C35AA1F0(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v5;
  int64_t v6;
  int64_t v7;
  int64_t v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t result;
  BOOL v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;

  v5 = a2;
  v6 = a1;
  v7 = 0;
  v8 = a1;
  while (1)
  {
    v9 = v8 <= a2;
    if (a3 > 0)
      v9 = v8 >= a2;
    if (v9)
      break;
    v10 = __OFADD__(v8, a3);
    v8 += a3;
    if (v10)
      v8 = (v8 >> 63) ^ 0x8000000000000000;
    v10 = __OFADD__(v7++, 1);
    if (v10)
    {
      __break(1u);
      break;
    }
  }
  v32 = MEMORY[0x1E0DEE9D8];
  sub_1C3599270(0, v7, 0);
  v31 = v5;
  if (v7)
  {
    result = a4;
    v29 = a4 + 32;
    v30 = *(_QWORD *)(a4 + 16);
    while (1)
    {
      v13 = v6 <= v5;
      if (a3 > 0)
        v13 = v6 >= v5;
      if (v13)
        break;
      if (__OFADD__(v6, a3))
        v14 = ((v6 + a3) >> 63) ^ 0x8000000000000000;
      else
        v14 = v6 + a3;
      if (__OFADD__(v6, 15))
        goto LABEL_50;
      if (v30 >= v6 + 15)
        v15 = v6 + 15;
      else
        v15 = v30;
      if (v15 < v6)
        goto LABEL_51;
      if (v6 < 0)
        goto LABEL_52;
      v17 = *(_QWORD *)(v32 + 16);
      v16 = *(_QWORD *)(v32 + 24);
      v18 = result;
      swift_bridgeObjectRetain();
      if (v17 >= v16 >> 1)
        sub_1C3599270(v16 > 1, v17 + 1, 1);
      *(_QWORD *)(v32 + 16) = v17 + 1;
      v19 = (_QWORD *)(v32 + 32 * v17);
      v19[4] = v18;
      v19[5] = v29;
      v19[6] = v6;
      v19[7] = (2 * v15) | 1;
      v6 = v14;
      --v7;
      result = v18;
      v5 = v31;
      if (!v7)
        goto LABEL_29;
    }
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
  }
  else
  {
    v14 = v6;
    result = a4;
LABEL_29:
    v20 = v14 <= v5;
    if (a3 > 0)
      v20 = v14 >= v5;
    if (v20)
      return v32;
    v21 = result + 32;
    while (1)
    {
      v22 = __OFADD__(v14, a3) ? ((v14 + a3) >> 63) ^ 0x8000000000000000 : v14 + a3;
      if (__OFADD__(v14, 15))
        break;
      if (*(_QWORD *)(result + 16) >= v14 + 15)
        v23 = v14 + 15;
      else
        v23 = *(_QWORD *)(result + 16);
      if (v23 < v14)
        goto LABEL_54;
      if (v14 < 0)
        goto LABEL_55;
      v25 = *(_QWORD *)(v32 + 16);
      v24 = *(_QWORD *)(v32 + 24);
      v26 = result;
      swift_bridgeObjectRetain();
      if (v25 >= v24 >> 1)
        sub_1C3599270(v24 > 1, v25 + 1, 1);
      *(_QWORD *)(v32 + 16) = v25 + 1;
      v27 = (_QWORD *)(v32 + 32 * v25);
      v27[4] = v26;
      v27[5] = v21;
      v27[6] = v14;
      v27[7] = (2 * v23) | 1;
      v28 = v22 <= v31;
      if (a3 > 0)
        v28 = v22 >= v31;
      v14 = v22;
      result = v26;
      if (v28)
        return v32;
    }
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t sub_1C35AA474(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 1 != a2)
  {
    if (a2 < (uint64_t)(a3 >> 1))
      __asm { BR              X9 }
    __break(1u);
    JUMPOUT(0x1C35AA568);
  }
  return a2;
}

uint64_t sub_1C35AA578(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  char v10;
  uint64_t v11;
  uint64_t v12;

  if (a4 != a1)
  {
    if (a4 >= a1)
    {
      v10 = a6 & 1;
      v11 = a4;
      v12 = a1;
      if ((a3 & 1) == 0)
        goto LABEL_7;
    }
    else
    {
      v10 = a3 & 1;
      v11 = a1;
      v12 = a4;
      if ((a6 & 1) == 0)
      {
LABEL_7:
        if (v12 >= a8 && v12 < (uint64_t)(a9 >> 1))
          __asm { BR              X10 }
        goto LABEL_26;
      }
    }
    if (v12 < v11)
    {
      if (v12 >= a8 && v12 < (uint64_t)(a9 >> 1))
        __asm { BR              X16 }
      __break(1u);
      JUMPOUT(0x1C35AA7ECLL);
    }
    if ((v10 & 1) != 0)
      return 0;
    if (v12 >= a8 && v12 < (uint64_t)(a9 >> 1))
      __asm { BR              X10 }
LABEL_28:
    __break(1u);
    JUMPOUT(0x1C35AA808);
  }
  if ((a6 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      __break(1u);
      JUMPOUT(0x1C35AA814);
    }
    if (a4 >= a8 && (uint64_t)(a9 >> 1) > a4)
      return sub_1C35A4B8C(a2, a5, *(_QWORD *)(a7 + 16 * a4), *(_QWORD *)(a7 + 16 * a4 + 8));
    goto LABEL_27;
  }
  if ((a3 & 1) == 0)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  return 0;
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  sub_1C3573D7C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1C35AA86C()
{
  uint64_t v0;

  return sub_1C357F924(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1C35AA874()
{
  return swift_deallocObject();
}

uint64_t sub_1C35AA884()
{
  return swift_deallocObject();
}

uint64_t sub_1C35AA894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1C35A4478(a1, a2, *(_QWORD *)(v3 + 16), **(_QWORD **)(v3 + 32), *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8), *(_QWORD *)(*(_QWORD *)(v3 + 32) + 16), *(_QWORD *)(*(_QWORD *)(v3 + 32) + 24), a3);
}

uint64_t sub_1C35AA8B8()
{
  return sub_1C35B6A20();
}

uint64_t sub_1C35AA8E0()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1C35AA904()
{
  unint64_t result;

  result = qword_1ED7E11F8;
  if (!qword_1ED7E11F8)
  {
    result = MEMORY[0x1C3BD3788](MEMORY[0x1E0CB0358], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1ED7E11F8);
  }
  return result;
}

uint64_t *sub_1C35AA948(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1[2];
  v5 = a1[3];
  a2(*a1, a1[1]);
  a2(v4, v5);
  return a1;
}

uint64_t sub_1C35AA990(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CB01A0] - 8) + 32))(a2, a1);
  return a2;
}

uint64_t sub_1C35AA9CC(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

uint64_t sub_1C35AAA00()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  sub_1C3573D7C(v0[2], v0[3]);
  v1 = v0[5];
  if (v1 >> 60 != 15)
    sub_1C3573D7C(v0[4], v1);
  v2 = v0[7];
  if (v2 >> 60 != 15)
    sub_1C3573D7C(v0[6], v2);
  v3 = v0[9];
  if (v3 >> 60 != 15)
    sub_1C3573D7C(v0[8], v3);
  v4 = v0[11];
  if (v4 >> 60 != 15)
    sub_1C3573D7C(v0[10], v4);
  v5 = v0[13];
  if (v5 >> 60 != 15)
    sub_1C3573D7C(v0[12], v5);
  v6 = v0[15];
  if (v6 >> 60 != 15)
    sub_1C3573D7C(v0[14], v6);
  v7 = v0[17];
  if (v7 >> 60 != 15)
    sub_1C3573D7C(v0[16], v7);
  v8 = v0[19];
  if (v8 >> 60 != 15)
    sub_1C3573D7C(v0[18], v8);
  v9 = v0[21];
  if (v9 >> 60 != 15)
    sub_1C3573D7C(v0[20], v9);
  return swift_deallocObject();
}

_QWORD *sub_1C35AAAFC(_QWORD *a1, void (*a2)(_QWORD, _QWORD), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  v11 = a1[8];
  v12 = a1[9];
  v14 = a1[11];
  v15 = a1[10];
  v16 = a1[13];
  v17 = a1[12];
  v18 = a1[15];
  v19 = a1[14];
  v20 = a1[17];
  v21 = a1[16];
  v22 = a1[19];
  v23 = a1[18];
  a2(*a1, a1[1]);
  a3(v5, v6);
  a3(v7, v8);
  a3(v9, v10);
  a3(v11, v12);
  a3(v15, v14);
  a3(v17, v16);
  a3(v19, v18);
  a3(v21, v20);
  a3(v23, v22);
  return a1;
}

uint64_t sub_1C35AABF8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C35AAC3C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t storeEnumTagSinglePayload for ExpressMode.PTAExpressModeManager.EndpointType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C35AAC94 + 4 * byte_1C35BBC75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C35AACC8 + 4 * byte_1C35BBC70[v4]))();
}

uint64_t sub_1C35AACC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C35AACD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C35AACD8);
  return result;
}

uint64_t sub_1C35AACE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C35AACECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C35AACF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C35AACF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExpressMode.PTAExpressModeManager.EndpointType()
{
  return &type metadata for ExpressMode.PTAExpressModeManager.EndpointType;
}

uint64_t destroy for ExpressMode.ECP2Info()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s24AppletTranslationLibrary11ExpressModeC8ECP2InfoVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ExpressMode.ECP2Info(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ExpressMode.ECP2Info(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpressMode.ECP2Info(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpressMode.ECP2Info(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExpressMode.ECP2Info()
{
  return &type metadata for ExpressMode.ECP2Info;
}

unint64_t sub_1C35AAEF0()
{
  unint64_t result;

  result = qword_1EF8D9F08;
  if (!qword_1EF8D9F08)
  {
    result = MEMORY[0x1C3BD3788](&unk_1C35BBEB8, &type metadata for ExpressMode.PTAExpressModeManager.EndpointType);
    atomic_store(result, (unint64_t *)&qword_1EF8D9F08);
  }
  return result;
}

unint64_t sub_1C35AAF90(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E80);
  v2 = sub_1C35B6F00();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  v7 = MEMORY[0x1E0DEA758];
  while (1)
  {
    sub_1C35ADCDC(v6, (uint64_t)&v16, &qword_1EF8D9F78);
    v8 = v16;
    v9 = v17;
    result = sub_1C35ABC84(v16, v17, (void (*)(_BYTE *, uint64_t, uint64_t))v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1C35ABD2C);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_1C3573DC0(&v18, (_OWORD *)(v3[7] + 32 * result));
    v13 = v3[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v3[2] = v15;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1C35AB0E0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9EA8);
  v2 = (_QWORD *)sub_1C35B6F00();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_BYTE *)(a1 + 48);
  v5 = MEMORY[0x1E0CB0240];
  while (1)
  {
    v6 = *((_QWORD *)v4 - 2);
    v7 = *((_QWORD *)v4 - 1);
    v8 = *v4;
    sub_1C3573E48(v6, v7);
    result = sub_1C35ABC84(v6, v7, (void (*)(_BYTE *, uint64_t, uint64_t))v5, sub_1C35ABE0C);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_BYTE *)(v2[7] + result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4 += 24;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1C35AB21C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E70);
  v2 = (_QWORD *)sub_1C35B6F00();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  v5 = MEMORY[0x1E0DEA758];
  while (1)
  {
    v6 = *(v4 - 2);
    v7 = *(v4 - 1);
    v8 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1C35ABC84(v6, v7, (void (*)(_BYTE *, uint64_t, uint64_t))v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1C35ABD2C);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1C35AB35C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9CC8);
  v2 = sub_1C35B6F00();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1C35ADCDC(v6, (uint64_t)v15, &qword_1EF8D9F70);
    result = sub_1C35ABCFC((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)sub_1C3573DC0(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1C35AB49C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9F80);
  v2 = (_QWORD *)sub_1C35B6F00();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v7 = *(v4 - 1);
    v8 = *v4;
    swift_bridgeObjectRetain();
    sub_1C3573E48(v7, v8);
    result = sub_1C35ABC84(v5, v6, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0DEA758], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1C35ABD2C);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (uint64_t *)(v2[7] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1C35AB5E4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9E88);
  v2 = (_QWORD *)sub_1C35B6F00();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  v5 = MEMORY[0x1E0DEA758];
  while (1)
  {
    v6 = *(v4 - 2);
    v7 = *(v4 - 1);
    v8 = *v4;
    swift_retain();
    swift_bridgeObjectRetain();
    result = sub_1C35ABC84(v6, v7, (void (*)(_BYTE *, uint64_t, uint64_t))v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1C35ABD2C);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1C35AB724(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9F58);
  v2 = (_QWORD *)sub_1C35B6F00();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v7 = *(v4 - 1);
    v8 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1C35ABC84(v5, v6, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0DEA758], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1C35ABD2C);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1C35AB868()
{
  return 0;
}

uint64_t sub_1C35AB870()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v14 = sub_1C35B6B94();
  v0 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1C35B6B7C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1C35B6B88();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1C35B6B70();
  __swift_allocate_value_buffer(v11, qword_1EF8D9F10);
  __swift_project_value_buffer(v11, (uint64_t)qword_1EF8D9F10);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0CA95F0], v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0CA95D0], v3);
  (*(void (**)(char *, _QWORD, uint64_t))(v0 + 104))(v2, *MEMORY[0x1E0CA9608], v14);
  return sub_1C35B6B64();
}

uint64_t sub_1C35AB9EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1C3577AE4(a1, a2, a3);
}

id sub_1C35ABB98()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OpaqueDataService();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for OpaqueDataService()
{
  return objc_opt_self();
}

_BYTE *sub_1C35ABBE8@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_1C35AC960(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_1C35ACA20((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_1C35ACA98((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1C35ABC5C(uint64_t a1, uint64_t a2)
{
  return sub_1C35ABC84(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0DEA758], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1C35ABD2C);
}

uint64_t sub_1C35ABC70(uint64_t a1, uint64_t a2)
{
  return sub_1C35ABC84(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], sub_1C35ABE0C);
}

uint64_t sub_1C35ABC84(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  _BYTE v10[72];

  sub_1C35B6FB4();
  a3(v10, a1, a2);
  v7 = sub_1C35B6FD8();
  return a4(a1, a2, v7);
}

unint64_t sub_1C35ABCFC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1C35B6DD4();
  return sub_1C35AC79C(a1, v2);
}

unint64_t sub_1C35ABD2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1C35B6F48() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1C35B6F48() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1C35ABE0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X8 }
  return a3 & ~v4;
}

unint64_t sub_1C35AC79C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1C35ADCA0(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x1C3BD2D8C](v9, a1);
      sub_1C35AA9CC((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_1C35AC860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C35AC88C(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], &qword_1EF8D9B30, MEMORY[0x1E0CA9930]);
}

uint64_t sub_1C35AC88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t result;

  result = sub_1C35B693C();
  if (!result || (result = sub_1C35B6954(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1C35B6948();
      a5(0);
      sub_1C3574134(a6, a5, a7);
      return sub_1C35B6AEC();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1C35AC960(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_1C35ACA20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_1C35B696C();
  swift_allocObject();
  result = sub_1C35B6930();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1C35B69FC();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_1C35ACA98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_1C35B696C();
  swift_allocObject();
  result = sub_1C35B6930();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1C35ACB18@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  _QWORD v31[4];
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v50 = a3;
  v46 = a5;
  v47 = a6;
  v48 = a1;
  v49 = a2;
  v44 = a8;
  v53 = *MEMORY[0x1E0C80C00];
  v33 = sub_1C35B6C00();
  v31[1] = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v34 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_1C35B6B4C();
  v31[3] = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v31[2] = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1C35B6BF4();
  v35 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v39 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1C35B6B34();
  v37 = *(_QWORD *)(v14 - 8);
  v38 = v14;
  MEMORY[0x1E0C80A78](v14);
  v36 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1C35B6BE8();
  v40 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v17 = sub_1C35B6B1C();
  v42 = *(_QWORD *)(v17 - 8);
  v43 = v17;
  MEMORY[0x1E0C80A78](v17);
  v41 = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1C35B6B7C();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)v31 - v24;
  v45 = a7;
  sub_1C35B6B58();
  v26 = (*(uint64_t (**)(char *, uint64_t))(v20 + 88))(v25, v19);
  if (v26 == *MEMORY[0x1E0CA95D0])
  {
    sub_1C3574134(&qword_1EF8D9B30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
    sub_1C35B6B04();
    __asm { BR              X10 }
  }
  if (v26 == *MEMORY[0x1E0CA95D8])
  {
    sub_1C3574134(&qword_1EF8D9F68, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958], MEMORY[0x1E0CA9950]);
    sub_1C35B6B04();
    __asm { BR              X10 }
  }
  if (v26 == *MEMORY[0x1E0CA95E0])
  {
    sub_1C3574134(&qword_1EF8D9F60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9988], MEMORY[0x1E0CA9978]);
    sub_1C35B6B04();
    __asm { BR              X10 }
  }
  sub_1C35782A0();
  v51 = 0;
  v52 = 0xE000000000000000;
  sub_1C35B6C9C();
  v27 = v45;
  sub_1C35B6B58();
  sub_1C35B6EAC();
  v28 = *(void (**)(char *, uint64_t))(v20 + 8);
  v28(v23, v19);
  sub_1C3577C3C(v51, v52, 8, 0);
  swift_willThrow();
  sub_1C3573D7C(v46, v47);
  sub_1C3573D7C(v50, a4);
  sub_1C3573D7C(v48, v49);
  v29 = sub_1C35B6B70();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v27, v29);
  return ((uint64_t (*)(char *, uint64_t))v28)(v25, v19);
}

void *sub_1C35AD66C(void *a1, unint64_t a2, void *a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(unint64_t, uint64_t, void *);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t inited;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  char *v60;
  __int128 v61;
  id v62;
  unint64_t v63;
  uint64_t v64[8];

  v54 = a1;
  v55 = a2;
  v64[6] = *MEMORY[0x1E0C80C00];
  v6 = sub_1C35B6B70();
  v58 = *(_QWORD *)(v6 - 8);
  v59 = (void *)v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v53 = (unint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v57 = (unint64_t)&v47 - v9;
  v56 = sub_1C35B6BC4();
  v10 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1C35B6BDC();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v47 - v18;
  v62 = a3;
  v63 = (unint64_t)a4;
  sub_1C3573E48((uint64_t)a3, (unint64_t)a4);
  v20 = v60;
  sub_1C35B6BD0();
  if (!v20)
  {
    v48 = (unint64_t)a4;
    v49 = (uint64_t)a3;
    v52 = 0;
    v60 = v12;
    v50 = v10;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
    v51 = v19;
    if (qword_1EF8D99F8 != -1)
      swift_once();
    a4 = v59;
    v21 = __swift_project_value_buffer((uint64_t)v59, (uint64_t)qword_1EF8D9F10);
    v22 = *(void (**)(unint64_t, uint64_t, void *))(v58 + 16);
    v22(v57, v21, a4);
    v23 = v52;
    sub_1C35B6BA0();
    if (v23)
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v51, v13);
    }
    else
    {
      v57 = v21;
      v58 = v14;
      v24 = sub_1C35B6BAC();
      v26 = v25;
      v62 = v54;
      v63 = v55;
      v61 = xmmword_1C35BB2D0;
      sub_1C3577BAC();
      v27 = sub_1C35B6BB8();
      v30 = v29;
      v31 = v27;
      v22(v53, v57, v59);
      v32 = v48;
      sub_1C3573E48(v49, v48);
      sub_1C3573E48(v31, v30);
      sub_1C3573E48(v24, v26);
      sub_1C35ACB18(v31, v30, v49, v32, v24, v26, v53, (uint64_t)v64);
      v33 = v26;
      v34 = v56;
      v35 = v24;
      v36 = v31;
      v55 = v30;
      v37 = v35;
      v57 = v33;
      v59 = (void *)v13;
      v38 = (void *)objc_opt_self();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9F50);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C35BBB70;
      *(_QWORD *)(inited + 32) = 0x6E6F6973726576;
      *(_QWORD *)(inited + 40) = 0xE700000000000000;
      *(_QWORD *)(inited + 48) = 1162563656;
      *(_QWORD *)(inited + 56) = 0xE400000000000000;
      strcpy((char *)(inited + 64), "publicKeyHash");
      *(_WORD *)(inited + 78) = -4864;
      *(_QWORD *)(inited + 80) = sub_1C35B6A50();
      *(_QWORD *)(inited + 88) = v40;
      *(_QWORD *)(inited + 96) = 0xD000000000000012;
      *(_QWORD *)(inited + 104) = 0x80000001C35C5E60;
      *(_QWORD *)(inited + 112) = sub_1C35B6A50();
      *(_QWORD *)(inited + 120) = v41;
      *(_QWORD *)(inited + 128) = 1635017060;
      *(_QWORD *)(inited + 136) = 0xE400000000000000;
      *(_QWORD *)(inited + 144) = sub_1C35B6A50();
      *(_QWORD *)(inited + 152) = v42;
      sub_1C35AB724(inited);
      v43 = (void *)sub_1C35B6C0C();
      swift_bridgeObjectRelease();
      v62 = 0;
      v44 = objc_msgSend(v38, sel_dataWithJSONObject_options_error_, v43, 2, &v62);

      v45 = v62;
      v46 = v58;
      if (v44)
      {
        a4 = (void *)sub_1C35B6A5C();
        sub_1C35ADC44(v64);

      }
      else
      {
        a4 = v45;
        sub_1C35B69C0();

        swift_willThrow();
        sub_1C35ADC44(v64);
      }
      sub_1C3573D7C(v37, v57);
      sub_1C3573D7C(v36, v55);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v60, v34);
      (*(void (**)(char *, void *))(v46 + 8))(v51, v59);
    }
  }
  return a4;
}

uint64_t *sub_1C35ADC44(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  sub_1C3573D7C(*a1, a1[1]);
  sub_1C3573D7C(v2, v3);
  sub_1C3573D7C(v4, v5);
  return a1;
}

uint64_t sub_1C35ADCA0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1C35ADCDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1C35ADD20(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_1C35ADD68(unsigned __int8 a1, uint64_t a2)
{
  unsigned __int8 v2;

  if ((a2 & 0xFF000000000000) != 0)
    v2 = a1;
  else
    v2 = 0;
  return v2 | (((a2 & 0xFF000000000000) == 0) << 8);
}

uint64_t sub_1C35ADE68@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  swift_getObjectType();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v2 = sub_1C35B6E28();
  swift_getObjectType();
  result = sub_1C35B6E28();
  if (v2 == result)
  {
    v4 = sub_1C35B6E34();
    swift_unknownObjectRelease();
    if ((v4 & 1) != 0)
    {
      result = swift_unknownObjectRelease();
      a1[1] = 0u;
      a1[2] = 0u;
      *a1 = 0u;
    }
    else
    {
      sub_1C35B6EB8();
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C35ADF70(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD v17[2];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];
  uint64_t v22;
  uint64_t v23;

  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  swift_getDynamicType();
  (*(void (**)(uint64_t *__return_ptr))(a1[4] + 8))(&v11);
  v3 = v13;
  v4 = v14;
  v5 = v15;
  sub_1C35B28CC((uint64_t)a1, v11, v12, v13, v14, v15);
  v7 = v6;
  sub_1C35B3510(v3, v4, v5);
  if (v1)
  {
    v23 = v16;
    return sub_1C35B3534((uint64_t)&v23);
  }
  else
  {
    v22 = v16;
    sub_1C35B3534((uint64_t)&v22);
    v10[0] = sub_1C35806B0(v7);
    v10[1] = v8;
    __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
    swift_getDynamicType();
    (*(void (**)(_QWORD *__return_ptr))(a1[4] + 8))(v17);
    sub_1C35B007C((uint64_t)a1, (uint64_t)v17, (uint64_t)v10);
    sub_1C35B355C(&v18, (uint64_t)v21);
    sub_1C35B3574((uint64_t)v21);
    v20 = v19;
    sub_1C35B3534((uint64_t)&v20);
    return v10[0];
  }
}

_QWORD *sub_1C35AE0EC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1C35AE0F8(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1C35AE100@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1C35AE114@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1C35AE128@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1C35AE13C(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1C35AE16C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1C35AE198@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1C35AE1BC(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1C35AE1D0(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_1C35AE1E4(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1C35AE1F8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1C35AE20C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1C35AE220(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1C35AE234(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1C35AE248()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1C35AE258()
{
  return sub_1C35B6DC8();
}

_QWORD *sub_1C35AE270(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_1C35AE284@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_1C35B4C5C(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void sub_1C35AE2C0(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = -64;
  *(_QWORD *)(a1 + 40) = MEMORY[0x1E0DEE9D8];
}

unint64_t sub_1C35AE2E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  __int128 v55;
  _QWORD v57[2];
  unsigned __int8 v58;
  uint64_t v59;
  unsigned __int8 v60;

  sub_1C35B355C((__int128 *)(a2 + 16), (uint64_t)&v47);
  sub_1C35B355C(&v47, (uint64_t)&v59);
  if (v60 > 0x3Fu)
  {
    sub_1C35B355C(&v47, (uint64_t)v57);
    if (v58 == 192 && !v57[1] && v57[0] == 3)
    {
      v7 = sub_1C35B1E9C(a1);
      if (!v2)
      {
        v10 = v8;
        v11 = v9;
        if ((*(_BYTE *)(a2 + 8) & 1) == 0 && *(_QWORD *)a2 != v7)
          __asm { BR              X11 }
        v40 = swift_allocObject();
        *(_QWORD *)(v40 + 16) = v10;
        *(_QWORD *)(v40 + 24) = v11;
        return v40 | 0x2000000000000000;
      }
    }
    else
    {
      v12 = sub_1C35B1E9C(a1);
      if (!v2)
      {
        if ((*(_BYTE *)(a2 + 8) & 1) == 0 && *(_QWORD *)a2 != v12)
          __asm { BR              X11 }
        v34 = *(_QWORD *)(a2 + 40);
        v35 = *(_QWORD *)(v34 + 16);
        if (v35)
        {
          v36 = (_BYTE *)(v34 + 72);
          v37 = v13 >> 62;
          do
          {
            if ((*(v36 - 32) & 1) == 0)
              __asm { BR              X5 }
            if ((*(v36 - 16) & 1) == 0)
              __asm { BR              X3 }
            if ((*v36 & 1) == 0)
              __asm { BR              X1 }
            v36 += 48;
            --v35;
          }
          while (v35);
        }
        sub_1C35B355C(&v47, (uint64_t)&v55);
        __asm { BR              X12 }
      }
    }
  }
  else
  {
    v5 = v59;
    sub_1C35B3624((uint64_t)&v47);
    sub_1C35B153C((uint64_t)a1);
    if (v2)
    {
      sub_1C35B3574((uint64_t)&v47);
    }
    else
    {
      v42 = a1;
      v14 = MEMORY[0x1E0DEE9D8];
      a1 = *(uint64_t **)(v5 + 16);
      if (a1)
      {
        v15 = v5 + 48;
        v43 = v6;
        while ((*(_BYTE *)(v15 + 8) & 1) == 0)
        {
          if (*(_QWORD *)v15 == v6)
          {
            v19 = *(_QWORD *)(v15 - 8);
            v44 = *(_QWORD *)(v15 - 16);
            v45 = *(_BYTE *)(v15 + 9);
            v20 = *(_QWORD *)(v15 + 16);
            v21 = *(_QWORD *)(v15 + 24);
            v22 = *(_BYTE *)(v15 + 32);
            v23 = *(_QWORD *)(v15 + 40);
            swift_bridgeObjectRetain();
            sub_1C35B35BC(v20, v21, v22);
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              sub_1C359921C(0, *(_QWORD *)(v14 + 16) + 1, 1);
            v17 = *(_QWORD *)(v14 + 16);
            v16 = *(_QWORD *)(v14 + 24);
            if (v17 >= v16 >> 1)
              sub_1C359921C(v16 > 1, v17 + 1, 1);
            *(_QWORD *)(v14 + 16) = v17 + 1;
            v18 = v14 + (v17 << 6);
            v6 = v43;
            *(_QWORD *)(v18 + 32) = v44;
            *(_QWORD *)(v18 + 40) = v19;
            *(_QWORD *)(v18 + 48) = v43;
            *(_BYTE *)(v18 + 56) = 0;
            *(_BYTE *)(v18 + 57) = v45;
            *(_QWORD *)(v18 + 64) = v20;
            *(_QWORD *)(v18 + 72) = v21;
            *(_BYTE *)(v18 + 80) = v22;
            *(_QWORD *)(v18 + 88) = v23;
          }
          v15 += 64;
          a1 = (uint64_t *)((char *)a1 - 1);
          if (!a1)
            goto LABEL_25;
        }
        sub_1C358462C();
        swift_allocError();
        *(_QWORD *)(v38 + 8) = 0;
        *(_QWORD *)(v38 + 16) = 0;
        *(_QWORD *)v38 = 5;
        *(_BYTE *)(v38 + 24) = 3;
        swift_willThrow();
        sub_1C35B3574((uint64_t)&v47);
        swift_release();
      }
      else
      {
LABEL_25:
        sub_1C35B3574((uint64_t)&v47);
        if (*(_QWORD *)(v14 + 16))
        {
          v24 = *(_QWORD *)(v14 + 40);
          v46 = *(_QWORD *)(v14 + 32);
          v25 = *(_QWORD *)(v14 + 48);
          v26 = *(_BYTE *)(v14 + 56);
          v27 = *(_BYTE *)(v14 + 57);
          v28 = *(_QWORD *)(v14 + 64);
          v29 = *(_QWORD *)(v14 + 72);
          v30 = *(_QWORD *)(v14 + 88);
          v31 = *(_BYTE *)(v14 + 80);
          swift_bridgeObjectRetain();
          sub_1C35B35BC(v28, v29, v31);
          swift_bridgeObjectRetain();
          swift_release();
          v48 = v25;
          v49 = v26;
          v50 = v27;
          v51 = v28;
          v52 = v29;
          v53 = v31;
          v54 = v30;
          v32 = swift_allocObject();
          swift_bridgeObjectRetain();
          sub_1C35B35BC(v28, v29, v31);
          swift_bridgeObjectRetain();
          sub_1C35B3510(v28, v29, v31);
          swift_bridgeObjectRelease();
          *(_QWORD *)(v32 + 16) = v46;
          *(_QWORD *)(v32 + 24) = v24;
          v33 = sub_1C35AE2E8(v42, &v48);
          swift_bridgeObjectRelease();
          sub_1C35B3510(v28, v29, v31);
          swift_bridgeObjectRelease();
          *(_QWORD *)(v32 + 32) = v33;
          return v32 | 0xA000000000000000;
        }
        else
        {
          swift_release();
          sub_1C358462C();
          swift_allocError();
          *(_QWORD *)(v39 + 8) = 0;
          *(_QWORD *)(v39 + 16) = 0;
          *(_QWORD *)v39 = 2;
          *(_BYTE *)(v39 + 24) = 3;
          swift_willThrow();
        }
      }
    }
  }
  return (unint64_t)a1;
}

void sub_1C35AEDD0(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  sub_1C358462C();
  swift_allocError();
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = v2;
  *(_QWORD *)(v4 + 16) = v3;
  *(_BYTE *)(v4 + 24) = 0;
  swift_willThrow();
  JUMPOUT(0x1C35AEE38);
}

unint64_t sub_1C35AEF38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v6;

  v6 = sub_1C35AB5E4(MEMORY[0x1E0DEE9D8]);
  v4 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v4)
    __asm { BR              X11 }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1C35AF58C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 16);
  v31 = v3;
  if (!v3)
  {
    v21 = a1;
    goto LABEL_14;
  }
  v4 = a2 + 32;
  swift_bridgeObjectRetain();
  v29 = 0;
  v5 = 0;
  v25 = v2 + 32;
  while (1)
  {
    v6 = v4 + (v5 << 6);
    v30 = *(_QWORD *)(v6 + 16);
    v8 = *(_QWORD *)(v6 + 32);
    v7 = *(_QWORD *)(v6 + 40);
    v9 = *(_BYTE *)(v6 + 48);
    v10 = *(_BYTE *)(v6 + 24);
    swift_bridgeObjectRetain();
    sub_1C35B35BC(v8, v7, v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1C35B35BC(v8, v7, v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1C35B3510(v8, v7, v9);
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      break;
    v11 = v5 + 1;
    if (v11 == v3)
    {
      swift_bridgeObjectRelease();
      sub_1C35B3510(v8, v7, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v21 = a1;
      if (v3 > 0x40)
      {
        sub_1C358462C();
        swift_allocError();
        *(_QWORD *)(v24 + 8) = 0;
        *(_QWORD *)(v24 + 16) = 0;
        *(_QWORD *)v24 = 2;
        *(_BYTE *)(v24 + 24) = 3;
        return swift_willThrow();
      }
LABEL_14:
      sub_1C35AB5E4(MEMORY[0x1E0DEE9D8]);
      __asm { BR              X11 }
    }
    v28 = v9;
    swift_bridgeObjectRetain();
    v12 = v11;
    v13 = v29;
    v27 = v11;
    do
    {
      if (v12 >= v3)
      {
        __break(1u);
        JUMPOUT(0x1C35AFF7CLL);
      }
      v14 = v2 + v13;
      v15 = *(_QWORD *)(v2 + v13 + 112);
      v17 = *(_QWORD *)(v14 + 128);
      v16 = *(_QWORD *)(v14 + 136);
      v18 = *(_BYTE *)(v14 + 144);
      v19 = *(_BYTE *)(v14 + 120);
      swift_bridgeObjectRetain();
      sub_1C35B35BC(v17, v16, v18);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1C35B35BC(v17, v16, v18);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_1C35B3510(v17, v16, v18);
      swift_bridgeObjectRelease();
      if ((v19 & 1) != 0 || v30 == v15)
      {
        swift_bridgeObjectRelease();
        sub_1C358462C();
        swift_allocError();
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)v20 = 2;
        *(_BYTE *)(v20 + 24) = 3;
        swift_willThrow();
        swift_bridgeObjectRelease();
        sub_1C35B3510(v17, v16, v18);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1C35B3510(v8, v7, v28);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      ++v12;
      swift_bridgeObjectRelease();
      sub_1C35B3510(v17, v16, v18);
      swift_bridgeObjectRelease();
      v13 += 64;
      v3 = v31;
      v2 = a2;
    }
    while (v31 != v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1C35B3510(v8, v7, v28);
    swift_bridgeObjectRelease();
    v29 += 64;
    v4 = v25;
    v5 = v27;
  }
  swift_bridgeObjectRelease();
  sub_1C358462C();
  swift_allocError();
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)v23 = 2;
  *(_BYTE *)(v23 + 24) = 3;
  swift_willThrow();
  swift_bridgeObjectRelease();
  sub_1C35B3510(v8, v7, v9);
  return swift_bridgeObjectRelease();
}

void sub_1C35B0054(uint64_t a1, uint64_t a2)
{
  sub_1C35B28CC(a1, *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_BYTE *)(a2 + 32));
}

uint64_t sub_1C35B007C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  uint64_t v16[9];
  uint64_t v17;
  char v18;
  _BYTE v19[24];

  v5 = sub_1C35B6FFC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v14 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C35B35A4((uint64_t *)a2, (uint64_t)v16);
  sub_1C35B35A4(v16, (uint64_t)&v17);
  if ((v18 & 1) == 0)
  {
    v12 = v5;
    v13 = a3;
    v11 = v6;
LABEL_5:
    __asm { BR              X10 }
  }
  sub_1C35B355C((__int128 *)(a2 + 16), (uint64_t)&v15);
  sub_1C35B355C(&v15, (uint64_t)v19);
  if (v19[16] < 0x40u)
  {
    v12 = v5;
    v13 = a3;
    v11 = v6;
    goto LABEL_5;
  }
  sub_1C358462C();
  swift_allocError();
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)v8 = 2;
  *(_BYTE *)(v8 + 24) = 3;
  return swift_willThrow();
}

void sub_1C35B0CE8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1C358462C();
  swift_allocError();
  *v2 = v0;
  v2[1] = v1;
  v2[2] = 0;
  JUMPOUT(0x1C35B0D6CLL);
}

void sub_1C35B0D28()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  if ((v0 & 1) != 0)
  {
    __break(1u);
    JUMPOUT(0x1C35B0D34);
  }
  v3 = sub_1C358462C();
  swift_allocError(&type metadata for ASN1Error, v3, 0, 0);
  *v4 = v1;
  v4[1] = v2;
  v4[2] = 0;
  JUMPOUT(0x1C35B0D6CLL);
}

uint64_t sub_1C35B0E28(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[40];

  result = sub_1C35B1128(a1, a3);
  if (!v4)
  {
    v10 = result;
    sub_1C35B36DC(a2);
    sub_1C35B13A0(v10, a4);
    v11 = a1[3];
    v12 = a1[4];
    __swift_project_boxed_opaque_existential_1Tm(a1, v11);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
    {
      v15 = v13 + 32;
      do
      {
        sub_1C35B35E0(v15, (uint64_t)v16);
        sub_1C35B007C(v16, a3, a4);
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v16);
        v15 += 40;
        --v14;
      }
      while (v14);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1C35B0F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned __int128 *v8;
  unint64_t v9;
  uint64_t result;
  uint64_t *v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14[2];
  uint64_t v15;
  __int128 v16[2];
  unsigned __int128 v17;
  __int128 v18;
  uint64_t v19;
  unsigned __int128 v20;
  _OWORD v21[2];

  v4 = sub_1C35B6FFC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C3575174(a2, (uint64_t)&v17);
  sub_1C35B6FE4();
  sub_1C35B6FF0();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v8 = &v17;
  sub_1C35ADE68(&v17);
  swift_release();
  if (!v19)
  {
    v11 = (uint64_t *)&unk_1EF8D9FA8;
    v12 = (__int128 *)&v17;
LABEL_7:
    sub_1C3577180((uint64_t)v12, v11);
    sub_1C358462C();
    swift_allocError();
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)v13 = 2;
    *(_BYTE *)(v13 + 24) = 3;
    swift_willThrow();
    return (uint64_t)v8;
  }
  v9 = *((_QWORD *)&v17 + 1);
  v8 = (unsigned __int128 *)v17;
  v20 = v17;
  sub_1C3573DC0(&v18, v21);
  v17 = __PAIR128__(v9, (unint64_t)v8);
  sub_1C3575174((uint64_t)v21, (uint64_t)&v18);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9F88);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    swift_bridgeObjectRelease();
    sub_1C3577180((uint64_t)&v20, &qword_1EF8D9FA0);
    v11 = (uint64_t *)&unk_1EF8D9FB0;
    v12 = v14;
    goto LABEL_7;
  }
  sub_1C3577168(v14, (uint64_t)v16);
  v17 = __PAIR128__(v9, (unint64_t)v8);
  result = sub_1C3575174((uint64_t)v21, (uint64_t)&v18);
  if (v9)
  {
    sub_1C3577180((uint64_t)&v20, &qword_1EF8D9FA0);
    sub_1C3577168(v16, a1);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v18);
    return (uint64_t)v8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C35B1128(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t result;
  _BYTE v19[40];
  uint64_t v20;

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1Tm(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    sub_1C3599238(0, v7, 0);
    v8 = v6 + 32;
    do
    {
      sub_1C35B35E0(v8, (uint64_t)v19);
      sub_1C35B0054((uint64_t)v19, a2);
      v10 = v9;
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v19);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_release();
        return a2;
      }
      v11 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1C3599238(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v11 = v20;
      }
      v13 = *(_QWORD *)(v11 + 16);
      v12 = *(_QWORD *)(v11 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_1C3599238(v12 > 1, v13 + 1, 1);
        v11 = v20;
      }
      *(_QWORD *)(v11 + 16) = v13 + 1;
      *(_QWORD *)(v11 + 8 * v13 + 32) = v10;
      v8 += 40;
      --v7;
    }
    while (v7);
    result = swift_bridgeObjectRelease();
    v14 = *(_QWORD *)(v11 + 16);
    if (!v14)
      goto LABEL_17;
LABEL_11:
    v15 = 0;
    a2 = 0;
    while (1)
    {
      v16 = *(_QWORD *)(v11 + 8 * v15 + 32);
      v17 = __OFADD__(a2, v16);
      a2 += v16;
      if (v17)
        break;
      if (v14 == ++v15)
      {
        swift_bridgeObjectRelease();
        return a2;
      }
    }
    __break(1u);
    return result;
  }
  result = swift_bridgeObjectRelease();
  v11 = MEMORY[0x1E0DEE9D8];
  v14 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (v14)
    goto LABEL_11;
LABEL_17:
  swift_bridgeObjectRelease();
  return 0;
}

size_t sub_1C35B12F0(size_t result, unint64_t a2)
{
  const void *v3;
  int64_t v4;
  _QWORD *v5;

  if (!result)
    return MEMORY[0x1E0DEE9D8];
  v3 = (const void *)result;
  v4 = a2 - result;
  if (a2 == result)
    return MEMORY[0x1E0DEE9D8];
  if (v4 < 1)
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (!a2)
      goto LABEL_13;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7E12A8);
    v5 = (_QWORD *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v5);
    v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2)
      goto LABEL_13;
  }
  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }
    __break(1u);
  }
LABEL_13:
  __break(1u);
  return result;
}

void sub_1C35B13A0(uint64_t a1, uint64_t a2)
{
  if (a1 > 127)
  {
    sub_1C357FD54();
    __asm { BR              X11 }
  }
  if (a1 < 0)
  {
    sub_1C35B6EC4();
    __break(1u);
  }
  else
  {
    sub_1C357FD54();
  }
}

void sub_1C35B153C(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_1C35B1598()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  if (!BYTE6(v2))
  {
LABEL_34:
    sub_1C358462C();
    swift_allocError();
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)v19 = 0;
    *(_BYTE *)(v19 + 24) = 3;
    swift_willThrow();
    return v3;
  }
  v6 = sub_1C35B6ABC();
  v3 = v6;
  if ((~v6 & 0x1E) != 0)
  {
    if ((*(_DWORD *)(v5 - 108) & 1) != 0)
      return v3;
    if (v4)
    {
      if (v4 == 1)
      {
        v9 = (int)v1 + 1;
        v10 = v1 >> 32;
      }
      else
      {
        v21 = *(_QWORD *)(v1 + 16);
        v9 = v21 + 1;
        if (__OFADD__(v21, 1))
        {
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
        v10 = *(_QWORD *)(v1 + 24);
        swift_retain();
      }
      swift_retain();
    }
    else
    {
      v10 = BYTE6(v2);
      v9 = 1;
    }
    if (v10 < v9)
      goto LABEL_62;
    goto LABEL_47;
  }
  if (!v4)
  {
    v8 = BYTE6(v2);
    v7 = 1;
    goto LABEL_13;
  }
  if (v4 == 1)
  {
    v7 = (int)v1 + 1;
    v8 = v1 >> 32;
    goto LABEL_13;
  }
  v11 = *(_QWORD *)(v1 + 16);
  v7 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_57;
  }
  v8 = *(_QWORD *)(v1 + 24);
LABEL_13:
  if (v8 < v7)
    goto LABEL_61;
  if (v7 == v8)
    goto LABEL_34;
  v26 = v1 >> 32;
  while (1)
  {
    if (v7 >= v8)
    {
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      JUMPOUT(0x1C35B1930);
    }
    if (v4)
    {
      if (v4 == 1)
      {
        if (v7 < (int)v1 || v7 >= v26)
          goto LABEL_52;
        v12 = sub_1C35B693C();
        if (!v12)
        {
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
          JUMPOUT(0x1C35B1958);
        }
        v13 = v12;
        v14 = sub_1C35B6954();
        v15 = v7 - v14;
        if (__OFSUB__(v7, v14))
          goto LABEL_54;
      }
      else
      {
        if (v7 < *(_QWORD *)(v1 + 16))
          goto LABEL_51;
        if (v7 >= *(_QWORD *)(v1 + 24))
          goto LABEL_53;
        v17 = sub_1C35B693C();
        if (!v17)
          goto LABEL_60;
        v13 = v17;
        v18 = sub_1C35B6954();
        v15 = v7 - v18;
        if (__OFSUB__(v7, v18))
          goto LABEL_55;
      }
      v16 = *(unsigned __int8 *)(v13 + v15);
    }
    else
    {
      if (v7 >= BYTE6(v2))
        goto LABEL_50;
      *(_QWORD *)(v5 - 102) = v1;
      *(_WORD *)(v5 - 94) = v2;
      *(_BYTE *)(v5 - 92) = BYTE2(v2);
      *(_BYTE *)(v5 - 91) = BYTE3(v2);
      *(_BYTE *)(v5 - 90) = BYTE4(v2);
      *(_BYTE *)(v5 - 89) = BYTE5(v2);
      v16 = *(unsigned __int8 *)(v5 - 102 + v7);
    }
    v3 = v16 | (v3 << 8);
    if ((v16 & 0x80) == 0)
      break;
    if (v8 == ++v7)
      goto LABEL_34;
  }
  if ((*(_DWORD *)(v5 - 108) & 1) == 0)
  {
    v20 = BYTE6(v2);
    if (v4)
    {
      if (v4 != 1)
      {
        v26 = *(_QWORD *)(v1 + 24);
        swift_retain();
      }
      swift_retain();
      v20 = v26;
    }
    if (v20 > v7)
    {
LABEL_47:
      v22 = sub_1C35B6A2C();
      v24 = v23;
      sub_1C3573D7C(v1, v2);
      sub_1C3573D7C(v1, v2);
      *v0 = v22;
      v0[1] = v24;
      return v3;
    }
LABEL_58:
    __break(1u);
  }
  return v3;
}

void sub_1C35B1968(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_1C35B19C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (!BYTE6(v3))
    goto LABEL_23;
  sub_1C3573E48(v2, v3);
  sub_1C35ADD20(v2, v3);
  v8 = v7;
  sub_1C3573D7C(v2, v3);
  if ((v8 & 0x100) != 0)
  {
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v4 = v8;
  if (v8 <= 0x7Fu)
  {
    if (!v5)
    {
      v10 = BYTE6(v3);
      v9 = 1;
      goto LABEL_16;
    }
    if (v5 == 1)
    {
      v9 = (int)v2 + 1;
      v10 = v2 >> 32;
LABEL_15:
      swift_retain();
LABEL_16:
      if (v10 >= v9)
      {
LABEL_72:
        v32 = sub_1C35B6A2C();
        v34 = v33;
        sub_1C3573D7C(v2, v3);
        sub_1C3573D7C(v2, v3);
        *v1 = v32;
        v1[1] = v34;
        return v4;
      }
LABEL_92:
      __break(1u);
      JUMPOUT(0x1C35B1E8CLL);
    }
    v12 = *(_QWORD *)(v2 + 16);
    v9 = v12 + 1;
    if (!__OFADD__(v12, 1))
    {
      v10 = *(_QWORD *)(v2 + 24);
      swift_retain();
      goto LABEL_15;
    }
    goto LABEL_82;
  }
  if (v5)
  {
    if (v5 == 1)
    {
      LODWORD(v11) = HIDWORD(v2) - v2;
      if (__OFSUB__(HIDWORD(v2), (_DWORD)v2))
      {
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      v11 = (int)v11;
    }
    else
    {
      v14 = *(_QWORD *)(v2 + 16);
      v13 = *(_QWORD *)(v2 + 24);
      v15 = __OFSUB__(v13, v14);
      v11 = v13 - v14;
      if (v15)
      {
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
    }
  }
  else
  {
    v11 = BYTE6(v3);
  }
  v4 = v8 & 0x7F;
  if (v11 <= v4)
  {
LABEL_23:
    sub_1C358462C();
    swift_allocError();
    v17[2] = 0;
    v18 = v17 + 3;
    *v17 = 0;
    goto LABEL_24;
  }
  if (v5)
  {
    if (v5 == 1)
      v16 = (int)v2;
    else
      v16 = *(_QWORD *)(v2 + 16);
  }
  else
  {
    v16 = 0;
  }
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    goto LABEL_81;
  }
  if (sub_1C35B6ABC())
  {
    if (v5)
    {
      if (v5 == 1)
      {
        v19 = (int)v2;
        v20 = (int)v2 + 1;
      }
      else
      {
        v19 = *(_QWORD *)(v2 + 16);
        v20 = v19 + 1;
        if (__OFADD__(v19, 1))
          goto LABEL_88;
      }
    }
    else
    {
      v20 = 1;
      v19 = 0;
    }
    v21 = v19 + 1;
    v22 = v21 + v4;
    if (!__OFADD__(v21, v4))
    {
      if (v22 >= v20)
      {
        if (v20 != v22)
        {
          v4 = 0;
          *(_QWORD *)(v6 - 120) = (int)v2;
          while (1)
          {
            if (v20 >= v22)
            {
              __break(1u);
LABEL_75:
              __break(1u);
LABEL_76:
              __break(1u);
LABEL_77:
              __break(1u);
LABEL_78:
              __break(1u);
LABEL_79:
              __break(1u);
              JUMPOUT(0x1C35B1E4CLL);
            }
            if (v5)
            {
              if (v5 == 1)
              {
                if (v20 < *(_QWORD *)(v6 - 120) || v20 >= v2 >> 32)
                  goto LABEL_77;
                v25 = sub_1C35B693C();
                if (!v25)
                  goto LABEL_90;
                v26 = v25;
                v27 = sub_1C35B6954();
                v28 = v20 - v27;
                if (__OFSUB__(v20, v27))
                  goto LABEL_79;
              }
              else
              {
                if (v20 < *(_QWORD *)(v2 + 16))
                  goto LABEL_76;
                if (v20 >= *(_QWORD *)(v2 + 24))
                  goto LABEL_78;
                v29 = sub_1C35B693C();
                if (!v29)
                  goto LABEL_91;
                v26 = v29;
                v30 = sub_1C35B6954();
                v28 = v20 - v30;
                if (__OFSUB__(v20, v30))
                {
                  __break(1u);
                  goto LABEL_62;
                }
              }
              v24 = *(unsigned __int8 *)(v26 + v28);
            }
            else
            {
              if (v20 >= BYTE6(v3))
                goto LABEL_75;
              *(_QWORD *)(v6 - 110) = v2;
              *(_WORD *)(v6 - 102) = v3;
              *(_BYTE *)(v6 - 100) = BYTE2(v3);
              *(_BYTE *)(v6 - 99) = BYTE3(v3);
              *(_BYTE *)(v6 - 98) = BYTE4(v3);
              *(_BYTE *)(v6 - 97) = BYTE5(v3);
              v24 = *(unsigned __int8 *)(v6 - 110 + v20);
            }
            ++v20;
            v4 = v24 | (v4 << 8);
            if (v22 == v20)
              goto LABEL_39;
          }
        }
        v4 = 0;
LABEL_39:
        v0 = (v8 & 0x7F) + 1;
        if (v5)
        {
          if (v5 == 1)
          {
            v23 = (int)v2;
          }
          else
          {
            v23 = *(_QWORD *)(v2 + 16);
            swift_retain();
          }
          swift_retain();
        }
        else
        {
LABEL_62:
          v23 = v5;
        }
        if (!__OFADD__(v23, v0))
        {
          if (v5)
          {
            if (v5 == 1)
              v31 = v2 >> 32;
            else
              v31 = *(_QWORD *)(v2 + 24);
          }
          else
          {
            v31 = BYTE6(v3);
          }
          if (v31 >= v23 + v0)
            goto LABEL_72;
          goto LABEL_87;
        }
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
      }
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  sub_1C358462C();
  swift_allocError();
  v17[2] = 0;
  v18 = v17 + 3;
  *v17 = 8;
LABEL_24:
  v17[1] = 0;
  *v18 = 3;
  swift_willThrow();
  return v4;
}

uint64_t sub_1C35B1E9C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v4 = *a1;
  v5 = a1[1];
  sub_1C3573E48(*a1, v5);
  sub_1C35B153C((uint64_t)a1);
  if (!v1)
  {
    sub_1C35B1968((uint64_t)a1);
    __asm { BR              X9 }
  }
  sub_1C3573D7C(v4, v5);
  return v2;
}

void sub_1C35B2090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (BYTE6(v7) >= v6)
  {
    v12 = sub_1C35B6A2C();
    v9 = v7;
    v11 = v10;
    sub_1C3573D7C(a3, v9);
    sub_1C3573D7C(v3, v4);
    *v5 = v12;
    v5[1] = v11;
    JUMPOUT(0x1C35B1FF4);
  }
  __break(1u);
  JUMPOUT(0x1C35B20F4);
}

void sub_1C35B212C(uint64_t a1, uint64_t a2)
{
  sub_1C35B6AA4();
  MEMORY[0x1E0C80A78]();
  __asm { BR              X9 }
}

unint64_t sub_1C35B21A4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int16 v12;
  __int16 v13;
  __int16 v14;

  if (!BYTE6(v2))
    goto LABEL_9;
  if (v5)
  {
    if (v5 == 1)
    {
      LODWORD(v6) = HIDWORD(v3) - v3;
      if (!__OFSUB__(HIDWORD(v3), (_DWORD)v3))
      {
        v6 = (int)v6;
        goto LABEL_8;
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    v8 = *(_QWORD *)(v3 + 16);
    v7 = *(_QWORD *)(v3 + 24);
    v9 = __OFSUB__(v7, v8);
    v6 = v7 - v8;
    if (v9)
      goto LABEL_22;
  }
  else
  {
    v6 = BYTE6(v2);
  }
LABEL_8:
  if (v6 > 8)
  {
LABEL_9:
    sub_1C358462C();
    swift_allocError();
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)v10 = 0;
    *(_BYTE *)(v10 + 24) = 3;
    swift_willThrow();
    return v2;
  }
  sub_1C3573E48(v3, v2);
  sub_1C35ADD20(v3, v2);
  v13 = v12;
  sub_1C3573D7C(v3, v2);
  if ((v13 & 0x100) != 0)
    goto LABEL_23;
  if ((v13 & 0x80) != 0)
  {
LABEL_24:
    sub_1C35B6ED0();
    __break(1u);
    JUMPOUT(0x1C35B2394);
  }
  if (v5)
    sub_1C3573E48(v3, v2);
  sub_1C35B6AB0();
  v14 = sub_1C35B6A98();
  if ((v14 & 0x100) != 0)
    goto LABEL_20;
  v2 = 0;
  do
  {
    v2 = v14 | (v2 << 8);
    v14 = sub_1C35B6A98();
  }
  while ((v14 & 0x100) == 0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v1);
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_20:
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v1);
    return 0;
  }
  return v2;
}

void sub_1C35B23A4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1C35B23DC()
{
  unint64_t v0;
  uint64_t v1;
  __int16 v2;
  __int16 v3;
  char v4;
  uint64_t v5;

  if (BYTE6(v0) != 1)
    goto LABEL_6;
  sub_1C3573E48(v1, v0);
  sub_1C35ADD20(v1, v0);
  v3 = v2;
  sub_1C3573D7C(v1, v0);
  if ((v3 & 0x100) != 0)
    goto LABEL_6;
  v4 = v3;
  if ((_BYTE)v3)
  {
    if (v3 == 255)
    {
      v4 = 1;
      return v4 & 1;
    }
LABEL_6:
    sub_1C358462C();
    swift_allocError();
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 7;
    *(_BYTE *)(v5 + 24) = 3;
    swift_willThrow();
  }
  return v4 & 1;
}

uint64_t sub_1C35B24BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v3 = 0;
  v4 = *(_QWORD *)(result + 16);
  v5 = result + 88;
  v22 = result + 88;
  v23 = MEMORY[0x1E0DEE9D8];
  v29 = v4;
LABEL_2:
  if (v3 <= v4)
    v6 = v4;
  else
    v6 = v3;
  v30 = v6 + 1;
  v7 = (_QWORD *)(v5 + (v3 << 6));
  while (1)
  {
    if (v4 == v3)
      return v23;
    v8 = v3++;
    if (v30 == v3)
      break;
    v10 = *(v7 - 7);
    v9 = *(v7 - 6);
    v28 = *(v7 - 5);
    v26 = *((_BYTE *)v7 - 31);
    v27 = *((_BYTE *)v7 - 32);
    v11 = *(v7 - 3);
    v12 = *(v7 - 2);
    v13 = *((_BYTE *)v7 - 8);
    v14 = *v7;
    if (v10 == a2 && v9 == a3)
    {
      v10 = a2;
      v9 = a3;
LABEL_15:
      swift_bridgeObjectRetain();
      sub_1C35B35BC(v11, v12, v13);
      swift_bridgeObjectRetain();
      v16 = v23;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = sub_1C359921C(0, *(_QWORD *)(v23 + 16) + 1, 1);
        v16 = v23;
      }
      v18 = *(_QWORD *)(v16 + 16);
      v17 = *(_QWORD *)(v16 + 24);
      v19 = v18 + 1;
      v4 = v29;
      if (v18 >= v17 >> 1)
      {
        v21 = v18 + 1;
        v31 = *(_QWORD *)(v16 + 16);
        result = sub_1C359921C(v17 > 1, v18 + 1, 1);
        v19 = v21;
        v4 = v29;
        v18 = v31;
        v16 = v23;
      }
      v3 = v8 + 1;
      *(_QWORD *)(v16 + 16) = v19;
      v23 = v16;
      v20 = v16 + (v18 << 6);
      *(_QWORD *)(v20 + 32) = v10;
      *(_QWORD *)(v20 + 40) = v9;
      *(_QWORD *)(v20 + 48) = v28;
      *(_BYTE *)(v20 + 56) = v27;
      *(_BYTE *)(v20 + 57) = v26;
      *(_QWORD *)(v20 + 64) = v11;
      *(_QWORD *)(v20 + 72) = v12;
      *(_BYTE *)(v20 + 80) = v13;
      *(_QWORD *)(v20 + 88) = v14;
      v5 = v22;
      goto LABEL_2;
    }
    v7 += 8;
    result = sub_1C35B6F48();
    v4 = v29;
    if ((result & 1) != 0)
      goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C35B268C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  char v13;
  char v14;
  char v15;
  unint64_t __src;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((a1 & 0x8000000000000000) != 0)
  {
    sub_1C35B6ED0();
    __break(1u);
    JUMPOUT(0x1C35B28BCLL);
  }
  if (a1)
  {
    __src = bswap64(a1);
    v1 = sub_1C35AC960(&__src, &v17);
    v3 = v2;
    v4 = 0;
    v5 = BYTE6(v2);
    if (v5)
    {
      while (1)
      {
        v10 = v1;
        v11 = v3;
        v12 = BYTE2(v3);
        v13 = BYTE3(v3);
        v14 = BYTE4(v3);
        v15 = BYTE5(v3);
        if (*((_BYTE *)&v10 + v4))
          break;
        if (v5 == ++v4)
          goto LABEL_9;
      }
      if (v5 < v4)
      {
        __break(1u);
        JUMPOUT(0x1C35B285CLL);
      }
    }
LABEL_9:
    v7 = v3 & 0xFFFFFFFFFFFFFFLL;
    sub_1C35B6A2C();
    v9 = v8;
    sub_1C3573D7C(v1, v7);
    __asm { BR              X10 }
  }
  return 1;
}

void sub_1C35B28CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[32];

  v7 = sub_1C35B6FFC();
  MEMORY[0x1E0C80A78](v7);
  v9[11] = (char *)v9 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __asm { BR              X10 }
}

uint64_t sub_1C35B2968()
{
  _QWORD *v0;
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  v6 = v1;
  v7 = v0[3];
  v8 = (uint64_t)__swift_project_boxed_opaque_existential_1Tm(v0, v7);
  *(_QWORD *)(v5 - 192) = v7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v5 - 216));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(boxed_opaque_existential_1, v8, v7);
  swift_bridgeObjectRetain();
  v10 = sub_1C35B0F18(v5 - 264, v5 - 216);
  if (v3)
  {
    sub_1C35B3510(v4, v6, v2);
    v12 = v5 - 216;
  }
  else
  {
    v13 = v10;
    v14 = v11;
    __swift_destroy_boxed_opaque_existential_0Tm(v5 - 216);
    v8 = sub_1C35B24BC(v4, v13, v14);
    swift_bridgeObjectRelease();
    sub_1C35B3510(v4, v6, v2);
    if (*(_QWORD *)(v8 + 16))
    {
      v15 = *(_QWORD *)(v8 + 48);
      v16 = *(unsigned __int8 *)(v8 + 56);
      v17 = *(_QWORD *)(v8 + 64);
      v18 = *(_QWORD *)(v8 + 72);
      v19 = *(_BYTE *)(v8 + 80);
      swift_bridgeObjectRetain();
      sub_1C35B35BC(v17, v18, v19);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_1C35B28CC(v5 - 264, v15, v16, v17, v18, v19);
      v8 = v20;
      swift_bridgeObjectRelease();
      sub_1C35B3510(v17, v18, v19);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0Tm(v5 - 264);
      return v8;
    }
    swift_bridgeObjectRelease();
    sub_1C358462C();
    swift_allocError();
    *(_QWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)v21 = 2;
    *(_BYTE *)(v21 + 24) = 3;
    swift_willThrow();
    v12 = v5 - 264;
  }
  __swift_destroy_boxed_opaque_existential_0Tm(v12);
  return v8;
}

void sub_1C35B3430()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  sub_1C3573D7C(v1, v0);
  if (__OFSUB__(v2, v3))
    __break(1u);
  JUMPOUT(0x1C35B3408);
}

void sub_1C35B344C()
{
  unint64_t v0;
  uint64_t v1;

  sub_1C3573D7C(v1, v0);
  JUMPOUT(0x1C35B3408);
}

void sub_1C35B3460()
{
  unint64_t v0;
  uint64_t v1;

  sub_1C3573D7C(v1, v0);
  if (!__OFSUB__(HIDWORD(v1), (_DWORD)v1))
    JUMPOUT(0x1C35B3408);
  __break(1u);
  JUMPOUT(0x1C35B348CLL);
}

uint64_t sub_1C35B3510(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  unsigned int v3;
  uint64_t result;

  v3 = a3 >> 6;
  if (v3 == 2)
    return swift_release();
  if (v3 <= 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1C35B3534(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1C35B355C(__int128 *a1, uint64_t a2)
{
  __int128 v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 16) = *((_BYTE *)a1 + 16);
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t sub_1C35B3574(uint64_t a1)
{
  sub_1C35B3510(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_1C35B35A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a1 + 8);
  *(_QWORD *)a2 = v2;
  return a2;
}

uint64_t sub_1C35B35BC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  unsigned int v3;
  uint64_t result;

  v3 = a3 >> 6;
  if (v3 == 2)
    return swift_retain();
  if (v3 <= 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1C35B35E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1C35B3624(uint64_t a1)
{
  sub_1C35B35BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_1C35B3654(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1C35B367C(_QWORD *a1)
{
  return sub_1C35B3F2C(a1) & 1;
}

uint64_t sub_1C35B3694(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9FA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C35B36DC(uint64_t a1)
{
  uint64_t result;
  __int16 v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (a1 <= 254)
  {
    if ((a1 & 0x8000000000000000) == 0)
      return sub_1C35B6A20();
    sub_1C35B6EC4();
    __break(1u);
    goto LABEL_10;
  }
  if ((unint64_t)a1 > 0xFFFE)
  {
LABEL_10:
    result = sub_1C35B6ED0();
    __break(1u);
    return result;
  }
  v2 = bswap32(a1) >> 16;
  if (*(_QWORD *)(sub_1C35B12F0((size_t)&v2, (unint64_t)&v3) + 16))
    sub_1C35B6A20();
  return swift_release();
}

void sub_1C35B382C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  char v19;
  char v20;
  char v21;
  char v22;
  unint64_t __src;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  sub_1C35B36DC(a1);
  v5 = sub_1C35B268C(a2);
  sub_1C35B13A0(v5, a3);
  if (!a2)
  {
    sub_1C357FD54();
    return;
  }
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_15;
  __src = bswap64(a2);
  v6 = sub_1C35AC960(&__src, &v24);
  v8 = v7;
  v9 = 0;
  v10 = BYTE6(v7);
  if (v10)
  {
    while (1)
    {
      v17 = v6;
      v18 = v8;
      v19 = BYTE2(v8);
      v20 = BYTE3(v8);
      v21 = BYTE4(v8);
      v22 = BYTE5(v8);
      if (*((_BYTE *)&v17 + v9))
        break;
      if (v10 == ++v9)
        goto LABEL_9;
    }
    if (v10 < v9)
      __break(1u);
  }
LABEL_9:
  v11 = v8 & 0xFFFFFFFFFFFFFFLL;
  v12 = sub_1C35B6A2C();
  v14 = v13;
  sub_1C3573D7C(v6, v11);
  sub_1C3573E48(v12, v14);
  sub_1C35ADD20(v12, v14);
  v16 = v15;
  sub_1C3573D7C(v12, v14);
  if ((v16 & 0x100) != 0)
  {
    __break(1u);
LABEL_15:
    sub_1C35B6ED0();
    __break(1u);
    return;
  }
  if ((v16 & 0x80) != 0)
    sub_1C357FD54();
  sub_1C35B6A80();
  sub_1C3573D7C(v12, v14);
}

uint64_t sub_1C35B3A40(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[4];
  _OWORD v46[2];
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;

  v6 = v5;
  v34 = a5;
  v9 = sub_1C35B6FFC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = __swift_project_boxed_opaque_existential_1Tm(a1, v13);
  v45[1] = v13;
  v15 = __swift_allocate_boxed_opaque_existential_1(&v44);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v15, v14, v13);
  v37 = v12;
  sub_1C35B6FE4();
  v16 = *(_QWORD *)(a2 + 16);
  if (!v16)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v37, v9);
  v32 = v10;
  v33 = v9;
  v36 = v45;
  swift_bridgeObjectRetain();
  v31 = a2;
  v17 = (uint64_t *)(a2 + 48);
  v35 = MEMORY[0x1E0DEE9B8] + 8;
  while (1)
  {
    v38 = v16;
    v19 = *(v17 - 2);
    v18 = *(v17 - 1);
    v20 = *((_BYTE *)v17 + 8);
    v21 = *((_BYTE *)v17 + 9);
    v23 = v17[2];
    v22 = v17[3];
    v24 = *((unsigned __int8 *)v17 + 32);
    v25 = v17[5];
    v47 = *v17;
    v48 = v20;
    v49 = v21;
    v50 = v23;
    v51 = v22;
    v52 = v24;
    v53 = v25;
    swift_bridgeObjectRetain();
    v39 = v23;
    v40 = v22;
    v41 = v24;
    sub_1C35B35BC(v23, v22, v24);
    v54 = v25;
    swift_bridgeObjectRetain();
    v26 = sub_1C35B6FF0();
    MEMORY[0x1E0C80A78](v26);
    *(&v31 - 2) = v19;
    *(&v31 - 1) = v18;
    v27 = sub_1C35B6EA0();
    swift_bridgeObjectRelease();
    swift_release();
    if (*(_QWORD *)(v27 + 16) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1C358462C();
      swift_allocError();
      *(_QWORD *)(v28 + 8) = 0;
      *(_QWORD *)(v28 + 16) = 0;
      *(_QWORD *)v28 = 2;
      *(_BYTE *)(v28 + 24) = 3;
      goto LABEL_15;
    }
    sub_1C35B3694(v27 + 32, (uint64_t)&v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9A68);
    swift_dynamicCast();
    if (!v43)
      break;
    sub_1C3573DC0(&v42, v46);
    sub_1C3575174((uint64_t)v46, (uint64_t)&v42);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9F88);
    swift_dynamicCast();
    sub_1C35B007C(&v44, &v47, v34);
    if (v6)
    {
      sub_1C35B3510(v39, v40, v41);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v46);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v37, v33);
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v44);
    }
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v46);
    sub_1C35B3510(v39, v40, v41);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v44);
LABEL_5:
    v17 += 8;
    v16 = v38 - 1;
    if (v38 == 1)
    {
      swift_bridgeObjectRelease();
      v9 = v33;
      v10 = v32;
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v37, v9);
    }
  }
  sub_1C3577180((uint64_t)&v42, &qword_1EF8D9A68);
  if ((v21 & 1) != 0)
  {
    sub_1C35B3510(v39, v40, v41);
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  sub_1C358462C();
  swift_allocError();
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)v30 = 3;
  *(_BYTE *)(v30 + 24) = 3;
LABEL_15:
  swift_willThrow();
  sub_1C35B3510(v39, v40, v41);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v37, v33);
}

unint64_t sub_1C35B3EE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED7E1200;
  if (!qword_1ED7E1200)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED7E1298);
    result = MEMORY[0x1C3BD3788](MEMORY[0x1E0CB25E0], v1);
    atomic_store(result, (unint64_t *)&qword_1ED7E1200);
  }
  return result;
}

uint64_t sub_1C35B3F2C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = a1[1];
  if (!v2)
    return 0;
  if (*a1 == *(_QWORD *)(v1 + 16) && v2 == *(_QWORD *)(v1 + 24))
    return 1;
  else
    return sub_1C35B6F48() & 1;
}

uint64_t sub_1C35B3F84()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1C35B3FA8()
{
  return swift_deallocObject();
}

uint64_t sub_1C35B3FB8()
{
  return swift_deallocObject();
}

uint64_t sub_1C35B3FC8()
{
  uint64_t v0;

  sub_1C3573D7C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1C35B3FEC()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

_QWORD *initializeBufferWithCopyOfBuffer for ASN1DecodedItem(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for ASN1DecodedItem()
{
  return swift_release();
}

_QWORD *assignWithCopy for ASN1DecodedItem(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for ASN1DecodedItem(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1DecodedItem(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7B && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 123);
  v3 = (((*(_QWORD *)a1 >> 57) >> 4) | (8 * ((*(_QWORD *)a1 >> 57) & 8 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7A)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ASN1DecodedItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7A)
  {
    *(_QWORD *)result = a2 - 123;
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1C35B4184(_QWORD *a1)
{
  return *a1 >> 61;
}

_QWORD *sub_1C35B4190(_QWORD *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *sub_1C35B41A0(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  return result;
}

ValueMetadata *type metadata accessor for ASN1DecodedItem()
{
  return &type metadata for ASN1DecodedItem;
}

uint64_t getEnumTagSinglePayload for ASN1SequenceSpec.DecodeMode(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1SequenceSpec.DecodeMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1C35B4250(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1C35B4258(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ASN1SequenceSpec.DecodeMode()
{
  return &type metadata for ASN1SequenceSpec.DecodeMode;
}

uint64_t destroy for ASN1ItemSpec(uint64_t a1)
{
  sub_1C35B3510(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ASN1ItemSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  sub_1C35B35BC(v4, v5, v6);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ASN1ItemSpec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  v5 = a2[2];
  v6 = a2[3];
  v7 = *((_BYTE *)a2 + 32);
  sub_1C35B35BC(v5, v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v10 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_1C35B3510(v8, v9, v10);
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ASN1ItemSpec(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v4;
  sub_1C35B3510(v5, v6, v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1ItemSpec(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1ItemSpec(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1ItemSpec()
{
  return &type metadata for ASN1ItemSpec;
}

uint64_t getEnumTagSinglePayload for ASN1Error(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_1C35B4544(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 2u)
    return *(unsigned __int8 *)(a1 + 24);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_1C35B455C(uint64_t result, unsigned int a2)
{
  uint64_t v2;

  v2 = a2 - 3;
  if (a2 >= 3)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    LOBYTE(a2) = 3;
    *(_QWORD *)result = v2;
  }
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ASN1Error()
{
  return &type metadata for ASN1Error;
}

uint64_t getEnumTagSinglePayload for ASN1ItemSpec.TagSpec(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ASN1ItemSpec.TagSpec(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1C35B45D8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1C35B45F4(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1ItemSpec.TagSpec()
{
  return &type metadata for ASN1ItemSpec.TagSpec;
}

uint64_t destroy for ASN1ItemSpec.DecoderType(uint64_t a1)
{
  return sub_1C35B3510(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s24AppletTranslationLibrary12ASN1ItemSpecV11DecoderTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1C35B35BC(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ASN1ItemSpec.DecoderType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1C35B35BC(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1C35B3510(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ASN1ItemSpec.DecoderType(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1C35B3510(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1ItemSpec.DecoderType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 125);
  v3 = ((*(unsigned __int8 *)(a1 + 16) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ASN1ItemSpec.DecoderType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 125;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_BYTE *)(result + 16) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_1C35B47C0(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 16) >> 6;
  if (v1 == 3)
    return (*(_DWORD *)a1 + 3);
  else
    return v1;
}

uint64_t sub_1C35B47DC(uint64_t result)
{
  *(_BYTE *)(result + 16) &= 0x3Fu;
  return result;
}

uint64_t sub_1C35B47EC(uint64_t result, unsigned int a2)
{
  if (a2 < 3)
  {
    *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 1 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = -64;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1ItemSpec.DecoderType()
{
  return &type metadata for ASN1ItemSpec.DecoderType;
}

ValueMetadata *type metadata accessor for ASN1SequenceSpec.UnorderedDecodeOptions()
{
  return &type metadata for ASN1SequenceSpec.UnorderedDecodeOptions;
}

ValueMetadata *type metadata accessor for ASN1SequenceSpec.OrderedDecodeOptions()
{
  return &type metadata for ASN1SequenceSpec.OrderedDecodeOptions;
}

uint64_t getEnumTagSinglePayload for ASN1ItemSpec.Constraint(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ASN1ItemSpec.Constraint(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 41) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ASN1ItemSpec.Constraint()
{
  return &type metadata for ASN1ItemSpec.Constraint;
}

uint64_t initializeBufferWithCopyOfBuffer for ASN1SequenceSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ASN1SequenceSpec()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for ASN1SequenceSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  return a1;
}

uint64_t assignWithTake for ASN1SequenceSpec(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1SequenceSpec(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1SequenceSpec(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1SequenceSpec()
{
  return &type metadata for ASN1SequenceSpec;
}

unint64_t sub_1C35B4A20()
{
  unint64_t result;

  result = qword_1EF8D9FB8;
  if (!qword_1EF8D9FB8)
  {
    result = MEMORY[0x1C3BD3788](&unk_1C35BC0E0, &type metadata for ASN1SequenceSpec.OrderedDecodeOptions);
    atomic_store(result, (unint64_t *)&qword_1EF8D9FB8);
  }
  return result;
}

unint64_t sub_1C35B4A68()
{
  unint64_t result;

  result = qword_1EF8D9FC0;
  if (!qword_1EF8D9FC0)
  {
    result = MEMORY[0x1C3BD3788](&unk_1C35BC0B0, &type metadata for ASN1SequenceSpec.OrderedDecodeOptions);
    atomic_store(result, (unint64_t *)&qword_1EF8D9FC0);
  }
  return result;
}

unint64_t sub_1C35B4AB0()
{
  unint64_t result;

  result = qword_1EF8D9FC8;
  if (!qword_1EF8D9FC8)
  {
    result = MEMORY[0x1C3BD3788](&unk_1C35BC108, &type metadata for ASN1SequenceSpec.OrderedDecodeOptions);
    atomic_store(result, (unint64_t *)&qword_1EF8D9FC8);
  }
  return result;
}

unint64_t sub_1C35B4AF8()
{
  unint64_t result;

  result = qword_1EF8D9FD0;
  if (!qword_1EF8D9FD0)
  {
    result = MEMORY[0x1C3BD3788](&unk_1C35BC140, &type metadata for ASN1SequenceSpec.OrderedDecodeOptions);
    atomic_store(result, (unint64_t *)&qword_1EF8D9FD0);
  }
  return result;
}

unint64_t sub_1C35B4B40()
{
  unint64_t result;

  result = qword_1EF8D9FD8;
  if (!qword_1EF8D9FD8)
  {
    result = MEMORY[0x1C3BD3788](&unk_1C35BC270, &type metadata for ASN1SequenceSpec.UnorderedDecodeOptions);
    atomic_store(result, (unint64_t *)&qword_1EF8D9FD8);
  }
  return result;
}

unint64_t sub_1C35B4B88()
{
  unint64_t result;

  result = qword_1EF8D9FE0;
  if (!qword_1EF8D9FE0)
  {
    result = MEMORY[0x1C3BD3788](&unk_1C35BC240, &type metadata for ASN1SequenceSpec.UnorderedDecodeOptions);
    atomic_store(result, (unint64_t *)&qword_1EF8D9FE0);
  }
  return result;
}

unint64_t sub_1C35B4BD0()
{
  unint64_t result;

  result = qword_1EF8D9FE8;
  if (!qword_1EF8D9FE8)
  {
    result = MEMORY[0x1C3BD3788](&unk_1C35BC298, &type metadata for ASN1SequenceSpec.UnorderedDecodeOptions);
    atomic_store(result, (unint64_t *)&qword_1EF8D9FE8);
  }
  return result;
}

unint64_t sub_1C35B4C18()
{
  unint64_t result;

  result = qword_1EF8D9FF0;
  if (!qword_1EF8D9FF0)
  {
    result = MEMORY[0x1C3BD3788](&unk_1C35BC2D0, &type metadata for ASN1SequenceSpec.UnorderedDecodeOptions);
    atomic_store(result, (unint64_t *)&qword_1EF8D9FF0);
  }
  return result;
}

uint64_t sub_1C35B4C5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t destroy for SEEMConfiguration(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = sub_1C3573D7C(*a1, a1[1]);
  v3 = a1[3];
  if (v3 >> 60 != 15)
    result = sub_1C3573D7C(a1[2], v3);
  v4 = a1[5];
  if (v4 >> 60 != 15)
    result = sub_1C3573D7C(a1[4], v4);
  v5 = a1[7];
  if (v5 >> 60 != 15)
    result = sub_1C3573D7C(a1[6], v5);
  v6 = a1[9];
  if (v6 >> 60 != 15)
    result = sub_1C3573D7C(a1[8], v6);
  v7 = a1[11];
  if (v7 >> 60 != 15)
    result = sub_1C3573D7C(a1[10], v7);
  v8 = a1[13];
  if (v8 >> 60 != 15)
    result = sub_1C3573D7C(a1[12], v8);
  v9 = a1[15];
  if (v9 >> 60 != 15)
    result = sub_1C3573D7C(a1[14], v9);
  v10 = a1[17];
  if (v10 >> 60 != 15)
    result = sub_1C3573D7C(a1[16], v10);
  v11 = a1[19];
  if (v11 >> 60 != 15)
    return sub_1C3573D7C(a1[18], v11);
  return result;
}

uint64_t initializeWithCopy for SEEMConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;

  v4 = *a2;
  v5 = a2[1];
  sub_1C3573E48(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2 + 2;
  v7 = a2[3];
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
  }
  else
  {
    v8 = *v6;
    sub_1C3573E48(*v6, a2[3]);
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v7;
  }
  v9 = a2 + 4;
  v10 = a2[5];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_1C3573E48(*v9, a2[5]);
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v10;
  }
  v12 = a2 + 6;
  v13 = a2[7];
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v12;
  }
  else
  {
    v14 = *v12;
    sub_1C3573E48(*v12, a2[7]);
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = v13;
  }
  v15 = a2 + 8;
  v16 = a2[9];
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v15;
  }
  else
  {
    v17 = *v15;
    sub_1C3573E48(*v15, a2[9]);
    *(_QWORD *)(a1 + 64) = v17;
    *(_QWORD *)(a1 + 72) = v16;
  }
  v18 = a2 + 10;
  v19 = a2[11];
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v18;
  }
  else
  {
    v20 = *v18;
    sub_1C3573E48(*v18, a2[11]);
    *(_QWORD *)(a1 + 80) = v20;
    *(_QWORD *)(a1 + 88) = v19;
  }
  v21 = a2 + 12;
  v22 = a2[13];
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v21;
  }
  else
  {
    v23 = *v21;
    sub_1C3573E48(*v21, a2[13]);
    *(_QWORD *)(a1 + 96) = v23;
    *(_QWORD *)(a1 + 104) = v22;
  }
  v24 = a2 + 14;
  v25 = a2[15];
  if (v25 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)v24;
  }
  else
  {
    v26 = *v24;
    sub_1C3573E48(*v24, a2[15]);
    *(_QWORD *)(a1 + 112) = v26;
    *(_QWORD *)(a1 + 120) = v25;
  }
  v27 = a2 + 16;
  v28 = a2[17];
  if (v28 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 128) = *(_OWORD *)v27;
  }
  else
  {
    v29 = *v27;
    sub_1C3573E48(*v27, a2[17]);
    *(_QWORD *)(a1 + 128) = v29;
    *(_QWORD *)(a1 + 136) = v28;
  }
  v30 = a2 + 18;
  v31 = a2[19];
  if (v31 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 144) = *(_OWORD *)v30;
  }
  else
  {
    v32 = *v30;
    sub_1C3573E48(*v30, v31);
    *(_QWORD *)(a1 + 144) = v32;
    *(_QWORD *)(a1 + 152) = v31;
  }
  return a1;
}

uint64_t *assignWithCopy for SEEMConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;

  v4 = *a2;
  v5 = a2[1];
  sub_1C3573E48(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1C3573D7C(v6, v7);
  v8 = a2 + 2;
  v9 = a2[3];
  if ((unint64_t)a1[3] >> 60 == 15)
  {
    if (v9 >> 60 != 15)
    {
      v10 = *v8;
      sub_1C3573E48(*v8, a2[3]);
      a1[2] = v10;
      a1[3] = v9;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
    sub_1C35B54D0((uint64_t)(a1 + 2));
LABEL_6:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    goto LABEL_8;
  }
  v11 = *v8;
  sub_1C3573E48(*v8, a2[3]);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v11;
  a1[3] = v9;
  sub_1C3573D7C(v12, v13);
LABEL_8:
  v14 = a2 + 4;
  v15 = a2[5];
  if ((unint64_t)a1[5] >> 60 == 15)
  {
    if (v15 >> 60 != 15)
    {
      v16 = *v14;
      sub_1C3573E48(*v14, a2[5]);
      a1[4] = v16;
      a1[5] = v15;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v15 >> 60 == 15)
  {
    sub_1C35B54D0((uint64_t)(a1 + 4));
LABEL_13:
    *((_OWORD *)a1 + 2) = *(_OWORD *)v14;
    goto LABEL_15;
  }
  v17 = *v14;
  sub_1C3573E48(*v14, a2[5]);
  v18 = a1[4];
  v19 = a1[5];
  a1[4] = v17;
  a1[5] = v15;
  sub_1C3573D7C(v18, v19);
LABEL_15:
  v20 = a2 + 6;
  v21 = a2[7];
  if ((unint64_t)a1[7] >> 60 == 15)
  {
    if (v21 >> 60 != 15)
    {
      v22 = *v20;
      sub_1C3573E48(*v20, a2[7]);
      a1[6] = v22;
      a1[7] = v21;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v21 >> 60 == 15)
  {
    sub_1C35B54D0((uint64_t)(a1 + 6));
LABEL_20:
    *((_OWORD *)a1 + 3) = *(_OWORD *)v20;
    goto LABEL_22;
  }
  v23 = *v20;
  sub_1C3573E48(*v20, a2[7]);
  v24 = a1[6];
  v25 = a1[7];
  a1[6] = v23;
  a1[7] = v21;
  sub_1C3573D7C(v24, v25);
LABEL_22:
  v26 = a2 + 8;
  v27 = a2[9];
  if ((unint64_t)a1[9] >> 60 == 15)
  {
    if (v27 >> 60 != 15)
    {
      v28 = *v26;
      sub_1C3573E48(*v26, a2[9]);
      a1[8] = v28;
      a1[9] = v27;
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if (v27 >> 60 == 15)
  {
    sub_1C35B54D0((uint64_t)(a1 + 8));
LABEL_27:
    *((_OWORD *)a1 + 4) = *(_OWORD *)v26;
    goto LABEL_29;
  }
  v29 = *v26;
  sub_1C3573E48(*v26, a2[9]);
  v30 = a1[8];
  v31 = a1[9];
  a1[8] = v29;
  a1[9] = v27;
  sub_1C3573D7C(v30, v31);
LABEL_29:
  v32 = a2 + 10;
  v33 = a2[11];
  if ((unint64_t)a1[11] >> 60 == 15)
  {
    if (v33 >> 60 != 15)
    {
      v34 = *v32;
      sub_1C3573E48(*v32, a2[11]);
      a1[10] = v34;
      a1[11] = v33;
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  if (v33 >> 60 == 15)
  {
    sub_1C35B54D0((uint64_t)(a1 + 10));
LABEL_34:
    *((_OWORD *)a1 + 5) = *(_OWORD *)v32;
    goto LABEL_36;
  }
  v35 = *v32;
  sub_1C3573E48(*v32, a2[11]);
  v36 = a1[10];
  v37 = a1[11];
  a1[10] = v35;
  a1[11] = v33;
  sub_1C3573D7C(v36, v37);
LABEL_36:
  v38 = a2 + 12;
  v39 = a2[13];
  if ((unint64_t)a1[13] >> 60 == 15)
  {
    if (v39 >> 60 != 15)
    {
      v40 = *v38;
      sub_1C3573E48(*v38, a2[13]);
      a1[12] = v40;
      a1[13] = v39;
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  if (v39 >> 60 == 15)
  {
    sub_1C35B54D0((uint64_t)(a1 + 12));
LABEL_41:
    *((_OWORD *)a1 + 6) = *(_OWORD *)v38;
    goto LABEL_43;
  }
  v41 = *v38;
  sub_1C3573E48(*v38, a2[13]);
  v42 = a1[12];
  v43 = a1[13];
  a1[12] = v41;
  a1[13] = v39;
  sub_1C3573D7C(v42, v43);
LABEL_43:
  v44 = a2 + 14;
  v45 = a2[15];
  if ((unint64_t)a1[15] >> 60 == 15)
  {
    if (v45 >> 60 != 15)
    {
      v46 = *v44;
      sub_1C3573E48(*v44, a2[15]);
      a1[14] = v46;
      a1[15] = v45;
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (v45 >> 60 == 15)
  {
    sub_1C35B54D0((uint64_t)(a1 + 14));
LABEL_48:
    *((_OWORD *)a1 + 7) = *(_OWORD *)v44;
    goto LABEL_50;
  }
  v47 = *v44;
  sub_1C3573E48(*v44, a2[15]);
  v48 = a1[14];
  v49 = a1[15];
  a1[14] = v47;
  a1[15] = v45;
  sub_1C3573D7C(v48, v49);
LABEL_50:
  v50 = a2 + 16;
  v51 = a2[17];
  if ((unint64_t)a1[17] >> 60 == 15)
  {
    if (v51 >> 60 != 15)
    {
      v52 = *v50;
      sub_1C3573E48(*v50, a2[17]);
      a1[16] = v52;
      a1[17] = v51;
      goto LABEL_57;
    }
    goto LABEL_55;
  }
  if (v51 >> 60 == 15)
  {
    sub_1C35B54D0((uint64_t)(a1 + 16));
LABEL_55:
    *((_OWORD *)a1 + 8) = *(_OWORD *)v50;
    goto LABEL_57;
  }
  v53 = *v50;
  sub_1C3573E48(*v50, a2[17]);
  v54 = a1[16];
  v55 = a1[17];
  a1[16] = v53;
  a1[17] = v51;
  sub_1C3573D7C(v54, v55);
LABEL_57:
  v56 = a2 + 18;
  v57 = a2[19];
  if ((unint64_t)a1[19] >> 60 != 15)
  {
    if (v57 >> 60 != 15)
    {
      v59 = *v56;
      sub_1C3573E48(*v56, v57);
      v60 = a1[18];
      v61 = a1[19];
      a1[18] = v59;
      a1[19] = v57;
      sub_1C3573D7C(v60, v61);
      return a1;
    }
    sub_1C35B54D0((uint64_t)(a1 + 18));
    goto LABEL_62;
  }
  if (v57 >> 60 == 15)
  {
LABEL_62:
    *((_OWORD *)a1 + 9) = *(_OWORD *)v56;
    return a1;
  }
  v58 = *v56;
  sub_1C3573E48(*v56, v57);
  a1[18] = v58;
  a1[19] = v57;
  return a1;
}

uint64_t sub_1C35B54D0(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CB0338] - 8) + 8))();
  return a1;
}

uint64_t assignWithTake for SEEMConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1C3573D7C(v4, v5);
  v6 = (_OWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  if (v7 >> 60 == 15)
    goto LABEL_4;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 >> 60 == 15)
  {
    sub_1C35B54D0(a1 + 16);
LABEL_4:
    *(_OWORD *)(a1 + 16) = *v6;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)v6;
  *(_QWORD *)(a1 + 24) = v8;
  sub_1C3573D7C(v9, v7);
LABEL_6:
  v10 = (_OWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v11 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 32) = *v10;
    goto LABEL_11;
  }
  v12 = *(_QWORD *)(a2 + 40);
  if (v12 >> 60 == 15)
  {
    sub_1C35B54D0(a1 + 32);
    goto LABEL_9;
  }
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v10;
  *(_QWORD *)(a1 + 40) = v12;
  sub_1C3573D7C(v13, v11);
LABEL_11:
  v14 = (_OWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  if (v15 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 48) = *v14;
    goto LABEL_16;
  }
  v16 = *(_QWORD *)(a2 + 56);
  if (v16 >> 60 == 15)
  {
    sub_1C35B54D0(a1 + 48);
    goto LABEL_14;
  }
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)v14;
  *(_QWORD *)(a1 + 56) = v16;
  sub_1C3573D7C(v17, v15);
LABEL_16:
  v18 = (_OWORD *)(a2 + 64);
  v19 = *(_QWORD *)(a1 + 72);
  if (v19 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)(a1 + 64) = *v18;
    goto LABEL_21;
  }
  v20 = *(_QWORD *)(a2 + 72);
  if (v20 >> 60 == 15)
  {
    sub_1C35B54D0(a1 + 64);
    goto LABEL_19;
  }
  v21 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)v18;
  *(_QWORD *)(a1 + 72) = v20;
  sub_1C3573D7C(v21, v19);
LABEL_21:
  v22 = (_OWORD *)(a2 + 80);
  v23 = *(_QWORD *)(a1 + 88);
  if (v23 >> 60 == 15)
  {
LABEL_24:
    *(_OWORD *)(a1 + 80) = *v22;
    goto LABEL_26;
  }
  v24 = *(_QWORD *)(a2 + 88);
  if (v24 >> 60 == 15)
  {
    sub_1C35B54D0(a1 + 80);
    goto LABEL_24;
  }
  v25 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)v22;
  *(_QWORD *)(a1 + 88) = v24;
  sub_1C3573D7C(v25, v23);
LABEL_26:
  v26 = (_OWORD *)(a2 + 96);
  v27 = *(_QWORD *)(a1 + 104);
  if (v27 >> 60 == 15)
  {
LABEL_29:
    *(_OWORD *)(a1 + 96) = *v26;
    goto LABEL_31;
  }
  v28 = *(_QWORD *)(a2 + 104);
  if (v28 >> 60 == 15)
  {
    sub_1C35B54D0(a1 + 96);
    goto LABEL_29;
  }
  v29 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)v26;
  *(_QWORD *)(a1 + 104) = v28;
  sub_1C3573D7C(v29, v27);
LABEL_31:
  v30 = (_OWORD *)(a2 + 112);
  v31 = *(_QWORD *)(a1 + 120);
  if (v31 >> 60 == 15)
  {
LABEL_34:
    *(_OWORD *)(a1 + 112) = *v30;
    goto LABEL_36;
  }
  v32 = *(_QWORD *)(a2 + 120);
  if (v32 >> 60 == 15)
  {
    sub_1C35B54D0(a1 + 112);
    goto LABEL_34;
  }
  v33 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)v30;
  *(_QWORD *)(a1 + 120) = v32;
  sub_1C3573D7C(v33, v31);
LABEL_36:
  v34 = (_OWORD *)(a2 + 128);
  v35 = *(_QWORD *)(a1 + 136);
  if (v35 >> 60 == 15)
  {
LABEL_39:
    *(_OWORD *)(a1 + 128) = *v34;
    goto LABEL_41;
  }
  v36 = *(_QWORD *)(a2 + 136);
  if (v36 >> 60 == 15)
  {
    sub_1C35B54D0(a1 + 128);
    goto LABEL_39;
  }
  v37 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)v34;
  *(_QWORD *)(a1 + 136) = v36;
  sub_1C3573D7C(v37, v35);
LABEL_41:
  v38 = (_QWORD *)(a2 + 144);
  v39 = *(_QWORD *)(a1 + 152);
  if (v39 >> 60 != 15)
  {
    v40 = *(_QWORD *)(a2 + 152);
    if (v40 >> 60 != 15)
    {
      v41 = *(_QWORD *)(a1 + 144);
      *(_QWORD *)(a1 + 144) = *v38;
      *(_QWORD *)(a1 + 152) = v40;
      sub_1C3573D7C(v41, v39);
      return a1;
    }
    sub_1C35B54D0(a1 + 144);
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v38;
  return a1;
}

uint64_t getEnumTagSinglePayload for SEEMConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 160))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SEEMConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 160) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SEEMConfiguration()
{
  return &type metadata for SEEMConfiguration;
}

double sub_1C35B58CC@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  sub_1C35B5908((uint64_t)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

double sub_1C35B5908@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF8D9CD0);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1C35BBB50;
  *(_QWORD *)(v2 + 32) = 0x656C626154646961;
  *(_QWORD *)(v2 + 40) = 0xE800000000000000;
  *(_QWORD *)(v2 + 48) = 195;
  *(_WORD *)(v2 + 56) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_BYTE *)(v2 + 80) = -64;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 88) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 96) = 0xD000000000000012;
  *(_QWORD *)(v2 + 104) = 0x80000001C35C5EF0;
  *(_QWORD *)(v2 + 112) = 196;
  *(_WORD *)(v2 + 120) = 256;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_BYTE *)(v2 + 144) = -64;
  *(_QWORD *)(v2 + 152) = &unk_1E7D8B228;
  *(_QWORD *)(v2 + 160) = 0xD000000000000014;
  *(_QWORD *)(v2 + 168) = 0x80000001C35C5F10;
  *(_QWORD *)(v2 + 176) = 197;
  *(_WORD *)(v2 + 184) = 256;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_BYTE *)(v2 + 208) = -64;
  *(_QWORD *)(v2 + 216) = &unk_1E7D8B278;
  *(_QWORD *)(v2 + 224) = 0xD000000000000016;
  *(_QWORD *)(v2 + 232) = 0x80000001C35C5F30;
  *(_QWORD *)(v2 + 240) = 198;
  *(_WORD *)(v2 + 248) = 256;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_BYTE *)(v2 + 272) = -64;
  *(_QWORD *)(v2 + 280) = &unk_1E7D8B2C8;
  *(_QWORD *)(v2 + 288) = 0x646F43686374616DLL;
  *(_QWORD *)(v2 + 296) = 0xEA00000000007365;
  *(_QWORD *)(v2 + 304) = 199;
  *(_WORD *)(v2 + 312) = 256;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_BYTE *)(v2 + 336) = -64;
  *(_QWORD *)(v2 + 344) = &unk_1E7D8B318;
  *(_QWORD *)(v2 + 352) = 0x646F437466696873;
  *(_QWORD *)(v2 + 360) = 0xEA00000000007365;
  *(_QWORD *)(v2 + 368) = 200;
  *(_WORD *)(v2 + 376) = 256;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_BYTE *)(v2 + 400) = -64;
  *(_QWORD *)(v2 + 408) = &unk_1E7D8B368;
  *(_QWORD *)(v2 + 416) = 0x7367616C66;
  *(_QWORD *)(v2 + 424) = 0xE500000000000000;
  *(_QWORD *)(v2 + 432) = 201;
  *(_WORD *)(v2 + 440) = 256;
  *(_OWORD *)(v2 + 448) = 0u;
  *(_BYTE *)(v2 + 464) = -64;
  *(_QWORD *)(v2 + 472) = &unk_1E7D8B3B8;
  *(_QWORD *)(v2 + 480) = 0xD000000000000013;
  *(_QWORD *)(v2 + 488) = 0x80000001C35C5F50;
  *(_QWORD *)(v2 + 496) = 202;
  *(_WORD *)(v2 + 504) = 256;
  *(_OWORD *)(v2 + 512) = 0u;
  *(_BYTE *)(v2 + 528) = -64;
  *(_QWORD *)(v2 + 536) = &unk_1E7D8B408;
  *(_QWORD *)(v2 + 544) = 0x696669646F4D6672;
  *(_QWORD *)(v2 + 552) = 0xEB00000000737265;
  *(_QWORD *)(v2 + 560) = 203;
  *(_WORD *)(v2 + 568) = 256;
  *(_OWORD *)(v2 + 576) = 0u;
  *(_BYTE *)(v2 + 592) = -64;
  *(_QWORD *)(v2 + 600) = &unk_1E7D8B458;
  *(_QWORD *)(v2 + 608) = 0xD000000000000018;
  *(_QWORD *)(v2 + 616) = 0x80000001C35C5F70;
  *(_QWORD *)(v2 + 624) = 204;
  *(_WORD *)(v2 + 632) = 256;
  *(_OWORD *)(v2 + 640) = 0u;
  *(_BYTE *)(v2 + 656) = -64;
  *(_QWORD *)(v2 + 664) = &unk_1E7D8B4A8;
  *(_QWORD *)a1 = 226;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 64;
  *(_QWORD *)(a1 + 40) = v4;
  return result;
}

void *DERLogSetBlock(const void *a1)
{
  void *result;

  _Block_release((const void *)logBlock);
  result = _Block_copy(a1);
  logBlock = (uint64_t)result;
  return result;
}

void DERLog(const char *a1, int a2, char *a3, ...)
{
  char *v5;
  char *v6;
  va_list va;

  va_start(va, a3);
  v5 = 0;
  v6 = 0;
  if (logBlock)
  {
    if (vasprintf(&v6, a3, va) >= 1 && v6)
    {
      asprintf(&v5, "%s/%d : %s", a1, a2, v6);
      (*(void (**)(void))(logBlock + 16))();
    }
    else
    {
      (*(void (**)(uint64_t, const char *))(logBlock + 16))(logBlock, "<failed to format 1>");
    }
  }
  free(v6);
  free(v5);
}

uint64_t DERDecodeItem(unsigned __int8 **a1, unint64_t *a2)
{
  return DERDecodeItemPB(a1, a2, 0);
}

uint64_t DERDecodeItemPB(unsigned __int8 **a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  int v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  int v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  DERLog("DERDecodeItemPB", 179, "rem 0x%zx", v5);
  v7 = v5 - 1;
  if (v5 <= 1)
  {
    DERLog("DERDecodeItemPB", 186, "Not enough data for a tag/length, len 0x%zx");
    return 3;
  }
  v10 = *v6;
  v8 = v6 + 1;
  v9 = v10;
  v11 = v10 & 0x1F;
  DERLog("DERDecodeItemPB", 193, "TB 0x%x, TN 0x%llx, long? %d", v10, v11, v11 == 31);
  if ((_DWORD)v11 != 31)
  {
LABEL_11:
    *a2 = v11 | ((unint64_t)(v9 & 0xE0) << 56);
    v15 = v8 + 1;
    v16 = *v8;
    v17 = v7 - 1;
    if ((char)*v8 < 0)
    {
      v18 = v16 & 0x7F;
      v20 = (v16 & 0x7F) <= 8 && (_DWORD)v18 != 0 && v17 >= v18;
      if (!v20 || !*v15)
      {
        DERLog("DERDecodeItemPB", 237, "Underflow at len1 0x%x derLen 0x%zx");
        return 3;
      }
      v22 = 0;
      v23 = (v18 - 1);
      v24 = v23 + 2;
      v25 = v7 - 2;
      v26 = v18;
      do
      {
        v27 = *v15++;
        v22 = v27 | (v22 << 8);
        --v26;
      }
      while (v26);
      v28 = v25 - v23;
      DERLog("DERDecodeItemPB", 246, "LL lol 0x%x len 0x%zx rem 0x%zx", v18, v22, v25 - v23);
      if (!a3 && v22 > v28)
      {
        DERLog("DERDecodeItemPB", 249, "Underflow!");
        return 3;
      }
      if (v22 >= v28)
        v29 = v28;
      else
        v29 = v22;
      a2[1] = (unint64_t)&v8[v24];
      a2[2] = v29;
      if (a3)
      {
        result = 0;
        *a3 = v22;
        return result;
      }
    }
    else
    {
      DERLog("DERDecodeItemPB", 262, "SL 0x%hhx rem 0x%zx", *v8, v7 - 1);
      if (!a3 && v17 < v16)
      {
        DERLog("DERDecodeItemPB", 266, "Underflow!", v30, v31);
        return 3;
      }
      if (v17 >= v16)
        v21 = v16;
      else
        v21 = v7 - 1;
      a2[1] = (unint64_t)v15;
      a2[2] = v21;
      if (a3)
      {
        result = 0;
        *a3 = v16;
        return result;
      }
    }
    return 0;
  }
  if (*v8 == 128)
  {
    DERLog("DERDecodeItemPB", 206, "Invalid next byte 0x%x");
    return 3;
  }
  v11 = 0;
  while (1)
  {
    result = 3;
    if (v7 < 2)
      return result;
    v13 = v11;
    if (v11 >> 57)
      return result;
    v14 = (char)*v8++;
    DERLog("DERDecodeItemPB", 216, "LT byte 0x%x rem 0x%zx", v14, --v7);
    v11 = v14 & 0x7F | (v11 << 7);
    if ((v14 & 0x80000000) == 0)
    {
      if (v13 >> 54)
        return 3;
      goto LABEL_11;
    }
  }
}

uint64_t DERDecodeSeqNext(unsigned __int8 **a1, unint64_t *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t result;
  unsigned __int8 *v7[2];

  v2 = *a1;
  v3 = a1[1];
  if (*a1 >= v3)
    return 1;
  v7[0] = *a1;
  v7[1] = (unsigned __int8 *)(v3 - v2);
  result = DERDecodeItemPB(v7, a2, 0);
  if (!(_DWORD)result)
    *a1 = (unsigned __int8 *)(a2[1] + a2[2]);
  return result;
}

uint64_t DERParseSequenceC(unsigned __int8 **a1, unsigned int a2, uint64_t a3, char *a4, size_t a5)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unsigned __int8 *v14;
  uint64_t result;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned __int16 v26;
  _WORD *i;
  unsigned __int8 *v28;
  unint64_t v30;
  __int128 v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;

  v8 = *a1;
  if (a5)
  {
    bzero(a4, a5);
    v9 = *a1;
  }
  else
  {
    v9 = *a1;
  }
  v10 = &a1[1][(_QWORD)v9];
  v32 = v9;
  v33 = v10;
  if (!a2)
  {
LABEL_20:
    if (v32 != v33)
    {
      DERLog("DERParseSequenceC", 594, "End of spec but 0x%tx bytes remain", v33 - v32);
      return 3;
    }
    return 0;
  }
  v11 = 0;
  v12 = "Item %d off 0x%tx rem 0x%tx";
  v28 = v8;
  v13 = "Got tag 0x%llx";
  while (1)
  {
    v14 = v32;
    DERLog("DERParseSequenceC", 509, v12, v11, v32 - v8, v33 - v32);
    v30 = 0;
    v31 = 0uLL;
    result = DERDecodeSeqNext(&v32, &v30);
    if ((_DWORD)result)
      break;
    v16 = v12;
    v17 = v30;
    v18 = v13;
    DERLog("DERParseSequenceC", 534, v13, v30);
    while (1)
    {
      if (v11 >= a2)
      {
        DERLog("DERParseSequenceC", 585, "No spec item for tag!");
        return 2;
      }
      v19 = a3 + 32 * v11;
      v20 = *(_WORD *)(v19 + 16);
      v21 = *(_QWORD *)(v19 + 8);
      if ((v20 & 2) != 0)
        break;
      DERLog("DERParseSequenceC", 540, "  specItem %u tag 0x%llx match %d", v11, v21, v17 == v21);
      if (v17 == v21)
        goto LABEL_14;
      if ((v20 & 1) == 0)
      {
        DERLog("DERParseSequenceC", 547, "!Opt specitem not matched!");
        return 2;
      }
      LODWORD(v11) = v11 + 1;
    }
    DERLog("DERParseSequenceC", 540, "  specItem %u tag 0x%llx match %d", v11, v21, 1);
LABEL_14:
    v22 = (_QWORD *)(a3 + 32 * v11);
    v23 = v22[3];
    if (v23 && !DERCheckConstraints(v23, (uint64_t)&v30))
      return 8;
    if ((v20 & 4) == 0)
    {
      v24 = &a4[*v22];
      *(_OWORD *)v24 = v31;
      if ((v20 & 8) != 0)
      {
        v25 = v31 - (_QWORD)v14 + *((_QWORD *)v24 + 1);
        *(_QWORD *)v24 = v14;
        *((_QWORD *)v24 + 1) = v25;
      }
    }
    v11 = (v11 + 1);
    v12 = v16;
    v8 = v28;
    v13 = v18;
    if (v11 >= a2)
      goto LABEL_20;
  }
  if ((_DWORD)result != 1)
    return result;
  if (v11 >= a2)
    return 0;
  v26 = v11;
  for (i = (_WORD *)(a3 + 32 * v11 + 16); (*i & 1) != 0; i += 16)
  {
    result = 0;
    if (a2 == ++v26)
      return result;
  }
  DERLog("DERParseSequenceC", 521, "Missing !opt specitem %d, tag 0x%llx", v26, *((_QWORD *)i - 1));
  return 5;
}

uint64_t DERCheckConstraints(unint64_t a1, uint64_t a2)
{
  if ((a1 & 1) != 0 && *(_QWORD *)(a2 + 16) < (unint64_t)((unsigned __int16)a1 >> 1))
  {
    DERLog("DERCheckConstraints", 476, "  failed min len constr %zu < %d");
    return 0;
  }
  if ((a1 & 0x10000) != 0 && *(_QWORD *)(a2 + 16) > (unint64_t)(a1 >> 17))
  {
    DERLog("DERCheckConstraints", 480, "  failed max length constr %zu > %d");
    return 0;
  }
  if ((a1 & 0x100000000) != 0 && *(_QWORD *)(a2 + 16) % ((a1 >> 33) & 0x7F))
  {
    DERLog("DERCheckConstraints", 484, "  failed div length constr %zu %% %d != 0");
    return 0;
  }
  return 1;
}

uint64_t DERParseUnsortedSequenceC(unsigned __int8 **a1, unsigned int a2, uint64_t a3, char *a4, size_t a5, char a6)
{
  unsigned __int16 i;
  _QWORD *v13;
  unsigned __int16 v14;
  uint64_t v15;
  _BYTE *v16;
  size_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t result;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  uint64_t v25;
  __int16 *v26;
  _BYTE *v27;
  unint64_t v28;
  __int16 v29;
  char *v30;
  uint64_t v31;
  _WORD *j;
  _QWORD v33[2];
  _OWORD *v34;
  __int16 *v35;
  unint64_t v36;
  _QWORD v37[2];
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    for (i = 0; i < a2; ++i)
    {
      v13 = (_QWORD *)(a3 + 32 * i + 8);
      v14 = i;
      while (a2 > ++v14)
      {
        if (*v13 == *(_QWORD *)(a3 + 32 * v14 + 8))
        {
          DERLog("DERParseUnsortedSequenceC", 618, "Duplicate tag 0x%llx in the spec at indices %d and %d", *v13, i, v14);
          return 9;
        }
      }
      if ((*(_WORD *)(a3 + 32 * i + 16) & 2) != 0)
      {
        DERLog("DERParseUnsortedSequenceC", 625, "Forbidden option DER_DEC_ASN_ANY for tag 0x%llx in the spec at index %d", *v13, i);
        return 2;
      }
    }
    v33[1] = v33;
    MEMORY[0x1E0C80A78]();
    v16 = (char *)v33 - v15;
    bzero((char *)v33 - v15, v17);
    v18 = *a1;
    if (a5)
      bzero(a4, a5);
    v19 = *a1;
    v21 = &a1[1][(_QWORD)*a1];
    if (a2 <= 1)
      v22 = 1;
    else
      v22 = a2;
    v38 = *a1;
    v39 = v21;
    v34 = v37;
    v35 = (__int16 *)(a3 + 16);
    while (2)
    {
      DERLog("DERParseUnsortedSequenceC", 643, "Decoding offset 0x%tx, remaining 0x%tx", v19 - v18, v21 - v19);
      v36 = 0;
      v37[0] = 0;
      v37[1] = 0;
      result = DERDecodeSeqNext(&v38, &v36);
      if ((_DWORD)result)
      {
        if ((_DWORD)result == 1)
        {
          for (j = (_WORD *)(a3 + 16); (*j & 1) != 0 || *v16; j += 16)
          {
            ++v16;
            if (!--v22)
              return 0;
          }
          DERLog("DERParseUnsortedSequenceC", 706, "Missing mandatory tag %llx", *((_QWORD *)j - 1));
          return 5;
        }
      }
      else
      {
        v23 = v18;
        v24 = v36;
        DERLog("DERParseUnsortedSequenceC", 658, "Got tag 0x%llx", v36);
        v25 = v22;
        v26 = v35;
        v27 = v16;
        while (v24 != *((_QWORD *)v26 - 1))
        {
          ++v27;
          v26 += 16;
          if (!--v25)
          {
            DERLog("DERParseUnsortedSequenceC", 665, "No spec item for tag 0x%llx!", v24);
            if ((a6 & 1) == 0)
              return 2;
            goto LABEL_29;
          }
        }
        if (*v27)
        {
          DERLog("DERParseUnsortedSequenceC", 673, "Found duplicate item for tag %llx", v24);
          return 9;
        }
        else
        {
          *v27 = 1;
          v28 = *((_QWORD *)v26 + 1);
          if (!v28 || DERCheckConstraints(v28, (uint64_t)&v36))
          {
            v29 = *v26;
            if ((*v26 & 4) == 0)
            {
              v30 = &a4[*((_QWORD *)v26 - 2)];
              *(_OWORD *)v30 = *v34;
              if ((v29 & 8) != 0)
              {
                v31 = v37[0] - (_QWORD)v19 + *((_QWORD *)v30 + 1);
                *(_QWORD *)v30 = v19;
                *((_QWORD *)v30 + 1) = v31;
              }
            }
LABEL_29:
            v19 = v38;
            v21 = v39;
            v18 = v23;
            continue;
          }
          return 8;
        }
      }
      break;
    }
  }
  else
  {
    DERLog("DERParseUnsortedSequenceC", 609, "Zero length unsorted sequence?");
    return 6;
  }
  return result;
}

__n128 DERFindItem(unsigned __int8 **a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  __n128 result;
  unint64_t v7;
  __n128 v8;
  unsigned __int8 *v9[2];

  v5 = &a1[1][(_QWORD)*a1];
  v9[0] = *a1;
  v9[1] = v5;
  v7 = 0;
  v8 = 0uLL;
  if (!DERDecodeSeqNext(v9, &v7))
  {
    while (v7 != a2)
    {
      if ((v7 & 0x2000000000000000) == 0 || DERFindItem(&v8, a2, a3))
      {
        v7 = 0;
        v8 = 0uLL;
        if (!DERDecodeSeqNext(v9, &v7))
          continue;
      }
      return result;
    }
    *(_QWORD *)a3 = a2;
    result = v8;
    *(__n128 *)(a3 + 8) = v8;
  }
  return result;
}

uint64_t DERDecodeSequenceWithBlock(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t result;
  unint64_t v5[3];
  char v6;
  unsigned __int8 *v7[2];

  v3 = &a1[1][(_QWORD)*a1];
  v7[0] = *a1;
  v7[1] = v3;
  v6 = 0;
  while (1)
  {
    memset(v5, 0, sizeof(v5));
    LODWORD(result) = DERDecodeSeqNext(v7, v5);
    if ((_DWORD)result)
      break;
    LODWORD(result) = (*(uint64_t (**)(uint64_t, unint64_t *, char *))(a2 + 16))(a2, v5, &v6);
    if ((_DWORD)result)
      break;
    if (v6)
      return 0;
  }
  if ((_DWORD)result == 1)
    return 0;
  else
    return result;
}

void OVM::InterpreterImpl::RunSubroutine(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((_QWORD *)__cxa_begin_catch(a1) + 1);
  v5 = *(_QWORD *)(v4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v4;
  *(_QWORD *)(a3 + 16) = v5;
  __cxa_end_catch();
}

void OVM::InterpreterImpl::Evaluate()
{
  __assert_rtn("Evaluate", "OVMInterpreter.mm", 150, "expr");
}

uint64_t std::make_unique[abi:ne180100]<OVM::ObjCMessage,std::unique_ptr<OVM::Expression>,std::vector<std::unique_ptr<OVM::Expression>>,std::string,OVM::TypeInfo::Type>(void **a1, uint64_t *a2)
{
  uint64_t result;
  void **v4;

  v4 = a1;
  std::vector<std::unique_ptr<OVM::Expression>>::__destroy_vector::operator()[abi:ne180100](&v4);
  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CircularBufferInit_cold_1()
{
  __assert_rtn("CircularBufferInit", "CircularBuffer.c", 46, "cb->buff_start + memSize - CIRCULAR_BUFFER_OVERHEAD == cb->buff_end");
}

void CircularBufferAddScattered_cold_1()
{
  __assert_rtn("CircularBufferAddScattered", "CircularBuffer.c", 73, "cb->buff_end - cb->buff_start > entrySize + CIRCULAR_BUFFER_LENGTHSIZE");
}

void ReadCircular_cold_1()
{
  __assert_rtn("ReadCircular", "CircularBuffer.c", 147, "to_end >= 0");
}

void CircularWrite_cold_1()
{
  __assert_rtn("CircularWrite", "CircularBuffer.c", 177, "to_end >= 0");
}

uint64_t sub_1C35B6924()
{
  return MEMORY[0x1E0CAE518]();
}

uint64_t sub_1C35B6930()
{
  return MEMORY[0x1E0CAE8B8]();
}

uint64_t sub_1C35B693C()
{
  return MEMORY[0x1E0CAE8D0]();
}

uint64_t sub_1C35B6948()
{
  return MEMORY[0x1E0CAE8F0]();
}

uint64_t sub_1C35B6954()
{
  return MEMORY[0x1E0CAE8F8]();
}

uint64_t sub_1C35B6960()
{
  return MEMORY[0x1E0CAE908]();
}

uint64_t sub_1C35B696C()
{
  return MEMORY[0x1E0CAE910]();
}

uint64_t sub_1C35B6978()
{
  return MEMORY[0x1E0CAEE50]();
}

uint64_t sub_1C35B6984()
{
  return MEMORY[0x1E0CAEEB8]();
}

uint64_t sub_1C35B6990()
{
  return MEMORY[0x1E0CAEEC0]();
}

uint64_t sub_1C35B699C()
{
  return MEMORY[0x1E0CAEEC8]();
}

uint64_t sub_1C35B69A8()
{
  return MEMORY[0x1E0CAEED0]();
}

uint64_t sub_1C35B69B4()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t sub_1C35B69C0()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t sub_1C35B69CC()
{
  return MEMORY[0x1E0CAFB58]();
}

uint64_t sub_1C35B69D8()
{
  return MEMORY[0x1E0CB0088]();
}

uint64_t sub_1C35B69E4()
{
  return MEMORY[0x1E0CB00F0]();
}

uint64_t sub_1C35B69F0()
{
  return MEMORY[0x1E0CB0110]();
}

uint64_t sub_1C35B69FC()
{
  return MEMORY[0x1E0CB0140]();
}

uint64_t sub_1C35B6A08()
{
  return MEMORY[0x1E0CB0158]();
}

uint64_t sub_1C35B6A14()
{
  return MEMORY[0x1E0CB0160]();
}

uint64_t sub_1C35B6A20()
{
  return MEMORY[0x1E0CB0188]();
}

uint64_t sub_1C35B6A2C()
{
  return MEMORY[0x1E0CB01B0]();
}

uint64_t sub_1C35B6A38()
{
  return MEMORY[0x1E0CB01C0]();
}

uint64_t sub_1C35B6A44()
{
  return MEMORY[0x1E0CB01F0]();
}

uint64_t sub_1C35B6A50()
{
  return MEMORY[0x1E0CB01F8]();
}

uint64_t sub_1C35B6A5C()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t sub_1C35B6A68()
{
  return MEMORY[0x1E0CB0240]();
}

uint64_t sub_1C35B6A74()
{
  return MEMORY[0x1E0CB0260]();
}

uint64_t sub_1C35B6A80()
{
  return MEMORY[0x1E0CB0298]();
}

uint64_t sub_1C35B6A8C()
{
  return MEMORY[0x1E0CB02B0]();
}

uint64_t sub_1C35B6A98()
{
  return MEMORY[0x1E0CB02B8]();
}

uint64_t sub_1C35B6AA4()
{
  return MEMORY[0x1E0CB02C0]();
}

uint64_t sub_1C35B6AB0()
{
  return MEMORY[0x1E0CB02D8]();
}

uint64_t sub_1C35B6ABC()
{
  return MEMORY[0x1E0CB03A8]();
}

uint64_t sub_1C35B6AC8(void)
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t sub_1C35B6AD4()
{
  return MEMORY[0x1E0DF2248]();
}

uint64_t sub_1C35B6AE0()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t sub_1C35B6AEC()
{
  return MEMORY[0x1E0CA92A8]();
}

uint64_t sub_1C35B6AF8()
{
  return MEMORY[0x1E0CA92B0]();
}

uint64_t sub_1C35B6B04()
{
  return MEMORY[0x1E0CA92C8]();
}

uint64_t sub_1C35B6B10()
{
  return MEMORY[0x1E0CA92E0]();
}

uint64_t sub_1C35B6B1C()
{
  return MEMORY[0x1E0CA92F8]();
}

uint64_t sub_1C35B6B28()
{
  return MEMORY[0x1E0CA9318]();
}

uint64_t sub_1C35B6B34()
{
  return MEMORY[0x1E0CA9328]();
}

uint64_t sub_1C35B6B40()
{
  return MEMORY[0x1E0CA9338]();
}

uint64_t sub_1C35B6B4C()
{
  return MEMORY[0x1E0CA9348]();
}

uint64_t sub_1C35B6B58()
{
  return MEMORY[0x1E0CA95B0]();
}

uint64_t sub_1C35B6B64()
{
  return MEMORY[0x1E0CA95B8]();
}

uint64_t sub_1C35B6B70()
{
  return MEMORY[0x1E0CA95C0]();
}

uint64_t sub_1C35B6B7C()
{
  return MEMORY[0x1E0CA95E8]();
}

uint64_t sub_1C35B6B88()
{
  return MEMORY[0x1E0CA9600]();
}

uint64_t sub_1C35B6B94()
{
  return MEMORY[0x1E0CA9618]();
}

uint64_t sub_1C35B6BA0()
{
  return MEMORY[0x1E0CA9628]();
}

uint64_t sub_1C35B6BAC()
{
  return MEMORY[0x1E0CA9630]();
}

uint64_t sub_1C35B6BB8()
{
  return MEMORY[0x1E0CA9638]();
}

uint64_t sub_1C35B6BC4()
{
  return MEMORY[0x1E0CA9640]();
}

uint64_t sub_1C35B6BD0()
{
  return MEMORY[0x1E0CA9680]();
}

uint64_t sub_1C35B6BDC()
{
  return MEMORY[0x1E0CA9690]();
}

uint64_t sub_1C35B6BE8()
{
  return MEMORY[0x1E0CA9940]();
}

uint64_t sub_1C35B6BF4()
{
  return MEMORY[0x1E0CA9958]();
}

uint64_t sub_1C35B6C00()
{
  return MEMORY[0x1E0CA9988]();
}

uint64_t sub_1C35B6C0C()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_1C35B6C18()
{
  return MEMORY[0x1E0CB1808]();
}

uint64_t sub_1C35B6C24()
{
  return MEMORY[0x1E0DE9E58]();
}

uint64_t sub_1C35B6C30()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t sub_1C35B6C3C()
{
  return MEMORY[0x1E0DEA270]();
}

uint64_t sub_1C35B6C48()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t sub_1C35B6C54()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1C35B6C60()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1C35B6C6C()
{
  return MEMORY[0x1E0CB19C0]();
}

uint64_t sub_1C35B6C78()
{
  return MEMORY[0x1E0DEA5F8]();
}

uint64_t sub_1C35B6C84()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_1C35B6C90()
{
  return MEMORY[0x1E0DEA7B8]();
}

uint64_t sub_1C35B6C9C()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_1C35B6CA8()
{
  return MEMORY[0x1E0DEA840]();
}

uint64_t sub_1C35B6CB4()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_1C35B6CC0()
{
  return MEMORY[0x1E0DEA958]();
}

uint64_t sub_1C35B6CCC()
{
  return MEMORY[0x1E0DEADA0]();
}

uint64_t sub_1C35B6CD8()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_1C35B6CE4()
{
  return MEMORY[0x1E0DEADB0]();
}

uint64_t sub_1C35B6CF0()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t sub_1C35B6CFC()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t sub_1C35B6D08()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t sub_1C35B6D14()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t sub_1C35B6D20()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t sub_1C35B6D2C()
{
  return MEMORY[0x1E0CB1CB0]();
}

uint64_t sub_1C35B6D38()
{
  return MEMORY[0x1E0DF2270]();
}

uint64_t sub_1C35B6D44()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t sub_1C35B6D50(void)
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t sub_1C35B6D5C()
{
  return MEMORY[0x1E0DF2288]();
}

uint64_t sub_1C35B6D68()
{
  return MEMORY[0x1E0DF2290]();
}

uint64_t sub_1C35B6D74()
{
  return MEMORY[0x1E0CB1FF0]();
}

uint64_t sub_1C35B6D80()
{
  return MEMORY[0x1E0CB20E0]();
}

uint64_t sub_1C35B6D8C()
{
  return MEMORY[0x1E0DEBB68]();
}

uint64_t sub_1C35B6D98()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t sub_1C35B6DA4()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t sub_1C35B6DB0()
{
  return MEMORY[0x1E0CB2588]();
}

uint64_t sub_1C35B6DBC()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t sub_1C35B6DC8()
{
  return MEMORY[0x1E0DEC050]();
}

uint64_t sub_1C35B6DD4()
{
  return MEMORY[0x1E0DEC168]();
}

uint64_t sub_1C35B6DE0()
{
  return MEMORY[0x1E0DEC178]();
}

uint64_t sub_1C35B6DEC()
{
  return MEMORY[0x1E0DEC1B0]();
}

uint64_t sub_1C35B6DF8()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t sub_1C35B6E04()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t sub_1C35B6E10()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_1C35B6E1C()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_1C35B6E28()
{
  return MEMORY[0x1E0DEC3A8]();
}

uint64_t sub_1C35B6E34()
{
  return MEMORY[0x1E0DEC3B0]();
}

uint64_t sub_1C35B6E40()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t sub_1C35B6E4C()
{
  return MEMORY[0x1E0DEC3E8]();
}

uint64_t sub_1C35B6E58()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_1C35B6E64()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t sub_1C35B6E70()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t sub_1C35B6E7C()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t sub_1C35B6E88()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t sub_1C35B6E94()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t sub_1C35B6EA0()
{
  return MEMORY[0x1E0DEC8A0]();
}

uint64_t sub_1C35B6EAC()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t sub_1C35B6EB8()
{
  return MEMORY[0x1E0DECAB0]();
}

uint64_t sub_1C35B6EC4()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t sub_1C35B6ED0()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_1C35B6EDC()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t sub_1C35B6EE8()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t sub_1C35B6EF4()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t sub_1C35B6F00()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1C35B6F0C()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t sub_1C35B6F18()
{
  return MEMORY[0x1E0DECF28]();
}

uint64_t sub_1C35B6F24()
{
  return MEMORY[0x1E0DED1A0]();
}

uint64_t sub_1C35B6F30()
{
  return MEMORY[0x1E0DED1B0]();
}

uint64_t sub_1C35B6F3C()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_1C35B6F48()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_1C35B6F54()
{
  return MEMORY[0x1E0DED9F8]();
}

uint64_t sub_1C35B6F60()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t sub_1C35B6F6C()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t sub_1C35B6F78()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t sub_1C35B6F84()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t sub_1C35B6F90()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t sub_1C35B6F9C()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t sub_1C35B6FA8()
{
  return MEMORY[0x1E0DEDEE0]();
}

uint64_t sub_1C35B6FB4()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_1C35B6FC0()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_1C35B6FCC()
{
  return MEMORY[0x1E0DEDF18]();
}

uint64_t sub_1C35B6FD8()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_1C35B6FE4()
{
  return MEMORY[0x1E0DEDF80]();
}

uint64_t sub_1C35B6FF0()
{
  return MEMORY[0x1E0DEDFF8]();
}

uint64_t sub_1C35B6FFC()
{
  return MEMORY[0x1E0DEE000]();
}

uint64_t sub_1C35B7008()
{
  return MEMORY[0x1E0DEE978]();
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80368](data, *(_QWORD *)&len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80370](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80378](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80380](c, data, *(_QWORD *)&len);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return MEMORY[0x1E0D4E4A0]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

const char *__cdecl std::exception::what(const std::exception *this)
{
  return (const char *)MEMORY[0x1E0DE4270](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4310](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1E0DE4D88]();
}

std::bad_cast *__cdecl std::bad_cast::bad_cast(std::bad_cast *this)
{
  return (std::bad_cast *)MEMORY[0x1E0DE4D90](this);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

void operator delete(void *__p)
{
  off_1E7D895B0(__p);
}

uint64_t operator delete()
{
  return off_1E7D895B8();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E7D895C0(__sz);
}

uint64_t operator new()
{
  return off_1E7D895C8();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1E0C80C48]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
  MEMORY[0x1E0C81580](__buf, __nbytes);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1E0C81608](a1, a2);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

size_t compression_decode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE5270](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(_QWORD *)&algorithm);
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

long double ldexp(long double __x, int __e)
{
  long double result;

  MEMORY[0x1E0C83B40](*(_QWORD *)&__e, __x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1E0C84940]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

SEL sel_getUid(const char *str)
{
  return (SEL)MEMORY[0x1E0DE80D0](str);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85698](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_deallocUninitializedObject()
{
  return MEMORY[0x1E0DEEB70]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1E0DEEC38]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1E0DEEDC8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1E0DEEEC8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1E0DEEED8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x1E0C85A58](a1, a2, a3);
}

