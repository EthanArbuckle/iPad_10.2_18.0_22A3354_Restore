CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::string const&>(CFStringRef *a1, const UInt8 *a2, uint64_t a3)
{
  CFIndex v5;
  CFIndex v6;
  CFStringRef v7;
  int v8;
  const UInt8 *v9;
  CFIndex v10;
  CFStringRef v11;
  void *exception;
  void *v14;

  v5 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v6 = v5;
  }
  v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x219A00AF0](exception, "Could not construct");
  }
  v8 = *(char *)(a3 + 23);
  if (v8 >= 0)
    v9 = (const UInt8 *)a3;
  else
    v9 = *(const UInt8 **)a3;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a3 + 23);
  else
    v10 = *(_QWORD *)(a3 + 8);
  v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
  a1[1] = v11;
  if (!v11)
  {
    v14 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x219A00AF0](v14, "Could not construct");
  }
  return a1;
}

void sub_216CFD26C(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

void rtaid::DetectorNode::~DetectorNode(OpaqueAudioComponentInstance **this)
{
  unsigned __int8 v2;
  NSObject *v3;
  _QWORD *v4;
  OpaqueAudioComponentInstance *v5;
  OpaqueAudioComponentInstance *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  rtaid::DetectorNode *v16;
  __int16 v17;
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  v3 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
  {
    v4 = this + 1;
    if (*((char *)this + 31) < 0)
      v4 = (_QWORD *)*v4;
    v7 = 136316418;
    v8 = "DetectorNode.cpp";
    v9 = 1024;
    v10 = 72;
    v11 = 1040;
    v12 = 19;
    v13 = 2080;
    v14 = "rtaid::DetectorNode]";
    v15 = 2048;
    v16 = (rtaid::DetectorNode *)this;
    v17 = 2080;
    v18 = v4;
    _os_log_impl(&dword_216CFB000, v3, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] destroyed %s", (uint8_t *)&v7, 0x36u);
  }
  std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100]((uint64_t)(this + 52));
  v5 = this[27];
  if (v5)
  {
    this[28] = v5;
    operator delete(v5);
  }
  v6 = this[24];
  if (v6)
  {
    this[25] = v6;
    operator delete(v6);
  }
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 17));
  rtaid::NodeFormatConverter::~NodeFormatConverter((rtaid::NodeFormatConverter *)(this + 5));
  std::unique_ptr<OpaqueAudioComponentInstance,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioComponentInstance*,&(AudioComponentInstanceDispose)>>::reset[abi:ne180100](this + 4, 0);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void rtaid::Detector::checkAndResetAnalyzers(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  const char *v10;
  OpaqueAudioComponentInstance *v11;
  OSStatus v12;
  float v13;
  unsigned int v14;
  unsigned int v15;
  OSStatus v16;
  float v17;
  unsigned int v18;
  unsigned int v19;
  OSStatus v20;
  float v21;
  unsigned int v22;
  unsigned int v23;
  OSStatus v24;
  float v25;
  unsigned int v26;
  int v27;
  float v28;
  OSStatus v29;
  AudioUnitParameterValue v30;
  float v31;
  unsigned int v32;
  char *v33;
  float v34;
  float *v35;
  uint64_t v36;
  float *v37;
  float *v38;
  float v39;
  float v40;
  float v41;
  float v42;
  char *v43;
  int v44;
  unint64_t v45;
  OpaqueAudioComponentInstance *v46;
  OSStatus Parameter;
  float v48;
  unsigned int v49;
  unsigned int v50;
  OSStatus v51;
  float v52;
  unsigned int v53;
  OpaqueAudioComponentInstance *v54;
  uint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *__dst;
  float *v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  _BOOL4 v68;
  unsigned int v69;
  char *v70;
  AudioUnitParameterValue v72;
  AudioUnitParameterValue v73;
  AudioUnitParameterValue outValue;
  AudioUnitParameterValue v75;
  AudioUnitParameterValue v76;
  AudioUnitParameterValue v77;
  AudioUnitParameterValue v78;
  uint8_t v79[496];
  uint64_t v80;

  v2 = a2;
  v4 = 0;
  v80 = *MEMORY[0x24BDAC8D0];
  v5 = (char *)(a1 + 96);
  v6 = a1 + 416;
  __dst = (char *)(a1 + 288);
  v64 = (float *)(a1 + 384);
  v65 = (_QWORD *)(a1 + 364);
  v70 = (char *)(a1 + 96);
  do
  {
    v7 = *v2;
    v8 = (unsigned __int8 *)(*v2 + 408);
    do
    {
      if (__ldaxr(v8))
      {
        __clrex();
        goto LABEL_90;
      }
    }
    while (__stlxr(1u, v8));
    v10 = (const char *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0)
      v10 = *(const char **)v10;
    strncpy(v5, v10, 0xC0uLL);
    *(_DWORD *)(a1 + 356) = v4;
    *(_BYTE *)(a1 + 360) = *(_BYTE *)(v7 + 188);
    switch((int)v4)
    {
      case 0:
        if (!*(_BYTE *)(v7 + 159) && !*(_BYTE *)(v7 + 152))
          goto LABEL_89;
        v46 = *(OpaqueAudioComponentInstance **)(v7 + 32);
        if (!v46)
          goto LABEL_89;
        v72 = 0.0;
        Parameter = AudioUnitGetParameter(v46, 4u, 0, 0, &v72);
        v48 = v72;
        if (Parameter)
          v48 = 0.0;
        v49 = v48;
        if (Parameter)
          v50 = 0;
        else
          v50 = v49;
        v73 = 0.0;
        v51 = AudioUnitGetParameter(v46, 5u, 0, 0, &v73);
        v52 = v73;
        if (v51)
          v52 = 0.0;
        v53 = v52;
        if (v51)
          v53 = 0;
        if (v50 | v53)
        {
          *(_DWORD *)(a1 + 364) = v50;
          *(_DWORD *)(a1 + 368) = v53;
        }
        v54 = *(OpaqueAudioComponentInstance **)(v7 + 32);
        v68 = (v50 | v53) != 0;
        if (v54)
        {
          AudioUnitSetParameter(v54, 4u, 0, 0, 0.0, 0);
          AudioUnitSetParameter(v54, 5u, 0, 0, 0.0, 0);
        }
        goto LABEL_74;
      case 1:
      case 2:
        if (!*(_BYTE *)(v7 + v4 + 159) && !*(_BYTE *)(v7 + v4 + 152))
          goto LABEL_89;
        v11 = *(OpaqueAudioComponentInstance **)(v7 + 32);
        if (!v11)
          goto LABEL_89;
        outValue = 0.0;
        v12 = AudioUnitGetParameter(v11, 0, 0, 0, &outValue);
        v13 = outValue;
        if (v12)
          v13 = 0.0;
        v14 = v13;
        if (v12)
          v15 = 0;
        else
          v15 = v14;
        v75 = 0.0;
        v16 = AudioUnitGetParameter(v11, 1u, 0, 0, &v75);
        v17 = v75;
        if (v16)
          v17 = 0.0;
        v18 = v17;
        if (v16)
          v19 = 0;
        else
          v19 = v18;
        v76 = 0.0;
        v20 = AudioUnitGetParameter(v11, 2u, 0, 0, &v76);
        v21 = v76;
        if (v20)
          v21 = 0.0;
        v22 = v21;
        if (v20)
          v23 = 0;
        else
          v23 = v22;
        v77 = 0.0;
        v24 = AudioUnitGetParameter(v11, 3u, 0, 0, &v77);
        v25 = v77;
        if (v24)
          v25 = 0.0;
        v26 = v25;
        if (v24)
          v26 = 0;
        v27 = v15 | v19 | v23 | v26;
        v68 = v27 != 0;
        if (v27)
        {
          *(_DWORD *)(a1 + 364) = v15;
          *(_DWORD *)(a1 + 368) = v19;
          *(_DWORD *)(a1 + 372) = v23;
          *(_DWORD *)(a1 + 376) = v26;
          v28 = *(double *)(v7 + 80);
          *(float *)(a1 + 380) = v28;
          v78 = 0.0;
          v29 = AudioUnitGetParameter(v11, 6u, 0, 0, &v78);
          v30 = v78;
          if (v29)
            v30 = 0.0;
          v31 = v30;
          if (v29)
            v31 = 0.0;
          *(float *)(a1 + 384) = v31;
        }
        rtaid::DetectorNode::resetSilenceAnalyzerErrorState(*(OpaqueAudioComponentInstance **)(v7 + 32));
LABEL_74:
        atomic_store(0, v8);
        v5 = v70;
        v2 = a2;
        if (!v68)
          break;
        goto LABEL_82;
      case 4:
        if (!*(_BYTE *)(v7 + 163) && !*(_BYTE *)(v7 + 156))
          goto LABEL_89;
        v44 = *(_DWORD *)(v7 + 168);
        if (v44)
        {
          *v65 = 0;
          v65[1] = 0;
          if (*(_DWORD *)(v7 + 168))
          {
            v45 = 0;
            do
            {
              *((_DWORD *)v65 + v45) = *(_DWORD *)(v7 + 172 + 4 * v45);
              ++v45;
            }
            while (v45 < *(unsigned int *)(v7 + 168));
          }
        }
        if (*(_BYTE *)(v7 + 257))
        {
          strlcpy(__dst, (const char *)(v7 + 257), 0x40uLL);
          *(_DWORD *)(a1 + 576) = *(_DWORD *)(v7 + 404);
          *(_OWORD *)(v7 + 257) = 0u;
          *(_OWORD *)(v7 + 273) = 0u;
          *(_OWORD *)(v7 + 289) = 0u;
          *(_OWORD *)(v7 + 305) = 0u;
          *(_OWORD *)(v7 + 321) = 0u;
          *(_OWORD *)(v7 + 337) = 0u;
          *(_OWORD *)(v7 + 353) = 0u;
          *(_OWORD *)(v7 + 369) = 0u;
          *(_OWORD *)(v7 + 385) = 0u;
          *(_DWORD *)(v7 + 404) = 0;
          v5 = v70;
          v2 = a2;
        }
        *(_DWORD *)(v7 + 168) = 0;
        atomic_store(0, (unsigned __int8 *)(v7 + 408));
        if (!v44)
          break;
        goto LABEL_82;
      case 5:
      case 6:
        if (!*(_BYTE *)(v7 + v4 + 159) && !*(_BYTE *)(v7 + v4 + 152))
          goto LABEL_89;
        v32 = *(_DWORD *)(v7 + 244);
        if (v32)
        {
          v69 = *(_DWORD *)(v7 + 244);
          v33 = *(char **)(v7 + 192);
          v66 = *(char **)(v7 + 200);
          v67 = v66 - v33;
          if (v66 != v33)
          {
            v34 = (float)v32;
            v35 = *(float **)(v7 + 216);
            if ((unint64_t)(v67 >> 2) <= 1)
              v36 = 1;
            else
              v36 = v67 >> 2;
            v37 = v64;
            v38 = *(float **)(v7 + 192);
            do
            {
              v39 = *v38++;
              v40 = (float)(v39 / v34) + 1.0e-12;
              *(v37 - 1) = log10f(v40) * 10.0;
              v41 = *v35++;
              v42 = v41 + 1.0e-12;
              *v37 = log10f(v42) * 20.0;
              v37 += 2;
              --v36;
            }
            while (v36);
          }
          *(_DWORD *)(a1 + 372) = (unint64_t)v67 >> 2;
          *(_DWORD *)(a1 + 364) = *(unsigned __int8 *)(v7 + 256);
          *(_DWORD *)(a1 + 368) = *(_DWORD *)(v7 + 248);
          v5 = v70;
          v2 = a2;
          v32 = v69;
          v43 = v66;
        }
        else
        {
          v33 = *(char **)(v7 + 192);
          v43 = *(char **)(v7 + 200);
        }
        v55 = v43 - v33;
        if (v55)
        {
          v56 = v55 >> 2;
          v57 = *(_DWORD **)(v7 + 216);
          if (v56 <= 1)
            v56 = 1;
          do
          {
            *(_DWORD *)v33 = 0;
            v33 += 4;
            *v57++ = 0;
            --v56;
          }
          while (v56);
        }
        *(_DWORD *)(v7 + 244) = 0;
        atomic_store(0, (unsigned __int8 *)(v7 + 408));
        if (v32)
        {
LABEL_82:
          *(_DWORD *)(a1 + 352) = *(_DWORD *)a1;
          v58 = *(_QWORD *)(a1 + 592);
          v59 = (*(_QWORD *)(a1 + 600) - v58) >> 3;
          if (v59 >= 0x10)
            v59 = 16;
          *(_BYTE *)(a1 + 412) = v59;
          if (v59)
          {
            v60 = 0;
            v61 = *(_QWORD *)(a1 + 616);
            do
            {
              *(_QWORD *)(v6 + 8 * v60) = *(_QWORD *)(v58 + 8 * v60);
              *(_WORD *)(v6 + 2 * v60 + 128) = *(_WORD *)(v61 + 2 * v60);
              ++v60;
            }
            while (v59 != v60);
          }
          *(_QWORD *)(a1 + 584) = v2[3];
          memcpy(v79, v5, sizeof(v79));
          v62 = *(_QWORD *)(a1 + 88);
          if (!v62)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v62 + 48))(v62, v79);
        }
        break;
      default:
LABEL_89:
        atomic_store(0, v8);
        break;
    }
LABEL_90:
    ++v4;
  }
  while (v4 != 7);
  v2[3] = 0;
}

void sub_216CFDBA8(_Unwind_Exception *a1)
{
  unsigned __int8 *v1;

  atomic_store(0, v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  int v9;
  int v10;
  const std::vector<std::csub_match>::value_type *v11;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;
  const std::vector<std::csub_match>::value_type *v14;
  std::sub_match<const char *> *first;
  std::sub_match<const char *> *second;
  uint64_t result;
  int v18;
  const char *v19;
  int v20;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0)
    this[4].__end_ = a2;
  LOBYTE(this[4].__begin_) = 1;
  if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (a2 == a3 || (v9 & 0x40) != 0)
      goto LABEL_18;
    v18 = v9 | 0x80;
    v19 = (char *)&a2->first + 1;
    if (v19 != (const char *)a3)
    {
      do
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        v20 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v19, (const char *)a3, (uint64_t *)this, v18, 0);
        begin = this->__begin_;
        end = this->__end_;
        if (v20)
          goto LABEL_8;
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), v11);
      }
      while (++v19 != (const char *)a3);
    }
    std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
    if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v18, 0))
    {
LABEL_18:
      result = 0;
      this->__end_ = this->__begin_;
      return result;
    }
  }
  begin = this->__begin_;
  end = this->__end_;
LABEL_8:
  if (end == begin)
    v14 = v11;
  else
    v14 = begin;
  first = (std::sub_match<const char *> *)v14->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)v14->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)v14->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  std::vector<std::csub_match>::pointer v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::pair<const char *, const char *> v14;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::size_type v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    end = this->__end_;
    v16 = end - begin;
    if (v16 >= __n)
      v17 = __n;
    else
      v17 = end - begin;
    if (v17)
    {
      v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v19 = &end[__n - v16];
      v20 = 24 * __n - 24 * v16;
      do
      {
        v21 = __u->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](this, v10);
    v11 = this->__end_;
    v12 = &v11[__n];
    v13 = 24 * __n;
    do
    {
      v14 = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v11->matched = *(_QWORD *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  signed int v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  const char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  uint64_t *v36;
  const char *v37;
  _BYTE v39[56];
  void *__p[2];
  _QWORD v41[4];
  std::vector<std::csub_match>::value_type __x;
  char *v43;
  char *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v39 = 0;
    memset(&v39[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v41, 0, 21);
    v44 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v43, (uint64_t)v39);
    if (__p[0])
      operator delete(__p[0]);
    if (*(_QWORD *)&v39[32])
      operator delete(*(void **)&v39[32]);
    v36 = a4;
    v12 = v44;
    *((_DWORD *)v44 - 24) = 0;
    *((_QWORD *)v12 - 11) = a2;
    *((_QWORD *)v12 - 10) = a2;
    *((_QWORD *)v12 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v12 - 64), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v44 - 40), *(unsigned int *)(a1 + 32));
    v37 = a3;
    v13 = (_DWORD)a3 - (_DWORD)a2;
    v14 = v44;
    *((_QWORD *)v44 - 2) = v6;
    *((_DWORD *)v14 - 2) = a5;
    *(v14 - 4) = a6;
    v15 = 1;
    while (2)
    {
      if ((v15 & 0xFFF) == 0 && (int)(v15 >> 12) >= v13)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v17 = v14 - 16;
      v16 = *((_QWORD *)v14 - 2);
      v18 = v14 - 96;
      if (v16)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v16 + 16))(v16, v14 - 96);
      switch(*(_DWORD *)v18)
      {
        case 0xFFFFFC18:
          v19 = (const char *)*((_QWORD *)v14 - 10);
          if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != v37)
            goto LABEL_16;
          v27 = *v36;
          *(_QWORD *)v27 = a2;
          *(_QWORD *)(v27 + 8) = v19;
          *(_BYTE *)(v27 + 16) = 1;
          v28 = *((_QWORD *)v14 - 8);
          v29 = *((_QWORD *)v14 - 7) - v28;
          if (v29)
          {
            v30 = 0xAAAAAAAAAAAAAAABLL * (v29 >> 3);
            v31 = (_BYTE *)(v28 + 16);
            v32 = 1;
            do
            {
              v33 = v27 + 24 * v32;
              *(_OWORD *)v33 = *((_OWORD *)v31 - 1);
              v34 = *v31;
              v31 += 24;
              *(_BYTE *)(v33 + 16) = v34;
            }
            while (v30 > v32++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v20 = v44 - 96;
          std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)v44 - 12);
          v44 = v20;
          goto LABEL_23;
        case 0xFFFFFC20:
          v21 = *((_OWORD *)v14 - 5);
          *(_OWORD *)v39 = *(_OWORD *)v18;
          *(_OWORD *)&v39[16] = v21;
          memset(&v39[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v39[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v41[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          v22 = *(_QWORD *)v17;
          *(_QWORD *)((char *)&v41[1] + 5) = *(_QWORD *)(v14 - 11);
          v41[1] = v22;
          (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v17 + 24))(*(_QWORD *)v17, 1, v14 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v41[1] + 24))(v41[1], 0, v39);
          v23 = v44;
          if ((unint64_t)v44 >= v45)
          {
            v44 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v43, (uint64_t)v39);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v24 = *(_OWORD *)&v39[16];
            *(_OWORD *)v44 = *(_OWORD *)v39;
            *((_OWORD *)v23 + 1) = v24;
            *((_QWORD *)v23 + 4) = 0;
            *((_QWORD *)v23 + 5) = 0;
            *((_QWORD *)v23 + 6) = 0;
            *((_QWORD *)v23 + 7) = 0;
            *((_OWORD *)v23 + 2) = *(_OWORD *)&v39[32];
            *((_QWORD *)v23 + 6) = *(_QWORD *)&v39[48];
            memset(&v39[32], 0, 24);
            *((_QWORD *)v23 + 8) = 0;
            *((_QWORD *)v23 + 9) = 0;
            *(_OWORD *)(v23 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v23 + 9) = v41[0];
            __p[0] = 0;
            __p[1] = 0;
            v41[0] = 0;
            v25 = v41[1];
            *(_QWORD *)(v23 + 85) = *(_QWORD *)((char *)&v41[1] + 5);
            *((_QWORD *)v23 + 10) = v25;
            v44 = v23 + 96;
          }
          if (*(_QWORD *)&v39[32])
          {
            *(_QWORD *)&v39[40] = *(_QWORD *)&v39[32];
            operator delete(*(void **)&v39[32]);
          }
LABEL_23:
          v14 = v44;
          ++v15;
          if (v43 != v44)
            continue;
          v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(_QWORD *)v39 = &v43;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  return v6;
}

void sub_216CFE28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char *current;
  char *last;
  char v6;
  char v7;
  uint64_t v8;
  _BOOL4 negate;
  std::string::size_type size;
  int v11;
  std::string::size_type v12;
  std::string *p_s;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v15;
  uint64_t v16;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  std::string::size_type v24;
  unsigned __int8 v25;
  std::vector<char>::pointer v26;
  unint64_t v27;
  int v28;
  std::regex_traits<char>::char_class_type v29;
  int v30;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v32;
  char *v33;
  std::vector<std::pair<std::string, std::string>>::pointer v34;
  std::vector<std::pair<std::string, std::string>>::pointer v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  std::vector<std::string>::pointer v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  std::string::size_type v46;
  uint64_t v47;
  BOOL v48;
  std::string *v49;
  std::string::size_type v50;
  int v51;
  std::string *v52;
  std::string *v53;
  uint64_t v54;
  std::string::size_type v55;
  int v56;
  std::regex_traits<char>::char_class_type v57;
  int v58;
  std::vector<std::string>::pointer v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  unint64_t v63;
  __int128 v64;
  std::string::size_type v65;
  uint64_t v66;
  BOOL v67;
  std::string *v68;
  std::string::size_type v69;
  int v70;
  std::string *v71;
  std::string *v72;
  uint64_t v73;
  int v74;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v77;
  std::regex_traits<char>::char_class_type neg_mask;
  int v79;
  std::__node<char> *first;
  int v81;
  std::string *v82;
  _BOOL4 v83;
  unint64_t v84;
  uint64_t v85;
  std::string __p;
  __int16 v87;
  std::string v88;
  std::string __s;

  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v8 = 0;
    negate = this->__negate_;
    goto LABEL_172;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_36;
  v6 = *current;
  LOBYTE(v87) = *current;
  v7 = current[1];
  HIBYTE(v87) = v7;
  if (this->__icase_)
  {
    LOBYTE(v87) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v87) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v87;
  __s.__r_.__value_.__s.__data_[2] = 0;
  memset(&__p, 0, sizeof(__p));
  std::__get_collation_name(&v88, (const char *)&__s);
  __p = v88;
  size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
  v11 = SHIBYTE(v88.__r_.__value_.__r.__words[2]);
  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v88.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_11;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_11;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    v12 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      goto LABEL_16;
    p_s = &__s;
  }
  (*(void (**)(std::string *__return_ptr, const std::collate<char> *, std::string *, char *))(*(_QWORD *)this->__traits_.__col_ + 32))(&v88, this->__traits_.__col_, p_s, (char *)p_s + v12);
  if (v11 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v88;
  if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v88.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v88.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_11;
    }
    goto LABEL_115;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_115:
    std::string::operator=(&__p, &__s);
    goto LABEL_11;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_11:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_16:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v24 = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v24)
      goto LABEL_18;
LABEL_36:
    negate = 0;
    v8 = 1;
    goto LABEL_37;
  }
  if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
    goto LABEL_36;
LABEL_18:
  begin = this->__digraphs_.__begin_;
  v15 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v15)
  {
    v16 = v15 >> 1;
    if ((unint64_t)(v15 >> 1) <= 1)
      v16 = 1;
    p_second = &begin->second;
    while (v87 != *(p_second - 1) || HIBYTE(v87) != *p_second)
    {
      p_second += 2;
      if (!--v16)
        goto LABEL_27;
    }
    goto LABEL_169;
  }
LABEL_27:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v87, (char *)&v88);
    v19 = this->__ranges_.__begin_;
    v20 = (char *)this->__ranges_.__end_ - (char *)v19;
    if (v20)
    {
      v21 = 0;
      v22 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 4);
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v19, &__s) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s, v19->second.__r_.__value_.__r.__words) << 24) >= 0x1000000)
      {
        ++v21;
        ++v19;
        if (v21 >= v22)
          goto LABEL_34;
      }
      negate = 1;
      v23 = 5;
    }
    else
    {
LABEL_34:
      negate = 0;
      v23 = 0;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (negate)
      goto LABEL_147;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_151:
    if ((char)v87 < 0)
    {
      neg_mask = this->__neg_mask_;
    }
    else
    {
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v77 = tab[v87];
      if (((v77 & mask) != 0 || v87 == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(v87) & 0x80000000) == 0
        && ((tab[HIBYTE(v87)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(v87) == 95))
      {
        goto LABEL_169;
      }
      neg_mask = this->__neg_mask_;
      if ((v77 & neg_mask) != 0 || v87 == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_168:
        v79 = negate;
LABEL_170:
        negate = v79;
        goto LABEL_171;
      }
    }
    if ((SHIBYTE(v87) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(v87)] & neg_mask) == 0)
      {
        v79 = 1;
        if (HIBYTE(v87) != 95 || (neg_mask & 0x80) == 0)
          goto LABEL_170;
      }
      goto LABEL_168;
    }
LABEL_169:
    v79 = 1;
    goto LABEL_170;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v87, (char *)&v88);
  v59 = this->__equivalences_.__begin_;
  v60 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v61 = (char *)this->__equivalences_.__end_ - (char *)v59;
  if (!v61)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_151;
  }
  v62 = 0;
  v63 = v61 / 24;
  v64 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v65 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v65 = __s.__r_.__value_.__l.__size_;
  if (v63 <= 1)
    v66 = 1;
  else
    v66 = v61 / 24;
  v67 = 1;
  while (1)
  {
    v68 = &v59[v62];
    v69 = HIBYTE(v68->__r_.__value_.__r.__words[2]);
    v70 = (char)v69;
    if ((v69 & 0x80u) != 0)
      v69 = v68->__r_.__value_.__l.__size_;
    if (v65 != v69)
      goto LABEL_142;
    v71 = v70 >= 0 ? &v59[v62] : (std::string *)v68->__r_.__value_.__r.__words[0];
    if ((v60 & 0x80) == 0)
      break;
    v84 = v63;
    v85 = v60;
    v74 = memcmp((const void *)v64, v71, *((size_t *)&v64 + 1));
    v63 = v84;
    v60 = v85;
    if (!v74)
    {
      v23 = 5;
      negate = 1;
      goto LABEL_145;
    }
LABEL_142:
    v67 = ++v62 < v63;
    if (v62 == v66)
    {
      v23 = 0;
      goto LABEL_144;
    }
  }
  if (!(_DWORD)v60)
  {
    negate = 1;
    if (v67)
      goto LABEL_171;
    goto LABEL_151;
  }
  v72 = &__s;
  v73 = v60;
  do
  {
    if (v72->__r_.__value_.__s.__data_[0] != v71->__r_.__value_.__s.__data_[0])
      goto LABEL_142;
    v72 = (std::string *)((char *)v72 + 1);
    v71 = (std::string *)((char *)v71 + 1);
    --v73;
  }
  while (v73);
  negate = 1;
  v23 = 5;
LABEL_144:
  if ((v60 & 0x80) != 0)
LABEL_145:
    operator delete(__s.__r_.__value_.__l.__data_);
  if (!v67)
    goto LABEL_151;
LABEL_147:
  if (v23)
  {
LABEL_171:
    v8 = 2;
    goto LABEL_172;
  }
  v8 = 2;
LABEL_37:
  v25 = *a2->__current_;
  v88.__r_.__value_.__s.__data_[0] = v25;
  if (this->__icase_)
  {
    v25 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v25);
    v88.__r_.__value_.__s.__data_[0] = v25;
  }
  v26 = this->__chars_.__begin_;
  v27 = this->__chars_.__end_ - v26;
  if (v27)
  {
    if (v27 <= 1)
      v27 = 1;
    while (1)
    {
      v28 = *v26++;
      if (v28 == v25)
        break;
      if (!--v27)
        goto LABEL_44;
    }
LABEL_104:
    negate = 1;
    goto LABEL_172;
  }
LABEL_44:
  v29 = this->__neg_mask_;
  if (v29 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v25 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v25] & v29) == 0)
      v30 = (v25 == 95) & (v29 >> 7);
    else
      LOBYTE(v30) = 1;
    end = this->__neg_chars_.__end_;
    v32 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v25, end - this->__neg_chars_.__begin_);
    v33 = v32 ? v32 : end;
    if ((v30 & 1) == 0 && v33 == end)
      goto LABEL_104;
  }
  v35 = this->__ranges_.__begin_;
  v34 = this->__ranges_.__end_;
  if (v35 != v34)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v88, &v88.__r_.__value_.__s.__data_[1]);
      v35 = this->__ranges_.__begin_;
      v34 = this->__ranges_.__end_;
    }
    else
    {
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v25;
    }
    v36 = (char *)v34 - (char *)v35;
    if (v36)
    {
      v37 = 0;
      v38 = 0xAAAAAAAAAAAAAAABLL * (v36 >> 4);
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v35, &__s) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s, v35->second.__r_.__value_.__r.__words) << 24) >= 0x1000000)
      {
        ++v37;
        ++v35;
        if (v37 >= v38)
          goto LABEL_65;
      }
      v39 = 1;
      negate = 1;
    }
    else
    {
LABEL_65:
      v39 = 0;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if ((v39 & 1) != 0)
      goto LABEL_172;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_99;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v88, &v88.__r_.__value_.__s.__data_[1]);
  v40 = this->__equivalences_.__begin_;
  v41 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v42 = (char *)this->__equivalences_.__end_ - (char *)v40;
  if (!v42)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_99;
  }
  v43 = 0;
  v44 = v42 / 24;
  v45 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v46 = __s.__r_.__value_.__l.__size_;
  if (v44 <= 1)
    v47 = 1;
  else
    v47 = v42 / 24;
  v48 = 1;
  while (2)
  {
    v49 = &v40[v43];
    v50 = HIBYTE(v49->__r_.__value_.__r.__words[2]);
    v51 = (char)v50;
    if ((v50 & 0x80u) != 0)
      v50 = v49->__r_.__value_.__l.__size_;
    if (v46 != v50)
    {
LABEL_92:
      v48 = ++v43 < v44;
      if (v43 == v47)
      {
LABEL_93:
        if ((v41 & 0x80) == 0)
          goto LABEL_95;
        goto LABEL_94;
      }
      continue;
    }
    break;
  }
  if (v51 >= 0)
    v52 = &v40[v43];
  else
    v52 = (std::string *)v49->__r_.__value_.__r.__words[0];
  if ((v41 & 0x80) != 0)
  {
    v83 = negate;
    v55 = v46;
    v82 = v40;
    v56 = memcmp((const void *)v45, v52, *((size_t *)&v45 + 1));
    v40 = v82;
    v46 = v55;
    negate = v83;
    if (!v56)
    {
      negate = 1;
LABEL_94:
      operator delete(__s.__r_.__value_.__l.__data_);
      goto LABEL_95;
    }
    goto LABEL_92;
  }
  if ((_DWORD)v41)
  {
    v53 = &__s;
    v54 = v41;
    while (v53->__r_.__value_.__s.__data_[0] == v52->__r_.__value_.__s.__data_[0])
    {
      v53 = (std::string *)((char *)v53 + 1);
      v52 = (std::string *)((char *)v52 + 1);
      if (!--v54)
      {
        negate = 1;
        goto LABEL_93;
      }
    }
    goto LABEL_92;
  }
  negate = 1;
LABEL_95:
  if (!v48)
  {
LABEL_99:
    if (v88.__r_.__value_.__s.__data_[0] < 0)
      goto LABEL_172;
    v57 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v88.__r_.__value_.__s.__data_[0]] & v57) == 0)
    {
      v58 = (v57 >> 7) & 1;
      if (v88.__r_.__value_.__s.__data_[0] != 95)
        v58 = 0;
      if (v58 != 1)
        goto LABEL_172;
    }
    goto LABEL_104;
  }
LABEL_172:
  if (negate == this->__negate_)
  {
    first = 0;
    v81 = -993;
  }
  else
  {
    a2->__current_ += v8;
    first = this->__first_;
    v81 = -995;
  }
  a2->__do_ = v81;
  a2->__node_ = first;
}

void sub_216CFEC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v7;
  unint64_t v8;
  std::sub_match<const char *> *value;
  unint64_t v11;
  std::vector<std::csub_match>::size_type v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  std::sub_match<const char *> *v16;
  std::sub_match<const char *> *v17;
  std::pair<const char *, const char *> *v18;
  std::vector<std::csub_match>::size_type v19;
  std::pair<const char *, const char *> v20;
  std::sub_match<const char *> *v21;
  std::sub_match<const char *> *v22;
  std::vector<std::csub_match>::pointer v23;
  std::pair<const char *, const char *> v24;
  std::sub_match<const char *> *v25;
  std::vector<std::csub_match>::size_type v26;
  std::pair<const char *, const char *> v27;

  begin = this->__begin_;
  end = this->__end_;
  v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7)
      this->__end_ = &begin[__sz];
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      v25 = &end[v8];
      v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        v27 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL)
        std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
      v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= __sz)
        v12 = __sz;
      if (v11 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v13);
      v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      v18 = v16;
      v19 = 24 * __sz - 24 * v7;
      do
      {
        v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        *v18 = v20;
        v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      v23 = this->__begin_;
      v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          v24 = v22[-1].std::pair<const char *, const char *>;
          *(_QWORD *)&v16[-1].matched = *(_QWORD *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
        operator delete(v22);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  std::vector<std::pair<unsigned long, const char *>>::pointer end;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5;
  std::vector<std::pair<unsigned long, const char *>>::size_type v6;
  std::pair<unsigned long, const char *> *value;
  uint64_t v8;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9;
  unint64_t v10;
  char *v11;
  std::pair<unsigned long, const char *> *v12;
  uint64_t v13;
  std::pair<unsigned long, const char *> *v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;
  std::vector<std::pair<unsigned long, const char *>>::pointer v17;
  std::pair<unsigned long, const char *> *v18;

  begin = this->__begin_;
  end = this->__end_;
  v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5)
      return;
    v18 = &begin[__sz];
    goto LABEL_17;
  }
  v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    v18 = &end[v6];
LABEL_17:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60)
    std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
  v8 = (char *)value - (char *)begin;
  v9 = v8 >> 3;
  if (v8 >> 3 <= __sz)
    v9 = __sz;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<applesauce::CF::TypeRefPair>>(v10);
  v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  v15 = &v12[v6];
  v17 = this->__begin_;
  v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
    operator delete(v16);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v7;
  const char *v9;
  const char *v10;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unsigned int v15;
  _DWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  const char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  __int128 *v29;
  __int128 *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  __int128 *v39;
  char *v40;
  char *v41;
  __int128 v42;
  char *v43;
  char *v44;
  int64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  char *v61;
  char *v62;
  char *v63;
  _QWORD *v64;
  _QWORD *v65;
  char *v66;
  uint64_t v68;
  void *v69;
  _BYTE *v70;
  unsigned int v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  const char *v95;
  BOOL v96;
  char v97;
  BOOL v98;
  uint64_t v99;
  char *v100;
  void **v101;
  _BYTE *v102;
  const char *v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  char *v109;
  char *v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  char *v118;
  char *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  void *v125;
  char *v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t *v149;
  uint64_t *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  int64_t v154;
  char *v155;
  char *v156;
  char *v157;
  char v158;
  const char *v159;
  char v160;
  const char *v161;
  const char *i;
  const char *v163;
  __int16 v164;
  const char *v165;
  void *v166[2];
  __int128 v167;
  int64x2_t v168;
  _BYTE v169[56];
  void *__p[2];
  _QWORD v171[4];
  std::vector<std::csub_match>::value_type __x;

  v7 = a5;
  v9 = a3;
  v10 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  v165 = (const char *)(a3 - a2);
  v164 = a5;
  if (*(_DWORD *)(a1 + 28))
  {
    v166[0] = 0;
    v166[1] = 0;
    *(_QWORD *)&v167 = 0;
    v12 = *(_QWORD *)(a1 + 40);
    if (v12)
    {
      __x.first = a3;
      __x.second = a3;
      __x.matched = 0;
      *(_DWORD *)v169 = 0;
      memset(&v169[8], 0, 48);
      *(_OWORD *)__p = 0u;
      memset(v171, 0, 21);
      v166[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v166, (uint64_t)v169);
      if (__p[0])
        operator delete(__p[0]);
      if (*(_QWORD *)&v169[32])
        operator delete(*(void **)&v169[32]);
      v149 = a4;
      v13 = v166[1];
      *((_DWORD *)v166[1] - 24) = 0;
      *(v13 - 11) = v10;
      *(v13 - 10) = v10;
      v161 = v9;
      *(v13 - 9) = v9;
      std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 8), *(unsigned int *)(a1 + 28), &__x);
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v166[1] - 40), *(unsigned int *)(a1 + 32));
      v153 = 0;
      v155 = 0;
      v151 = 0;
      v152 = 0;
      v156 = 0;
      v148 = 0;
      v14 = 0;
      v158 = 0;
      v15 = 0;
      v16 = v166[1];
      *((_QWORD *)v166[1] - 2) = v12;
      *(v16 - 2) = v7;
      *((_BYTE *)v16 - 4) = a6;
      do
      {
        v17 = (++v15 & 0xFFF) != 0 || (int)(v15 >> 12) < (int)v165;
        if (!v17)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
        v19 = v16 - 4;
        v18 = *((_QWORD *)v16 - 2);
        v20 = v16 - 24;
        if (v18)
          (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v18 + 16))(v18, v16 - 24);
        switch(*(_DWORD *)v20)
        {
          case 0xFFFFFC18:
            v21 = (const char *)*((_QWORD *)v16 - 10);
            if ((v164 & 0x20) != 0 && v21 == v10 || (v164 & 0x1000) != 0 && v21 != v161)
              goto LABEL_21;
            v28 = v153;
            if ((v158 & ((uint64_t)v14 >= (uint64_t)&v21[-*((_QWORD *)v16 - 11)])) == 0)
            {
              v159 = &v21[-*((_QWORD *)v16 - 11)];
              v30 = (__int128 *)*((_QWORD *)v16 - 8);
              v29 = (__int128 *)*((_QWORD *)v16 - 7);
              v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v152 - (uint64_t)v155) >> 3) >= v31)
              {
                v37 = (uint64_t)v148;
                if (0xAAAAAAAAAAAAAAABLL * ((v153 - v155) >> 3) >= v31)
                {
                  if (v30 == v29)
                  {
                    v43 = v155;
                    v44 = v155;
                  }
                  else
                  {
                    v43 = v155;
                    v44 = v155;
                    do
                    {
                      *(_OWORD *)v44 = *v30;
                      v44[16] = *((_BYTE *)v30 + 16);
                      v44 += 24;
                      v30 = (__int128 *)((char *)v30 + 24);
                    }
                    while (v30 != v29);
                  }
                  v45 = v44 - v43;
                  v28 = v43;
                }
                else
                {
                  v39 = (__int128 *)((char *)v30 + 8 * ((v153 - v155) >> 3));
                  if (v153 != v155)
                  {
                    v40 = v155;
                    do
                    {
                      *(_OWORD *)v40 = *v30;
                      v40[16] = *((_BYTE *)v30 + 16);
                      v30 = (__int128 *)((char *)v30 + 24);
                      v40 += 24;
                    }
                    while (v30 != v39);
                  }
                  v41 = v153;
                  while (v39 != v29)
                  {
                    v42 = *v39;
                    *((_QWORD *)v41 + 2) = *((_QWORD *)v39 + 2);
                    *(_OWORD *)v41 = v42;
                    v41 += 24;
                    v39 = (__int128 *)((char *)v39 + 24);
                  }
                  v45 = v41 - v153;
                }
              }
              else
              {
                if (v155)
                {
                  operator delete(v155);
                  v152 = 0;
                }
                if (v31 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_217;
                v32 = 0x5555555555555556 * (v152 >> 3);
                if (v32 <= v31)
                  v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3);
                v33 = 0xAAAAAAAAAAAAAAABLL * (v152 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v32;
                if (v33 > 0xAAAAAAAAAAAAAAALL)
LABEL_217:
                  std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
                v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v33);
                v28 = v34;
                v36 = v34;
                if (v30 == v29)
                {
                  v37 = (uint64_t)v148;
                }
                else
                {
                  v37 = (uint64_t)v148;
                  do
                  {
                    v38 = *v30;
                    *((_QWORD *)v36 + 2) = *((_QWORD *)v30 + 2);
                    *(_OWORD *)v36 = v38;
                    v36 += 24;
                    v30 = (__int128 *)((char *)v30 + 24);
                  }
                  while (v30 != v29);
                }
                v152 = (uint64_t)&v34[24 * v35];
                v45 = v36 - v34;
                v155 = v34;
              }
              v47 = (char *)*((_QWORD *)v16 - 5);
              v46 = (char *)*((_QWORD *)v16 - 4);
              v48 = (v46 - v47) >> 4;
              if (v48 <= (v37 - (uint64_t)v156) >> 4)
              {
                v56 = (v151 - v156) >> 4;
                if (v56 >= v48)
                {
                  if (v47 == v46)
                  {
                    v63 = v156;
                    v62 = v156;
                  }
                  else
                  {
                    v62 = v156;
                    do
                    {
                      *(_QWORD *)v62 = *(_QWORD *)v47;
                      *((_QWORD *)v62 + 1) = *((_QWORD *)v47 + 1);
                      v62 += 16;
                      v47 += 16;
                    }
                    while (v47 != v46);
                    v63 = v156;
                  }
                  v61 = (char *)(v62 - v63);
                  v52 = v63;
                  v14 = v159;
                }
                else
                {
                  v57 = &v47[16 * v56];
                  if (v151 != v156)
                  {
                    v58 = v156;
                    do
                    {
                      *(_QWORD *)v58 = *(_QWORD *)v47;
                      *((_QWORD *)v58 + 1) = *((_QWORD *)v47 + 1);
                      v47 += 16;
                      v58 += 16;
                    }
                    while (v47 != v57);
                  }
                  if (v57 == v46)
                  {
                    v52 = v151;
                    v59 = v151;
                    v14 = v159;
                  }
                  else
                  {
                    v52 = v151;
                    v59 = v151;
                    v14 = v159;
                    do
                    {
                      v60 = *(_OWORD *)v57;
                      v57 += 16;
                      *(_OWORD *)v59 = v60;
                      v59 += 16;
                    }
                    while (v57 != v46);
                  }
                  v61 = (char *)(v59 - v52);
                }
              }
              else
              {
                v154 = v45;
                v49 = v28;
                if (v156)
                {
                  operator delete(v156);
                  v37 = 0;
                }
                if (v46 - v47 < 0)
                  goto LABEL_216;
                v50 = v37 >> 3;
                if (v37 >> 3 <= v48)
                  v50 = (v46 - v47) >> 4;
                v51 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v50;
                if (v51 >> 60)
LABEL_216:
                  std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
                v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<applesauce::CF::TypeRefPair>>(v51);
                v54 = v52;
                while (v47 != v46)
                {
                  v55 = *(_OWORD *)v47;
                  v47 += 16;
                  *(_OWORD *)v54 = v55;
                  v54 += 16;
                }
                v148 = &v52[16 * v53];
                v61 = (char *)(v54 - v52);
                v156 = v52;
                v28 = v49;
                v14 = v159;
                v45 = v154;
              }
              v153 = &v28[v45];
              v151 = &v61[(_QWORD)v52];
            }
            v64 = v166[1];
            if (v14 == v165)
            {
              v65 = v166[0];
              while (v64 != v65)
              {
                v64 -= 12;
                std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v64);
              }
              v166[1] = v65;
              v158 = 1;
              v14 = v165;
            }
            else
            {
              v66 = (char *)v166[1] - 96;
              std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)v166[1] - 12);
              v166[1] = v66;
              v158 = 1;
            }
            break;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            break;
          case 0xFFFFFC1F:
LABEL_21:
            v22 = (char *)v166[1] - 96;
            std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)v166[1] - 12);
            v166[1] = v22;
            break;
          case 0xFFFFFC20:
            v23 = *((_OWORD *)v16 - 5);
            *(_OWORD *)v169 = *v20;
            *(_OWORD *)&v169[16] = v23;
            memset(&v169[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v169[32], *((__int128 **)v16 - 8), *((__int128 **)v16 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v16 - 7) - *((_QWORD *)v16 - 8)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v171[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v16 - 5), *((__int128 **)v16 - 4), (uint64_t)(*((_QWORD *)v16 - 4) - *((_QWORD *)v16 - 5)) >> 4);
            v24 = *v19;
            *(_QWORD *)((char *)&v171[1] + 5) = *(_QWORD *)((char *)v16 - 11);
            v171[1] = v24;
            (*(void (**)(_QWORD, uint64_t, _DWORD *))(*(_QWORD *)*v19 + 24))(*v19, 1, v16 - 24);
            (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v171[1] + 24))(v171[1], 0, v169);
            v25 = (char *)v166[1];
            if (v166[1] >= (void *)v167)
            {
              v166[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v166, (uint64_t)v169);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              v26 = *(_OWORD *)&v169[16];
              *(_OWORD *)v166[1] = *(_OWORD *)v169;
              *((_OWORD *)v25 + 1) = v26;
              *((_QWORD *)v25 + 4) = 0;
              *((_QWORD *)v25 + 5) = 0;
              *((_QWORD *)v25 + 6) = 0;
              *((_QWORD *)v25 + 7) = 0;
              *((_OWORD *)v25 + 2) = *(_OWORD *)&v169[32];
              *((_QWORD *)v25 + 6) = *(_QWORD *)&v169[48];
              memset(&v169[32], 0, 24);
              *((_QWORD *)v25 + 8) = 0;
              *((_QWORD *)v25 + 9) = 0;
              *(_OWORD *)(v25 + 56) = *(_OWORD *)__p;
              *((_QWORD *)v25 + 9) = v171[0];
              __p[0] = 0;
              __p[1] = 0;
              v171[0] = 0;
              v27 = v171[1];
              *(_QWORD *)(v25 + 85) = *(_QWORD *)((char *)&v171[1] + 5);
              *((_QWORD *)v25 + 10) = v27;
              v166[1] = v25 + 96;
            }
            if (*(_QWORD *)&v169[32])
            {
              *(_QWORD *)&v169[40] = *(_QWORD *)&v169[32];
              operator delete(*(void **)&v169[32]);
            }
            break;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
        v16 = v166[1];
      }
      while (v166[0] != v166[1]);
      if ((v158 & 1) != 0)
      {
        v68 = *v149;
        *(_QWORD *)v68 = v10;
        *(_QWORD *)(v68 + 8) = &v14[(_QWORD)v10];
        *(_BYTE *)(v68 + 16) = 1;
        v69 = v155;
        if (v153 != v155)
        {
          v70 = v155 + 16;
          v71 = 1;
          do
          {
            v72 = v68 + 24 * v71;
            *(_OWORD *)v72 = *((_OWORD *)v70 - 1);
            v73 = *v70;
            v70 += 24;
            *(_BYTE *)(v72 + 16) = v73;
            v17 = 0xAAAAAAAAAAAAAAABLL * ((v153 - v155) >> 3) > v71++;
          }
          while (v17);
        }
        v74 = 1;
      }
      else
      {
        v74 = 0;
        v69 = v155;
      }
      if (v156)
        operator delete(v156);
      if (v69)
        operator delete(v69);
    }
    else
    {
      v74 = 0;
    }
    *(_QWORD *)v169 = v166;
    std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v169);
  }
  else
  {
    v167 = 0u;
    v168 = 0u;
    *(_OWORD *)v166 = 0u;
    v74 = *(_QWORD *)(a1 + 40);
    if (v74)
    {
      *(_DWORD *)v169 = 0;
      memset(&v169[8], 0, 48);
      *(_OWORD *)__p = 0uLL;
      memset(v171, 0, 21);
      std::deque<std::__state<char>>::push_back(v166, (uint64_t)v169);
      if (__p[0])
        operator delete(__p[0]);
      if (*(_QWORD *)&v169[32])
        operator delete(*(void **)&v169[32]);
      v150 = a4;
      v75 = v166[1];
      v76 = v168.i64[1] + v168.i64[0] - 1;
      v77 = v76 / 0x2A;
      v78 = *((_QWORD *)v166[1] + v76 / 0x2A);
      v79 = 3 * (v76 % 0x2A);
      v80 = v78 + 32 * v79;
      *(_DWORD *)v80 = 0;
      *(_QWORD *)(v80 + 8) = v10;
      *(_QWORD *)(v75[v77] + 32 * v79 + 16) = v10;
      *(_QWORD *)(v75[v77] + 32 * v79 + 24) = v9;
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v75[v77] + 32 * v79 + 56), *(unsigned int *)(a1 + 32));
      v160 = 0;
      v81 = 0;
      v82 = v168.i64[1];
      v83 = v166[1];
      v84 = v168.i64[1] + v168.i64[0] - 1;
      v85 = v84 / 0x2A;
      v86 = 3 * (v84 % 0x2A);
      *(_QWORD *)(*((_QWORD *)v166[1] + v85) + 32 * v86 + 80) = v74;
      v87 = v83[v85] + 32 * v86;
      *(_DWORD *)(v87 + 88) = v7;
      *(_BYTE *)(v87 + 92) = a6;
      v157 = 0;
      while (2)
      {
        if ((++v81 & 0xFFF) == 0 && (int)(v81 >> 12) >= (int)v165)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
        v89 = v82 + v168.i64[0] - 1;
        v90 = *((_QWORD *)v166[1] + v89 / 0x2A);
        v91 = v89 % 0x2A;
        v92 = v90 + 96 * (v89 % 0x2A);
        v94 = (_QWORD *)(v92 + 80);
        v93 = *(_QWORD *)(v92 + 80);
        if (v93)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v93 + 16))(v93, v90 + 96 * v91);
        switch(*(_DWORD *)v92)
        {
          case 0xFFFFFC18:
            v95 = *(const char **)(v90 + 96 * v91 + 16);
            v96 = (v7 & 0x1000) == 0 || v95 == v9;
            v97 = v96;
            v98 = v95 != v10 || (v7 & 0x20) == 0;
            if (!v98 || (v97 & 1) == 0)
              goto LABEL_200;
            v99 = (uint64_t)&v95[-*(_QWORD *)(v90 + 96 * v91 + 8)];
            v100 = v157;
            if ((v160 & ((uint64_t)v157 >= v99)) == 0)
              v100 = (char *)v99;
            if (v100 != v165)
            {
              v157 = v100;
              std::deque<std::__state<char>>::pop_back(v166);
              v160 = 1;
              goto LABEL_201;
            }
            v101 = (void **)v166[1];
            v102 = (_BYTE *)v167;
            if ((void *)v167 == v166[1])
            {
              v102 = v166[1];
            }
            else
            {
              v103 = v10;
              v104 = (char *)v166[1] + 8 * (v168.i64[0] / 0x2AuLL);
              v105 = (_QWORD *)(*v104 + 96 * (v168.i64[0] % 0x2AuLL));
              v106 = *((_QWORD *)v166[1] + (v168.i64[1] + v168.i64[0]) / 0x2AuLL)
                   + 96 * ((v168.i64[1] + v168.i64[0]) % 0x2AuLL);
              if (v105 != (_QWORD *)v106)
              {
                do
                {
                  std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v105);
                  v105 += 12;
                  if ((_QWORD *)((char *)v105 - *v104) == (_QWORD *)4032)
                  {
                    v107 = (_QWORD *)v104[1];
                    ++v104;
                    v105 = v107;
                  }
                }
                while (v105 != (_QWORD *)v106);
                v101 = (void **)v166[1];
                v102 = (_BYTE *)v167;
              }
              v10 = v103;
            }
            v168.i64[1] = 0;
            v138 = v102 - (_BYTE *)v101;
            if (v138 >= 0x11)
            {
              do
              {
                operator delete(*v101);
                v101 = (void **)((char *)v166[1] + 8);
                v166[1] = v101;
                v138 = v167 - (_QWORD)v101;
              }
              while ((_QWORD)v167 - (_QWORD)v101 > 0x10uLL);
            }
            if (v138 >> 3 == 1)
            {
              v139 = 21;
            }
            else
            {
              if (v138 >> 3 != 2)
                goto LABEL_188;
              v139 = 42;
            }
            v168.i64[0] = v139;
LABEL_188:
            v160 = 1;
            v157 = (char *)v165;
LABEL_201:
            v82 = v168.i64[1];
            if (v168.i64[1])
              continue;
            if ((v160 & 1) != 0)
            {
              v147 = *v150;
              *(_QWORD *)v147 = v10;
              *(_QWORD *)(v147 + 8) = &v157[(_QWORD)v10];
              v74 = 1;
              *(_BYTE *)(v147 + 16) = 1;
            }
            else
            {
              v74 = 0;
            }
            break;
          case 0xFFFFFC19:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_201;
          case 0xFFFFFC1D:
            v108 = v168.i64[0];
            v109 = (char *)v166[1];
            v110 = (char *)v167;
            if (!v168.i64[0])
            {
              v113 = (uint64_t)(v167 - (unint64_t)v166[1]) >> 3;
              v114 = 42 * v113 - 1;
              if ((void *)v167 == v166[1])
                v114 = 0;
              if ((unint64_t)(v114 - v168.i64[1]) < 0x2A)
              {
                if (v113 >= (uint64_t)(*((_QWORD *)&v167 + 1) - (unint64_t)v166[0]) >> 3)
                {
                  if (*((void **)&v167 + 1) == v166[0])
                    v115 = 1;
                  else
                    v115 = (uint64_t)(*((_QWORD *)&v167 + 1) - (unint64_t)v166[0]) >> 2;
                  *(_QWORD *)&v169[32] = (char *)&v167 + 8;
                  *(_QWORD *)v169 = std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v115);
                  *(_QWORD *)&v169[8] = *(_QWORD *)v169;
                  *(_QWORD *)&v169[16] = *(_QWORD *)v169;
                  *(_QWORD *)&v169[24] = *(_QWORD *)v169 + 8 * v116;
                  v163 = v10;
                  __x.first = (const char *)operator new(0xFC0uLL);
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v169, &__x);
                  v117 = (uint64_t *)v166[1];
                  v118 = *(char **)&v169[16];
                  for (i = v9; v117 != (uint64_t *)v167; *(_QWORD *)&v169[16] += 8)
                  {
                    if (v118 == *(char **)&v169[24])
                    {
                      v119 = *(char **)&v169[8];
                      v120 = *(void **)v169;
                      if (*(_QWORD *)&v169[8] <= *(_QWORD *)v169)
                      {
                        if (v118 == *(char **)v169)
                          v127 = 1;
                        else
                          v127 = (uint64_t)&v118[-*(_QWORD *)v169] >> 2;
                        v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v127);
                        v130 = &v128[8 * (v127 >> 2)];
                        v131 = v118 - v119;
                        v96 = v118 == v119;
                        v118 = v130;
                        v9 = i;
                        if (!v96)
                        {
                          v118 = &v130[v131 & 0xFFFFFFFFFFFFFFF8];
                          v132 = 8 * (v131 >> 3);
                          v133 = v130;
                          do
                          {
                            v134 = *(_QWORD *)v119;
                            v119 += 8;
                            *(_QWORD *)v133 = v134;
                            v133 += 8;
                            v132 -= 8;
                          }
                          while (v132);
                        }
                        *(_QWORD *)v169 = v128;
                        *(_QWORD *)&v169[8] = v130;
                        *(_QWORD *)&v169[16] = v118;
                        *(_QWORD *)&v169[24] = &v128[8 * v129];
                        if (v120)
                          operator delete(v120);
                      }
                      else
                      {
                        v121 = (uint64_t)(*(_QWORD *)&v169[8] - *(_QWORD *)v169) >> 3;
                        if (v121 >= -1)
                          v122 = v121 + 1;
                        else
                          v122 = v121 + 2;
                        v123 = *(_QWORD *)&v169[8] - 8 * (v122 >> 1);
                        v124 = (size_t)&v118[-*(_QWORD *)&v169[8]];
                        if (v118 != *(char **)&v169[8])
                        {
                          v125 = (void *)(*(_QWORD *)&v169[8] - 8 * (v122 >> 1));
                          memmove(v125, *(const void **)&v169[8], v124);
                          v123 = (uint64_t)v125;
                          v118 = v119;
                        }
                        v126 = &v118[-8 * (v122 >> 1)];
                        v118 = (char *)(v123 + v124);
                        *(_QWORD *)&v169[8] = v126;
                        *(_QWORD *)&v169[16] = v123 + v124;
                        v9 = i;
                      }
                    }
                    v135 = *v117++;
                    *(_QWORD *)v118 = v135;
                    v118 = (char *)(*(_QWORD *)&v169[16] + 8);
                  }
                  v136 = v166[0];
                  *(_OWORD *)v166 = *(_OWORD *)v169;
                  *(_QWORD *)&v167 = v118;
                  *((_QWORD *)&v167 + 1) = *(_QWORD *)&v169[24];
                  v137 = 21;
                  if (&v118[-*(_QWORD *)&v169[8]] != (char *)8)
                    v137 = v168.i64[0] + 42;
                  v168.i64[0] = v137;
                  v10 = v163;
                  if (v136)
                    operator delete(v136);
                  LOWORD(v7) = v164;
                }
                else
                {
                  if (v166[1] == v166[0])
                  {
                    *(_QWORD *)v169 = operator new(0xFC0uLL);
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v166, v169);
                    *(_QWORD *)v169 = *(_QWORD *)(v167 - 8);
                    *(_QWORD *)&v167 = v167 - 8;
                  }
                  else
                  {
                    *(_QWORD *)v169 = operator new(0xFC0uLL);
                  }
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v166, v169);
                  v140 = 21;
                  if ((_QWORD)v167 - (unint64_t)v166[1] != 8)
                    v140 = v168.i64[0] + 42;
                  v168.i64[0] = v140;
                }
              }
              else
              {
                v168.i64[0] = 42;
                *(_QWORD *)v169 = *(_QWORD *)(v167 - 8);
                *(_QWORD *)&v167 = v167 - 8;
                std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v166, v169);
              }
              v108 = v168.i64[0];
              v109 = (char *)v166[1];
              v110 = (char *)v167;
            }
            v141 = &v109[8 * (v108 / 0x2A)];
            v142 = *(_QWORD *)v141 + 96 * (v108 % 0x2A);
            if (v110 == v109)
              v143 = 0;
            else
              v143 = v142;
            if (v143 == *(_QWORD *)v141)
              v143 = *((_QWORD *)v141 - 1) + 4032;
            v144 = *(_OWORD *)(v92 + 16);
            *(_OWORD *)(v143 - 96) = *(_OWORD *)v92;
            *(_OWORD *)(v143 - 80) = v144;
            v145 = v90 + 96 * v91;
            *(_QWORD *)(v143 - 56) = 0;
            *(_QWORD *)(v143 - 48) = 0;
            *(_QWORD *)(v143 - 64) = 0;
            *(_OWORD *)(v143 - 64) = *(_OWORD *)(v145 + 32);
            *(_QWORD *)(v143 - 48) = *(_QWORD *)(v145 + 48);
            *(_QWORD *)(v145 + 32) = 0;
            *(_QWORD *)(v145 + 40) = 0;
            *(_QWORD *)(v145 + 48) = 0;
            *(_QWORD *)(v143 - 40) = 0;
            *(_QWORD *)(v143 - 32) = 0;
            *(_QWORD *)(v143 - 24) = 0;
            *(_OWORD *)(v143 - 40) = *(_OWORD *)(v145 + 56);
            *(_QWORD *)(v143 - 24) = *(_QWORD *)(v145 + 72);
            *(_QWORD *)(v145 + 56) = 0;
            *(_QWORD *)(v145 + 64) = 0;
            *(_QWORD *)(v145 + 72) = 0;
            v146 = *v94;
            *(_QWORD *)(v143 - 11) = *(_QWORD *)(v92 + 85);
            *(_QWORD *)(v143 - 16) = v146;
            v168 = vaddq_s64(v168, (int64x2_t)xmmword_216D3C8E0);
            goto LABEL_200;
          case 0xFFFFFC1F:
LABEL_200:
            std::deque<std::__state<char>>::pop_back(v166);
            goto LABEL_201;
          case 0xFFFFFC20:
            v111 = *(_OWORD *)(v92 + 16);
            *(_OWORD *)v169 = *(_OWORD *)v92;
            *(_OWORD *)&v169[16] = v111;
            memset(&v169[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v169[32], *(__int128 **)(v90 + 96 * v91 + 32), *(__int128 **)(v90 + 96 * v91 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v90 + 96 * v91 + 40) - *(_QWORD *)(v90 + 96 * v91 + 32)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v171[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(__int128 **)(v90 + 96 * v91 + 56), *(__int128 **)(v90 + 96 * v91 + 64), (uint64_t)(*(_QWORD *)(v90 + 96 * v91 + 64) - *(_QWORD *)(v90 + 96 * v91 + 56)) >> 4);
            v112 = *v94;
            *(_QWORD *)((char *)&v171[1] + 5) = *(_QWORD *)(v92 + 85);
            v171[1] = v112;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v94 + 24))(*v94, 1, v92);
            (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v171[1] + 24))(v171[1], 0, v169);
            std::deque<std::__state<char>>::push_back(v166, (uint64_t)v169);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (*(_QWORD *)&v169[32])
            {
              *(_QWORD *)&v169[40] = *(_QWORD *)&v169[32];
              operator delete(*(void **)&v169[32]);
            }
            goto LABEL_201;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
        break;
      }
    }
    std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v166);
  }
  return v74;
}

void sub_216CFFEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  void *v37;

  operator delete(v37);
  if (__p)
    operator delete(__p);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void rtaid::NodeFormatConverter::~NodeFormatConverter(rtaid::NodeFormatConverter *this)
{
  unsigned __int8 v2;
  NSObject *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  __int16 v10;
  char *v11;
  __int16 v12;
  rtaid::NodeFormatConverter *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  rtaid::NodeFormatConverter::disposeConverter(this);
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  v3 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
  {
    v4 = 136316162;
    v5 = "NodeFormatConverter.cpp";
    v6 = 1024;
    v7 = 28;
    v8 = 1040;
    v9 = 26;
    v10 = 2080;
    v11 = "rtaid::NodeFormatConverter]";
    v12 = 2048;
    v13 = this;
    _os_log_impl(&dword_216CFB000, v3, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] destroyed", (uint8_t *)&v4, 0x2Cu);
  }
}

void sub_216D00138(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::vector<void const*>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

OpaqueAudioComponentInstance *rtaid::DetectorNode::resetSilenceAnalyzerErrorState(OpaqueAudioComponentInstance *this)
{
  OpaqueAudioComponentInstance *v1;

  if (this)
  {
    v1 = this;
    AudioUnitSetParameter(this, 0, 0, 0, 0.0, 0);
    AudioUnitSetParameter(v1, 1u, 0, 0, 0.0, 0);
    AudioUnitSetParameter(v1, 2u, 0, 0, 0.0, 0);
    AudioUnitSetParameter(v1, 3u, 0, 0, 0.0, 0);
    return (OpaqueAudioComponentInstance *)AudioUnitSetParameter(v1, 6u, 0, 0, -1.0, 0);
  }
  return this;
}

uint64_t CaulkSPIImplementation::EnqueueIssueDict(uint64_t result, const void *a2)
{
  uint64_t v2;
  int v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int8 *v7;

  v2 = result;
  v3 = 0;
  v4 = (unsigned int *)(result + 48);
  do
  {
    v5 = atomic_load(v4);
    do
    {
      v6 = __ldaxr(v4);
      if (v6 != (_DWORD)v5)
      {
        __clrex();
        atomic_load(v4);
        goto LABEL_11;
      }
    }
    while (__stlxr(((_BYTE)v5 + 1) & 0xF, v4));
    v7 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8 * v5) + 552);
    while (!__ldaxr(v7))
    {
      if (!__stlxr(1u, v7))
      {
        memcpy((void *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8 * v5) + 56), a2, 0x1F0uLL);
        return caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(v2 + 8), *(caulk::concurrent::message **)(*(_QWORD *)(v2 + 24) + 8 * v5));
      }
    }
    __clrex();
LABEL_11:
    ++v3;
  }
  while (v3 != 16);
  return result;
}

uint64_t std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t AudioIssueDetectorSetNodeFormatWithDirection(unint64_t a1, uint64_t a2, unsigned int a3, char a4, uint64_t a5, int a6)
{
  SingletonManagerInstance();
  return rtaid::Manager::SetNodeFormatWithDirectionOnDetector(a1, a2, a3, a4, a5, a6);
}

uint64_t rtaid::Manager::SetNodeFormatWithDirectionOnDetector(unint64_t a1, uint64_t a2, unsigned int a3, char a4, uint64_t a5, int j)
{
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char v16;
  int v17;
  std::string::value_type *v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  std::__wrap_iter<const char *>::iterator_type v22;
  std::string::value_type *v23;
  std::string::value_type *v24;
  std::__wrap_iter<const char *>::iterator_type v25;
  std::regex_constants::match_flag_type flags;
  unsigned __int32 v27;
  std::vector<std::ssub_match>::pointer begin;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_unmatched;
  std::__wrap_iter<const char *> *p_second;
  std::sub_match<const char *> *v31;
  std::sub_match<const char *> *v32;
  char v33;
  char v34;
  void **v35;
  uint64_t *v36;
  uint64_t *v37;
  unsigned __int8 v38;
  NSObject *v39;
  std::string *v40;
  int v41;
  int64_t size;
  std::string *v43;
  char *v44;
  char *v45;
  BOOL v46;
  std::string *v47;
  double v50;
  unsigned __int8 v51;
  NSObject *v52;
  std::string *v53;
  const char *v54;
  __int128 v55;
  const char *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::string *v61;
  __int128 v62;
  int end;
  std::sub_match<std::__wrap_iter<const char *>> *v64;
  char v65;
  int v66;
  int v67;
  int v68;
  unsigned __int8 v69;
  NSObject *v70;
  std::__wrap_iter<const char *>::iterator_type v71;
  unint64_t *v72;
  unint64_t v73;
  unsigned __int8 v74;
  NSObject *v75;
  std::sub_match<std::__wrap_iter<const char *>> *p_end_cap;
  double v77;
  unsigned __int8 v78;
  NSObject *v79;
  unsigned int v80;
  std::string *v81;
  double v82;
  double v83;
  unint64_t v84;
  uint8x8_t v85;
  uint64_t **v86;
  uint64_t *k;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  float v91;
  float v92;
  _BOOL8 v93;
  unint64_t v94;
  unint64_t v95;
  int8x8_t prime;
  uint64_t v97;
  void *v98;
  void *v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  uint8x8_t v103;
  unint64_t v104;
  uint8x8_t v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t *v119;
  unint64_t *v120;
  unint64_t v121;
  void *v123;
  int v124;
  char v125;
  BOOL v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  std::string v131;
  std::regex_traits<char> v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  std::vector<std::csub_match> v136[2];
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  char v143;
  uint64_t v144;
  std::regex_iterator<std::__wrap_iter<const char *>, char> __p;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v146;
  uint64_t v147;

  v147 = *MEMORY[0x24BDAC8D0];
  std::mutex::lock((std::mutex *)&SingletonManagerInstance(void)::sInstance);
  v12 = std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>>>::find<long long>(a1);
  if (!v12)
  {
    v21 = 0xFFFFFFFFLL;
    goto LABEL_214;
  }
  v13 = (std::__shared_weak_count *)v12[4];
  v130 = v12[3];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (v130)
  {
    v16 = *(_BYTE *)(qword_253D977D0 + 118);
    std::regex_traits<char>::regex_traits(&v132);
    v135 = 0;
    v134 = 0u;
    v133 = 0u;
    v129 = a3;
    v125 = a4;
    v127 = v13;
    if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)&v132, "[a-fA-F0-9:]{17}|[a-fA-F0-9]{12}", "") != "")std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
    memset(&v131, 0, sizeof(v131));
    v17 = *(char *)(a2 + 23);
    if (v17 >= 0)
      v18 = (std::string::value_type *)a2;
    else
      v18 = *(std::string::value_type **)a2;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(a2 + 23);
    else
      v19 = *(_QWORD *)(a2 + 8);
    v146.__begin_.__i_ = v18;
    v146.__end_.__i_ = &v18[v19];
    v146.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)&v132;
    v146.__flags_ = match_default;
    memset(&v146.__match_.__prefix_, 0, 17);
    memset(&v146.__match_.__suffix_, 0, 17);
    v146.__match_.__ready_ = 0;
    v146.__match_.__position_start_.__i_ = 0;
    memset(&v146.__match_, 0, 41);
    memset(&__p.__match_.__matches_.__end_cap_, 0, 17);
    memset(&__p.__match_.__unmatched_.matched, 0, 17);
    __p.__match_.__prefix_.matched = 0;
    __p.__match_.__suffix_.first.__i_ = 0;
    memset(&__p, 0, 41);
    std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v132, (std::sub_match<const char *> *)v18, (std::sub_match<const char *> *)&v18[v19], (std::vector<std::csub_match> *)&__p, 0);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)&v146.__match_, (uint64_t)v18, (uint64_t)&v18[v19], (uint64_t *)&__p, 0);
    if (__p.__begin_.__i_)
      operator delete((void *)__p.__begin_.__i_);
    v128 = a5;
    memset(&__p.__match_.__prefix_, 0, 17);
    memset(&__p.__match_.__suffix_, 0, 17);
    __p.__match_.__ready_ = 0;
    __p.__match_.__position_start_.__i_ = 0;
    memset(&__p.__match_, 0, 41);
    memset(&__p, 0, 28);
    v126 = v16;
    if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v146, &__p))
    {
      for (i = v130; v19; --v19)
        std::string::push_back(&v131, *v18++);
      goto LABEL_45;
    }
    v124 = j;
    v22 = 0;
    v23 = 0;
    while (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v146, &__p))
    {
      v24 = (std::string::value_type *)v146.__match_.__prefix_.first.__i_;
      v25 = v146.__match_.__prefix_.second.__i_;
      while (v24 != v25)
        std::string::push_back(&v131, *v24++);
      v22 = v146.__match_.__suffix_.second.__i_;
      v23 = (std::string::value_type *)v146.__match_.__suffix_.first.__i_;
      flags = v146.__flags_;
      v27 = v146.__flags_ | 0x800;
      v146.__flags_ |= 0x800u;
      begin = v146.__match_.__matches_.__begin_;
      p_unmatched = &v146.__match_.__unmatched_;
      if (v146.__match_.__matches_.__end_ != v146.__match_.__matches_.__begin_)
        p_unmatched = v146.__match_.__matches_.__begin_;
      p_second = &v146.__match_.__matches_.__begin_->second;
      if (v146.__match_.__matches_.__end_ == v146.__match_.__matches_.__begin_)
        p_second = &v146.__match_.__unmatched_.second;
      v31 = (std::sub_match<const char *> *)p_second->__i_;
      v32 = (std::sub_match<const char *> *)v146.__end_.__i_;
      if (p_unmatched->first.__i_ != p_second->__i_)
        goto LABEL_31;
      if ((std::sub_match<const char *> *)v146.__end_.__i_ == v31)
      {
LABEL_40:
        if (begin)
          operator delete(begin);
        v146.__match_.__ready_ = 0;
        memset(&v146.__match_, 0, 41);
        memset(&v146.__match_.__prefix_, 0, 17);
        memset(&v146.__match_.__suffix_, 0, 17);
        v146.__match_.__position_start_.__i_ = 0;
      }
      else
      {
        v137 = 0;
        v138 = 0;
        v139 = 0;
        v140 = 0;
        v141 = 0;
        v142 = 0;
        v143 = 0;
        v144 = 0;
        memset(v136, 0, 41);
        v34 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v146.__pregex_, v31, (std::sub_match<const char *> *)v146.__end_.__i_, v136, flags | 0x860);
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)&v146.__match_, (uint64_t)v31, (uint64_t)v32, (uint64_t *)v136, 1);
        if (v136[0].__begin_)
          operator delete(v136[0].__begin_);
        if ((v34 & 1) == 0)
        {
          v31 = (std::sub_match<const char *> *)((char *)v31 + 1);
          v27 = v146.__flags_;
          v32 = (std::sub_match<const char *> *)v146.__end_.__i_;
LABEL_31:
          v146.__flags_ = v27 | 0x80;
          v137 = 0;
          v138 = 0;
          v139 = 0;
          v140 = 0;
          v141 = 0;
          v142 = 0;
          v143 = 0;
          v144 = 0;
          memset(v136, 0, 41);
          v33 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v146.__pregex_, v31, v32, v136, v27 | 0x80);
          std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)&v146.__match_, (uint64_t)v31, (uint64_t)v32, (uint64_t *)v136, (v27 & 0x800) != 0);
          if (v136[0].__begin_)
            operator delete(v136[0].__begin_);
          if ((v33 & 1) == 0)
          {
            begin = v146.__match_.__matches_.__begin_;
            goto LABEL_40;
          }
        }
      }
    }
    i = v130;
    for (j = v124; v23 != v22; ++v23)
      std::string::push_back(&v131, *v23);
LABEL_45:
    if (v146.__match_.__matches_.__begin_)
      operator delete(v146.__match_.__matches_.__begin_);
    v35 = (void **)(i + 8);
    v36 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((_QWORD *)(i + 8), v129);
    if (v36)
    {
      v37 = v36;
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      v39 = rtaid::get_log(void)::rtaid_os_log;
      if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
      {
        v40 = &v131;
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v40 = (std::string *)v131.__r_.__value_.__r.__words[0];
        LODWORD(v146.__begin_.__i_) = 136316674;
        *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v146.__begin_.__i_ + 4) = "Detector.cpp";
        WORD2(v146.__end_.__i_) = 1024;
        *(_DWORD *)((char *)&v146.__end_.__i_ + 6) = 92;
        WORD1(v146.__pregex_) = 1040;
        HIDWORD(v146.__pregex_) = 15;
        LOWORD(v146.__flags_) = 2080;
        *(_QWORD *)((char *)&v146.__flags_ + 2) = "rtaid::Detector]";
        WORD1(v146.__match_.__matches_.__begin_) = 2048;
        *(std::vector<std::ssub_match>::pointer *)((char *)&v146.__match_.__matches_.__begin_ + 4) = (std::vector<std::ssub_match>::pointer)i;
        WORD2(v146.__match_.__matches_.__end_) = 2080;
        *(std::vector<std::ssub_match>::pointer *)((char *)&v146.__match_.__matches_.__end_ + 6) = (std::vector<std::ssub_match>::pointer)v40;
        HIWORD(v146.__match_.__matches_.__end_cap_.__value_) = 1024;
        LODWORD(v146.__match_.__unmatched_.first.__i_) = v129;
        _os_log_impl(&dword_216CFB000, v39, OS_LOG_TYPE_DEFAULT, "[%s:%-5d %.*s:%p] Node %s with nodeID %d already present, replacing it", (uint8_t *)&v146, 0x3Cu);
      }
      rtaid::Detector::checkAndResetAnalyzers(i, v37 + 3);
      std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::erase((_QWORD *)(i + 8), (OpaqueAudioComponentInstance ***)v37);
    }
    v41 = *(_DWORD *)i;
    if (*(_DWORD *)i == 3)
    {
      if (std::string::compare(&v131, "dlfev"))
      {
        v41 = *(_DWORD *)i;
        goto LABEL_57;
      }
      v46 = 1;
    }
    else
    {
LABEL_57:
      if (v41 == 8)
      {
        size = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        {
          v43 = &v131;
        }
        else
        {
          size = v131.__r_.__value_.__l.__size_;
          v43 = (std::string *)v131.__r_.__value_.__r.__words[0];
        }
        v44 = (char *)v43 + size;
        if (size >= 13)
        {
          v47 = v43;
          do
          {
            v45 = (char *)memchr(v47, 112, size - 12);
            if (!v45)
              break;
            if (*(_QWORD *)v45 == 0x2D6F696573616870 && *(_QWORD *)(v45 + 5) == 0x63697361622D6F69)
              goto LABEL_72;
            v47 = (std::string *)(v45 + 1);
            size = v44 - (char *)v47;
          }
          while (v44 - (char *)v47 > 12);
          v45 = v44;
LABEL_72:
          i = v130;
        }
        else
        {
          v45 = (char *)v43 + size;
        }
        v46 = v45 != v44 && v45 - (char *)v43 != -1;
      }
      else
      {
        v46 = 0;
      }
    }
    if (*(double *)v128 >= 8000.0)
      v50 = *(double *)v128;
    else
      v50 = 48000.0;
    if (v50 != *(double *)v128)
    {
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      v52 = rtaid::get_log(void)::rtaid_os_log;
      if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
      {
        v53 = &v131;
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v53 = (std::string *)v131.__r_.__value_.__r.__words[0];
        v54 = *(const char **)v128;
        LODWORD(v146.__begin_.__i_) = 136317186;
        *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v146.__begin_.__i_ + 4) = "Detector.cpp";
        WORD2(v146.__end_.__i_) = 1024;
        *(_DWORD *)((char *)&v146.__end_.__i_ + 6) = 107;
        WORD1(v146.__pregex_) = 1040;
        HIDWORD(v146.__pregex_) = 15;
        LOWORD(v146.__flags_) = 2080;
        *(_QWORD *)((char *)&v146.__flags_ + 2) = "rtaid::Detector]";
        WORD1(v146.__match_.__matches_.__begin_) = 2048;
        *(std::vector<std::ssub_match>::pointer *)((char *)&v146.__match_.__matches_.__begin_ + 4) = (std::vector<std::ssub_match>::pointer)i;
        WORD2(v146.__match_.__matches_.__end_) = 2080;
        *(std::vector<std::ssub_match>::pointer *)((char *)&v146.__match_.__matches_.__end_ + 6) = (std::vector<std::ssub_match>::pointer)v53;
        HIWORD(v146.__match_.__matches_.__end_cap_.__value_) = 1024;
        LODWORD(v146.__match_.__unmatched_.first.__i_) = v129;
        WORD2(v146.__match_.__unmatched_.first.__i_) = 2048;
        *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v146.__match_.__unmatched_.first.__i_ + 6) = v54;
        HIWORD(v146.__match_.__unmatched_.second.__i_) = 2048;
        *(double *)&v146.__match_.__unmatched_.matched = v50;
        _os_log_impl(&dword_216CFB000, v52, OS_LOG_TYPE_DEFAULT, "[%s:%-5d %.*s:%p] Node %s with nodeID %d's book sample rate adjusted from %lf to %lf for reporting period calculation", (uint8_t *)&v146, 0x50u);
      }
    }
    v55 = *(_OWORD *)(v128 + 16);
    *(_OWORD *)&v146.__begin_.__i_ = *(_OWORD *)v128;
    *(_OWORD *)&v146.__pregex_ = v55;
    v146.__match_.__matches_.__begin_ = *(std::vector<std::ssub_match>::pointer *)(v128 + 32);
    LODWORD(v146.__match_.__matches_.__end_) = j;
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v146.__match_.__matches_.__end_cap_, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v146.__match_.__matches_.__end_cap_.__value_ = *(_OWORD *)&v131.__r_.__value_.__l.__data_;
      v146.__match_.__unmatched_.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)v131.__r_.__value_.__r.__words[2];
    }
    v146.__match_.__unmatched_.matched = v126;
    *(&v146.__match_.__unmatched_.matched + 1) = v46;
    v56 = *(const char **)(i + 648);
    v146.__match_.__prefix_.first.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)(i + 640);
    v146.__match_.__prefix_.second.__i_ = v56;
    if (v56)
    {
      v57 = (unint64_t *)(v56 + 8);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    v59 = operator new();
    v60 = v59;
    *(_OWORD *)(v59 + 8) = 0u;
    v61 = (std::string *)(v59 + 8);
    *(_OWORD *)(v59 + 24) = 0u;
    v62 = *(_OWORD *)&v146.__pregex_;
    *(_OWORD *)(v59 + 40) = *(_OWORD *)&v146.__begin_.__i_;
    end = (int)v146.__match_.__matches_.__end_;
    if (LODWORD(v146.__match_.__matches_.__end_) >= 0x400)
      end = 1024;
    *(_DWORD *)v59 = end;
    *(_BYTE *)(v59 + 4) = 0;
    v64 = (std::sub_match<std::__wrap_iter<const char *>> *)(v59 + 40);
    *(_OWORD *)(v59 + 56) = v62;
    *(_QWORD *)(v59 + 72) = v146.__match_.__matches_.__begin_;
    v65 = *(&v146.__match_.__unmatched_.matched + 1);
    v66 = *((_DWORD *)&v146.__flags_ + 1);
    if (*(_WORD *)&v146.__match_.__unmatched_.matched)
      v66 = 1;
    v67 = BYTE4(v146.__end_.__i_) & 0x20 | 9;
    v68 = 4 * v66;
    if ((BYTE4(v146.__end_.__i_) & 0x20) != 0)
      v68 = 4;
    *(_QWORD *)(v59 + 80) = v146.__begin_.__i_;
    *(_DWORD *)(v59 + 88) = 1819304813;
    *(_DWORD *)(v59 + 92) = v67;
    *(_DWORD *)(v59 + 96) = v68;
    *(_DWORD *)(v59 + 100) = 1;
    *(_DWORD *)(v59 + 104) = v68;
    *(_DWORD *)(v59 + 108) = v66;
    *(_QWORD *)(v59 + 112) = 32;
    *(_BYTE *)(v59 + 120) = v65;
    *(_QWORD *)(v59 + 128) = 0;
    {
      rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
    }
    v70 = rtaid::get_log(void)::rtaid_os_log;
    if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
    {
      LODWORD(__p.__begin_.__i_) = 136316162;
      *(std::__wrap_iter<const char *>::iterator_type *)((char *)&__p.__begin_.__i_ + 4) = "NodeFormatConverter.cpp";
      WORD2(__p.__end_.__i_) = 1024;
      *(_DWORD *)((char *)&__p.__end_.__i_ + 6) = 22;
      WORD1(__p.__pregex_) = 1040;
      HIDWORD(__p.__pregex_) = 26;
      LOWORD(__p.__flags_) = 2080;
      *(_QWORD *)((char *)&__p.__flags_ + 2) = "rtaid::NodeFormatConverter]";
      WORD1(__p.__match_.__matches_.__begin_) = 2048;
      *(std::vector<std::ssub_match>::pointer *)((char *)&__p.__match_.__matches_.__begin_ + 4) = v64;
      _os_log_impl(&dword_216CFB000, v70, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] constructed", (uint8_t *)&__p, 0x2Cu);
    }
    *(_BYTE *)(v60 + 136) = 0;
    *(_BYTE *)(v60 + 144) = 0;
    *(_OWORD *)(v60 + 192) = 0u;
    *(_DWORD *)(v60 + 404) = 0;
    *(_BYTE *)(v60 + 408) = 0;
    *(_QWORD *)(v60 + 152) = 0;
    *(_QWORD *)(v60 + 158) = 0;
    *(_QWORD *)(v60 + 168) = 0;
    *(_QWORD *)(v60 + 176) = 0;
    *(_QWORD *)(v60 + 181) = 0;
    *(_OWORD *)(v60 + 208) = 0u;
    *(_OWORD *)(v60 + 224) = 0u;
    *(_BYTE *)(v60 + 240) = 0;
    *(_QWORD *)(v60 + 244) = 0;
    *(_QWORD *)(v60 + 249) = 0;
    v71 = v146.__match_.__prefix_.second.__i_;
    *(_QWORD *)(v60 + 416) = v146.__match_.__prefix_.first.__i_;
    *(_QWORD *)(v60 + 424) = v71;
    if (v71)
    {
      v72 = (unint64_t *)(v71 + 8);
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
    std::string::operator=(v61, (const std::string *)&v146.__match_.__matches_.__end_cap_);
    *(_OWORD *)(v60 + 369) = 0u;
    *(_OWORD *)(v60 + 385) = 0u;
    *(_OWORD *)(v60 + 337) = 0u;
    *(_OWORD *)(v60 + 353) = 0u;
    *(_OWORD *)(v60 + 305) = 0u;
    *(_OWORD *)(v60 + 321) = 0u;
    *(_OWORD *)(v60 + 273) = 0u;
    *(_OWORD *)(v60 + 289) = 0u;
    *(_OWORD *)(v60 + 257) = 0u;
    {
      rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
    }
    v75 = rtaid::get_log(void)::rtaid_os_log;
    if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
    {
      if (SHIBYTE(v146.__match_.__unmatched_.second.__i_) >= 0)
        p_end_cap = (std::sub_match<std::__wrap_iter<const char *>> *)&v146.__match_.__matches_.__end_cap_;
      else
        p_end_cap = v146.__match_.__matches_.__end_cap_.__value_;
      LODWORD(__p.__begin_.__i_) = 136316418;
      *(std::__wrap_iter<const char *>::iterator_type *)((char *)&__p.__begin_.__i_ + 4) = "DetectorNode.cpp";
      WORD2(__p.__end_.__i_) = 1024;
      *(_DWORD *)((char *)&__p.__end_.__i_ + 6) = 67;
      WORD1(__p.__pregex_) = 1040;
      HIDWORD(__p.__pregex_) = 19;
      LOWORD(__p.__flags_) = 2080;
      *(_QWORD *)((char *)&__p.__flags_ + 2) = "rtaid::DetectorNode]";
      WORD1(__p.__match_.__matches_.__begin_) = 2048;
      *(std::vector<std::ssub_match>::pointer *)((char *)&__p.__match_.__matches_.__begin_ + 4) = (std::vector<std::ssub_match>::pointer)v60;
      WORD2(__p.__match_.__matches_.__end_) = 2080;
      *(std::vector<std::ssub_match>::pointer *)((char *)&__p.__match_.__matches_.__end_ + 6) = p_end_cap;
      _os_log_impl(&dword_216CFB000, v75, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] constructed %s", (uint8_t *)&__p, 0x36u);
    }
    v77 = v50 * *(float *)(i + 56);
    v136[0].__begin_ = (std::vector<std::csub_match>::pointer)v60;
    LODWORD(v136[0].__end_) = v77;
    HIDWORD(v136[0].__end_) = 0;
    *(double *)&v136[0].__end_cap_.__value_ = v50;
    v136[1].__begin_ = 0;
    {
      rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
    }
    v79 = rtaid::get_log(void)::rtaid_os_log;
    v80 = v129;
    if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
    {
      v81 = &v131;
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v81 = (std::string *)v131.__r_.__value_.__r.__words[0];
      v82 = *(float *)(i + 56);
      v83 = *(double *)v128;
      LODWORD(__p.__begin_.__i_) = 136317186;
      *(std::__wrap_iter<const char *>::iterator_type *)((char *)&__p.__begin_.__i_ + 4) = "Detector.cpp";
      WORD2(__p.__end_.__i_) = 1024;
      *(_DWORD *)((char *)&__p.__end_.__i_ + 6) = 126;
      WORD1(__p.__pregex_) = 1040;
      HIDWORD(__p.__pregex_) = 15;
      LOWORD(__p.__flags_) = 2080;
      *(_QWORD *)((char *)&__p.__flags_ + 2) = "rtaid::Detector]";
      WORD1(__p.__match_.__matches_.__begin_) = 2048;
      *(std::vector<std::ssub_match>::pointer *)((char *)&__p.__match_.__matches_.__begin_ + 4) = (std::vector<std::ssub_match>::pointer)i;
      WORD2(__p.__match_.__matches_.__end_) = 2080;
      *(std::vector<std::ssub_match>::pointer *)((char *)&__p.__match_.__matches_.__end_ + 6) = (std::vector<std::ssub_match>::pointer)v81;
      HIWORD(__p.__match_.__matches_.__end_cap_.__value_) = 1024;
      LODWORD(__p.__match_.__unmatched_.first.__i_) = v129;
      WORD2(__p.__match_.__unmatched_.first.__i_) = 2048;
      *(double *)((char *)&__p.__match_.__unmatched_.first.__i_ + 6) = v82;
      HIWORD(__p.__match_.__unmatched_.second.__i_) = 2048;
      *(double *)&__p.__match_.__unmatched_.matched = v83;
      _os_log_impl(&dword_216CFB000, v79, OS_LOG_TYPE_DEFAULT, "[%s:%-5d %.*s:%p] Created node %s with nodeID %d - reporting period = %f, sample rate = %lf", (uint8_t *)&__p, 0x50u);
    }
    v84 = *(_QWORD *)(i + 16);
    if (v84)
    {
      v85 = (uint8x8_t)vcnt_s8((int8x8_t)v84);
      v85.i16[0] = vaddlv_u8(v85);
      if (v85.u32[0] > 1uLL)
      {
        i = v129;
        if (v84 <= v129)
          i = v129 % v84;
      }
      else
      {
        i = ((_DWORD)v84 - 1) & v129;
      }
      v86 = (uint64_t **)*((_QWORD *)*v35 + i);
      if (v86)
      {
        for (k = *v86; k; k = (uint64_t *)*k)
        {
          v88 = k[1];
          if (v88 == v129)
          {
            if (*((_DWORD *)k + 4) == v129)
              goto LABEL_191;
          }
          else
          {
            if (v85.u32[0] > 1uLL)
            {
              if (v88 >= v84)
                v88 %= v84;
            }
            else
            {
              v88 &= v84 - 1;
            }
            if (v88 != i)
              break;
          }
        }
      }
    }
    v89 = operator new(0x38uLL);
    v90 = (_QWORD *)(v130 + 24);
    *v89 = 0;
    v89[1] = v129;
    *((_DWORD *)v89 + 4) = v129;
    v89[3] = v136[0].__begin_;
    v136[0].__begin_ = 0;
    *((_OWORD *)v89 + 2) = *(_OWORD *)&v136[0].__end_;
    v89[6] = v136[1].__begin_;
    v91 = (float)(unint64_t)(*(_QWORD *)(v130 + 32) + 1);
    v92 = *(float *)(v130 + 40);
    if (!v84 || (float)(v92 * (float)v84) < v91)
    {
      v93 = 1;
      if (v84 >= 3)
        v93 = (v84 & (v84 - 1)) != 0;
      v94 = v93 | (2 * v84);
      v95 = vcvtps_u32_f32(v91 / v92);
      if (v94 <= v95)
        prime = (int8x8_t)v95;
      else
        prime = (int8x8_t)v94;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
        v97 = v130;
      }
      else
      {
        v97 = v130;
        if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v84 = *(_QWORD *)(v97 + 16);
      if (*(_QWORD *)&prime <= v84)
      {
        if (*(_QWORD *)&prime < v84)
        {
          v104 = vcvtps_u32_f32((float)*(unint64_t *)(v97 + 32) / *(float *)(v97 + 40));
          if (v84 < 3 || (v105 = (uint8x8_t)vcnt_s8((int8x8_t)v84), v105.i16[0] = vaddlv_u8(v105), v105.u32[0] > 1uLL))
          {
            v104 = std::__next_prime(v104);
          }
          else
          {
            v106 = 1 << -(char)__clz(v104 - 1);
            if (v104 >= 2)
              v104 = v106;
          }
          if (*(_QWORD *)&prime <= v104)
            prime = (int8x8_t)v104;
          if (*(_QWORD *)&prime >= v84)
          {
            v84 = *(_QWORD *)(v97 + 16);
          }
          else
          {
            if (prime)
              goto LABEL_147;
            v123 = *v35;
            *v35 = 0;
            if (v123)
              operator delete(v123);
            v84 = 0;
            *(_QWORD *)(v97 + 16) = 0;
          }
        }
      }
      else
      {
LABEL_147:
        if (*(_QWORD *)&prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v98 = operator new(8 * *(_QWORD *)&prime);
        v99 = *v35;
        *v35 = v98;
        if (v99)
          operator delete(v99);
        v100 = 0;
        *(int8x8_t *)(v97 + 16) = prime;
        do
          *((_QWORD *)*v35 + v100++) = 0;
        while (*(_QWORD *)&prime != v100);
        v101 = (_QWORD *)*v90;
        if (*v90)
        {
          v102 = v101[1];
          v103 = (uint8x8_t)vcnt_s8(prime);
          v103.i16[0] = vaddlv_u8(v103);
          if (v103.u32[0] > 1uLL)
          {
            if (v102 >= *(_QWORD *)&prime)
              v102 %= *(_QWORD *)&prime;
          }
          else
          {
            v102 &= *(_QWORD *)&prime - 1;
          }
          *((_QWORD *)*v35 + v102) = v90;
          v107 = (_QWORD *)*v101;
          if (*v101)
          {
            do
            {
              v108 = v107[1];
              if (v103.u32[0] > 1uLL)
              {
                if (v108 >= *(_QWORD *)&prime)
                  v108 %= *(_QWORD *)&prime;
              }
              else
              {
                v108 &= *(_QWORD *)&prime - 1;
              }
              if (v108 != v102)
              {
                if (!*((_QWORD *)*v35 + v108))
                {
                  *((_QWORD *)*v35 + v108) = v101;
                  goto LABEL_172;
                }
                *v101 = *v107;
                *v107 = **((_QWORD **)*v35 + v108);
                **((_QWORD **)*v35 + v108) = v107;
                v107 = v101;
              }
              v108 = v102;
LABEL_172:
              v101 = v107;
              v107 = (_QWORD *)*v107;
              v102 = v108;
            }
            while (v107);
          }
        }
        v84 = (unint64_t)prime;
      }
      if ((v84 & (v84 - 1)) != 0)
      {
        if (v84 <= v129)
          i = v129 % v84;
        else
          i = v129;
      }
      else
      {
        i = ((_DWORD)v84 - 1) & v129;
      }
    }
    v109 = *v35;
    v110 = (_QWORD *)*((_QWORD *)*v35 + i);
    if (v110)
    {
      *v89 = *v110;
      v80 = v129;
      v111 = v130;
    }
    else
    {
      *v89 = *v90;
      *v90 = v89;
      v109[i] = v90;
      v80 = v129;
      v111 = v130;
      if (!*v89)
        goto LABEL_190;
      v112 = *(_QWORD *)(*v89 + 8);
      if ((v84 & (v84 - 1)) != 0)
      {
        if (v112 >= v84)
          v112 %= v84;
      }
      else
      {
        v112 &= v84 - 1;
      }
      v110 = (char *)*v35 + 8 * v112;
    }
    *v110 = v89;
LABEL_190:
    ++*(_QWORD *)(v111 + 32);
LABEL_191:
    if (v136[0].__begin_)
    {
      rtaid::DetectorNode::~DetectorNode((OpaqueAudioComponentInstance **)v136[0].__begin_);
      MEMORY[0x219A00DF0]();
    }
    v113 = (std::__shared_weak_count *)v146.__match_.__prefix_.second.__i_;
    v13 = v127;
    if (v146.__match_.__prefix_.second.__i_)
    {
      v114 = (unint64_t *)(v146.__match_.__prefix_.second.__i_ + 8);
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
    if (SHIBYTE(v146.__match_.__unmatched_.second.__i_) < 0)
      operator delete(v146.__match_.__matches_.__end_cap_.__value_);
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v131.__r_.__value_.__l.__data_);
    v116 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
    if (*((_QWORD *)&v134 + 1))
    {
      v117 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    std::locale::~locale(&v132.__loc_);
    v119 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(v35, v80);
    v21 = 0;
    if (v119)
      *(_BYTE *)(v119[3] + 188) = v125;
    goto LABEL_209;
  }
  v21 = 0xFFFFFFFFLL;
LABEL_209:
  if (v13)
  {
    v120 = (unint64_t *)&v13->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_214:
  std::mutex::unlock((std::mutex *)&SingletonManagerInstance(void)::sInstance);
  return v21;
}

void sub_216D015C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::locale a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::locale::~locale(&a26);
  std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::mutex::unlock((std::mutex *)&SingletonManagerInstance(void)::sInstance);
  _Unwind_Resume(a1);
}

uint64_t AudioIssueDetectorUpdateReportingSessions(unint64_t a1, char **a2)
{
  SingletonManagerInstance();
  return rtaid::Manager::UpdateReportingSessionsOnDetector(a1, a2);
}

uint64_t rtaid::Manager::UpdateReportingSessionsOnDetector(unint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  char *v10;
  char *v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  void **v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  char *v22;
  void *v23;
  char *v24;
  rtaid *v25;
  char *v26;
  _BYTE *v27;
  size_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  char *v38;
  void *v39;
  char *v40;
  _WORD *v41;
  _WORD *v42;
  float v43;
  uint64_t *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v48;
  std::__shared_weak_count *v49;

  std::mutex::lock((std::mutex *)&SingletonManagerInstance(void)::sInstance);
  v4 = std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>>>::find<long long>(a1);
  if (!v4)
  {
    v19 = 0xFFFFFFFFLL;
    goto LABEL_69;
  }
  v5 = v4[3];
  v6 = (std::__shared_weak_count *)v4[4];
  v48 = v5;
  v49 = v6;
  if (!v6)
  {
    v9 = 0;
    if (v5)
      goto LABEL_6;
LABEL_20:
    v19 = 0xFFFFFFFFLL;
    if (!v9)
      goto LABEL_69;
    goto LABEL_65;
  }
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v6;
  if (!v5)
    goto LABEL_20;
LABEL_6:
  if ((char **)(v5 + 592) == a2)
    goto LABEL_31;
  v10 = *a2;
  v11 = a2[1];
  v12 = v11 - *a2;
  v13 = v12 >> 3;
  v14 = *(_QWORD *)(v5 + 608);
  v15 = *(char **)(v5 + 592);
  if (v12 >> 3 <= (unint64_t)((v14 - (uint64_t)v15) >> 3))
  {
    v18 = (void **)(v5 + 600);
    v20 = *(_BYTE **)(v5 + 600);
    v21 = (v20 - v15) >> 3;
    if (v21 < v13)
    {
      v22 = &v10[8 * v21];
      if (v20 != v15)
      {
        memmove(*(void **)(v5 + 592), v10, v20 - v15);
        v15 = (char *)*v18;
      }
      v12 = v11 - v22;
      if (v11 == v22)
        goto LABEL_30;
      v23 = v15;
      v24 = v22;
      goto LABEL_29;
    }
  }
  else
  {
    if (v15)
    {
      *(_QWORD *)(v5 + 600) = v15;
      operator delete(v15);
      v14 = 0;
      *(_QWORD *)(v5 + 592) = 0;
      *(_QWORD *)(v5 + 600) = 0;
      *(_QWORD *)(v5 + 608) = 0;
    }
    if (v12 < 0)
      goto LABEL_70;
    v16 = v14 >> 2;
    if (v14 >> 2 <= v13)
      v16 = v12 >> 3;
    v17 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v16;
    if (v17 >> 61)
LABEL_70:
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(8 * v17);
    *(_QWORD *)(v5 + 592) = v15;
    v18 = (void **)(v5 + 600);
    *(_QWORD *)(v5 + 600) = v15;
    *(_QWORD *)(v5 + 608) = &v15[8 * v17];
  }
  if (v11 != v10)
  {
    v23 = v15;
    v24 = v10;
LABEL_29:
    memmove(v23, v24, v12);
  }
LABEL_30:
  *v18 = &v15[v12];
LABEL_31:
  rtaid::ConfigurationManager::DetermineConfiguration((rtaid::ConfigurationManager *)qword_253D977D0, (rtaid::Detector *)v5, 0);
  v25 = (rtaid *)qword_253D977D0;
  if (v5 + 616 == qword_253D977D0 + 72)
    goto LABEL_53;
  v26 = *(char **)(qword_253D977D0 + 72);
  v27 = *(_BYTE **)(qword_253D977D0 + 80);
  v28 = v27 - v26;
  v29 = (v27 - v26) >> 1;
  v30 = *(_QWORD *)(v5 + 632);
  v31 = *(char **)(v5 + 616);
  if (v29 <= (uint64_t)(v30 - (_QWORD)v31) >> 1)
  {
    v34 = (void **)(v5 + 624);
    v36 = *(_BYTE **)(v5 + 624);
    v37 = (v36 - v31) >> 1;
    if (v37 < v29)
    {
      v38 = &v26[2 * v37];
      if (v36 != v31)
      {
        memmove(*(void **)(v5 + 616), v26, v36 - v31);
        v31 = (char *)*v34;
      }
      v28 = v27 - v38;
      if (v27 == v38)
        goto LABEL_52;
      v39 = v31;
      v40 = v38;
      goto LABEL_51;
    }
  }
  else
  {
    if (v31)
    {
      *(_QWORD *)(v5 + 624) = v31;
      operator delete(v31);
      v30 = 0;
      *(_QWORD *)(v5 + 616) = 0;
      *(_QWORD *)(v5 + 624) = 0;
      *(_QWORD *)(v5 + 632) = 0;
    }
    if ((v28 & 0x8000000000000000) != 0
      || (v30 <= v29 ? (v32 = (v27 - v26) >> 1) : (v32 = v30),
          v30 >= 0x7FFFFFFFFFFFFFFELL ? (v33 = 0x7FFFFFFFFFFFFFFFLL) : (v33 = v32),
          v33 < 0))
    {
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    }
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioServiceType>>(v33);
    *(_QWORD *)(v5 + 616) = v31;
    v34 = (void **)(v5 + 624);
    *(_QWORD *)(v5 + 624) = v31;
    *(_QWORD *)(v5 + 632) = &v31[2 * v35];
  }
  if (v27 != v26)
  {
    v39 = v31;
    v40 = v26;
LABEL_51:
    memmove(v39, v40, v28);
  }
LABEL_52:
  *v34 = &v31[v28];
  v25 = (rtaid *)qword_253D977D0;
LABEL_53:
  if (*((_BYTE *)v25 + 117))
  {
    v41 = *(_WORD **)(v5 + 616);
    v42 = *(_WORD **)(v5 + 624);
    v43 = 10.0;
    if (v41 != v42)
    {
      while (*v41 == 13)
      {
        if (++v41 == v42)
          goto LABEL_59;
      }
      if (v41 != v42)
        goto LABEL_60;
LABEL_59:
      v43 = 3.0;
    }
LABEL_60:
    if (*(float *)(v5 + 56) != v43)
    {
      *(float *)(v5 + 56) = v43;
      v44 = *(uint64_t **)(v5 + 24);
      if (v44)
      {
        do
        {
          rtaid::Detector::checkAndResetAnalyzers(v5, v44 + 3);
          *((_DWORD *)v44 + 9) = 0;
          *((_DWORD *)v44 + 8) = (*((double *)v44 + 5) * *(float *)(v5 + 56));
          v44 = (uint64_t *)*v44;
        }
        while (v44);
        v25 = (rtaid *)qword_253D977D0;
        v6 = v49;
      }
    }
  }
  rtaid::Manager::applyConfiguration(v25, (int8x8_t *)v5);
  rtaid::Manager::applyTelephonyResets(*(int **)(qword_253D977D0 + 48), *(int **)(qword_253D977D0 + 56), &v48);
  v19 = 0;
  v9 = v6;
  if (v6)
  {
LABEL_65:
    v45 = (unint64_t *)&v9->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_69:
  std::mutex::unlock((std::mutex *)&SingletonManagerInstance(void)::sInstance);
  return v19;
}

void sub_216D01AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock((std::mutex *)&SingletonManagerInstance(void)::sInstance);
  _Unwind_Resume(a1);
}

uint64_t AudioIssueDetectorAnalyzeBuffer(unint64_t a1, unsigned int a2, char a3, const AudioBufferList *a4, unsigned int a5, const AudioTimeStamp *a6)
{
  uint64_t v13;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  char v20;
  unsigned __int8 v21;
  uint64_t mNumberBuffers;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  unsigned int v30;
  unsigned int v31;

  SingletonManagerInstance();
  if (atomic_load((unsigned int *)&dword_253D97770))
    return 0;
  v15 = std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>>>::find<long long>(a1);
  if (!v15)
    return 0xFFFFFFFFLL;
  v17 = v15[3];
  v16 = (std::__shared_weak_count *)v15[4];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  if (v17)
  {
    v20 = 0;
    if (a2 == 49 && *(_DWORD *)v17 == 3)
    {
      v21 = atomic_load((unsigned __int8 *)&unk_253D977AC);
      v20 = v21 & 1;
    }
    v13 = 0;
    if ((a3 & 1) == 0 && (v20 & 1) == 0)
    {
      mNumberBuffers = a4->mNumberBuffers;
      if ((mNumberBuffers - 33) >= 0xFFFFFFE0)
      {
        v25 = 0;
        v26 = 16 * mNumberBuffers;
        while (a4->mBuffers[v25 / 0x10].mData && a4->mBuffers[v25 / 0x10].mDataByteSize)
        {
          v25 += 16;
          if (v26 == v25)
          {
            v27 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((_QWORD *)(v17 + 8), a2);
            if (!v27)
            {
              v13 = 4294967294;
              goto LABEL_18;
            }
            v28 = v27;
            v29 = v27 + 3;
            v13 = rtaid::DetectorNode::AnalyzeABL((rtaid::DetectorNode *)v27[3], a6, a4, a5);
            v28[6] = *(_QWORD *)&a6->mSampleTime;
            if ((_DWORD)v13)
              goto LABEL_18;
            v30 = *((_DWORD *)v28 + 8);
            v31 = *((_DWORD *)v28 + 9) + a5;
            *((_DWORD *)v28 + 9) = v31;
            if (v31 >= v30)
            {
              *((_DWORD *)v28 + 9) = v31 % v30;
              rtaid::Detector::checkAndResetAnalyzers(v17, v29);
            }
            break;
          }
        }
      }
      v13 = 0;
    }
  }
  else
  {
    v13 = 0xFFFFFFFFLL;
  }
LABEL_18:
  if (v16)
  {
    v23 = (unint64_t *)&v16->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v13;
}

void sub_216D01CD8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>>>::find<long long>(unint64_t a1)
{
  uint8x8_t v1;
  unint64_t v2;
  _QWORD *i;
  unint64_t v4;

  if (!qword_253D97748)
    return 0;
  v1 = (uint8x8_t)vcnt_s8((int8x8_t)qword_253D97748);
  v1.i16[0] = vaddlv_u8(v1);
  if (v1.u32[0] > 1uLL)
  {
    v2 = a1;
    if (qword_253D97748 <= a1)
      v2 = a1 % qword_253D97748;
  }
  else
  {
    v2 = (qword_253D97748 - 1) & a1;
  }
  i = *(_QWORD **)(qword_253D97740 + 8 * v2);
  if (i)
  {
    for (i = (_QWORD *)*i; i; i = (_QWORD *)*i)
    {
      v4 = i[1];
      if (v4 == a1)
      {
        if (i[2] == a1)
          return i;
      }
      else
      {
        if (v1.u32[0] > 1uLL)
        {
          if (v4 >= qword_253D97748)
            v4 %= (unint64_t)qword_253D97748;
        }
        else
        {
          v4 &= qword_253D97748 - 1;
        }
        if (v4 != v2)
          return 0;
      }
    }
  }
  return i;
}

void SingletonManagerInstance(void)
{
  unsigned __int8 v0;
  uint64_t *v1;

  {
    std::make_unique[abi:ne180100]<AudioIssueDetectorDependencyInjection>(&v1);
    rtaid::Manager::Manager((uint64_t *)&v1);
    if (v1)
      std::default_delete<AudioIssueDetectorDependencyInjection>::operator()[abi:ne180100](v1);
  }
}

void sub_216D01E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  if (a10)
    std::default_delete<AudioIssueDetectorDependencyInjection>::operator()[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

uint64_t rtaid::DetectorNode::AnalyzeABL(rtaid::DetectorNode *this, const AudioTimeStamp *a2, const AudioBufferList *a3, unsigned int a4)
{
  uint64_t v4;
  unsigned int v5;
  const AudioBufferList *v6;
  unsigned __int8 *v8;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t mNumberBuffers;
  uint64_t v15;
  char *v16;
  size_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  void **v22;
  unsigned int v23;
  OpaqueAudioConverter *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _DWORD *v28;
  unint64_t v29;
  const float *v30;
  char *v31;
  char *v32;
  const float *v33;
  char *v34;
  const float *v35;
  uint64_t v36;
  OpaqueAudioComponentInstance *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned __int8 v43;
  NSObject *v44;
  _QWORD *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  char *v51;
  void **p_mData;
  const AudioBufferList *v53;
  AudioTimeStamp inTimeStamp;
  float v55;
  float __C;
  const char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  char *v63;
  __int16 v64;
  rtaid::DetectorNode *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  _QWORD *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 42) > 3u)
    return 0;
  v5 = a4;
  v6 = a3;
  v8 = (unsigned __int8 *)this + 408;
  do
  {
    if (__ldaxr(v8))
    {
      __clrex();
      v40 = *((unsigned int *)this + 42);
      v4 = 4294967292;
      if (v40 <= 3)
      {
        *((_DWORD *)this + 42) = v40 + 1;
        *((_DWORD *)this + v40 + 43) = -4;
      }
      return v4;
    }
  }
  while (__stlxr(1u, v8));
  if (!*((_BYTE *)this + 4)
    || (v10 = *(_OWORD *)&a2->mRateScalar,
        *(_OWORD *)&inTimeStamp.mSampleTime = *(_OWORD *)&a2->mSampleTime,
        *(_OWORD *)&inTimeStamp.mRateScalar = v10,
        v11 = *(_OWORD *)&a2->mSMPTETime.mHours,
        *(_OWORD *)&inTimeStamp.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes,
        *(_OWORD *)&inTimeStamp.mSMPTETime.mHours = v11,
        !a4))
  {
    v4 = 0;
    goto LABEL_51;
  }
  v12 = 0;
  v51 = (char *)this + 172;
  p_mData = &a3->mBuffers[0].mData;
  v53 = a3;
  while (1)
  {
    v13 = v5 >= 0x400 ? 1024 : v5;
    mNumberBuffers = v6->mNumberBuffers;
    MEMORY[0x24BDAC7A8]();
    v16 = (char *)&v50 - v15;
    bzero((char *)&v50 - v15, v17);
    *(_DWORD *)v16 = mNumberBuffers;
    if ((_DWORD)mNumberBuffers)
      break;
LABEL_16:
    v24 = (OpaqueAudioConverter *)*((_QWORD *)this + 16);
    if (v24)
    {
      v25 = *((_QWORD *)this + 17);
      v26 = *(unsigned int *)(v25 + 48);
      if (*(_DWORD *)(v25 + 48))
      {
        v27 = 4 * *(_DWORD *)this;
        v28 = (_DWORD *)(v25 + 60);
        do
        {
          *v28 = v27 * *(v28 - 1);
          v28 += 4;
          --v26;
        }
        while (v26);
      }
      v4 = AudioConverterConvertComplexBuffer(v24, v13, (const AudioBufferList *)v16, (AudioBufferList *)(v25 + 48));
      if ((_DWORD)v4)
      {
        {
          rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
        }
        v44 = rtaid::get_log(void)::rtaid_os_log;
        if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_ERROR))
        {
          v45 = (_QWORD *)((char *)this + 8);
          if (*((char *)this + 31) < 0)
            v45 = (_QWORD *)*v45;
          v46 = *((_DWORD *)v16 + 3);
          v47 = *(_DWORD *)v16;
          v48 = *(_DWORD *)(v25 + 60);
          v49 = *(_DWORD *)(v25 + 48);
          __C = 4.8162e-34;
          v57 = "DetectorNode.cpp";
          v58 = 1024;
          v59 = 509;
          v60 = 1040;
          v61 = 19;
          v62 = 2080;
          v63 = "rtaid::DetectorNode]";
          v64 = 2048;
          v65 = this;
          v66 = 1024;
          v67 = v4;
          v68 = 2080;
          v69 = v45;
          v70 = 1024;
          v71 = v13;
          v72 = 1024;
          v73 = v46;
          v74 = 1024;
          v75 = v47;
          v76 = 1024;
          v77 = v48;
          v78 = 1024;
          v79 = v49;
          _os_log_impl(&dword_216CFB000, v44, OS_LOG_TYPE_ERROR, "[%s:%-5d %.*s:%p] Caught converter error (%d) at %s, %d frames (%d %d) vs (%d %d)\n", (uint8_t *)&__C, 0x5Au);
        }
        v41 = *((_DWORD *)this + 42);
        if (v41 > 3)
          goto LABEL_51;
LABEL_50:
        *((_DWORD *)this + 42) = v41 + 1;
        *(_DWORD *)&v51[4 * v41] = v4;
        goto LABEL_51;
      }
      if (*((_QWORD *)this + 16))
        v16 = (char *)(*((_QWORD *)this + 17) + 48);
    }
    if (*((_BYTE *)this + 164) || *((_BYTE *)this + 157) || *((_BYTE *)this + 165) || *((_BYTE *)this + 158))
    {
      if (*((_QWORD *)this + 25) != *((_QWORD *)this + 24))
      {
        v29 = 0;
        v30 = (const float *)*((_QWORD *)v16 + 2);
        v31 = v16 + 8;
        do
        {
          __C = 0.0;
          v32 = v16 + 8;
          v33 = v30;
          if (!*((_BYTE *)this + 240))
          {
            v33 = (const float *)*((_QWORD *)v31 + 1);
            v32 = v31;
          }
          vDSP_svesq(v33, *(unsigned int *)v32, &__C, v13);
          *(float *)(*((_QWORD *)this + 24) + 4 * v29) = __C + *(float *)(*((_QWORD *)this + 24) + 4 * v29);
          v55 = 0.0;
          v34 = v16 + 8;
          v35 = v30;
          if (!*((_BYTE *)this + 240))
          {
            v35 = (const float *)*((_QWORD *)v31 + 1);
            v34 = v31;
          }
          vDSP_maxmgv(v35, *(unsigned int *)v34, &v55, v13);
          v36 = *((_QWORD *)this + 27);
          if (v55 > *(float *)(v36 + 4 * v29))
            *(float *)(v36 + 4 * v29) = v55;
          if (!v29)
          {
            *((_BYTE *)this + 256) = 0;
            *((_DWORD *)this + 62) = 0;
          }
          ++v30;
          ++v29;
          v31 += 16;
        }
        while (v29 < (uint64_t)(*((_QWORD *)this + 25) - *((_QWORD *)this + 24)) >> 2);
      }
      *((_DWORD *)this + 61) += v13;
      v6 = v53;
    }
    v37 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 4);
    if (v37)
    {
      v38 = AudioUnitProcess(v37, 0, &inTimeStamp, v13, (AudioBufferList *)v16);
      v4 = v38;
      if ((_DWORD)v38)
      {
        v39 = *((unsigned int *)this + 42);
        if (v39 <= 3)
        {
          *((_DWORD *)this + 42) = v39 + 1;
          *(_DWORD *)&v51[4 * v39] = v38;
        }
      }
    }
    else
    {
      v4 = 0;
    }
    v12 += v13;
    inTimeStamp.mSampleTime = inTimeStamp.mSampleTime + (double)v13;
    v5 -= v13;
    if (!v5)
      goto LABEL_51;
  }
  v18 = *((_DWORD *)this + 16);
  v19 = v18 * v13;
  v20 = (v12 * v18);
  v21 = v16 + 16;
  v22 = p_mData;
  while (1)
  {
    v23 = *((_DWORD *)v22 - 1);
    *((_DWORD *)v21 - 2) = *((_DWORD *)v22 - 2);
    *((_DWORD *)v21 - 1) = v19;
    *v21 = (char *)*v22 + v20;
    if (v19 > v23)
      break;
    v22 += 2;
    v21 += 2;
    if (!--mNumberBuffers)
      goto LABEL_16;
  }
  v41 = *((_DWORD *)this + 42);
  v4 = 4294967246;
  if (v41 < 4)
    goto LABEL_50;
LABEL_51:
  atomic_store(0, v8);
  return v4;
}

void sub_216D02418(_Unwind_Exception *a1)
{
  unsigned __int8 *v1;

  atomic_store(0, v1);
  _Unwind_Resume(a1);
}

void rtaid::ConfigurationManager::DetermineConfiguration(rtaid::ConfigurationManager *this, rtaid::Detector *a2, char a3)
{
  rtaid::ConfigurationManager *j;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t inserted;
  unsigned __int8 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *i;
  uint64_t *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  std::string::size_type size;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t **v45;
  uint64_t **v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t **v53;
  uint64_t **v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t **leaf_high;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t **v61;
  _QWORD *v62;
  _QWORD *v63;
  unsigned int v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  _QWORD *v68;
  __int16 v69;
  unint64_t v70;
  _WORD *v71;
  unsigned __int16 *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _WORD *v79;
  __int16 v80;
  unsigned __int16 *v81;
  BOOL v82;
  BOOL v83;
  int v84;
  BOOL v86;
  unsigned int *v87;
  unsigned int *k;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  int v93;
  uint64_t *v94;
  uint64_t v95;
  __int128 v96;
  _BOOL4 v97;
  int64_t v98;
  char v99;
  std::string *v100;
  char *v101;
  std::string *v102;
  char *v103;
  char v104;
  unint64_t v105;
  char *v106;
  _DWORD *v107;
  _DWORD *v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  BOOL v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  _DWORD *v120;
  int v121;
  int v122;
  unint64_t v123;
  char *v124;
  _DWORD *v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  _DWORD *v132;
  unint64_t v133;
  int v134;
  int v135;
  char __p;
  void *__pa;
  uint64_t **v138;
  rtaid::ConfigurationManager *v140;
  uint64_t v141;
  _QWORD *v142[3];
  std::string v143;
  char v144;
  unsigned int v145[2];
  uint64_t v146;
  unsigned int *v147;
  uint64_t v148;

  j = this;
  v148 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)this + 117) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 7) = *((_QWORD *)this + 6);
  *((_QWORD *)this + 10) = *((_QWORD *)this + 9);
  v5 = (uint64_t **)((char *)this + 8);
  std::__tree<ADAM::EndPointBitMask>::destroy(*((_QWORD **)this + 1));
  *(_QWORD *)j = v5;
  *((_QWORD *)j + 2) = 0;
  *v5 = 0;
  v6 = (uint64_t *)((char *)j + 32);
  std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::destroy(*((_QWORD **)j + 4));
  *((_QWORD *)j + 3) = (char *)j + 32;
  *((_QWORD *)j + 4) = 0;
  *((_QWORD *)j + 5) = 0;
  if ((v8 & 1) == 0)
  {
    if ((_DWORD)inserted)
    {
      qword_253D97850 = 0;
      rtaid::ConfigurationManager::GetDefaultConfiguration(void)::sDefaultConfig = (uint64_t)&qword_253D97850;
      qword_253D97870 = 0;
      unk_253D97868 = 0;
      qword_253D97858 = 0;
      qword_253D97860 = (uint64_t)&unk_253D97868;
    }
  }
  if (rtaid::ConfigurationManager::GetDefaultConfiguration(void)::onceToken != -1)
    dispatch_once(&rtaid::ConfigurationManager::GetDefaultConfiguration(void)::onceToken, &__block_literal_global_159);
  v140 = j;
  v138 = (uint64_t **)((char *)j + 24);
  if (j == (rtaid::ConfigurationManager *)&rtaid::ConfigurationManager::GetDefaultConfiguration(void)::sDefaultConfig)
    goto LABEL_122;
  v9 = (uint64_t *)rtaid::ConfigurationManager::GetDefaultConfiguration(void)::sDefaultConfig;
  if (*((_QWORD *)j + 2))
  {
    v10 = *(_QWORD *)j;
    v11 = *((_QWORD *)j + 1);
    *(_QWORD *)j = v5;
    *(_QWORD *)(v11 + 16) = 0;
    *v5 = 0;
    v5[1] = 0;
    if (*(_QWORD *)(v10 + 8))
      v12 = *(_QWORD **)(v10 + 8);
    else
      v12 = (_QWORD *)v10;
    if (v12)
    {
      v13 = std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::_DetachedTreeCache::__detach_next((uint64_t)v12);
      if (v9 == &qword_253D97850)
      {
        v9 = &qword_253D97850;
      }
      else
      {
        v14 = v12;
        v15 = v9;
        do
        {
          v12 = v13;
          v16 = *((_DWORD *)v15 + 7);
          *((_DWORD *)v14 + 7) = v16;
          v17 = *v5;
          v18 = v5;
          v19 = v5;
          if (*v5)
          {
            do
            {
              while (1)
              {
                v18 = (uint64_t **)v17;
                if (v16 >= *((_DWORD *)v17 + 7))
                  break;
                v17 = (uint64_t *)*v17;
                v19 = v18;
                if (!*v18)
                  goto LABEL_18;
              }
              v17 = (uint64_t *)v17[1];
            }
            while (v17);
            v19 = v18 + 1;
          }
LABEL_18:
          std::__tree<rtaid::AnalyzerType>::__insert_node_at((uint64_t **)j, (uint64_t)v18, v19, v14);
          if (v13)
            v13 = std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::_DetachedTreeCache::__detach_next((uint64_t)v13);
          else
            v13 = 0;
          v20 = (uint64_t *)v15[1];
          if (v20)
          {
            do
            {
              v9 = v20;
              v20 = (uint64_t *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v9 = (uint64_t *)v15[2];
              v82 = *v9 == (_QWORD)v15;
              v15 = v9;
            }
            while (!v82);
          }
          if (!v12)
            break;
          v14 = v12;
          v15 = v9;
        }
        while (v9 != &qword_253D97850);
      }
      std::__tree<ADAM::EndPointBitMask>::destroy(v12);
      if (!v13)
        goto LABEL_36;
      for (i = (_QWORD *)v13[2]; i; i = (_QWORD *)i[2])
        v13 = i;
      v21 = v13;
    }
    else
    {
      v21 = 0;
    }
    std::__tree<ADAM::EndPointBitMask>::destroy(v21);
  }
LABEL_36:
  __p = a3;
  if (v9 != &qword_253D97850)
  {
    do
    {
      v23 = (uint64_t *)operator new(0x20uLL);
      v24 = *((_DWORD *)v9 + 7);
      *((_DWORD *)v23 + 7) = v24;
      v25 = *v5;
      v26 = v5;
      v27 = v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v26 = (uint64_t **)v25;
            if (v24 >= *((_DWORD *)v25 + 7))
              break;
            v25 = (uint64_t *)*v25;
            v27 = v26;
            if (!*v26)
              goto LABEL_43;
          }
          v25 = (uint64_t *)v25[1];
        }
        while (v25);
        v27 = v26 + 1;
      }
LABEL_43:
      inserted = (uint64_t)std::__tree<rtaid::AnalyzerType>::__insert_node_at((uint64_t **)j, (uint64_t)v26, v27, v23);
      v28 = (uint64_t *)v9[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (uint64_t *)v9[2];
          v82 = *v29 == (_QWORD)v9;
          v9 = v29;
        }
        while (!v82);
      }
      v9 = v29;
    }
    while (v29 != &qword_253D97850);
  }
  v30 = qword_253D97860;
  if (*((_QWORD *)j + 5))
  {
    v31 = (uint64_t **)((char *)j + 24);
    v32 = *v138;
    *v138 = v6;
    *(_QWORD *)(*v6 + 16) = 0;
    *v6 = 0;
    *((_QWORD *)j + 5) = 0;
    if (v32[1])
      size = v32[1];
    else
      size = (std::string::size_type)v32;
    v143.__r_.__value_.__r.__words[0] = (std::string::size_type)j + 24;
    v143.__r_.__value_.__l.__size_ = size;
    v143.__r_.__value_.__r.__words[2] = size;
    if (size)
    {
      v143.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::_DetachedTreeCache::__detach_next(size);
      if ((_UNKNOWN *)v30 == &unk_253D97868)
      {
        v59 = &unk_253D97868;
      }
      else
      {
        do
        {
          if (size != v30)
          {
            v34 = *(_QWORD **)(v30 + 32);
            v35 = (_QWORD *)(v30 + 40);
            if (*(_QWORD *)(size + 48))
            {
              v37 = (uint64_t **)(size + 40);
              v36 = *(_QWORD *)(size + 40);
              v38 = *(_QWORD *)(size + 32);
              *(_QWORD *)(size + 32) = size + 40;
              *(_QWORD *)(v36 + 16) = 0;
              *(_QWORD *)(size + 40) = 0;
              *(_QWORD *)(size + 48) = 0;
              if (*(_QWORD *)(v38 + 8))
                v39 = *(uint64_t **)(v38 + 8);
              else
                v39 = (uint64_t *)v38;
              if (v39)
              {
                v40 = std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::_DetachedTreeCache::__detach_next((uint64_t)v39);
                if (v34 == v35)
                {
                  v42 = v39;
                }
                else
                {
                  v41 = v34;
                  do
                  {
                    v42 = v40;
                    v43 = *(_QWORD *)((char *)v41 + 28);
                    *(uint64_t *)((char *)v39 + 28) = v43;
                    v44 = *v37;
                    v45 = (uint64_t **)(size + 40);
                    v46 = (uint64_t **)(size + 40);
                    if (*v37)
                    {
                      do
                      {
                        while (1)
                        {
                          v45 = (uint64_t **)v44;
                          if (v43 >= *((_DWORD *)v44 + 7))
                            break;
                          v44 = (uint64_t *)*v44;
                          v46 = v45;
                          if (!*v45)
                            goto LABEL_69;
                        }
                        v44 = (uint64_t *)v44[1];
                      }
                      while (v44);
                      v46 = v45 + 1;
                    }
LABEL_69:
                    std::__tree<rtaid::AnalyzerType>::__insert_node_at((uint64_t **)(size + 32), (uint64_t)v45, v46, v39);
                    if (v40)
                      v40 = std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::_DetachedTreeCache::__detach_next((uint64_t)v40);
                    else
                      v40 = 0;
                    v47 = (_QWORD *)v41[1];
                    if (v47)
                    {
                      do
                      {
                        v34 = v47;
                        v47 = (_QWORD *)*v47;
                      }
                      while (v47);
                    }
                    else
                    {
                      do
                      {
                        v34 = (_QWORD *)v41[2];
                        v82 = *v34 == (_QWORD)v41;
                        v41 = v34;
                      }
                      while (!v82);
                    }
                    if (!v42)
                      break;
                    v39 = v42;
                    v41 = v34;
                  }
                  while (v34 != v35);
                }
                std::__tree<ADAM::EndPointBitMask>::destroy(v42);
                if (v40)
                {
                  v48 = (uint64_t *)v40[2];
                  for (j = v140; v48; v48 = (uint64_t *)v48[2])
                    v40 = v48;
                  std::__tree<ADAM::EndPointBitMask>::destroy(v40);
                  v31 = v138;
                }
                else
                {
                  j = v140;
                  v31 = v138;
                }
              }
              else
              {
                std::__tree<ADAM::EndPointBitMask>::destroy(0);
                j = v140;
              }
            }
            if (v34 != v35)
            {
              v49 = (uint64_t **)(size + 40);
              do
              {
                v50 = (uint64_t *)operator new(0x28uLL);
                v51 = *(_QWORD *)((char *)v34 + 28);
                *(uint64_t *)((char *)v50 + 28) = v51;
                v52 = *v49;
                v53 = (uint64_t **)(size + 40);
                v54 = (uint64_t **)(size + 40);
                if (*v49)
                {
                  do
                  {
                    while (1)
                    {
                      v53 = (uint64_t **)v52;
                      if (*((_DWORD *)v52 + 7) <= v51)
                        break;
                      v52 = (uint64_t *)*v52;
                      v54 = v53;
                      if (!*v53)
                        goto LABEL_95;
                    }
                    v52 = (uint64_t *)v52[1];
                  }
                  while (v52);
                  v54 = v53 + 1;
                }
LABEL_95:
                std::__tree<rtaid::AnalyzerType>::__insert_node_at((uint64_t **)(size + 32), (uint64_t)v53, v54, v50);
                v55 = (_QWORD *)v34[1];
                if (v55)
                {
                  do
                  {
                    v56 = v55;
                    v55 = (_QWORD *)*v55;
                  }
                  while (v55);
                }
                else
                {
                  do
                  {
                    v56 = (_QWORD *)v34[2];
                    v82 = *v56 == (_QWORD)v34;
                    v34 = v56;
                  }
                  while (!v82);
                }
                v34 = v56;
              }
              while (v56 != v35);
            }
          }
          leaf_high = (uint64_t **)std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__find_leaf_high((uint64_t)v31, &v146, (_QWORD **)(size + 32));
          std::__tree<rtaid::AnalyzerType>::__insert_node_at(v31, v146, leaf_high, (uint64_t *)size);
          size = v143.__r_.__value_.__l.__size_;
          v143.__r_.__value_.__r.__words[2] = v143.__r_.__value_.__l.__size_;
          if (v143.__r_.__value_.__l.__size_)
            v143.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::_DetachedTreeCache::__detach_next(v143.__r_.__value_.__l.__size_);
          v58 = *(_QWORD **)(v30 + 8);
          if (v58)
          {
            do
            {
              v59 = v58;
              v58 = (_QWORD *)*v58;
            }
            while (v58);
          }
          else
          {
            do
            {
              v59 = *(_QWORD **)(v30 + 16);
              v82 = *v59 == v30;
              v30 = (uint64_t)v59;
            }
            while (!v82);
          }
          if (!size)
            break;
          v30 = (uint64_t)v59;
        }
        while (v59 != (_QWORD *)&unk_253D97868);
      }
    }
    else
    {
      v59 = (_QWORD *)v30;
    }
    inserted = std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v143);
    v30 = (uint64_t)v59;
  }
  else
  {
    v31 = (uint64_t **)((char *)j + 24);
  }
  a3 = __p;
  if ((_UNKNOWN *)v30 != &unk_253D97868)
  {
    do
    {
      std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__construct_node<std::map<rtaid::AnalyzerType,unsigned int> const&>((uint64_t)&v143, (uint64_t)v31, (_QWORD *)(v30 + 32));
      v60 = (uint64_t *)v143.__r_.__value_.__r.__words[0];
      v61 = (uint64_t **)std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__find_leaf_high((uint64_t)v31, &v146, (_QWORD **)(v143.__r_.__value_.__r.__words[0] + 32));
      inserted = (uint64_t)std::__tree<rtaid::AnalyzerType>::__insert_node_at(v31, v146, v61, v60);
      v62 = *(_QWORD **)(v30 + 8);
      if (v62)
      {
        do
        {
          v63 = v62;
          v62 = (_QWORD *)*v62;
        }
        while (v62);
      }
      else
      {
        do
        {
          v63 = *(_QWORD **)(v30 + 16);
          v82 = *v63 == v30;
          v30 = (uint64_t)v63;
        }
        while (!v82);
      }
      v30 = (uint64_t)v63;
    }
    while (v63 != (_QWORD *)&unk_253D97868);
  }
LABEL_122:
  v64 = *(_DWORD *)a2;
  v141 = 0x400000003;
  if (v64 == 3)
  {
    v65 = 0;
    goto LABEL_126;
  }
  if (v64 == 4)
  {
    v65 = 1;
LABEL_126:
    v66 = (char *)((unint64_t)&v141 | (4 * v65));
    goto LABEL_128;
  }
  v66 = (char *)v142;
LABEL_128:
  if (v66 - (char *)&v141 == 8 || (a3 & 1) == 0)
  {
    v67 = (_QWORD *)*((_QWORD *)a2 + 74);
    v68 = (_QWORD *)*((_QWORD *)a2 + 75);
    if (v67 == v68)
    {
      v72 = (unsigned __int16 *)*((_QWORD *)j + 10);
    }
    else
    {
      do
      {
        inserted = (*(uint64_t (**)(_QWORD, _QWORD))(***((_QWORD ***)j + 12) + 16))(**((_QWORD **)j + 12), *v67);
        v69 = inserted;
        v71 = (_WORD *)*((_QWORD *)j + 10);
        v70 = *((_QWORD *)j + 11);
        if ((unint64_t)v71 >= v70)
        {
          inserted = *((_QWORD *)j + 9);
          v73 = (uint64_t)v71 - inserted;
          if ((uint64_t)v71 - inserted <= -3)
            std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
          v74 = v73 >> 1;
          v75 = v70 - inserted;
          if (v75 <= (v73 >> 1) + 1)
            v76 = v74 + 1;
          else
            v76 = v75;
          if (v75 >= 0x7FFFFFFFFFFFFFFELL)
            v77 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v77 = v76;
          if (v77)
          {
            v77 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioServiceType>>(v77);
            inserted = *((_QWORD *)j + 9);
            v71 = (_WORD *)*((_QWORD *)j + 10);
          }
          else
          {
            v78 = 0;
          }
          v79 = (_WORD *)(v77 + 2 * v74);
          *v79 = v69;
          v72 = v79 + 1;
          while (v71 != (_WORD *)inserted)
          {
            v80 = *--v71;
            *--v79 = v80;
          }
          *((_QWORD *)j + 9) = v79;
          *((_QWORD *)j + 10) = v72;
          *((_QWORD *)j + 11) = v77 + 2 * v78;
          if (inserted)
            operator delete((void *)inserted);
        }
        else
        {
          *v71 = inserted;
          v72 = v71 + 1;
        }
        *((_QWORD *)j + 10) = v72;
        ++v67;
      }
      while (v67 != v68);
    }
    v81 = (unsigned __int16 *)*((_QWORD *)j + 9);
    v82 = v72 != v81 && v64 == 2;
    v83 = v82;
    *((_BYTE *)j + 115) = v83;
    if (v81 != v72)
    {
      while (1)
      {
        v84 = *v81;
        if (v84 == 13 && v64 == 2)
          goto LABEL_170;
        *((_BYTE *)j + 115) = 0;
        if (v84 == 4)
          break;
        if (v84 != 2)
        {
          if (v84 == 1)
            *((_BYTE *)j + 112) = 1;
          goto LABEL_168;
        }
        v86 = 1;
LABEL_169:
        *((_BYTE *)j + 114) = v86;
LABEL_170:
        if (++v81 == v72)
          goto LABEL_171;
      }
      *((_BYTE *)j + 113) = 1;
LABEL_168:
      v86 = *((_BYTE *)j + 114) != 0;
      goto LABEL_169;
    }
  }
LABEL_171:
  switch(v64)
  {
    case 1u:
      if (*((_BYTE *)j + 114))
      {
        if (!*((_BYTE *)j + 118))
        {
          rtaid::Detector::GetNodeIDs((rtaid::Detector *)&v146, (uint64_t)a2);
          v87 = v147;
          __pa = (void *)v146;
          if ((unsigned int *)v146 != v147)
          {
            for (k = (unsigned int *)v146; k != v87; ++k)
            {
              v89 = *k;
              v90 = *((_QWORD *)a2 + 1);
              v91 = *((_QWORD *)a2 + 2);
              v92 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(v90, v91, *k);
              if (v92)
                v93 = *(unsigned __int8 *)(v92[3] + 188);
              else
                v93 = 0;
              v94 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(v90, v91, v89);
              if (v94)
              {
                v95 = v94[3];
                if (*(char *)(v95 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(&v143, *(const std::string::value_type **)(v95 + 8), *(_QWORD *)(v95 + 16));
                }
                else
                {
                  v96 = *(_OWORD *)(v95 + 8);
                  v143.__r_.__value_.__r.__words[2] = *(_QWORD *)(v95 + 24);
                  *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v96;
                }
                v144 = 1;
                v98 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
                v99 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
                if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                {
                  v100 = &v143;
                }
                else
                {
                  v98 = v143.__r_.__value_.__l.__size_;
                  v100 = (std::string *)v143.__r_.__value_.__r.__words[0];
                }
                if (v98 >= 8)
                {
                  v101 = (char *)v100 + v98;
                  v102 = v100;
                  do
                  {
                    v103 = (char *)memchr(v102, 66, v98 - 7);
                    if (!v103)
                      break;
                    if (*(_QWORD *)v103 == 0x646E616265736142)
                    {
                      v97 = v103 != v101 && v103 - (char *)v100 != -1;
                      if ((v93 == 1) != v97)
                        goto LABEL_195;
                      goto LABEL_237;
                    }
                    v102 = (std::string *)(v103 + 1);
                    v98 = v101 - (char *)v102;
                  }
                  while (v101 - (char *)v102 > 7);
                }
                if (v93 != 1)
                {
LABEL_237:
                  if (v99 < 0)
                    operator delete(v143.__r_.__value_.__l.__data_);
                  continue;
                }
                LOBYTE(v97) = 0;
              }
              else
              {
                LOBYTE(v97) = 0;
                v143.__r_.__value_.__s.__data_[0] = 0;
                v144 = 0;
                if (v93 != 1)
                  continue;
              }
LABEL_195:
              v145[0] = 5;
              v145[1] = *k;
              std::map<rtaid::AnalyzerType,unsigned int>::map[abi:ne180100]((uint64_t *)v142, v145, 1);
              std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__emplace_unique_key_args<std::map<rtaid::AnalyzerType,unsigned int>,std::map<rtaid::AnalyzerType,unsigned int> const&>((uint64_t)v138, v142, v142);
              v104 = v93 != 1 || v97;
              v106 = (char *)*((_QWORD *)v140 + 7);
              v105 = *((_QWORD *)v140 + 8);
              if ((v104 & 1) != 0)
              {
                if ((unint64_t)v106 < v105)
                {
                  *(_DWORD *)v106 = 1;
                  v107 = v106 + 4;
LABEL_203:
                  v108 = v107;
                  goto LABEL_236;
                }
                v109 = (char *)*((_QWORD *)v140 + 6);
                v110 = (v106 - v109) >> 2;
                v111 = v110 + 1;
                if ((unint64_t)(v110 + 1) >> 62)
                  std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
                v112 = v105 - (_QWORD)v109;
                if (v112 >> 1 > v111)
                  v111 = v112 >> 1;
                v113 = (unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL;
                v114 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v113)
                  v114 = v111;
                if (v114)
                {
                  v114 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<rtaid::TelephonyResetDetector>>(v114);
                  v109 = (char *)*((_QWORD *)v140 + 6);
                  v106 = (char *)*((_QWORD *)v140 + 7);
                }
                else
                {
                  v115 = 0;
                }
                v120 = (_DWORD *)(v114 + 4 * v110);
                *v120 = 1;
                v108 = v120 + 1;
                while (v106 != v109)
                {
                  v121 = *((_DWORD *)v106 - 1);
                  v106 -= 4;
                  *--v120 = v121;
                }
              }
              else
              {
                if ((unint64_t)v106 < v105)
                {
                  *(_DWORD *)v106 = 2;
                  v107 = v106 + 4;
                  goto LABEL_203;
                }
                v109 = (char *)*((_QWORD *)v140 + 6);
                v116 = (v106 - v109) >> 2;
                v117 = v116 + 1;
                if ((unint64_t)(v116 + 1) >> 62)
                  std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
                v118 = v105 - (_QWORD)v109;
                if (v118 >> 1 > v117)
                  v117 = v118 >> 1;
                v113 = (unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL;
                v114 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v113)
                  v114 = v117;
                if (v114)
                {
                  v114 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<rtaid::TelephonyResetDetector>>(v114);
                  v109 = (char *)*((_QWORD *)v140 + 6);
                  v106 = (char *)*((_QWORD *)v140 + 7);
                }
                else
                {
                  v115 = 0;
                }
                v120 = (_DWORD *)(v114 + 4 * v116);
                *v120 = 2;
                v108 = v120 + 1;
                while (v106 != v109)
                {
                  v122 = *((_DWORD *)v106 - 1);
                  v106 -= 4;
                  *--v120 = v122;
                }
              }
              *((_QWORD *)v140 + 6) = v120;
              *((_QWORD *)v140 + 7) = v108;
              *((_QWORD *)v140 + 8) = v114 + 4 * v115;
              if (v109)
                operator delete(v109);
LABEL_236:
              *((_QWORD *)v140 + 7) = v108;
              std::__tree<ADAM::EndPointBitMask>::destroy(v142[1]);
              v99 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
              if (v144)
                goto LABEL_237;
            }
          }
          inserted = (uint64_t)__pa;
          if (__pa)
            operator delete(__pa);
          j = v140;
        }
      }
      else if (!*((_BYTE *)j + 118))
      {
        inserted = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)j + 12) + 32) + 16))(*(_QWORD *)(*((_QWORD *)j + 12) + 32));
        if ((_DWORD)inserted)
          goto LABEL_250;
      }
LABEL_268:
      if (*((_BYTE *)j + 114))
      {
        if (!*((_BYTE *)j + 118))
        {
          inserted = rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults((rtaid::ConfigurationManager *)inserted);
          if ((inserted & 1) == 0)
            inserted = (uint64_t)std::__tree<rtaid::AnalyzerType>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType>((uint64_t *)j, 1u, 1);
          if (((v64 < 9) & (0x10Cu >> v64)) != 0)
            inserted = (uint64_t)std::__tree<rtaid::AnalyzerType>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType>((uint64_t *)j, 6u, 6);
        }
      }
      else if (*((_BYTE *)j + 113))
      {
        inserted = rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults((rtaid::ConfigurationManager *)inserted);
        if ((inserted & 1) == 0 && !*((_BYTE *)j + 118))
        {
          std::__tree<rtaid::AnalyzerType>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType>((uint64_t *)j, 1u, 1);
          inserted = (uint64_t)std::__tree<rtaid::AnalyzerType>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType>((uint64_t *)j, 6u, 6);
        }
      }
      else if (*((_BYTE *)j + 112))
      {
        rtaid::ConfigurationManager::addSiriConfiguration(j, a2);
      }
      v135 = *((unsigned __int8 *)j + 115);
      if (*((_BYTE *)j + 115))
      {
        if (!rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults((rtaid::ConfigurationManager *)inserted))
        {
          std::__tree<rtaid::AnalyzerType>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType>((uint64_t *)j, 1u, 1);
          std::__tree<rtaid::AnalyzerType>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType>((uint64_t *)j, 6u, 6);
        }
        v135 = *((unsigned __int8 *)j + 115);
      }
      if (v64 == 2 && v135 != *((unsigned __int8 *)j + 116))
      {
        *((_BYTE *)j + 116) = v135;
        *((_BYTE *)j + 117) = 1;
      }
      return;
    case 3u:
      *((_BYTE *)j + 114) = 1;
      goto LABEL_268;
    case 4u:
      rtaid::ConfigurationManager::addSiriConfiguration(j, a2);
      goto LABEL_268;
    case 7u:
      if (*((_BYTE *)j + 114) && !*((_BYTE *)j + 118))
      {
        v146 = 0x300000005;
        std::map<rtaid::AnalyzerType,unsigned int>::map[abi:ne180100]((uint64_t *)&v143, (unsigned int *)&v146, 1);
        std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__emplace_unique_key_args<std::map<rtaid::AnalyzerType,unsigned int>,std::map<rtaid::AnalyzerType,unsigned int> const&>((uint64_t)v138, &v143, &v143);
        v124 = (char *)*((_QWORD *)j + 7);
        v123 = *((_QWORD *)j + 8);
        if ((unint64_t)v124 >= v123)
        {
          v126 = (char *)*((_QWORD *)j + 6);
          v127 = (v124 - v126) >> 2;
          v128 = v127 + 1;
          if ((unint64_t)(v127 + 1) >> 62)
            std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
          v129 = v123 - (_QWORD)v126;
          if (v129 >> 1 > v128)
            v128 = v129 >> 1;
          v113 = (unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL;
          v130 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v113)
            v130 = v128;
          if (v130)
          {
            v130 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<rtaid::TelephonyResetDetector>>(v130);
            v126 = (char *)*((_QWORD *)j + 6);
            v124 = (char *)*((_QWORD *)j + 7);
          }
          else
          {
            v131 = 0;
          }
          v132 = (_DWORD *)(v130 + 4 * v127);
          v133 = v130 + 4 * v131;
          *v132 = 0;
          v125 = v132 + 1;
          while (v124 != v126)
          {
            v134 = *((_DWORD *)v124 - 1);
            v124 -= 4;
            *--v132 = v134;
          }
          *((_QWORD *)j + 6) = v132;
          *((_QWORD *)j + 7) = v125;
          *((_QWORD *)j + 8) = v133;
          if (v126)
            operator delete(v126);
        }
        else
        {
          *(_DWORD *)v124 = 0;
          v125 = v124 + 4;
        }
        *((_QWORD *)j + 7) = v125;
        std::__tree<ADAM::EndPointBitMask>::destroy((_QWORD *)v143.__r_.__value_.__l.__size_);
      }
      goto LABEL_268;
    case 8u:
      if (!*((_BYTE *)j + 118))
LABEL_250:
        inserted = (uint64_t)std::__tree<rtaid::AnalyzerType>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType>((uint64_t *)j, 6u, 6);
      goto LABEL_268;
    default:
      goto LABEL_268;
  }
}

void sub_216D03244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, _QWORD *a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  std::__tree<ADAM::EndPointBitMask>::destroy(a18);
  _Unwind_Resume(a1);
}

void std::__tree<ADAM::EndPointBitMask>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<ADAM::EndPointBitMask>::destroy(*a1);
    std::__tree<ADAM::EndPointBitMask>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t *std::__tree<rtaid::AnalyzerType>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::destroy(*a1);
    std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::destroy(a1[1]);
    std::__tree<ADAM::EndPointBitMask>::destroy((_QWORD *)a1[5]);
    operator delete(a1);
  }
}

void rtaid::Manager::applyTelephonyResets(int *a1, int *a2, uint64_t *a3)
{
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned __int8 v32;
  NSObject *v33;
  int v34;
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  char *v41;
  __int16 v42;
  uint64_t *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (a1 == a2)
    return;
  v5 = a1;
  *(int32x2_t *)((char *)&xmmword_253D977B0 + 4) = vdup_n_s32(0xC2F00000);
  do
  {
    v6 = *v5;
    if (*v5 == 2)
    {
      v13 = *a3;
      v12 = a3[1];
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 16);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v11 = (std::__shared_weak_count *)qword_253D977A0;
      qword_253D97798 = v13;
      qword_253D977A0 = v12;
      if (v11)
LABEL_15:
        std::__shared_weak_count::__release_weak(v11);
    }
    else if (v6 == 1)
    {
      v17 = *a3;
      v16 = a3[1];
      if (v16)
      {
        v18 = (unint64_t *)(v16 + 16);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v11 = (std::__shared_weak_count *)qword_253D97790;
      qword_253D97788 = v17;
      qword_253D97790 = v16;
      if (v11)
        goto LABEL_15;
    }
    else if (!v6)
    {
      v8 = *a3;
      v7 = a3[1];
      if (v7)
      {
        v9 = (unint64_t *)(v7 + 16);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = (std::__shared_weak_count *)qword_253D97780;
      qword_253D97778 = v8;
      qword_253D97780 = v7;
      if (v11)
        goto LABEL_15;
    }
    ++v5;
  }
  while (v5 != a2);
  if (qword_253D97790)
  {
    v20 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D97790);
    if (v20)
    {
      v21 = v20;
      if (qword_253D97788)
        rtaid::Detector::ResetTelephonyRMSState(*(uint64_t **)(qword_253D97788 + 24));
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  if (qword_253D977A0)
  {
    v24 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D977A0);
    if (v24)
    {
      v25 = v24;
      if (qword_253D97798)
        rtaid::Detector::ResetTelephonyRMSState(*(uint64_t **)(qword_253D97798 + 24));
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  if (qword_253D97780)
  {
    v28 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D97780);
    if (v28)
    {
      v29 = v28;
      if (qword_253D97778)
        rtaid::Detector::ResetTelephonyRMSState(*(uint64_t **)(qword_253D97778 + 24));
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  v33 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEBUG))
  {
    v34 = 136316162;
    v35 = "AudioIssueDetectorManager.cpp";
    v36 = 1024;
    v37 = 345;
    v38 = 1040;
    v39 = 14;
    v40 = 2080;
    v41 = "rtaid::Manager]";
    v42 = 2048;
    v43 = &SingletonManagerInstance(void)::sInstance;
    _os_log_impl(&dword_216CFB000, v33, OS_LOG_TYPE_DEBUG, "[%s:%-5d %.*s:%p] reset all telephony detectors", (uint8_t *)&v34, 0x2Cu);
  }
}

uint64_t AudioStatisticsSPIImplementation::GetAudioServiceType(AudioStatisticsSPIImplementation *this, uint64_t a2)
{
  if (AudioStatisticsLibraryLoader(void)::once != -1)
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_174);
  if (AudioStatisticsLibraryLoader(void)::libSym)
    return AudioStatisticsLibraryLoader(void)::libSym(a2);
  else
    return 0xFFFFLL;
}

uint64_t *std::__tree<rtaid::AnalyzerType>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType>(uint64_t *result, unsigned int a2, int a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<rtaid::AnalyzerType>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t FeatureFlagSPIImplementation::IsAudioDSPHALRMSDetectionOn(FeatureFlagSPIImplementation *this)
{
  return _os_feature_enabled_impl();
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x219A00D0C]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x24BEDB350]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x24BEDB4B0]);
  return this;
}

void sub_216D03908(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__owns_one_state<char> *v13;
  unsigned int v14;
  char *v15;
  char *v16;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  std::__owns_one_state<char> *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  std::__owns_one_state<char> *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = (_QWORD *)operator new();
  *v6 = &off_24D615CB8;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  v8 = (_QWORD *)operator new();
  *v8 = &off_24D615CE8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  *(_QWORD *)&v9 = v7;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(std::__owns_one_state<char> **)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v13;
  v14 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v14 > 0x3F)
  {
    switch(v14)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        v18 = (unsigned __int8 *)memchr(a2, 10, a3 - a2);
        if (v18)
          v19 = v18;
        else
          v19 = (unsigned __int8 *)a3;
        if (v19 == (unsigned __int8 *)a2)
        {
          v29 = (_QWORD *)operator new();
          v30 = *(_QWORD *)(a1 + 56);
          v31 = *(_QWORD *)(v30 + 8);
          v29[1] = v31;
          *(_QWORD *)(v30 + 8) = v29;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, v19);
        }
        if (v19 != (unsigned __int8 *)a3)
          ++v19;
        while (v19 != (unsigned __int8 *)a3)
        {
          v32 = (unsigned __int8 *)memchr(v19, 10, a3 - (char *)v19);
          if (v32)
            v33 = v32;
          else
            v33 = (unsigned __int8 *)a3;
          v34 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v33 == v19)
          {
            v35 = (_QWORD *)operator new();
            v36 = *(_QWORD *)(a1 + 56);
            v37 = *(_QWORD *)(v36 + 8);
            v35[1] = v37;
            *(_QWORD *)(v36 + 8) = v35;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v19, v33);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v13, v34);
          if (v33 == (unsigned __int8 *)a3)
            v19 = v33;
          else
            v19 = v33 + 1;
        }
        break;
      case 0x100u:
        v15 = (char *)memchr(a2, 10, a3 - a2);
        if (v15)
          v16 = v15;
        else
          v16 = a3;
        if (v16 == a2)
        {
          v20 = (_QWORD *)operator new();
          v21 = *(_QWORD *)(a1 + 56);
          v22 = *(_QWORD *)(v21 + 8);
          v20[1] = v22;
          *(_QWORD *)(v21 + 8) = v20;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, v16);
        }
        if (v16 != a3)
          ++v16;
        while (v16 != a3)
        {
          v23 = (char *)memchr(v16, 10, a3 - v16);
          if (v23)
            v24 = v23;
          else
            v24 = a3;
          v25 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v24 == v16)
          {
            v26 = (_QWORD *)operator new();
            v27 = *(_QWORD *)(a1 + 56);
            v28 = *(_QWORD *)(v27 + 8);
            v26[1] = v28;
            *(_QWORD *)(v27 + 8) = v26;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, v16, v24);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v13, v25);
          if (v24 == a3)
            v16 = v24;
          else
            v16 = v24 + 1;
        }
        break;
      default:
        goto LABEL_54;
    }
    return a3;
  }
  else if (v14)
  {
    if (v14 != 16)
    {
      if (v14 != 32)
LABEL_54:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
    }
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, a3);
  }
}

void sub_216D03CD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  std::vector<std::ssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  std::vector<std::ssub_match>::pointer v7;
  std::sub_match<std::__wrap_iter<const char *>> *v8;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *v9;
  BOOL v10;

  p_match = &this->__match_;
  begin = this->__match_.__matches_.__begin_;
  end = p_match->__matches_.__end_;
  v9 = &__x->__match_;
  v7 = __x->__match_.__matches_.__begin_;
  v8 = v9->__matches_.__end_;
  v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7)
    return this->__begin_.__i_ == __x->__begin_.__i_
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)begin, (uint64_t)v7) == 0;
  return v10;
}

void std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::erase(_QWORD *a1, OpaqueAudioComponentInstance ***a2)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  OpaqueAudioComponentInstance ***v6;
  OpaqueAudioComponentInstance ***v7;
  unint64_t v8;
  unint64_t v9;
  OpaqueAudioComponentInstance **v10;
  unint64_t v11;

  v3 = (int8x8_t)a1[1];
  v4 = (unint64_t)a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(OpaqueAudioComponentInstance ****)(*a1 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (OpaqueAudioComponentInstance ***)*v6;
  }
  while (v6 != a2);
  if (v7 == a1 + 2)
    goto LABEL_18;
  v8 = (unint64_t)v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = (unint64_t)(*a2)[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*a1 + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = (unint64_t)v10[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*a1 + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --a1[3];
  std::unique_ptr<rtaid::DetectorNode>::reset[abi:ne180100](a2 + 3);
  operator delete(a2);
}

BOOL rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults(rtaid::ConfigurationManager *this)
{
  unsigned __int8 v1;
  int v2;
  unsigned __int8 v3;
  NSObject *v4;
  _BOOL4 v5;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if ((v1 & 1) == 0
  {
    rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults(void)::disableSilenceDetection = CFPreferencesGetAppBooleanValue(CFSTR("DisableAudio"), CFSTR("com.apple.audio.virtualaudio"), 0) != 0;
  }
  v2 = rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults(void)::disableSilenceDetection;
  if (rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults(void)::disableSilenceDetection)
  {
    {
      rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
    }
    v4 = rtaid::get_log(void)::rtaid_os_log;
    v5 = os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT);
    v2 = rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults(void)::disableSilenceDetection;
    if (v5)
    {
      v7 = 136315650;
      v8 = "ConfigurationManager.cpp";
      v9 = 1024;
      v10 = 407;
      v11 = 1024;
      v12 = rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults(void)::disableSilenceDetection;
      _os_log_impl(&dword_216CFB000, v4, OS_LOG_TYPE_DEFAULT, "%s:%-5d Defaults write for DisableAudio set to %d - silence detection will be bypassed", (uint8_t *)&v7, 0x18u);
      v2 = rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults(void)::disableSilenceDetection;
    }
  }
  return v2 != 0;
}

void sub_216D04058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AudioIssueDetectorInitialize(unint64_t a1)
{
  rtaid *v2;
  std::__shared_weak_count *v3;
  rtaid::Detector *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  unsigned __int8 v9;
  NSObject *v10;
  rtaid::Detector *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned __int8 v29;
  NSObject *v30;
  double v31;
  int16x8_t v32;
  AudioComponentDescription *p_p;
  int v34;
  unsigned int v35;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned __int8 v51;
  NSObject *v52;
  double v53;
  int16x8_t v54;
  double v55;
  int16x8_t v56;
  AudioComponentDescription *v57;
  AudioComponentInstance *v58;
  unsigned __int8 v59;
  NSObject *v60;
  NSObject *v61;
  double v62;
  int16x8_t v63;
  double v64;
  int16x8_t v65;
  AudioComponentDescription *v66;
  AudioComponentInstance *v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned __int8 v72;
  NSObject *v73;
  OpaqueAudioComponent *Next;
  uint64_t v75;
  __int128 v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  unsigned __int8 v83;
  NSObject *v84;
  double v85;
  unsigned __int8 v86;
  NSObject *v87;
  unsigned __int8 v88;
  NSObject *v89;
  unint64_t *v90;
  unint64_t v91;
  std::logic_error *exception;
  rtaid::Detector *v94;
  std::__shared_weak_count *v95;
  AudioComponentInstance outInstance[2];
  char v97;
  AudioComponentDescription __p;
  char v99;
  int inData;
  _BYTE buf[44];
  __int16 v102;
  AudioComponentDescription *v103;
  __int16 v104;
  AudioComponentInstance *v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  SingletonManagerInstance();
  std::mutex::lock((std::mutex *)&SingletonManagerInstance(void)::sInstance);
  v2 = (rtaid *)std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>>>::find<long long>(a1);
  if (!v2)
  {
    v14 = 0xFFFFFFFFLL;
    goto LABEL_229;
  }
  v4 = (rtaid::Detector *)*((_QWORD *)v2 + 3);
  v3 = (std::__shared_weak_count *)*((_QWORD *)v2 + 4);
  v94 = v4;
  v95 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (!v4)
  {
    v14 = 0xFFFFFFFFLL;
    if (v3)
      goto LABEL_225;
    goto LABEL_229;
  }
  rtaid::GetClientIDMap(v2);
  v7 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(&rtaid::GetClientIDMap(void)::gClientIDMap, *(_DWORD *)v4);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = v7 + 3;
  if (*((char *)v7 + 47) < 0)
    v8 = (_QWORD *)*v8;
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  v10 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AudioIssueDetectorManager.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 104;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v8;
    _os_log_impl(&dword_216CFB000, v10, OS_LOG_TYPE_DEBUG, "%s:%-5d initialize called on %s's detector", buf, 0x1Cu);
  }
  v11 = v94;
  rtaid::ConfigurationManager::DetermineConfiguration((rtaid::ConfigurationManager *)qword_253D977D0, v94, 1);
  rtaid::Manager::applyConfiguration((rtaid *)qword_253D977D0, (int8x8_t *)v94);
  rtaid::Manager::applyTelephonyResets(*(int **)(qword_253D977D0 + 48), *(int **)(qword_253D977D0 + 56), (uint64_t *)&v94);
  *(_QWORD *)buf = &off_24D616A18;
  *(_QWORD *)&buf[8] = &SingletonManagerInstance(void)::sInstance;
  *(_QWORD *)&buf[24] = buf;
  v12 = (_QWORD *)*((_QWORD *)v11 + 11);
  *((_QWORD *)v11 + 11) = 0;
  if (v12 == (_QWORD *)((char *)v11 + 64))
  {
    v13 = 4;
    v12 = (_QWORD *)((char *)v11 + 64);
  }
  else
  {
    if (!v12)
      goto LABEL_22;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  if (!*(_QWORD *)&buf[24])
  {
    *((_QWORD *)v11 + 11) = 0;
    goto LABEL_28;
  }
  if (*(_BYTE **)&buf[24] == buf)
  {
LABEL_22:
    *((_QWORD *)v11 + 11) = (char *)v11 + 64;
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)buf + 24))(buf, (uint64_t)v11 + 64);
    v15 = *(_QWORD **)&buf[24];
    if (*(_BYTE **)&buf[24] == buf)
    {
      v16 = 4;
      v15 = buf;
    }
    else
    {
      if (!*(_QWORD *)&buf[24])
        goto LABEL_28;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
    goto LABEL_28;
  }
  *((_QWORD *)v11 + 11) = *(_QWORD *)&buf[24];
LABEL_28:
  v17 = (_QWORD *)((char *)v11 + 24);
  while (1)
  {
    v17 = (_QWORD *)*v17;
    if (!v17)
      break;
    for (i = 0; i != 7; ++i)
    {
      v19 = v17[3];
      *(_BYTE *)(v19 + i + 159) = (*((_QWORD *)v11 + 6) >> i) & 1;
      rtaid::DetectorNode::updateSilenceAnalyzerState(v19);
    }
    v20 = v17[3];
    rtaid::NodeFormatConverter::disposeConverter((rtaid::NodeFormatConverter *)(v20 + 40));
    if (*(double *)(v20 + 40) != *(double *)(v20 + 80))
      goto LABEL_111;
    v21 = *(_DWORD *)(v20 + 48);
    if (v21 != *(_DWORD *)(v20 + 88))
      goto LABEL_111;
    if (*(_DWORD *)(v20 + 56) != *(_DWORD *)(v20 + 96))
      goto LABEL_111;
    if (*(_DWORD *)(v20 + 60) != *(_DWORD *)(v20 + 100))
      goto LABEL_111;
    v22 = *(_DWORD *)(v20 + 68);
    if (v22 != *(_DWORD *)(v20 + 108))
      goto LABEL_111;
    v23 = *(_DWORD *)(v20 + 72);
    if (v23 != *(_DWORD *)(v20 + 112))
      goto LABEL_111;
    v24 = *(_DWORD *)(v20 + 52);
    if (v21 != 1819304813)
    {
      if (v24 == *(_DWORD *)(v20 + 92))
        goto LABEL_48;
      goto LABEL_111;
    }
    v25 = v24 & 0x7FFFFFFF;
    if ((v24 & 0x7FFFFFFF) == 0)
      v25 = *(_DWORD *)(v20 + 52);
    v26 = *(_DWORD *)(v20 + 64);
    if (v26)
    {
      if ((v24 & 0x20) != 0)
        v27 = 1;
      else
        v27 = *(_DWORD *)(v20 + 68);
      if (v27)
      {
        v26 = 8 * (v26 / v27);
        v28 = v26 == v23;
        goto LABEL_56;
      }
      v26 = 0;
    }
    v28 = v23 == 0;
LABEL_56:
    v34 = v28;
    v35 = v25 & 0xFFFFFFBF;
    if (v34)
      v35 |= 8u;
    if ((v23 & 7) == 0 && v26 == v23)
      v35 &= 0xFFFFFFAF;
    if ((v35 & 1) != 0)
      v35 &= 0xFFFFFFBB;
    if ((v35 & 8) != 0 && v23 <= 8)
      v35 &= 2u;
    if (v22 == 1)
      v35 &= ~0x20u;
    if (!v35)
      v35 = 0x80000000;
    v38 = *(_DWORD *)(v20 + 92);
    v39 = v38 & 0x7FFFFFFF;
    if ((v38 & 0x7FFFFFFF) == 0)
      v39 = *(_DWORD *)(v20 + 92);
    v40 = *(_DWORD *)(v20 + 104);
    if (v40)
    {
      if ((v38 & 0x20) != 0)
        v41 = 1;
      else
        v41 = *(_DWORD *)(v20 + 68);
      if (v41)
      {
        v40 = 8 * (v40 / v41);
        v42 = v40 == v23;
        goto LABEL_88;
      }
      v40 = 0;
    }
    v42 = v23 == 0;
LABEL_88:
    v43 = v42;
    v44 = v39 & 0xFFFFFFBF;
    if (v43)
      v44 |= 8u;
    v45 = (v23 & 7) == 0 && v40 == v23;
    v46 = v44 & 0xFFFFFFAF;
    if (!v45)
      v46 = v44;
    if ((v46 & 1) != 0)
      v46 &= 0xFFFFFFBB;
    v47 = (v46 & 8) == 0 || v23 > 8;
    v48 = v46 & 2;
    if (v47)
      v48 = v46;
    if (v22 == 1)
      v49 = v48 & 0xFFFFFFDF;
    else
      v49 = v48;
    if (!v49)
      v49 = 0x80000000;
    if (v35 == v49)
    {
LABEL_48:
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      v30 = rtaid::get_log(void)::rtaid_os_log;
      if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
      {
        CA::StreamDescription::AsString((CA::StreamDescription *)&__p, (_QWORD *)(v20 + 40), v31, v32);
        p_p = &__p;
        if (v99 < 0)
          p_p = *(AudioComponentDescription **)&__p.componentType;
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "NodeFormatConverter.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 80;
        *(_WORD *)&buf[18] = 1040;
        *(_DWORD *)&buf[20] = 26;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = "rtaid::NodeFormatConverter]";
        *(_WORD *)&buf[34] = 2048;
        *(_QWORD *)&buf[36] = v20 + 40;
        v102 = 2080;
        v103 = p_p;
        _os_log_impl(&dword_216CFB000, v30, OS_LOG_TYPE_DEFAULT, "[%s:%-5d %.*s:%p] AudioConverterNew wasn't needed since incoming and outgoing format are equivalent: %s", buf, 0x36u);
        if (v99 < 0)
          operator delete(*(void **)&__p.componentType);
      }
      goto LABEL_143;
    }
LABEL_111:
    AudioConverterNew((const AudioStreamBasicDescription *)(v20 + 40), (const AudioStreamBasicDescription *)(v20 + 80), (AudioConverterRef *)(v20 + 128));
    v50 = *(_QWORD *)(v20 + 128);
    if (!v50)
    {
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      v61 = rtaid::get_log(void)::rtaid_os_log;
      if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_ERROR))
      {
        CA::StreamDescription::AsString((CA::StreamDescription *)&__p, (_QWORD *)(v20 + 40), v62, v63);
        if (v99 >= 0)
          v66 = &__p;
        else
          v66 = *(AudioComponentDescription **)&__p.componentType;
        CA::StreamDescription::AsString((CA::StreamDescription *)outInstance, (_QWORD *)(v20 + 80), v64, v65);
        v67 = outInstance;
        if (v97 < 0)
          v67 = (AudioComponentInstance *)outInstance[0];
        *(_DWORD *)buf = 136316674;
        *(_QWORD *)&buf[4] = "NodeFormatConverter.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 56;
        *(_WORD *)&buf[18] = 1040;
        *(_DWORD *)&buf[20] = 26;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = "rtaid::NodeFormatConverter]";
        *(_WORD *)&buf[34] = 2048;
        *(_QWORD *)&buf[36] = v20 + 40;
        v102 = 2080;
        v103 = v66;
        v104 = 2080;
        v105 = v67;
        _os_log_impl(&dword_216CFB000, v61, OS_LOG_TYPE_ERROR, "[%s:%-5d %.*s:%p] AudioConverterNew failed with incoming format %s and outgoing format %s", buf, 0x40u);
        if (v97 < 0)
          operator delete(outInstance[0]);
        if (v99 < 0)
          operator delete(*(void **)&__p.componentType);
      }
      v14 = 4294967293;
      goto LABEL_191;
    }
    {
      rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
    }
    v52 = rtaid::get_log(void)::rtaid_os_log;
    if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
    {
      CA::StreamDescription::AsString((CA::StreamDescription *)&__p, (_QWORD *)(v20 + 40), v53, v54);
      if (v99 >= 0)
        v57 = &__p;
      else
        v57 = *(AudioComponentDescription **)&__p.componentType;
      CA::StreamDescription::AsString((CA::StreamDescription *)outInstance, (_QWORD *)(v20 + 80), v55, v56);
      v58 = outInstance;
      if (v97 < 0)
        v58 = (AudioComponentInstance *)outInstance[0];
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "NodeFormatConverter.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 61;
      *(_WORD *)&buf[18] = 1040;
      *(_DWORD *)&buf[20] = 26;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "rtaid::NodeFormatConverter]";
      *(_WORD *)&buf[34] = 2048;
      *(_QWORD *)&buf[36] = v20 + 40;
      v102 = 2080;
      v103 = v57;
      v104 = 2080;
      v105 = v58;
      _os_log_impl(&dword_216CFB000, v52, OS_LOG_TYPE_DEFAULT, "[%s:%-5d %.*s:%p] AudioConverterNew succeeded with incoming format %s and outgoing format %s", buf, 0x40u);
      if (v97 < 0)
        operator delete(outInstance[0]);
      if (v99 < 0)
        operator delete(*(void **)&__p.componentType);
    }
    if (*(_BYTE *)(v20 + 120))
    {
      __p.componentType = 1;
      v14 = AudioConverterSetProperty(*(AudioConverterRef *)(v20 + 128), 0x646D6978u, 4u, &__p);
      if ((_DWORD)v14)
      {
        {
          rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
        }
        v60 = rtaid::get_log(void)::rtaid_os_log;
        if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "NodeFormatConverter.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 69;
          *(_WORD *)&buf[18] = 1040;
          *(_DWORD *)&buf[20] = 26;
          *(_WORD *)&buf[24] = 2080;
          *(_QWORD *)&buf[26] = "rtaid::NodeFormatConverter]";
          *(_WORD *)&buf[34] = 2048;
          *(_QWORD *)&buf[36] = v20 + 40;
          v102 = 1024;
          LODWORD(v103) = v14;
          _os_log_impl(&dword_216CFB000, v60, OS_LOG_TYPE_ERROR, "[%s:%-5d %.*s:%p] AudioConverterSetProperty for downmixing failed with error : %d", buf, 0x32u);
        }
        goto LABEL_191;
      }
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      v68 = rtaid::get_log(void)::rtaid_os_log;
      if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "NodeFormatConverter.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 73;
        *(_WORD *)&buf[18] = 1040;
        *(_DWORD *)&buf[20] = 26;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = "rtaid::NodeFormatConverter]";
        *(_WORD *)&buf[34] = 2048;
        *(_QWORD *)&buf[36] = v20 + 40;
        _os_log_impl(&dword_216CFB000, v68, OS_LOG_TYPE_DEFAULT, "[%s:%-5d %.*s:%p] AudioConverterSetProperty for downmixing set successfully", buf, 0x2Cu);
      }
    }
LABEL_143:
    if (*(_QWORD *)(v20 + 128))
    {
      v69 = ExtendedAudioBufferList_CreateWithFormat();
      v70 = v69;
      v71 = *(_DWORD *)(v20 + 88);
      if ((v71 == 1885564203 || v71 == 1819304813) && (*(_BYTE *)(v20 + 92) & 0x20) != 0)
      {
        if (!v69)
        {
LABEL_231:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "ExtendedAudioBufferList_CreateWithFormat failed");
LABEL_232:
        }
      }
      else if (!v69)
      {
        goto LABEL_231;
      }
      if (!ExtendedAudioBufferList_Prepare())
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "ExtendedAudioBufferList_Prepare failed");
        goto LABEL_232;
      }
      if (!*(_BYTE *)(v20 + 144))
        *(_BYTE *)(v20 + 144) = 1;
      *(_QWORD *)(v20 + 136) = v70;
      ExtendedAudioBufferList_Destroy();
    }
    if (*(_BYTE *)(v20 + 159)
      || *(_BYTE *)(v20 + 152)
      || *(_BYTE *)(v20 + 160)
      || *(_BYTE *)(v20 + 153)
      || *(_BYTE *)(v20 + 161)
      || *(_BYTE *)(v20 + 154))
    {
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      v73 = rtaid::get_log(void)::rtaid_os_log;
      if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "DetectorNode.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 83;
        *(_WORD *)&buf[18] = 1040;
        *(_DWORD *)&buf[20] = 19;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = "rtaid::DetectorNode]";
        *(_WORD *)&buf[34] = 2048;
        *(_QWORD *)&buf[36] = v20;
        _os_log_impl(&dword_216CFB000, v73, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] adding silenceNonFiniteAnalyzer", buf, 0x2Cu);
      }
      __p.componentFlagsMask = 0;
      *(_OWORD *)&__p.componentType = *(_OWORD *)"xfuaalislppa";
      Next = AudioComponentFindNext(0, &__p);
      outInstance[0] = 0;
      v75 = AudioComponentInstanceNew(Next, outInstance);
      if (outInstance[0])
      {
        std::unique_ptr<OpaqueAudioComponentInstance,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioComponentInstance*,&(AudioComponentInstanceDispose)>>::reset[abi:ne180100]((OpaqueAudioComponentInstance **)(v20 + 32), outInstance[0]);
        v76 = *(_OWORD *)(v20 + 96);
        *(_OWORD *)buf = *(_OWORD *)(v20 + 80);
        *(_OWORD *)&buf[16] = v76;
        *(_QWORD *)&buf[32] = *(_QWORD *)(v20 + 112);
        AudioUnitSetProperty(outInstance[0], 8u, 1u, 0, buf, 0x28u);
        AudioUnitSetProperty(outInstance[0], 8u, 2u, 0, buf, 0x28u);
        AudioUnitSetProperty(outInstance[0], 0xEu, 0, 0, (const void *)v20, 4u);
        v14 = AudioUnitInitialize(outInstance[0]);
        if ((_DWORD)v14)
        {
          std::unique_ptr<OpaqueAudioComponentInstance,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioComponentInstance*,&(AudioComponentInstanceDispose)>>::reset[abi:ne180100]((OpaqueAudioComponentInstance **)(v20 + 32), 0);
        }
        else
        {
          if (!*(_BYTE *)(v20 + 160) && !*(_BYTE *)(v20 + 153) && !*(_BYTE *)(v20 + 161) && !*(_BYTE *)(v20 + 154))
          {
            inData = 1;
            AudioUnitSetProperty(outInstance[0], 0xFA01u, 0, 0, &inData, 4u);
          }
          if (*(_BYTE *)(v20 + 161) || *(_BYTE *)(v20 + 154))
          {
            inData = 1;
            AudioUnitSetProperty(outInstance[0], 0xFA03u, 0, 0, &inData, 4u);
          }
          if (*(_DWORD *)(v20 + 48) == 1819304813 && *(_DWORD *)(v20 + 60) == 1)
          {
            v77 = *(_DWORD *)(v20 + 64);
            if (v77 == *(_DWORD *)(v20 + 56))
            {
              v78 = *(_DWORD *)(v20 + 72);
              if (v77 >= v78 >> 3)
              {
                v79 = *(_DWORD *)(v20 + 68);
                if (v79)
                {
                  v80 = *(_DWORD *)(v20 + 52);
                  if ((v80 & 0x20) != 0 || (v28 = v77 == v77 / v79 * v79, v77 /= v79, v28))
                  {
                    if ((*(_DWORD *)(v20 + 52) & 7) == 4 && 8 * v77 == v78)
                    {
                      v81 = (v80 >> 7) & 0x3F;
                      if ((v81 != 24 || v77 != 4) && !v81 && v77 == 2)
                      {
                        inData = 1;
                        AudioUnitSetProperty(outInstance[0], 0xFA02u, 0, 0, &inData, 4u);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v14 = v75;
      }
    }
    else
    {
      std::unique_ptr<OpaqueAudioComponentInstance,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioComponentInstance*,&(AudioComponentInstanceDispose)>>::reset[abi:ne180100]((OpaqueAudioComponentInstance **)(v20 + 32), 0);
      v14 = 0;
    }
LABEL_191:
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v20 + 416) + 24) + 16))(*(_QWORD *)(*(_QWORD *)(v20 + 416) + 24)))
    {
      if (*(_DWORD *)(v20 + 108) >= 4u)
        v82 = 4;
      else
        v82 = *(_DWORD *)(v20 + 108);
    }
    else
    {
      v82 = 1;
    }
    {
      rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
    }
    v84 = rtaid::get_log(void)::rtaid_os_log;
    if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "DetectorNode.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 147;
      *(_WORD *)&buf[18] = 1040;
      *(_DWORD *)&buf[20] = 19;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "rtaid::DetectorNode]";
      *(_WORD *)&buf[34] = 2048;
      *(_QWORD *)&buf[36] = v20;
      v102 = 1024;
      LODWORD(v103) = v82;
      _os_log_impl(&dword_216CFB000, v84, OS_LOG_TYPE_DEBUG, "[%s:%-5d %.*s:%p] rms analysis setup for %d channels", buf, 0x32u);
    }
    std::vector<float>::resize((char **)(v20 + 192), v82);
    std::vector<float>::resize((char **)(v20 + 216), v82);
    v85 = *(double *)(v20 + 40) * 0.5;
    *(_BYTE *)(v20 + 240) = (*(_DWORD *)(v20 + 92) & 0x20) == 0;
    *(_DWORD *)(v20 + 252) = (int)v85;
    *(_BYTE *)(v20 + 4) = (_DWORD)v14 == 0;
    {
      rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
    }
    v87 = rtaid::get_log(void)::rtaid_os_log;
    if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "DetectorNode.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 156;
      *(_WORD *)&buf[18] = 1040;
      *(_DWORD *)&buf[20] = 19;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "rtaid::DetectorNode]";
      *(_WORD *)&buf[34] = 2048;
      *(_QWORD *)&buf[36] = v20;
      v102 = 1024;
      LODWORD(v103) = v14;
      _os_log_impl(&dword_216CFB000, v87, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] initialized with err = %d", buf, 0x32u);
    }
    if ((_DWORD)v14)
      goto LABEL_221;
  }
  v14 = 0;
LABEL_221:
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  v89 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "Detector.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 54;
    *(_WORD *)&buf[18] = 1040;
    *(_DWORD *)&buf[20] = 15;
    *(_WORD *)&buf[24] = 2080;
    *(_QWORD *)&buf[26] = "rtaid::Detector]";
    *(_WORD *)&buf[34] = 2048;
    *(_QWORD *)&buf[36] = v11;
    v102 = 1024;
    LODWORD(v103) = v14;
    _os_log_impl(&dword_216CFB000, v89, OS_LOG_TYPE_DEFAULT, "[%s:%-5d %.*s:%p] initialized with error = %d", buf, 0x32u);
  }
  v3 = v95;
  if (v95)
  {
LABEL_225:
    v90 = (unint64_t *)&v3->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
LABEL_229:
  std::mutex::unlock((std::mutex *)&SingletonManagerInstance(void)::sInstance);
  return v14;
}

void sub_216D051BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void rtaid::Manager::applyConfiguration(rtaid *a1, int8x8_t *a2)
{
  unsigned __int8 v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;
  uint64_t v9;
  _DWORD *v10;
  unsigned __int8 v11;
  NSObject *v12;
  uint64_t *v13;
  _QWORD *v14;
  std::string *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD *v19;
  int8x8_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _DWORD *v25;
  unsigned __int8 v26;
  NSObject *v27;
  uint64_t *v28;
  _QWORD *v29;
  int v30;
  std::string *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::string v38;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  char *v46;
  __int16 v47;
  uint64_t *v48;
  __int16 v49;
  _QWORD *v50;
  __int16 v51;
  _QWORD v52[3];

  v36 = a1;
  v52[2] = *MEMORY[0x24BDAC8D0];
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)a1)
    {
      rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap = 0u;
      *(_OWORD *)&qword_253D97888 = 0u;
      dword_253D97898 = 1065353216;
    }
  }
  if (rtaid::GetAnalyzerToStringMap(void)::onceToken != -1)
    dispatch_once(&rtaid::GetAnalyzerToStringMap(void)::onceToken, &__block_literal_global_19);
  rtaid::GetClientIDMap(a1);
  v4 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(&rtaid::GetClientIDMap(void)::gClientIDMap, a2->i32[0]);
  if (!v4)
LABEL_69:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (*((char *)v4 + 47) < 0)
    std::string::__init_copy_ctor_external(&v38, (const std::string::value_type *)v4[3], v4[4]);
  else
    v38 = *(std::string *)((_BYTE *)v4 + 1);
  v5 = (_QWORD *)*v36;
  if ((_QWORD *)*v36 != v36 + 1)
  {
    do
    {
      v6 = *((unsigned int *)v5 + 7);
      if ((_DWORD)v6 == 7)
      {
        v7 = (uint64_t)vorr_s8(a2[6], vorr_s8((int8x8_t)85, (int8x8_t)42));
      }
      else
      {
        if (v6 >= 7)
          std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
        v7 = *(_QWORD *)&a2[6] | (1 << v6);
      }
      a2[6] = (int8x8_t)v7;
      for (i = (_QWORD *)a2[3]; i; i = (_QWORD *)*i)
      {
        v9 = i[3];
        v10 = (_DWORD *)(v9 + 159);
        if ((_DWORD)v6 == 7)
        {
          *(_DWORD *)(v9 + 162) = 16843009;
          *v10 = 16843009;
        }
        else
        {
          *((_BYTE *)v10 + v6) = 1;
        }
        rtaid::DetectorNode::updateSilenceAnalyzerState(v9);
      }
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      v12 = rtaid::get_log(void)::rtaid_os_log;
      if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEBUG))
      {
        v13 = std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::find<rtaid::AnalyzerType>(*((_DWORD *)v5 + 7));
        if (!v13)
          goto LABEL_69;
        v14 = v13 + 3;
        if (*((char *)v13 + 47) < 0)
          v14 = (_QWORD *)*v14;
        v15 = &v38;
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v15 = (std::string *)v38.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316674;
        v40 = "AudioIssueDetectorManager.cpp";
        v41 = 1024;
        v42 = 289;
        v43 = 1040;
        v44 = 14;
        v45 = 2080;
        v46 = "rtaid::Manager]";
        v47 = 2048;
        v48 = &SingletonManagerInstance(void)::sInstance;
        v49 = 2080;
        v50 = v14;
        v51 = 2080;
        v52[0] = v15;
        _os_log_impl(&dword_216CFB000, v12, OS_LOG_TYPE_DEBUG, "[%s:%-5d %.*s:%p] enabling global %s analyzer for client %s", buf, 0x40u);
      }
      v16 = (_QWORD *)v5[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v5[2];
          v18 = *v17 == (_QWORD)v5;
          v5 = v17;
        }
        while (!v18);
      }
      v5 = v17;
    }
    while (v17 != v36 + 1);
  }
  v19 = (_QWORD *)v36[3];
  v37 = v36 + 4;
  if (v19 != v37)
  {
    v20 = a2 + 1;
    do
    {
      v21 = (_QWORD *)v19[4];
      if (v21 != v19 + 5)
      {
        do
        {
          v22 = *((unsigned int *)v21 + 7);
          v23 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(v20, *((_DWORD *)v21 + 8));
          if (v23)
          {
            v24 = v23[3];
            v25 = (_DWORD *)(v24 + 152);
            if ((_DWORD)v22 == 7)
            {
              *(_DWORD *)(v24 + 155) = 16843009;
              *v25 = 16843009;
            }
            else
            {
              *((_BYTE *)v25 + v22) = 1;
            }
            rtaid::DetectorNode::updateSilenceAnalyzerState(v24);
          }
          {
            rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
          }
          v27 = rtaid::get_log(void)::rtaid_os_log;
          if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEBUG))
          {
            v28 = std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::find<rtaid::AnalyzerType>(*((_DWORD *)v21 + 7));
            if (!v28)
              goto LABEL_69;
            v29 = v28 + 3;
            if (*((char *)v28 + 47) < 0)
              v29 = (_QWORD *)*v29;
            v30 = *((_DWORD *)v21 + 8);
            v31 = &v38;
            if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v31 = (std::string *)v38.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136316930;
            v40 = "AudioIssueDetectorManager.cpp";
            v41 = 1024;
            v42 = 296;
            v43 = 1040;
            v44 = 14;
            v45 = 2080;
            v46 = "rtaid::Manager]";
            v47 = 2048;
            v48 = &SingletonManagerInstance(void)::sInstance;
            v49 = 2080;
            v50 = v29;
            v51 = 1024;
            LODWORD(v52[0]) = v30;
            WORD2(v52[0]) = 2080;
            *(_QWORD *)((char *)v52 + 6) = v31;
            _os_log_impl(&dword_216CFB000, v27, OS_LOG_TYPE_DEBUG, "[%s:%-5d %.*s:%p] enabling node specific %s analyzer at node %d for client %s", buf, 0x46u);
          }
          v32 = (_QWORD *)v21[1];
          if (v32)
          {
            do
            {
              v33 = v32;
              v32 = (_QWORD *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              v33 = (_QWORD *)v21[2];
              v18 = *v33 == (_QWORD)v21;
              v21 = v33;
            }
            while (!v18);
          }
          v21 = v33;
        }
        while (v33 != v19 + 5);
      }
      v34 = (_QWORD *)v19[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (_QWORD *)v19[2];
          v18 = *v35 == (_QWORD)v19;
          v19 = v35;
        }
        while (!v18);
      }
      v19 = v35;
    }
    while (v35 != v37);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_216D0579C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t rtaid::DetectorNode::updateSilenceAnalyzerState(uint64_t this)
{
  OpaqueAudioComponentInstance *v1;
  uint64_t v2;
  _BOOL4 v3;
  int v4;
  int v5;
  _BOOL4 inData;

  v1 = *(OpaqueAudioComponentInstance **)(this + 32);
  if (v1)
  {
    v2 = this;
    v3 = !*(_BYTE *)(this + 160) && !*(_BYTE *)(this + 153) && !*(_BYTE *)(this + 161) && *(_BYTE *)(this + 154) == 0;
    inData = v3;
    AudioUnitSetProperty(v1, 0xFA01u, 0, 0, &inData, 4u);
    if (*(_BYTE *)(v2 + 161))
      v4 = 1;
    else
      v4 = *(unsigned __int8 *)(v2 + 154);
    v5 = v4;
    return AudioUnitSetProperty(v1, 0xFA03u, 0, 0, &v5, 4u);
  }
  return this;
}

void rtaid::GetClientIDMap(rtaid *this)
{
  unsigned __int8 v1;

  {
    rtaid::GetClientIDMap(void)::gClientIDMap = 0u;
    *(_OWORD *)&qword_253D97828 = 0u;
    dword_253D97838 = 1065353216;
  }
  if (rtaid::GetClientIDMap(void)::onceToken != -1)
    dispatch_once(&rtaid::GetClientIDMap(void)::onceToken, &__block_literal_global_998);
}

void std::vector<float>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v16 = &v3[4 * a2];
    goto LABEL_16;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    v16 = &v4[4 * v6];
LABEL_16:
    a1[1] = v16;
    return;
  }
  if (a2 >> 62)
    std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  v9 = v8 >> 1;
  if (v8 >> 1 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v11 = (char *)operator new(4 * v10);
  v12 = &v11[4 * v5];
  v13 = &v11[4 * v10];
  bzero(v12, 4 * v6);
  v14 = &v12[4 * v6];
  while (v4 != v3)
  {
    v15 = *((_DWORD *)v4 - 1);
    v4 -= 4;
    *((_DWORD *)v12 - 1) = v15;
    v12 -= 4;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
    operator delete(v3);
}

void rtaid::NodeFormatConverter::disposeConverter(rtaid::NodeFormatConverter *this)
{
  OpaqueAudioConverter *v2;
  unsigned __int8 v3;
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  rtaid::NodeFormatConverter *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = (OpaqueAudioConverter *)*((_QWORD *)this + 11);
  if (v2)
  {
    AudioConverterDispose(v2);
    *((_QWORD *)this + 11) = 0;
    {
      rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
    }
    v4 = rtaid::get_log(void)::rtaid_os_log;
    if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
    {
      v5 = 136316162;
      v6 = "NodeFormatConverter.cpp";
      v7 = 1024;
      v8 = 92;
      v9 = 1040;
      v10 = 26;
      v11 = 2080;
      v12 = "rtaid::NodeFormatConverter]";
      v13 = 2048;
      v14 = this;
      _os_log_impl(&dword_216CFB000, v4, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] AudioConverterRef has been disposed", (uint8_t *)&v5, 0x2Cu);
    }
  }
}

uint64_t MobileGestaltSPIImplementation::IsInternalBuild(MobileGestaltSPIImplementation *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    MobileGestaltSPIImplementation::IsInternalBuild(void)::sIsInternalBuild = MobileGestaltSPIImplementation::IsInternalBuild(void)::{lambda(void)#1}::operator()();
  }
  return MobileGestaltSPIImplementation::IsInternalBuild(void)::sIsInternalBuild;
}

void sub_216D05B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CA::StreamDescription::AsString(CA::StreamDescription *this, _QWORD *a2, double a3, int16x8_t a4)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  BOOL v15;
  int32x4_t v16;
  uint32x4_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  const char *v22;
  unsigned int v23;
  const char *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type size;
  std::string *v32;
  __int128 v33;
  void *v34;
  int v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  unsigned int v41;
  unsigned int v42;
  const char *v43;
  unsigned int v44;
  int v45;
  const char *v46;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  _BOOL4 v52;
  const char *v53;
  std::string v54;
  std::string v55;
  char __str[20];
  std::string v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v6 = *((_DWORD *)a2 + 2);
  if (v6 == 1718773105)
  {
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz, 'freq'", (uint64_t)this, *((unsigned int *)a2 + 7), *a2);
    return;
  }
  if (v6 != 1819304813)
    goto LABEL_19;
  if (*((_DWORD *)a2 + 5) != 1)
    goto LABEL_19;
  v7 = *((_DWORD *)a2 + 6);
  if (v7 != *((_DWORD *)a2 + 4))
    goto LABEL_19;
  v8 = *((_DWORD *)a2 + 8);
  if (v7 < v8 >> 3)
    goto LABEL_19;
  v9 = *((unsigned int *)a2 + 7);
  if (!(_DWORD)v9)
    goto LABEL_19;
  v10 = *((_DWORD *)a2 + 3);
  if ((v10 & 0x20) == 0)
  {
    v15 = v7 == v7 / v9 * (_DWORD)v9;
    v7 /= v9;
    if (!v15)
      goto LABEL_19;
  }
  if ((v10 & 2) != 0 || 8 * v7 != v8)
    goto LABEL_19;
  if ((v10 & 1) != 0)
  {
    if ((v10 & 0x1F84) == 0)
    {
      if (v7 == 4)
      {
        v12 = 1;
        goto LABEL_163;
      }
      v15 = v7 == 8;
      v52 = v7 == 8;
      if (v15)
      {
        v12 = 4 * v52;
        goto LABEL_163;
      }
    }
LABEL_19:
    v13 = *((unsigned int *)a2 + 7);
    v14 = *(double *)a2;
    if ((_DWORD)v13)
      v15 = 0;
    else
      v15 = v6 == 0;
    if (v15 && v14 == 0.0)
    {
      caulk::make_string((caulk *)"%2u ch, %6.0f Hz", (uint64_t)this, 0, *a2);
      return;
    }
    a4.i32[0] = bswap32(v6);
    *(int8x8_t *)a4.i8 = vzip1_s8(*(int8x8_t *)a4.i8, *(int8x8_t *)&v14);
    v16.i64[0] = 0x1F0000001FLL;
    v16.i64[1] = 0x1F0000001FLL;
    v17.i64[0] = 0x5F0000005FLL;
    v17.i64[1] = 0x5F0000005FLL;
    *(int8x8_t *)a4.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v17, (uint32x4_t)vsraq_n_s32(v16, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a4.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a4.i8, (int8x8_t)0x2E002E002E002ELL);
    *((_BYTE *)&v57.__r_.__value_.__s + 23) = 4;
    LODWORD(v57.__r_.__value_.__l.__data_) = vmovn_s16(a4).u32[0];
    v57.__r_.__value_.__s.__data_[4] = 0;
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s (0x%08X) ", (uint64_t)&v55, v13, *(_QWORD *)&v14, &v57, *((unsigned int *)a2 + 3));
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    v18 = *((_DWORD *)a2 + 2);
    if (v18 <= 1819304812)
    {
      if (v18 != 1634492771 && v18 != 1634497332 && v18 != 1718378851)
      {
LABEL_70:
        caulk::make_string((caulk *)"%u bits/channel, %u bytes/packet, %u frames/packet, %u bytes/frame", (uint64_t)&v57, *((unsigned int *)a2 + 8), *((unsigned int *)a2 + 4), *((unsigned int *)a2 + 5), *((unsigned int *)a2 + 6));
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &v55;
        else
          v30 = (std::string *)v55.__r_.__value_.__r.__words[0];
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        else
          size = v55.__r_.__value_.__l.__size_;
LABEL_62:
        v32 = std::string::insert(&v57, 0, (const std::string::value_type *)v30, size);
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        *((_QWORD *)this + 2) = *((_QWORD *)&v32->__r_.__value_.__l + 2);
        *(_OWORD *)this = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_65;
        v34 = (void *)v57.__r_.__value_.__r.__words[0];
LABEL_64:
        operator delete(v34);
LABEL_65:
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        return;
      }
LABEL_45:
      v27 = *((unsigned int *)a2 + 3);
      if ((v27 - 1) < 4 || !(_DWORD)v27 && (v18 == 1634497332 || v18 == 1936487278 || v18 == 1936487267))
      {
        caulk::make_string((caulk *)"from %u-bit source, ", (uint64_t)&v57, CA::StreamDescription::AsString(void)const::kSourceBits[v27]);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = &v57;
        else
          v28 = (std::string *)v57.__r_.__value_.__r.__words[0];
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        else
          v29 = v57.__r_.__value_.__l.__size_;
        std::string::append(&v55, (const std::string::value_type *)v28, v29);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
      }
      else
      {
        std::string::append(&v55, "from UNKNOWN source bit depth, ", 0x1FuLL);
      }
      caulk::make_string((caulk *)"%u frames/packet", (uint64_t)&v57, *((unsigned int *)a2 + 5));
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v55;
      else
        v30 = (std::string *)v55.__r_.__value_.__r.__words[0];
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      else
        size = v55.__r_.__value_.__l.__size_;
      goto LABEL_62;
    }
    if (v18 == 1936487278 || v18 == 1936487267)
      goto LABEL_45;
    if (v18 != 1819304813)
      goto LABEL_70;
    v19 = *((_DWORD *)a2 + 3);
    v20 = *((_DWORD *)a2 + 6);
    v21 = v19 & 0x20;
    v22 = "";
    if (!v20)
      goto LABEL_37;
    if ((v19 & 0x20) != 0)
    {
      v23 = 1;
    }
    else
    {
      v23 = *((_DWORD *)a2 + 7);
      if (!v23)
      {
        v21 = 0;
LABEL_37:
        v24 = " signed";
        if ((v19 & 4) == 0)
          v24 = " unsigned";
        if ((v19 & 1) != 0)
          v25 = "float";
        else
          v25 = "integer";
        if ((v19 & 1) != 0)
          v26 = "";
        else
          v26 = v24;
LABEL_102:
        v57.__r_.__value_.__s.__data_[0] = 0;
        if (v21)
          v39 = ", deinterleaved";
        else
          v39 = "";
        v36 = "";
        v40 = "";
        goto LABEL_106;
      }
    }
    v35 = v20 / v23;
    if (v20 / v23 < 2)
    {
      v38 = " signed";
      if ((v19 & 4) == 0)
        v38 = " unsigned";
      if ((v19 & 1) != 0)
        v25 = "float";
      else
        v25 = "integer";
      if ((v19 & 1) != 0)
        v26 = "";
      else
        v26 = v38;
      if (v23 > v20)
        goto LABEL_102;
      v35 = 1;
      v36 = "";
    }
    else
    {
      if ((v19 & 2) != 0)
        v36 = " big-endian";
      else
        v36 = " little-endian";
      v37 = " unsigned";
      if ((v19 & 4) != 0)
        v37 = " signed";
      if ((v19 & 1) != 0)
        v25 = "float";
      else
        v25 = "integer";
      if ((v19 & 1) != 0)
        v26 = "";
      else
        v26 = v37;
    }
    v41 = *((_DWORD *)a2 + 7);
    if ((v19 & 0x20) != 0)
      v42 = 1;
    else
      v42 = *((_DWORD *)a2 + 7);
    if (v42)
      v42 = 8 * (v20 / v42);
    if (v42 == *((_DWORD *)a2 + 8))
    {
      v57.__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      if ((v19 & 8) != 0)
        v43 = "";
      else
        v43 = "un";
      snprintf((char *)&v57, 0x20uLL, "%spacked in %u bytes", v43, v35);
      v20 = *((_DWORD *)a2 + 6);
      v19 = *((_DWORD *)a2 + 3);
      if (!v20)
      {
        v44 = 0;
        v21 = *((_DWORD *)a2 + 3) & 0x20;
        goto LABEL_128;
      }
      v41 = *((_DWORD *)a2 + 7);
      v21 = *((_DWORD *)a2 + 3) & 0x20;
    }
    if (v21)
      v44 = 1;
    else
      v44 = v41;
    if (v44)
      v44 = 8 * (v20 / v44);
LABEL_128:
    v45 = *((_DWORD *)a2 + 8);
    v46 = " high-aligned";
    if ((v19 & 0x10) == 0)
      v46 = " low-aligned";
    if ((v45 & 7) == 0 && v44 == v45)
      v40 = "";
    else
      v40 = v46;
    if (v21)
      v39 = ", deinterleaved";
    else
      v39 = "";
    if (v57.__r_.__value_.__s.__data_[0])
    {
      v22 = ", ";
LABEL_141:
      if (((v19 >> 7) & 0x3F) != 0)
        snprintf(__str, 0x14uLL, "%u.%u");
      else
        snprintf(__str, 0x14uLL, "%u");
      caulk::make_string((caulk *)"%s-bit%s%s %s%s%s%s%s", (uint64_t)&v54, __str, v36, v26, v25, v22, &v57, v40, v39);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &v55;
      else
        v48 = (std::string *)v55.__r_.__value_.__r.__words[0];
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      else
        v49 = v55.__r_.__value_.__l.__size_;
      v50 = std::string::insert(&v54, 0, (const std::string::value_type *)v48, v49);
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      *((_QWORD *)this + 2) = *((_QWORD *)&v50->__r_.__value_.__l + 2);
      *(_OWORD *)this = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_65;
      v34 = (void *)v54.__r_.__value_.__r.__words[0];
      goto LABEL_64;
    }
LABEL_106:
    if (*v40)
      v22 = ", ";
    goto LABEL_141;
  }
  if ((v10 & 4) == 0)
    goto LABEL_19;
  v11 = (v10 >> 7) & 0x3F;
  if (v11 != 24 || v7 != 4)
  {
    if (!v11 && v7 == 4)
    {
      v12 = 5;
      goto LABEL_163;
    }
    if (!v11 && v7 == 2)
    {
      v12 = 2;
      goto LABEL_163;
    }
    goto LABEL_19;
  }
  v12 = 3;
LABEL_163:
  if ((v10 & 0x20) != 0)
    v53 = ", deinterleaved";
  else
    v53 = ", interleaved";
  if (v9 <= 1)
    v53 = "";
  caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s%s", (uint64_t)this, v9, *a2, *((_QWORD *)&off_24D6161A8 + v12), v53);
}

void sub_216D062C8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void caulk::make_string(caulk *this@<X0>, uint64_t a2@<X8>, ...)
{
  int v5;
  int v6;
  char *v7;
  size_t v8;
  int v9;
  va_list va;

  va_start(va, a2);
  v5 = vsnprintf(0, 0, (const char *)this, va);
  if (v5 <= 0)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    std::string::resize((std::string *)a2, (v5 + 1), 0);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = (char *)a2;
    else
      v7 = *(char **)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    v9 = vsnprintf(v7, v8, (const char *)this, va);
    std::string::resize((std::string *)a2, v9, 0);
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v12 = a1->__end_;
    v13 = v8 + 1;
    v14 = v8 + 1;
    do
    {
      v8 = v14;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v14, a3);
    }
    while (v14 != v8);
    if (v8 == v13)
    {
      v15 = (std::__node<char> *)operator new();
      v16 = a1->__end_;
      v17 = v16->__first_;
      v15[1].__vftable = (std::__node<char>_vtbl *)v17;
      v16->__first_ = v15;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, char *a3)
{
  int v6;
  int v7;
  char *v8;
  BOOL v9;
  char *v10;
  int v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t (**v19)();
  unsigned __int8 *result;
  int v21;
  BOOL v22;
  unsigned int marked_count;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  int *p_open_count;
  char *v27;
  char *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  unsigned int v33;
  std::__node<char> *v34;
  std::__owns_one_state<char> *v35;
  std::__node<char> *v36;
  unsigned int v37;
  char *v38;
  int v39;
  int v40;
  std::basic_regex<char> *v41;
  BOOL v42;
  std::basic_regex<char> *v43;
  BOOL v44;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v46;
  std::__bracket_expression<char, std::regex_traits<char>> *v47;
  unsigned __int8 *v48;
  std::basic_regex<char> *v49;
  BOOL v50;
  std::basic_regex<char> v51;

  if (a2 == (unsigned __int8 *)a3)
    return a2;
  v6 = (char)*a2;
  v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3)
        goto LABEL_32;
      v21 = a2[1];
      if (v21 == 66)
      {
        v22 = 1;
      }
      else
      {
        if (v21 != 98)
          goto LABEL_31;
        v22 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v22);
      return a2 + 2;
    }
    if (v6 != 94)
      goto LABEL_32;
    v15 = operator new();
    v16 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    v19 = &off_24D615D80;
LABEL_21:
    *(_QWORD *)v15 = v19;
    *(_QWORD *)(v15 + 8) = first;
    *(_BYTE *)(v15 + 16) = v16;
    end->__first_ = (std::__node<char> *)v15;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v15 = operator new();
    v16 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    v19 = &off_24D615DB0;
    goto LABEL_21;
  }
  v9 = v6 == 40;
  v8 = (char *)(a2 + 1);
  v9 = !v9 || v8 == a3;
  if (!v9)
  {
    v10 = (char *)(a2 + 2);
    if (*v8 == 63 && v10 != a3)
    {
      v12 = *v10;
      if (v12 == 33)
      {
        std::regex_traits<char>::regex_traits(&v51.__traits_);
        memset(&v51.__flags_, 0, 40);
        v51.__flags_ = this->__flags_;
        v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v51, a2 + 3, a3);
        marked_count = v51.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v51, 1, this->__marked_count_);
        this->__marked_count_ += marked_count;
        if (v13 == a3 || *v13 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_30:
        std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100]((uint64_t)&v51.__start_);
        std::locale::~locale(&v51.__traits_.__loc_);
        result = (unsigned __int8 *)(v13 + 1);
        if (v13 + 1 != (char *)a2)
          return result;
        goto LABEL_31;
      }
      if (v12 == 61)
      {
        std::regex_traits<char>::regex_traits(&v51.__traits_);
        memset(&v51.__flags_, 0, 40);
        v51.__flags_ = this->__flags_;
        v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v51, a2 + 3, a3);
        v14 = v51.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v51, 0, this->__marked_count_);
        this->__marked_count_ += v14;
        if (v13 == a3 || *v13 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        goto LABEL_30;
      }
    }
LABEL_31:
    v7 = *a2;
  }
LABEL_32:
  v24 = this->__end_;
  v25 = this->__marked_count_;
  if ((char)v7 <= 91)
  {
    result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_60;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3)
          goto LABEL_97;
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
          if (v27 == a3)
            goto LABEL_97;
          v28 = v27;
          if (*v27 != 41)
            goto LABEL_97;
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
          v37 = this->__marked_count_;
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v38 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 1, a3);
          if (v38 == a3 || (v28 = v38, *v38 != 41))
LABEL_97:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v37);
        }
        --*p_open_count;
        v30 = (unsigned __int8 *)(v28 + 1);
        goto LABEL_57;
      case '*':
      case '+':
        goto LABEL_64;
      case '.':
        v34 = (std::__node<char> *)operator new();
        v35 = this->__end_;
        v36 = v35->__first_;
        v34->__vftable = (std::__node<char>_vtbl *)&off_24D615E58;
        v34[1].__vftable = (std::__node<char>_vtbl *)v36;
        v35->__first_ = v34;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_61;
      default:
        if ((char)v7 == 91)
        {
          v30 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, a3);
          goto LABEL_57;
        }
        if ((char)v7 != 63)
          goto LABEL_60;
        goto LABEL_64;
    }
  }
  v29 = ((char)v7 - 92);
  if (v29 > 0x21)
  {
LABEL_60:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v7);
LABEL_61:
    v30 = a2 + 1;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v30, (unsigned __int8 *)a3, v24, v25 + 1, this->__marked_count_ + 1);
  }
  if (((1 << (v7 - 92)) & 0x300000006) != 0)
    return a2;
  if ((char)v7 != 92)
  {
    if (v29 == 31)
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    goto LABEL_60;
  }
  if (v7 != 92)
    return a2;
  v31 = a2 + 1;
  if (a2 + 1 == (unsigned __int8 *)a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v32 = *v31;
  v33 = v32 - 48;
  if (v32 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v33);
LABEL_96:
    v30 = a2 + 2;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v30, (unsigned __int8 *)a3, v24, v25 + 1, this->__marked_count_ + 1);
  }
  if ((v32 - 49) > 8)
    goto LABEL_76;
  v30 = a2 + 2;
  if (a2 + 2 == (unsigned __int8 *)a3)
  {
    v30 = (unsigned __int8 *)a3;
  }
  else
  {
    while (1)
    {
      v39 = *v30;
      if ((v39 - 48) > 9)
        break;
      if (v33 >= 0x19999999)
        goto LABEL_98;
      ++v30;
      v33 = v39 + 10 * v33 - 48;
      if (v30 == (unsigned __int8 *)a3)
      {
        v30 = (unsigned __int8 *)a3;
        break;
      }
    }
    if (!v33)
LABEL_98:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v33 > v25)
    goto LABEL_98;
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v33);
  if (v30 == v31)
  {
LABEL_76:
    v40 = (char)*v31;
    if (v40 > 99)
    {
      if (v40 == 119)
      {
        v41 = this;
        v42 = 0;
        goto LABEL_88;
      }
      if (v40 == 115)
      {
        v49 = this;
        v50 = 0;
LABEL_94:
        started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v49, v50);
        v46 = started->__mask_ | 0x4000;
        goto LABEL_95;
      }
      if (v40 != 100)
      {
LABEL_89:
        v48 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, (unsigned __int8 *)a3, 0);
        if (v48 == v31)
          v30 = a2;
        else
          v30 = v48;
        goto LABEL_57;
      }
      v43 = this;
      v44 = 0;
    }
    else
    {
      if (v40 != 68)
      {
        if (v40 != 83)
        {
          if (v40 == 87)
          {
            v41 = this;
            v42 = 1;
LABEL_88:
            v47 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v41, v42);
            v47->__mask_ |= 0x500u;
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v47, 95);
            goto LABEL_96;
          }
          goto LABEL_89;
        }
        v49 = this;
        v50 = 1;
        goto LABEL_94;
      }
      v43 = this;
      v44 = 1;
    }
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v43, v44);
    v46 = started->__mask_ | 0x400;
LABEL_95:
    started->__mask_ = v46;
    goto LABEL_96;
  }
LABEL_57:
  result = a2;
  if (v30 != a2)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v30, (unsigned __int8 *)a3, v24, v25 + 1, this->__marked_count_ + 1);
  return result;
}

void sub_216D06AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return a2;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  int v3;
  int v4;
  int v5;

  if (result != a2)
  {
    v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38)
            break;
          if (v4 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2)
            return a2;
        }
      }
    }
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &off_24D616038;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&off_24D616098;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_216D06FA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::__node<char> *v6;
  std::__node<char> *first;
  std::__node<char> *v8;
  std::__node<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;

  v6 = (std::__node<char> *)operator new();
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&off_24D6160C8;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  v8 = (std::__node<char> *)operator new();
  v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  v10 = (std::__node<char> *)operator new();
  v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)&off_24D6160F8;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24D616068;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x219A00DF0);
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24D616068;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x219A00DF0);
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x219A00DF0);
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v6;

  v6 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v6 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  JUMPOUT(0x219A00DF0);
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x219A00DF0);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  void *v11;
  void *v12;
  int v13;
  char *j;
  char *v15;
  unint64_t i;
  int v17;
  char *v18;
  char *v19;
  int v20;
  std::__split_buffer<std::string>::pointer end_high;
  void *first;
  const char *v23;
  std::regex_traits<char>::char_class_type classname;
  char v25;
  unint64_t v26;
  char *v27;
  void **v28;
  std::__split_buffer<std::string>::pointer begin;
  void *v30;
  std::string::value_type *v31;
  std::string::value_type **v32;
  int v33;
  void **v34;
  _BYTE *v35;
  char *v36;
  char *v37;
  std::string::value_type *v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  std::string *v51;
  char *v52;
  std::__split_buffer<std::string>::pointer v53;
  std::__split_buffer<std::string>::pointer end;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  std::__split_buffer<std::string>::pointer v58;
  __int128 v59;
  int64x2_t v60;
  std::string *v61;
  char *k;
  void **v63;
  char v64;
  void **v65;
  char *m;
  void **v67;
  char v68;
  void **v69;
  void *v70;
  void *v71;
  void **v72;
  char v73;
  void **v74;
  void **v75;
  char v76;
  void **v77;
  std::__split_buffer<std::string>::pointer v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char **v86;
  uint64_t v87;
  char *v88;
  void *v89[2];
  int64_t v90;
  void *v91[2];
  std::string *v92;
  void *v93[2];
  uint64_t v94;
  void *__p[2];
  std::string *v96;
  std::string::value_type *__s[2];
  int64_t v98;
  __int128 v99;
  std::string *v100;
  std::__split_buffer<std::string> v101;
  int64_t v102;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_253;
    v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3)
      goto LABEL_253;
    v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3)
      goto LABEL_253;
    v86 = (char **)(v7 + 88);
    v87 = v7 + 16;
    v88 = a3 - 4;
    while (1)
    {
      v8 = (char *)v5;
      v9 = a3;
      if ((char *)v5 == a3)
        goto LABEL_156;
      v10 = *(unsigned __int8 *)v5;
      v9 = (char *)v5;
      if (v10 == 93)
        goto LABEL_156;
      v11 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v96 = 0;
      v12 = 0;
      v9 = (char *)v5;
      if ((char *)(v5 + 1) != a3 && v10 == 91)
      {
        v13 = *(unsigned __int8 *)(v5 + 1);
        switch(v13)
        {
          case '.':
            v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, (char *)(v5 + 2), a3, (uint64_t)__p);
            v12 = (void *)HIBYTE(v96);
            v11 = __p[1];
            break;
          case ':':
            if ((uint64_t)&a3[-v5 - 2] < 2)
              goto LABEL_252;
            for (i = 0; ; ++i)
            {
              v15 = (char *)(v5 + i + 2);
              if (*v15 == 58 && *(_BYTE *)(v5 + i + 3) == 93)
                break;
              if (&v88[-v5] == (char *)i)
                goto LABEL_252;
            }
            if (v15 == a3)
LABEL_252:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
            v20 = *(_DWORD *)(a1 + 24);
            std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v101, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
            end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(v101.__end_);
            if (SHIBYTE(v101.__end_) >= 0)
              first = &v101;
            else
              first = v101.__first_;
            if (SHIBYTE(v101.__end_) < 0)
              end_high = v101.__begin_;
            (*(void (**)(_QWORD, void *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), first, (char *)end_high + (_QWORD)first);
            if (SHIBYTE(v101.__end_) >= 0)
              v23 = (const char *)&v101;
            else
              v23 = (const char *)v101.__first_;
            classname = std::__get_classname(v23, v20 & 1);
            if (SHIBYTE(v101.__end_) < 0)
              operator delete(v101.__first_);
            if (!classname)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
            v25 = 0;
            *(_DWORD *)(v7 + 160) |= classname;
            goto LABEL_152;
          case '=':
            if ((uint64_t)&a3[-v5 - 2] < 2)
              goto LABEL_252;
            for (j = 0; ; ++j)
            {
              v15 = &j[v5 + 2];
              if (*v15 == 61 && j[v5 + 3] == 93)
                break;
              if (&v88[-v5] == j)
                goto LABEL_252;
            }
            if (v15 == a3)
              goto LABEL_252;
            std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v99, a1, (char *)(v5 + 2), &j[v5 + 2]);
            if (SHIBYTE(v100) < 0)
            {
              v26 = *((_QWORD *)&v99 + 1);
              if (!*((_QWORD *)&v99 + 1))
LABEL_254:
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              v27 = (char *)v99;
            }
            else
            {
              v26 = HIBYTE(v100);
              if (!HIBYTE(v100))
                goto LABEL_254;
              v27 = (char *)&v99;
            }
            std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v101, v27, &v27[v26], v26);
            begin = (std::__split_buffer<std::string>::pointer)HIBYTE(v101.__end_);
            if (SHIBYTE(v101.__end_) >= 0)
              v30 = &v101;
            else
              v30 = v101.__first_;
            if (SHIBYTE(v101.__end_) < 0)
              begin = v101.__begin_;
            (*(void (**)(std::string::value_type **__return_ptr, _QWORD, void *, char *))(**(_QWORD **)(a1 + 16) + 32))(__s, *(_QWORD *)(a1 + 16), v30, (char *)begin + (_QWORD)v30);
            v31 = (std::string::value_type *)HIBYTE(v98);
            if (v98 < 0)
              v31 = __s[1];
            if (v31 != (std::string::value_type *)1)
            {
              if (v31 == (std::string::value_type *)12)
              {
                v32 = __s;
                if (v98 < 0)
                  v32 = (std::string::value_type **)__s[0];
                *((_BYTE *)v32 + 11) = *((_BYTE *)v32 + 3);
              }
              else if (SHIBYTE(v98) < 0)
              {
                *__s[0] = 0;
                __s[1] = 0;
              }
              else
              {
                LOBYTE(__s[0]) = 0;
                HIBYTE(v98) = 0;
              }
            }
            if (SHIBYTE(v101.__end_) < 0)
              operator delete(v101.__first_);
            v38 = (std::string::value_type *)HIBYTE(v98);
            v39 = HIBYTE(v98);
            if (v98 < 0)
              v38 = __s[1];
            if (v38)
            {
              v41 = *(_QWORD *)(v7 + 144);
              v40 = *(_QWORD *)(v7 + 152);
              if (v41 >= v40)
              {
                v45 = *(_QWORD *)(v7 + 136);
                v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - v45) >> 3);
                v47 = v46 + 1;
                if (v46 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
                v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - v45) >> 3);
                if (2 * v48 > v47)
                  v47 = 2 * v48;
                if (v48 >= 0x555555555555555)
                  v49 = 0xAAAAAAAAAAAAAAALL;
                else
                  v49 = v47;
                v101.__end_cap_.__value_ = (std::allocator<std::string> *)(v7 + 152);
                if (v49)
                {
                  v51 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v49);
                  v39 = HIBYTE(v98);
                }
                else
                {
                  v51 = 0;
                  v50 = 0;
                }
                end = v51 + v46;
                v101.__first_ = v51;
                v101.__begin_ = end;
                v101.__end_ = end;
                v101.__end_cap_.__value_ = &v51[v50];
                if (v39 < 0)
                {
                  std::string::__init_copy_ctor_external(end, __s[0], (std::string::size_type)__s[1]);
                  end = v101.__end_;
                }
                else
                {
                  v55 = *(_OWORD *)__s;
                  end->__r_.__value_.__r.__words[2] = v98;
                  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v55;
                }
                v53 = end + 1;
                v101.__end_ = end + 1;
                v57 = *(_QWORD *)(v7 + 136);
                v56 = *(_QWORD *)(v7 + 144);
                v58 = v101.__begin_;
                if (v56 == v57)
                {
                  v60 = vdupq_n_s64(v56);
                }
                else
                {
                  do
                  {
                    v59 = *(_OWORD *)(v56 - 24);
                    v58[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v56 - 8);
                    *(_OWORD *)&v58[-1].__r_.__value_.__l.__data_ = v59;
                    --v58;
                    *(_QWORD *)(v56 - 16) = 0;
                    *(_QWORD *)(v56 - 8) = 0;
                    *(_QWORD *)(v56 - 24) = 0;
                    v56 -= 24;
                  }
                  while (v56 != v57);
                  v60 = *(int64x2_t *)(v7 + 136);
                  v53 = v101.__end_;
                }
                *(_QWORD *)(v7 + 136) = v58;
                *(_QWORD *)(v7 + 144) = v53;
                *(int64x2_t *)&v101.__begin_ = v60;
                v61 = *(std::string **)(v7 + 152);
                *(_QWORD *)(v7 + 152) = v101.__end_cap_.__value_;
                v101.__end_cap_.__value_ = v61;
                v101.__first_ = (std::__split_buffer<std::string>::pointer)v60.i64[0];
                std::__split_buffer<std::string>::~__split_buffer(&v101);
              }
              else
              {
                if (SHIBYTE(v98) < 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(v7 + 144), __s[0], (std::string::size_type)__s[1]);
                }
                else
                {
                  v42 = *(_OWORD *)__s;
                  *(_QWORD *)(v41 + 16) = v98;
                  *(_OWORD *)v41 = v42;
                }
                v53 = (std::__split_buffer<std::string>::pointer)(v41 + 24);
                *(_QWORD *)(v7 + 144) = v41 + 24;
              }
              *(_QWORD *)(v7 + 144) = v53;
            }
            else
            {
              v43 = HIBYTE(v100);
              if (SHIBYTE(v100) < 0)
                v43 = *((_QWORD *)&v99 + 1);
              if (v43 == 2)
              {
                v52 = (char *)&v99;
                if (SHIBYTE(v100) < 0)
                  v52 = (char *)v99;
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *v52, v52[1]);
              }
              else
              {
                if (v43 != 1)
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
                v44 = (char *)&v99;
                if (SHIBYTE(v100) < 0)
                  v44 = (char *)v99;
                std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *v44);
              }
            }
            if (SHIBYTE(v98) < 0)
              operator delete(__s[0]);
            if (SHIBYTE(v100) < 0)
              operator delete((void *)v99);
            v25 = 0;
LABEL_152:
            v5 = (uint64_t)(v15 + 2);
            v36 = v8;
            goto LABEL_153;
          default:
            v11 = 0;
            v12 = 0;
            v9 = (char *)v5;
            break;
        }
      }
      v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if ((char)v12 >= 0)
        v11 = v12;
      if (!v11)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) == 0x40)
        {
          v17 = *v9;
          if (v17 == 92)
          {
            v18 = v9 + 1;
            if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0)
              v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v18, a3, (uint64_t *)__p);
            else
              v19 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v18, (unsigned __int8 *)a3, (uint64_t)__p, v7);
            v9 = v19;
            goto LABEL_81;
          }
        }
        else
        {
          LOBYTE(v17) = *v9;
        }
        if ((char)v12 < 0)
        {
          v28 = (void **)__p[0];
          __p[1] = (void *)1;
        }
        else
        {
          HIBYTE(v96) = 1;
          v28 = __p;
        }
        *(_BYTE *)v28 = v17;
        *((_BYTE *)v28 + 1) = 0;
        ++v9;
      }
LABEL_81:
      if (v9 != a3)
      {
        v33 = *v9;
        if (v33 != 93)
        {
          v35 = v9 + 1;
          if (v9 + 1 != a3 && v33 == 45 && *v35 != 93)
          {
            v93[0] = 0;
            v93[1] = 0;
            v94 = 0;
            v36 = v9 + 2;
            if (v9 + 2 != a3 && *v35 == 91 && *v36 == 46)
            {
              v37 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v9 + 3, a3, (uint64_t)v93);
              goto LABEL_160;
            }
            if ((v5 | 0x40) == 0x40)
            {
              LODWORD(v35) = *v35;
              if ((_DWORD)v35 == 92)
              {
                if ((_DWORD)v5)
                  v37 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v9 + 2, a3, (uint64_t *)v93);
                else
                  v37 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v9 + 2, (unsigned __int8 *)a3, (uint64_t)v93, v7);
LABEL_160:
                v36 = v37;
LABEL_161:
                *(_OWORD *)v91 = *(_OWORD *)__p;
                v92 = v96;
                __p[1] = 0;
                v96 = 0;
                *(_OWORD *)v89 = *(_OWORD *)v93;
                v90 = v94;
                v93[0] = 0;
                v93[1] = 0;
                v94 = 0;
                __p[0] = 0;
                if (*(_BYTE *)(v7 + 170))
                {
                  if (*(_BYTE *)(v7 + 169))
                  {
                    for (k = 0; ; ++k)
                    {
                      if (SHIBYTE(v92) < 0)
                      {
                        if (k >= v91[1])
                        {
LABEL_173:
                          for (m = 0; ; ++m)
                          {
                            if (SHIBYTE(v90) < 0)
                            {
                              if (m >= v89[1])
                                goto LABEL_219;
                              v67 = (void **)v89[0];
                            }
                            else
                            {
                              if ((unint64_t)m >= HIBYTE(v90))
                                goto LABEL_219;
                              v67 = v89;
                            }
                            v68 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), m[(_QWORD)v67]);
                            if (v90 >= 0)
                              v69 = v89;
                            else
                              v69 = (void **)v89[0];
                            m[(_QWORD)v69] = v68;
                          }
                        }
                        v63 = (void **)v91[0];
                      }
                      else
                      {
                        if ((unint64_t)k >= HIBYTE(v92))
                          goto LABEL_173;
                        v63 = v91;
                      }
                      v64 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), k[(_QWORD)v63]);
                      if (SHIBYTE(v92) >= 0)
                        v65 = v91;
                      else
                        v65 = (void **)v91[0];
                      k[(_QWORD)v65] = v64;
                    }
                  }
                  v79 = 0;
                  if ((HIBYTE(v92) & 0x80) != 0)
                    goto LABEL_210;
                  while ((unint64_t)v79 < HIBYTE(v92))
                  {
                    while (1)
                    {
                      ++v79;
                      if ((HIBYTE(v92) & 0x80) == 0)
                        break;
LABEL_210:
                      if (v79 >= v91[1])
                        goto LABEL_213;
                    }
                  }
LABEL_213:
                  v80 = 0;
                  if (v90 < 0)
                    goto LABEL_216;
                  while ((unint64_t)v80 < HIBYTE(v90))
                  {
                    while (1)
                    {
                      ++v80;
                      if ((v90 & 0x8000000000000000) == 0)
                        break;
LABEL_216:
                      if (v80 >= v89[1])
                        goto LABEL_219;
                    }
                  }
LABEL_219:
                  v81 = (char *)HIBYTE(v92);
                  if (SHIBYTE(v92) >= 0)
                    v82 = (char *)v91;
                  else
                    v82 = (char *)v91[0];
                  if (SHIBYTE(v92) < 0)
                    v81 = (char *)v91[1];
                  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v99, v87, v82, &v81[(_QWORD)v82]);
                  v83 = (char *)HIBYTE(v90);
                  if (v90 >= 0)
                    v84 = (char *)v89;
                  else
                    v84 = (char *)v89[0];
                  if (v90 < 0)
                    v83 = (char *)v89[1];
                  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)__s, v87, v84, &v83[(_QWORD)v84]);
                  *(_OWORD *)&v101.__first_ = v99;
                  v101.__end_ = v100;
                  v100 = 0;
                  v99 = 0uLL;
                  v101.__end_cap_ = *(std::__compressed_pair<std::string *> *)__s;
                  v102 = v98;
                  __s[0] = 0;
                  __s[1] = 0;
                  v98 = 0;
                  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v86, (__int128 *)&v101);
                  if (SHIBYTE(v102) < 0)
                    operator delete(v101.__end_cap_.__value_);
                  if (SHIBYTE(v101.__end_) < 0)
                    operator delete(v101.__first_);
                  if (SHIBYTE(v98) < 0)
                    operator delete(__s[0]);
                  if (SHIBYTE(v100) < 0)
                  {
                    v78 = (std::__split_buffer<std::string>::pointer)v99;
LABEL_237:
                    operator delete(v78);
                  }
                }
                else
                {
                  v70 = (void *)HIBYTE(v92);
                  if (SHIBYTE(v92) < 0)
                    v70 = v91[1];
                  if (v70 != (void *)1)
                    goto LABEL_256;
                  v71 = (void *)HIBYTE(v90);
                  if (v90 < 0)
                    v71 = v89[1];
                  if (v71 != (void *)1)
LABEL_256:
                    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
                  if (*(_BYTE *)(v7 + 169))
                  {
                    if (SHIBYTE(v92) >= 0)
                      v72 = v91;
                    else
                      v72 = (void **)v91[0];
                    v73 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)v72);
                    if (SHIBYTE(v92) >= 0)
                      v74 = v91;
                    else
                      v74 = (void **)v91[0];
                    *(_BYTE *)v74 = v73;
                    if (v90 >= 0)
                      v75 = v89;
                    else
                      v75 = (void **)v89[0];
                    v76 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)v75);
                    if (v90 >= 0)
                      v77 = v89;
                    else
                      v77 = (void **)v89[0];
                    *(_BYTE *)v77 = v76;
                  }
                  *(_OWORD *)&v101.__first_ = *(_OWORD *)v91;
                  v101.__end_ = v92;
                  v91[0] = 0;
                  v91[1] = 0;
                  v92 = 0;
                  v101.__end_cap_ = *(std::__compressed_pair<std::string *> *)v89;
                  v102 = v90;
                  v89[0] = 0;
                  v89[1] = 0;
                  v90 = 0;
                  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v86, (__int128 *)&v101);
                  if (SHIBYTE(v102) < 0)
                    operator delete(v101.__end_cap_.__value_);
                  if (SHIBYTE(v101.__end_) < 0)
                  {
                    v78 = v101.__first_;
                    goto LABEL_237;
                  }
                }
                if (SHIBYTE(v90) < 0)
                  operator delete(v89[0]);
                if (SHIBYTE(v92) < 0)
                  operator delete(v91[0]);
                if (SHIBYTE(v94) < 0)
                  operator delete(v93[0]);
                v25 = 1;
LABEL_153:
                if (SHIBYTE(v96) < 0)
                  operator delete(__p[0]);
                v9 = v36;
                if ((v25 & 1) == 0)
                  goto LABEL_157;
                goto LABEL_156;
              }
            }
            else
            {
              LOBYTE(v35) = *v35;
            }
            HIBYTE(v94) = 1;
            LOWORD(v93[0]) = v35;
            goto LABEL_161;
          }
        }
      }
      if (SHIBYTE(v96) < 0)
      {
        if (__p[1])
        {
          if (__p[1] == (void *)1)
          {
            v34 = (void **)__p[0];
LABEL_90:
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v34);
LABEL_101:
            v25 = 1;
            v36 = v9;
            goto LABEL_153;
          }
          v34 = (void **)__p[0];
LABEL_100:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v34, *((char *)v34 + 1));
          goto LABEL_101;
        }
        operator delete(__p[0]);
      }
      else if (HIBYTE(v96))
      {
        v34 = __p;
        if (HIBYTE(v96) == 1)
          goto LABEL_90;
        goto LABEL_100;
      }
LABEL_156:
      v5 = (uint64_t)v9;
LABEL_157:
      if ((char *)v5 == v8)
      {
        if (v8 != a3)
        {
          if (*v8 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v8;
          }
          if (v8 != a3 && *v8 == 93)
            return v8 + 1;
        }
LABEL_253:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
  }
  return a2;
}

void sub_216D07E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  *(_QWORD *)(v46 + 144) = v47;
  if (a46 < 0)
    operator delete(__p);
  if (*(char *)(v48 - 145) < 0)
    operator delete(*(void **)(v48 - 168));
  if (a40 < 0)
    operator delete(a35);
  _Unwind_Resume(exception_object);
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  uint64_t v4;
  std::__node<char> *first;
  unsigned int flags_low;
  char v7;
  int v8;
  std::string::size_type size;
  std::string *v10;
  BOOL v11;
  std::locale v13;
  std::string v14;

  v4 = operator new();
  first = this->__end_->__first_;
  flags_low = LOBYTE(this->__flags_);
  v7 = flags_low & 1;
  v8 = (flags_low >> 3) & 1;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_BYTE *)(v4 + 168) = __negate;
  *(_BYTE *)(v4 + 169) = v7;
  *(_BYTE *)(v4 + 170) = v8;
  std::locale::locale(&v13, (const std::locale *)(v4 + 16));
  std::locale::name(&v14, &v13);
  size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v14.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v14;
    v11 = v10->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  else
  {
    v11 = 1;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v13);
  *(_BYTE *)(v4 + 171) = v11;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)v4;
  return (std::__bracket_expression<char, std::regex_traits<char>> *)v4;
}

void sub_216D080BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void (__cdecl ***v10)(std::__owns_one_state<char> *__hidden);
  std::locale *v11;
  void **v12;
  void (__cdecl **v14)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v15)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v16)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v17)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  v17 = v10[1];
  if (v17)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v17 + 1))(v17);
  MEMORY[0x219A00DF0](v10, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x219A00DF0);
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x219A00DF0);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        v8 = v5 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) == 0)
          break;
        v5 = *v6;
        v9 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a2) & 0x80) == 0)
        return v6;
      v9 = v6 + 1;
      v5 = v6[1];
    }
    while (v5);
  }
  else
  {
    v9 = a1 + 1;
  }
LABEL_9:
  v10 = (uint64_t *)v6;
  v6 = (uint64_t **)operator new(0x50uLL);
  *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
  v11 = *(uint64_t **)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6[6] = v11;
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *v6 = 0;
  v6[1] = 0;
  v6[2] = v10;
  *v9 = (uint64_t *)v6;
  v12 = (uint64_t *)**a1;
  v13 = (uint64_t *)v6;
  if (v12)
  {
    *a1 = v12;
    v13 = *v9;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v6;
}

uint64_t **std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::find<AudioServiceType>(_QWORD *a1, unsigned __int16 a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t ***v5;
  uint64_t **result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ****)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t **)*result)
  {
    v7 = (unint64_t)result[1];
    if (v7 == a2)
    {
      if (*((unsigned __int16 *)result + 8) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

void AudioStatisticsSPIImplementation::SendMessage(uint64_t a1, uint64_t *a2, unsigned int a3, const UInt8 **a4, unsigned int a5, unsigned int a6)
{
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  int64x2_t v19;
  unint64_t v20;
  const UInt8 *v21;
  const UInt8 **v22;
  const UInt8 *v23;
  CFStringRef *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  int64x2_t v33;
  unint64_t v34;
  UInt8 *v35;
  const UInt8 **v36;
  BOOL v37;
  uint64_t v38;
  void **i;
  void **v40;
  void *v41;
  void **v42;
  void **v43;
  void **v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void **v50;
  void *v51;
  void *v52;
  void **v53;
  void **v54;
  void **v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void **v61;
  void *v62;
  void **v63;
  void **v64;
  CFDictionaryRef v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *exception;
  void *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  int64x2_t v74;
  _QWORD v75[2];
  void **values;
  void **v77;
  unint64_t v78;
  void **keys;
  int64x2_t v80;
  unint64_t v81;
  _QWORD *v82;

  v74 = 0uLL;
  v75[0] = 0;
  v11 = (unint64_t)a4[2];
  if (v11)
  {
    if (v11 >> 60)
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    v82 = v75;
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<applesauce::CF::TypeRefPair>>(v11);
    v14 = &v12[16 * v13];
    v80.i64[1] = (uint64_t)v12;
    v81 = (unint64_t)v14;
    v15 = (_QWORD *)v74.i64[1];
    v16 = (_QWORD *)v74.i64[0];
    if (v74.i64[1] == v74.i64[0])
    {
      v19 = vdupq_n_s64(v74.u64[1]);
      v17 = v12;
    }
    else
    {
      v17 = v12;
      do
      {
        v18 = *(v15 - 2);
        v15 -= 2;
        *((_QWORD *)v17 - 2) = v18;
        v17 -= 16;
        *v15 = 0;
        *((_QWORD *)v17 + 1) = v15[1];
        v15[1] = 0;
      }
      while (v15 != v16);
      v19 = v74;
      v12 = (char *)v80.i64[1];
      v14 = (char *)v81;
    }
    v74.i64[0] = (uint64_t)v17;
    v74.i64[1] = (uint64_t)v12;
    v80 = v19;
    v20 = v75[0];
    v75[0] = v14;
    v81 = v20;
    keys = (void **)v19.i64[0];
    std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&keys);
  }
  v71 = a3;
  v72 = a5;
  v73 = a6;
  v23 = *a4;
  v22 = a4 + 1;
  v21 = v23;
  if (v23 == (const UInt8 *)v22)
  {
    v24 = (CFStringRef *)v74.i64[1];
  }
  else
  {
    v24 = (CFStringRef *)v74.i64[1];
    do
    {
      if ((unint64_t)v24 >= v75[0])
      {
        v25 = ((uint64_t)v24 - v74.i64[0]) >> 4;
        if ((unint64_t)(v25 + 1) >> 60)
          std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
        v26 = (v75[0] - v74.i64[0]) >> 3;
        if (v26 <= v25 + 1)
          v26 = v25 + 1;
        if (v75[0] - v74.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
          v27 = 0xFFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        v82 = v75;
        if (v27)
          v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<applesauce::CF::TypeRefPair>>(v27);
        else
          v28 = 0;
        keys = (void **)v27;
        v80.i64[0] = v27 + 16 * v25;
        v80.i64[1] = v80.i64[0];
        v81 = v27 + 16 * v28;
        applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::string const&>((CFStringRef *)v80.i64[0], v21 + 32, (uint64_t)(v21 + 56));
        v29 = v80.i64[0];
        v24 = (CFStringRef *)(v80.i64[1] + 16);
        v80.i64[1] += 16;
        v30 = (_QWORD *)v74.i64[1];
        v31 = (_QWORD *)v74.i64[0];
        if (v74.i64[1] == v74.i64[0])
        {
          v33 = vdupq_n_s64(v74.u64[1]);
        }
        else
        {
          do
          {
            v32 = *(v30 - 2);
            v30 -= 2;
            *(_QWORD *)(v29 - 16) = v32;
            v29 -= 16;
            *v30 = 0;
            *(_QWORD *)(v29 + 8) = v30[1];
            v30[1] = 0;
          }
          while (v30 != v31);
          v33 = v74;
          v24 = (CFStringRef *)v80.i64[1];
        }
        v74.i64[0] = v29;
        v74.i64[1] = (uint64_t)v24;
        v80 = v33;
        v34 = v75[0];
        v75[0] = v81;
        v81 = v34;
        keys = (void **)v33.i64[0];
        std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&keys);
      }
      else
      {
        applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::string const&>(v24, v21 + 32, (uint64_t)(v21 + 56));
        v24 += 2;
      }
      v74.i64[1] = (uint64_t)v24;
      v35 = (UInt8 *)*((_QWORD *)v21 + 1);
      if (v35)
      {
        do
        {
          v36 = (const UInt8 **)v35;
          v35 = *(UInt8 **)v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (const UInt8 **)*((_QWORD *)v21 + 2);
          v37 = *v36 == v21;
          v21 = (const UInt8 *)v36;
        }
        while (!v37);
      }
      v21 = (const UInt8 *)v36;
    }
    while (v36 != v22);
  }
  v38 = ((uint64_t)v24 - v74.i64[0]) >> 4;
  keys = 0;
  v80 = 0uLL;
  std::vector<void const*>::reserve((void **)&keys, v38);
  values = 0;
  v77 = 0;
  v78 = 0;
  std::vector<void const*>::reserve((void **)&values, v38);
  v40 = (void **)v74.i64[1];
  for (i = (void **)v74.i64[0]; i != v40; i += 2)
  {
    v41 = *i;
    if (!*i || !i[1])
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x219A00AF0](exception, "Could not construct");
    }
    v42 = (void **)v80.i64[0];
    if (v80.i64[0] >= (unint64_t)v80.i64[1])
    {
      v44 = keys;
      v45 = (v80.i64[0] - (uint64_t)keys) >> 3;
      v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 61)
        std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
      v47 = v80.i64[1] - (_QWORD)keys;
      if ((v80.i64[1] - (uint64_t)keys) >> 2 > v46)
        v46 = v47 >> 2;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
        v48 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (v48)
        v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v48);
      else
        v49 = 0;
      v50 = (void **)(v48 + 8 * v45);
      *v50 = v41;
      v43 = v50 + 1;
      if (v42 != v44)
      {
        do
        {
          v51 = *--v42;
          *--v50 = v51;
        }
        while (v42 != v44);
        v42 = keys;
      }
      keys = v50;
      v80.i64[1] = v48 + 8 * v49;
      if (v42)
        operator delete(v42);
    }
    else
    {
      *(_QWORD *)v80.i64[0] = v41;
      v43 = v42 + 1;
    }
    v80.i64[0] = (uint64_t)v43;
    v52 = i[1];
    v53 = v77;
    if ((unint64_t)v77 >= v78)
    {
      v55 = values;
      v56 = v77 - values;
      v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 61)
        std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
      v58 = v78 - (_QWORD)values;
      if ((uint64_t)(v78 - (_QWORD)values) >> 2 > v57)
        v57 = v58 >> 2;
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
        v59 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v59 = v57;
      if (v59)
        v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v59);
      else
        v60 = 0;
      v61 = (void **)(v59 + 8 * v56);
      *v61 = v52;
      v54 = v61 + 1;
      if (v53 != v55)
      {
        do
        {
          v62 = *--v53;
          *--v61 = v62;
        }
        while (v53 != v55);
        v53 = values;
      }
      values = v61;
      v78 = v59 + 8 * v60;
      if (v53)
        operator delete(v53);
    }
    else
    {
      *v77 = v52;
      v54 = v53 + 1;
    }
    v77 = v54;
  }
  v63 = keys;
  v64 = values;
  v65 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v38, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!v65)
  {
    v70 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x219A00AF0](v70, "Could not construct");
  }
  if (v64)
    operator delete(v64);
  if (v63)
    operator delete(v63);
  keys = (void **)&v74;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&keys);
  if (v71)
  {
    v66 = v71;
    do
    {
      v68 = *a2++;
      v67 = v68;
      if (v68)
      {
        if (AudioStatisticsLibraryLoader(void)::once != -1)
          dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_174);
        if (AudioStatisticsLibraryLoader(void)::libSym)
          AudioStatisticsLibraryLoader(void)::libSym(v67, v65, v72, v73);
      }
      --v66;
    }
    while (v66);
  }
  else
  {
    if (AudioStatisticsLibraryLoader(void)::once != -1)
      dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_174);
    if (AudioStatisticsLibraryLoader(void)::libSym)
      AudioStatisticsLibraryLoader(void)::libSym(v65, v72, v73);
  }
  CFRelease(v65);
}

void sub_216D089BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18)
{
  __clang_call_terminate(a1);
}

void rtaid::GetClientUseCaseMap(rtaid *this)
{
  unsigned __int8 v1;

  {
    rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap = 0u;
    *(_OWORD *)&qword_253D97418 = 0u;
    dword_253D97428 = 1065353216;
  }
  if (rtaid::GetClientUseCaseMap(void)::onceToken != -1)
    dispatch_once(&rtaid::GetClientUseCaseMap(void)::onceToken, &__block_literal_global_11);
}

uint64_t CaulkSPIImplementation::Message::perform(CaulkSPIImplementation::Message *this)
{
  uint64_t v2;
  uint64_t result;
  _BYTE __dst[496];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  memcpy(__dst, (char *)this + 56, sizeof(__dst));
  v2 = *((_QWORD *)this + 6);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 48))(v2, __dst);
  atomic_store(0, (unsigned __int8 *)this + 552);
  return result;
}

void std::__function::__func<rtaid::Manager::Manager(std::unique_ptr<AudioIssueDetectorDependencyInjection> &&)::$_0,std::allocator<std::unique_ptr<AudioIssueDetectorDependencyInjection> &&>,void ()(rtaid::IssueDictionary const&)>::operator()(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[2];

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  v7[0] = *(_QWORD *)(a1 + 16);
  v7[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  rtaid::HandleAudioIssue(a2, v7, *(float *)(a1 + 8));
  if (v2)
  {
    v5 = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_216D08BF8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void rtaid::HandleAudioIssue(uint64_t a1, _QWORD *a2, float a3)
{
  uint64_t v3;
  _QWORD **v4;
  __objc2_class **p_superclass;
  float v6;
  unsigned __int8 v7;
  const std::string *v8;
  std::string *v9;
  unsigned __int8 v10;
  unsigned int v11;
  uint64_t v12;
  std::string *v13;
  const std::string::value_type *v14;
  std::string::pointer data;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type size;
  unint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t **v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  _QWORD **v34;
  float v35;
  unsigned __int16 *v36;
  int v37;
  uint64_t **v38;
  char *v39;
  uint64_t **v40;
  char *v41;
  _QWORD *v42;
  unint64_t v43;
  float *v44;
  uint64_t v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  std::string::size_type v50;
  _QWORD *v51;
  uint64_t **v52;
  char *v53;
  unsigned __int8 v54;
  uint64_t v55;
  int v56;
  const char *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint32_t v60;
  _QWORD *v61;
  uint64_t **v62;
  char *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  unsigned __int8 v70;
  uint64_t v71;
  std::string *v72;
  std::string *v73;
  uint64_t v74;
  uint64_t **v75;
  uint64_t **v76;
  void **v77;
  uint64_t **v78;
  uint64_t **v79;
  void **v80;
  uint64_t **v81;
  void **v82;
  uint64_t **v83;
  void **v84;
  uint64_t **v85;
  void **v86;
  uint64_t **v87;
  void **v88;
  uint64_t **v89;
  void **v90;
  uint64_t **v91;
  void **v92;
  uint64_t **v93;
  void **v94;
  uint64_t **v95;
  void **v96;
  void (*v97)(void);
  unsigned __int8 v98;
  std::string *v99;
  std::string *v100;
  uint64_t v101;
  double v102;
  double v103;
  double v104;
  float v105;
  float v106;
  uint64_t **v107;
  uint64_t **v108;
  uint64_t **v109;
  uint64_t **v110;
  uint64_t **v111;
  uint64_t **v112;
  uint64_t **v113;
  uint64_t **v114;
  unsigned __int8 v115;
  uint64_t v116;
  std::string *v117;
  std::string *p_str;
  uint64_t v119;
  int v120;
  int v121;
  const char *v122;
  NSObject *v123;
  uint32_t v124;
  uint64_t **v125;
  uint64_t **v126;
  uint64_t **v127;
  uint64_t **v128;
  std::string *v129;
  __int128 v130;
  std::string *v131;
  __int128 v132;
  std::string *v133;
  std::string::size_type v134;
  std::string *v135;
  __int128 v136;
  std::string *v137;
  __int128 v138;
  std::string *v139;
  std::string::size_type v140;
  std::string *v141;
  __int128 v142;
  std::string *v143;
  __int128 v144;
  std::string *v145;
  std::string::size_type v146;
  std::string *v147;
  __int128 v148;
  std::string *v149;
  std::string::size_type v150;
  char v151;
  uint64_t **v152;
  uint64_t **v153;
  uint64_t *v154;
  int v155;
  unsigned __int8 v156;
  uint64_t v157;
  std::string *v158;
  std::string *v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  uint64_t v166;
  std::string *v167;
  std::string *v168;
  uint64_t v169;
  int v170;
  int v171;
  int v172;
  int v173;
  _QWORD *v174;
  uint64_t **v175;
  char *v176;
  _QWORD *v177;
  float v178;
  float v179;
  uint64_t **v180;
  int64_t v181;
  std::string *v182;
  uint64_t **v183;
  uint64_t *v184;
  uint64_t *v185;
  int v186;
  uint64_t **v187;
  int64_t v188;
  uint64_t v189;
  unsigned __int16 *v190;
  int v191;
  uint64_t **v193;
  uint64_t **v194;
  void **v195;
  uint64_t **v196;
  uint64_t **v197;
  uint64_t **v198;
  uint64_t **v199;
  char *v200;
  int v201;
  int v202;
  uint64_t **v203;
  uint64_t *v204;
  char *v205;
  int v206;
  std::string *v207;
  int64_t v208;
  char *v209;
  char *v210;
  uint64_t **v211;
  uint64_t **v212;
  void **v213;
  uint64_t **v214;
  uint64_t **v215;
  void **v216;
  uint64_t **v217;
  void **v218;
  uint64_t **v219;
  void **v220;
  uint64_t **v221;
  void **v222;
  uint64_t **v223;
  void **v224;
  uint64_t **v225;
  void **v226;
  uint64_t **v227;
  void **v228;
  uint64_t **v229;
  void **v230;
  uint64_t **v231;
  void **v232;
  uint64_t **v233;
  uint64_t **v234;
  uint64_t **v235;
  uint64_t **v236;
  uint64_t **v237;
  uint64_t **v238;
  uint64_t **v239;
  uint64_t **v240;
  uint64_t **v241;
  uint64_t **v242;
  uint64_t **v243;
  uint64_t **v244;
  uint64_t **v245;
  uint64_t **v246;
  unsigned __int8 v247;
  uint64_t v248;
  std::string *v249;
  std::string *v250;
  uint64_t v251;
  uint64_t **v252;
  uint64_t **v253;
  void **v254;
  uint64_t **v255;
  uint64_t **v256;
  uint64_t **v257;
  uint64_t **v258;
  uint64_t *v259;
  uint64_t **v260;
  uint64_t **v261;
  void **v262;
  uint64_t **v263;
  uint64_t **v264;
  uint64_t **v265;
  uint64_t **v266;
  char *v267;
  uint64_t **v268;
  uint64_t **v269;
  void **v270;
  uint64_t **v271;
  uint64_t **v272;
  uint64_t **v273;
  uint64_t **v274;
  uint64_t *v275;
  int v276;
  int v277;
  void (*v278)(void);
  unsigned __int8 v279;
  NSObject *v280;
  std::string *v281;
  std::string *v282;
  uint64_t v283;
  std::string *p_p;
  std::string *v285;
  const char *v286;
  uint64_t **v287;
  uint64_t **v288;
  uint64_t **v289;
  uint64_t **v290;
  uint64_t **v291;
  uint64_t **v292;
  unsigned int v293;
  uint64_t **v294;
  char *v295;
  uint64_t **v296;
  uint64_t **v297;
  uint64_t **v298;
  uint64_t **v299;
  uint64_t **v300;
  uint64_t **v301;
  unsigned __int8 v302;
  NSObject *v303;
  std::string *v304;
  std::string *v305;
  uint64_t v306;
  unsigned __int8 v307;
  std::string *v308;
  std::string *v309;
  uint64_t v310;
  std::string *v311;
  std::string *v312;
  void (*v313)(void);
  int v314;
  int v315;
  unsigned __int8 v316;
  std::string *v317;
  std::string *v318;
  uint64_t v319;
  std::string *v320;
  std::string *v321;
  rtaid *v322;
  _QWORD v323[16];
  std::string v324;
  std::string __str;
  void *v326[2];
  char v327;
  std::string v328;
  std::string v329;
  std::string v330;
  std::string v331;
  std::string v332;
  std::string v333;
  std::string v334;
  std::string v335;
  std::string __p;
  std::string v337;
  std::string v338;
  std::string v339;
  _QWORD v340[2];
  _BYTE v341[28];
  __int16 v342;
  std::string *v343;
  __int16 v344;
  uint64_t v345;
  __int16 v346;
  uint64_t v347;
  __int16 v348;
  _BYTE v349[10];
  double v350;
  _BYTE v351[20];
  __int16 v352;
  double v353;
  uint64_t v354;

  v354 = *MEMORY[0x24BDAC8D0];
  if (*a2)
  {
    v6 = a3;
    v4 = (_QWORD **)a2;
    v3 = a1;
    std::string::basic_string[abi:ne180100]<0>(&__str, "Unknown");
    p_superclass = ADAMSpeechAnalysisWriter.superclass;
    if ((v7 & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    _os_assert_log();
    _os_crash();
    __break(1u);
  }
  if ((_DWORD)v322)
  {
    rtaid::GetClientIDMap(v322);
    p_superclass[123] = (__objc2_class *)&rtaid::GetClientIDMap(void)::gClientIDMap;
  }
LABEL_3:
  v8 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(p_superclass[123], *(_DWORD *)(v3 + 256));
  if (v8)
    std::string::operator=(&__str, v8 + 1);
  v9 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v324, "Generic");
  if ((v10 & 1) == 0)
  {
    if ((_DWORD)v9)
    {
      rtaid::GetClientUseCaseMap((rtaid *)v9);
      rtaid::HandleAudioIssue(rtaid::IssueDictionary const&,std::shared_ptr<AudioIssueDetectorDependencyInjection>,float)::clientUseCaseMap = (uint64_t)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
    }
  }
  v11 = *(unsigned __int8 *)(v3 + 316);
  if (*(_BYTE *)(v3 + 316))
  {
    v9 = (std::string *)std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::find<AudioServiceType>((_QWORD *)rtaid::HandleAudioIssue(rtaid::IssueDictionary const&,std::shared_ptr<AudioIssueDetectorDependencyInjection>,float)::clientUseCaseMap, *(_WORD *)(v3 + 448));
    if (v9)
    {
      v9 = std::string::operator=(&v324, v9 + 1);
      v11 = *(unsigned __int8 *)(v3 + 316);
    }
    if (v11 >= 2)
    {
      v12 = 225;
      do
      {
        v9 = (std::string *)std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::find<AudioServiceType>((_QWORD *)rtaid::HandleAudioIssue(rtaid::IssueDictionary const&,std::shared_ptr<AudioIssueDetectorDependencyInjection>,float)::clientUseCaseMap, *(_WORD *)(v3 + 2 * v12));
        if (v9)
        {
          data = v9[1].__r_.__value_.__l.__data_;
          v13 = v9 + 1;
          v14 = data;
          v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
          if (v16 >= 0)
            v17 = (const std::string::value_type *)v13;
          else
            v17 = v14;
          if (v16 >= 0)
            size = HIBYTE(v13->__r_.__value_.__r.__words[2]);
          else
            size = v13->__r_.__value_.__l.__size_;
          v9 = std::string::append(&v324, v17, size);
          v11 = *(unsigned __int8 *)(v3 + 316);
        }
        v19 = v12 - 223;
        ++v12;
      }
      while (v19 < v11);
    }
  }
  if ((v20 & 1) == 0)
  {
    if ((_DWORD)v9)
    {
      rtaid::GetReporterTypeInterestedMap((rtaid *)v9);
    }
  }
  v21 = *(unsigned __int8 *)(v3 + 316);
  if (*(_BYTE *)(v3 + 316))
  {
    v22 = 0;
    v23 = rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap;
    v24 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap
                                         + 8));
    v24.i16[0] = vaddlv_u8(v24);
    v25 = *((_QWORD *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1) + 0xFFFFLL;
    v26 = *((_QWORD *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1) - 1;
    v27 = *(_DWORD *)(v3 + 260);
    v9 = (std::string *)v323;
    do
    {
      v323[v22] = *(_QWORD *)(v3 + 320 + 8 * v22);
      if (*((_QWORD *)&v23 + 1))
      {
        v28 = *(unsigned __int16 *)(v3 + 448 + 2 * v22);
        if (v24.u32[0] > 1uLL)
        {
          v29 = *(unsigned __int16 *)(v3 + 448 + 2 * v22);
          if (*((_QWORD *)&v23 + 1) <= v28)
            v29 = v28 % *((_QWORD *)&v23 + 1);
        }
        else
        {
          v29 = v25 & v28;
        }
        v30 = *(uint64_t ***)(v23 + 8 * v29);
        if (v30)
        {
          while (1)
          {
            v30 = (uint64_t **)*v30;
            if (!v30)
              break;
            v31 = (unint64_t)v30[1];
            if (v31 == v28)
            {
              if (*((unsigned __int16 *)v30 + 8) == (_DWORD)v28)
              {
                v33 = v30[3];
                v32 = v30[4];
                if (v33 != v32)
                {
                  while (*(_DWORD *)v33 != v27)
                  {
                    v33 = (uint64_t *)((char *)v33 + 4);
                    if (v33 == v32)
                    {
                      v33 = v30[4];
                      break;
                    }
                  }
                }
                if (v33 == v32)
                  v323[v22] = 0;
                break;
              }
            }
            else
            {
              if (v24.u32[0] > 1uLL)
              {
                if (v31 >= *((_QWORD *)&v23 + 1))
                  v31 %= *((_QWORD *)&v23 + 1);
              }
              else
              {
                v31 &= v26;
              }
              if (v31 != v29)
                break;
            }
          }
        }
      }
      ++v22;
    }
    while (v22 != v21);
  }
  else
  {
    v27 = *(_DWORD *)(v3 + 260);
  }
  switch(v27)
  {
    case 0:
      v51 = *v4;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]<0>(v341, "issue_type");
      v52 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, v341, (uint64_t)v341);
      if (*((char *)v52 + 79) < 0)
      {
        v52[8] = (uint64_t *)9;
        v53 = (char *)v52[7];
      }
      else
      {
        v53 = (char *)(v52 + 7);
        *((_BYTE *)v52 + 79) = 9;
      }
      strcpy(v53, "NonFinite");
      if ((v341[23] & 0x80000000) != 0)
        operator delete(*(void **)v341);
      std::string::basic_string[abi:ne180100]<0>(v341, "rtaid_client");
      v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, v341, (uint64_t)v341);
      std::string::operator=((std::string *)(v107 + 7), &__str);
      if ((v341[23] & 0x80000000) != 0)
        operator delete(*(void **)v341);
      std::to_string((std::string *)v341, *(double *)(v3 + 488));
      std::string::basic_string[abi:ne180100]<0>(&v339, "issue_detected_sample_time");
      v108 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v339, (uint64_t)&v339);
      v109 = v108 + 7;
      if (*((char *)v108 + 79) < 0)
        operator delete(*v109);
      *(_OWORD *)v109 = *(_OWORD *)v341;
      v109[2] = *(uint64_t **)&v341[16];
      v341[23] = 0;
      v341[0] = 0;
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v339.__r_.__value_.__l.__data_);
        if ((v341[23] & 0x80000000) != 0)
          operator delete(*(void **)v341);
      }
      std::string::basic_string[abi:ne180100]<0>(v341, "node");
      v110 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, v341, (uint64_t)v341);
      std::string::__assign_external((std::string *)(v110 + 7), (const std::string::value_type *)v3);
      if ((v341[23] & 0x80000000) != 0)
        operator delete(*(void **)v341);
      std::to_string((std::string *)v341, *(_DWORD *)(v3 + 268));
      std::string::basic_string[abi:ne180100]<0>(&v339, "nan_frames");
      v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v339, (uint64_t)&v339);
      v112 = v111 + 7;
      if (*((char *)v111 + 79) < 0)
        operator delete(*v112);
      *(_OWORD *)v112 = *(_OWORD *)v341;
      v112[2] = *(uint64_t **)&v341[16];
      v341[23] = 0;
      v341[0] = 0;
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v339.__r_.__value_.__l.__data_);
        if ((v341[23] & 0x80000000) != 0)
          operator delete(*(void **)v341);
      }
      std::to_string((std::string *)v341, *(_DWORD *)(v3 + 272));
      std::string::basic_string[abi:ne180100]<0>(&v339, "inf_frames");
      v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v339, (uint64_t)&v339);
      v114 = v113 + 7;
      if (*((char *)v113 + 79) < 0)
        operator delete(*v114);
      *(_OWORD *)v114 = *(_OWORD *)v341;
      v114[2] = *(uint64_t **)&v341[16];
      v341[23] = 0;
      v341[0] = 0;
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v339.__r_.__value_.__l.__data_);
        if ((v341[23] & 0x80000000) != 0)
          operator delete(*(void **)v341);
      }
      (*(void (**)(_QWORD, _QWORD *, _QWORD, std::string *, uint64_t, uint64_t))(*(_QWORD *)*v51 + 24))(*v51, v323, *(unsigned __int8 *)(v3 + 316), &__p, 11, 7);
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      v116 = rtaid::get_log(void)::rtaid_os_log;
      if (!os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
        goto LABEL_438;
      v117 = &v324;
      if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v117 = (std::string *)v324.__r_.__value_.__r.__words[0];
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      v119 = *(_QWORD *)(v3 + 488);
      v120 = *(_DWORD *)(v3 + 268);
      v121 = *(_DWORD *)(v3 + 272);
      *(_DWORD *)v341 = 136316930;
      *(_QWORD *)&v341[4] = "IssueReporting.cpp";
      *(_WORD *)&v341[12] = 1024;
      *(_DWORD *)&v341[14] = 239;
      *(_WORD *)&v341[18] = 2080;
      *(_QWORD *)&v341[20] = v117;
      v342 = 2080;
      v343 = p_str;
      v344 = 2080;
      v345 = v3;
      v346 = 2048;
      v347 = v119;
      v348 = 1024;
      *(_DWORD *)v349 = v120;
      *(_WORD *)&v349[4] = 1024;
      *(_DWORD *)&v349[6] = v121;
      v122 = "%s:%-5d RTAID [ use_case=%s issue_type=NonFinites clientID=%s node=%s issue_detected_sample_time=%f ] -- [ "
             "nan_frames=%d inf_frames=%d ]";
      v123 = v116;
      v124 = 70;
      goto LABEL_437;
    case 1:
    case 2:
      v34 = (_QWORD **)*v4;
      v35 = *(float *)(v3 + 284);
      if (!(_DWORD)v21)
        goto LABEL_56;
      v36 = (unsigned __int16 *)(v3 + 448);
      do
      {
        v37 = *v36++;
        if (v37 != 13)
        {
LABEL_56:
          *(_OWORD *)&v341[8] = 0uLL;
          *(_QWORD *)v341 = &v341[8];
          std::string::basic_string[abi:ne180100]<0>(&__p, "issue_type");
          v40 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &__p, (uint64_t)&__p);
          if (*((char *)v40 + 79) < 0)
          {
            v40[8] = (uint64_t *)7;
            v41 = (char *)v40[7];
          }
          else
          {
            v41 = (char *)(v40 + 7);
            *((_BYTE *)v40 + 79) = 7;
          }
          strcpy(v41, "Silence");
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&__p, "rtaid_client");
          v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &__p, (uint64_t)&__p);
          std::string::operator=((std::string *)(v75 + 7), &__str);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          std::to_string(&__p, *(double *)(v3 + 488));
          std::string::basic_string[abi:ne180100]<0>(&v339, "issue_detected_sample_time");
          v76 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
          v77 = (void **)(v76 + 7);
          if (*((char *)v76 + 79) < 0)
            operator delete(*v77);
          *(std::string *)v77 = __p;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v339.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "node");
          v78 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &__p, (uint64_t)&__p);
          std::string::__assign_external((std::string *)(v78 + 7), (const std::string::value_type *)v3);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          std::to_string(&__p, *(_DWORD *)(v3 + 268));
          std::string::basic_string[abi:ne180100]<0>(&v339, "all_channel_silence_samples");
          v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
          v80 = (void **)(v79 + 7);
          if (*((char *)v79 + 79) < 0)
            operator delete(*v80);
          *(std::string *)v80 = __p;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v339.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::to_string(&__p, *(_DWORD *)(v3 + 272));
          std::string::basic_string[abi:ne180100]<0>(&v339, "any_channel_silence_samples");
          v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
          v82 = (void **)(v81 + 7);
          if (*((char *)v81 + 79) < 0)
            operator delete(*v82);
          *(std::string *)v82 = __p;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v339.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::to_string(&__p, *(_DWORD *)(v3 + 276));
          std::string::basic_string[abi:ne180100]<0>(&v339, "leading_silence_samples");
          v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
          v84 = (void **)(v83 + 7);
          if (*((char *)v83 + 79) < 0)
            operator delete(*v84);
          *(std::string *)v84 = __p;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v339.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::to_string(&__p, *(_DWORD *)(v3 + 280));
          std::string::basic_string[abi:ne180100]<0>(&v339, "mid_stream_silence_samples");
          v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
          v86 = (void **)(v85 + 7);
          if (*((char *)v85 + 79) < 0)
            operator delete(*v86);
          *(std::string *)v86 = __p;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v339.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::to_string(&__p, (float)*(unsigned int *)(v3 + 268) / v35);
          std::string::basic_string[abi:ne180100]<0>(&v339, "all_channel_silence_seconds");
          v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
          v88 = (void **)(v87 + 7);
          if (*((char *)v87 + 79) < 0)
            operator delete(*v88);
          *(std::string *)v88 = __p;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v339.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::to_string(&__p, (float)*(unsigned int *)(v3 + 272) / v35);
          std::string::basic_string[abi:ne180100]<0>(&v339, "any_channel_silence_seconds");
          v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
          v90 = (void **)(v89 + 7);
          if (*((char *)v89 + 79) < 0)
            operator delete(*v90);
          *(std::string *)v90 = __p;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v339.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::to_string(&__p, (float)*(unsigned int *)(v3 + 276) / v35);
          std::string::basic_string[abi:ne180100]<0>(&v339, "leading_silence_seconds");
          v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
          v92 = (void **)(v91 + 7);
          if (*((char *)v91 + 79) < 0)
            operator delete(*v92);
          *(std::string *)v92 = __p;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v339.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::to_string(&__p, (float)*(unsigned int *)(v3 + 280) / v35);
          std::string::basic_string[abi:ne180100]<0>(&v339, "mid_stream_silence_seconds");
          v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
          v94 = (void **)(v93 + 7);
          if (*((char *)v93 + 79) < 0)
            operator delete(*v94);
          *(std::string *)v94 = __p;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v339.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::to_string(&__p, *(float *)(v3 + 288));
          std::string::basic_string[abi:ne180100]<0>(&v339, "mid_stream_silence_sample_time");
          v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
          v96 = (void **)(v95 + 7);
          if (*((char *)v95 + 79) < 0)
            operator delete(*v96);
          *(std::string *)v96 = __p;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v339.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          v97 = *(void (**)(void))(**v34 + 24);
          goto LABEL_167;
        }
        --v21;
      }
      while (v21);
      if (!(*(unsigned int (**)(_QWORD *))(*v34[3] + 16))(v34[3]))
        goto LABEL_168;
      *(_OWORD *)&v341[8] = 0uLL;
      *(_QWORD *)v341 = &v341[8];
      std::string::basic_string[abi:ne180100]<0>(&__p, "issue_type");
      v38 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &__p, (uint64_t)&__p);
      if (*((char *)v38 + 79) < 0)
      {
        v38[8] = (uint64_t *)7;
        v39 = (char *)v38[7];
      }
      else
      {
        v39 = (char *)(v38 + 7);
        *((_BYTE *)v38 + 79) = 7;
      }
      strcpy(v39, "Silence");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&__p, "rtaid_client");
      v211 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &__p, (uint64_t)&__p);
      std::string::operator=((std::string *)(v211 + 7), &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::to_string(&__p, *(double *)(v3 + 488));
      std::string::basic_string[abi:ne180100]<0>(&v339, "issue_detected_sample_time");
      v212 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      v213 = (void **)(v212 + 7);
      if (*((char *)v212 + 79) < 0)
        operator delete(*v213);
      *(std::string *)v213 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v339.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "node");
      v214 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &__p, (uint64_t)&__p);
      std::string::__assign_external((std::string *)(v214 + 7), (const std::string::value_type *)v3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::to_string(&__p, *(_DWORD *)(v3 + 268));
      std::string::basic_string[abi:ne180100]<0>(&v339, "all_channel_silence_samples");
      v215 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      v216 = (void **)(v215 + 7);
      if (*((char *)v215 + 79) < 0)
        operator delete(*v216);
      *(std::string *)v216 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v339.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::to_string(&__p, *(_DWORD *)(v3 + 272));
      std::string::basic_string[abi:ne180100]<0>(&v339, "any_channel_silence_samples");
      v217 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      v218 = (void **)(v217 + 7);
      if (*((char *)v217 + 79) < 0)
        operator delete(*v218);
      *(std::string *)v218 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v339.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::to_string(&__p, *(_DWORD *)(v3 + 276));
      std::string::basic_string[abi:ne180100]<0>(&v339, "leading_silence_samples");
      v219 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      v220 = (void **)(v219 + 7);
      if (*((char *)v219 + 79) < 0)
        operator delete(*v220);
      *(std::string *)v220 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v339.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::to_string(&__p, *(_DWORD *)(v3 + 280));
      std::string::basic_string[abi:ne180100]<0>(&v339, "mid_stream_silence_samples");
      v221 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      v222 = (void **)(v221 + 7);
      if (*((char *)v221 + 79) < 0)
        operator delete(*v222);
      *(std::string *)v222 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v339.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::to_string(&__p, (float)*(unsigned int *)(v3 + 268) / v35);
      std::string::basic_string[abi:ne180100]<0>(&v339, "all_channel_silence_seconds");
      v223 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      v224 = (void **)(v223 + 7);
      if (*((char *)v223 + 79) < 0)
        operator delete(*v224);
      *(std::string *)v224 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v339.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::to_string(&__p, (float)*(unsigned int *)(v3 + 272) / v35);
      std::string::basic_string[abi:ne180100]<0>(&v339, "any_channel_silence_seconds");
      v225 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      v226 = (void **)(v225 + 7);
      if (*((char *)v225 + 79) < 0)
        operator delete(*v226);
      *(std::string *)v226 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v339.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::to_string(&__p, (float)*(unsigned int *)(v3 + 276) / v35);
      std::string::basic_string[abi:ne180100]<0>(&v339, "leading_silence_seconds");
      v227 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      v228 = (void **)(v227 + 7);
      if (*((char *)v227 + 79) < 0)
        operator delete(*v228);
      *(std::string *)v228 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v339.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::to_string(&__p, (float)*(unsigned int *)(v3 + 280) / v35);
      std::string::basic_string[abi:ne180100]<0>(&v339, "mid_stream_silence_seconds");
      v229 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      v230 = (void **)(v229 + 7);
      if (*((char *)v229 + 79) < 0)
        operator delete(*v230);
      *(std::string *)v230 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v339.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::to_string(&__p, *(float *)(v3 + 288));
      std::string::basic_string[abi:ne180100]<0>(&v339, "mid_stream_silence_sample_time");
      v231 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      v232 = (void **)(v231 + 7);
      if (*((char *)v231 + 79) < 0)
        operator delete(*v232);
      *(std::string *)v232 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v339.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v97 = *(void (**)(void))(**v34 + 24);
LABEL_167:
      v97();
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)&v341[8]);
LABEL_168:
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      v71 = rtaid::get_log(void)::rtaid_os_log;
      if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
      {
        v99 = &v324;
        if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v99 = (std::string *)v324.__r_.__value_.__r.__words[0];
        v100 = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v100 = (std::string *)__str.__r_.__value_.__r.__words[0];
        v101 = *(_QWORD *)(v3 + 488);
        v102 = (float)((float)*(unsigned int *)(v3 + 268) / v35);
        v103 = (float)((float)*(unsigned int *)(v3 + 272) / v35);
        v104 = (float)((float)*(unsigned int *)(v3 + 276) / v35);
        v105 = (float)*(unsigned int *)(v3 + 280);
        *(_DWORD *)v341 = 136317698;
        v106 = *(float *)(v3 + 288);
        *(_QWORD *)&v341[4] = "IssueReporting.cpp";
        *(_WORD *)&v341[12] = 1024;
        *(_DWORD *)&v341[14] = 296;
        *(_WORD *)&v341[18] = 2080;
        *(_QWORD *)&v341[20] = v99;
        v342 = 2080;
        v343 = v100;
        v344 = 2080;
        v345 = v3;
        v346 = 2048;
        v347 = v101;
        v348 = 2048;
        *(double *)v349 = v102;
        *(_WORD *)&v349[8] = 2048;
        v350 = v103;
        *(_WORD *)v351 = 2048;
        *(double *)&v351[2] = v104;
        *(_WORD *)&v351[10] = 2048;
        *(double *)&v351[12] = (float)(v105 / v35);
        v352 = 2048;
        v353 = v106;
        v57 = "%s:%-5d RTAID [ use_case=%s issue_type=Silence clientID=%s node=%s issue_detected_sample_time=%f ] -- [ al"
              "l_channel_silence_seconds=%f any_channel_silence_seconds=%f leading_silence_seconds=%f mid_stream_silence_"
              "seconds=%f mid_stream_silence_sampleTime=%f ]";
LABEL_175:
        v58 = v71;
        v59 = OS_LOG_TYPE_DEFAULT;
        v60 = 108;
LABEL_176:
        _os_log_impl(&dword_216CFB000, v58, v59, v57, v341, v60);
      }
      goto LABEL_600;
    case 4:
      v61 = *v4;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]<0>(v341, "issue_type");
      v62 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, v341, (uint64_t)v341);
      if (*((char *)v62 + 79) < 0)
      {
        v62[8] = (uint64_t *)7;
        v63 = (char *)v62[7];
      }
      else
      {
        v63 = (char *)(v62 + 7);
        *((_BYTE *)v62 + 79) = 7;
      }
      strcpy(v63, "RTError");
      if ((v341[23] & 0x80000000) != 0)
        operator delete(*(void **)v341);
      std::string::basic_string[abi:ne180100]<0>(v341, "rtaid_client");
      v125 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, v341, (uint64_t)v341);
      std::string::operator=((std::string *)(v125 + 7), &__str);
      if ((v341[23] & 0x80000000) != 0)
        operator delete(*(void **)v341);
      std::to_string((std::string *)v341, *(double *)(v3 + 488));
      std::string::basic_string[abi:ne180100]<0>(&v339, "issue_detected_sample_time");
      v126 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v339, (uint64_t)&v339);
      v127 = v126 + 7;
      if (*((char *)v126 + 79) < 0)
        operator delete(*v127);
      *(_OWORD *)v127 = *(_OWORD *)v341;
      v127[2] = *(uint64_t **)&v341[16];
      v341[23] = 0;
      v341[0] = 0;
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v339.__r_.__value_.__l.__data_);
        if ((v341[23] & 0x80000000) != 0)
          operator delete(*(void **)v341);
      }
      std::string::basic_string[abi:ne180100]<0>(v341, "node");
      v128 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, v341, (uint64_t)v341);
      std::string::__assign_external((std::string *)(v128 + 7), (const std::string::value_type *)v3);
      if ((v341[23] & 0x80000000) != 0)
        operator delete(*(void **)v341);
      std::to_string(&v331, *(_DWORD *)(v3 + 268));
      v129 = std::string::insert(&v331, 0, " {", 2uLL);
      v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
      v332.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v130;
      v129->__r_.__value_.__l.__size_ = 0;
      v129->__r_.__value_.__r.__words[2] = 0;
      v129->__r_.__value_.__r.__words[0] = 0;
      v131 = std::string::append(&v332, ", ", 2uLL);
      v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
      v333.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v333.__r_.__value_.__l.__data_ = v132;
      v131->__r_.__value_.__l.__size_ = 0;
      v131->__r_.__value_.__r.__words[2] = 0;
      v131->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v330, *(_DWORD *)(v3 + 272));
      if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v133 = &v330;
      else
        v133 = (std::string *)v330.__r_.__value_.__r.__words[0];
      if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v134 = HIBYTE(v330.__r_.__value_.__r.__words[2]);
      else
        v134 = v330.__r_.__value_.__l.__size_;
      v135 = std::string::append(&v333, (const std::string::value_type *)v133, v134);
      v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
      v334.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v334.__r_.__value_.__l.__data_ = v136;
      v135->__r_.__value_.__l.__size_ = 0;
      v135->__r_.__value_.__r.__words[2] = 0;
      v135->__r_.__value_.__r.__words[0] = 0;
      v137 = std::string::append(&v334, ", ", 2uLL);
      v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
      v335.__r_.__value_.__r.__words[2] = v137->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v335.__r_.__value_.__l.__data_ = v138;
      v137->__r_.__value_.__l.__size_ = 0;
      v137->__r_.__value_.__r.__words[2] = 0;
      v137->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v329, *(_DWORD *)(v3 + 276));
      if ((v329.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v139 = &v329;
      else
        v139 = (std::string *)v329.__r_.__value_.__r.__words[0];
      if ((v329.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v140 = HIBYTE(v329.__r_.__value_.__r.__words[2]);
      else
        v140 = v329.__r_.__value_.__l.__size_;
      v141 = std::string::append(&v335, (const std::string::value_type *)v139, v140);
      v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
      v338.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v338.__r_.__value_.__l.__data_ = v142;
      v141->__r_.__value_.__l.__size_ = 0;
      v141->__r_.__value_.__r.__words[2] = 0;
      v141->__r_.__value_.__r.__words[0] = 0;
      v143 = std::string::append(&v338, ", ", 2uLL);
      v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
      v339.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v339.__r_.__value_.__l.__data_ = v144;
      v143->__r_.__value_.__l.__size_ = 0;
      v143->__r_.__value_.__r.__words[2] = 0;
      v143->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v328, *(_DWORD *)(v3 + 280));
      if ((v328.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v145 = &v328;
      else
        v145 = (std::string *)v328.__r_.__value_.__r.__words[0];
      if ((v328.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v146 = HIBYTE(v328.__r_.__value_.__r.__words[2]);
      else
        v146 = v328.__r_.__value_.__l.__size_;
      v147 = std::string::append(&v339, (const std::string::value_type *)v145, v146);
      v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
      *(_QWORD *)&v341[16] = *((_QWORD *)&v147->__r_.__value_.__l + 2);
      *(_OWORD *)v341 = v148;
      v147->__r_.__value_.__l.__size_ = 0;
      v147->__r_.__value_.__r.__words[2] = 0;
      v147->__r_.__value_.__r.__words[0] = 0;
      v149 = std::string::append((std::string *)v341, "}", 1uLL);
      v150 = v149->__r_.__value_.__r.__words[0];
      v340[0] = v149->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v340 + 7) = *(std::string::size_type *)((char *)&v149->__r_.__value_.__r.__words[1] + 7);
      v151 = HIBYTE(v149->__r_.__value_.__r.__words[2]);
      v149->__r_.__value_.__l.__size_ = 0;
      v149->__r_.__value_.__r.__words[2] = 0;
      v149->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v326, "rt_errors");
      v152 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, v326, (uint64_t)v326);
      v153 = v152;
      if (*((char *)v152 + 79) < 0)
        operator delete(v152[7]);
      v154 = (uint64_t *)v340[0];
      v153[7] = (uint64_t *)v150;
      v153[8] = v154;
      *(uint64_t **)((char *)v153 + 71) = *(uint64_t **)((char *)v340 + 7);
      *((_BYTE *)v153 + 79) = v151;
      if (v327 < 0)
        operator delete(v326[0]);
      if ((v341[23] & 0x80000000) != 0)
        operator delete(*(void **)v341);
      if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v328.__r_.__value_.__l.__data_);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v338.__r_.__value_.__l.__data_);
      if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v329.__r_.__value_.__l.__data_);
      if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v335.__r_.__value_.__l.__data_);
      if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v334.__r_.__value_.__l.__data_);
      if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v330.__r_.__value_.__l.__data_);
      if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v333.__r_.__value_.__l.__data_);
      if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v332.__r_.__value_.__l.__data_);
      if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v331.__r_.__value_.__l.__data_);
      (*(void (**)(_QWORD, _QWORD *, _QWORD, std::string *, uint64_t, uint64_t))(*(_QWORD *)*v61 + 24))(*v61, v323, *(unsigned __int8 *)(v3 + 316), &__p, 11, 7);
      v155 = *(_DWORD *)(v3 + 480);
      if (v155)
      {
        {
          rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
        }
        v157 = rtaid::get_log(void)::rtaid_os_log;
        if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
        {
          v158 = &v324;
          if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v158 = (std::string *)v324.__r_.__value_.__r.__words[0];
          v159 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v159 = (std::string *)__str.__r_.__value_.__r.__words[0];
          v160 = *(_QWORD *)(v3 + 488);
          v161 = *(_DWORD *)(v3 + 268);
          v162 = *(_DWORD *)(v3 + 272);
          v163 = *(_DWORD *)(v3 + 276);
          v164 = *(_DWORD *)(v3 + 280);
          v165 = *(_DWORD *)(v3 + 480);
          *(_DWORD *)v341 = 136317954;
          *(_QWORD *)&v341[4] = "IssueReporting.cpp";
          *(_WORD *)&v341[12] = 1024;
          *(_DWORD *)&v341[14] = 320;
          *(_WORD *)&v341[18] = 2080;
          *(_QWORD *)&v341[20] = v158;
          v342 = 2080;
          v343 = v159;
          v344 = 2080;
          v345 = v3;
          v346 = 2048;
          v347 = v160;
          v348 = 1024;
          *(_DWORD *)v349 = v161;
          *(_WORD *)&v349[4] = 1024;
          *(_DWORD *)&v349[6] = v162;
          LOWORD(v350) = 1024;
          *(_DWORD *)((char *)&v350 + 2) = v163;
          HIWORD(v350) = 1024;
          *(_DWORD *)v351 = v164;
          *(_WORD *)&v351[4] = 2080;
          *(_QWORD *)&v351[6] = v3 + 192;
          *(_WORD *)&v351[14] = 1024;
          *(_DWORD *)&v351[16] = v165;
          v122 = "%s:%-5d RTAID [ use_case=%s issue_type=RTError clientID=%s node=%s issue_detected_sample_time=%f ] -- ["
                 " error1=%d error2=%d error3=%d error4=%d ] -- [file name = %s : line number = %d]";
          v123 = v157;
          v124 = 98;
          goto LABEL_437;
        }
      }
      else
      {
        {
          rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
        }
        v166 = rtaid::get_log(void)::rtaid_os_log;
        if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
        {
          v167 = &v324;
          if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v167 = (std::string *)v324.__r_.__value_.__r.__words[0];
          v168 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v168 = (std::string *)__str.__r_.__value_.__r.__words[0];
          v169 = *(_QWORD *)(v3 + 488);
          v170 = *(_DWORD *)(v3 + 268);
          v171 = *(_DWORD *)(v3 + 272);
          v172 = *(_DWORD *)(v3 + 276);
          v173 = *(_DWORD *)(v3 + 280);
          *(_DWORD *)v341 = 136317442;
          *(_QWORD *)&v341[4] = "IssueReporting.cpp";
          *(_WORD *)&v341[12] = 1024;
          *(_DWORD *)&v341[14] = 324;
          *(_WORD *)&v341[18] = 2080;
          *(_QWORD *)&v341[20] = v167;
          v342 = 2080;
          v343 = v168;
          v344 = 2080;
          v345 = v3;
          v346 = 2048;
          v347 = v169;
          v348 = 1024;
          *(_DWORD *)v349 = v170;
          *(_WORD *)&v349[4] = 1024;
          *(_DWORD *)&v349[6] = v171;
          LOWORD(v350) = 1024;
          *(_DWORD *)((char *)&v350 + 2) = v172;
          HIWORD(v350) = 1024;
          *(_DWORD *)v351 = v173;
          v122 = "%s:%-5d RTAID [ use_case=%s issue_type=RTError clientID=%s node=%s issue_detected_sample_time=%f ] -- ["
                 " error1=%d error2=%d error3=%d error4=%d ]";
          v123 = v166;
          v124 = 82;
          goto LABEL_437;
        }
      }
      goto LABEL_438;
    case 5:
      v64 = *(float *)(v3 + 284);
      v65 = *(float *)(v3 + 288);
      v66 = *(float *)(v3 + 292);
      v67 = *(float *)(v3 + 296);
      if (v64 >= (float)(-30.0 - v6) || v64 >= (float)((float)(v65 + -3.0) - v6) || v65 <= -40.0)
      {
        {
          rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
        }
        v71 = rtaid::get_log(void)::rtaid_os_log;
        if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
        {
          v72 = &v324;
          if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v72 = (std::string *)v324.__r_.__value_.__r.__words[0];
          v73 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v73 = (std::string *)__str.__r_.__value_.__r.__words[0];
          v74 = *(_QWORD *)(v3 + 488);
          *(_DWORD *)v341 = 136317698;
          *(_QWORD *)&v341[4] = "IssueReporting.cpp";
          *(_WORD *)&v341[12] = 1024;
          *(_DWORD *)&v341[14] = 361;
          *(_WORD *)&v341[18] = 2080;
          *(_QWORD *)&v341[20] = v72;
          v342 = 2080;
          v343 = v73;
          v344 = 2080;
          v345 = v3;
          v346 = 2048;
          v347 = v74;
          v348 = 2048;
          *(double *)v349 = v65;
          *(_WORD *)&v349[8] = 2048;
          v350 = v67;
          *(_WORD *)v351 = 2048;
          *(double *)&v351[2] = v64;
          *(_WORD *)&v351[10] = 2048;
          *(double *)&v351[12] = v66;
          v352 = 2048;
          v353 = v6;
          v57 = "%s:%-5d RTAID [ use_case=%s issue_type=RMS Telephony Chain clientID=%s node=%s issue_detected_sample_tim"
                "e=%f ] -- [ DLInputRMS=%f DLInputPeak=%f DLOutputRMS=%f DLOutputPeak=%f DLAdjustment=%f ]";
          goto LABEL_175;
        }
      }
      else
      {
        v174 = *v4;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]<0>(v341, "issue_type");
        v175 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, v341, (uint64_t)v341);
        if (*((char *)v175 + 79) < 0)
        {
          v175[8] = (uint64_t *)6;
          v176 = (char *)v175[7];
        }
        else
        {
          v176 = (char *)(v175 + 7);
          *((_BYTE *)v175 + 79) = 6;
        }
        strcpy(v176, "LowRMS");
        if ((v341[23] & 0x80000000) != 0)
          operator delete(*(void **)v341);
        std::string::basic_string[abi:ne180100]<0>(v341, "rtaid_client");
        v233 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, v341, (uint64_t)v341);
        std::string::operator=((std::string *)(v233 + 7), &__str);
        if ((v341[23] & 0x80000000) != 0)
          operator delete(*(void **)v341);
        std::to_string((std::string *)v341, *(double *)(v3 + 488));
        std::string::basic_string[abi:ne180100]<0>(&v339, "issue_detected_sample_time");
        v234 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v339, (uint64_t)&v339);
        v235 = v234 + 7;
        if (*((char *)v234 + 79) < 0)
          operator delete(*v235);
        *(_OWORD *)v235 = *(_OWORD *)v341;
        v235[2] = *(uint64_t **)&v341[16];
        v341[23] = 0;
        v341[0] = 0;
        if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v339.__r_.__value_.__l.__data_);
          if ((v341[23] & 0x80000000) != 0)
            operator delete(*(void **)v341);
        }
        std::string::basic_string[abi:ne180100]<0>(v341, "node");
        v236 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, v341, (uint64_t)v341);
        std::string::__assign_external((std::string *)(v236 + 7), (const std::string::value_type *)v3);
        if ((v341[23] & 0x80000000) != 0)
          operator delete(*(void **)v341);
        std::to_string((std::string *)v341, v65);
        std::string::basic_string[abi:ne180100]<0>(&v339, "dl_input_rms");
        v237 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v339, (uint64_t)&v339);
        v238 = v237 + 7;
        if (*((char *)v237 + 79) < 0)
          operator delete(*v238);
        *(_OWORD *)v238 = *(_OWORD *)v341;
        v238[2] = *(uint64_t **)&v341[16];
        v341[23] = 0;
        v341[0] = 0;
        if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v339.__r_.__value_.__l.__data_);
          if ((v341[23] & 0x80000000) != 0)
            operator delete(*(void **)v341);
        }
        std::to_string((std::string *)v341, v67);
        std::string::basic_string[abi:ne180100]<0>(&v339, "dl_input_peak");
        v239 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v339, (uint64_t)&v339);
        v240 = v239 + 7;
        if (*((char *)v239 + 79) < 0)
          operator delete(*v240);
        *(_OWORD *)v240 = *(_OWORD *)v341;
        v240[2] = *(uint64_t **)&v341[16];
        v341[23] = 0;
        v341[0] = 0;
        if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v339.__r_.__value_.__l.__data_);
          if ((v341[23] & 0x80000000) != 0)
            operator delete(*(void **)v341);
        }
        std::to_string((std::string *)v341, v64);
        std::string::basic_string[abi:ne180100]<0>(&v339, "dl_output_rms");
        v241 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v339, (uint64_t)&v339);
        v242 = v241 + 7;
        if (*((char *)v241 + 79) < 0)
          operator delete(*v242);
        *(_OWORD *)v242 = *(_OWORD *)v341;
        v242[2] = *(uint64_t **)&v341[16];
        v341[23] = 0;
        v341[0] = 0;
        if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v339.__r_.__value_.__l.__data_);
          if ((v341[23] & 0x80000000) != 0)
            operator delete(*(void **)v341);
        }
        std::to_string((std::string *)v341, v66);
        std::string::basic_string[abi:ne180100]<0>(&v339, "dl_output_peak");
        v243 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v339, (uint64_t)&v339);
        v244 = v243 + 7;
        if (*((char *)v243 + 79) < 0)
          operator delete(*v244);
        *(_OWORD *)v244 = *(_OWORD *)v341;
        v244[2] = *(uint64_t **)&v341[16];
        v341[23] = 0;
        v341[0] = 0;
        if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v339.__r_.__value_.__l.__data_);
          if ((v341[23] & 0x80000000) != 0)
            operator delete(*(void **)v341);
        }
        std::to_string((std::string *)v341, v6);
        std::string::basic_string[abi:ne180100]<0>(&v339, "dl_adjustment");
        v245 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v339, (uint64_t)&v339);
        v246 = v245 + 7;
        if (*((char *)v245 + 79) < 0)
          operator delete(*v246);
        *(_OWORD *)v246 = *(_OWORD *)v341;
        v246[2] = *(uint64_t **)&v341[16];
        v341[23] = 0;
        v341[0] = 0;
        if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v339.__r_.__value_.__l.__data_);
          if ((v341[23] & 0x80000000) != 0)
            operator delete(*(void **)v341);
        }
        (*(void (**)(_QWORD, _QWORD *, _QWORD, std::string *, uint64_t, uint64_t))(*(_QWORD *)*v174 + 24))(*v174, v323, *(unsigned __int8 *)(v3 + 316), &__p, 11, 7);
        {
          rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
        }
        v248 = rtaid::get_log(void)::rtaid_os_log;
        if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
        {
          v249 = &v324;
          if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v249 = (std::string *)v324.__r_.__value_.__r.__words[0];
          v250 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v250 = (std::string *)__str.__r_.__value_.__r.__words[0];
          v251 = *(_QWORD *)(v3 + 488);
          *(_DWORD *)v341 = 136317698;
          *(_QWORD *)&v341[4] = "IssueReporting.cpp";
          *(_WORD *)&v341[12] = 1024;
          *(_DWORD *)&v341[14] = 356;
          *(_WORD *)&v341[18] = 2080;
          *(_QWORD *)&v341[20] = v249;
          v342 = 2080;
          v343 = v250;
          v344 = 2080;
          v345 = v3;
          v346 = 2048;
          v347 = v251;
          v348 = 2048;
          *(double *)v349 = v65;
          *(_WORD *)&v349[8] = 2048;
          v350 = v67;
          *(_WORD *)v351 = 2048;
          *(double *)&v351[2] = v64;
          *(_WORD *)&v351[10] = 2048;
          *(double *)&v351[12] = v66;
          v352 = 2048;
          v353 = v6;
          v122 = "%s:%-5d RTAID [ use_case=%s issue_type=RMS Telephony Chain clientID=%s node=%s issue_detected_sample_ti"
                 "me=%f ] -- [ DLInputRMS=%f DLInputPeak=%f DLOutputRMS=%f DLOutputPeak=%f DLAdjustment=%f ]";
          v123 = v248;
          v124 = 108;
LABEL_437:
          _os_log_impl(&dword_216CFB000, v123, OS_LOG_TYPE_DEFAULT, v122, v341, v124);
        }
LABEL_438:
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)__p.__r_.__value_.__l.__size_);
      }
      goto LABEL_600;
    case 6:
      v42 = *v4;
      memset(v341, 0, 24);
      memset(&v339, 0, sizeof(v339));
      if (!*(_DWORD *)(v3 + 276))
        goto LABEL_86;
      v43 = 0;
      v44 = (float *)(v3 + 288);
      do
      {
        v45 = v341[23];
        if (v341[23] < 0)
          v45 = *(_QWORD *)&v341[8];
        if (v45)
          std::string::append((std::string *)v341, ", ", 2uLL);
        v46 = HIBYTE(v339.__r_.__value_.__r.__words[2]);
        if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v46 = v339.__r_.__value_.__l.__size_;
        if (v46)
          std::string::append(&v339, ", ", 2uLL);
        std::to_string(&v338, *(v44 - 1));
        if ((v338.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = &v338;
        else
          v47 = (std::string *)v338.__r_.__value_.__r.__words[0];
        if ((v338.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = HIBYTE(v338.__r_.__value_.__r.__words[2]);
        else
          v48 = v338.__r_.__value_.__l.__size_;
        std::string::append((std::string *)v341, (const std::string::value_type *)v47, v48);
        if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v338.__r_.__value_.__l.__data_);
        std::to_string(&v338, *v44);
        if ((v338.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v49 = &v338;
        else
          v49 = (std::string *)v338.__r_.__value_.__r.__words[0];
        if ((v338.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v50 = HIBYTE(v338.__r_.__value_.__r.__words[2]);
        else
          v50 = v338.__r_.__value_.__l.__size_;
        v9 = std::string::append(&v339, (const std::string::value_type *)v49, v50);
        if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v338.__r_.__value_.__l.__data_);
        ++v43;
        v44 += 2;
      }
      while (v43 < *(unsigned int *)(v3 + 276));
      if ((v341[23] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v341, *(std::string::size_type *)&v341[8]);
      else
LABEL_86:
        __p = *(std::string *)v341;
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v337, v339.__r_.__value_.__l.__data_, v339.__r_.__value_.__l.__size_);
        if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v339.__r_.__value_.__l.__data_);
      }
      else
      {
        v337 = v339;
      }
      if ((v341[23] & 0x80000000) != 0)
        operator delete(*(void **)v341);
      v177 = v42;
      v178 = *(float *)(v3 + 284);
      v179 = *(float *)(v3 + 288);
      rtaid::GetClientUseCaseMap((rtaid *)v9);
      v180 = std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::find<AudioServiceType>(&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap, 4u);
      if (!v180)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v181 = HIBYTE(v324.__r_.__value_.__r.__words[2]);
      if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v182 = &v324;
      else
        v182 = (std::string *)v324.__r_.__value_.__r.__words[0];
      v185 = v180[3];
      v183 = v180 + 3;
      v184 = v185;
      v186 = *((char *)v183 + 23);
      if (v186 >= 0)
        v187 = v183;
      else
        v187 = (uint64_t **)v184;
      if (v186 >= 0)
        v188 = *((unsigned __int8 *)v183 + 23);
      else
        v188 = (int64_t)v183[1];
      if (!v188)
        goto LABEL_456;
      if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v181 = v324.__r_.__value_.__l.__size_;
      if (v181 < v188)
        goto LABEL_300;
      v205 = (char *)v182 + v181;
      v206 = *(char *)v187;
      v207 = v182;
      break;
    default:
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      v55 = rtaid::get_log(void)::rtaid_os_log;
      if (!os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_ERROR))
        goto LABEL_600;
      v56 = *(_DWORD *)(v3 + 260);
      *(_DWORD *)v341 = 136315650;
      *(_QWORD *)&v341[4] = "IssueReporting.cpp";
      *(_WORD *)&v341[12] = 1024;
      *(_DWORD *)&v341[14] = 572;
      *(_WORD *)&v341[18] = 1024;
      *(_DWORD *)&v341[20] = v56;
      v57 = "%s:%-5d Invalid analyzer type: %d";
      v58 = v55;
      v59 = OS_LOG_TYPE_ERROR;
      v60 = 24;
      goto LABEL_176;
  }
  while (1)
  {
    v208 = v181 - v188;
    if (v208 == -1)
      goto LABEL_300;
    v209 = (char *)memchr(v207, v206, v208 + 1);
    if (!v209)
      goto LABEL_300;
    v210 = v209;
    if (!memcmp(v209, v187, v188))
      break;
    v207 = (std::string *)(v210 + 1);
    v181 = v205 - (v210 + 1);
    if (v181 < v188)
      goto LABEL_300;
  }
  if (v210 != v205 && v210 - (char *)v182 != -1)
  {
LABEL_456:
    if (v178 > -55.0 || v178 <= -120.0)
    {
      *(_OWORD *)&v341[8] = 0uLL;
      *(_QWORD *)v341 = &v341[8];
      std::string::basic_string[abi:ne180100]<0>(&v339, "rtaid_client");
      v268 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      std::string::operator=((std::string *)(v268 + 7), &__str);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      std::to_string(&v339, *(double *)(v3 + 488));
      std::string::basic_string[abi:ne180100]<0>(&v338, "issue_detected_sample_time");
      v269 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v338, (uint64_t)&v338);
      v270 = (void **)(v269 + 7);
      if (*((char *)v269 + 79) < 0)
        operator delete(*v270);
      *(std::string *)v270 = v339;
      *((_BYTE *)&v339.__r_.__value_.__s + 23) = 0;
      v339.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v338.__r_.__value_.__l.__data_);
        if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v339.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v339, "node");
      v271 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      std::string::__assign_external((std::string *)(v271 + 7), (const std::string::value_type *)v3);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v339, "alarms_rms");
      v272 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      std::string::operator=((std::string *)(v272 + 7), &__p);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v339, "alarms_peak");
      v273 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      std::string::operator=((std::string *)(v273 + 7), &v337);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v339, "report_type");
      v274 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      if (*((char *)v274 + 79) < 0)
      {
        v274[8] = (uint64_t *)3;
        v275 = v274[7];
      }
      else
      {
        v275 = (uint64_t *)(v274 + 7);
        *((_BYTE *)v274 + 79) = 3;
      }
      *(_DWORD *)v275 = 5459282;
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      v276 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v177[3] + 16))(v177[3]);
      if (*(_DWORD *)(v3 + 256) == 1)
        v277 = 1;
      else
        v277 = v276;
      if (v277 != 1)
        goto LABEL_501;
      v278 = *(void (**)(void))(*(_QWORD *)*v177 + 24);
    }
    else
    {
      *(_OWORD *)&v341[8] = 0uLL;
      *(_QWORD *)v341 = &v341[8];
      std::string::basic_string[abi:ne180100]<0>(&v339, "rtaid_client");
      v260 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      std::string::operator=((std::string *)(v260 + 7), &__str);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      std::to_string(&v339, *(double *)(v3 + 488));
      std::string::basic_string[abi:ne180100]<0>(&v338, "issue_detected_sample_time");
      v261 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v338, (uint64_t)&v338);
      v262 = (void **)(v261 + 7);
      if (*((char *)v261 + 79) < 0)
        operator delete(*v262);
      *(std::string *)v262 = v339;
      *((_BYTE *)&v339.__r_.__value_.__s + 23) = 0;
      v339.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v338.__r_.__value_.__l.__data_);
        if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v339.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v339, "node");
      v263 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      std::string::__assign_external((std::string *)(v263 + 7), (const std::string::value_type *)v3);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v339, "alarms_rms");
      v264 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      std::string::operator=((std::string *)(v264 + 7), &__p);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v339, "alarms_peak");
      v265 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      std::string::operator=((std::string *)(v265 + 7), &v337);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v339, "issue_type");
      v266 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      if (*((char *)v266 + 79) < 0)
      {
        v266[8] = (uint64_t *)6;
        v267 = (char *)v266[7];
      }
      else
      {
        v267 = (char *)(v266 + 7);
        *((_BYTE *)v266 + 79) = 6;
      }
      strcpy(v267, "LowRMS");
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      v278 = *(void (**)(void))(*(_QWORD *)*v177 + 24);
    }
    v278();
LABEL_501:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)&v341[8]);
    {
      rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
    }
    v280 = rtaid::get_log(void)::rtaid_os_log;
    if (!os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
      goto LABEL_596;
    v281 = &v324;
    if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v281 = (std::string *)v324.__r_.__value_.__r.__words[0];
    v282 = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v282 = (std::string *)__str.__r_.__value_.__r.__words[0];
    v283 = *(_QWORD *)(v3 + 488);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v337.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v285 = &v337;
    else
      v285 = (std::string *)v337.__r_.__value_.__r.__words[0];
    *(_DWORD *)v341 = 136316930;
    *(_QWORD *)&v341[4] = "IssueReporting.cpp";
    *(_WORD *)&v341[12] = 1024;
    *(_DWORD *)&v341[14] = 432;
    *(_WORD *)&v341[18] = 2080;
    *(_QWORD *)&v341[20] = v281;
    v342 = 2080;
    v343 = v282;
    v344 = 2080;
    v345 = v3;
    v346 = 2048;
    v347 = v283;
    v348 = 2080;
    *(_QWORD *)v349 = p_p;
    *(_WORD *)&v349[8] = 2080;
    v350 = *(double *)&v285;
    v286 = "%s:%-5d RTAID [ use_case=%s report_type=Alarms RMS Chain clientID=%s node=%s issue_detected_sample_time=%f ] "
           "-- [ rms:[%s], peaks:[%s] ] ";
    goto LABEL_595;
  }
LABEL_300:
  v189 = *(unsigned __int8 *)(v3 + 316);
  if (*(_BYTE *)(v3 + 316))
  {
    v190 = (unsigned __int16 *)(v3 + 448);
    do
    {
      v191 = *v190++;
      if (v191 != 13)
        goto LABEL_323;
      --v189;
    }
    while (v189);
    if (v178 > -70.0 && v179 > -60.0)
    {
      *(_OWORD *)&v341[8] = 0uLL;
      *(_QWORD *)v341 = &v341[8];
      std::string::basic_string[abi:ne180100]<0>(&v339, "rtaid_client");
      v252 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      std::string::operator=((std::string *)(v252 + 7), &__str);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      std::to_string(&v339, *(double *)(v3 + 488));
      std::string::basic_string[abi:ne180100]<0>(&v338, "issue_detected_sample_time");
      v253 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v338, (uint64_t)&v338);
      v254 = (void **)(v253 + 7);
      if (*((char *)v253 + 79) < 0)
        operator delete(*v254);
      *(std::string *)v254 = v339;
      *((_BYTE *)&v339.__r_.__value_.__s + 23) = 0;
      v339.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v338.__r_.__value_.__l.__data_);
        if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v339.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v339, "node");
      v255 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      std::string::__assign_external((std::string *)(v255 + 7), (const std::string::value_type *)v3);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v339, "systemSounds_rms");
      v256 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      std::string::operator=((std::string *)(v256 + 7), &__p);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v339, "systemSounds_peak");
      v257 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      std::string::operator=((std::string *)(v257 + 7), &v337);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v339, "report_type");
      v258 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      if (*((char *)v258 + 79) < 0)
      {
        v258[8] = (uint64_t *)3;
        v259 = v258[7];
      }
      else
      {
        v259 = (uint64_t *)(v258 + 7);
        *((_BYTE *)v258 + 79) = 3;
      }
      *(_DWORD *)v259 = 5459282;
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      v314 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v177[3] + 16))(v177[3]);
      if (*(_DWORD *)(v3 + 256) == 1)
        v315 = 1;
      else
        v315 = v314;
      if (v315 != 1)
      {
LABEL_583:
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)&v341[8]);
        {
          rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
        }
        v280 = rtaid::get_log(void)::rtaid_os_log;
        if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
        {
          v317 = &v324;
          if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v317 = (std::string *)v324.__r_.__value_.__r.__words[0];
          v318 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v318 = (std::string *)__str.__r_.__value_.__r.__words[0];
          v319 = *(_QWORD *)(v3 + 488);
          v320 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v320 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((v337.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v321 = &v337;
          else
            v321 = (std::string *)v337.__r_.__value_.__r.__words[0];
          *(_DWORD *)v341 = 136316930;
          *(_QWORD *)&v341[4] = "IssueReporting.cpp";
          *(_WORD *)&v341[12] = 1024;
          *(_DWORD *)&v341[14] = 462;
          *(_WORD *)&v341[18] = 2080;
          *(_QWORD *)&v341[20] = v317;
          v342 = 2080;
          v343 = v318;
          v344 = 2080;
          v345 = v3;
          v346 = 2048;
          v347 = v319;
          v348 = 2080;
          *(_QWORD *)v349 = v320;
          *(_WORD *)&v349[8] = 2080;
          v350 = *(double *)&v321;
          v286 = "%s:%-5d RTAID [ use_case=%s report_type=System Sounds RMS Chain clientID=%s node=%s issue_detected_samp"
                 "le_time=%f ] -- [ rms:[%s], peaks:[%s] ] ";
          goto LABEL_595;
        }
        goto LABEL_596;
      }
      v313 = *(void (**)(void))(*(_QWORD *)*v177 + 24);
    }
    else
    {
      *(_OWORD *)&v341[8] = 0uLL;
      *(_QWORD *)v341 = &v341[8];
      std::string::basic_string[abi:ne180100]<0>(&v339, "rtaid_client");
      v193 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      std::string::operator=((std::string *)(v193 + 7), &__str);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      std::to_string(&v339, *(double *)(v3 + 488));
      std::string::basic_string[abi:ne180100]<0>(&v338, "issue_detected_sample_time");
      v194 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v338, (uint64_t)&v338);
      v195 = (void **)(v194 + 7);
      if (*((char *)v194 + 79) < 0)
        operator delete(*v195);
      *(std::string *)v195 = v339;
      *((_BYTE *)&v339.__r_.__value_.__s + 23) = 0;
      v339.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v338.__r_.__value_.__l.__data_);
        if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v339.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v339, "node");
      v196 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      std::string::__assign_external((std::string *)(v196 + 7), (const std::string::value_type *)v3);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v339, "systemSounds_rms");
      v197 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      std::string::operator=((std::string *)(v197 + 7), &__p);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v339, "systemSounds_peak");
      v198 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      std::string::operator=((std::string *)(v198 + 7), &v337);
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v339, "issue_type");
      v199 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v341, &v339, (uint64_t)&v339);
      if (*((char *)v199 + 79) < 0)
      {
        v199[8] = (uint64_t *)6;
        v200 = (char *)v199[7];
      }
      else
      {
        v200 = (char *)(v199 + 7);
        *((_BYTE *)v199 + 79) = 6;
      }
      strcpy(v200, "LowRMS");
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      v313 = *(void (**)(void))(*(_QWORD *)*v177 + 24);
    }
    v313();
    goto LABEL_583;
  }
LABEL_323:
  v201 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v177[3] + 16))(v177[3]);
  if (*(_DWORD *)(v3 + 256) == 1)
    v202 = 1;
  else
    v202 = v201;
  if (v202 == 1)
  {
    *(_OWORD *)&v339.__r_.__value_.__r.__words[1] = 0uLL;
    v339.__r_.__value_.__r.__words[0] = (std::string::size_type)&v339.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]<0>(v341, "report_type");
    v203 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v339, v341, (uint64_t)v341);
    if (*((char *)v203 + 79) < 0)
    {
      v203[8] = (uint64_t *)3;
      v204 = v203[7];
    }
    else
    {
      v204 = (uint64_t *)(v203 + 7);
      *((_BYTE *)v203 + 79) = 3;
    }
    *(_DWORD *)v204 = 5459282;
    if ((v341[23] & 0x80000000) != 0)
      operator delete(*(void **)v341);
    std::string::basic_string[abi:ne180100]<0>(v341, "rtaid_client");
    v287 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v339, v341, (uint64_t)v341);
    std::string::operator=((std::string *)(v287 + 7), &__str);
    if ((v341[23] & 0x80000000) != 0)
      operator delete(*(void **)v341);
    std::to_string((std::string *)v341, *(double *)(v3 + 488));
    std::string::basic_string[abi:ne180100]<0>(&v338, "issue_detected_sample_time");
    v288 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v339, &v338, (uint64_t)&v338);
    v289 = v288 + 7;
    if (*((char *)v288 + 79) < 0)
      operator delete(*v289);
    *(_OWORD *)v289 = *(_OWORD *)v341;
    v289[2] = *(uint64_t **)&v341[16];
    v341[23] = 0;
    v341[0] = 0;
    if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v338.__r_.__value_.__l.__data_);
      if ((v341[23] & 0x80000000) != 0)
        operator delete(*(void **)v341);
    }
    std::string::basic_string[abi:ne180100]<0>(v341, "node");
    v290 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v339, v341, (uint64_t)v341);
    std::string::__assign_external((std::string *)(v290 + 7), (const std::string::value_type *)v3);
    if ((v341[23] & 0x80000000) != 0)
      operator delete(*(void **)v341);
    std::string::basic_string[abi:ne180100]<0>(v341, "rms");
    v291 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v339, v341, (uint64_t)v341);
    std::string::operator=((std::string *)(v291 + 7), &__p);
    if ((v341[23] & 0x80000000) != 0)
      operator delete(*(void **)v341);
    std::string::basic_string[abi:ne180100]<0>(v341, "peak");
    v292 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v339, v341, (uint64_t)v341);
    std::string::operator=((std::string *)(v292 + 7), &v337);
    if ((v341[23] & 0x80000000) != 0)
      operator delete(*(void **)v341);
    (*(void (**)(_QWORD, _QWORD *, _QWORD, std::string *, uint64_t, uint64_t))(*(_QWORD *)*v177 + 24))(*v177, v323, *(unsigned __int8 *)(v3 + 316), &v339, 1, 7);
    if (*(_DWORD *)(v3 + 268))
    {
      v293 = *(_DWORD *)(v3 + 272);
      *(_OWORD *)&v338.__r_.__value_.__r.__words[1] = 0uLL;
      v338.__r_.__value_.__r.__words[0] = (std::string::size_type)&v338.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]<0>(v341, "issue_type");
      v294 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v338, v341, (uint64_t)v341);
      if (*((char *)v294 + 79) < 0)
      {
        v294[8] = (uint64_t *)2;
        v295 = (char *)v294[7];
      }
      else
      {
        v295 = (char *)(v294 + 7);
        *((_BYTE *)v294 + 79) = 2;
      }
      strcpy(v295, "DC");
      if ((v341[23] & 0x80000000) != 0)
        operator delete(*(void **)v341);
      std::string::basic_string[abi:ne180100]<0>(v341, "rtaid_client");
      v296 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v338, v341, (uint64_t)v341);
      std::string::operator=((std::string *)(v296 + 7), &__str);
      if ((v341[23] & 0x80000000) != 0)
        operator delete(*(void **)v341);
      std::to_string((std::string *)v341, *(double *)(v3 + 488));
      std::string::basic_string[abi:ne180100]<0>(&v335, "issue_detected_sample_time");
      v297 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v338, &v335, (uint64_t)&v335);
      v298 = v297 + 7;
      if (*((char *)v297 + 79) < 0)
        operator delete(*v298);
      *(_OWORD *)v298 = *(_OWORD *)v341;
      v298[2] = *(uint64_t **)&v341[16];
      v341[23] = 0;
      v341[0] = 0;
      if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v335.__r_.__value_.__l.__data_);
        if ((v341[23] & 0x80000000) != 0)
          operator delete(*(void **)v341);
      }
      std::string::basic_string[abi:ne180100]<0>(v341, "node");
      v299 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v338, v341, (uint64_t)v341);
      std::string::__assign_external((std::string *)(v299 + 7), (const std::string::value_type *)v3);
      if ((v341[23] & 0x80000000) != 0)
        operator delete(*(void **)v341);
      std::to_string((std::string *)v341, v293);
      std::string::basic_string[abi:ne180100]<0>(&v335, "dc_consecutive_samples");
      v300 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v338, &v335, (uint64_t)&v335);
      v301 = v300 + 7;
      if (*((char *)v300 + 79) < 0)
        operator delete(*v301);
      *(_OWORD *)v301 = *(_OWORD *)v341;
      v301[2] = *(uint64_t **)&v341[16];
      v341[23] = 0;
      v341[0] = 0;
      if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v335.__r_.__value_.__l.__data_);
        if ((v341[23] & 0x80000000) != 0)
          operator delete(*(void **)v341);
      }
      (*(void (**)(_QWORD, _QWORD *, _QWORD, std::string *, uint64_t, uint64_t))(*(_QWORD *)*v177 + 24))(*v177, v323, *(unsigned __int8 *)(v3 + 316), &v338, 1, 7);
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      v303 = rtaid::get_log(void)::rtaid_os_log;
      if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
      {
        v304 = &v324;
        if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v304 = (std::string *)v324.__r_.__value_.__r.__words[0];
        v305 = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v305 = (std::string *)__str.__r_.__value_.__r.__words[0];
        v306 = *(_QWORD *)(v3 + 488);
        *(_DWORD *)v341 = 136316674;
        *(_QWORD *)&v341[4] = "IssueReporting.cpp";
        *(_WORD *)&v341[12] = 1024;
        *(_DWORD *)&v341[14] = 488;
        *(_WORD *)&v341[18] = 2080;
        *(_QWORD *)&v341[20] = v304;
        v342 = 2080;
        v343 = v305;
        v344 = 2080;
        v345 = v3;
        v346 = 2048;
        v347 = v306;
        v348 = 1024;
        *(_DWORD *)v349 = v293;
        _os_log_impl(&dword_216CFB000, v303, OS_LOG_TYPE_DEFAULT, "%s:%-5d RTAID [ use_case=%s issue_type=DC Generic Chain clientID=%s node=%s issue_detected_sample_time=%f ] -- [ %d ] ", v341, 0x40u);
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v338.__r_.__value_.__l.__size_);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v339.__r_.__value_.__l.__size_);
  }
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  v280 = rtaid::get_log(void)::rtaid_os_log;
  if (!os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
    goto LABEL_596;
  v308 = &v324;
  if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v308 = (std::string *)v324.__r_.__value_.__r.__words[0];
  v309 = &__str;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v309 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v310 = *(_QWORD *)(v3 + 488);
  v311 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v311 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((v337.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v312 = &v337;
  else
    v312 = (std::string *)v337.__r_.__value_.__r.__words[0];
  *(_DWORD *)v341 = 136316930;
  *(_QWORD *)&v341[4] = "IssueReporting.cpp";
  *(_WORD *)&v341[12] = 1024;
  *(_DWORD *)&v341[14] = 491;
  *(_WORD *)&v341[18] = 2080;
  *(_QWORD *)&v341[20] = v308;
  v342 = 2080;
  v343 = v309;
  v344 = 2080;
  v345 = v3;
  v346 = 2048;
  v347 = v310;
  v348 = 2080;
  *(_QWORD *)v349 = v311;
  *(_WORD *)&v349[8] = 2080;
  v350 = *(double *)&v312;
  v286 = "%s:%-5d RTAID [ use_case=%s report_type=RMS Generic Chain clientID=%s node=%s issue_detected_sample_time=%f ] -"
         "- [ rms:[%s], peaks:[%s] ] ";
LABEL_595:
  _os_log_impl(&dword_216CFB000, v280, OS_LOG_TYPE_DEFAULT, v286, v341, 0x4Eu);
LABEL_596:
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v337.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_600:
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v324.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_216D0C374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a69;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)STACK[0x238]);
  std::pair<std::string,std::string>::~pair((uint64_t)&a69);
  if (a31 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(a1);
}

unint64_t AudioIssueDetectorCreate(int a1, char **a2)
{
  unint64_t v2;
  unsigned int v5;
  unint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 v18;
  NSObject *v19;
  unint64_t v20;
  uint8x8_t v21;
  _QWORD *v22;
  _QWORD *i;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t prime;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD **v35;
  unint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  _QWORD *j;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  void *v48;
  _BYTE v49[18];
  __int16 v50;
  int v51;
  __int16 v52;
  char *v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  SingletonManagerInstance();
  std::mutex::lock((std::mutex *)&SingletonManagerInstance(void)::sInstance);
  do
    v5 = __ldaxr((unsigned int *)&dword_253D97770);
  while (__stlxr(v5 + 1, (unsigned int *)&dword_253D97770));
  while (1)
  {
    v6 = (unint64_t)(qword_253D97768 + 1) > 1 ? qword_253D97768 + 1 : 1;
    qword_253D97768 = v6;
    v7 = std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>>>::find<long long>(v6);
    if (!v7)
      break;
    v9 = v7[3];
    v8 = (std::__shared_weak_count *)v7[4];
    if (!v8)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (!v9)
        break;
    }
    else
    {
LABEL_12:
      if (!v9)
        break;
    }
  }
  v13 = operator new();
  *(_DWORD *)v13 = a1;
  *(_OWORD *)(v13 + 8) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_DWORD *)(v13 + 40) = 1065353216;
  *(_QWORD *)(v13 + 48) = 0;
  *(_DWORD *)(v13 + 56) = 1092616192;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *(_OWORD *)(v13 + 136) = 0u;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_OWORD *)(v13 + 184) = 0u;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_OWORD *)(v13 + 232) = 0u;
  *(_OWORD *)(v13 + 248) = 0u;
  *(_OWORD *)(v13 + 264) = 0u;
  *(_OWORD *)(v13 + 280) = 0u;
  *(_OWORD *)(v13 + 296) = 0u;
  *(_OWORD *)(v13 + 312) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 328) = 0u;
  *(_OWORD *)(v13 + 340) = 0u;
  *(_DWORD *)(v13 + 356) = 7;
  *(_BYTE *)(v13 + 360) = 0;
  *(_OWORD *)(v13 + 364) = 0u;
  *(_OWORD *)(v13 + 380) = 0u;
  *(_OWORD *)(v13 + 396) = 0u;
  *(_BYTE *)(v13 + 412) = 0;
  *(_OWORD *)(v13 + 416) = 0u;
  *(_OWORD *)(v13 + 432) = 0u;
  *(_OWORD *)(v13 + 448) = 0u;
  *(_OWORD *)(v13 + 464) = 0u;
  *(_OWORD *)(v13 + 480) = 0u;
  *(_OWORD *)(v13 + 496) = 0u;
  *(_OWORD *)(v13 + 512) = 0u;
  *(_OWORD *)(v13 + 528) = 0u;
  *(_QWORD *)&v14 = -1;
  *((_QWORD *)&v14 + 1) = -1;
  *(_OWORD *)(v13 + 544) = v14;
  *(_OWORD *)(v13 + 560) = v14;
  *(_DWORD *)(v13 + 576) = 0;
  *(_QWORD *)(v13 + 632) = 0;
  *(_OWORD *)(v13 + 600) = 0u;
  *(_OWORD *)(v13 + 616) = 0u;
  *(_OWORD *)(v13 + 584) = 0u;
  v15 = qword_253D977E0;
  *(_QWORD *)(v13 + 640) = qword_253D977D8;
  *(_QWORD *)(v13 + 648) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  v19 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v49 = 136316162;
    *(_QWORD *)&v49[4] = "Detector.cpp";
    *(_WORD *)&v49[12] = 1024;
    *(_DWORD *)&v49[14] = 22;
    v50 = 1040;
    v51 = 15;
    v52 = 2080;
    v53 = "rtaid::Detector]";
    v54 = 2048;
    v55 = v13;
    _os_log_impl(&dword_216CFB000, v19, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] constructed", v49, 0x2Cu);
  }
  v20 = qword_253D97748;
  if (qword_253D97748)
  {
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)qword_253D97748);
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.u32[0] > 1uLL)
    {
      v2 = v6;
      if (v6 >= qword_253D97748)
        v2 = v6 % qword_253D97748;
    }
    else
    {
      v2 = (qword_253D97748 - 1) & v6;
    }
    v22 = *(_QWORD **)(qword_253D97740 + 8 * v2);
    if (v22)
    {
      for (i = (_QWORD *)*v22; i; i = (_QWORD *)*i)
      {
        v24 = i[1];
        if (v24 == v6)
        {
          if (i[2] == v6)
          {
            rtaid::Detector::~Detector((rtaid::Detector **)v13);
            MEMORY[0x219A00DF0]();
            goto LABEL_94;
          }
        }
        else
        {
          if (v21.u32[0] > 1uLL)
          {
            if (v24 >= qword_253D97748)
              v24 %= (unint64_t)qword_253D97748;
          }
          else
          {
            v24 &= qword_253D97748 - 1;
          }
          if (v24 != v2)
            break;
        }
      }
    }
  }
  v25 = operator new(0x28uLL);
  *(_QWORD *)v49 = v25;
  *(_QWORD *)&v49[8] = &qword_253D97750;
  v49[16] = 0;
  *v25 = 0;
  v25[1] = v6;
  v25[2] = v6;
  v25[3] = v13;
  v26 = (_QWORD *)operator new();
  *v26 = &off_24D6169C8;
  v26[1] = 0;
  v26[2] = 0;
  v26[3] = v13;
  v25[4] = v26;
  v49[16] = 1;
  v27 = (float)(unint64_t)(qword_253D97758 + 1);
  if (!v20 || (float)(*(float *)&dword_253D97760 * (float)v20) < v27)
  {
    v28 = 1;
    if (v20 >= 3)
      v28 = (v20 & (v20 - 1)) != 0;
    v29 = v28 | (2 * v20);
    v30 = vcvtps_u32_f32(v27 / *(float *)&dword_253D97760);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v20 = qword_253D97748;
    if (prime > qword_253D97748)
      goto LABEL_50;
    if (prime < qword_253D97748)
    {
      v38 = vcvtps_u32_f32((float)(unint64_t)qword_253D97758 / *(float *)&dword_253D97760);
      if ((unint64_t)qword_253D97748 < 3
        || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)qword_253D97748), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime >= v20)
      {
        v20 = qword_253D97748;
      }
      else
      {
        if (prime)
        {
LABEL_50:
          if (prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v32 = operator new(8 * prime);
          v33 = (void *)qword_253D97740;
          qword_253D97740 = (uint64_t)v32;
          if (v33)
            operator delete(v33);
          v34 = 0;
          qword_253D97748 = prime;
          do
            *(_QWORD *)(qword_253D97740 + 8 * v34++) = 0;
          while (prime != v34);
          v35 = (_QWORD **)qword_253D97750;
          if (qword_253D97750)
          {
            v36 = *(_QWORD *)(qword_253D97750 + 8);
            v37 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
            v37.i16[0] = vaddlv_u8(v37);
            if (v37.u32[0] > 1uLL)
            {
              if (v36 >= prime)
                v36 %= prime;
            }
            else
            {
              v36 &= prime - 1;
            }
            *(_QWORD *)(qword_253D97740 + 8 * v36) = &qword_253D97750;
            for (j = *v35; j; v36 = v42)
            {
              v42 = j[1];
              if (v37.u32[0] > 1uLL)
              {
                if (v42 >= prime)
                  v42 %= prime;
              }
              else
              {
                v42 &= prime - 1;
              }
              if (v42 != v36)
              {
                if (!*(_QWORD *)(qword_253D97740 + 8 * v42))
                {
                  *(_QWORD *)(qword_253D97740 + 8 * v42) = v35;
                  goto LABEL_75;
                }
                *v35 = (_QWORD *)*j;
                *j = **(_QWORD **)(qword_253D97740 + 8 * v42);
                **(_QWORD **)(qword_253D97740 + 8 * v42) = j;
                j = v35;
              }
              v42 = v36;
LABEL_75:
              v35 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v20 = prime;
          goto LABEL_79;
        }
        v48 = (void *)qword_253D97740;
        qword_253D97740 = 0;
        if (v48)
          operator delete(v48);
        v20 = 0;
        qword_253D97748 = 0;
      }
    }
LABEL_79:
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v6 >= v20)
        v2 = v6 % v20;
      else
        v2 = v6;
    }
    else
    {
      v2 = (v20 - 1) & v6;
    }
  }
  v43 = *(uint64_t **)(qword_253D97740 + 8 * v2);
  v44 = *(_QWORD *)v49;
  if (v43)
  {
    **(_QWORD **)v49 = *v43;
LABEL_92:
    *v43 = v44;
    goto LABEL_93;
  }
  **(_QWORD **)v49 = qword_253D97750;
  qword_253D97750 = v44;
  *(_QWORD *)(qword_253D97740 + 8 * v2) = &qword_253D97750;
  if (*(_QWORD *)v44)
  {
    v45 = *(_QWORD *)(*(_QWORD *)v44 + 8);
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v45 >= v20)
        v45 %= v20;
    }
    else
    {
      v45 &= v20 - 1;
    }
    v43 = (uint64_t *)(qword_253D97740 + 8 * v45);
    goto LABEL_92;
  }
LABEL_93:
  *(_QWORD *)v49 = 0;
  ++qword_253D97758;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,void *>>>>::reset[abi:ne180100]((uint64_t)v49);
LABEL_94:
  if (a1 == 3)
    atomic_store(0, (unsigned __int8 *)&unk_253D977AC);
  do
    v46 = __ldaxr((unsigned int *)&dword_253D97770);
  while (__stlxr(v46 - 1, (unsigned int *)&dword_253D97770));
  std::mutex::unlock((std::mutex *)&SingletonManagerInstance(void)::sInstance);
  SingletonManagerInstance();
  rtaid::Manager::UpdateReportingSessionsOnDetector(v6, a2);
  return v6;
}

void sub_216D0D0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock((std::mutex *)&SingletonManagerInstance(void)::sInstance);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<ADAM::Sequencer::init(void)::$_0 &&>>(ADAM::AudioDataAnalysisManager *a1)
{
  uint64_t v1;
  ADAM::Parameters *v2;
  uint64_t v3;
  __int128 v4;
  std::thread v5;

  v1 = ***(_QWORD ***)a1;
  ADAM::AudioDataAnalysisManager::instance(a1);
  *(_QWORD *)(v1 + 40) = &ADAM::AudioDataAnalysisManager::instance(void)::gAdam;
  atomic_store(0, (unsigned __int8 *)(v1 + 16));
  *(_QWORD *)&v4 = ADAM::Sequencer::run;
  *((_QWORD *)&v4 + 1) = 0;
  v3 = v1;
  std::thread::thread<void (ADAM::Sequencer::*)(void),ADAM::Sequencer*,void>(&v5.__t_, &v4, &v3);
  if (*(_QWORD *)(v1 + 8))
    goto LABEL_6;
  *(std::thread *)(v1 + 8) = v5;
  v5.__t_ = 0;
  std::thread::~thread(&v5);
  ADAM::Parameters::instance(v2);
  if (!ADAM::Parameters::GetParamValue<BOOL>(1u))
    return;
  *(_QWORD *)&v4 = ADAM::Sequencer::generateRandomDataForWatch;
  *((_QWORD *)&v4 + 1) = 0;
  v3 = v1;
  std::thread::thread<void (ADAM::Sequencer::*)(void),ADAM::Sequencer*,void>(&v5.__t_, &v4, &v3);
  if (*(_QWORD *)v1)
LABEL_6:
    std::terminate();
  *(std::thread *)v1 = v5;
  v5.__t_ = 0;
  std::thread::~thread(&v5);
}

void ADAM::AudioDataAnalysisManager::instance(ADAM::AudioDataAnalysisManager *this)
{
  unsigned __int8 v1;
  ADAM::AudioDataAnalysisManager *v2;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ADAM::AudioDataAnalysisManager::AudioDataAnalysisManager(v2);
    }
  }
}

void sub_216D0D30C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ADAM::Sequencer::run(ADAM::Sequencer *this)
{
  NSObject *v2;
  id v3;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v2 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v2)
      goto LABEL_10;
  }
  else
  {
    v2 = MEMORY[0x24BDACB70];
    v3 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "ADAMSequencer.cpp";
    v6 = 1024;
    v7 = 87;
    _os_log_impl(&dword_216CFB000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d Sequencer starts running", buf, 0x12u);
  }

LABEL_10:
  ADAM::Sequencer::run_impl(this);
}

void sub_216D0D438(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::exception a10, __int128 buf, __int128 a12)
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v15;
  NSObject *v16;
  const char *v17;

  if (a2 == 1)
  {
    __cxa_get_exception_ptr(a1);
    a10.__vftable = (std::exception_vtbl *)(MEMORY[0x24BEDB8F0] + 16);
    __cxa_begin_catch(a1);
    if (*(_QWORD *)(v12 + 1408) != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    CALog::LogObjIfEnabled(*(id **)(v13 + 1416));
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = v15;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v17 = std::exception::what(&a10);
      LODWORD(buf) = 136315650;
      *(_QWORD *)((char *)&buf + 4) = "ADAMSequencer.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 91;
      WORD1(a12) = 2080;
      *(_QWORD *)((char *)&a12 + 4) = v17;
      _os_log_impl(&dword_216CFB000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d ADAM analysis thread caught exception: %s", (uint8_t *)&buf, 0x1Cu);
    }

    std::exception::~exception(&a10);
    __cxa_end_catch();
    JUMPOUT(0x216D0D3F0);
  }
  _Unwind_Resume(a1);
}

void std::thread::thread<void (ADAM::Sequencer::*)(void),ADAM::Sequencer*,void>(pthread_t *a1, _OWORD *a2, _QWORD *a3)
{
  std::__thread_struct *v6;
  uint64_t v7;
  int v8;
  uint64_t *v9[2];

  v6 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v6);
  v7 = operator new();
  v9[0] = (uint64_t *)v7;
  v9[1] = 0;
  *(_QWORD *)v7 = v6;
  *(_OWORD *)(v7 + 8) = *a2;
  *(_QWORD *)(v7 + 24) = *a3;
  v8 = pthread_create(a1, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (ADAM::Sequencer::*)(void),ADAM::Sequencer*>>, (void *)v7);
  if (v8)
  {
    std::__throw_system_error(v8, "thread constructor failed");
    __break(1u);
  }
  else
  {
    v9[0] = 0;
    std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (ADAM::Sequencer::*)(void),ADAM::Sequencer*>>::reset[abi:ne180100](v9);
  }
}

void sub_216D0D5F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ADAM::Parameters::instance(ADAM::Parameters *this)
{
  unsigned __int8 v1;
  ADAM::Parameters *v2;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ADAM::Parameters::Parameters(v2);
    }
  }
}

void sub_216D0D688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ADAM::Parameters::GetParamValue<BOOL>(unsigned int a1)
{
  unsigned __int8 *v2;
  void *exception;
  __n128 v5;
  std::string v6;
  std::string v7;

  if (a1 >= (unint64_t)((qword_253D975B0 - ADAM::Parameters::instance(void)::gParams) >> 4))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::to_string(&v6, a1);
    v5 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v7, "unknown ADAMParameterType ", &v6);
    MEMORY[0x219A00AD8](exception, &v7, v5);
  }
  v2 = (unsigned __int8 *)std::any_cast[abi:ne180100]<BOOL>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*(_QWORD *)(ADAM::Parameters::instance(void)::gParams + 16 * a1) + 16));
  if (!v2)
    std::__throw_bad_any_cast[abi:ne180100]();
  return *v2;
}

void sub_216D0D768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;
  uint64_t v22;

  if (*(char *)(v22 - 33) < 0)
    operator delete(*(void **)(v22 - 56));
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void sub_216D0D910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  int v26;
  void *v27;
  uint64_t v28;

  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v26 & 1) == 0)
    {
LABEL_12:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v27);
  goto LABEL_12;
}

void sub_216D0DA14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);
  __cxa_free_exception(v14);
  __cxa_end_catch();
  JUMPOUT(0x216D0DA3CLL);
}

void ADAM::Sequencer::generateRandomDataForWatch(ADAM::Sequencer *this, __n128 a2)
{
  NSObject *v2;
  id *v3;
  id *v4;
  id WeakRetained;
  int v6;
  uint32_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  id v12;
  __n128 v13;
  _QWORD v14[3];
  _BYTE buf[12];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = MEMORY[0x24BDACB70];
  a2.n128_u64[0] = 136315650;
  v13 = a2;
LABEL_2:
  ADAM::AudioDataAnalysisManager::instance(this);
  ADAM::AudioDataAnalysisManager::getServerDelegates((uint64_t)v14, 0x65766E64u);
  v4 = (id *)v14[0];
  v3 = (id *)v14[1];
  while (1)
  {
    if (v4 == v3)
    {
      sleep(2u);
      *(_QWORD *)buf = v14;
      std::vector<ADAMServerDelegate * {__weak}>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      goto LABEL_2;
    }
    WeakRetained = objc_loadWeakRetained(v4);
    v6 = objc_msgSend(WeakRetained, "isActive:", 1702260324);

    if (v6)
      break;
LABEL_15:
    ++v4;
  }
  v7 = arc4random_uniform(0x59u);
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  v8 = v7 + 33;
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v9)
    {
LABEL_14:
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", v8, *(_OWORD *)&v13);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_loadWeakRetained(v4);
      objc_msgSend(v12, "sendAudioSample:withType:metadata:", v11, 1702260324, 0);

      goto LABEL_15;
    }
  }
  else
  {
    v10 = v2;
    v9 = v2;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = v13.n128_u32[0];
    *(_QWORD *)&buf[4] = "ADAMSequencer.cpp";
    v16 = 1024;
    v17 = 219;
    v18 = 1024;
    v19 = v8;
    _os_log_impl(&dword_216CFB000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d ADAM generated a random number: %d", buf, 0x18u);
  }

  goto LABEL_14;
}

void sub_216D0DBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a12;
  std::vector<ADAMServerDelegate * {__weak}>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void std::vector<ADAMServerDelegate * {__weak}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        objc_destroyWeak(--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, char *__s, std::string *a3)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::insert(a3, 0, __s, v6);
  result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t (**std::any_cast[abi:ne180100]<BOOL>(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<BOOL>::__id);
    else
      return 0;
  }
  return result;
}

void std::__throw_bad_any_cast[abi:ne180100]()
{
  std::bad_any_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_any_cast *)__cxa_allocate_exception(8uLL);
  exception->__vftable = 0;
  v1 = std::bad_any_cast::bad_any_cast(exception);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, std::string *a2, char *__s)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_216D0DE40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

std::bad_cast *std::bad_any_cast::bad_any_cast(std::bad_any_cast *this)
{
  std::bad_cast *result;

  result = std::bad_cast::bad_cast(this);
  result->__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB8A8] + 16);
  return result;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
}

void sub_216D0DEDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (ADAM::Sequencer::*)(void),ADAM::Sequencer*>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  void (*v5)(_QWORD *);
  _QWORD *v6;
  uint64_t *v8;

  v8 = a1;
  v2 = std::__thread_local_data();
  v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = a1[2];
  v5 = (void (*)(_QWORD *))a1[1];
  v6 = (_QWORD *)(a1[3] + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(void (**)(_QWORD *))(*v6 + v5);
  v5(v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (ADAM::Sequencer::*)(void),ADAM::Sequencer*>>::reset[abi:ne180100](&v8);
  return 0;
}

void sub_216D0DF78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (ADAM::Sequencer::*)(void),ADAM::Sequencer*>>::reset[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (ADAM::Sequencer::*)(void),ADAM::Sequencer*>>::reset[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1);
    JUMPOUT(0x219A00DF0);
  }
  return result;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    MEMORY[0x219A00C34]();
    JUMPOUT(0x219A00DF0);
  }
  return result;
}

void ADAM::Sequencer::run_impl(ADAM::Sequencer *this)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  NSObject *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  char v23;
  ADAM::AudioDataAnalysisManager *v24;
  uint64_t v25;
  int v26;
  ADAM *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  unsigned int v34;
  NSObject *v35;
  id v36;
  unint64_t v37;
  unint64_t v38;
  const ADAM::BufferNodeDescriptorBase *NodeDescriptor;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  id v43;
  unint64_t v44;
  ADAM::AudioDataAnalysisManager *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  std::mutex *ClientSessionMananger;
  std::mutex *v54;
  std::mutex *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  int64x2_t v60;
  NSObject *v61;
  id v62;
  id v63;
  int v64;
  id v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  BOOL v72;
  _QWORD *v73;
  NSObject *v74;
  id v75;
  id v76;
  NSObject *v77;
  os_log_type_t v78;
  const char *v79;
  _QWORD *v80;
  ADAM::session_lock *v81;
  ADAM::session_lock_shared *v82;
  uint64_t v83;
  uint64_t v84;
  ADAM::session_lock_shared *v85;
  ADAM::session_lock_exclusive *v86;
  ADAM::ClientSessionManager **v87;
  ADAM::ClientSessionManager **v88;
  int8x8_t v89;
  ADAM::ClientSessionManager *v90;
  uint8x8_t v91;
  ADAM::session_lock_shared *v92;
  NSObject *v93;
  NSObject *v94;
  int v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  int v105;
  id v106;
  id v107;
  id v108;
  id v109;
  _QWORD *v110;
  id v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  ADAM::ClientSessionManager **v115;
  ADAM::ClientSessionManager **v116;
  unint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  _BYTE *v130;
  uint64_t v131;
  _BYTE *v132;
  uint64_t *v133;
  BOOL v134;
  ADAM::ClientSessionManager *v135;
  unint64_t v136;
  ADAM::session_lock_exclusive *v137;
  NSObject *v138;
  id v139;
  NSObject *v140;
  id v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  id v157;
  _QWORD *v158;
  unsigned int v159;
  void *v160;
  id v161;
  NSObject *v162;
  int v163;
  int v164;
  unsigned int v165;
  NSObject *v166;
  id v167;
  int *v168;
  int v169;
  unsigned int v170;
  int *v171;
  id v172;
  void *v173;
  id v174;
  NSObject *v175;
  _QWORD *v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  id v183;
  int v184;
  NSObject *v185;
  unsigned int v186;
  int v187;
  unsigned int v188;
  id v189;
  id v190;
  _BYTE *v191;
  void *v192;
  id v193;
  NSObject *v194;
  _QWORD *v195;
  NSObject *v196;
  id v197;
  _QWORD *v198;
  int v199;
  __int128 v200;
  uint64_t v201;
  _BYTE buf[12];
  __int16 v203;
  int v204;
  __int16 v205;
  unint64_t v206;
  __int16 v207;
  _BYTE *v208;
  __int16 v209;
  _BYTE *v210;
  _BYTE v211[16];
  uint64_t v212;

  v212 = *MEMORY[0x24BDAC8D0];
  while (2)
  {
    caulk::semaphore::timed_wait((caulk::semaphore *)(*((_QWORD *)this + 5) + 144), -1.0);
    v2 = *((_QWORD *)this + 5);
    v3 = *(unint64_t **)(v2 + 232);
    if (!v3)
    {
      v4 = (unint64_t *)(v2 + 168);
      do
        v5 = (unint64_t *)__ldaxr(v4);
      while (__stxr(0, v4));
      v3 = 0;
      if (!v5)
        goto LABEL_9;
      do
      {
        v6 = (unint64_t)v3;
        v3 = v5;
        v5 = (unint64_t *)atomic_load(v5);
        atomic_store(v6, v3);
      }
      while (v5);
      *(_QWORD *)(v2 + 232) = v3;
    }
    v7 = atomic_load(v3);
    *(_QWORD *)(v2 + 232) = v7;
LABEL_9:
    switch(*((_DWORD *)v3 + 4))
    {
      case 0:
        v8 = atomic_load((unsigned __int8 *)this + 16);
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if ((v8 & 1) == 0)
        {
          if (ADAM::ADAMLogScope(void)::scope)
          {
            v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v9)
              continue;
          }
          else
          {
            v9 = MEMORY[0x24BDACB70];
            v75 = MEMORY[0x24BDACB70];
          }
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADAMSequencer.cpp";
            v203 = 1024;
            v204 = 116;
            _os_log_impl(&dword_216CFB000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Sequencer got Terminate Signal, but stop is not set", buf, 0x12u);
          }
          goto LABEL_319;
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v196 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v196)
            return;
        }
        else
        {
          v196 = MEMORY[0x24BDACB70];
          v197 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v196, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADAMSequencer.cpp";
          v203 = 1024;
          v204 = 114;
          _os_log_impl(&dword_216CFB000, v196, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sequencer got Terminate Signal", buf, 0x12u);
        }

        return;
      case 1:
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v30 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v30)
          {
LABEL_106:
            atomic_store(1u, (unsigned __int8 *)this + 17);
            continue;
          }
        }
        else
        {
          v30 = MEMORY[0x24BDACB70];
          v62 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADAMSequencer.cpp";
          v203 = 1024;
          v204 = 121;
          _os_log_impl(&dword_216CFB000, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sequencer got Reset Signal", buf, 0x12u);
        }

        goto LABEL_106;
      case 2:
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v28 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v28)
            goto LABEL_74;
        }
        else
        {
          v28 = MEMORY[0x24BDACB70];
          v36 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          v37 = v3[1];
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ADAMSequencer.cpp";
          v203 = 1024;
          v204 = 126;
          v205 = 2048;
          v206 = v37;
          _os_log_impl(&dword_216CFB000, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sequencer got Dispose Signal for ClientSession: %llx", buf, 0x1Cu);
        }

LABEL_74:
        v38 = v3[1];
        NodeDescriptor = (const ADAM::BufferNodeDescriptorBase *)ADAM::AudioDataAnalysisManager::getNodeDescriptor(*((ADAM::AudioDataAnalysisManager **)this + 5), v38);
        v40 = *((_QWORD *)NodeDescriptor + 4);
        v41 = *(_QWORD *)(*((_QWORD *)this + 5) + 240);
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v42 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v42)
            goto LABEL_120;
        }
        else
        {
          v42 = MEMORY[0x24BDACB70];
          v65 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ADAMAnalyzerManager.cpp";
          v203 = 1024;
          v204 = 180;
          v205 = 2048;
          v206 = v38;
          _os_log_impl(&dword_216CFB000, v42, OS_LOG_TYPE_INFO, "%25s:%-5d Session %llx: disposing analyzers", buf, 0x1Cu);
        }

LABEL_120:
        v66 = *(_QWORD **)v41;
        v67 = *(_QWORD **)(v41 + 8);
        while (v66 != v67)
        {
          if ((*((_QWORD *)NodeDescriptor + 4) & *(_QWORD *)(*v66 + 16)) != 0)
            (*(void (**)(_QWORD))(*(_QWORD *)*v66 + 16))(*v66);
          ++v66;
        }
        ADAM::AudioDataAnalysisManager::dispatch(*(ADAM::AudioDataAnalysisManager **)(*((_QWORD *)this + 5) + 248), v38, NodeDescriptor);
        v68 = *(_QWORD *)(*((_QWORD *)this + 5) + 248);
        std::mutex::lock((std::mutex *)v68);
        v69 = *(_QWORD **)(v68 + 72);
        if (!v69)
          goto LABEL_136;
        v70 = (_QWORD *)(v68 + 72);
        do
        {
          v71 = v69[4];
          v72 = v71 >= v38;
          if (v71 >= v38)
            v73 = v69;
          else
            v73 = v69 + 1;
          if (v72)
            v70 = v69;
          v69 = (_QWORD *)*v73;
        }
        while (*v73);
        if (v70 == (_QWORD *)(v68 + 72) || v70[4] > v38)
        {
LABEL_136:
          if (ADAM::ADAMLogScope(void)::once != -1)
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
          if (ADAM::ADAMLogScope(void)::scope)
          {
            v74 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v74)
              goto LABEL_150;
          }
          else
          {
            v74 = MEMORY[0x24BDACB70];
            v76 = MEMORY[0x24BDACB70];
          }
          if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "ADAMDispatcher.cpp";
            v203 = 1024;
            v204 = 226;
            v205 = 2048;
            v206 = v38;
            v77 = v74;
            v78 = OS_LOG_TYPE_DEFAULT;
            v79 = "%25s:%-5d Session %llx: failed to dispose writer, writer already disposed?";
            goto LABEL_148;
          }
          goto LABEL_149;
        }
        v96 = (_QWORD *)v70[5];
        v97 = (_QWORD *)v70[6];
        while (v96 != v97)
        {
          (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v96 + 24))(*v96, v96);
          ++v96;
        }
        v98 = (_QWORD *)v70[1];
        v99 = v70;
        if (v98)
        {
          do
          {
            v100 = v98;
            v98 = (_QWORD *)*v98;
          }
          while (v98);
        }
        else
        {
          do
          {
            v100 = (_QWORD *)v99[2];
            v134 = *v100 == (_QWORD)v99;
            v99 = v100;
          }
          while (!v134);
        }
        if (*(_QWORD **)(v68 + 64) == v70)
          *(_QWORD *)(v68 + 64) = v100;
        v101 = *(_QWORD **)(v68 + 72);
        --*(_QWORD *)(v68 + 80);
        v102 = *v70;
        v103 = v70;
        if (!*v70)
          goto LABEL_183;
        v104 = (_QWORD *)v70[1];
        if (v104)
        {
          do
          {
            v103 = v104;
            v104 = (_QWORD *)*v104;
          }
          while (v104);
LABEL_183:
          v102 = v103[1];
          if (!v102)
          {
            v105 = 1;
            goto LABEL_227;
          }
        }
        else
        {
          v103 = v70;
        }
        v105 = 0;
        *(_QWORD *)(v102 + 16) = v103[2];
LABEL_227:
        v118 = (_QWORD *)v103[2];
        v119 = (_QWORD *)*v118;
        if ((_QWORD *)*v118 == v103)
        {
          *v118 = v102;
          if (v103 == v101)
          {
            v119 = 0;
            v101 = (_QWORD *)v102;
          }
          else
          {
            v119 = (_QWORD *)v118[1];
          }
        }
        else
        {
          v118[1] = v102;
        }
        v121 = *((unsigned __int8 *)v103 + 24);
        if (v103 != v70)
        {
          v122 = v70[2];
          v103[2] = v122;
          *(_QWORD *)(v122 + 8 * (*(_QWORD *)v70[2] != (_QWORD)v70)) = v103;
          v123 = *v70;
          *v103 = *v70;
          *(_QWORD *)(v123 + 16) = v103;
          v124 = v70[1];
          v103[1] = v124;
          if (v124)
            *(_QWORD *)(v124 + 16) = v103;
          *((_BYTE *)v103 + 24) = *((_BYTE *)v70 + 24);
          if (v101 == v70)
            v101 = v103;
        }
        if (!v121 || !v101)
          goto LABEL_413;
        if (!v105)
        {
          *(_BYTE *)(v102 + 24) = 1;
          goto LABEL_413;
        }
        while (2)
        {
          v125 = v119[2];
          if (*(_QWORD **)v125 == v119)
          {
            if (!*((_BYTE *)v119 + 24))
            {
              *((_BYTE *)v119 + 24) = 1;
              *(_BYTE *)(v125 + 24) = 0;
              v131 = v119[1];
              *(_QWORD *)v125 = v131;
              if (v131)
                *(_QWORD *)(v131 + 16) = v125;
              v119[2] = *(_QWORD *)(v125 + 16);
              *(_QWORD *)(*(_QWORD *)(v125 + 16) + 8 * (**(_QWORD **)(v125 + 16) != v125)) = v119;
              v119[1] = v125;
              *(_QWORD *)(v125 + 16) = v119;
              if (v101 == (_QWORD *)v125)
                v101 = v119;
              v119 = *(_QWORD **)v125;
            }
            v132 = (_BYTE *)*v119;
            if (*v119 && !v132[24])
              goto LABEL_408;
            v133 = (uint64_t *)v119[1];
            if (v133 && !*((_BYTE *)v133 + 24))
            {
              if (v132 && !v132[24])
              {
LABEL_408:
                v133 = v119;
              }
              else
              {
                *((_BYTE *)v133 + 24) = 1;
                *((_BYTE *)v119 + 24) = 0;
                v181 = *v133;
                v119[1] = *v133;
                if (v181)
                  *(_QWORD *)(v181 + 16) = v119;
                v133[2] = v119[2];
                *(_QWORD *)(v119[2] + 8 * (*(_QWORD *)v119[2] != (_QWORD)v119)) = v133;
                *v133 = (uint64_t)v119;
                v119[2] = v133;
                v132 = v119;
              }
              v152 = v133[2];
              *((_BYTE *)v133 + 24) = *(_BYTE *)(v152 + 24);
              *(_BYTE *)(v152 + 24) = 1;
              v132[24] = 1;
              v153 = *(uint64_t **)v152;
              v182 = *(_QWORD *)(*(_QWORD *)v152 + 8);
              *(_QWORD *)v152 = v182;
              if (v182)
                *(_QWORD *)(v182 + 16) = v152;
              v153[2] = *(_QWORD *)(v152 + 16);
              *(_QWORD *)(*(_QWORD *)(v152 + 16) + 8 * (**(_QWORD **)(v152 + 16) != v152)) = v153;
              v153[1] = v152;
              goto LABEL_412;
            }
            *((_BYTE *)v119 + 24) = 0;
            v130 = (_BYTE *)v119[2];
            if (v130[24])
              v134 = v130 == (_BYTE *)v101;
            else
              v134 = 1;
            if (v134)
              goto LABEL_321;
            goto LABEL_274;
          }
          if (!*((_BYTE *)v119 + 24))
          {
            *((_BYTE *)v119 + 24) = 1;
            *(_BYTE *)(v125 + 24) = 0;
            v126 = *(uint64_t **)(v125 + 8);
            v127 = *v126;
            *(_QWORD *)(v125 + 8) = *v126;
            if (v127)
              *(_QWORD *)(v127 + 16) = v125;
            v126[2] = *(_QWORD *)(v125 + 16);
            *(_QWORD *)(*(_QWORD *)(v125 + 16) + 8 * (**(_QWORD **)(v125 + 16) != v125)) = v126;
            *v126 = v125;
            *(_QWORD *)(v125 + 16) = v126;
            if (v101 == (_QWORD *)*v119)
              v101 = v119;
            v119 = *(_QWORD **)(*v119 + 8);
          }
          v128 = (_QWORD *)*v119;
          if (!*v119 || *((_BYTE *)v128 + 24))
          {
            v129 = (_QWORD *)v119[1];
            if (v129 && !*((_BYTE *)v129 + 24))
              goto LABEL_335;
            *((_BYTE *)v119 + 24) = 0;
            v130 = (_BYTE *)v119[2];
            if (v130 == (_BYTE *)v101)
            {
              v130 = v101;
LABEL_321:
              v130[24] = 1;
              goto LABEL_413;
            }
            if (!v130[24])
              goto LABEL_321;
LABEL_274:
            v119 = *(_QWORD **)(*((_QWORD *)v130 + 2) + 8 * (**((_QWORD **)v130 + 2) == (_QWORD)v130));
            continue;
          }
          break;
        }
        v129 = (_QWORD *)v119[1];
        if (v129 && !*((_BYTE *)v129 + 24))
        {
LABEL_335:
          v128 = v119;
        }
        else
        {
          *((_BYTE *)v128 + 24) = 1;
          *((_BYTE *)v119 + 24) = 0;
          v151 = v128[1];
          *v119 = v151;
          if (v151)
            *(_QWORD *)(v151 + 16) = v119;
          v128[2] = v119[2];
          *(_QWORD *)(v119[2] + 8 * (*(_QWORD *)v119[2] != (_QWORD)v119)) = v128;
          v128[1] = v119;
          v119[2] = v128;
          v129 = v119;
        }
        v152 = v128[2];
        *((_BYTE *)v128 + 24) = *(_BYTE *)(v152 + 24);
        *(_BYTE *)(v152 + 24) = 1;
        *((_BYTE *)v129 + 24) = 1;
        v153 = *(uint64_t **)(v152 + 8);
        v154 = *v153;
        *(_QWORD *)(v152 + 8) = *v153;
        if (v154)
          *(_QWORD *)(v154 + 16) = v152;
        v153[2] = *(_QWORD *)(v152 + 16);
        *(_QWORD *)(*(_QWORD *)(v152 + 16) + 8 * (**(_QWORD **)(v152 + 16) != v152)) = v153;
        *v153 = v152;
LABEL_412:
        *(_QWORD *)(v152 + 16) = v153;
LABEL_413:
        *(_QWORD *)buf = v70 + 5;
        std::vector<std::unique_ptr<ADAM::Writer>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        operator delete(v70);
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (!ADAM::ADAMLogScope(void)::scope)
        {
          v74 = MEMORY[0x24BDACB70];
          v183 = MEMORY[0x24BDACB70];
LABEL_419:
          if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "ADAMDispatcher.cpp";
            v203 = 1024;
            v204 = 235;
            v205 = 2048;
            v206 = v38;
            v77 = v74;
            v78 = OS_LOG_TYPE_DEBUG;
            v79 = "%25s:%-5d Session %llx: writers detached";
LABEL_148:
            _os_log_impl(&dword_216CFB000, v77, v78, v79, buf, 0x1Cu);
          }
LABEL_149:

          goto LABEL_150;
        }
        v74 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (v74)
          goto LABEL_419;
LABEL_150:
        std::mutex::unlock((std::mutex *)v68);
        v80 = (_QWORD *)*((_QWORD *)this + 5);
        ADAM::session_lock::lock_inst(v81);
        MEMORY[0x219A00C58](&ADAM::session_lock::lock_inst(void)::_m);
        v82 = (ADAM::session_lock_shared *)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>>>::find<unsigned long long>(v80, HIDWORD(v38));
        if (!v82)
        {
          if (ADAM::ADAMLogScope(void)::once != -1)
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
          if (ADAM::ADAMLogScope(void)::scope)
          {
            v92 = (ADAM::session_lock_shared *)*(id *)ADAM::ADAMLogScope(void)::scope;
            v93 = v92;
            if (!v92)
            {
LABEL_193:
              ADAM::session_lock_shared::~session_lock_shared(v92);
              v95 = 0;
              goto LABEL_298;
            }
          }
          else
          {
            v93 = MEMORY[0x24BDACB70];
            v107 = MEMORY[0x24BDACB70];
          }
          if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AudioDataAnalysisManager.cpp";
            v203 = 1024;
            v204 = 137;
            v205 = 2048;
            v206 = HIDWORD(v38);
            _os_log_impl(&dword_216CFB000, v93, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sessiion %llx already disposed?", buf, 0x1Cu);
          }

          goto LABEL_193;
        }
        v83 = *((_QWORD *)v82 + 3);
        if (!*(_BYTE *)(v83 + 432))
        {
          ADAM::session_lock_shared::~session_lock_shared(v82);
LABEL_169:
          v95 = 0;
          goto LABEL_298;
        }
        std::mutex::lock((std::mutex *)(v83 + 56));
        if (std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((_QWORD *)(v83 + 16), v38))
        {
          std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>>>::__erase_unique<unsigned int>((_QWORD *)(v83 + 16), v38);
        }
        v84 = *(_QWORD *)(v83 + 40);
        std::mutex::unlock((std::mutex *)(v83 + 56));
        ADAM::session_lock_shared::~session_lock_shared(v85);
        if (v84)
          goto LABEL_169;
        ADAM::session_lock_exclusive::session_lock_exclusive(v86);
        v87 = (ADAM::ClientSessionManager **)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>>>::find<unsigned long long>(v80, HIDWORD(v38));
        if (v87)
        {
          v88 = v87;
          v89 = (int8x8_t)v80[1];
          v90 = v87[1];
          v91 = (uint8x8_t)vcnt_s8(v89);
          v91.i16[0] = vaddlv_u8(v91);
          if (v91.u32[0] > 1uLL)
          {
            if ((unint64_t)v90 >= *(_QWORD *)&v89)
              v90 = (ADAM::ClientSessionManager *)((unint64_t)v90 % *(_QWORD *)&v89);
          }
          else
          {
            v90 = (ADAM::ClientSessionManager *)((*(_QWORD *)&v89 - 1) & (unint64_t)v90);
          }
          v115 = *(ADAM::ClientSessionManager ***)(*v80 + 8 * (_QWORD)v90);
          do
          {
            v116 = v115;
            v115 = (ADAM::ClientSessionManager **)*v115;
          }
          while (v115 != v87);
          if (v116 == v80 + 2)
            goto LABEL_278;
          v117 = (unint64_t)v116[1];
          if (v91.u32[0] > 1uLL)
          {
            if (v117 >= *(_QWORD *)&v89)
              v117 %= *(_QWORD *)&v89;
          }
          else
          {
            v117 &= *(_QWORD *)&v89 - 1;
          }
          if ((ADAM::ClientSessionManager *)v117 != v90)
          {
LABEL_278:
            if (!*v87)
              goto LABEL_279;
            v120 = *((_QWORD *)*v87 + 1);
            if (v91.u32[0] > 1uLL)
            {
              if (v120 >= *(_QWORD *)&v89)
                v120 %= *(_QWORD *)&v89;
            }
            else
            {
              v120 &= *(_QWORD *)&v89 - 1;
            }
            if ((ADAM::ClientSessionManager *)v120 != v90)
LABEL_279:
              *(_QWORD *)(*v80 + 8 * (_QWORD)v90) = 0;
          }
          v135 = *v87;
          if (*v87)
          {
            v136 = *((_QWORD *)v135 + 1);
            if (v91.u32[0] > 1uLL)
            {
              if (v136 >= *(_QWORD *)&v89)
                v136 %= *(_QWORD *)&v89;
            }
            else
            {
              v136 &= *(_QWORD *)&v89 - 1;
            }
            if ((ADAM::ClientSessionManager *)v136 != v90)
            {
              *(_QWORD *)(*v80 + 8 * v136) = v116;
              v135 = *v87;
            }
          }
          *v116 = v135;
          *v87 = 0;
          --v80[3];
          std::unique_ptr<ADAM::ClientSessionManager>::reset[abi:ne180100](v87 + 3);
          operator delete(v88);
        }
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v137 = (ADAM::session_lock_exclusive *)*(id *)ADAM::ADAMLogScope(void)::scope;
          v138 = v137;
          if (!v137)
            goto LABEL_297;
        }
        else
        {
          v138 = MEMORY[0x24BDACB70];
          v139 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v138, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AudioDataAnalysisManager.cpp";
          v203 = 1024;
          v204 = 150;
          v205 = 2048;
          v206 = HIDWORD(v38);
          _os_log_impl(&dword_216CFB000, v138, OS_LOG_TYPE_INFO, "%25s:%-5d Session %llx dispose * Finished *", buf, 0x1Cu);
        }

LABEL_297:
        ADAM::session_lock_exclusive::~session_lock_exclusive(v137);
        v95 = 1;
LABEL_298:
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (!v95)
        {
          if (ADAM::ADAMLogScope(void)::scope)
          {
            v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v9)
              continue;
          }
          else
          {
            v9 = MEMORY[0x24BDACB70];
            v145 = MEMORY[0x24BDACB70];
          }
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "ADAMSequencer.cpp";
            v203 = 1024;
            v204 = 147;
            v205 = 2048;
            v206 = v38;
            _os_log_impl(&dword_216CFB000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sequencer Not ready to reset analyzers for %llx", buf, 0x1Cu);
          }
LABEL_319:

          continue;
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v140 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v140)
            goto LABEL_311;
        }
        else
        {
          v140 = MEMORY[0x24BDACB70];
          v141 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ADAMSequencer.cpp";
          v203 = 1024;
          v204 = 142;
          v205 = 2048;
          v206 = v38;
          _os_log_impl(&dword_216CFB000, v140, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sequencer hard reset analyzers for %llx", buf, 0x1Cu);
        }

LABEL_311:
        v142 = *(_QWORD *)(*((_QWORD *)this + 5) + 240);
        v143 = *(_QWORD **)v142;
        v144 = *(_QWORD **)(v142 + 8);
        while (v143 != v144)
        {
          if ((*(_QWORD *)(*v143 + 16) & v40) != 0)
            (*(void (**)(_QWORD))(*(_QWORD *)*v143 + 48))(*v143);
          ++v143;
        }
        continue;
      case 3:
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v29 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v29)
            goto LABEL_83;
        }
        else
        {
          v29 = MEMORY[0x24BDACB70];
          v43 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          v44 = v3[1];
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ADAMSequencer.cpp";
          v203 = 1024;
          v204 = 153;
          v205 = 2048;
          v206 = v44;
          _os_log_impl(&dword_216CFB000, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sequencer Configure action: %llx", buf, 0x1Cu);
        }

LABEL_83:
        v45 = (ADAM::AudioDataAnalysisManager *)*((_QWORD *)this + 5);
        v46 = v3[1];
        v47 = ADAM::AudioDataAnalysisManager::getNodeDescriptor(v45, v46);
        v48 = *((_QWORD *)v45 + 30);
        v49 = *(_QWORD **)v48;
        v50 = *(_QWORD **)(v48 + 8);
        if (*(_QWORD **)v48 != v50)
        {
          v51 = v47;
          do
          {
            if ((*(_QWORD *)(v51 + 32) & *(_QWORD *)(*v49 + 16)) != 0)
              (*(void (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*v49 + 24))(*v49, v46, v51);
            ++v49;
          }
          while (v49 != v50);
        }
        v52 = v3[1];
        ClientSessionMananger = (std::mutex *)ADAM::AudioDataAnalysisManager::getClientSessionMananger(*((ADAM::AudioDataAnalysisManager **)this + 5), HIDWORD(v52));
        v54 = ClientSessionMananger;
        if (!ClientSessionMananger)
          continue;
        v55 = ClientSessionMananger + 5;
        std::mutex::lock(ClientSessionMananger + 5);
        if (*(_QWORD *)&v54[6].__m_.__opaque[32])
        {
          v56 = *(_QWORD *)(*(_QWORD *)v54[6].__m_.__opaque
                          + ((*(_QWORD *)&v54[6].__m_.__opaque[24] >> 5) & 0x7FFFFFFFFFFFFF8));
          v57 = *(_QWORD *)&v54[6].__m_.__opaque[24];
          v200 = *(_OWORD *)(v56 + 16 * v57);
          if (*((_QWORD *)&v200 + 1))
          {
            v58 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
            v56 = *(_QWORD *)(*(_QWORD *)v54[6].__m_.__opaque
                            + ((*(_QWORD *)&v54[6].__m_.__opaque[24] >> 5) & 0x7FFFFFFFFFFFFF8));
            v57 = *(_QWORD *)&v54[6].__m_.__opaque[24];
          }
          std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100](v56 + 16 * v57);
          v60 = vaddq_s64(*(int64x2_t *)&v54[6].__m_.__opaque[24], (int64x2_t)xmmword_216D3C8C0);
          *(int64x2_t *)&v54[6].__m_.__opaque[24] = v60;
          if (v60.i64[0] >= 0x200uLL)
          {
            operator delete(**(void ***)v54[6].__m_.__opaque);
            *(_QWORD *)v54[6].__m_.__opaque += 8;
            *(_QWORD *)&v54[6].__m_.__opaque[24] -= 256;
          }
          if (*(_DWORD *)(v200 + 8) == (_DWORD)v52)
            goto LABEL_212;
          if (ADAM::ADAMLogScope(void)::once != -1)
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
          if (ADAM::ADAMLogScope(void)::scope)
          {
            v61 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v61)
            {
LABEL_212:
              if (*((_QWORD *)&v200 + 1))
              {
                v113 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
                do
                  v114 = __ldaxr(v113);
                while (__stlxr(v114 - 1, v113));
                if (!v114)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v200 + 1) + 16))(*((_QWORD *)&v200 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v200 + 1));
                }
              }
              goto LABEL_217;
            }
          }
          else
          {
            v61 = MEMORY[0x24BDACB70];
            v111 = MEMORY[0x24BDACB70];
          }
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          {
            v112 = *(_QWORD *)(v200 + 8);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "ADAMClientSessionManager.cpp";
            v203 = 1024;
            v204 = 339;
            v205 = 2048;
            v206 = v112;
            v207 = 1024;
            LODWORD(v208) = v52;
            _os_log_impl(&dword_216CFB000, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d unexpected node id: expected: %llx, actual:%x", buf, 0x22u);
          }

          goto LABEL_212;
        }
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v94 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v94)
            goto LABEL_217;
        }
        else
        {
          v94 = MEMORY[0x24BDACB70];
          v108 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADAMClientSessionManager.cpp";
          v203 = 1024;
          v204 = 344;
          _os_log_impl(&dword_216CFB000, v94, OS_LOG_TYPE_ERROR, "%25s:%-5d config msg queue empty", buf, 0x12u);
        }

LABEL_217:
        std::mutex::unlock(v55);
        continue;
      case 4:
        v10 = v3[1];
        v11 = ADAM::AudioDataAnalysisManager::getNodeDescriptor(*((ADAM::AudioDataAnalysisManager **)this + 5), v10);
        if (!v11)
        {
          if (ADAM::ADAMLogScope(void)::once != -1)
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
          if (ADAM::ADAMLogScope(void)::scope)
          {
            v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v9)
              continue;
          }
          else
          {
            v9 = MEMORY[0x24BDACB70];
            v106 = MEMORY[0x24BDACB70];
          }
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "ADAMSequencer.cpp";
            v203 = 1024;
            v204 = 163;
            v205 = 2048;
            v206 = v10;
            _os_log_impl(&dword_216CFB000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Session %llx: Sequencer getting a invalid node descriptor", buf, 0x1Cu);
          }
          goto LABEL_319;
        }
        v12 = *(_QWORD *)(*((_QWORD *)this + 5) + 248);
        std::mutex::lock((std::mutex *)v12);
        v13 = *(_QWORD **)(v12 + 72);
        if (!v13)
          goto LABEL_59;
        v14 = (_QWORD *)(v12 + 72);
        do
        {
          v15 = v13[4];
          v16 = v15 >= v10;
          if (v15 >= v10)
            v17 = v13;
          else
            v17 = v13 + 1;
          if (v16)
            v14 = v13;
          v13 = (_QWORD *)*v17;
        }
        while (*v17);
        if (v14 == (_QWORD *)(v12 + 72) || v14[4] > v10 || (v18 = v14[5], v19 = v14[6], v18 == v19))
        {
LABEL_59:
          std::mutex::unlock((std::mutex *)v12);
          v24 = (ADAM::AudioDataAnalysisManager *)*((_QWORD *)this + 5);
        }
        else
        {
          v20 = v18 + 8;
          do
          {
            v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v20 - 8) + 8))(*(_QWORD *)(v20 - 8));
            v22 = v21;
            if (v20 == v19)
              v23 = 1;
            else
              v23 = v21;
            v20 += 8;
          }
          while ((v23 & 1) == 0);
          std::mutex::unlock((std::mutex *)v12);
          v24 = (ADAM::AudioDataAnalysisManager *)*((_QWORD *)this + 5);
          if (v22)
          {
            v25 = *((_QWORD *)v24 + 30);
            v26 = *(_DWORD *)(v11 + 40);
            *(_OWORD *)(v25 + 24) = 0u;
            v27 = (ADAM *)(v25 + 24);
            *(_QWORD *)(v25 + 104) = 0;
            *(_OWORD *)(v25 + 88) = 0u;
            *(_OWORD *)(v25 + 72) = 0u;
            *(_OWORD *)(v25 + 56) = 0u;
            *(_OWORD *)(v25 + 40) = 0u;
            ADAM::AudioDataAnalysisManager::instance(v24);
            switch(v26)
            {
              case 2:
                v146 = operator new();
                *(_QWORD *)v146 = 0;
                break;
              case 1:
                v146 = operator new();
                *(_QWORD *)v146 = 0;
                *(_QWORD *)(v146 + 8) = 0;
                *(_DWORD *)(v146 + 16) = 0;
                break;
              case 0:
                ADAM::allocAudioBufferList(v27, (AudioBufferList **)(v11 + 48), (const AudioStreamBasicDescription *)*(unsigned int *)(v11 + 88), 1);
                goto LABEL_325;
              default:
                v148 = 1970168353;
LABEL_365:
                v199 = v148;
                v164 = ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
                v165 = ++ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
                if (!v164)
                {
                  if (ADAM::ADAMLogScope(void)::once != -1)
                    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
                  if (ADAM::ADAMLogScope(void)::scope)
                  {
                    v166 = *(id *)ADAM::ADAMLogScope(void)::scope;
                    if (!v166)
                      goto LABEL_375;
                  }
                  else
                  {
                    v166 = MEMORY[0x24BDACB70];
                    v167 = MEMORY[0x24BDACB70];
                  }
                  if (os_log_type_enabled(v166, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = "ADAMAnalyzerManager.cpp";
                    v203 = 1024;
                    v204 = 72;
                    v205 = 2048;
                    v206 = v10;
                    _os_log_impl(&dword_216CFB000, v166, OS_LOG_TYPE_ERROR, "%25s:%-5d Session %llx: Failed to Fetch Data", buf, 0x1Cu);
                  }

LABEL_375:
                  v165 = ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
                }
                v168 = &ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
LABEL_377:
                if (v165 > 0xFFE)
                  v165 = 0;
                *v168 = v165;
                v159 = v199;
LABEL_380:
                v169 = ADAM::Sequencer::run_impl(void)::errCnt;
                v170 = ++ADAM::Sequencer::run_impl(void)::errCnt;
                if (v169)
                {
                  v171 = &ADAM::Sequencer::run_impl(void)::errCnt;
                  goto LABEL_395;
                }
                if (ADAM::ADAMLogScope(void)::once != -1)
                  dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
                if (ADAM::ADAMLogScope(void)::scope)
                {
                  v172 = *(id *)ADAM::ADAMLogScope(void)::scope;
                  if (!v172)
                    goto LABEL_393;
                }
                else
                {
                  v173 = (void *)MEMORY[0x24BDACB70];
                  v174 = MEMORY[0x24BDACB70];
                  v172 = v173;
                }
                v175 = v172;
                if (os_log_type_enabled(v175, OS_LOG_TYPE_ERROR))
                {
                  v176 = (_QWORD *)(v11 + 8);
                  if (*(char *)(v11 + 31) < 0)
                    v176 = (_QWORD *)*v176;
                  CAX4CCString::CAX4CCString((CAX4CCString *)v211, v159);
                  *(_DWORD *)buf = 136316162;
                  *(_QWORD *)&buf[4] = "ADAMSequencer.cpp";
                  v203 = 1024;
                  v204 = 181;
                  v205 = 2048;
                  v206 = v10;
                  v207 = 2080;
                  v208 = v176;
                  v209 = 2080;
                  v210 = v211;
                  _os_log_impl(&dword_216CFB000, v175, OS_LOG_TYPE_ERROR, "%25s:%-5d Session %llx: Error Analyzing Data, nodeName: %s, err code: %s", buf, 0x30u);
                }

LABEL_393:
                v171 = &ADAM::Sequencer::run_impl(void)::errCnt;
LABEL_394:
                v170 = *v171;
                goto LABEL_395;
            }
            *(_QWORD *)v27 = v146;
LABEL_325:
            v147 = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, HIDWORD(v10));
            v201 = v25 + 32;
            v148 = 1852400673;
            if (v147)
            {
              if (*(_BYTE *)(v147 + 432))
              {
                v149 = *(_QWORD *)v27;
                v150 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((_QWORD *)(v147 + 16), v10);
                if (v150)
                  v148 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v150[3] + 24))(v150[3], v149, v201);
              }
              else
              {
                v148 = 1634625825;
              }
            }
            v155 = ADAM::AnalyzerManager::fetchData(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
            v156 = ++ADAM::AnalyzerManager::fetchData(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
            if (!v155 && v148)
            {
              if (ADAM::ADAMLogScope(void)::once != -1)
                dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
              if (ADAM::ADAMLogScope(void)::scope)
              {
                v157 = *(id *)ADAM::ADAMLogScope(void)::scope;
                if (!v157)
                {
LABEL_362:
                  v163 = ADAM::AnalyzerManager::fetchData(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
                  if (ADAM::AnalyzerManager::fetchData(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt > 0xFFE)
                    v163 = 0;
                  ADAM::AnalyzerManager::fetchData(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt = v163;
                  goto LABEL_365;
                }
              }
              else
              {
                v160 = (void *)MEMORY[0x24BDACB70];
                v161 = MEMORY[0x24BDACB70];
                v157 = v160;
              }
              v162 = v157;
              if (os_log_type_enabled(v162, OS_LOG_TYPE_DEBUG))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)v211, v148);
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "ADAMAnalyzerManager.cpp";
                v203 = 1024;
                v204 = 172;
                v205 = 2048;
                v206 = v10;
                v207 = 2080;
                v208 = v211;
                _os_log_impl(&dword_216CFB000, v162, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session %llx: faild to read buffer: %s", buf, 0x26u);
              }

              goto LABEL_362;
            }
            if (v156 > 0xFFE)
              v156 = 0;
            ADAM::AnalyzerManager::fetchData(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt = v156;
            if (v148)
              goto LABEL_365;
            v199 = 561476709;
            v158 = *(_QWORD **)v25;
            v198 = *(_QWORD **)(v25 + 8);
            if (*(_QWORD **)v25 == v198)
            {
              ADAM::AnalyzerManager::releaseData((ADAM::AnalyzerManager *)v25, (const ADAM::BufferNodeDescriptorBase *)v11);
              goto LABEL_422;
            }
            v159 = 561476709;
            do
            {
              if ((*(_QWORD *)(v11 + 32) & *(_QWORD *)(*v158 + 16)) != 0)
              {
                v159 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD, uint64_t))(*(_QWORD *)*v158 + 32))(*v158, v10, *(_QWORD *)v27, v201);
                if (v159)
                  break;
              }
              ++v158;
            }
            while (v158 != v198);
            ADAM::AnalyzerManager::releaseData((ADAM::AnalyzerManager *)v25, (const ADAM::BufferNodeDescriptorBase *)v11);
            if (v159)
            {
              if (v159 != 561476709)
                goto LABEL_380;
LABEL_422:
              v184 = ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
              v165 = ++ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
              if (v184)
              {
                v168 = &ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
                goto LABEL_377;
              }
              if (ADAM::ADAMLogScope(void)::once != -1)
                dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
              if (ADAM::ADAMLogScope(void)::scope)
              {
                v185 = *(id *)ADAM::ADAMLogScope(void)::scope;
                if (!v185)
                {
LABEL_440:
                  v168 = &ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
                  v165 = ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
                  goto LABEL_377;
                }
              }
              else
              {
                v185 = MEMORY[0x24BDACB70];
                v190 = MEMORY[0x24BDACB70];
              }
              if (os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
              {
                v191 = *(_BYTE **)(v11 + 32);
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "ADAMAnalyzerManager.cpp";
                v203 = 1024;
                v204 = 88;
                v205 = 2048;
                v206 = v10;
                v207 = 2048;
                v208 = v191;
                _os_log_impl(&dword_216CFB000, v185, OS_LOG_TYPE_ERROR, "%25s:%-5d Session %llx: No Analyzer found, nodeEndPointMask: %llx", buf, 0x26u);
              }

              goto LABEL_440;
            }
            v186 = ADAM::AudioDataAnalysisManager::dispatch(*(ADAM::AudioDataAnalysisManager **)(*((_QWORD *)this + 5) + 248), v10, (const ADAM::BufferNodeDescriptorBase *)v11);
            v187 = ADAM::Sequencer::run_impl(void)::errCnt;
            v170 = ++ADAM::Sequencer::run_impl(void)::errCnt;
            if (v187)
            {
              v171 = &ADAM::Sequencer::run_impl(void)::errCnt;
              goto LABEL_395;
            }
            v188 = v186;
            v171 = &ADAM::Sequencer::run_impl(void)::errCnt;
            if (!v186)
            {
LABEL_395:
              if (v170 > 0xFFE)
                v170 = 0;
              *v171 = v170;
              v177 = *(uint64_t **)(*((_QWORD *)this + 5) + 240);
              v178 = *v177;
              v179 = v177[1];
              while (v178 != v179)
              {
                v180 = *(_QWORD **)v178;
                if (*(_BYTE *)(*(_QWORD *)v178 + 112) && (*(_QWORD *)(v11 + 32) & v180[2]) != 0)
                  (*(void (**)(_QWORD *))(*v180 + 40))(v180);
                v178 += 8;
              }
              continue;
            }
            if (ADAM::ADAMLogScope(void)::once != -1)
              dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
            if (ADAM::ADAMLogScope(void)::scope)
            {
              v189 = *(id *)ADAM::ADAMLogScope(void)::scope;
              if (!v189)
              {
LABEL_448:
                v171 = &ADAM::Sequencer::run_impl(void)::errCnt;
                goto LABEL_394;
              }
            }
            else
            {
              v192 = (void *)MEMORY[0x24BDACB70];
              v193 = MEMORY[0x24BDACB70];
              v189 = v192;
            }
            v194 = v189;
            if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
            {
              v195 = (_QWORD *)(v11 + 8);
              if (*(char *)(v11 + 31) < 0)
                v195 = (_QWORD *)*v195;
              CAX4CCString::CAX4CCString((CAX4CCString *)v211, v188);
              *(_DWORD *)buf = 136316162;
              *(_QWORD *)&buf[4] = "ADAMSequencer.cpp";
              v203 = 1024;
              v204 = 177;
              v205 = 2048;
              v206 = v10;
              v207 = 2080;
              v208 = v195;
              v209 = 2080;
              v210 = v211;
              _os_log_impl(&dword_216CFB000, v194, OS_LOG_TYPE_ERROR, "%25s:%-5d Session %llx: Error Dispatch Data, nodeName: %s, err code: %s", buf, 0x30u);
            }

            goto LABEL_448;
          }
        }
        v31 = ADAM::AudioDataAnalysisManager::getClientSessionMananger(v24, HIDWORD(v10));
        if (v31)
        {
          if (*(_BYTE *)(v31 + 432))
          {
            v32 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((_QWORD *)(v31 + 16), v10);
            if (v32)
              (*(void (**)(uint64_t))(*(_QWORD *)v32[3] + 32))(v32[3]);
          }
        }
        v33 = ADAM::Sequencer::run_impl(void)::errCnt;
        v34 = ++ADAM::Sequencer::run_impl(void)::errCnt;
        if (v33)
          goto LABEL_205;
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v35 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v35)
            goto LABEL_204;
        }
        else
        {
          v35 = MEMORY[0x24BDACB70];
          v109 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          v110 = (_QWORD *)(v11 + 8);
          if (*(char *)(v11 + 31) < 0)
            v110 = (_QWORD *)*v110;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "ADAMSequencer.cpp";
          v203 = 1024;
          v204 = 191;
          v205 = 2048;
          v206 = v10;
          v207 = 2080;
          v208 = v110;
          _os_log_impl(&dword_216CFB000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d Session %llx: end point not enabled, nodeName: %s, data discarded", buf, 0x26u);
        }

LABEL_204:
        v34 = ADAM::Sequencer::run_impl(void)::errCnt;
LABEL_205:
        if (v34 > 0xFFE)
          v34 = 0;
        ADAM::Sequencer::run_impl(void)::errCnt = v34;
        continue;
      default:
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v9)
            continue;
        }
        else
        {
          v9 = MEMORY[0x24BDACB70];
          v63 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          v64 = *((_DWORD *)v3 + 4);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ADAMSequencer.cpp";
          v203 = 1024;
          v204 = 197;
          v205 = 1024;
          LODWORD(v206) = v64;
          _os_log_impl(&dword_216CFB000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown Msg Action Type: %d", buf, 0x18u);
        }
        goto LABEL_319;
    }
  }
}

void sub_216D0FDA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CALog::LogObjIfEnabled(id *a1)
{
  id v1;
  id v2;

  if (a1)
  {
    v1 = *a1;
  }
  else
  {
    v1 = (id)MEMORY[0x24BDACB70];
    v2 = MEMORY[0x24BDACB70];
  }
  return v1;
}

void CAX4CCString::CAX4CCString(CAX4CCString *this, unsigned int a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v4 = bswap32(a2);
  *(_DWORD *)((char *)this + 1) = v4;
  v5 = MEMORY[0x24BDAC740];
  if ((v4 & 0x80) != 0)
  {
    if (!__maskrune((char)v4, 0x40000uLL))
      goto LABEL_17;
  }
  else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * (char)v4 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  v6 = *((char *)this + 2);
  if ((v6 & 0x80000000) != 0)
  {
    if (!__maskrune(v6, 0x40000uLL))
      goto LABEL_17;
  }
  else if ((*(_DWORD *)(v5 + 4 * v6 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  v7 = *((char *)this + 3);
  if ((v7 & 0x80000000) != 0)
  {
    if (!__maskrune(v7, 0x40000uLL))
      goto LABEL_17;
LABEL_13:
    v8 = *((char *)this + 4);
    if ((v8 & 0x80000000) != 0)
    {
      if (!__maskrune(v8, 0x40000uLL))
        goto LABEL_17;
    }
    else if ((*(_DWORD *)(v5 + 4 * v8 + 60) & 0x40000) == 0)
    {
      goto LABEL_17;
    }
    *(_WORD *)((char *)this + 5) = 39;
    *(_BYTE *)this = 39;
    return;
  }
  if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x40000) != 0)
    goto LABEL_13;
LABEL_17:
  if (a2 + 199999 > 0x61A7E)
    snprintf((char *)this, 0x10uLL, "0x%x");
  else
    snprintf((char *)this, 0x10uLL, "%d");
}

void sub_216D1008C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
  void *v12;
  void *v13;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_216D10438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_216D106DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_216D10B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  void *v10;
  void *v11;
  void *v12;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_216D10F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216D11334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  void *v9;
  void *v10;
  void *v11;

  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_216D114AC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  void *v3;
  uint64_t v4;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_216D115A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216D11774(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216D1181C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_216D11890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_216D11938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216D11A94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216D11C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  void *v10;
  void *v11;
  std::mutex *v12;
  void *v13;
  void *v14;
  void *v15;

  v15 = v14;

  std::mutex::unlock(v12);
  objc_destroyWeak(&location);

  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_216D11F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_216D120C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216D121D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void sub_216D126D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216D12830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ADAM::MediaExposureWriter::write(uint64_t a1, float *a2, uint64_t a3)
{
  ADAM::AudioDataAnalysisManager *SessionBundleIDs;
  float *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  ADAM::Parameters *v23;
  __n128 v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  NSObject *v32;
  ADAM::Parameters *v33;
  uint64_t Param;
  void *v35;
  void *v36;
  NSObject *v37;
  int v38;
  unsigned int v39;
  NSObject *v40;
  uint64_t ClientSessionMananger;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  char v48;
  int v49;
  unsigned int v50;
  NSObject *v51;
  id v52;
  uint64_t v53;
  uint64_t result;
  NSObject *v55;
  NSObject *v56;
  int v57;
  unsigned int v58;
  NSObject *v59;
  id v60;
  id v61;
  uint64_t v62;
  id v63;
  id v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  void *v68;
  void *v69;
  id v70;
  void *context;
  _BYTE buf[12];
  __int16 v73;
  int v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  ADAM::AudioDataAnalysisManager::instance((ADAM::AudioDataAnalysisManager *)a1);
  SessionBundleIDs = (ADAM::AudioDataAnalysisManager *)ADAM::AudioDataAnalysisManager::fetchSessionBundleIDs(*(_QWORD *)(a1 + 8), (std::vector<std::string> *)(a1 + 48));
  if ((_DWORD)SessionBundleIDs)
  {
    v7 = a2;
    v8 = a3;
    context = (void *)MEMORY[0x219A01060]();
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD16A8]), "initWithString:", &stru_24D616C20);
    v10 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 56) != v10)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "appendString:", v13);

        v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
        if (v14 - 1 > v12)
        {
          objc_msgSend(v9, "appendString:", CFSTR(","));
          v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
        }
        ++v12;
        v11 += 24;
      }
      while (v14 > v12);
    }
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    a3 = v8;
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v15 = *(id *)ADAM::ADAMLogScope(void)::scope;
      a2 = v7;
      if (!v15)
      {
LABEL_16:
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 104) + 24), "setObject:forKey:", v9, CFSTR("_HKPrivateMediaSourceBundleIdentifier"));

        objc_autoreleasePoolPop(context);
        goto LABEL_17;
      }
    }
    else
    {
      v15 = MEMORY[0x24BDACB70];
      v16 = MEMORY[0x24BDACB70];
      a2 = v7;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "MediaExposureWriter.mm";
      v73 = 1024;
      v74 = 191;
      v75 = 2112;
      v76 = (uint64_t)v9;
      _os_log_impl(&dword_216CFB000, v15, OS_LOG_TYPE_INFO, "%25s:%-5d HAE Updated bundleIDs: %@", buf, 0x1Cu);
    }

    goto LABEL_16;
  }
LABEL_17:
  if (*(_QWORD *)(*(_QWORD *)(a1 + 104) + 16))
    goto LABEL_18;
  ADAM::AudioDataAnalysisManager::instance(SessionBundleIDs);
  ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, *(unsigned int *)(a1 + 12));
  if (ClientSessionMananger)
    v42 = ClientSessionMananger + 248;
  else
    v42 = 0;
  if (ClientSessionMananger && *(_QWORD *)v42)
  {
    if (objc_opt_class())
    {
      v43 = (void *)MEMORY[0x219A01060]();
      v44 = objc_msgSend(objc_alloc(MEMORY[0x24BDD3B00]), "initWithName:manufacturer:model:hardwareVersion:firmwareVersion:softwareVersion:localIdentifier:UDIDeviceIdentifier:", *(_QWORD *)v42, *(_QWORD *)(v42 + 8), *(_QWORD *)(v42 + 16), 0, 0, 0, *(_QWORD *)(v42 + 24), 0);
      v45 = *(_QWORD *)(a1 + 104);
      v46 = *(void **)(v45 + 16);
      *(_QWORD *)(v45 + 16) = v44;

      if ((*(_BYTE *)(v42 + 32) & 1) != 0)
      {
        v48 = 1;
      }
      else
      {
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 104) + 16), "manufacturer");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = objc_msgSend(v47, "isEqualToString:", CFSTR("Apple Inc."));

      }
      *(_BYTE *)(*(_QWORD *)(a1 + 104) + 32) = v48;
      objc_autoreleasePoolPop(v43);
      if (*(_QWORD *)(*(_QWORD *)(a1 + 104) + 16))
      {
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v56 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v56)
            goto LABEL_18;
        }
        else
        {
          v56 = MEMORY[0x24BDACB70];
          v61 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          v62 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 16);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "MediaExposureWriter.mm";
          v73 = 1024;
          v74 = 168;
          v75 = 2112;
          v76 = v62;
          _os_log_impl(&dword_216CFB000, v56, OS_LOG_TYPE_DEFAULT, "%25s:%-5d HAE HKDevice created: %@", buf, 0x1Cu);
        }

LABEL_18:
        v17 = *(_QWORD *)(a1 + 104);
        v18 = *(void **)(v17 + 48);
        if (!v18)
        {
          v19 = objc_alloc_init(MEMORY[0x24BE0A230]);
          objc_msgSend(v19, "getPreferenceFor:", CFSTR("_ADAFPreferenceKeyHAENotificationIsMandatory"));
          v20 = objc_claimAutoreleasedReturnValue();
          v21 = *(_QWORD *)(a1 + 104);
          v22 = *(void **)(v21 + 48);
          *(_QWORD *)(v21 + 48) = v20;

          v23 = (ADAM::Parameters *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 104) + 48), "BOOLValue");
          if ((_DWORD)v23)
          {
            ADAM::Parameters::instance(v23);
            CFPreferencesAppSynchronize(CFSTR("com.apple.coreaudio"));
            (***(void (****)(_QWORD))(ADAM::Parameters::instance(void)::gParams + 176))(*(_QWORD *)(ADAM::Parameters::instance(void)::gParams + 176));
            if (objc_msgSend(v19, "shouldSufaceHAENotificationMigrationAlert"))
              dispatch_async(MEMORY[0x24BDAC9B8], &__block_literal_global_248);
          }

          v17 = *(_QWORD *)(a1 + 104);
          v18 = *(void **)(v17 + 48);
        }
        if (ADAM::haeMeasurementEnabled((ADAM *)*(unsigned __int8 *)(v17 + 32), objc_msgSend(v18, "BOOLValue")))
        {
          v24.n128_f32[0] = *a2;
          if (*a2 > 0.00000011921)
          {
            if (*(_QWORD *)(a1 + 112) || !objc_opt_class())
              goto LABEL_63;
            v25 = (void *)MEMORY[0x219A01060]();
            if (*(_QWORD *)(a3 + 8) <= (unint64_t)ADAM::MediaExposureWriter::writeToHealthKit(ADAM::SPLData const*,ADAM::Metadata const&)::prevTimeStamp)
            {
              if (ADAM::ADAMLogScope(void)::once != -1)
                dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
              if (ADAM::ADAMLogScope(void)::scope)
              {
                v32 = *(id *)ADAM::ADAMLogScope(void)::scope;
                if (!v32)
                  goto LABEL_115;
              }
              else
              {
                v32 = MEMORY[0x24BDACB70];
                v64 = MEMORY[0x24BDACB70];
              }
              if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
              {
                v65 = *(_QWORD *)(a3 + 8);
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "MediaExposureWriter.mm";
                v73 = 1024;
                v74 = 208;
                v75 = 2048;
                v76 = ADAM::MediaExposureWriter::writeToHealthKit(ADAM::SPLData const*,ADAM::Metadata const&)::prevTimeStamp;
                v77 = 2048;
                v78 = v65;
                _os_log_impl(&dword_216CFB000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d A out of order timestamp received for HAE: %llu (p) vs. %llu (c)", buf, 0x26u);
              }
LABEL_114:

LABEL_115:
              objc_autoreleasePoolPop(v25);
LABEL_63:
              result = *(_QWORD *)(a1 + 72);
              if (result)
              {
                *(_QWORD *)(a1 + 72) = 0;
                (*(void (**)(uint64_t, __n128))(*(_QWORD *)result + 40))(result, v24);
                return 0;
              }
              return result;
            }
            ADAM::MediaExposureWriter::writeToHealthKit(ADAM::SPLData const*,ADAM::Metadata const&)::prevTimeStamp = *(_QWORD *)(a3 + 8);
            v26 = objc_alloc(MEMORY[0x24BDD3E58]);
            objc_msgSend(MEMORY[0x24BDD1880], "UUID");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            ADAM::getSampleDateInterval(*(ADAM **)(a3 + 8), a2[4]);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            v29 = (void *)MEMORY[0x24BDD3E48];
            objc_msgSend(MEMORY[0x24BDD4050], "unitFromString:", CFSTR("dBASPL"));
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v29, "quantityWithUnit:doubleValue:", v30, *a2);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            v32 = objc_msgSend(v26, "initWithIdentifier:dateInterval:quantity:resumeContext:", v27, v28, v31, 0);

            v33 = (ADAM::Parameters *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 104) + 48), "BOOLValue");
            if ((_DWORD)v33)
            {
              ADAM::Parameters::instance(v33);
              Param = ADAM::Parameters::GetParamValue<BOOL>(0xBu);
              v35 = *(void **)(*(_QWORD *)(a1 + 104) + 24);
              objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", Param);
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v35, "setObject:forKey:", v36, *MEMORY[0x24BDD43A0]);

            }
            if (ADAM::ADAMLogScope(void)::once != -1)
              dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
            if (ADAM::ADAMLogScope(void)::scope)
            {
              v37 = *(id *)ADAM::ADAMLogScope(void)::scope;
              if (!v37)
              {
LABEL_113:
                v68 = *(void **)(*(_QWORD *)(a1 + 104) + 8);
                *(_QWORD *)buf = v32;
                objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", buf, 1);
                v69 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v68, "insertDatums:device:metadata:completion:", v69, *(_QWORD *)(*(_QWORD *)(a1 + 104) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 104) + 24), 0);

                goto LABEL_114;
              }
            }
            else
            {
              v37 = MEMORY[0x24BDACB70];
              v66 = MEMORY[0x24BDACB70];
            }
            if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
            {
              v67 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 24);
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "MediaExposureWriter.mm";
              v73 = 1024;
              v74 = 228;
              v75 = 2112;
              v76 = (uint64_t)v32;
              v77 = 2112;
              v78 = v67;
              _os_log_impl(&dword_216CFB000, v37, OS_LOG_TYPE_INFO, "%25s:%-5d %@, metadata: %@", buf, 0x26u);
            }

            goto LABEL_113;
          }
        }
        v38 = ADAM::MediaExposureWriter::write(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
        v39 = ++ADAM::MediaExposureWriter::write(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
        if (v38)
        {
LABEL_60:
          if (v39 > 0x13)
            v39 = 0;
          ADAM::MediaExposureWriter::write(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt = v39;
          goto LABEL_63;
        }
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v40 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v40)
          {
LABEL_59:
            v39 = ADAM::MediaExposureWriter::write(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
            goto LABEL_60;
          }
        }
        else
        {
          v40 = MEMORY[0x24BDACB70];
          v52 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          *(double *)&v53 = *a2;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "MediaExposureWriter.mm";
          v73 = 1024;
          v74 = 131;
          v75 = 2048;
          v76 = v53;
          _os_log_impl(&dword_216CFB000, v40, OS_LOG_TYPE_DEFAULT, "%25s:%-5d HAE writing to healthkit disabled or zero-db value %f", buf, 0x1Cu);
        }

        goto LABEL_59;
      }
      v57 = ADAM::MediaExposureWriter::createHKDevice(void)::errCnt;
      v58 = ++ADAM::MediaExposureWriter::createHKDevice(void)::errCnt;
      if (v57)
        goto LABEL_121;
      if (ADAM::ADAMLogScope(void)::once != -1)
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
      if (ADAM::ADAMLogScope(void)::scope)
      {
        v59 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v59)
        {
LABEL_120:
          v58 = ADAM::MediaExposureWriter::createHKDevice(void)::errCnt;
LABEL_121:
          if (v58 > 0x1D)
            v58 = 0;
          ADAM::MediaExposureWriter::createHKDevice(void)::errCnt = v58;
          return 560232035;
        }
      }
      else
      {
        v59 = MEMORY[0x24BDACB70];
        v70 = MEMORY[0x24BDACB70];
      }
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "MediaExposureWriter.mm";
        v73 = 1024;
        v74 = 170;
        _os_log_impl(&dword_216CFB000, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d HAE Device failed to be created", buf, 0x12u);
      }

      goto LABEL_120;
    }
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v55 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v55)
        return 0xFFFFFFFFLL;
    }
    else
    {
      v55 = MEMORY[0x24BDACB70];
      v63 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "MediaExposureWriter.mm";
      v73 = 1024;
      v74 = 148;
      _os_log_impl(&dword_216CFB000, v55, OS_LOG_TYPE_DEFAULT, "%25s:%-5d HAE HKDevice cannot be created: HealthKit is not available", buf, 0x12u);
    }

    return 0xFFFFFFFFLL;
  }
  v49 = ADAM::MediaExposureWriter::createHKDevice(void)::errCnt;
  v50 = ++ADAM::MediaExposureWriter::createHKDevice(void)::errCnt;
  if (!v49)
  {
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v51 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v51)
      {
LABEL_87:
        v50 = ADAM::MediaExposureWriter::createHKDevice(void)::errCnt;
        goto LABEL_88;
      }
    }
    else
    {
      v51 = MEMORY[0x24BDACB70];
      v60 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "MediaExposureWriter.mm";
      v73 = 1024;
      v74 = 144;
      _os_log_impl(&dword_216CFB000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d HAE Device information must be valid", buf, 0x12u);
    }

    goto LABEL_87;
  }
LABEL_88:
  if (v50 > 0x1D)
    v50 = 0;
  ADAM::MediaExposureWriter::createHKDevice(void)::errCnt = v50;
  return 560555629;
}

void sub_216D133B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ADAM::Writer::isEnabled(ADAM::Writer *this)
{
  return 1;
}

void ADAM::Writer::detach(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*a2 == a1 && *(_BYTE *)(a1 + 80))
  {
    std::mutex::lock(&ADAM::Writer::getAsyncMutex(void)::sAsyncMutex);
    if (*(_BYTE *)(a1 + 81))
    {
      v4 = *a2;
      *a2 = 0;
      v5 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v4;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    }
    std::mutex::unlock(&ADAM::Writer::getAsyncMutex(void)::sAsyncMutex);
  }
}

void ADAM::MediaExposureWriter::~MediaExposureWriter(ADAM::MediaExposureWriter *this)
{
  ADAM::MediaExposureWriter::~MediaExposureWriter(this);
  JUMPOUT(0x219A00DF0);
}

{
  void *v2;
  void *v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  id *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24D615850;
  v2 = (void *)MEMORY[0x219A01060]();
  v3 = *(void **)(*((_QWORD *)this + 13) + 8);
  if (v3)
    objc_msgSend(v3, "finishWithCompletion:", &__block_literal_global);
  objc_autoreleasePoolPop(v2);
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v4 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v4)
      goto LABEL_12;
  }
  else
  {
    v4 = MEMORY[0x24BDACB70];
    v5 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v8 = 136315394;
    v9 = "MediaExposureWriter.mm";
    v10 = 1024;
    v11 = 102;
    _os_log_impl(&dword_216CFB000, v4, OS_LOG_TYPE_INFO, "%25s:%-5d HAE writer destroyed", (uint8_t *)&v8, 0x12u);
  }

LABEL_12:
  v6 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  v7 = (id *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v7)
    std::default_delete<ADAM::MediaExposureWriter::HealthKitWriterInternalState>::operator()[abi:ne180100](v7);
  ADAM::Writer::~Writer(this);
}

void sub_216D13664(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::default_delete<ADAM::MediaExposureWriter::HealthKitWriterInternalState>::operator()[abi:ne180100](id *a1)
{

  JUMPOUT(0x219A00DF0);
}

void ADAM::Writer::~Writer(ADAM::Writer *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &unk_24D6165F0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    v3 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  }
  v4 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void ___ZNK4ADAM19MediaExposureWriter21surfaceMigrationAlertEv_block_invoke()
{
  NSObject *v0;
  id v1;
  id v2;
  ADAM *v3;
  void *v4;
  ADAM *v5;
  void *v6;
  ADAM *v7;
  void *v8;
  ADAM *v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  id v19;
  const char *v20;
  id v21;
  id v22;
  id v23;
  CFOptionFlags v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  id v30;
  _QWORD v31[2];
  _QWORD v32[3];

  v32[2] = *MEMORY[0x24BDAC8D0];
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v0 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v0)
      goto LABEL_10;
  }
  else
  {
    v0 = MEMORY[0x24BDACB70];
    v1 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v26 = "MediaExposureWriter.mm";
    v27 = 1024;
    v28 = 350;
    _os_log_impl(&dword_216CFB000, v0, OS_LOG_TYPE_DEFAULT, "%25s:%-5d surfacing migration alert...", buf, 0x12u);
  }

LABEL_10:
  v2 = objc_alloc_init(MEMORY[0x24BE0A230]);
  objc_msgSend(v2, "didSurfaceMigrationAlert");

  v24 = 0;
  ADAM::LocalizationUtilityGetBundle(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (ADAM *)objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("MigrationAlertTitle"), &stru_24D616C20, 0);
  ADAM::LocalizationUtilityGetBundle(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (ADAM *)objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("MigrationAlertMessage"), &stru_24D616C20, 0);
  ADAM::LocalizationUtilityGetBundle(v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (ADAM *)objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("MigrationAlertButtonOK"), &stru_24D616C20, 0);
  ADAM::LocalizationUtilityGetBundle(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  CFUserNotificationDisplayAlert(0.0, 1uLL, 0, 0, 0, (CFStringRef)v5, (CFStringRef)v7, (CFStringRef)v9, (CFStringRef)objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("MigrationAlertButtonSettings"), &stru_24D616C20, 0), 0, &v24);

  if (!v24)
  {
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v12 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v12)
        return;
    }
    else
    {
      v12 = MEMORY[0x24BDACB70];
      v19 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v26 = "MediaExposureWriter.mm";
      v27 = 1024;
      v28 = 381;
      v20 = "%25s:%-5d Migration Alert -> OK";
LABEL_43:
      _os_log_impl(&dword_216CFB000, v12, OS_LOG_TYPE_DEFAULT, v20, buf, 0x12u);
    }
LABEL_49:

    return;
  }
  if (v24 == 1)
  {
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v11 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v11)
        goto LABEL_31;
    }
    else
    {
      v11 = MEMORY[0x24BDACB70];
      v13 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v26 = "MediaExposureWriter.mm";
      v27 = 1024;
      v28 = 366;
      _os_log_impl(&dword_216CFB000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Migration Alert -> Settings", buf, 0x12u);
    }

LABEL_31:
    v14 = *MEMORY[0x24BE38310];
    v31[0] = *MEMORY[0x24BE38320];
    v31[1] = v14;
    v32[0] = MEMORY[0x24BDBD1C8];
    v32[1] = MEMORY[0x24BDBD1C8];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v32, v31, 2);
    v12 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCF48], "URLWithString:", *MEMORY[0x24BE3E798]);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDC1548], "defaultWorkspace");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 0;
    objc_msgSend(v16, "openSensitiveURL:withOptions:error:", v15, v12, &v23);
    v17 = v23;

    if (v17)
    {
      if (ADAM::ADAMLogScope(void)::once != -1)
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
      if (ADAM::ADAMLogScope(void)::scope)
      {
        v18 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v18)
          goto LABEL_48;
      }
      else
      {
        v18 = MEMORY[0x24BDACB70];
        v22 = MEMORY[0x24BDACB70];
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v26 = "MediaExposureWriter.mm";
        v27 = 1024;
        v28 = 376;
        v29 = 2112;
        v30 = v17;
        _os_log_impl(&dword_216CFB000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to open settings because %@", buf, 0x1Cu);
      }

    }
LABEL_48:

    goto LABEL_49;
  }
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (!ADAM::ADAMLogScope(void)::scope)
  {
    v12 = MEMORY[0x24BDACB70];
    v21 = MEMORY[0x24BDACB70];
LABEL_41:
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v26 = "MediaExposureWriter.mm";
      v27 = 1024;
      v28 = 384;
      v20 = "%25s:%-5d Migration Alert -> Unknown";
      goto LABEL_43;
    }
    goto LABEL_49;
  }
  v12 = *(id *)ADAM::ADAMLogScope(void)::scope;
  if (v12)
    goto LABEL_41;
}

void sub_216D13D6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ADAM::MediaExposureWriter::MediaExposureWriter(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  id *v9;
  void *v10;
  id v11;
  void **v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  id v31;
  const char *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  BOOL v38;
  const std::string::value_type *v39;
  const std::string::value_type *v40;
  std::string::value_type *v41;
  const std::string::value_type *v42;
  uint64_t v44;
  uint64_t v45;
  id v47;
  int v48;
  const char *v49;
  __int16 v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &unk_24D6165F0;
  *(_QWORD *)(a1 + 8) = a2;
  v6 = (std::string *)(a1 + 16);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    v6->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_QWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_WORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = &off_24D615850;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v8 = operator new();
  *(_QWORD *)(v8 + 48) = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)v8 = 0u;
  v9 = *(id **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v8;
  if (v9)
    std::default_delete<ADAM::MediaExposureWriter::HealthKitWriterInternalState>::operator()[abi:ne180100](v9);
  if (objc_opt_class() && objc_msgSend(MEMORY[0x24BDD3C38], "isHealthDataAvailable"))
  {
    v10 = (void *)MEMORY[0x219A01060]();
    v11 = objc_alloc_init(MEMORY[0x24BDD3C38]);
    v12 = *(void ***)(a1 + 104);
    v13 = *v12;
    *v12 = v11;

    v14 = objc_alloc(MEMORY[0x24BDD3AE0]);
    v15 = **(_QWORD **)(a1 + 104);
    objc_msgSend(MEMORY[0x24BDD3E78], "quantityTypeForIdentifier:", *MEMORY[0x24BDD35A8]);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v14, "initWithHealthStore:bundleIdentifier:quantityType:", v15, CFSTR("com.apple.coreaudio.adam.hae"), v16);
    v18 = *(_QWORD *)(a1 + 104);
    v19 = *(void **)(v18 + 8);
    *(_QWORD *)(v18 + 8) = v17;

    v20 = *(_QWORD *)(a1 + 104);
    v21 = *(void **)(v20 + 16);
    *(_QWORD *)(v20 + 16) = 0;

    v22 = objc_alloc_init(MEMORY[0x24BDBCED8]);
    v23 = *(_QWORD *)(a1 + 104);
    v24 = *(void **)(v23 + 24);
    *(_QWORD *)(v23 + 24) = v22;

    v25 = *(_QWORD *)(a1 + 104);
    v26 = *(void **)(v25 + 48);
    *(_QWORD *)(v25 + 48) = 0;

    objc_autoreleasePoolPop(v10);
    if (*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8))
      goto LABEL_24;
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v27 = *(id *)ADAM::ADAMLogScope(void)::scope;
      v30 = v27;
      if (!v27)
        goto LABEL_24;
    }
    else
    {
      v30 = MEMORY[0x24BDACB70];
      v47 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v48 = 136315394;
      v49 = "MediaExposureWriter.mm";
      v50 = 1024;
      v51 = 76;
      v32 = "%25s:%-5d HAE Failed to create HKHealthDataCollector.";
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (!ADAM::ADAMLogScope(void)::scope)
  {
    v30 = MEMORY[0x24BDACB70];
    v31 = MEMORY[0x24BDACB70];
LABEL_20:
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v48 = 136315394;
      v49 = "MediaExposureWriter.mm";
      v50 = 1024;
      v51 = 79;
      v32 = "%25s:%-5d HAE Failed to create HKHealthStore. Health data unavailable.";
LABEL_22:
      _os_log_impl(&dword_216CFB000, v30, OS_LOG_TYPE_ERROR, v32, (uint8_t *)&v48, 0x12u);
    }
LABEL_23:

    goto LABEL_24;
  }
  v27 = *(id *)ADAM::ADAMLogScope(void)::scope;
  v30 = v27;
  if (v27)
    goto LABEL_20;
LABEL_24:
  v33 = (void *)MEMORY[0x219A01060](v27, v28, v29);
  v34 = objc_msgSend(objc_alloc(MEMORY[0x24BE3E7F0]), "initWithBundleIdentifier:", CFSTR("com.apple.coreaudio.adam.hae"));
  v35 = *(_QWORD *)(a1 + 104);
  v36 = *(void **)(v35 + 40);
  *(_QWORD *)(v35 + 40) = v34;

  objc_autoreleasePoolPop(v33);
  v37 = *((unsigned __int8 *)a3 + 23);
  v38 = (v37 & 0x80u) != 0;
  if ((v37 & 0x80u) != 0)
    v37 = *((_QWORD *)a3 + 1);
  if (v38)
    v39 = *(const std::string::value_type **)a3;
  else
    v39 = (const std::string::value_type *)a3;
  if (v37 >= 6)
  {
    v40 = &v39[v37];
    v41 = (std::string::value_type *)v39;
    do
    {
      v42 = (const std::string::value_type *)memchr(v41, 88, v37 - 5);
      if (!v42)
        break;
      if (*(_DWORD *)v42 == 1700021080 && *((_WORD *)v42 + 2) == 29811)
      {
        if (v42 != v40 && v42 == v39)
        {
          v44 = operator new();
          ADAM::HAENotificationFileWriter::HAENotificationFileWriter(v44, a2, a3);
          v45 = *(_QWORD *)(a1 + 112);
          *(_QWORD *)(a1 + 112) = v44;
          if (v45)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
        }
        return a1;
      }
      v41 = (std::string::value_type *)(v42 + 1);
      v37 = v40 - v41;
    }
    while (v40 - v41 >= 6);
  }
  return a1;
}

void sub_216D14210(_Unwind_Exception *a1)
{
  ADAM::Writer *v1;
  uint64_t v2;
  uint64_t v4;
  id *v5;

  MEMORY[0x219A00DF0](v2, 0x10F3C403C957076);
  v4 = *((_QWORD *)v1 + 14);
  *((_QWORD *)v1 + 14) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v5 = (id *)*((_QWORD *)v1 + 13);
  *((_QWORD *)v1 + 13) = 0;
  if (v5)
    std::default_delete<ADAM::MediaExposureWriter::HealthKitWriterInternalState>::operator()[abi:ne180100](v5);
  ADAM::Writer::~Writer(v1);
  _Unwind_Resume(a1);
}

void std::vector<ADAMServerDelegate * {__weak}>::push_back[abi:ne180100](uint64_t a1, id *from)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id *v14;
  id *v15;
  unint64_t v16;
  uint64_t v17;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >= v5)
  {
    v8 = (uint64_t)(v6 - *(_QWORD *)a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    v9 = v5 - *(_QWORD *)a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v17 = v4;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v11);
    else
      v12 = 0;
    v13 = v11;
    v14 = (id *)(v11 + 8 * v8);
    v16 = v11 + 8 * v12;
    objc_copyWeak(v14, from);
    v15 = v14 + 1;
    std::vector<ADAMServerDelegate * {__weak}>::__swap_out_circular_buffer((id **)a1, &v13);
    v7 = *(_QWORD *)(a1 + 8);
    std::__split_buffer<ADAMServerDelegate * {__weak}>::~__split_buffer((uint64_t)&v13);
  }
  else
  {
    objc_copyWeak(*(id **)(a1 + 8), from);
    v7 = v6 + 8;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

void std::vector<ADAMServerDelegate * {__weak}>::__swap_out_circular_buffer(id **a1, _QWORD *a2)
{
  id *v4;
  id *v5;
  id *v6;
  id *v7;
  id *v8;
  id *v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = (id *)a2[1];
  while (v4 != v5)
    objc_moveWeak(--v6, --v4);
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = (id *)a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = (id *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<ADAMServerDelegate * {__weak}>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    objc_destroyWeak((id *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::make_unique[abi:ne180100]<AudioIssueDetectorDependencyInjection>(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t result;
  _QWORD *v35;
  _QWORD *v36;
  _BYTE v37[131];

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  v36 = (_QWORD *)v2;
  v3 = (_QWORD *)operator new();
  *v3 = &off_24D615AA8;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (_QWORD *)operator new();
  *v5 = &off_24D615B18;
  v6 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v2 + 8) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = operator new();
  v35 = a1;
  *(_QWORD *)v7 = &off_24D615A50;
  v8 = caulk::concurrent::messenger::shared_logging_priority((caulk::concurrent::messenger *)v7);
  MEMORY[0x219A00A48](v7 + 8, 0, v8);
  v9 = 0;
  *(_QWORD *)(v7 + 24) = 0;
  v10 = (uint64_t **)(v7 + 24);
  *(_DWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  do
  {
    v11 = operator new();
    v12 = v11;
    *(_OWORD *)(v11 + 356) = 0u;
    *(_OWORD *)(v11 + 328) = 0u;
    *(_OWORD *)(v11 + 344) = 0u;
    memset(&v37[3], 0, 128);
    *(_QWORD *)&v13 = -1;
    *((_QWORD *)&v13 + 1) = -1;
    *(_OWORD *)(v11 + 504) = v13;
    *(_OWORD *)(v11 + 520) = v13;
    *(_DWORD *)(v11 + 16) = 0;
    *(_QWORD *)v11 = &off_24D615A80;
    *(_QWORD *)(v11 + 8) = 0;
    *(_OWORD *)(v11 + 272) = 0u;
    *(_OWORD *)(v11 + 288) = 0u;
    *(_OWORD *)(v11 + 240) = 0u;
    *(_OWORD *)(v11 + 256) = 0u;
    *(_OWORD *)(v11 + 208) = 0u;
    *(_OWORD *)(v11 + 224) = 0u;
    *(_OWORD *)(v11 + 176) = 0u;
    *(_OWORD *)(v11 + 192) = 0u;
    *(_OWORD *)(v11 + 144) = 0u;
    *(_OWORD *)(v11 + 160) = 0u;
    *(_OWORD *)(v11 + 112) = 0u;
    *(_OWORD *)(v11 + 128) = 0u;
    *(_OWORD *)(v11 + 80) = 0u;
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 300) = 0u;
    *(_DWORD *)(v11 + 316) = 7;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 324) = 0;
    *(_BYTE *)(v11 + 372) = 0;
    *(_OWORD *)(v11 + 469) = *(_OWORD *)&v37[96];
    *(_OWORD *)(v11 + 485) = *(_OWORD *)&v37[112];
    *(_DWORD *)(v11 + 500) = 0;
    *(_OWORD *)(v11 + 405) = *(_OWORD *)&v37[32];
    *(_OWORD *)(v11 + 421) = *(_OWORD *)&v37[48];
    *(_OWORD *)(v11 + 437) = *(_OWORD *)&v37[64];
    *(_OWORD *)(v11 + 453) = *(_OWORD *)&v37[80];
    *(_OWORD *)(v11 + 373) = *(_OWORD *)v37;
    *(_OWORD *)(v11 + 389) = *(_OWORD *)&v37[16];
    *(_DWORD *)(v11 + 536) = 0;
    *(_QWORD *)(v11 + 544) = 0;
    *(_BYTE *)(v11 + 552) = 0;
    v15 = *(uint64_t **)(v7 + 32);
    v14 = *(_QWORD *)(v7 + 40);
    if ((unint64_t)v15 >= v14)
    {
      v17 = *v10;
      v18 = v15 - *v10;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61)
        std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
      v20 = v14 - (_QWORD)v17;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v22 = (char *)operator new(8 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = (uint64_t *)&v22[8 * v18];
      *v23 = v12;
      v16 = v23 + 1;
      while (v15 != v17)
      {
        v24 = *--v15;
        *v15 = 0;
        *--v23 = v24;
      }
      v25 = *(_OWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 24) = v23;
      *(_QWORD *)(v7 + 32) = v16;
      *(_QWORD *)(v7 + 40) = &v22[8 * v21];
      v26 = (_QWORD *)*((_QWORD *)&v25 + 1);
      v27 = (_QWORD *)v25;
      while (v26 != v27)
      {
        v29 = *--v26;
        v28 = v29;
        *v26 = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      }
      if (v27)
        operator delete(v27);
    }
    else
    {
      *v15 = v11;
      v16 = v15 + 1;
    }
    *(_QWORD *)(v7 + 32) = v16;
    ++v9;
  }
  while (v9 != 16);
  v30 = v36[2];
  v36[2] = v7;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = (_QWORD *)operator new();
  *v31 = &off_24D615B40;
  v32 = v36[3];
  v36[3] = v31;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = (_QWORD *)operator new();
  *v33 = &off_24D615B68;
  result = v36[4];
  v36[4] = v33;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *v35 = v36;
  return result;
}

void sub_216D149A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v13 = a12[4];
  a12[4] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = a12[3];
  a12[3] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = a12[2];
  a12[2] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = a12[1];
  a12[1] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *a12;
  *a12 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  MEMORY[0x219A00DF0](a12, 0x20C40769AC3DALL);
  _Unwind_Resume(a1);
}

uint64_t *std::default_delete<AudioIssueDetectorDependencyInjection>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v1 = result;
    v2 = result[4];
    v1[4] = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[3];
    v1[3] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[2];
    v1[2] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[1];
    v1[1] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *v1;
    *v1 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    JUMPOUT(0x219A00DF0);
  }
  return result;
}

void AudioIssueDetectorDispose(unint64_t a1)
{
  unsigned int v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD v17[2];
  char v18;

  SingletonManagerInstance();
  std::mutex::lock((std::mutex *)&SingletonManagerInstance(void)::sInstance);
  do
    v2 = __ldaxr((unsigned int *)&dword_253D97770);
  while (__stlxr(v2 + 1, (unsigned int *)&dword_253D97770));
  v3 = qword_253D97748;
  if (qword_253D97748)
  {
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)qword_253D97748);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = a1;
      if (qword_253D97748 <= a1)
        v5 = a1 % qword_253D97748;
    }
    else
    {
      v5 = (qword_253D97748 - 1) & a1;
    }
    v6 = *(uint64_t ***)(qword_253D97740 + 8 * v5);
    if (v6)
    {
      v7 = *v6;
      if (v7)
      {
        v8 = qword_253D97748 - 1;
        while (1)
        {
          v9 = v7[1];
          if (v9 == a1)
          {
            if (v7[2] == a1)
            {
              if (v4.u32[0] > 1uLL)
              {
                if (qword_253D97748 <= a1)
                  a1 %= (unint64_t)qword_253D97748;
              }
              else
              {
                a1 &= v8;
              }
              v10 = *(uint64_t **)(qword_253D97740 + 8 * a1);
              do
              {
                v11 = v10;
                v10 = (uint64_t *)*v10;
              }
              while (v10 != v7);
              if (v11 == &qword_253D97750)
                goto LABEL_38;
              v12 = v11[1];
              if (v4.u32[0] > 1uLL)
              {
                if (v12 >= qword_253D97748)
                  v12 %= (unint64_t)qword_253D97748;
              }
              else
              {
                v12 &= v8;
              }
              if (v12 != a1)
              {
LABEL_38:
                if (!*v7)
                  goto LABEL_39;
                v13 = *(_QWORD *)(*v7 + 8);
                if (v4.u32[0] > 1uLL)
                {
                  if (v13 >= qword_253D97748)
                    v13 %= (unint64_t)qword_253D97748;
                }
                else
                {
                  v13 &= v8;
                }
                if (v13 != a1)
LABEL_39:
                  *(_QWORD *)(qword_253D97740 + 8 * a1) = 0;
              }
              v14 = *v7;
              if (*v7)
              {
                v15 = *(_QWORD *)(v14 + 8);
                if (v4.u32[0] > 1uLL)
                {
                  if (v15 >= v3)
                    v15 %= v3;
                }
                else
                {
                  v15 &= v8;
                }
                if (v15 != a1)
                {
                  *(_QWORD *)(qword_253D97740 + 8 * v15) = v11;
                  v14 = *v7;
                }
              }
              *v11 = v14;
              *v7 = 0;
              --qword_253D97758;
              v17[0] = v7;
              v17[1] = &qword_253D97750;
              v18 = 1;
              std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,void *>>>>::reset[abi:ne180100]((uint64_t)v17);
              goto LABEL_48;
            }
          }
          else
          {
            if (v4.u32[0] > 1uLL)
            {
              if (v9 >= qword_253D97748)
                v9 %= (unint64_t)qword_253D97748;
            }
            else
            {
              v9 &= v8;
            }
            if (v9 != v5)
              goto LABEL_48;
          }
          v7 = (uint64_t *)*v7;
          if (!v7)
            goto LABEL_48;
        }
      }
    }
  }
  do
LABEL_48:
    v16 = __ldaxr((unsigned int *)&dword_253D97770);
  while (__stlxr(v16 - 1, (unsigned int *)&dword_253D97770));
  std::mutex::unlock((std::mutex *)&SingletonManagerInstance(void)::sInstance);
}

uint64_t AudioIssueDetectorReset(unint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t *i;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  unsigned __int8 v14;
  NSObject *v15;
  unsigned __int8 v16;
  NSObject *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  char *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  SingletonManagerInstance();
  std::mutex::lock((std::mutex *)&SingletonManagerInstance(void)::sInstance);
  v2 = std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>>>::find<long long>(a1);
  if (!v2)
  {
    v18 = 0xFFFFFFFFLL;
    goto LABEL_30;
  }
  v4 = v2[3];
  v3 = (std::__shared_weak_count *)v2[4];
  if (!v3)
  {
    v7 = 0;
    if (v4)
      goto LABEL_6;
LABEL_25:
    v18 = 0xFFFFFFFFLL;
    if (!v7)
      goto LABEL_30;
    goto LABEL_26;
  }
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  v7 = v3;
  if (!v4)
    goto LABEL_25;
LABEL_6:
  for (i = *(uint64_t **)(v4 + 24); i; i = (uint64_t *)*i)
  {
    rtaid::Detector::checkAndResetAnalyzers(v4, i + 3);
    *((_DWORD *)i + 9) = 0;
    i[6] = 0;
    v9 = i[3];
    v10 = *(_DWORD **)(v9 + 192);
    v11 = *(_QWORD *)(v9 + 200) - (_QWORD)v10;
    if (v11)
    {
      v12 = v11 >> 2;
      v13 = *(_DWORD **)(v9 + 216);
      if (v12 <= 1)
        v12 = 1;
      do
      {
        *v10++ = 0;
        *v13++ = 0;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v9 + 244) = 0;
    rtaid::DetectorNode::resetSilenceAnalyzerErrorState(*(OpaqueAudioComponentInstance **)(v9 + 32));
    *(_DWORD *)(v9 + 168) = 0;
    atomic_store(0, (unsigned __int8 *)(v9 + 408));
    *(_BYTE *)(v9 + 4) = 0;
    {
      rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
    }
    v15 = rtaid::get_log(void)::rtaid_os_log;
    if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136316162;
      v23 = "DetectorNode.cpp";
      v24 = 1024;
      v25 = 168;
      v26 = 1040;
      v27 = 19;
      v28 = 2080;
      v29 = "rtaid::DetectorNode]";
      v30 = 2048;
      v31 = v9;
      _os_log_impl(&dword_216CFB000, v15, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] reset", buf, 0x2Cu);
    }
  }
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  v17 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136316162;
    v23 = "Detector.cpp";
    v24 = 1024;
    v25 = 68;
    v26 = 1040;
    v27 = 15;
    v28 = 2080;
    v29 = "rtaid::Detector]";
    v30 = 2048;
    v31 = v4;
    _os_log_impl(&dword_216CFB000, v17, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] reset", buf, 0x2Cu);
  }
  v18 = 0;
  if (v7)
  {
LABEL_26:
    v19 = (unint64_t *)&v7->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
LABEL_30:
  std::mutex::unlock((std::mutex *)&SingletonManagerInstance(void)::sInstance);
  return v18;
}

void sub_216D150C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9)
{
  unint64_t *p_shared_owners;
  unint64_t v11;

  if (a9)
  {
    p_shared_owners = (unint64_t *)&a9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
      std::__shared_weak_count::__release_weak(a9);
    }
  }
  std::mutex::unlock((std::mutex *)&SingletonManagerInstance(void)::sInstance);
  _Unwind_Resume(a1);
}

uint64_t AudioIssueDetectorSetNodeFormat(unint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  SingletonManagerInstance();
  return rtaid::Manager::SetNodeFormatWithDirectionOnDetector(a1, a2, a3, 0, a4, a5);
}

uint64_t AudioIssueDetectorRemoveNode(unint64_t a1, unsigned int a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned __int8 v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  _QWORD *v30;
  __int16 v31;
  unsigned int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  SingletonManagerInstance();
  std::mutex::lock((std::mutex *)&SingletonManagerInstance(void)::sInstance);
  v4 = std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>>>::find<long long>(a1);
  if (!v4)
  {
    v15 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  v6 = v4[3];
  v5 = (std::__shared_weak_count *)v4[4];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v6)
  {
    v15 = 0xFFFFFFFFLL;
    if (!v5)
      goto LABEL_22;
    goto LABEL_18;
  }
  v9 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((_QWORD *)(v6 + 8), a2);
  if (!v9)
  {
    v15 = 4294967294;
    if (!v5)
      goto LABEL_22;
    goto LABEL_18;
  }
  v10 = v9;
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  v12 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
  {
    v13 = v10[3];
    v14 = (_QWORD *)(v13 + 8);
    if (*(char *)(v13 + 31) < 0)
      v14 = (_QWORD *)*v14;
    v19 = 136316674;
    v20 = "Detector.cpp";
    v21 = 1024;
    v22 = 137;
    v23 = 1040;
    v24 = 15;
    v25 = 2080;
    v26 = "rtaid::Detector]";
    v27 = 2048;
    v28 = v6;
    v29 = 2080;
    v30 = v14;
    v31 = 1024;
    v32 = a2;
    _os_log_impl(&dword_216CFB000, v12, OS_LOG_TYPE_DEFAULT, "[%s:%-5d %.*s:%p] Removing node %s with nodeID %d", (uint8_t *)&v19, 0x3Cu);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::erase((_QWORD *)(v6 + 8), (OpaqueAudioComponentInstance ***)v10);
  v15 = 0;
  if (v5)
  {
LABEL_18:
    v16 = (unint64_t *)&v5->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_22:
  std::mutex::unlock((std::mutex *)&SingletonManagerInstance(void)::sInstance);
  return v15;
}

void AudioIssueDetectorSetUplinkMute(unsigned __int8 a1)
{
  SingletonManagerInstance();
  atomic_store(a1, (unsigned __int8 *)&unk_253D977AC);
}

void AudioIssueDetectorSetDownlinkVolume(float a1)
{
  SingletonManagerInstance();
  *(float *)&xmmword_253D977B0 = a1;
}

float AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment(float a1)
{
  float result;

  SingletonManagerInstance();
  result = fabsf(fminf(a1, 0.0));
  dword_253D977A8 = LODWORD(result);
  return result;
}

void AudioIssueDetectorSetSmartCaseMicMute(unsigned __int8 a1)
{
  SingletonManagerInstance();
  atomic_store(a1, byte_253D977AD);
}

os_log_t ___ZN4ADAM12ADAMLogScopeEv_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "ADAM");
  *v0 = result;
  ADAM::ADAMLogScope(void)::scope = (uint64_t)v0;
  return result;
}

uint64_t *ADAM::unpackEndPoints(uint64_t *result, uint64_t a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *i;
  unint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  result[1] = 0;
  v2 = (uint64_t **)(result + 1);
  result[2] = 0;
  *result = (uint64_t)(result + 1);
  if (a2)
  {
    v3 = a2;
    v4 = result;
    for (i = 0; ; i = *v2)
    {
      v6 = v3 & -v3;
      v7 = v2;
      v8 = v2;
      if (i)
      {
        v9 = i;
        while (1)
        {
          while (1)
          {
            v8 = (uint64_t **)v9;
            v10 = v9[4];
            if (v6 >= v10)
              break;
            v9 = *v8;
            v7 = v8;
            if (!*v8)
              goto LABEL_11;
          }
          if (v10 >= v6)
            break;
          v9 = v8[1];
          if (!v9)
          {
            v7 = v8 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        v11 = (uint64_t *)operator new(0x28uLL);
        v11[4] = v6;
        *v11 = 0;
        v11[1] = 0;
        v11[2] = (uint64_t)v8;
        *v7 = v11;
        v12 = *(_QWORD *)*v4;
        if (v12)
        {
          *v4 = v12;
          v11 = *v7;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v11);
        ++v4[2];
      }
      v3 ^= v6;
      if (!v3)
        break;
    }
  }
  return result;
}

void sub_216D15644(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<ADAM::EndPointBitMask>::destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void ADAM::getEndPointName(_QWORD *a1, int64_t __val)
{
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;

  if (__val <= 15)
  {
    switch(__val)
    {
      case 1:
        v3 = "EndPoint_HealthKit";
        goto LABEL_16;
      case 2:
        v3 = "EndPoint_SensorKit";
        goto LABEL_16;
      case 4:
        v3 = "EndPoint_EnvExposure";
        goto LABEL_16;
      case 8:
        v3 = "EndPoint_AudioFile";
        goto LABEL_16;
      default:
        goto LABEL_17;
    }
  }
  if (__val > 63)
  {
    if (__val == 64)
    {
      v3 = "EndPoint_ADAFramework";
      goto LABEL_16;
    }
    if (__val == 128)
    {
      v3 = "EndPoint_EnvSoundClass";
      goto LABEL_16;
    }
  }
  else
  {
    if (__val == 16)
    {
      v3 = "EndPoint_BinFile";
      goto LABEL_16;
    }
    if (__val == 32)
    {
      v3 = "EndPoint_CsvFile";
LABEL_16:
      std::string::basic_string[abi:ne180100]<0>(a1, v3);
      return;
    }
  }
LABEL_17:
  std::to_string(&v6, __val);
  v4 = std::string::insert(&v6, 0, "EndPoint_Unknown:", 0x11uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  a1[2] = *((_QWORD *)&v4->__r_.__value_.__l + 2);
  *(_OWORD *)a1 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_216D15924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void ADAM::allocAudioBufferList(ADAM *this, AudioBufferList **a2, const AudioStreamBasicDescription *a3, int a4)
{
  int v5;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  std::bad_alloc *exception;
  std::bad_alloc *v18;

  v5 = (int)a3;
  if ((*((_DWORD *)a2 + 3) & 0x20) != 0)
    v8 = *((_DWORD *)a2 + 7);
  else
    v8 = 1;
  v9 = (unsigned int *)malloc_type_malloc(16 * (v8 - 1) + 24, 0x2C8E6D5CuLL);
  if (!v9)
    goto LABEL_14;
  v10 = v9;
  bzero(v9, 16 * (v8 - 1) + 24);
  *(_QWORD *)this = v10;
  *v10 = v8;
  if (v8 == 1)
    v11 = *((_DWORD *)a2 + 7);
  else
    v11 = 1;
  if (v8)
  {
    v12 = 0;
    v13 = (a4 * v5 * *((_DWORD *)a2 + 6));
    while (1)
    {
      v14 = *(_QWORD *)this + v12;
      *(_DWORD *)(v14 + 8) = v11;
      *(_DWORD *)(v14 + 12) = 0;
      v15 = malloc_type_malloc(v13, 0x2C8E6D5CuLL);
      v16 = v15;
      if ((_DWORD)v13)
      {
        if (!v15)
          break;
      }
      bzero(v15, v13);
      *(_QWORD *)(*(_QWORD *)this + v12 + 16) = v16;
      v12 += 16;
      if (16 * v8 == v12)
        return;
    }
LABEL_14:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v18 = std::bad_alloc::bad_alloc(exception);
  }
}

void ADAM::releaseAudioBufferList(unsigned int **this, AudioBufferList **a2)
{
  unsigned int *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (this)
  {
    v3 = *this;
    if (v3)
    {
      v4 = *v3;
      if ((_DWORD)v4)
      {
        v5 = 0;
        v6 = 4;
        do
        {
          if (*(_QWORD *)&v3[v6])
          {
            free(*(void **)&v3[v6]);
            v3 = *this;
            v4 = **this;
          }
          ++v5;
          v6 += 4;
        }
        while (v5 < v4);
      }
      free(v3);
      *this = 0;
    }
  }
}

CFStringRef *ADAM::copyDeviceInfo(CFStringRef *result, CFStringRef *a2)
{
  CFStringRef *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFDictionary *v7;

  if (a2)
  {
    v3 = result;
    if (*result)
      *a2 = CFStringCreateCopy(0, *result);
    v4 = v3[1];
    if (v4)
      a2[1] = CFStringCreateCopy(0, v4);
    v5 = v3[2];
    if (v5)
      a2[2] = CFStringCreateCopy(0, v5);
    v6 = v3[3];
    if (v6)
      a2[3] = CFStringCreateCopy(0, v6);
    v7 = (const __CFDictionary *)v3[5];
    a2[4] = v3[4];
    result = 0;
    if (v7)
      result = (CFStringRef *)CFDictionaryCreateCopy(0, v7);
    a2[5] = (CFStringRef)result;
  }
  return result;
}

void ADAM::logDeviceInfo(uint64_t a1)
{
  NSObject *v2;
  id v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  const __CFString *v15;
  __int16 v16;
  const __CFString *v17;
  __int16 v18;
  const __CFString *v19;
  __int16 v20;
  const __CFString *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v2 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v2)
      return;
  }
  else
  {
    v2 = MEMORY[0x24BDACB70];
    v3 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = CFSTR("NULL");
    v5 = *(const __CFString **)a1;
    v6 = *(const __CFString **)(a1 + 8);
    if (!*(_QWORD *)a1)
      v5 = CFSTR("NULL");
    if (!v6)
      v6 = CFSTR("NULL");
    v7 = *(const __CFString **)(a1 + 16);
    if (!v7)
      v7 = CFSTR("NULL");
    if (*(_QWORD *)(a1 + 24))
      v4 = *(const __CFString **)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = 136316930;
    v11 = "ADAMUtil.cpp";
    v12 = 1024;
    v13 = 137;
    v14 = 2112;
    v15 = v5;
    v16 = 2112;
    v17 = v6;
    v18 = 2112;
    v19 = v7;
    v20 = 2112;
    v21 = v4;
    v22 = 2048;
    v23 = v8;
    v24 = 2112;
    v25 = v9;
    _os_log_impl(&dword_216CFB000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device { name: %@  manufacture: %@ model: %@ UUID: %@ device flag: %0llx volume curve: %@ }", (uint8_t *)&v10, 0x4Eu);
  }

}

void ADAM::releaseADAMDeviceInfo(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = *(const void **)a1;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 16);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 24);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 40);
  if (v6)
    CFRelease(v6);
}

uint64_t ADAM::haeMeasurementEnabled(ADAM *this, char a2)
{
  int v3;
  ADAM::Parameters *Param;
  unsigned int v5;
  ADAM::Parameters *v6;
  int v7;
  int v8;

  v3 = (int)this;
  ADAM::Parameters::instance(this);
  Param = (ADAM::Parameters *)ADAM::Parameters::GetParamValue<BOOL>(0xCu);
  v5 = Param;
  ADAM::Parameters::instance(Param);
  v6 = (ADAM::Parameters *)ADAM::Parameters::GetParamValue<BOOL>(3u);
  v7 = (int)v6;
  ADAM::Parameters::instance(v6);
  v8 = ADAM::Parameters::GetParamValue<BOOL>(2u);
  if (v5 && (a2 & 1) != 0)
    return 1;
  else
    return v8 & (v3 | v7 & v5);
}

uint64_t ___ZN4ADAM19getMachTimeBaseInfoEv_block_invoke()
{
  return mach_timebase_info((mach_timebase_info_t)&ADAM::getMachTimeBaseInfo(void)::timebase_info);
}

uint64_t ADAM::absoluteTimeFromCMTimeRange(ADAM *this, uint64_t a2, CMTimeRange *a3, double a4, double a5, double a6)
{
  int v6;

  v6 = (int)a3;
  if (ADAM::getMachTimeBaseInfo(void)::onceToken != -1)
    dispatch_once(&ADAM::getMachTimeBaseInfo(void)::onceToken, &__block_literal_global_20);
  LODWORD(a6) = ADAM::getMachTimeBaseInfo(void)::timebase_info;
  return (uint64_t)this
       + (unint64_t)((double)a2
                          / (double)v6
                          * 1000000000.0
                          * (double)(*(unsigned int *)algn_254E4EB2C | 0x41CDCD6500000000uLL)
                          / (double)*(unint64_t *)&a6);
}

id ADAM::getSampleDateInterval(ADAM *this, double a2)
{
  unint64_t v2;
  unint64_t v3;
  void *v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  void *v15;

  v6 = (void *)MEMORY[0x24BDBCE60];
  if (ADAM::getMachTimeBaseInfo(void)::onceToken != -1)
    dispatch_once(&ADAM::getMachTimeBaseInfo(void)::onceToken, &__block_literal_global_20);
  LODWORD(v3) = ADAM::getMachTimeBaseInfo(void)::timebase_info;
  LODWORD(v2) = *(_DWORD *)algn_254E4EB2C;
  objc_msgSend(MEMORY[0x24BDBCE60], "date");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "timeIntervalSinceReferenceDate");
  v9 = v8;
  objc_msgSend(MEMORY[0x24BDD1760], "processInfo");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "systemUptime");
  v12 = v9 - v11;

  objc_msgSend(v6, "dateWithTimeIntervalSinceReferenceDate:", (double)(unint64_t)this * (double)v3 / (double)v2 / 1000000000.0 + v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "dateByAddingTimeInterval:", -a2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1508]), "initWithStartDate:endDate:", v14, v13);

  return v15;
}

void sub_216D15FF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id ADAM::LocalizationUtilityGetBundle(ADAM *this)
{
  if (ADAM::LocalizationUtilityGetBundle(void)::once != -1)
    dispatch_once(&ADAM::LocalizationUtilityGetBundle(void)::once, &__block_literal_global_23);
  return (id)ADAM::LocalizationUtilityGetBundle(void)::_frameworkBundle;
}

void ___ZN4ADAM28LocalizationUtilityGetBundleEv_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x24BDD1488], "bundleWithPath:", CFSTR("/System/Library/PrivateFrameworks/AudioDataAnalysis.framework"));
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)ADAM::LocalizationUtilityGetBundle(void)::_frameworkBundle;
  ADAM::LocalizationUtilityGetBundle(void)::_frameworkBundle = v0;

}

void ___ZN4ADAM23isSpeechAnalysisEnabledEv_block_invoke()
{
  BOOL v0;
  id v1;

  if (ADAM::getDeviceClass(void)::once != -1)
    dispatch_once(&ADAM::getDeviceClass(void)::once, &__block_literal_global_42);
  v1 = (id)ADAM::getDeviceClass(void)::deviceClass;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("iPhone")) & 1) != 0
    || objc_msgSend(v1, "isEqualToString:", CFSTR("iPod")))
  {
    if (ADAM::isXCTest(void)::once != -1)
      dispatch_once(&ADAM::isXCTest(void)::once, &__block_literal_global_45);
    if (ADAM::isXCTest(void)::isXCTest)
      goto LABEL_11;
    if (ADAM::hasEntitlementForSensorkitSiri(void)::once != -1)
      dispatch_once(&ADAM::hasEntitlementForSensorkitSiri(void)::once, &__block_literal_global_52);
    if (ADAM::hasEntitlementForSensorkitSiri(void)::ans)
    {
LABEL_11:
      v0 = 1;
    }
    else
    {
      if (ADAM::hasEntitlementForSensorkitTelephony(void)::once != -1)
        dispatch_once(&ADAM::hasEntitlementForSensorkitTelephony(void)::once, &__block_literal_global_55);
      v0 = ADAM::hasEntitlementForSensorkitTelephony(void)::ans != 0;
    }
  }
  else
  {
    v0 = 0;
  }
  ADAM::isSpeechAnalysisEnabled(void)::ans = v0;

}

void sub_216D161CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN4ADAM35hasEntitlementForSensorkitTelephonyEv_block_invoke(ADAM *a1)
{
  id v1;

  ADAM::getSensorkitEntitlements(a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  ADAM::hasEntitlementForSensorkitTelephony(void)::ans = objc_msgSend(v1, "containsObject:", CFSTR("com.apple.SensorKit.soundDetection.telephony"));

}

void sub_216D16224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id ADAM::getSensorkitEntitlements(ADAM *this)
{
  if (ADAM::getSensorkitEntitlements(void)::once != -1)
    dispatch_once(&ADAM::getSensorkitEntitlements(void)::once, &__block_literal_global_48);
  return (id)ADAM::getSensorkitEntitlements(void)::skEntitlements;
}

void ___ZN4ADAM24getSensorkitEntitlementsEv_block_invoke()
{
  __SecTask *v0;
  __SecTask *v1;
  CFTypeRef v2;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  id v6;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  id v10;
  id v11;
  CFErrorRef error;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  const __CFString *v20;
  __int16 v21;
  CFErrorRef v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x24BDBD240]);
  if (v0)
  {
    v1 = v0;
    error = 0;
    v2 = SecTaskCopyValueForEntitlement(v0, CFSTR("com.apple.sensorkit.writer.allow"), &error);
    v3 = (void *)ADAM::getSensorkitEntitlements(void)::skEntitlements;
    ADAM::getSensorkitEntitlements(void)::skEntitlements = (uint64_t)v2;

    if (ADAM::getSensorkitEntitlements(void)::skEntitlements && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      if (ADAM::ADAMLogScope(void)::once != -1)
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
      if (ADAM::ADAMLogScope(void)::scope)
      {
        v4 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v4)
          goto LABEL_31;
      }
      else
      {
        v4 = MEMORY[0x24BDACB70];
        v11 = MEMORY[0x24BDACB70];
      }
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
LABEL_30:

LABEL_31:
        CFRelease(v1);
        return;
      }
      *(_DWORD *)buf = 136315650;
      v14 = "ADAMUtil.cpp";
      v15 = 1024;
      v16 = 371;
      v17 = 2112;
      v18 = ADAM::getSensorkitEntitlements(void)::skEntitlements;
      v7 = "%25s:%-5d SK entitlements %@";
      v8 = v4;
      v9 = 28;
    }
    else
    {
      if (ADAM::ADAMLogScope(void)::once != -1)
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
      if (ADAM::ADAMLogScope(void)::scope)
      {
        v4 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v4)
          goto LABEL_31;
      }
      else
      {
        v4 = MEMORY[0x24BDACB70];
        v6 = MEMORY[0x24BDACB70];
      }
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        goto LABEL_30;
      *(_DWORD *)buf = 136316162;
      v14 = "ADAMUtil.cpp";
      v15 = 1024;
      v16 = 369;
      v17 = 2112;
      v18 = ADAM::getSensorkitEntitlements(void)::skEntitlements;
      v19 = 2112;
      v20 = CFSTR("com.apple.sensorkit.writer.allow");
      v21 = 2112;
      v22 = error;
      v7 = "%25s:%-5d Unexpected value %@ for %@ entitlement: %@";
      v8 = v4;
      v9 = 48;
    }
    _os_log_impl(&dword_216CFB000, v8, OS_LOG_TYPE_DEFAULT, v7, buf, v9);
    goto LABEL_30;
  }
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v5 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v5)
      return;
  }
  else
  {
    v5 = MEMORY[0x24BDACB70];
    v10 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v14 = "ADAMUtil.cpp";
    v15 = 1024;
    v16 = 376;
    _os_log_impl(&dword_216CFB000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d NULL value returned from SecTaskCreateFromSelf", buf, 0x12u);
  }

}

void ___ZN4ADAM30hasEntitlementForSensorkitSiriEv_block_invoke(ADAM *a1)
{
  id v1;

  ADAM::getSensorkitEntitlements(a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  ADAM::hasEntitlementForSensorkitSiri(void)::ans = objc_msgSend(v1, "containsObject:", CFSTR("com.apple.SensorKit.soundDetection.siri"));

}

void sub_216D165D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN4ADAM8isXCTestEv_block_invoke()
{
  void *v0;
  id v1;

  objc_msgSend(MEMORY[0x24BDD1760], "processInfo");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "processName");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  ADAM::isXCTest(void)::isXCTest = objc_msgSend(v0, "isEqualToString:", CFSTR("xctest"));

}

void sub_216D16640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZN4ADAM14getDeviceClassEv_block_invoke()
{
  uint64_t v0;
  void *v1;

  MGGetStringAnswer();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)ADAM::getDeviceClass(void)::deviceClass;
  ADAM::getDeviceClass(void)::deviceClass = v0;

}

void ___ZN4ADAM20isProcessCorespeechdEv_block_invoke()
{
  void *v0;
  id v1;

  objc_msgSend(MEMORY[0x24BDD1760], "processInfo");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "processName");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  ADAM::isProcessCorespeechd(void)::isCorespeechd = objc_msgSend(v0, "isEqualToString:", CFSTR("corespeechd"));

}

void sub_216D166E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_216D16A44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void rtaid::ConfigurationManager::addSiriConfiguration(rtaid::ConfigurationManager *this, const rtaid::Detector *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  char *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t *v9;
  _QWORD *v10[3];
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults(this))
  {
    rtaid::Detector::GetNodeIDs((rtaid::Detector *)&v11, (uint64_t)a2);
    v4 = v11;
    v5 = v12;
    if (v11 != v12)
    {
      v6 = (char *)this + 24;
      v7 = v11;
      do
      {
        v8 = *v7;
        v9 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(*((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), *v7);
        if (!v9 || !*(_BYTE *)(v9[3] + 188))
        {
          v13[0] = 2;
          v13[1] = v8;
          std::map<rtaid::AnalyzerType,unsigned int>::map[abi:ne180100]((uint64_t *)v10, v13, 1);
          std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__emplace_unique_key_args<std::map<rtaid::AnalyzerType,unsigned int>,std::map<rtaid::AnalyzerType,unsigned int> const&>((uint64_t)v6, v10, v10);
          std::__tree<ADAM::EndPointBitMask>::destroy(v10[1]);
        }
        ++v7;
      }
      while (v7 != v5);
    }
    if (v4)
      operator delete(v4);
  }
}

void sub_216D16C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<rtaid::AnalyzerType,unsigned int>::map[abi:ne180100](uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      std::__tree<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__map_value_compare<rtaid::AnalyzerType,std::__value_type<rtaid::AnalyzerType,unsigned int>,std::less<rtaid::AnalyzerType>,true>,std::allocator<std::__value_type<rtaid::AnalyzerType,unsigned int>>>::__emplace_hint_unique_key_args<rtaid::AnalyzerType,std::pair<rtaid::AnalyzerType const,unsigned int> const&>(a1, v4, *a2, *(_QWORD *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_216D16CF8(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<ADAM::EndPointBitMask>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__emplace_unique_key_args<std::map<rtaid::AnalyzerType,unsigned int>,std::map<rtaid::AnalyzerType,unsigned int> const&>(uint64_t a1, _QWORD **a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  _QWORD *v8;
  uint64_t **v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t (*v16[3])(uint64_t, uint64_t);

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (!v5)
  {
    v9 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__construct_node<std::map<rtaid::AnalyzerType,unsigned int> const&>((uint64_t)v16, a1, a3);
    return (uint64_t)std::__tree<rtaid::AnalyzerType>::__insert_node_at((uint64_t **)a1, (uint64_t)v9, v6, (uint64_t *)v16[0]);
  }
  v8 = a2 + 1;
  while (1)
  {
    while (1)
    {
      v9 = (uint64_t **)v5;
      v10 = *a2;
      v11 = (_QWORD *)v5[4];
      v12 = v5 + 5;
      v16[0] = (uint64_t (*)(uint64_t, uint64_t))std::__synth_three_way[abi:ne180100]<std::pair<rtaid::AnalyzerType const,unsigned int>,std::pair<rtaid::AnalyzerType const,unsigned int>>;
      if ((std::__lexicographical_compare_three_way_slow_path[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__tree_node<std::__value_type<rtaid::AnalyzerType,unsigned int>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__tree_node<std::__value_type<rtaid::AnalyzerType,unsigned int>,void *> *,long>>,std::strong_ordering (*)(std::pair<rtaid::AnalyzerType const,unsigned int> const&,std::pair<rtaid::AnalyzerType const,unsigned int> const&)>(v10, v8, v11, v5 + 5, v16) & 0x80) == 0)break;
      v5 = *v9;
      v6 = v9;
      if (!*v9)
        goto LABEL_10;
    }
    v13 = v9[4];
    v14 = *a2;
    v16[0] = (uint64_t (*)(uint64_t, uint64_t))std::__synth_three_way[abi:ne180100]<std::pair<rtaid::AnalyzerType const,unsigned int>,std::pair<rtaid::AnalyzerType const,unsigned int>>;
    result = std::__lexicographical_compare_three_way_slow_path[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__tree_node<std::__value_type<rtaid::AnalyzerType,unsigned int>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__tree_node<std::__value_type<rtaid::AnalyzerType,unsigned int>,void *> *,long>>,std::strong_ordering (*)(std::pair<rtaid::AnalyzerType const,unsigned int> const&,std::pair<rtaid::AnalyzerType const,unsigned int> const&)>(v13, v12, v14, v8, v16);
    if ((result & 0x80) == 0)
      break;
    v6 = v9 + 1;
    v5 = v9[1];
    if (!v5)
      goto LABEL_10;
  }
  if (!*v6)
    goto LABEL_10;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<rtaid::TelephonyResetDetector>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

_QWORD *std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__construct_node<std::map<rtaid::AnalyzerType,unsigned int> const&>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;

  v5 = a2 + 8;
  result = operator new(0x38uLL);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  result[5] = 0;
  v7 = result + 5;
  result[4] = result + 5;
  v8 = result + 4;
  result[6] = 0;
  v11 = (_QWORD *)*a3;
  v9 = a3 + 1;
  v10 = v11;
  if (v11 != v9)
  {
    do
    {
      result = std::__tree<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__map_value_compare<rtaid::AnalyzerType,std::__value_type<rtaid::AnalyzerType,unsigned int>,std::less<rtaid::AnalyzerType>,true>,std::allocator<std::__value_type<rtaid::AnalyzerType,unsigned int>>>::__emplace_hint_unique_key_args<rtaid::AnalyzerType,std::pair<rtaid::AnalyzerType const,unsigned int> const&>(v8, v7, *((_DWORD *)v10 + 7), *(_QWORD *)((char *)v10 + 28));
      v12 = (_QWORD *)v10[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v10[2];
          v14 = *v13 == (_QWORD)v10;
          v10 = v13;
        }
        while (!v14);
      }
      v10 = v13;
    }
    while (v13 != v9);
  }
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_216D16EF4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;

  std::__tree<ADAM::EndPointBitMask>::destroy(v2[5]);
  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::map<rtaid::AnalyzerType,unsigned int>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::map<rtaid::AnalyzerType,unsigned int>,void *>>>::operator()[abi:ne180100](char a1, _QWORD **a2)
{
  if (a1)
  {
    std::__tree<ADAM::EndPointBitMask>::destroy(a2[5]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::__tree<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__map_value_compare<rtaid::AnalyzerType,std::__value_type<rtaid::AnalyzerType,unsigned int>,std::less<rtaid::AnalyzerType>,true>,std::allocator<std::__value_type<rtaid::AnalyzerType,unsigned int>>>::__emplace_hint_unique_key_args<rtaid::AnalyzerType,std::pair<rtaid::AnalyzerType const,unsigned int> const&>(uint64_t *result, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t **v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t *v22;

  v5 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (v7 = *((_DWORD *)a2 + 7), v7 > a3))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      v10 = a2;
LABEL_16:
      if (v8)
        v13 = (uint64_t **)v10;
      else
        v13 = (uint64_t **)a2;
      if (v8)
        v11 = (uint64_t **)(v10 + 1);
      else
        v11 = (uint64_t **)a2;
      goto LABEL_22;
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v15 = a2;
      do
      {
        v10 = (uint64_t *)v15[2];
        v16 = *v10 == (_QWORD)v15;
        v15 = v10;
      }
      while (v16);
    }
    if (*((_DWORD *)v10 + 7) < a3)
      goto LABEL_16;
    v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v17;
          v18 = *((_DWORD *)v17 + 7);
          if (v18 <= a3)
            break;
          v17 = *v13;
          v6 = v13;
          if (!*v13)
            goto LABEL_44;
        }
        if (v18 >= a3)
          break;
        v6 = v13 + 1;
        v17 = v13[1];
        if (!v17)
          goto LABEL_44;
      }
LABEL_45:
      v11 = v6;
      goto LABEL_22;
    }
    goto LABEL_43;
  }
  if (v7 >= a3)
    return result;
  v11 = (uint64_t **)(a2 + 1);
  v12 = (uint64_t *)a2[1];
  if (v12)
  {
    do
    {
      v11 = (uint64_t **)v12;
      v12 = (uint64_t *)*v12;
      v13 = v11;
      v14 = v11;
    }
    while (v12);
  }
  else
  {
    v14 = (uint64_t **)a2;
    do
    {
      v19 = (uint64_t *)v14;
      v14 = (uint64_t **)v14[2];
    }
    while (*v14 != v19);
    v13 = (uint64_t **)a2;
  }
  if (v14 != v6 && *((_DWORD *)v14 + 7) <= a3)
  {
    v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v20;
          v21 = *((_DWORD *)v20 + 7);
          if (v21 <= a3)
            break;
          v20 = *v13;
          v6 = v13;
          if (!*v13)
            goto LABEL_44;
        }
        if (v21 >= a3)
          goto LABEL_45;
        v6 = v13 + 1;
        v20 = v13[1];
        if (!v20)
          goto LABEL_44;
      }
    }
LABEL_43:
    v13 = (uint64_t **)(result + 1);
    goto LABEL_44;
  }
LABEL_22:
  v6 = v11;
  if (!*v11)
  {
LABEL_44:
    v22 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v22 + 28) = a4;
    return std::__tree<rtaid::AnalyzerType>::__insert_node_at(v5, (uint64_t)v13, v6, v22);
  }
  return result;
}

uint64_t std::__synth_three_way[abi:ne180100]<std::pair<rtaid::AnalyzerType const,unsigned int>,std::pair<rtaid::AnalyzerType const,unsigned int>>(int *a1, _DWORD *a2)
{
  int v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  v3 = *a1;
  if (*a1 < *a2)
    result = 0xFFFFFFFFLL;
  else
    result = 1;
  if (v3 == *a2)
  {
    v5 = a1[1];
    v6 = a2[1];
    v7 = v5 == v6;
    if (v5 < v6)
      v8 = -1;
    else
      v8 = 1;
    if (v7)
      return 0;
    else
      return v8;
  }
  return result;
}

uint64_t std::__lexicographical_compare_three_way_slow_path[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__tree_node<std::__value_type<rtaid::AnalyzerType,unsigned int>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__tree_node<std::__value_type<rtaid::AnalyzerType,unsigned int>,void *> *,long>>,std::strong_ordering (*)(std::pair<rtaid::AnalyzerType const,unsigned int> const&,std::pair<rtaid::AnalyzerType const,unsigned int> const&)>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t (**a5)(uint64_t, uint64_t))
{
  _BOOL4 v5;
  _BOOL4 v6;
  _QWORD *v8;
  _QWORD *v11;
  uint64_t result;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;

  v5 = a3 == a4;
  v6 = a1 == a2;
  if (a1 == a2 || (v8 = a3, a3 == a4))
  {
LABEL_17:
    if (v6)
      return (v5 - 1);
    else
      return 1;
  }
  else
  {
    v11 = a1;
    while (1)
    {
      result = (*a5)((uint64_t)v11 + 28, (uint64_t)v8 + 28);
      if ((_BYTE)result)
        break;
      v13 = (_QWORD *)v11[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v11[2];
          v15 = *v14 == (_QWORD)v11;
          v11 = v14;
        }
        while (!v15);
      }
      v16 = (_QWORD *)v8[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v8[2];
          v15 = *v17 == (_QWORD)v8;
          v8 = v17;
        }
        while (!v15);
      }
      v5 = v17 == a4;
      v6 = v14 == a2;
      if (v14 != a2)
      {
        v11 = v14;
        v8 = v17;
        if (v17 != a4)
          continue;
      }
      goto LABEL_17;
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AudioServiceType>>(uint64_t a1)
{
  if (a1 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a1);
}

_QWORD *std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

_QWORD *std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__find_leaf_high(uint64_t a1, _QWORD *a2, _QWORD **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t (*v11)(uint64_t, uint64_t);

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a3 + 1;
    do
    {
      while (1)
      {
        v5 = v4;
        v8 = *a3;
        v9 = (_QWORD *)v4[4];
        v11 = (uint64_t (*)(uint64_t, uint64_t))std::__synth_three_way[abi:ne180100]<std::pair<rtaid::AnalyzerType const,unsigned int>,std::pair<rtaid::AnalyzerType const,unsigned int>>;
        if ((std::__lexicographical_compare_three_way_slow_path[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__tree_node<std::__value_type<rtaid::AnalyzerType,unsigned int>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__tree_node<std::__value_type<rtaid::AnalyzerType,unsigned int>,void *> *,long>>,std::strong_ordering (*)(std::pair<rtaid::AnalyzerType const,unsigned int> const&,std::pair<rtaid::AnalyzerType const,unsigned int> const&)>(v8, v7, v9, v4 + 5, &v11) & 0x80) == 0)break;
        v4 = (_QWORD *)*v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = (_QWORD *)v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::destroy(v2);
  }
  return a1;
}

void std::vector<std::unique_ptr<CaulkSPIImplementation::Message>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void CaulkSPIImplementation::Message::~Message(CaulkSPIImplementation::Message *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24D615A80;
  v2 = (char *)this + 24;
  v3 = (char *)*((_QWORD *)this + 6);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  caulk::concurrent::message::~message(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24D615A80;
  v2 = (char *)this + 24;
  v3 = (char *)*((_QWORD *)this + 6);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      caulk::concurrent::message::~message(this);
      JUMPOUT(0x219A00DF0);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x219A00DF0);
}

void CaulkSPIImplementation::~CaulkSPIImplementation(CaulkSPIImplementation *this)
{
  char *v1;
  void **v2;

  *(_QWORD *)this = &off_24D615A50;
  v1 = (char *)this + 8;
  v2 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<CaulkSPIImplementation::Message>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x219A00A54](v1);
}

{
  char *v1;
  void **v2;

  *(_QWORD *)this = &off_24D615A50;
  v1 = (char *)this + 8;
  v2 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<CaulkSPIImplementation::Message>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x219A00A54](v1);
  JUMPOUT(0x219A00DF0);
}

_QWORD *CaulkSPIImplementation::SetMessagePerform(_QWORD *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[4];

  v15[3] = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)result[3];
  for (i = (uint64_t *)result[4]; v2 != i; ++v2)
  {
    v5 = *v2;
    std::__function::__value_func<void ()(rtaid::IssueDictionary const&)>::__value_func[abi:ne180100]((uint64_t)v11, a2);
    v6 = v12;
    if (v12)
    {
      if (v12 == v11)
      {
        v14 = v13;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, v13);
        v6 = v14;
      }
      else
      {
        v6 = (_QWORD *)(*(uint64_t (**)(void))(*v12 + 16))();
        v14 = v6;
      }
    }
    else
    {
      v14 = 0;
    }
    v7 = (_QWORD *)(v5 + 24);
    if ((_QWORD *)(v5 + 24) != v13)
    {
      v8 = *(_QWORD **)(v5 + 48);
      if (v6 == v13)
      {
        if (v8 == v7)
        {
          (*(void (**)(_QWORD *, _QWORD *))(v13[0] + 24))(v13, v15);
          (*(void (**)(_QWORD *))(*v14 + 32))(v14);
          v14 = 0;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v5 + 48) + 24))(*(_QWORD *)(v5 + 48), v13);
          (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 48) + 32))(*(_QWORD *)(v5 + 48));
          *(_QWORD *)(v5 + 48) = 0;
          v14 = v13;
          (*(void (**)(_QWORD *, uint64_t))(v15[0] + 24))(v15, v5 + 24);
          (*(void (**)(_QWORD *))(v15[0] + 32))(v15);
          *(_QWORD *)(v5 + 48) = v7;
          v6 = v14;
        }
        else
        {
          (*(void (**)(_QWORD *, uint64_t))(v13[0] + 24))(v13, v5 + 24);
          (*(void (**)(_QWORD *))(*v14 + 32))(v14);
          v6 = *(_QWORD **)(v5 + 48);
          v14 = v6;
          *(_QWORD *)(v5 + 48) = v7;
        }
      }
      else
      {
        if (v8 == v7)
        {
          (*(void (**)(uint64_t, _QWORD *))(*v7 + 24))(v5 + 24, v13);
          (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 48) + 32))(*(_QWORD *)(v5 + 48));
          *(_QWORD *)(v5 + 48) = v14;
          v6 = v13;
          v14 = v13;
LABEL_19:
          v9 = 4;
          goto LABEL_20;
        }
        v14 = *(_QWORD **)(v5 + 48);
        *(_QWORD *)(v5 + 48) = v6;
        v6 = v8;
      }
    }
    if (v6 == v13)
    {
      v6 = v13;
      goto LABEL_19;
    }
    if (!v6)
      goto LABEL_21;
    v9 = 5;
LABEL_20:
    (*(void (**)(void))(*v6 + 8 * v9))();
LABEL_21:
    result = v12;
    if (v12 == v11)
    {
      result = v11;
      v10 = 4;
      goto LABEL_25;
    }
    if (v12)
    {
      v10 = 5;
LABEL_25:
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
    }
  }
  return result;
}

void sub_216D17860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(rtaid::IssueDictionary const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void FeatureFlagSPIImplementation::~FeatureFlagSPIImplementation(FeatureFlagSPIImplementation *this)
{
  JUMPOUT(0x219A00DF0);
}

void MobileGestaltSPIImplementation::~MobileGestaltSPIImplementation(MobileGestaltSPIImplementation *this)
{
  JUMPOUT(0x219A00DF0);
}

BOOL MobileGestaltSPIImplementation::IsInternalBuild(void)::{lambda(void)#1}::operator()()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  _BOOL8 v2;

  v0 = (const __CFBoolean *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFBooleanGetValue(v0) != 0;
  CFRelease(v1);
  return v2;
}

void PlatformUtilitiesiOSSPIImplementation::~PlatformUtilitiesiOSSPIImplementation(PlatformUtilitiesiOSSPIImplementation *this)
{
  JUMPOUT(0x219A00DF0);
}

uint64_t PlatformUtilitiesiOSSPIImplementation::GetProductType(PlatformUtilitiesiOSSPIImplementation *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (PlatformUtilities_iOS::GetProductType(void)::sCompletedCheck == 1)
    return PlatformUtilities_iOS::GetProductType(void)::sType;
  PlatformUtilities_iOS::GetProductType(void)::sCompletedCheck = 1;
  v2 = MGGetProductType();
  if (v2 > 2158787295)
  {
    if (v2 > 3196805750)
    {
      if (v2 > 3711192743)
      {
        if (v2 > 3885279869)
        {
          if (v2 > 4068102501)
          {
            if (v2 <= 4231109336)
            {
              switch(v2)
              {
                case 4068102502:
                  result = 168;
                  goto LABEL_472;
                case 4172444931:
                  result = 132;
                  goto LABEL_472;
                case 4201643249:
                  result = 35;
                  goto LABEL_472;
              }
              goto LABEL_471;
            }
            if (v2 > 4240173201)
            {
              if (v2 == 4240173202)
              {
                result = 2;
                goto LABEL_472;
              }
              if (v2 == 4242862982)
              {
                result = 80;
                goto LABEL_472;
              }
              goto LABEL_471;
            }
            if (v2 != 4231109337)
            {
              if (v2 == 4232256925)
              {
                result = 114;
                goto LABEL_472;
              }
              goto LABEL_471;
            }
            goto LABEL_377;
          }
          if (v2 <= 3953847431)
          {
            if (v2 == 3885279870)
            {
              result = 32;
              goto LABEL_472;
            }
            if (v2 != 3933865620)
            {
              if (v2 == 3933982784)
              {
                result = 53;
                goto LABEL_472;
              }
              goto LABEL_471;
            }
            goto LABEL_372;
          }
          if (v2 > 4055323050)
          {
            if (v2 == 4055323051)
            {
              result = 58;
              goto LABEL_472;
            }
            if (v2 == 4067129264)
            {
              result = 139;
              goto LABEL_472;
            }
          }
          else
          {
            if (v2 == 3953847432)
            {
              result = 170;
              goto LABEL_472;
            }
            if (v2 == 4025247511)
            {
              result = 133;
              goto LABEL_472;
            }
          }
LABEL_471:
          result = 0;
          goto LABEL_472;
        }
        if (v2 <= 3825599859)
        {
          if (v2 <= 3767261005)
          {
            switch(v2)
            {
              case 3711192744:
                result = 84;
                goto LABEL_472;
              case 3742999858:
                result = 159;
                goto LABEL_472;
              case 3743999268:
                result = 24;
                goto LABEL_472;
            }
            goto LABEL_471;
          }
          if (v2 == 3767261006)
          {
            result = 153;
            goto LABEL_472;
          }
          if (v2 != 3801472101)
          {
            if (v2 == 3819635030)
            {
              result = 160;
              goto LABEL_472;
            }
            goto LABEL_471;
          }
          goto LABEL_344;
        }
        if (v2 <= 3863625341)
        {
          switch(v2)
          {
            case 3825599860:
              result = 20;
              goto LABEL_472;
            case 3839750255:
              result = 169;
              goto LABEL_472;
            case 3856877970:
              result = 110;
              goto LABEL_472;
          }
          goto LABEL_471;
        }
        if (v2 > 3865922941)
        {
          if (v2 == 3865922942)
          {
            result = 56;
            goto LABEL_472;
          }
          if (v2 == 3867318491)
          {
            result = 162;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
        if (v2 != 3863625342)
        {
          if (v2 == 3865897231)
          {
            result = 79;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
LABEL_385:
        result = 97;
        goto LABEL_472;
      }
      if (v2 <= 3540156651)
      {
        if (v2 > 3300281075)
        {
          if (v2 <= 3397214290)
          {
            if (v2 == 3300281076)
            {
              result = 54;
              goto LABEL_472;
            }
            if (v2 == 3348380076)
            {
              result = 4;
              goto LABEL_472;
            }
            if (v2 != 3361025853)
              goto LABEL_471;
            goto LABEL_381;
          }
          if (v2 <= 3417429876)
          {
            if (v2 == 3397214291)
            {
              result = 74;
              goto LABEL_472;
            }
            if (v2 == 3402870384)
            {
              result = 70;
              goto LABEL_472;
            }
            goto LABEL_471;
          }
          if (v2 != 3417429877)
          {
            if (v2 == 3455223061)
            {
              result = 83;
              goto LABEL_472;
            }
            goto LABEL_471;
          }
          goto LABEL_371;
        }
        if (v2 <= 3228373940)
        {
          if (v2 == 3196805751)
          {
            result = 7;
            goto LABEL_472;
          }
          if (v2 == 3215673114)
          {
            result = 75;
            goto LABEL_472;
          }
          v9 = 3217792190;
LABEL_151:
          if (v2 != v9)
            goto LABEL_471;
          goto LABEL_372;
        }
        if (v2 == 3228373941)
        {
LABEL_383:
          result = 104;
          goto LABEL_472;
        }
        if (v2 != 3241053352)
        {
          if (v2 == 3242623367)
          {
            result = 15;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
LABEL_384:
        result = 107;
        goto LABEL_472;
      }
      if (v2 > 3637438249)
      {
        if (v2 <= 3670339450)
        {
          if (v2 == 3637438250)
          {
            result = 52;
            goto LABEL_472;
          }
          if (v2 != 3645319985)
          {
            if (v2 == 3663011141)
            {
              result = 156;
              goto LABEL_472;
            }
            goto LABEL_471;
          }
          goto LABEL_380;
        }
        if (v2 > 3683904381)
        {
          if (v2 == 3683904382)
          {
            result = 137;
            goto LABEL_472;
          }
          v6 = 3707345671;
          goto LABEL_359;
        }
        if (v2 == 3670339451)
          goto LABEL_372;
        v7 = 3677894691;
LABEL_96:
        if (v2 == v7)
        {
          result = 102;
          goto LABEL_472;
        }
        goto LABEL_471;
      }
      if (v2 <= 3585085678)
      {
        if (v2 == 3540156652)
        {
          result = 93;
          goto LABEL_472;
        }
        if (v2 != 3543203160)
        {
          if (v2 == 3571532206)
          {
            result = 151;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
        goto LABEL_372;
      }
      if (v2 == 3585085679)
      {
        result = 10;
        goto LABEL_472;
      }
      if (v2 == 3599094683)
        goto LABEL_385;
      v12 = 3636345305;
      goto LABEL_366;
    }
    if (v2 > 2688879998)
    {
      if (v2 <= 2940697644)
      {
        if (v2 <= 2781508712)
        {
          if (v2 > 2722529671)
          {
            switch(v2)
            {
              case 2722529672:
                result = 28;
                goto LABEL_472;
              case 2730762296:
                result = 112;
                goto LABEL_472;
              case 2751865418:
                result = 143;
                goto LABEL_472;
            }
            goto LABEL_471;
          }
          if (v2 == 2688879999)
          {
            result = 39;
            goto LABEL_472;
          }
          if (v2 != 2692844695)
          {
            if (v2 == 2702125347)
            {
              result = 3;
              goto LABEL_472;
            }
            goto LABEL_471;
          }
LABEL_256:
          result = 197;
          goto LABEL_472;
        }
        if (v2 <= 2797549162)
        {
          switch(v2)
          {
            case 2781508713:
              result = 6;
              goto LABEL_472;
            case 2793418701:
              result = 19;
              goto LABEL_472;
            case 2795618603:
              result = 42;
              goto LABEL_472;
          }
          goto LABEL_471;
        }
        if (v2 > 2880863277)
        {
          if (v2 != 2880863278)
          {
            if (v2 == 2903084588)
            {
              result = 85;
              goto LABEL_472;
            }
            goto LABEL_471;
          }
LABEL_360:
          result = 51;
          goto LABEL_472;
        }
        if (v2 == 2797549163)
        {
          result = 113;
          goto LABEL_472;
        }
        v5 = 2823174122;
        goto LABEL_280;
      }
      if (v2 <= 3101941569)
      {
        if (v2 <= 2979575959)
        {
          switch(v2)
          {
            case 2940697645:
              result = 38;
              goto LABEL_472;
            case 2941181571:
              result = 41;
              goto LABEL_472;
            case 2943112657:
              result = 149;
              goto LABEL_472;
          }
          goto LABEL_471;
        }
        if (v2 == 2979575960)
        {
          result = 155;
          goto LABEL_472;
        }
        if (v2 == 3001488778)
        {
          result = 34;
          goto LABEL_472;
        }
        v11 = 3054476161;
LABEL_315:
        if (v2 != v11)
          goto LABEL_471;
        goto LABEL_316;
      }
      if (v2 <= 3133873108)
      {
        if (v2 == 3101941570)
          goto LABEL_272;
        if (v2 != 3104290450)
        {
          v10 = 3128362815;
          goto LABEL_370;
        }
        goto LABEL_337;
      }
      if (v2 <= 3184375230)
      {
        if (v2 == 3133873109)
        {
          result = 62;
          goto LABEL_472;
        }
        if (v2 == 3143587592)
        {
          result = 166;
          goto LABEL_472;
        }
        goto LABEL_471;
      }
      if (v2 == 3184375231)
      {
LABEL_389:
        result = 77;
        goto LABEL_472;
      }
      v12 = 3196158497;
LABEL_366:
      if (v2 != v12)
        goto LABEL_471;
      goto LABEL_367;
    }
    if (v2 <= 2454275342)
    {
      if (v2 > 2288107368)
      {
        if (v2 <= 2336512886)
        {
          if (v2 != 2288107369)
          {
            if (v2 == 2309863438)
            {
              result = 37;
              goto LABEL_472;
            }
            if (v2 == 2311900306)
            {
              result = 14;
              goto LABEL_472;
            }
            goto LABEL_471;
          }
          goto LABEL_363;
        }
        if (v2 > 2418348557)
        {
          if (v2 == 2418348558)
          {
            result = 135;
            goto LABEL_472;
          }
          if (v2 == 2445473385)
          {
            result = 124;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
        if (v2 == 2336512887)
        {
LABEL_378:
          result = 121;
          goto LABEL_472;
        }
        v4 = 2385671069;
LABEL_300:
        if (v2 == v4)
        {
          result = 50;
          goto LABEL_472;
        }
        goto LABEL_471;
      }
      if (v2 <= 2236272847)
      {
        if (v2 != 2158787296)
        {
          if (v2 == 2159747553)
          {
            result = 26;
            goto LABEL_472;
          }
          if (v2 != 2162679683)
            goto LABEL_471;
          goto LABEL_386;
        }
LABEL_217:
        result = 69;
        goto LABEL_472;
      }
      if (v2 != 2236272848)
      {
        if (v2 != 2262113699)
        {
          if (v2 == 2270970153)
          {
            result = 21;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
        goto LABEL_382;
      }
LABEL_367:
      result = 87;
      goto LABEL_472;
    }
    if (v2 <= 2619317133)
    {
      if (v2 <= 2487868871)
      {
        if (v2 == 2454275343)
        {
          result = 63;
          goto LABEL_472;
        }
        if (v2 != 2458172802)
        {
          v3 = 2468178735;
LABEL_168:
          if (v2 == v3)
          {
            result = 120;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
        goto LABEL_367;
      }
      if (v2 == 2487868872)
        goto LABEL_384;
      if (v2 != 2516717268)
      {
        v4 = 2614323575;
        goto LABEL_300;
      }
    }
    else
    {
      if (v2 <= 2628394913)
      {
        if (v2 == 2619317134)
          goto LABEL_388;
        if (v2 != 2622433984)
        {
          if (v2 == 2625074843)
          {
            result = 161;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
        goto LABEL_379;
      }
      if (v2 <= 2644487443)
      {
        if (v2 == 2628394914)
          goto LABEL_316;
        v7 = 2634105757;
        goto LABEL_96;
      }
      if (v2 == 2644487444)
      {
        result = 92;
        goto LABEL_472;
      }
      if (v2 != 2673319456)
        goto LABEL_471;
    }
    result = 73;
    goto LABEL_472;
  }
  if (v2 <= 1309571157)
  {
    if (v2 <= 676119127)
    {
      if (v2 <= 337183580)
      {
        if (v2 > 133314239)
        {
          if (v2 > 228444037)
          {
            if (v2 > 262180326)
            {
              if (v2 == 262180327)
              {
                result = 123;
                goto LABEL_472;
              }
              if (v2 == 330877086)
              {
                result = 43;
                goto LABEL_472;
              }
              goto LABEL_471;
            }
            if (v2 != 228444038)
            {
              v3 = 253148925;
              goto LABEL_168;
            }
LABEL_380:
            result = 72;
            goto LABEL_472;
          }
          if (v2 == 133314240)
          {
            result = 40;
            goto LABEL_472;
          }
          if (v2 != 157833461)
          {
            if (v2 == 173258742)
            {
              result = 59;
              goto LABEL_472;
            }
            goto LABEL_471;
          }
LABEL_249:
          result = 78;
          goto LABEL_472;
        }
        if (v2 <= 42878381)
        {
          switch(v2)
          {
            case 23433786:
              result = 61;
              goto LABEL_472;
            case 33245053:
              result = 68;
              goto LABEL_472;
            case 40511012:
              result = 134;
              goto LABEL_472;
          }
          goto LABEL_471;
        }
        if (v2 == 42878382)
        {
          result = 12;
          goto LABEL_472;
        }
        if (v2 != 79936591)
        {
          if (v2 != 88647037)
            goto LABEL_471;
          goto LABEL_389;
        }
LABEL_382:
        result = 76;
        goto LABEL_472;
      }
      if (v2 <= 363237282)
      {
        if (v2 > 344862119)
        {
          switch(v2)
          {
            case 344862120:
              result = 115;
              goto LABEL_472;
            case 355234908:
              result = 129;
              goto LABEL_472;
            case 358923952:
              result = 126;
              goto LABEL_472;
          }
          goto LABEL_471;
        }
        if (v2 == 337183581)
        {
          result = 11;
          goto LABEL_472;
        }
        if (v2 == 340218669)
        {
          result = 111;
          goto LABEL_472;
        }
        v8 = 341800273;
        goto LABEL_162;
      }
      if (v2 <= 502329936)
      {
        if (v2 != 363237283)
        {
          if (v2 == 425046865)
          {
            result = 157;
            goto LABEL_472;
          }
          if (v2 == 445396642)
          {
            result = 117;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
        goto LABEL_372;
      }
      if (v2 <= 555503453)
      {
        if (v2 == 502329937)
        {
          result = 22;
          goto LABEL_472;
        }
        v6 = 551446205;
LABEL_359:
        if (v2 != v6)
          goto LABEL_471;
        goto LABEL_360;
      }
      if (v2 != 555503454)
      {
        if (v2 == 574536383)
        {
          result = 30;
          goto LABEL_472;
        }
        goto LABEL_471;
      }
LABEL_388:
      result = 106;
      goto LABEL_472;
    }
    if (v2 <= 952317140)
    {
      if (v2 > 776033018)
      {
        if (v2 > 851437780)
        {
          if (v2 <= 910181309)
          {
            if (v2 == 851437781)
            {
              result = 29;
              goto LABEL_472;
            }
            if (v2 == 896202454)
            {
              result = 71;
              goto LABEL_472;
            }
            goto LABEL_471;
          }
          if (v2 == 910181310)
            goto LABEL_387;
          if (v2 != 910313402)
            goto LABEL_471;
LABEL_337:
          result = 195;
          goto LABEL_472;
        }
        if (v2 == 776033019)
        {
          result = 57;
          goto LABEL_472;
        }
        if (v2 != 810906663)
        {
          if (v2 != 820711327)
            goto LABEL_471;
          goto LABEL_217;
        }
LABEL_379:
        result = 98;
        goto LABEL_472;
      }
      if (v2 <= 746003605)
      {
        if (v2 == 676119128)
        {
          result = 146;
          goto LABEL_472;
        }
        if (v2 == 689804742)
        {
          result = 36;
          goto LABEL_472;
        }
        v10 = 698697055;
LABEL_370:
        if (v2 != v10)
          goto LABEL_471;
        goto LABEL_371;
      }
      if (v2 == 746003606)
      {
LABEL_316:
        result = 101;
        goto LABEL_472;
      }
      if (v2 == 749116821)
      {
        result = 165;
        goto LABEL_472;
      }
      v5 = 761631964;
LABEL_280:
      if (v2 == v5)
      {
        result = 109;
        goto LABEL_472;
      }
      goto LABEL_471;
    }
    if (v2 > 1169082143)
    {
      if (v2 <= 1280909811)
      {
        if (v2 == 1169082144)
        {
          result = 33;
          goto LABEL_472;
        }
        if (v2 == 1234705395)
        {
          result = 125;
          goto LABEL_472;
        }
        if (v2 != 1280441783)
          goto LABEL_471;
        goto LABEL_249;
      }
      if (v2 <= 1294429941)
      {
        if (v2 == 1280909812)
        {
          result = 152;
          goto LABEL_472;
        }
        if (v2 != 1293446025)
          goto LABEL_471;
        goto LABEL_376;
      }
      if (v2 == 1294429942)
      {
        result = 147;
        goto LABEL_472;
      }
      if (v2 != 1302273958)
        goto LABEL_471;
LABEL_363:
      result = 108;
      goto LABEL_472;
    }
    if (v2 > 1110205731)
    {
      if (v2 == 1110205732)
      {
        result = 48;
        goto LABEL_472;
      }
      if (v2 == 1114644381)
      {
        result = 82;
        goto LABEL_472;
      }
      v6 = 1119807502;
      goto LABEL_359;
    }
    if (v2 != 952317141)
    {
      if (v2 == 1060988941)
      {
        result = 9;
        goto LABEL_472;
      }
      if (v2 == 1085318934)
      {
        result = 131;
        goto LABEL_472;
      }
      goto LABEL_471;
    }
    goto LABEL_378;
  }
  if (v2 <= 1733600852)
  {
    if (v2 <= 1434404432)
    {
      if (v2 > 1380747800)
      {
        if (v2 <= 1412429327)
        {
          switch(v2)
          {
            case 1380747801:
              result = 127;
              goto LABEL_472;
            case 1402208364:
              result = 130;
              goto LABEL_472;
            case 1408738134:
              result = 150;
              goto LABEL_472;
          }
        }
        else if (v2 > 1419435330)
        {
          if (v2 == 1419435331)
          {
            result = 142;
            goto LABEL_472;
          }
          if (v2 == 1429914406)
          {
            result = 23;
            goto LABEL_472;
          }
        }
        else
        {
          if (v2 == 1412429328)
          {
            result = 65;
            goto LABEL_472;
          }
          if (v2 == 1415625992)
          {
            result = 136;
            goto LABEL_472;
          }
        }
        goto LABEL_471;
      }
      if (v2 <= 1364038515)
      {
        if (v2 == 1309571158)
        {
          result = 141;
          goto LABEL_472;
        }
        if (v2 == 1325975682)
        {
          result = 67;
          goto LABEL_472;
        }
        v8 = 1353145733;
LABEL_162:
        if (v2 != v8)
          goto LABEL_471;
        goto LABEL_344;
      }
      if (v2 != 1364038516)
      {
        if (v2 == 1371389549)
        {
          result = 27;
          goto LABEL_472;
        }
        if (v2 != 1373516433)
          goto LABEL_471;
        goto LABEL_272;
      }
LABEL_371:
      result = 194;
      goto LABEL_472;
    }
    if (v2 <= 1573906121)
    {
      if (v2 > 1549248875)
      {
        switch(v2)
        {
          case 1549248876:
            result = 172;
            goto LABEL_472;
          case 1554479185:
            result = 167;
            goto LABEL_472;
          case 1559256613:
            result = 55;
            goto LABEL_472;
        }
      }
      else
      {
        switch(v2)
        {
          case 1434404433:
            result = 17;
            goto LABEL_472;
          case 1517755655:
            result = 171;
            goto LABEL_472;
          case 1540760353:
            result = 5;
            goto LABEL_472;
        }
      }
      goto LABEL_471;
    }
    if (v2 <= 1625227433)
    {
      switch(v2)
      {
        case 1573906122:
          result = 138;
          goto LABEL_472;
        case 1602181456:
          result = 154;
          goto LABEL_472;
        case 1608945770:
          result = 192;
          goto LABEL_472;
      }
      goto LABEL_471;
    }
    if (v2 > 1701146936)
    {
      if (v2 == 1701146937)
      {
        result = 49;
        goto LABEL_472;
      }
      if (v2 == 1721691077)
      {
        result = 16;
        goto LABEL_472;
      }
      goto LABEL_471;
    }
    if (v2 != 1625227434)
    {
      if (v2 == 1644180312)
      {
        result = 145;
        goto LABEL_472;
      }
      goto LABEL_471;
    }
    goto LABEL_383;
  }
  if (v2 <= 2023824666)
  {
    if (v2 > 1868379042)
    {
      if (v2 <= 1908832378)
      {
        if (v2 != 1868379043)
        {
          if (v2 == 1878257790)
          {
            result = 81;
            goto LABEL_472;
          }
          if (v2 == 1895344378)
          {
            result = 86;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
        goto LABEL_272;
      }
      if (v2 <= 2001966016)
      {
        if (v2 != 1908832379)
        {
          if (v2 == 1990293942)
          {
            result = 140;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
LABEL_377:
        result = 196;
        goto LABEL_472;
      }
      if (v2 != 2001966017)
      {
        if (v2 == 2021146989)
        {
          result = 18;
          goto LABEL_472;
        }
        goto LABEL_471;
      }
LABEL_344:
      result = 88;
      goto LABEL_472;
    }
    if (v2 <= 1756509289)
    {
      if (v2 == 1733600853)
      {
        result = 128;
        goto LABEL_472;
      }
      if (v2 == 1737882206)
      {
        result = 116;
        goto LABEL_472;
      }
      v9 = 1744899922;
      goto LABEL_151;
    }
    if (v2 == 1756509290)
    {
      result = 144;
      goto LABEL_472;
    }
    if (v2 == 1770142589)
    {
      result = 163;
      goto LABEL_472;
    }
    v11 = 1834147427;
    goto LABEL_315;
  }
  if (v2 > 2085054104)
  {
    if (v2 > 2103978417)
    {
      if (v2 <= 2141052861)
      {
        if (v2 != 2103978418)
        {
          if (v2 == 2132302344)
          {
            result = 148;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
LABEL_376:
        result = 96;
        goto LABEL_472;
      }
      if (v2 != 2141052862)
      {
        v10 = 2144123136;
        goto LABEL_370;
      }
LABEL_372:
      result = 193;
      goto LABEL_472;
    }
    if (v2 == 2085054105)
    {
      result = 158;
      goto LABEL_472;
    }
    if (v2 != 2089455188)
    {
      if (v2 != 2095883268)
        goto LABEL_471;
      goto LABEL_256;
    }
LABEL_381:
    result = 105;
    goto LABEL_472;
  }
  if (v2 <= 2078329140)
  {
    if (v2 != 2023824667)
    {
      if (v2 != 2032616841)
      {
        if (v2 == 2048538371)
        {
          result = 60;
          goto LABEL_472;
        }
        goto LABEL_471;
      }
LABEL_387:
      result = 25;
      goto LABEL_472;
    }
LABEL_272:
    result = 100;
    goto LABEL_472;
  }
  if (v2 > 2081274471)
  {
    if (v2 != 2081274472)
    {
      if (v2 == 2084894489)
      {
        result = 164;
        goto LABEL_472;
      }
      goto LABEL_471;
    }
LABEL_386:
    result = 122;
    goto LABEL_472;
  }
  if (v2 == 2078329141)
  {
    result = 31;
    goto LABEL_472;
  }
  if (v2 != 2080700391)
    goto LABEL_471;
  result = 46;
LABEL_472:
  PlatformUtilities_iOS::GetProductType(void)::sType = result;
  return result;
}

void AudioStatisticsSPIImplementation::~AudioStatisticsSPIImplementation(AudioStatisticsSPIImplementation *this)
{
  JUMPOUT(0x219A00DF0);
}

void std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<applesauce::CF::TypeRefPair>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

void applesauce::CF::TypeRef::~TypeRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t std::unique_ptr<ADAM::Sequencer>::reset[abi:ne180100](uint64_t result)
{
  std::thread *v1;

  v1 = (std::thread *)qword_253D976C8;
  qword_253D976C8 = result;
  if (v1)
  {
    std::thread::~thread(v1 + 1);
    std::thread::~thread(v1);
    JUMPOUT(0x219A00DF0);
  }
  return result;
}

void std::default_delete<ADAM::Dispatcher>::operator()[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::destroy(*(char **)(a1 + 72));
  std::mutex::~mutex((std::mutex *)a1);
  JUMPOUT(0x219A00DF0);
}

uint64_t std::unique_ptr<ADAM::AnalyzerManager>::reset[abi:ne180100](uint64_t result)
{
  void **v1;
  void **v2;

  v1 = (void **)qword_253D976B8;
  qword_253D976B8 = result;
  if (v1)
  {
    v2 = v1;
    std::vector<std::unique_ptr<CaulkSPIImplementation::Message>>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x219A00DF0);
  }
  return result;
}

void std::default_delete<ADAM::AudioDataAnalysisManager::XPCServiceState>::operator()[abi:ne180100](uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));

  JUMPOUT(0x219A00DF0);
}

ADAM::ClientSessionManager *std::unique_ptr<ADAM::ClientSessionManager>::reset[abi:ne180100](ADAM::ClientSessionManager **a1)
{
  ADAM::ClientSessionManager *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    ADAM::ClientSessionManager::~ClientSessionManager(result);
    JUMPOUT(0x219A00DF0);
  }
  return result;
}

void std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::destroy(char *a1)
{
  void **v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void **)(a1 + 40);
    std::vector<std::unique_ptr<ADAM::Writer>>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

void std::vector<std::unique_ptr<ADAM::Writer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ADAM::AudioDataAnalysisManager::AudioDataAnalysisManager(ADAM::AudioDataAnalysisManager *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  int64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  ADAM::Parameters *v57;
  float Param;
  NSObject *v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  int64x2_t v75;
  uint64_t v76;
  ADAM::Parameters *v77;
  float HAELiveUIAccumulationPeriodInSec;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  int64x2_t v94;
  uint64_t v95;
  ADAM::Parameters *v96;
  float v97;
  NSObject *v98;
  id v99;
  float v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  int64x2_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  id v121;
  void *v122;
  unsigned int v123;
  _BYTE buf[32];
  uint64_t v125;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  ADAM::AudioDataAnalysisManager::instance(void)::gAdam = 0u;
  *(_OWORD *)&qword_253D975D8 = 0u;
  dword_253D975E8 = 1065353216;
  *(_OWORD *)&qword_253D975F0 = 0u;
  *(_OWORD *)&qword_253D97600 = 0u;
  dword_253D97610 = 1065353216;
  qword_253D97618 = 850045863;
  unk_253D97620 = 0u;
  unk_253D97630 = 0u;
  unk_253D97640 = 0u;
  qword_253D97650 = 0;
  caulk::semaphore::semaphore((caulk::semaphore *)&unk_253D97658);
  byte_253D97668 = 0;
  qword_253D97670 = 0;
  unk_253D976B0 = 0u;
  *(_OWORD *)&qword_253D976C0 = 0u;
  *(_OWORD *)&qword_253D976D0 = 0u;
  v1 = operator new();
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_WORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  std::unique_ptr<ADAM::Sequencer>::reset[abi:ne180100](v1);
  v2 = operator new();
  *(_QWORD *)v2 = 850045863;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = v2 + 72;
  v3 = qword_253D976C0;
  qword_253D976C0 = v2;
  if (v3)
    std::default_delete<ADAM::Dispatcher>::operator()[abi:ne180100](v3);
  v4 = operator new();
  *(_QWORD *)(v4 + 104) = 0;
  *(_BYTE *)(v4 + 112) = 0;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_DWORD *)(v4 + 96) = 0;
  if (ADAM::isSpeechAnalysisEnabled(void)::once != -1)
    dispatch_once(&ADAM::isSpeechAnalysisEnabled(void)::once, &__block_literal_global_27);
  if (ADAM::isSpeechAnalysisEnabled(void)::ans)
  {
    v5 = operator new();
    v6 = v5;
    *(_DWORD *)(v5 + 12) = 0;
    *(_QWORD *)(v5 + 16) = 10;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 97) = 0u;
    *(_QWORD *)v5 = &off_24D616270;
    *(_QWORD *)(v5 + 120) = 0;
    *(_QWORD *)(v5 + 168) = 0;
    *(_DWORD *)(v5 + 176) = 0;
    strcpy((char *)(v5 + 184), "don!dis!");
    v7 = *(_QWORD *)(v4 + 16);
    v8 = *(uint64_t **)(v4 + 8);
    if ((unint64_t)v8 >= v7)
    {
      v10 = ((uint64_t)v8 - *(_QWORD *)v4) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
      v11 = v7 - *(_QWORD *)v4;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      v125 = v4 + 16;
      if (v13)
        v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v13);
      else
        v14 = 0;
      v15 = (uint64_t *)(v13 + 8 * v10);
      v16 = v13 + 8 * v14;
      *(_QWORD *)&buf[24] = v16;
      *v15 = v6;
      v9 = v15 + 1;
      *(_QWORD *)&buf[16] = v15 + 1;
      v18 = *(_QWORD **)v4;
      v17 = *(_QWORD **)(v4 + 8);
      if (v17 == *(_QWORD **)v4)
      {
        v20 = vdupq_n_s64((unint64_t)v17);
      }
      else
      {
        do
        {
          v19 = *--v17;
          *v17 = 0;
          *--v15 = v19;
        }
        while (v17 != v18);
        v20 = *(int64x2_t *)v4;
        v9 = *(_QWORD **)&buf[16];
        v16 = *(_QWORD *)&buf[24];
      }
      *(_QWORD *)v4 = v15;
      *(_QWORD *)(v4 + 8) = v9;
      *(int64x2_t *)&buf[8] = v20;
      v21 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v4 + 16) = v16;
      *(_QWORD *)&buf[24] = v21;
      *(_QWORD *)buf = v20.i64[0];
      std::__split_buffer<std::unique_ptr<ADAM::AnalysisNodeBase>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *v8 = v5;
      v9 = v8 + 1;
    }
    *(_QWORD *)(v4 + 8) = v9;
  }
  v22 = operator new();
  v23 = v22;
  *(_DWORD *)(v22 + 12) = 1;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)(v22 + 48) = 0u;
  *(_OWORD *)(v22 + 64) = 0u;
  *(_OWORD *)(v22 + 80) = 0u;
  *(_OWORD *)(v22 + 96) = 0u;
  *(_BYTE *)(v22 + 112) = 0;
  *(_QWORD *)v22 = &off_24D615C28;
  *(_QWORD *)(v22 + 16) = 4;
  *(_QWORD *)(v22 + 24) = v22 + 116;
  v24 = *(_QWORD *)(v4 + 16);
  v25 = *(uint64_t **)(v4 + 8);
  if ((unint64_t)v25 >= v24)
  {
    v27 = ((uint64_t)v25 - *(_QWORD *)v4) >> 3;
    if ((unint64_t)(v27 + 1) >> 61)
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    v28 = v24 - *(_QWORD *)v4;
    v29 = v28 >> 2;
    if (v28 >> 2 <= (unint64_t)(v27 + 1))
      v29 = v27 + 1;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
      v30 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v30 = v29;
    v125 = v4 + 16;
    if (v30)
      v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v30);
    else
      v31 = 0;
    v32 = (uint64_t *)(v30 + 8 * v27);
    v33 = v30 + 8 * v31;
    *(_QWORD *)&buf[24] = v33;
    *v32 = v23;
    v26 = v32 + 1;
    *(_QWORD *)&buf[16] = v32 + 1;
    v35 = *(_QWORD **)v4;
    v34 = *(_QWORD **)(v4 + 8);
    if (v34 == *(_QWORD **)v4)
    {
      v37 = vdupq_n_s64((unint64_t)v34);
    }
    else
    {
      do
      {
        v36 = *--v34;
        *v34 = 0;
        *--v32 = v36;
      }
      while (v34 != v35);
      v37 = *(int64x2_t *)v4;
      v26 = *(_QWORD **)&buf[16];
      v33 = *(_QWORD *)&buf[24];
    }
    *(_QWORD *)v4 = v32;
    *(_QWORD *)(v4 + 8) = v26;
    *(int64x2_t *)&buf[8] = v37;
    v38 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v33;
    *(_QWORD *)&buf[24] = v38;
    *(_QWORD *)buf = v37.i64[0];
    std::__split_buffer<std::unique_ptr<ADAM::AnalysisNodeBase>>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    *v25 = v22;
    v26 = v25 + 1;
  }
  *(_QWORD *)(v4 + 8) = v26;
  v39 = operator new();
  v40 = v39;
  *(_DWORD *)(v39 + 12) = 2;
  *(_OWORD *)(v39 + 32) = 0u;
  *(_OWORD *)(v39 + 48) = 0u;
  *(_OWORD *)(v39 + 64) = 0u;
  *(_OWORD *)(v39 + 80) = 0u;
  *(_OWORD *)(v39 + 96) = 0u;
  *(_BYTE *)(v39 + 112) = 0;
  *(_QWORD *)v39 = &off_24D615C70;
  *(_QWORD *)(v39 + 16) = 128;
  *(_QWORD *)(v39 + 24) = v39 + 120;
  v42 = *(uint64_t **)(v4 + 8);
  v41 = *(_QWORD *)(v4 + 16);
  if ((unint64_t)v42 >= v41)
  {
    v44 = ((uint64_t)v42 - *(_QWORD *)v4) >> 3;
    if ((unint64_t)(v44 + 1) >> 61)
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    v45 = v41 - *(_QWORD *)v4;
    v46 = v45 >> 2;
    if (v45 >> 2 <= (unint64_t)(v44 + 1))
      v46 = v44 + 1;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
      v47 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v47 = v46;
    v125 = v4 + 16;
    if (v47)
      v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v47);
    else
      v48 = 0;
    v49 = (uint64_t *)(v47 + 8 * v44);
    v50 = v47 + 8 * v48;
    *(_QWORD *)&buf[24] = v50;
    *v49 = v40;
    v43 = v49 + 1;
    *(_QWORD *)&buf[16] = v49 + 1;
    v52 = *(_QWORD **)v4;
    v51 = *(_QWORD **)(v4 + 8);
    if (v51 == *(_QWORD **)v4)
    {
      v54 = vdupq_n_s64((unint64_t)v51);
    }
    else
    {
      do
      {
        v53 = *--v51;
        *v51 = 0;
        *--v49 = v53;
      }
      while (v51 != v52);
      v54 = *(int64x2_t *)v4;
      v43 = *(_QWORD **)&buf[16];
      v50 = *(_QWORD *)&buf[24];
    }
    *(_QWORD *)v4 = v49;
    *(_QWORD *)(v4 + 8) = v43;
    *(int64x2_t *)&buf[8] = v54;
    v55 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v50;
    *(_QWORD *)&buf[24] = v55;
    *(_QWORD *)buf = v54.i64[0];
    std::__split_buffer<std::unique_ptr<ADAM::AnalysisNodeBase>>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    *v42 = v39;
    v43 = v42 + 1;
  }
  *(_QWORD *)(v4 + 8) = v43;
  v56 = operator new();
  *(_DWORD *)(v56 + 12) = 1;
  *(_QWORD *)(v56 + 16) = 33;
  *(_OWORD *)(v56 + 24) = 0u;
  *(_OWORD *)(v56 + 40) = 0u;
  *(_OWORD *)(v56 + 56) = 0u;
  *(_OWORD *)(v56 + 72) = 0u;
  *(_OWORD *)(v56 + 88) = 0u;
  *(_OWORD *)(v56 + 97) = 0u;
  *(_QWORD *)v56 = &off_24D6162B8;
  *(_OWORD *)(v56 + 136) = 0u;
  *(_OWORD *)(v56 + 152) = 0u;
  *(_OWORD *)(v56 + 168) = 0u;
  ADAM::Parameters::instance((ADAM::Parameters *)v56);
  Param = ADAM::Parameters::GetParamValue<float>(6u);
  *(double *)(v56 + 184) = Param;
  if (Param <= 0.0 || Param > 60.0)
  {
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v57 = (ADAM::Parameters *)*(id *)ADAM::ADAMLogScope(void)::scope;
      v59 = v57;
      if (!v57)
      {
LABEL_66:
        *(_QWORD *)(v56 + 184) = 0x4008000000000000;
        goto LABEL_67;
      }
    }
    else
    {
      v59 = MEMORY[0x24BDACB70];
      v60 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      v61 = *(_QWORD *)(v56 + 184);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "LoudnessAnalyzer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 25;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v61;
      _os_log_impl(&dword_216CFB000, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid Accumulation Period in Seconds for HAE: %.2f, default to 3.0s", buf, 0x1Cu);
    }

    goto LABEL_66;
  }
LABEL_67:
  *(_QWORD *)(v56 + 24) = v56 + 116;
  v63 = *(uint64_t **)(v4 + 8);
  v62 = *(_QWORD *)(v4 + 16);
  if ((unint64_t)v63 >= v62)
  {
    v65 = ((uint64_t)v63 - *(_QWORD *)v4) >> 3;
    if ((unint64_t)(v65 + 1) >> 61)
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    v66 = v62 - *(_QWORD *)v4;
    v67 = v66 >> 2;
    if (v66 >> 2 <= (unint64_t)(v65 + 1))
      v67 = v65 + 1;
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
      v68 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v68 = v67;
    v125 = v4 + 16;
    if (v68)
      v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v68);
    else
      v69 = 0;
    v70 = (uint64_t *)(v68 + 8 * v65);
    v71 = v68 + 8 * v69;
    *(_QWORD *)&buf[24] = v71;
    *v70 = v56;
    v64 = v70 + 1;
    *(_QWORD *)&buf[16] = v70 + 1;
    v73 = *(_QWORD **)v4;
    v72 = *(_QWORD **)(v4 + 8);
    if (v72 == *(_QWORD **)v4)
    {
      v75 = vdupq_n_s64((unint64_t)v72);
    }
    else
    {
      do
      {
        v74 = *--v72;
        *v72 = 0;
        *--v70 = v74;
      }
      while (v72 != v73);
      v75 = *(int64x2_t *)v4;
      v64 = *(_QWORD **)&buf[16];
      v71 = *(_QWORD *)&buf[24];
    }
    *(_QWORD *)v4 = v70;
    *(_QWORD *)(v4 + 8) = v64;
    *(int64x2_t *)&buf[8] = v75;
    v76 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v71;
    *(_QWORD *)&buf[24] = v76;
    *(_QWORD *)buf = v75.i64[0];
    v57 = (ADAM::Parameters *)std::__split_buffer<std::unique_ptr<ADAM::AnalysisNodeBase>>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    *v63 = v56;
    v64 = v63 + 1;
  }
  *(_QWORD *)(v4 + 8) = v64;
  ADAM::Parameters::instance(v57);
  HAELiveUIAccumulationPeriodInSec = ADAM::Parameters::GetHAELiveUIAccumulationPeriodInSec(v77);
  v79 = operator new();
  v80 = v79;
  *(_DWORD *)(v79 + 12) = 1;
  *(_OWORD *)(v79 + 32) = 0u;
  *(_OWORD *)(v79 + 48) = 0u;
  *(_OWORD *)(v79 + 64) = 0u;
  *(_OWORD *)(v79 + 80) = 0u;
  *(_OWORD *)(v79 + 96) = 0u;
  *(_BYTE *)(v79 + 112) = 0;
  *(_QWORD *)v79 = &off_24D616900;
  *(_QWORD *)(v79 + 120) = 0;
  *(_QWORD *)(v79 + 128) = 0;
  *(double *)(v79 + 160) = HAELiveUIAccumulationPeriodInSec + -2.22044605e-16;
  *(_QWORD *)(v79 + 16) = 64;
  *(_QWORD *)(v79 + 24) = v79 + 136;
  v82 = *(uint64_t **)(v4 + 8);
  v81 = *(_QWORD *)(v4 + 16);
  if ((unint64_t)v82 >= v81)
  {
    v84 = ((uint64_t)v82 - *(_QWORD *)v4) >> 3;
    if ((unint64_t)(v84 + 1) >> 61)
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    v85 = v81 - *(_QWORD *)v4;
    v86 = v85 >> 2;
    if (v85 >> 2 <= (unint64_t)(v84 + 1))
      v86 = v84 + 1;
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
      v87 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v87 = v86;
    v125 = v4 + 16;
    if (v87)
      v87 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v87);
    else
      v88 = 0;
    v89 = (uint64_t *)(v87 + 8 * v84);
    v90 = v87 + 8 * v88;
    *(_QWORD *)&buf[24] = v90;
    *v89 = v80;
    v83 = v89 + 1;
    *(_QWORD *)&buf[16] = v89 + 1;
    v92 = *(_QWORD **)v4;
    v91 = *(_QWORD **)(v4 + 8);
    if (v91 == *(_QWORD **)v4)
    {
      v94 = vdupq_n_s64((unint64_t)v91);
    }
    else
    {
      do
      {
        v93 = *--v91;
        *v91 = 0;
        *--v89 = v93;
      }
      while (v91 != v92);
      v94 = *(int64x2_t *)v4;
      v83 = *(_QWORD **)&buf[16];
      v90 = *(_QWORD *)&buf[24];
    }
    *(_QWORD *)v4 = v89;
    *(_QWORD *)(v4 + 8) = v83;
    *(int64x2_t *)&buf[8] = v94;
    v95 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v90;
    *(_QWORD *)&buf[24] = v95;
    *(_QWORD *)buf = v94.i64[0];
    v79 = std::__split_buffer<std::unique_ptr<ADAM::AnalysisNodeBase>>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    *v82 = v79;
    v83 = v82 + 1;
  }
  *(_QWORD *)(v4 + 8) = v83;
  ADAM::Parameters::instance((ADAM::Parameters *)v79);
  v97 = ADAM::Parameters::GetParamValue<float>(0xAu);
  if (v97 <= 0.0 || v97 > 1001.0)
  {
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v96 = (ADAM::Parameters *)*(id *)ADAM::ADAMLogScope(void)::scope;
      v98 = v96;
      if (!v96)
      {
LABEL_110:
        v97 = 100.0;
        goto LABEL_111;
      }
    }
    else
    {
      v98 = MEMORY[0x24BDACB70];
      v99 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ADAMParameters.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 171;
      *(_WORD *)&buf[18] = 2048;
      *(double *)&buf[20] = v97;
      _os_log_impl(&dword_216CFB000, v98, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid Accumulation Period in Milli Seconds for HAE Gauge: %.2f, default to 100ms", buf, 0x1Cu);
    }

    goto LABEL_110;
  }
LABEL_111:
  v100 = ADAM::Parameters::GetHAELiveUIAccumulationPeriodInSec(v96);
  v101 = operator new();
  v102 = v101;
  *(_DWORD *)(v101 + 12) = 1;
  *(_OWORD *)(v101 + 32) = 0u;
  *(_OWORD *)(v101 + 48) = 0u;
  *(_OWORD *)(v101 + 64) = 0u;
  *(_OWORD *)(v101 + 80) = 0u;
  *(_OWORD *)(v101 + 96) = 0u;
  *(_BYTE *)(v101 + 112) = 0;
  *(_QWORD *)v101 = &off_24D616900;
  *(_QWORD *)(v101 + 120) = 0;
  *(_QWORD *)(v101 + 128) = 0;
  *(double *)(v101 + 160) = (float)(fminf(v97, (float)(v100 * 1000.0) * 0.5) / 1000.0) + -2.22044605e-16;
  *(_QWORD *)(v101 + 16) = 64;
  *(_QWORD *)(v101 + 24) = v101 + 136;
  v104 = *(uint64_t **)(v4 + 8);
  v103 = *(_QWORD *)(v4 + 16);
  if ((unint64_t)v104 >= v103)
  {
    v106 = ((uint64_t)v104 - *(_QWORD *)v4) >> 3;
    if ((unint64_t)(v106 + 1) >> 61)
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    v107 = v103 - *(_QWORD *)v4;
    v108 = v107 >> 2;
    if (v107 >> 2 <= (unint64_t)(v106 + 1))
      v108 = v106 + 1;
    if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8)
      v109 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v109 = v108;
    v125 = v4 + 16;
    if (v109)
      v109 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v109);
    else
      v110 = 0;
    v111 = (uint64_t *)(v109 + 8 * v106);
    v112 = v109 + 8 * v110;
    *(_QWORD *)&buf[24] = v112;
    *v111 = v102;
    v105 = v111 + 1;
    *(_QWORD *)&buf[16] = v111 + 1;
    v114 = *(_QWORD **)v4;
    v113 = *(_QWORD **)(v4 + 8);
    if (v113 == *(_QWORD **)v4)
    {
      v116 = vdupq_n_s64((unint64_t)v113);
    }
    else
    {
      do
      {
        v115 = *--v113;
        *v113 = 0;
        *--v111 = v115;
      }
      while (v113 != v114);
      v116 = *(int64x2_t *)v4;
      v105 = *(_QWORD **)&buf[16];
      v112 = *(_QWORD *)&buf[24];
    }
    *(_QWORD *)v4 = v111;
    *(_QWORD *)(v4 + 8) = v105;
    *(int64x2_t *)&buf[8] = v116;
    v117 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v112;
    *(_QWORD *)&buf[24] = v117;
    *(_QWORD *)buf = v116.i64[0];
    std::__split_buffer<std::unique_ptr<ADAM::AnalysisNodeBase>>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    *v104 = v101;
    v105 = v104 + 1;
  }
  *(_QWORD *)(v4 + 8) = v105;
  std::unique_ptr<ADAM::AnalyzerManager>::reset[abi:ne180100](v4);
  v118 = operator new();
  *(_QWORD *)v118 = 0;
  *(_QWORD *)(v118 + 8) = 0;
  *(_QWORD *)(v118 + 16) = 0;
  *(_QWORD *)(v118 + 24) = 850045863;
  *(_OWORD *)(v118 + 32) = 0u;
  *(_OWORD *)(v118 + 48) = 0u;
  *(_OWORD *)(v118 + 64) = 0u;
  *(_QWORD *)(v118 + 80) = 0;
  v119 = qword_253D976D0;
  qword_253D976D0 = v118;
  if (v119)
    std::default_delete<ADAM::AudioDataAnalysisManager::XPCServiceState>::operator()[abi:ne180100](v119);
  v120 = (void *)MEMORY[0x219A01060]();
  v121 = objc_alloc_init(MEMORY[0x24BDBCED8]);
  v122 = *(void **)(qword_253D976D0 + 16);
  *(_QWORD *)(qword_253D976D0 + 16) = v121;

  objc_autoreleasePoolPop(v120);
  v123 = time(0);
  srand(v123);
}

void sub_216D1A1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  ADAM::ClientSessionManager **v21;
  ADAM::ClientSessionManager *v22;
  void *v23;

  v12 = v11;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  a10 = v10;
  std::vector<std::unique_ptr<CaulkSPIImplementation::Message>>::__destroy_vector::operator()[abi:ne180100](&a10);
  MEMORY[0x219A00DF0](v10, 0x10A2C40C815ADB6);
  if (qword_253D976D8)
    CFRelease((CFTypeRef)qword_253D976D8);
  v14 = qword_253D976D0;
  qword_253D976D0 = 0;
  if (v14)
    std::default_delete<ADAM::AudioDataAnalysisManager::XPCServiceState>::operator()[abi:ne180100](v14);
  std::unique_ptr<ADAM::Sequencer>::reset[abi:ne180100](0);
  v15 = qword_253D976C0;
  qword_253D976C0 = 0;
  if (v15)
    std::default_delete<ADAM::Dispatcher>::operator()[abi:ne180100](v15);
  std::unique_ptr<ADAM::AnalyzerManager>::reset[abi:ne180100](0);
  MEMORY[0x219A00A84](&unk_253D97658);
  std::mutex::~mutex((std::mutex *)&qword_253D97618);
  v16 = (_QWORD *)qword_253D97600;
  if (qword_253D97600)
  {
    do
    {
      v17 = (_QWORD *)*v16;
      v18 = v16[4];
      v16[4] = 0;
      if (v18)
      {
        v19 = MEMORY[0x219A00A84]();
        MEMORY[0x219A00DF0](v19, 0x1000C40A517B1A3);
      }
      operator delete(v16);
      v16 = v17;
    }
    while (v17);
  }
  v20 = (void *)qword_253D975F0;
  qword_253D975F0 = 0;
  if (v20)
    operator delete(v20);
  v21 = (ADAM::ClientSessionManager **)qword_253D975D8;
  if (qword_253D975D8)
  {
    do
    {
      v22 = *v21;
      std::unique_ptr<ADAM::ClientSessionManager>::reset[abi:ne180100](v21 + 3);
      operator delete(v21);
      v21 = (ADAM::ClientSessionManager **)v22;
    }
    while (v22);
  }
  v23 = (void *)ADAM::AudioDataAnalysisManager::instance(void)::gAdam;
  *(_QWORD *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam = 0;
  if (v23)
    operator delete(v23);
  _Unwind_Resume(a1);
}

void ADAM::AudioDataAnalysisManager::initialize(ADAM::AudioDataAnalysisManager *this)
{
  unsigned __int8 v1;
  NSObject *v2;
  id v3;
  uint64_t v4;
  void *v5;
  ADAMServiceListenerDelegate *v6;
  void *v7;
  NSObject *v8;
  id v9;
  unint64_t v10;
  NSObject *v11;
  id v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE buf[12];
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if ((v1 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &ADAM::AudioDataAnalysisManager::initialize(void)::sLock, &dword_216CFB000);
  }
  std::mutex::lock(&ADAM::AudioDataAnalysisManager::initialize(void)::sLock);
  if (byte_253D97668)
    goto LABEL_44;
  if (ADAM::isXCTest(void)::once != -1)
    dispatch_once(&ADAM::isXCTest(void)::once, &__block_literal_global_45);
  if (ADAM::isXCTest(void)::isXCTest)
    goto LABEL_24;
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (!ADAM::ADAMLogScope(void)::scope)
  {
    v2 = MEMORY[0x24BDACB70];
    v3 = MEMORY[0x24BDACB70];
    goto LABEL_12;
  }
  v2 = *(id *)ADAM::ADAMLogScope(void)::scope;
  if (v2)
  {
LABEL_12:
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioDataAnalysisManager.cpp";
      v18 = 1024;
      v19 = 753;
      _os_log_impl(&dword_216CFB000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Starting ADAM XPC Service Listeners...", buf, 0x12u);
    }

  }
  v4 = objc_msgSend(objc_alloc(MEMORY[0x24BDD1998]), "initWithMachServiceName:", CFSTR("com.apple.audio.adam.xpc"));
  v5 = *(void **)(qword_253D976D0 + 8);
  *(_QWORD *)(qword_253D976D0 + 8) = v4;

  v6 = objc_alloc_init(ADAMServiceListenerDelegate);
  v7 = *(void **)qword_253D976D0;
  *(_QWORD *)qword_253D976D0 = v6;

  objc_msgSend(*(id *)(qword_253D976D0 + 8), "setDelegate:", *(_QWORD *)qword_253D976D0);
  objc_msgSend(*(id *)(qword_253D976D0 + 8), "resume");
  objc_msgSend(MEMORY[0x24BE3E7F0], "startNotificationCenterServer");
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v8 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v8)
      goto LABEL_24;
  }
  else
  {
    v8 = MEMORY[0x24BDACB70];
    v9 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioDataAnalysisManager.cpp";
    v18 = 1024;
    v19 = 761;
    _os_log_impl(&dword_216CFB000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ADAM XPC Services Started...", buf, 0x12u);
  }

LABEL_24:
  v15 = qword_253D976C8;
  v10 = atomic_load(&ADAM::Sequencer::init(void)::mOnce);
  if (v10 != -1)
  {
    *(_QWORD *)buf = &v15;
    v16 = buf;
    std::__call_once(&ADAM::Sequencer::init(void)::mOnce, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<ADAM::Sequencer::init(void)::$_0 &&>>);
  }
  *(_BYTE *)(qword_253D976B8 + 112) = 1;
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (!ADAM::ADAMLogScope(void)::scope)
  {
    v11 = MEMORY[0x24BDACB70];
    v12 = MEMORY[0x24BDACB70];
    goto LABEL_32;
  }
  v11 = *(id *)ADAM::ADAMLogScope(void)::scope;
  if (v11)
  {
LABEL_32:
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "ADAMAnalyzerManager.cpp";
      v18 = 1024;
      v19 = 52;
      _os_log_impl(&dword_216CFB000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d AnalyzerManager initialized", buf, 0x12u);
    }

  }
  byte_253D97668 = 1;
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v13 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v13)
      goto LABEL_44;
  }
  else
  {
    v13 = MEMORY[0x24BDACB70];
    v14 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioDataAnalysisManager.cpp";
    v18 = 1024;
    v19 = 73;
    _os_log_impl(&dword_216CFB000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ADAM Initialized", buf, 0x12u);
  }

LABEL_44:
  std::mutex::unlock(&ADAM::AudioDataAnalysisManager::initialize(void)::sLock);
}

void sub_216D1A80C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void ADAM::session_lock_exclusive::session_lock_exclusive(ADAM::session_lock_exclusive *this)
{
  ADAM::session_lock_exclusive *v1;
  ADAM::session_lock *v2;
  int v3;
  int v4;
  int v5;

  ADAM::session_lock_exclusive::shared_cnt(this);
  ADAM::session_lock_exclusive::exclusive_flag(v1);
  while (1)
  {
    v3 = __ldaxr((unsigned __int8 *)&ADAM::session_lock_exclusive::exclusive_flag(void)::_f);
    if (v3)
      break;
    if (!__stlxr(1u, (unsigned __int8 *)&ADAM::session_lock_exclusive::exclusive_flag(void)::_f))
    {
LABEL_10:
      while (ADAM::session_lock_exclusive::shared_cnt(void)::_c)
        ;
      ADAM::session_lock::lock_inst(v2);
      JUMPOUT(0x219A00C70);
    }
  }
  __clrex();
  while (1)
  {
    v4 = __ldaxr((unsigned __int8 *)&ADAM::session_lock_exclusive::exclusive_flag(void)::_f);
    if (v4 == v3)
    {
      v5 = 1;
      if (!__stlxr(1u, (unsigned __int8 *)&ADAM::session_lock_exclusive::exclusive_flag(void)::_f))
        goto LABEL_9;
    }
    else
    {
      v5 = 0;
      __clrex();
LABEL_9:
      LOBYTE(v3) = v4;
      if (v5)
        goto LABEL_10;
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>>>::find<unsigned long long>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void ADAM::session_lock_exclusive::~session_lock_exclusive(ADAM::session_lock_exclusive *this)
{
  ADAM::session_lock_exclusive *v1;

  ADAM::session_lock::lock_inst(this);
  v1 = (ADAM::session_lock_exclusive *)MEMORY[0x219A00C7C](&ADAM::session_lock::lock_inst(void)::_m);
  ADAM::session_lock_exclusive::exclusive_flag(v1);
  atomic_store(0, (unsigned __int8 *)&ADAM::session_lock_exclusive::exclusive_flag(void)::_f);
}

void ADAM::session_lock::lock_inst(ADAM::session_lock *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      std::shared_timed_mutex::shared_timed_mutex(&ADAM::session_lock::lock_inst(void)::_m);
    }
  }
}

void sub_216D1A9F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ADAM::session_lock_exclusive::exclusive_flag(ADAM::session_lock_exclusive *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ADAM::session_lock_exclusive::exclusive_flag(void)::_f = 0;
    }
  }
}

void ADAM::session_lock_exclusive::shared_cnt(ADAM::session_lock_exclusive *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ADAM::session_lock_exclusive::shared_cnt(void)::_c = 0;
    }
  }
}

uint64_t ADAM::AudioDataAnalysisManager::getClientSessionMananger(ADAM::AudioDataAnalysisManager *this, unint64_t a2)
{
  ADAM::session_lock_shared *v4;
  uint64_t v5;

  ADAM::session_lock::lock_inst(this);
  MEMORY[0x219A00C58](&ADAM::session_lock::lock_inst(void)::_m);
  v4 = (ADAM::session_lock_shared *)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>>>::find<unsigned long long>(this, a2);
  if (v4)
    v5 = *((_QWORD *)v4 + 3);
  else
    v5 = 0;
  ADAM::session_lock_shared::~session_lock_shared(v4);
  return v5;
}

void ADAM::session_lock_shared::~session_lock_shared(ADAM::session_lock_shared *this)
{
  ADAM::session_lock::lock_inst(this);
  MEMORY[0x219A00C64](&ADAM::session_lock::lock_inst(void)::_m);
}

ADAM::session_lock_exclusive::session_lock_exclusive_flag *ADAM::session_lock_exclusive::session_lock_exclusive_flag::session_lock_exclusive_flag(ADAM::session_lock_exclusive::session_lock_exclusive_flag *this)
{
  ADAM::session_lock_exclusive *v2;
  ADAM::session_lock_exclusive *v3;
  unsigned int v5;

  *(_BYTE *)this = 0;
  ADAM::session_lock_exclusive::shared_cnt(this);
  ADAM::session_lock_exclusive::exclusive_flag(v2);
  if (__ldaxr((unsigned __int8 *)&ADAM::session_lock_exclusive::exclusive_flag(void)::_f))
  {
    __clrex();
  }
  else if (!__stlxr(1u, (unsigned __int8 *)&ADAM::session_lock_exclusive::exclusive_flag(void)::_f))
  {
    do
      v5 = __ldxr((unsigned int *)&ADAM::session_lock_exclusive::shared_cnt(void)::_c);
    while (__stxr(v5 + 1, (unsigned int *)&ADAM::session_lock_exclusive::shared_cnt(void)::_c));
    *(_BYTE *)this = 1;
    ADAM::session_lock_exclusive::exclusive_flag(v3);
    atomic_store(0, (unsigned __int8 *)&ADAM::session_lock_exclusive::exclusive_flag(void)::_f);
  }
  return this;
}

uint64_t ADAM::AudioDataAnalysisManager::signal(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  NSObject *v3;
  unint64_t v4;
  char v5;
  id v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v1 = qword_253D97670[0];
    atomic_store(qword_253D97670[0], a1);
    v2 = __ldaxr(qword_253D97670);
    if (v2 == v1)
    {
      if (__stlxr((unint64_t)a1, qword_253D97670))
        goto LABEL_11;
      return caulk::semaphore::signal((caulk::semaphore *)&unk_253D97658);
    }
    __clrex();
LABEL_11:
    while (1)
    {
      atomic_store(v2, a1);
      v4 = __ldaxr(qword_253D97670);
      if (v4 != v2)
        break;
      if (__stlxr((unint64_t)a1, qword_253D97670))
        goto LABEL_15;
      v5 = 1;
LABEL_16:
      v2 = v4;
      if ((v5 & 1) != 0)
        return caulk::semaphore::signal((caulk::semaphore *)&unk_253D97658);
    }
    __clrex();
LABEL_15:
    v5 = 0;
    goto LABEL_16;
  }
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v3 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v3)
      return caulk::semaphore::signal((caulk::semaphore *)&unk_253D97658);
  }
  else
  {
    v3 = MEMORY[0x24BDACB70];
    v6 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v8 = 136315394;
    v9 = "AudioDataAnalysisManager.cpp";
    v10 = 1024;
    v11 = 534;
    _os_log_impl(&dword_216CFB000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d *****SEVER ERROR: A NULL msg is received", (uint8_t *)&v8, 0x12u);
  }

  return caulk::semaphore::signal((caulk::semaphore *)&unk_253D97658);
}

uint64_t ADAM::AudioDataAnalysisManager::getNodeDescriptor(ADAM::AudioDataAnalysisManager *this, unint64_t a2)
{
  unsigned int v2;
  uint64_t ClientSessionMananger;
  uint64_t *v4;

  v2 = a2;
  ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger(this, HIDWORD(a2));
  if (ClientSessionMananger
    && (v4 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((_QWORD *)(ClientSessionMananger + 16), v2)) != 0)
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4[3] + 40))(v4[3]);
  }
  else
  {
    return 0;
  }
}

uint64_t ADAM::AudioDataAnalysisManager::dispatch(ADAM::AudioDataAnalysisManager *this, unint64_t a2, const ADAM::BufferNodeDescriptorBase *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  NSObject *v27;
  id v28;
  int v29;
  unsigned int v30;
  id v31;
  void *v32;
  id v33;
  NSObject *v34;
  void **v35;
  _QWORD *v36;
  _QWORD **v37;
  BOOL v38;
  uint64_t *v40;
  const ADAM::BufferNodeDescriptorBase *v41;
  uint64_t *v42;
  _QWORD *v43;
  void *__p[2];
  char v45;
  _QWORD **v46;
  _QWORD *v47[2];
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  unint64_t v53;
  __int16 v54;
  void **v55;
  __int16 v56;
  _BYTE *v57;
  _BYTE v58[16];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  ADAM::AudioDataAnalysisManager::instance(this);
  v6 = *(uint64_t **)qword_253D976B8;
  v7 = *(uint64_t **)(qword_253D976B8 + 8);
  if (*(uint64_t **)qword_253D976B8 == v7)
    return 0;
  v8 = 0;
  v43 = (_QWORD *)((char *)this + 72);
  v9 = 0x254E4E000uLL;
  v40 = *(uint64_t **)(qword_253D976B8 + 8);
  v41 = a3;
  do
  {
    v10 = *v6;
    v11 = *((_QWORD *)a3 + 4) & *(_QWORD *)(*v6 + 16);
    if (!v11 || !*(_BYTE *)(v10 + 112))
      goto LABEL_63;
    v42 = v6;
    v12 = *(_QWORD *)(v10 + 24);
    ADAM::unpackEndPoints((uint64_t *)&v46, v11);
    v13 = v46;
    v8 = 561476709;
    if (v46 == v47)
      goto LABEL_62;
    v14 = v10 + 32;
    do
    {
      v15 = (int64_t)v13[4];
      std::mutex::lock((std::mutex *)this);
      v16 = v9;
      v17 = (_QWORD *)*v43;
      if (!*v43)
        goto LABEL_24;
      v18 = (_QWORD *)((char *)this + 72);
      do
      {
        v19 = v17[4];
        v20 = v19 >= a2;
        if (v19 >= a2)
          v21 = v17;
        else
          v21 = v17 + 1;
        if (v20)
          v18 = v17;
        v17 = (_QWORD *)*v21;
      }
      while (*v21);
      if (v18 == v43 || v18[4] > a2 || (v23 = (_QWORD *)v18[5], v22 = (_QWORD *)v18[6], v24 = 561476709, v22 == v23))
      {
LABEL_24:
        v25 = ADAM::Dispatcher::dispatch2EndPoint(unsigned long long,ADAM::EndPointBitMask,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
        v26 = ++ADAM::Dispatcher::dispatch2EndPoint(unsigned long long,ADAM::EndPointBitMask,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
        v9 = v16;
        if (v25)
        {
LABEL_35:
          if (v26 > 0x3FE)
            v26 = 0;
          ADAM::Dispatcher::dispatch2EndPoint(unsigned long long,ADAM::EndPointBitMask,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt = v26;
          std::mutex::unlock((std::mutex *)this);
          v24 = 561476709;
LABEL_38:
          CAX4CCString::CAX4CCString((CAX4CCString *)v58, v24);
          v29 = *(_DWORD *)(v9 + 3056);
          v30 = v29 + 1;
          *(_DWORD *)(v9 + 3056) = v29 + 1;
          if (v29)
          {
LABEL_52:
            if (v30 > 0x1D)
              v30 = 0;
            *(_DWORD *)(v9 + 3056) = v30;
            goto LABEL_55;
          }
          if (ADAM::ADAMLogScope(void)::once != -1)
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
          if (ADAM::ADAMLogScope(void)::scope)
          {
            v31 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v31)
            {
LABEL_51:
              v30 = *(_DWORD *)(v9 + 3056);
              goto LABEL_52;
            }
          }
          else
          {
            v32 = (void *)MEMORY[0x24BDACB70];
            v33 = MEMORY[0x24BDACB70];
            v31 = v32;
          }
          v34 = v31;
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            ADAM::getEndPointName(__p, v15);
            v35 = __p;
            if (v45 < 0)
              v35 = (void **)__p[0];
            *(_DWORD *)buf = 136316162;
            v49 = "ADAMDispatcher.cpp";
            v50 = 1024;
            v51 = 98;
            v52 = 2048;
            v53 = a2;
            v54 = 2080;
            v55 = v35;
            v56 = 2080;
            v57 = v58;
            _os_log_impl(&dword_216CFB000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d Session %llx: Failed to dispatch to endpoint: %s err: %s", buf, 0x30u);
            if (v45 < 0)
              operator delete(__p[0]);
          }

          goto LABEL_51;
        }
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v27 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v27)
          {
LABEL_34:
            v26 = ADAM::Dispatcher::dispatch2EndPoint(unsigned long long,ADAM::EndPointBitMask,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
            goto LABEL_35;
          }
        }
        else
        {
          v27 = MEMORY[0x24BDACB70];
          v28 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v49 = "ADAMDispatcher.cpp";
          v50 = 1024;
          v51 = 124;
          v52 = 2048;
          v53 = a2;
          _os_log_impl(&dword_216CFB000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Session %llx, no writers exists", buf, 0x1Cu);
        }

        goto LABEL_34;
      }
      do
      {
        if (*(_QWORD *)(*v23 + 40) == v15)
          v24 = (**(uint64_t (***)(_QWORD, uint64_t, uint64_t))*v23)(*v23, v12, v14);
        ++v23;
      }
      while (v23 != v22);
      std::mutex::unlock((std::mutex *)this);
      v9 = v16;
      if (v24)
        goto LABEL_38;
LABEL_55:
      v36 = v13[1];
      if (v36)
      {
        do
        {
          v37 = (_QWORD **)v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD **)v13[2];
          v38 = *v37 == v13;
          v13 = v37;
        }
        while (!v38);
      }
      v13 = v37;
    }
    while (v37 != v47);
    v8 = 0;
LABEL_62:
    std::__tree<ADAM::EndPointBitMask>::destroy(v47[0]);
    a3 = v41;
    v6 = v42;
    v7 = v40;
LABEL_63:
    ++v6;
  }
  while (v6 != v7);
  return v8;
}

void sub_216D1B1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  void *v23;

  std::__tree<ADAM::EndPointBitMask>::destroy(a23);
  _Unwind_Resume(a1);
}

void ADAM::AudioDataAnalysisManager::addWriters(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD **v17;
  _QWORD *v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::ios_base *v29;
  char v30;
  uint64_t v31;
  const char *v32;
  size_t v35;
  __int128 *p_dst;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  std::string *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  std::string *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  std::string *v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  std::string *v65;
  unint64_t v66;
  std::string *v67;
  uint64_t *v68;
  id v69;
  NSObject *v70;
  unint64_t v71;
  std::string *v72;
  NSObject *v73;
  const char *v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  std::string *v83;
  __int128 v84;
  _BYTE *v85;
  uint64_t v86;
  std::string *v87;
  _QWORD *v88;
  __int128 v89;
  NSObject *v90;
  ADAM::AudioDataAnalysisManager *v91;
  id *v92;
  void *v93;
  id v94;
  std::string *v95;
  _QWORD *v96;
  __int128 v97;
  NSObject *v98;
  std::string *v99;
  __int128 v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  void *v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  ADAMSoundAnalysisWriter *v111;
  uint64_t v112;
  uint64_t v113;
  ADAMSRSensorWriter *v114;
  ADAMSRSensorWriter *v115;
  ADAMSRSensorWriter *v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  unint64_t v121;
  __int128 *v122;
  __int128 *v123;
  __int128 *v124;
  __int128 *v125;
  uint64_t v126;
  int v127;
  int v128;
  ADAMSpeechAnalysisWriter *v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  id v134;
  NSObject *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  id v146;
  unint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  id v155;
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  unint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  int64x2_t v171;
  uint64_t v172;
  uint64_t *v173;
  unint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  int64x2_t v180;
  uint64_t v181;
  uint64_t *v182;
  unint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  int64x2_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  ADAMSRSensorWriter *v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  NSObject *v195;
  id v196;
  __int128 *v197;
  std::string *v198;
  uint64_t *v199;
  unint64_t v200;
  uint64_t *v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  unint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  int64x2_t v214;
  uint64_t v215;
  uint64_t *v216;
  id v217;
  unint64_t v218;
  std::string *v219;
  _QWORD *v220;
  _QWORD **v221;
  id v222;
  id v223;
  NSObject *v224;
  uint64_t *v225;
  uint64_t v226;
  std::mutex *v227;
  void *context;
  uint64_t *v229;
  uint64_t *v230;
  id v231;
  void *v232;
  uint64_t **v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  const char **v245;
  uint64_t NodeDescriptor;
  _QWORD **v247;
  _QWORD *v248[2];
  unint64_t v249;
  __int128 __dst;
  int64_t v251;
  unint64_t v252;
  void **v253[5];
  std::string v254;
  void *v255;
  uint64_t v256;
  _BYTE v257[40];
  std::string *v258;
  unint64_t v259;
  void *__src;
  unint64_t v261;
  __int128 __p;
  __int128 v263;
  int v264;
  _QWORD v265[22];

  v265[19] = *MEMORY[0x24BDAC8D0];
  v4 = qword_253D976C0;
  v249 = a1;
  std::mutex::lock((std::mutex *)qword_253D976C0);
  v233 = (uint64_t **)(v4 + 64);
  v227 = (std::mutex *)v4;
  v6 = (_QWORD *)(v4 + 72);
  v5 = *(uint64_t **)(v4 + 72);
  if (v5)
  {
    v7 = (_QWORD *)(v4 + 72);
    v8 = *(_QWORD **)(v4 + 72);
    do
    {
      v9 = v8[4];
      v10 = v9 >= a1;
      if (v9 >= a1)
        v11 = v8;
      else
        v11 = v8 + 1;
      if (v10)
        v7 = v8;
      v8 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v7 != v6 && v7[4] <= a1)
      goto LABEL_22;
    *(_OWORD *)v257 = a1;
    *(_QWORD *)&v257[16] = 0;
    *(_QWORD *)&v257[24] = 0;
    memset(&v254, 0, sizeof(v254));
    do
    {
      while (1)
      {
        v12 = (uint64_t **)v5;
        v13 = v5[4];
        if (v13 <= a1)
          break;
        v5 = *v12;
        if (!*v12)
        {
          v14 = v12;
          goto LABEL_20;
        }
      }
      if (v13 >= a1)
        goto LABEL_21;
      v5 = v12[1];
    }
    while (v5);
    v14 = v12 + 1;
  }
  else
  {
    *(_OWORD *)v257 = a1;
    *(_QWORD *)&v257[16] = 0;
    *(_QWORD *)&v257[24] = 0;
    v14 = (uint64_t **)(v4 + 72);
    v12 = (uint64_t **)(v4 + 72);
    memset(&v254, 0, sizeof(v254));
  }
LABEL_20:
  v15 = (uint64_t *)operator new(0x40uLL);
  v15[4] = a1;
  v15[5] = 0;
  v15[6] = 0;
  v15[7] = 0;
  memset(&v257[8], 0, 24);
  std::__tree<rtaid::AnalyzerType>::__insert_node_at(v233, (uint64_t)v12, v14, v15);
LABEL_21:
  v253[0] = (void **)&v257[8];
  std::vector<std::unique_ptr<ADAM::Writer>>::__destroy_vector::operator()[abi:ne180100](v253);
  v253[0] = (void **)&v254;
  std::vector<std::unique_ptr<ADAM::Writer>>::__destroy_vector::operator()[abi:ne180100](v253);
LABEL_22:
  v16 = ADAM::unpackEndPoints((uint64_t *)&v247, a2);
  v17 = v247;
  if (v247 != v248)
  {
    v242 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
    v243 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
    v240 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 40);
    v241 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 32);
    v238 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 8);
    v239 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 48);
    v236 = *MEMORY[0x24BEDB7F0];
    v237 = MEMORY[0x24BEDB848] + 16;
    v234 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v235 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v244 = v6;
    while (1)
    {
      v18 = (_QWORD *)*v6;
      if (!*v6)
LABEL_355:
        std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
      v19 = (int64_t)v17[4];
      while (1)
      {
        while (1)
        {
          v20 = v18[4];
          if (v20 <= a1)
            break;
          v18 = (_QWORD *)*v18;
          if (!v18)
            goto LABEL_355;
        }
        if (v20 >= a1)
          break;
        v18 = (_QWORD *)v18[1];
        if (!v18)
          goto LABEL_355;
      }
      v22 = v18[5];
      v21 = v18[6];
      if (v22 != v21)
      {
        v23 = v22 + 8;
        do
        {
          v24 = *(_QWORD *)(*(_QWORD *)(v23 - 8) + 40);
          v25 = v24 == v19 || v23 == v21;
          v23 += 8;
        }
        while (!v25);
        if (v24 == v19)
          goto LABEL_339;
      }
      v252 = a1;
      ADAM::AudioDataAnalysisManager::instance((ADAM::AudioDataAnalysisManager *)v16);
      NodeDescriptor = ADAM::AudioDataAnalysisManager::getNodeDescriptor((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, a1);
      v26 = MEMORY[0x24BEDB858];
      v27 = MEMORY[0x24BEDB858] + 104;
      v265[0] = MEMORY[0x24BEDB858] + 104;
      v28 = MEMORY[0x24BEDB858] + 64;
      *(_QWORD *)&v257[16] = MEMORY[0x24BEDB858] + 64;
      *(_QWORD *)v257 = v243;
      *(_QWORD *)&v257[*(_QWORD *)(v243 - 24)] = v242;
      *(_QWORD *)&v257[8] = 0;
      v29 = (std::ios_base *)&v257[*(_QWORD *)(*(_QWORD *)v257 - 24)];
      std::ios_base::init(v29, &v257[24]);
      v29[1].__vftable = 0;
      v29[1].__fmtflags_ = -1;
      *(_QWORD *)&v257[16] = v241;
      *(_QWORD *)&v257[*(_QWORD *)(v241 - 24) + 16] = v240;
      *(_QWORD *)v257 = v238;
      *(_QWORD *)&v257[*(_QWORD *)(v238 - 24)] = v239;
      v265[0] = v27;
      *(_QWORD *)v257 = v26 + 24;
      *(_QWORD *)&v257[16] = v28;
      std::streambuf::basic_streambuf();
      *(_QWORD *)&v257[24] = v237;
      __p = 0u;
      v263 = 0u;
      v264 = 24;
      v30 = *(_BYTE *)(NodeDescriptor + 31);
      v245 = (const char **)(NodeDescriptor + 8);
      if (v19 == 2)
      {
        v31 = v30 >= 0 ? *(unsigned __int8 *)(NodeDescriptor + 31) : *(_QWORD *)(NodeDescriptor + 16);
        if (v31 == 5)
        {
          if (v30 >= 0)
            v32 = (const char *)(NodeDescriptor + 8);
          else
            v32 = *v245;
          if (*(_DWORD *)v32 == 1970237541 && v32[4] == 116)
          {
            v32 = "TelephonyUplink";
            v31 = 15;
          }
        }
        else if (v31 == 16)
        {
          if (v30 >= 0)
            v32 = (const char *)(NodeDescriptor + 8);
          else
            v32 = *v245;
          if (*(_QWORD *)v32 == 0x6365722D63767661 && *((_QWORD *)v32 + 1) == 0x657565755164726FLL)
          {
            v32 = "SiriUplink";
            v31 = 10;
          }
        }
        else
        {
          v32 = v30 >= 0 ? (const char *)(NodeDescriptor + 8) : *v245;
        }
      }
      else
      {
        v32 = v30 >= 0 ? (const char *)(NodeDescriptor + 8) : *(const char **)(NodeDescriptor + 8);
        v31 = v30 >= 0 ? *(unsigned __int8 *)(NodeDescriptor + 31) : *(_QWORD *)(NodeDescriptor + 16);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v257[16], (uint64_t)v32, v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v257[16], (uint64_t)"-", 1);
      *(_DWORD *)&v257[*(_QWORD *)(*(_QWORD *)&v257[16] - 24) + 24] = *(_DWORD *)&v257[*(_QWORD *)(*(_QWORD *)&v257[16] - 24)
                                                                                       + 24] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      if ((v264 & 0x10) != 0)
      {
        v37 = *((_QWORD *)&v263 + 1);
        if (*((_QWORD *)&v263 + 1) < v261)
        {
          *((_QWORD *)&v263 + 1) = v261;
          v37 = v261;
        }
        v38 = __src;
      }
      else
      {
        if ((v264 & 8) == 0)
        {
          v35 = 0;
          HIBYTE(v251) = 0;
          p_dst = &__dst;
          goto LABEL_88;
        }
        v38 = v258;
        v37 = v259;
      }
      v35 = v37 - (_QWORD)v38;
      if (v37 - (unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v35 >= 0x17)
        break;
      HIBYTE(v251) = v37 - (_BYTE)v38;
      p_dst = &__dst;
      if (v35)
        goto LABEL_87;
LABEL_88:
      *((_BYTE *)p_dst + v35) = 0;
      *(_QWORD *)v257 = v236;
      *(_QWORD *)&v257[*(_QWORD *)(v236 - 24)] = v234;
      *(_QWORD *)&v257[16] = v235;
      *(_QWORD *)&v257[24] = MEMORY[0x24BEDB848] + 16;
      if (SBYTE7(v263) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A00D54](v265);
      if (v19 > 15)
      {
        switch(v19)
        {
          case 64:
            v60 = v252;
            v50 = std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v233, v252, (uint64_t *)&v252);
            v51 = operator new();
            *(_QWORD *)v51 = &unk_24D6165F0;
            *(_QWORD *)(v51 + 8) = v60;
            v61 = (std::string *)(v51 + 16);
            if (SHIBYTE(v251) < 0)
            {
              std::string::__init_copy_ctor_external(v61, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
            }
            else
            {
              *(_OWORD *)&v61->__r_.__value_.__l.__data_ = __dst;
              *(_QWORD *)(v51 + 32) = v251;
            }
            *(_QWORD *)(v51 + 40) = 64;
            *(_WORD *)(v51 + 80) = 0;
            *(_OWORD *)(v51 + 48) = 0u;
            *(_OWORD *)(v51 + 64) = 0u;
            *(_QWORD *)v51 = &off_24D6165B0;
            *(_QWORD *)(v51 + 88) = 0;
            v75 = v50[7];
            v53 = (uint64_t *)v50[6];
            if ((unint64_t)v53 < v75)
            {
LABEL_130:
              *v53 = v51;
              v76 = v53 + 1;
LABEL_273:
              v50[6] = (uint64_t)v76;
              goto LABEL_322;
            }
            v77 = v50[5];
            v78 = ((uint64_t)v53 - v77) >> 3;
            if ((unint64_t)(v78 + 1) >> 61)
              std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
            v79 = v75 - v77;
            v80 = v79 >> 2;
            if (v79 >> 2 <= (unint64_t)(v78 + 1))
              v80 = v78 + 1;
            if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
              v81 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v81 = v80;
            *(_QWORD *)&v257[32] = v50 + 7;
            if (v81)
              v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v81);
            else
              v82 = 0;
            v164 = (uint64_t *)(v81 + 8 * v78);
            v165 = v81 + 8 * v82;
            *(_QWORD *)&v257[24] = v165;
            *v164 = v51;
            v76 = v164 + 1;
            *(_QWORD *)&v257[16] = v164 + 1;
            v167 = (_QWORD *)v50[5];
            v166 = (_QWORD *)v50[6];
            if (v166 != v167)
            {
              do
              {
                v168 = *--v166;
                *v166 = 0;
                *--v164 = v168;
              }
              while (v166 != v167);
LABEL_270:
              v171 = *(int64x2_t *)(v50 + 5);
              v76 = *(_QWORD **)&v257[16];
              v165 = *(_QWORD *)&v257[24];
LABEL_272:
              v50[5] = (uint64_t)v164;
              v50[6] = (uint64_t)v76;
              *(int64x2_t *)&v257[8] = v171;
              v172 = v50[7];
              v50[7] = v165;
              *(_QWORD *)&v257[24] = v172;
              *(_QWORD *)v257 = v171.i64[0];
              std::__split_buffer<std::unique_ptr<ADAM::Writer>>::~__split_buffer((uint64_t)v257);
              goto LABEL_273;
            }
LABEL_271:
            v171 = vdupq_n_s64((unint64_t)v166);
            goto LABEL_272;
          case 32:
            v66 = v252;
            v46 = std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v233, v252, (uint64_t *)&v252);
            v47 = operator new();
            *(_QWORD *)v47 = &unk_24D6165F0;
            *(_QWORD *)(v47 + 8) = v66;
            v67 = (std::string *)(v47 + 16);
            if (SHIBYTE(v251) < 0)
            {
              std::string::__init_copy_ctor_external(v67, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
            }
            else
            {
              *(_OWORD *)&v67->__r_.__value_.__l.__data_ = __dst;
              *(_QWORD *)(v47 + 32) = v251;
            }
            *(_QWORD *)(v47 + 40) = 32;
            *(_OWORD *)(v47 + 48) = 0u;
            *(_OWORD *)(v47 + 64) = 0u;
            *(_WORD *)(v47 + 80) = 0;
            *(_QWORD *)v47 = &off_24D6164F0;
            std::operator+<char>();
            v95 = std::string::append((std::string *)v257, ".csv", 4uLL);
            v96 = (_QWORD *)(v47 + 88);
            v97 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
            *(_QWORD *)(v47 + 104) = *((_QWORD *)&v95->__r_.__value_.__l + 2);
            *(_OWORD *)(v47 + 88) = v97;
            v95->__r_.__value_.__l.__size_ = 0;
            v95->__r_.__value_.__r.__words[2] = 0;
            v95->__r_.__value_.__r.__words[0] = 0;
            if ((v257[23] & 0x80000000) != 0)
              operator delete(*(void **)v257);
            std::ofstream::basic_ofstream((_QWORD *)(v47 + 112));
            if (ADAM::ADAMLogScope(void)::once != -1)
              dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
            if (ADAM::ADAMLogScope(void)::scope)
            {
              v98 = *(id *)ADAM::ADAMLogScope(void)::scope;
              if (!v98)
              {
LABEL_253:
                v156 = v46[7];
                v148 = (uint64_t *)v46[6];
                if ((unint64_t)v148 < v156)
                  goto LABEL_254;
                v158 = v46[5];
                v159 = ((uint64_t)v148 - v158) >> 3;
                if ((unint64_t)(v159 + 1) >> 61)
                  std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
                v160 = v156 - v158;
                v161 = v160 >> 2;
                if (v160 >> 2 <= (unint64_t)(v159 + 1))
                  v161 = v159 + 1;
                if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFF8)
                  v162 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v162 = v161;
                *(_QWORD *)&v257[32] = v46 + 7;
                if (v162)
                  v162 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v162);
                else
                  v163 = 0;
                v173 = (uint64_t *)(v162 + 8 * v159);
                v174 = v162 + 8 * v163;
                *(_QWORD *)&v257[24] = v174;
                *v173 = v47;
                v157 = v173 + 1;
                *(_QWORD *)&v257[16] = v173 + 1;
                v178 = (_QWORD *)v46[5];
                v175 = (_QWORD *)v46[6];
                if (v175 == v178)
                  goto LABEL_282;
                do
                {
                  v179 = *--v175;
                  *v175 = 0;
                  *--v173 = v179;
                }
                while (v175 != v178);
LABEL_281:
                v180 = *(int64x2_t *)(v46 + 5);
                v157 = *(_QWORD **)&v257[16];
                v174 = *(_QWORD *)&v257[24];
LABEL_283:
                v46[5] = (uint64_t)v173;
                v46[6] = (uint64_t)v157;
                *(int64x2_t *)&v257[8] = v180;
                v181 = v46[7];
                v46[7] = v174;
                *(_QWORD *)&v257[24] = v181;
                *(_QWORD *)v257 = v180.i64[0];
                std::__split_buffer<std::unique_ptr<ADAM::Writer>>::~__split_buffer((uint64_t)v257);
LABEL_284:
                v46[6] = (uint64_t)v157;
LABEL_322:
                if (ADAM::ADAMLogScope(void)::once != -1)
                  dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
                if (!ADAM::ADAMLogScope(void)::scope)
                {
                  v216 = (uint64_t *)MEMORY[0x24BDACB70];
                  v217 = MEMORY[0x24BDACB70];
                  v16 = v216;
LABEL_328:
                  v70 = v16;
                  if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
                  {
                    if (*(char *)(NodeDescriptor + 31) < 0)
                      v245 = (const char **)*v245;
                    v218 = v252;
                    ADAM::getEndPointName(&v254, v19);
                    v219 = &v254;
                    if ((v254.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v219 = (std::string *)v254.__r_.__value_.__r.__words[0];
                    *(_DWORD *)v257 = 136316162;
                    *(_QWORD *)&v257[4] = "ADAMDispatcher.cpp";
                    *(_WORD *)&v257[12] = 1024;
                    *(_DWORD *)&v257[14] = 202;
                    *(_WORD *)&v257[18] = 2048;
                    *(_QWORD *)&v257[20] = v218;
                    *(_WORD *)&v257[28] = 2080;
                    *(_QWORD *)&v257[30] = v245;
                    *(_WORD *)&v257[38] = 2080;
                    v258 = v219;
                    v73 = v70;
                    v74 = "%25s:%-5d Session %llx: Writer added for node: %s endPoint: %s";
                    goto LABEL_334;
                  }
                  goto LABEL_336;
                }
                v16 = (uint64_t *)*(id *)ADAM::ADAMLogScope(void)::scope;
                if (v16)
                  goto LABEL_328;
                goto LABEL_337;
              }
            }
            else
            {
              v98 = MEMORY[0x24BDACB70];
              v155 = MEMORY[0x24BDACB70];
            }
            if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
            {
              if (*(char *)(v47 + 111) < 0)
                v96 = (_QWORD *)*v96;
              *(_DWORD *)v257 = 136315906;
              *(_QWORD *)&v257[4] = "FileWriter.cpp";
              *(_WORD *)&v257[12] = 1024;
              *(_DWORD *)&v257[14] = 73;
              *(_WORD *)&v257[18] = 2048;
              *(_QWORD *)&v257[20] = v66;
              *(_WORD *)&v257[28] = 2080;
              *(_QWORD *)&v257[30] = v96;
              _os_log_impl(&dword_216CFB000, v98, OS_LOG_TYPE_INFO, "%25s:%-5d Session %llx: Created CSV File Writer: %s", v257, 0x26u);
            }

            goto LABEL_253;
          case 16:
            v45 = v252;
            v46 = std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v233, v252, (uint64_t *)&v252);
            v47 = operator new();
            *(_QWORD *)v47 = &unk_24D6165F0;
            *(_QWORD *)(v47 + 8) = v45;
            v48 = (std::string *)(v47 + 16);
            if (SHIBYTE(v251) < 0)
            {
              std::string::__init_copy_ctor_external(v48, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
            }
            else
            {
              *(_OWORD *)&v48->__r_.__value_.__l.__data_ = __dst;
              *(_QWORD *)(v47 + 32) = v251;
            }
            *(_QWORD *)(v47 + 40) = 16;
            *(_OWORD *)(v47 + 48) = 0u;
            *(_OWORD *)(v47 + 64) = 0u;
            *(_WORD *)(v47 + 80) = 0;
            *(_QWORD *)v47 = &off_24D6164B0;
            std::operator+<char>();
            v87 = std::string::append((std::string *)v257, ".bin", 4uLL);
            v88 = (_QWORD *)(v47 + 88);
            v89 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
            *(_QWORD *)(v47 + 104) = *((_QWORD *)&v87->__r_.__value_.__l + 2);
            *(_OWORD *)(v47 + 88) = v89;
            v87->__r_.__value_.__l.__size_ = 0;
            v87->__r_.__value_.__r.__words[2] = 0;
            v87->__r_.__value_.__r.__words[0] = 0;
            if ((v257[23] & 0x80000000) != 0)
              operator delete(*(void **)v257);
            std::ofstream::basic_ofstream((_QWORD *)(v47 + 112));
            if (ADAM::ADAMLogScope(void)::once != -1)
              dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
            if (ADAM::ADAMLogScope(void)::scope)
            {
              v90 = *(id *)ADAM::ADAMLogScope(void)::scope;
              if (!v90)
                goto LABEL_238;
            }
            else
            {
              v90 = MEMORY[0x24BDACB70];
              v146 = MEMORY[0x24BDACB70];
            }
            if (os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
            {
              if (*(char *)(v47 + 111) < 0)
                v88 = (_QWORD *)*v88;
              *(_DWORD *)v257 = 136315906;
              *(_QWORD *)&v257[4] = "FileWriter.cpp";
              *(_WORD *)&v257[12] = 1024;
              *(_DWORD *)&v257[14] = 55;
              *(_WORD *)&v257[18] = 2048;
              *(_QWORD *)&v257[20] = v45;
              *(_WORD *)&v257[28] = 2080;
              *(_QWORD *)&v257[30] = v88;
              _os_log_impl(&dword_216CFB000, v90, OS_LOG_TYPE_INFO, "%25s:%-5d Session %llx: Created Binary File Writer: %s", v257, 0x26u);
            }

LABEL_238:
            v147 = v46[7];
            v148 = (uint64_t *)v46[6];
            if ((unint64_t)v148 >= v147)
            {
              v149 = v46[5];
              v150 = ((uint64_t)v148 - v149) >> 3;
              if ((unint64_t)(v150 + 1) >> 61)
                std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
              v151 = v147 - v149;
              v152 = v151 >> 2;
              if (v151 >> 2 <= (unint64_t)(v150 + 1))
                v152 = v150 + 1;
              if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF8)
                v153 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v153 = v152;
              *(_QWORD *)&v257[32] = v46 + 7;
              if (v153)
                v153 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v153);
              else
                v154 = 0;
              v173 = (uint64_t *)(v153 + 8 * v150);
              v174 = v153 + 8 * v154;
              *(_QWORD *)&v257[24] = v174;
              *v173 = v47;
              v157 = v173 + 1;
              *(_QWORD *)&v257[16] = v173 + 1;
              v176 = (_QWORD *)v46[5];
              v175 = (_QWORD *)v46[6];
              if (v175 != v176)
              {
                do
                {
                  v177 = *--v175;
                  *v175 = 0;
                  *--v173 = v177;
                }
                while (v175 != v176);
                goto LABEL_281;
              }
LABEL_282:
              v180 = vdupq_n_s64((unint64_t)v175);
              goto LABEL_283;
            }
LABEL_254:
            *v148 = v47;
            v157 = v148 + 1;
            goto LABEL_284;
        }
      }
      else
      {
        switch(v19)
        {
          case 1:
            v49 = v252;
            v50 = std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v233, v252, (uint64_t *)&v252);
            v51 = operator new();
            ADAM::MediaExposureWriter::MediaExposureWriter(v51, v49, &__dst);
            v52 = v50[7];
            v53 = (uint64_t *)v50[6];
            if ((unint64_t)v53 < v52)
              goto LABEL_130;
            v54 = v50[5];
            v55 = ((uint64_t)v53 - v54) >> 3;
            if ((unint64_t)(v55 + 1) >> 61)
              std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
            v56 = v52 - v54;
            v57 = v56 >> 2;
            if (v56 >> 2 <= (unint64_t)(v55 + 1))
              v57 = v55 + 1;
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
              v58 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v58 = v57;
            *(_QWORD *)&v257[32] = v50 + 7;
            if (v58)
              v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v58);
            else
              v59 = 0;
            v164 = (uint64_t *)(v58 + 8 * v55);
            v165 = v58 + 8 * v59;
            *(_QWORD *)&v257[24] = v165;
            *v164 = v51;
            v76 = v164 + 1;
            *(_QWORD *)&v257[16] = v164 + 1;
            v169 = (_QWORD *)v50[5];
            v166 = (_QWORD *)v50[6];
            if (v166 != v169)
            {
              do
              {
                v170 = *--v166;
                *v166 = 0;
                *--v164 = v170;
              }
              while (v166 != v169);
              goto LABEL_270;
            }
            goto LABEL_271;
          case 2:
            v62 = v252;
            v63 = std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v233, v252, (uint64_t *)&v252);
            v64 = operator new();
            *(_QWORD *)v64 = &unk_24D6165F0;
            *(_QWORD *)(v64 + 8) = v62;
            v65 = (std::string *)(v64 + 16);
            v229 = (uint64_t *)(v64 + 16);
            if (SHIBYTE(v251) < 0)
            {
              std::string::__init_copy_ctor_external(v65, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
            }
            else
            {
              *(_OWORD *)&v65->__r_.__value_.__l.__data_ = __dst;
              *(_QWORD *)(v64 + 32) = v251;
            }
            *(_QWORD *)(v64 + 40) = 2;
            *(_WORD *)(v64 + 80) = 0;
            *(_OWORD *)(v64 + 48) = 0u;
            *(_OWORD *)(v64 + 64) = 0u;
            *(_QWORD *)v64 = &off_24D616158;
            *(_OWORD *)(v64 + 88) = xmmword_216D3C8D0;
            *(_OWORD *)(v64 + 104) = 0u;
            *(_OWORD *)(v64 + 120) = 0u;
            *(_OWORD *)(v64 + 136) = 0u;
            *(_QWORD *)(v64 + 152) = 0;
            *(_BYTE *)(v64 + 80) = 1;
            ++ADAM::SensorKitWriter::sSessionIDCounter;
            v91 = (ADAM::AudioDataAnalysisManager *)operator new();
            *((_OWORD *)v91 + 1) = 0u;
            *((_OWORD *)v91 + 2) = 0u;
            *(_OWORD *)v91 = 0u;
            v92 = *(id **)(v64 + 88);
            *(_QWORD *)(v64 + 88) = v91;
            if (v92)
              std::default_delete<ADAM::SensorKitWriter::SensorKitWriterInternalState>::operator()[abi:ne180100](v92);
            ADAM::AudioDataAnalysisManager::instance(v91);
            v93 = (void *)qword_253D976D8;
            v230 = v63;
            if (qword_253D976D8)
            {
              CFRetain((CFTypeRef)qword_253D976D8);
              CFRelease(v93);
            }
            else
            {
              v94 = 0;
            }
            context = (void *)MEMORY[0x219A01060](v94);
            v232 = v93;
            v103 = objc_msgSend(objc_alloc(MEMORY[0x24BDB1818]), "initWithStreamDescription:", NodeDescriptor + 48);
            v104 = *(_QWORD *)(v64 + 88);
            v105 = *(void **)(v104 + 8);
            *(_QWORD *)(v104 + 8) = v103;

            v106 = v64 + 16;
            if (*(char *)(v64 + 39) < 0)
              v106 = *v229;
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v106);
            v231 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "SiriUplink");
            v107 = (void *)objc_claimAutoreleasedReturnValue();
            v108 = objc_msgSend(v231, "hasPrefix:", v107);

            if (v108)
              v109 = 0x100000002;
            else
              v109 = 0x400000005;
            if (v108)
              v110 = 0;
            else
              v110 = 3;
            v111 = [ADAMSoundAnalysisWriter alloc];
            v112 = ADAM::SensorKitWriter::sSessionIDCounter;
            v113 = *(_QWORD *)(*(_QWORD *)(v64 + 88) + 8);
            v114 = -[ADAMSRSensorWriter initWithSensorType:bundleIdentifier:]([ADAMSRSensorWriter alloc], "initWithSensorType:bundleIdentifier:", v110, v232);
            v115 = -[ADAMSRSensorWriter initWithSensorType:bundleIdentifier:]([ADAMSRSensorWriter alloc], "initWithSensorType:bundleIdentifier:", v109, v232);
            v116 = -[ADAMSRSensorWriter initWithSensorType:bundleIdentifier:]([ADAMSRSensorWriter alloc], "initWithSensorType:bundleIdentifier:", HIDWORD(v109), v232);
            v254.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
            v254.__r_.__value_.__l.__size_ = 3221225472;
            v254.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN4ADAM15SensorKitWriterC2EyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERK27AudioStreamBasicDescription_block_invoke;
            v255 = &__block_descriptor_40_e17_v16__0__NSError_8l;
            v256 = v64;
            v117 = -[ADAMSoundAnalysisWriter initWithWriterName:sessionID:audioFormat:speechMetricsSRWriter:soundDetectionSRWriter:speechEmotionSRWriter:completionHandler:](v111, "initWithWriterName:sessionID:audioFormat:speechMetricsSRWriter:soundDetectionSRWriter:speechEmotionSRWriter:completionHandler:", v231, v112, v113, v114, v115, v116, &v254, v227);
            v118 = *(_QWORD *)(v64 + 88);
            v119 = *(void **)(v118 + 24);
            *(_QWORD *)(v118 + 24) = v117;

            v120 = v232;
            v121 = HIBYTE(v251);
            v122 = &__dst;
            if (v251 < 0)
            {
              v121 = *((_QWORD *)&__dst + 1);
              v122 = (__int128 *)__dst;
            }
            if (v121 >= 0xF)
              v121 = 15;
            if (!v121)
              goto LABEL_217;
            v123 = (__int128 *)((char *)v122 + v121);
            v124 = v122;
            v125 = v123;
            do
            {
              if (*(_BYTE *)v124 == 84)
              {
                v126 = 1u;
                while (v126 != 15)
                {
                  if ((__int128 *)((char *)v124 + v126) == v123)
                    goto LABEL_213;
                  v127 = *((unsigned __int8 *)v124 + v126);
                  v128 = aTelephonyuplin[v126++];
                  if (v127 != v128)
                    goto LABEL_205;
                }
                v125 = v124;
              }
LABEL_205:
              v124 = (__int128 *)((char *)v124 + 1);
            }
            while (v124 != v123);
LABEL_213:
            if (v125 != v123 && v125 == v122)
            {
              v129 = [ADAMSpeechAnalysisWriter alloc];
              if (*(char *)(v64 + 39) < 0)
                v130 = *v229;
              else
                v130 = v64 + 16;
              objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v130);
              v132 = (void *)objc_claimAutoreleasedReturnValue();
              v189 = ADAM::SensorKitWriter::sSessionIDCounter;
              v190 = *(_QWORD *)(*(_QWORD *)(v64 + 88) + 8);
              v191 = -[ADAMSRSensorWriter initWithSensorType:bundleIdentifier:]([ADAMSRSensorWriter alloc], "initWithSensorType:bundleIdentifier:", 3, v232);
              v253[0] = (void **)MEMORY[0x24BDAC760];
              v253[1] = (void **)3221225472;
              v253[2] = (void **)___ZN4ADAM15SensorKitWriterC2EyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERK27AudioStreamBasicDescription_block_invoke_6;
              v253[3] = (void **)&__block_descriptor_40_e17_v16__0__NSError_8l;
              v253[4] = (void **)v64;
              v192 = -[ADAMSpeechAnalysisWriter initWithWriterName:sessionID:audioFormat:speechMetricsSRWriter:completionHandler:](v129, "initWithWriterName:sessionID:audioFormat:speechMetricsSRWriter:completionHandler:", v132, v189, v190, v191, v253);
              v193 = *(_QWORD *)(v64 + 88);
              v194 = *(void **)(v193 + 32);
              *(_QWORD *)(v193 + 32) = v192;

              v120 = v232;
            }
            else
            {
LABEL_217:
              v131 = *(_QWORD *)(v64 + 88);
              v132 = *(void **)(v131 + 32);
              *(_QWORD *)(v131 + 32) = 0;
            }

            *(_DWORD *)(*(_QWORD *)(v64 + 88) + 40) = 0;
            if (ADAM::ADAMLogScope(void)::once != -1)
              dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
            if (ADAM::ADAMLogScope(void)::scope)
            {
              v195 = *(id *)ADAM::ADAMLogScope(void)::scope;
              if (!v195)
              {
LABEL_305:

                objc_autoreleasePoolPop(context);
                v199 = v230;
                v200 = v230[7];
                v201 = (uint64_t *)v230[6];
                if ((unint64_t)v201 >= v200)
                {
                  v203 = v230[5];
                  v204 = ((uint64_t)v201 - v203) >> 3;
                  if ((unint64_t)(v204 + 1) >> 61)
                    std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
                  v205 = v200 - v203;
                  v206 = v205 >> 2;
                  if (v205 >> 2 <= (unint64_t)(v204 + 1))
                    v206 = v204 + 1;
                  if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFF8)
                    v207 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v207 = v206;
                  *(_QWORD *)&v257[32] = v230 + 7;
                  if (v207)
                    v207 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v207);
                  else
                    v208 = 0;
                  v209 = (uint64_t *)(v207 + 8 * v204);
                  v210 = v207 + 8 * v208;
                  *(_QWORD *)&v257[24] = v210;
                  *v209 = v64;
                  v202 = v209 + 1;
                  *(_QWORD *)&v257[16] = v209 + 1;
                  v212 = (_QWORD *)v230[5];
                  v211 = (_QWORD *)v230[6];
                  if (v211 == v212)
                  {
                    v214 = vdupq_n_s64((unint64_t)v211);
                    v199 = v230;
                  }
                  else
                  {
                    do
                    {
                      v213 = *--v211;
                      *v211 = 0;
                      *--v209 = v213;
                    }
                    while (v211 != v212);
                    v199 = v230;
                    v214 = *(int64x2_t *)(v230 + 5);
                    v202 = *(_QWORD **)&v257[16];
                    v210 = *(_QWORD *)&v257[24];
                  }
                  v199[5] = (uint64_t)v209;
                  v199[6] = (uint64_t)v202;
                  *(int64x2_t *)&v257[8] = v214;
                  v215 = v199[7];
                  v199[7] = v210;
                  *(_QWORD *)&v257[24] = v215;
                  *(_QWORD *)v257 = v214.i64[0];
                  std::__split_buffer<std::unique_ptr<ADAM::Writer>>::~__split_buffer((uint64_t)v257);
                }
                else
                {
                  *v201 = v64;
                  v202 = v201 + 1;
                }
                v199[6] = (uint64_t)v202;
                goto LABEL_322;
              }
            }
            else
            {
              v195 = MEMORY[0x24BDACB70];
              v196 = MEMORY[0x24BDACB70];
            }
            if (os_log_type_enabled(v195, OS_LOG_TYPE_DEFAULT))
            {
              v197 = &__dst;
              if (v251 < 0)
                v197 = (__int128 *)__dst;
              v198 = *(std::string **)(*(_QWORD *)(v64 + 88) + 8);
              *(_DWORD *)v257 = 136316162;
              *(_QWORD *)&v257[4] = "SensorKitWriter.mm";
              *(_WORD *)&v257[12] = 1024;
              *(_DWORD *)&v257[14] = 232;
              *(_WORD *)&v257[18] = 2080;
              *(_QWORD *)&v257[20] = v197;
              *(_WORD *)&v257[28] = 2048;
              *(_QWORD *)&v257[30] = v64;
              *(_WORD *)&v257[38] = 2112;
              v258 = v198;
              _os_log_impl(&dword_216CFB000, v195, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Created SensorKit Writer: %s (%p), audio format: %@", v257, 0x30u);
            }

            goto LABEL_305;
          case 8:
            v41 = v252;
            v42 = std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v233, v252, (uint64_t *)&v252);
            v43 = operator new();
            *(_QWORD *)v43 = &unk_24D6165F0;
            *(_QWORD *)(v43 + 8) = v41;
            v44 = (std::string *)(v43 + 16);
            if (SHIBYTE(v251) < 0)
            {
              std::string::__init_copy_ctor_external(v44, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
            }
            else
            {
              *(_OWORD *)&v44->__r_.__value_.__l.__data_ = __dst;
              *(_QWORD *)(v43 + 32) = v251;
            }
            *(_QWORD *)(v43 + 40) = 8;
            *(_OWORD *)(v43 + 48) = 0u;
            *(_OWORD *)(v43 + 64) = 0u;
            *(_WORD *)(v43 + 80) = 0;
            *(_QWORD *)v43 = &off_24D616470;
            *(_QWORD *)(v43 + 88) = 0;
            *(_DWORD *)(v43 + 96) = *(_DWORD *)(NodeDescriptor + 72);
            if (ADAM::isProcessCorespeechd(void)::once != -1)
              dispatch_once(&ADAM::isProcessCorespeechd(void)::once, &__block_literal_global_39);
            if (ADAM::isProcessCorespeechd(void)::isCorespeechd)
            {
              std::operator+<char>();
              v83 = std::string::append(&v254, ".caf", 4uLL);
              v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
              *(_QWORD *)&v257[16] = *((_QWORD *)&v83->__r_.__value_.__l + 2);
              *(_OWORD *)v257 = v84;
              v83->__r_.__value_.__l.__size_ = 0;
              v83->__r_.__value_.__r.__words[2] = 0;
              v83->__r_.__value_.__r.__words[0] = 0;
              if (v257[23] >= 0)
                v85 = v257;
              else
                v85 = *(_BYTE **)v257;
              if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once != -1)
                dispatch_once(&NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once, &__block_literal_global_883);
              if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction)
                goto LABEL_149;
LABEL_177:
              v86 = 0;
            }
            else
            {
              std::operator+<char>();
              v99 = std::string::append(&v254, ".caf", 4uLL);
              v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
              *(_QWORD *)&v257[16] = *((_QWORD *)&v99->__r_.__value_.__l + 2);
              *(_OWORD *)v257 = v100;
              v99->__r_.__value_.__l.__size_ = 0;
              v99->__r_.__value_.__r.__words[2] = 0;
              v99->__r_.__value_.__r.__words[0] = 0;
              if (v257[23] >= 0)
                v85 = v257;
              else
                v85 = *(_BYTE **)v257;
              if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once != -1)
                dispatch_once(&NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once, &__block_literal_global_883);
              if (!NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction)
                goto LABEL_177;
LABEL_149:
              v86 = NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction(4096, 0, v85, 1667327590, 0, NodeDescriptor + 48);
            }
            v101 = *(_QWORD *)(v43 + 88);
            *(_QWORD *)(v43 + 88) = v86;
            if (v101)
              (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
            if ((v257[23] & 0x80000000) != 0)
              operator delete(*(void **)v257);
            if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v254.__r_.__value_.__l.__data_);
            if (ADAM::ADAMLogScope(void)::once != -1)
              dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
            if (ADAM::ADAMLogScope(void)::scope)
            {
              v102 = *(id *)ADAM::ADAMLogScope(void)::scope;
              if (!v102)
              {
LABEL_222:
                v137 = v42[7];
                v138 = (uint64_t *)v42[6];
                if ((unint64_t)v138 >= v137)
                {
                  v140 = v42[5];
                  v141 = ((uint64_t)v138 - v140) >> 3;
                  if ((unint64_t)(v141 + 1) >> 61)
                    std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
                  v142 = v137 - v140;
                  v143 = v142 >> 2;
                  if (v142 >> 2 <= (unint64_t)(v141 + 1))
                    v143 = v141 + 1;
                  if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
                    v144 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v144 = v143;
                  *(_QWORD *)&v257[32] = v42 + 7;
                  if (v144)
                    v144 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v144);
                  else
                    v145 = 0;
                  v182 = (uint64_t *)(v144 + 8 * v141);
                  v183 = v144 + 8 * v145;
                  *(_QWORD *)&v257[24] = v183;
                  *v182 = v43;
                  v139 = v182 + 1;
                  *(_QWORD *)&v257[16] = v182 + 1;
                  v185 = (_QWORD *)v42[5];
                  v184 = (_QWORD *)v42[6];
                  if (v184 == v185)
                  {
                    v187 = vdupq_n_s64((unint64_t)v184);
                  }
                  else
                  {
                    do
                    {
                      v186 = *--v184;
                      *v184 = 0;
                      *--v182 = v186;
                    }
                    while (v184 != v185);
                    v187 = *(int64x2_t *)(v42 + 5);
                    v139 = *(_QWORD **)&v257[16];
                    v183 = *(_QWORD *)&v257[24];
                  }
                  v42[5] = (uint64_t)v182;
                  v42[6] = (uint64_t)v139;
                  *(int64x2_t *)&v257[8] = v187;
                  v188 = v42[7];
                  v42[7] = v183;
                  *(_QWORD *)&v257[24] = v188;
                  *(_QWORD *)v257 = v187.i64[0];
                  std::__split_buffer<std::unique_ptr<ADAM::Writer>>::~__split_buffer((uint64_t)v257);
                }
                else
                {
                  *v138 = v43;
                  v139 = v138 + 1;
                }
                v42[6] = (uint64_t)v139;
                goto LABEL_322;
              }
            }
            else
            {
              v133 = (void *)MEMORY[0x24BDACB70];
              v134 = MEMORY[0x24BDACB70];
              v102 = v133;
            }
            v135 = v102;
            if (os_log_type_enabled(v135, OS_LOG_TYPE_INFO))
            {
              v136 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v43 + 88) + 56))(*(_QWORD *)(v43 + 88));
              *(_DWORD *)v257 = 136315906;
              *(_QWORD *)&v257[4] = "FileWriter.cpp";
              *(_WORD *)&v257[12] = 1024;
              *(_DWORD *)&v257[14] = 29;
              *(_WORD *)&v257[18] = 2048;
              *(_QWORD *)&v257[20] = v41;
              *(_WORD *)&v257[28] = 2080;
              *(_QWORD *)&v257[30] = v136;
              _os_log_impl(&dword_216CFB000, v135, OS_LOG_TYPE_INFO, "%25s:%-5d Session %llx: Created Audio Buffer Writer for file: %s", v257, 0x26u);
            }

            goto LABEL_222;
        }
      }
      if (ADAM::ADAMLogScope(void)::once != -1)
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
      if (!ADAM::ADAMLogScope(void)::scope)
      {
        v68 = (uint64_t *)MEMORY[0x24BDACB70];
        v69 = MEMORY[0x24BDACB70];
        v16 = v68;
LABEL_122:
        v70 = v16;
        if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
        {
          if (*(char *)(NodeDescriptor + 31) < 0)
            v245 = (const char **)*v245;
          v71 = v252;
          ADAM::getEndPointName(&v254, v19);
          v72 = &v254;
          if ((v254.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v72 = (std::string *)v254.__r_.__value_.__r.__words[0];
          *(_DWORD *)v257 = 136316162;
          *(_QWORD *)&v257[4] = "ADAMDispatcher.cpp";
          *(_WORD *)&v257[12] = 1024;
          *(_DWORD *)&v257[14] = 198;
          *(_WORD *)&v257[18] = 2048;
          *(_QWORD *)&v257[20] = v71;
          *(_WORD *)&v257[28] = 2080;
          *(_QWORD *)&v257[30] = v245;
          *(_WORD *)&v257[38] = 2080;
          v258 = v72;
          v73 = v70;
          v74 = "%25s:%-5d Session %llx, No writer exists for node %s, endPoint: %s";
LABEL_334:
          _os_log_impl(&dword_216CFB000, v73, OS_LOG_TYPE_INFO, v74, v257, 0x30u);
          if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v254.__r_.__value_.__l.__data_);
        }
LABEL_336:

        goto LABEL_337;
      }
      v16 = (uint64_t *)*(id *)ADAM::ADAMLogScope(void)::scope;
      if (v16)
        goto LABEL_122;
LABEL_337:
      if (SHIBYTE(v251) < 0)
        operator delete((void *)__dst);
LABEL_339:
      v220 = v17[1];
      if (v220)
      {
        do
        {
          v221 = (_QWORD **)v220;
          v220 = (_QWORD *)*v220;
        }
        while (v220);
      }
      else
      {
        do
        {
          v221 = (_QWORD **)v17[2];
          v25 = *v221 == v17;
          v17 = v221;
        }
        while (!v25);
      }
      v17 = v221;
      v6 = v244;
      if (v221 == v248)
        goto LABEL_345;
    }
    v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v39 = v35 | 7;
    v40 = v39 + 1;
    p_dst = (__int128 *)operator new(v39 + 1);
    *((_QWORD *)&__dst + 1) = v35;
    v251 = v40 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_87:
    memmove(p_dst, v38, v35);
    goto LABEL_88;
  }
LABEL_345:
  std::__tree<ADAM::EndPointBitMask>::destroy(v248[0]);
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v222 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v222)
      goto LABEL_354;
  }
  else
  {
    v222 = (id)MEMORY[0x24BDACB70];
    v223 = MEMORY[0x24BDACB70];
  }
  v224 = v222;
  if (os_log_type_enabled(v224, OS_LOG_TYPE_DEBUG))
  {
    v225 = std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v233, v249, (uint64_t *)&v249);
    v226 = (v225[6] - v225[5]) >> 3;
    *(_DWORD *)v257 = 136315906;
    *(_QWORD *)&v257[4] = "ADAMDispatcher.cpp";
    *(_WORD *)&v257[12] = 1024;
    *(_DWORD *)&v257[14] = 57;
    *(_WORD *)&v257[18] = 2048;
    *(_QWORD *)&v257[20] = a1;
    *(_WORD *)&v257[28] = 2048;
    *(_QWORD *)&v257[30] = v226;
    _os_log_impl(&dword_216CFB000, v224, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session %llx: size of writers: %lu", v257, 0x26u);
  }

LABEL_354:
  std::mutex::unlock(v227);
}

void sub_216D1CD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::mutex *a10)
{
  void *v10;

  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t ADAM::AudioDataAnalysisManager::fetchSessionBundleIDs(unint64_t a1, std::vector<std::string> *a2)
{
  unsigned int v3;
  uint64_t ClientSessionMananger;
  uint64_t v5;
  std::mutex *v6;
  unint64_t v7;
  float *v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  __int128 *v16;
  __int128 *v17;
  unint64_t v18;
  std::string *begin;
  unint64_t v20;
  unint64_t v21;
  std::string *v22;
  uint64_t v23;
  std::string *v24;
  std::string *end;
  uint64_t v26;
  const std::string *v27;
  unint64_t v28;
  unsigned int v29;

  v3 = a1;
  ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, HIDWORD(a1));
  if (!ClientSessionMananger)
    return 0;
  v5 = ClientSessionMananger;
  v29 = v3;
  if (!*(_BYTE *)(ClientSessionMananger + 432))
    return 0;
  v6 = (std::mutex *)(ClientSessionMananger + 184);
  std::mutex::lock((std::mutex *)(ClientSessionMananger + 184));
  v7 = *(_QWORD *)(v5 + 152);
  if (!v7)
    goto LABEL_20;
  v8 = (float *)(v5 + 144);
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v3;
    if (v7 <= v3)
      v10 = v3 % v7;
  }
  else
  {
    v10 = ((_DWORD)v7 - 1) & v3;
  }
  v12 = *(uint64_t ***)(*(_QWORD *)v8 + 8 * v10);
  if (!v12 || (v13 = *v12) == 0)
  {
LABEL_20:
    v11 = 0;
    goto LABEL_21;
  }
  while (1)
  {
    v14 = v13[1];
    if (v14 == v3)
      break;
    if (v9.u32[0] > 1uLL)
    {
      if (v14 >= v7)
        v14 %= v7;
    }
    else
    {
      v14 &= v7 - 1;
    }
    if (v14 != v10)
      goto LABEL_20;
LABEL_19:
    v13 = (uint64_t *)*v13;
    if (!v13)
      goto LABEL_20;
  }
  if (*((_DWORD *)v13 + 4) != v3)
    goto LABEL_19;
  if (!*((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)(v5 + 144), v3, &v29)+ 20))goto LABEL_20;
  if ((std::vector<std::string> *)(v5 + 120) != a2)
  {
    v17 = *(__int128 **)(v5 + 120);
    v16 = *(__int128 **)(v5 + 128);
    v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v17) >> 3);
    begin = a2->__begin_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a2->__end_cap_.__value_ - (char *)a2->__begin_) >> 3) < v18)
    {
      std::vector<std::string>::__vdeallocate(a2);
      if (v18 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_50;
      v20 = 0x5555555555555556 * (((char *)a2->__end_cap_.__value_ - (char *)a2->__begin_) >> 3);
      if (v20 <= v18)
        v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v17) >> 3);
      v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2->__end_cap_.__value_ - (char *)a2->__begin_) >> 3) >= 0x555555555555555
          ? 0xAAAAAAAAAAAAAAALL
          : v20;
      if (v21 > 0xAAAAAAAAAAAAAAALL)
LABEL_50:
        std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
      v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v21);
      a2->__begin_ = v22;
      a2->__end_ = v22;
      a2->__end_cap_.__value_ = &v22[v23];
      v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&a2->__end_cap_, v17, v16, v22);
      goto LABEL_40;
    }
    end = a2->__end_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) >= v18)
    {
      if (v17 != v16)
      {
        do
        {
          std::string::operator=(begin, (const std::string *)v17);
          v17 = (__int128 *)((char *)v17 + 24);
          ++begin;
        }
        while (v17 != v16);
        end = a2->__end_;
      }
      while (end != begin)
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(end[-1].__r_.__value_.__l.__data_);
        --end;
      }
      a2->__end_ = begin;
    }
    else
    {
      v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
      if (end != begin)
      {
        v26 = 8 * (((char *)end - (char *)begin) >> 3);
        v27 = (const std::string *)v17;
        do
        {
          std::string::operator=(begin++, v27++);
          v26 -= 24;
        }
        while (v26);
        begin = a2->__end_;
      }
      v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&a2->__end_cap_, (__int128 *)((char *)v17 + 24 * v28), v16, begin);
LABEL_40:
      a2->__end_ = v24;
    }
  }
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v8, v3, &v29)+ 20) = 0;
  v11 = 1;
LABEL_21:
  std::mutex::unlock(v6);
  return v11;
}

void sub_216D1D3F8(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 8) = v3;
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ADAM::AudioDataAnalysisManager::getServerDelegates(uint64_t a1, unsigned int a2)
{
  std::mutex *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t *v8;
  id *v9;
  id *v10;
  uint64_t v11;
  id *v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __n128 (*v18)(__n128 *, __n128 *);
  void (*v19)(uint64_t);
  const char *v20;
  _QWORD v21[3];
  void **v22;
  char v23;

  v15 = 0;
  v16 = &v15;
  v17 = 0x4812000000;
  v18 = __Block_byref_object_copy_;
  v19 = __Block_byref_object_dispose_;
  v20 = "";
  memset(v21, 0, sizeof(v21));
  v4 = (std::mutex *)(qword_253D976D0 + 24);
  std::mutex::lock((std::mutex *)(qword_253D976D0 + 24));
  v5 = *(void **)(qword_253D976D0 + 16);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 3221225472;
  v14[2] = ___ZN4ADAM24AudioDataAnalysisManager18getServerDelegatesE25ADAMAudioDataAnalysisType_block_invoke;
  v14[3] = &unk_24D615B88;
  v14[4] = &v15;
  objc_msgSend(v7, "enumerateObjectsUsingBlock:", v14);

  std::mutex::unlock(v4);
  v8 = v16;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v9 = (id *)v8[6];
  v10 = (id *)v8[7];
  v22 = (void **)a1;
  v23 = 0;
  v11 = (char *)v10 - (char *)v9;
  if (v10 != v9)
  {
    if (v11 < 0)
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    v12 = (id *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v11 >> 3);
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = &v12[v13];
    do
      objc_copyWeak(v12++, v9++);
    while (v9 != v10);
    *(_QWORD *)(a1 + 8) = v12;
  }
  _Block_object_dispose(&v15, 8);
  v22 = (void **)v21;
  std::vector<ADAMServerDelegate * {__weak}>::__destroy_vector::operator()[abi:ne180100](&v22);
}

void sub_216D1D5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  std::mutex *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a6);

  std::mutex::unlock(v6);
  _Block_object_dispose(va, 8);
  *(_QWORD *)(v9 - 64) = v8;
  std::vector<ADAMServerDelegate * {__weak}>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 64));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<ADAMServerDelegate * {__weak}>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN4ADAM24AudioDataAnalysisManager18getServerDelegatesE25ADAMAudioDataAnalysisType_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id *v12;
  id v13;
  _QWORD v14[5];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  objc_initWeak(&v13, a2);
  v3 = *(_QWORD *)(v2 + 56);
  v4 = *(_QWORD *)(v2 + 64);
  if (v3 >= v4)
  {
    v6 = *(_QWORD *)(v2 + 48);
    v7 = (uint64_t)(v3 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    v8 = v4 - v6;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v14[4] = v2 + 64;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v10);
    else
      v11 = 0;
    v12 = (id *)(v10 + 8 * v7);
    v14[0] = v10;
    v14[1] = v12;
    v14[3] = v10 + 8 * v11;
    objc_moveWeak(v12, &v13);
    v14[2] = v12 + 1;
    std::vector<ADAMServerDelegate * {__weak}>::__swap_out_circular_buffer((id **)(v2 + 48), v14);
    v5 = *(_QWORD *)(v2 + 56);
    std::__split_buffer<ADAMServerDelegate * {__weak}>::~__split_buffer((uint64_t)v14);
  }
  else
  {
    objc_moveWeak(*(id **)(v2 + 56), &v13);
    v5 = v3 + 8;
    *(_QWORD *)(v2 + 56) = v3 + 8;
  }
  *(_QWORD *)(v2 + 56) = v5;
  objc_destroyWeak(&v13);
}

void sub_216D1D75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_216D1DF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_216D1E470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216D1E91C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216D1EB58(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_216D1F970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_216D1FD04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216D201E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216D208B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned long long,NSMutableArray * {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,NSMutableArray * {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,NSMutableArray * {__strong}>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,NSMutableArray * {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,NSMutableArray * {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,NSMutableArray * {__strong}>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,NSMutableArray * {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,NSMutableArray * {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,NSMutableArray * {__strong}>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned long long,NSMutableArray * {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,NSMutableArray * {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,NSMutableArray * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8E0] + 16;
}

void sub_216D20F98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216D211EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216D21308(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216D213FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216D21558(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  _Unwind_Resume(a1);
}

void sub_216D215A0()
{
  JUMPOUT(0x216D21590);
}

void ADAM::Analyzer::EnvironmentExposureBuffer::~EnvironmentExposureBuffer(ADAM::Analyzer::EnvironmentExposureBuffer *this)
{
  JUMPOUT(0x219A00DF0);
}

uint64_t ADAM::Analyzer::EnvironmentExposureBuffer::flush(uint64_t this)
{
  *(_BYTE *)(this + 112) = 0;
  return this;
}

uint64_t ADAM::Analyzer::EnvironmentExposureBuffer::analyze(uint64_t a1, uint64_t a2, float *a3, _OWORD *a4)
{
  BOOL v5;
  float v6;
  float v7;
  BOOL v8;
  uint64_t v9;
  NSObject *v10;
  int v12;
  double v13;
  double v14;
  double v15;
  NSObject *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    if (ADAM::Analyzer::EnvironmentExposureBuffer::isDataValid(ADAM::UnionDataPtr)const::errCnt++)
    {
LABEL_18:
      v9 = 1684108321;
      v12 = ADAM::Analyzer::EnvironmentExposureBuffer::isDataValid(ADAM::UnionDataPtr)const::errCnt;
      if (ADAM::Analyzer::EnvironmentExposureBuffer::isDataValid(ADAM::UnionDataPtr)const::errCnt > 0xBB7)
        v12 = 0;
      ADAM::Analyzer::EnvironmentExposureBuffer::isDataValid(ADAM::UnionDataPtr)const::errCnt = v12;
      return v9;
    }
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v16 = *(NSObject **)ADAM::ADAMLogScope(void)::scope;
      if (!*(_QWORD *)ADAM::ADAMLogScope(void)::scope)
        goto LABEL_18;
    }
    else
    {
      v16 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v22 = 136315394;
      v23 = "EnvironmentExposureBuffer.cpp";
      v24 = 1024;
      v25 = 61;
      _os_log_impl(&dword_216CFB000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d env spl data ptr is null? (sampled every 3k)", (uint8_t *)&v22, 0x12u);
    }
    goto LABEL_18;
  }
  v5 = *a3 >= 0.00000011921 && *a3 <= 130.0;
  if (v5
    && (v6 = a3[1], v6 >= 0.00000011921)
    && ((v7 = a3[2], v7 >= 0.00000011921) ? (v8 = v6 <= (float)(v7 + 0.00000011921)) : (v8 = 0), v8))
  {
    v9 = 0;
    *(_OWORD *)(a1 + 32) = *a4;
    v17 = a4[1];
    v18 = a4[2];
    v19 = a4[4];
    *(_OWORD *)(a1 + 80) = a4[3];
    *(_OWORD *)(a1 + 96) = v19;
    *(_OWORD *)(a1 + 48) = v17;
    *(_OWORD *)(a1 + 64) = v18;
    v20 = *(_QWORD *)a3;
    *(float *)(a1 + 124) = a3[2];
    *(_QWORD *)(a1 + 116) = v20;
    *(_BYTE *)(a1 + 112) = 1;
  }
  else
  {
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    v9 = 1684108321;
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v10 = *(NSObject **)ADAM::ADAMLogScope(void)::scope;
      if (!*(_QWORD *)ADAM::ADAMLogScope(void)::scope)
        return v9;
    }
    else
    {
      v10 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = *a3;
      v14 = a3[1];
      v15 = a3[2];
      v22 = 136316162;
      v23 = "EnvironmentExposureBuffer.cpp";
      v24 = 1024;
      v25 = 74;
      v26 = 2048;
      v27 = v13;
      v28 = 2048;
      v29 = v14;
      v30 = 2048;
      v31 = v15;
      _os_log_impl(&dword_216CFB000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid EVE data { dBA: %.2f, duration: %.2f, period: %.2f}", (uint8_t *)&v22, 0x30u);
    }
  }
  return v9;
}

uint64_t ADAM::Analyzer::EnvironmentExposureBuffer::reset(uint64_t this)
{
  *(_BYTE *)(this + 112) = 0;
  return this;
}

uint64_t ADAM::Analyzer::EnvironmentExposureBuffer::hardReset(ADAM::Analyzer::EnvironmentExposureBuffer *this)
{
  return (*(uint64_t (**)(ADAM::Analyzer::EnvironmentExposureBuffer *))(*(_QWORD *)this + 40))(this);
}

void ADAM::Analyzer::EnvironmentSoundClassAnalyzer::~EnvironmentSoundClassAnalyzer(ADAM::Analyzer::EnvironmentSoundClassAnalyzer *this)
{
  JUMPOUT(0x219A00DF0);
}

uint64_t ADAM::Analyzer::EnvironmentSoundClassAnalyzer::flush(uint64_t this)
{
  *(_BYTE *)(this + 112) = 0;
  return this;
}

uint64_t ADAM::Analyzer::EnvironmentSoundClassAnalyzer::analyze(uint64_t a1, uint64_t a2, _QWORD *a3, _OWORD *a4)
{
  uint64_t v5;
  NSObject *v6;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  NSObject *v12;
  uint64_t v13;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    if (ADAM::Analyzer::EnvironmentSoundClassAnalyzer::isDataValid(ADAM::UnionDataPtr)const::errCnt++)
    {
LABEL_9:
      v5 = 1684108321;
      v8 = ADAM::Analyzer::EnvironmentSoundClassAnalyzer::isDataValid(ADAM::UnionDataPtr)const::errCnt;
      if (ADAM::Analyzer::EnvironmentSoundClassAnalyzer::isDataValid(ADAM::UnionDataPtr)const::errCnt > 0xBB7)
        v8 = 0;
      ADAM::Analyzer::EnvironmentSoundClassAnalyzer::isDataValid(ADAM::UnionDataPtr)const::errCnt = v8;
      return v5;
    }
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v12 = *(NSObject **)ADAM::ADAMLogScope(void)::scope;
      if (!*(_QWORD *)ADAM::ADAMLogScope(void)::scope)
        goto LABEL_9;
    }
    else
    {
      v12 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v15 = 136315394;
      v16 = "EnvironmentExposureBuffer.cpp";
      v17 = 1024;
      v18 = 124;
      _os_log_impl(&dword_216CFB000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d env sound class data ptr is null? (sampled every 3k)", (uint8_t *)&v15, 0x12u);
    }
    goto LABEL_9;
  }
  if (*a3 < 0x11uLL)
  {
    v5 = 0;
    *(_OWORD *)(a1 + 32) = *a4;
    v9 = a4[1];
    v10 = a4[2];
    v11 = a4[4];
    *(_OWORD *)(a1 + 80) = a4[3];
    *(_OWORD *)(a1 + 96) = v11;
    *(_OWORD *)(a1 + 48) = v9;
    *(_OWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 120) = *a3;
    *(_BYTE *)(a1 + 112) = 1;
  }
  else
  {
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    v5 = 1684108321;
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v6 = *(NSObject **)ADAM::ADAMLogScope(void)::scope;
      if (!*(_QWORD *)ADAM::ADAMLogScope(void)::scope)
        return v5;
    }
    else
    {
      v6 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v13 = *a3;
      v15 = 136315650;
      v16 = "EnvironmentExposureBuffer.cpp";
      v17 = 1024;
      v18 = 131;
      v19 = 2048;
      v20 = v13;
      _os_log_impl(&dword_216CFB000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid EnvSense Class  { ClassBitSet: %.2llu }", (uint8_t *)&v15, 0x1Cu);
    }
  }
  return v5;
}

uint64_t ADAM::Analyzer::EnvironmentSoundClassAnalyzer::reset(uint64_t this)
{
  *(_BYTE *)(this + 112) = 0;
  return this;
}

uint64_t ADAM::Analyzer::EnvironmentSoundClassAnalyzer::hardReset(uint64_t this)
{
  *(_BYTE *)(this + 112) = 0;
  return this;
}

OpaqueAudioComponentInstance **std::unique_ptr<rtaid::DetectorNode>::reset[abi:ne180100](OpaqueAudioComponentInstance ***a1)
{
  OpaqueAudioComponentInstance **result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    rtaid::DetectorNode::~DetectorNode(result);
    JUMPOUT(0x219A00DF0);
  }
  return result;
}

void rtaid::Detector::~Detector(rtaid::Detector **this)
{
  _QWORD *i;
  unsigned __int8 v3;
  NSObject *v4;
  rtaid::Detector *v5;
  rtaid::Detector *v6;
  rtaid::Detector *v7;
  uint64_t v8;
  OpaqueAudioComponentInstance ***v9;
  OpaqueAudioComponentInstance **v10;
  rtaid::Detector *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  char *v19;
  __int16 v20;
  rtaid::Detector *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  for (i = this + 3; ; rtaid::Detector::checkAndResetAnalyzers((uint64_t)this, i + 3))
  {
    i = (_QWORD *)*i;
    if (!i)
      break;
  }
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  v4 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
  {
    v12 = 136316162;
    v13 = "Detector.cpp";
    v14 = 1024;
    v15 = 32;
    v16 = 1040;
    v17 = 15;
    v18 = 2080;
    v19 = "rtaid::Detector]";
    v20 = 2048;
    v21 = (rtaid::Detector *)this;
    _os_log_impl(&dword_216CFB000, v4, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] destroyed", (uint8_t *)&v12, 0x2Cu);
  }
  std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100]((uint64_t)(this + 80));
  v5 = this[77];
  if (v5)
  {
    this[78] = v5;
    operator delete(v5);
  }
  v6 = this[74];
  if (v6)
  {
    this[75] = v6;
    operator delete(v6);
  }
  v7 = this[11];
  if (v7 == (rtaid::Detector *)(this + 8))
  {
    v8 = 4;
    v7 = (rtaid::Detector *)(this + 8);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  v9 = (OpaqueAudioComponentInstance ***)this[3];
  if (v9)
  {
    do
    {
      v10 = *v9;
      std::unique_ptr<rtaid::DetectorNode>::reset[abi:ne180100](v9 + 3);
      operator delete(v9);
      v9 = (OpaqueAudioComponentInstance ***)v10;
    }
    while (v10);
  }
  v11 = this[1];
  this[1] = 0;
  if (v11)
    operator delete(v11);
}

void sub_216D21CEC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t *rtaid::Detector::ResetTelephonyRMSState(uint64_t *this)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;
  unint64_t v4;
  _DWORD *v5;

  for (; this; this = (uint64_t *)*this)
  {
    v1 = this[3];
    if (*(_BYTE *)(v1 + 164) || *(_BYTE *)(v1 + 157))
    {
      v2 = *(_DWORD **)(v1 + 192);
      v3 = *(_QWORD *)(v1 + 200) - (_QWORD)v2;
      if (v3)
      {
        v4 = v3 >> 2;
        v5 = *(_DWORD **)(v1 + 216);
        if (v4 <= 1)
          v4 = 1;
        do
        {
          *v2++ = 0;
          *v5++ = 0;
          --v4;
        }
        while (v4);
      }
      *(_DWORD *)(v1 + 244) = 0;
    }
  }
  return this;
}

void rtaid::DetectorNode::ConstructionSettings::~ConstructionSettings(void **this)
{
  std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100]((uint64_t)(this + 10));
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  v12 = *(char **)a1;
  v13 = *(char **)(a1 + 8);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*(_QWORD *)a1] >> 3);
  v15 = v11 - v14;
  if (v11 <= v14)
  {
    v22 = *(char **)(a1 + 8);
    if (v11 >= v14)
      goto LABEL_22;
    v22 = &v12[8 * ((a4[1] - *a4) >> 3)];
    goto LABEL_21;
  }
  v16 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v13) >> 3) >= v15)
  {
    v22 = &v13[24 * v15];
    v27 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((uint64_t)&v13[-*(_QWORD *)a1] >> 3);
    do
    {
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      v13[16] = 0;
      v13 += 24;
      v27 -= 24;
    }
    while (v27);
LABEL_21:
    *(_QWORD *)(a1 + 8) = v22;
    goto LABEL_22;
  }
  if (v11 > 0xAAAAAAAAAAAAAAALL)
    std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
  v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v12) >> 3);
  v18 = 2 * v17;
  if (2 * v17 <= v11)
    v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  if (v17 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v18;
  if (v19 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v20 = (char *)operator new(24 * v19);
  v21 = &v20[24 * v14];
  v22 = &v20[24 * v11];
  v23 = v21;
  v24 = 24 * v11 - 24 * v14;
  do
  {
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    v23[16] = 0;
    v23 += 24;
    v24 -= 24;
  }
  while (v24);
  v25 = *(char **)a1;
  if (v13 != *(char **)a1)
  {
    do
    {
      v26 = *(_OWORD *)(v13 - 24);
      *((_QWORD *)v21 - 1) = *((_QWORD *)v13 - 1);
      *(_OWORD *)(v21 - 24) = v26;
      v21 -= 24;
      v13 -= 24;
    }
    while (v13 != v25);
    v13 = *(char **)a1;
  }
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v22;
  *(_QWORD *)(a1 + 16) = &v20[24 * v19];
  if (v13)
  {
    operator delete(v13);
    v22 = *(char **)(a1 + 8);
  }
LABEL_22:
  v28 = *(char **)a1;
  if (v22 != *(char **)a1)
  {
    v29 = 0;
    v30 = 0;
    v32 = *a4;
    v31 = a4[1];
    do
    {
      v33 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v32) >> 3);
      v34 = (_QWORD *)(v32 + v29);
      if (v33 <= v30)
        v35 = a4 + 3;
      else
        v35 = v34;
      *(_QWORD *)&v28[v29] = a2 + *v35 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v30)
        v36 = a4 + 3;
      else
        v36 = (uint64_t *)(*a4 + v29);
      *(_QWORD *)(*(_QWORD *)a1 + v29 + 8) = a2 + v36[1] - v10;
      v32 = *a4;
      v31 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v31 - *a4) >> 3) <= v30)
        v37 = a4 + 3;
      else
        v37 = (uint64_t *)(*a4 + v29);
      v38 = *((_BYTE *)v37 + 16);
      v28 = *(char **)a1;
      v39 = *(_QWORD *)(a1 + 8);
      *(_BYTE *)(*(_QWORD *)a1 + v29 + 16) = v38;
      ++v30;
      v29 += 24;
    }
    while (v30 < 0xAAAAAAAAAAAAAAABLL * ((v39 - (uint64_t)v28) >> 3));
  }
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) = 0;
  v40 = a2 + a4[6] - v10;
  *(_QWORD *)(a1 + 48) = v40;
  *(_QWORD *)(a1 + 56) = a2 + a4[7] - v10;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a4 + 64);
  *(_QWORD *)(a1 + 72) = a2 + a4[9] - v10;
  *(_QWORD *)(a1 + 80) = a2 + a4[10] - v10;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    *(_QWORD *)(a1 + 104) = v40;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a4 + 96);
}

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v21 -= 96;
      std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v21);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A00B20](exception, 12);
}

void sub_216D222E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::__state<char>,0>(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_216D223DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_216D2244C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A00B20](exception, 16);
}

void sub_216D224A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<applesauce::CF::TypeRefPair>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  BOOL v35;
  size_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  int64_t v71;
  char *v72;
  unint64_t v73;
  __int128 v74;
  __n128 result;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void *v84;
  __int128 v85;
  __int128 v86;
  _QWORD *v87;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 42 * ((v4 - v5) >> 3) - 1;
  v7 = a1[4];
  v8 = a1[5] + v7;
  if (v6 == v8)
  {
    if (v7 < 0x2A)
    {
      v22 = (v4 - v5) >> 3;
      v23 = (char *)a1[3];
      v24 = (uint64_t)&v23[-*a1];
      if (v22 >= v24 >> 3)
      {
        if (v23 == (char *)*a1)
          v25 = 1;
        else
          v25 = v24 >> 2;
        v87 = a1 + 3;
        *(_QWORD *)&v85 = std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v25);
        *((_QWORD *)&v85 + 1) = v85 + 8 * v22;
        *(_QWORD *)&v86 = *((_QWORD *)&v85 + 1);
        *((_QWORD *)&v86 + 1) = v85 + 8 * v26;
        v84 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v85, &v84);
        v27 = a1[2];
        v29 = (char *)*((_QWORD *)&v85 + 1);
        v28 = (char *)v85;
        v31 = (char *)*((_QWORD *)&v86 + 1);
        v30 = (char *)v86;
        while (v27 != a1[1])
        {
          if (v29 == v28)
          {
            if (v30 >= v31)
            {
              if (v31 == v28)
                v37 = 1;
              else
                v37 = (v31 - v28) >> 2;
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v37);
              v40 = v38;
              v29 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
              v41 = v30 - v28;
              v35 = v30 == v28;
              v30 = v29;
              if (!v35)
              {
                v30 = &v29[v41 & 0xFFFFFFFFFFFFFFF8];
                v42 = 8 * (v41 >> 3);
                v43 = v29;
                v44 = v28;
                do
                {
                  v45 = *(_QWORD *)v44;
                  v44 += 8;
                  *(_QWORD *)v43 = v45;
                  v43 += 8;
                  v42 -= 8;
                }
                while (v42);
              }
              v31 = &v38[8 * v39];
              if (v28)
                operator delete(v28);
              v28 = v40;
            }
            else
            {
              v32 = (v31 - v30) >> 3;
              if (v32 >= -1)
                v33 = v32 + 1;
              else
                v33 = v32 + 2;
              v34 = &v30[8 * (v33 >> 1)];
              v29 = &v34[-(v30 - v28)];
              v36 = v30 - v28;
              v35 = v30 == v28;
              v30 = v34;
              if (!v35)
                memmove(v29, v28, v36);
            }
          }
          v46 = *(_QWORD *)(v27 - 8);
          v27 -= 8;
          *((_QWORD *)v29 - 1) = v46;
          v29 -= 8;
        }
        *(_QWORD *)&v85 = v28;
        *((_QWORD *)&v85 + 1) = v29;
        *(_QWORD *)&v86 = v30;
        *((_QWORD *)&v86 + 1) = v31;
        v48 = v85;
        v49 = v86;
        *(_QWORD *)&v85 = *a1;
        v47 = (void *)v85;
        *((_QWORD *)&v85 + 1) = v27;
        *(_OWORD *)a1 = v48;
        *((_OWORD *)a1 + 1) = v49;
        if (v47)
          operator delete(v47);
        goto LABEL_60;
      }
      if (v23 != v4)
      {
        *(_QWORD *)&v85 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v85);
LABEL_60:
        v5 = (char *)a1[1];
        v8 = a1[5] + a1[4];
        goto LABEL_61;
      }
      *(_QWORD *)&v85 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v85);
      v61 = (_QWORD *)a1[1];
      v4 = (char *)a1[2];
      v63 = *v61;
      v62 = (char *)(v61 + 1);
      v10 = v63;
      a1[1] = v62;
      if (v4 == (char *)a1[3])
      {
        v64 = (uint64_t)&v62[-*a1];
        if ((unint64_t)v62 > *a1)
        {
          v65 = v64 >> 3;
          v14 = v64 >> 3 < -1;
          v66 = (v64 >> 3) + 2;
          if (v14)
            v67 = v66;
          else
            v67 = v65 + 1;
          v68 = -(v67 >> 1);
          v69 = v67 >> 1;
          v70 = &v62[-8 * v69];
          v71 = v4 - v62;
          if (v4 != v62)
          {
            memmove(&v62[-8 * v69], v62, v4 - v62);
            v62 = (char *)a1[1];
          }
          v4 = &v70[v71];
          v72 = &v62[8 * v68];
          goto LABEL_58;
        }
        if (v4 == (char *)*a1)
          v77 = 1;
        else
          v77 = (uint64_t)&v4[-*a1] >> 2;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v77);
        v52 = &v51[8 * (v77 >> 2)];
        v54 = &v51[8 * v78];
        v79 = (uint64_t *)a1[1];
        v4 = v52;
        v80 = a1[2] - (_QWORD)v79;
        if (v80)
        {
          v4 = &v52[v80 & 0xFFFFFFFFFFFFFFF8];
          v81 = 8 * (v80 >> 3);
          v82 = &v51[8 * (v77 >> 2)];
          do
          {
            v83 = *v79++;
            *(_QWORD *)v82 = v83;
            v82 += 8;
            v81 -= 8;
          }
          while (v81);
        }
LABEL_46:
        v60 = (void *)*a1;
        *a1 = v51;
        a1[1] = v52;
        a1[2] = v4;
        a1[3] = v54;
        if (v60)
        {
          operator delete(v60);
          v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v7 - 42;
      v11 = *(_QWORD *)v5;
      v9 = v5 + 8;
      v10 = v11;
      a1[1] = v9;
      if ((char *)a1[3] == v4)
      {
        v12 = (uint64_t)&v9[-*a1];
        if ((unint64_t)v9 > *a1)
        {
          v13 = v12 >> 3;
          v14 = v12 >> 3 < -1;
          v15 = (v12 >> 3) + 2;
          if (v14)
            v16 = v15;
          else
            v16 = v13 + 1;
          v17 = -(v16 >> 1);
          v18 = v16 >> 1;
          v19 = &v9[-8 * v18];
          v20 = v4 - v9;
          if (v4 == v9)
          {
            v21 = v4;
          }
          else
          {
            memmove(&v9[-8 * v18], v9, v4 - v9);
            v21 = (char *)a1[1];
          }
          v4 = &v19[v20];
          v72 = &v21[8 * v17];
LABEL_58:
          a1[1] = v72;
          a1[2] = v4;
          goto LABEL_59;
        }
        if (v4 == (char *)*a1)
          v50 = 1;
        else
          v50 = (uint64_t)&v4[-*a1] >> 2;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v50);
        v52 = &v51[8 * (v50 >> 2)];
        v54 = &v51[8 * v53];
        v55 = (uint64_t *)a1[1];
        v4 = v52;
        v56 = a1[2] - (_QWORD)v55;
        if (v56)
        {
          v4 = &v52[v56 & 0xFFFFFFFFFFFFFFF8];
          v57 = 8 * (v56 >> 3);
          v58 = &v51[8 * (v50 >> 2)];
          do
          {
            v59 = *v55++;
            *(_QWORD *)v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
        }
        goto LABEL_46;
      }
    }
LABEL_59:
    *(_QWORD *)v4 = v10;
    a1[2] += 8;
    goto LABEL_60;
  }
LABEL_61:
  v73 = *(_QWORD *)&v5[8 * (v8 / 0x2A)] + 96 * (v8 % 0x2A);
  v74 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v73 = *(_OWORD *)a2;
  *(_OWORD *)(v73 + 16) = v74;
  *(_QWORD *)(v73 + 40) = 0;
  *(_QWORD *)(v73 + 48) = 0;
  *(_QWORD *)(v73 + 32) = 0;
  *(_OWORD *)(v73 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v73 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v73 + 56) = 0;
  *(_QWORD *)(v73 + 64) = 0;
  *(_QWORD *)(v73 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v73 + 56) = result;
  *(_QWORD *)(v73 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v76 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v73 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v73 + 80) = v76;
  ++a1[5];
  return result;
}

void sub_216D229C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[5] + a1[4] - 1;
  std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x2A))
                                                                 + 96 * (v2 % 0x2A)));
  v4 = a1[1];
  v3 = a1[2];
  if (v3 == v4)
    v5 = 0;
  else
    v5 = 42 * ((v3 - v4) >> 3) - 1;
  v6 = a1[4];
  v7 = a1[5] - 1;
  a1[5] = v7;
  if ((unint64_t)(v5 - (v7 + v6)) >= 0x54)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x2A] + 96 * ((*(_QWORD *)(a1 + 40) + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 42;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  size_t v4;
  void **v5;
  int v6;
  void *v7;
  size_t v8;
  void **v9;
  size_t v10;
  void **v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  void **v16;
  size_t v17;
  uint64_t v18;
  void *v19;
  size_t v20;
  uint64_t v21;

  if (*(_BYTE *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v19, *(char **)a1, *(char **)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v16, *(char **)a2, *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    v3 = HIBYTE(v18);
    v5 = v16;
    v4 = v17;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v3 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
  }
  v6 = SHIBYTE(v21);
  v7 = v19;
  if (v21 >= 0)
    v8 = HIBYTE(v21);
  else
    v8 = v20;
  if (v21 >= 0)
    v9 = &v19;
  else
    v9 = (void **)v19;
  if ((v3 & 0x80u) == 0)
    v10 = v3;
  else
    v10 = v4;
  if ((v3 & 0x80u) == 0)
    v11 = (void **)&v16;
  else
    v11 = v5;
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v9, v11, v12);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v6 & 0x80000000) == 0)
      goto LABEL_24;
  }
  else if ((v6 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v7);
LABEL_24:
  v14 = v10 < v8;
  if (v8 < v10)
    v14 = -1;
  if (v13)
    return v13;
  else
    return v14;
}

void sub_216D22F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = result;
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *v7 = result;
    v7 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v7 = v10;
    v7 = (_QWORD *)((char *)v7 + 1);
  }
  *(_BYTE *)v7 = 0;
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A00B20](exception, 17);
}

void sub_216D23054(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_24D615D80;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      v10 = v3;
      v3 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>((std::basic_regex<char> *)a1, v3, v4);
    }
    while (v3 != v10);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &off_24D615DB0;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  v3 = a3;
  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A00B20](exception, 14);
}

void sub_216D23284(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24D616068;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x219A00DF0);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24D616068;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24D616068;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x219A00DF0);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A00B20](exception, 15);
}

void sub_216D2350C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  std::basic_regex<char>::value_type v13;
  char *v14;
  _BOOL4 v15;
  uint64_t v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *first;
  int v20;
  uint64_t v21;
  BOOL v22;
  std::__owns_one_state<char> *v23;
  std::__node<char> *v24;
  uint64_t (**v25)();
  unsigned int v26;
  char *v27;
  char *v28;

  end = this->__end_;
  marked_count = this->__marked_count_;
  if (a2 == a3)
  {
LABEL_24:
    v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    goto LABEL_25;
  }
  v8 = *a2;
  v9 = (v8 - 36);
  if (v9 > 0x3A)
    goto LABEL_13;
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v9 == 5)
    {
      if (this->__open_count_)
        goto LABEL_4;
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, *a2);
LABEL_33:
      v10 = (unsigned __int8 *)(a2 + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v10, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
    }
LABEL_13:
    if ((v8 - 123) < 2)
      goto LABEL_4;
    goto LABEL_14;
  }
LABEL_4:
  v10 = (unsigned __int8 *)(a2 + 1);
  if (a2 + 1 == a3)
    goto LABEL_21;
  v11 = *a2;
  if (v11 != 92)
    goto LABEL_22;
  v12 = (char)*v10;
  v13 = *v10;
  if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x5800000080004F1) != 0
    || (v12 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v13);
    v10 = (unsigned __int8 *)(a2 + 2);
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v10, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
  }
  if ((this->__flags_ & 0x1F0) == 0x40)
  {
    v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(this, a2 + 1, a3, 0);
  }
  else
  {
    v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v13);
    v16 = 2;
    if (!v15)
      v16 = 0;
    v14 = &a2[v16];
  }
  if (v14 == a2)
  {
LABEL_21:
    v11 = *a2;
LABEL_22:
    if (v11 == 46)
    {
      v17 = (std::__node<char> *)operator new();
      v18 = this->__end_;
      first = v18->__first_;
      v17->__vftable = (std::__node<char>_vtbl *)&off_24D616128;
      v17[1].__vftable = (std::__node<char>_vtbl *)first;
      v18->__first_ = v17;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v10, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
    }
    goto LABEL_24;
  }
LABEL_25:
  if (v14 != a2 || v14 == a3)
    goto LABEL_37;
  v20 = *a2;
  switch(v20)
  {
    case '$':
      v21 = operator new();
      v22 = (this->__flags_ & 0x5F0) == 1024;
      v23 = this->__end_;
      v24 = v23->__first_;
      v25 = &off_24D615DB0;
      goto LABEL_32;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      v26 = this->__marked_count_;
      ++this->__open_count_;
      v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(this, a2 + 1, a3);
      if (v27 == a3 || (v28 = v27, *v27 != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v26);
      --this->__open_count_;
      v14 = v28 + 1;
LABEL_37:
      v10 = (unsigned __int8 *)v14;
      if (v14 != a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v10, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
      return (unsigned __int8 *)a2;
    case '^':
      v21 = operator new();
      v22 = (this->__flags_ & 0x5F0) == 1024;
      v23 = this->__end_;
      v24 = v23->__first_;
      v25 = &off_24D615D80;
LABEL_32:
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = v24;
      *(_BYTE *)(v21 + 16) = v22;
      v23->__first_ = (std::__node<char> *)v21;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      goto LABEL_33;
  }
  return (unsigned __int8 *)a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &off_24D615FD8;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<char> *)v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A00B20](exception, 6);
}

void sub_216D238F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &off_24D616008;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<char> *)v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A00B20](exception, 8);
}

void sub_216D239A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A00B20](exception, 7);
}

void sub_216D239F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24D616068;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = (_BYTE *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((_QWORD *)v7 - 2) = v5;
      *((_QWORD *)v7 - 1) = v5;
      *v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x219A00DF0);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x219A00DF0);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x219A00DF0);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x219A00DF0);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A00B20](exception, 5);
}

void sub_216D23E78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  char v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  _BYTE *v28;
  char v29;
  _BYTE *v30;
  char v31;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = *(_QWORD *)(a1 + 40);
      v7 = &v5[-v6];
      v8 = (uint64_t)&v5[-v6 + 1];
      if (v8 >= 0)
      {
        v9 = v4 - v6;
        if (2 * v9 > v8)
          v8 = 2 * v9;
        if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        if (v10)
          v11 = operator new(v10);
        else
          v11 = 0;
        v19 = &v7[(_QWORD)v11];
        v20 = (char *)v11 + v10;
        v7[(_QWORD)v11] = v2;
        v18 = (uint64_t)&v7[(_QWORD)v11 + 1];
        if (v5 != (_BYTE *)v6)
        {
          v21 = &v5[~v6];
          do
          {
            v22 = *--v5;
            (v21--)[(_QWORD)v11] = v22;
          }
          while (v5 != (_BYTE *)v6);
LABEL_45:
          v5 = *(_BYTE **)(a1 + 40);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v5 = *(_BYTE **)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v12)
    {
      v23 = *(_QWORD *)(a1 + 40);
      v24 = &v5[-v23];
      v25 = (uint64_t)&v5[-v23 + 1];
      if (v25 >= 0)
      {
        v26 = v12 - v23;
        if (2 * v26 > v25)
          v25 = 2 * v26;
        if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
          v27 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
          v11 = operator new(v27);
        else
          v11 = 0;
        v19 = &v24[(_QWORD)v11];
        v20 = (char *)v11 + v27;
        v24[(_QWORD)v11] = v2;
        v18 = (uint64_t)&v24[(_QWORD)v11 + 1];
        if (v5 != (_BYTE *)v23)
        {
          v30 = &v5[~v23];
          do
          {
            v31 = *--v5;
            (v30--)[(_QWORD)v11] = v31;
          }
          while (v5 != (_BYTE *)v23);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v18 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v12)
    goto LABEL_22;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = &v5[-v13];
  v15 = (uint64_t)&v5[-v13 + 1];
  if (v15 < 0)
    goto LABEL_50;
  v16 = v12 - v13;
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
    v17 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
    v11 = operator new(v17);
  else
    v11 = 0;
  v19 = &v14[(_QWORD)v11];
  v20 = (char *)v11 + v17;
  v14[(_QWORD)v11] = v2;
  v18 = (uint64_t)&v14[(_QWORD)v11 + 1];
  if (v5 != (_BYTE *)v13)
  {
    v28 = &v5[~v13];
    do
    {
      v29 = *--v5;
      (v28--)[(_QWORD)v11] = v29;
    }
    while (v5 != (_BYTE *)v13);
    goto LABEL_45;
  }
LABEL_46:
  v11 = v19;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 56) = v20;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; ; ++i)
  {
    v6 = &a2[i];
    if (a2[i] == 46 && v6[1] == 93)
      break;
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (v6 == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v10, a1, a2, &a2[i]);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  int v7;
  int v8;
  int v9;
  char v10;
  char v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  char v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  _BYTE *v41;
  char v42;
  _BYTE *v43;
  char v44;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v7 = (char)*a2;
  if (v7 <= 97)
  {
    if (v7 <= 82)
    {
      if (!*a2)
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        return a2 + 1;
      }
      if (v7 == 68)
      {
        v8 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_24:
        *(_DWORD *)(a5 + 164) = v8;
        return a2 + 1;
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
    }
    if (v7 == 83)
    {
      v8 = *(_DWORD *)(a5 + 164) | 0x4000;
      goto LABEL_24;
    }
    if (v7 != 87)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
    *(_DWORD *)(a5 + 164) |= 0x500u;
    if (*(_BYTE *)(a5 + 169))
    {
      v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a5 + 24) + 40))(*(_QWORD *)(a5 + 24), 95);
      v11 = v10;
      v13 = *(_BYTE **)(a5 + 72);
      v12 = *(_QWORD *)(a5 + 80);
      if ((unint64_t)v13 < v12)
      {
        *v13 = v10;
        v14 = (uint64_t)(v13 + 1);
LABEL_60:
        *(_QWORD *)(a5 + 72) = v14;
        return a2 + 1;
      }
      v24 = *(_QWORD *)(a5 + 64);
      v25 = &v13[-v24];
      v26 = (uint64_t)&v13[-v24 + 1];
      if (v26 >= 0)
      {
        v27 = v12 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v29 = operator new(v28);
        else
          v29 = 0;
        v31 = &v29[v28];
        v25[(_QWORD)v29] = v11;
        v14 = (uint64_t)&v25[(_QWORD)v29 + 1];
        if (v13 == (_BYTE *)v24)
        {
          v29 = &v25[(_QWORD)v29];
        }
        else
        {
          v32 = &v13[~v24];
          do
          {
            v33 = *--v13;
            (v32--)[(_QWORD)v29] = v33;
          }
          while (v13 != (_BYTE *)v24);
          v13 = *(_BYTE **)(a5 + 64);
        }
        *(_QWORD *)(a5 + 64) = v29;
        *(_QWORD *)(a5 + 72) = v14;
        *(_QWORD *)(a5 + 80) = v31;
        if (v13)
          operator delete(v13);
        goto LABEL_60;
      }
LABEL_85:
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    }
    v17 = *(_BYTE **)(a5 + 72);
    v16 = *(_QWORD *)(a5 + 80);
    if (*(_BYTE *)(a5 + 170))
    {
      if ((unint64_t)v17 >= v16)
      {
        v18 = *(_QWORD *)(a5 + 64);
        v19 = &v17[-v18];
        v20 = (uint64_t)&v17[-v18 + 1];
        if (v20 < 0)
          goto LABEL_85;
        v21 = v16 - v18;
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
          v23 = operator new(v22);
        else
          v23 = 0;
        v39 = &v19[(_QWORD)v23];
        v40 = (char *)v23 + v22;
        v19[(_QWORD)v23] = 95;
        v30 = (uint64_t)&v19[(_QWORD)v23 + 1];
        if (v17 != (_BYTE *)v18)
        {
          v41 = &v17[~v18];
          do
          {
            v42 = *--v17;
            (v41--)[(_QWORD)v23] = v42;
          }
          while (v17 != (_BYTE *)v18);
LABEL_78:
          v17 = *(_BYTE **)(a5 + 64);
          goto LABEL_80;
        }
        goto LABEL_79;
      }
    }
    else if ((unint64_t)v17 >= v16)
    {
      v34 = *(_QWORD *)(a5 + 64);
      v35 = &v17[-v34];
      v36 = (uint64_t)&v17[-v34 + 1];
      if (v36 < 0)
        goto LABEL_85;
      v37 = v16 - v34;
      if (2 * v37 > v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v23 = operator new(v38);
      else
        v23 = 0;
      v39 = &v35[(_QWORD)v23];
      v40 = (char *)v23 + v38;
      v35[(_QWORD)v23] = 95;
      v30 = (uint64_t)&v35[(_QWORD)v23 + 1];
      if (v17 != (_BYTE *)v34)
      {
        v43 = &v17[~v34];
        do
        {
          v44 = *--v17;
          (v43--)[(_QWORD)v23] = v44;
        }
        while (v17 != (_BYTE *)v34);
        goto LABEL_78;
      }
LABEL_79:
      v23 = v39;
LABEL_80:
      *(_QWORD *)(a5 + 64) = v23;
      *(_QWORD *)(a5 + 72) = v30;
      *(_QWORD *)(a5 + 80) = v40;
      if (v17)
        operator delete(v17);
      goto LABEL_82;
    }
    *v17 = 95;
    v30 = (uint64_t)(v17 + 1);
LABEL_82:
    *(_QWORD *)(a5 + 72) = v30;
    return a2 + 1;
  }
  if (v7 <= 114)
  {
    if (v7 == 98)
    {
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      return a2 + 1;
    }
    if (v7 != 100)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
    v9 = *(_DWORD *)(a5 + 160) | 0x400;
LABEL_26:
    *(_DWORD *)(a5 + 160) = v9;
    return a2 + 1;
  }
  if (v7 == 115)
  {
    v9 = *(_DWORD *)(a5 + 160) | 0x4000;
    goto LABEL_26;
  }
  if (v7 != 119)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
  *(_DWORD *)(a5 + 160) |= 0x500u;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
  return a2 + 1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, uint64_t *a4)
{
  int v5;
  std::basic_regex<char>::value_type v6;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type v8;
  char *v9;
  char v10;
  int v11;
  std::basic_regex<char>::value_type v12;
  __int16 v13;

  if (a2 == a3)
LABEL_80:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  v6 = *a2;
  if (v5 > 97)
  {
    switch(*a2)
    {
      case 'n':
        if (!a4)
        {
          v7 = 10;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 10;
        goto LABEL_77;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_25;
      case 'r':
        if (!a4)
        {
          v7 = 13;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 13;
        goto LABEL_77;
      case 't':
        if (!a4)
        {
          v7 = 9;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 9;
        goto LABEL_77;
      case 'v':
        if (!a4)
        {
          v7 = 11;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 11;
        goto LABEL_77;
      default:
        if (v5 == 98)
        {
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            v13 = 8;
            goto LABEL_77;
          }
          v7 = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_25;
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            v13 = 12;
            goto LABEL_77;
          }
          v7 = 12;
        }
        break;
    }
LABEL_62:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
    return a2 + 1;
  }
  if (v5 > 91)
  {
    if (v5 == 92)
    {
LABEL_16:
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v6;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      v7 = *a2;
      goto LABEL_62;
    }
    if (v5 != 97)
      goto LABEL_25;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v13 = 7;
LABEL_77:
      *(_WORD *)a4 = v13;
      return a2 + 1;
    }
    v7 = 7;
    goto LABEL_62;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_16;
LABEL_25:
  if ((v6 & 0xF8) != 0x30)
    goto LABEL_80;
  v8 = v5 - 48;
  v9 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v9 & 0xF8) != 0x30)
      goto LABEL_49;
    v8 = *v9 + 8 * v8 - 48;
    if (a2 + 2 != a3)
    {
      v10 = a2[2];
      v11 = v10 & 0xF8;
      v12 = v10 + 8 * v8 - 48;
      if (v11 == 48)
        v9 = a2 + 3;
      else
        v9 = a2 + 2;
      if (v11 == 48)
        v8 = v12;
      goto LABEL_49;
    }
  }
  v9 = a3;
LABEL_49:
  if (a4)
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 1;
      a4 = (uint64_t *)*a4;
    }
    else
    {
      *((_BYTE *)a4 + 23) = 1;
    }
    *(_BYTE *)a4 = v8;
    *((_BYTE *)a4 + 1) = 0;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
  }
  return v9;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int16 v38;
  char *v39;
  __int16 v40;

  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v8 = *(_WORD **)(a1 + 120);
    v16 = *(_QWORD *)(a1 + 128);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v17 = *(_QWORD *)(a1 + 112);
      v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        v19 = v18 >> 1;
        v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1)
          v21 = v19 + 1;
        else
          v21 = v20;
        if (v20 >= 0x7FFFFFFFFFFFFFFELL)
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioServiceType>>(v22);
        else
          v23 = 0;
        v25 = (_WORD *)(v22 + 2 * v19);
        v26 = v22 + 2 * v23;
        *v25 = v6;
        v24 = v25 + 1;
        v37 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v37)
          goto LABEL_46;
        do
        {
          v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v30 = *(_QWORD *)(a1 + 112);
      v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        v32 = v31 >> 1;
        v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1)
          v34 = v32 + 1;
        else
          v34 = v33;
        if (v33 >= 0x7FFFFFFFFFFFFFFELL)
          v35 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        if (v35)
          v35 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioServiceType>>(v35);
        else
          v36 = 0;
        v25 = (_WORD *)(v35 + 2 * v32);
        v26 = v35 + 2 * v36;
        *v25 = v6;
        v24 = v25 + 1;
        v39 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v39)
          goto LABEL_46;
        do
        {
          v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
  v8 = *(_WORD **)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    *v8 = v6;
    v24 = v8 + 1;
    goto LABEL_48;
  }
  v9 = *(_QWORD *)(a1 + 112);
  v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3)
    goto LABEL_49;
  v11 = v10 >> 1;
  v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1)
    v13 = v11 + 1;
  else
    v13 = v12;
  if (v12 >= 0x7FFFFFFFFFFFFFFELL)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v14 = v13;
  if (v14)
    v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioServiceType>>(v14);
  else
    v15 = 0;
  v25 = (_WORD *)(v14 + 2 * v11);
  v26 = v14 + 2 * v15;
  *v25 = v6;
  v24 = v25 + 1;
  v28 = *(char **)(a1 + 112);
  v27 = *(char **)(a1 + 120);
  if (v27 == v28)
    goto LABEL_46;
  do
  {
    v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  v27 = *(char **)(a1 + 112);
LABEL_46:
  *(_QWORD *)(a1 + 112) = v25;
  *(_QWORD *)(a1 + 120) = v24;
  *(_QWORD *)(a1 + 128) = v26;
  if (v27)
    operator delete(v27);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v24;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;

  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(__p, a3, a4, a4 - a3);
  v5 = v8;
  if ((v8 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v8 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0)
    operator delete(__p[0]);
}

void sub_216D24AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  int64x2_t v21;
  void *v22;
  uint64_t v23;

  v4 = (unint64_t)a1[1];
  v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)*a1) >> 4);
    v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555)
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 4);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(48 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[48 * v9];
    *(_OWORD *)v14 = *a2;
    *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
    v15 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *(_OWORD *)(v14 + 24) = v15;
    *((_QWORD *)v14 + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    v17 = *a1;
    v16 = (unint64_t)a1[1];
    if ((char *)v16 == *a1)
    {
      v21 = vdupq_n_s64(v16);
      v18 = &v13[48 * v9];
    }
    else
    {
      v18 = &v13[48 * v9];
      do
      {
        v19 = *(_OWORD *)(v16 - 48);
        *((_QWORD *)v18 - 4) = *(_QWORD *)(v16 - 32);
        *((_OWORD *)v18 - 3) = v19;
        *(_QWORD *)(v16 - 40) = 0;
        *(_QWORD *)(v16 - 32) = 0;
        *(_QWORD *)(v16 - 48) = 0;
        v20 = *(_OWORD *)(v16 - 24);
        *((_QWORD *)v18 - 1) = *(_QWORD *)(v16 - 8);
        *(_OWORD *)(v18 - 24) = v20;
        v18 -= 48;
        *(_QWORD *)(v16 - 16) = 0;
        *(_QWORD *)(v16 - 8) = 0;
        *(_QWORD *)(v16 - 24) = 0;
        v16 -= 48;
      }
      while ((char *)v16 != v17);
      v21 = *(int64x2_t *)a1;
    }
    v8 = v14 + 48;
    *a1 = v18;
    a1[1] = v14 + 48;
    a1[2] = &v13[48 * v12];
    v23 = v21.i64[1];
    v22 = (void *)v21.i64[0];
    while ((void *)v23 != v22)
    {
      v23 -= 48;
      std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v23);
    }
    if (v22)
      operator delete(v22);
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v7 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v4 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v8 = (char *)(v4 + 48);
  }
  a1[1] = v8;
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A00B20](exception, 9);
}

void sub_216D24CFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A00B20](exception, 3);
}

void sub_216D24D8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &off_24D615E88;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &off_24D615EB8;
    *(_QWORD *)(v8 + 8) = v10;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_24D615EE8;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_216D24EC8(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  MEMORY[0x219A00DF0](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x219A00DF0);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24D615EB8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24D615EB8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x219A00DF0);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24D615E88;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24D615E88;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x219A00DF0);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  char v10;
  unsigned __int8 v11;
  char v12;
  std::basic_regex<char>::value_type v13;
  unsigned __int8 v14;
  std::basic_regex<char>::value_type v15;
  __int16 v16;

  v4 = a2;
  if (a2 != a3)
  {
    v5 = *a2;
    v6 = v5;
    if ((char)v5 > 109)
    {
      switch((char)v5)
      {
        case 'n':
          if (!a4)
          {
            v6 = 10;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 10;
          goto LABEL_79;
        case 'r':
          if (!a4)
          {
            v6 = 13;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 13;
          goto LABEL_79;
        case 't':
          if (!a4)
          {
            v6 = 9;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 9;
          goto LABEL_79;
        case 'u':
          if (v4 + 1 != a3)
          {
            v7 = v4[1];
            if ((v7 & 0xF8) == 0x30 || (v7 & 0xFE) == 0x38 || (v7 | 0x20u) - 97 < 6)
            {
              v4 += 2;
              if (v4 != a3)
              {
                v8 = *v4;
                if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
                  goto LABEL_27;
              }
            }
          }
          goto LABEL_89;
        case 'v':
          if (!a4)
          {
            v6 = 11;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 11;
          break;
        case 'x':
LABEL_27:
          if (v4 + 1 == a3)
            goto LABEL_89;
          v9 = v4[1];
          v10 = -48;
          if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38)
            goto LABEL_32;
          v9 |= 0x20u;
          if ((v9 - 97) >= 6u)
            goto LABEL_89;
          v10 = -87;
LABEL_32:
          if (v4 + 2 == a3)
            goto LABEL_89;
          v11 = v4[2];
          v12 = -48;
          if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38)
            goto LABEL_37;
          v11 |= 0x20u;
          if ((v11 - 97) >= 6u)
            goto LABEL_89;
          v12 = -87;
LABEL_37:
          v13 = v12 + v11 + 16 * (v10 + v9);
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            *(_BYTE *)a4 = v13;
            *((_BYTE *)a4 + 1) = 0;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v13);
          }
          v4 += 3;
          return v4;
        default:
          goto LABEL_51;
      }
      goto LABEL_79;
    }
    if ((char)v5 == 48)
    {
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return ++v4;
      }
      v6 = 0;
      goto LABEL_67;
    }
    if ((char)v5 != 99)
    {
      if ((char)v5 == 102)
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 12;
LABEL_79:
          *(_WORD *)a4 = v16;
          return ++v4;
        }
        v6 = 12;
LABEL_67:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return ++v4;
      }
LABEL_51:
      if ((char)v5 != 95 && ((char)v5 < 0 || (a1->__traits_.__ct_->__tab_[v5] & 0x500) == 0))
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          *(_BYTE *)a4 = v5;
          *((_BYTE *)a4 + 1) = 0;
          return ++v4;
        }
        goto LABEL_67;
      }
LABEL_89:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if (v4 + 1 == a3)
      goto LABEL_89;
    v14 = v4[1];
    if (((v14 & 0xDF) - 65) > 0x19u)
      goto LABEL_89;
    v15 = v14 & 0x1F;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v15;
      *((_BYTE *)a4 + 1) = 0;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v15);
    }
    v4 += 2;
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&__s, a3, a4, a4 - a3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v13, *(_QWORD *)(a2 + 16), v10, (char *)v10 + size);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v13;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a1 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_216D2572C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A00B20](exception, 1);
}

void sub_216D25798(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A00B20](exception, 2);
}

void sub_216D257E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;

  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(__p, a3, a4, a4 - a3);
  v5 = v8;
  if ((v8 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v8 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0)
    operator delete(__p[0]);
}

void sub_216D25A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, _QWORD *a2)
{
  size_t v2;
  size_t v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    v3 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (_QWORD *)*a1;
    v3 = v2;
  }
  v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v5 = v4;
  }
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
  {
    if ((v7 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (v3 == v5)
      return 0;
    if (v3 >= v5)
      return 1;
  }
  return 255;
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(__p, a3, a4, a4 - a3);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a1 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a1;
      else
        v10 = *(_BYTE **)a1;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_216D25B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x219A00DF0);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A00B20](exception, 4);
}

void sub_216D25CFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  uint64_t (**v11)();

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_24D615F18;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)v11;
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_24D615F48;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_24D615F78;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x219A00DF0);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24D615F48;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24D615F48;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x219A00DF0);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = v6;
      v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v10++;
        if (v11 != v13)
          break;
        if (!--v9)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24D615F18;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24D615F18;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x219A00DF0);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  int v8;
  unsigned __int8 *v9;
  char *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 *v18;
  _BOOL4 v19;
  uint64_t v20;
  size_t v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26;
  size_t v27;
  size_t v28;
  std::basic_regex<char> *v29;
  int v31;
  int v32;

  v3 = (char *)a2;
  if (a2 != a3)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = a2 + 1;
    v8 = *a2;
    if ((a2 + 1 != a3 || v8 != 36)
      && ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      goto LABEL_29;
    }
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
    if (v11 == v3)
    {
      if (*v3 == 46)
      {
        v12 = (std::__node<char> *)operator new();
        v13 = a1->__end_;
        first = v13->__first_;
        v12->__vftable = (std::__node<char>_vtbl *)&off_24D616128;
        v12[1].__vftable = (std::__node<char>_vtbl *)first;
        v13->__first_ = v12;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        goto LABEL_29;
      }
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, v3, (char *)a3);
    }
    if (v11 == v3 && v11 != (char *)a3)
    {
      if (v9 == a3 || *v3 != 92)
        return v3;
      v15 = *v9;
      if (v15 == 40)
      {
        v16 = (uint64_t)(v3 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        v17 = a1->__marked_count_;
        do
        {
          v18 = (unsigned __int8 *)v16;
          v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v16, a3);
        }
        while ((unsigned __int8 *)v16 != v18);
        if (v18 == a3 || v18 + 1 == a3 || *v18 != 92 || v18[1] != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        v11 = (char *)(v18 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v17);
      }
      else
      {
        v19 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v15);
        v20 = 2;
        if (!v19)
          v20 = 0;
        v11 = &v3[v20];
      }
    }
    v9 = (unsigned __int8 *)v11;
    if (v11 != v3)
    {
LABEL_29:
      if (v9 == a3)
        return (char *)a3;
      v21 = a1->__marked_count_ + 1;
      v22 = *v9;
      if (v22 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
        return (char *)(v9 + 1);
      }
      if (v9 + 1 == a3 || v22 != 92 || v9[1] != 123)
        return (char *)v9;
      v32 = 0;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v9 + 2, a3, &v32);
      if (v23 == v9 + 2)
LABEL_45:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v23 != a3)
      {
        v24 = v23 + 1;
        v25 = *v23;
        if (v25 == 44)
        {
          v31 = -1;
          v26 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v23 + 1, a3, &v31);
          if (v26 != a3 && v26 + 1 != a3 && *v26 == 92 && v26[1] == 125)
          {
            v28 = v31;
            v27 = v32;
            if (v31 == -1)
            {
              v28 = -1;
            }
            else if (v31 < v32)
            {
              goto LABEL_45;
            }
            v3 = (char *)&v26[2 * (v26[1] == 125)];
            v29 = a1;
LABEL_53:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v29, v27, v28, end, marked_count + 1, v21, 1);
            return v3;
          }
        }
        else if (v24 != a3 && v25 == 92 && *v24 == 125)
        {
          v3 = (char *)(v23 + 2);
          v27 = v32;
          v29 = a1;
          v28 = v32;
          goto LABEL_53;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v3;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A00B20](exception, 11);
}

void sub_216D26620(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x219A00DF0);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
  uint64_t v4;
  std::__node<char> *first;

  v4 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v4 = &off_24D615DE0;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_BYTE *)(v4 + 40) = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  uint64_t v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &off_24D615E10;
  *(_QWORD *)(v8 + 8) = first;
  std::locale::locale((std::locale *)(v8 + 16), &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *(_QWORD *)(v8 + 56) = a2->__start_.__ptr_;
  *(_QWORD *)(v8 + 64) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *(_QWORD *)(v8 + 72) = a2->__end_;
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24D615E10;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24D615E10;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x219A00DF0);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::csub_match>::size_type v4;
  uint64_t v5;
  const char *v6;
  BOOL v7;
  char v8;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  std::sub_match<const char *> *v15;
  uint64_t v16;
  std::vector<std::csub_match> __p;
  std::vector<std::csub_match>::value_type v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  std::vector<std::csub_match>::value_type v23;
  char v24;
  uint64_t v25;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(&v23, 0, 17);
  v24 = 0;
  v25 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v19.first = *(const char **)(a2 + 24);
  v19.second = v19.first;
  v19.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v19);
  v20 = v5;
  v21 = v5;
  v22 = 0;
  v23 = v19;
  v25 = v5;
  v24 = 1;
  v6 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(const char **)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v11 = *(_DWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = 2;
  v14 = 1;
  do
  {
    v15 = &begin[v14];
    v16 = v12 + 24 * (v11 + v13 - 2);
    *(std::pair<const char *, const char *> *)v16 = v15->std::pair<const char *, const char *>;
    *(_BYTE *)(v16 + 16) = v15->matched;
    v14 = v13;
  }
  while (v10 > v13++);
LABEL_14:
  operator delete(begin);
}

void sub_216D26A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24D615DE0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24D615DE0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x219A00DF0);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A00DF0);
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = ((_DWORD)a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void rtaid::Detector::GetNodeIDs(rtaid::Detector *this, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (v4 >> 62)
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rtaid::TelephonyResetDetector>>(v4);
    v7 = &v5[4 * v6];
    *(_QWORD *)this = v5;
    *((_QWORD *)this + 1) = v5;
    *((_QWORD *)this + 2) = v7;
  }
  else
  {
    v7 = 0;
    v5 = 0;
  }
  v8 = *(uint64_t **)(a2 + 24);
  if (v8)
  {
    v9 = v5;
    do
    {
      if (v9 >= v7)
      {
        v11 = (v9 - v5) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
        if ((v7 - v5) >> 1 > v12)
          v12 = (v7 - v5) >> 1;
        if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFFCLL)
          v13 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<rtaid::TelephonyResetDetector>>(v13);
        else
          v14 = 0;
        v15 = (char *)(v13 + 4 * v11);
        *(_DWORD *)v15 = *((_DWORD *)v8 + 4);
        v10 = v15 + 4;
        while (v9 != v5)
        {
          v16 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v15 - 1) = v16;
          v15 -= 4;
        }
        v7 = (char *)(v13 + 4 * v14);
        *(_QWORD *)this = v15;
        *((_QWORD *)this + 1) = v10;
        *((_QWORD *)this + 2) = v7;
        if (v5)
          operator delete(v5);
        v5 = v15;
      }
      else
      {
        *(_DWORD *)v9 = *((_DWORD *)v8 + 4);
        v10 = v9 + 4;
      }
      *((_QWORD *)this + 1) = v10;
      v8 = (uint64_t *)*v8;
      v9 = v10;
    }
    while (v8);
  }
}

void sub_216D26E94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ADAM::SensorKitWriter::write(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  NSObject *v6;
  id v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  uint64_t v17;
  id v18;
  int v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  ADAM::Parameters *v24;
  unint64_t v25;
  _BYTE *v26;
  NSObject *v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  void *v35;
  double v36;
  double v37;
  double v38;
  void *v39;
  size_t v40;
  std::string *v41;
  const void *v42;
  std::string *v43;
  std::string::size_type size;
  std::string *v45;
  __int128 v46;
  void **v47;
  uint64_t v48;
  id v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  uint64_t v56;
  void *v57;
  id v58;
  id v59;
  id v60;
  unsigned __int8 v61;
  NSObject *v62;
  id v63;
  NSObject *v64;
  void *v65;
  id v66;
  NSObject *v67;
  void *v68;
  id v69;
  id v70;
  void *v71;
  NSObject *v72;
  id v73;
  const char *v74;
  NSObject *v75;
  os_log_type_t v76;
  uint32_t v77;
  id v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v83;
  void *v84;
  id v85;
  void *context;
  std::string v87;
  std::string v88;
  void *__p[2];
  int64_t v90;
  id v91;
  uint8_t buf[4];
  const char *v93;
  __int16 v94;
  int v95;
  __int16 v96;
  _BYTE v97[34];
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v6 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v6)
      goto LABEL_10;
  }
  else
  {
    v6 = MEMORY[0x24BDACB70];
    v7 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = a2[3];
    v9 = *(_DWORD *)(a3 + 64);
    v10 = *(_QWORD *)(a1 + 72);
    v11 = *(_QWORD *)(a3 + 72);
    *(_DWORD *)buf = 136316418;
    v93 = "SensorKitWriter.mm";
    v94 = 1024;
    v95 = 249;
    v96 = 1024;
    *(_DWORD *)v97 = v8;
    *(_WORD *)&v97[4] = 1024;
    *(_DWORD *)&v97[6] = v9;
    *(_WORD *)&v97[10] = 2048;
    *(_QWORD *)&v97[12] = v10;
    *(_WORD *)&v97[20] = 2048;
    *(_QWORD *)&v97[22] = v11;
    _os_log_impl(&dword_216CFB000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d size: %u, frames: %u mSelf: %p, last batch: %lld", buf, 0x32u);
  }

LABEL_10:
  if (ADAM::isSpeechAnalysisEnabled(void)::once != -1)
    dispatch_once(&ADAM::isSpeechAnalysisEnabled(void)::once, &__block_literal_global_27);
  if (ADAM::isSpeechAnalysisEnabled(void)::ans)
  {
    v12 = *(_QWORD *)(a1 + 88);
    v13 = *(void **)(v12 + 24);
    if (v13)
    {
      if ((objc_msgSend(v13, "isMonitoring") & 1) != 0)
        goto LABEL_18;
      v12 = *(_QWORD *)(a1 + 88);
    }
    v14 = *(void **)(v12 + 32);
    if (v14 && objc_msgSend(v14, "isMonitoring"))
    {
LABEL_18:
      context = (void *)MEMORY[0x219A01060]();
      v15 = *(id *)(*(_QWORD *)(a1 + 88) + 8);
      if (ADAM::ADAMLogScope(void)::once != -1)
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
      if (ADAM::ADAMLogScope(void)::scope)
      {
        v16 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v16)
          goto LABEL_28;
      }
      else
      {
        v16 = MEMORY[0x24BDACB70];
        v18 = MEMORY[0x24BDACB70];
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v19 = *(_DWORD *)(a3 + 64);
        *(_DWORD *)buf = 136315650;
        v93 = "SensorKitWriter.mm";
        v94 = 1024;
        v95 = 111;
        v96 = 1024;
        *(_DWORD *)v97 = v19;
        _os_log_impl(&dword_216CFB000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Allocating AVAudioPCMBuffer of %d frames", buf, 0x18u);
      }

LABEL_28:
      v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1838]), "initWithPCMFormat:frameCapacity:", v15, *(unsigned int *)(a3 + 64));
      if (*a2)
      {
        v21 = 0;
        v22 = 0;
        do
        {
          memcpy(*(void **)(objc_msgSend(v20, "mutableAudioBufferList") + v21 * 4 + 16), *(const void **)&a2[v21 + 4], a2[v21 + 3]);
          v23 = a2[v21 + 3];
          *(_DWORD *)(objc_msgSend(v20, "mutableAudioBufferList") + v21 * 4 + 12) = v23;
          ++v22;
          v21 += 4;
        }
        while (v22 < *a2);
      }
      objc_msgSend(v20, "setFrameLength:", objc_msgSend(v20, "frameCapacity"));

      if (!v20)
      {
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        v17 = 1684108321;
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v27 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v27)
            goto LABEL_141;
        }
        else
        {
          v27 = MEMORY[0x24BDACB70];
          v49 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v93 = "SensorKitWriter.mm";
          v94 = 1024;
          v95 = 259;
          _os_log_impl(&dword_216CFB000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to create a AVAudioPCMBuffer", buf, 0x12u);
        }

        goto LABEL_141;
      }
      if (*(char *)(a1 + 39) < 0)
      {
        v26 = *(_BYTE **)(a1 + 16);
        v25 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        v25 = *(unsigned __int8 *)(a1 + 39);
        v26 = (_BYTE *)(a1 + 16);
      }
      if (v25 >= 0xF)
        v25 = 15;
      if (v25)
      {
        v28 = &v26[v25];
        v29 = v26;
        v30 = v28;
        do
        {
          if (*v29 == 84)
          {
            v31 = 1u;
            while (v31 != 15)
            {
              if (&v29[v31] == v28)
                goto LABEL_53;
              v32 = v29[v31];
              v33 = aTelephonyuplin[v31++];
              if (v32 != v33)
                goto LABEL_45;
            }
            v30 = v29;
          }
LABEL_45:
          ++v29;
        }
        while (v29 != v28);
LABEL_53:
        if (v30 != v28 && v30 == v26)
        {
          v34 = objc_msgSend(v20, "frameLength");
          objc_msgSend(v20, "format");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "sampleRate");
          v37 = v36;

          v38 = (double)v34 / v37;
          if (v38 <= 4.0)
          {
            {
              ADAM::get_log(void)::adam_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "adam");
            }
            v62 = ADAM::get_log(void)::adam_os_log;
            v17 = 0;
            if (!os_log_type_enabled((os_log_t)ADAM::get_log(void)::adam_os_log, OS_LOG_TYPE_DEFAULT))
              goto LABEL_141;
            *(_DWORD *)buf = 136316418;
            v93 = "SensorKitWriter.mm";
            v94 = 1024;
            v95 = 269;
            v96 = 1040;
            *(_DWORD *)v97 = 21;
            *(_WORD *)&v97[4] = 2080;
            *(_QWORD *)&v97[6] = "ADAM::SensorKitWriter]";
            *(_WORD *)&v97[14] = 2048;
            *(_QWORD *)&v97[16] = a1;
            *(_WORD *)&v97[24] = 2048;
            *(double *)&v97[26] = v38;
            _os_log_impl(&dword_216CFB000, v62, OS_LOG_TYPE_DEFAULT, "[%s:%-5d %.*s:%p] not sending telephony audio to Speech and SoundAnalysis due to length of audio : %f", buf, 0x36u);
            goto LABEL_140;
          }
        }
      }
      ADAM::Parameters::instance(v24);
      if (!ADAM::Parameters::GetParamValue<BOOL>(0xFu))
      {
LABEL_136:
        std::mutex::lock(&ADAM::Writer::getAsyncMutex(void)::sAsyncMutex);
        *(_BYTE *)(a1 + 81) = 1;
        std::mutex::unlock(&ADAM::Writer::getAsyncMutex(void)::sAsyncMutex);
        v79 = *(_QWORD *)(a1 + 88);
        v80 = *(void **)(v79 + 24);
        if (v80)
        {
          objc_msgSend(v80, "write:withMetadata:", v20, a3);
          v79 = *(_QWORD *)(a1 + 88);
        }
        v81 = *(void **)(v79 + 32);
        if (v81)
          objc_msgSend(v81, "write:withMetadata:", v20, a3);
LABEL_140:
        v17 = 0;
LABEL_141:

        objc_autoreleasePoolPop(context);
        return v17;
      }
      v39 = *(void **)(*(_QWORD *)(a1 + 88) + 8);
      if (*(char *)(a1 + 39) >= 0)
        v40 = *(unsigned __int8 *)(a1 + 39);
      else
        v40 = *(_QWORD *)(a1 + 24);
      v41 = &v88;
      std::string::basic_string[abi:ne180100]((uint64_t)&v88, v40 + 1);
      if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v41 = (std::string *)v88.__r_.__value_.__r.__words[0];
      if (v40)
      {
        if (*(char *)(a1 + 39) >= 0)
          v42 = (const void *)(a1 + 16);
        else
          v42 = *(const void **)(a1 + 16);
        memmove(v41, v42, v40);
      }
      *(_WORD *)((char *)&v41->__r_.__value_.__l.__data_ + v40) = 95;
      std::to_string(&v87, *(_DWORD *)(*(_QWORD *)(a1 + 88) + 40));
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = &v87;
      else
        v43 = (std::string *)v87.__r_.__value_.__r.__words[0];
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      else
        size = v87.__r_.__value_.__l.__size_;
      v45 = std::string::append(&v88, (const std::string::value_type *)v43, size);
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v90 = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      if (v90 >= 0)
        v47 = __p;
      else
        v47 = (void **)__p[0];
      v85 = v39;
      if (ADAM::isProcessCorespeechd(void)::once != -1)
        dispatch_once(&ADAM::isProcessCorespeechd(void)::once, &__block_literal_global_39);
      if (ADAM::isProcessCorespeechd(void)::isCorespeechd)
      {
        v48 = objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithFormat:", CFSTR("/private/var/mobile/Documents/Logs/CoreSpeech/ADAM-%s.caf"), v47);
      }
      else
      {
        v50 = objc_alloc(MEMORY[0x24BDD17C8]);
        NSTemporaryDirectory();
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = objc_msgSend(v50, "initWithFormat:", CFSTR("%@ADAM-%s.caf"), v51, v47);

      }
      v84 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCF48]), "initWithString:", v48);
      v52 = (void *)MEMORY[0x24BDBCED8];
      v83 = (void *)v48;
      objc_msgSend(v85, "settings");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v52, "dictionaryWithDictionary:", v53);
      v54 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v54, "setObject:forKey:", &unk_24D619520, *MEMORY[0x24BDB1588]);
      v55 = objc_alloc(MEMORY[0x24BDB1810]);
      v56 = objc_msgSend(v85, "commonFormat");
      v91 = 0;
      v57 = (void *)objc_msgSend(v55, "initForWriting:settings:commonFormat:interleaved:error:", v84, v54, v56, 1, &v91);
      v58 = v91;
      if (v58)
      {
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v59 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v59)
            goto LABEL_108;
        }
        else
        {
          v59 = (id)MEMORY[0x24BDACB70];
          v63 = MEMORY[0x24BDACB70];
        }
        v64 = v59;
        if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(v85, "isInterleaved"));
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136316162;
          v93 = "SensorKitWriter.mm";
          v94 = 1024;
          v95 = 73;
          v96 = 2112;
          *(_QWORD *)v97 = v58;
          *(_WORD *)&v97[8] = 2112;
          *(_QWORD *)&v97[10] = v54;
          *(_WORD *)&v97[18] = 2112;
          *(_QWORD *)&v97[20] = v65;
          _os_log_impl(&dword_216CFB000, v64, OS_LOG_TYPE_ERROR, "%25s:%-5d failed to initialize output file: %@, settings: %@, format interleaved: %@", buf, 0x30u);

        }
        v59 = 0;
LABEL_108:

        if (SHIBYTE(v90) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v87.__r_.__value_.__l.__data_);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        ++*(_DWORD *)(*(_QWORD *)(a1 + 88) + 40);
        v69 = v59;
        v70 = v20;
        if (!v69)
          goto LABEL_135;
        __p[0] = 0;
        objc_msgSend(v69, "writeFromBuffer:error:", v70, __p);
        v71 = __p[0];
        if (v71)
        {
          if (ADAM::ADAMLogScope(void)::once != -1)
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
          if (ADAM::ADAMLogScope(void)::scope)
          {
            v72 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v72)
              goto LABEL_134;
          }
          else
          {
            v72 = MEMORY[0x24BDACB70];
            v73 = MEMORY[0x24BDACB70];
          }
          if (!os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
          {
LABEL_133:

LABEL_134:
LABEL_135:

            goto LABEL_136;
          }
          *(_DWORD *)buf = 136315650;
          v93 = "SensorKitWriter.mm";
          v94 = 1024;
          v95 = 99;
          v96 = 2112;
          *(_QWORD *)v97 = v71;
          v74 = "%25s:%-5d failed to write audio buffer: %@";
          v75 = v72;
          v76 = OS_LOG_TYPE_ERROR;
          v77 = 28;
        }
        else
        {
          if (ADAM::ADAMLogScope(void)::once != -1)
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
          if (ADAM::ADAMLogScope(void)::scope)
          {
            v72 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v72)
              goto LABEL_134;
          }
          else
          {
            v72 = MEMORY[0x24BDACB70];
            v78 = MEMORY[0x24BDACB70];
          }
          if (!os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
            goto LABEL_133;
          *(_DWORD *)buf = 136315906;
          v93 = "SensorKitWriter.mm";
          v94 = 1024;
          v95 = 103;
          v96 = 2112;
          *(_QWORD *)v97 = v70;
          *(_WORD *)&v97[8] = 2112;
          *(_QWORD *)&v97[10] = v69;
          v74 = "%25s:%-5d Wrote audio buffer %@ to file %@";
          v75 = v72;
          v76 = OS_LOG_TYPE_INFO;
          v77 = 38;
        }
        _os_log_impl(&dword_216CFB000, v75, v76, v74, buf, v77);
        goto LABEL_133;
      }
      if (ADAM::ADAMLogScope(void)::once != -1)
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
      if (ADAM::ADAMLogScope(void)::scope)
      {
        v60 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v60)
        {
LABEL_107:
          v59 = v57;
          goto LABEL_108;
        }
      }
      else
      {
        v60 = (id)MEMORY[0x24BDACB70];
        v66 = MEMORY[0x24BDACB70];
      }
      v67 = v60;
      if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(v85, "isInterleaved"));
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136315906;
        v93 = "SensorKitWriter.mm";
        v94 = 1024;
        v95 = 79;
        v96 = 2112;
        *(_QWORD *)v97 = v83;
        *(_WORD *)&v97[8] = 2112;
        *(_QWORD *)&v97[10] = v68;
        _os_log_impl(&dword_216CFB000, v67, OS_LOG_TYPE_INFO, "%25s:%-5d Created output file: %@, format interleaved: %@", buf, 0x26u);

      }
      goto LABEL_107;
    }
  }
  return 0;
}

void sub_216D27AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  if (a32 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);

  _Unwind_Resume(a1);
}

uint64_t ADAM::SensorKitWriter::isEnabled(ADAM::SensorKitWriter *this)
{
  uint64_t v2;
  void *v3;
  uint64_t result;

  v2 = *((_QWORD *)this + 11);
  v3 = *(void **)(v2 + 24);
  if (v3)
  {
    if ((objc_msgSend(v3, "isMonitoring") & 1) != 0)
      return 1;
    v2 = *((_QWORD *)this + 11);
  }
  result = *(_QWORD *)(v2 + 32);
  if (result)
    return objc_msgSend((id)result, "isMonitoring");
  return result;
}

void ADAM::SensorKitWriter::~SensorKitWriter(ADAM::SensorKitWriter *this)
{
  ADAM::SensorKitWriter::~SensorKitWriter(this);
  JUMPOUT(0x219A00DF0);
}

{
  NSObject *v2;
  id v3;
  _QWORD *v4;
  id *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  ADAM::SensorKitWriter *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24D616158;
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v2 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v2)
      goto LABEL_12;
  }
  else
  {
    v2 = MEMORY[0x24BDACB70];
    v3 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)((char *)this + 16);
    if (*((char *)this + 39) < 0)
      v4 = (_QWORD *)*v4;
    v6 = 136315906;
    v7 = "SensorKitWriter.mm";
    v8 = 1024;
    v9 = 239;
    v10 = 2080;
    v11 = v4;
    v12 = 2048;
    v13 = this;
    _os_log_impl(&dword_216CFB000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SensorKit Writer [%s](%p) destroyed...", (uint8_t *)&v6, 0x26u);
  }

LABEL_12:
  std::mutex::~mutex((std::mutex *)((char *)this + 96));
  v5 = (id *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
    std::default_delete<ADAM::SensorKitWriter::SensorKitWriterInternalState>::operator()[abi:ne180100](v5);
  ADAM::Writer::~Writer(this);
}

void std::default_delete<ADAM::SensorKitWriter::SensorKitWriterInternalState>::operator()[abi:ne180100](id *a1)
{

  JUMPOUT(0x219A00DF0);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void ___ZN4ADAM15SensorKitWriterC2EyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERK27AudioStreamBasicDescription_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  id v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v5 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v5)
      goto LABEL_10;
  }
  else
  {
    v5 = MEMORY[0x24BDACB70];
    v6 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(v4 + 72);
    v8 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 32);
    v13 = 136316418;
    v14 = "SensorKitWriter.mm";
    v15 = 1024;
    v16 = 183;
    v17 = 2112;
    v18 = v3;
    v19 = 2048;
    v20 = v7;
    v21 = 2048;
    v22 = v4;
    v23 = 2048;
    v24 = v8;
    _os_log_impl(&dword_216CFB000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SoundAnalysis writer completed with err: %@ mSelf: %p this: %p, speech writer: %p", (uint8_t *)&v13, 0x3Au);
  }

LABEL_10:
  v9 = *(void **)(*(_QWORD *)(v4 + 88) + 32);
  if (v9 && !objc_msgSend(v9, "isComplete"))
    goto LABEL_24;
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (!ADAM::ADAMLogScope(void)::scope)
  {
    v10 = MEMORY[0x24BDACB70];
    v11 = MEMORY[0x24BDACB70];
    goto LABEL_18;
  }
  v10 = *(id *)ADAM::ADAMLogScope(void)::scope;
  if (v10)
  {
LABEL_18:
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 136315394;
      v14 = "SensorKitWriter.mm";
      v15 = 1024;
      v16 = 188;
      _os_log_impl(&dword_216CFB000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d * Sound Analysis completion callback terminating SK writer", (uint8_t *)&v13, 0x12u);
    }

  }
  std::mutex::lock(&ADAM::Writer::getAsyncMutex(void)::sAsyncMutex);
  *(_BYTE *)(v4 + 81) = 0;
  v12 = *(_QWORD *)(v4 + 72);
  if (v12)
  {
    *(_QWORD *)(v4 + 72) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  }
  std::mutex::unlock(&ADAM::Writer::getAsyncMutex(void)::sAsyncMutex);
LABEL_24:

}

void sub_216D28108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN4ADAM15SensorKitWriterC2EyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERK27AudioStreamBasicDescription_block_invoke_6(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  id v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v5 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v5)
      goto LABEL_10;
  }
  else
  {
    v5 = MEMORY[0x24BDACB70];
    v6 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(v4 + 72);
    v8 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 24);
    v13 = 136316418;
    v14 = "SensorKitWriter.mm";
    v15 = 1024;
    v16 = 210;
    v17 = 2112;
    v18 = v3;
    v19 = 2048;
    v20 = v7;
    v21 = 2048;
    v22 = v4;
    v23 = 2048;
    v24 = v8;
    _os_log_impl(&dword_216CFB000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Speech Analysis writer completed: %@ mSelf: %p, this: %p, speech writer: %p", (uint8_t *)&v13, 0x3Au);
  }

LABEL_10:
  v9 = *(void **)(*(_QWORD *)(v4 + 88) + 24);
  if (v9 && !objc_msgSend(v9, "isComplete"))
    goto LABEL_24;
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (!ADAM::ADAMLogScope(void)::scope)
  {
    v10 = MEMORY[0x24BDACB70];
    v11 = MEMORY[0x24BDACB70];
    goto LABEL_18;
  }
  v10 = *(id *)ADAM::ADAMLogScope(void)::scope;
  if (v10)
  {
LABEL_18:
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 136315394;
      v14 = "SensorKitWriter.mm";
      v15 = 1024;
      v16 = 215;
      _os_log_impl(&dword_216CFB000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d * Speech Analysis completion callback terminating SK writer", (uint8_t *)&v13, 0x12u);
    }

  }
  std::mutex::lock(&ADAM::Writer::getAsyncMutex(void)::sAsyncMutex);
  *(_BYTE *)(v4 + 81) = 0;
  v12 = *(_QWORD *)(v4 + 72);
  if (v12)
  {
    *(_QWORD *)(v4 + 72) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  }
  std::mutex::unlock(&ADAM::Writer::getAsyncMutex(void)::sAsyncMutex);
LABEL_24:

}

void sub_216D28370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    ExtendedAudioBufferList_Destroy();
  return a1;
}

OpaqueAudioComponentInstance *std::unique_ptr<OpaqueAudioComponentInstance,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioComponentInstance*,&(AudioComponentInstanceDispose)>>::reset[abi:ne180100](OpaqueAudioComponentInstance **a1, OpaqueAudioComponentInstance *a2)
{
  OpaqueAudioComponentInstance *result;

  result = *a1;
  *a1 = a2;
  if (result)
    return (OpaqueAudioComponentInstance *)AudioComponentInstanceDispose(result);
  return result;
}

__objc2_class *rtaid::get_log(rtaid *this)
{
  unsigned __int8 v1;
  __objc2_class **p_superclass;
  int v4;

  p_superclass = ADAMSpeechAnalysisWriter.superclass;
  if ((v1 & 1) == 0)
  {
    p_superclass = (__objc2_class **)(ADAMSpeechAnalysisWriter + 8);
    if (v4)
    {
      rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      p_superclass = (__objc2_class **)(ADAMSpeechAnalysisWriter + 8);
    }
  }
  return p_superclass[222];
}

void sub_216D28854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216D28A00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN42AudioIssueDetectorManagerCallStateReporter17InternalCallStateC2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1;
  RTAIDCallObserver *v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = [RTAIDCallObserver alloc];
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 3221225472;
  v5[2] = ___ZN42AudioIssueDetectorManagerCallStateReporter17InternalCallStateC2Ev_block_invoke_2;
  v5[3] = &__block_descriptor_40_e8_v12__0B8l;
  v5[4] = v1;
  v3 = -[RTAIDCallObserver initWithCallReporterBlock:](v2, "initWithCallReporterBlock:", v5);
  v4 = *(void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = v3;

}

uint64_t ___ZN42AudioIssueDetectorManagerCallStateReporter17InternalCallStateC2Ev_block_invoke_2(uint64_t result, char a2)
{
  **(_BYTE **)(result + 32) = a2;
  return result;
}

uint64_t *std::unique_ptr<AudioIssueDetectorManagerCallStateReporter::InternalCallState>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    JUMPOUT(0x219A00DF0);
  }
  return result;
}

void sub_216D29178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_216D29258(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216D296A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_216D299D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216D29B50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216D29DF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_216D2A288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_216D2A434(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216D2A7A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216D2AA14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216D2AD60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_216D2B008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void ADAM::Analyzer::PCMBuffer::~PCMBuffer(ADAM::Analyzer::PCMBuffer *this, AudioBufferList **a2)
{
  unsigned int **v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D616270;
  v3 = *((_QWORD *)this + 15);
  v2 = (unsigned int **)((char *)this + 120);
  if (v3)
    ADAM::releaseAudioBufferList(v2, a2);
}

{
  unsigned int **v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D616270;
  v3 = *((_QWORD *)this + 15);
  v2 = (unsigned int **)((char *)this + 120);
  if (v3)
    ADAM::releaseAudioBufferList(v2, a2);
  JUMPOUT(0x219A00DF0);
}

void ADAM::Analyzer::PCMBuffer::flush(ADAM::Analyzer::PCMBuffer *this)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v2 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v2)
      goto LABEL_10;
  }
  else
  {
    v2 = MEMORY[0x24BDACB70];
    v3 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v4 = *((_QWORD *)this + 23);
    v7 = 136315650;
    v8 = "PCMBuffer.cpp";
    v9 = 1024;
    v10 = 161;
    v11 = 2048;
    v12 = v4;
    _os_log_impl(&dword_216CFB000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d Session %llx: flushing PCM Buffer", (uint8_t *)&v7, 0x1Cu);
  }

LABEL_10:
  if (!*((_DWORD *)this + 24))
    return;
  *((_QWORD *)this + 3) = *((_QWORD *)this + 15);
  *((_QWORD *)this + 13) = 1;
  *((_BYTE *)this + 112) = 1;
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v5 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v5)
      return;
  }
  else
  {
    v5 = MEMORY[0x24BDACB70];
    v6 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v7 = 136315394;
    v8 = "PCMBuffer.cpp";
    v9 = 1024;
    v10 = 168;
    _os_log_impl(&dword_216CFB000, v5, OS_LOG_TYPE_INFO, "%25s:%-5d PCM Buffer will be flushed", (uint8_t *)&v7, 0x12u);
  }

}

void ADAM::Analyzer::PCMBuffer::configure(ADAM::Analyzer::PCMBuffer *this, unint64_t a2, const ADAM::BufferNodeDescriptorBase *a3)
{
  ADAM::AudioDataAnalysisManager *v6;
  NSObject *v7;
  id v8;
  ADAM::Parameters *ClientSessionMananger;
  int v10;
  int Param;
  BOOL v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  double v16;
  __int128 v17;
  __int128 v18;
  unsigned int v19;
  NSObject *v20;
  id v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  _BYTE v31[10];
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v6 = (ADAM::AudioDataAnalysisManager *)*(id *)ADAM::ADAMLogScope(void)::scope;
    v7 = v6;
    if (!v6)
      goto LABEL_10;
  }
  else
  {
    v7 = MEMORY[0x24BDACB70];
    v8 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v26 = 136315650;
    v27 = "PCMBuffer.cpp";
    v28 = 1024;
    v29 = 118;
    v30 = 2048;
    *(_QWORD *)v31 = a2;
    _os_log_impl(&dword_216CFB000, v7, OS_LOG_TYPE_INFO, "%25s:%-5d Session %llx: Configuring PCM Buffer", (uint8_t *)&v26, 0x1Cu);
  }

LABEL_10:
  ADAM::AudioDataAnalysisManager::instance(v6);
  ClientSessionMananger = (ADAM::Parameters *)ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, HIDWORD(a2));
  if (ClientSessionMananger)
  {
    v10 = *(unsigned __int8 *)ClientSessionMananger;
    ADAM::Parameters::instance(ClientSessionMananger);
    if (v10 == 3)
    {
      Param = (int)ADAM::Parameters::GetParamValue<float>(0xDu);
      if (Param <= 1)
        Param = 1;
      v12 = Param >= 0xF0;
      v13 = 240;
      goto LABEL_19;
    }
  }
  else
  {
    ADAM::Parameters::instance(0);
  }
  Param = (int)ADAM::Parameters::GetParamValue<float>(0xEu);
  if (Param <= 1)
    Param = 1;
  v12 = Param >= 0x3C;
  v13 = 60;
LABEL_19:
  if (v12)
    v14 = v13;
  else
    v14 = Param;
  v16 = *((double *)a3 + 6);
  v15 = (unsigned int *)((char *)a3 + 48);
  *((_DWORD *)this + 43) = ((double)v15[10] + (double)v14 * v16) / v15[10];
  v18 = *(_OWORD *)v15;
  v17 = *((_OWORD *)v15 + 1);
  *((_QWORD *)this + 20) = *((_QWORD *)v15 + 4);
  *((_OWORD *)this + 8) = v18;
  *((_OWORD *)this + 9) = v17;
  v19 = v15[10];
  *((_DWORD *)this + 42) = (1.0 - ((double)v19 - (double)v14 * *((double *)this + 16)));
  *((_DWORD *)this + 44) = v19;
  *((_QWORD *)this + 23) = a2;
  *((_BYTE *)this + 192) = 1;
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v20 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v20)
      return;
  }
  else
  {
    v20 = MEMORY[0x24BDACB70];
    v21 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    v23 = *((_DWORD *)this + 43);
    v22 = *((_DWORD *)this + 44);
    v24 = *((_DWORD *)this + 42);
    v25 = *(_QWORD *)v15;
    v26 = 136316674;
    v27 = "PCMBuffer.cpp";
    v28 = 1024;
    v29 = 154;
    v30 = 1024;
    *(_DWORD *)v31 = v14;
    *(_WORD *)&v31[4] = 1024;
    *(_DWORD *)&v31[6] = v23;
    v32 = 1024;
    v33 = v22;
    v34 = 1024;
    v35 = v24;
    v36 = 2048;
    v37 = v25;
    _os_log_impl(&dword_216CFB000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PCM Buffer Configured: duration: %us numSlots: %u, maxFramesPerBlock %u, maxFrames: %u, sample rate: %.2lf", (uint8_t *)&v26, 0x34u);
  }

}

uint64_t ADAM::Analyzer::PCMBuffer::analyze(ADAM *this, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  int **v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  NSObject *v15;
  uint64_t v16;
  int *v17;
  int v18;
  unsigned int v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  NSObject *v24;
  NSObject *v25;
  int v26;
  id v27;
  uint64_t v28;
  const char *v29;
  id v30;
  int v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  id v37;
  int v38;
  int v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  int v43;
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  _BYTE v48[20];
  _QWORD v49[3];

  v49[2] = *MEMORY[0x24BDAC8D0];
  v8 = (int **)((char *)this + 120);
  if (*((_QWORD *)this + 15))
    goto LABEL_2;
  v16 = 560100710;
  if (!*((_BYTE *)this + 192))
    return v16;
  ADAM::allocAudioBufferList((ADAM *)((char *)this + 120), (AudioBufferList **)this + 16, (const AudioStreamBasicDescription *)*((unsigned int *)this + 44), *((_DWORD *)this + 43));
  v21 = *((_QWORD *)this + 15);
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (v21)
  {
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v22 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v22)
        goto LABEL_2;
    }
    else
    {
      v22 = MEMORY[0x24BDACB70];
      v30 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v31 = **v8;
      v32 = *((_QWORD *)*v8 + 2);
      v43 = 136315906;
      v44 = "PCMBuffer.cpp";
      v45 = 1024;
      v46 = 111;
      v47 = 1024;
      *(_DWORD *)v48 = v31;
      *(_WORD *)&v48[4] = 2048;
      *(_QWORD *)&v48[6] = v32;
      _os_log_impl(&dword_216CFB000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PCMBuffer allocated anumBuffers: %u, buffer location: %p", (uint8_t *)&v43, 0x22u);
    }

LABEL_2:
    if (*((_BYTE *)this + 192) && (v9 = *v8) != 0)
    {
      if (*((_QWORD *)this + 23) == a2)
      {
        if (*v9 == *a3)
        {
          if (*v9)
          {
            v10 = 0;
            v11 = 0;
            do
            {
              memcpy((void *)(*(_QWORD *)&v9[v10 + 4] + v9[v10 + 3]), *(const void **)&a3[v10 + 4], a3[v10 + 3]);
              v9 = *v8;
              (*v8)[v10 + 3] += a3[v10 + 3];
              ++v11;
              v10 += 4;
            }
            while (v11 < *v9);
          }
          v12 = *((_DWORD *)this + 24) + a3[3] / *((_DWORD *)this + 38);
          *((_DWORD *)this + 24) = v12;
          if (!*((_QWORD *)this + 5))
            *((_QWORD *)this + 5) = *(_QWORD *)(a4 + 8);
          v13 = ADAM::Analyzer::PCMBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
          v14 = ++ADAM::Analyzer::PCMBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
          if (v13)
            goto LABEL_72;
          if (ADAM::ADAMLogScope(void)::once != -1)
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
          if (ADAM::ADAMLogScope(void)::scope)
          {
            v15 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v15)
            {
LABEL_71:
              v14 = ADAM::Analyzer::PCMBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
              v12 = *((_DWORD *)this + 24);
LABEL_72:
              v16 = 0;
              if (v14 > 0x63)
                v14 = 0;
              ADAM::Analyzer::PCMBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt = v14;
              if (v12 >= *((_DWORD *)this + 42))
              {
                v16 = 0;
                *((_QWORD *)this + 3) = *((_QWORD *)this + 15);
                *((_BYTE *)this + 112) = 1;
              }
              return v16;
            }
          }
          else
          {
            v15 = MEMORY[0x24BDACB70];
            v37 = MEMORY[0x24BDACB70];
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            v38 = *(_DWORD *)(*((_QWORD *)this + 15) + 12);
            v39 = *((_DWORD *)this + 24);
            v40 = *((_QWORD *)this + 5);
            v43 = 136316418;
            v44 = "PCMBuffer.cpp";
            v45 = 1024;
            v46 = 59;
            v47 = 2048;
            *(_QWORD *)v48 = a2;
            *(_WORD *)&v48[8] = 1024;
            *(_DWORD *)&v48[10] = v38;
            *(_WORD *)&v48[14] = 1024;
            *(_DWORD *)&v48[16] = v39;
            LOWORD(v49[0]) = 2048;
            *(_QWORD *)((char *)v49 + 2) = v40;
            _os_log_impl(&dword_216CFB000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d nodeID: %llx size: %u total frames: %u timestamp: %llu", (uint8_t *)&v43, 0x32u);
          }

          goto LABEL_71;
        }
        v16 = 1718444833;
        v17 = &ADAM::Analyzer::PCMBuffer::verifyInvariants(unsigned long long,AudioBufferList const*)const::errCnt;
        v26 = ADAM::Analyzer::PCMBuffer::verifyInvariants(unsigned long long,AudioBufferList const*)const::errCnt;
        v19 = ++ADAM::Analyzer::PCMBuffer::verifyInvariants(unsigned long long,AudioBufferList const*)const::errCnt;
        if (v26)
          goto LABEL_63;
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v20 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v20)
            goto LABEL_62;
        }
        else
        {
          v20 = MEMORY[0x24BDACB70];
          v41 = MEMORY[0x24BDACB70];
        }
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          goto LABEL_49;
        v42 = *((_QWORD *)this + 23);
        v43 = 136315650;
        v44 = "PCMBuffer.cpp";
        v45 = 1024;
        v46 = 91;
        v47 = 2048;
        *(_QWORD *)v48 = v42;
        v29 = "%25s:%-5d %llx: num buffers mismatch";
        goto LABEL_48;
      }
      v16 = 561017453;
      v17 = &ADAM::Analyzer::PCMBuffer::verifyInvariants(unsigned long long,AudioBufferList const*)const::errCnt;
      v23 = ADAM::Analyzer::PCMBuffer::verifyInvariants(unsigned long long,AudioBufferList const*)const::errCnt;
      v19 = ++ADAM::Analyzer::PCMBuffer::verifyInvariants(unsigned long long,AudioBufferList const*)const::errCnt;
      if (!v23)
      {
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v24 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v24)
            goto LABEL_62;
        }
        else
        {
          v24 = MEMORY[0x24BDACB70];
          v34 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          v35 = *((_QWORD *)this + 23);
          v43 = 136316162;
          v44 = "PCMBuffer.cpp";
          v45 = 1024;
          v46 = 83;
          v47 = 2048;
          *(_QWORD *)v48 = v35;
          *(_WORD *)&v48[8] = 2048;
          *(_QWORD *)&v48[10] = a2;
          *(_WORD *)&v48[18] = 2048;
          v49[0] = v8;
          _os_log_impl(&dword_216CFB000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Different nodeIDs not supported by PCM buffer: %llx(c), %llx(n) ABL: %p", (uint8_t *)&v43, 0x30u);
        }

        goto LABEL_62;
      }
    }
    else
    {
      v16 = 560162407;
      v17 = &ADAM::Analyzer::PCMBuffer::verifyInvariants(unsigned long long,AudioBufferList const*)const::errCnt;
      v18 = ADAM::Analyzer::PCMBuffer::verifyInvariants(unsigned long long,AudioBufferList const*)const::errCnt;
      v19 = ++ADAM::Analyzer::PCMBuffer::verifyInvariants(unsigned long long,AudioBufferList const*)const::errCnt;
      if (!v18)
      {
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v20 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v20)
            goto LABEL_62;
        }
        else
        {
          v20 = MEMORY[0x24BDACB70];
          v27 = MEMORY[0x24BDACB70];
        }
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
LABEL_49:

LABEL_62:
          v19 = *v17;
          goto LABEL_63;
        }
        v28 = *((_QWORD *)this + 23);
        v43 = 136315650;
        v44 = "PCMBuffer.cpp";
        v45 = 1024;
        v46 = 75;
        v47 = 2048;
        *(_QWORD *)v48 = v28;
        v29 = "%25s:%-5d %llx: PCM Buffer not configured";
LABEL_48:
        _os_log_impl(&dword_216CFB000, v20, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&v43, 0x1Cu);
        goto LABEL_49;
      }
    }
LABEL_63:
    if (v19 > 0x3E7)
      v19 = 0;
    *v17 = v19;
    return v16;
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v25 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v25)
      return v16;
  }
  else
  {
    v25 = MEMORY[0x24BDACB70];
    v33 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    v43 = 136315394;
    v44 = "PCMBuffer.cpp";
    v45 = 1024;
    v46 = 107;
    _os_log_impl(&dword_216CFB000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d PCMBuffer failed to allocate buffer", (uint8_t *)&v43, 0x12u);
  }

  return v16;
}

double ADAM::Analyzer::PCMBuffer::reset(ADAM::Analyzer::PCMBuffer *this)
{
  unsigned int *v1;
  uint64_t v2;
  _DWORD *v3;
  double result;

  v1 = (unsigned int *)*((_QWORD *)this + 15);
  v2 = *v1;
  if ((_DWORD)v2)
  {
    v3 = v1 + 3;
    do
    {
      *v3 = 0;
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  *((_BYTE *)this + 112) = 0;
  result = 0.0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  return result;
}

double ADAM::Analyzer::PCMBuffer::hardReset(ADAM::Analyzer::PCMBuffer *this)
{
  AudioBufferList **v2;
  NSObject *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v3 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v3)
      goto LABEL_10;
  }
  else
  {
    v3 = MEMORY[0x24BDACB70];
    v4 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 23);
    v8 = 136315650;
    v9 = "PCMBuffer.cpp";
    v10 = 1024;
    v11 = 187;
    v12 = 2048;
    v13 = v5;
    _os_log_impl(&dword_216CFB000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d hard reset pcm buffer for session %llx", (uint8_t *)&v8, 0x1Cu);
  }

LABEL_10:
  v6 = *((_QWORD *)this + 15);
  *((_BYTE *)this + 112) = 0;
  if (v6)
    ADAM::releaseAudioBufferList((unsigned int **)this + 15, v2);
  *((_QWORD *)this + 15) = 0;
  strcpy((char *)this + 184, "don!dis!");
  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 97) = 0u;
  return result;
}

void ADAM::Analyzer::LoudnessAnalyzer::~LoudnessAnalyzer(ADAM::Analyzer::LoudnessAnalyzer *this)
{
  JUMPOUT(0x219A00DF0);
}

void ADAM::Analyzer::LoudnessAnalyzer::flush(ADAM::Analyzer::LoudnessAnalyzer *this)
{
  NSObject *v2;
  id v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*((double *)this + 18) > 0.0)
  {
    ADAM::Analyzer::LoudnessAnalyzer::popDose(this);
    *((_BYTE *)this + 112) = 1;
    *((_QWORD *)this + 13) = 1;
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v2 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v2)
        return;
    }
    else
    {
      v2 = MEMORY[0x24BDACB70];
      v3 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v4 = 136315394;
      v5 = "LoudnessAnalyzer.cpp";
      v6 = 1024;
      v7 = 90;
      _os_log_impl(&dword_216CFB000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d LoudnessAnalyzer needs to be flushed", (uint8_t *)&v4, 0x12u);
    }

  }
}

uint64_t ADAM::Analyzer::LoudnessAnalyzer::analyze(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  BOOL v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  unsigned int v9;
  NSObject *v10;
  id v11;
  double v12;
  double v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  id v23;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    v8 = ADAM::Analyzer::LoudnessAnalyzer::isDataValid(ADAM::UnionDataPtr)const::errCnt;
    v9 = ++ADAM::Analyzer::LoudnessAnalyzer::isDataValid(ADAM::UnionDataPtr)const::errCnt;
    if (v8)
    {
LABEL_31:
      v6 = 1684108321;
      if (v9 > 0xBB7)
        v9 = 0;
      ADAM::Analyzer::LoudnessAnalyzer::isDataValid(ADAM::UnionDataPtr)const::errCnt = v9;
      return v6;
    }
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v10 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v10)
      {
LABEL_30:
        v9 = ADAM::Analyzer::LoudnessAnalyzer::isDataValid(ADAM::UnionDataPtr)const::errCnt;
        goto LABEL_31;
      }
    }
    else
    {
      v10 = MEMORY[0x24BDACB70];
      v23 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v25 = 136315394;
      v26 = "LoudnessAnalyzer.cpp";
      v27 = 1024;
      v28 = 114;
      _os_log_impl(&dword_216CFB000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d HAE SPL data ptr is null? (sampled every 3k)", (uint8_t *)&v25, 0x12u);
    }

    goto LABEL_30;
  }
  v5 = *(float *)a3 >= 0.0 && *(float *)a3 < 130.0;
  if (v5 && *(float *)(a3 + 16) >= 0.0)
  {
    *(_OWORD *)(a1 + 32) = *a4;
    v15 = a4[1];
    v16 = a4[2];
    v17 = a4[4];
    *(_OWORD *)(a1 + 80) = a4[3];
    *(_OWORD *)(a1 + 96) = v17;
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 64) = v16;
    *(double *)&v15 = *(float *)a3;
    v18 = *(float *)(a3 + 16);
    *(double *)(a1 + 144) = *(double *)(a1 + 144) + v18;
    *(double *)(a1 + 136) = *(double *)(a1 + 136) + __exp10(*(double *)&v15 * 0.1) * v18;
    v19 = *(float *)(a3 + 4);
    v20 = *(float *)(a3 + 16);
    *(double *)(a1 + 160) = *(double *)(a1 + 160) + v20;
    *(double *)(a1 + 152) = *(double *)(a1 + 152) + __exp10(v19 * 0.1) * v20;
    v21 = *(float *)(a3 + 8);
    v22 = *(float *)(a3 + 16);
    *(double *)(a1 + 176) = *(double *)(a1 + 176) + v22;
    *(double *)(a1 + 168) = *(double *)(a1 + 168) + __exp10(v21 * 0.1) * v22;
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a3 + 12);
    if (*(double *)(a1 + 144) >= *(double *)(a1 + 184))
    {
      ADAM::Analyzer::LoudnessAnalyzer::popDose((ADAM::Analyzer::LoudnessAnalyzer *)a1);
      v6 = 0;
      *(_BYTE *)(a1 + 112) = 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    v6 = 1684108321;
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v7 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v7)
        return v6;
    }
    else
    {
      v7 = MEMORY[0x24BDACB70];
      v11 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v12 = *(float *)a3;
      v13 = *(float *)(a3 + 16);
      v25 = 136315906;
      v26 = "LoudnessAnalyzer.cpp";
      v27 = 1024;
      v28 = 124;
      v29 = 2048;
      v30 = v12;
      v31 = 2048;
      v32 = v13;
      _os_log_impl(&dword_216CFB000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid HAE data { dBA: %.2f, duration: %.2f }", (uint8_t *)&v25, 0x26u);
    }

  }
  return v6;
}

double ADAM::Analyzer::LoudnessAnalyzer::reset(ADAM::Analyzer::LoudnessAnalyzer *this)
{
  double result;

  *((_BYTE *)this + 112) = 0;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  *(_OWORD *)((char *)this + 116) = 0u;
  *(_OWORD *)((char *)this + 132) = 0u;
  *(_OWORD *)((char *)this + 148) = 0u;
  *(_OWORD *)((char *)this + 164) = 0u;
  *((_DWORD *)this + 45) = 0;
  return result;
}

uint64_t ADAM::Analyzer::LoudnessAnalyzer::hardReset(ADAM::Analyzer::LoudnessAnalyzer *this)
{
  return (*(uint64_t (**)(ADAM::Analyzer::LoudnessAnalyzer *))(*(_QWORD *)this + 40))(this);
}

float ADAM::Analyzer::LoudnessAnalyzer::popDose(ADAM::Analyzer::LoudnessAnalyzer *this)
{
  long double v2;
  long double v3;
  double v4;
  long double v5;
  float result;

  v2 = log(*((double *)this + 17) / *((double *)this + 18));
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *(float *)&v2 = v2 * 10.0 / 2.30258509;
  *((_DWORD *)this + 29) = LODWORD(v2);
  v3 = log(*((double *)this + 19) / *((double *)this + 20));
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *(float *)&v3 = v3 * 10.0 / 2.30258509;
  *((_DWORD *)this + 30) = LODWORD(v3);
  v4 = *((double *)this + 22);
  v5 = log(*((double *)this + 21) / v4);
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *(float *)&v5 = v5 * 10.0 / 2.30258509;
  *((_DWORD *)this + 31) = LODWORD(v5);
  result = v4;
  *((float *)this + 33) = result;
  return result;
}

float ADAM::Parameters::GetParamValue<float>(unsigned int a1)
{
  uint64_t (**v2)(uint64_t, _QWORD, _QWORD, _QWORD, void *);
  void *exception;
  __n128 v5;
  std::string v6;
  std::string v7;

  if (a1 >= (unint64_t)((qword_253D975B0 - ADAM::Parameters::instance(void)::gParams) >> 4))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::to_string(&v6, a1);
    v5 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v7, "unknown ADAMParameterType ", &v6);
    MEMORY[0x219A00AD8](exception, &v7, v5);
  }
  v2 = std::any_cast[abi:ne180100]<float>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*(_QWORD *)(ADAM::Parameters::instance(void)::gParams + 16 * a1) + 16));
  if (!v2)
    std::__throw_bad_any_cast[abi:ne180100]();
  return *(float *)v2;
}

void sub_216D2C430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;
  uint64_t v22;

  if (*(char *)(v22 - 33) < 0)
    operator delete(*(void **)(v22 - 56));
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void sub_216D2C5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  int v26;
  void *v27;
  uint64_t v28;

  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v26 & 1) == 0)
    {
LABEL_12:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v27);
  goto LABEL_12;
}

void sub_216D2C6DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);
  __cxa_free_exception(v14);
  __cxa_end_catch();
  JUMPOUT(0x216D2C704);
}

uint64_t (**std::any_cast[abi:ne180100]<float>(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<float>::__id);
    else
      return 0;
  }
  return result;
}

_QWORD *ADAM::BoolParamInfo::BoolParamInfo(_QWORD *a1, uint64_t a2, unsigned __int8 a3, __int128 *a4)
{
  void (*v6[5])(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD);

  v6[4] = *(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  v6[0] = (void (*)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v6[1] = (void (*)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))a3;
  ADAM::Parameters::ParamInfo::ParamInfo(a1, a2, v6, a4);
  std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v6);
  *a1 = &off_24D616300;
  return a1;
}

void sub_216D2C7D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))va);
  _Unwind_Resume(a1);
}

_QWORD *ADAM::FloatParamInfo::FloatParamInfo(_QWORD *a1, uint64_t a2, __int128 *a3, float a4)
{
  void (*v6[5])(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD);

  v6[4] = *(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  v6[0] = (void (*)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))std::__any_imp::_SmallHandler<float>::__handle[abi:ne180100];
  v6[1] = (void (*)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))LODWORD(a4);
  ADAM::Parameters::ParamInfo::ParamInfo(a1, a2, v6, a3);
  std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v6);
  *a1 = &off_24D616330;
  return a1;
}

void sub_216D2C86C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))va);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<ADAM::Parameters::ParamInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::default_delete<ADAM::BoolParamInfo>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    *(_QWORD *)result = &unk_24D616318;
    if (*(char *)(result + 103) < 0)
      operator delete(*(void **)(result + 80));
    std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v1 + 48));
    std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v1 + 16));
    JUMPOUT(0x219A00DF0);
  }
  return result;
}

uint64_t ADAM::Parameters::ReadDefaults(ADAM::Parameters *this)
{
  uint64_t result;
  uint64_t (****v3)(_QWORD);
  uint64_t (****v4)(_QWORD);
  uint64_t (***v5)(_QWORD);

  result = CFPreferencesAppSynchronize(CFSTR("com.apple.coreaudio"));
  v4 = *(uint64_t (*****)(_QWORD))this;
  v3 = (uint64_t (****)(_QWORD))*((_QWORD *)this + 1);
  while (v4 != v3)
  {
    v5 = *v4;
    v4 += 2;
    result = (**v5)(v5);
  }
  return result;
}

uint64_t ___ZN4ADAM10ParametersC2Ev_block_invoke(uint64_t a1)
{
  return ADAM::Parameters::ReadDefaults(*(ADAM::Parameters **)(a1 + 32));
}

void ADAM::Parameters::SettingsChanged(ADAM::Parameters *this, __CFNotificationCenter **a2, void *a3, const __CFString *a4, void *a5, const __CFDictionary *a6)
{
  ADAM::Parameters *v6;
  id v7;
  void *v8;
  NSObject *v9;
  id v10;
  unsigned __int8 v11;
  uint64_t v12;
  void (**v13)(uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD);
  void (*v14)(uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD);
  id v15;
  uint64_t (*v16[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _BYTE buf[18];
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = a3;
  v6 = (ADAM::Parameters *)objc_msgSend(v15, "isEqualToString:", *MEMORY[0x24BE0A180]);
  if (!(_DWORD)v6)
  {
    ADAM::Parameters::instance(v6);
    ADAM::Parameters::ReadDefaults((ADAM::Parameters *)&ADAM::Parameters::instance(void)::gParams);
    goto LABEL_20;
  }
  ADAM::Parameters::instance(v6);
  v7 = objc_alloc_init(MEMORY[0x24BE0A230]);
  objc_msgSend(v7, "getPreferenceFor:", CFSTR("_ADAFPreferenceKeyConnectedWiredDeviceIsHeadphone"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (!ADAM::ADAMLogScope(void)::scope)
  {
    v9 = MEMORY[0x24BDACB70];
    v10 = MEMORY[0x24BDACB70];
    goto LABEL_9;
  }
  v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
  if (v9)
  {
LABEL_9:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ADAMParameters.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 162;
      v18 = 2112;
      v19 = v8;
      _os_log_impl(&dword_216CFB000, v9, OS_LOG_TYPE_INFO, "%25s:%-5d ADAM re-loading wired device status is headphone: %@", buf, 0x1Cu);
    }

  }
  if (v8)
    v11 = objc_msgSend(v8, "BOOLValue");
  else
    v11 = 1;
  v12 = *(_QWORD *)(ADAM::Parameters::instance(void)::gParams + 192);
  v13 = (void (**)(uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD))(v12 + 16);
  v16[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v16[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v11;
  if (v16 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v12 + 16))
  {
    v14 = *v13;
    if (*v13)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v14(2, v12 + 16, buf, 0, 0);
      v16[0](2, v16, v13, 0, 0);
      (*(void (**)(uint64_t, _BYTE *, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))buf)(2, buf, v16, 0, 0);
      std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))buf);
    }
    else
    {
      *(_BYTE *)(v12 + 24) = v11;
      *(_QWORD *)(v12 + 16) = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
      v16[0] = 0;
    }
  }
  std::any::reset[abi:ne180100](v16);

LABEL_20:
}

void sub_216D2CBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100](int a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_216D2CC3C + 4 * byte_216D3C987[a1]))(0);
}

uint64_t sub_216D2CC3C(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_216D2CC80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<BOOL>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

uint64_t (**std::any::reset[abi:ne180100](uint64_t (**result)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  if (*result)
    return (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*result)(0, result, 0, 0, 0);
  return result;
}

void std::__shared_ptr_pointer<ADAM::FloatParamInfo  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A00DF0);
}

uint64_t std::__shared_ptr_pointer<ADAM::FloatParamInfo  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<ADAM::BoolParamInfo>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__any_imp::_SmallHandler<float>::__handle[abi:ne180100](int a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_216D2CD28 + 4 * byte_216D3C98C[a1]))(0);
}

uint64_t sub_216D2CD28(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_216D2CD6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 == &std::__any_imp::__unique_typeinfo<float>::__id && a4 == 0)
    return a2 + 8;
  else
    return 0;
}

_QWORD *ADAM::Parameters::ParamInfo::ParamInfo(_QWORD *a1, uint64_t a2, void (**a3)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD), __int128 *a4)
{
  std::string *v7;
  __int128 v8;

  *a1 = &unk_24D616318;
  a1[1] = a2;
  a1[2] = 0;
  a1[3] = 0;
  if (*a3)
    (*a3)(1, a3, (uint64_t)(a1 + 2), 0, 0);
  a1[6] = 0;
  a1[7] = 0;
  if (*a3)
    (*a3)(1, a3, (uint64_t)(a1 + 6), 0, 0);
  v7 = (std::string *)(a1 + 10);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v8 = *a4;
    a1[12] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_216D2CE48(_Unwind_Exception *a1)
{
  uint64_t (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t (**v2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  std::any::reset[abi:ne180100](v2);
  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ADAM::FloatParamInfo::ReadDefaultsValue(ADAM::FloatParamInfo *this)
{
  const __CFBoolean *v2;
  const __CFBoolean *v3;
  CFTypeID v4;
  double Value;
  _BOOL4 v6;
  float v7;
  void (*v8)(uint64_t, char *, char *, _QWORD, _QWORD);
  id v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  float *v13;
  double v14;
  const char *v15;
  _QWORD *v16;
  double valuePtr;
  char buffer[48];
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = (const __CFBoolean *)CFPreferencesCopyAppValue(*((CFStringRef *)this + 1), CFSTR("com.apple.coreaudio"));
  valuePtr = 0.0;
  if (v2)
  {
    v3 = v2;
    v4 = CFGetTypeID(v2);
    if (v4 == CFBooleanGetTypeID())
    {
      Value = (double)CFBooleanGetValue(v3);
LABEL_6:
      CFRelease(v3);
      v6 = 1;
LABEL_7:
      v7 = Value;
      *(_QWORD *)buffer = std::__any_imp::_SmallHandler<float>::__handle[abi:ne180100];
      *(_DWORD *)&buffer[12] = 0;
      *(float *)&buffer[8] = v7;
      goto LABEL_15;
    }
    if (v4 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v3, kCFNumberDoubleType, &valuePtr);
      Value = valuePtr;
      goto LABEL_6;
    }
    if (v4 == CFStringGetTypeID())
    {
      v19 = 0u;
      memset(buffer, 0, sizeof(buffer));
      CFStringGetCString((CFStringRef)v3, buffer, 64, 0x600u);
      v6 = sscanf(buffer, "%lf", &valuePtr) == 1;
      Value = valuePtr;
      CFRelease(v3);
      if (v6)
        goto LABEL_7;
    }
    else
    {
      CFRelease(v3);
    }
  }
  v8 = (void (*)(uint64_t, char *, char *, _QWORD, _QWORD))*((_QWORD *)this + 6);
  *(_QWORD *)buffer = 0;
  *(_QWORD *)&buffer[8] = 0;
  if (v8)
    v8(1, (char *)this + 48, buffer, 0, 0);
  v6 = 0;
LABEL_15:
  std::any::operator=[abi:ne180100]((unint64_t *)this + 2, (void (**)(uint64_t))buffer);
  std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))buffer);
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v9)
      return;
  }
  else
  {
    v9 = (id)MEMORY[0x24BDACB70];
    v10 = MEMORY[0x24BDACB70];
  }
  v11 = v9;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *((_QWORD *)this + 1);
    v13 = (float *)std::any_cast[abi:ne180100]<float>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))this + 2);
    if (!v13)
      std::__throw_bad_any_cast[abi:ne180100]();
    v14 = *v13;
    v15 = "invalid";
    if (v6)
      v15 = "valid";
    v16 = (_QWORD *)((char *)this + 80);
    if (*((char *)this + 103) < 0)
      v16 = (_QWORD *)*v16;
    *(_DWORD *)buffer = 136316418;
    *(_QWORD *)&buffer[4] = "ADAMParameters.cpp";
    *(_WORD *)&buffer[12] = 1024;
    *(_DWORD *)&buffer[14] = 41;
    *(_WORD *)&buffer[18] = 2112;
    *(_QWORD *)&buffer[20] = v12;
    *(_WORD *)&buffer[28] = 2048;
    *(double *)&buffer[30] = v14;
    *(_WORD *)&buffer[38] = 2080;
    *(_QWORD *)&buffer[40] = v15;
    LOWORD(v19) = 2080;
    *(_QWORD *)((char *)&v19 + 2) = v16;
    _os_log_impl(&dword_216CFB000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ADAM Parameter: {'%@', %.2f, %s} %s", (uint8_t *)buffer, 0x3Au);
  }

}

void sub_216D2D130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t *std::any::operator=[abi:ne180100](unint64_t *a1, void (**a2)(uint64_t))
{
  uint64_t (*v4[9])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v4[8] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  v4[0] = 0;
  v4[1] = 0;
  if (*a2)
    (*a2)(1);
  if (v4 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1 && *a1 != (unsigned __int128)0)
    ((void (*)(uint64_t, unint64_t *, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))*a1)(2, a1, v4, 0, 0);
  std::any::reset[abi:ne180100](v4);
  return a1;
}

void sub_216D2D288(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_pointer<ADAM::BoolParamInfo  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A00DF0);
}

uint64_t std::__shared_ptr_pointer<ADAM::BoolParamInfo  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<ADAM::BoolParamInfo>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

void ADAM::BoolParamInfo::ReadDefaultsValue(ADAM::BoolParamInfo *this)
{
  const __CFBoolean *v2;
  const __CFBoolean *v3;
  CFTypeID v4;
  BOOL v5;
  BOOL v6;
  int v7;
  int v8;
  void (*v9)(uint64_t, char *, uint8_t *, _QWORD, _QWORD);
  id v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  _BYTE *v14;
  const char *v15;
  const char *v16;
  _QWORD *v17;
  signed __int8 v18;
  uint8_t *v19;
  int v20;
  BOOL v21;
  int valuePtr;
  uint8_t buf[48];
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = (const __CFBoolean *)CFPreferencesCopyAppValue(*((CFStringRef *)this + 1), CFSTR("com.apple.coreaudio"));
  valuePtr = 0;
  if (!v2)
    goto LABEL_12;
  v3 = v2;
  v4 = CFGetTypeID(v2);
  if (v4 == CFBooleanGetTypeID())
  {
    v5 = CFBooleanGetValue(v3) == 0;
    goto LABEL_6;
  }
  if (v4 == CFNumberGetTypeID())
  {
    CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
    v5 = valuePtr == 0;
LABEL_6:
    v6 = !v5;
    goto LABEL_9;
  }
  if (v4 == CFStringGetTypeID())
  {
    v24 = 0u;
    memset(buf, 0, sizeof(buf));
    CFStringGetCString((CFStringRef)v3, (char *)buf, 64, 0x600u);
    if (sscanf((const char *)buf, "%d", &valuePtr) == 1)
    {
      v6 = valuePtr != 0;
      CFRelease(v3);
      goto LABEL_11;
    }
    v18 = buf[0];
    if (buf[0])
    {
      v19 = &buf[1];
      do
      {
        *(v19 - 1) = __tolower(v18);
        v20 = *v19++;
        v18 = v20;
      }
      while (v20);
    }
    if (!(*(unsigned __int16 *)buf ^ 0x6F6E | buf[2])
      || (*(_DWORD *)buf == 1936482662 ? (v21 = *(unsigned __int16 *)&buf[4] == 101) : (v21 = 0), v21))
    {
      v6 = 0;
LABEL_9:
      v7 = 1;
      goto LABEL_10;
    }
    if (*(_DWORD *)buf == 7562617 || !(*(_DWORD *)buf ^ 0x65757274 | buf[4]))
    {
      v7 = 1;
      v6 = 1;
    }
    else
    {
      v7 = 0;
      v6 = valuePtr != 0;
    }
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
LABEL_10:
  CFRelease(v3);
  if (v7)
  {
LABEL_11:
    v8 = 0;
    *(_QWORD *)buf = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
    *(_QWORD *)&buf[8] = v6;
    goto LABEL_15;
  }
LABEL_12:
  v9 = (void (*)(uint64_t, char *, uint8_t *, _QWORD, _QWORD))*((_QWORD *)this + 6);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  if (v9)
    v9(1, (char *)this + 48, buf, 0, 0);
  v8 = 1;
LABEL_15:
  std::any::operator=[abi:ne180100]((unint64_t *)this + 2, (void (**)(uint64_t))buf);
  std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))buf);
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v10 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v10)
      return;
  }
  else
  {
    v10 = (id)MEMORY[0x24BDACB70];
    v11 = MEMORY[0x24BDACB70];
  }
  v12 = v10;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *((_QWORD *)this + 1);
    v14 = std::any_cast[abi:ne180100]<BOOL>((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))this + 2);
    if (!v14)
      std::__throw_bad_any_cast[abi:ne180100]();
    if (*v14)
      v15 = "true";
    else
      v15 = "false";
    v16 = "invalid";
    if (!v8)
      v16 = "valid";
    v17 = (_QWORD *)((char *)this + 80);
    if (*((char *)this + 103) < 0)
      v17 = (_QWORD *)*v17;
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "ADAMParameters.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 30;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = v13;
    *(_WORD *)&buf[28] = 2080;
    *(_QWORD *)&buf[30] = v15;
    *(_WORD *)&buf[38] = 2080;
    *(_QWORD *)&buf[40] = v16;
    LOWORD(v24) = 2080;
    *(_QWORD *)((char *)&v24 + 2) = v17;
    _os_log_impl(&dword_216CFB000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ADAM Parameter: {'%@', %s, %s} %s", buf, 0x3Au);
  }

}

void sub_216D2D65C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ADAM::Parameters::Parameters(ADAM::Parameters *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t (*v3)(uint64_t);
  _QWORD *v4;
  const void *v5;
  const void *v6;
  unsigned __int8 v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t i;
  NSObject *v42;
  dispatch_source_t v43;
  void *v44;
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v46;
  __CFNotificationCenter *v47;
  void *__p[2];
  char v49;
  _QWORD *handler;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  void *v53;
  uint64_t *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v1 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "Enable dumping uplink audio captures in .caf format for telephony and siri");
  ADAM::BoolParamInfo::BoolParamInfo(v1, (uint64_t)CFSTR("EnableADAMAudioCapture"), 0, (__int128 *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  handler = v1;
  v2 = (_QWORD *)operator new();
  *v2 = &off_24D616348;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = v1;
  v51 = (uint64_t)v2;
  v3 = (uint64_t (*)(uint64_t))operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "Enable generating a random data to be sent across xpc, only used for debugging purposes");
  ADAM::BoolParamInfo::BoolParamInfo(v3, (uint64_t)CFSTR("EnableADAMXPCRandomData"), 0, (__int128 *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v52 = v3;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D616348;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = v3;
  v53 = v4;
  v5 = (const void *)MGCopyAnswer();
  v6 = v5;
  if (v5)
  {
    v7 = CFEqual(v5, CFSTR("iPad")) == 0;
    CFRelease(v6);
  }
  else
  {
    v7 = 1;
  }
  v8 = (uint64_t *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "Enable writing HAE data to HealthKit");
  ADAM::BoolParamInfo::BoolParamInfo(v8, (uint64_t)CFSTR("EnableHAEHKWrite"), v7, (__int128 *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v54 = v8;
  v9 = (_QWORD *)operator new();
  *v9 = &off_24D616348;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  v55 = v9;
  v10 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "Enable all non-calibrated devices for HAE");
  ADAM::BoolParamInfo::BoolParamInfo(v10, (uint64_t)CFSTR("EnableHAEOtherDevices"), 0, (__int128 *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v56 = v10;
  v11 = (_QWORD *)operator new();
  *v11 = &off_24D616348;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v10;
  v57 = v11;
  v12 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "Enable writing EAE data to HealthKit");
  ADAM::BoolParamInfo::BoolParamInfo(v12, (uint64_t)CFSTR("EnableEAEHKWrite"), 1u, (__int128 *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v58 = v12;
  v13 = (_QWORD *)operator new();
  *v13 = &off_24D616348;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = v12;
  v59 = v13;
  v14 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "Enable speech analysis write into SensorKit");
  ADAM::BoolParamInfo::BoolParamInfo(v14, (uint64_t)CFSTR("EnableSpeechAnalysis"), 0, (__int128 *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v60 = v14;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24D616348;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v14;
  v61 = v15;
  v16 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "Set HAE accumulation duration in seconds");
  ADAM::FloatParamInfo::FloatParamInfo(v16, (uint64_t)CFSTR("HAEAccumulationPeriodS"), (__int128 *)__p, 3.0);
  if (v49 < 0)
    operator delete(__p[0]);
  v62 = v16;
  v17 = (_QWORD *)operator new();
  *v17 = &off_24D616380;
  v17[1] = 0;
  v17[2] = 0;
  v17[3] = v16;
  v63 = v17;
  v18 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "Enable live headphone audio exposure monitoring");
  ADAM::BoolParamInfo::BoolParamInfo(v18, (uint64_t)CFSTR("EnableHAELiveMonitor"), 0, (__int128 *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v64 = v18;
  v19 = (_QWORD *)operator new();
  *v19 = &off_24D616348;
  v19[1] = 0;
  v19[2] = 0;
  v19[3] = v18;
  v65 = v19;
  v20 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "Set the threshold for live headphone audio exposure monitoring");
  ADAM::FloatParamInfo::FloatParamInfo(v20, (uint64_t)CFSTR("HAELiveMonitorThreshold"), (__int128 *)__p, 100.0);
  if (v49 < 0)
    operator delete(__p[0]);
  v66 = v20;
  v21 = (_QWORD *)operator new();
  *v21 = &off_24D616380;
  v21[1] = 0;
  v21[2] = 0;
  v21[3] = v20;
  v67 = v21;
  v22 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "Set HAE accumulation duration in seconds for live UI");
  ADAM::FloatParamInfo::FloatParamInfo(v22, (uint64_t)CFSTR("HAELiveUIAccumulationPeriodS"), (__int128 *)__p, 1.0);
  if (v49 < 0)
    operator delete(__p[0]);
  v68 = v22;
  v23 = (_QWORD *)operator new();
  *v23 = &off_24D616380;
  v23[1] = 0;
  v23[2] = 0;
  v23[3] = v22;
  v69 = v23;
  v24 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "Set HAE gauge accumulation duration in mili seconds (ms) for live UI");
  ADAM::FloatParamInfo::FloatParamInfo(v24, (uint64_t)CFSTR("HAELiveUIGaugePeriodMS"), (__int128 *)__p, 100.0);
  if (v49 < 0)
    operator delete(__p[0]);
  v70 = v24;
  v25 = (_QWORD *)operator new();
  *v25 = &off_24D616380;
  v25[1] = 0;
  v25[2] = 0;
  v25[3] = v24;
  v71 = v25;
  v26 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "Boolean flag for determine if HAE sample can be pruned");
  ADAM::BoolParamInfo::BoolParamInfo(v26, (uint64_t)CFSTR("HAENSampleTransient"), 0, (__int128 *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v72 = v26;
  v27 = (_QWORD *)operator new();
  *v27 = &off_24D616348;
  v27[1] = 0;
  v27[2] = 0;
  v27[3] = v26;
  v73 = v27;
  v28 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "Boolean flag for determine if connected unknown device is headphone");
  ADAM::BoolParamInfo::BoolParamInfo(v28, (uint64_t)CFSTR("UnknownDeviceIsHeadphone"), 1u, (__int128 *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v74 = v28;
  v29 = (_QWORD *)operator new();
  *v29 = &off_24D616348;
  v29[1] = 0;
  v29[2] = 0;
  v29[3] = v28;
  v75 = v29;
  v30 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "Set Seabreaze Audio default accumulation duration in seconds for telephony");
  ADAM::FloatParamInfo::FloatParamInfo(v30, (uint64_t)CFSTR("TelephonyDurationInSec"), (__int128 *)__p, 60.0);
  if (v49 < 0)
    operator delete(__p[0]);
  v76 = v30;
  v31 = (_QWORD *)operator new();
  *v31 = &off_24D616380;
  v31[1] = 0;
  v31[2] = 0;
  v31[3] = v30;
  v77 = v31;
  v32 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "Set Seabreaze Audio default accumulation duration in seconds for siri");
  ADAM::FloatParamInfo::FloatParamInfo(v32, (uint64_t)CFSTR("SiriDurationInSec"), (__int128 *)__p, 5.0);
  if (v49 < 0)
    operator delete(__p[0]);
  v78 = v32;
  v33 = (_QWORD *)operator new();
  *v33 = &off_24D616380;
  v33[1] = 0;
  v33[2] = 0;
  v33[3] = v32;
  v79 = v33;
  v34 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "Boolean flag dump the audio file in SensorKit writer for debuggin");
  ADAM::BoolParamInfo::BoolParamInfo(v34, (uint64_t)CFSTR("DumpSensorKitAudioBuffer"), 0, (__int128 *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v80 = v34;
  v35 = (_QWORD *)operator new();
  *v35 = &off_24D616348;
  v35[1] = 0;
  v35[2] = 0;
  v35[3] = v34;
  v81 = v35;
  qword_253D975B0 = 0;
  qword_253D975B8 = 0;
  ADAM::Parameters::instance(void)::gParams = 0;
  __p[0] = &ADAM::Parameters::instance(void)::gParams;
  LOBYTE(__p[1]) = 0;
  v36 = operator new(0x100uLL);
  v37 = 0;
  ADAM::Parameters::instance(void)::gParams = (uint64_t)v36;
  qword_253D975B0 = (uint64_t)v36;
  qword_253D975B8 = (uint64_t)(v36 + 16);
  do
  {
    v38 = *(_OWORD *)&(&handler)[2 * v37];
    *v36 = v38;
    if (*((_QWORD *)&v38 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    ++v37;
    ++v36;
  }
  while (v37 != 16);
  qword_253D975B0 = (uint64_t)v36;
  for (i = 30; i != -2; i -= 2)
    std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100]((uint64_t)&(&handler)[i]);
  qword_253D975C0 = 0;
  ADAM::Parameters::ReadDefaults((ADAM::Parameters *)&ADAM::Parameters::instance(void)::gParams);
  dispatch_get_global_queue(0, 0);
  v42 = objc_claimAutoreleasedReturnValue();
  v43 = dispatch_source_create(MEMORY[0x24BDACA08], 1uLL, 0, v42);
  v44 = (void *)qword_253D975C0;
  qword_253D975C0 = (uint64_t)v43;

  handler = (_QWORD *)MEMORY[0x24BDAC760];
  v51 = 3221225472;
  v52 = ___ZN4ADAM10ParametersC2Ev_block_invoke;
  v53 = &__block_descriptor_40_e5_v8__0l;
  v54 = &ADAM::Parameters::instance(void)::gParams;
  dispatch_source_set_event_handler((dispatch_source_t)qword_253D975C0, &handler);
  dispatch_resume((dispatch_object_t)qword_253D975C0);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, &ADAM::Parameters::instance(void)::gParams, (CFNotificationCallback)ADAM::Parameters::SettingsChanged, CFSTR("NanoHAESettingsChanged"), 0, (CFNotificationSuspensionBehavior)0);
  v46 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v46, &ADAM::Parameters::instance(void)::gParams, (CFNotificationCallback)ADAM::Parameters::SettingsChanged, (CFStringRef)*MEMORY[0x24BE0A158], 0, (CFNotificationSuspensionBehavior)0);
  v47 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v47, &ADAM::Parameters::instance(void)::gParams, (CFNotificationCallback)ADAM::Parameters::SettingsChanged, (CFStringRef)*MEMORY[0x24BE0A180], 0, (CFNotificationSuspensionBehavior)0);
}

void sub_216D2E114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t i;

  std::vector<std::shared_ptr<ADAM::Parameters::ParamInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (i = 240; i != -16; i -= 16)
    std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100]((uint64_t)(&a15 + i));
  _Unwind_Resume(a1);
}

void sub_216D2E2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{

  std::vector<std::shared_ptr<ADAM::Parameters::ParamInfo>>::__destroy_vector::operator()[abi:ne180100](&a9);
  JUMPOUT(0x216D2E2F0);
}

float ADAM::Parameters::GetHAELiveUIAccumulationPeriodInSec(ADAM::Parameters *this)
{
  float Param;
  NSObject *v3;
  id v4;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  double v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  Param = ADAM::Parameters::GetParamValue<float>(9u);
  if (Param <= 0.0 || Param > 10.0)
  {
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v3 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v3)
        return 1.0;
    }
    else
    {
      v3 = MEMORY[0x24BDACB70];
      v4 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "ADAMParameters.cpp";
      v8 = 1024;
      v9 = 152;
      v10 = 2048;
      v11 = Param;
      _os_log_impl(&dword_216CFB000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid Accumulation Period in Seconds for HAE: %.2f, default to 1.0s", (uint8_t *)&v6, 0x1Cu);
    }

    return 1.0;
  }
  return Param;
}

void ADAM::BufferNodePCM::initialize(ADAM::BufferNodePCM *this)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 8))
  {
    ADAM::AudioDataAnalysisManager::instance(this);
    ADAM::AudioDataAnalysisManager::addWriters(*((_QWORD *)this + 2), *((_QWORD *)this + 12));
    *((_BYTE *)this + 8) = 1;
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v2 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v2)
        return;
    }
    else
    {
      v2 = MEMORY[0x24BDACB70];
      v3 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      v4 = *((_QWORD *)this + 2);
      v5 = 136315650;
      v6 = "ADAMBufferNodes.cpp";
      v7 = 1024;
      v8 = 35;
      v9 = 2048;
      v10 = v4;
      _os_log_impl(&dword_216CFB000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session: %llx initialized", (uint8_t *)&v5, 0x1Cu);
    }

  }
}

void ADAM::BufferNodePCM::reset(ADAM::BufferNodePCM *this)
{
  int v3;
  NSObject *v5;
  id v6;
  uint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!atomic_load((unsigned int *)this + 44))
  {
LABEL_5:
    *((_DWORD *)this + 42) = 0;
    *((_DWORD *)this + 43) = 0;
    *((_DWORD *)this + 44) = 0;
    return;
  }
  v3 = -50500;
  while (1)
  {
    v3 += 500;
    if (!v3)
      break;
    usleep(0x1F4u);
    if (!atomic_load((unsigned int *)this + 44))
      goto LABEL_5;
  }
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v5 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v5)
      return;
  }
  else
  {
    v5 = MEMORY[0x24BDACB70];
    v6 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v7 = *((_QWORD *)this + 2);
    v8 = 136315650;
    v9 = "ADAMBufferNodes.cpp";
    v10 = 1024;
    v11 = 46;
    v12 = 2048;
    v13 = v7;
    _os_log_impl(&dword_216CFB000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Session: %llx Failed to flush ring buffer, Timedout", (uint8_t *)&v8, 0x1Cu);
  }

}

uint64_t ADAM::BufferNodePCM::process(_DWORD *a1, __int128 *a2, _OWORD *a3)
{
  _DWORD *v3;
  int v4;
  unsigned int v5;
  NSObject *v6;
  int v7;
  unsigned int v8;
  NSObject *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  id v27;
  int v28;
  unint64_t v29;
  int v30;
  id v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v3 = a1;
  v43 = *MEMORY[0x24BDAC8D0];
  v33 = *a2;
  v34 = *((_QWORD *)a2 + 2);
  if ((_DWORD)v33 == **((_DWORD **)a1 + 20))
  {
    if (HIDWORD(v33) > a1[46])
    {
      v4 = ADAM::AudioRingBuffer::write(AudioBufferList const&,ADAM::Metadata const&)::errCnt;
      v5 = ++ADAM::AudioRingBuffer::write(AudioBufferList const&,ADAM::Metadata const&)::errCnt;
      if (v4)
      {
LABEL_48:
        if (v5 > 0xFFE)
          v5 = 0;
        ADAM::AudioRingBuffer::write(AudioBufferList const&,ADAM::Metadata const&)::errCnt = v5;
        return 1819436833;
      }
      if (ADAM::ADAMLogScope(void)::once != -1)
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
      if (ADAM::ADAMLogScope(void)::scope)
      {
        v6 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v6)
        {
LABEL_47:
          v5 = ADAM::AudioRingBuffer::write(AudioBufferList const&,ADAM::Metadata const&)::errCnt;
          goto LABEL_48;
        }
      }
      else
      {
        v6 = MEMORY[0x24BDACB70];
        v31 = MEMORY[0x24BDACB70];
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v32 = v3[46];
        *(_DWORD *)buf = 136315906;
        v36 = "ADAMRingBuffer.cpp";
        v37 = 1024;
        v38 = 37;
        v39 = 1024;
        v40 = HIDWORD(v33);
        v41 = 1024;
        v42 = v32;
        _os_log_impl(&dword_216CFB000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioRingBuffer process error incoming size: %u, blksz: %u", buf, 0x1Eu);
      }

      goto LABEL_47;
    }
    v10 = a1[42];
    v11 = a1[47];
    if (a1[44] == v11)
      return 1718971425;
    v14 = (v10 + 1) % v11;
    if ((_DWORD)v33)
    {
      v15 = 0;
      v16 = 16 * v33;
      do
      {
        a1 = memcpy((void *)(*(_QWORD *)(*((_QWORD *)v3 + 20) + v15 + 16) + v3[46] * v10), *(const void **)((char *)&v33 + v15 + 16), *(unsigned int *)((char *)&v33 + v15 + 12));
        v15 += 16;
      }
      while (v16 != v15);
    }
    v17 = v3 + 44;
    v18 = (_OWORD *)(*((_QWORD *)v3 + 29) + 80 * v10);
    *v18 = *a3;
    v19 = a3[1];
    v20 = a3[2];
    v21 = a3[4];
    v18[3] = a3[3];
    v18[4] = v21;
    v18[1] = v19;
    v18[2] = v20;
    v3[42] = v14;
    do
      v22 = __ldaxr(v17);
    while (__stlxr(v22 + 1, v17));
    v23 = *((_QWORD *)v3 + 4) + 24 * v3[14];
    *(_QWORD *)(v23 + 8) = *((_QWORD *)v3 + 2);
    *(_DWORD *)(v23 + 16) = 4;
    ADAM::AudioDataAnalysisManager::instance((ADAM::AudioDataAnalysisManager *)a1);
    v24 = qword_253D97670[0];
    atomic_store(qword_253D97670[0], (unint64_t *)v23);
    v25 = __ldaxr(qword_253D97670);
    if (v25 == v24)
    {
      if (!__stlxr(v23, qword_253D97670))
      {
        v26 = 1;
        goto LABEL_35;
      }
    }
    else
    {
      __clrex();
    }
    v26 = 0;
LABEL_35:
    if ((v26 & 1) != 0)
    {
LABEL_42:
      caulk::semaphore::signal((caulk::semaphore *)&unk_253D97658);
      result = 0;
      v3[14] = (v3[14] + 1) % v3[7];
      return result;
    }
    while (1)
    {
      atomic_store(v25, (unint64_t *)v23);
      v29 = __ldaxr(qword_253D97670);
      if (v29 != v25)
        break;
      if (__stlxr(v23, qword_253D97670))
        goto LABEL_40;
      v30 = 1;
LABEL_41:
      v25 = v29;
      if (v30)
        goto LABEL_42;
    }
    __clrex();
LABEL_40:
    v30 = 0;
    goto LABEL_41;
  }
  v7 = ADAM::AudioRingBuffer::write(AudioBufferList const&,ADAM::Metadata const&)::errCnt;
  v8 = ++ADAM::AudioRingBuffer::write(AudioBufferList const&,ADAM::Metadata const&)::errCnt;
  if (!v7)
  {
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v9)
      {
LABEL_29:
        v8 = ADAM::AudioRingBuffer::write(AudioBufferList const&,ADAM::Metadata const&)::errCnt;
        goto LABEL_30;
      }
    }
    else
    {
      v9 = MEMORY[0x24BDACB70];
      v27 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v28 = **((_DWORD **)v3 + 20);
      *(_DWORD *)buf = 136315906;
      v36 = "ADAMRingBuffer.cpp";
      v37 = 1024;
      v38 = 32;
      v39 = 1024;
      v40 = v33;
      v41 = 1024;
      v42 = v28;
      _os_log_impl(&dword_216CFB000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioRingBuffer process error format does not match: inABL.mNumBuffers:%u expected:%u", buf, 0x1Eu);
    }

    goto LABEL_29;
  }
LABEL_30:
  if (v8 > 0xFFE)
    v8 = 0;
  ADAM::AudioRingBuffer::write(AudioBufferList const&,ADAM::Metadata const&)::errCnt = v8;
  return 1718444833;
}

uint64_t ADAM::BufferNodePCM::read(uint64_t a1, int *a2, _OWORD *a3)
{
  _DWORD *v5;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unsigned int *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  int v22;
  int v23;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD **)(a1 + 160);
  if (*a2 == *v5)
  {
    if (*(_DWORD *)(a1 + 176))
    {
      v7 = *(_DWORD *)(a1 + 172);
      v8 = (v7 + 1) % *(_DWORD *)(a1 + 188);
      v9 = *(_QWORD *)(a1 + 232);
      if (*a2)
      {
        v10 = 0;
        v11 = 0;
        v12 = (*(_DWORD *)(a1 + 216) * *(_DWORD *)(v9 + 80 * v7 + 64));
        do
        {
          memcpy(*(void **)&a2[v10 + 4], (const void *)(*(_QWORD *)&v5[v10 + 4] + *(_DWORD *)(a1 + 184) * v7), v12);
          a2[v10 + 3] = v12;
          ++v11;
          v5 = *(_DWORD **)(a1 + 160);
          v10 += 4;
        }
        while (v11 < *v5);
        v9 = *(_QWORD *)(a1 + 232);
      }
      v13 = (unsigned int *)(a1 + 176);
      v14 = (_OWORD *)(v9 + 80 * v7);
      *a3 = *v14;
      v15 = v14[1];
      v16 = v14[2];
      v17 = v14[4];
      a3[3] = v14[3];
      a3[4] = v17;
      a3[1] = v15;
      a3[2] = v16;
      *(_DWORD *)(a1 + 172) = v8;
      do
        v18 = __ldaxr(v13);
      while (__stlxr(v18 - 1, v13));
      return 0;
    }
    else
    {
      return 1701670945;
    }
  }
  else
  {
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    v19 = 1718444833;
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v20 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v20)
        return v19;
    }
    else
    {
      v20 = MEMORY[0x24BDACB70];
      v21 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v22 = *a2;
      v23 = **(_DWORD **)(a1 + 160);
      v25 = 136315906;
      v26 = "ADAMRingBuffer.cpp";
      v27 = 1024;
      v28 = 63;
      v29 = 1024;
      v30 = v22;
      v31 = 1024;
      v32 = v23;
      _os_log_impl(&dword_216CFB000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioRingBuffer process error format does not match: outABL.mNumBuffers:%u expected:%u", (uint8_t *)&v25, 0x1Eu);
    }

  }
  return v19;
}

_DWORD *ADAM::BufferNodePCM::pop(_DWORD *this)
{
  unsigned int *v1;
  unsigned int v2;

  if (this[44])
  {
    v1 = this + 44;
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 - 1, v1));
    this[43] = (this[43] + 1) % this[47];
  }
  return this;
}

uint64_t ADAM::BufferNodePCM::getNodeDescriptor(ADAM::BufferNodePCM *this)
{
  return (uint64_t)this + 64;
}

void ADAM::BufferNodePCM::~BufferNodePCM(ADAM::BufferNodePCM *this, AudioBufferList **a2)
{
  ADAM::BufferNodePCM::~BufferNodePCM(this, a2);
  JUMPOUT(0x219A00DF0);
}

{
  void *v3;
  void *v4;

  *(_QWORD *)this = off_24D6163B8;
  ADAM::releaseAudioBufferList((unsigned int **)this + 20, a2);
  v3 = (void *)*((_QWORD *)this + 29);
  if (v3)
  {
    *((_QWORD *)this + 30) = v3;
    operator delete(v3);
  }
  *((_QWORD *)this + 8) = off_24D6168E0;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  *(_QWORD *)this = &unk_24D616870;
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
}

void ADAM::BufferNodeDescriptorBase::~BufferNodeDescriptorBase(void **this)
{
  *this = off_24D6168E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_24D6168E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x219A00DF0);
}

_QWORD *std::vector<ADAM::BufferNodeMsg>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_216D2EF20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ADAM::BufferNodeBase::getEndPointBitMask(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int *v14;
  int v15;
  int v16;
  NSObject *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  id v23;
  int *v24;
  const char *v25;
  NSObject *v26;
  uint32_t v27;
  id v28;
  int v30;
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int *v35;
  uint64_t v36;

  v2 = a2;
  v36 = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned __int8 *)a1 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = a1[1];
  if (v4 > 13)
  {
    if (v4 != 14)
    {
      if (v4 != 16)
        return v2;
      if (v5 >= 0)
        v11 = a1;
      else
        v11 = (uint64_t *)*a1;
      v12 = *v11;
      v8 = v11[1];
      v9 = v12 == 0x6365722D63767661;
      v10 = 0x657565755164726FLL;
      goto LABEL_16;
    }
    if (v5 >= 0)
      v19 = a1;
    else
      v19 = (uint64_t *)*a1;
    v20 = *v19;
    v21 = *(uint64_t *)((char *)v19 + 6);
    if (v20 == 0x532D747365544358 && v21 == 0x65646F4E4C50532DLL)
    {
      v2 = a2 | 0x20;
      if (ADAM::ADAMLogScope(void)::once != -1)
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
      if (ADAM::ADAMLogScope(void)::scope)
      {
        v18 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v18)
          return v2;
      }
      else
      {
        v18 = MEMORY[0x24BDACB70];
        v28 = MEMORY[0x24BDACB70];
      }
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        goto LABEL_59;
      v30 = 136315394;
      v31 = "ADAMBufferNodes.cpp";
      v32 = 1024;
      v33 = 96;
      v25 = "%25s:%-5d ADAM enable csv file for XCTest";
      v26 = v18;
      v27 = 18;
      goto LABEL_58;
    }
  }
  else
  {
    if (v4 != 5)
    {
      if (v4 != 11)
        return v2;
      if (v5 >= 0)
        v6 = a1;
      else
        v6 = (uint64_t *)*a1;
      v7 = *v6;
      v8 = *(uint64_t *)((char *)v6 + 3);
      v9 = v7 == 0x4E2D747365544358;
      v10 = 0x65646F4E2D747365;
LABEL_16:
      if (!v9 || v8 != v10)
        return v2;
      goto LABEL_30;
    }
    if (v5 >= 0)
      v14 = (int *)a1;
    else
      v14 = (int *)*a1;
    v15 = *v14;
    v16 = *((unsigned __int8 *)v14 + 4);
    if (v15 == 1970237541 && v16 == 116)
    {
LABEL_30:
      ADAM::Parameters::instance((ADAM::Parameters *)a1);
      if (!ADAM::Parameters::GetParamValue<BOOL>(0))
        return v2;
      v2 |= 8uLL;
      if (ADAM::ADAMLogScope(void)::once != -1)
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
      if (ADAM::ADAMLogScope(void)::scope)
      {
        v18 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v18)
          return v2;
      }
      else
      {
        v18 = MEMORY[0x24BDACB70];
        v23 = MEMORY[0x24BDACB70];
      }
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
LABEL_59:

        return v2;
      }
      if (*((char *)a1 + 23) >= 0)
        v24 = (int *)a1;
      else
        v24 = (int *)*a1;
      v30 = 136315650;
      v31 = "ADAMBufferNodes.cpp";
      v32 = 1024;
      v33 = 92;
      v34 = 2080;
      v35 = v24;
      v25 = "%25s:%-5d ADAM enable dumping audio file for %s";
      v26 = v18;
      v27 = 28;
LABEL_58:
      _os_log_impl(&dword_216CFB000, v26, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v30, v27);
      goto LABEL_59;
    }
  }
  return v2;
}

void ADAM::BufferNodeDescriptorPCM::~BufferNodeDescriptorPCM(void **this)
{
  *this = off_24D6168E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_24D6168E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x219A00DF0);
}

unint64_t AudioDataAnalysisManagerCreate(ADAM::AudioDataAnalysisManager *a1, uint64_t **a2)
{
  unsigned int v2;
  ADAM::session_lock_exclusive *v3;
  unint64_t p_superclass;
  NSObject *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  NSObject *v10;
  id v11;
  const char *v12;
  int v13;
  unint64_t v14;
  uint8x8_t v15;
  _QWORD *v16;
  _QWORD *i;
  unint64_t v18;
  _QWORD *v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD **v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *j;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  ADAM::session_lock_exclusive *v39;
  uint64_t v40;
  void *v42;
  uint64_t **v43;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  const char *v49;
  uint64_t v50;

  v43 = a2;
  v2 = a1;
  v50 = *MEMORY[0x24BDAC8D0];
  ADAM::AudioDataAnalysisManager::instance(a1);
  ADAM::session_lock_exclusive::session_lock_exclusive(v3);
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  p_superclass = (unint64_t)ADAMSpeechAnalysisWriter.superclass;
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v5 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v5)
      goto LABEL_10;
  }
  else
  {
    v5 = MEMORY[0x24BDACB70];
    v6 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v45 = "AudioDataAnalysisManager.cpp";
    v46 = 1024;
    v47 = 84;
    _os_log_impl(&dword_216CFB000, v5, OS_LOG_TYPE_INFO, "%25s:%-5d createSessionManager: Exclusive lock acquired", buf, 0x12u);
  }

  do
LABEL_10:
    v7 = ((unint64_t)v2 << 24) | rand() & 0xFFFFFF;
  while (std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>>>::find<unsigned long long>(&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, v7));
  v8 = operator new();
  *(_BYTE *)v8 = v2;
  *(_QWORD *)(v8 + 8) = v7;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_DWORD *)(v8 + 48) = 1065353216;
  *(_QWORD *)(v8 + 56) = 850045863;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_DWORD *)(v8 + 176) = 1065353216;
  *(_QWORD *)(v8 + 184) = 850045863;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_QWORD *)(v8 + 320) = 850045863;
  *(_OWORD *)(v8 + 417) = 0u;
  *(_OWORD *)(v8 + 408) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  if (ADAM::hasEntitlementForSensorkitSiri(void)::once != -1)
    dispatch_once(&ADAM::hasEntitlementForSensorkitSiri(void)::once, &__block_literal_global_52);
  if (ADAM::hasEntitlementForSensorkitSiri(void)::ans)
  {
    v9 = +[ADAMSensorKitWriterFactory IsMonitoringSiri](ADAMSensorKitWriterFactory, "IsMonitoringSiri", v43);
  }
  else
  {
    if (ADAM::hasEntitlementForSensorkitTelephony(void)::once != -1)
      dispatch_once(&ADAM::hasEntitlementForSensorkitTelephony(void)::once, &__block_literal_global_55);
    if (ADAM::hasEntitlementForSensorkitTelephony(void)::ans)
    {
      v9 = +[ADAMSensorKitWriterFactory IsMonitoringTelephony](ADAMSensorKitWriterFactory, "IsMonitoringTelephony", v43);
    }
    else
    {
      if (ADAM::isXCTest(void)::once != -1)
        dispatch_once(&ADAM::isXCTest(void)::once, &__block_literal_global_45);
      v9 = ADAM::isXCTest(void)::isXCTest != 0;
    }
  }
  *(_BYTE *)(v8 + 433) = v9;
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v10 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v10)
      goto LABEL_33;
  }
  else
  {
    v10 = MEMORY[0x24BDACB70];
    v11 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v12 = "Y";
    v13 = *(unsigned __int8 *)(v8 + 433);
    v45 = "ADAMClientSessionManager.cpp";
    *(_DWORD *)buf = 136315650;
    if (!v13)
      v12 = "N";
    v46 = 1024;
    v47 = 42;
    v48 = 2080;
    v49 = v12;
    _os_log_impl(&dword_216CFB000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Speech Analysis Monitoring Status %s", buf, 0x1Cu);
  }

LABEL_33:
  v14 = *((_QWORD *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 1);
  if (*((_QWORD *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 1))
  {
    v15 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 8));
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      p_superclass = v7;
      if (v7 >= *((_QWORD *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 1))
        p_superclass = v7 % *((_QWORD *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 1);
    }
    else
    {
      p_superclass = (DWORD2(ADAM::AudioDataAnalysisManager::instance(void)::gAdam) - 1) & v7;
    }
    v16 = *(_QWORD **)(ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 8 * p_superclass);
    if (v16)
    {
      for (i = (_QWORD *)*v16; i; i = (_QWORD *)*i)
      {
        v18 = i[1];
        if (v18 == v7)
        {
          if (i[2] == v7)
          {
            ADAM::ClientSessionManager::~ClientSessionManager((ADAM::ClientSessionManager *)v8);
            MEMORY[0x219A00DF0]();
            goto LABEL_106;
          }
        }
        else
        {
          if (v15.u32[0] > 1uLL)
          {
            if (v18 >= *((_QWORD *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 1))
              v18 %= *((_QWORD *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 1);
          }
          else
          {
            v18 &= *((_QWORD *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 1) - 1;
          }
          if (v18 != p_superclass)
            break;
        }
      }
    }
  }
  v19 = operator new(0x20uLL);
  *v19 = 0;
  v19[1] = v7;
  v19[2] = v7;
  v19[3] = v8;
  v20 = (float)(unint64_t)(qword_253D975E0 + 1);
  if (!v14 || (float)(*(float *)&dword_253D975E8 * (float)v14) < v20)
  {
    v21 = 1;
    if (v14 >= 3)
      v21 = (v14 & (v14 - 1)) != 0;
    v22 = v21 | (2 * v14);
    v23 = vcvtps_u32_f32(v20 / *(float *)&dword_253D975E8);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v14 = *((_QWORD *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 1);
    }
    if (*(_QWORD *)&prime > v14)
      goto LABEL_62;
    if (*(_QWORD *)&prime < v14)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)qword_253D975E0 / *(float *)&dword_253D975E8);
      if (v14 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v14)
      {
        v14 = *((_QWORD *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 1);
      }
      else
      {
        if (prime)
        {
LABEL_62:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)ADAM::AudioDataAnalysisManager::instance(void)::gAdam;
          *(_QWORD *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          *((int8x8_t *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 1) = prime;
          do
            *(_QWORD *)(ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD **)qword_253D975D8;
          if (qword_253D975D8)
          {
            v29 = *(_QWORD *)(qword_253D975D8 + 8);
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 8 * v29) = &qword_253D975D8;
            for (j = *v28; j; v29 = v35)
            {
              v35 = j[1];
              if (v30.u32[0] > 1uLL)
              {
                if (v35 >= *(_QWORD *)&prime)
                  v35 %= *(_QWORD *)&prime;
              }
              else
              {
                v35 &= *(_QWORD *)&prime - 1;
              }
              if (v35 != v29)
              {
                if (!*(_QWORD *)(ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 8 * v35))
                {
                  *(_QWORD *)(ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 8 * v35) = v28;
                  goto LABEL_87;
                }
                *v28 = (_QWORD *)*j;
                *j = **(_QWORD **)(ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 8 * v35);
                **(_QWORD **)(ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 8 * v35) = j;
                j = v28;
              }
              v35 = v29;
LABEL_87:
              v28 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v14 = (unint64_t)prime;
          goto LABEL_91;
        }
        v42 = (void *)ADAM::AudioDataAnalysisManager::instance(void)::gAdam;
        *(_QWORD *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam = 0;
        if (v42)
          operator delete(v42);
        v14 = 0;
        *((_QWORD *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 1) = 0;
      }
    }
LABEL_91:
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v7 >= v14)
        p_superclass = v7 % v14;
      else
        p_superclass = v7;
    }
    else
    {
      p_superclass = ((_DWORD)v14 - 1) & v7;
    }
  }
  v36 = ADAM::AudioDataAnalysisManager::instance(void)::gAdam;
  v37 = *(_QWORD **)(ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 8 * p_superclass);
  if (v37)
  {
    *v19 = *v37;
LABEL_104:
    *v37 = v19;
    goto LABEL_105;
  }
  *v19 = qword_253D975D8;
  qword_253D975D8 = (uint64_t)v19;
  *(_QWORD *)(v36 + 8 * p_superclass) = &qword_253D975D8;
  if (*v19)
  {
    v38 = *(_QWORD *)(*v19 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v38 >= v14)
        v38 %= v14;
    }
    else
    {
      v38 &= v14 - 1;
    }
    v37 = (_QWORD *)(ADAM::AudioDataAnalysisManager::instance(void)::gAdam + 8 * v38);
    goto LABEL_104;
  }
LABEL_105:
  ++qword_253D975E0;
LABEL_106:
  v39 = (ADAM::session_lock_exclusive *)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>>>::find<unsigned long long>(&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, v7);
  if (!v39)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v40 = *((_QWORD *)v39 + 3);
  ADAM::session_lock_exclusive::~session_lock_exclusive(v39);
  ADAM::ClientSessionManager::updateReportingSessions(v40, v43);
  return v7;
}

void sub_216D2FA98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  ADAM::ClientSessionManager **v3;
  ADAM::session_lock_exclusive *v5;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<ADAM::ClientSessionManager>::reset[abi:ne180100](v3);
  operator delete(v2);
  v5 = std::unique_ptr<ADAM::ClientSessionManager>::reset[abi:ne180100]((ADAM::ClientSessionManager **)va);
  ADAM::session_lock_exclusive::~session_lock_exclusive(v5);
  _Unwind_Resume(a1);
}

uint64_t AudioDataAnalysisManagerDispose(ADAM::AudioDataAnalysisManager *a1)
{
  uint64_t ClientSessionMananger;
  uint64_t v3;
  __objc2_class **p_superclass;
  uint64_t **v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  NSObject *v12;
  id v13;
  id *v14;
  NSObject *v15;
  id v16;
  uint64_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  _DWORD v24[7];

  *(_QWORD *)&v24[5] = *MEMORY[0x24BDAC8D0];
  ADAM::AudioDataAnalysisManager::instance(a1);
  ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1);
  if (!ClientSessionMananger)
    return 0;
  v3 = ClientSessionMananger;
  if (!*(_DWORD *)(ClientSessionMananger + 40))
    return 0;
  p_superclass = (__objc2_class **)(ADAMSpeechAnalysisWriter + 8);
  if (*(_BYTE *)(ClientSessionMananger + 432))
  {
    ADAM::AudioDataAnalysisManager::instance((ADAM::AudioDataAnalysisManager *)ClientSessionMananger);
    v18 = *(_QWORD *)(v3 + 8);
    std::mutex::lock((std::mutex *)(v3 + 56));
    v5 = *(uint64_t ***)(v3 + 32);
    if (v5)
    {
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(v3 + 296) + 24 * v6;
        *(_QWORD *)(v7 + 8) = *((unsigned int *)v5 + 4) | (*(_QWORD *)(v3 + 8) << 32);
        *(_DWORD *)(v7 + 16) = 2;
        v8 = qword_253D97670[0];
        atomic_store(qword_253D97670[0], (unint64_t *)v7);
        v9 = __ldaxr(qword_253D97670);
        if (v9 != v8)
          break;
        if (__stlxr(v7, qword_253D97670))
          goto LABEL_10;
LABEL_16:
        caulk::semaphore::signal((caulk::semaphore *)&unk_253D97658);
        ++v6;
        v5 = (uint64_t **)*v5;
        if (!v5)
          goto LABEL_19;
      }
      __clrex();
LABEL_10:
      while (1)
      {
        atomic_store(v9, (unint64_t *)v7);
        v10 = __ldaxr(qword_253D97670);
        if (v10 != v9)
          break;
        if (__stlxr(v7, qword_253D97670))
          goto LABEL_14;
        v11 = 1;
LABEL_15:
        v9 = v10;
        if (v11)
          goto LABEL_16;
      }
      __clrex();
LABEL_14:
      v11 = 0;
      goto LABEL_15;
    }
    v6 = 0;
LABEL_19:
    std::mutex::unlock((std::mutex *)(v3 + 56));
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    p_superclass = ADAMSpeechAnalysisWriter.superclass;
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v12 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v12)
        goto LABEL_28;
    }
    else
    {
      v12 = MEMORY[0x24BDACB70];
      v13 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      v20 = "ADAMClientSessionManager.cpp";
      v21 = 1024;
      v22 = 301;
      v23 = 1024;
      v24[0] = v6;
      LOWORD(v24[1]) = 2048;
      *(_QWORD *)((char *)&v24[1] + 2) = v18;
      _os_log_impl(&dword_216CFB000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sent [ %u ] dispose signals for session: %llx", buf, 0x22u);
    }

  }
LABEL_28:
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  v14 = (id *)p_superclass[177];
  if (v14)
  {
    v15 = *v14;
    if (!v15)
      return 0;
  }
  else
  {
    v15 = MEMORY[0x24BDACB70];
    v16 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v20 = "AudioDataAnalysisManager.cpp";
    v21 = 1024;
    v22 = 113;
    v23 = 2048;
    *(_QWORD *)v24 = a1;
    _os_log_impl(&dword_216CFB000, v15, OS_LOG_TYPE_INFO, "%25s:%-5d Session %llx dispose * Pending *", buf, 0x1Cu);
  }

  return 0;
}

void sub_216D2FE5C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t AudioDataAnalysisManagerReset(ADAM::AudioDataAnalysisManager *a1)
{
  uint64_t ClientSessionMananger;
  uint64_t v3;
  uint64_t **i;
  uint64_t v5;
  uint64_t j;
  uint64_t result;

  ADAM::AudioDataAnalysisManager::instance(a1);
  ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1);
  if (!ClientSessionMananger)
    return 561211748;
  v3 = ClientSessionMananger;
  for (i = *(uint64_t ***)(ClientSessionMananger + 32); i; i = (uint64_t **)*i)
    (*(void (**)(uint64_t *))(*i[3] + 8))(i[3]);
  v5 = *(_QWORD *)(v3 + 120);
  for (j = *(_QWORD *)(v3 + 128); j != v5; j -= 24)
  {
    if (*(char *)(j - 1) < 0)
      operator delete(*(void **)(j - 24));
  }
  result = 0;
  *(_QWORD *)(v3 + 128) = v5;
  return result;
}

uint64_t AudioDataAnalysisManagerUpdateReportingSessions(ADAM::AudioDataAnalysisManager *a1, uint64_t **a2)
{
  uint64_t ClientSessionMananger;

  ADAM::AudioDataAnalysisManager::instance(a1);
  ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1);
  if (!ClientSessionMananger)
    return 561211748;
  ADAM::ClientSessionManager::updateReportingSessions(ClientSessionMananger, a2);
  return 0;
}

uint64_t AudioDataAnalysisManagerCreateNodePCM(ADAM::AudioDataAnalysisManager *a1, unsigned int a2, uint64_t a3, __int128 *a4, const AudioStreamBasicDescription *a5, char a6)
{
  uint64_t ClientSessionMananger;
  uint64_t v13;
  uint64_t result;
  NSObject *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t EndPointBitMask;
  void *v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  char *v24;
  unint64_t v25;
  id v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t **v31;
  uint64_t *i;
  unint64_t v33;
  _QWORD *v34;
  float v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  id v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t *v47;
  std::mutex *v48;
  char **v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  size_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  _BYTE *v77;
  char *v78;
  __int128 v79;
  void *v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  unint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  void *v98;
  void *v99;
  char *v100;
  char *v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  char *j;
  _QWORD *v108;
  char *v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  _BYTE *v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  void *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  int64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  void *v164;
  __int128 v165;
  unint64_t v166;
  ADAM::AudioDataAnalysisManager *v167;
  unint64_t v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  uint64_t *v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  std::string buf;
  __int16 v179;
  int v180;
  __int16 v181;
  uint64_t v182;
  uint64_t v183;

  v183 = *MEMORY[0x24BDAC8D0];
  ADAM::AudioDataAnalysisManager::instance(a1);
  if (ADAM::isSpeechAnalysisEnabled(void)::once != -1)
    dispatch_once(&ADAM::isSpeechAnalysisEnabled(void)::once, &__block_literal_global_27);
  if (!ADAM::isSpeechAnalysisEnabled(void)::ans)
  {
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      result = (uint64_t)*(id *)ADAM::ADAMLogScope(void)::scope;
      v15 = result;
      if (!result)
        return result;
    }
    else
    {
      v15 = MEMORY[0x24BDACB70];
      v16 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"AudioDataAnalysisManager.cpp";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 182;
      _os_log_impl(&dword_216CFB000, v15, OS_LOG_TYPE_INFO, "%25s:%-5d speech analysis is disabled", (uint8_t *)&buf, 0x12u);
    }
LABEL_24:

    return 0;
  }
  ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1);
  if (!ClientSessionMananger)
    return 561211748;
  v13 = ClientSessionMananger;
  if (ADAM::hasEntitlementForSensorkitSiri(void)::once != -1)
    dispatch_once(&ADAM::hasEntitlementForSensorkitSiri(void)::once, &__block_literal_global_52);
  if (ADAM::hasEntitlementForSensorkitSiri(void)::ans)
  {
LABEL_8:
    if (std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((_QWORD *)(v13 + 16), a2))
    {
      return 1852400673;
    }
    v17 = operator new();
    v18 = a2 | (*(_QWORD *)(v13 + 8) << 32);
    *(_QWORD *)v17 = &unk_24D616870;
    *(_BYTE *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 16) = v18;
    *(_QWORD *)(v17 + 24) = 0x1000000000;
    std::vector<ADAM::BufferNodeMsg>::vector((_QWORD *)(v17 + 32), 0x10uLL);
    *(_DWORD *)(v17 + 56) = 0;
    *(_QWORD *)v17 = off_24D6163B8;
    EndPointBitMask = ADAM::BufferNodeBase::getEndPointBitMask((uint64_t *)a3, 2);
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      buf = *(std::string *)a3;
    v173 = (uint64_t *)(v13 + 16);
    *(_QWORD *)(v17 + 64) = off_24D6168E0;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)buf.__r_.__value_.__r.__words[0];
      std::string::__init_copy_ctor_external((std::string *)(v17 + 72), buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
      *(_QWORD *)(v17 + 96) = EndPointBitMask;
      *(_DWORD *)(v17 + 104) = 0;
      operator delete(v20);
    }
    else
    {
      *(std::string *)(v17 + 72) = buf;
      *(_QWORD *)(v17 + 96) = EndPointBitMask;
      *(_DWORD *)(v17 + 104) = 0;
    }
    v21 = a4[1];
    v22 = *a4;
    *(_OWORD *)(v17 + 112) = *a4;
    *(_OWORD *)(v17 + 128) = v21;
    *(_QWORD *)(v17 + 64) = off_24D616408;
    *(_QWORD *)(v17 + 144) = *((_QWORD *)a4 + 4);
    *(_DWORD *)(v17 + 152) = (_DWORD)a5;
    *(_BYTE *)(v17 + 156) = a6;
    *(_QWORD *)(v17 + 232) = 0;
    *(_QWORD *)(v17 + 168) = 0;
    *(_DWORD *)(v17 + 176) = 0;
    *(_DWORD *)(v17 + 180) = (_DWORD)a5;
    *(_DWORD *)(v17 + 184) = *((_DWORD *)a4 + 6) * (_DWORD)a5;
    *(_DWORD *)(v17 + 188) = 16;
    *(_OWORD *)(v17 + 192) = v22;
    *(_OWORD *)(v17 + 208) = a4[1];
    *(_QWORD *)(v17 + 224) = *((_QWORD *)a4 + 4);
    *(_QWORD *)(v17 + 240) = 0;
    *(_QWORD *)(v17 + 248) = 0;
    v23 = (char *)operator new(0x500uLL);
    *(_QWORD *)(v17 + 232) = v23;
    v24 = v23 + 1280;
    *(_QWORD *)(v17 + 248) = v23 + 1280;
    bzero(v23, 0x500uLL);
    *(_QWORD *)(v17 + 240) = v24;
    ADAM::allocAudioBufferList((ADAM *)(v17 + 160), (AudioBufferList **)(v17 + 192), a5, 16);
    bzero(*(void **)(v17 + 232), 80 * *(unsigned int *)(v17 + 188));
    *(_DWORD *)(v17 + 168) = 0;
    *(_DWORD *)(v17 + 172) = 0;
    *(_DWORD *)(v17 + 176) = 0;
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v25 = (unint64_t)*(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v25)
        goto LABEL_48;
    }
    else
    {
      v25 = MEMORY[0x24BDACB70];
      v26 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_DEFAULT))
    {
      v27 = *((_DWORD *)a4 + 6);
      v28 = *(_QWORD *)a4;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADAMRingBuffer.cpp";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 23;
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = v27;
      v179 = 1024;
      v180 = (int)a5;
      v181 = 2048;
      v182 = v28;
      _os_log_impl(&dword_216CFB000, (os_log_t)v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioRingBuffer instantiated: frameSize: %u, blksz: %u sample rate: %.2lf", (uint8_t *)&buf, 0x28u);
    }

LABEL_48:
    v29 = *(_QWORD *)(v13 + 24);
    if (v29)
    {
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
      v30.i16[0] = vaddlv_u8(v30);
      if (v30.u32[0] > 1uLL)
      {
        v25 = a2;
        if (v29 <= a2)
          v25 = a2 % v29;
      }
      else
      {
        v25 = ((_DWORD)v29 - 1) & a2;
      }
      v31 = *(uint64_t ***)(*v173 + 8 * v25);
      if (v31)
      {
        for (i = *v31; i; i = (uint64_t *)*i)
        {
          v33 = i[1];
          if (v33 == a2)
          {
            if (*((_DWORD *)i + 4) == a2)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 56))(v17);
              goto LABEL_91;
            }
          }
          else
          {
            if (v30.u32[0] > 1uLL)
            {
              if (v33 >= v29)
                v33 %= v29;
            }
            else
            {
              v33 &= v29 - 1;
            }
            if (v33 != v25)
              break;
          }
        }
      }
    }
    v34 = operator new(0x20uLL);
    *v34 = 0;
    v34[1] = a2;
    *((_DWORD *)v34 + 4) = a2;
    v34[3] = v17;
    v35 = (float)(unint64_t)(*(_QWORD *)(v13 + 40) + 1);
    v36 = *(float *)(v13 + 48);
    if (!v29 || (float)(v36 * (float)v29) < v35)
    {
      v37 = 1;
      if (v29 >= 3)
        v37 = (v29 & (v29 - 1)) != 0;
      v38 = v37 | (2 * v29);
      v39 = vcvtps_u32_f32(v35 / v36);
      if (v38 <= v39)
        v40 = v39;
      else
        v40 = v38;
      std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>>>::__rehash<true>((uint64_t)v173, v40);
      v29 = *(_QWORD *)(v13 + 24);
      if ((v29 & (v29 - 1)) != 0)
      {
        if (v29 <= a2)
          v25 = a2 % v29;
        else
          v25 = a2;
      }
      else
      {
        v25 = ((_DWORD)v29 - 1) & a2;
      }
    }
    v42 = *v173;
    v43 = *(_QWORD **)(*v173 + 8 * v25);
    if (v43)
    {
      *v34 = *v43;
    }
    else
    {
      *v34 = *(_QWORD *)(v13 + 32);
      *(_QWORD *)(v13 + 32) = v34;
      *(_QWORD *)(v42 + 8 * v25) = v13 + 32;
      if (!*v34)
        goto LABEL_90;
      v44 = *(_QWORD *)(*v34 + 8);
      if ((v29 & (v29 - 1)) != 0)
      {
        if (v44 >= v29)
          v44 %= v29;
      }
      else
      {
        v44 &= v29 - 1;
      }
      v43 = (_QWORD *)(*v173 + 8 * v44);
    }
    *v43 = v34;
LABEL_90:
    ++*(_QWORD *)(v13 + 40);
LABEL_91:
    v45 = (std::__shared_weak_count *)operator new(0x30uLL);
    v45->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    v45->__shared_weak_owners_ = 0;
    v45->__vftable = (std::__shared_weak_count_vtbl *)&off_24D6167E8;
    v45[1].__vftable = 0;
    v47 = (unint64_t *)&v45[1];
    v45[1].__shared_owners_ = 0;
    v45[1].__shared_weak_owners_ = 0;
    LODWORD(v45[1].__shared_weak_owners_) = 3;
    v45[1].__shared_owners_ = a2 | (*(_QWORD *)(v13 + 8) << 32);
    v48 = (std::mutex *)(v13 + 320);
    std::mutex::lock((std::mutex *)(v13 + 320));
    v49 = (char **)(v13 + 392);
    v50 = *(char **)(v13 + 400);
    v51 = *(char **)(v13 + 392);
    v52 = v50 - v51;
    if (v50 == v51)
      v53 = 0;
    else
      v53 = 32 * (v50 - v51) - 1;
    v54 = *(_QWORD *)(v13 + 416);
    v55 = *(_QWORD *)(v13 + 424) + v54;
    if (v53 == v55)
    {
      if (v54 < 0x100)
      {
        v71 = v52 >> 3;
        v72 = *(char **)(v13 + 408);
        v73 = *(char **)(v13 + 384);
        if (v52 >> 3 >= (unint64_t)((v72 - v73) >> 3))
        {
          if (v72 == v73)
            v74 = 1;
          else
            v74 = (v72 - v73) >> 2;
          v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v74);
          v169 = v76;
          v77 = v75;
          v78 = &v75[8 * v71];
          *(_QWORD *)&v79 = v75;
          *((_QWORD *)&v79 + 1) = v78;
          v174 = v79;
          v80 = operator new(0x1000uLL);
          *(_QWORD *)&v81 = v78;
          *((_QWORD *)&v81 + 1) = &v77[8 * v169];
          if (v71 == v169)
          {
            v82 = v78 - v77;
            *(_QWORD *)&v83 = v174;
            if (v52 < 1)
            {
              v102 = v80;
              v103 = v82 >> 2;
              if (v50 == v51)
                v104 = 1;
              else
                v104 = v103;
              v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v104);
              v78 = &v105[8 * (v104 >> 2)];
              *(_QWORD *)&v83 = v105;
              *((_QWORD *)&v83 + 1) = v78;
              *(_QWORD *)&v81 = v78;
              *((_QWORD *)&v81 + 1) = &v105[8 * v106];
              if (v77)
              {
                v170 = v81;
                v175 = v83;
                operator delete(v77);
                v81 = v170;
                v83 = v175;
              }
              v80 = v102;
            }
            else
            {
              v84 = v82 >> 3;
              if (v84 >= -1)
                v85 = v84 + 1;
              else
                v85 = v84 + 2;
              v78 -= 8 * (v85 >> 1);
              *(_QWORD *)&v81 = v78;
              *((_QWORD *)&v83 + 1) = v78;
            }
          }
          else
          {
            v83 = v174;
          }
          *(_QWORD *)v78 = v80;
          *(_QWORD *)&v81 = v81 + 8;
          for (j = *(char **)(v13 + 400); j != *v49; j -= 8)
          {
            v108 = (_QWORD *)*((_QWORD *)&v83 + 1);
            if (*((_QWORD *)&v83 + 1) == (_QWORD)v83)
            {
              v110 = (_BYTE *)v81;
              if ((unint64_t)v81 >= *((_QWORD *)&v81 + 1))
              {
                if (*((_QWORD *)&v81 + 1) == *((_QWORD *)&v83 + 1))
                  v115 = 1;
                else
                  v115 = (uint64_t)(*((_QWORD *)&v81 + 1) - *((_QWORD *)&v83 + 1)) >> 2;
                v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v115);
                v109 = &v116[(2 * v115 + 6) & 0xFFFFFFFFFFFFFFF8];
                v118 = v109;
                v119 = v110 - (_BYTE *)v108;
                if (v110 != (_BYTE *)v108)
                {
                  v118 = &v109[v119 & 0xFFFFFFFFFFFFFFF8];
                  v120 = 8 * (v119 >> 3);
                  v121 = v109;
                  v122 = v108;
                  do
                  {
                    v123 = *v122++;
                    *(_QWORD *)v121 = v123;
                    v121 += 8;
                    v120 -= 8;
                  }
                  while (v120);
                }
                *(_QWORD *)&v83 = v116;
                *((_QWORD *)&v83 + 1) = v109;
                *(_QWORD *)&v81 = v118;
                *((_QWORD *)&v81 + 1) = &v116[8 * v117];
                if (v108)
                {
                  v171 = v81;
                  v177 = v83;
                  operator delete(v108);
                  v81 = v171;
                  v83 = v177;
                }
              }
              else
              {
                v111 = (uint64_t)(*((_QWORD *)&v81 + 1) - v81) >> 3;
                if (v111 >= -1)
                  v112 = v111 + 1;
                else
                  v112 = v111 + 2;
                v113 = v112 >> 1;
                v114 = v81 + 8 * (v112 >> 1);
                v109 = (char *)(v114 - (v81 - *((_QWORD *)&v83 + 1)));
                if ((_QWORD)v81 == *((_QWORD *)&v83 + 1))
                {
                  v110 = (_BYTE *)*((_QWORD *)&v83 + 1);
                }
                else
                {
                  v172 = *((_QWORD *)&v81 + 1);
                  v176 = v83;
                  memmove((void *)(v114 - (v81 - *((_QWORD *)&v83 + 1))), *((const void **)&v83 + 1), v81 - *((_QWORD *)&v83 + 1));
                  *((_QWORD *)&v81 + 1) = v172;
                  *(_QWORD *)&v83 = v176;
                }
                *((_QWORD *)&v83 + 1) = v109;
                *(_QWORD *)&v81 = &v110[8 * v113];
              }
            }
            else
            {
              v109 = (char *)*((_QWORD *)&v83 + 1);
            }
            v124 = *((_QWORD *)j - 1);
            *((_QWORD *)v109 - 1) = v124;
            *((_QWORD *)&v83 + 1) -= 8;
          }
          v125 = *(void **)(v13 + 384);
          *(_OWORD *)(v13 + 384) = v83;
          *(_OWORD *)(v13 + 400) = v81;
          v47 = (unint64_t *)&v45[1];
          v48 = (std::mutex *)(v13 + 320);
          if (v125)
            operator delete(v125);
        }
        else
        {
          if (v72 == v50)
          {
            v99 = operator new(0x1000uLL);
            v100 = *(char **)(v13 + 392);
            if (v100 == *(char **)(v13 + 384))
            {
              v126 = *(_BYTE **)(v13 + 400);
              v127 = *(_BYTE **)(v13 + 408);
              if (v126 >= v127)
              {
                if (v127 == v100)
                  v131 = 1;
                else
                  v131 = (v127 - v100) >> 2;
                v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v131);
                v101 = &v132[(2 * v131 + 6) & 0xFFFFFFFFFFFFFFF8];
                v134 = *(uint64_t **)(v13 + 392);
                v135 = v101;
                v136 = *(_QWORD *)(v13 + 400) - (_QWORD)v134;
                if (v136)
                {
                  v135 = &v101[v136 & 0xFFFFFFFFFFFFFFF8];
                  v137 = 8 * (v136 >> 3);
                  v138 = v101;
                  do
                  {
                    v139 = *v134++;
                    *(_QWORD *)v138 = v139;
                    v138 += 8;
                    v137 -= 8;
                  }
                  while (v137);
                }
                v140 = *(void **)(v13 + 384);
                *(_QWORD *)(v13 + 384) = v132;
                *(_QWORD *)(v13 + 392) = v101;
                *(_QWORD *)(v13 + 400) = v135;
                *(_QWORD *)(v13 + 408) = &v132[8 * v133];
                if (v140)
                {
                  operator delete(v140);
                  v101 = *v49;
                }
              }
              else
              {
                v128 = (v127 - v126) >> 3;
                if (v128 >= -1)
                  v129 = v128 + 1;
                else
                  v129 = v128 + 2;
                v130 = v129 >> 1;
                v101 = &v100[8 * (v129 >> 1)];
                if (v126 != v100)
                {
                  memmove(&v100[8 * (v129 >> 1)], v100, v126 - v100);
                  v100 = *(char **)(v13 + 400);
                }
                *(_QWORD *)(v13 + 392) = v101;
                *(_QWORD *)(v13 + 400) = &v100[8 * v130];
              }
            }
            else
            {
              v101 = *(char **)(v13 + 392);
            }
            *((_QWORD *)v101 - 1) = v99;
            v141 = *(char **)(v13 + 392);
            v142 = *(char **)(v13 + 400);
            *(_QWORD *)(v13 + 392) = v141 - 8;
            v143 = *((_QWORD *)v141 - 1);
            *(_QWORD *)(v13 + 392) = v141;
            if (v142 == *(char **)(v13 + 408))
            {
              v144 = *(_QWORD *)(v13 + 384);
              v145 = (uint64_t)&v141[-v144];
              if ((unint64_t)v141 <= v144)
              {
                v153 = (uint64_t)&v142[-v144];
                v86 = v153 == 0;
                v154 = v153 >> 2;
                if (v86)
                  v155 = 1;
                else
                  v155 = v154;
                v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v155);
                v158 = &v156[8 * (v155 >> 2)];
                v159 = *(uint64_t **)(v13 + 392);
                v142 = v158;
                v160 = *(_QWORD *)(v13 + 400) - (_QWORD)v159;
                if (v160)
                {
                  v142 = &v158[v160 & 0xFFFFFFFFFFFFFFF8];
                  v161 = 8 * (v160 >> 3);
                  v162 = &v156[8 * (v155 >> 2)];
                  do
                  {
                    v163 = *v159++;
                    *(_QWORD *)v162 = v163;
                    v162 += 8;
                    v161 -= 8;
                  }
                  while (v161);
                }
                v164 = *(void **)(v13 + 384);
                *(_QWORD *)(v13 + 384) = v156;
                *(_QWORD *)(v13 + 392) = v158;
                *(_QWORD *)(v13 + 400) = v142;
                *(_QWORD *)(v13 + 408) = &v156[8 * v157];
                if (v164)
                {
                  operator delete(v164);
                  v142 = *(char **)(v13 + 400);
                }
              }
              else
              {
                v146 = v145 >> 3;
                v62 = v145 >> 3 < -1;
                v147 = (v145 >> 3) + 2;
                if (v62)
                  v148 = v147;
                else
                  v148 = v146 + 1;
                v149 = -(v148 >> 1);
                v150 = v148 >> 1;
                v151 = &v141[-8 * v150];
                v152 = v142 - v141;
                if (v142 != v141)
                {
                  memmove(&v141[-8 * v150], v141, v142 - v141);
                  v141 = *v49;
                }
                v142 = &v151[v152];
                *(_QWORD *)(v13 + 392) = &v141[8 * v149];
                *(_QWORD *)(v13 + 400) = &v151[v152];
              }
            }
            *(_QWORD *)v142 = v143;
          }
          else
          {
            *(_QWORD *)v50 = operator new(0x1000uLL);
          }
          *(_QWORD *)(v13 + 400) += 8;
          v47 = (unint64_t *)&v45[1];
          v48 = (std::mutex *)(v13 + 320);
        }
      }
      else
      {
        *(_QWORD *)(v13 + 416) = v54 - 256;
        v58 = *(_QWORD *)v51;
        v56 = v51 + 8;
        v57 = v58;
        *(_QWORD *)(v13 + 392) = v56;
        if (*(char **)(v13 + 408) == v50)
        {
          v59 = *(_QWORD *)(v13 + 384);
          v60 = (uint64_t)&v56[-v59];
          if ((unint64_t)v56 <= v59)
          {
            v87 = (uint64_t)&v50[-v59];
            v86 = v87 == 0;
            v88 = v87 >> 2;
            if (v86)
              v89 = 1;
            else
              v89 = v88;
            v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v89);
            v92 = &v90[8 * (v89 >> 2)];
            v93 = *(uint64_t **)(v13 + 392);
            v50 = v92;
            v94 = *(_QWORD *)(v13 + 400) - (_QWORD)v93;
            if (v94)
            {
              v50 = &v92[v94 & 0xFFFFFFFFFFFFFFF8];
              v95 = 8 * (v94 >> 3);
              v96 = &v90[8 * (v89 >> 2)];
              do
              {
                v97 = *v93++;
                *(_QWORD *)v96 = v97;
                v96 += 8;
                v95 -= 8;
              }
              while (v95);
            }
            v98 = *(void **)(v13 + 384);
            *(_QWORD *)(v13 + 384) = v90;
            *(_QWORD *)(v13 + 392) = v92;
            *(_QWORD *)(v13 + 400) = v50;
            *(_QWORD *)(v13 + 408) = &v90[8 * v91];
            v48 = (std::mutex *)(v13 + 320);
            if (v98)
            {
              operator delete(v98);
              v50 = *(char **)(v13 + 400);
            }
          }
          else
          {
            v61 = v60 >> 3;
            v62 = v60 >> 3 < -1;
            v63 = (v60 >> 3) + 2;
            if (v62)
              v64 = v63;
            else
              v64 = v61 + 1;
            v65 = -(v64 >> 1);
            v66 = v64 >> 1;
            v67 = &v56[-8 * v66];
            v68 = v50 - v56;
            if (v50 == v56)
            {
              v70 = v50;
            }
            else
            {
              v69 = &v56[-8 * v66];
              memmove(v69, v56, v68);
              v67 = v69;
              v70 = *v49;
            }
            v50 = &v67[v68];
            *(_QWORD *)(v13 + 392) = &v70[8 * v65];
            *(_QWORD *)(v13 + 400) = &v67[v68];
            v48 = (std::mutex *)(v13 + 320);
            v47 = (unint64_t *)&v45[1];
          }
        }
        *(_QWORD *)v50 = v57;
        *(_QWORD *)(v13 + 400) += 8;
      }
      v51 = *(char **)(v13 + 392);
      v55 = *(_QWORD *)(v13 + 424) + *(_QWORD *)(v13 + 416);
    }
    *(_QWORD *)&v165 = v47;
    *((_QWORD *)&v165 + 1) = v45;
    *(_OWORD *)(*(_QWORD *)&v51[(v55 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v55) = v165;
    do
      v166 = __ldxr(p_shared_owners);
    while (__stxr(v166 + 1, p_shared_owners));
    ++*(_QWORD *)(v13 + 424);
    std::mutex::unlock(v48);
    ADAM::AudioDataAnalysisManager::instance(v167);
    ADAM::AudioDataAnalysisManager::signal(v47);
    do
      v168 = __ldaxr(p_shared_owners);
    while (__stlxr(v168 - 1, p_shared_owners));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    return 0;
  }
  if (ADAM::hasEntitlementForSensorkitTelephony(void)::once != -1)
    dispatch_once(&ADAM::hasEntitlementForSensorkitTelephony(void)::once, &__block_literal_global_55);
  if (ADAM::hasEntitlementForSensorkitTelephony(void)::ans)
  {
    if (*(_BYTE *)(v13 + 433))
      goto LABEL_8;
  }
  else
  {
    if (ADAM::isXCTest(void)::once != -1)
      dispatch_once(&ADAM::isXCTest(void)::once, &__block_literal_global_45);
    if (ADAM::isXCTest(void)::isXCTest)
      goto LABEL_8;
  }
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (!ADAM::ADAMLogScope(void)::scope)
  {
    v15 = MEMORY[0x24BDACB70];
    v41 = MEMORY[0x24BDACB70];
LABEL_77:
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADAMClientSessionManager.cpp";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 357;
      _os_log_impl(&dword_216CFB000, v15, OS_LOG_TYPE_INFO, "%25s:%-5d speech analysis is not monitoring", (uint8_t *)&buf, 0x12u);
    }
    goto LABEL_24;
  }
  result = (uint64_t)*(id *)ADAM::ADAMLogScope(void)::scope;
  v15 = result;
  if (result)
    goto LABEL_77;
  return result;
}

void sub_216D30D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, __int128 a13)
{
  void *v13;
  unint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t v17;

  operator delete(v13);
  if ((_QWORD)a13)
    operator delete((void *)a13);
  std::mutex::unlock(a10);
  do
    v17 = __ldaxr(v14);
  while (__stlxr(v17 - 1, v14));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(a1);
}

uint64_t AudioDataAnalysisManagerCreateNodeSPL(ADAM::AudioDataAnalysisManager *a1, unsigned int a2, uint64_t a3)
{
  uint64_t ClientSessionMananger;
  uint64_t v7;
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t EndPointBitMask;
  void *v13;
  _OWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  uint64_t **v18;
  uint64_t *i;
  unint64_t v20;
  _QWORD *v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  std::string v31;

  ADAM::AudioDataAnalysisManager::instance(a1);
  ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1);
  if (!ClientSessionMananger)
    return 561211748;
  v7 = ClientSessionMananger;
  v8 = (uint64_t *)(ClientSessionMananger + 16);
  if (std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((_QWORD *)(ClientSessionMananger + 16), a2))
  {
    return 1852400673;
  }
  v10 = operator new();
  v11 = a2 | (*(_QWORD *)(v7 + 8) << 32);
  *(_QWORD *)v10 = &unk_24D616870;
  *(_BYTE *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = v11;
  *(_QWORD *)(v10 + 24) = 0x1000000001;
  std::vector<ADAM::BufferNodeMsg>::vector((_QWORD *)(v10 + 32), 0x10uLL);
  *(_DWORD *)(v10 + 56) = 0;
  *(_QWORD *)v10 = off_24D616820;
  EndPointBitMask = ADAM::BufferNodeBase::getEndPointBitMask((uint64_t *)a3, 65);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v31 = *(std::string *)a3;
  *(_QWORD *)(v10 + 64) = off_24D6168E0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = (void *)v31.__r_.__value_.__r.__words[0];
    std::string::__init_copy_ctor_external((std::string *)(v10 + 72), v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
    *(_QWORD *)(v10 + 96) = EndPointBitMask;
    *(_DWORD *)(v10 + 104) = 1;
    operator delete(v13);
  }
  else
  {
    *(std::string *)(v10 + 72) = v31;
    *(_QWORD *)(v10 + 96) = EndPointBitMask;
    *(_DWORD *)(v10 + 104) = 1;
  }
  *(_QWORD *)(v10 + 64) = off_24D6168C0;
  *(_DWORD *)(v10 + 108) = 1;
  *(_QWORD *)(v10 + 112) = 0;
  *(_DWORD *)(v10 + 120) = 0;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_DWORD *)(v10 + 176) = 16;
  v14 = operator new(0x140uLL);
  v14[18] = 0u;
  v14[19] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  *v14 = 0u;
  v14[1] = 0u;
  *(_QWORD *)(v10 + 152) = v14;
  *(_QWORD *)(v10 + 160) = v14 + 20;
  *(_QWORD *)(v10 + 168) = v14 + 20;
  v15 = (unint64_t)operator new(0x500uLL);
  bzero((void *)v15, 0x500uLL);
  *(_QWORD *)(v10 + 128) = v15;
  *(_QWORD *)(v10 + 136) = v15 + 1280;
  *(_QWORD *)(v10 + 144) = v15 + 1280;
  v16 = *(_QWORD *)(v7 + 24);
  if (v16)
  {
    v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      v15 = a2;
      if (v16 <= a2)
        v15 = a2 % v16;
    }
    else
    {
      v15 = ((_DWORD)v16 - 1) & a2;
    }
    v18 = *(uint64_t ***)(*v8 + 8 * v15);
    if (v18)
    {
      for (i = *v18; i; i = (uint64_t *)*i)
      {
        v20 = i[1];
        if (v20 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
            return 0;
          }
        }
        else
        {
          if (v17.u32[0] > 1uLL)
          {
            if (v20 >= v16)
              v20 %= v16;
          }
          else
          {
            v20 &= v16 - 1;
          }
          if (v20 != v15)
            break;
        }
      }
    }
  }
  v21 = operator new(0x20uLL);
  *v21 = 0;
  v21[1] = a2;
  *((_DWORD *)v21 + 4) = a2;
  v21[3] = v10;
  v22 = (float)(unint64_t)(*(_QWORD *)(v7 + 40) + 1);
  v23 = *(float *)(v7 + 48);
  if (!v16 || (float)(v23 * (float)v16) < v22)
  {
    v24 = 1;
    if (v16 >= 3)
      v24 = (v16 & (v16 - 1)) != 0;
    v25 = v24 | (2 * v16);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      v27 = v26;
    else
      v27 = v25;
    std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>>>::__rehash<true>((uint64_t)v8, v27);
    v16 = *(_QWORD *)(v7 + 24);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v16 <= a2)
        v15 = a2 % v16;
      else
        v15 = a2;
    }
    else
    {
      v15 = ((_DWORD)v16 - 1) & a2;
    }
  }
  v28 = *v8;
  v29 = *(_QWORD **)(*v8 + 8 * v15);
  if (v29)
  {
    *v21 = *v29;
LABEL_48:
    *v29 = v21;
    goto LABEL_49;
  }
  *v21 = *(_QWORD *)(v7 + 32);
  *(_QWORD *)(v7 + 32) = v21;
  *(_QWORD *)(v28 + 8 * v15) = v7 + 32;
  if (*v21)
  {
    v30 = *(_QWORD *)(*v21 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v30 >= v16)
        v30 %= v16;
    }
    else
    {
      v30 &= v16 - 1;
    }
    v29 = (_QWORD *)(*v8 + 8 * v30);
    goto LABEL_48;
  }
LABEL_49:
  result = 0;
  ++*(_QWORD *)(v7 + 40);
  return result;
}

void sub_216D31298(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  void *v5;

  operator delete(v2);
  *v1 = v3;
  v5 = (void *)v1[4];
  if (v5)
  {
    v1[5] = v5;
    operator delete(v5);
  }
  MEMORY[0x219A00DF0](v1, 0x10B3C401A3A0796);
  _Unwind_Resume(a1);
}

uint64_t AudioDataAnalysisManagerCreateNodeEnvSPL()
{
  return 1718511905;
}

uint64_t AudioDataAnalysisManagerCreateNodeEnvSoundClass()
{
  return 1718511905;
}

uint64_t AudioDataAnalysisManagerRemoveNode(ADAM::AudioDataAnalysisManager *a1, unsigned int a2)
{
  uint64_t ClientSessionMananger;
  _QWORD *v5;

  ADAM::AudioDataAnalysisManager::instance(a1);
  if (!byte_253D97668)
    return 1634625825;
  ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1);
  if (!ClientSessionMananger)
    return 561211748;
  v5 = (_QWORD *)(ClientSessionMananger + 16);
  if (!std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((_QWORD *)(ClientSessionMananger + 16), a2))return 1852400673;
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>>>::__erase_unique<unsigned int>(v5, a2);
  return 0;
}

uint64_t AudioDataAnalysisManagerInitialize(ADAM::AudioDataAnalysisManager *a1)
{
  ADAM::AudioDataAnalysisManager *v2;
  uint64_t ClientSessionMananger;
  uint64_t v4;
  void *v5;
  uint64_t *i;
  uint64_t result;
  NSObject *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[28];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  ADAM::AudioDataAnalysisManager::instance(a1);
  ADAM::AudioDataAnalysisManager::initialize(v2);
  ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1);
  if (!ClientSessionMananger)
    return 561211748;
  v4 = ClientSessionMananger;
  std::vector<ADAM::BufferNodeMsg>::vector(v12, *(_QWORD *)(ClientSessionMananger + 40));
  v5 = *(void **)(v4 + 296);
  if (v5)
  {
    *(_QWORD *)(v4 + 304) = v5;
    operator delete(v5);
  }
  *(_OWORD *)(v4 + 296) = *(_OWORD *)v12;
  *(_QWORD *)(v4 + 312) = *(_QWORD *)&v12[16];
  for (i = *(uint64_t **)(v4 + 32); i; i = (uint64_t *)*i)
  {
    *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)(v4 + 144), *((_DWORD *)i + 4), (_DWORD *)i + 4)+ 20) = 0;
    (**(void (***)(uint64_t))i[3])(i[3]);
  }
  *(_BYTE *)(v4 + 432) = 1;
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    result = (uint64_t)*(id *)ADAM::ADAMLogScope(void)::scope;
    v8 = result;
    if (!result)
      return result;
  }
  else
  {
    v8 = MEMORY[0x24BDACB70];
    v9 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(v4 + 40);
    v11 = *(_QWORD *)(v4 + 8);
    *(_DWORD *)v12 = 136315906;
    *(_QWORD *)&v12[4] = "ADAMClientSessionManager.cpp";
    *(_WORD *)&v12[12] = 1024;
    *(_DWORD *)&v12[14] = 323;
    *(_WORD *)&v12[18] = 2048;
    *(_QWORD *)&v12[20] = v10;
    v13 = 2048;
    v14 = v11;
    _os_log_impl(&dword_216CFB000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Created %lu buffers for session: %llx", v12, 0x26u);
  }

  return 0;
}

uint64_t AudioDataAnalysisManagerIsSessionInitialized(ADAM::AudioDataAnalysisManager *a1, _BYTE *a2)
{
  uint64_t ClientSessionMananger;
  uint64_t result;

  ADAM::AudioDataAnalysisManager::instance(a1);
  if (a2)
    *a2 = 0;
  ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1);
  if (ClientSessionMananger)
    result = 0;
  else
    result = 561211748;
  if (a2)
  {
    if (ClientSessionMananger)
    {
      result = 0;
      *a2 = *(_BYTE *)(ClientSessionMananger + 432);
    }
  }
  return result;
}

uint64_t AudioDataAnalysisManagerProcessAudio(unint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, _OWORD *a5)
{
  uint64_t v10;
  ADAM::session_lock_exclusive *v11;
  uint64_t v12;
  unsigned int v13;
  id v14;
  unsigned int v15;
  id v16;
  NSObject *v17;
  __int128 v19;
  __int128 v20;
  uint64_t *v21;
  _BYTE buf[32];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  ADAM::AudioDataAnalysisManager::instance((ADAM::AudioDataAnalysisManager *)a1);
  if (ADAM::isSpeechAnalysisEnabled(void)::once != -1)
    dispatch_once(&ADAM::isSpeechAnalysisEnabled(void)::once, &__block_literal_global_27);
  if (!ADAM::isSpeechAnalysisEnabled(void)::ans)
    return 0;
  v10 = 1634625825;
  if (!byte_253D97668)
    return v10;
  ADAM::session_lock_exclusive::session_lock_exclusive_flag::session_lock_exclusive_flag((ADAM::session_lock_exclusive::session_lock_exclusive_flag *)buf);
  if (!buf[0])
  {
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    v10 = 1835102241;
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v14 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v14)
        return v10;
    }
    else
    {
      v14 = (id)MEMORY[0x24BDACB70];
      v16 = MEMORY[0x24BDACB70];
    }
    v17 = v14;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AudioDataAnalysisManager.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 268;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = a2 | (a1 << 32);
      _os_log_impl(&dword_216CFB000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Session %llx, Map is mutating", buf, 0x1Cu);
    }

    return v10;
  }
  v11 = (ADAM::session_lock_exclusive *)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>>>::find<unsigned long long>(&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, a1);
  if (!v11)
  {
    ADAM::session_lock_exclusive::shared_cnt(0);
    do
      v15 = __ldxr((unsigned int *)&ADAM::session_lock_exclusive::shared_cnt(void)::_c);
    while (__stxr(v15 - 1, (unsigned int *)&ADAM::session_lock_exclusive::shared_cnt(void)::_c));
    return 561211748;
  }
  v12 = *((_QWORD *)v11 + 3);
  ADAM::session_lock_exclusive::shared_cnt(v11);
  do
    v13 = __ldxr((unsigned int *)&ADAM::session_lock_exclusive::shared_cnt(void)::_c);
  while (__stxr(v13 - 1, (unsigned int *)&ADAM::session_lock_exclusive::shared_cnt(void)::_c));
  if (!v12)
    return 561211748;
  if (*(_BYTE *)(v12 + 432))
  {
    if (ADAM::hasEntitlementForSensorkitSiri(void)::once != -1)
      dispatch_once(&ADAM::hasEntitlementForSensorkitSiri(void)::once, &__block_literal_global_52);
    if (ADAM::hasEntitlementForSensorkitSiri(void)::ans)
    {
      if (!+[ADAMSensorKitWriterFactory IsMonitoringSiri](ADAMSensorKitWriterFactory, "IsMonitoringSiri"))
        return 0;
    }
    else
    {
      if (ADAM::hasEntitlementForSensorkitTelephony(void)::once != -1)
        dispatch_once(&ADAM::hasEntitlementForSensorkitTelephony(void)::once, &__block_literal_global_55);
      if (ADAM::hasEntitlementForSensorkitTelephony(void)::ans)
      {
        if (!*(_BYTE *)(v12 + 433))
          return 0;
      }
      else
      {
        if (ADAM::isXCTest(void)::once != -1)
          dispatch_once(&ADAM::isXCTest(void)::once, &__block_literal_global_45);
        if (!ADAM::isXCTest(void)::isXCTest)
          return 0;
      }
    }
    if (std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((_QWORD *)(v12 + 16), a2))
    {
      v19 = a5[1];
      *(_OWORD *)buf = *a5;
      *(_OWORD *)&buf[16] = v19;
      v20 = a5[3];
      v23 = a5[2];
      v24 = v20;
      v26 = 0;
      v25 = a4;
      v21 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((_QWORD *)(v12 + 16), a2);
      if (!v21)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v21[3] + 16))(v21[3], a3, buf);
    }
    else
    {
      return 1852400673;
    }
  }
  return v10;
}

void sub_216D3198C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int16 a10, __int16 a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  unsigned int v14;
  void *v16;
  int v17;
  unsigned int v18;
  void *v19;
  NSObject *v20;
  int v21;
  unsigned int v22;
  NSObject *v23;
  id v24;
  uint64_t v25;
  id v26;

  if (!a2)
    _Unwind_Resume(a1);
  v16 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v17 = ADAM::AudioDataAnalysisManager::processAudio(unsigned long long,unsigned int,AudioBufferList const&,unsigned int,AudioTimeStamp const&)::errCnt;
    v18 = ++ADAM::AudioDataAnalysisManager::processAudio(unsigned long long,unsigned int,AudioBufferList const&,unsigned int,AudioTimeStamp const&)::errCnt;
    if (v17)
    {
LABEL_20:
      if (v18 > 0xBB7)
        v18 = 0;
      ADAM::AudioDataAnalysisManager::processAudio(unsigned long long,unsigned int,AudioBufferList const&,unsigned int,AudioTimeStamp const&)::errCnt = v18;
      __cxa_end_catch();
      goto LABEL_32;
    }
    v19 = v16;
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v20 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v20)
      {
LABEL_19:

        v18 = ADAM::AudioDataAnalysisManager::processAudio(unsigned long long,unsigned int,AudioBufferList const&,unsigned int,AudioTimeStamp const&)::errCnt;
        goto LABEL_20;
      }
    }
    else
    {
      v20 = MEMORY[0x24BDACB70];
      v24 = MEMORY[0x24BDACB70];
    }
    v20 = v20;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
      LODWORD(a9) = 136316162;
      *(_QWORD *)((char *)&a9 + 4) = "AudioDataAnalysisManager.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 272;
      a11 = 2048;
      WORD2(a12) = 2048;
      *(_QWORD *)((char *)&a12 + 6) = v14 | (unint64_t)(v13 << 32);
      HIWORD(a12) = 2080;
      a13 = v25;
      _os_log_impl(&dword_216CFB000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception %p, session %llx, %s", (uint8_t *)&a9, 0x30u);
    }

    goto LABEL_19;
  }
  v21 = ADAM::AudioDataAnalysisManager::processAudio(unsigned long long,unsigned int,AudioBufferList const&,unsigned int,AudioTimeStamp const&)::errCnt;
  v22 = ++ADAM::AudioDataAnalysisManager::processAudio(unsigned long long,unsigned int,AudioBufferList const&,unsigned int,AudioTimeStamp const&)::errCnt;
  if (v21)
  {
LABEL_28:
    if (v22 > 0xBB7)
      v22 = 0;
    ADAM::AudioDataAnalysisManager::processAudio(unsigned long long,unsigned int,AudioBufferList const&,unsigned int,AudioTimeStamp const&)::errCnt = v22;
    __cxa_end_catch();
LABEL_32:
    JUMPOUT(0x216D31784);
  }
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v23 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v23)
    {
LABEL_27:

      v22 = ADAM::AudioDataAnalysisManager::processAudio(unsigned long long,unsigned int,AudioBufferList const&,unsigned int,AudioTimeStamp const&)::errCnt;
      goto LABEL_28;
    }
  }
  else
  {
    v23 = MEMORY[0x24BDACB70];
    v26 = MEMORY[0x24BDACB70];
  }
  v23 = v23;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    *(_QWORD *)((char *)&a9 + 4) = "AudioDataAnalysisManager.cpp";
    WORD6(a9) = 1024;
    LODWORD(a9) = 136315906;
    *(_DWORD *)((char *)&a9 + 14) = 274;
    a11 = 2048;
    WORD2(a12) = 2048;
    *(_QWORD *)((char *)&a12 + 6) = v14 | (unint64_t)(v13 << 32);
    _os_log_impl(&dword_216CFB000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception %p, session %llx", (uint8_t *)&a9, 0x26u);
  }

  goto LABEL_27;
}

uint64_t AudioDataAnalysisManagerProcessSPL(unint64_t a1, unsigned int a2, _OWORD *a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v16;
  ADAM::session_lock_exclusive *v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  uint64_t *v22;
  id v23;
  unsigned int v24;
  id v25;
  NSObject *v26;
  _DWORD v28[17];
  _BYTE buf[32];
  __int128 v30;
  __int128 v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v16 = 1634625825;
  ADAM::AudioDataAnalysisManager::instance((ADAM::AudioDataAnalysisManager *)a1);
  if (!byte_253D97668)
    return v16;
  ADAM::session_lock_exclusive::session_lock_exclusive_flag::session_lock_exclusive_flag((ADAM::session_lock_exclusive::session_lock_exclusive_flag *)buf);
  if (buf[0])
  {
    v17 = (ADAM::session_lock_exclusive *)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>>>::find<unsigned long long>(&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, a1);
    if (v17)
    {
      v18 = *((_QWORD *)v17 + 3);
      ADAM::session_lock_exclusive::shared_cnt(v17);
      do
        v19 = __ldxr((unsigned int *)&ADAM::session_lock_exclusive::shared_cnt(void)::_c);
      while (__stxr(v19 - 1, (unsigned int *)&ADAM::session_lock_exclusive::shared_cnt(void)::_c));
      if (v18)
      {
        if (*(_BYTE *)(v18 + 432))
        {
          if (std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((_QWORD *)(v18 + 16), a2))
          {
            v20 = a3[1];
            *(_OWORD *)buf = *a3;
            *(_OWORD *)&buf[16] = v20;
            v21 = a3[3];
            v30 = a3[2];
            v31 = v21;
            v33 = 0;
            v34 = 0;
            v32 = 1;
            *(float *)v28 = a4;
            *(float *)&v28[1] = a5;
            *(float *)&v28[2] = a6;
            *(float *)&v28[3] = a7;
            *(float *)&v28[4] = a8;
            v22 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((_QWORD *)(v18 + 16), a2);
            if (!v22)
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            return (*(uint64_t (**)(uint64_t, _DWORD *, _BYTE *))(*(_QWORD *)v22[3] + 16))(v22[3], v28, buf);
          }
          else
          {
            return 1852400673;
          }
        }
        return v16;
      }
    }
    else
    {
      ADAM::session_lock_exclusive::shared_cnt(0);
      do
        v24 = __ldxr((unsigned int *)&ADAM::session_lock_exclusive::shared_cnt(void)::_c);
      while (__stxr(v24 - 1, (unsigned int *)&ADAM::session_lock_exclusive::shared_cnt(void)::_c));
    }
    return 561211748;
  }
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  v16 = 1835102241;
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v23 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v23)
      return v16;
  }
  else
  {
    v23 = (id)MEMORY[0x24BDACB70];
    v25 = MEMORY[0x24BDACB70];
  }
  v26 = v23;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AudioDataAnalysisManager.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 303;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = a2 | (a1 << 32);
    _os_log_impl(&dword_216CFB000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Session %llx, Map is mutating", buf, 0x1Cu);
  }

  return v16;
}

void sub_216D31E64(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf, __int16 a14, __int16 a15, __int128 a16, uint64_t a17)
{
  uint64_t v17;
  unsigned int v18;
  void *v20;
  int v21;
  unsigned int v22;
  void *v23;
  NSObject *v24;
  int v25;
  unsigned int v26;
  NSObject *v27;
  id v28;
  uint64_t v29;
  id v30;

  if (!a2)
    _Unwind_Resume(a1);
  v20 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v21 = ADAM::AudioDataAnalysisManager::processSPL(unsigned long long,unsigned int,float,float,float,float,float,AudioTimeStamp const&)::errCnt;
    v22 = ++ADAM::AudioDataAnalysisManager::processSPL(unsigned long long,unsigned int,float,float,float,float,float,AudioTimeStamp const&)::errCnt;
    if (v21)
    {
LABEL_20:
      if (v22 > 0xBB7)
        v22 = 0;
      ADAM::AudioDataAnalysisManager::processSPL(unsigned long long,unsigned int,float,float,float,float,float,AudioTimeStamp const&)::errCnt = v22;
      __cxa_end_catch();
      goto LABEL_32;
    }
    v23 = v20;
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v24 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v24)
      {
LABEL_19:

        v22 = ADAM::AudioDataAnalysisManager::processSPL(unsigned long long,unsigned int,float,float,float,float,float,AudioTimeStamp const&)::errCnt;
        goto LABEL_20;
      }
    }
    else
    {
      v24 = MEMORY[0x24BDACB70];
      v28 = MEMORY[0x24BDACB70];
    }
    v24 = v24;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v29 = (*(uint64_t (**)(void *))(*(_QWORD *)v23 + 16))(v23);
      LODWORD(buf) = 136316162;
      *(_QWORD *)((char *)&buf + 4) = "AudioDataAnalysisManager.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 307;
      a15 = 2048;
      WORD2(a16) = 2048;
      *(_QWORD *)((char *)&a16 + 6) = v18 | (unint64_t)(v17 << 32);
      HIWORD(a16) = 2080;
      a17 = v29;
      _os_log_impl(&dword_216CFB000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception %p, session %llx, %s", (uint8_t *)&buf, 0x30u);
    }

    goto LABEL_19;
  }
  v25 = ADAM::AudioDataAnalysisManager::processSPL(unsigned long long,unsigned int,float,float,float,float,float,AudioTimeStamp const&)::errCnt;
  v26 = ++ADAM::AudioDataAnalysisManager::processSPL(unsigned long long,unsigned int,float,float,float,float,float,AudioTimeStamp const&)::errCnt;
  if (v25)
  {
LABEL_28:
    if (v26 > 0xBB7)
      v26 = 0;
    ADAM::AudioDataAnalysisManager::processSPL(unsigned long long,unsigned int,float,float,float,float,float,AudioTimeStamp const&)::errCnt = v26;
    __cxa_end_catch();
LABEL_32:
    JUMPOUT(0x216D31D50);
  }
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v27 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v27)
    {
LABEL_27:

      v26 = ADAM::AudioDataAnalysisManager::processSPL(unsigned long long,unsigned int,float,float,float,float,float,AudioTimeStamp const&)::errCnt;
      goto LABEL_28;
    }
  }
  else
  {
    v27 = MEMORY[0x24BDACB70];
    v30 = MEMORY[0x24BDACB70];
  }
  v27 = v27;
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    *(_QWORD *)((char *)&buf + 4) = "AudioDataAnalysisManager.cpp";
    WORD6(buf) = 1024;
    LODWORD(buf) = 136315906;
    *(_DWORD *)((char *)&buf + 14) = 309;
    a15 = 2048;
    WORD2(a16) = 2048;
    *(_QWORD *)((char *)&a16 + 6) = v18 | (unint64_t)(v17 << 32);
    _os_log_impl(&dword_216CFB000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception %p, session %llx", (uint8_t *)&buf, 0x26u);
  }

  goto LABEL_27;
}

uint64_t AudioDataAnalysisManagerProcessEnvSPL()
{
  return 1718511905;
}

uint64_t AudioDataAnalysisManagerProcessEnvSoundClass()
{
  return 1718511905;
}

uint64_t AudioDataAnalysisManagerSetDeviceInfo(ADAM::AudioDataAnalysisManager *a1, uint64_t a2)
{
  uint64_t ClientSessionMananger;
  uint64_t v5;
  CFStringRef *v6;
  void *v7;
  const __CFString *v8;
  __CFString *v9;
  uint64_t v10;
  NSObject *v11;
  __CFString *v12;
  void *v13;
  __CFString *v14;
  id v15;
  void *v16;
  void *v17;
  double v18;
  const __CFDictionary *v19;
  CFDictionaryRef Copy;
  void *v21;
  void *v22;
  float v23;
  float v24;
  float v25;
  void *v26;
  void *v27;
  float v28;
  void *v29;
  void *v30;
  double v31;
  void *v32;
  void *v33;
  void *v34;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  ADAM::AudioDataAnalysisManager::instance(a1);
  ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1);
  if (!ClientSessionMananger)
    return 561211748;
  if (*(_QWORD *)a2)
  {
    v5 = ClientSessionMananger;
    v6 = (CFStringRef *)(ClientSessionMananger + 248);
    ADAM::releaseADAMDeviceInfo(ClientSessionMananger + 248);
    ADAM::copyDeviceInfo((CFStringRef *)a2, v6);
    ADAM::logDeviceInfo((uint64_t)v6);
    v7 = (void *)MEMORY[0x219A01060]();
    v8 = *(const __CFString **)(v5 + 248);
    if (v8)
    {
      if ((*(_BYTE *)(v5 + 280) & 4) != 0)
      {
        v9 = CFSTR("Codec");
        v12 = CFSTR("Codec");
      }
      else
      {
        v9 = (id)CFStringCreateCopy(0, v8);
        if (!v9)
        {
          v10 = 561017453;
LABEL_32:

          objc_autoreleasePoolPop(v7);
          return v10;
        }
      }
      v13 = *(void **)(v5 + 272);
      if (v13)
        v14 = (__CFString *)objc_msgSend(v13, "copy");
      else
        v14 = &stru_24D616C20;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", *(_QWORD *)(v5 + 280) & 2);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + 32) & 0x10);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = *(const __CFDictionary **)(v5 + 288);
      if (v19)
      {
        Copy = CFDictionaryCreateCopy(0, v19);
        -[__CFDictionary objectForKey:](Copy, "objectForKey:", CFSTR("ScalarVolume74"));
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = v21;
        if (v21)
        {
          objc_msgSend(v21, "floatValue");
          v24 = v23;
        }
        else
        {
          v24 = -1.0;
        }

        -[__CFDictionary objectForKey:](Copy, "objectForKey:", CFSTR("ScalarVolume80"));
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = v26;
        if (v26)
        {
          objc_msgSend(v26, "floatValue");
          v25 = v28;
        }
        else
        {
          v25 = -1.0;
        }

      }
      else
      {
        Copy = 0;
        v24 = -1.0;
        v25 = -1.0;
      }
      v29 = (void *)MEMORY[0x24BDBCE70];
      *(float *)&v18 = v24;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v18);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(float *)&v31 = v25;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "dictionaryWithObjectsAndKeys:", v9, *MEMORY[0x24BE3E7A8], v16, *MEMORY[0x24BE3E7B8], v17, *MEMORY[0x24BE3E7B0], v14, *MEMORY[0x24BE3E7A0], v30, *MEMORY[0x24BE3E7C0], v32, *MEMORY[0x24BE3E7C8], 0);
      v33 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BE3E7E8], "sharedInstance");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "deviceSessionCreated:SessionID:", v33, *(_QWORD *)(v5 + 8));

      v10 = 0;
      goto LABEL_32;
    }
    v10 = 561017453;
    v9 = 0;
    goto LABEL_32;
  }
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  v10 = 561017453;
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v11 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v11)
      return v10;
  }
  else
  {
    v11 = MEMORY[0x24BDACB70];
    v15 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v37 = "ADAMClientSessionManager.cpp";
    v38 = 1024;
    v39 = 119;
    _os_log_impl(&dword_216CFB000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Device name invalid", buf, 0x12u);
  }

  return v10;
}

void sub_216D32470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_216D324E8()
{
  JUMPOUT(0x216D324D4);
}

void sub_216D324F0()
{
  JUMPOUT(0x216D324D8);
}

void sub_216D324F8()
{
  JUMPOUT(0x216D324E0);
}

uint64_t AudioDataAnalysisManagerRegisterDeviceInfo(ADAM::AudioDataAnalysisManager *a1, uint64_t a2)
{
  void *v4;
  char v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  id v11;
  CFStringRef v12;
  uint64_t v13;
  void *v14;
  __CFString *v15;
  id v16;
  __CFString *v17;
  __CFString *Copy;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  CFStringRef v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  ADAM::AudioDataAnalysisManager::instance(a1);
  if (ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1))
  {
    objc_msgSend(MEMORY[0x24BE3E7E8], "sharedInstance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isUSBCPort");

    if ((v5 & 1) != 0)
    {
      if (*(_QWORD *)a2)
      {
        v6 = *(_QWORD *)(a2 + 24);
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (v6)
        {
          if (ADAM::ADAMLogScope(void)::scope)
          {
            v7 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v7)
              goto LABEL_32;
          }
          else
          {
            v7 = MEMORY[0x24BDACB70];
            v11 = MEMORY[0x24BDACB70];
          }
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            v12 = *(CFStringRef *)a2;
            v13 = *(_QWORD *)(a2 + 24);
            *(_DWORD *)buf = 136315906;
            v26 = "ADAMClientSessionManager.cpp";
            v27 = 1024;
            v28 = 201;
            v29 = 2112;
            v30 = v12;
            v31 = 2112;
            v32 = v13;
            _os_log_impl(&dword_216CFB000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device { name: %@  UUID: %@ }", buf, 0x26u);
          }

LABEL_32:
          v14 = (void *)MEMORY[0x219A01060]();
          if (*(_QWORD *)a2)
          {
            if ((*(_BYTE *)(a2 + 32) & 4) != 0)
            {
              v15 = CFSTR("Codec");
              v17 = CFSTR("Codec");
            }
            else
            {
              v15 = (id)CFStringCreateCopy(0, *(CFStringRef *)a2);
              if (!v15)
              {
                v8 = 561017453;
LABEL_43:

                objc_autoreleasePoolPop(v14);
                return v8;
              }
            }
            Copy = (__CFString *)CFStringCreateCopy(0, *(CFStringRef *)(a2 + 24));
            objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + 32) & 2);
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + 32) & 0x10);
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjectsAndKeys:", v15, *MEMORY[0x24BE3E7A8], v19, *MEMORY[0x24BE3E7B8], v20, *MEMORY[0x24BE3E7B0], Copy, *MEMORY[0x24BE3E7A0], 0);
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BE3E7E8], "sharedInstance");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "registerDevice:", v21);

            v8 = 0;
            goto LABEL_43;
          }
          v8 = 561017453;
          v15 = 0;
          goto LABEL_43;
        }
        v8 = 561017453;
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v9)
            return v8;
        }
        else
        {
          v9 = MEMORY[0x24BDACB70];
          v23 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v26 = "ADAMClientSessionManager.cpp";
          v27 = 1024;
          v28 = 197;
          _os_log_impl(&dword_216CFB000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Device UID invalid", buf, 0x12u);
        }
      }
      else
      {
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        v8 = 561017453;
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v9)
            return v8;
        }
        else
        {
          v9 = MEMORY[0x24BDACB70];
          v16 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v26 = "ADAMClientSessionManager.cpp";
          v27 = 1024;
          v28 = 191;
          _os_log_impl(&dword_216CFB000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Device name invalid", buf, 0x12u);
        }
      }
    }
    else
    {
      if (ADAM::ADAMLogScope(void)::once != -1)
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
      v8 = 561017453;
      if (ADAM::ADAMLogScope(void)::scope)
      {
        v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v9)
          return v8;
      }
      else
      {
        v9 = MEMORY[0x24BDACB70];
        v10 = MEMORY[0x24BDACB70];
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v26 = "ADAMClientSessionManager.cpp";
        v27 = 1024;
        v28 = 185;
        _os_log_impl(&dword_216CFB000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Registration is only for USBC devices", buf, 0x12u);
      }
    }

    return v8;
  }
  return 561211748;
}

void sub_216D329D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

uint64_t AudioDataAnalysisManagerSetDeviceConnectionState(ADAM::AudioDataAnalysisManager *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  id v13;
  id v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  __CFString *Copy;
  void *v19;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  ADAM::AudioDataAnalysisManager::instance(a1);
  if (!ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1))return 561211748;
  if (*(_QWORD *)(a2 + 24))
  {
    objc_msgSend(MEMORY[0x24BE3E7E8], "sharedInstance");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "isUSBCPort"))
    {
      v7 = *(_QWORD *)(a2 + 32);

      if ((v7 & 2) != 0)
      {
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v8 = *(id *)ADAM::ADAMLogScope(void)::scope;
          v10 = v8;
          if (!v8)
          {
LABEL_27:
            v17 = (void *)MEMORY[0x219A01060](v8, v9);
            Copy = (__CFString *)CFStringCreateCopy(0, *(CFStringRef *)(a2 + 24));
            objc_msgSend(MEMORY[0x24BE3E7E8], "sharedInstance");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "setDeviceConnectionState:isConnected:", Copy, a3);

            objc_autoreleasePoolPop(v17);
            return 0;
          }
        }
        else
        {
          v10 = MEMORY[0x24BDACB70];
          v14 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v15 = "disconnected";
          v22 = "ADAMClientSessionManager.cpp";
          v23 = 1024;
          v16 = *(_QWORD *)(a2 + 24);
          v21 = 136315906;
          if ((_DWORD)a3)
            v15 = "connected";
          v24 = 240;
          v25 = 2112;
          v26 = v16;
          v27 = 2080;
          v28 = v15;
          _os_log_impl(&dword_216CFB000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device { UUID: %@ is %s}", (uint8_t *)&v21, 0x26u);
        }

        goto LABEL_27;
      }
    }
    else
    {

    }
    return 0;
  }
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  v11 = 561017453;
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v12 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v12)
      return v11;
  }
  else
  {
    v12 = MEMORY[0x24BDACB70];
    v13 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v21 = 136315394;
    v22 = "ADAMClientSessionManager.cpp";
    v23 = 1024;
    v24 = 233;
    _os_log_impl(&dword_216CFB000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Device UID invalid", (uint8_t *)&v21, 0x12u);
  }

  return v11;
}

void sub_216D32CF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t AudioDataAnalysisManagerStartServices(ADAM::AudioDataAnalysisManager *a1)
{
  ADAM::AudioDataAnalysisManager *v1;

  ADAM::AudioDataAnalysisManager::instance(a1);
  ADAM::AudioDataAnalysisManager::initialize(v1);
  return 0;
}

uint64_t AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone(ADAM::AudioDataAnalysisManager *a1, void *a2)
{
  void *v4;
  id v5;
  int v6;

  if (a1)
  {
    ADAM::AudioDataAnalysisManager::instance(a1);
    v4 = (void *)MEMORY[0x219A01060]();
    if (a2)
      v5 = a2;
    v6 = objc_msgSend(MEMORY[0x24BE3E7F0], "connectedWiredDeviceIsHeadphoneWithUUID:", a2);

    objc_autoreleasePoolPop(v4);
    *(_DWORD *)a1 = v6;
  }
  return 0;
}

void sub_216D32DA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t AudioDataAnalysisManagerSetApplicationBundleID(ADAM::AudioDataAnalysisManager *a1, const void *a2)
{
  CFTypeID v3;
  const void *v4;

  ADAM::AudioDataAnalysisManager::instance(a1);
  if (a2)
  {
    CFRetain(a2);
    v3 = CFGetTypeID(a2);
    if (v3 != CFStringGetTypeID())
    {
      CFRelease(a2);
      a2 = 0;
    }
  }
  v4 = (const void *)qword_253D976D8;
  qword_253D976D8 = (uint64_t)a2;
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t std::__split_buffer<std::unique_ptr<ADAM::AnalysisNodeBase>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ADAM::AnalyzerManager::releaseData(ADAM::AnalyzerManager *this, const ADAM::BufferNodeDescriptorBase *a2)
{
  unsigned int *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  if (v3)
  {
    if (!*((_DWORD *)a2 + 10))
    {
      v4 = *v3;
      if ((_DWORD)v4)
      {
        v5 = 0;
        v6 = 4;
        do
        {
          if (*(_QWORD *)&v3[v6])
          {
            free(*(void **)&v3[v6]);
            v3 = (unsigned int *)*((_QWORD *)this + 3);
            v4 = *v3;
          }
          ++v5;
          v6 += 4;
        }
        while (v5 < v4);
      }
    }
    free(v3);
  }
  *((_QWORD *)this + 3) = 0;
}

uint64_t ADAM::AudioBufferWriter::write(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  _QWORD *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88), *(unsigned int *)(a3 + 64), a2, 1);
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v6 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v6)
      goto LABEL_12;
  }
  else
  {
    v6 = MEMORY[0x24BDACB70];
    v7 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v9 = (_QWORD *)*v9;
    v10 = *(_DWORD *)(a1 + 96) * *(_DWORD *)(a3 + 64);
    v13 = 136316418;
    v14 = "FileWriter.cpp";
    v15 = 1024;
    v16 = 35;
    v17 = 2048;
    v18 = v8;
    v19 = 2080;
    v20 = v9;
    v21 = 1024;
    v22 = v10;
    v23 = 1024;
    v24 = v5;
    _os_log_impl(&dword_216CFB000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session %llx: AudioBufferWriter [%s] wrote %u bytes; err: %d",
      (uint8_t *)&v13,
      0x32u);
  }

LABEL_12:
  v11 = *(_QWORD *)(a1 + 72);
  if (v11)
  {
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  }
  return 0;
}

void ADAM::AudioBufferWriter::~AudioBufferWriter(ADAM::AudioBufferWriter *this)
{
  ADAM::AudioBufferWriter::~AudioBufferWriter(this);
  JUMPOUT(0x219A00DF0);
}

{
  char *v2;
  uint64_t v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  void **v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24D616470;
  v2 = (char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 56))(*((_QWORD *)this + 11));
  std::string::basic_string[abi:ne180100]<0>(__p, v2);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v4 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v4)
      goto LABEL_14;
  }
  else
  {
    v4 = MEMORY[0x24BDACB70];
    v5 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v6 = *((_QWORD *)this + 1);
    v7 = __p;
    if (v10 < 0)
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 136315906;
    v12 = "FileWriter.cpp";
    v13 = 1024;
    v14 = 44;
    v15 = 2048;
    v16 = v6;
    v17 = 2080;
    v18 = v7;
    _os_log_impl(&dword_216CFB000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session %llx: AudioBufferWriter destroyed: %s", buf, 0x26u);
  }

LABEL_14:
  if (v10 < 0)
    operator delete(__p[0]);
  v8 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  ADAM::Writer::~Writer(this);
}

void sub_216D3326C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t ADAM::BinaryFileWriter::write(uint64_t a1)
{
  uint64_t v2;

  std::ostream::write();
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  }
  return 0;
}

void ADAM::BinaryFileWriter::~BinaryFileWriter(ADAM::BinaryFileWriter *this)
{
  ADAM::BinaryFileWriter::~BinaryFileWriter(this);
  JUMPOUT(0x219A00DF0);
}

{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24D6164B0;
  v2 = (char *)this + 120;
  v3 = (_QWORD *)((char *)this + 112);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | 4);
  v4 = MEMORY[0x24BEDB7E8];
  v5 = *MEMORY[0x24BEDB7E8];
  *((_QWORD *)this + 14) = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v5 - 24)) = *(_QWORD *)(v4 + 24);
  MEMORY[0x219A00BA4](v2);
  std::ostream::~ostream();
  MEMORY[0x219A00D54]((char *)this + 528);
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  ADAM::Writer::~Writer(this);
}

uint64_t ADAM::CsvFileWriter::write(uint64_t a1, float *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  unsigned int v10;
  NSObject *v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", ", 2);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", ", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n", 1);
  v9 = ADAM::CsvFileWriter::write(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
  v10 = ++ADAM::CsvFileWriter::write(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
  if (!v9)
  {
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v11 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v11)
      {
LABEL_11:
        v10 = ADAM::CsvFileWriter::write(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
        goto LABEL_12;
      }
    }
    else
    {
      v11 = MEMORY[0x24BDACB70];
      v12 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v13 = *a2;
      v14 = a2[1];
      v15 = a2[2];
      v16 = a2[3];
      v17 = a2[4];
      v20 = 136316674;
      v21 = "FileWriter.cpp";
      v22 = 1024;
      v23 = 86;
      v24 = 2048;
      v25 = v13;
      v26 = 2048;
      v27 = v14;
      v28 = 2048;
      v29 = v15;
      v30 = 2048;
      v31 = v16;
      v32 = 2048;
      v33 = v17;
      _os_log_impl(&dword_216CFB000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d dBA/dBC/LKFS/VolumeGain/Duration: %f, %f, %f, %f, %f", (uint8_t *)&v20, 0x44u);
    }

    goto LABEL_11;
  }
LABEL_12:
  if (v10 > 0x63)
    v10 = 0;
  ADAM::CsvFileWriter::write(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt = v10;
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
  {
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
  }
  return 0;
}

void ADAM::CsvFileWriter::~CsvFileWriter(ADAM::CsvFileWriter *this)
{
  ADAM::CsvFileWriter::~CsvFileWriter(this);
  JUMPOUT(0x219A00DF0);
}

{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24D6164F0;
  v2 = (char *)this + 120;
  v3 = (_QWORD *)((char *)this + 112);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | 4);
  v4 = MEMORY[0x24BEDB7E8];
  v5 = *MEMORY[0x24BEDB7E8];
  *((_QWORD *)this + 14) = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v5 - 24)) = *(_QWORD *)(v4 + 24);
  MEMORY[0x219A00BA4](v2);
  std::ostream::~ostream();
  MEMORY[0x219A00D54]((char *)this + 528);
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  ADAM::Writer::~Writer(this);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  size_t v16;
  std::locale::__imp *p_b;
  uint64_t v18;
  uint64_t v19;
  std::locale *v20;
  uint64_t v21;
  _BYTE v23[16];
  std::locale __b;
  size_t v25;
  int64_t v26;

  MEMORY[0x219A00BD4](v23, a1);
  if (v23[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&__b, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20)
      v12 = a2 + a3;
    else
      v12 = a2;
    if (!v7)
      goto LABEL_29;
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v16 >= 0x17)
      {
        v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v18 = v16 | 7;
        v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        v25 = v16;
        v26 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((_BYTE *)p_b + v16) = 0;
      v20 = v26 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(_QWORD *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(v26) < 0)
        operator delete(__b.__locale_);
      if (v21 != v16)
        goto LABEL_29;
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((_QWORD *)v6 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x219A00BE0](v23);
  return a1;
}

void sub_216D338B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x219A00BE0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x216D33884);
}

void sub_216D33910(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t ADAM::HAENotificationFileWriter::write(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const std::locale::facet *v4;
  uint64_t v5;
  std::locale v7;

  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" ", 1);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet(&v7, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v7);
  std::ostream::put();
  std::ostream::flush();
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  }
  return 0;
}

void sub_216D339EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void ADAM::HAENotificationFileWriter::~HAENotificationFileWriter(ADAM::HAENotificationFileWriter *this)
{
  ADAM::HAENotificationFileWriter::~HAENotificationFileWriter(this);
  JUMPOUT(0x219A00DF0);
}

{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24D616530;
  v2 = (char *)this + 120;
  v3 = (_QWORD *)((char *)this + 112);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | 4);
  v4 = MEMORY[0x24BEDB7E8];
  v5 = *MEMORY[0x24BEDB7E8];
  *((_QWORD *)this + 14) = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v5 - 24)) = *(_QWORD *)(v4 + 24);
  MEMORY[0x219A00BA4](v2);
  std::ostream::~ostream();
  MEMORY[0x219A00D54]((char *)this + 528);
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  ADAM::Writer::~Writer(this);
}

_QWORD *std::ofstream::basic_ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  a1[52] = MEMORY[0x24BEDB840] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x219A00B98](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_216D33BEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x219A00D54](v1 + 416);
  _Unwind_Resume(a1);
}

uint64_t ADAM::HAENotificationFileWriter::HAENotificationFileWriter(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  _QWORD *v8;
  __int128 v9;
  NSObject *v10;
  id v11;
  _BYTE __p[12];
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &unk_24D6165F0;
  *(_QWORD *)(a1 + 8) = a2;
  v5 = (std::string *)(a1 + 16);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_OWORD *)(a1 + 66) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)a1 = &off_24D616530;
  std::operator+<char>();
  v7 = std::string::append((std::string *)__p, ".txt", 4uLL);
  v8 = (_QWORD *)(a1 + 88);
  v9 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 104) = *((_QWORD *)&v7->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 88) = v9;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE3(v17) < 0)
    operator delete(*(void **)__p);
  std::ofstream::basic_ofstream((_QWORD *)(a1 + 112));
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v10 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v10)
      return a1;
  }
  else
  {
    v10 = MEMORY[0x24BDACB70];
    v11 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a1 + 111) < 0)
      v8 = (_QWORD *)*v8;
    *(_DWORD *)__p = 136315906;
    *(_QWORD *)&__p[4] = "FileWriter.cpp";
    v14 = 1024;
    v15 = 98;
    v16 = 2048;
    v17 = a2;
    v18 = 2080;
    v19 = v8;
    _os_log_impl(&dword_216CFB000, v10, OS_LOG_TYPE_INFO, "%25s:%-5d Session %llx: Created HAE Notification File Writer: %s", __p, 0x26u);
  }

  return a1;
}

void sub_216D33E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t ADAM::AnalysisFrameworkWriter::write(uint64_t a1, float *a2, uint64_t a3)
{
  _OWORD *v6;
  ADAM::AudioDataAnalysisManager *v7;
  uint64_t ClientSessionMananger;
  uint64_t v9;
  char v10;
  id v11;
  void *v12;
  NSObject *v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  ADAM::AudioDataAnalysisManager *v20;
  int v21;
  unsigned int v22;
  NSObject *v23;
  id v24;
  uint64_t v25;
  id *p_isa;
  const __CFString *v27;
  id WeakRetained;
  int v29;
  int v30;
  unsigned int v31;
  id v32;
  id v33;
  NSObject *v34;
  id v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  void *v39;
  const __CFString *v40;
  void *v41;
  float v42;
  unsigned __int8 v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  id *v50;
  id *v51;
  id v52;
  uint64_t v53;
  ADAM::Parameters *v55;
  ADAM::Parameters *v56;
  id *v57;
  id *v58;
  uint64_t v59;
  id **v60;
  _BYTE buf[28];
  __int16 v62;
  uint64_t v63;
  const __CFString *v64;
  const __CFString *v65;
  const __CFString *v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 88))
    goto LABEL_29;
  v6 = (_OWORD *)operator new();
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v7 = *(ADAM::AudioDataAnalysisManager **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v6;
  if (v7)
    v7 = (ADAM::AudioDataAnalysisManager *)MEMORY[0x219A00DF0](v7, 0x1060C4045DA4F00);
  ADAM::AudioDataAnalysisManager::instance(v7);
  ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, *(unsigned int *)(a1 + 12));
  if (ClientSessionMananger)
    v9 = ClientSessionMananger + 248;
  else
    v9 = 0;
  ADAM::copyDeviceInfo((CFStringRef *)v9, *(CFStringRef **)(a1 + 88));
  if ((*(_BYTE *)(v9 + 32) & 1) != 0)
    v10 = 1;
  else
    v10 = objc_msgSend(*(id *)(v9 + 8), "isEqualToString:", CFSTR("Apple Inc."));
  *(_BYTE *)(a1 + 96) = v10;
  v11 = objc_alloc_init(MEMORY[0x24BE0A230]);
  objc_msgSend(v11, "getPreferenceFor:", CFSTR("_ADAFPreferenceKeyHAENotificationIsMandatory"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(a1 + 97) = objc_msgSend(v12, "BOOLValue");

  ADAM::logDeviceInfo(*(_QWORD *)(a1 + 88));
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24))
  {
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v13 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v13)
        goto LABEL_20;
    }
    else
    {
      v13 = MEMORY[0x24BDACB70];
      v14 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AnalysisFrameworkWriter.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 111;
      _os_log_impl(&dword_216CFB000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unknown UUID for headset", buf, 0x12u);
    }

  }
LABEL_20:
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v15 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v15)
      goto LABEL_29;
  }
  else
  {
    v15 = (id)MEMORY[0x24BDACB70];
    v16 = MEMORY[0x24BDACB70];
  }
  v17 = v15;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", *(unsigned __int8 *)(a1 + 96));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", *(unsigned __int8 *)(a1 + 97));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "AnalysisFrameworkWriter.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 114;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = v18;
    v62 = 2112;
    v63 = (uint64_t)v19;
    _os_log_impl(&dword_216CFB000, v17, OS_LOG_TYPE_INFO, "%25s:%-5d headset calibrated: [%@], haen mandatory: [%@]", buf, 0x26u);

  }
LABEL_29:
  if (!a2)
    goto LABEL_69;
  v20 = (ADAM::AudioDataAnalysisManager *)ADAM::haeMeasurementEnabled((ADAM *)*(unsigned __int8 *)(a1 + 96), *(_BYTE *)(a1 + 97));
  if (!(_DWORD)v20)
    goto LABEL_69;
  v21 = ADAM::AnalysisFrameworkWriter::writeMediaSPLDataToDelegates(ADAM::SPLData const*,ADAM::Metadata const&)::errCnt;
  v22 = ++ADAM::AnalysisFrameworkWriter::writeMediaSPLDataToDelegates(ADAM::SPLData const*,ADAM::Metadata const&)::errCnt;
  if (!v21)
  {
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v20 = (ADAM::AudioDataAnalysisManager *)*(id *)ADAM::ADAMLogScope(void)::scope;
      v23 = v20;
      if (!v20)
      {
LABEL_41:
        v22 = ADAM::AnalysisFrameworkWriter::writeMediaSPLDataToDelegates(ADAM::SPLData const*,ADAM::Metadata const&)::errCnt;
        goto LABEL_42;
      }
    }
    else
    {
      v23 = MEMORY[0x24BDACB70];
      v24 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      *(double *)&v25 = *a2;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AnalysisFrameworkWriter.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 54;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "writeMediaSPLDataToDelegates";
      v62 = 2048;
      v63 = v25;
      _os_log_impl(&dword_216CFB000, v23, OS_LOG_TYPE_INFO, "%25s:%-5d %s : %.2f", buf, 0x26u);
    }

    goto LABEL_41;
  }
LABEL_42:
  if (v22 > 0x1D)
    v22 = 0;
  ADAM::AnalysisFrameworkWriter::writeMediaSPLDataToDelegates(ADAM::SPLData const*,ADAM::Metadata const&)::errCnt = v22;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  ADAM::AudioDataAnalysisManager::instance(v20);
  ADAM::AudioDataAnalysisManager::getServerDelegates((uint64_t)&v64, 0x68616574u);
  p_isa = &v64->isa;
  v27 = v65;
  while (p_isa != (id *)v27)
  {
    WeakRetained = objc_loadWeakRetained(p_isa);
    v29 = objc_msgSend(WeakRetained, "isActive:", 1751213428);

    if (v29)
      std::vector<ADAMServerDelegate * {__weak}>::push_back[abi:ne180100]((uint64_t)&v57, p_isa);
    ++p_isa;
  }
  v30 = ADAM::AnalysisFrameworkWriter::getClientDelegates(ADAMAudioDataAnalysisType)const::errCnt;
  v31 = ++ADAM::AnalysisFrameworkWriter::getClientDelegates(ADAMAudioDataAnalysisType)const::errCnt;
  if (v30)
    goto LABEL_60;
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (!ADAM::ADAMLogScope(void)::scope)
  {
    v32 = (id)MEMORY[0x24BDACB70];
    v33 = MEMORY[0x24BDACB70];
    goto LABEL_56;
  }
  v32 = *(id *)ADAM::ADAMLogScope(void)::scope;
  if (v32)
  {
LABEL_56:
    v34 = v32;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      +[ADAFUtil stringFromDataType:](ADAFUtil, "stringFromDataType:", 1751213428);
      v35 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v36 = objc_msgSend(v35, "UTF8String");
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AnalysisFrameworkWriter.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 87;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v36;
      v62 = 2048;
      v63 = v58 - v57;
      _os_log_impl(&dword_216CFB000, v34, OS_LOG_TYPE_INFO, "%25s:%-5d number of delegates for %s : %lu", buf, 0x26u);

    }
  }
  v31 = ADAM::AnalysisFrameworkWriter::getClientDelegates(ADAMAudioDataAnalysisType)const::errCnt;
LABEL_60:
  if (v31 > 0x1D)
    v31 = 0;
  ADAM::AnalysisFrameworkWriter::getClientDelegates(ADAMAudioDataAnalysisType)const::errCnt = v31;
  *(_QWORD *)buf = &v64;
  std::vector<ADAMServerDelegate * {__weak}>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v64 = CFSTR("_ADAFMetadataKeyIsLoud");
  *(float *)&v37 = *a2;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", *a2 >= 85.0, v37);
  v38 = objc_claimAutoreleasedReturnValue();
  v39 = (void *)v38;
  v40 = *(const __CFString **)(*(_QWORD *)(a1 + 88) + 24);
  if (!v40)
    v40 = CFSTR("nil");
  *(_QWORD *)buf = v38;
  *(_QWORD *)&buf[8] = v40;
  v65 = CFSTR("_ADAFMetadataKeyDeviceID");
  v66 = CFSTR("_ADAFMetadataKeyHAEDataForGauge");
  v41 = (void *)MEMORY[0x24BDD16E0];
  v42 = a2[4];
  if ((v43 & 1) == 0)
  {
    if ((_DWORD)v55)
    {
      ADAM::Parameters::instance(v55);
    }
  }
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)&buf[16] = v44;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", buf, &v64, 3);
  v45 = (void *)objc_claimAutoreleasedReturnValue();

  v46 = objc_alloc(MEMORY[0x24BE0A228]);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *a2);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  ADAM::getSampleDateInterval(*(ADAM **)(a3 + 8), a2[4]);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = (void *)objc_msgSend(v46, "initAudioSampleWithType:data:dateInterval:metadata:", 1751213428, v47, v48, v45);

  v50 = v57;
  v51 = v58;
  while (v50 != v51)
  {
    v52 = objc_loadWeakRetained(v50);
    objc_msgSend(v52, "sendAudioSample:", v49);

    ++v50;
  }

  v60 = &v57;
  std::vector<ADAMServerDelegate * {__weak}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
LABEL_69:
  v53 = *(_QWORD *)(a1 + 72);
  if (v53)
  {
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 40))(v53);
  }
  return 0;
}

void sub_216D3469C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  void *v12;

  a12 = (void **)&a9;
  std::vector<ADAMServerDelegate * {__weak}>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void ADAM::AnalysisFrameworkWriter::~AnalysisFrameworkWriter(ADAM::AnalysisFrameworkWriter *this)
{
  ADAM::AnalysisFrameworkWriter::~AnalysisFrameworkWriter(this);
  JUMPOUT(0x219A00DF0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24D6165B0;
  v2 = *((_QWORD *)this + 11);
  if (v2 && (ADAM::releaseADAMDeviceInfo(v2), v3 = *((_QWORD *)this + 11), *((_QWORD *)this + 11) = 0, v3))
  {
    MEMORY[0x219A00DF0](v3, 0x1060C4045DA4F00);
    v4 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    if (v4)
      MEMORY[0x219A00DF0](v4, 0x1060C4045DA4F00);
  }
  else
  {
    *((_QWORD *)this + 11) = 0;
  }
  ADAM::Writer::~Writer(this);
}

void sub_216D34B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_216D34C30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216D34CA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_216D35034(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN5rtaid14GetClientIDMapEv_block_invoke()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  uint8x8_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint8x8_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t **v30;
  uint64_t *i;
  unint64_t v32;
  _QWORD *v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t **v43;
  uint64_t *j;
  unint64_t v45;
  _QWORD *v46;
  float v47;
  _BOOL8 v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t **v56;
  uint64_t *k;
  unint64_t v58;
  _QWORD *v59;
  float v60;
  _BOOL8 v61;
  unint64_t v62;
  unint64_t v63;
  size_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;

  v1 = *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
  v2 = (unint64_t)&rtaid::GetClientIDMap(void)::gClientIDMap + 8;
  if (*((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1))
  {
    if (*(_QWORD *)rtaid::GetClientIDMap(void)::gClientIDMap)
    {
      v3 = **(uint64_t ***)rtaid::GetClientIDMap(void)::gClientIDMap;
      if (v3)
      {
        v4 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetClientIDMap(void)::gClientIDMap + 8));
        v4.i16[0] = vaddlv_u8(v4);
        do
        {
          v5 = v3[1];
          if (v5)
          {
            if (v4.u32[0] > 1uLL)
            {
              if (v5 < *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1))
                break;
              v6 = v5 % *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
            }
            else
            {
              v6 = v5 & (*((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) - 1);
            }
            if (v6)
              break;
          }
          else if (!*((_DWORD *)v3 + 4))
          {
            goto LABEL_32;
          }
          v3 = (uint64_t *)*v3;
        }
        while (v3);
      }
    }
  }
  v7 = operator new(0x30uLL);
  *v7 = 0;
  v7[1] = 0;
  *((_DWORD *)v7 + 4) = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 3, "Generic");
  v8 = (float)(unint64_t)(qword_253D97830 + 1);
  if (!v1 || (float)(*(float *)&dword_253D97838 * (float)v1) < v8)
  {
    v9 = 1;
    if (v1 >= 3)
      v9 = (v1 & (v1 - 1)) != 0;
    v10 = v9 | (2 * v1);
    v11 = vcvtps_u32_f32(v8 / *(float *)&dword_253D97838);
    if (v10 <= v11)
      v12 = v11;
    else
      v12 = v10;
    std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__rehash<true>(v12);
    v1 = *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
  }
  v13 = (_QWORD *)rtaid::GetClientIDMap(void)::gClientIDMap;
  v14 = *(_QWORD **)rtaid::GetClientIDMap(void)::gClientIDMap;
  if (*(_QWORD *)rtaid::GetClientIDMap(void)::gClientIDMap)
  {
    *v7 = *v14;
LABEL_30:
    *v14 = v7;
    goto LABEL_31;
  }
  *v7 = qword_253D97828;
  qword_253D97828 = (uint64_t)v7;
  *v13 = &qword_253D97828;
  if (*v7)
  {
    v15 = *(_QWORD *)(*v7 + 8);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (v15 >= v1)
        v15 %= v1;
    }
    else
    {
      v15 &= v1 - 1;
    }
    v14 = (_QWORD *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v15);
    goto LABEL_30;
  }
LABEL_31:
  ++qword_253D97830;
  v1 = *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
LABEL_32:
  if (v1)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
    v16.i16[0] = vaddlv_u8(v16);
    v0 = v16.u32[0] >= 2uLL ? v1 != 1 : (v1 & 1) == 0;
    v17 = *(uint64_t **)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v0);
    if (v17)
    {
      while (1)
      {
        v17 = (uint64_t *)*v17;
        if (!v17)
          break;
        v18 = v17[1];
        if (v18 == 1)
        {
          if (*((_DWORD *)v17 + 4) == 1)
            goto LABEL_68;
        }
        else
        {
          if (v16.u32[0] > 1uLL)
          {
            if (v18 >= v1)
              v18 %= v1;
          }
          else
          {
            v18 &= v1 - 1;
          }
          if (v18 != v0)
            break;
        }
      }
    }
  }
  v19 = operator new(0x30uLL);
  *v19 = 0;
  v19[1] = 1;
  *((_DWORD *)v19 + 4) = 1;
  std::string::basic_string[abi:ne180100]<0>(v19 + 3, "HAL");
  v20 = (float)(unint64_t)(qword_253D97830 + 1);
  if (!v1 || (float)(*(float *)&dword_253D97838 * (float)v1) < v20)
  {
    v21 = 1;
    if (v1 >= 3)
      v21 = (v1 & (v1 - 1)) != 0;
    v22 = v21 | (2 * v1);
    v23 = vcvtps_u32_f32(v20 / *(float *)&dword_253D97838);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__rehash<true>(v24);
    v1 = *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
    if ((v1 & (v1 - 1)) != 0)
      v0 = *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) > 1uLL
        || *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) != 1;
    else
      v0 = ~DWORD2(rtaid::GetClientIDMap(void)::gClientIDMap) & 1;
  }
  v25 = rtaid::GetClientIDMap(void)::gClientIDMap;
  v26 = *(_QWORD **)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v0);
  if (v26)
  {
    *v19 = *v26;
LABEL_66:
    *v26 = v19;
    goto LABEL_67;
  }
  *v19 = qword_253D97828;
  qword_253D97828 = (uint64_t)v19;
  *(_QWORD *)(v25 + 8 * v0) = &qword_253D97828;
  if (*v19)
  {
    v27 = *(_QWORD *)(*v19 + 8);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (v27 >= v1)
        v27 %= v1;
    }
    else
    {
      v27 &= v1 - 1;
    }
    v26 = (_QWORD *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v27);
    goto LABEL_66;
  }
LABEL_67:
  ++qword_253D97830;
LABEL_68:
  std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__emplace_unique_key_args<AIDM_ClientID,AIDM_ClientID,char const(&)[3]>(2u, 2, "VA");
  std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__emplace_unique_key_args<AIDM_ClientID,AIDM_ClientID,char const(&)[3]>(3u, 3, "VP");
  std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__emplace_unique_key_args<AIDM_ClientID,AIDM_ClientID,char const(&)[5]>(4u, 4, "AVVC");
  std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__emplace_unique_key_args<AIDM_ClientID,AIDM_ClientID,char const(&)[5]>(5u, 5, "AQME");
  v28 = *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
  if (*((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1))
  {
    v29 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetClientIDMap(void)::gClientIDMap + 8));
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
      v0 = *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) <= 6uLL
         ? 6uLL % *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1)
         : 6;
    else
      v0 = (DWORD2(rtaid::GetClientIDMap(void)::gClientIDMap) - 1) & 6;
    v30 = *(uint64_t ***)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v0);
    if (v30)
    {
      for (i = *v30; i; i = (uint64_t *)*i)
      {
        v32 = i[1];
        if (v32 == 6)
        {
          if (*((_DWORD *)i + 4) == 6)
            goto LABEL_108;
        }
        else
        {
          if (v29.u32[0] > 1uLL)
          {
            if (v32 >= *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1))
              v32 %= *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
          }
          else
          {
            v32 &= *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) - 1;
          }
          if (v32 != v0)
            break;
        }
      }
    }
  }
  v33 = operator new(0x30uLL);
  *v33 = 0;
  v33[1] = 6;
  *((_DWORD *)v33 + 4) = 6;
  std::string::basic_string[abi:ne180100]<0>(v33 + 3, "AudioQueue");
  v34 = (float)(unint64_t)(qword_253D97830 + 1);
  if (!v28 || (float)(*(float *)&dword_253D97838 * (float)v28) < v34)
  {
    v35 = 1;
    if (v28 >= 3)
      v35 = (v28 & (v28 - 1)) != 0;
    v36 = v35 | (2 * v28);
    v37 = vcvtps_u32_f32(v34 / *(float *)&dword_253D97838);
    if (v36 <= v37)
      v38 = v37;
    else
      v38 = v36;
    std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__rehash<true>(v38);
    v28 = *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (*((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) <= 6uLL)
        v0 = 6uLL % *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
      else
        v0 = 6;
    }
    else
    {
      v0 = (DWORD2(rtaid::GetClientIDMap(void)::gClientIDMap) - 1) & 6;
    }
  }
  v39 = rtaid::GetClientIDMap(void)::gClientIDMap;
  v40 = *(_QWORD **)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v0);
  if (v40)
  {
    *v33 = *v40;
LABEL_106:
    *v40 = v33;
    goto LABEL_107;
  }
  *v33 = qword_253D97828;
  qword_253D97828 = (uint64_t)v33;
  *(_QWORD *)(v39 + 8 * v0) = &qword_253D97828;
  if (*v33)
  {
    v41 = *(_QWORD *)(*v33 + 8);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v41 >= v28)
        v41 %= v28;
    }
    else
    {
      v41 &= v28 - 1;
    }
    v40 = (_QWORD *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v41);
    goto LABEL_106;
  }
LABEL_107:
  ++qword_253D97830;
  v28 = *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
LABEL_108:
  if (v28)
  {
    v42 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
    v42.i16[0] = vaddlv_u8(v42);
    if (v42.u32[0] > 1uLL)
      v0 = v28 <= 7 ? 7 % v28 : 7;
    else
      v0 = ((int)v28 - 1) & 7;
    v43 = *(uint64_t ***)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v0);
    if (v43)
    {
      for (j = *v43; j; j = (uint64_t *)*j)
      {
        v45 = j[1];
        if (v45 == 7)
        {
          if (*((_DWORD *)j + 4) == 7)
            goto LABEL_148;
        }
        else
        {
          if (v42.u32[0] > 1uLL)
          {
            if (v45 >= v28)
              v45 %= v28;
          }
          else
          {
            v45 &= v28 - 1;
          }
          if (v45 != v0)
            break;
        }
      }
    }
  }
  v46 = operator new(0x30uLL);
  *v46 = 0;
  v46[1] = 7;
  *((_DWORD *)v46 + 4) = 7;
  std::string::basic_string[abi:ne180100]<0>(v46 + 3, "RemoteIO");
  v47 = (float)(unint64_t)(qword_253D97830 + 1);
  if (!v28 || (float)(*(float *)&dword_253D97838 * (float)v28) < v47)
  {
    v48 = 1;
    if (v28 >= 3)
      v48 = (v28 & (v28 - 1)) != 0;
    v49 = v48 | (2 * v28);
    v50 = vcvtps_u32_f32(v47 / *(float *)&dword_253D97838);
    if (v49 <= v50)
      v51 = v50;
    else
      v51 = v49;
    std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__rehash<true>(v51);
    v28 = *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (*((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) <= 7uLL)
        v0 = 7uLL % *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
      else
        v0 = 7;
    }
    else
    {
      v0 = (DWORD2(rtaid::GetClientIDMap(void)::gClientIDMap) - 1) & 7;
    }
  }
  v52 = rtaid::GetClientIDMap(void)::gClientIDMap;
  v53 = *(_QWORD **)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v0);
  if (v53)
  {
    *v46 = *v53;
LABEL_146:
    *v53 = v46;
    goto LABEL_147;
  }
  *v46 = qword_253D97828;
  qword_253D97828 = (uint64_t)v46;
  *(_QWORD *)(v52 + 8 * v0) = &qword_253D97828;
  if (*v46)
  {
    v54 = *(_QWORD *)(*v46 + 8);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v54 >= v28)
        v54 %= v28;
    }
    else
    {
      v54 &= v28 - 1;
    }
    v53 = (_QWORD *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v54);
    goto LABEL_146;
  }
LABEL_147:
  ++qword_253D97830;
  v28 = *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
LABEL_148:
  if (v28)
  {
    v55 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
    v55.i16[0] = vaddlv_u8(v55);
    if (v55.u32[0] > 1uLL)
      v2 = v28 <= 8 ? 8 % v28 : 8;
    else
      v2 = ((int)v28 - 1) & 8;
    v56 = *(uint64_t ***)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v2);
    if (v56)
    {
      for (k = *v56; k; k = (uint64_t *)*k)
      {
        v58 = k[1];
        if (v58 == 8)
        {
          if (*((_DWORD *)k + 4) == 8)
            return;
        }
        else
        {
          if (v55.u32[0] > 1uLL)
          {
            if (v58 >= v28)
              v58 %= v28;
          }
          else
          {
            v58 &= v28 - 1;
          }
          if (v58 != v2)
            break;
        }
      }
    }
  }
  v59 = operator new(0x30uLL);
  *v59 = 0;
  v59[1] = 8;
  *((_DWORD *)v59 + 4) = 8;
  std::string::basic_string[abi:ne180100]<0>(v59 + 3, "PHASE");
  v60 = (float)(unint64_t)(qword_253D97830 + 1);
  if (!v28 || (float)(*(float *)&dword_253D97838 * (float)v28) < v60)
  {
    v61 = 1;
    if (v28 >= 3)
      v61 = (v28 & (v28 - 1)) != 0;
    v62 = v61 | (2 * v28);
    v63 = vcvtps_u32_f32(v60 / *(float *)&dword_253D97838);
    if (v62 <= v63)
      v64 = v63;
    else
      v64 = v62;
    std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__rehash<true>(v64);
    v28 = *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (*((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) <= 8uLL)
        v2 = 8uLL % *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
      else
        v2 = 8;
    }
    else
    {
      v2 = (DWORD2(rtaid::GetClientIDMap(void)::gClientIDMap) - 1) & 8;
    }
  }
  v65 = rtaid::GetClientIDMap(void)::gClientIDMap;
  v66 = *(_QWORD **)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v2);
  if (v66)
  {
    *v59 = *v66;
LABEL_186:
    *v66 = v59;
    goto LABEL_187;
  }
  *v59 = qword_253D97828;
  qword_253D97828 = (uint64_t)v59;
  *(_QWORD *)(v65 + 8 * v2) = &qword_253D97828;
  if (*v59)
  {
    v67 = *(_QWORD *)(*v59 + 8);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v67 >= v28)
        v67 %= v28;
    }
    else
    {
      v67 &= v28 - 1;
    }
    v66 = (_QWORD *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v67);
    goto LABEL_186;
  }
LABEL_187:
  ++qword_253D97830;
}

void sub_216D35ADC(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AIDM_ClientID,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__emplace_unique_key_args<AIDM_ClientID,AIDM_ClientID,char const(&)[3]>(unsigned int a1, int a2, char *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a1;
  v7 = *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
  if (*((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1))
  {
    v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetClientIDMap(void)::gClientIDMap + 8));
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a1;
      if (*((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) <= (unint64_t)a1)
        v3 = (unint64_t)a1 % *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
    }
    else
    {
      v3 = (DWORD2(rtaid::GetClientIDMap(void)::gClientIDMap) - 1) & a1;
    }
    v9 = *(uint64_t ***)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a1)
        {
          if (*((_DWORD *)i + 4) == a1)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1))
              v11 %= *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
          }
          else
          {
            v11 &= *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x30uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a2;
  std::string::basic_string[abi:ne180100]<0>(v12 + 3, a3);
  v13 = (float)(unint64_t)(qword_253D97830 + 1);
  if (!v7 || (float)(*(float *)&dword_253D97838 * (float)v7) < v13)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_253D97838);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__rehash<true>(v17);
    v7 = *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (*((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) <= v6)
        v3 = v6 % *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
      else
        v3 = v6;
    }
    else
    {
      v3 = (DWORD2(rtaid::GetClientIDMap(void)::gClientIDMap) - 1) & v6;
    }
  }
  v18 = rtaid::GetClientIDMap(void)::gClientIDMap;
  v19 = *(_QWORD **)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v3);
  if (v19)
  {
    *v12 = *v19;
LABEL_38:
    *v19 = v12;
    goto LABEL_39;
  }
  *v12 = qword_253D97828;
  qword_253D97828 = (uint64_t)v12;
  *(_QWORD *)(v18 + 8 * v3) = &qword_253D97828;
  if (*v12)
  {
    v20 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++qword_253D97830;
}

void sub_216D35D3C(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AIDM_ClientID,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__emplace_unique_key_args<AIDM_ClientID,AIDM_ClientID,char const(&)[5]>(unsigned int a1, int a2, char *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a1;
  v7 = *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
  if (*((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1))
  {
    v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetClientIDMap(void)::gClientIDMap + 8));
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a1;
      if (*((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) <= (unint64_t)a1)
        v3 = (unint64_t)a1 % *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
    }
    else
    {
      v3 = (DWORD2(rtaid::GetClientIDMap(void)::gClientIDMap) - 1) & a1;
    }
    v9 = *(uint64_t ***)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a1)
        {
          if (*((_DWORD *)i + 4) == a1)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1))
              v11 %= *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
          }
          else
          {
            v11 &= *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x30uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a2;
  std::string::basic_string[abi:ne180100]<0>(v12 + 3, a3);
  v13 = (float)(unint64_t)(qword_253D97830 + 1);
  if (!v7 || (float)(*(float *)&dword_253D97838 * (float)v7) < v13)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_253D97838);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__rehash<true>(v17);
    v7 = *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (*((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) <= v6)
        v3 = v6 % *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
      else
        v3 = v6;
    }
    else
    {
      v3 = (DWORD2(rtaid::GetClientIDMap(void)::gClientIDMap) - 1) & v6;
    }
  }
  v18 = rtaid::GetClientIDMap(void)::gClientIDMap;
  v19 = *(_QWORD **)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v3);
  if (v19)
  {
    *v12 = *v19;
LABEL_38:
    *v19 = v12;
    goto LABEL_39;
  }
  *v12 = qword_253D97828;
  qword_253D97828 = (uint64_t)v12;
  *(_QWORD *)(v18 + 8 * v3) = &qword_253D97828;
  if (*v12)
  {
    v20 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++qword_253D97830;
}

void sub_216D35F7C(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AIDM_ClientID,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__rehash<true>(size_t __n)
{
  size_t prime;
  size_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD **v6;
  size_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *i;
  size_t v13;
  void *v14;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v2 = *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
  if (prime <= *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1))
  {
    if (prime >= *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1))
      return;
    v9 = vcvtps_u32_f32((float)(unint64_t)qword_253D97830 / *(float *)&dword_253D97838);
    if (*((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) < 3uLL
      || (v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetClientIDMap(void)::gClientIDMap + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      v9 = std::__next_prime(v9);
    }
    else
    {
      v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2)
        v9 = v11;
    }
    if (prime <= v9)
      prime = v9;
    if (prime >= v2)
      return;
    if (!prime)
    {
      v14 = (void *)rtaid::GetClientIDMap(void)::gClientIDMap;
      *(_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap = 0;
      if (v14)
        operator delete(v14);
      *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v3 = operator new(8 * prime);
  v4 = (void *)rtaid::GetClientIDMap(void)::gClientIDMap;
  *(_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap = v3;
  if (v4)
    operator delete(v4);
  v5 = 0;
  *((_QWORD *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) = prime;
  do
    *(_QWORD *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v5++) = 0;
  while (prime != v5);
  v6 = (_QWORD **)qword_253D97828;
  if (qword_253D97828)
  {
    v7 = *(_QWORD *)(qword_253D97828 + 8);
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime)
        v7 %= prime;
    }
    else
    {
      v7 &= prime - 1;
    }
    *(_QWORD *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v7) = &qword_253D97828;
    for (i = *v6; i; v7 = v13)
    {
      v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime)
          v13 %= prime;
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(_QWORD *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v13))
        {
          *(_QWORD *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v13) = v6;
          goto LABEL_31;
        }
        *v6 = (_QWORD *)*i;
        *i = **(_QWORD **)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v13);
        **(_QWORD **)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v13) = i;
        i = v6;
      }
      v13 = v7;
LABEL_31:
      v6 = (_QWORD **)i;
      i = (_QWORD *)*i;
    }
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AIDM_ClientID,std::string>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void ___ZN5rtaid19GetClientUseCaseMapEv_block_invoke()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  uint8x8_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint8x8_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _BOOL8 v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t **v30;
  uint64_t *i;
  unint64_t v32;
  _QWORD *v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t **v43;
  uint64_t *j;
  unint64_t v45;
  _QWORD *v46;
  float v47;
  _BOOL8 v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t **v56;
  uint64_t *k;
  unint64_t v58;
  _QWORD *v59;
  float v60;
  _BOOL8 v61;
  unint64_t v62;
  unint64_t v63;
  size_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;

  v1 = *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
  v2 = (unint64_t)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8;
  if (*((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1))
  {
    if (*(_QWORD *)rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap)
    {
      v3 = **(uint64_t ***)rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
      if (v3)
      {
        v4 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8));
        v4.i16[0] = vaddlv_u8(v4);
        do
        {
          v5 = v3[1];
          if (v5)
          {
            if (v4.u32[0] > 1uLL)
            {
              if (v5 < *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1))
                break;
              v6 = v5 % *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
            }
            else
            {
              v6 = v5 & (*((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) - 1);
            }
            if (v6)
              break;
          }
          else if (!*((_WORD *)v3 + 8))
          {
            goto LABEL_32;
          }
          v3 = (uint64_t *)*v3;
        }
        while (v3);
      }
    }
  }
  v7 = operator new(0x30uLL);
  *v7 = 0;
  v7[1] = 0;
  *((_WORD *)v7 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 3, "Generic");
  v8 = (float)(unint64_t)(qword_253D97420 + 1);
  if (!v1 || (float)(*(float *)&dword_253D97428 * (float)v1) < v8)
  {
    v9 = 1;
    if (v1 >= 3)
      v9 = (v1 & (v1 - 1)) != 0;
    v10 = v9 | (2 * v1);
    v11 = vcvtps_u32_f32(v8 / *(float *)&dword_253D97428);
    if (v10 <= v11)
      v12 = v11;
    else
      v12 = v10;
    std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::__rehash<true>(v12);
    v1 = *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
  }
  v13 = (_QWORD *)rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
  v14 = *(_QWORD **)rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
  if (*(_QWORD *)rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap)
  {
    *v7 = *v14;
LABEL_30:
    *v14 = v7;
    goto LABEL_31;
  }
  *v7 = qword_253D97418;
  qword_253D97418 = (uint64_t)v7;
  *v13 = &qword_253D97418;
  if (*v7)
  {
    v15 = *(_QWORD *)(*v7 + 8);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (v15 >= v1)
        v15 %= v1;
    }
    else
    {
      v15 &= v1 - 1;
    }
    v14 = (_QWORD *)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v15);
    goto LABEL_30;
  }
LABEL_31:
  ++qword_253D97420;
  v1 = *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
LABEL_32:
  if (v1)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
    v16.i16[0] = vaddlv_u8(v16);
    v0 = v16.u32[0] >= 2uLL ? v1 != 1 : (v1 & 1) == 0;
    v17 = *(uint64_t **)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v0);
    if (v17)
    {
      while (1)
      {
        v17 = (uint64_t *)*v17;
        if (!v17)
          break;
        v18 = v17[1];
        if (v18 == 1)
        {
          if (*((_WORD *)v17 + 8) == 1)
            goto LABEL_68;
        }
        else
        {
          if (v16.u32[0] > 1uLL)
          {
            if (v18 >= v1)
              v18 %= v1;
          }
          else
          {
            v18 &= v1 - 1;
          }
          if (v18 != v0)
            break;
        }
      }
    }
  }
  v19 = operator new(0x30uLL);
  *v19 = 0;
  v19[1] = 1;
  *((_WORD *)v19 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(v19 + 3, "Siri");
  v20 = (float)(unint64_t)(qword_253D97420 + 1);
  if (!v1 || (float)(*(float *)&dword_253D97428 * (float)v1) < v20)
  {
    v21 = 1;
    if (v1 >= 3)
      v21 = (v1 & (v1 - 1)) != 0;
    v22 = v21 | (2 * v1);
    v23 = vcvtps_u32_f32(v20 / *(float *)&dword_253D97428);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::__rehash<true>(v24);
    v1 = *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
    v25 = 1;
    if (*((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) <= 1uLL)
      v25 = *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) != 1;
    if ((*((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) & (*((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap
                                                                                   + 1)
                                                                                 - 1)) != 0)
      v0 = v25;
    else
      v0 = (BYTE8(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap) & 1) == 0;
  }
  v26 = rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
  v27 = *(_QWORD **)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v0);
  if (v27)
  {
    *v19 = *v27;
LABEL_66:
    *v27 = v19;
    goto LABEL_67;
  }
  *v19 = qword_253D97418;
  qword_253D97418 = (uint64_t)v19;
  *(_QWORD *)(v26 + 8 * v0) = &qword_253D97418;
  if (*v19)
  {
    v28 = *(_QWORD *)(*v19 + 8);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (v28 >= v1)
        v28 %= v1;
    }
    else
    {
      v28 &= v1 - 1;
    }
    v27 = (_QWORD *)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v28);
    goto LABEL_66;
  }
LABEL_67:
  ++qword_253D97420;
  v1 = *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
LABEL_68:
  if (v1)
  {
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
      v0 = v1 <= 2 ? 2 % v1 : 2;
    else
      v0 = ((int)v1 - 1) & 2;
    v30 = *(uint64_t ***)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v0);
    if (v30)
    {
      for (i = *v30; i; i = (uint64_t *)*i)
      {
        v32 = i[1];
        if (v32 == 2)
        {
          if (*((_WORD *)i + 8) == 2)
            goto LABEL_108;
        }
        else
        {
          if (v29.u32[0] > 1uLL)
          {
            if (v32 >= v1)
              v32 %= v1;
          }
          else
          {
            v32 &= v1 - 1;
          }
          if (v32 != v0)
            break;
        }
      }
    }
  }
  v33 = operator new(0x30uLL);
  *v33 = 0;
  v33[1] = 2;
  *((_WORD *)v33 + 8) = 2;
  std::string::basic_string[abi:ne180100]<0>(v33 + 3, "Telephony");
  v34 = (float)(unint64_t)(qword_253D97420 + 1);
  if (!v1 || (float)(*(float *)&dword_253D97428 * (float)v1) < v34)
  {
    v35 = 1;
    if (v1 >= 3)
      v35 = (v1 & (v1 - 1)) != 0;
    v36 = v35 | (2 * v1);
    v37 = vcvtps_u32_f32(v34 / *(float *)&dword_253D97428);
    if (v36 <= v37)
      v38 = v37;
    else
      v38 = v36;
    std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::__rehash<true>(v38);
    v1 = *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (*((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) <= 2uLL)
        v0 = 2uLL % *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
      else
        v0 = 2;
    }
    else
    {
      v0 = (DWORD2(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap) - 1) & 2;
    }
  }
  v39 = rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
  v40 = *(_QWORD **)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v0);
  if (v40)
  {
    *v33 = *v40;
LABEL_106:
    *v40 = v33;
    goto LABEL_107;
  }
  *v33 = qword_253D97418;
  qword_253D97418 = (uint64_t)v33;
  *(_QWORD *)(v39 + 8 * v0) = &qword_253D97418;
  if (*v33)
  {
    v41 = *(_QWORD *)(*v33 + 8);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (v41 >= v1)
        v41 %= v1;
    }
    else
    {
      v41 &= v1 - 1;
    }
    v40 = (_QWORD *)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v41);
    goto LABEL_106;
  }
LABEL_107:
  ++qword_253D97420;
  v1 = *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
LABEL_108:
  if (v1)
  {
    v42 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
    v42.i16[0] = vaddlv_u8(v42);
    if (v42.u32[0] > 1uLL)
      v0 = v1 <= 4 ? 4 % v1 : 4;
    else
      v0 = ((int)v1 - 1) & 4;
    v43 = *(uint64_t ***)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v0);
    if (v43)
    {
      for (j = *v43; j; j = (uint64_t *)*j)
      {
        v45 = j[1];
        if (v45 == 4)
        {
          if (*((_WORD *)j + 8) == 4)
            goto LABEL_148;
        }
        else
        {
          if (v42.u32[0] > 1uLL)
          {
            if (v45 >= v1)
              v45 %= v1;
          }
          else
          {
            v45 &= v1 - 1;
          }
          if (v45 != v0)
            break;
        }
      }
    }
  }
  v46 = operator new(0x30uLL);
  *v46 = 0;
  v46[1] = 4;
  *((_WORD *)v46 + 8) = 4;
  std::string::basic_string[abi:ne180100]<0>(v46 + 3, "Alarms");
  v47 = (float)(unint64_t)(qword_253D97420 + 1);
  if (!v1 || (float)(*(float *)&dword_253D97428 * (float)v1) < v47)
  {
    v48 = 1;
    if (v1 >= 3)
      v48 = (v1 & (v1 - 1)) != 0;
    v49 = v48 | (2 * v1);
    v50 = vcvtps_u32_f32(v47 / *(float *)&dword_253D97428);
    if (v49 <= v50)
      v51 = v50;
    else
      v51 = v49;
    std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::__rehash<true>(v51);
    v1 = *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (*((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) <= 4uLL)
        v0 = 4uLL % *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
      else
        v0 = 4;
    }
    else
    {
      v0 = (DWORD2(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap) - 1) & 4;
    }
  }
  v52 = rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
  v53 = *(_QWORD **)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v0);
  if (v53)
  {
    *v46 = *v53;
LABEL_146:
    *v53 = v46;
    goto LABEL_147;
  }
  *v46 = qword_253D97418;
  qword_253D97418 = (uint64_t)v46;
  *(_QWORD *)(v52 + 8 * v0) = &qword_253D97418;
  if (*v46)
  {
    v54 = *(_QWORD *)(*v46 + 8);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (v54 >= v1)
        v54 %= v1;
    }
    else
    {
      v54 &= v1 - 1;
    }
    v53 = (_QWORD *)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v54);
    goto LABEL_146;
  }
LABEL_147:
  ++qword_253D97420;
  v1 = *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
LABEL_148:
  if (v1)
  {
    v55 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
    v55.i16[0] = vaddlv_u8(v55);
    if (v55.u32[0] > 1uLL)
      v2 = v1 <= 0xD ? 0xD % v1 : 13;
    else
      v2 = ((int)v1 - 1) & 0xDLL;
    v56 = *(uint64_t ***)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v2);
    if (v56)
    {
      for (k = *v56; k; k = (uint64_t *)*k)
      {
        v58 = k[1];
        if (v58 == 13)
        {
          if (*((_WORD *)k + 8) == 13)
            return;
        }
        else
        {
          if (v55.u32[0] > 1uLL)
          {
            if (v58 >= v1)
              v58 %= v1;
          }
          else
          {
            v58 &= v1 - 1;
          }
          if (v58 != v2)
            break;
        }
      }
    }
  }
  v59 = operator new(0x30uLL);
  *v59 = 0;
  v59[1] = 13;
  *((_WORD *)v59 + 8) = 13;
  std::string::basic_string[abi:ne180100]<0>(v59 + 3, "SystemSounds");
  v60 = (float)(unint64_t)(qword_253D97420 + 1);
  if (!v1 || (float)(*(float *)&dword_253D97428 * (float)v1) < v60)
  {
    v61 = 1;
    if (v1 >= 3)
      v61 = (v1 & (v1 - 1)) != 0;
    v62 = v61 | (2 * v1);
    v63 = vcvtps_u32_f32(v60 / *(float *)&dword_253D97428);
    if (v62 <= v63)
      v64 = v63;
    else
      v64 = v62;
    std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::__rehash<true>(v64);
    v1 = *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (*((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) <= 0xDuLL)
        v2 = 0xDuLL % *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
      else
        v2 = 13;
    }
    else
    {
      v2 = (DWORD2(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap) - 1) & 0xDLL;
    }
  }
  v65 = rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
  v66 = *(_QWORD **)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v2);
  if (v66)
  {
    *v59 = *v66;
LABEL_186:
    *v66 = v59;
    goto LABEL_187;
  }
  *v59 = qword_253D97418;
  qword_253D97418 = (uint64_t)v59;
  *(_QWORD *)(v65 + 8 * v2) = &qword_253D97418;
  if (*v59)
  {
    v67 = *(_QWORD *)(*v59 + 8);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (v67 >= v1)
        v67 %= v1;
    }
    else
    {
      v67 &= v1 - 1;
    }
    v66 = (_QWORD *)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v67);
    goto LABEL_186;
  }
LABEL_187:
  ++qword_253D97420;
}

void sub_216D36B04(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AIDM_ClientID,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::__rehash<true>(size_t __n)
{
  size_t prime;
  size_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD **v6;
  size_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *i;
  size_t v13;
  void *v14;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v2 = *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
  if (prime <= *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1))
  {
    if (prime >= *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1))
      return;
    v9 = vcvtps_u32_f32((float)(unint64_t)qword_253D97420 / *(float *)&dword_253D97428);
    if (*((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) < 3uLL
      || (v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      v9 = std::__next_prime(v9);
    }
    else
    {
      v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2)
        v9 = v11;
    }
    if (prime <= v9)
      prime = v9;
    if (prime >= v2)
      return;
    if (!prime)
    {
      v14 = (void *)rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
      *(_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap = 0;
      if (v14)
        operator delete(v14);
      *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v3 = operator new(8 * prime);
  v4 = (void *)rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
  *(_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap = v3;
  if (v4)
    operator delete(v4);
  v5 = 0;
  *((_QWORD *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) = prime;
  do
    *(_QWORD *)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v5++) = 0;
  while (prime != v5);
  v6 = (_QWORD **)qword_253D97418;
  if (qword_253D97418)
  {
    v7 = *(_QWORD *)(qword_253D97418 + 8);
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime)
        v7 %= prime;
    }
    else
    {
      v7 &= prime - 1;
    }
    *(_QWORD *)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v7) = &qword_253D97418;
    for (i = *v6; i; v7 = v13)
    {
      v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime)
          v13 %= prime;
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(_QWORD *)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v13))
        {
          *(_QWORD *)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v13) = v6;
          goto LABEL_31;
        }
        *v6 = (_QWORD *)*i;
        *i = **(_QWORD **)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v13);
        **(_QWORD **)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v13) = i;
        i = v6;
      }
      v13 = v7;
LABEL_31:
      v6 = (_QWORD **)i;
      i = (_QWORD *)*i;
    }
  }
}

void rtaid::GetReporterTypeInterestedMap(rtaid *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap = 0u;
    *(_OWORD *)&qword_253D97440 = 0u;
    dword_253D97450 = 1065353216;
  }
  if (rtaid::GetReporterTypeInterestedMap(void)::onceToken != -1)
    dispatch_once(&rtaid::GetReporterTypeInterestedMap(void)::onceToken, &__block_literal_global_17);
}

void ___ZN5rtaid28GetReporterTypeInterestedMapEv_block_invoke()
{
  _DWORD *v0;
  _OWORD *v1;
  _DWORD *v2;
  _OWORD *v3;
  _QWORD *v4;
  void *__p;
  _OWORD *v6;
  _OWORD *v7;

  v0 = operator new(0xCuLL);
  v6 = v0 + 3;
  v7 = v0 + 3;
  *(_QWORD *)v0 = 0x400000000;
  v0[2] = 6;
  __p = v0;
  std::__hash_table<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>>>::__emplace_unique_key_args<AudioServiceType,AudioServiceType,std::vector<rtaid::AnalyzerType>>(0, 0, (uint64_t)&__p);
  if (__p)
    operator delete(__p);
  v1 = operator new(0x10uLL);
  __p = v1;
  *v1 = xmmword_216D3C8F0;
  v6 = v1 + 1;
  v7 = v1 + 1;
  std::__hash_table<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>>>::__emplace_unique_key_args<AudioServiceType,AudioServiceType,std::vector<rtaid::AnalyzerType>>(1u, 1, (uint64_t)&__p);
  if (__p)
    operator delete(__p);
  v2 = operator new(0x14uLL);
  v6 = v2 + 5;
  v7 = v2 + 5;
  v2[4] = 6;
  *(_OWORD *)v2 = xmmword_216D3CA18;
  __p = v2;
  std::__hash_table<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>>>::__emplace_unique_key_args<AudioServiceType,AudioServiceType,std::vector<rtaid::AnalyzerType>>(2u, 2, (uint64_t)&__p);
  if (__p)
    operator delete(__p);
  v3 = operator new(0x10uLL);
  __p = v3;
  *v3 = xmmword_216D3C900;
  v6 = v3 + 1;
  v7 = v3 + 1;
  std::__hash_table<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>>>::__emplace_unique_key_args<AudioServiceType,AudioServiceType,std::vector<rtaid::AnalyzerType>>(4u, 4, (uint64_t)&__p);
  if (__p)
    operator delete(__p);
  v4 = operator new(8uLL);
  __p = v4;
  *v4 = 0x600000001;
  v6 = v4 + 1;
  v7 = v4 + 1;
  std::__hash_table<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>>>::__emplace_unique_key_args<AudioServiceType,AudioServiceType,std::vector<rtaid::AnalyzerType>>(0xDu, 13, (uint64_t)&__p);
  if (__p)
    operator delete(__p);
}

void sub_216D36F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>>>::__emplace_unique_key_args<AudioServiceType,AudioServiceType,std::vector<rtaid::AnalyzerType>>(unsigned __int16 a1, __int16 a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **i;
  unint64_t v11;
  char *v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD **v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *j;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v32;

  v6 = a1;
  v7 = *((_QWORD *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1);
  if (*((_QWORD *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1))
  {
    v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap
                                        + 8));
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a1;
      if (*((_QWORD *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1) <= (unint64_t)a1)
        v3 = (unint64_t)a1
           % *((_QWORD *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1);
    }
    else
    {
      v3 = (DWORD2(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap) - 1) & a1;
    }
    v9 = *(uint64_t ****)(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t **)*i)
      {
        v11 = (unint64_t)i[1];
        if (v11 == a1)
        {
          if (*((unsigned __int16 *)i + 8) == a1)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= *((_QWORD *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1))
              v11 %= *((_QWORD *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1);
          }
          else
          {
            v11 &= *((_QWORD *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1) - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v6;
  *((_WORD *)v12 + 8) = a2;
  *(_OWORD *)(v12 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v12 + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v13 = (float)(unint64_t)(qword_253D97448 + 1);
  if (!v7 || (float)(*(float *)&dword_253D97450 * (float)v7) < v13)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_253D97450);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v7 = *((_QWORD *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1))
      goto LABEL_30;
    if (*(_QWORD *)&prime < *((_QWORD *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1))
    {
      v24 = vcvtps_u32_f32((float)(unint64_t)qword_253D97448 / *(float *)&dword_253D97450);
      if (*((_QWORD *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1) < 3uLL
        || (v25 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap
                                                 + 8)),
            v25.i16[0] = vaddlv_u8(v25),
            v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = (void *)rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap;
          *(_QWORD *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1) = prime;
          do
            *(_QWORD *)(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD **)qword_253D97440;
          if (qword_253D97440)
          {
            v22 = *(_QWORD *)(qword_253D97440 + 8);
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 8 * v22) = &qword_253D97440;
            for (j = *v21; j; v22 = v28)
            {
              v28 = j[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(_QWORD *)&prime)
                  v28 %= *(_QWORD *)&prime;
              }
              else
              {
                v28 &= *(_QWORD *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(_QWORD *)(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 8 * v28))
                {
                  *(_QWORD *)(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 8 * v28) = v21;
                  goto LABEL_55;
                }
                *v21 = (_QWORD *)*j;
                *j = **(_QWORD **)(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 8 * v28);
                **(_QWORD **)(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 8 * v28) = j;
                j = v21;
              }
              v28 = v22;
LABEL_55:
              v21 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v32 = (void *)rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap;
        *(_QWORD *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap = 0;
        if (v32)
          operator delete(v32);
        v7 = 0;
        *((_QWORD *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v29 = rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap;
  v30 = *(_QWORD **)(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 8 * v3);
  if (v30)
  {
    *(_QWORD *)v12 = *v30;
LABEL_72:
    *v30 = v12;
    goto LABEL_73;
  }
  *(_QWORD *)v12 = qword_253D97440;
  qword_253D97440 = (uint64_t)v12;
  *(_QWORD *)(v29 + 8 * v3) = &qword_253D97440;
  if (*(_QWORD *)v12)
  {
    v31 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++qword_253D97448;
}

void sub_216D37370(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  void *v3;

  if (a1)
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void ___ZN5rtaid22GetAnalyzerToStringMapEv_block_invoke()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  uint8x8_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint8x8_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _BOOL8 v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t **v31;
  uint64_t *i;
  unint64_t v33;
  _QWORD *v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t **v45;
  uint64_t *j;
  unint64_t v47;
  _QWORD *v48;
  float v49;
  _BOOL8 v50;
  unint64_t v51;
  unint64_t v52;
  size_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint8x8_t v57;
  uint64_t **v58;
  uint64_t *k;
  unint64_t v60;
  _QWORD *v61;
  float v62;
  _BOOL8 v63;
  unint64_t v64;
  unint64_t v65;
  size_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;

  v1 = *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
  v2 = (unint64_t)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8;
  if (*((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1))
  {
    if (*(_QWORD *)rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap)
    {
      v3 = **(uint64_t ***)rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
      if (v3)
      {
        v4 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8));
        v4.i16[0] = vaddlv_u8(v4);
        do
        {
          v5 = v3[1];
          if (v5)
          {
            if (v4.u32[0] > 1uLL)
            {
              if (v5 < *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1))
                break;
              v6 = v5 % *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
            }
            else
            {
              v6 = v5 & (*((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) - 1);
            }
            if (v6)
              break;
          }
          else if (!*((_DWORD *)v3 + 4))
          {
            goto LABEL_32;
          }
          v3 = (uint64_t *)*v3;
        }
        while (v3);
      }
    }
  }
  v7 = operator new(0x30uLL);
  *v7 = 0;
  v7[1] = 0;
  *((_DWORD *)v7 + 4) = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 3, "NonFinite");
  v8 = (float)(unint64_t)(qword_253D97890 + 1);
  if (!v1 || (float)(*(float *)&dword_253D97898 * (float)v1) < v8)
  {
    v9 = 1;
    if (v1 >= 3)
      v9 = (v1 & (v1 - 1)) != 0;
    v10 = v9 | (2 * v1);
    v11 = vcvtps_u32_f32(v8 / *(float *)&dword_253D97898);
    if (v10 <= v11)
      v12 = v11;
    else
      v12 = v10;
    std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__rehash<true>(v12);
    v1 = *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
  }
  v13 = (_QWORD *)rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
  v14 = *(_QWORD **)rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
  if (*(_QWORD *)rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap)
  {
    *v7 = *v14;
LABEL_30:
    *v14 = v7;
    goto LABEL_31;
  }
  *v7 = qword_253D97888;
  qword_253D97888 = (uint64_t)v7;
  *v13 = &qword_253D97888;
  if (*v7)
  {
    v15 = *(_QWORD *)(*v7 + 8);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (v15 >= v1)
        v15 %= v1;
    }
    else
    {
      v15 &= v1 - 1;
    }
    v14 = (_QWORD *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v15);
    goto LABEL_30;
  }
LABEL_31:
  ++qword_253D97890;
  v1 = *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
LABEL_32:
  if (v1)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
    v16.i16[0] = vaddlv_u8(v16);
    v0 = v16.u32[0] >= 2uLL ? v1 != 1 : (v1 & 1) == 0;
    v17 = *(uint64_t **)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v0);
    if (v17)
    {
      while (1)
      {
        v17 = (uint64_t *)*v17;
        if (!v17)
          break;
        v18 = v17[1];
        if (v18 == 1)
        {
          if (*((_DWORD *)v17 + 4) == 1)
            goto LABEL_68;
        }
        else
        {
          if (v16.u32[0] > 1uLL)
          {
            if (v18 >= v1)
              v18 %= v1;
          }
          else
          {
            v18 &= v1 - 1;
          }
          if (v18 != v0)
            break;
        }
      }
    }
  }
  v19 = operator new(0x30uLL);
  *v19 = 0;
  v19[1] = 1;
  *((_DWORD *)v19 + 4) = 1;
  std::string::basic_string[abi:ne180100]<0>(v19 + 3, "Silence");
  v20 = (float)(unint64_t)(qword_253D97890 + 1);
  if (!v1 || (float)(*(float *)&dword_253D97898 * (float)v1) < v20)
  {
    v21 = 1;
    if (v1 >= 3)
      v21 = (v1 & (v1 - 1)) != 0;
    v22 = v21 | (2 * v1);
    v23 = vcvtps_u32_f32(v20 / *(float *)&dword_253D97898);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__rehash<true>(v24);
    v1 = *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
    v25 = 1;
    if (*((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) <= 1uLL)
      v25 = *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) != 1;
    if ((*((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) & (*((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap
                                                                                         + 1)
                                                                                       - 1)) != 0)
      v0 = v25;
    else
      v0 = (BYTE8(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap) & 1) == 0;
  }
  v26 = rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
  v27 = *(_QWORD **)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v0);
  if (v27)
  {
    *v19 = *v27;
LABEL_66:
    *v27 = v19;
    goto LABEL_67;
  }
  *v19 = qword_253D97888;
  qword_253D97888 = (uint64_t)v19;
  *(_QWORD *)(v26 + 8 * v0) = &qword_253D97888;
  if (*v19)
  {
    v28 = *(_QWORD *)(*v19 + 8);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (v28 >= v1)
        v28 %= v1;
    }
    else
    {
      v28 &= v1 - 1;
    }
    v27 = (_QWORD *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v28);
    goto LABEL_66;
  }
LABEL_67:
  ++qword_253D97890;
LABEL_68:
  std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType,char const(&)[22]>(2u, 2, "SampleAccurateSilence");
  v29 = *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
  if (*((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1))
  {
    v30 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8));
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
      v0 = *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) <= 3uLL
         ? 3uLL % *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1)
         : 3;
    else
      v0 = (DWORD2(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap) - 1) & 3;
    v31 = *(uint64_t ***)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v0);
    if (v31)
    {
      for (i = *v31; i; i = (uint64_t *)*i)
      {
        v33 = i[1];
        if (v33 == 3)
        {
          if (*((_DWORD *)i + 4) == 3)
            goto LABEL_108;
        }
        else
        {
          if (v30.u32[0] > 1uLL)
          {
            if (v33 >= *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1))
              v33 %= *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
          }
          else
          {
            v33 &= *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) - 1;
          }
          if (v33 != v0)
            break;
        }
      }
    }
  }
  v34 = operator new(0x30uLL);
  *v34 = 0;
  v34[1] = 3;
  *((_DWORD *)v34 + 4) = 3;
  std::string::basic_string[abi:ne180100]<0>(v34 + 3, "Overload");
  v35 = (float)(unint64_t)(qword_253D97890 + 1);
  if (!v29 || (float)(*(float *)&dword_253D97898 * (float)v29) < v35)
  {
    v36 = 1;
    if (v29 >= 3)
      v36 = (v29 & (v29 - 1)) != 0;
    v37 = v36 | (2 * v29);
    v38 = vcvtps_u32_f32(v35 / *(float *)&dword_253D97898);
    if (v37 <= v38)
      v39 = v38;
    else
      v39 = v37;
    std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__rehash<true>(v39);
    v29 = *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
    if ((v29 & (v29 - 1)) != 0)
    {
      if (*((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) <= 3uLL)
        v0 = 3uLL % *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
      else
        v0 = 3;
    }
    else
    {
      v0 = (DWORD2(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap) - 1) & 3;
    }
  }
  v40 = rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
  v41 = *(_QWORD **)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v0);
  if (v41)
  {
    *v34 = *v41;
LABEL_106:
    *v41 = v34;
    goto LABEL_107;
  }
  *v34 = qword_253D97888;
  qword_253D97888 = (uint64_t)v34;
  *(_QWORD *)(v40 + 8 * v0) = &qword_253D97888;
  if (*v34)
  {
    v42 = *(_QWORD *)(*v34 + 8);
    if ((v29 & (v29 - 1)) != 0)
    {
      if (v42 >= v29)
        v42 %= v29;
    }
    else
    {
      v42 &= v29 - 1;
    }
    v41 = (_QWORD *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v42);
    goto LABEL_106;
  }
LABEL_107:
  ++qword_253D97890;
LABEL_108:
  std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType,char const(&)[22]>(4u, 4, "AnalyzerRealTimeError");
  v43 = *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
  if (*((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1))
  {
    v44 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8));
    v44.i16[0] = vaddlv_u8(v44);
    if (v44.u32[0] > 1uLL)
      v0 = *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) <= 5uLL
         ? 5uLL % *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1)
         : 5;
    else
      v0 = (DWORD2(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap) - 1) & 5;
    v45 = *(uint64_t ***)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v0);
    if (v45)
    {
      for (j = *v45; j; j = (uint64_t *)*j)
      {
        v47 = j[1];
        if (v47 == 5)
        {
          if (*((_DWORD *)j + 4) == 5)
            goto LABEL_148;
        }
        else
        {
          if (v44.u32[0] > 1uLL)
          {
            if (v47 >= *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1))
              v47 %= *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
          }
          else
          {
            v47 &= *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) - 1;
          }
          if (v47 != v0)
            break;
        }
      }
    }
  }
  v48 = operator new(0x30uLL);
  *v48 = 0;
  v48[1] = 5;
  *((_DWORD *)v48 + 4) = 5;
  std::string::basic_string[abi:ne180100]<0>(v48 + 3, "TelephonyChainRMS");
  v49 = (float)(unint64_t)(qword_253D97890 + 1);
  if (!v43 || (float)(*(float *)&dword_253D97898 * (float)v43) < v49)
  {
    v50 = 1;
    if (v43 >= 3)
      v50 = (v43 & (v43 - 1)) != 0;
    v51 = v50 | (2 * v43);
    v52 = vcvtps_u32_f32(v49 / *(float *)&dword_253D97898);
    if (v51 <= v52)
      v53 = v52;
    else
      v53 = v51;
    std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__rehash<true>(v53);
    v43 = *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
    if ((v43 & (v43 - 1)) != 0)
    {
      if (*((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) <= 5uLL)
        v0 = 5uLL % *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
      else
        v0 = 5;
    }
    else
    {
      v0 = (DWORD2(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap) - 1) & 5;
    }
  }
  v54 = rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
  v55 = *(_QWORD **)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v0);
  if (v55)
  {
    *v48 = *v55;
LABEL_146:
    *v55 = v48;
    goto LABEL_147;
  }
  *v48 = qword_253D97888;
  qword_253D97888 = (uint64_t)v48;
  *(_QWORD *)(v54 + 8 * v0) = &qword_253D97888;
  if (*v48)
  {
    v56 = *(_QWORD *)(*v48 + 8);
    if ((v43 & (v43 - 1)) != 0)
    {
      if (v56 >= v43)
        v56 %= v43;
    }
    else
    {
      v56 &= v43 - 1;
    }
    v55 = (_QWORD *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v56);
    goto LABEL_146;
  }
LABEL_147:
  ++qword_253D97890;
  v43 = *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
LABEL_148:
  if (v43)
  {
    v57 = (uint8x8_t)vcnt_s8((int8x8_t)v43);
    v57.i16[0] = vaddlv_u8(v57);
    if (v57.u32[0] > 1uLL)
      v2 = v43 <= 6 ? 6 % v43 : 6;
    else
      v2 = ((int)v43 - 1) & 6;
    v58 = *(uint64_t ***)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v2);
    if (v58)
    {
      for (k = *v58; k; k = (uint64_t *)*k)
      {
        v60 = k[1];
        if (v60 == 6)
        {
          if (*((_DWORD *)k + 4) == 6)
            return;
        }
        else
        {
          if (v57.u32[0] > 1uLL)
          {
            if (v60 >= v43)
              v60 %= v43;
          }
          else
          {
            v60 &= v43 - 1;
          }
          if (v60 != v2)
            break;
        }
      }
    }
  }
  v61 = operator new(0x30uLL);
  *v61 = 0;
  v61[1] = 6;
  *((_DWORD *)v61 + 4) = 6;
  std::string::basic_string[abi:ne180100]<0>(v61 + 3, "RMS");
  v62 = (float)(unint64_t)(qword_253D97890 + 1);
  if (!v43 || (float)(*(float *)&dword_253D97898 * (float)v43) < v62)
  {
    v63 = 1;
    if (v43 >= 3)
      v63 = (v43 & (v43 - 1)) != 0;
    v64 = v63 | (2 * v43);
    v65 = vcvtps_u32_f32(v62 / *(float *)&dword_253D97898);
    if (v64 <= v65)
      v66 = v65;
    else
      v66 = v64;
    std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__rehash<true>(v66);
    v43 = *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
    if ((v43 & (v43 - 1)) != 0)
    {
      if (*((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) <= 6uLL)
        v2 = 6uLL % *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
      else
        v2 = 6;
    }
    else
    {
      v2 = (DWORD2(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap) - 1) & 6;
    }
  }
  v67 = rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
  v68 = *(_QWORD **)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v2);
  if (v68)
  {
    *v61 = *v68;
LABEL_186:
    *v68 = v61;
    goto LABEL_187;
  }
  *v61 = qword_253D97888;
  qword_253D97888 = (uint64_t)v61;
  *(_QWORD *)(v67 + 8 * v2) = &qword_253D97888;
  if (*v61)
  {
    v69 = *(_QWORD *)(*v61 + 8);
    if ((v43 & (v43 - 1)) != 0)
    {
      if (v69 >= v43)
        v69 %= v43;
    }
    else
    {
      v69 &= v43 - 1;
    }
    v68 = (_QWORD *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v69);
    goto LABEL_186;
  }
LABEL_187:
  ++qword_253D97890;
}

void sub_216D37D04(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AIDM_ClientID,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType,char const(&)[22]>(unsigned int a1, int a2, char *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a1;
  v7 = *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
  if (*((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1))
  {
    v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8));
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a1;
      if (*((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) <= (unint64_t)a1)
        v3 = (unint64_t)a1 % *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
    }
    else
    {
      v3 = (DWORD2(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap) - 1) & a1;
    }
    v9 = *(uint64_t ***)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a1)
        {
          if (*((_DWORD *)i + 4) == a1)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1))
              v11 %= *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
          }
          else
          {
            v11 &= *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x30uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a2;
  std::string::basic_string[abi:ne180100]<0>(v12 + 3, a3);
  v13 = (float)(unint64_t)(qword_253D97890 + 1);
  if (!v7 || (float)(*(float *)&dword_253D97898 * (float)v7) < v13)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_253D97898);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__rehash<true>(v17);
    v7 = *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (*((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) <= v6)
        v3 = v6 % *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
      else
        v3 = v6;
    }
    else
    {
      v3 = (DWORD2(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap) - 1) & v6;
    }
  }
  v18 = rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
  v19 = *(_QWORD **)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v3);
  if (v19)
  {
    *v12 = *v19;
LABEL_38:
    *v19 = v12;
    goto LABEL_39;
  }
  *v12 = qword_253D97888;
  qword_253D97888 = (uint64_t)v12;
  *(_QWORD *)(v18 + 8 * v3) = &qword_253D97888;
  if (*v12)
  {
    v20 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++qword_253D97890;
}

void sub_216D37F64(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AIDM_ClientID,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__rehash<true>(size_t __n)
{
  size_t prime;
  size_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD **v6;
  size_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *i;
  size_t v13;
  void *v14;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v2 = *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
  if (prime <= *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1))
  {
    if (prime >= *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1))
      return;
    v9 = vcvtps_u32_f32((float)(unint64_t)qword_253D97890 / *(float *)&dword_253D97898);
    if (*((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) < 3uLL
      || (v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      v9 = std::__next_prime(v9);
    }
    else
    {
      v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2)
        v9 = v11;
    }
    if (prime <= v9)
      prime = v9;
    if (prime >= v2)
      return;
    if (!prime)
    {
      v14 = (void *)rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
      *(_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap = 0;
      if (v14)
        operator delete(v14);
      *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v3 = operator new(8 * prime);
  v4 = (void *)rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
  *(_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap = v3;
  if (v4)
    operator delete(v4);
  v5 = 0;
  *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) = prime;
  do
    *(_QWORD *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v5++) = 0;
  while (prime != v5);
  v6 = (_QWORD **)qword_253D97888;
  if (qword_253D97888)
  {
    v7 = *(_QWORD *)(qword_253D97888 + 8);
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime)
        v7 %= prime;
    }
    else
    {
      v7 &= prime - 1;
    }
    *(_QWORD *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v7) = &qword_253D97888;
    for (i = *v6; i; v7 = v13)
    {
      v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime)
          v13 %= prime;
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(_QWORD *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v13))
        {
          *(_QWORD *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v13) = v6;
          goto LABEL_31;
        }
        *v6 = (_QWORD *)*i;
        *i = **(_QWORD **)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v13);
        **(_QWORD **)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v13) = i;
        i = v6;
      }
      v13 = v7;
LABEL_31:
      v6 = (_QWORD **)i;
      i = (_QWORD *)*i;
    }
  }
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x40uLL);
    v9[4] = *a3;
    v9[5] = 0;
    v9[6] = 0;
    v9[7] = 0;
    std::__tree<rtaid::AnalyzerType>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

uint64_t std::__split_buffer<std::unique_ptr<ADAM::Writer>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::deque<std::shared_ptr<ADAM::BufferNodeMsg>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6 + 16 * v5;
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {
        v7 = std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100](v7) + 16;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 128;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 256;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[3];
      v2[3] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void ADAM::ClientSessionManager::~ClientSessionManager(ADAM::ClientSessionManager *this)
{
  void *v2;
  const __CFString *v3;
  __CFString *Copy;
  __CFString *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  void **v9;

  v2 = (void *)MEMORY[0x219A01060]();
  v3 = (const __CFString *)*((_QWORD *)this + 31);
  if (v3)
  {
    if ((*((_BYTE *)this + 280) & 4) != 0)
      Copy = CFSTR("Codec");
    else
      Copy = (__CFString *)CFStringCreateCopy(0, v3);
  }
  else
  {
    Copy = 0;
  }
  v5 = Copy;
  v6 = *((_QWORD *)this + 35);
  objc_msgSend(MEMORY[0x24BE3E7E8], "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "deviceSessionDestroyed:isWired:", v5, (v6 >> 1) & 1);

  objc_autoreleasePoolPop(v2);
  ADAM::releaseADAMDeviceInfo((uint64_t)this + 248);
  std::deque<std::shared_ptr<ADAM::BufferNodeMsg>>::~deque[abi:ne180100]((uint64_t)this + 384);
  std::mutex::~mutex((std::mutex *)this + 5);
  v8 = (void *)*((_QWORD *)this + 37);
  if (v8)
  {
    *((_QWORD *)this + 38) = v8;
    operator delete(v8);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 184));
  std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::~__hash_table((uint64_t)this + 144);
  v9 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::mutex::~mutex((std::mutex *)((char *)this + 56));
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>>>::~__hash_table((uint64_t)this + 16);
}

void ADAM::ClientSessionManager::updateReportingSessions(uint64_t a1, uint64_t **a2)
{
  NSObject *v3;
  id v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  const __CFDictionary *v9;
  void *Value;
  void *v11;
  CFTypeID v12;
  NSObject *v13;
  NSObject *v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  id v19;
  id v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **i;
  _QWORD *v24;
  _OWORD *v25;
  uint64_t **v26;
  unint64_t v27;
  uint64_t **v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t **v31;
  BOOL v32;
  uint64_t v33;
  std::string *v34;
  __int128 v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t *j;
  CFDictionaryRef theDict[2];
  char *v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;
  CFDictionaryRef *v45;
  char v46;
  CFDictionaryRef v47;
  CFDictionaryRef v48;
  uint8_t buf[32];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (!ADAM::ADAMLogScope(void)::scope)
  {
    v3 = MEMORY[0x24BDACB70];
    v4 = MEMORY[0x24BDACB70];
    goto LABEL_7;
  }
  v3 = *(id *)ADAM::ADAMLogScope(void)::scope;
  if (v3)
  {
LABEL_7:
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5 = a2[1] - *a2;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ADAMClientSessionManager.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 63;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v5;
      _os_log_impl(&dword_216CFB000, v3, OS_LOG_TYPE_INFO, "%25s:%-5d updating reporting sessions with %lu keys", buf, 0x1Cu);
    }

  }
  v7 = *a2;
  v6 = a2[1];
  if (v6 == *a2)
    return;
  v43 = 0;
  v44 = 0;
  v42 = &v43;
  do
  {
    v8 = *v7;
    if (AudioStatisticsLibraryLoader(void)::once != -1)
      dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_1115);
    if (AudioStatisticsLibraryLoader(void)::libSym)
      v9 = (const __CFDictionary *)AudioStatisticsLibraryLoader(void)::libSym(v8);
    else
      v9 = 0;
    theDict[0] = v9;
    LOWORD(theDict[1]) = 1;
    if (CFDictionaryContainsKey(v9, CFSTR("HostApplicationDisplayID")))
    {
      if (theDict[0])
      {
        Value = (void *)CFDictionaryGetValue(theDict[0], CFSTR("HostApplicationDisplayID"));
        v11 = Value;
        if (Value)
        {
          v12 = CFGetTypeID(Value);
          if (v12 == CFStringGetTypeID())
          {
            if (ADAM::ADAMLogScope(void)::once != -1)
              dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
            if (ADAM::ADAMLogScope(void)::scope)
            {
              v13 = *(id *)ADAM::ADAMLogScope(void)::scope;
              if (!v13)
              {
LABEL_50:
                v14 = objc_retainAutorelease(v11);
                std::string::basic_string[abi:ne180100]<0>(buf, (char *)-[NSObject UTF8String](v14, "UTF8String"));
                v21 = v43;
                v22 = &v43;
                for (i = &v43; v21; v21 = v22[1])
                {
                  while (1)
                  {
                    v22 = (uint64_t **)v21;
                    v24 = v21 + 4;
                    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(buf, v21 + 4) & 0x80) == 0)
                      break;
                    v21 = *v22;
                    i = v22;
                    if (!*v22)
                      goto LABEL_56;
                  }
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24, buf) & 0x80) == 0)
                    goto LABEL_59;
                  i = v22 + 1;
                }
LABEL_56:
                v25 = operator new(0x38uLL);
                v25[2] = *(_OWORD *)buf;
                *((_QWORD *)v25 + 6) = *(_QWORD *)&buf[16];
                memset(buf, 0, 24);
                *(_QWORD *)v25 = 0;
                *((_QWORD *)v25 + 1) = 0;
                *((_QWORD *)v25 + 2) = v22;
                *i = (uint64_t *)v25;
                if (*v42)
                {
                  v42 = (uint64_t **)*v42;
                  v25 = *i;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v43, (uint64_t *)v25);
                ++v44;
LABEL_59:
                if ((char)buf[23] < 0)
                  operator delete(*(void **)buf);
                goto LABEL_43;
              }
            }
            else
            {
              v13 = MEMORY[0x24BDACB70];
              v20 = MEMORY[0x24BDACB70];
            }
            if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "ADAMClientSessionManager.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 83;
              *(_WORD *)&buf[18] = 2112;
              *(_QWORD *)&buf[20] = v11;
              _os_log_impl(&dword_216CFB000, v13, OS_LOG_TYPE_INFO, "%25s:%-5d updating bundleID: %@", buf, 0x1Cu);
            }

            goto LABEL_50;
          }
        }
      }
      if (ADAM::ADAMLogScope(void)::once != -1)
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
      if (!ADAM::ADAMLogScope(void)::scope)
      {
        v14 = MEMORY[0x24BDACB70];
        v15 = MEMORY[0x24BDACB70];
LABEL_37:
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ADAMClientSessionManager.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 89;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v8;
          v16 = v14;
          v17 = OS_LOG_TYPE_DEFAULT;
          v18 = "%25s:%-5d Missing HostApplicationDisplayID for CAReporterID %llu";
          goto LABEL_42;
        }
        goto LABEL_43;
      }
      v14 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (v14)
        goto LABEL_37;
    }
    else
    {
      if (ADAM::ADAMLogScope(void)::once != -1)
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
      if (!ADAM::ADAMLogScope(void)::scope)
      {
        v14 = MEMORY[0x24BDACB70];
        v19 = MEMORY[0x24BDACB70];
LABEL_40:
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ADAMClientSessionManager.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 77;
          *(_WORD *)&buf[18] = 2112;
          *(CFDictionaryRef *)&buf[20] = theDict[0];
          v16 = v14;
          v17 = OS_LOG_TYPE_ERROR;
          v18 = "%25s:%-5d Configuration has no key 'HostApplicationDisplayID', %@";
LABEL_42:
          _os_log_impl(&dword_216CFB000, v16, v17, v18, buf, 0x1Cu);
        }
LABEL_43:

        goto LABEL_44;
      }
      v14 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (v14)
        goto LABEL_40;
    }
LABEL_44:
    CACFDictionary::~CACFDictionary((CACFDictionary *)theDict);
    ++v7;
  }
  while (v7 != v6);
  std::mutex::lock((std::mutex *)(a1 + 184));
  v26 = v42;
  theDict[1] = 0;
  v41 = 0;
  theDict[0] = 0;
  if (v42 != &v43)
  {
    v27 = 0;
    v28 = v42;
    do
    {
      v29 = v27;
      v30 = v28[1];
      if (v30)
      {
        do
        {
          v31 = (uint64_t **)v30;
          v30 = (uint64_t *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (uint64_t **)v28[2];
          v32 = *v31 == (uint64_t *)v28;
          v28 = v31;
        }
        while (!v32);
      }
      ++v27;
      v28 = v31;
    }
    while (v31 != &v43);
    v45 = theDict;
    v46 = 0;
    if (v29 >= 0xAAAAAAAAAAAAAAALL)
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    theDict[0] = (CFDictionaryRef)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v27);
    theDict[1] = theDict[0];
    v41 = (char *)theDict[0] + 24 * v33;
    v47 = theDict[0];
    v48 = theDict[0];
    *(_QWORD *)buf = &v41;
    *(_QWORD *)&buf[8] = &v47;
    *(_QWORD *)&buf[16] = &v48;
    buf[24] = 0;
    v34 = (std::string *)theDict[0];
    do
    {
      if (*((char *)v26 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v34, (const std::string::value_type *)v26[4], (std::string::size_type)v26[5]);
      }
      else
      {
        v35 = *((_OWORD *)v26 + 2);
        v34->__r_.__value_.__r.__words[2] = (std::string::size_type)v26[6];
        *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
      }
      v36 = v26[1];
      if (v36)
      {
        do
        {
          v37 = (uint64_t **)v36;
          v36 = (uint64_t *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (uint64_t **)v26[2];
          v32 = *v37 == (uint64_t *)v26;
          v26 = v37;
        }
        while (!v32);
      }
      v34 = (std::string *)((char *)v48 + 24);
      v48 = (CFDictionaryRef)((char *)v48 + 24);
      v26 = v37;
    }
    while (v37 != &v43);
    buf[24] = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)buf);
    theDict[1] = (CFDictionaryRef)v34;
  }
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)theDict;
  *(_QWORD *)(a1 + 136) = v41;
  theDict[1] = 0;
  v41 = 0;
  theDict[0] = 0;
  *(_QWORD *)buf = theDict;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  for (j = *(uint64_t **)(a1 + 160); j; j = (uint64_t *)*j)
    *((_BYTE *)j + 20) = 1;
  std::mutex::unlock((std::mutex *)(a1 + 184));
  std::__tree<std::string>::destroy((char *)v43);
}

void sub_216D38CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__tree<std::string>::destroy(a17);
  _Unwind_Resume(a1);
}

void CACFDictionary::~CACFDictionary(CACFDictionary *this)
{
  const void *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(_QWORD *)a1);
    std::__tree<std::string>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_BYTE *)v10 + 20) = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v14 = 1;
  if (v7 >= 3)
    v14 = (v7 & (v7 - 1)) != 0;
  v15 = v14 | (2 * v7);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v6] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_216D393A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_216D39464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>>>::__erase_unique<unsigned int>(_QWORD *a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t *v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v3 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(a1, a2);
  if (v3)
  {
    v4 = v3;
    v5 = (int8x8_t)a1[1];
    v6 = v3[1];
    v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v5)
        v6 %= *(_QWORD *)&v5;
    }
    else
    {
      v6 &= *(_QWORD *)&v5 - 1;
    }
    v8 = *(uint64_t **)(*a1 + 8 * v6);
    do
    {
      v9 = v8;
      v8 = (uint64_t *)*v8;
    }
    while (v8 != v3);
    if (v9 == a1 + 2)
      goto LABEL_20;
    v10 = v9[1];
    if (v7.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v5)
        v10 %= *(_QWORD *)&v5;
    }
    else
    {
      v10 &= *(_QWORD *)&v5 - 1;
    }
    if (v10 != v6)
    {
LABEL_20:
      if (!*v3)
        goto LABEL_21;
      v11 = *(_QWORD *)(*v3 + 8);
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(_QWORD *)&v5)
          v11 %= *(_QWORD *)&v5;
      }
      else
      {
        v11 &= *(_QWORD *)&v5 - 1;
      }
      if (v11 != v6)
LABEL_21:
        *(_QWORD *)(*a1 + 8 * v6) = 0;
    }
    v12 = *v3;
    if (*v3)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v7.u32[0] > 1uLL)
      {
        if (v13 >= *(_QWORD *)&v5)
          v13 %= *(_QWORD *)&v5;
      }
      else
      {
        v13 &= *(_QWORD *)&v5 - 1;
      }
      if (v13 != v6)
      {
        *(_QWORD *)(*a1 + 8 * v13) = v9;
        v12 = *v3;
      }
    }
    *v9 = v12;
    *v3 = 0;
    --a1[3];
    v14 = v3[3];
    v4[3] = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14);
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<ADAM::BufferNodeMsg>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D6167E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ADAM::BufferNodeMsg>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D6167E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A00DF0);
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void ADAM::BufferNodeDescriptorSPL::~BufferNodeDescriptorSPL(void **this)
{
  *this = off_24D6168E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_24D6168E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x219A00DF0);
}

void ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::initialize(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 8))
  {
    ADAM::AudioDataAnalysisManager::instance((ADAM::AudioDataAnalysisManager *)a1);
    ADAM::AudioDataAnalysisManager::addWriters(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 96));
    *(_BYTE *)(a1 + 8) = 1;
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v2 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v2)
        return;
    }
    else
    {
      v2 = MEMORY[0x24BDACB70];
      v3 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(_QWORD *)(a1 + 16);
      v5 = 136315650;
      v6 = "ADAMBufferNodes.hpp";
      v7 = 1024;
      v8 = 108;
      v9 = 2048;
      v10 = v4;
      _os_log_impl(&dword_216CFB000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session: %llx initialized", (uint8_t *)&v5, 0x1Cu);
    }

  }
}

void ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::reset(uint64_t a1)
{
  int v2;
  NSObject *v3;
  id v4;
  uint64_t v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)(a1 + 120))
  {
LABEL_5:
    *(_DWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 116) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    return;
  }
  v2 = -50500;
  while (1)
  {
    v2 += 500;
    if (!v2)
      break;
    usleep(0x1F4u);
    if (!*(_DWORD *)(a1 + 120))
      goto LABEL_5;
  }
  if (ADAM::ADAMLogScope(void)::once != -1)
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
  if (ADAM::ADAMLogScope(void)::scope)
  {
    v3 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v3)
      return;
  }
  else
  {
    v3 = MEMORY[0x24BDACB70];
    v4 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = 136315650;
    v7 = "ADAMBufferNodes.hpp";
    v8 = 1024;
    v9 = 119;
    v10 = 2048;
    v11 = v5;
    _os_log_impl(&dword_216CFB000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Session: %llx Failed to flush ring buffer, Timedout", (uint8_t *)&v6, 0x1Cu);
  }

}

uint64_t ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::process(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  id v8;
  unsigned int *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t result;
  id v22;
  NSObject *v23;
  uint64_t v24;
  _BYTE v25[16];
  _BYTE buf[20];
  uint64_t v27;
  __int16 v28;
  _BYTE *v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)buf = *(_OWORD *)a2;
  *(_DWORD *)&buf[16] = *(_DWORD *)(a2 + 16);
  v4 = *(_DWORD *)(a1 + 112);
  v5 = *(_DWORD *)(a1 + 176);
  if (*(_DWORD *)(a1 + 120) == v5)
  {
    ++ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::process(ADAM::UnionDataPtr,ADAM::Metadata const&)::err_cnt;
    v6 = ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::process(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
    v7 = ++ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::process(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
    if (v6)
    {
LABEL_26:
      if (v7 > 0xBB7)
        v7 = 0;
      ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::process(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt = v7;
      return 1718971425;
    }
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v8 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v8)
      {
LABEL_25:
        v7 = ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::process(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
        goto LABEL_26;
      }
    }
    else
    {
      v8 = (id)MEMORY[0x24BDACB70];
      v22 = MEMORY[0x24BDACB70];
    }
    v23 = v8;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = *(_QWORD *)(a1 + 16);
      CAX4CCString::CAX4CCString((CAX4CCString *)v25, 0x66756C21u);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "ADAMBufferNodes.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 151;
      *(_WORD *)&buf[18] = 2048;
      v27 = v24;
      v28 = 2080;
      v29 = v25;
      v30 = 1024;
      v31 = ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::process(ADAM::UnionDataPtr,ADAM::Metadata const&)::err_cnt;
      _os_log_impl(&dword_216CFB000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Session %llx: Failed to process data, err code: %s, failed count: %u", buf, 0x2Cu);
    }

    goto LABEL_25;
  }
  v9 = (unsigned int *)(a1 + 120);
  v10 = *(_QWORD *)(a1 + 152) + 20 * v4;
  *(_OWORD *)v10 = *(_OWORD *)buf;
  *(_DWORD *)(v10 + 16) = *(_DWORD *)&buf[16];
  v11 = (_OWORD *)(*(_QWORD *)(a1 + 128) + 80 * v4);
  *v11 = *a3;
  v12 = a3[1];
  v13 = a3[2];
  v14 = a3[4];
  v11[3] = a3[3];
  v11[4] = v14;
  v11[1] = v12;
  v11[2] = v13;
  *(_DWORD *)(a1 + 112) = (v4 + 1) % v5;
  do
    v15 = __ldaxr(v9);
  while (__stlxr(v15 + 1, v9));
  v16 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 56);
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v16 + 16) = 4;
  ADAM::AudioDataAnalysisManager::instance((ADAM::AudioDataAnalysisManager *)a1);
  v17 = qword_253D97670[0];
  atomic_store(qword_253D97670[0], (unint64_t *)v16);
  v18 = __ldaxr(qword_253D97670);
  if (v18 != v17)
  {
    __clrex();
LABEL_14:
    while (1)
    {
      atomic_store(v18, (unint64_t *)v16);
      v19 = __ldaxr(qword_253D97670);
      if (v19 != v18)
        break;
      if (__stlxr(v16, qword_253D97670))
        goto LABEL_18;
      v20 = 1;
LABEL_19:
      v18 = v19;
      if (v20)
        goto LABEL_20;
    }
    __clrex();
LABEL_18:
    v20 = 0;
    goto LABEL_19;
  }
  if (__stlxr(v16, qword_253D97670))
    goto LABEL_14;
LABEL_20:
  caulk::semaphore::signal((caulk::semaphore *)&unk_253D97658);
  result = 0;
  *(_DWORD *)(a1 + 56) = (*(_DWORD *)(a1 + 56) + 1) % *(_DWORD *)(a1 + 176);
  return result;
}

void sub_216D39E08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::read(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;

  v3 = *(_DWORD *)(a1 + 116);
  v4 = *(_DWORD *)(a1 + 176);
  v5 = (unsigned int *)(a1 + 120);
  if (!atomic_load((unsigned int *)(a1 + 120)))
    return 1701670945;
  v7 = *(_QWORD *)(a1 + 152) + 20 * v3;
  v8 = v3 + 1;
  v9 = *(_OWORD *)v7;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(v7 + 16);
  *(_OWORD *)a2 = v9;
  v10 = (_OWORD *)(*(_QWORD *)(a1 + 128) + 80 * v3);
  *a3 = *v10;
  v11 = v10[1];
  v12 = v10[2];
  v13 = v10[4];
  a3[3] = v10[3];
  a3[4] = v13;
  a3[1] = v11;
  a3[2] = v12;
  *(_DWORD *)(a1 + 116) = v8 % v4;
  do
    v14 = __ldaxr(v5);
  while (__stlxr(v14 - 1, v5));
  return 0;
}

_DWORD *ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::pop(_DWORD *result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result[30])
  {
    v1 = result + 30;
    result[29] = (result[29] + 1) % result[44];
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 - 1, v1));
  }
  return result;
}

uint64_t ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::getNodeDescriptor(uint64_t a1)
{
  return a1 + 64;
}

uint64_t ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::~BufferNodeSPL(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24D616820;
  ADAM::ADAMRingBuffer<ADAM::SPLData>::~ADAMRingBuffer((_QWORD *)(a1 + 112));
  *(_QWORD *)(a1 + 64) = off_24D6168E0;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  *(_QWORD *)a1 = &unk_24D616870;
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  return a1;
}

void ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::~BufferNodeSPL(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24D616820;
  ADAM::ADAMRingBuffer<ADAM::SPLData>::~ADAMRingBuffer((_QWORD *)(a1 + 112));
  *(_QWORD *)(a1 + 64) = off_24D6168E0;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  *(_QWORD *)a1 = &unk_24D616870;
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x219A00DF0);
}

_QWORD *ADAM::ADAMRingBuffer<ADAM::SPLData>::~ADAMRingBuffer(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void ADAM::Analyzer::MediaExposureBuffer::~MediaExposureBuffer(ADAM::Analyzer::MediaExposureBuffer *this)
{
  JUMPOUT(0x219A00DF0);
}

void ADAM::Analyzer::MediaExposureBuffer::flush(ADAM::Analyzer::MediaExposureBuffer *this)
{
  double v1;
  long double v3;
  NSObject *v4;
  id v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v1 = *((double *)this + 16);
  if (v1 > 0.0)
  {
    v3 = log(*((double *)this + 15) / v1);
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 16) = 0;
    *(float *)&v3 = v3 * 10.0 / 2.30258509;
    *((_DWORD *)this + 34) = LODWORD(v3);
    *(float *)&v3 = v1;
    *((_DWORD *)this + 38) = LODWORD(v3);
    *((_BYTE *)this + 112) = 1;
    *((_QWORD *)this + 13) = 1;
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v4 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v4)
        return;
    }
    else
    {
      v4 = MEMORY[0x24BDACB70];
      v5 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v6 = 136315394;
      v7 = "MediaExposureBuffer.cpp";
      v8 = 1024;
      v9 = 78;
      _os_log_impl(&dword_216CFB000, v4, OS_LOG_TYPE_INFO, "%25s:%-5d LoudnessAnalyzer needs to be flushed", (uint8_t *)&v6, 0x12u);
    }

  }
}

uint64_t ADAM::Analyzer::MediaExposureBuffer::analyze(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  std::mutex *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  int v15;
  unsigned int v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  unsigned int v21;
  NSObject *v22;
  id v23;
  double v24;
  double v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  double v29;
  double v30;
  double v31;
  id v32;
  long double v33;
  int v34;
  unsigned int v35;
  NSObject *v36;
  id v37;
  id v39;
  double v40;
  double v41;
  double v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  ADAM::AudioDataAnalysisManager::instance((ADAM::AudioDataAnalysisManager *)a1);
  v7 = (std::mutex *)(qword_253D976D0 + 24);
  std::mutex::lock((std::mutex *)(qword_253D976D0 + 24));
  v8 = *(void **)(qword_253D976D0 + 16);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", 1751213428);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKey:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v11 = v10;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v43, buf, 16);
  if (!v12)
    goto LABEL_9;
  v13 = *(_QWORD *)v44;
  while (2)
  {
    for (i = 0; i != v12; ++i)
    {
      if (*(_QWORD *)v44 != v13)
        objc_enumerationMutation(v11);
      if ((objc_msgSend(*(id *)(*((_QWORD *)&v43 + 1) + 8 * i), "isActive:", 1751213428, (_QWORD)v43) & 1) != 0)
      {

        std::mutex::unlock(v7);
        if (a3)
        {
          if (*(float *)a3 < 0.0 || *(float *)a3 >= 130.0 || *(float *)(a3 + 16) < 0.0)
          {
            if (ADAM::ADAMLogScope(void)::once != -1)
              dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
            v18 = 1684108321;
            if (ADAM::ADAMLogScope(void)::scope)
            {
              v19 = *(id *)ADAM::ADAMLogScope(void)::scope;
              if (!v19)
                return v18;
            }
            else
            {
              v19 = MEMORY[0x24BDACB70];
              v23 = MEMORY[0x24BDACB70];
            }
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              v24 = *(float *)a3;
              v25 = *(float *)(a3 + 16);
              *(_DWORD *)buf = 136315906;
              v48 = "MediaExposureBuffer.cpp";
              v49 = 1024;
              v50 = 108;
              v51 = 2048;
              v52 = v24;
              v53 = 2048;
              v54 = v25;
              _os_log_impl(&dword_216CFB000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid HAE data { dBA: %.2f, duration: %.2f }", buf, 0x26u);
            }

            return v18;
          }
          *(_OWORD *)(a1 + 32) = *a4;
          v26 = a4[1];
          v27 = a4[2];
          v28 = a4[4];
          *(_OWORD *)(a1 + 80) = a4[3];
          *(_OWORD *)(a1 + 96) = v28;
          *(_OWORD *)(a1 + 48) = v26;
          *(_OWORD *)(a1 + 64) = v27;
          *(double *)&v26 = *(float *)a3;
          v29 = *(float *)(a3 + 16);
          *(double *)(a1 + 128) = *(double *)(a1 + 128) + v29;
          v30 = *(double *)(a1 + 120) + __exp10(*(double *)&v26 * 0.1) * v29;
          *(double *)(a1 + 120) = v30;
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(a3 + 12);
          v31 = *(double *)(a1 + 128);
          if (v31 < *(double *)(a1 + 160))
            return 0;
          v33 = log(v30 / v31);
          *(_QWORD *)(a1 + 120) = 0;
          *(_QWORD *)(a1 + 128) = 0;
          *(float *)&v33 = v33 * 10.0 / 2.30258509;
          *(_DWORD *)(a1 + 136) = LODWORD(v33);
          *(float *)&v33 = v31;
          *(_DWORD *)(a1 + 152) = LODWORD(v33);
          *(_BYTE *)(a1 + 112) = 1;
          v34 = ADAM::Analyzer::MediaExposureBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
          v35 = ++ADAM::Analyzer::MediaExposureBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
          if (v34)
          {
LABEL_64:
            v18 = 0;
            if (v35 > 0x1D)
              v35 = 0;
            ADAM::Analyzer::MediaExposureBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt = v35;
            return v18;
          }
          if (ADAM::ADAMLogScope(void)::once != -1)
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
          if (ADAM::ADAMLogScope(void)::scope)
          {
            v36 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v36)
            {
LABEL_63:
              v35 = ADAM::Analyzer::MediaExposureBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
              goto LABEL_64;
            }
          }
          else
          {
            v36 = MEMORY[0x24BDACB70];
            v39 = MEMORY[0x24BDACB70];
          }
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            v40 = *(float *)(a1 + 136);
            v41 = *(float *)(a1 + 152);
            v42 = *(float *)(a1 + 148);
            *(_DWORD *)buf = 136316162;
            v48 = "MediaExposureBuffer.cpp";
            v49 = 1024;
            v50 = 55;
            v51 = 2048;
            v52 = v40;
            v53 = 2048;
            v54 = v41;
            v55 = 2048;
            v56 = v42;
            _os_log_impl(&dword_216CFB000, v36, OS_LOG_TYPE_INFO, "%25s:%-5d MediaExposureBuffer: accumulated dose = %.2f (dBA), duration %.2f (sec) volume gain: %.2f", buf, 0x30u);
          }

          goto LABEL_63;
        }
        v20 = ADAM::Analyzer::MediaExposureBuffer::isDataValid(ADAM::UnionDataPtr)const::errCnt;
        v21 = ++ADAM::Analyzer::MediaExposureBuffer::isDataValid(ADAM::UnionDataPtr)const::errCnt;
        if (v20)
        {
LABEL_55:
          v18 = 1684108321;
          if (v21 > 0xBB7)
            v21 = 0;
          ADAM::Analyzer::MediaExposureBuffer::isDataValid(ADAM::UnionDataPtr)const::errCnt = v21;
          return v18;
        }
        if (ADAM::ADAMLogScope(void)::once != -1)
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v22 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v22)
          {
LABEL_54:
            v21 = ADAM::Analyzer::MediaExposureBuffer::isDataValid(ADAM::UnionDataPtr)const::errCnt;
            goto LABEL_55;
          }
        }
        else
        {
          v22 = MEMORY[0x24BDACB70];
          v37 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v48 = "MediaExposureBuffer.cpp";
          v49 = 1024;
          v50 = 98;
          _os_log_impl(&dword_216CFB000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d HAE SPL data ptr is null? (sampled every 3k)", buf, 0x12u);
        }

        goto LABEL_54;
      }
    }
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v43, buf, 16);
    if (v12)
      continue;
    break;
  }
LABEL_9:

  std::mutex::unlock(v7);
  v15 = ADAM::Analyzer::MediaExposureBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
  v16 = ++ADAM::Analyzer::MediaExposureBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
  if (!v15)
  {
    if (ADAM::ADAMLogScope(void)::once != -1)
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_79);
    if (ADAM::ADAMLogScope(void)::scope)
    {
      v17 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v17)
        goto LABEL_40;
    }
    else
    {
      v17 = MEMORY[0x24BDACB70];
      v32 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      v48 = "MediaExposureBuffer.cpp";
      v49 = 1024;
      v50 = 34;
      _os_log_impl(&dword_216CFB000, v17, OS_LOG_TYPE_INFO, "%25s:%-5d MediaExposureBuffer: no delegates for HAE...", buf, 0x12u);
    }

LABEL_40:
    v16 = ADAM::Analyzer::MediaExposureBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
  }
  v18 = 0;
  if (v16 > 0xBB7)
    v16 = 0;
  ADAM::Analyzer::MediaExposureBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt = v16;
  return v18;
}

void sub_216D3A794(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double ADAM::Analyzer::MediaExposureBuffer::reset(ADAM::Analyzer::MediaExposureBuffer *this)
{
  double result;

  *((_BYTE *)this + 112) = 0;
  result = 0.0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 0;
  return result;
}

uint64_t ADAM::Analyzer::MediaExposureBuffer::hardReset(ADAM::Analyzer::MediaExposureBuffer *this)
{
  return (*(uint64_t (**)(ADAM::Analyzer::MediaExposureBuffer *))(*(_QWORD *)this + 40))(this);
}

void std::default_delete<rtaid::ConfigurationManager>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;

  std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100](a1 + 96);
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::destroy(*(_QWORD **)(a1 + 32));
  std::__tree<ADAM::EndPointBitMask>::destroy(*(_QWORD **)(a1 + 8));
  JUMPOUT(0x219A00DF0);
}

uint64_t std::unique_ptr<AudioIssueDetectorManagerCallStateReporter>::reset[abi:ne180100](uint64_t result)
{
  uint64_t *v1;

  v1 = (uint64_t *)qword_253D977C8;
  qword_253D977C8 = result;
  if (v1)
  {
    std::unique_ptr<AudioIssueDetectorManagerCallStateReporter::InternalCallState>::reset[abi:ne180100](v1, 0);
    JUMPOUT(0x219A00DF0);
  }
  return result;
}

_QWORD *std::__function::__func<rtaid::Manager::Manager(std::unique_ptr<AudioIssueDetectorDependencyInjection> &&)::$_0,std::allocator<std::unique_ptr<AudioIssueDetectorDependencyInjection> &&>,void ()(rtaid::IssueDictionary const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D616980;
  std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<rtaid::Manager::Manager(std::unique_ptr<AudioIssueDetectorDependencyInjection> &&)::$_0,std::allocator<std::unique_ptr<AudioIssueDetectorDependencyInjection> &&>,void ()(rtaid::IssueDictionary const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D616980;
  std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x219A00DF0);
}

_DWORD *std::__function::__func<rtaid::Manager::Manager(std::unique_ptr<AudioIssueDetectorDependencyInjection> &&)::$_0,std::allocator<std::unique_ptr<AudioIssueDetectorDependencyInjection> &&>,void ()(rtaid::IssueDictionary const&)>::__clone(uint64_t a1)
{
  _DWORD *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = operator new(0x20uLL);
  *(_QWORD *)result = &off_24D616980;
  result[2] = *(_DWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 2) = *(_QWORD *)(a1 + 16);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<rtaid::Manager::Manager(std::unique_ptr<AudioIssueDetectorDependencyInjection> &&)::$_0,std::allocator<std::unique_ptr<AudioIssueDetectorDependencyInjection> &&>,void ()(rtaid::IssueDictionary const&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_24D616980;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<rtaid::Manager::Manager(std::unique_ptr<AudioIssueDetectorDependencyInjection> &&)::$_0,std::allocator<std::unique_ptr<AudioIssueDetectorDependencyInjection> &&>,void ()(rtaid::IssueDictionary const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100](a1 + 16);
}

void std::__function::__func<rtaid::Manager::Manager(std::unique_ptr<AudioIssueDetectorDependencyInjection> &&)::$_0,std::allocator<std::unique_ptr<AudioIssueDetectorDependencyInjection> &&>,void ()(rtaid::IssueDictionary const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

void std::__shared_ptr_pointer<AudioIssueDetectorDependencyInjection  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A00DF0);
}

uint64_t *std::__shared_ptr_pointer<AudioIssueDetectorDependencyInjection  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<AudioIssueDetectorDependencyInjection>::operator()[abi:ne180100](*(uint64_t **)(a1 + 24));
}

void rtaid::Manager::Manager(uint64_t *a1)
{
  __objc2_class **p_superclass;
  _QWORD *v2;
  __objc2_class *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  const char *v13;
  int v14;
  BOOL v15;
  const char *v16;
  size_t v17;
  uint64_t *v18;
  uint64_t v19;
  dispatch_time_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  _DWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned __int8 v30;
  NSObject *v31;
  _BYTE v32[24];
  _BYTE v33[20];
  uint64_t v34[3];
  uint64_t *v35;
  uint64_t v36;

  p_superclass = (__objc2_class **)a1;
  v36 = *MEMORY[0x24BDAC8D0];
  SingletonManagerInstance(void)::sInstance = 850045863;
  *(_OWORD *)algn_253D97708 = 0u;
  *(_OWORD *)&algn_253D97708[16] = 0u;
  *(_OWORD *)&algn_253D97708[32] = 0u;
  *(_OWORD *)&algn_253D97708[48] = 0u;
  *(_OWORD *)&qword_253D97748 = 0u;
  qword_253D97758 = 0;
  dword_253D97760 = 1065353216;
  qword_253D97768 = 0;
  dword_253D97770 = 0;
  *(_OWORD *)&qword_253D97778 = 0u;
  *(_OWORD *)&qword_253D97788 = 0u;
  *(_OWORD *)&qword_253D97798 = 0u;
  *(uint64_t *)((char *)&qword_253D977A0 + 6) = 0;
  xmmword_253D977B0 = xmmword_216D3C910;
  dword_253D977C0 = -1024458752;
  qword_253D977C8 = 0;
  qword_253D977D0 = 0;
  qword_253D977D8 = *a1;
  if (qword_253D977D8)
  {
    v2 = (_QWORD *)operator new();
    v3 = *p_superclass;
    *v2 = &off_24D616948;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = v3;
  }
  else
  {
    v2 = 0;
  }
  qword_253D977E0 = (uint64_t)v2;
  *p_superclass = 0;
  if (qword_253D977D8)
  {
    v4 = operator new();
    v5 = v4;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)v4 = v4 + 8;
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = v4 + 32;
    *(_OWORD *)(v4 + 48) = 0u;
    v6 = qword_253D977D8;
    v7 = qword_253D977E0;
    *(_QWORD *)(v4 + 96) = qword_253D977D8;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_QWORD *)(v4 + 104) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      v6 = *(_QWORD *)(v4 + 96);
    }
    *(_DWORD *)(v4 + 115) = 0;
    *(_DWORD *)(v4 + 112) = 0;
    if (v6)
    {
      v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 16))(*(_QWORD *)(v6 + 8));
      v11 = 1;
      if ((v10 - 2) >= 4 && v10 != 181)
        v11 = v10 == 185;
      *(_BYTE *)(v5 + 118) = v11;
      v12 = qword_253D977D0;
      qword_253D977D0 = v5;
      if (v12)
        std::default_delete<rtaid::ConfigurationManager>::operator()[abi:ne180100](v12);
      v13 = getprogname();
      v14 = _os_feature_enabled_impl();
      v15 = v14 == 0;
      if (v14)
        v16 = "audiomxd";
      else
        v16 = "mediaserverd";
      if (v15)
        v17 = 12;
      else
        v17 = 8;
      if (!strncmp(v16, v13, v17))
      {
        v18 = (uint64_t *)operator new();
        *v18 = 0;
        v19 = operator new();
        *(_BYTE *)v19 = 0;
        *(_QWORD *)(v19 + 8) = 0;
        v20 = dispatch_time(0, 10000000000);
        *(_QWORD *)v32 = MEMORY[0x24BDAC760];
        *(_QWORD *)&v32[8] = 3221225472;
        *(_QWORD *)&v32[16] = ___ZN42AudioIssueDetectorManagerCallStateReporter17InternalCallStateC2Ev_block_invoke;
        *(_QWORD *)v33 = &__block_descriptor_40_e5_v8__0l;
        *(_QWORD *)&v33[8] = v19;
        dispatch_after(v20, MEMORY[0x24BDAC9B8], v32);
        v34[0] = 0;
        std::unique_ptr<AudioIssueDetectorManagerCallStateReporter::InternalCallState>::reset[abi:ne180100](v18, v19);
        std::unique_ptr<AudioIssueDetectorManagerCallStateReporter::InternalCallState>::reset[abi:ne180100](v34, 0);
        std::unique_ptr<AudioIssueDetectorManagerCallStateReporter>::reset[abi:ne180100]((uint64_t)v18);
      }
      v22 = qword_253D977D8;
      v21 = qword_253D977E0;
      v23 = *(_QWORD *)(qword_253D977D8 + 16);
      v24 = dword_253D977A8;
      if (qword_253D977E0)
      {
        v25 = (unint64_t *)(qword_253D977E0 + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v35 = 0;
      v27 = operator new(0x20uLL);
      *(_QWORD *)v27 = &off_24D616980;
      v27[2] = v24;
      *((_QWORD *)v27 + 2) = v22;
      *((_QWORD *)v27 + 3) = v21;
      v35 = (uint64_t *)v27;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v23 + 16))(v23, v34);
      v28 = v35;
      if (v35 == v34)
      {
        v29 = 4;
        v28 = v34;
      }
      else
      {
        if (!v35)
          goto LABEL_31;
        v29 = 5;
      }
      (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_31:
      p_superclass = ADAMSpeechAnalysisWriter.superclass;
      if ((v30 & 1) != 0)
        goto LABEL_32;
      goto LABEL_37;
    }
  }
  else
  {
    _os_assert_log();
    _os_crash();
    __break(1u);
  }
  _os_assert_log();
  _os_crash();
  __break(1u);
LABEL_37:
  {
    p_superclass[222] = (__objc2_class *)os_log_create("com.apple.coreaudio", "aid");
  }
LABEL_32:
  v31 = p_superclass[222];
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v32 = 136316162;
    *(_QWORD *)&v32[4] = "AudioIssueDetectorManager.cpp";
    *(_WORD *)&v32[12] = 1024;
    *(_DWORD *)&v32[14] = 47;
    *(_WORD *)&v32[18] = 1040;
    *(_DWORD *)&v32[20] = 14;
    *(_WORD *)v33 = 2080;
    *(_QWORD *)&v33[2] = "rtaid::Manager]";
    *(_WORD *)&v33[10] = 2048;
    *(_QWORD *)&v33[12] = &SingletonManagerInstance(void)::sInstance;
    _os_log_impl(&dword_216CFB000, v31, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] constructed", v32, 0x2Cu);
  }
}

void sub_216D3AEAC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  std::unique_ptr<AudioIssueDetectorManagerCallStateReporter::InternalCallState>::reset[abi:ne180100](v1, 0);
  MEMORY[0x219A00DF0](v1, 0x20C4093837F09);
  std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100]((uint64_t)&qword_253D977D8);
  v3 = qword_253D977D0;
  qword_253D977D0 = 0;
  if (v3)
    std::default_delete<rtaid::ConfigurationManager>::operator()[abi:ne180100](v3);
  std::unique_ptr<AudioIssueDetectorManagerCallStateReporter>::reset[abi:ne180100](0);
  if (qword_253D977A0)
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)qword_253D977A0);
  if (qword_253D97790)
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)qword_253D97790);
  if (qword_253D97780)
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)qword_253D97780);
  v4 = (_QWORD *)qword_253D97750;
  if (qword_253D97750)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100]((uint64_t)(v4 + 3));
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = (void *)qword_253D97740;
  qword_253D97740 = 0;
  if (v6)
    operator delete(v6);
  std::mutex::~mutex((std::mutex *)&SingletonManagerInstance(void)::sInstance);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<AudioIssueDetectorDependencyInjection>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

void std::__shared_ptr_pointer<rtaid::Detector  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A00DF0);
}

rtaid::Detector **std::__shared_ptr_pointer<rtaid::Detector  *>::__on_zero_shared(uint64_t a1)
{
  rtaid::Detector **result;

  result = *(rtaid::Detector ***)(a1 + 24);
  if (result)
  {
    rtaid::Detector::~Detector(result);
    JUMPOUT(0x219A00DF0);
  }
  return result;
}

void std::__function::__func<rtaid::Manager::InitializeDetector(long long)::$_0,std::allocator<rtaid::Manager::InitializeDetector(long long)::$_0>,void ()(rtaid::IssueDictionary)>::~__func()
{
  JUMPOUT(0x219A00DF0);
}

_QWORD *std::__function::__func<rtaid::Manager::InitializeDetector(long long)::$_0,std::allocator<rtaid::Manager::InitializeDetector(long long)::$_0>,void ()(rtaid::IssueDictionary)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D616A18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<rtaid::Manager::InitializeDetector(long long)::$_0,std::allocator<rtaid::Manager::InitializeDetector(long long)::$_0>,void ()(rtaid::IssueDictionary)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D616A18;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<rtaid::Manager::InitializeDetector(long long)::$_0,std::allocator<rtaid::Manager::InitializeDetector(long long)::$_0>,void ()(rtaid::IssueDictionary)>::operator()(uint64_t a1, const void *a2)
{
  uint64_t result;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  uint64_t v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  _BOOL4 v10;
  float v11;
  unsigned __int8 v13;
  unsigned __int8 *v14;
  int v15;
  char v16;
  BOOL v17;
  BOOL v18;
  char v19;
  int v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  char v25;
  char v26;
  char v27;
  unsigned __int16 *v28;
  int v29;
  int v30;
  char v32;
  BOOL v33;
  BOOL v34;
  _QWORD __dst[63];

  __dst[62] = *MEMORY[0x24BDAC8D0];
  result = (uint64_t)memcpy(__dst, a2, 0x1F0uLL);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned __int8 ***)(v7 + 200);
  v10 = !v8 || (v9 = *v8) == 0 || *v9 != 0;
  if (HIDWORD(__dst[32]) != 5)
    goto LABEL_20;
  if (*(float *)(v7 + 176) < 1.0)
    return result;
  if (LODWORD(__dst[32]) == 7)
  {
    if (__dst[0] == 0x6374756F2D6F6972 && *(_QWORD *)((char *)__dst + 5) == 0x746E65696C637475)
      goto LABEL_11;
  }
  else if (LODWORD(__dst[32]) == 1 && !LOBYTE(__dst[33]) && __dst[0] == 0x646E616265736142)
  {
LABEL_11:
    v11 = *((float *)&__dst[35] + 1);
    *(_DWORD *)(v7 + 180) = HIDWORD(__dst[35]);
    *(_DWORD *)(v7 + 188) = __dst[36];
    goto LABEL_17;
  }
  *(_DWORD *)(v7 + 184) = HIDWORD(__dst[35]);
  *(_DWORD *)(v7 + 192) = __dst[36];
  v11 = *(float *)(v7 + 180);
LABEL_17:
  if (v11 == -120.0)
    return result;
  v5.n128_u32[0] = *(_DWORD *)(v7 + 184);
  v6.n128_u32[0] = -1024458752;
  if (v5.n128_f32[0] == -120.0)
    return result;
  HIDWORD(__dst[35]) = *(_DWORD *)(v7 + 184);
  *(float *)&__dst[36] = v11;
  HIDWORD(__dst[36]) = *(_DWORD *)(v7 + 192);
  LODWORD(__dst[37]) = *(_DWORD *)(v7 + 188);
  v4.n128_u64[0] = (unint64_t)vdup_n_s32(0xC2F00000);
  *(_QWORD *)(v7 + 180) = v4.n128_u64[0];
LABEL_20:
  v13 = atomic_load((unsigned __int8 *)(v7 + 172));
  v14 = (unsigned __int8 *)(v7 + 173);
  while (1)
  {
    v15 = __ldaxr(v14);
    if (v15 != 1)
      break;
    v16 = 1;
    if (!__stlxr(1u, v14))
      goto LABEL_25;
  }
  v16 = 0;
  __clrex();
LABEL_25:
  if (HIDWORD(__dst[32]) == 1)
  {
    if (LOBYTE(__dst[33]))
      v19 = 0;
    else
      v19 = v16;
    if ((v19 & 1) == 0)
    {
      v20 = 0;
      result = LODWORD(__dst[32]) == 3;
      v21 = LODWORD(__dst[32]) == 4;
      v22 = BYTE4(__dst[39]);
      if (BYTE4(__dst[39]))
        v23 = LODWORD(__dst[32]) == 2;
      else
        v23 = 0;
      v24 = v23;
      if (BYTE4(__dst[39]) && ((v21 ^ result) & 1) == 0)
      {
        v25 = 0;
        v26 = LODWORD(__dst[32]) == 4;
        v27 = LODWORD(__dst[32]) == 3;
        v28 = (unsigned __int16 *)&__dst[56];
        do
        {
          v30 = *v28++;
          v29 = v30;
          if (LODWORD(__dst[32]) != 2 || v29 != 13)
          {
            LOBYTE(v24) = 0;
            v27 = (v29 == 2) | v27 & 1;
            v26 = (v29 == 1) | v26 & 1;
            v25 = (v29 == 4) | v25 & 1;
          }
          --v22;
        }
        while (v22);
        result = v27 & 1;
        v21 = v26 & 1;
        v20 = v25 & 1;
        v24 &= 1u;
      }
      v5.n128_u32[0] = HIDWORD(__dst[35]);
      v4.n128_f32[0] = (float)HIDWORD(__dst[33]) / *((float *)&__dst[35] + 1);
      v6.n128_f32[0] = (float)HIDWORD(__dst[34]) / *((float *)&__dst[35] + 1);
      if (v24)
      {
        if (v4.n128_f32[0] > 0.0)
          return (*(uint64_t (**)(_QWORD, _QWORD *, __n128, __n128, __n128))(**(_QWORD **)(*(_QWORD *)(v7 + 216) + 16)
                                                                                     + 24))(*(_QWORD *)(*(_QWORD *)(v7 + 216) + 16), __dst, v4, v5, v6);
        if (v6.n128_f32[0] > 0.0 || LODWORD(__dst[35]) != 0)
          return (*(uint64_t (**)(_QWORD, _QWORD *, __n128, __n128, __n128))(**(_QWORD **)(*(_QWORD *)(v7 + 216) + 16)
                                                                                     + 24))(*(_QWORD *)(*(_QWORD *)(v7 + 216) + 16), __dst, v4, v5, v6);
      }
      else if ((_DWORD)result)
      {
        if (v10)
        {
          v6.n128_u32[0] = __dst[34];
          v32 = v16 ^ 1;
          if ((v13 & 1) != 0)
            v32 = 0;
          if ((v32 & 1) != 0
            || (LODWORD(__dst[32]) != 1 || LOBYTE(__dst[33]) != 1 || __dst[0] != 0x646E616265736142)
            && (LODWORD(__dst[32]) != 2
             || LOBYTE(__dst[33]) != 1
             || (__dst[0] == 0x2D20505344657250 ? (v33 = __dst[1] == 0x707974205B207B20) : (v33 = 0),
                 v33 ? (v34 = *(_QWORD *)((char *)&__dst[1] + 7) == 0x6E6C7570203A6570) : (v34 = 0),
                 !v34)))
          {
            if ((LODWORD(__dst[32]) - 1) <= 1 && LOBYTE(__dst[33]) == 1)
            {
              v5.n128_u32[0] = 5.0;
              if (v4.n128_f32[0] > 5.0)
                return (*(uint64_t (**)(_QWORD, _QWORD *, __n128, __n128, __n128))(**(_QWORD **)(*(_QWORD *)(v7 + 216) + 16)
                                                                                           + 24))(*(_QWORD *)(*(_QWORD *)(v7 + 216) + 16), __dst, v4, v5, v6);
            }
            else
            {
              v5.n128_f32[0] = (float)LODWORD(__dst[34]) / *((float *)&__dst[35] + 1);
              v6.n128_u32[0] = 5.0;
              if (v4.n128_f32[0] > 5.0 || v5.n128_f32[0] > 5.0)
                return (*(uint64_t (**)(_QWORD, _QWORD *, __n128, __n128, __n128))(**(_QWORD **)(*(_QWORD *)(v7 + 216) + 16)
                                                                                           + 24))(*(_QWORD *)(*(_QWORD *)(v7 + 216) + 16), __dst, v4, v5, v6);
            }
          }
        }
      }
      else if (v21)
      {
        v5.n128_u32[0] = 1034147594;
        if (v4.n128_f32[0] > 0.08)
          return (*(uint64_t (**)(_QWORD, _QWORD *, __n128, __n128, __n128))(**(_QWORD **)(*(_QWORD *)(v7 + 216) + 16)
                                                                                     + 24))(*(_QWORD *)(*(_QWORD *)(v7 + 216) + 16), __dst, v4, v5, v6);
        if (v6.n128_f32[0] > 0.08 || LODWORD(__dst[35]) > 5)
          return (*(uint64_t (**)(_QWORD, _QWORD *, __n128, __n128, __n128))(**(_QWORD **)(*(_QWORD *)(v7 + 216) + 16)
                                                                                     + 24))(*(_QWORD *)(*(_QWORD *)(v7 + 216) + 16), __dst, v4, v5, v6);
      }
      else if (v20)
      {
        v5.n128_u32[0] = 9.0;
        if (v4.n128_f32[0] > 9.0 || v6.n128_f32[0] > 9.0)
          return (*(uint64_t (**)(_QWORD, _QWORD *, __n128, __n128, __n128))(**(_QWORD **)(*(_QWORD *)(v7 + 216) + 16)
                                                                                     + 24))(*(_QWORD *)(*(_QWORD *)(v7 + 216) + 16), __dst, v4, v5, v6);
      }
    }
  }
  else
  {
    if (HIDWORD(__dst[32]) != 5)
      return (*(uint64_t (**)(_QWORD, _QWORD *, __n128, __n128, __n128))(**(_QWORD **)(*(_QWORD *)(v7 + 216)
                                                                                               + 16)
                                                                                 + 24))(*(_QWORD *)(*(_QWORD *)(v7 + 216) + 16), __dst, v4, v5, v6);
    v5.n128_u32[0] = HIDWORD(__dst[35]);
    v6.n128_u32[0] = __dst[36];
    v17 = *(float *)&__dst[36] > -60.0;
    v18 = *((float *)&__dst[35] + 1) < (float)(-30.0 - *(float *)(v7 + 168)) && *(float *)&__dst[36] > -60.0;
    v4.n128_u32[0] = -1038090240;
    if (*(float *)&__dst[36] >= -40.0)
      v17 = 0;
    if (v18 || v17)
      return (*(uint64_t (**)(_QWORD, _QWORD *, __n128, __n128, __n128))(**(_QWORD **)(*(_QWORD *)(v7 + 216)
                                                                                               + 16)
                                                                                 + 24))(*(_QWORD *)(*(_QWORD *)(v7 + 216) + 16), __dst, v4, v5, v6);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::find<rtaid::AnalyzerType>(unsigned int a1)
{
  uint8x8_t v1;
  unint64_t v2;
  uint64_t *i;
  unint64_t v4;

  if (!*((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1))
    return 0;
  v1 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8));
  v1.i16[0] = vaddlv_u8(v1);
  if (v1.u32[0] > 1uLL)
  {
    v2 = a1;
    if (*((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) <= (unint64_t)a1)
      v2 = (unint64_t)a1 % *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
  }
  else
  {
    v2 = (DWORD2(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap) - 1) & a1;
  }
  i = *(uint64_t **)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v2);
  if (i)
  {
    for (i = (uint64_t *)*i; i; i = (uint64_t *)*i)
    {
      v4 = i[1];
      if (v4 == a1)
      {
        if (*((_DWORD *)i + 4) == a1)
          return i;
      }
      else
      {
        if (v1.u32[0] > 1uLL)
        {
          if (v4 >= *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1))
            v4 %= *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
        }
        else
        {
          v4 &= *((_QWORD *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) - 1;
        }
        if (v4 != v2)
          return 0;
      }
    }
  }
  return i;
}

AudioComponent AudioComponentFindNext(AudioComponent inComponent, const AudioComponentDescription *inDesc)
{
  return (AudioComponent)MEMORY[0x24BE0A668](inComponent, inDesc);
}

OSStatus AudioComponentInstanceDispose(AudioComponentInstance inInstance)
{
  return MEMORY[0x24BE0A688](inInstance);
}

OSStatus AudioComponentInstanceNew(AudioComponent inComponent, AudioComponentInstance *outInstance)
{
  return MEMORY[0x24BE0A698](inComponent, outInstance);
}

OSStatus AudioConverterConvertComplexBuffer(AudioConverterRef inAudioConverter, UInt32 inNumberPCMFrames, const AudioBufferList *inInputData, AudioBufferList *outOutputData)
{
  return MEMORY[0x24BE0A6B0](inAudioConverter, *(_QWORD *)&inNumberPCMFrames, inInputData, outOutputData);
}

OSStatus AudioConverterDispose(AudioConverterRef inAudioConverter)
{
  return MEMORY[0x24BE0A6B8](inAudioConverter);
}

OSStatus AudioConverterNew(const AudioStreamBasicDescription *inSourceFormat, const AudioStreamBasicDescription *inDestinationFormat, AudioConverterRef *outAudioConverter)
{
  return MEMORY[0x24BE0A6C0](inSourceFormat, inDestinationFormat, outAudioConverter);
}

OSStatus AudioConverterSetProperty(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x24BE0A6C8](inAudioConverter, *(_QWORD *)&inPropertyID, *(_QWORD *)&inPropertyDataSize, inPropertyData);
}

OSStatus AudioUnitGetParameter(AudioUnit inUnit, AudioUnitParameterID inID, AudioUnitScope inScope, AudioUnitElement inElement, AudioUnitParameterValue *outValue)
{
  return MEMORY[0x24BE0A738](inUnit, *(_QWORD *)&inID, *(_QWORD *)&inScope, *(_QWORD *)&inElement, outValue);
}

OSStatus AudioUnitInitialize(AudioUnit inUnit)
{
  return MEMORY[0x24BE0A750](inUnit);
}

OSStatus AudioUnitProcess(AudioUnit inUnit, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, UInt32 inNumberFrames, AudioBufferList *ioData)
{
  return MEMORY[0x24BE0A758](inUnit, ioActionFlags, inTimeStamp, *(_QWORD *)&inNumberFrames, ioData);
}

OSStatus AudioUnitSetParameter(AudioUnit inUnit, AudioUnitParameterID inID, AudioUnitScope inScope, AudioUnitElement inElement, AudioUnitParameterValue inValue, UInt32 inBufferOffsetInFrames)
{
  return MEMORY[0x24BE0A790](inUnit, *(_QWORD *)&inID, *(_QWORD *)&inScope, *(_QWORD *)&inElement, *(_QWORD *)&inBufferOffsetInFrames, inValue);
}

OSStatus AudioUnitSetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, const void *inData, UInt32 inDataSize)
{
  return MEMORY[0x24BE0A798](inUnit, *(_QWORD *)&inID, *(_QWORD *)&inScope, *(_QWORD *)&inElement, inData, *(_QWORD *)&inDataSize);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x24BDBBA18]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x24BDBBA20](BOOLean);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x24BDBBDC0](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBDD8](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBDE0](allocator, theDict);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x24BDBBE68](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x24BDBC040](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x24BDBC050]();
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x24BDBC118]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x24BDBC130](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x24BDBC150](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x24BDBC160](key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x24BDBC188](key, applicationID, keyExistsAndHasValidFormat);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x24BDBC520](alloc, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x24BDBC558](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x24BDBC600](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x24BDBC698]();
}

SInt32 CFUserNotificationDisplayAlert(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle, CFStringRef alternateButtonTitle, CFStringRef otherButtonTitle, CFOptionFlags *responseFlags)
{
  return MEMORY[0x24BDBC930](flags, iconURL, soundURL, localizationURL, alertHeader, alertMessage, defaultButtonTitle, alternateButtonTitle, timeout);
}

uint64_t ExtendedAudioBufferList_CreateWithFormat()
{
  return MEMORY[0x24BE0A7F8]();
}

uint64_t ExtendedAudioBufferList_Destroy()
{
  return MEMORY[0x24BE0A800]();
}

uint64_t ExtendedAudioBufferList_Prepare()
{
  return MEMORY[0x24BE0A808]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x24BED8448]();
}

uint64_t MGGetProductType()
{
  return MEMORY[0x24BED8488]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x24BED84B0]();
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x24BDD1280]();
}

SRAbsoluteTime SRAbsoluteTimeFromContinuousTime(uint64_t cont)
{
  SRAbsoluteTime result;

  MEMORY[0x24BDE9718](cont);
  return result;
}

CFAbsoluteTime SRAbsoluteTimeToCFAbsoluteTime(SRAbsoluteTime sr)
{
  CFAbsoluteTime result;

  MEMORY[0x24BDE9720](sr);
  return result;
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x24BDE8D50](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x24BDE8D68](allocator);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

void caulk::concurrent::message::~message(caulk::concurrent::message *this)
{
  MEMORY[0x24BEC6D98](this);
}

uint64_t caulk::concurrent::messenger::shared_logging_priority(caulk::concurrent::messenger *this)
{
  return MEMORY[0x24BEC6DA8](this);
}

uint64_t caulk::concurrent::messenger::enqueue(caulk::concurrent::messenger *this, caulk::concurrent::message *a2)
{
  return MEMORY[0x24BEC6DB8](this, a2);
}

uint64_t caulk::concurrent::messenger::messenger()
{
  return MEMORY[0x24BEC6DC0]();
}

void caulk::concurrent::messenger::~messenger(caulk::concurrent::messenger *this)
{
  MEMORY[0x24BEC6DD0](this);
}

uint64_t caulk::semaphore::timed_wait(caulk::semaphore *this, double a2)
{
  return MEMORY[0x24BEC6F08](this, a2);
}

uint64_t caulk::semaphore::signal(caulk::semaphore *this)
{
  return MEMORY[0x24BEC6F10](this);
}

uint64_t caulk::semaphore::semaphore(caulk::semaphore *this)
{
  return MEMORY[0x24BEC6F18](this);
}

void caulk::semaphore::~semaphore(caulk::semaphore *this)
{
  MEMORY[0x24BEC6F20](this);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x24BEDA9C0](this, __s);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x24BEDAA50](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

const char *__cdecl std::exception::what(const std::exception *this)
{
  return (const char *)MEMORY[0x24BEDAA88](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAA90](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAA98](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB38](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x24BEDABC0](a1, a2, a3);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x24BEDABC8](this, *(_QWORD *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x24BEDAC08](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x24BEDADD8]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x24BEDADE0]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x24BEDADF0]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x24BEDADF8]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x24BEDAEE0]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x24BEDAEE8]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x24BEDAEF0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF40]();
}

{
  return MEMORY[0x24BEDAF80]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x24BEDB030](__s, __icase);
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x24BEDB038](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
  MEMORY[0x24BEDB040](this);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::shared_timed_mutex::lock_shared(std::shared_timed_mutex *this)
{
  MEMORY[0x24BEDB120](this);
}

void std::shared_timed_mutex::unlock_shared(std::shared_timed_mutex *this)
{
  MEMORY[0x24BEDB128](this);
}

void std::shared_timed_mutex::lock(std::shared_timed_mutex *this)
{
  MEMORY[0x24BEDB130](this);
}

void std::shared_timed_mutex::unlock(std::shared_timed_mutex *this)
{
  MEMORY[0x24BEDB138](this);
}

std::shared_timed_mutex *__cdecl std::shared_timed_mutex::shared_timed_mutex(std::shared_timed_mutex *this)
{
  return (std::shared_timed_mutex *)MEMORY[0x24BEDB140](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x24BEDB188](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x24BEDB198]();
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x24BEDB1A0](retstr, __s);
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
  MEMORY[0x24BEDB1B0](*(_QWORD *)&__ev, __what_arg);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x24BEDB438](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x24BEDB440](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::thread::~thread(std::thread *this)
{
  MEMORY[0x24BEDB478](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x24BEDB5F8](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return (std::string *)MEMORY[0x24BEDB600](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB630](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

std::bad_cast *__cdecl std::bad_cast::bad_cast(std::bad_cast *this)
{
  return (std::bad_cast *)MEMORY[0x24BEDB648](this);
}

void std::bad_cast::~bad_cast(std::bad_cast *this)
{
  MEMORY[0x24BEDB658](this);
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x24BEDB660](this);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB680](this);
}

{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

void operator delete(void *__p)
{
  off_24D6153A8(__p);
}

uint64_t operator delete()
{
  return off_24D6153B0();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24D6153B8(__sz);
}

uint64_t operator new()
{
  return off_24D6153C0();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void *__cxa_get_exception_ptr(void *a1)
{
  return (void *)MEMORY[0x24BEDB938](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x24BDAC7D8](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x24BDAC838](*(_QWORD *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC930](*(_QWORD *)&a1);
}

uint64_t _os_assert_log()
{
  return MEMORY[0x24BDACB40]();
}

uint64_t _os_crash()
{
  return MEMORY[0x24BDACB50]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x24BDACB60]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x24BDAD170](*(_QWORD *)&__upper_bound);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADC60](when, queue, block);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x24BDADDA8](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x24BDADF18](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x24BDADF30](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADF38](dsema, timeout);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x24BDADF70](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x24BDADFB0](source, handler);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x24BDADFF8](when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x24BDAE070](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x24BDAE6E8]();
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

float log10f(float a1)
{
  float result;

  MEMORY[0x24BDAEAB8](a1);
  return result;
}

uint64_t mach_get_times()
{
  return MEMORY[0x24BDAEB60]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x24BDAEC68](info);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x24BEDCFB0](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x24BEDCFC0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x24BEDD030](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x24BEDD038](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x24BEDD0C0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x24BEDD0E8](location);
}

void objc_moveWeak(id *to, id *from)
{
  MEMORY[0x24BEDD0F8](to, from);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD408](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x24BEDD420](location, obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x24BDAF438]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x24BDAF818](a1, a2, a3, a4);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x24BDAF9A8](a1, a2);
}

int rand(void)
{
  return MEMORY[0x24BDAFA38]();
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x24BDAFE38](*(_QWORD *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

void srand(unsigned int a1)
{
  MEMORY[0x24BDAFE80](*(_QWORD *)&a1);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAFEA0](a1, a2);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x24BDAFF38](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x24BDAFF68](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF70](__dst, __src, __n);
}

time_t time(time_t *a1)
{
  return MEMORY[0x24BDB0240](a1);
}

int uname(utsname *a1)
{
  return MEMORY[0x24BDB02A8](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x24BDB02E8](*(_QWORD *)&a1);
}

void vDSP_maxmgv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB3210](__A, __IA, __C, __N);
}

void vDSP_svesq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB32F0](__A, __IA, __C, __N);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x24BDB0448](__str, __size, __format, a4);
}

