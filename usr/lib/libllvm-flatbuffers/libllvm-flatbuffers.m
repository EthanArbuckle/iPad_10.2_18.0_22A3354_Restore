const char *flatbuffers::FLATBUFFERS_VERSION(flatbuffers *this)
{
  return "1.12.0";
}

char *flatbuffers::TypeName(int a1)
{
  return (&off_1EA98EA98)[a1 + 4];
}

uint64_t flatbuffers::SizeOf(int a1)
{
  return byte_1DF385F2C[a1 + 4];
}

void flatbuffers::MakeCamel(char *a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  char v4;
  BOOL v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v10;
  char *v11;
  std::string::value_type v12;
  unint64_t v13;
  char v15;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v4 = a1[23];
  v5 = v4 < 0;
  v6 = v5;
  v7 = v4 & 0x7F;
  if (v5)
    v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v10 = 0;
    do
    {
      if (v6)
        v11 = *(char **)a1;
      else
        v11 = a1;
      if (v10 || !a2)
      {
        v13 = v10 + 1;
        if (v11[v10] != 95 || v13 >= v7)
        {
          v12 = v11[v10];
        }
        else
        {
          v12 = __toupper(v11[v13]);
          ++v10;
        }
      }
      else
      {
        v12 = __toupper(*v11);
        v10 = 0;
      }
      std::string::push_back(a3, v12);
      ++v10;
      v15 = a1[23];
      v5 = v15 < 0;
      v6 = v5;
      v7 = v15 & 0x7F;
      if (v5)
        v7 = *((_QWORD *)a1 + 1);
    }
    while (v10 < v7);
  }
}

void flatbuffers::MakeScreamingCamel(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  char v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t *v9;
  __darwin_ct_rune_t v10;
  std::string::value_type v11;
  char v12;
  unint64_t v13;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *((_BYTE *)a1 + 23);
  v4 = v3 < 0;
  v5 = v4;
  v6 = v3 & 0x7F;
  if (v4)
    v6 = a1[1];
  if (v6)
  {
    v8 = 0;
    do
    {
      if (v5)
        v9 = (uint64_t *)*a1;
      else
        v9 = a1;
      v10 = *((char *)v9 + v8);
      if (v10 == 95)
        v11 = 95;
      else
        v11 = __toupper(v10);
      std::string::push_back(a2, v11);
      ++v8;
      v12 = *((_BYTE *)a1 + 23);
      v4 = v12 < 0;
      v5 = v4;
      v13 = v12 & 0x7F;
      if (v4)
        v13 = a1[1];
    }
    while (v8 < v13);
  }
}

void flatbuffers::DeserializeDoc(int64x2_t *a1, _DWORD *a2)
{
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  __int128 *p_dst;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  int64x2_t v21;
  char v22;
  char *v23;
  int64x2_t *v24;
  __int128 __dst;
  uint64_t v26;
  uint64_t v27;
  int64x2_t v28;
  unint64_t v29;
  uint64_t *v30;

  if (a2 && *a2)
  {
    v4 = 0;
    v24 = a1 + 1;
    do
    {
      v5 = &a2[v4 + 1];
      v6 = *v5;
      v8 = (char *)v5 + v6 + 4;
      v7 = *(unsigned int *)((char *)v5 + v6);
      if (v7 >= 0x17)
      {
        if ((v7 | 7) == 0x17)
          v10 = (v7 & 0xFFFFFFF8) + 8;
        else
          v10 = v7 | 7;
        p_dst = (__int128 *)operator new(v10 + 1);
        *((_QWORD *)&__dst + 1) = v7;
        v26 = v10 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v26) = *(unsigned int *)((char *)v5 + v6);
        p_dst = &__dst;
        if (!(_DWORD)v7)
          goto LABEL_12;
      }
      memcpy(p_dst, v8, v7);
LABEL_12:
      *((_BYTE *)p_dst + v7) = 0;
      v11 = a1->u64[1];
      v12 = a1[1].u64[0];
      if (v11 >= v12)
      {
        v13 = a1->i64[0];
        v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - a1->i64[0]) >> 3);
        v15 = v14 + 1;
        if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((uint64_t)(v12 - v13) >> 3) > v15)
          v15 = 0x5555555555555556 * ((uint64_t)(v12 - v13) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v13) >> 3) >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v15;
        v30 = (uint64_t *)v24;
        if (v16)
        {
          if (v16 > 0xAAAAAAAAAAAAAAALL)
            sub_1DF3667C0();
          v17 = (char *)operator new(24 * v16);
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[24 * v14];
        *(_OWORD *)v18 = __dst;
        *((_QWORD *)v18 + 2) = v26;
        v26 = 0;
        __dst = 0uLL;
        if (v11 == v13)
        {
          v22 = 0;
          v21 = vdupq_n_s64(v11);
          v19 = v18;
        }
        else
        {
          v19 = &v17[24 * v14];
          do
          {
            v20 = *(_OWORD *)(v11 - 24);
            *((_QWORD *)v19 - 1) = *(_QWORD *)(v11 - 8);
            *(_OWORD *)(v19 - 24) = v20;
            v19 -= 24;
            *(_QWORD *)(v11 - 16) = 0;
            *(_QWORD *)(v11 - 8) = 0;
            *(_QWORD *)(v11 - 24) = 0;
            v11 -= 24;
          }
          while (v11 != v13);
          v21 = *a1;
          v12 = a1[1].u64[0];
          v22 = HIBYTE(v26);
        }
        v23 = v18 + 24;
        a1->i64[0] = (uint64_t)v19;
        a1->i64[1] = (uint64_t)(v18 + 24);
        v28 = v21;
        a1[1].i64[0] = (uint64_t)&v17[24 * v16];
        v29 = v12;
        v27 = v21.i64[0];
        sub_1DF370790((uint64_t)&v27);
        a1->i64[1] = (uint64_t)v23;
        if (v22 < 0)
          operator delete((void *)__dst);
      }
      else
      {
        *(_OWORD *)v11 = __dst;
        *(_QWORD *)(v11 + 16) = v26;
        a1->i64[1] = v11 + 24;
      }
      ++v4;
    }
    while (v4 < *a2);
  }
}

void flatbuffers::Parser::Message(uint64_t a1)
{
  void *v1;
  std::string *v3;
  uint64_t v4;
  BOOL v5;
  void **v6;
  std::string::size_type v7;
  std::string::size_type v8;
  uint64_t v9;
  std::string *v10;
  std::string::size_type v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  void **v16;
  std::string::size_type v17;
  void **v18;
  std::string::size_type v19;
  void *v20[2];
  char v21;
  std::string v22;
  std::string v23;
  void *__p[2];
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  uint64_t v29;

  v3 = (std::string *)(a1 + 312);
  if ((*(char *)(a1 + 335) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 335))
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*(_QWORD *)(a1 + 320))
LABEL_3:
    std::string::append((std::string *)(a1 + 312), "\n");
LABEL_4:
  if (*(char *)(a1 + 1175) < 0)
  {
    v4 = *(_QWORD *)(a1 + 1160);
    if (v4)
      goto LABEL_6;
  }
  else
  {
    LOBYTE(v4) = *(_BYTE *)(a1 + 1175);
    if ((_BYTE)v4)
    {
LABEL_6:
      flatbuffers::AbsolutePath((const char *)(a1 + 1152), __p);
      LOBYTE(v4) = HIBYTE(v25);
      v1 = __p[1];
      goto LABEL_11;
    }
  }
  HIBYTE(v25) = 0;
  LOBYTE(__p[0]) = 0;
LABEL_11:
  v5 = (v4 & 0x80u) != 0;
  if ((v4 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  v7 = v4 & 0x7F;
  if (v5)
    v8 = (std::string::size_type)v1;
  else
    v8 = v7;
  std::string::append(v3, (const std::string::value_type *)v6, v8);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  if ((*(char *)(a1 + 1175) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 1175))
      goto LABEL_22;
    goto LABEL_21;
  }
  if (*(_QWORD *)(a1 + 1160))
LABEL_21:
    std::string::append(v3, ":");
LABEL_22:
  sub_1DF367FB0((uint64_t)__p);
  std::ostream::operator<<();
  std::stringbuf::str();
  __p[0] = *(void **)MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
  v25 = v9;
  v26 = MEMORY[0x1E0DE4FB8] + 16;
  if (v28 < 0)
    operator delete(v27);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E0BFF758](&v29);
  v10 = std::string::append(&v22, ": ");
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_1DF345C20();
  if (v21 >= 0)
    v12 = v20;
  else
    v12 = (void **)v20[0];
  if (v21 >= 0)
    v13 = v21 & 0x7F;
  else
    v13 = (std::string::size_type)v20[1];
  v14 = std::string::append(&v23, (const std::string::value_type *)v12, v13);
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v25 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v25 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if (v25 >= 0)
    v17 = HIBYTE(v25) & 0x7F;
  else
    v17 = (std::string::size_type)__p[1];
  std::string::append(v3, (const std::string::value_type *)v16, v17);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  std::operator+<char>();
  if (v25 >= 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if (v25 >= 0)
    v19 = HIBYTE(v25) & 0x7F;
  else
    v19 = (std::string::size_type)__p[1];
  std::string::append(v3, (const std::string::value_type *)v18, v19);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
}

uint64_t sub_1DF345C20()
{
  uint64_t v0;
  _QWORD v2[13];
  char v3;
  uint64_t v4;

  sub_1DF367FB0((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E0DE4F50];
  v0 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v3 < 0)
    operator delete((void *)v2[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1E0BFF758](&v4);
}

void flatbuffers::Parser::Warning(uint64_t a1)
{
  void *__p;
  char v3;

  std::operator+<char>();
  flatbuffers::Parser::Message(a1);
  if (v3 < 0)
    operator delete(__p);
}

void flatbuffers::Parser::Error(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  void *__p;
  char v5;

  std::operator+<char>();
  flatbuffers::Parser::Message(a1);
  if (v5 < 0)
    operator delete(__p);
  *a2 = 1;
}

void flatbuffers::Parser::RecurseError(flatbuffers::Parser *this@<X0>, _WORD *a2@<X8>)
{
  std::string::size_type v4;
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string v9;
  std::string v10;
  void *v11[2];
  std::string::size_type v12;
  uint64_t v13;
  void *__p;
  char v15;
  uint64_t v16;

  sub_1DF367FB0((uint64_t)v11);
  std::ostream::operator<<();
  std::stringbuf::str();
  v11[0] = *(void **)MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(void **)((char *)v11 + *((_QWORD *)v11[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
  v12 = v4;
  v13 = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E0BFF758](&v16);
  v5 = std::string::insert(&v9, 0, "maximum parsing recursion of ");
  v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v10.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v10.__r_.__value_.__r.__words[2] = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v10, " reached");
  v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)v11 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v12 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error((uint64_t)this, a2);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void flatbuffers::Namespace::GetFullyQualifiedName(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  unint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  void *__p[2];
  uint64_t v27;

  if (!a3 || (v7 = *a1, v8 = a1[1], *a1 == v8))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1DF36DA38(a4, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
  }
  else
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3);
    if (v10 >= a3)
      v10 = a3;
    if (v10)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        if (v12)
        {
          std::string::push_back(a4, 46);
          v7 = *a1;
        }
        v13 = (__int128 *)(v7 + v11);
        if (*((char *)v13 + 23) < 0)
        {
          sub_1DF36DA38(__p, *(void **)v13, *((_QWORD *)v13 + 1));
        }
        else
        {
          v14 = *v13;
          v27 = *((_QWORD *)v13 + 2);
          *(_OWORD *)__p = v14;
        }
        if (v27 >= 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        if (v27 >= 0)
          v16 = HIBYTE(v27) & 0x7F;
        else
          v16 = (std::string::size_type)__p[1];
        std::string::append(a4, (const std::string::value_type *)v15, v16);
        if (SHIBYTE(v27) < 0)
          operator delete(__p[0]);
        ++v12;
        v7 = *a1;
        v17 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
        if (v17 >= a3)
          v17 = a3;
        v11 += 24;
      }
      while (v12 < v17);
    }
    v18 = *(_BYTE *)(a2 + 23);
    v19 = v18;
    v20 = v18 & 0x7F;
    if (v19 < 0)
      v20 = *(_QWORD *)(a2 + 8);
    if (v20)
    {
      std::string::push_back(a4, 46);
      v21 = *(_BYTE *)(a2 + 23);
      v22 = v21 < 0;
      if (v21 >= 0)
        v23 = (const std::string::value_type *)a2;
      else
        v23 = *(const std::string::value_type **)a2;
      v24 = v21 & 0x7F;
      if (v22)
        v25 = *(_QWORD *)(a2 + 8);
      else
        v25 = v24;
      std::string::append(a4, v23, v25);
    }
  }
}

char *flatbuffers::Parser::TokenToStringId@<X0>(char *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if (a2 != 260)
    return (char *)sub_1DF3460B8(a3, a2);
  if (this[55] < 0)
    return (char *)sub_1DF36DA38(a3, *((void **)this + 4), *((_QWORD *)this + 5));
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
  a3->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  return this;
}

unint64_t sub_1DF3460B8(std::string *this, int a2)
{
  std::string *v2;
  unint64_t result;
  const char *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;

  v2 = this;
  if (a2 <= 255)
  {
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
    this->__r_.__value_.__r.__words[2] = 0;
    return (unint64_t)std::string::append(this, 1uLL, a2);
  }
  v4 = off_1EA98EC50[a2 - 256];
  result = strlen(v4);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v2->__r_.__value_.__l.__size_ = v5;
    v2->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v2->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v2 = v8;
  }
  else
  {
    *((_BYTE *)&v2->__r_.__value_.__s + 23) = result;
    if (!result)
      goto LABEL_11;
  }
  result = (unint64_t)memmove(v2, v4, v5);
LABEL_11:
  v2->__r_.__value_.__s.__data_[v5] = 0;
  return result;
}

void flatbuffers::Parser::ParseHexNum(char **this@<X0>, unint64_t *a2@<X2>, int a3@<W1>, _WORD *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  char *v10;
  int v11;
  unsigned int v12;
  unint64_t v14;
  char *v15;
  void **v16;
  unsigned __int8 v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string v27;
  std::string v28;
  void *v29[2];
  uint64_t v30;
  uint64_t v31;
  void *__p;
  char v33;
  uint64_t v34;

  v8 = *this;
  if (a3 < 1)
  {
LABEL_8:
    v14 = a3;
    v15 = &v8[a3];
    v16 = v29;
    sub_1DF3707F0(v29, v8, v15, v14);
    if (v30 < 0)
      v16 = (void **)v29[0];
    *__error() = 0;
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    v17 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v18 = strtoull_l((const char *)v16, &v28.__r_.__value_.__l.__data_, 16, (locale_t)qword_1F04755E8);
    v19 = (void **)v28.__r_.__value_.__l.__data_ != v16 && *v28.__r_.__value_.__l.__data_ == 0;
    if (!v19 || (v20 = v18, *__error()))
      v20 = 0;
    *a2 = v20;
    *this += v14;
    *a4 = 0;
    if (SHIBYTE(v30) < 0)
    {
      v21 = v29[0];
LABEL_28:
      operator delete(v21);
    }
  }
  else
  {
    v9 = a3;
    v10 = *this;
    while (1)
    {
      v11 = *v10++;
      v12 = (v11 & 0xFFFFFFDF) - 65;
      if ((v11 - 48) >= 0xA && v12 >= 6)
        break;
      if (!--v9)
        goto LABEL_8;
    }
    sub_1DF367FB0((uint64_t)v29);
    std::ostream::operator<<();
    std::stringbuf::str();
    v29[0] = *(void **)MEMORY[0x1E0DE4F50];
    v22 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(void **)((char *)v29 + *((_QWORD *)v29[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
    v30 = v22;
    v31 = MEMORY[0x1E0DE4FB8] + 16;
    if (v33 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1E0BFF758](&v34);
    v23 = std::string::insert(&v27, 0, "escape code must be followed by ");
    v24 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v28, " hex digits");
    v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)v29 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v30 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error((uint64_t)this, a4);
    if (SHIBYTE(v30) < 0)
      operator delete(v29[0]);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)v27.__r_.__value_.__r.__words[0];
      goto LABEL_28;
    }
  }
}

void flatbuffers::Parser::SkipByteOrderMark(unsigned __int8 **this@<X0>, _WORD *a2@<X8>)
{
  unsigned __int8 *v3;
  char *__p;

  v3 = *this;
  if (**this != 239)
    goto LABEL_5;
  *this = v3 + 1;
  if (v3[1] == 187)
  {
    *this = v3 + 2;
    if (v3[2] == 191)
    {
      *this = v3 + 3;
LABEL_5:
      *a2 = 0;
      return;
    }
  }
  __p = (char *)operator new(0x20uLL);
  strcpy(__p, "invalid utf-8 byte order mark");
  flatbuffers::Parser::Error((uint64_t)this, a2);
  operator delete(__p);
}

void flatbuffers::Parser::Next(flatbuffers::Parser *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t i;
  BOOL v5;
  char *v6;
  char *v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t j;
  unsigned int v14;
  int v15;
  unint64_t v17;
  std::string *v18;
  std::string *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  std::string *v24;
  char *v25;
  __int128 v26;
  int64x2_t v27;
  char v28;
  std::string *v29;
  const char *v30;
  void *v31;
  BOOL v32;
  int v33;
  std::string *v34;
  int v35;
  _BOOL4 v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned int data;
  BOOL v45;
  std::string *v46;
  std::string::value_type v47;
  int v48;
  unsigned int v49;
  char v50;
  int v51;
  int v52;
  int v53;
  char v54;
  int v55;
  char v56;
  int v57;
  int v58;
  int v59;
  char v60;
  char *v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  int v67;
  char *v68;
  unsigned __int8 *v69;
  int v70;
  char v71;
  BOOL v72;
  std::string *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  std::string::value_type *v81;
  uint64_t v82;
  std::string::value_type v83;
  unsigned __int8 *v84;
  uint64_t v85;
  std::string *v86;
  std::string::size_type v87;
  char v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  char *v95;
  int v96;
  unsigned int v97;
  int v99;
  unsigned int v100;
  int v102;
  char *v103;
  int v104;
  std::string *v105;
  std::string::size_type v106;
  unint64_t v107;
  unint64_t v108;
  std::string v110;
  std::string __p;
  _BYTE __c[24];
  uint64_t v113;
  char *v114;
  void *v115;
  char v116;
  _QWORD v117[22];

  v117[20] = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 7);
  for (i = *((_QWORD *)this + 8); i != v3; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  *((_QWORD *)this + 8) = v3;
  v5 = *(_QWORD *)this == *((_QWORD *)this + 143);
  if (*((char *)this + 55) < 0)
  {
    **((_BYTE **)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
  }
  else
  {
    *((_BYTE *)this + 32) = 0;
    *((_BYTE *)this + 55) = 0;
  }
  *((_BYTE *)this + 24) = 1;
LABEL_10:
  v6 = *(char **)this;
LABEL_11:
  while (2)
  {
    while (1)
    {
      v7 = v6++;
      *(_QWORD *)this = v6;
      v8 = *v7;
      v9 = *v7;
      *((_DWORD *)this + 5) = v8;
      if (v8 > 31)
        break;
      if (v8 > 9)
      {
        if (v8 != 13)
        {
          if (v8 != 10)
            goto LABEL_81;
          *((_QWORD *)this + 1) = v6;
          ++*((_DWORD *)this + 4);
LABEL_41:
          v5 = 1;
          goto LABEL_10;
        }
      }
      else if (v8 != 9)
      {
        if (!v8)
        {
          *(_QWORD *)this = v7;
          v35 = 256;
          goto LABEL_179;
        }
        goto LABEL_81;
      }
    }
    if (v8 > 57)
    {
      v32 = (v8 - 58) > 0x23 || ((1 << (v8 - 58)) & 0xA0000000BLL) == 0;
      if (!v32 || v8 == 123 || v8 == 125)
        goto LABEL_180;
LABEL_81:
      v37 = v9 != 43 && v9 != 45;
      if (v9 == 95 || (v8 & 0xFFFFFFDF) - 65 <= 0x19)
      {
        v39 = *v6;
        v40 = (*v6 & 0xFFFFFFDF) - 65;
LABEL_163:
        if (v40 < 0x1A || v39 == 95 || ((char)v39 - 48) <= 9)
        {
          v61 = v7 + 2;
          do
          {
            *(_QWORD *)this = v61;
            v62 = *v61++;
            v63 = (v62 & 0xFFFFFFDF) - 65;
            v64 = v62 - 48;
            v65 = v62 != 95 && v63 >= 0x1A;
          }
          while (!v65 || v64 < 0xA);
          v6 = v61 - 1;
        }
        sub_1DF3473A8((std::string *)((char *)this + 32), v7, v6);
        if (v37)
          v35 = 260;
        else
          v35 = 257;
        goto LABEL_179;
      }
      switch(v9)
      {
        case '+':
          goto LABEL_92;
        case '.':
          if ((*v6 - 48) >= 0xA)
            goto LABEL_180;
          v67 = 0;
LABEL_190:
          if ((*v6 - 48) > 9)
          {
            v70 = 0;
            goto LABEL_226;
          }
          v68 = v7 + 2;
          *(_QWORD *)this = v7 + 2;
          v9 = v7[1];
          v69 = (unsigned __int8 *)v6;
          goto LABEL_192;
        case '-':
LABEL_92:
          v38 = *v6;
          v39 = *v6;
          v40 = (v38 & 0xFFFFFFDF) - 65;
          if (v38 == 95 || v40 <= 0x19)
            goto LABEL_163;
          break;
        default:
          if ((v8 - 48) < 0xA)
          {
            v67 = 1;
            v68 = v6;
            v69 = (unsigned __int8 *)v7;
LABEL_192:
            v70 = 0;
            if (v67 && v9 == 48)
            {
              if ((*v68 & 0xDF) == 0x58)
              {
                v6 = v68 + 1;
                *(_QWORD *)this = v68 + 1;
                v70 = 1;
LABEL_226:
                v69 = (unsigned __int8 *)v6;
                goto LABEL_237;
              }
              v70 = 0;
            }
            v6 = v68;
LABEL_237:
            while (1)
            {
              v89 = v67;
              v90 = *v6;
              v91 = *v6;
              v92 = v90 - 48;
              if ((v70 & 1) == 0)
                break;
              v93 = (v90 & 0xFFFFFFDF) - 65;
              if (v92 < 0xA || v93 <= 5)
              {
                v95 = v6 + 1;
                do
                {
                  *(_QWORD *)this = v95;
                  v96 = *v95++;
                  LOBYTE(v91) = v96;
                  v97 = (v96 & 0xFFFFFFDF) - 65;
                }
                while ((v96 - 48) < 0xA || v97 < 6);
LABEL_252:
                v91 = v91;
                v6 = v95 - 1;
              }
LABEL_253:
              if (v91 != 46)
              {
                if (v6 > (char *)v69)
                {
                  if ((v70 & (v89 == 0)) != 0)
                    v69 = (unsigned __int8 *)v6;
                  v100 = v91 & 0xFFFFFFDF;
                  if (v100 != 80)
                    v70 = 0;
                  if (v100 == 69 || v70 != 0)
                  {
                    v69 = (unsigned __int8 *)(v6 + 1);
                    *(_QWORD *)this = v6 + 1;
                    v102 = v6[1];
                    if (v102 == 45 || v102 == 43)
                    {
                      v69 = (unsigned __int8 *)(v6 + 2);
                      *(_QWORD *)this = v6 + 2;
                      v102 = v6[2];
                    }
                    v6 = (char *)v69;
                    if (((char)v102 - 48) <= 9)
                    {
                      v103 = (char *)(v69 + 1);
                      do
                      {
                        *(_QWORD *)this = v103;
                        v104 = *v103++;
                        LOBYTE(v102) = v104;
                      }
                      while ((v104 - 48) < 0xA);
                      v102 = v102;
                      v6 = v103 - 1;
                    }
                    if (v102 == 46)
                    {
                      *(_QWORD *)this = ++v6;
                      goto LABEL_281;
                    }
                    v89 = 0;
                  }
                }
                if (v6 > (char *)v69)
                {
                  sub_1DF3473A8((std::string *)((char *)this + 32), v7, v6);
                  if (v89)
                    v35 = 258;
                  else
                    v35 = 259;
                  goto LABEL_179;
                }
LABEL_281:
                sub_1DF3707F0(&__p, v7, v6, v6 - v7);
                v105 = std::string::insert(&__p, 0, "invalid number: ");
                v106 = v105->__r_.__value_.__r.__words[2];
                *(_OWORD *)__c = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
                *(_QWORD *)&__c[16] = v106;
                v105->__r_.__value_.__l.__size_ = 0;
                v105->__r_.__value_.__r.__words[2] = 0;
                v105->__r_.__value_.__r.__words[0] = 0;
LABEL_282:
                flatbuffers::Parser::Error((uint64_t)this, (_WORD *)a2);
                if ((__c[23] & 0x80000000) != 0)
                  operator delete(*(void **)__c);
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  return;
                v31 = (void *)__p.__r_.__value_.__r.__words[0];
                goto LABEL_65;
              }
              v67 = 0;
              *(_QWORD *)this = ++v6;
              if (!v89)
                goto LABEL_281;
            }
            if (v92 > 9)
              goto LABEL_253;
            v95 = v6 + 1;
            do
            {
              *(_QWORD *)this = v95;
              v99 = *v95++;
              LOBYTE(v91) = v99;
            }
            while ((v99 - 48) < 0xA);
            goto LABEL_252;
          }
          break;
      }
      if (v9 > 0x2E || ((1 << v9) & 0x680000000000) == 0)
      {
        memset(&__p, 0, sizeof(__p));
        std::string::operator=(&__p, v9);
        if ((v8 - 32) >= 0x5F)
        {
          sub_1DF367FB0((uint64_t)__c);
          std::ostream::operator<<();
          std::stringbuf::str();
          *(_QWORD *)__c = *MEMORY[0x1E0DE4F50];
          v85 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
          *(_QWORD *)&__c[*(_QWORD *)(*(_QWORD *)__c - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
          *(_QWORD *)&__c[16] = v85;
          v113 = MEMORY[0x1E0DE4FB8] + 16;
          if (v116 < 0)
            operator delete(v115);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1E0BFF758](v117);
          v86 = std::string::insert(&v110, 0, "code: ");
          v87 = v86->__r_.__value_.__r.__words[0];
          *(_QWORD *)__c = v86->__r_.__value_.__l.__size_;
          *(_QWORD *)&__c[7] = *(std::string::size_type *)((char *)&v86->__r_.__value_.__r.__words[1] + 7);
          v88 = HIBYTE(v86->__r_.__value_.__r.__words[2]);
          v86->__r_.__value_.__l.__size_ = 0;
          v86->__r_.__value_.__r.__words[2] = 0;
          v86->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p.__r_.__value_.__r.__words[0] = v87;
          __p.__r_.__value_.__l.__size_ = *(_QWORD *)__c;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&__c[7];
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = v88;
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
        }
        std::operator+<char>();
        goto LABEL_282;
      }
      v67 = 1;
      goto LABEL_190;
    }
    switch(v8)
    {
      case ' ':
        continue;
      case '"':
      case '\'':
        v33 = *v6;
        if (v33 == v9)
        {
          v34 = (std::string *)((char *)this + 32);
          goto LABEL_76;
        }
        v41 = -1;
        v34 = (std::string *)((char *)this + 32);
        break;
      case '(':
      case ')':
      case ',':
        goto LABEL_180;
      case '/':
        v10 = *v6;
        if (v10 != 47)
        {
          if (v10 != 42)
            goto LABEL_81;
          v11 = (unsigned __int8 *)(v7 + 2);
          while (1)
          {
            *(_QWORD *)this = v11;
            v12 = *v11;
            if (v12 == 10)
            {
              *((_QWORD *)this + 1) = v11;
              ++*((_DWORD *)this + 4);
              v12 = *v11;
            }
            else if (v12 == 42)
            {
              if (v11[1] == 47)
              {
                v6 = (char *)(v11 + 2);
                *(_QWORD *)this = v11 + 2;
                goto LABEL_11;
              }
              v12 = 42;
            }
            ++v11;
            if (!v12)
            {
              v30 = "end of file in comment";
LABEL_62:
              *(_OWORD *)__c = *(_OWORD *)v30;
              *(_QWORD *)&__c[14] = *(_QWORD *)(v30 + 14);
              *(_WORD *)&__c[22] = 5632;
LABEL_63:
              flatbuffers::Parser::Error((uint64_t)this, (_WORD *)a2);
              if ((__c[23] & 0x80000000) == 0)
                return;
              v31 = *(void **)__c;
LABEL_65:
              operator delete(v31);
              return;
            }
          }
        }
        for (j = 2; ; ++j)
        {
          v6 = &v7[j];
          *(_QWORD *)this = &v7[j];
          v14 = v7[j];
          v72 = v14 > 0xD;
          v15 = (1 << v14) & 0x2401;
          if (!v72 && v15 != 0)
            break;
        }
        if (v7[2] != 47)
          continue;
        if (!v5)
        {
          *(_QWORD *)__c = operator new(0x38uLL);
          *(_OWORD *)&__c[8] = xmmword_1DF385AC0;
          strcpy(*(char **)__c, "a documentation comment should be on a line on its own");
          goto LABEL_63;
        }
        sub_1DF3707F0(&__p, v7 + 3, &v7[j], j - 3);
        v18 = (std::string *)*((_QWORD *)this + 8);
        v17 = *((_QWORD *)this + 9);
        if ((unint64_t)v18 >= v17)
        {
          v19 = (std::string *)*((_QWORD *)this + 7);
          v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v19) >> 3);
          v21 = v20 + 1;
          if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
            abort();
          if (0x5555555555555556 * ((uint64_t)(v17 - (_QWORD)v19) >> 3) > v21)
            v21 = 0x5555555555555556 * ((uint64_t)(v17 - (_QWORD)v19) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)v19) >> 3) >= 0x555555555555555)
            v22 = 0xAAAAAAAAAAAAAAALL;
          else
            v22 = v21;
          v114 = (char *)this + 72;
          if (v22)
          {
            v108 = v17;
            if (v22 > 0xAAAAAAAAAAAAAAALL)
              sub_1DF3667C0();
            v107 = v22;
            v23 = (char *)operator new(24 * v22);
            v22 = v107;
            v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v19) >> 3);
            v17 = v108;
          }
          else
          {
            v23 = 0;
          }
          v24 = (std::string *)&v23[24 * v20];
          *v24 = __p;
          memset(&__p, 0, sizeof(__p));
          if (v18 == v19)
          {
            v28 = 0;
            v27 = vdupq_n_s64((unint64_t)v18);
            v25 = &v23[24 * v20];
          }
          else
          {
            v25 = &v23[24 * v20];
            do
            {
              v26 = *(_OWORD *)&v18[-1].__r_.__value_.__l.__data_;
              *((_QWORD *)v25 - 1) = *((_QWORD *)&v18[-1].__r_.__value_.__l + 2);
              *(_OWORD *)(v25 - 24) = v26;
              v25 -= 24;
              v18[-1].__r_.__value_.__l.__size_ = 0;
              v18[-1].__r_.__value_.__r.__words[2] = 0;
              v18[-1].__r_.__value_.__r.__words[0] = 0;
              --v18;
            }
            while (v18 != v19);
            v27 = *(int64x2_t *)((char *)this + 56);
            v17 = *((_QWORD *)this + 9);
            v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          v29 = v24 + 1;
          *((_QWORD *)this + 7) = v25;
          *((_QWORD *)this + 8) = v24 + 1;
          *(int64x2_t *)&__c[8] = v27;
          *((_QWORD *)this + 9) = &v23[24 * v22];
          v113 = v17;
          *(_QWORD *)__c = v27.i64[0];
          sub_1DF370790((uint64_t)__c);
          *((_QWORD *)this + 8) = v29;
          if (v28 < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          *v18 = __p;
          *((_QWORD *)this + 8) = v18 + 1;
        }
        goto LABEL_41;
      default:
        goto LABEL_81;
    }
    break;
  }
  do
  {
    if (v33 <= 0x1Fu)
    {
      *(_QWORD *)__c = operator new(0x28uLL);
      *(_OWORD *)&__c[8] = xmmword_1DF385B10;
      strcpy(*(char **)__c, "illegal character in string constant");
      goto LABEL_63;
    }
    if (v33 == 92)
    {
      *((_BYTE *)this + 24) = 0;
      *(_QWORD *)this = v6 + 1;
      v42 = v6[1];
      if (v41 == -1)
      {
        if (v42 <= 97)
        {
          if (v42 > 46)
          {
            if (v42 == 47)
            {
              v46 = (std::string *)((char *)this + 32);
              v47 = 47;
            }
            else
            {
              if (v42 != 92)
                goto LABEL_287;
              v46 = (std::string *)((char *)this + 32);
              v47 = 92;
            }
          }
          else if (v42 == 34)
          {
            v46 = (std::string *)((char *)this + 32);
            v47 = 34;
          }
          else
          {
            if (v42 != 39)
              goto LABEL_287;
            v46 = (std::string *)((char *)this + 32);
            v47 = 39;
          }
        }
        else
        {
          switch(v6[1])
          {
            case 'n':
              v46 = (std::string *)((char *)this + 32);
              v47 = 10;
              break;
            case 'o':
            case 'p':
            case 'q':
            case 's':
            case 'v':
            case 'w':
              goto LABEL_287;
            case 'r':
              v46 = (std::string *)((char *)this + 32);
              v47 = 13;
              break;
            case 't':
              v46 = (std::string *)((char *)this + 32);
              v47 = 9;
              break;
            case 'u':
              goto LABEL_100;
            case 'x':
              *(_QWORD *)this = v6 + 2;
              *(_QWORD *)__c = 0;
              flatbuffers::Parser::ParseHexNum((char **)this, (unint64_t *)__c, 2, (_WORD *)a2);
              *(_BYTE *)(a2 + 1) = 1;
              if (*(_BYTE *)a2)
                return;
              std::string::push_back(v34, __c[0]);
              goto LABEL_158;
            default:
              if (v42 == 98)
              {
                v46 = (std::string *)((char *)this + 32);
                v47 = 8;
              }
              else
              {
                if (v42 != 102)
                {
LABEL_287:
                  *(_QWORD *)__c = operator new(0x28uLL);
                  *(_OWORD *)&__c[8] = xmmword_1DF385B00;
                  strcpy(*(char **)__c, "unknown escape code in string constant");
                  goto LABEL_63;
                }
                v46 = (std::string *)((char *)this + 32);
                v47 = 12;
              }
              break;
          }
        }
        std::string::push_back(v46, v47);
        ++*(_QWORD *)this;
        goto LABEL_158;
      }
      if (v42 != 117)
        goto LABEL_161;
LABEL_100:
      *(_QWORD *)this = v6 + 2;
      __p.__r_.__value_.__r.__words[0] = 0;
      flatbuffers::Parser::ParseHexNum((char **)this, (unint64_t *)&__p, 4, (_WORD *)a2);
      *(_BYTE *)(a2 + 1) = 1;
      if (*(_BYTE *)a2)
        return;
      data = __p.__r_.__value_.__l.__data_;
      if ((__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFC00) == 0xDC00)
      {
        if (v41 == -1)
        {
          *(_QWORD *)__c = operator new(0x38uLL);
          *(_OWORD *)&__c[8] = xmmword_1DF385AE0;
          strcpy(*(char **)__c, "illegal Unicode sequence (unpaired low surrogate)");
          goto LABEL_63;
        }
        v48 = 0;
        v49 = ((uint64_t)__p.__r_.__value_.__l.__data_ & 0x3FF | ((v41 & 0x3FF) << 10)) + 0x10000;
        v50 = 6;
        v51 = 1;
        v52 = -6;
        v53 = -6;
        while (1)
        {
          v54 = v48 ? v50 : v50 + 1;
          if (!(v49 >> v54))
            break;
          v48 += 6;
          v50 += 5;
          ++v51;
          v52 += 6;
          v65 = __CFADD__(v53++, 1);
          if (v65)
            goto LABEL_158;
        }
        std::string::push_back(v34, (254 << ((v48 == 0) - v53)) | (v49 >> v48));
        if (v48)
        {
          do
          {
            std::string::push_back(v34, (v49 >> v52) & 0x3F | 0x80);
            --v51;
            v52 -= 6;
          }
          while (v51 > 1);
        }
        goto LABEL_158;
      }
      if ((__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFC00) != 0xD800)
      {
        if (v41 != -1)
          goto LABEL_161;
        v55 = 0;
        v56 = 6;
        v57 = 1;
        v58 = -6;
        v59 = -6;
        while (1)
        {
          v60 = v55 ? v56 : v56 + 1;
          if (!(LODWORD(__p.__r_.__value_.__l.__data_) >> v60))
            break;
          v55 += 6;
          v56 += 5;
          ++v57;
          v58 += 6;
          v65 = __CFADD__(v59++, 1);
          if (v65)
            goto LABEL_158;
        }
        std::string::push_back(v34, (254 << ((v55 == 0) - v59)) | (LODWORD(__p.__r_.__value_.__l.__data_) >> v55));
        if (v55)
        {
          do
          {
            std::string::push_back(v34, (data >> v58) & 0x3F | 0x80);
            --v57;
            v58 -= 6;
          }
          while (v57 > 1);
        }
LABEL_158:
        v41 = -1;
        goto LABEL_159;
      }
      if (v41 != -1)
      {
        *(_QWORD *)__c = operator new(0x38uLL);
        *(_OWORD *)&__c[8] = xmmword_1DF385AF0;
        strcpy(*(char **)__c, "illegal Unicode sequence (multiple high surrogates)");
        goto LABEL_63;
      }
      v41 = (int)__p.__r_.__value_.__l.__data_;
    }
    else
    {
      if (v41 != -1)
        goto LABEL_161;
      v45 = ((char)v33 - 32) < 0x5F && *((_BYTE *)this + 24) != 0;
      *((_BYTE *)this + 24) = v45;
      *(_QWORD *)this = v6 + 1;
      std::string::push_back(v34, *v6);
    }
LABEL_159:
    v6 = *(char **)this;
    v33 = **(unsigned __int8 **)this;
  }
  while (v33 != v9);
  if (v41 != -1)
  {
LABEL_161:
    *(_QWORD *)__c = operator new(0x38uLL);
    *(_OWORD *)&__c[8] = xmmword_1DF385AD0;
    strcpy(*(char **)__c, "illegal Unicode sequence (unpaired high surrogate)");
    goto LABEL_63;
  }
LABEL_76:
  *(_QWORD *)this = v6 + 1;
  if (!*((_BYTE *)this + 24) && !*((_BYTE *)this + 865))
  {
    v71 = *((_BYTE *)this + 55);
    v72 = v71 < 0;
    if (v71 >= 0)
      v73 = v34;
    else
      v73 = (std::string *)*((_QWORD *)this + 4);
    v74 = v71 & 0x7F;
    if (v72)
      v74 = *((_QWORD *)this + 5);
    v75 = (unsigned __int8 *)v73 + v74;
    while (v73 < (std::string *)v75)
    {
      v76 = 0;
      v77 = v73->__r_.__value_.__s.__data_[0];
      v78 = (char)v77;
      v79 = 128;
      v80 = -1;
      while ((v79 & v77) != 0)
      {
        ++v76;
        v79 >>= 1;
        ++v80;
        if (v76 == 6)
          goto LABEL_224;
      }
      if (((v77 << v76) & 0x80) != 0)
        goto LABEL_224;
      if (v76)
      {
        if (v76 != 1 && v76 <= 4)
        {
          v81 = &v73->__r_.__value_.__s.__data_[1];
          v78 &= ~(-1 << (7 - v76));
          v82 = (uint64_t)v73 + v76;
          while (1)
          {
            v83 = *v81;
            if ((*v81 & 0xC0) != 0x80)
              break;
            ++v81;
            v78 = v83 & 0x3F | (v78 << 6);
            if (!--v80)
            {
              v84 = (unsigned __int8 *)v82;
              if (v78 >> 11 == 27)
                break;
              if (v76 == 4)
              {
                if (v78 - 1114112 >= 0xFFF00000)
                  goto LABEL_223;
                break;
              }
              if (v76 != 3)
              {
                if (v78 - 2048 >= 0xFFFFF880)
                  goto LABEL_223;
                break;
              }
              if (v78 - 0x10000 < 0xFFFF0800)
                break;
              goto LABEL_223;
            }
          }
        }
LABEL_224:
        v30 = "illegal UTF-8 sequence";
        goto LABEL_62;
      }
      v84 = (unsigned __int8 *)&v73->__r_.__value_.__s.__data_[1];
LABEL_223:
      v73 = (std::string *)v84;
      if ((v78 & 0x80000000) != 0)
        goto LABEL_224;
    }
  }
  v35 = 257;
LABEL_179:
  *((_DWORD *)this + 5) = v35;
LABEL_180:
  *(_WORD *)a2 = 0;
}

std::string *sub_1DF3473A8(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *v15;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  char v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = a3 - a2;
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    v7 = a3 - a2;
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    v15 = (char *)v14 + size;
    do
    {
      v16 = *v4++;
      *v15++ = v16;
    }
    while (v4 != a3);
    *v15 = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    sub_1DF3707F0(__p, v4, a3, v7);
    if (v20 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if (v20 >= 0)
      v13 = v20 & 0x7F;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if (v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

BOOL flatbuffers::Parser::Is(flatbuffers::Parser *this, int a2)
{
  return *((_DWORD *)this + 5) == a2;
}

BOOL flatbuffers::Parser::IsIdent(flatbuffers::Parser *this, const char *__s)
{
  size_t v4;
  size_t v5;
  size_t v6;
  size_t v7;
  _QWORD *v8;
  size_t v10;
  _BOOL4 v11;

  if (*((_DWORD *)this + 5) != 260)
    return 0;
  v4 = strlen(__s);
  v5 = *((unsigned __int8 *)this + 55);
  v6 = (v5 & 0x80u) == 0 ? v5 & 0x7F : *((_QWORD *)this + 5);
  if (v4 != v6)
    return 0;
  v7 = v4;
  v8 = (_QWORD *)((char *)this + 32);
  if ((v5 & 0x80) != 0)
  {
    if (v7 == -1)
      goto LABEL_18;
    v8 = (_QWORD *)*v8;
    v5 = *((_QWORD *)this + 5);
  }
  else if (v7 == -1)
  {
LABEL_18:
    abort();
  }
  if (v5 >= v7)
    v10 = v7;
  else
    v10 = v5;
  v11 = memcmp(v8, __s, v10) == 0;
  return v5 == v7 && v11;
}

void flatbuffers::Parser::Expect(flatbuffers::Parser *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  std::string::size_type v12;
  std::string __p;
  std::string v14;
  std::string v15;
  std::string v16;
  __int128 v17;
  std::string::size_type v18;

  if (*((_DWORD *)this + 5) == a2)
  {
    flatbuffers::Parser::Next(this, a3);
    *(_BYTE *)(a3 + 1) = 1;
    if (!*(_BYTE *)a3)
      *(_WORD *)a3 = 0;
  }
  else
  {
    sub_1DF3460B8(&v14, a2);
    v5 = std::string::insert(&v14, 0, "expecting: ");
    v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v15, " instead got: ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::TokenToStringId((char *)this, *((_DWORD *)this + 5), &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    v11 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
    v12 = v11->__r_.__value_.__r.__words[2];
    v17 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v18 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error((uint64_t)this, (_WORD *)a3);
    if (SHIBYTE(v18) < 0)
      operator delete((void *)v17);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
}

uint64_t flatbuffers::Parser::LookupEnum(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string __p;

  if (((-1431655765 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 8) - **(_QWORD **)(a1 + 296)) >> 3)) & 0x80000000) != 0)
    return 0;
  v4 = a1 + 176;
  v5 = a1 + 184;
  v6 = -1431655765 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 8) - **(_QWORD **)(a1 + 296)) >> 3);
  while (1)
  {
    flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a1 + 296), a2, v6, &__p);
    v7 = sub_1DF370890(v4, (uint64_t)&__p);
    v8 = v5 == v7 ? 0 : *(_QWORD *)(v7 + 56);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v8)
      break;
    if (v6-- < 1)
      return 0;
  }
  return v8;
}

uint64_t flatbuffers::Parser::LookupStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_1DF37099C(a1 + 128, a2);
  if (a1 + 136 == v3)
    return 0;
  result = *(_QWORD *)(v3 + 56);
  if (result)
    ++*(_DWORD *)(result + 144);
  return result;
}

void flatbuffers::Parser::ParseTypeIdent(flatbuffers::Parser *this@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  std::string __p;

  if (*((char *)this + 55) < 0)
    sub_1DF36DA38(&__p, *((void **)this + 4), *((_QWORD *)this + 5));
  else
    __p = *(std::string *)((char *)this + 32);
  flatbuffers::Parser::Expect(this, 260, (uint64_t)a3);
  a3[1] = 1;
  if (!*a3)
  {
    flatbuffers::Parser::ParseNamespacing(this, &__p, 0, a3);
    a3[1] = 1;
    if (!*a3)
    {
      v6 = flatbuffers::Parser::LookupEnum((uint64_t)this, (uint64_t)&__p);
      if (v6)
      {
        v7 = *(_OWORD *)(v6 + 152);
        *(_OWORD *)(a2 + 10) = *(_OWORD *)(v6 + 162);
        *(_OWORD *)a2 = v7;
        if (*(_BYTE *)(v6 + 148))
          *(_DWORD *)a2 = 16;
      }
      else
      {
        *(_DWORD *)a2 = 15;
        *(_QWORD *)(a2 + 8) = flatbuffers::Parser::LookupCreateStruct((uint64_t)this, &__p, 1, 0);
      }
      *(_WORD *)a3 = 0;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t flatbuffers::Parser::LookupCreateStruct(uint64_t a1, std::string *a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  int v18;
  size_t v19;
  size_t v20;
  std::string *v21;
  const void *v22;
  std::string::size_type v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  void *v29[2];
  char v30;
  std::string v31;
  std::string v32;
  std::string __p;
  uint64_t v34;
  void *v35;
  char v36;
  uint64_t v37;

  flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a1 + 296), (uint64_t)a2, 0x3E8uLL, &v32);
  v8 = sub_1DF37099C(a1 + 128, (uint64_t)a2);
  v9 = a1 + 136;
  if (a1 + 136 != v8)
  {
    v10 = *(_QWORD *)(v8 + 56);
    if (v10)
    {
      ++*(_DWORD *)(v10 + 144);
      if (*(_BYTE *)(v10 + 201))
      {
        if (a4)
        {
          *(_QWORD *)(v10 + 128) = *(_QWORD *)(a1 + 296);
          sub_1DF3827A4((uint64_t **)(a1 + 128), (uint64_t)a2, (const void **)&v32.__r_.__value_.__l.__data_);
        }
        goto LABEL_52;
      }
    }
  }
  v11 = sub_1DF37099C(a1 + 128, (uint64_t)&v32);
  if (v9 == v11)
  {
    v10 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(v11 + 56);
    if (v10)
    {
      ++*(_DWORD *)(v10 + 144);
      if (*(_BYTE *)(v10 + 201))
      {
        if (!a4)
          goto LABEL_52;
LABEL_29:
        *(_QWORD *)(v10 + 128) = *(_QWORD *)(a1 + 296);
        goto LABEL_52;
      }
    }
  }
  if ((a4 & 1) == 0 && !v10)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8) - **(_QWORD **)(a1 + 296);
    if (v12)
    {
      v13 = v12 / 24 - 1;
      do
      {
        flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a1 + 296), (uint64_t)a2, v13, &__p);
        v14 = sub_1DF37099C(a1 + 128, (uint64_t)&__p);
        if (v9 == v14)
        {
          v10 = 0;
        }
        else
        {
          v10 = *(_QWORD *)(v14 + 56);
          if (v10)
            ++*(_DWORD *)(v10 + 144);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v15 = v13-- != 0;
      }
      while (v15 && !v10);
    }
  }
  if (!v10 && a3)
  {
    v10 = operator new();
    *(_OWORD *)v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_QWORD *)(v10 + 88) = 0;
    *(_QWORD *)(v10 + 96) = 0;
    *(_QWORD *)(v10 + 80) = 0;
    *(_QWORD *)(v10 + 64) = 0;
    *(_QWORD *)(v10 + 72) = v10 + 80;
    *(_QWORD *)(v10 + 128) = 0;
    *(_QWORD *)(v10 + 104) = 0;
    *(_QWORD *)(v10 + 112) = 0;
    *(_BYTE *)(v10 + 120) = 0;
    *(_QWORD *)(v10 + 136) = 0xFFFFFFFF00000000;
    *(_DWORD *)(v10 + 144) = 1;
    *(_QWORD *)(v10 + 160) = 0;
    *(_QWORD *)(v10 + 152) = v10 + 160;
    *(_QWORD *)(v10 + 168) = 0;
    *(_QWORD *)(v10 + 176) = 0;
    *(_QWORD *)(v10 + 184) = 0;
    *(_QWORD *)(v10 + 192) = 0;
    *(_BYTE *)(v10 + 200) = 0;
    *(_WORD *)(v10 + 201) = 257;
    *(_BYTE *)(v10 + 203) = 0;
    *(_QWORD *)(v10 + 224) = 0;
    *(_QWORD *)(v10 + 208) = 1;
    *(_QWORD *)(v10 + 216) = 0;
    if (a4)
    {
      sub_1DF356E28(a1 + 128, (const void **)&v32.__r_.__value_.__l.__data_, (uint64_t *)v10);
      std::string::operator=((std::string *)v10, a2);
      goto LABEL_29;
    }
    sub_1DF356E28(a1 + 128, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t *)v10);
    std::string::operator=((std::string *)v10, a2);
    *(_QWORD *)(v10 + 128) = *(_QWORD *)(a1 + 296);
    v16 = operator new();
    v17 = *(_BYTE *)(a1 + 1175);
    v18 = v17;
    v19 = v17 & 0x7F;
    if (v18 >= 0)
      v20 = v19;
    else
      v20 = *(_QWORD *)(a1 + 1160);
    v21 = &v31;
    sub_1DF370AC0((uint64_t)&v31, v20 + 1);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)v31.__r_.__value_.__r.__words[0];
    if (v20)
    {
      if (*(char *)(a1 + 1175) >= 0)
        v22 = (const void *)(a1 + 1152);
      else
        v22 = *(const void **)(a1 + 1152);
      memmove(v21, v22, v20);
    }
    *(_WORD *)((char *)&v21->__r_.__value_.__l.__data_ + v20) = 58;
    sub_1DF367FB0((uint64_t)&__p);
    std::ostream::operator<<();
    std::stringbuf::str();
    __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
    v23 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                              + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50]
                                                                                                + 64);
    __p.__r_.__value_.__r.__words[2] = v23;
    v34 = MEMORY[0x1E0DE4FB8] + 16;
    if (v36 < 0)
      operator delete(v35);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1E0BFF758](&v37);
    if (v30 >= 0)
      v24 = v29;
    else
      v24 = (void **)v29[0];
    if (v30 >= 0)
      v25 = v30 & 0x7F;
    else
      v25 = (std::string::size_type)v29[1];
    v26 = std::string::append(&v31, (const std::string::value_type *)v24, v25);
    v27 = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)v16 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    *(_QWORD *)(v16 + 16) = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    sub_1DF356EBC((uint64_t *)(v10 + 224), v16);
    if (v30 < 0)
      operator delete(v29[0]);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }
LABEL_52:
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  return v10;
}

void flatbuffers::Parser::ParseType(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  unint64_t v13;
  _QWORD *v14;
  size_t v15;
  int v16;
  unint64_t v17;
  _QWORD *v18;
  size_t v19;
  unint64_t v20;
  _QWORD *v21;
  size_t v22;
  unint64_t v23;
  _QWORD *v24;
  size_t v25;
  unint64_t v26;
  _QWORD *v27;
  size_t v28;
  unint64_t v29;
  _QWORD *v30;
  size_t v31;
  unint64_t v32;
  _QWORD *v33;
  size_t v34;
  unint64_t v35;
  _QWORD *v36;
  size_t v37;
  unint64_t v38;
  _QWORD *v39;
  size_t v40;
  size_t v41;
  char *v42;
  char *v43;
  char v44;
  int v45;
  unsigned int v46;
  BOOL v47;
  unsigned __int8 v48;
  _xlocale *v49;
  const char *v50;
  int v51;
  unint64_t v52;
  _QWORD *v53;
  size_t v54;
  unint64_t v55;
  _QWORD *v56;
  size_t v57;
  unint64_t v58;
  _QWORD *v59;
  size_t v60;
  unint64_t v61;
  _QWORD *v62;
  size_t v63;
  unint64_t v64;
  _QWORD *v65;
  size_t v66;
  size_t v67;
  unint64_t v68;
  _QWORD *v69;
  size_t v70;
  unint64_t v71;
  _QWORD *v72;
  size_t v73;
  unint64_t v74;
  _QWORD *v75;
  size_t v76;
  unint64_t v77;
  _QWORD *v78;
  size_t v79;
  unint64_t v80;
  _QWORD *v81;
  size_t v82;
  unsigned __int8 v83;
  uint64_t v84;
  unint64_t v85;
  __int16 v86;
  size_t v88;
  size_t v89;
  size_t v90;
  char *v91;
  __int128 v92;
  void *__p[3];
  __int16 v94;

  v6 = *(_DWORD *)(a1 + 20);
  if (v6 != 91)
  {
    if (v6 != 260)
    {
      HIBYTE(__p[2]) = 19;
      strcpy((char *)__p, "illegal type syntax");
      flatbuffers::Parser::Error(a1, (_WORD *)a3);
      return;
    }
    v7 = *(unsigned __int8 *)(a1 + 55);
    v8 = *(_QWORD *)(a1 + 40);
    if ((v7 & 0x80u) == 0)
      v9 = v7 & 0x7F;
    else
      v9 = *(_QWORD *)(a1 + 40);
    v10 = (_QWORD *)(a1 + 32);
    switch(v9)
    {
      case 3uLL:
        if ((v7 & 0x80) != 0)
          v10 = (_QWORD *)*v10;
        else
          v8 = *(unsigned __int8 *)(a1 + 55);
        if (v8 >= 3)
          v41 = 3;
        else
          v41 = v8;
        if (memcmp(v10, "int", v41) || v8 != 3)
          goto LABEL_238;
        goto LABEL_95;
      case 4uLL:
        v29 = *(unsigned __int8 *)(a1 + 55);
        v30 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v30 = (_QWORD *)*v10;
          v29 = *(_QWORD *)(a1 + 40);
        }
        if (v29 >= 4)
          v31 = 4;
        else
          v31 = v29;
        if (!memcmp(v30, "BOOL", v31) && v29 == 4)
        {
          v16 = 2;
          goto LABEL_224;
        }
        v35 = v7;
        v36 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v36 = (_QWORD *)*v10;
          v35 = v8;
        }
        if (v35 >= 4)
          v37 = 4;
        else
          v37 = v35;
        if (!memcmp(v36, "byte", v37) && v35 == 4)
          goto LABEL_88;
        v38 = v7;
        v39 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v39 = (_QWORD *)*v10;
          v38 = v8;
        }
        v40 = v38 >= 4 ? 4 : v38;
        if (!memcmp(v39, "int8", v40) && v38 == 4)
        {
LABEL_88:
          v16 = 3;
          goto LABEL_224;
        }
        v64 = v7;
        v65 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v65 = (_QWORD *)*v10;
          v64 = v8;
        }
        if (v64 >= 4)
          v66 = 4;
        else
          v66 = v64;
        if (!memcmp(v65, "uint", v66) && v64 == 4)
          goto LABEL_151;
        v80 = v7;
        v81 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v81 = (_QWORD *)*v10;
          v80 = v8;
        }
        if (v80 >= 4)
          v82 = 4;
        else
          v82 = v80;
        if (!memcmp(v81, "long", v82) && v80 == 4)
          goto LABEL_198;
        if ((v7 & 0x80) != 0)
          v10 = (_QWORD *)*v10;
        else
          v8 = v7;
        if (v8 >= 4)
          v89 = 4;
        else
          v89 = v8;
        if (!memcmp(v10, "half", v89) && v8 == 4)
        {
LABEL_27:
          v16 = -4;
          goto LABEL_224;
        }
        goto LABEL_238;
      case 5uLL:
        v17 = *(unsigned __int8 *)(a1 + 55);
        v18 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v18 = (_QWORD *)*v10;
          v17 = *(_QWORD *)(a1 + 40);
        }
        if (v17 >= 5)
          v19 = 5;
        else
          v19 = v17;
        if (!memcmp(v18, "ubyte", v19) && v17 == 5)
          goto LABEL_42;
        v20 = v7;
        v21 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v21 = (_QWORD *)*v10;
          v20 = v8;
        }
        v22 = v20 >= 5 ? 5 : v20;
        if (!memcmp(v21, "uint8", v22) && v20 == 5)
        {
LABEL_42:
          v16 = 4;
          goto LABEL_224;
        }
        v52 = v7;
        v53 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v53 = (_QWORD *)*v10;
          v52 = v8;
        }
        if (v52 >= 5)
          v54 = 5;
        else
          v54 = v52;
        if (!memcmp(v53, "short", v54) && v52 == 5)
          goto LABEL_126;
        v55 = v7;
        v56 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v56 = (_QWORD *)*v10;
          v55 = v8;
        }
        v57 = v55 >= 5 ? 5 : v55;
        if (!memcmp(v56, "int16", v57) && v55 == 5)
        {
LABEL_126:
          v16 = 5;
          goto LABEL_224;
        }
        v68 = v7;
        v69 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v69 = (_QWORD *)*v10;
          v68 = v8;
        }
        if (v68 >= 5)
          v70 = 5;
        else
          v70 = v68;
        if (!memcmp(v69, "int32", v70) && v68 == 5)
        {
LABEL_95:
          v16 = 7;
          goto LABEL_224;
        }
        v71 = v7;
        v72 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v72 = (_QWORD *)*v10;
          v71 = v8;
        }
        if (v71 >= 5)
          v73 = 5;
        else
          v73 = v71;
        if (!memcmp(v72, "int64", v73) && v71 == 5)
        {
LABEL_198:
          v16 = 9;
          goto LABEL_224;
        }
        v74 = v7;
        v75 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v75 = (_QWORD *)*v10;
          v74 = v8;
        }
        if (v74 >= 5)
          v76 = 5;
        else
          v76 = v74;
        if (!memcmp(v75, "ulong", v76) && v74 == 5)
          goto LABEL_141;
        if ((v7 & 0x80) != 0)
          v10 = (_QWORD *)*v10;
        else
          v8 = v7;
        if (v8 >= 5)
          v90 = 5;
        else
          v90 = v8;
        if (!memcmp(v10, "float", v90) && v8 == 5)
        {
LABEL_73:
          v16 = 11;
          goto LABEL_224;
        }
        goto LABEL_238;
      case 6uLL:
        v23 = *(unsigned __int8 *)(a1 + 55);
        v24 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v24 = (_QWORD *)*v10;
          v23 = *(_QWORD *)(a1 + 40);
        }
        if (v23 >= 6)
          v25 = 6;
        else
          v25 = v23;
        if (!memcmp(v24, "ushort", v25) && v23 == 6)
          goto LABEL_57;
        v26 = v7;
        v27 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v27 = (_QWORD *)*v10;
          v26 = v8;
        }
        v28 = v26 >= 6 ? 6 : v26;
        if (!memcmp(v27, "uint16", v28) && v26 == 6)
        {
LABEL_57:
          v16 = 6;
LABEL_224:
          *(_DWORD *)a2 = v16;
          flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a3);
          goto LABEL_239;
        }
        v58 = v7;
        v59 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v59 = (_QWORD *)*v10;
          v58 = v8;
        }
        if (v58 >= 6)
          v60 = 6;
        else
          v60 = v58;
        if (!memcmp(v59, "uint32", v60) && v58 == 6)
        {
LABEL_151:
          v16 = 8;
          goto LABEL_224;
        }
        v61 = v7;
        v62 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v62 = (_QWORD *)*v10;
          v61 = v8;
        }
        if (v61 >= 6)
          v63 = 6;
        else
          v63 = v61;
        if (!memcmp(v62, "uint64", v63) && v61 == 6)
        {
LABEL_141:
          v16 = 10;
          goto LABEL_224;
        }
        v77 = v7;
        v78 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v78 = (_QWORD *)*v10;
          v77 = v8;
        }
        if (v77 >= 6)
          v79 = 6;
        else
          v79 = v77;
        if (!memcmp(v78, "double", v79) && v77 == 6)
        {
LABEL_158:
          v16 = 12;
          goto LABEL_224;
        }
        if ((v7 & 0x80) != 0)
          v10 = (_QWORD *)*v10;
        else
          v8 = v7;
        if (v8 >= 6)
          v88 = 6;
        else
          v88 = v8;
        if (!memcmp(v10, "string", v88) && v8 == 6)
        {
          v16 = 13;
          goto LABEL_224;
        }
LABEL_238:
        flatbuffers::Parser::ParseTypeIdent((flatbuffers::Parser *)a1, a2, (_BYTE *)a3);
        break;
      case 7uLL:
        v13 = *(unsigned __int8 *)(a1 + 55);
        v14 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v14 = (_QWORD *)*v10;
          v13 = *(_QWORD *)(a1 + 40);
        }
        if (v13 >= 7)
          v15 = 7;
        else
          v15 = v13;
        if (!memcmp(v14, "float16", v15) && v13 == 7)
          goto LABEL_27;
        v32 = v7;
        v33 = (_QWORD *)(a1 + 32);
        if ((v7 & 0x80) != 0)
        {
          v33 = (_QWORD *)*v10;
          v32 = v8;
        }
        if (v32 >= 7)
          v34 = 7;
        else
          v34 = v32;
        if (!memcmp(v33, "float32", v34) && v32 == 7)
          goto LABEL_73;
        if ((v7 & 0x80) != 0)
          v10 = (_QWORD *)*v10;
        else
          v8 = v7;
        if (v8 >= 7)
          v67 = 7;
        else
          v67 = v8;
        if (!memcmp(v10, "float64", v67) && v8 == 7)
          goto LABEL_158;
        goto LABEL_238;
      default:
        goto LABEL_238;
    }
    goto LABEL_239;
  }
  flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a3);
  *(_BYTE *)(a3 + 1) = 1;
  if (!*(_BYTE *)a3)
  {
    memset(__p, 0, sizeof(__p));
    v94 = 0;
    v11 = *(_DWORD *)(a1 + 1204);
    if (v11 < 64)
    {
      *(_DWORD *)(a1 + 1204) = v11 + 1;
      flatbuffers::Parser::ParseType(a1, __p);
      --*(_DWORD *)(a1 + 1204);
    }
    else
    {
      flatbuffers::Parser::RecurseError((flatbuffers::Parser *)a1, (_WORD *)a3);
    }
    *(_BYTE *)(a3 + 1) = 1;
    if (!*(_BYTE *)a3)
    {
      v12 = (int)__p[0];
      if (LODWORD(__p[0]) == 17 || LODWORD(__p[0]) == 14)
      {
        v91 = (char *)operator new(0x38uLL);
        v92 = xmmword_1DF385B20;
        strcpy(v91, "nested vector types not supported (wrap in table first)");
        goto LABEL_18;
      }
      if (*(_DWORD *)(a1 + 20) == 58)
      {
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a3);
        *(_BYTE *)(a3 + 1) = 1;
        if (*(_BYTE *)a3)
          return;
        if (*(_DWORD *)(a1 + 20) == 258)
        {
          v42 = (char *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0)
            v42 = *(char **)v42;
          v43 = v42;
          do
          {
            v45 = *v43++;
            v44 = v45;
            v46 = v45 - 48;
            if (v45)
              v47 = v46 > 9;
            else
              v47 = 0;
          }
          while (v47);
          if (v44 == 48 && (*v43 & 0xDF) == 0x58)
          {
            v91 = v42;
            v48 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
            if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
            {
              qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
              __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
              __cxa_guard_release(&qword_1F04755F0);
            }
            v49 = (_xlocale *)qword_1F04755E8;
            v50 = v42;
            v51 = 16;
          }
          else
          {
            v91 = v42;
            v83 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
            if ((v83 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
            {
              qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
              __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
              __cxa_guard_release(&qword_1F04755F0);
            }
            v49 = (_xlocale *)qword_1F04755E8;
            v50 = v42;
            v51 = 10;
          }
          v84 = strtoll_l(v50, &v91, v51, v49);
          if (v91 != v42 && *v91 == 0)
            v85 = v84;
          else
            v85 = 0;
          v86 = -1;
          if (v85 < 0xFFFF)
            v86 = v85;
          if (v91 != v42 && *v91 == 0 && !(v85 >> 16) && v86 != 0)
          {
            *(_QWORD *)a2 = 17;
            *(_OWORD *)(a2 + 8) = *(_OWORD *)&__p[1];
            *(_WORD *)(a2 + 24) = v86;
            flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a3);
            *(_BYTE *)(a3 + 1) = 1;
            if (*(_BYTE *)a3)
              return;
            goto LABEL_143;
          }
          v91 = (char *)operator new(0x48uLL);
          v92 = xmmword_1DF385B40;
          strcpy(v91, "length of fixed-length array must be positive and fit to uint16_t type");
        }
        else
        {
          v91 = (char *)operator new(0x38uLL);
          v92 = xmmword_1DF385B30;
          strcpy(v91, "length of fixed-length array must be an integer value");
        }
LABEL_18:
        flatbuffers::Parser::Error(a1, (_WORD *)a3);
        if (SHIBYTE(v92) < 0)
          operator delete(v91);
        return;
      }
      *(_DWORD *)a2 = 14;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)&__p[1];
      *(_WORD *)(a2 + 24) = 0;
LABEL_143:
      *(_DWORD *)(a2 + 4) = v12;
      flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 93, a3);
LABEL_239:
      *(_BYTE *)(a3 + 1) = 1;
      if (!*(_BYTE *)a3)
        *(_WORD *)a3 = 0;
    }
  }
}

void flatbuffers::Parser::AddField(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _WORD *a6@<X8>)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p;
  char v22;

  v12 = operator new();
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 96) = 0;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = v12 + 80;
  *(_QWORD *)(v12 + 128) = 0;
  *(_QWORD *)(v12 + 104) = 0;
  *(_QWORD *)(v12 + 112) = 0;
  *(_BYTE *)(v12 + 120) = 0;
  *(_QWORD *)(v12 + 136) = 0xFFFFFFFF00000000;
  *(_DWORD *)(v12 + 144) = 1;
  *(_QWORD *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 168) = 0;
  *(_QWORD *)(v12 + 152) = 0;
  *(_WORD *)(v12 + 176) = 0;
  *(_BYTE *)(v12 + 207) = 1;
  *(_WORD *)(v12 + 184) = 48;
  *(_DWORD *)(v12 + 216) = 0;
  *(_DWORD *)(v12 + 219) = 0;
  v13 = *(_DWORD *)(a2 + 184) - *(_DWORD *)(a2 + 176);
  *(_QWORD *)(v12 + 224) = 0;
  *(_QWORD *)(v12 + 232) = 0;
  *(_WORD *)(v12 + 208) = ((v13 >> 2) & 0xFFFE) + 4;
  std::string::operator=((std::string *)v12, a3);
  std::string::operator=((std::string *)(v12 + 24), (const std::string *)(a2 + 24));
  *(_OWORD *)(v12 + 152) = *(_OWORD *)a4;
  *(_OWORD *)(v12 + 162) = *(_OWORD *)(a4 + 10);
  if (*(_BYTE *)(a2 + 200))
  {
    v14 = sub_1DF348948((int *)a4);
    v15 = sub_1DF382084(a4);
    v16 = *(_QWORD *)(a2 + 208);
    v17 = *(_QWORD *)(a2 + 216);
    if (v16 <= v15)
      v16 = v15;
    *(_QWORD *)(a2 + 208) = v16;
    v18 = (v15 - 1) & -v17;
    v19 = v18 + v17;
    v20 = *(_QWORD *)(a2 + 184);
    if (v20 != *(_QWORD *)(a2 + 176))
      *(_QWORD *)(*(_QWORD *)(v20 - 8) + 232) = v18;
    *(_WORD *)(v12 + 208) = v19;
    *(_QWORD *)(a2 + 216) = v19 + v14;
  }
  if (sub_1DF3489C8((uint64_t **)(a2 + 152), (const void **)&a3->__r_.__value_.__l.__data_, v12))
  {
    std::operator+<char>();
    flatbuffers::Parser::Error(a1, a6);
    if (v22 < 0)
      operator delete(__p);
  }
  else
  {
    *a5 = v12;
    *a6 = 0;
  }
}

uint64_t sub_1DF348948(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _DWORD v5[2];
  __int128 v6;
  __int16 v7;

  v1 = *a1;
  if ((_DWORD)v1 == 15)
  {
    v2 = *((_QWORD *)a1 + 1);
    if (*(_BYTE *)(v2 + 200))
      return *(_QWORD *)(v2 + 216);
  }
  else if ((_DWORD)v1 == 17)
  {
    v4 = *((unsigned __int16 *)a1 + 12);
    v5[0] = a1[1];
    v5[1] = 0;
    v6 = *(_OWORD *)(a1 + 2);
    v7 = v4;
    return sub_1DF348948(v5) * v4;
  }
  return byte_1DF385F2C[v1 + 4];
}

uint64_t sub_1DF3489C8(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  size_t v11;
  const void *v12;
  const void *v13;
  size_t v14;
  uint64_t *v15;
  uint64_t **v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  _BOOL4 v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t *v26;
  char v27;
  int v28;
  uint64_t *v29;
  size_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  int v34;
  _BOOL4 v35;
  uint64_t **v36;
  uint64_t *v37;
  size_t v38;
  const void *v39;
  size_t v40;
  size_t v41;
  size_t v42;
  int v43;
  _BOOL4 v44;
  size_t v45;
  int v46;
  _BOOL4 v47;
  _QWORD *v48;
  _BYTE *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t result;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  const void **v63;

  v3 = a3;
  v7 = a1[4];
  v6 = (unint64_t)a1[5];
  if ((unint64_t)v7 >= v6)
  {
    v53 = a1[3];
    v54 = v7 - v53;
    v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 61)
      abort();
    v56 = v6 - (_QWORD)v53;
    if (v56 >> 2 > v55)
      v55 = v56 >> 2;
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
      v57 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v57 = v55;
    if (v57)
    {
      if (v57 >> 61)
        sub_1DF3667C0();
      v58 = (char *)operator new(8 * v57);
    }
    else
    {
      v58 = 0;
    }
    v59 = &v58[8 * v54];
    v60 = &v58[8 * v57];
    *(_QWORD *)v59 = v3;
    v8 = (uint64_t *)(v59 + 8);
    if (v7 != v53)
    {
      do
      {
        v61 = *--v7;
        *((_QWORD *)v59 - 1) = v61;
        v59 -= 8;
      }
      while (v7 != v53);
      v7 = a1[3];
    }
    a1[3] = (uint64_t *)v59;
    a1[4] = v8;
    a1[5] = (uint64_t *)v60;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v7 = a3;
    v8 = v7 + 1;
  }
  v10 = a1 + 1;
  v9 = a1[1];
  a1[4] = v8;
  v11 = *((unsigned __int8 *)a2 + 23);
  v63 = a2;
  if (!v9)
  {
    v36 = a1 + 1;
LABEL_67:
    v48 = operator new(0x40uLL);
    v49 = v48 + 4;
    if ((v11 & 0x80) != 0)
    {
      sub_1DF36DA38(v49, (void *)*v63, (unint64_t)v63[1]);
    }
    else
    {
      *(_OWORD *)v49 = *(_OWORD *)v63;
      v48[6] = v63[2];
    }
    v48[7] = 0;
    *v48 = 0;
    v48[1] = 0;
    v48[2] = v36;
    *v10 = v48;
    v50 = (uint64_t *)**a1;
    v51 = v48;
    if (v50)
    {
      *a1 = v50;
      v51 = *v10;
    }
    sub_1DF36718C(a1[1], v51);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_72:
    result = 0;
    v48[7] = v3;
    return result;
  }
  v62 = v3;
  v12 = a2[1];
  if ((v11 & 0x80u) == 0)
    v13 = a2;
  else
    v13 = *a2;
  if ((v11 & 0x80u) == 0)
    v14 = v11 & 0x7F;
  else
    v14 = (size_t)a2[1];
  v15 = v9;
  v16 = a1 + 1;
  do
  {
    if (*((char *)v15 + 55) < 0)
    {
      v17 = (const void *)v15[4];
      v18 = v15[5];
    }
    else
    {
      v17 = v15 + 4;
      v18 = *((unsigned __int8 *)v15 + 55);
    }
    if (v14 >= v18)
      v19 = v18;
    else
      v19 = v14;
    v20 = memcmp(v17, v13, v19);
    v21 = v18 < v14;
    if (v20)
      v21 = v20 < 0;
    v22 = !v21;
    if (v21)
      v23 = v15 + 1;
    else
      v23 = v15;
    if (v22)
      v16 = (uint64_t **)v15;
    v15 = (uint64_t *)*v23;
  }
  while (*v23);
  if (v16 == v10)
  {
    if ((v11 & 0x80u) == 0)
      v32 = v11;
    else
      v32 = (size_t)v12;
    v3 = v62;
    goto LABEL_43;
  }
  v26 = v16[4];
  v25 = v16 + 4;
  v24 = v26;
  v27 = *((_BYTE *)v25 + 23);
  v28 = v27;
  if (v27 >= 0)
    v29 = v25;
  else
    v29 = v24;
  v30 = v27 & 0x7F;
  if (v28 >= 0)
    v31 = v30;
  else
    v31 = v25[1];
  if ((v11 & 0x80u) == 0)
    v32 = v11;
  else
    v32 = (size_t)v12;
  if (v31 >= v32)
    v33 = v32;
  else
    v33 = v31;
  v34 = memcmp(v13, v29, v33);
  v35 = v32 < v31;
  if (v34)
    v35 = v34 < 0;
  v3 = v62;
  if (v35)
  {
    while (1)
    {
      while (1)
      {
LABEL_43:
        v36 = (uint64_t **)v9;
        v37 = v9 + 4;
        v38 = *((unsigned __int8 *)v9 + 55);
        if ((v38 & 0x80u) == 0)
          v39 = v9 + 4;
        else
          v39 = (const void *)v9[4];
        v40 = v37[1];
        if ((v38 & 0x80u) == 0)
          v41 = v38 & 0x7F;
        else
          v41 = v37[1];
        if (v41 >= v32)
          v42 = v32;
        else
          v42 = v41;
        v43 = memcmp(v13, v39, v42);
        v44 = v32 < v41;
        if (v43)
          v44 = v43 < 0;
        if (!v44)
          break;
        v9 = *v36;
        v10 = v36;
        if (!*v36)
          goto LABEL_67;
      }
      if ((v38 & 0x80u) != 0)
        v38 = v40;
      if (v32 >= v38)
        v45 = v38;
      else
        v45 = v32;
      v46 = memcmp(v39, v13, v45);
      v47 = v38 < v32;
      if (v46)
        v47 = v46 < 0;
      if (!v47)
        break;
      v9 = v36[1];
      if (!v9)
      {
        v10 = v36 + 1;
        goto LABEL_67;
      }
    }
    v48 = v36;
    goto LABEL_72;
  }
  return 1;
}

void flatbuffers::Parser::ParseField(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  size_t v7;
  std::string *p_p;
  std::string *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  std::string *v16;
  uint64_t v17;
  std::string::size_type v18;
  unsigned __int8 *i;
  int v20;
  uint64_t v21;
  int v22;
  size_t v23;
  std::string *v24;
  std::string *v25;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  const char *v39;
  uint64_t v40;
  char v41;
  char v42;
  const char *v43;
  uint64_t v44;
  char v45;
  char v46;
  const char *v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t *v52;
  _OWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v62;
  std::string::size_type v63;
  std::string *v64;
  std::string::size_type v65;
  char v66;
  BOOL v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  std::string::size_type v70;
  std::string *v71;
  std::string::size_type v72;
  void *v73;
  _WORD *v74;
  __int16 v75;
  const char *v76;
  __int128 v77;
  uint64_t *v78;
  uint64_t v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  int v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t Struct;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  BOOL v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t *v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  __int128 v109;
  std::string::size_type v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  std::string v115;
  std::string v116;
  std::string v117;
  uint64_t v118;
  std::string v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  std::string::size_type v123;
  __int16 v124;
  std::string *v125;
  std::string *v126;
  uint64_t v127;
  std::string __dst;
  std::string __p;
  uint64_t v130;
  void *v131;
  char v132;
  uint64_t v133;

  if (*(char *)(a1 + 55) < 0)
    sub_1DF36DA38(&__dst, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  else
    __dst = *(std::string *)(a1 + 32);
  if (!flatbuffers::Parser::LookupCreateStruct(a1, &__dst, 0, 0))
  {
    v125 = 0;
    v126 = 0;
    v127 = 0;
    sub_1DF370610(&v125, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3));
    flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 260, a3);
    *(_BYTE *)(a3 + 1) = 1;
    if (*(_BYTE *)a3)
      goto LABEL_10;
    flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 58, a3);
    *(_BYTE *)(a3 + 1) = 1;
    if (*(_BYTE *)a3)
      goto LABEL_10;
    v121 = 0;
    v122 = 0;
    v124 = 0;
    v123 = 0;
    flatbuffers::Parser::ParseType(a1, (uint64_t)&v121, a3);
    *(_BYTE *)(a3 + 1) = 1;
    if (*(_BYTE *)a3)
      goto LABEL_10;
    v6 = v121;
    if (*(_BYTE *)(a2 + 200))
    {
      if (v121 <= 0xFFFFFFFB && (v121 - 1) > 0xB)
      {
        if ((_DWORD)v121 == 17)
        {
          if ((*(_QWORD *)(a1 + 1120) & 0xFFFFFFFFFFFFFA54) != 0)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x50uLL);
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385B50;
            strcpy(__p.__r_.__value_.__l.__data_, "Arrays are not yet supported in all the specified programming languages.");
            goto LABEL_261;
          }
        }
        else if ((_DWORD)v121 != 15 || !*(_BYTE *)(v122 + 200))
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385AE0;
          strcpy(__p.__r_.__value_.__l.__data_, "structs_ may contain only scalar or struct fields");
          goto LABEL_261;
        }
      }
      v120 = 0;
LABEL_40:
      v118 = 0;
      flatbuffers::Parser::AddField(a1, a2, &__dst, (uint64_t)&v121, &v118, (_WORD *)a3);
      *(_BYTE *)(a3 + 1) = 1;
      if (*(_BYTE *)a3)
        goto LABEL_10;
      if (*(_DWORD *)(a1 + 20) == 61)
      {
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a3);
        *(_BYTE *)(a3 + 1) = 1;
        if (*(_BYTE *)a3)
          goto LABEL_10;
        v11 = v118;
        flatbuffers::Parser::ParseSingleValue(a1, v118, (int *)(v118 + 152), 1, a3);
        *(_BYTE *)(a3 + 1) = 1;
        if (*(_BYTE *)a3)
          goto LABEL_10;
        if (v6 <= 0xFFFFFFFB && v6 - 1 > 0xB)
          goto LABEL_132;
        if (*(_BYTE *)(a2 + 200))
        {
          v12 = *(unsigned __int8 *)(v11 + 207);
          v13 = (v12 & 0x80u) == 0 ? v12 & 0x7F : *(_QWORD *)(v11 + 192);
          if (v13 != 1)
            goto LABEL_132;
          v14 = (_QWORD *)(v11 + 184);
          if ((v12 & 0x80) != 0)
          {
            v14 = (_QWORD *)*v14;
            v12 = *(_QWORD *)(v11 + 192);
          }
          v15 = memcmp(v14, "0", v12 != 0);
          if (v12 != 1 || v15)
          {
LABEL_132:
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385B70;
            strcpy(__p.__r_.__value_.__l.__data_, "default values currently only supported for scalars in tables");
            goto LABEL_261;
          }
        }
      }
      if (v6 + 4 <= 0x10 && ((1 << (v6 + 4)) & 0x18001) != 0)
      {
        v16 = (std::string *)(v118 + 184);
        v17 = *(unsigned __int8 *)(v118 + 207);
        v18 = v118 + 184;
        if (*(char *)(v118 + 207) < 0)
          v18 = v16->__r_.__value_.__r.__words[0];
        for (i = (unsigned __int8 *)(v18 + 1); ; ++i)
        {
          v20 = *(i - 1);
          if (v20 != 32)
            break;
        }
        if (v20 == 43 || v20 == 45)
          v20 = *i;
        if (v20 != 95 && ((char)(v20 & 0xDF) - 65) >= 0x1A)
        {
          if ((v17 & 0x80) != 0)
          {
            v27 = *(unsigned __int8 **)(v118 + 184);
            v17 = *(_QWORD *)(v118 + 192);
          }
          else
          {
            v27 = (unsigned __int8 *)(v118 + 184);
          }
          if (v17)
          {
            v28 = &v27[v17];
            v29 = v27;
LABEL_92:
            v30 = 0;
            while (*v29 != aEepp[v30])
            {
              if (++v30 == 5)
              {
                if (++v29 != v28)
                  goto LABEL_92;
                goto LABEL_99;
              }
            }
            if (v29 != v28 && v29 - v27 != -1)
              goto LABEL_100;
          }
LABEL_99:
          std::string::append(v16, ".0");
        }
      }
LABEL_100:
      v31 = v123;
      if (v123 && v6 != 14)
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 9;
        strcpy((char *)&__p, "bit_flags");
        v32 = sub_1DF370B40(v123 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
        if ((uint64_t *)(v31 + 80) == v32 || !v32[7])
        {
          v56 = flatbuffers::EnumDef::FindByValue(v31, (char *)(v118 + 184));
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            v57 = v56;
            operator delete(__p.__r_.__value_.__l.__data_);
            v56 = v57;
          }
          if (!v56)
          {
            std::operator+<char>();
            v58 = std::string::append(&v115, " for field ");
            v59 = v58->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v116.__r_.__value_.__l.__data_ = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
            v116.__r_.__value_.__r.__words[2] = v59;
            v58->__r_.__value_.__l.__size_ = 0;
            v58->__r_.__value_.__r.__words[2] = 0;
            v58->__r_.__value_.__r.__words[0] = 0;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_dst = &__dst;
            else
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
            else
              size = __dst.__r_.__value_.__l.__size_;
            v62 = std::string::append(&v116, (const std::string::value_type *)p_dst, size);
            v63 = v62->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v117.__r_.__value_.__l.__data_ = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
            v117.__r_.__value_.__r.__words[2] = v63;
            v62->__r_.__value_.__l.__size_ = 0;
            v62->__r_.__value_.__r.__words[2] = 0;
            v62->__r_.__value_.__r.__words[0] = 0;
            v64 = std::string::append(&v117, " is not part of enum ");
            v65 = v64->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v119.__r_.__value_.__l.__data_ = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
            v119.__r_.__value_.__r.__words[2] = v65;
            v64->__r_.__value_.__l.__size_ = 0;
            v64->__r_.__value_.__r.__words[2] = 0;
            v64->__r_.__value_.__r.__words[0] = 0;
            v66 = *(_BYTE *)(v31 + 23);
            v67 = v66 < 0;
            if (v66 >= 0)
              v68 = (const std::string::value_type *)v31;
            else
              v68 = *(const std::string::value_type **)v31;
            v69 = v66 & 0x7F;
            if (v67)
              v70 = *(_QWORD *)(v31 + 8);
            else
              v70 = v69;
            v71 = std::string::append(&v119, v68, v70);
            v72 = v71->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v72;
            v71->__r_.__value_.__l.__size_ = 0;
            v71->__r_.__value_.__r.__words[2] = 0;
            v71->__r_.__value_.__r.__words[0] = 0;
            flatbuffers::Parser::Error(a1, (_WORD *)a3);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v119.__r_.__value_.__l.__data_);
            if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v117.__r_.__value_.__l.__data_);
            if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v116.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v115.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_10;
            v73 = (void *)v115.__r_.__value_.__r.__words[0];
            goto LABEL_263;
          }
        }
        else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v33 = v118;
      if ((std::string **)(v118 + 48) != &v125)
        sub_1DF370C24(v118 + 48, v125, v126, 0xAAAAAAAAAAAAAAABLL * (((char *)v126 - (char *)v125) >> 3));
      flatbuffers::Parser::ParseMetaData(a1, v33 + 72, (unsigned __int8 *)a3);
      *(_BYTE *)(a3 + 1) = 1;
      if (*(_BYTE *)a3)
        goto LABEL_10;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&__p, "deprecated");
      v34 = sub_1DF370B40(v33 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
      v114 = (uint64_t *)(v33 + 80);
      if ((uint64_t *)(v33 + 80) == v34)
        v35 = 0;
      else
        v35 = v34[7];
      *(_BYTE *)(v33 + 216) = v35 != 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&__p, "hash");
      v36 = sub_1DF370B40(v33 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
      if (v114 == v36)
        v37 = 0;
      else
        v37 = v36[7];
      v112 = v33 + 72;
      v113 = v33;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v37)
      {
        v38 = HIDWORD(v121);
        if (v6 != 14)
          v38 = v6;
        if (v38 > 0xA)
          goto LABEL_197;
        if (((1 << v38) & 0x60) != 0)
        {
          v43 = (const char *)(v37 + 32);
          if (*(char *)(v37 + 55) < 0)
            v43 = *(const char **)(v37 + 32);
          v44 = 0;
          v45 = 1;
          while (1)
          {
            v46 = v45;
            if (!strcmp(v43, (&off_1EA98ED28)[2 * v44]))
              break;
            v45 = 0;
            v44 = 1;
            if ((v46 & 1) == 0)
            {
LABEL_145:
              std::operator+<char>();
              goto LABEL_261;
            }
          }
        }
        else
        {
          if (((1 << v38) & 0x180) == 0)
          {
            if (((1 << v38) & 0x600) != 0)
            {
              v39 = (const char *)(v37 + 32);
              if (*(char *)(v37 + 55) < 0)
                v39 = *(const char **)(v37 + 32);
              v40 = 0;
              v41 = 1;
              while (1)
              {
                v42 = v41;
                if (!strcmp(v39, (&off_1EA98ED68)[2 * v40]))
                  goto LABEL_146;
                v41 = 0;
                v40 = 1;
                if ((v42 & 1) == 0)
                  goto LABEL_145;
              }
            }
LABEL_197:
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x50uLL);
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385B80;
            strcpy(__p.__r_.__value_.__l.__data_, "only short, ushort, int, uint, long and ulong data types support hashing.");
            goto LABEL_261;
          }
          v47 = (const char *)(v37 + 32);
          if (*(char *)(v37 + 55) < 0)
            v47 = *(const char **)(v37 + 32);
          v48 = 0;
          v49 = 1;
          while (1)
          {
            v50 = v49;
            if (!strcmp(v47, (&off_1EA98ED48)[2 * v48]))
              break;
            v49 = 0;
            v48 = 1;
            if ((v50 & 1) == 0)
              goto LABEL_145;
          }
        }
      }
LABEL_146:
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&__p, "cpp_type");
      v51 = v33 + 72;
      v52 = sub_1DF370B40(v112, (const void **)&__p.__r_.__value_.__l.__data_);
      if (v114 == v52)
        v53 = 0;
      else
        v53 = (_OWORD *)v52[7];
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v53)
      {
        if (!v37)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385B90;
          strcpy(__p.__r_.__value_.__l.__data_, "cpp_type can only be used with a hashed field");
          goto LABEL_261;
        }
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 12;
        strcpy((char *)&__p, "cpp_ptr_type");
        v54 = sub_1DF370B40(v112, (const void **)&__p.__r_.__value_.__l.__data_);
        if (v114 == v54)
          v55 = 0;
        else
          v55 = v54[7];
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (!v55)
        {
          v91 = operator new();
          *(_QWORD *)(v91 + 8) = 0;
          *(_QWORD *)(v91 + 16) = 0;
          *(_QWORD *)v91 = 0;
          *(_WORD *)(v91 + 24) = 0;
          *(_BYTE *)(v91 + 55) = 1;
          *(_WORD *)(v91 + 32) = 48;
          *(_WORD *)(v91 + 56) = -1;
          v92 = *(_OWORD *)((char *)v53 + 10);
          *(_OWORD *)v91 = *v53;
          *(_OWORD *)(v91 + 10) = v92;
          MEMORY[0x1E0BFF5B4](v91 + 32, "naked");
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 12;
          strcpy((char *)&__p, "cpp_ptr_type");
          sub_1DF382198(v112, (const void **)&__p.__r_.__value_.__l.__data_, v91);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v51 = v112;
        }
      }
      if (*(_BYTE *)(v113 + 216) && *(_BYTE *)(a2 + 200))
      {
        v74 = operator new(0x28uLL);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385BA0;
        v75 = 29795;
        v76 = "can't deprecate fields in a struct";
LABEL_188:
        v74[16] = v75;
        v77 = *((_OWORD *)v76 + 1);
        *(_OWORD *)v74 = *(_OWORD *)v76;
        *((_OWORD *)v74 + 1) = v77;
        *((_BYTE *)v74 + 34) = 0;
        goto LABEL_261;
      }
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&__p, "required");
      v78 = sub_1DF370B40(v51, (const void **)&__p.__r_.__value_.__l.__data_);
      if (v114 == v78)
        v79 = 0;
      else
        v79 = v78[7];
      v80 = v79 != 0;
      *(_BYTE *)(v113 + 217) = v80;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v80 = *(unsigned __int8 *)(v113 + 217);
      }
      if (v80 && (*(_BYTE *)(a2 + 200) || v6 > 0xFFFFFFFB || v6 - 1 <= 0xB))
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385AD0;
        strcpy(__p.__r_.__value_.__l.__data_, "only non-scalar fields in tables may be 'required'");
        goto LABEL_261;
      }
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
      LODWORD(__p.__r_.__value_.__l.__data_) = 7955819;
      v81 = sub_1DF370B40(v51, (const void **)&__p.__r_.__value_.__l.__data_);
      if (v114 == v81)
        v82 = 0;
      else
        v82 = v81[7];
      v83 = v82 != 0;
      *(_BYTE *)(v113 + 218) = v83;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v83 = *(unsigned __int8 *)(v113 + 218);
      }
      if (v83)
      {
        if (*(_BYTE *)(a2 + 203))
        {
          v74 = operator new(0x28uLL);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385BA0;
          v75 = 10105;
          v76 = "only one field may be set as 'key'";
          goto LABEL_188;
        }
        *(_BYTE *)(a2 + 203) = 1;
        if (v6 <= 0xFFFFFFFB && v6 - 1 >= 0xC)
        {
          *(_BYTE *)(v113 + 217) = 1;
          if (v6 != 13)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385BB0;
            strcpy(__p.__r_.__value_.__l.__data_, "'key' field must be string or scalar type");
            goto LABEL_261;
          }
        }
      }
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&__p, "shared");
      v84 = sub_1DF370B40(v112, (const void **)&__p.__r_.__value_.__l.__data_);
      if (v114 == v84)
        v85 = 0;
      else
        v85 = v84[7];
      v86 = v85 != 0;
      *(_BYTE *)(v113 + 219) = v86;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v86 = *(unsigned __int8 *)(v113 + 219);
      }
      if (v86 && *(_DWORD *)(v113 + 152) != 13)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385BC0;
        strcpy(__p.__r_.__value_.__l.__data_, "shared can only be defined on strings");
        goto LABEL_261;
      }
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 19;
      strcpy((char *)&__p, "native_custom_alloc");
      v87 = sub_1DF370B40(v112, (const void **)&__p.__r_.__value_.__l.__data_);
      if (v114 == v87)
        v88 = 0;
      else
        v88 = v87[7];
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v88)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385B40;
        strcpy(__p.__r_.__value_.__l.__data_, "native_custom_alloc can only be used with a table or struct definition");
        goto LABEL_261;
      }
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 13;
      strcpy((char *)&__p, "native_inline");
      v89 = sub_1DF370B40(v112, (const void **)&__p.__r_.__value_.__l.__data_);
      if (v114 == v89)
        v90 = 0;
      else
        v90 = v89[7];
      v93 = v90 != 0;
      *(_BYTE *)(v113 + 220) = v93;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v93 = *(unsigned __int8 *)(v113 + 220);
      }
      if (v93 && (*(_DWORD *)(v113 + 152) != 15 || !*(_BYTE *)(*(_QWORD *)(v113 + 160) + 200)))
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385BD0;
        strcpy(__p.__r_.__value_.__l.__data_, "native_inline can only be defined on structs");
        goto LABEL_261;
      }
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 17;
      strcpy((char *)&__p, "nested_flatbuffer");
      v94 = sub_1DF370B40(v112, (const void **)&__p.__r_.__value_.__l.__data_);
      if (v114 == v94)
        v95 = 0;
      else
        v95 = v94[7];
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v95)
      {
        if (*(_DWORD *)v95 != 13)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385BE0;
          strcpy(__p.__r_.__value_.__l.__data_, "nested_flatbuffer attribute must be a string (the root type)");
          goto LABEL_261;
        }
        if (v6 != 14 || HIDWORD(v121) != 4)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385BF0;
          strcpy(__p.__r_.__value_.__l.__data_, "nested_flatbuffer attribute may only apply to a vector of ubyte");
          goto LABEL_261;
        }
        Struct = flatbuffers::Parser::LookupCreateStruct(a1, (std::string *)(v95 + 32), 1, 0);
        v113 = v118;
        *(_QWORD *)(v118 + 224) = Struct;
      }
      v97 = v113 + 72;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&__p, "flexbuffer");
      v98 = sub_1DF370B40(v113 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
      v99 = (uint64_t *)(v113 + 80);
      if ((uint64_t *)(v113 + 80) == v98)
        v100 = 0;
      else
        v100 = v98[7];
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v100 || (*(_BYTE *)(v113 + 221) = 1, *(_BYTE *)(a1 + 1136) = 1, v121 == 0x40000000ELL))
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
        strcpy((char *)&__p, "apple_internal");
        v101 = sub_1DF370B40(v97, (const void **)&__p.__r_.__value_.__l.__data_);
        v102 = v99 != v101 && v101[7] != 0;
        *(_BYTE *)(v113 + 222) = v102;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v103 = v120;
        if (v120)
        {
          v104 = *(_DWORD *)(v120 + 152);
          if (v104 <= 0xFFFFFFFB && v104 - 1 >= 0xC)
            *(_BYTE *)(v120 + 217) = *(_BYTE *)(v113 + 217);
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 2;
          strcpy((char *)&__p, "id");
          v105 = sub_1DF370B40(v97, (const void **)&__p.__r_.__value_.__l.__data_);
          if (v99 == v105)
            v106 = 0;
          else
            v106 = v105[7];
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v106)
          {
            v107 = (const char *)(v106 + 32);
            if (*(char *)(v106 + 55) < 0)
              v107 = *(const char **)v107;
            atoi(v107);
            v108 = operator new();
            *(_BYTE *)(v108 + 55) = 1;
            *(_WORD *)(v108 + 56) = -1;
            v109 = *(_OWORD *)(v106 + 10);
            *(_OWORD *)v108 = *(_OWORD *)v106;
            *(_OWORD *)(v108 + 10) = v109;
            sub_1DF367FB0((uint64_t)&__p);
            std::ostream::operator<<();
            std::stringbuf::str();
            __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
            v110 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                      + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
            __p.__r_.__value_.__r.__words[2] = v110;
            v130 = MEMORY[0x1E0DE4FB8] + 16;
            if (v132 < 0)
              operator delete(v131);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1E0BFF758](&v133);
            *(std::string *)(v108 + 32) = v119;
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = 2;
            strcpy((char *)&__p, "id");
            sub_1DF382198(v103 + 72, (const void **)&__p.__r_.__value_.__l.__data_, v108);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (*(_BYTE *)(v118 + 222))
          {
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
            strcpy((char *)&__p, "apple_internal");
            v111 = operator new();
            *(_QWORD *)(v111 + 8) = 0;
            *(_QWORD *)(v111 + 16) = 0;
            *(_QWORD *)v111 = 0;
            *(_WORD *)(v111 + 24) = 0;
            *(_BYTE *)(v111 + 55) = 1;
            *(_WORD *)(v111 + 32) = 48;
            *(_WORD *)(v111 + 56) = -1;
            sub_1DF382198(v103 + 72, (const void **)&__p.__r_.__value_.__l.__data_, v111);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            *(_BYTE *)(v120 + 222) = 1;
          }
        }
        flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 59, a3);
        *(_BYTE *)(a3 + 1) = 1;
        if (!*(_BYTE *)a3)
          *(_WORD *)a3 = 0;
        goto LABEL_10;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385C00;
      strcpy(__p.__r_.__value_.__l.__data_, "flexbuffer attribute may only apply to a vector of ubyte");
LABEL_261:
      flatbuffers::Parser::Error(a1, (_WORD *)a3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v73 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_263:
        operator delete(v73);
      }
LABEL_10:
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v125;
      sub_1DF370598((void ***)&__p);
      goto LABEL_11;
    }
    if ((_DWORD)v121 == 17)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385B30;
      strcpy(__p.__r_.__value_.__l.__data_, "fixed-length array in table must be wrapped in struct");
      goto LABEL_261;
    }
    v120 = 0;
    if ((_DWORD)v121 == 16)
    {
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
      else
        v7 = __dst.__r_.__value_.__l.__size_;
      p_p = &__p;
      sub_1DF370AC0((uint64_t)&__p, v7 + 5);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v7)
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v9 = &__dst;
        else
          v9 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        memmove(p_p, v9, v7);
      }
      strcpy((char *)p_p + v7, "_type");
      flatbuffers::Parser::AddField(a1, a2, &__p, v123 + 152, &v120, (_WORD *)a3);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_76:
        *(_BYTE *)(a3 + 1) = 1;
        if (*(_BYTE *)a3)
          goto LABEL_10;
        goto LABEL_40;
      }
      v10 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (v121 != 0x100000000ELL)
        goto LABEL_40;
      v21 = *(_QWORD *)(a1 + 1120);
      if (!v21 || (v21 & 0xFFFFFFFFFFFE7CA4) != 0)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x58uLL);
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385B60;
        strcpy(__p.__r_.__value_.__l.__data_, "Vectors of unions are not yet supported in all the specified programming languages.");
        goto LABEL_261;
      }
      __p.__r_.__value_.__l.__size_ = 0;
      __p.__r_.__value_.__r.__words[2] = v123;
      LOWORD(v130) = 0;
      v22 = *(_DWORD *)(v123 + 152);
      LODWORD(__p.__r_.__value_.__l.__data_) = 14;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v22;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
      else
        v23 = __dst.__r_.__value_.__l.__size_;
      v24 = &v119;
      sub_1DF370AC0((uint64_t)&v119, v23 + 5);
      if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v24 = (std::string *)v119.__r_.__value_.__r.__words[0];
      if (v23)
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &__dst;
        else
          v25 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        memmove(v24, v25, v23);
      }
      strcpy((char *)v24 + v23, "_type");
      flatbuffers::Parser::AddField(a1, a2, &v119, (uint64_t)&__p, &v120, (_WORD *)a3);
      if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_76;
      v10 = (void *)v119.__r_.__value_.__r.__words[0];
    }
    operator delete(v10);
    goto LABEL_76;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385AF0;
  strcpy(__p.__r_.__value_.__l.__data_, "field name can not be the same as table/struct name");
  flatbuffers::Parser::Error(a1, (_WORD *)a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_11:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

BOOL flatbuffers::Parser::SupportsAdvancedArrayFeatures(flatbuffers::Parser *this)
{
  return (*((_QWORD *)this + 140) & 0xFFFFFFFFFFFFFA54) == 0;
}

BOOL flatbuffers::Parser::SupportsAdvancedUnionFeatures(flatbuffers::Parser *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 140);
  return (v1 & 0xFFFFFFFFFFFE7CA4) == 0 && v1 != 0;
}

void flatbuffers::Parser::ParseSingleValue(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v10;
  unsigned int v11;
  char v14;
  int v15;
  unsigned int v16;
  int v17;
  int v19;
  size_t size;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  const void **v31;
  unint64_t v32;
  unint64_t v33;
  const void *v34;
  size_t v35;
  const char *v36;
  char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  size_t v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  uint64_t v47;
  int v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string::size_type v52;
  const char *v53;
  size_t v54;
  std::string::size_type v55;
  void *p_dst;
  int v57;
  char *v58;
  void **v59;
  std::string::size_type v60;
  std::string *v61;
  std::string::size_type v62;
  std::string *v63;
  std::string::size_type v64;
  const std::string::value_type *v65;
  int *v66;
  const std::string::value_type *v67;
  char v68;
  int v69;
  const std::string::value_type *v70;
  std::string::size_type v71;
  std::string::size_type v72;
  std::string *v73;
  std::string::size_type v74;
  void *v75;
  void **v76;
  char *v77;
  std::string::size_type v78;
  std::string *v79;
  std::string::size_type v80;
  size_t v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  std::string *v85;
  std::string::size_type v86;
  std::string *v87;
  std::string::size_type v88;
  std::string *v89;
  std::string::size_type v90;
  std::string *p_p;
  std::string::size_type v92;
  void *v93;
  int *v94;
  char *v95;
  char *v96;
  char *v97;
  std::string *v98;
  std::string::size_type v99;
  std::string *v100;
  std::string::size_type v101;
  std::string *v102;
  std::string::size_type v103;
  char v104;
  int v105;
  const std::string::value_type *v106;
  std::string::size_type v107;
  std::string::size_type v108;
  std::string *v109;
  std::string::size_type v110;
  char *v111;
  float v112;
  char *v113;
  char *v114;
  char *v115;
  std::string::size_type v116;
  std::string::size_type v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  std::string::size_type v127;
  size_t v128;
  std::string *v129;
  std::string::size_type v130;
  std::string *v131;
  std::string::size_type v132;
  std::string *v133;
  std::string::size_type v134;
  std::string *v135;
  std::string::size_type v136;
  std::string *v137;
  std::string::size_type v138;
  char v139;
  BOOL v140;
  const std::string::value_type *v141;
  std::string::size_type v142;
  std::string::size_type v143;
  std::string *v144;
  std::string::size_type v145;
  void *v146[2];
  uint64_t v147;
  std::string v148;
  std::string v149;
  std::string __dst;
  std::string v151;
  std::string v152;
  std::string v153;
  std::string v154;
  std::string __p;
  std::string v156;
  uint64_t v157;
  void *v158;
  char v159;
  uint64_t v160;

  v10 = *(_DWORD *)(a1 + 20);
  if (v10 == 260)
  {
    if (**(_BYTE **)a1 == 40)
    {
      if (*(char *)(a1 + 55) < 0)
        sub_1DF36DA38(&v156, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
      else
        v156 = *(std::string *)(a1 + 32);
      v16 = *a3 + 4;
      v140 = v16 > 0x10;
      v17 = (1 << v16) & 0x18001;
      if (v140 || v17 == 0)
      {
        if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v156.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v156.__r_.__value_.__l.__size_;
        v21 = &v148;
        sub_1DF370AC0((uint64_t)&v148, size + 40);
        if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v21 = (std::string *)v148.__r_.__value_.__r.__words[0];
        if (size)
        {
          if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = &v156;
          else
            v22 = (std::string *)v156.__r_.__value_.__r.__words[0];
          memmove(v21, v22, size);
        }
        strcpy((char *)v21 + size, ": type of argument mismatch, expecting: ");
        v23 = std::string::append(&v148, "double");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v149.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v149.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v149, ", found: ");
        v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        v27 = std::string::append(&__dst, (&off_1EA98EA98)[*a3 + 4]);
        v28 = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v151.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v151.__r_.__value_.__r.__words[2] = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        v29 = std::string::append(&v151, ", name: ");
        v30 = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v152.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v152.__r_.__value_.__r.__words[2] = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        if (a2)
        {
          if (*(char *)(a2 + 23) < 0)
          {
            sub_1DF36DA38(v146, *(void **)a2, *(_QWORD *)(a2 + 8));
          }
          else
          {
            *(_OWORD *)v146 = *(_OWORD *)a2;
            v147 = *(_QWORD *)(a2 + 16);
          }
        }
        else
        {
          HIBYTE(v147) = 0;
          LOBYTE(v146[0]) = 0;
        }
        if (v147 >= 0)
          v59 = v146;
        else
          v59 = (void **)v146[0];
        if (v147 >= 0)
          v60 = HIBYTE(v147) & 0x7F;
        else
          v60 = (std::string::size_type)v146[1];
        v61 = std::string::append(&v152, (const std::string::value_type *)v59, v60);
        v62 = v61->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v153.__r_.__value_.__l.__data_ = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v153.__r_.__value_.__r.__words[2] = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        v63 = std::string::append(&v153, ", value: ");
        v64 = v63->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v154.__r_.__value_.__l.__data_ = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
        v154.__r_.__value_.__r.__words[2] = v64;
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        v67 = (const std::string::value_type *)*((_QWORD *)a3 + 4);
        v66 = a3 + 8;
        v65 = v67;
        v68 = *((_BYTE *)v66 + 23);
        v69 = v68;
        if (v68 >= 0)
          v70 = (const std::string::value_type *)v66;
        else
          v70 = v65;
        v71 = v68 & 0x7F;
        if (v69 >= 0)
          v72 = v71;
        else
          v72 = *((_QWORD *)v66 + 1);
        v73 = std::string::append(&v154, v70, v72);
        v74 = v73->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        flatbuffers::Parser::Error(a1, (_WORD *)a5);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v153.__r_.__value_.__l.__data_);
        if (SHIBYTE(v147) < 0)
          operator delete(v146[0]);
        if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v152.__r_.__value_.__l.__data_);
        if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v151.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v149.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v148.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_213;
        v75 = (void *)v148.__r_.__value_.__r.__words[0];
      }
      else
      {
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a5);
        *(_BYTE *)(a5 + 1) = 1;
        if (*(_BYTE *)a5)
          goto LABEL_213;
        flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 40, a5);
        *(_BYTE *)(a5 + 1) = 1;
        if (*(_BYTE *)a5)
          goto LABEL_213;
        v19 = *(_DWORD *)(a1 + 1204);
        if (v19 < 64)
        {
          *(_DWORD *)(a1 + 1204) = v19 + 1;
          flatbuffers::Parser::ParseSingleValue(a1, a2, a3, 0);
          --*(_DWORD *)(a1 + 1204);
        }
        else
        {
          flatbuffers::Parser::RecurseError((flatbuffers::Parser *)a1, (_WORD *)a5);
        }
        *(_BYTE *)(a5 + 1) = 1;
        if (*(_BYTE *)a5)
          goto LABEL_213;
        flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 41, a5);
        *(_BYTE *)(a5 + 1) = 1;
        if (*(_BYTE *)a5)
          goto LABEL_213;
        v148.__r_.__value_.__r.__words[0] = 0;
        v76 = (void **)(a3 + 8);
        v77 = *((char *)a3 + 55) >= 0 ? (char *)(a3 + 8) : (char *)*((_QWORD *)a3 + 4);
        sub_1DF354544((_WORD *)a5, v77, a1, (double *)&v148);
        *(_BYTE *)(a5 + 1) = 1;
        if (*(_BYTE *)a5)
          goto LABEL_213;
        if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = *((_BYTE *)&v156.__r_.__value_.__s + 23) & 0x7F;
        else
          v78 = v156.__r_.__value_.__l.__size_;
        if (v78 == 3)
        {
          if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v127 = HIBYTE(v156.__r_.__value_.__r.__words[2]);
          else
            v127 = v156.__r_.__value_.__l.__size_;
          if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v79 = &v156;
          else
            v79 = (std::string *)v156.__r_.__value_.__r.__words[0];
          if (v127 >= 3)
            v128 = 3;
          else
            v128 = v127;
          if (!memcmp(v79, "deg", v128) && v127 == 3)
          {
            v82 = *(double *)&v148.__r_.__value_.__l.__data_ / 3.14159265 * 180.0;
            goto LABEL_380;
          }
          if (!memcmp(v79, "rad", v128) && v127 == 3)
          {
            v82 = *(double *)&v148.__r_.__value_.__l.__data_ * 3.14159265 / 180.0;
            goto LABEL_380;
          }
          if (!memcmp(v79, "sin", v128) && v127 == 3)
          {
            v82 = sin(*(long double *)&v148.__r_.__value_.__l.__data_);
            goto LABEL_380;
          }
          if (!memcmp(v79, "cos", v128) && v127 == 3)
          {
            v82 = cos(*(long double *)&v148.__r_.__value_.__l.__data_);
            goto LABEL_380;
          }
          if (!memcmp(v79, "tan", v128) && v127 == 3)
          {
            v82 = tan(*(long double *)&v148.__r_.__value_.__l.__data_);
            goto LABEL_380;
          }
        }
        else if (v78 == 4)
        {
          if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v79 = &v156;
          else
            v79 = (std::string *)v156.__r_.__value_.__r.__words[0];
          if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v80 = HIBYTE(v156.__r_.__value_.__r.__words[2]);
          else
            v80 = v156.__r_.__value_.__l.__size_;
          if (v80 >= 4)
            v81 = 4;
          else
            v81 = v80;
          if (!memcmp(v79, "asin", v81) && v80 == 4)
          {
            v82 = asin(*(long double *)&v148.__r_.__value_.__l.__data_);
LABEL_380:
            sub_1DF362EF8(12, &__p, v82);
            if (*((char *)a3 + 55) < 0)
              operator delete(*v76);
            *(_OWORD *)v76 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *((_QWORD *)a3 + 6) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_WORD *)a5 = 0;
            goto LABEL_213;
          }
          if (!memcmp(v79, "acos", v81) && v80 == 4)
          {
            v82 = acos(*(long double *)&v148.__r_.__value_.__l.__data_);
            goto LABEL_380;
          }
          if (!memcmp(v79, "atan", v81) && v80 == 4)
          {
            v82 = atan(*(long double *)&v148.__r_.__value_.__l.__data_);
            goto LABEL_380;
          }
        }
        else if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        {
          v79 = &v156;
        }
        else
        {
          v79 = (std::string *)v156.__r_.__value_.__r.__words[0];
        }
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1DF385AB0;
        strcpy(__dst.__r_.__value_.__l.__data_, "Unknown conversion function: ");
        v129 = std::string::append(&__dst, (const std::string::value_type *)v79, v78);
        v130 = v129->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v151.__r_.__value_.__l.__data_ = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
        v151.__r_.__value_.__r.__words[2] = v130;
        v129->__r_.__value_.__l.__size_ = 0;
        v129->__r_.__value_.__r.__words[2] = 0;
        v129->__r_.__value_.__r.__words[0] = 0;
        v131 = std::string::append(&v151, ", field name: ");
        v132 = v131->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v152.__r_.__value_.__l.__data_ = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
        v152.__r_.__value_.__r.__words[2] = v132;
        v131->__r_.__value_.__l.__size_ = 0;
        v131->__r_.__value_.__r.__words[2] = 0;
        v131->__r_.__value_.__r.__words[0] = 0;
        if (a2)
        {
          if (*(char *)(a2 + 23) < 0)
            sub_1DF36DA38(&v149, *(void **)a2, *(_QWORD *)(a2 + 8));
          else
            v149 = *(std::string *)a2;
        }
        else
        {
          *((_BYTE *)&v149.__r_.__value_.__s + 23) = 0;
          v149.__r_.__value_.__s.__data_[0] = 0;
        }
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v133 = &v149;
        else
          v133 = (std::string *)v149.__r_.__value_.__r.__words[0];
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v134 = *((_BYTE *)&v149.__r_.__value_.__s + 23) & 0x7F;
        else
          v134 = v149.__r_.__value_.__l.__size_;
        v135 = std::string::append(&v152, (const std::string::value_type *)v133, v134);
        v136 = v135->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v153.__r_.__value_.__l.__data_ = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
        v153.__r_.__value_.__r.__words[2] = v136;
        v135->__r_.__value_.__l.__size_ = 0;
        v135->__r_.__value_.__r.__words[2] = 0;
        v135->__r_.__value_.__r.__words[0] = 0;
        v137 = std::string::append(&v153, ", value: ");
        v138 = v137->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v154.__r_.__value_.__l.__data_ = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
        v154.__r_.__value_.__r.__words[2] = v138;
        v137->__r_.__value_.__l.__size_ = 0;
        v137->__r_.__value_.__r.__words[2] = 0;
        v137->__r_.__value_.__r.__words[0] = 0;
        v139 = *((_BYTE *)a3 + 55);
        v140 = v139 < 0;
        if (v139 >= 0)
          v141 = (const std::string::value_type *)(a3 + 8);
        else
          v141 = (const std::string::value_type *)*((_QWORD *)a3 + 4);
        v142 = v139 & 0x7F;
        if (v140)
          v143 = *((_QWORD *)a3 + 5);
        else
          v143 = v142;
        v144 = std::string::append(&v154, v141, v143);
        v145 = v144->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v145;
        v144->__r_.__value_.__l.__size_ = 0;
        v144->__r_.__value_.__r.__words[2] = 0;
        v144->__r_.__value_.__r.__words[0] = 0;
        flatbuffers::Parser::Error(a1, (_WORD *)a5);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v153.__r_.__value_.__l.__data_);
        if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v149.__r_.__value_.__l.__data_);
        if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v152.__r_.__value_.__l.__data_);
        if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v151.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_213;
        v75 = (void *)__dst.__r_.__value_.__r.__words[0];
      }
      operator delete(v75);
LABEL_213:
      if ((SHIBYTE(v156.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v93 = (void *)v156.__r_.__value_.__r.__words[0];
      goto LABEL_215;
    }
    v149.__r_.__value_.__s.__data_[0] = 0;
    v11 = *a3;
  }
  else
  {
    v149.__r_.__value_.__s.__data_[0] = 0;
    v11 = *a3;
    if (v10 != 257)
    {
      if (v11 + 4 <= 0x10 && ((1 << (v11 + 4)) & 0x18001) != 0)
      {
        flatbuffers::Parser::TryTypedValue(a1, a2, 259, 1, a3, 11, &v149, a5);
        *(_BYTE *)(a5 + 1) = 1;
        if (*(_BYTE *)a5)
          return;
        if (v149.__r_.__value_.__s.__data_[0])
          goto LABEL_26;
      }
      v14 = v11 > 0xFFFFFFFB || v11 - 1 < 0xC;
      flatbuffers::Parser::TryTypedValue(a1, a2, 258, v14, a3, 7, &v149, a5);
      *(_BYTE *)(a5 + 1) = 1;
      if (!*(_BYTE *)a5)
      {
        if (v149.__r_.__value_.__s.__data_[0])
        {
          if (!a4)
          {
LABEL_120:
            *(_WORD *)a5 = 0;
            return;
          }
LABEL_118:
          v57 = *a3;
          if (*a3 > 0xFFFFFFFB || (v57 - 1) <= 0xB)
          {
            switch(v57)
            {
              case -4:
                v94 = a3 + 8;
                if (*((char *)a3 + 55) >= 0)
                  v111 = (char *)(a3 + 8);
                else
                  v111 = (char *)*((_QWORD *)a3 + 4);
                sub_1DF352C64((_WORD *)a5, v111, a1, (flatbuffers::ClassicLocale *)&__p);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                if (*a3 <= 0xFFFFFFFC && (*a3 - 1) > 9)
                  goto LABEL_120;
                v112 = sub_1DF3833E0((__int16)__p.__r_.__value_.__l.__data_);
                sub_1DF367CE4(6, &v156, v112);
                goto LABEL_302;
              case -3:
              case 10:
                __p.__r_.__value_.__r.__words[0] = 0;
                v94 = a3 + 8;
                if (*((char *)a3 + 55) >= 0)
                  v95 = (char *)(a3 + 8);
                else
                  v95 = (char *)*((_QWORD *)a3 + 4);
                sub_1DF34D80C((_WORD *)a5, v95, a1, (unint64_t *)&__p);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                if (*a3 <= 0xFFFFFFFC && (*a3 - 1) > 9)
                  goto LABEL_120;
                sub_1DF356B08();
                goto LABEL_302;
              case -2:
              case 8:
                LODWORD(v156.__r_.__value_.__l.__data_) = 0;
                if (*((char *)a3 + 55) >= 0)
                  v96 = (char *)(a3 + 8);
                else
                  v96 = (char *)*((_QWORD *)a3 + 4);
                sub_1DF34C708((_WORD *)a5, v96, a1, &v156);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                sub_1DF356C48((uint64_t)a3);
                goto LABEL_120;
              case -1:
              case 6:
                LOWORD(__p.__r_.__value_.__l.__data_) = 0;
                v94 = a3 + 8;
                if (*((char *)a3 + 55) >= 0)
                  v97 = (char *)(a3 + 8);
                else
                  v97 = (char *)*((_QWORD *)a3 + 4);
                sub_1DF34D3B4((_WORD *)a5, v97, a1, &__p);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                if (*a3 <= 0xFFFFFFFC && (*a3 - 1) > 9)
                  goto LABEL_120;
                sub_1DF382738();
                goto LABEL_302;
              case 0:
              case 1:
              case 2:
              case 4:
                v156.__r_.__value_.__s.__data_[0] = 0;
                if (*((char *)a3 + 55) >= 0)
                  v58 = (char *)(a3 + 8);
                else
                  v58 = (char *)*((_QWORD *)a3 + 4);
                sub_1DF34CF5C((_WORD *)a5, v58, a1, &v156);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                sub_1DF356D38((uint64_t)a3);
                goto LABEL_120;
              case 3:
                v154.__r_.__value_.__s.__data_[0] = 0;
                v94 = a3 + 8;
                if (*((char *)a3 + 55) >= 0)
                  v113 = (char *)(a3 + 8);
                else
                  v113 = (char *)*((_QWORD *)a3 + 4);
                sub_1DF3532F0((_WORD *)a5, v113, a1, (char *)&v154);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                if (*a3 > 0xFFFFFFFC || (*a3 - 1) <= 9)
                  goto LABEL_290;
                goto LABEL_120;
              case 5:
                LOWORD(__p.__r_.__value_.__l.__data_) = 0;
                v94 = a3 + 8;
                if (*((char *)a3 + 55) >= 0)
                  v114 = (char *)(a3 + 8);
                else
                  v114 = (char *)*((_QWORD *)a3 + 4);
                sub_1DF353758((_WORD *)a5, v114, a1, (__int16 *)&__p);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                if (*a3 <= 0xFFFFFFFC && (*a3 - 1) > 9)
                  goto LABEL_120;
                sub_1DF3826CC();
                goto LABEL_302;
              case 7:
                LODWORD(v154.__r_.__value_.__l.__data_) = 0;
                v94 = a3 + 8;
                if (*((char *)a3 + 55) >= 0)
                  v115 = (char *)(a3 + 8);
                else
                  v115 = (char *)*((_QWORD *)a3 + 4);
                sub_1DF353BC0((_WORD *)a5, v115, a1, (unsigned int *)&v154);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                if (*a3 <= 0xFFFFFFFC && (*a3 - 1) > 9)
                  goto LABEL_120;
LABEL_290:
                sub_1DF367FB0((uint64_t)&v156);
                std::ostream::operator<<();
                std::stringbuf::str();
                v156.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
                v116 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
                *(std::string::size_type *)((char *)v156.__r_.__value_.__r.__words
                                          + *(_QWORD *)(v156.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
                v156.__r_.__value_.__r.__words[2] = v116;
                v157 = MEMORY[0x1E0DE4FB8] + 16;
                if (v159 < 0)
                  operator delete(v158);
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x1E0BFF758](&v160);
                if (*((char *)a3 + 55) < 0)
                  operator delete(*(void **)v94);
                *(_OWORD *)v94 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                v117 = __p.__r_.__value_.__r.__words[2];
                break;
              case 9:
                __p.__r_.__value_.__r.__words[0] = 0;
                v94 = a3 + 8;
                if (*((char *)a3 + 55) >= 0)
                  v118 = (char *)(a3 + 8);
                else
                  v118 = (char *)*((_QWORD *)a3 + 4);
                sub_1DF354028((_WORD *)a5, v118, a1, (uint64_t *)&__p);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                if (*a3 <= 0xFFFFFFFC && (*a3 - 1) > 9)
                  goto LABEL_120;
                sub_1DF345C20();
LABEL_302:
                if (*((char *)a3 + 55) < 0)
                  operator delete(*(void **)v94);
                *(_OWORD *)v94 = *(_OWORD *)&v156.__r_.__value_.__l.__data_;
                v117 = v156.__r_.__value_.__r.__words[2];
                break;
              case 11:
                LODWORD(v156.__r_.__value_.__l.__data_) = 0;
                v121 = (char *)*((_QWORD *)a3 + 4);
                v120 = (char *)(a3 + 8);
                v119 = v121;
                if (v120[23] >= 0)
                  v122 = v120;
                else
                  v122 = v119;
                sub_1DF354348((_WORD *)a5, v122, a1, (float *)&v156);
                *(_BYTE *)(a5 + 1) = 1;
                if (!*(_BYTE *)a5)
                  goto LABEL_120;
                return;
              case 12:
                v156.__r_.__value_.__r.__words[0] = 0;
                v125 = (char *)*((_QWORD *)a3 + 4);
                v124 = (char *)(a3 + 8);
                v123 = v125;
                if (v124[23] >= 0)
                  v126 = v124;
                else
                  v126 = v123;
                sub_1DF354544((_WORD *)a5, v126, a1, (double *)&v156);
                *(_BYTE *)(a5 + 1) = 1;
                if (!*(_BYTE *)a5)
                  goto LABEL_120;
                return;
              default:
                goto LABEL_120;
            }
            *((_QWORD *)v94 + 2) = v117;
          }
          goto LABEL_120;
        }
LABEL_112:
        memset(&v156, 0, sizeof(v156));
        flatbuffers::Parser::TokenToStringId((char *)a1, *(_DWORD *)(a1 + 20), &v151);
        v49 = std::string::insert(&v151, 0, "Cannot assign token starting with '");
        v50 = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v152.__r_.__value_.__l.__data_ = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v152.__r_.__value_.__r.__words[2] = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        v51 = std::string::append(&v152, "' to value of <");
        v52 = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v153.__r_.__value_.__l.__data_ = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v153.__r_.__value_.__r.__words[2] = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        v53 = (&off_1EA98EA98)[(int)v11 + 4];
        v54 = strlen(v53);
        if (v54 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        v55 = v54;
        if (v54 >= 0x17)
        {
          v83 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v54 | 7) != 0x17)
            v83 = v54 | 7;
          v84 = v83 + 1;
          p_dst = operator new(v83 + 1);
          __dst.__r_.__value_.__l.__size_ = v55;
          __dst.__r_.__value_.__r.__words[2] = v84 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v54;
          p_dst = &__dst;
          if (!v54)
            goto LABEL_188;
        }
        memmove(p_dst, v53, v55);
LABEL_188:
        *((_BYTE *)p_dst + v55) = 0;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v85 = &__dst;
        else
          v85 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v86 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
        else
          v86 = __dst.__r_.__value_.__l.__size_;
        v87 = std::string::append(&v153, (const std::string::value_type *)v85, v86);
        v88 = v87->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v154.__r_.__value_.__l.__data_ = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
        v154.__r_.__value_.__r.__words[2] = v88;
        v87->__r_.__value_.__l.__size_ = 0;
        v87->__r_.__value_.__r.__words[2] = 0;
        v87->__r_.__value_.__r.__words[0] = 0;
        v89 = std::string::append(&v154, "> type.");
        v90 = v89->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v90;
        v89->__r_.__value_.__l.__size_ = 0;
        v89->__r_.__value_.__r.__words[2] = 0;
        v89->__r_.__value_.__r.__words[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v92 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          v92 = __p.__r_.__value_.__l.__size_;
        std::string::append(&v156, (const std::string::value_type *)p_p, v92);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v153.__r_.__value_.__l.__data_);
        if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v152.__r_.__value_.__l.__data_);
        if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v151.__r_.__value_.__l.__data_);
        flatbuffers::Parser::Error(a1, (_WORD *)a5);
        goto LABEL_213;
      }
      return;
    }
  }
  v15 = v10;
  if (v11 == 13)
  {
    flatbuffers::Parser::TryTypedValue(a1, a2, 257, 1, a3, 13, &v149, a5);
    *(_BYTE *)(a5 + 1) = 1;
    if (*(_BYTE *)a5)
      return;
    if (v149.__r_.__value_.__s.__data_[0])
      goto LABEL_26;
    v15 = *(_DWORD *)(a1 + 20);
  }
  if (v15 != 257)
    goto LABEL_55;
  if (v11 > 0xFFFFFFFB || v11 - 1 <= 0xB)
  {
    if (!*(_BYTE *)(a1 + 24))
    {
      v151.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x68uLL);
      *(_OWORD *)&v151.__r_.__value_.__r.__words[1] = xmmword_1DF385C10;
      strcpy(v151.__r_.__value_.__l.__data_, "type mismatch or invalid value, an initializer of non-string field must be trivial ASCII string: type: ");
      v43 = std::string::append(&v151, (&off_1EA98EA98)[v11 + 4]);
      v44 = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v152.__r_.__value_.__l.__data_ = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v152.__r_.__value_.__r.__words[2] = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      v45 = std::string::append(&v152, ", name: ");
      v46 = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v153.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v153.__r_.__value_.__r.__words[2] = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      if (a2)
      {
        if (*(char *)(a2 + 23) < 0)
          sub_1DF36DA38(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
        else
          __dst = *(std::string *)a2;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
        __dst.__r_.__value_.__s.__data_[0] = 0;
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v98 = &__dst;
      else
        v98 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v99 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
      else
        v99 = __dst.__r_.__value_.__l.__size_;
      v100 = std::string::append(&v153, (const std::string::value_type *)v98, v99);
      v101 = v100->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v154.__r_.__value_.__l.__data_ = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
      v154.__r_.__value_.__r.__words[2] = v101;
      v100->__r_.__value_.__l.__size_ = 0;
      v100->__r_.__value_.__r.__words[2] = 0;
      v100->__r_.__value_.__r.__words[0] = 0;
      v102 = std::string::append(&v154, ", value: ");
      v103 = v102->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v103;
      v102->__r_.__value_.__l.__size_ = 0;
      v102->__r_.__value_.__r.__words[2] = 0;
      v102->__r_.__value_.__r.__words[0] = 0;
      v104 = *(_BYTE *)(a1 + 55);
      v105 = v104;
      if (v104 >= 0)
        v106 = (const std::string::value_type *)(a1 + 32);
      else
        v106 = *(const std::string::value_type **)(a1 + 32);
      v107 = v104 & 0x7F;
      if (v105 >= 0)
        v108 = v107;
      else
        v108 = *(_QWORD *)(a1 + 40);
      v109 = std::string::append(&__p, v106, v108);
      v110 = v109->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v156.__r_.__value_.__l.__data_ = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
      v156.__r_.__value_.__r.__words[2] = v110;
      v109->__r_.__value_.__l.__size_ = 0;
      v109->__r_.__value_.__r.__words[2] = 0;
      v109->__r_.__value_.__r.__words[0] = 0;
      flatbuffers::Parser::Error(a1, (_WORD *)a5);
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v156.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v152.__r_.__value_.__l.__data_);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
      {
        v93 = (void *)v151.__r_.__value_.__r.__words[0];
LABEL_215:
        operator delete(v93);
        return;
      }
      return;
    }
LABEL_55:
    if (v11 == 2)
    {
      v31 = (const void **)(a1 + 32);
      v32 = *(unsigned __int8 *)(a1 + 55);
      if ((v32 & 0x80u) == 0)
        v33 = v32 & 0x7F;
      else
        v33 = *(_QWORD *)(a1 + 40);
      if (v33 == 5)
      {
        v41 = (const void *)(a1 + 32);
        if ((v32 & 0x80) != 0)
        {
          v41 = *v31;
          v32 = *(_QWORD *)(a1 + 40);
        }
        if (v32 >= 5)
          v42 = 5;
        else
          v42 = v32;
        if (!memcmp(v41, "false", v42) && v32 == 5)
        {
          v36 = "0";
          goto LABEL_91;
        }
      }
      else if (v33 == 4)
      {
        v34 = (const void *)(a1 + 32);
        if ((v32 & 0x80) != 0)
        {
          v34 = *v31;
          v32 = *(_QWORD *)(a1 + 40);
        }
        v35 = v32 >= 4 ? 4 : v32;
        if (!memcmp(v34, "true", v35) && v32 == 4)
        {
          v36 = "1";
LABEL_91:
          MEMORY[0x1E0BFF5B4](a1 + 32, v36);
          flatbuffers::Parser::TryTypedValue(a1, a2, v10, 1, a3, 2, &v149, a5);
          *(_BYTE *)(a5 + 1) = 1;
          if (*(_BYTE *)a5)
            return;
          if (v149.__r_.__value_.__s.__data_[0])
          {
LABEL_26:
            if ((a4 & 1) == 0)
              goto LABEL_120;
            goto LABEL_118;
          }
          v15 = *(_DWORD *)(a1 + 20);
        }
      }
LABEL_75:
      if (v15 == 257 && (v11 > 0xFFFFFFFB || v11 - 1 <= 0xB))
      {
        if (*(char *)(a1 + 55) < 0)
        {
          v40 = *(_QWORD *)(a1 + 32);
          v39 = *(_QWORD *)(a1 + 40);
        }
        else
        {
          v39 = *(unsigned __int8 *)(a1 + 55);
          v40 = a1 + 32;
        }
        v47 = v40 - 1;
        while (v39)
        {
          v48 = *(unsigned __int8 *)(v47 + v39--);
          if (v48 != 32)
          {
            if (v39 != -1)
              std::string::resize((std::string *)(a1 + 32), v39 + 1, 0);
            break;
          }
        }
      }
      if (v11 + 4 <= 0x10 && ((1 << (v11 + 4)) & 0x18001) != 0)
      {
        flatbuffers::Parser::TryTypedValue(a1, a2, v10, 1, a3, 11, &v149, a5);
        *(_BYTE *)(a5 + 1) = 1;
        if (*(_BYTE *)a5)
          return;
        if (v149.__r_.__value_.__s.__data_[0])
          goto LABEL_118;
      }
      if (v11 > 0xFFFFFFFC || v11 - 1 <= 9)
      {
        flatbuffers::Parser::TryTypedValue(a1, a2, v10, 1, a3, 7, &v149, a5);
        *(_BYTE *)(a5 + 1) = 1;
        if (*(_BYTE *)a5)
          return;
        if (v149.__r_.__value_.__s.__data_[0])
          goto LABEL_118;
      }
      flatbuffers::Parser::TryTypedValue(a1, a2, 257, v11 == 13, a3, 13, &v149, a5);
      *(_BYTE *)(a5 + 1) = 1;
      if (*(_BYTE *)a5)
        return;
      if (v149.__r_.__value_.__s.__data_[0])
        goto LABEL_118;
      goto LABEL_112;
    }
  }
  if (v11 <= 0xFFFFFFFC && v11 - 11 < 0xFFFFFFF6)
    goto LABEL_75;
  v37 = (char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v37 = *(char **)v37;
  v38 = *v37;
  if (v38 != 95 && (v38 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_75;
  flatbuffers::Parser::ParseEnumFromString(a1, (uint64_t)a3, (uint64_t)(a3 + 8), (_WORD *)a5);
  *(_BYTE *)(a5 + 1) = 1;
  if (!*(_BYTE *)a5)
  {
    flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a5);
    *(_BYTE *)(a5 + 1) = 1;
    if (!*(_BYTE *)a5)
    {
      v149.__r_.__value_.__s.__data_[0] = 1;
      goto LABEL_26;
    }
  }
}

void flatbuffers::Parser::ParseMetaData(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X8>)
{
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  void *__p;
  char v11;
  void *__dst[2];
  uint64_t v13;

  if (*(_DWORD *)(a1 + 20) != 40)
  {
LABEL_29:
    *(_WORD *)a3 = 0;
    return;
  }
  flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a3);
  a3[1] = 1;
  if (*a3)
    return;
  do
  {
    while (1)
    {
      if (*(char *)(a1 + 55) < 0)
      {
        sub_1DF36DA38(__dst, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(a1 + 32);
        v13 = *(_QWORD *)(a1 + 48);
      }
      if (((v6 = *(_DWORD *)(a1 + 20), v6 == 257) || v6 == 260) && a1 + 712 != sub_1DF383318(a1 + 704, __dst))
      {
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a3);
        v7 = 1;
        a3[1] = 1;
        if (*a3)
          goto LABEL_11;
        v8 = operator new();
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)v8 = 0;
        *(_WORD *)(v8 + 24) = 0;
        *(_BYTE *)(v8 + 55) = 1;
        *(_WORD *)(v8 + 32) = 48;
        *(_WORD *)(v8 + 56) = -1;
        sub_1DF382198(a2, (const void **)__dst, v8);
        v9 = *(_DWORD *)(a1 + 20);
        if (v9 != 58)
          goto LABEL_22;
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a3);
        a3[1] = 1;
        if (!*a3)
        {
          flatbuffers::Parser::ParseSingleValue(a1, (uint64_t)__dst, (int *)v8, 1, (uint64_t)a3);
          a3[1] = 1;
          if (!*a3)
          {
            v9 = *(_DWORD *)(a1 + 20);
LABEL_22:
            if (v9 == 41)
            {
              flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a3);
              a3[1] = 1;
              if (*a3)
                v7 = *a3;
              else
                v7 = 2;
            }
            else
            {
              flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 44, (uint64_t)a3);
              a3[1] = 1;
              v7 = *a3;
            }
          }
        }
      }
      else
      {
        std::operator+<char>();
        flatbuffers::Parser::Error(a1, a3);
        if (v11 < 0)
          operator delete(__p);
        v7 = 1;
      }
LABEL_11:
      if (SHIBYTE(v13) < 0)
        break;
      if (v7)
        goto LABEL_28;
    }
    operator delete(__dst[0]);
  }
  while (!v7);
LABEL_28:
  if (v7 != 1)
    goto LABEL_29;
}

void flatbuffers::Parser::ParseString(flatbuffers::Parser *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  size_t v7;
  uint64_t v8;
  void **v9;
  __int128 v10;
  uint64_t v11;
  void *__dst[2];
  uint64_t v13;
  _QWORD v14[13];
  char v15;
  uint64_t v16;

  if (*((char *)this + 55) < 0)
  {
    sub_1DF36DA38(__dst, *((void **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)__dst = *((_OWORD *)this + 2);
    v13 = *((_QWORD *)this + 6);
  }
  flatbuffers::Parser::Expect(this, 257, a3);
  *(_BYTE *)(a3 + 1) = 1;
  if (!*(_BYTE *)a3)
  {
    if (v13 >= 0)
      v6 = __dst;
    else
      v6 = (void **)__dst[0];
    if (v13 >= 0)
      v7 = HIBYTE(v13) & 0x7F;
    else
      v7 = (size_t)__dst[1];
    sub_1DF366A24((uint64_t)this + 336, v6, v7);
    sub_1DF367FB0((uint64_t)v14);
    std::ostream::operator<<();
    std::stringbuf::str();
    v14[0] = *MEMORY[0x1E0DE4F50];
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v14[2] = v8;
    v14[3] = MEMORY[0x1E0DE4FB8] + 16;
    if (v15 < 0)
      operator delete((void *)v14[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1E0BFF758](&v16);
    v9 = (void **)(a2 + 32);
    if (*(char *)(a2 + 55) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = v10;
    *(_QWORD *)(a2 + 48) = v11;
    *(_WORD *)a3 = 0;
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void flatbuffers::Parser::ParseComma(flatbuffers::Parser *this@<X0>, uint64_t a2@<X8>)
{
  if (*((_BYTE *)this + 954) || (flatbuffers::Parser::Expect(this, 44, a2), *(_BYTE *)(a2 + 1) = 1, !*(_BYTE *)a2))
    *(_WORD *)a2 = 0;
}

void flatbuffers::Parser::ParseAnyValue(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t *v13;
  int v14;
  _BOOL4 v16;
  __int16 v17;
  uint64_t v18;
  void **v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v30;
  char v31;
  std::string::size_type size;
  std::string::size_type v33;
  std::string::size_type v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  std::string *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *i;
  uint64_t v45;
  int v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  int v51;
  size_t v52;
  size_t v53;
  void **v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  std::string *v58;
  std::string *v59;
  std::string *v60;
  _OWORD *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void **v67;
  void **v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  std::string v74;
  __int16 v75;
  void *__s1[2];
  uint64_t v77;
  void *v78[2];
  char v79;
  std::string v80;
  _BYTE v81[32];
  std::string v82;
  std::string *v83;
  std::string *v84;
  uint64_t v85;
  void *__p;
  char v87;
  _BYTE v88[176];

  switch(*(_DWORD *)a2)
  {
    case 7:
    case 8:
    case 9:
    case 0xA:
      if (!a3)
        goto LABEL_42;
      v81[23] = 4;
      strcpy(v81, "hash");
      v13 = sub_1DF370B40(a3 + 72, (const void **)v81);
      if ((uint64_t *)(a3 + 80) == v13 || !v13[7])
      {
        v16 = 0;
      }
      else
      {
        v14 = *(_DWORD *)(a1 + 20);
        v16 = v14 == 260 || v14 == 257;
      }
      if ((v81[23] & 0x80000000) == 0)
      {
        if (!v16)
          goto LABEL_42;
        goto LABEL_14;
      }
      operator delete(*(void **)v81);
      if (v16)
      {
LABEL_14:
        flatbuffers::Parser::ParseHash((char *)a1, a2, a3, a8);
        goto LABEL_43;
      }
LABEL_42:
      flatbuffers::Parser::ParseSingleValue(a1, a3, (int *)a2, 0, a8);
LABEL_43:
      *(_BYTE *)(a8 + 1) = 1;
      if (!*(_BYTE *)a8)
        goto LABEL_44;
      return;
    case 0xD:
      flatbuffers::Parser::ParseString((flatbuffers::Parser *)a1, a2, a8);
      goto LABEL_43;
    case 0xE:
      LODWORD(v80.__r_.__value_.__l.__data_) = 0;
      v17 = *(_WORD *)(a2 + 24);
      *(_QWORD *)v81 = *(unsigned int *)(a2 + 4);
      *(_OWORD *)&v81[8] = *(_OWORD *)(a2 + 8);
      *(_WORD *)&v81[24] = v17;
      flatbuffers::Parser::ParseVector((flatbuffers::Parser *)a1, (uint64_t)v81, &v80, a3, a4, a8);
      *(_BYTE *)(a8 + 1) = 1;
      if (*(_BYTE *)a8)
        return;
      sub_1DF367FB0((uint64_t)v81);
      std::ostream::operator<<();
      std::stringbuf::str();
      *(_QWORD *)v81 = *MEMORY[0x1E0DE4F50];
      v18 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(_QWORD *)&v81[*(_QWORD *)(*(_QWORD *)v81 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      *(_QWORD *)&v81[16] = v18;
      *(_QWORD *)&v81[24] = MEMORY[0x1E0DE4FB8] + 16;
      if (v87 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1E0BFF758](v88);
      v19 = (void **)(a2 + 32);
      if (*(char *)(a2 + 55) < 0)
        operator delete(*v19);
      *(_OWORD *)v19 = v72;
      *(_QWORD *)(a2 + 48) = v73;
      goto LABEL_44;
    case 0xF:
      flatbuffers::Parser::ParseTable(a1, *(_QWORD *)(a2 + 8), a2 + 32, 0, a8);
      goto LABEL_43;
    case 0x10:
      v20 = a7;
      memset(&v80, 0, sizeof(v80));
      v21 = a6;
      v22 = -72 * a4;
      if (!(-72 * a4))
        goto LABEL_46;
      v23 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)(a1 + 1184) - 72 * a6 - 40;
      while (2)
      {
        v25 = *(_QWORD *)(v24 + 32);
        if (*(_QWORD *)(v25 + 168) != v23)
          goto LABEL_38;
        v26 = *(_DWORD *)(v25 + 152);
        if (!a7)
        {
          if ((v26 + 3) <= 4 && v26 != 0)
          {
            std::string::operator=(&v80, (const std::string *)v24);
LABEL_46:
            v30 = 0;
            goto LABEL_47;
          }
          goto LABEL_38;
        }
        if (v26 != 14 || ((v27 = *(_DWORD *)(v25 + 156) + 3, v27 <= 4) ? (v28 = v27 == 3) : (v28 = 1), v28))
        {
LABEL_38:
          v24 -= 72;
          v22 += 72;
          if (!v22)
            goto LABEL_46;
          continue;
        }
        break;
      }
      *(_DWORD *)v81 = 0;
      if (*(char *)(v24 + 23) < 0)
        v24 = *(_QWORD *)v24;
      sub_1DF34C708((_WORD *)a8, (char *)v24, a1, v81);
      *(_BYTE *)(a8 + 1) = 1;
      if (*(_BYTE *)a8)
        goto LABEL_81;
      v30 = *(_QWORD *)(a1 + 384)
          + *(_DWORD *)(a1 + 368)
          - *(_QWORD *)(a1 + 384)
          + *(_DWORD *)(a1 + 376)
          - *(unsigned int *)v81;
LABEL_47:
      v31 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      size = v80.__r_.__value_.__l.__size_;
      v33 = *((_BYTE *)&v80.__r_.__value_.__s + 23) & 0x7F;
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = *((_BYTE *)&v80.__r_.__value_.__s + 23) & 0x7F;
      else
        v34 = v80.__r_.__value_.__l.__size_;
      if (!v34 && (v20 & 1) == 0)
      {
        v50 = *(_BYTE *)(a3 + 23);
        v51 = v50;
        v52 = v50 & 0x7F;
        if (v51 >= 0)
          v53 = v52;
        else
          v53 = *(_QWORD *)(a3 + 8);
        v54 = v78;
        sub_1DF370AC0((uint64_t)v78, v53 + 5);
        if (v79 < 0)
          v54 = (void **)v78[0];
        if (v53)
        {
          if (*(char *)(a3 + 23) >= 0)
            v55 = (const void *)a3;
          else
            v55 = *(const void **)a3;
          memmove(v54, v55, v53);
        }
        strcpy((char *)v54 + v53, "_type");
        v56 = sub_1DF383318(a5 + 152, v78);
        if (a5 + 160 == v56)
          v57 = 0;
        else
          v57 = *(_QWORD *)(v56 + 56);
        *(_OWORD *)v81 = *(_OWORD *)a1;
        *(_OWORD *)&v81[9] = *(_OWORD *)(a1 + 9);
        v61 = (_OWORD *)(a1 + 32);
        v71 = v57;
        if (*(char *)(a1 + 55) < 0)
        {
          sub_1DF36DA38(&v82, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
        }
        else
        {
          *(_OWORD *)&v82.__r_.__value_.__l.__data_ = *v61;
          v82.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 48);
        }
        v62 = *(_QWORD *)(a1 + 56);
        v83 = 0;
        v84 = 0;
        v85 = 0;
        sub_1DF370610(&v83, v62, *(_QWORD *)(a1 + 64), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 64) - v62) >> 3));
        flatbuffers::Parser::SkipAnyJsonValue((flatbuffers::Parser *)a1, a8);
        v63 = 1;
        *(_BYTE *)(a8 + 1) = 1;
        if (*(_BYTE *)a8)
          goto LABEL_155;
        if (!*(_BYTE *)(a1 + 954))
        {
          flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 44, a8);
          *(_BYTE *)(a8 + 1) = 1;
          if (*(_BYTE *)a8)
            goto LABEL_155;
        }
        *(_WORD *)a8 = 256;
        if (*(char *)(a1 + 55) < 0)
        {
          sub_1DF36DA38(__s1, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
        }
        else
        {
          *(_OWORD *)__s1 = *v61;
          v77 = *(_QWORD *)(a1 + 48);
        }
        if (*(_DWORD *)(a1 + 20) == 257)
          flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a8);
        else
          flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 260, a8);
        *(_BYTE *)(a8 + 1) = 1;
        if (*(_BYTE *)a8)
          goto LABEL_153;
        v64 = HIBYTE(v77) & 0x7F;
        if (v77 >= 0)
          v65 = (void *)(HIBYTE(v77) & 0x7F);
        else
          v65 = __s1[1];
        v66 = (void *)(v79 & 0x7F);
        if (v79 < 0)
          v66 = v78[1];
        if (v65 == v66)
        {
          if (v79 >= 0)
            v67 = v78;
          else
            v67 = (void **)v78[0];
          if ((v77 & 0x8000000000000000) == 0)
          {
            if ((v77 & 0x7F00000000000000) != 0)
            {
              v68 = __s1;
              while (*(unsigned __int8 *)v68 == *(unsigned __int8 *)v67)
              {
                v68 = (void **)((char *)v68 + 1);
                v67 = (void **)((char *)v67 + 1);
                if (!--v64)
                  goto LABEL_161;
              }
              goto LABEL_152;
            }
            goto LABEL_161;
          }
          if (!memcmp(__s1[0], v67, (size_t)__s1[1]))
          {
LABEL_161:
            flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 58, a8);
            v63 = 1;
            *(_BYTE *)(a8 + 1) = 1;
            if (!*(_BYTE *)a8)
            {
              v69 = *(_OWORD *)(v71 + 168);
              v72 = *(_OWORD *)(v71 + 152);
              v73 = v69;
              if (*(char *)(v71 + 207) < 0)
                sub_1DF36DA38(&v74, *(void **)(v71 + 184), *(_QWORD *)(v71 + 192));
              else
                v74 = *(std::string *)(v71 + 184);
              v75 = *(_WORD *)(v71 + 208);
              flatbuffers::Parser::ParseAnyValue(a1, &v72, v71, 0, 0, 0, 0);
              *(_BYTE *)(a8 + 1) = 1;
              if (*(_BYTE *)a8)
              {
                if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v74.__r_.__value_.__l.__data_);
                v63 = 1;
                goto LABEL_153;
              }
              std::string::operator=(&v80, &v74);
              *(_OWORD *)a1 = *(_OWORD *)v81;
              *(_OWORD *)(a1 + 9) = *(_OWORD *)&v81[9];
              std::string::operator=((std::string *)(a1 + 32), &v82);
              if (v81 != (_BYTE *)a1)
                sub_1DF370C24(a1 + 56, v83, v84, 0xAAAAAAAAAAAAAAABLL * (((char *)v84 - (char *)v83) >> 3));
              if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v74.__r_.__value_.__l.__data_);
              goto LABEL_152;
            }
LABEL_153:
            if (SHIBYTE(v77) < 0)
              operator delete(__s1[0]);
LABEL_155:
            *(_QWORD *)&v72 = &v83;
            sub_1DF370598((void ***)&v72);
            if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v82.__r_.__value_.__l.__data_);
            if (v79 < 0)
              operator delete(v78[0]);
            if (v63)
              goto LABEL_81;
            v31 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
            size = v80.__r_.__value_.__l.__size_;
            v33 = *((_BYTE *)&v80.__r_.__value_.__s + 23) & 0x7F;
            goto LABEL_52;
          }
        }
LABEL_152:
        v63 = 0;
        goto LABEL_153;
      }
LABEL_52:
      if (v31 >= 0)
        size = v33;
      if (size)
        v35 = 0;
      else
        v35 = v30 == 0;
      if (!v35)
      {
        v36 = *(_DWORD *)(*(_QWORD *)(a3 + 168) + 152);
        if (v30)
        {
          switch(v36)
          {
            case -3:
              v37 = *(_QWORD *)(v30 + 8 * v21 + 4);
              goto LABEL_75;
            case -2:
              v37 = *(unsigned int *)(v30 + 4 * v21 + 4);
              goto LABEL_75;
            case -1:
              v37 = *(unsigned __int16 *)(v30 + 2 * v21 + 4);
              goto LABEL_75;
            case 1:
              v37 = *(unsigned __int8 *)(v30 + v21 + 4);
              goto LABEL_75;
            default:
              goto LABEL_178;
          }
        }
        switch(v36)
        {
          case -3:
            *(_QWORD *)v81 = 0;
            if (v31 >= 0)
              v38 = &v80;
            else
              v38 = (std::string *)v80.__r_.__value_.__r.__words[0];
            sub_1DF34D80C((_WORD *)a8, (char *)v38, a1, (unint64_t *)v81);
            v39 = 1;
            *(_BYTE *)(a8 + 1) = 1;
            if (*(_BYTE *)a8)
              goto LABEL_82;
            v37 = *(_QWORD *)v81;
            break;
          case -2:
            *(_DWORD *)v81 = 0;
            if (v31 >= 0)
              v58 = &v80;
            else
              v58 = (std::string *)v80.__r_.__value_.__r.__words[0];
            sub_1DF34C708((_WORD *)a8, (char *)v58, a1, v81);
            v39 = 1;
            *(_BYTE *)(a8 + 1) = 1;
            if (*(_BYTE *)a8)
              goto LABEL_82;
            v37 = *(unsigned int *)v81;
            break;
          case -1:
            *(_WORD *)v81 = 0;
            if (v31 >= 0)
              v59 = &v80;
            else
              v59 = (std::string *)v80.__r_.__value_.__r.__words[0];
            sub_1DF34D3B4((_WORD *)a8, (char *)v59, a1, v81);
            v39 = 1;
            *(_BYTE *)(a8 + 1) = 1;
            if (*(_BYTE *)a8)
              goto LABEL_82;
            v37 = *(unsigned __int16 *)v81;
            break;
          case 1:
            v81[0] = 0;
            if (v31 >= 0)
              v60 = &v80;
            else
              v60 = (std::string *)v80.__r_.__value_.__r.__words[0];
            sub_1DF34CF5C((_WORD *)a8, (char *)v60, a1, v81);
            v39 = 1;
            *(_BYTE *)(a8 + 1) = 1;
            if (*(_BYTE *)a8)
              goto LABEL_82;
            v37 = v81[0];
            break;
          default:
LABEL_178:
            abort();
        }
LABEL_75:
        v40 = *(_QWORD *)(a2 + 16);
        v41 = *(unsigned __int8 *)(v40 + 148);
        v43 = *(_QWORD *)(v40 + 208);
        v42 = *(uint64_t **)(v40 + 216);
        for (i = (uint64_t *)(v43 + 8 * v41); i != v42; ++i)
        {
          v45 = *i;
          if (*(_QWORD *)(*i + 136) == v37)
          {
            v46 = *(_DWORD *)(v45 + 48);
            if (v46 == 13)
            {
              flatbuffers::Parser::ParseString((flatbuffers::Parser *)a1, a2, a8);
              *(_BYTE *)(a8 + 1) = 1;
              if (*(_BYTE *)a8)
                v39 = 1;
              else
                v39 = 2;
            }
            else
            {
              if (v46 == 15)
              {
                v47 = (void **)(a2 + 32);
                flatbuffers::Parser::ParseTable(a1, *(_QWORD *)(v45 + 56), a2 + 32, 0, a8);
                v39 = 1;
                *(_BYTE *)(a8 + 1) = 1;
                if (*(_BYTE *)a8)
                  goto LABEL_82;
                v49 = *(_QWORD *)(v45 + 56);
                if (*(_BYTE *)(v49 + 200))
                {
                  flatbuffers::Parser::SerializeStruct(v48, a1 + 336, v49, a2);
                  *(_QWORD *)(a1 + 392) -= 8 * *(unsigned int *)(a1 + 400);
                  *(_DWORD *)(a1 + 400) = 0;
                  *(_WORD *)(a1 + 404) = 0;
                  sub_1DF367FB0((uint64_t)v81);
                  std::ostream::operator<<();
                  std::stringbuf::str();
                  *(_QWORD *)v81 = *MEMORY[0x1E0DE4F50];
                  v70 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
                  *(_QWORD *)&v81[*(_QWORD *)(*(_QWORD *)v81 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
                  *(_QWORD *)&v81[16] = v70;
                  *(_QWORD *)&v81[24] = MEMORY[0x1E0DE4FB8] + 16;
                  if (v87 < 0)
                    operator delete(__p);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x1E0BFF758](v88);
                  if (*(char *)(a2 + 55) < 0)
                    operator delete(*v47);
                  *(_OWORD *)v47 = v72;
                  *(_QWORD *)(a2 + 48) = v73;
                }
              }
              v39 = 2;
            }
            goto LABEL_82;
          }
        }
      }
      std::operator+<char>();
      flatbuffers::Parser::Error(a1, (_WORD *)a8);
      if ((v81[23] & 0x80000000) != 0)
        operator delete(*(void **)v81);
LABEL_81:
      v39 = 1;
LABEL_82:
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      if (v39 != 1)
LABEL_44:
        *(_WORD *)a8 = 0;
      return;
    case 0x11:
      flatbuffers::Parser::ParseArray((flatbuffers::Parser *)a1, a2, a8);
      goto LABEL_43;
    default:
      goto LABEL_42;
  }
}

void sub_1DF34C708(_WORD *a1, char *a2, uint64_t a3, _DWORD *a4)
{
  char *v8;
  char v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  unsigned __int8 v13;
  _xlocale *v14;
  const char *v15;
  int v16;
  unsigned __int8 v17;
  unint64_t v18;
  size_t v19;
  std::string::size_type v20;
  _BYTE *v21;
  size_t v22;
  std::string::size_type v23;
  std::string *p_dst;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *p_p;
  std::string::size_type size;
  std::string *v42;
  std::string::size_type v43;
  std::string __p;
  std::string v45;
  std::string v46;
  std::string __dst;
  std::string v48;
  char *v49[2];
  std::string::size_type v50;

  v8 = a2;
  do
  {
    v10 = *v8++;
    v9 = v10;
    v11 = v10 - 48;
    if (v10)
      v12 = v11 > 9;
    else
      v12 = 0;
  }
  while (v12);
  if (v9 == 48 && (*v8 & 0xDF) == 0x58)
  {
    v49[0] = a2;
    v13 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v14 = (_xlocale *)qword_1F04755E8;
    v15 = a2;
    v16 = 16;
  }
  else
  {
    v49[0] = a2;
    v17 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v14 = (_xlocale *)qword_1F04755E8;
    v15 = a2;
    v16 = 10;
  }
  v18 = strtoll_l(v15, v49, v16, v14);
  if (v49[0] != a2 && !*v49[0])
  {
    if (!HIDWORD(v18))
    {
      *a4 = v18;
      *a1 = 0;
      return;
    }
    *a4 = -1;
    v19 = strlen(a2);
    if (v19 <= 0x7FFFFFFFFFFFFFF7)
    {
      v20 = v19;
      if (v19 >= 0x17)
      {
        v32 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17)
          v32 = v19 | 7;
        v33 = v32 + 1;
        v21 = operator new(v32 + 1);
        v45.__r_.__value_.__l.__size_ = v20;
        v45.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      }
      else
      {
        *((_BYTE *)&v45.__r_.__value_.__s + 23) = v19;
        v21 = &v45;
        if (!v19)
        {
LABEL_38:
          v21[v20] = 0;
          v34 = std::string::insert(&v45, 0, "invalid number: \"");
          v35 = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v46.__r_.__value_.__r.__words[2] = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          v36 = std::string::append(&v46, "\"");
          v37 = v36->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v37;
          v36->__r_.__value_.__l.__size_ = 0;
          v36->__r_.__value_.__r.__words[2] = 0;
          v36->__r_.__value_.__r.__words[0] = 0;
          v38 = std::string::append(&__dst, ", constant does not fit ");
          v39 = v38->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
          v48.__r_.__value_.__r.__words[2] = v39;
          v38->__r_.__value_.__l.__size_ = 0;
          v38->__r_.__value_.__r.__words[2] = 0;
          v38->__r_.__value_.__r.__words[0] = 0;
          sub_1DF368268(&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            size = __p.__r_.__value_.__l.__size_;
          v42 = std::string::append(&v48, (const std::string::value_type *)p_p, size);
          v43 = v42->__r_.__value_.__r.__words[2];
          *(_OWORD *)v49 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
          v50 = v43;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          flatbuffers::Parser::Error(a3, a1);
          if (SHIBYTE(v50) < 0)
            operator delete(v49[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v48.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v46.__r_.__value_.__l.__data_);
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          {
            v31 = (void *)v45.__r_.__value_.__r.__words[0];
            goto LABEL_56;
          }
          return;
        }
      }
      memcpy(v21, a2, v20);
      goto LABEL_38;
    }
LABEL_58:
    abort();
  }
  *a4 = 0;
  v22 = strlen(a2);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_58;
  v23 = v22;
  if (v22 >= 0x17)
  {
    v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v25 = v22 | 7;
    v26 = v25 + 1;
    p_dst = (std::string *)operator new(v25 + 1);
    __dst.__r_.__value_.__l.__size_ = v23;
    __dst.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_27;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v22;
  p_dst = &__dst;
  if (v22)
LABEL_27:
    memcpy(p_dst, a2, v23);
  p_dst->__r_.__value_.__s.__data_[v23] = 0;
  v27 = std::string::insert(&__dst, 0, "invalid number: \"");
  v28 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&v48, "\"");
  v30 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)v49 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v50 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error(a3, a1);
  if (SHIBYTE(v50) < 0)
    operator delete(v49[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    v31 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_56:
    operator delete(v31);
  }
}

void flatbuffers::Parser::SkipAnyJsonValue(flatbuffers::Parser *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  int v8;
  int v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  size_t v16;
  int i;
  BOOL v18;
  int v19;
  size_t v20;
  size_t v21;
  std::string v22;

  v4 = *((_DWORD *)this + 5);
  if (v4 > 256)
  {
    if ((v4 - 257) < 3)
      goto LABEL_3;
    if (v4 == 260)
    {
      v10 = (char *)this + 32;
      v11 = *((unsigned __int8 *)this + 55);
      v12 = *((_QWORD *)this + 5);
      if ((v11 & 0x80u) == 0)
        v13 = v11 & 0x7F;
      else
        v13 = *((_QWORD *)this + 5);
      if (v13 == 5)
      {
        if ((v11 & 0x80) != 0)
          v10 = *(char **)v10;
        else
          v12 = *((unsigned __int8 *)this + 55);
        if (v12 >= 5)
          v20 = 5;
        else
          v20 = v12;
        if (!memcmp(v10, "false", v20) && v12 == 5)
          goto LABEL_3;
      }
      else if (v13 == 4)
      {
        v14 = *((unsigned __int8 *)this + 55);
        v15 = (char *)this + 32;
        if ((v11 & 0x80) != 0)
        {
          v15 = *(char **)v10;
          v14 = *((_QWORD *)this + 5);
        }
        v16 = v14 >= 4 ? 4 : v14;
        if (!memcmp(v15, "true", v16) && v14 == 4)
          goto LABEL_3;
        if ((v11 & 0x80) != 0)
          v10 = *(char **)v10;
        else
          v12 = v11;
        v21 = v12 >= 4 ? 4 : v12;
        if (!memcmp(v10, "null", v21) && v12 == 4)
          goto LABEL_3;
      }
    }
LABEL_89:
    flatbuffers::Parser::TokenError(this, (_WORD *)a2);
    return;
  }
  if (v4 != 91)
  {
    if (v4 != 123)
      goto LABEL_89;
    flatbuffers::Parser::Expect(this, 123, a2);
    *(_BYTE *)(a2 + 1) = 1;
    if (*(_BYTE *)a2)
      return;
    v5 = 0;
    while (1)
    {
      if (*((_BYTE *)this + 729))
        v6 = v5 == 0;
      else
        v6 = 1;
      if (v6 && *((_DWORD *)this + 5) == 125)
        goto LABEL_3;
      memset(&v22, 0, sizeof(v22));
      std::string::operator=(&v22, (const std::string *)((char *)this + 32));
      if (*((_DWORD *)this + 5) == 257)
      {
        flatbuffers::Parser::Next(this, a2);
      }
      else
      {
        if (*((_BYTE *)this + 729))
          v7 = 257;
        else
          v7 = 260;
        flatbuffers::Parser::Expect(this, v7, a2);
      }
      v8 = 1;
      *(_BYTE *)(a2 + 1) = 1;
      if (!*(_BYTE *)a2)
      {
        if (*((_BYTE *)this + 954) && (*((_DWORD *)this + 5) | 0x20) == 0x7B
          || (flatbuffers::Parser::Expect(this, 58, a2), *(_BYTE *)(a2 + 1) = 1, !*(_BYTE *)a2))
        {
          v9 = *((_DWORD *)this + 301);
          if (v9 < 64)
          {
            *((_DWORD *)this + 301) = v9 + 1;
            flatbuffers::Parser::SkipAnyJsonValue(this);
            --*((_DWORD *)this + 301);
          }
          else
          {
            flatbuffers::Parser::RecurseError(this, (_WORD *)a2);
          }
          if (!*(_BYTE *)a2)
          {
            ++v5;
            *(_WORD *)a2 = 256;
            if (*((_DWORD *)this + 5) == 125)
            {
              v8 = 2;
              goto LABEL_30;
            }
            if (*((_BYTE *)this + 954) || (flatbuffers::Parser::Expect(this, 44, a2), !*(_BYTE *)a2))
            {
              v8 = 0;
              *(_BYTE *)a2 = 0;
            }
          }
          *(_BYTE *)(a2 + 1) = 1;
        }
      }
LABEL_30:
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v22.__r_.__value_.__l.__data_);
        if (v8)
        {
LABEL_74:
          if (v8 == 2)
            goto LABEL_3;
          return;
        }
      }
      else if (v8)
      {
        goto LABEL_74;
      }
    }
  }
  flatbuffers::Parser::Expect(this, 91, a2);
  *(_BYTE *)(a2 + 1) = 1;
  if (*(_BYTE *)a2)
    return;
  for (i = 0; ; --i)
  {
    v18 = !*((_BYTE *)this + 729) || i == 0;
    if (v18 && *((_DWORD *)this + 5) == 93)
      break;
    v19 = *((_DWORD *)this + 301);
    if (v19 < 64)
    {
      *((_DWORD *)this + 301) = v19 + 1;
      flatbuffers::Parser::SkipAnyJsonValue(this);
      --*((_DWORD *)this + 301);
    }
    else
    {
      flatbuffers::Parser::RecurseError(this, (_WORD *)a2);
    }
    *(_BYTE *)(a2 + 1) = 1;
    if (*(_BYTE *)a2)
      return;
    if (*((_DWORD *)this + 5) == 93)
      break;
    if (!*((_BYTE *)this + 954))
    {
      flatbuffers::Parser::Expect(this, 44, a2);
      *(_BYTE *)(a2 + 1) = 1;
      if (*(_BYTE *)a2)
        return;
    }
    *(_WORD *)a2 = 256;
  }
LABEL_3:
  flatbuffers::Parser::Next(this, a2);
  *(_BYTE *)(a2 + 1) = 1;
  if (!*(_BYTE *)a2)
    *(_WORD *)a2 = 0;
}

void sub_1DF34CF5C(_WORD *a1, char *a2, uint64_t a3, _BYTE *a4)
{
  char *v8;
  char v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  unsigned __int8 v13;
  _xlocale *v14;
  const char *v15;
  int v16;
  unsigned __int8 v17;
  unint64_t v18;
  size_t v19;
  std::string::size_type v20;
  _BYTE *v21;
  size_t v22;
  std::string::size_type v23;
  std::string *p_dst;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *p_p;
  std::string::size_type size;
  std::string *v42;
  std::string::size_type v43;
  std::string __p;
  std::string v45;
  std::string v46;
  std::string __dst;
  std::string v48;
  char *v49[2];
  std::string::size_type v50;

  v8 = a2;
  do
  {
    v10 = *v8++;
    v9 = v10;
    v11 = v10 - 48;
    if (v10)
      v12 = v11 > 9;
    else
      v12 = 0;
  }
  while (v12);
  if (v9 == 48 && (*v8 & 0xDF) == 0x58)
  {
    v49[0] = a2;
    v13 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v14 = (_xlocale *)qword_1F04755E8;
    v15 = a2;
    v16 = 16;
  }
  else
  {
    v49[0] = a2;
    v17 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v14 = (_xlocale *)qword_1F04755E8;
    v15 = a2;
    v16 = 10;
  }
  v18 = strtoll_l(v15, v49, v16, v14);
  if (v49[0] != a2 && !*v49[0])
  {
    if (v18 <= 0xFF)
    {
      *a4 = v18;
      *a1 = 0;
      return;
    }
    *a4 = -1;
    v19 = strlen(a2);
    if (v19 <= 0x7FFFFFFFFFFFFFF7)
    {
      v20 = v19;
      if (v19 >= 0x17)
      {
        v32 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17)
          v32 = v19 | 7;
        v33 = v32 + 1;
        v21 = operator new(v32 + 1);
        v45.__r_.__value_.__l.__size_ = v20;
        v45.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      }
      else
      {
        *((_BYTE *)&v45.__r_.__value_.__s + 23) = v19;
        v21 = &v45;
        if (!v19)
        {
LABEL_38:
          v21[v20] = 0;
          v34 = std::string::insert(&v45, 0, "invalid number: \"");
          v35 = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v46.__r_.__value_.__r.__words[2] = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          v36 = std::string::append(&v46, "\"");
          v37 = v36->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v37;
          v36->__r_.__value_.__l.__size_ = 0;
          v36->__r_.__value_.__r.__words[2] = 0;
          v36->__r_.__value_.__r.__words[0] = 0;
          v38 = std::string::append(&__dst, ", constant does not fit ");
          v39 = v38->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
          v48.__r_.__value_.__r.__words[2] = v39;
          v38->__r_.__value_.__l.__size_ = 0;
          v38->__r_.__value_.__r.__words[2] = 0;
          v38->__r_.__value_.__r.__words[0] = 0;
          sub_1DF3685E8(&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            size = __p.__r_.__value_.__l.__size_;
          v42 = std::string::append(&v48, (const std::string::value_type *)p_p, size);
          v43 = v42->__r_.__value_.__r.__words[2];
          *(_OWORD *)v49 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
          v50 = v43;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          flatbuffers::Parser::Error(a3, a1);
          if (SHIBYTE(v50) < 0)
            operator delete(v49[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v48.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v46.__r_.__value_.__l.__data_);
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          {
            v31 = (void *)v45.__r_.__value_.__r.__words[0];
            goto LABEL_56;
          }
          return;
        }
      }
      memcpy(v21, a2, v20);
      goto LABEL_38;
    }
LABEL_58:
    abort();
  }
  *a4 = 0;
  v22 = strlen(a2);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_58;
  v23 = v22;
  if (v22 >= 0x17)
  {
    v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v25 = v22 | 7;
    v26 = v25 + 1;
    p_dst = (std::string *)operator new(v25 + 1);
    __dst.__r_.__value_.__l.__size_ = v23;
    __dst.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_27;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v22;
  p_dst = &__dst;
  if (v22)
LABEL_27:
    memcpy(p_dst, a2, v23);
  p_dst->__r_.__value_.__s.__data_[v23] = 0;
  v27 = std::string::insert(&__dst, 0, "invalid number: \"");
  v28 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&v48, "\"");
  v30 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)v49 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v50 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error(a3, a1);
  if (SHIBYTE(v50) < 0)
    operator delete(v49[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    v31 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_56:
    operator delete(v31);
  }
}

void sub_1DF34D3B4(_WORD *a1, char *a2, uint64_t a3, _WORD *a4)
{
  char *v8;
  char v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  unsigned __int8 v13;
  _xlocale *v14;
  const char *v15;
  int v16;
  unsigned __int8 v17;
  unint64_t v18;
  size_t v19;
  std::string::size_type v20;
  _BYTE *v21;
  size_t v22;
  std::string::size_type v23;
  std::string *p_dst;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *p_p;
  std::string::size_type size;
  std::string *v42;
  std::string::size_type v43;
  std::string __p;
  std::string v45;
  std::string v46;
  std::string __dst;
  std::string v48;
  char *v49[2];
  std::string::size_type v50;

  v8 = a2;
  do
  {
    v10 = *v8++;
    v9 = v10;
    v11 = v10 - 48;
    if (v10)
      v12 = v11 > 9;
    else
      v12 = 0;
  }
  while (v12);
  if (v9 == 48 && (*v8 & 0xDF) == 0x58)
  {
    v49[0] = a2;
    v13 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v14 = (_xlocale *)qword_1F04755E8;
    v15 = a2;
    v16 = 16;
  }
  else
  {
    v49[0] = a2;
    v17 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v14 = (_xlocale *)qword_1F04755E8;
    v15 = a2;
    v16 = 10;
  }
  v18 = strtoll_l(v15, v49, v16, v14);
  if (v49[0] != a2 && !*v49[0])
  {
    if (!(v18 >> 16))
    {
      *a4 = v18;
      *a1 = 0;
      return;
    }
    *a4 = -1;
    v19 = strlen(a2);
    if (v19 <= 0x7FFFFFFFFFFFFFF7)
    {
      v20 = v19;
      if (v19 >= 0x17)
      {
        v32 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17)
          v32 = v19 | 7;
        v33 = v32 + 1;
        v21 = operator new(v32 + 1);
        v45.__r_.__value_.__l.__size_ = v20;
        v45.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      }
      else
      {
        *((_BYTE *)&v45.__r_.__value_.__s + 23) = v19;
        v21 = &v45;
        if (!v19)
        {
LABEL_38:
          v21[v20] = 0;
          v34 = std::string::insert(&v45, 0, "invalid number: \"");
          v35 = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v46.__r_.__value_.__r.__words[2] = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          v36 = std::string::append(&v46, "\"");
          v37 = v36->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v37;
          v36->__r_.__value_.__l.__size_ = 0;
          v36->__r_.__value_.__r.__words[2] = 0;
          v36->__r_.__value_.__r.__words[0] = 0;
          v38 = std::string::append(&__dst, ", constant does not fit ");
          v39 = v38->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
          v48.__r_.__value_.__r.__words[2] = v39;
          v38->__r_.__value_.__l.__size_ = 0;
          v38->__r_.__value_.__r.__words[2] = 0;
          v38->__r_.__value_.__r.__words[0] = 0;
          sub_1DF3684A0(&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            size = __p.__r_.__value_.__l.__size_;
          v42 = std::string::append(&v48, (const std::string::value_type *)p_p, size);
          v43 = v42->__r_.__value_.__r.__words[2];
          *(_OWORD *)v49 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
          v50 = v43;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          flatbuffers::Parser::Error(a3, a1);
          if (SHIBYTE(v50) < 0)
            operator delete(v49[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v48.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v46.__r_.__value_.__l.__data_);
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          {
            v31 = (void *)v45.__r_.__value_.__r.__words[0];
            goto LABEL_56;
          }
          return;
        }
      }
      memcpy(v21, a2, v20);
      goto LABEL_38;
    }
LABEL_58:
    abort();
  }
  *a4 = 0;
  v22 = strlen(a2);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_58;
  v23 = v22;
  if (v22 >= 0x17)
  {
    v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v25 = v22 | 7;
    v26 = v25 + 1;
    p_dst = (std::string *)operator new(v25 + 1);
    __dst.__r_.__value_.__l.__size_ = v23;
    __dst.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_27;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v22;
  p_dst = &__dst;
  if (v22)
LABEL_27:
    memcpy(p_dst, a2, v23);
  p_dst->__r_.__value_.__s.__data_[v23] = 0;
  v27 = std::string::insert(&__dst, 0, "invalid number: \"");
  v28 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&v48, "\"");
  v30 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)v49 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v50 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error(a3, a1);
  if (SHIBYTE(v50) < 0)
    operator delete(v49[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    v31 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_56:
    operator delete(v31);
  }
}

void sub_1DF34D80C(_WORD *a1, char *a2, uint64_t a3, unint64_t *a4)
{
  _BOOL4 v8;
  unint64_t v9;
  char *v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  size_t v14;
  std::string::size_type v15;
  std::string *p_dst;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *p_p;
  std::string::size_type size;
  std::string *v27;
  std::string::size_type v28;
  void *v29;
  size_t v30;
  std::string::size_type v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  std::string __p;
  std::string __dst;
  std::string v41;
  std::string v42;
  std::string v43;
  __int128 v44;
  std::string::size_type v45;

  v8 = sub_1DF3667CC(a4, a2, 0, 1);
  v9 = *a4;
  if (v8)
  {
    if (!v9)
      goto LABEL_15;
    v10 = a2 - 1;
    do
    {
      v11 = *++v10;
      v12 = v11 - 48;
      if (v11)
        v13 = v12 > 9;
      else
        v13 = 0;
    }
    while (v13);
    if (*(_BYTE *)((__PAIR128__((unint64_t)v10, (unint64_t)a2) - (unint64_t)v10) >> 64) != 45)
    {
LABEL_15:
      *a1 = 0;
      return;
    }
    *a4 = -1;
LABEL_11:
    v14 = strlen(a2);
    if (v14 <= 0x7FFFFFFFFFFFFFF7)
    {
      v15 = v14;
      if (v14 >= 0x17)
      {
        v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v17 = v14 | 7;
        v18 = v17 + 1;
        p_dst = (std::string *)operator new(v17 + 1);
        __dst.__r_.__value_.__l.__size_ = v15;
        __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
        p_dst = &__dst;
        if (!v14)
        {
LABEL_20:
          p_dst->__r_.__value_.__s.__data_[v15] = 0;
          v19 = std::string::insert(&__dst, 0, "invalid number: \"");
          v20 = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v41.__r_.__value_.__r.__words[2] = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          v21 = std::string::append(&v41, "\"");
          v22 = v21->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          v42.__r_.__value_.__r.__words[2] = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          v23 = std::string::append(&v42, ", constant does not fit ");
          v24 = v23->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          v43.__r_.__value_.__r.__words[2] = v24;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          sub_1DF368120(&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            size = __p.__r_.__value_.__l.__size_;
          v27 = std::string::append(&v43, (const std::string::value_type *)p_p, size);
          v28 = v27->__r_.__value_.__r.__words[2];
          v44 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          v45 = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          flatbuffers::Parser::Error(a3, a1);
          if (SHIBYTE(v45) < 0)
            operator delete((void *)v44);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v43.__r_.__value_.__l.__data_);
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v42.__r_.__value_.__l.__data_);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v41.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            v29 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_52:
            operator delete(v29);
            return;
          }
          return;
        }
      }
      memcpy(p_dst, a2, v15);
      goto LABEL_20;
    }
LABEL_54:
    abort();
  }
  if (v9)
    goto LABEL_11;
  v30 = strlen(a2);
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_54;
  v31 = v30;
  if (v30 >= 0x17)
  {
    v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v33 = v30 | 7;
    v34 = v33 + 1;
    v32 = operator new(v33 + 1);
    v42.__r_.__value_.__l.__size_ = v31;
    v42.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    goto LABEL_45;
  }
  *((_BYTE *)&v42.__r_.__value_.__s + 23) = v30;
  v32 = &v42;
  if (v30)
LABEL_45:
    memcpy(v32, a2, v31);
  *((_BYTE *)v32 + v31) = 0;
  v35 = std::string::insert(&v42, 0, "invalid number: \"");
  v36 = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = std::string::append(&v43, "\"");
  v38 = v37->__r_.__value_.__r.__words[2];
  v44 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v45 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error(a3, a1);
  if (SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    v29 = (void *)v42.__r_.__value_.__r.__words[0];
    goto LABEL_52;
  }
}

uint64_t flatbuffers::EnumDef::ReverseLookup(flatbuffers::EnumDef *this, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t i;
  uint64_t result;

  if (*((_BYTE *)this + 148))
    v3 = a3;
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 27);
  for (i = *((_QWORD *)this + 26) + 8 * v3; i != v4; i += 8)
  {
    result = *(_QWORD *)i;
    if (*(_QWORD *)(*(_QWORD *)i + 136) == a2)
      return result;
  }
  return 0;
}

void flatbuffers::Parser::ParseTable(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  int v10;
  int v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  std::string::size_type size;
  std::string::size_type v20;
  std::string *v21;
  size_t v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const void *v29;
  size_t v30;
  unsigned int v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  char v35;
  void *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::string::size_type v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  std::string::size_type v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  void **v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  void **v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  std::string::size_type v79;
  uint64_t v80;
  __int128 v81;
  std::string::size_type v82;
  uint64_t v83;
  std::string::size_type v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  std::string::size_type v93;
  uint64_t v94;
  char *v95;
  _DWORD *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t i;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::string *v109;
  std::string::size_type v110;
  char v111;
  BOOL v112;
  const std::string::value_type *v113;
  std::string::size_type v114;
  std::string::size_type v115;
  std::string *v116;
  std::string::size_type v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t *v195;
  unsigned int v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  char *v216;
  char *v217;
  char *v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  const char *v228;
  int v229;
  uint64_t v230;
  _QWORD *v231;
  size_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  int v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  char v248;
  uint64_t v249;
  int v250;
  int v251;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  _QWORD *v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  char *v260;
  char *v261;
  _QWORD *v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  char *v268;
  char *v269;
  char *v270;
  char *v271;
  char *v272;
  BOOL v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  __int16 v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t *v296;
  _DWORD *v297;
  _DWORD *v298;
  unint64_t v299;
  std::string *__str;
  std::string *__stra;
  uint64_t *v302;
  __int16 v303;
  std::string v304;
  std::string v305;
  std::string::size_type v306;
  uint64_t v307;
  uint64_t v308;
  char v309;
  uint64_t v310;
  _QWORD *v311;
  _QWORD v312[4];
  _QWORD v313[3];
  _BYTE v314[32];
  __int128 v315;
  std::string::size_type v316;
  __int16 v317;
  _BYTE v318[32];
  __int128 v319;
  std::string::size_type v320;
  __int16 v321;
  uint64_t v322;
  void *v323;
  char v324;
  _BYTE v325[152];
  __int128 v326;
  std::string::size_type v327;
  char *v328;
  uint64_t v329;

  v10 = *(_DWORD *)(a1 + 20);
  if (v10 == 91)
  {
    flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)&v303);
    HIBYTE(v303) = 1;
    if ((_BYTE)v303)
      goto LABEL_183;
    v297 = a4;
    v11 = 93;
  }
  else
  {
    flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 123, (uint64_t)&v303);
    HIBYTE(v303) = 1;
    if ((_BYTE)v303)
      goto LABEL_183;
    v297 = a4;
    v11 = 125;
  }
  v12 = 0;
  v292 = a2 + 160;
  v294 = a2 + 152;
  v296 = (uint64_t *)(a1 + 336);
  __str = (std::string *)(a1 + 32);
  v302 = (uint64_t *)(a1 + 384);
  v287 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v288 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  v289 = *MEMORY[0x1E0DE4F50];
  v286 = MEMORY[0x1E0DE4FB8] + 16;
  do
  {
    while (1)
    {
      if (*(_BYTE *)(a1 + 729))
        v13 = v12 == 0;
      else
        v13 = 1;
      if (v13 && *(_DWORD *)(a1 + 20) == v11)
      {
        v96 = v297;
        goto LABEL_182;
      }
      memset(&v304, 0, sizeof(v304));
      if (v10 == 91)
      {
        v14 = *(_QWORD *)(a2 + 176);
        if (v12 >= (*(_QWORD *)(a2 + 184) - v14) >> 3)
        {
          *(_QWORD *)v318 = operator new(0x28uLL);
          *(_OWORD *)&v318[8] = xmmword_1DF385C20;
          strcpy(*(char **)v318, "too many unnamed fields in nested array");
          flatbuffers::Parser::Error(a1, &v303);
          if ((v318[23] & 0x80000000) != 0)
            operator delete(*(void **)v318);
          v16 = 1;
          goto LABEL_49;
        }
        std::string::operator=(&v304, *(const std::string **)(v14 + 8 * v12));
      }
      else
      {
        std::string::operator=(&v304, __str);
        if (*(_DWORD *)(a1 + 20) == 257)
        {
          flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)&v303);
        }
        else
        {
          if (*(_BYTE *)(a1 + 729))
            v17 = 257;
          else
            v17 = 260;
          flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, v17, (uint64_t)&v303);
        }
        v16 = 1;
        HIBYTE(v303) = 1;
        if ((_BYTE)v303)
          goto LABEL_49;
        if (!*(_BYTE *)(a1 + 954) || (*(_DWORD *)(a1 + 20) | 0x20) != 0x7B)
        {
          flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 58, (uint64_t)&v303);
          HIBYTE(v303) = 1;
          if ((_BYTE)v303)
            goto LABEL_49;
        }
      }
      v18 = v12;
      if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v304.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v304.__r_.__value_.__l.__size_;
      if (size == 7)
      {
        v20 = (v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(v304.__r_.__value_.__r.__words[2])
            : v304.__r_.__value_.__l.__size_;
        v21 = (v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v304
            : (std::string *)v304.__r_.__value_.__r.__words[0];
        v22 = v20 >= 7 ? 7 : v20;
        if (!memcmp(v21, "$schema", v22) && v20 == 7)
        {
          flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 257, (uint64_t)&v303);
          if ((_BYTE)v303)
            goto LABEL_48;
          goto LABEL_75;
        }
      }
      v290 = a2;
      v25 = sub_1DF383318(v294, &v304);
      if (v292 == v25 || (v26 = *(_QWORD *)(v25 + 56)) == 0)
      {
        if (!*(_BYTE *)(a1 + 750))
        {
          std::operator+<char>();
          flatbuffers::Parser::Error(a1, &v303);
          if ((v318[23] & 0x80000000) != 0)
            operator delete(*(void **)v318);
          a2 = v290;
          v24 = (_QWORD *)(a1 + 384);
LABEL_171:
          v16 = 1;
          HIBYTE(v303) = 1;
          v12 = v18;
          if ((_BYTE)v303)
            goto LABEL_50;
          goto LABEL_77;
        }
        flatbuffers::Parser::SkipAnyJsonValue((flatbuffers::Parser *)a1, (uint64_t)&v303);
LABEL_74:
        a2 = v290;
        if ((_BYTE)v303)
        {
LABEL_48:
          v16 = 1;
          HIBYTE(v303) = 1;
          v12 = v18;
LABEL_49:
          v24 = (_QWORD *)(a1 + 384);
          goto LABEL_50;
        }
LABEL_75:
        v24 = (_QWORD *)(a1 + 384);
        goto LABEL_76;
      }
      if (*(_DWORD *)(a1 + 20) == 260)
      {
        v27 = *(unsigned __int8 *)(a1 + 55);
        v28 = (v27 & 0x80u) == 0 ? v27 & 0x7F : *(_QWORD *)(a1 + 40);
        if (v28 == 4)
        {
          v29 = (const void *)(a1 + 32);
          if ((v27 & 0x80) != 0)
          {
            v29 = (const void *)__str->__r_.__value_.__r.__words[0];
            v27 = *(_QWORD *)(a1 + 40);
          }
          v30 = v27 >= 4 ? 4 : v27;
          if (!memcmp(v29, "null", v30) && v27 == 4)
          {
            v31 = *(_DWORD *)(v26 + 152);
            if (v31 <= 0xFFFFFFFB && v31 - 1 >= 0xC)
            {
              flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)&v303);
              goto LABEL_74;
            }
          }
        }
      }
      v32 = *(_OWORD *)(v26 + 168);
      *(_OWORD *)v314 = *(_OWORD *)(v26 + 152);
      *(_OWORD *)&v314[16] = v32;
      if (*(char *)(v26 + 207) < 0)
      {
        sub_1DF36DA38(&v315, *(void **)(v26 + 184), *(_QWORD *)(v26 + 192));
      }
      else
      {
        v315 = *(_OWORD *)(v26 + 184);
        v316 = *(_QWORD *)(v26 + 200);
      }
      v33 = v18;
      v317 = *(_WORD *)(v26 + 208);
      if (!*(_BYTE *)(v26 + 221))
      {
        if (*(_QWORD *)(v26 + 224))
        {
          flatbuffers::Parser::ParseNestedFlatbuffer((flatbuffers::Parser *)a1, (uint64_t)v314, v26, v18, v290, (uint64_t)&v303);
        }
        else
        {
          v34 = *(_DWORD *)(a1 + 1204);
          if (v34 < 64)
          {
            *(_DWORD *)(a1 + 1204) = v34 + 1;
            v15 = flatbuffers::Parser::ParseAnyValue(a1, v314, v26, v18, v290, 0, 0);
            --*(_DWORD *)(a1 + 1204);
          }
          else
          {
            flatbuffers::Parser::RecurseError((flatbuffers::Parser *)a1, &v303);
          }
        }
        HIBYTE(v303) = 1;
        v24 = (_QWORD *)(a1 + 384);
        if ((_BYTE)v303)
        {
          v35 = 0;
          a2 = v290;
          goto LABEL_168;
        }
        goto LABEL_114;
      }
      v36 = operator new(0x400uLL);
      v305.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
      v305.__r_.__value_.__r.__words[2] = (std::string::size_type)v36 + 1024;
      bzero(v36, 0x400uLL);
      v306 = 0;
      v307 = 0;
      v309 = 0;
      v308 = 0;
      v310 = 7;
      v312[0] = 0;
      v312[1] = 0;
      v311 = v312;
      v313[0] = 0;
      v313[1] = 0;
      v313[2] = &v305;
      v312[2] = &v305;
      v312[3] = v313;
      v305.__r_.__value_.__l.__size_ = (std::string::size_type)v36;
      flatbuffers::Parser::ParseFlexBufferValue(a1, (uint64_t)&v305, (uint64_t)&v303);
      HIBYTE(v303) = 1;
      if (!(_BYTE)v303)
      {
        sub_1DF382C3C((uint64_t)&v305);
        if (*(_QWORD *)(a1 + 408) <= 7uLL)
          *(_QWORD *)(a1 + 408) = 8;
        v37 = v305.__r_.__value_.__l.__size_;
        v38 = v305.__r_.__value_.__r.__words[0];
        v39 = *(_QWORD *)(a1 + 384);
        v40 = (v305.__r_.__value_.__s.__data_[0]
             + (_BYTE)v39
             - (*(_BYTE *)(a1 + 368)
              + v305.__r_.__value_.__s.__data_[8]
              + *(_DWORD *)(a1 + 376))) & 7;
        v41 = (_QWORD *)(a1 + 384);
        if (v39 - *(_QWORD *)(a1 + 392) < v40)
        {
          sub_1DF366C90(v296, (v305.__r_.__value_.__s.__data_[0]+ (_BYTE)v39- (*(_BYTE *)(a1 + 368)+ v305.__r_.__value_.__s.__data_[8]+ *(_DWORD *)(a1 + 376))) & 7);
          v41 = (_QWORD *)(a1 + 384);
          *v302 -= v40;
          goto LABEL_103;
        }
        *v302 = v39 - v40;
        if (v40)
        {
LABEL_103:
          v42 = 0;
          do
            *(_BYTE *)(*v41 + v42++) = 0;
          while (v40 != v42);
          v37 = v305.__r_.__value_.__l.__size_;
          v38 = v305.__r_.__value_.__r.__words[0];
        }
        if (v38 == v37)
          v43 = &flatbuffers::data<unsigned char,std::allocator<unsigned char>>(std::vector<unsigned char> const&)::t;
        else
          v43 = (void *)v38;
        sub_1DF356044((uint64_t)v296, v43, v37 - v38);
        sub_1DF367FB0((uint64_t)v318);
        std::ostream::operator<<();
        std::stringbuf::str();
        *(_QWORD *)v318 = v289;
        *(_QWORD *)&v318[*(_QWORD *)(v289 - 24)] = v287;
        *(_QWORD *)&v318[16] = v288;
        *(_QWORD *)&v318[24] = v286;
        if (v324 < 0)
          operator delete(v323);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1E0BFF758](v325);
        if (SHIBYTE(v316) < 0)
          operator delete((void *)v315);
        v315 = v326;
        v316 = v327;
        v15 = sub_1DF38315C((uint64_t)&v305);
        v24 = (_QWORD *)(a1 + 384);
LABEL_114:
        v44 = 0;
        v45 = *(_QWORD *)(a1 + 1184);
        v46 = v45 - 72 * (v18 & 0x1FFFFFFFFFFFFFFFLL);
        do
        {
          if (-72 * v18 == v44)
            goto LABEL_119;
          v47 = *(_QWORD *)(v45 + v44 - 8);
          if (v47 == v26)
          {
            std::operator+<char>();
            flatbuffers::Parser::Error(a1, &v303);
            if ((v318[23] & 0x80000000) != 0)
              operator delete(*(void **)v318);
            goto LABEL_167;
          }
          v44 -= 72;
        }
        while (*(unsigned __int16 *)(v47 + 208) >= *(unsigned __int16 *)(v26 + 208));
        v46 = v45 + v44 + 72;
LABEL_119:
        *(_OWORD *)v318 = *(_OWORD *)v314;
        *(_OWORD *)&v318[16] = *(_OWORD *)&v314[16];
        v281 = a3;
        if (SHIBYTE(v316) < 0)
        {
          v48 = v46;
          v15 = (unint64_t)sub_1DF36DA38(&v319, (void *)v315, *((unint64_t *)&v315 + 1));
          v46 = v48;
          v24 = (_QWORD *)(a1 + 384);
          v45 = *(_QWORD *)(a1 + 1184);
        }
        else
        {
          v319 = v315;
          v320 = v316;
        }
        v321 = v317;
        v322 = v26;
        v49 = *(_QWORD *)(a1 + 1176);
        v50 = v46 - v49;
        v51 = (v46 - v49) / 72;
        v52 = v49 + 72 * v51;
        v53 = *(_QWORD *)(a1 + 1192);
        v278 = v49;
        if (v45 < v53)
        {
          if (v52 == v45)
          {
            v77 = *(_OWORD *)&v318[16];
            *(_OWORD *)v45 = *(_OWORD *)v318;
            *(_OWORD *)(v45 + 16) = v77;
            v78 = v319;
            *(_QWORD *)(v45 + 48) = v320;
            *(_OWORD *)(v45 + 32) = v78;
            v320 = 0;
            v319 = 0uLL;
            *(_WORD *)(v45 + 56) = v321;
            *(_QWORD *)(v49 + 72 * v51 + 64) = v322;
            *(_QWORD *)(a1 + 1184) = v45 + 72;
            a3 = v281;
          }
          else
          {
            v279 = (v46 - v49) / 72;
            v277 = a5;
            v54 = v45 - 72;
            v55 = v45;
            while (v54 < v45)
            {
              v56 = *(_OWORD *)(v54 + 16);
              *(_OWORD *)v55 = *(_OWORD *)v54;
              *(_OWORD *)(v55 + 16) = v56;
              v57 = *(_OWORD *)(v54 + 32);
              *(_QWORD *)(v55 + 48) = *(_QWORD *)(v54 + 48);
              *(_OWORD *)(v55 + 32) = v57;
              *(_QWORD *)(v54 + 40) = 0;
              *(_QWORD *)(v54 + 48) = 0;
              *(_QWORD *)(v54 + 32) = 0;
              *(_WORD *)(v55 + 56) = *(_WORD *)(v54 + 56);
              *(_QWORD *)(v55 + 64) = *(_QWORD *)(v54 + 64);
              v55 += 72;
              v54 += 72;
            }
            v64 = v52 + 72;
            *(_QWORD *)(a1 + 1184) = v55;
            if (v45 != v52 + 72)
            {
              v65 = 0;
              v66 = v49 + 8 * ((uint64_t)(v45 - v64) >> 3) + 72 * v279;
              v67 = -8 * ((uint64_t)(v45 - v64) >> 3);
              v285 = v11;
              v282 = v67;
              do
              {
                v68 = v66 + v65;
                v69 = v45 + v65;
                v70 = *(_OWORD *)(v66 + v65 - 72);
                *(_OWORD *)(v69 - 62) = *(_OWORD *)(v66 + v65 - 62);
                *(_OWORD *)(v69 - 72) = v70;
                v71 = (void **)(v45 + v65 - 40);
                if (*(char *)(v45 + v65 - 17) < 0)
                {
                  v72 = v66;
                  operator delete(*v71);
                  v67 = v282;
                  v66 = v72;
                  v11 = v285;
                  v24 = (_QWORD *)(a1 + 384);
                }
                v73 = *(_OWORD *)(v68 - 40);
                *(_QWORD *)(v45 + v65 - 24) = *(_QWORD *)(v68 - 24);
                *(_OWORD *)v71 = v73;
                *(_BYTE *)(v68 - 17) = 0;
                *(_BYTE *)(v68 - 40) = 0;
                *(_WORD *)(v69 - 16) = *(_WORD *)(v68 - 16);
                *(_QWORD *)(v69 - 8) = *(_QWORD *)(v68 - 8);
                v65 -= 72;
              }
              while (v67 != v65);
            }
            v74 = *(_OWORD *)v318;
            *(_OWORD *)(v52 + 10) = *(_OWORD *)&v318[10];
            *(_OWORD *)v52 = v74;
            v75 = (void **)(v52 + 32);
            if (*(char *)(v52 + 55) < 0)
            {
              operator delete(*v75);
              v24 = (_QWORD *)(a1 + 384);
            }
            v76 = v319;
            *(_QWORD *)(v52 + 48) = v320;
            *(_OWORD *)v75 = v76;
            HIBYTE(v320) = 0;
            LOBYTE(v319) = 0;
            *(_WORD *)(v52 + 56) = v321;
            *(_QWORD *)(v278 + 72 * v279 + 64) = v322;
            a5 = v277;
            a3 = v281;
            v33 = v18;
          }
          goto LABEL_163;
        }
        v280 = (v46 - v49) / 72;
        v58 = 1 - 0x71C71C71C71C71C7 * ((uint64_t)(v45 - v49) >> 3);
        if (v58 > 0x38E38E38E38E38ELL)
          abort();
        v59 = 0x8E38E38E38E38E39 * ((uint64_t)(v53 - v49) >> 3);
        if (2 * v59 > v58)
          v58 = 2 * v59;
        if (v59 >= 0x1C71C71C71C71C7)
          v60 = 0x38E38E38E38E38ELL;
        else
          v60 = v58;
        v329 = a1 + 1192;
        if (v60)
        {
          if (v60 <= 0x38E38E38E38E38ELL)
          {
            v61 = v46 - v49;
            v62 = v46;
            v63 = (char *)operator new(72 * v60);
            v46 = v62;
            v50 = v61;
            goto LABEL_148;
          }
LABEL_612:
          sub_1DF3667C0();
        }
        v63 = 0;
LABEL_148:
        v79 = (std::string::size_type)&v63[72 * v280];
        v328 = &v63[72 * v60];
        if (v280 == v60)
        {
          if (v50 < 1)
          {
            v92 = 2 * v280;
            if (v278 == v46)
              v92 = 1;
            v307 = a1 + 1192;
            if (v92 > 0x38E38E38E38E38ELL)
              goto LABEL_612;
            v93 = (std::string::size_type)v63;
            v283 = v92 >> 2;
            v94 = 9 * v92;
            v95 = (char *)operator new(72 * v92);
            v284 = &v95[72 * v283];
            *(_QWORD *)&v326 = v95;
            *((_QWORD *)&v326 + 1) = v284;
            v305.__r_.__value_.__r.__words[0] = v93;
            v305.__r_.__value_.__l.__size_ = v79;
            v328 = &v95[8 * v94];
            v305.__r_.__value_.__r.__words[2] = v79;
            v306 = v79;
            sub_1DF370EEC((uint64_t)&v305);
            a3 = v281;
            v79 = (std::string::size_type)v284;
            v33 = v18;
            goto LABEL_155;
          }
          v33 = v18;
          v80 = v280 + 2;
          if (v280 >= -1)
            v80 = v280 + 1;
          v79 -= 72 * (v80 >> 1);
        }
        else
        {
          v33 = v18;
        }
        a3 = v281;
LABEL_155:
        v81 = *(_OWORD *)&v318[16];
        *(_OWORD *)v79 = *(_OWORD *)v318;
        *(_OWORD *)(v79 + 16) = v81;
        *(_OWORD *)(v79 + 32) = v319;
        *(_QWORD *)(v79 + 48) = v320;
        v319 = 0uLL;
        v320 = 0;
        *(_WORD *)(v79 + 56) = v321;
        *(_QWORD *)(v79 + 64) = v322;
        v82 = v79 + 72;
        v327 = v79 + 72;
        v83 = *(_QWORD *)(a1 + 1176);
        if (v83 != v52)
        {
          v84 = v52;
          do
          {
            v85 = *(_OWORD *)(v84 - 72);
            *(_OWORD *)(v79 - 56) = *(_OWORD *)(v84 - 56);
            *(_OWORD *)(v79 - 72) = v85;
            v86 = *(_OWORD *)(v84 - 40);
            *(_QWORD *)(v79 - 24) = *(_QWORD *)(v84 - 24);
            *(_OWORD *)(v79 - 40) = v86;
            *(_QWORD *)(v84 - 32) = 0;
            *(_QWORD *)(v84 - 24) = 0;
            *(_QWORD *)(v84 - 40) = 0;
            *(_WORD *)(v79 - 16) = *(_WORD *)(v84 - 16);
            *(_QWORD *)(v79 - 8) = *(_QWORD *)(v84 - 8);
            v79 -= 72;
            v84 -= 72;
          }
          while (v84 != v83);
          v82 = v327;
        }
        *((_QWORD *)&v326 + 1) = v79;
        v87 = *(_QWORD *)(a1 + 1184);
        if (v87 != v52)
        {
          do
          {
            v88 = *(_OWORD *)(v52 + 16);
            *(_OWORD *)v82 = *(_OWORD *)v52;
            *(_OWORD *)(v82 + 16) = v88;
            v89 = *(_OWORD *)(v52 + 32);
            *(_QWORD *)(v82 + 48) = *(_QWORD *)(v52 + 48);
            *(_OWORD *)(v82 + 32) = v89;
            *(_QWORD *)(v52 + 40) = 0;
            *(_QWORD *)(v52 + 48) = 0;
            *(_QWORD *)(v52 + 32) = 0;
            *(_WORD *)(v82 + 56) = *(_WORD *)(v52 + 56);
            *(_QWORD *)(v82 + 64) = *(_QWORD *)(v52 + 64);
            v82 += 72;
            v52 += 72;
          }
          while (v52 != v87);
          v79 = *((_QWORD *)&v326 + 1);
          v52 = *(_QWORD *)(a1 + 1184);
        }
        v90 = *(_QWORD *)(a1 + 1176);
        *(_QWORD *)(a1 + 1176) = v79;
        *(_QWORD *)(a1 + 1184) = v82;
        v91 = *(char **)(a1 + 1192);
        *(_QWORD *)(a1 + 1192) = v328;
        v327 = v52;
        v328 = v91;
        *(_QWORD *)&v326 = v90;
        *((_QWORD *)&v326 + 1) = v90;
        v15 = sub_1DF370EEC((uint64_t)&v326);
        v24 = (_QWORD *)(a1 + 384);
LABEL_163:
        a2 = v290;
        if (SHIBYTE(v320) < 0)
        {
          operator delete((void *)v319);
          v24 = (_QWORD *)(a1 + 384);
        }
        v18 = v33 + 1;
        v35 = 1;
        goto LABEL_168;
      }
      v15 = sub_1DF38315C((uint64_t)&v305);
LABEL_167:
      v35 = 0;
      a2 = v290;
      v24 = (_QWORD *)(a1 + 384);
LABEL_168:
      if (SHIBYTE(v316) < 0)
      {
        operator delete((void *)v315);
        v24 = (_QWORD *)(a1 + 384);
      }
      if ((v35 & 1) == 0)
        goto LABEL_171;
LABEL_76:
      v303 = 256;
      v12 = v18;
LABEL_77:
      if (*(_DWORD *)(a1 + 20) == v11)
      {
        v16 = 2;
      }
      else
      {
        if (*(_BYTE *)(a1 + 954)
          || (flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 44, (uint64_t)&v303),
              v24 = (_QWORD *)(a1 + 384),
              !(_BYTE)v303))
        {
          v16 = 0;
          LOBYTE(v303) = 0;
        }
        else
        {
          v16 = 1;
        }
        HIBYTE(v303) = 1;
      }
LABEL_50:
      if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (v16)
        goto LABEL_178;
    }
    operator delete(v304.__r_.__value_.__l.__data_);
    v24 = (_QWORD *)(a1 + 384);
  }
  while (!v16);
LABEL_178:
  v96 = v297;
  if (v16 != 2)
  {
LABEL_179:
    v97 = v303;
    *(_BYTE *)a5 = v303;
    HIBYTE(v303) = 1;
    *(_BYTE *)(a5 + 1) = 1;
    if (v97)
      return;
    goto LABEL_188;
  }
LABEL_182:
  flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)&v303);
  HIBYTE(v303) = 1;
  if ((_BYTE)v303)
  {
LABEL_183:
    *(_WORD *)a5 = 257;
    return;
  }
  if (v10 == 91 && v12 != (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 3)
  {
    *(_QWORD *)v318 = operator new(0x30uLL);
    *(_OWORD *)&v318[8] = xmmword_1DF385C30;
    strcpy(*(char **)v318, "wrong number of unnamed fields in table vector");
    flatbuffers::Parser::Error(a1, &v303);
    if ((v318[23] & 0x80000000) != 0)
      operator delete(*(void **)v318);
    v24 = (_QWORD *)(a1 + 384);
    goto LABEL_179;
  }
  LOBYTE(v303) = 0;
  *(_WORD *)a5 = 256;
  v24 = (_QWORD *)(a1 + 384);
LABEL_188:
  v98 = *(_QWORD *)(a2 + 176);
  v99 = *(_QWORD *)(a2 + 184);
  if (v98 != v99)
  {
    for (i = *(_QWORD *)(a2 + 176); i != v99; i += 8)
    {
      if (*(_BYTE *)(*(_QWORD *)i + 217))
      {
        if (!(-72 * v12))
        {
LABEL_207:
          std::operator+<char>();
          v109 = std::string::append((std::string *)v314, " in ");
          v110 = v109->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v305.__r_.__value_.__l.__data_ = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
          v305.__r_.__value_.__r.__words[2] = v110;
          v109->__r_.__value_.__l.__size_ = 0;
          v109->__r_.__value_.__r.__words[2] = 0;
          v109->__r_.__value_.__r.__words[0] = 0;
          v111 = *(_BYTE *)(a2 + 23);
          v112 = v111 < 0;
          if (v111 >= 0)
            v113 = (const std::string::value_type *)a2;
          else
            v113 = *(const std::string::value_type **)a2;
          v114 = v111 & 0x7F;
          if (v112)
            v115 = *(_QWORD *)(a2 + 8);
          else
            v115 = v114;
          v116 = std::string::append(&v305, v113, v115);
          v117 = v116->__r_.__value_.__r.__words[2];
          *(_OWORD *)v318 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
          *(_QWORD *)&v318[16] = v117;
          v116->__r_.__value_.__l.__size_ = 0;
          v116->__r_.__value_.__r.__words[2] = 0;
          v116->__r_.__value_.__r.__words[0] = 0;
          flatbuffers::Parser::Error(a1, (_WORD *)a5);
          if ((v318[23] & 0x80000000) != 0)
            operator delete(*(void **)v318);
          if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v305.__r_.__value_.__l.__data_);
          if ((v314[23] & 0x80000000) != 0)
          {
            v118 = *(void **)v314;
            goto LABEL_219;
          }
          return;
        }
        v101 = -72 * v12;
        while (*(_QWORD *)(*(_QWORD *)(a1 + 1184) + 64 + v101) != *(_QWORD *)i)
        {
          v101 += 72;
          if (!v101)
            goto LABEL_207;
        }
      }
    }
  }
  if (!*(_BYTE *)(a2 + 200))
  {
    *(_BYTE *)(a1 + 406) = 1;
    v103 = *(_QWORD *)(a1 + 368) - *(_QWORD *)(a1 + 384) + *(_QWORD *)(a1 + 376);
    goto LABEL_224;
  }
  if (v12 == (v99 - v98) >> 3)
  {
    v102 = *(_QWORD *)(a2 + 208);
    if (*(_QWORD *)(a1 + 408) < v102)
      *(_QWORD *)(a1 + 408) = v102;
    v103 = *(_QWORD *)(a1 + 368);
    v104 = *(_QWORD *)(a1 + 376);
    v105 = *(_QWORD *)(a1 + 384);
    v106 = (v102 - 1) & -(uint64_t)(v103 - v105 + v104);
    if (v105 - *(_QWORD *)(a1 + 392) < v106)
    {
      v15 = sub_1DF366C90(v296, v106);
      v24 = (_QWORD *)(a1 + 384);
      *v302 -= v106;
      goto LABEL_203;
    }
    LOWORD(v107) = v105 - v106;
    *v24 = v105 - v106;
    if (v106)
    {
LABEL_203:
      v108 = 0;
      do
        *(_BYTE *)(*v24 + v108++) = 0;
      while (v106 != v108);
      v104 = *(_QWORD *)(a1 + 376);
      v107 = *(_QWORD *)(a1 + 384);
      v103 = *(_QWORD *)(a1 + 368);
    }
    LOWORD(v103) = v104 - v107 + v103;
LABEL_224:
    v291 = v103;
    v119 = 8;
    if (!*(_BYTE *)(a2 + 202))
      v119 = 1;
    v298 = v96;
    v299 = v119;
    __stra = (std::string *)-(uint64_t)v12;
    v120 = *(_QWORD *)(a1 + 1184);
    v121 = -72 * v12;
    v293 = -72 * v12;
    v295 = v12;
    do
    {
      if (v121)
      {
        v122 = a2;
        do
        {
          v123 = v120;
          v125 = *(int *)(v120 - 72);
          v120 -= 72;
          v124 = v125;
          v126 = *(_QWORD *)(v120 + 64);
          if (!*(_BYTE *)(v122 + 202) || v299 == byte_1DF385F2C[v124 + 4])
          {
            switch((int)v124)
            {
              case -4:
                v127 = *(_QWORD *)(v126 + 232);
                v128 = *(_QWORD *)(a1 + 384);
                if (v128 - *(_QWORD *)(a1 + 392) >= v127)
                {
                  *v24 = v128 - v127;
                  if (!v127)
                    goto LABEL_279;
                }
                else
                {
                  sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v127;
                }
                v171 = 0;
                do
                  *(_BYTE *)(*v24 + v171++) = 0;
                while (v127 != v171);
LABEL_279:
                if (*(_BYTE *)(v122 + 200))
                {
                  v172 = (char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v172 = *(char **)v172;
                  sub_1DF352C64((_WORD *)a5, v172, a1, (flatbuffers::ClassicLocale *)v318);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  goto LABEL_362;
                }
                v234 = (char *)(v123 - 40);
                if (*(char *)(v123 - 17) < 0)
                  v234 = *(char **)v234;
                sub_1DF352C64((_WORD *)a5, v234, a1, (flatbuffers::ClassicLocale *)v318);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                v235 = (char *)(v126 + 184);
                if (*(char *)(v126 + 207) < 0)
                  v235 = *(char **)v235;
                sub_1DF352C64((_WORD *)a5, v235, a1, (flatbuffers::ClassicLocale *)&v305);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                sub_1DF382340((uint64_t)v296, *(unsigned __int16 *)(v123 - 16), *(__int16 *)v318, (__int16)v305.__r_.__value_.__l.__data_);
                goto LABEL_554;
              case -3:
                v129 = *(_QWORD *)(v126 + 232);
                v130 = *(_QWORD *)(a1 + 384);
                if (v130 - *(_QWORD *)(a1 + 392) >= v129)
                {
                  *v24 = v130 - v129;
                  if (!v129)
                    goto LABEL_415;
                }
                else
                {
                  sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v129;
                }
                v173 = 0;
                do
                  *(_BYTE *)(*v24 + v173++) = 0;
                while (v129 != v173);
                goto LABEL_415;
              case -2:
                v131 = *(_QWORD *)(v126 + 232);
                v132 = *(_QWORD *)(a1 + 384);
                if (v132 - *(_QWORD *)(a1 + 392) >= v131)
                {
                  *v24 = v132 - v131;
                  if (!v131)
                    goto LABEL_291;
                }
                else
                {
                  sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v131;
                }
                v174 = 0;
                do
                  *(_BYTE *)(*v24 + v174++) = 0;
                while (v131 != v174);
LABEL_291:
                if (*(_BYTE *)(v122 + 200))
                {
                  *(_DWORD *)v318 = 0;
                  v175 = (char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v175 = *(char **)v175;
                  sub_1DF34C708((_WORD *)a5, v175, a1, v318);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  if (*(_QWORD *)(a1 + 408) <= 3uLL)
                    *(_QWORD *)(a1 + 408) = 4;
                  v176 = *(_DWORD *)v318;
                  v177 = *(_QWORD *)(a1 + 384);
                  v178 = *(_QWORD *)(a1 + 392);
                  v179 = ((_BYTE)v177 - (*(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 376))) & 3;
                  v24 = (_QWORD *)(a1 + 384);
                  if (v177 - v178 < v179)
                  {
                    v15 = sub_1DF366C90(v296, ((_BYTE)v177- (*(_DWORD *)(a1 + 368)+ *(_DWORD *)(a1 + 376))) & 3);
                    v24 = (_QWORD *)(a1 + 384);
                    *v302 -= v179;
                  }
                  else
                  {
                    v180 = v177 - v179;
                    *v302 = v180;
                    if (!v179)
                      goto LABEL_400;
                  }
                  v181 = 0;
                  do
                    *(_BYTE *)(*v24 + v181++) = 0;
                  while (v179 != v181);
                  goto LABEL_399;
                }
                *(_DWORD *)v318 = 0;
                LODWORD(v305.__r_.__value_.__l.__data_) = 0;
                v236 = (char *)(v123 - 40);
                if (*(char *)(v123 - 17) < 0)
                  v236 = *(char **)v236;
                sub_1DF34C708((_WORD *)a5, v236, a1, v318);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                v237 = (char *)(v126 + 184);
                if (*(char *)(v126 + 207) < 0)
                  v237 = *(char **)v237;
                sub_1DF34C708((_WORD *)a5, v237, a1, &v305);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                v238 = *(unsigned __int16 *)(v123 - 16);
                v239 = *(_DWORD *)v318;
                if (*(_DWORD *)v318 == LODWORD(v305.__r_.__value_.__l.__data_) && !*(_BYTE *)(a1 + 416))
                  goto LABEL_553;
                v240 = (_QWORD *)(a1 + 384);
                if (*(_QWORD *)(a1 + 408) <= 3uLL)
                  *(_QWORD *)(a1 + 408) = 4;
                v241 = *(_QWORD *)(a1 + 384);
                v242 = *(_QWORD *)(a1 + 392);
                v243 = ((_BYTE)v241 - (*(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 376))) & 3;
                if (v241 - v242 < v243)
                {
                  sub_1DF366C90(v296, ((_BYTE)v241 - (*(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 376))) & 3);
                  v240 = (_QWORD *)(a1 + 384);
                  *v302 -= v243;
                }
                else
                {
                  v244 = v241 - v243;
                  *v302 = v244;
                  if (!v243)
                    goto LABEL_549;
                }
                v245 = 0;
                do
                  *(_BYTE *)(*v240 + v245++) = 0;
                while (v243 != v245);
                goto LABEL_548;
              case -1:
                v133 = *(_QWORD *)(v126 + 232);
                v134 = *(_QWORD *)(a1 + 384);
                if (v134 - *(_QWORD *)(a1 + 392) >= v133)
                {
                  *v24 = v134 - v133;
                  if (!v133)
                    goto LABEL_358;
                }
                else
                {
                  sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v133;
                }
                v182 = 0;
                do
                  *(_BYTE *)(*v24 + v182++) = 0;
                while (v133 != v182);
                goto LABEL_358;
              case 0:
                v135 = *(_QWORD *)(v126 + 232);
                v136 = *(_QWORD *)(a1 + 384);
                if (v136 - *(_QWORD *)(a1 + 392) >= v135)
                {
                  *v24 = v136 - v135;
                  if (!v135)
                    goto LABEL_333;
                }
                else
                {
                  sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v135;
                }
                v183 = 0;
                do
                  *(_BYTE *)(*v24 + v183++) = 0;
                while (v135 != v183);
                goto LABEL_333;
              case 1:
                v137 = *(_QWORD *)(v126 + 232);
                v138 = *(_QWORD *)(a1 + 384);
                if (v138 - *(_QWORD *)(a1 + 392) >= v137)
                {
                  *v24 = v138 - v137;
                  if (!v137)
                    goto LABEL_333;
                }
                else
                {
                  sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v137;
                }
                v184 = 0;
                do
                  *(_BYTE *)(*v24 + v184++) = 0;
                while (v137 != v184);
                goto LABEL_333;
              case 2:
                v139 = *(_QWORD *)(v126 + 232);
                v140 = *(_QWORD *)(a1 + 384);
                if (v140 - *(_QWORD *)(a1 + 392) >= v139)
                {
                  *v24 = v140 - v139;
                  if (!v139)
                    goto LABEL_333;
                }
                else
                {
                  sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v139;
                }
                v185 = 0;
                do
                  *(_BYTE *)(*v24 + v185++) = 0;
                while (v139 != v185);
                goto LABEL_333;
              case 3:
                v141 = *(_QWORD *)(v126 + 232);
                v142 = *(_QWORD *)(a1 + 384);
                if (v142 - *(_QWORD *)(a1 + 392) >= v141)
                {
                  *v24 = v142 - v141;
                  if (!v141)
                    goto LABEL_321;
                }
                else
                {
                  sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v141;
                }
                v186 = 0;
                do
                  *(_BYTE *)(*v24 + v186++) = 0;
                while (v141 != v186);
LABEL_321:
                if (*(_BYTE *)(v122 + 200))
                {
                  v318[0] = 0;
                  v187 = (char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v187 = *(char **)v187;
                  sub_1DF3532F0((_WORD *)a5, v187, a1, v318);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  if (!*(_QWORD *)(a1 + 408))
                    *(_QWORD *)(a1 + 408) = 1;
                  v188 = v318[0];
                  v189 = *(_QWORD *)(a1 + 384);
                  v24 = (_QWORD *)(a1 + 384);
                  if (v189 == *(_QWORD *)(a1 + 392))
                  {
                    v15 = sub_1DF366C90(v296, 1uLL);
                    v24 = (_QWORD *)(a1 + 384);
                    v189 = *v302;
                  }
                  *v24 = v189 - 1;
                  *(_BYTE *)(v189 - 1) = v188;
                  goto LABEL_403;
                }
                v318[0] = 0;
                v305.__r_.__value_.__s.__data_[0] = 0;
                v246 = (char *)(v123 - 40);
                if (*(char *)(v123 - 17) < 0)
                  v246 = *(char **)v246;
                sub_1DF3532F0((_WORD *)a5, v246, a1, v318);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                v247 = (char *)(v126 + 184);
                if (*(char *)(v126 + 207) < 0)
                  v247 = *(char **)v247;
                sub_1DF3532F0((_WORD *)a5, v247, a1, (char *)&v305);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                v238 = *(unsigned __int16 *)(v123 - 16);
                v248 = v318[0];
                if (v318[0] != v305.__r_.__value_.__s.__data_[0] || *(_BYTE *)(a1 + 416))
                {
                  if (!*(_QWORD *)(a1 + 408))
                    *(_QWORD *)(a1 + 408) = 1;
                  v249 = *(_QWORD *)(a1 + 384);
                  if (v249 == *(_QWORD *)(a1 + 392))
                  {
                    sub_1DF366C90(v296, 1uLL);
                    v249 = *v302;
                  }
                  *(_QWORD *)(a1 + 384) = v249 - 1;
                  *(_BYTE *)(v249 - 1) = v248;
                  v250 = *(_DWORD *)(a1 + 376);
                  v251 = *(_DWORD *)(a1 + 368) - *(_DWORD *)(a1 + 384);
                  goto LABEL_552;
                }
                goto LABEL_553;
              case 4:
                v143 = *(_QWORD *)(v126 + 232);
                v144 = *(_QWORD *)(a1 + 384);
                if (v144 - *(_QWORD *)(a1 + 392) >= v143)
                {
                  *v24 = v144 - v143;
                  if (!v143)
                    goto LABEL_333;
                }
                else
                {
                  sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v143;
                }
                v190 = 0;
                do
                  *(_BYTE *)(*v24 + v190++) = 0;
                while (v143 != v190);
LABEL_333:
                if (*(_BYTE *)(v122 + 200))
                {
                  v318[0] = 0;
                  v191 = (char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v191 = *(char **)v191;
                  sub_1DF34CF5C((_WORD *)a5, v191, a1, v318);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v15 = sub_1DF35327C((uint64_t)v296, v318[0]);
                }
                else
                {
                  v318[0] = 0;
                  v305.__r_.__value_.__s.__data_[0] = 0;
                  v192 = (char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v192 = *(char **)v192;
                  sub_1DF34CF5C((_WORD *)a5, v192, a1, v318);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v193 = (char *)(v126 + 184);
                  if (*(char *)(v126 + 207) < 0)
                    v193 = *(char **)v193;
                  sub_1DF34CF5C((_WORD *)a5, v193, a1, &v305);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v194 = *(unsigned __int16 *)(v123 - 16);
                  if (v318[0] != v305.__r_.__value_.__s.__data_[0] || *(_BYTE *)(a1 + 416))
                  {
                    v195 = (uint64_t *)(a1 + 336);
                    v196 = sub_1DF35327C((uint64_t)v296, v318[0]);
                    goto LABEL_429;
                  }
                }
                goto LABEL_554;
              case 5:
                v145 = *(_QWORD *)(v126 + 232);
                v146 = *(_QWORD *)(a1 + 384);
                if (v146 - *(_QWORD *)(a1 + 392) >= v145)
                {
                  *v24 = v146 - v145;
                  if (!v145)
                    goto LABEL_350;
                }
                else
                {
                  sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v145;
                }
                v197 = 0;
                do
                  *(_BYTE *)(*v24 + v197++) = 0;
                while (v145 != v197);
LABEL_350:
                if (*(_BYTE *)(v122 + 200))
                {
                  *(_WORD *)v318 = 0;
                  v198 = (char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v198 = *(char **)v198;
                  sub_1DF353758((_WORD *)a5, v198, a1, (__int16 *)v318);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
LABEL_362:
                  v15 = sub_1DF3822E0((uint64_t)v296, *(__int16 *)v318);
                }
                else
                {
                  *(_WORD *)v318 = 0;
                  LOWORD(v305.__r_.__value_.__l.__data_) = 0;
                  v252 = (char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v252 = *(char **)v252;
                  sub_1DF353758((_WORD *)a5, v252, a1, (__int16 *)v318);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v253 = (char *)(v126 + 184);
                  if (*(char *)(v126 + 207) < 0)
                    v253 = *(char **)v253;
                  sub_1DF353758((_WORD *)a5, v253, a1, (__int16 *)&v305);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v194 = *(unsigned __int16 *)(v123 - 16);
                  if (*(unsigned __int16 *)v318 != LOWORD(v305.__r_.__value_.__l.__data_) || *(_BYTE *)(a1 + 416))
                  {
LABEL_371:
                    v195 = (uint64_t *)(a1 + 336);
                    v196 = sub_1DF3822E0((uint64_t)v296, *(__int16 *)v318);
                    goto LABEL_429;
                  }
                }
                goto LABEL_554;
              case 6:
                v147 = *(_QWORD *)(v126 + 232);
                v148 = *(_QWORD *)(a1 + 384);
                if (v148 - *(_QWORD *)(a1 + 392) >= v147)
                {
                  *v24 = v148 - v147;
                  if (!v147)
                    goto LABEL_358;
                }
                else
                {
                  sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v147;
                }
                v199 = 0;
                do
                  *(_BYTE *)(*v24 + v199++) = 0;
                while (v147 != v199);
LABEL_358:
                if (*(_BYTE *)(v122 + 200))
                {
                  *(_WORD *)v318 = 0;
                  v200 = (char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v200 = *(char **)v200;
                  sub_1DF34D3B4((_WORD *)a5, v200, a1, v318);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  goto LABEL_362;
                }
                *(_WORD *)v318 = 0;
                LOWORD(v305.__r_.__value_.__l.__data_) = 0;
                v201 = (char *)(v123 - 40);
                if (*(char *)(v123 - 17) < 0)
                  v201 = *(char **)v201;
                sub_1DF34D3B4((_WORD *)a5, v201, a1, v318);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                v202 = (char *)(v126 + 184);
                if (*(char *)(v126 + 207) < 0)
                  v202 = *(char **)v202;
                sub_1DF34D3B4((_WORD *)a5, v202, a1, &v305);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                v194 = *(unsigned __int16 *)(v123 - 16);
                if (*(unsigned __int16 *)v318 != LOWORD(v305.__r_.__value_.__l.__data_) || *(_BYTE *)(a1 + 416))
                  goto LABEL_371;
                goto LABEL_554;
              case 7:
                v149 = *(_QWORD *)(v126 + 232);
                v150 = *(_QWORD *)(a1 + 384);
                if (v150 - *(_QWORD *)(a1 + 392) >= v149)
                {
                  *v24 = v150 - v149;
                  if (!v149)
                    goto LABEL_375;
                }
                else
                {
                  sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v149;
                }
                v203 = 0;
                do
                  *(_BYTE *)(*v24 + v203++) = 0;
                while (v149 != v203);
LABEL_375:
                if (*(_BYTE *)(v122 + 200))
                {
                  *(_DWORD *)v318 = 0;
                  v204 = (char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v204 = *(char **)v204;
                  sub_1DF353BC0((_WORD *)a5, v204, a1, (unsigned int *)v318);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  if (*(_QWORD *)(a1 + 408) <= 3uLL)
                    *(_QWORD *)(a1 + 408) = 4;
                  v176 = *(_DWORD *)v318;
                  v205 = *(_QWORD *)(a1 + 384);
                  v178 = *(_QWORD *)(a1 + 392);
                  v206 = ((_BYTE)v205 - (*(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 376))) & 3;
                  v24 = (_QWORD *)(a1 + 384);
                  if (v205 - v178 < v206)
                  {
                    v15 = sub_1DF366C90(v296, ((_BYTE)v205- (*(_DWORD *)(a1 + 368)+ *(_DWORD *)(a1 + 376))) & 3);
                    v24 = (_QWORD *)(a1 + 384);
                    *v302 -= v206;
                  }
                  else
                  {
                    v180 = v205 - v206;
                    *v302 = v180;
                    if (!v206)
                      goto LABEL_400;
                  }
                  v207 = 0;
                  do
                    *(_BYTE *)(*v24 + v207++) = 0;
                  while (v206 != v207);
                  goto LABEL_399;
                }
                *(_DWORD *)v318 = 0;
                LODWORD(v305.__r_.__value_.__l.__data_) = 0;
                v254 = (char *)(v123 - 40);
                if (*(char *)(v123 - 17) < 0)
                  v254 = *(char **)v254;
                sub_1DF353BC0((_WORD *)a5, v254, a1, (unsigned int *)v318);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                v255 = (char *)(v126 + 184);
                if (*(char *)(v126 + 207) < 0)
                  v255 = *(char **)v255;
                sub_1DF353BC0((_WORD *)a5, v255, a1, (unsigned int *)&v305);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                v238 = *(unsigned __int16 *)(v123 - 16);
                v239 = *(_DWORD *)v318;
                if (*(_DWORD *)v318 == LODWORD(v305.__r_.__value_.__l.__data_) && !*(_BYTE *)(a1 + 416))
                  goto LABEL_553;
                v256 = (_QWORD *)(a1 + 384);
                if (*(_QWORD *)(a1 + 408) <= 3uLL)
                  *(_QWORD *)(a1 + 408) = 4;
                v257 = *(_QWORD *)(a1 + 384);
                v242 = *(_QWORD *)(a1 + 392);
                v258 = ((_BYTE)v257 - (*(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 376))) & 3;
                if (v257 - v242 < v258)
                {
                  sub_1DF366C90(v296, ((_BYTE)v257 - (*(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 376))) & 3);
                  v256 = (_QWORD *)(a1 + 384);
                  *v302 -= v258;
                }
                else
                {
                  v244 = v257 - v258;
                  *v302 = v244;
                  if (!v258)
                    goto LABEL_549;
                }
                v259 = 0;
                do
                  *(_BYTE *)(*v256 + v259++) = 0;
                while (v258 != v259);
                goto LABEL_548;
              case 8:
                v151 = *(_QWORD *)(v126 + 232);
                v152 = *(_QWORD *)(a1 + 384);
                if (v152 - *(_QWORD *)(a1 + 392) >= v151)
                {
                  *v24 = v152 - v151;
                  if (!v151)
                    goto LABEL_389;
                }
                else
                {
                  sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v151;
                }
                v208 = 0;
                do
                  *(_BYTE *)(*v24 + v208++) = 0;
                while (v151 != v208);
LABEL_389:
                if (!*(_BYTE *)(v122 + 200))
                {
                  *(_DWORD *)v318 = 0;
                  LODWORD(v305.__r_.__value_.__l.__data_) = 0;
                  v260 = (char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v260 = *(char **)v260;
                  sub_1DF34C708((_WORD *)a5, v260, a1, v318);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v261 = (char *)(v126 + 184);
                  if (*(char *)(v126 + 207) < 0)
                    v261 = *(char **)v261;
                  sub_1DF34C708((_WORD *)a5, v261, a1, &v305);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v238 = *(unsigned __int16 *)(v123 - 16);
                  v239 = *(_DWORD *)v318;
                  if (*(_DWORD *)v318 != LODWORD(v305.__r_.__value_.__l.__data_) || *(_BYTE *)(a1 + 416))
                  {
                    v262 = (_QWORD *)(a1 + 384);
                    if (*(_QWORD *)(a1 + 408) <= 3uLL)
                      *(_QWORD *)(a1 + 408) = 4;
                    v263 = *(_QWORD *)(a1 + 384);
                    v242 = *(_QWORD *)(a1 + 392);
                    v264 = ((_BYTE)v263
                          - (*(_DWORD *)(a1 + 368)
                           + *(_DWORD *)(a1 + 376))) & 3;
                    if (v263 - v242 < v264)
                    {
                      sub_1DF366C90(v296, ((_BYTE)v263 - (*(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 376))) & 3);
                      v262 = (_QWORD *)(a1 + 384);
                      *v302 -= v264;
LABEL_546:
                      v265 = 0;
                      do
                        *(_BYTE *)(*v262 + v265++) = 0;
                      while (v264 != v265);
LABEL_548:
                      v244 = *(_QWORD *)(a1 + 384);
                      v242 = *(_QWORD *)(a1 + 392);
                    }
                    else
                    {
                      v244 = v263 - v264;
                      *v302 = v244;
                      if (v264)
                        goto LABEL_546;
                    }
LABEL_549:
                    if ((unint64_t)(v244 - v242) <= 3)
                    {
                      sub_1DF366C90(v296, 4uLL);
                      v244 = *v302;
                    }
                    *(_DWORD *)(v244 - 4) = v239;
                    v266 = v244 - 4;
                    *(_QWORD *)(a1 + 384) = v266;
                    v250 = *(_DWORD *)(a1 + 376);
                    v251 = *(_DWORD *)(a1 + 368) - v266;
LABEL_552:
                    v15 = (unint64_t)sub_1DF366DF8(v296, v238, v251 + v250);
                  }
LABEL_553:
                  v12 = v295;
                  goto LABEL_554;
                }
                *(_DWORD *)v318 = 0;
                v209 = (char *)(v123 - 40);
                if (*(char *)(v123 - 17) < 0)
                  v209 = *(char **)v209;
                sub_1DF34C708((_WORD *)a5, v209, a1, v318);
                *(_BYTE *)(a5 + 1) = 1;
                if (*(_BYTE *)a5)
                  return;
                if (*(_QWORD *)(a1 + 408) <= 3uLL)
                  *(_QWORD *)(a1 + 408) = 4;
                v176 = *(_DWORD *)v318;
                v210 = *(_QWORD *)(a1 + 384);
                v178 = *(_QWORD *)(a1 + 392);
                v211 = ((_BYTE)v210 - (*(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 376))) & 3;
                v24 = (_QWORD *)(a1 + 384);
                if (v210 - v178 < v211)
                {
                  v15 = sub_1DF366C90(v296, ((_BYTE)v210- (*(_DWORD *)(a1 + 368)+ *(_DWORD *)(a1 + 376))) & 3);
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v211;
                }
                else
                {
                  v180 = v210 - v211;
                  *v302 = v180;
                  if (!v211)
                    goto LABEL_400;
                }
                v212 = 0;
                do
                  *(_BYTE *)(*v24 + v212++) = 0;
                while (v211 != v212);
LABEL_399:
                v180 = *(_QWORD *)(a1 + 384);
                v178 = *(_QWORD *)(a1 + 392);
LABEL_400:
                if ((unint64_t)(v180 - v178) <= 3)
                {
                  v15 = sub_1DF366C90(v296, 4uLL);
                  v24 = (_QWORD *)(a1 + 384);
                  v180 = *v302;
                }
                *(_DWORD *)(v180 - 4) = v176;
                *v24 = v180 - 4;
LABEL_403:
                v12 = v295;
                break;
              case 9:
                v153 = *(_QWORD *)(v126 + 232);
                v154 = *(_QWORD *)(a1 + 384);
                if (v154 - *(_QWORD *)(a1 + 392) >= v153)
                {
                  *v24 = v154 - v153;
                  if (!v153)
                    goto LABEL_407;
                }
                else
                {
                  sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v153;
                }
                v213 = 0;
                do
                  *(_BYTE *)(*v24 + v213++) = 0;
                while (v153 != v213);
LABEL_407:
                if (*(_BYTE *)(v122 + 200))
                {
                  *(_QWORD *)v318 = 0;
                  v214 = (char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v214 = *(char **)v214;
                  sub_1DF354028((_WORD *)a5, v214, a1, (uint64_t *)v318);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v15 = sub_1DF3823C8((uint64_t)v296, *(uint64_t *)v318);
                }
                else
                {
                  *(_QWORD *)v318 = 0;
                  v305.__r_.__value_.__r.__words[0] = 0;
                  v267 = (char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v267 = *(char **)v267;
                  sub_1DF354028((_WORD *)a5, v267, a1, (uint64_t *)v318);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v268 = (char *)(v126 + 184);
                  if (*(char *)(v126 + 207) < 0)
                    v268 = *(char **)v268;
                  sub_1DF354028((_WORD *)a5, v268, a1, (uint64_t *)&v305);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v194 = *(unsigned __int16 *)(v123 - 16);
                  if (*(_QWORD *)v318 != v305.__r_.__value_.__r.__words[0] || *(_BYTE *)(a1 + 416))
                  {
                    v195 = (uint64_t *)(a1 + 336);
                    v196 = sub_1DF3823C8((uint64_t)v296, *(uint64_t *)v318);
                    goto LABEL_429;
                  }
                }
                goto LABEL_554;
              case 10:
                v155 = *(_QWORD *)(v126 + 232);
                v156 = *(_QWORD *)(a1 + 384);
                if (v156 - *(_QWORD *)(a1 + 392) >= v155)
                {
                  *v24 = v156 - v155;
                  if (!v155)
                    goto LABEL_415;
                }
                else
                {
                  sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v155;
                }
                v215 = 0;
                do
                  *(_BYTE *)(*v24 + v215++) = 0;
                while (v155 != v215);
LABEL_415:
                if (*(_BYTE *)(v122 + 200))
                {
                  *(_QWORD *)v318 = 0;
                  v216 = (char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v216 = *(char **)v216;
                  sub_1DF34D80C((_WORD *)a5, v216, a1, (unint64_t *)v318);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v15 = sub_1DF3530AC((uint64_t)v296, *(uint64_t *)v318);
                }
                else
                {
                  *(_QWORD *)v318 = 0;
                  v305.__r_.__value_.__r.__words[0] = 0;
                  v217 = (char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v217 = *(char **)v217;
                  sub_1DF34D80C((_WORD *)a5, v217, a1, (unint64_t *)v318);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v218 = (char *)(v126 + 184);
                  if (*(char *)(v126 + 207) < 0)
                    v218 = *(char **)v218;
                  sub_1DF34D80C((_WORD *)a5, v218, a1, (unint64_t *)&v305);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v194 = *(unsigned __int16 *)(v123 - 16);
                  if (*(_QWORD *)v318 != v305.__r_.__value_.__r.__words[0] || *(_BYTE *)(a1 + 416))
                  {
                    v195 = (uint64_t *)(a1 + 336);
                    v196 = sub_1DF3530AC((uint64_t)v296, *(uint64_t *)v318);
                    goto LABEL_429;
                  }
                }
                goto LABEL_554;
              case 11:
                v157 = *(_QWORD *)(v126 + 232);
                v158 = *(_QWORD *)(a1 + 384);
                if (v158 - *(_QWORD *)(a1 + 392) >= v157)
                {
                  *v24 = v158 - v157;
                  if (!v157)
                    goto LABEL_433;
                }
                else
                {
                  sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v157;
                }
                v219 = 0;
                do
                  *(_BYTE *)(*v24 + v219++) = 0;
                while (v157 != v219);
LABEL_433:
                if (*(_BYTE *)(v122 + 200))
                {
                  *(_DWORD *)v318 = 0;
                  v220 = (char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v220 = *(char **)v220;
                  sub_1DF354348((_WORD *)a5, v220, a1, (float *)v318);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v15 = sub_1DF382428((uint64_t)v296, *(float *)v318);
                }
                else
                {
                  *(_DWORD *)v318 = 0;
                  LODWORD(v305.__r_.__value_.__l.__data_) = 0;
                  v269 = (char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v269 = *(char **)v269;
                  sub_1DF354348((_WORD *)a5, v269, a1, (float *)v318);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v270 = (char *)(v126 + 184);
                  if (*(char *)(v126 + 207) < 0)
                    v270 = *(char **)v270;
                  sub_1DF354348((_WORD *)a5, v270, a1, (float *)&v305);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v194 = *(unsigned __int16 *)(v123 - 16);
                  if (*(float *)v318 != *(float *)&v305.__r_.__value_.__l.__data_ || *(_BYTE *)(a1 + 416))
                  {
                    v195 = (uint64_t *)(a1 + 336);
                    v196 = sub_1DF382428((uint64_t)v296, *(float *)v318);
                    goto LABEL_429;
                  }
                }
                goto LABEL_554;
              case 12:
                v159 = *(_QWORD *)(v126 + 232);
                v160 = *(_QWORD *)(a1 + 384);
                if (v160 - *(_QWORD *)(a1 + 392) >= v159)
                {
                  *v24 = v160 - v159;
                  if (!v159)
                    goto LABEL_441;
                }
                else
                {
                  sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v159;
                }
                v221 = 0;
                do
                  *(_BYTE *)(*v24 + v221++) = 0;
                while (v159 != v221);
LABEL_441:
                if (*(_BYTE *)(v122 + 200))
                {
                  *(_QWORD *)v318 = 0;
                  v222 = (char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v222 = *(char **)v222;
                  sub_1DF354544((_WORD *)a5, v222, a1, (double *)v318);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v15 = sub_1DF382490((uint64_t)v296, *(double *)v318);
                }
                else
                {
                  *(_QWORD *)v318 = 0;
                  v305.__r_.__value_.__r.__words[0] = 0;
                  v271 = (char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v271 = *(char **)v271;
                  sub_1DF354544((_WORD *)a5, v271, a1, (double *)v318);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v272 = (char *)(v126 + 184);
                  if (*(char *)(v126 + 207) < 0)
                    v272 = *(char **)v272;
                  sub_1DF354544((_WORD *)a5, v272, a1, (double *)&v305);
                  *(_BYTE *)(a5 + 1) = 1;
                  if (*(_BYTE *)a5)
                    return;
                  v194 = *(unsigned __int16 *)(v123 - 16);
                  if (*(double *)v318 != *(double *)&v305.__r_.__value_.__l.__data_ || *(_BYTE *)(a1 + 416))
                  {
                    v195 = (uint64_t *)(a1 + 336);
                    v196 = sub_1DF382490((uint64_t)v296, *(double *)v318);
LABEL_429:
                    v15 = (unint64_t)sub_1DF366DF8(v195, v194, v196);
                  }
                }
LABEL_554:
                v24 = (_QWORD *)(a1 + 384);
                break;
              case 13:
                v161 = *(_QWORD *)(v126 + 232);
                v162 = *(_QWORD *)(a1 + 384);
                if (v162 - *(_QWORD *)(a1 + 392) >= v161)
                {
                  *v24 = v162 - v161;
                  if (!v161)
                    goto LABEL_461;
                }
                else
                {
                  v15 = sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v161;
                }
                v223 = 0;
                do
                  *(_BYTE *)(*v24 + v223++) = 0;
                while (v161 != v223);
                goto LABEL_461;
              case 14:
                v163 = *(_QWORD *)(v126 + 232);
                v164 = *(_QWORD *)(a1 + 384);
                if (v164 - *(_QWORD *)(a1 + 392) >= v163)
                {
                  *v24 = v164 - v163;
                  if (!v163)
                    goto LABEL_461;
                }
                else
                {
                  v15 = sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v163;
                }
                v224 = 0;
                do
                  *(_BYTE *)(*v24 + v224++) = 0;
                while (v163 != v224);
                goto LABEL_461;
              case 15:
                v165 = *(_QWORD *)(v126 + 232);
                v166 = *(_QWORD *)(a1 + 384);
                if (v166 - *(_QWORD *)(a1 + 392) >= v165)
                {
                  *v24 = v166 - v165;
                  if (!v165)
                    goto LABEL_461;
                }
                else
                {
                  v15 = sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v165;
                }
                v225 = 0;
                do
                  *(_BYTE *)(*v24 + v225++) = 0;
                while (v165 != v225);
                goto LABEL_461;
              case 16:
                v167 = *(_QWORD *)(v126 + 232);
                v168 = *(_QWORD *)(a1 + 384);
                if (v168 - *(_QWORD *)(a1 + 392) >= v167)
                {
                  *v24 = v168 - v167;
                  if (!v167)
                    goto LABEL_461;
                }
                else
                {
                  v15 = sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v167;
                }
                v226 = 0;
                do
                  *(_BYTE *)(*v24 + v226++) = 0;
                while (v167 != v226);
LABEL_461:
                if (*(_DWORD *)(v126 + 152) == 15 && (v227 = *(_QWORD *)(v126 + 160), *(_BYTE *)(v227 + 200)))
                {
                  v15 = (unint64_t)flatbuffers::Parser::SerializeStruct(v15, (uint64_t)v296, v227, v120);
                }
                else
                {
                  v228 = (const char *)(v123 - 40);
                  if (*(char *)(v123 - 17) < 0)
                    v228 = *(const char **)v228;
                  v229 = atoi(v228);
                  *(_WORD *)a5 = 256;
                  v15 = (unint64_t)sub_1DF354740(v296, *(unsigned __int16 *)(v123 - 16), v229);
                }
                goto LABEL_554;
              case 17:
                v169 = *(_QWORD *)(v126 + 232);
                v170 = *(_QWORD *)(a1 + 384);
                if (v170 - *(_QWORD *)(a1 + 392) >= v169)
                {
                  *v24 = v170 - v169;
                  if (!v169)
                    goto LABEL_469;
                }
                else
                {
                  sub_1DF366C90(v296, *(_QWORD *)(v126 + 232));
                  v24 = (_QWORD *)(a1 + 384);
                  *v302 -= v169;
                }
                v230 = 0;
                do
                  *(_BYTE *)(*v24 + v230++) = 0;
                while (v169 != v230);
LABEL_469:
                v231 = (_QWORD *)(v123 - 40);
                if (*(char *)(v123 - 17) < 0)
                  v231 = (_QWORD *)*v231;
                v15 = sub_1DF348948((int *)v120);
                v24 = (_QWORD *)(a1 + 384);
                if (!v15)
                  break;
                v232 = v15;
                v233 = *(_QWORD *)(a1 + 384);
                if (v233 - *(_QWORD *)(a1 + 392) < v15)
                {
                  sub_1DF366C90(v296, v15);
                  v24 = (_QWORD *)(a1 + 384);
                  v233 = *v302;
                }
                *v24 = v233 - v232;
                v15 = (unint64_t)memcpy((void *)(v233 - v232), v231, v232);
                goto LABEL_554;
              default:
                break;
            }
          }
        }
        while (v120 != *(_QWORD *)(a1 + 1184) + 72 * (_QWORD)__stra);
        v120 = *(_QWORD *)(a1 + 1184);
        a2 = v122;
        v96 = v298;
        v121 = v293;
      }
      v273 = v299 >= 2;
      v299 >>= 1;
    }
    while (v273);
    if (v12)
    {
      v274 = v120 - 72;
      do
      {
        if (*(char *)(v274 + 55) < 0)
          operator delete(*(void **)(v274 + 32));
        *(_QWORD *)(a1 + 1184) = v274;
        v274 -= 72;
        --v295;
      }
      while (v295);
    }
    if (*(_BYTE *)(a2 + 200))
    {
      v275 = *(_QWORD *)(a1 + 384);
      *(_QWORD *)(a1 + 392) -= 8 * *(unsigned int *)(a1 + 400);
      *(_DWORD *)(a1 + 400) = 0;
      *(_WORD *)(a1 + 404) = 0;
      MEMORY[0x1E0BFF5C0](a3, v275, *(_QWORD *)(a2 + 216));
      *(_QWORD *)(a1 + 384) += *(_QWORD *)(a2 + 216);
    }
    else
    {
      v276 = sub_1DF3548F4((uint64_t)v296, v291);
      if (v96)
        *v96 = v276;
      if (a3)
      {
        sub_1DF367FB0((uint64_t)v318);
        std::ostream::operator<<();
        std::stringbuf::str();
        *(_QWORD *)v318 = v289;
        *(_QWORD *)&v318[*(_QWORD *)(v289 - 24)] = v287;
        *(_QWORD *)&v318[16] = v288;
        *(_QWORD *)&v318[24] = MEMORY[0x1E0DE4FB8] + 16;
        if (v324 < 0)
          operator delete(v323);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1E0BFF758](v325);
        if (*(char *)(a3 + 23) < 0)
          operator delete(*(void **)a3);
        *(std::string *)a3 = v305;
      }
    }
    *(_WORD *)a5 = 0;
    return;
  }
  std::operator+<char>();
  flatbuffers::Parser::Error(a1, (_WORD *)a5);
  if ((v318[23] & 0x80000000) != 0)
  {
    v118 = *(void **)v318;
LABEL_219:
    operator delete(v118);
  }
}

uint64_t *flatbuffers::Parser::SerializeStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return flatbuffers::Parser::SerializeStruct(a1, a1 + 336, a2, a3);
}

void flatbuffers::Parser::ParseVector(flatbuffers::Parser *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  flatbuffers::Parser *v8;
  uint64_t v10;
  BOOL v11;
  int v12;
  int v13;
  __int16 v14;
  void *v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  int64x2_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  const char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  flatbuffers::Parser *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  const char *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  unsigned __int8 v143;
  unsigned __int8 v144;
  uint64_t v145;
  unsigned int *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v151;
  uint64_t v152;
  int v153[2];
  int v154;
  unint64_t *v155;
  int64x2_t *v156;
  __int16 v158;
  void *v159[2];
  __int128 v160;
  void *__p[3];
  __int16 v162;
  uint64_t v163;
  _BYTE v164[32];
  __int128 v165;
  void *v166;
  __int16 v167;
  uint64_t v168;
  int64x2_t v169;
  unint64_t v170;
  unint64_t *v171;
  _QWORD v172[5];

  v8 = a1;
  v172[2] = *MEMORY[0x1E0C80C00];
  flatbuffers::Parser::Expect(a1, 91, (uint64_t)&v158);
  HIBYTE(v158) = 1;
  if ((_BYTE)v158)
    goto LABEL_42;
  v10 = 0;
  *(_QWORD *)v153 = v8;
  v155 = (unint64_t *)((char *)v8 + 1192);
  v156 = (int64x2_t *)((char *)v8 + 1176);
  v151 = a2;
  v152 = a4;
  while (1)
  {
    v11 = !*((_BYTE *)v8 + 729) || (_DWORD)v10 == 0;
    if (v11 && *((_DWORD *)v8 + 5) == 93)
      break;
    HIBYTE(v166) = 1;
    LOWORD(v165) = 48;
    v167 = -1;
    *(_OWORD *)v164 = *(_OWORD *)a2;
    *(_OWORD *)&v164[10] = *(_OWORD *)(a2 + 10);
    v12 = *((_DWORD *)v8 + 301);
    if (v12 < 64)
    {
      *((_DWORD *)v8 + 301) = v12 + 1;
      flatbuffers::Parser::ParseAnyValue(v8, v164, a4, a5, 0, v10, 1);
      --*((_DWORD *)v8 + 301);
    }
    else
    {
      flatbuffers::Parser::RecurseError(v8, &v158);
    }
    v13 = 1;
    HIBYTE(v158) = 1;
    if (!(_BYTE)v158)
    {
      *(_OWORD *)v159 = *(_OWORD *)v164;
      v160 = *(_OWORD *)&v164[16];
      if (SHIBYTE(v166) < 0)
      {
        sub_1DF36DA38(__p, (void *)v165, *((unint64_t *)&v165 + 1));
      }
      else
      {
        *(_OWORD *)__p = v165;
        __p[2] = v166;
      }
      v14 = v167;
      v162 = v167;
      v163 = 0;
      v15 = __p[0];
      v172[0] = __p[1];
      *(void **)((char *)v172 + 7) = *(void **)((char *)&__p[1] + 7);
      v16 = HIBYTE(__p[2]);
      memset(__p, 0, sizeof(__p));
      v17 = *((_QWORD *)v8 + 148);
      v18 = *((_QWORD *)v8 + 149);
      if (v17 >= v18)
      {
        v154 = v10;
        v22 = a6;
        v23 = v156->i64[0];
        v24 = 0x8E38E38E38E38E39 * ((uint64_t)(v17 - v156->i64[0]) >> 3);
        v25 = v24 + 1;
        if (v24 + 1 > 0x38E38E38E38E38ELL)
          abort();
        if (0x1C71C71C71C71C72 * ((uint64_t)(v18 - v23) >> 3) > v25)
          v25 = 0x1C71C71C71C71C72 * ((uint64_t)(v18 - v23) >> 3);
        if (0x8E38E38E38E38E39 * ((uint64_t)(v18 - v23) >> 3) >= 0x1C71C71C71C71C7)
          v26 = 0x38E38E38E38E38ELL;
        else
          v26 = v25;
        v171 = v155;
        if (v26 > 0x38E38E38E38E38ELL)
          sub_1DF3667C0();
        v27 = (char *)operator new(72 * v26);
        v28 = v160;
        v29 = &v27[72 * v24];
        *(_OWORD *)v29 = *(_OWORD *)v159;
        *((_OWORD *)v29 + 1) = v28;
        v30 = v172[0];
        *((_QWORD *)v29 + 4) = v15;
        *((_QWORD *)v29 + 5) = v30;
        *(_QWORD *)(v29 + 47) = *(_QWORD *)((char *)v172 + 7);
        v29[55] = v16;
        v172[0] = 0;
        *(_QWORD *)((char *)v172 + 7) = 0;
        *((_WORD *)v29 + 28) = v14;
        *((_QWORD *)v29 + 8) = 0;
        if (v17 == v23)
        {
          v34 = vdupq_n_s64(v17);
          v31 = &v27[72 * v24];
          a6 = v22;
          a2 = v151;
        }
        else
        {
          v31 = &v27[72 * v24];
          a6 = v22;
          do
          {
            v32 = *(_OWORD *)(v17 - 72);
            *(_OWORD *)(v31 - 56) = *(_OWORD *)(v17 - 56);
            *(_OWORD *)(v31 - 72) = v32;
            v33 = *(_OWORD *)(v17 - 40);
            *((_QWORD *)v31 - 3) = *(_QWORD *)(v17 - 24);
            *(_OWORD *)(v31 - 40) = v33;
            *(_QWORD *)(v17 - 32) = 0;
            *(_QWORD *)(v17 - 24) = 0;
            *(_QWORD *)(v17 - 40) = 0;
            *((_WORD *)v31 - 8) = *(_WORD *)(v17 - 16);
            *((_QWORD *)v31 - 1) = *(_QWORD *)(v17 - 8);
            v31 -= 72;
            v17 -= 72;
          }
          while (v17 != v23);
          v34 = *v156;
          v18 = *v155;
          a2 = v151;
        }
        v21 = (unint64_t)(v29 + 72);
        v8 = *(flatbuffers::Parser **)v153;
        *(_QWORD *)(*(_QWORD *)v153 + 1176) = v31;
        *(_QWORD *)(*(_QWORD *)v153 + 1184) = v29 + 72;
        v169 = v34;
        *(_QWORD *)(*(_QWORD *)v153 + 1192) = &v27[72 * v26];
        v170 = v18;
        v168 = v34.i64[0];
        sub_1DF370EEC((uint64_t)&v168);
        LODWORD(v10) = v154;
        a4 = v152;
      }
      else
      {
        v19 = v160;
        *(_OWORD *)v17 = *(_OWORD *)v159;
        *(_OWORD *)(v17 + 16) = v19;
        v20 = v172[0];
        *(_QWORD *)(v17 + 32) = v15;
        *(_QWORD *)(v17 + 40) = v20;
        *(_QWORD *)(v17 + 47) = *(_QWORD *)((char *)v172 + 7);
        *(_BYTE *)(v17 + 55) = v16;
        *(_WORD *)(v17 + 56) = v14;
        v21 = v17 + 72;
        *(_QWORD *)(v17 + 64) = 0;
      }
      *((_QWORD *)v8 + 148) = v21;
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      v13 = 0;
      v158 = 0;
    }
    if (SHIBYTE(v166) < 0)
    {
      operator delete((void *)v165);
      v13 = v158;
    }
    HIBYTE(v158) = 1;
    if (v13)
      goto LABEL_42;
    v10 = (v10 + 1);
    if (*((_DWORD *)v8 + 5) == 93)
      break;
    if (!*((_BYTE *)v8 + 954))
    {
      flatbuffers::Parser::Expect(v8, 44, (uint64_t)&v158);
      if ((_BYTE)v158)
        goto LABEL_42;
    }
    v158 = 256;
  }
  flatbuffers::Parser::Next(v8, (uint64_t)&v158);
  if ((_BYTE)v158)
  {
LABEL_42:
    *(_WORD *)a6 = 257;
    return;
  }
  v158 = 256;
  *(_WORD *)a6 = 256;
  BYTE7(v160) = 11;
  strcpy((char *)v159, "force_align");
  v35 = sub_1DF370B40(a4 + 72, (const void **)v159);
  if ((uint64_t *)(a4 + 80) == v35)
    v36 = 0;
  else
    v36 = v35[7];
  if (SBYTE7(v160) < 0)
    operator delete(v159[0]);
  if (v36)
  {
    v38 = (const char *)(v36 + 32);
    if (*(char *)(v36 + 55) < 0)
      v38 = *(const char **)v38;
    v37 = atoi(v38);
  }
  else
  {
    v37 = 1;
  }
  v39 = sub_1DF348948((int *)a2) * v10;
  v40 = sub_1DF382084(a2);
  v41 = v40;
  v42 = v10;
  v43 = v39 / v40 * v40;
  if (v37 > 1)
  {
    if (*((_QWORD *)v8 + 51) < v37)
      *((_QWORD *)v8 + 51) = v37;
    v44 = *((_QWORD *)v8 + 48);
    v45 = (v37 - 1) & (-(uint64_t)(*((_DWORD *)v8 + 92) - v44 + *((_DWORD *)v8 + 94)) - v43);
    if (v44 - *((_QWORD *)v8 + 49) < v45)
    {
      v40 = sub_1DF366C90((uint64_t *)v8 + 42, (v37 - 1) & (-(uint64_t)(*((_DWORD *)v8 + 92) - v44 + *((_DWORD *)v8 + 94)) - v43));
      *((_QWORD *)v8 + 48) -= v45;
    }
    else
    {
      *((_QWORD *)v8 + 48) = v44 - v45;
      if (!v45)
        goto LABEL_61;
    }
    v46 = 0;
    do
      *(_BYTE *)(*((_QWORD *)v8 + 48) + v46++) = 0;
    while (v45 != v46);
  }
LABEL_61:
  v47 = (uint64_t *)((char *)v8 + 336);
  *((_BYTE *)v8 + 406) = 1;
  v48 = *((_QWORD *)v8 + 51);
  if (v48 <= 3)
  {
    v48 = 4;
    *((_QWORD *)v8 + 51) = 4;
  }
  v49 = *((_QWORD *)v8 + 48);
  v50 = *((_QWORD *)v8 + 49);
  v51 = v8;
  v52 = ((_BYTE)v49 - *((_DWORD *)v8 + 94) - (*((_BYTE *)v8 + 368) + (_BYTE)v43)) & 3;
  if (v49 - v50 < v52)
  {
    v40 = sub_1DF366C90(v47, v52);
    *((_QWORD *)v51 + 48) -= v52;
  }
  else
  {
    *((_QWORD *)v51 + 48) = v49 - v52;
    if (!v52)
      goto LABEL_68;
  }
  v53 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v153 + 384) + v53++) = 0;
  while (v52 != v53);
  v48 = *(_QWORD *)(*(_QWORD *)v153 + 408);
LABEL_68:
  v54 = *(_QWORD *)v153;
  if (v48 < v41)
    *(_QWORD *)(*(_QWORD *)v153 + 408) = v41;
  v55 = *(_QWORD *)(*(_QWORD *)v153 + 384);
  v56 = (v41 - 1) & -(uint64_t)(v43
                             + (*(_DWORD *)(*(_QWORD *)v153 + 368)
                                            - v55
                                            + *(_DWORD *)(*(_QWORD *)v153 + 376)));
  if (v55 - *(_QWORD *)(*(_QWORD *)v153 + 392) < v56)
  {
    v40 = sub_1DF366C90(v47, v56);
    *(_QWORD *)(*(_QWORD *)v153 + 384) -= v56;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v153 + 384) = v55 - v56;
    if (!v56)
      goto LABEL_74;
  }
  v57 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v153 + 384) + v57++) = 0;
  while (v56 != v57);
LABEL_74:
  if (v42)
  {
    v58 = 0;
    v59 = *(_QWORD *)(*(_QWORD *)v153 + 1184);
    while (2)
    {
      switch(*(_DWORD *)(v59 - 72))
      {
        case 0xFFFFFFFC:
          v63 = (char *)(v59 - 40);
          if (*(char *)(v59 - 17) < 0)
            v63 = *(char **)v63;
          sub_1DF352C64((_WORD *)a6, v63, v54, (flatbuffers::ClassicLocale *)v159);
          *(_BYTE *)(a6 + 1) = 1;
          if (!*(_BYTE *)a6)
            goto LABEL_114;
          return;
        case 0xFFFFFFFD:
        case 0xA:
          v159[0] = 0;
          v61 = (char *)(v59 - 40);
          if (*(char *)(v59 - 17) < 0)
            v61 = *(char **)v61;
          sub_1DF34D80C((_WORD *)a6, v61, v54, (unint64_t *)v159);
          *(_BYTE *)(a6 + 1) = 1;
          if (!*(_BYTE *)a6)
          {
            v40 = sub_1DF3530AC((uint64_t)v47, (uint64_t)v159[0]);
            goto LABEL_243;
          }
          return;
        case 0xFFFFFFFE:
          LODWORD(v159[0]) = 0;
          v64 = (char *)(v59 - 40);
          if (*(char *)(v59 - 17) < 0)
            v64 = *(char **)v64;
          sub_1DF34C708((_WORD *)a6, v64, v54, v159);
          *(_BYTE *)(a6 + 1) = 1;
          if (!*(_BYTE *)a6)
          {
            if (*(_QWORD *)(v54 + 408) <= 3uLL)
              *(_QWORD *)(v54 + 408) = 4;
            v65 = (int)v159[0];
            v66 = *(_QWORD *)(v54 + 384);
            v67 = *(_QWORD *)(v54 + 392);
            v68 = ((_BYTE)v66 - (*(_DWORD *)(v54 + 368) + *(_DWORD *)(v54 + 376))) & 3;
            if (v66 - v67 < v68)
            {
              v40 = sub_1DF366C90(v47, ((_BYTE)v66 - (*(_DWORD *)(v54 + 368) + *(_DWORD *)(v54 + 376))) & 3);
              *(_QWORD *)(v54 + 384) -= v68;
            }
            else
            {
              v69 = v66 - v68;
              *(_QWORD *)(v54 + 384) = v69;
              if (!v68)
                goto LABEL_186;
            }
            v70 = 0;
            do
              *(_BYTE *)(*(_QWORD *)(v54 + 384) + v70++) = 0;
            while (v68 != v70);
            goto LABEL_185;
          }
          return;
        case 0xFFFFFFFF:
        case 6:
          LOWORD(v159[0]) = 0;
          v62 = (char *)(v59 - 40);
          if (*(char *)(v59 - 17) < 0)
            v62 = *(char **)v62;
          sub_1DF34D3B4((_WORD *)a6, v62, v54, v159);
          *(_BYTE *)(a6 + 1) = 1;
          if (!*(_BYTE *)a6)
            goto LABEL_114;
          return;
        case 0:
        case 1:
        case 2:
        case 4:
          LOBYTE(v159[0]) = 0;
          v60 = (char *)(v59 - 40);
          if (*(char *)(v59 - 17) < 0)
            v60 = *(char **)v60;
          sub_1DF34CF5C((_WORD *)a6, v60, v54, v159);
          *(_BYTE *)(a6 + 1) = 1;
          if (!*(_BYTE *)a6)
          {
            v40 = sub_1DF35327C((uint64_t)v47, (char)v159[0]);
            goto LABEL_243;
          }
          return;
        case 3:
          LOBYTE(v159[0]) = 0;
          v71 = (char *)(v59 - 40);
          if (*(char *)(v59 - 17) < 0)
            v71 = *(char **)v71;
          sub_1DF3532F0((_WORD *)a6, v71, v54, (char *)v159);
          *(_BYTE *)(a6 + 1) = 1;
          if (!*(_BYTE *)a6)
          {
            if (!*(_QWORD *)(v54 + 408))
              *(_QWORD *)(v54 + 408) = 1;
            v72 = (char)v159[0];
            v73 = *(_QWORD *)(v54 + 384);
            if (v73 == *(_QWORD *)(v54 + 392))
            {
              v40 = sub_1DF366C90(v47, 1uLL);
              v73 = *(_QWORD *)(v54 + 384);
            }
            *(_QWORD *)(v54 + 384) = v73 - 1;
            *(_BYTE *)(v73 - 1) = v72;
            goto LABEL_243;
          }
          return;
        case 5:
          LOWORD(v159[0]) = 0;
          v74 = (char *)(v59 - 40);
          if (*(char *)(v59 - 17) < 0)
            v74 = *(char **)v74;
          sub_1DF353758((_WORD *)a6, v74, v54, (__int16 *)v159);
          *(_BYTE *)(a6 + 1) = 1;
          if (!*(_BYTE *)a6)
          {
LABEL_114:
            v40 = sub_1DF3822E0((uint64_t)v47, (__int16)v159[0]);
            goto LABEL_243;
          }
          return;
        case 7:
          LODWORD(v159[0]) = 0;
          v75 = (char *)(v59 - 40);
          if (*(char *)(v59 - 17) < 0)
            v75 = *(char **)v75;
          sub_1DF353BC0((_WORD *)a6, v75, v54, (unsigned int *)v159);
          *(_BYTE *)(a6 + 1) = 1;
          if (!*(_BYTE *)a6)
          {
            if (*(_QWORD *)(v54 + 408) <= 3uLL)
              *(_QWORD *)(v54 + 408) = 4;
            v65 = (int)v159[0];
            v76 = *(_QWORD *)(v54 + 384);
            v67 = *(_QWORD *)(v54 + 392);
            v77 = ((_BYTE)v76 - (*(_DWORD *)(v54 + 368) + *(_DWORD *)(v54 + 376))) & 3;
            if (v76 - v67 < v77)
            {
              v40 = sub_1DF366C90(v47, ((_BYTE)v76 - (*(_DWORD *)(v54 + 368) + *(_DWORD *)(v54 + 376))) & 3);
              *(_QWORD *)(v54 + 384) -= v77;
            }
            else
            {
              v69 = v76 - v77;
              *(_QWORD *)(v54 + 384) = v69;
              if (!v77)
                goto LABEL_186;
            }
            v78 = 0;
            do
              *(_BYTE *)(*(_QWORD *)(v54 + 384) + v78++) = 0;
            while (v77 != v78);
            goto LABEL_185;
          }
          return;
        case 8:
          LODWORD(v159[0]) = 0;
          v79 = (char *)(v59 - 40);
          if (*(char *)(v59 - 17) < 0)
            v79 = *(char **)v79;
          sub_1DF34C708((_WORD *)a6, v79, v54, v159);
          *(_BYTE *)(a6 + 1) = 1;
          if (!*(_BYTE *)a6)
          {
            if (*(_QWORD *)(v54 + 408) <= 3uLL)
              *(_QWORD *)(v54 + 408) = 4;
            v65 = (int)v159[0];
            v80 = *(_QWORD *)(v54 + 384);
            v67 = *(_QWORD *)(v54 + 392);
            v81 = ((_BYTE)v80 - (*(_DWORD *)(v54 + 368) + *(_DWORD *)(v54 + 376))) & 3;
            if (v80 - v67 < v81)
            {
              v40 = sub_1DF366C90(v47, ((_BYTE)v80 - (*(_DWORD *)(v54 + 368) + *(_DWORD *)(v54 + 376))) & 3);
              *(_QWORD *)(v54 + 384) -= v81;
            }
            else
            {
              v69 = v80 - v81;
              *(_QWORD *)(v54 + 384) = v69;
              if (!v81)
                goto LABEL_186;
            }
            v82 = 0;
            do
              *(_BYTE *)(*(_QWORD *)(v54 + 384) + v82++) = 0;
            while (v81 != v82);
            goto LABEL_185;
          }
          return;
        case 9:
          v159[0] = 0;
          v83 = (char *)(v59 - 40);
          if (*(char *)(v59 - 17) < 0)
            v83 = *(char **)v83;
          sub_1DF354028((_WORD *)a6, v83, v54, (uint64_t *)v159);
          *(_BYTE *)(a6 + 1) = 1;
          if (!*(_BYTE *)a6)
          {
            v40 = sub_1DF3823C8((uint64_t)v47, (uint64_t)v159[0]);
            goto LABEL_243;
          }
          return;
        case 0xB:
          LODWORD(v159[0]) = 0;
          v84 = (char *)(v59 - 40);
          if (*(char *)(v59 - 17) < 0)
            v84 = *(char **)v84;
          sub_1DF354348((_WORD *)a6, v84, v54, (float *)v159);
          *(_BYTE *)(a6 + 1) = 1;
          if (!*(_BYTE *)a6)
          {
            v40 = sub_1DF382428((uint64_t)v47, *(float *)v159);
            goto LABEL_243;
          }
          return;
        case 0xC:
          v159[0] = 0;
          v85 = (char *)(v59 - 40);
          if (*(char *)(v59 - 17) < 0)
            v85 = *(char **)v85;
          sub_1DF354544((_WORD *)a6, v85, v54, (double *)v159);
          *(_BYTE *)(a6 + 1) = 1;
          if (!*(_BYTE *)a6)
          {
            v40 = sub_1DF382490((uint64_t)v47, *(double *)v159);
            goto LABEL_243;
          }
          return;
        case 0xD:
          v86 = (const char *)(v59 - 40);
          if (*(char *)(v59 - 17) < 0)
            v86 = *(const char **)v86;
          v40 = atoi(v86);
          v87 = v40;
          *(_WORD *)a6 = 256;
          if (*(_QWORD *)(v54 + 408) <= 3uLL)
            *(_QWORD *)(v54 + 408) = 4;
          v88 = *(_QWORD *)(v54 + 368);
          v89 = *(_QWORD *)(v54 + 376);
          v90 = *(_QWORD *)(v54 + 384);
          v91 = ((int)v90 - ((int)v88 + (int)v89)) & 3;
          if (v90 - *(_QWORD *)(v54 + 392) < v91)
          {
            v40 = sub_1DF366C90(v47, ((int)v90 - ((int)v88 + (int)v89)) & 3);
            *(_QWORD *)(v54 + 384) -= v91;
          }
          else
          {
            v92 = v90 - v91;
            *(_QWORD *)(v54 + 384) = v92;
            if (!v91)
            {
              v93 = v88 + v89 - v92;
LABEL_195:
              v119 = ((_BYTE)v92 - ((_BYTE)v88 + (_BYTE)v89)) & 3;
              v120 = *(_QWORD *)(*(_QWORD *)v153 + 392);
              if (v92 - v120 < v119)
              {
                v40 = sub_1DF366C90(v47, v119);
                *(_QWORD *)(*(_QWORD *)v153 + 384) -= v119;
              }
              else
              {
                v121 = v92 - v119;
                *(_QWORD *)(*(_QWORD *)v153 + 384) = v92 - v119;
                if (!v119)
                  goto LABEL_234;
              }
              v122 = 0;
              v54 = *(_QWORD *)v153;
              do
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v153 + 384) + v122++) = 0;
              while (v119 != v122);
              goto LABEL_238;
            }
          }
          v118 = 0;
          do
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v153 + 384) + v118++) = 0;
          while (v91 != v118);
          v89 = *(_QWORD *)(*(_QWORD *)v153 + 376);
          v92 = *(_QWORD *)(*(_QWORD *)v153 + 384);
          v88 = *(_QWORD *)(*(_QWORD *)v153 + 368);
          v93 = v88 - v92 + v89;
          if (*(_QWORD *)(*(_QWORD *)v153 + 408) <= 3uLL)
            *(_QWORD *)(*(_QWORD *)v153 + 408) = 4;
          goto LABEL_195;
        case 0xE:
          v94 = (const char *)(v59 - 40);
          if (*(char *)(v59 - 17) < 0)
            v94 = *(const char **)v94;
          v40 = atoi(v94);
          v87 = v40;
          *(_WORD *)a6 = 256;
          if (*(_QWORD *)(v54 + 408) <= 3uLL)
            *(_QWORD *)(v54 + 408) = 4;
          v95 = *(_QWORD *)(v54 + 368);
          v96 = *(_QWORD *)(v54 + 376);
          v97 = *(_QWORD *)(v54 + 384);
          v98 = ((int)v97 - ((int)v95 + (int)v96)) & 3;
          if (v97 - *(_QWORD *)(v54 + 392) < v98)
          {
            v40 = sub_1DF366C90(v47, ((int)v97 - ((int)v95 + (int)v96)) & 3);
            *(_QWORD *)(v54 + 384) -= v98;
          }
          else
          {
            v99 = v97 - v98;
            *(_QWORD *)(v54 + 384) = v99;
            if (!v98)
            {
              v93 = v95 + v96 - v99;
              goto LABEL_205;
            }
          }
          v123 = 0;
          do
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v153 + 384) + v123++) = 0;
          while (v98 != v123);
          v96 = *(_QWORD *)(*(_QWORD *)v153 + 376);
          v99 = *(_QWORD *)(*(_QWORD *)v153 + 384);
          v95 = *(_QWORD *)(*(_QWORD *)v153 + 368);
          v93 = v95 - v99 + v96;
          if (*(_QWORD *)(*(_QWORD *)v153 + 408) <= 3uLL)
            *(_QWORD *)(*(_QWORD *)v153 + 408) = 4;
LABEL_205:
          v124 = ((_BYTE)v99 - ((_BYTE)v95 + (_BYTE)v96)) & 3;
          v120 = *(_QWORD *)(*(_QWORD *)v153 + 392);
          if (v99 - v120 < v124)
          {
            v40 = sub_1DF366C90(v47, v124);
            *(_QWORD *)(*(_QWORD *)v153 + 384) -= v124;
          }
          else
          {
            v121 = v99 - v124;
            *(_QWORD *)(*(_QWORD *)v153 + 384) = v99 - v124;
            if (!v124)
              goto LABEL_234;
          }
          v125 = 0;
          v54 = *(_QWORD *)v153;
          do
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v153 + 384) + v125++) = 0;
          while (v124 != v125);
          goto LABEL_238;
        case 0xF:
          v100 = *(_QWORD *)(v59 - 64);
          if (*(_BYTE *)(v100 + 200))
          {
            v40 = (unint64_t)flatbuffers::Parser::SerializeStruct(v40, (uint64_t)v47, v100, v59 - 72);
            goto LABEL_243;
          }
          v101 = (const char *)(v59 - 40);
          if (*(char *)(v59 - 17) < 0)
            v101 = *(const char **)v101;
          v40 = atoi(v101);
          v87 = v40;
          *(_WORD *)a6 = 256;
          if (*(_QWORD *)(v54 + 408) <= 3uLL)
            *(_QWORD *)(v54 + 408) = 4;
          v102 = *(_QWORD *)(v54 + 368);
          v103 = *(_QWORD *)(v54 + 376);
          v104 = *(_QWORD *)(v54 + 384);
          v105 = ((int)v104 - ((int)v102 + (int)v103)) & 3;
          if (v104 - *(_QWORD *)(v54 + 392) < v105)
          {
            v40 = sub_1DF366C90(v47, ((int)v104 - ((int)v102 + (int)v103)) & 3);
            *(_QWORD *)(v54 + 384) -= v105;
          }
          else
          {
            v106 = v104 - v105;
            *(_QWORD *)(v54 + 384) = v106;
            if (!v105)
            {
              v93 = v102 + v103 - v106;
              goto LABEL_232;
            }
          }
          v129 = 0;
          do
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v153 + 384) + v129++) = 0;
          while (v105 != v129);
          v103 = *(_QWORD *)(*(_QWORD *)v153 + 376);
          v106 = *(_QWORD *)(*(_QWORD *)v153 + 384);
          v102 = *(_QWORD *)(*(_QWORD *)v153 + 368);
          v93 = v102 - v106 + v103;
          if (*(_QWORD *)(*(_QWORD *)v153 + 408) <= 3uLL)
            *(_QWORD *)(*(_QWORD *)v153 + 408) = 4;
LABEL_232:
          v130 = ((_BYTE)v106 - ((_BYTE)v102 + (_BYTE)v103)) & 3;
          v120 = *(_QWORD *)(*(_QWORD *)v153 + 392);
          if (v106 - v120 < v130)
          {
            v40 = sub_1DF366C90(v47, v130);
            *(_QWORD *)(*(_QWORD *)v153 + 384) -= v130;
          }
          else
          {
            v121 = v106 - v130;
            *(_QWORD *)(*(_QWORD *)v153 + 384) = v106 - v130;
            if (!v130)
              goto LABEL_234;
          }
          v131 = 0;
          v54 = *(_QWORD *)v153;
          do
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v153 + 384) + v131++) = 0;
          while (v130 != v131);
          goto LABEL_238;
        case 0x10:
          v107 = (const char *)(v59 - 40);
          if (*(char *)(v59 - 17) < 0)
            v107 = *(const char **)v107;
          v40 = atoi(v107);
          v87 = v40;
          *(_WORD *)a6 = 256;
          if (*(_QWORD *)(v54 + 408) <= 3uLL)
            *(_QWORD *)(v54 + 408) = 4;
          v108 = *(_QWORD *)(v54 + 368);
          v109 = *(_QWORD *)(v54 + 376);
          v110 = *(_QWORD *)(v54 + 384);
          v111 = ((int)v110 - ((int)v108 + (int)v109)) & 3;
          if (v110 - *(_QWORD *)(v54 + 392) < v111)
          {
            v40 = sub_1DF366C90(v47, ((int)v110 - ((int)v108 + (int)v109)) & 3);
            *(_QWORD *)(v54 + 384) -= v111;
          }
          else
          {
            v112 = v110 - v111;
            *(_QWORD *)(v54 + 384) = v112;
            if (!v111)
            {
              v93 = v108 + v109 - v112;
              goto LABEL_215;
            }
          }
          v126 = 0;
          do
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v153 + 384) + v126++) = 0;
          while (v111 != v126);
          v109 = *(_QWORD *)(*(_QWORD *)v153 + 376);
          v112 = *(_QWORD *)(*(_QWORD *)v153 + 384);
          v108 = *(_QWORD *)(*(_QWORD *)v153 + 368);
          v93 = v108 - v112 + v109;
          if (*(_QWORD *)(*(_QWORD *)v153 + 408) <= 3uLL)
            *(_QWORD *)(*(_QWORD *)v153 + 408) = 4;
LABEL_215:
          v127 = ((_BYTE)v112 - ((_BYTE)v108 + (_BYTE)v109)) & 3;
          v120 = *(_QWORD *)(*(_QWORD *)v153 + 392);
          if (v112 - v120 < v127)
          {
            v40 = sub_1DF366C90(v47, v127);
            *(_QWORD *)(*(_QWORD *)v153 + 384) -= v127;
          }
          else
          {
            v121 = v112 - v127;
            *(_QWORD *)(*(_QWORD *)v153 + 384) = v112 - v127;
            if (!v127)
            {
LABEL_234:
              v54 = *(_QWORD *)v153;
              goto LABEL_239;
            }
          }
          v128 = 0;
          v54 = *(_QWORD *)v153;
          do
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v153 + 384) + v128++) = 0;
          while (v127 != v128);
LABEL_238:
          v121 = *(_QWORD *)(v54 + 384);
          v120 = *(_QWORD *)(v54 + 392);
LABEL_239:
          if ((unint64_t)(v121 - v120) <= 3)
          {
            v40 = sub_1DF366C90(v47, 4uLL);
            v121 = *(_QWORD *)(v54 + 384);
          }
          *(_DWORD *)(v121 - 4) = v93 - v87 + 4;
          v117 = v121 - 4;
          goto LABEL_242;
        case 0x11:
          LODWORD(v159[0]) = 0;
          v113 = (char *)(v59 - 40);
          if (*(char *)(v59 - 17) < 0)
            v113 = *(char **)v113;
          sub_1DF353BC0((_WORD *)a6, v113, v54, (unsigned int *)v159);
          *(_BYTE *)(a6 + 1) = 1;
          if (*(_BYTE *)a6)
            return;
          if (*(_QWORD *)(v54 + 408) <= 3uLL)
            *(_QWORD *)(v54 + 408) = 4;
          v65 = (int)v159[0];
          v114 = *(_QWORD *)(v54 + 384);
          v67 = *(_QWORD *)(v54 + 392);
          v115 = ((_BYTE)v114 - (*(_DWORD *)(v54 + 368) + *(_DWORD *)(v54 + 376))) & 3;
          if (v114 - v67 < v115)
          {
            v40 = sub_1DF366C90(v47, ((_BYTE)v114 - (*(_DWORD *)(v54 + 368) + *(_DWORD *)(v54 + 376))) & 3);
            *(_QWORD *)(v54 + 384) -= v115;
          }
          else
          {
            v69 = v114 - v115;
            *(_QWORD *)(v54 + 384) = v69;
            if (!v115)
              goto LABEL_186;
          }
          v116 = 0;
          do
            *(_BYTE *)(*(_QWORD *)(v54 + 384) + v116++) = 0;
          while (v115 != v116);
LABEL_185:
          v69 = *(_QWORD *)(v54 + 384);
          v67 = *(_QWORD *)(v54 + 392);
LABEL_186:
          if ((unint64_t)(v69 - v67) <= 3)
          {
            v40 = sub_1DF366C90(v47, 4uLL);
            v69 = *(_QWORD *)(v54 + 384);
          }
          *(_DWORD *)(v69 - 4) = v65;
          v117 = v69 - 4;
LABEL_242:
          *(_QWORD *)(v54 + 384) = v117;
LABEL_243:
          v132 = *(_QWORD *)(v54 + 1184);
          if (*(char *)(v132 - 17) < 0)
            operator delete(*(void **)(v132 - 40));
          v59 = v132 - 72;
          *(_QWORD *)(v54 + 1184) = v132 - 72;
          if (++v58 == v42)
            break;
          continue;
        default:
          goto LABEL_243;
      }
      break;
    }
  }
  v133 = *(_QWORD *)(v54 + 392) - 8 * *(unsigned int *)(v54 + 400);
  *(_QWORD *)(v54 + 392) = v133;
  *(_DWORD *)(v54 + 400) = 0;
  *(_WORD *)(v54 + 404) = 0;
  *(_BYTE *)(v54 + 406) = 0;
  if (*(_QWORD *)(v54 + 408) <= 3uLL)
    *(_QWORD *)(v54 + 408) = 4;
  v134 = *(_QWORD *)(v54 + 384);
  v135 = ((_BYTE)v134 - (*(_DWORD *)(v54 + 368) + *(_DWORD *)(v54 + 376))) & 3;
  if (v134 - v133 < v135)
  {
    sub_1DF366C90(v47, ((_BYTE)v134 - (*(_DWORD *)(v54 + 368) + *(_DWORD *)(v54 + 376))) & 3);
    *(_QWORD *)(v54 + 384) -= v135;
LABEL_250:
    v137 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v54 + 384) + v137++) = 0;
    while (v135 != v137);
    v136 = *(_QWORD *)(v54 + 384);
    v133 = *(_QWORD *)(v54 + 392);
    goto LABEL_253;
  }
  v136 = v134 - v135;
  *(_QWORD *)(v54 + 384) = v136;
  if (v135)
    goto LABEL_250;
LABEL_253:
  if ((unint64_t)(v136 - v133) <= 3)
  {
    sub_1DF366C90(v47, 4uLL);
    v136 = *(_QWORD *)(v54 + 384);
  }
  *(_DWORD *)(v136 - 4) = v42;
  v138 = v136 - 4;
  *(_QWORD *)(v54 + 384) = v138;
  *a3 = *(_DWORD *)(v54 + 368) - v138 + *(_DWORD *)(v54 + 376);
  if (*(_DWORD *)a2 == 15)
  {
    v139 = *(_QWORD *)(a2 + 8);
    if (*(_BYTE *)(v139 + 203))
    {
      v140 = *(uint64_t **)(v139 + 176);
      v141 = *(uint64_t **)(v139 + 184);
      while (v140 != v141)
      {
        v142 = *v140;
        if (*(_BYTE *)(*v140 + 218))
          goto LABEL_262;
        ++v140;
      }
      v142 = 0;
LABEL_262:
      v143 = atomic_load((unsigned __int8 *)&qword_1F04755D8);
      if ((v143 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755D8))
      {
        word_1F04755D0 = *(_WORD *)(v142 + 208);
        __cxa_guard_release(&qword_1F04755D8);
      }
      v144 = atomic_load((unsigned __int8 *)&qword_1F04755E0);
      if ((v144 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755E0))
      {
        dword_1F04755D4 = *(_DWORD *)(v142 + 152);
        __cxa_guard_release(&qword_1F04755E0);
      }
      v145 = *(_QWORD *)(a2 + 8);
      v146 = *(unsigned int **)(v54 + 384);
      v149 = *v146;
      v147 = (uint64_t)(v146 + 1);
      v148 = v149;
      if (*(_BYTE *)(v145 + 200))
        sub_1DF354B48(v147, v147 + *(_QWORD *)(v145 + 216) * v148, *(_QWORD *)(v145 + 216), a2);
      else
        sub_1DF354C68(v147, v147 + 4 * v148);
    }
  }
  *(_WORD *)a6 = 0;
}

void flatbuffers::Parser::ParseArray(flatbuffers::Parser *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v6;
  int v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  int v12;
  __int128 v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  const char *v57;
  char v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  const char *v63;
  char v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  char v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  const char *v74;
  char v75;
  char v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int *v112;
  int v113[2];
  int v114;
  __int128 v115;
  void *__p;
  __int128 v117;
  __int16 v118;
  uint64_t v119;
  char v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  unint64_t v125;
  __int16 v126;
  uint64_t v127;

  v4 = (uint64_t)a1;
  v119 = 0;
  v120 = 0;
  v121 = xmmword_1DF385C40;
  v122 = 0u;
  v123 = 0u;
  v124 = 0;
  v125 = 1;
  v126 = 256;
  v127 = 0;
  v6 = *(_DWORD *)(a2 + 4);
  v115 = *(_OWORD *)(a2 + 8);
  v7 = *(unsigned __int16 *)(a2 + 24);
  flatbuffers::Parser::Expect(a1, 91, (uint64_t)&v118);
  v8 = 0;
  v9 = 0;
  HIBYTE(v118) = 1;
  if ((_BYTE)v118)
  {
LABEL_2:
    *(_WORD *)a3 = 257;
    HIBYTE(v118) = 1;
    goto LABEL_3;
  }
  v112 = (int *)a2;
  *(_QWORD *)v113 = a3;
  v8 = 0;
  v9 = 0;
  v11 = 0;
  v12 = 0;
  v13 = v115;
  v114 = v6;
  while (1)
  {
    v14 = !*(_BYTE *)(v4 + 729) || v12 == 0;
    if (v14 && *(_DWORD *)(v4 + 20) == 93)
      break;
    if (v9 >= v11)
    {
      v15 = (v9 - v8) >> 6;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 58)
        abort();
      v17 = v4;
      if ((v11 - v8) >> 5 > v16)
        v16 = (v11 - v8) >> 5;
      if ((unint64_t)(v11 - v8) >= 0x7FFFFFFFFFFFFFC0)
        v18 = 0x3FFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18 >> 58)
        sub_1DF3667C0();
      v19 = (char *)operator new(v18 << 6);
      v20 = v19;
      v21 = &v19[64 * v15];
      *((_QWORD *)v21 + 1) = 0;
      *((_QWORD *)v21 + 2) = 0;
      *(_QWORD *)v21 = 0;
      *((_WORD *)v21 + 12) = 0;
      *((_QWORD *)v21 + 4) = 48;
      v21[55] = 1;
      *((_WORD *)v21 + 28) = -1;
      if (v9 == v8)
      {
        v27 = &v19[64 * v15];
      }
      else
      {
        v22 = 0;
        do
        {
          v23 = &v21[v22];
          v24 = &v9[v22];
          v25 = *(_OWORD *)&v9[v22 - 48];
          *((_OWORD *)v23 - 4) = *(_OWORD *)&v9[v22 - 64];
          *((_OWORD *)v23 - 3) = v25;
          v26 = *(_OWORD *)&v9[v22 - 32];
          *((_QWORD *)v23 - 2) = *(_QWORD *)&v9[v22 - 16];
          *((_OWORD *)v23 - 2) = v26;
          *((_QWORD *)v24 - 3) = 0;
          *((_QWORD *)v24 - 2) = 0;
          *((_QWORD *)v24 - 4) = 0;
          *((_WORD *)v23 - 4) = *(_WORD *)&v9[v22 - 8];
          v22 -= 64;
        }
        while (&v9[v22] != v8);
        v27 = &v21[v22];
        while (v9 != v8)
        {
          if (*(v9 - 9) < 0)
            operator delete(*((void **)v9 - 4));
          v9 -= 64;
        }
      }
      v9 = v21 + 64;
      v11 = &v20[64 * v18];
      if (v8)
        operator delete(v8);
      v8 = v27;
      v4 = v17;
      v6 = v114;
      v13 = v115;
    }
    else
    {
      *(_QWORD *)v9 = 0;
      *((_QWORD *)v9 + 1) = 0;
      *((_WORD *)v9 + 12) = 0;
      *((_QWORD *)v9 + 2) = 0;
      *((_QWORD *)v9 + 4) = 48;
      v9[55] = 1;
      *((_WORD *)v9 + 28) = -1;
      v9 += 64;
    }
    *((_DWORD *)v9 - 16) = v6;
    *((_DWORD *)v9 - 15) = 0;
    v28 = v9 - 64;
    *(_OWORD *)(v28 + 8) = v13;
    *((_WORD *)v28 + 12) = v7;
    if (v6 == 15 && *(_BYTE *)(v115 + 200))
      flatbuffers::Parser::ParseTable(v4, v115, (uint64_t)(v9 - 32), 0, (uint64_t)&v118);
    else
      flatbuffers::Parser::ParseSingleValue(v4, 0, (int *)v28, 0, (uint64_t)&v118);
    if ((_BYTE)v118)
    {
      **(_BYTE **)v113 = v118;
      HIBYTE(v118) = 1;
      *(_BYTE *)(*(_QWORD *)v113 + 1) = 1;
      goto LABEL_3;
    }
    v118 = 256;
    ++v12;
    if (*(_DWORD *)(v4 + 20) == 93)
      break;
    if (!*(_BYTE *)(v4 + 954))
    {
      flatbuffers::Parser::Expect((flatbuffers::Parser *)v4, 44, (uint64_t)&v118);
      if ((_BYTE)v118)
      {
        a3 = *(_QWORD *)v113;
        goto LABEL_2;
      }
    }
    v118 = 256;
    v13 = v115;
  }
  flatbuffers::Parser::Next((flatbuffers::Parser *)v4, (uint64_t)&v118);
  a3 = *(_QWORD *)v113;
  if ((_BYTE)v118)
    goto LABEL_2;
  v118 = 256;
  **(_WORD **)v113 = 256;
  if (v12 == v7)
  {
    if (v9 != v8)
    {
      v30 = v8;
      v31 = (uint64_t)v9;
      while (2)
      {
        v32 = v31;
        v33 = *(_DWORD *)(v31 - 64);
        v31 -= 64;
        switch(v33)
        {
          case -4:
            v37 = (char *)(v32 - 32);
            if (*(char *)(v32 - 9) < 0)
              v37 = *(char **)v37;
            sub_1DF352C64((_WORD *)a3, v37, v4, (flatbuffers::ClassicLocale *)&__p);
            *(_BYTE *)(a3 + 1) = 1;
            if (!*(_BYTE *)a3)
              goto LABEL_90;
            goto LABEL_3;
          case -3:
          case 10:
            __p = 0;
            v35 = (char *)(v32 - 32);
            if (*(char *)(v32 - 9) < 0)
              v35 = *(char **)v35;
            sub_1DF34D80C((_WORD *)a3, v35, v4, (unint64_t *)&__p);
            *(_BYTE *)(a3 + 1) = 1;
            if (!*(_BYTE *)a3)
            {
              v29 = sub_1DF3530AC((uint64_t)&v119, (uint64_t)__p);
              goto LABEL_212;
            }
            goto LABEL_3;
          case -2:
            LODWORD(__p) = 0;
            v38 = (char *)(v32 - 32);
            if (*(char *)(v32 - 9) < 0)
              v38 = *(char **)v38;
            sub_1DF34C708((_WORD *)a3, v38, v4, &__p);
            *(_BYTE *)(a3 + 1) = 1;
            if (!*(_BYTE *)a3)
            {
              if (v125 <= 3)
                v125 = 4;
              v39 = (int)__p;
              v40 = *((_QWORD *)&v123 + 1);
              v41 = ((_BYTE)v123 - ((_BYTE)v122 + BYTE8(v122))) & 3;
              if ((_QWORD)v123 - *((_QWORD *)&v123 + 1) < v41)
              {
                v29 = sub_1DF366C90(&v119, ((_BYTE)v123 - ((_BYTE)v122 + BYTE8(v122))) & 3);
                v30 = v8;
                *(_QWORD *)&v123 = v123 - v41;
              }
              else
              {
                v30 = v8;
                v42 = v123 - v41;
                *(_QWORD *)&v123 = v123 - v41;
                if (!v41)
                  goto LABEL_162;
              }
              v43 = 0;
              do
                *(_BYTE *)(v123 + v43++) = 0;
              while (v41 != v43);
              goto LABEL_161;
            }
            goto LABEL_3;
          case -1:
          case 6:
            LOWORD(__p) = 0;
            v36 = (char *)(v32 - 32);
            if (*(char *)(v32 - 9) < 0)
              v36 = *(char **)v36;
            sub_1DF34D3B4((_WORD *)a3, v36, v4, &__p);
            *(_BYTE *)(a3 + 1) = 1;
            if (!*(_BYTE *)a3)
              goto LABEL_90;
            goto LABEL_3;
          case 0:
          case 1:
          case 2:
          case 4:
            LOBYTE(__p) = 0;
            v34 = (char *)(v32 - 32);
            if (*(char *)(v32 - 9) < 0)
              v34 = *(char **)v34;
            sub_1DF34CF5C((_WORD *)a3, v34, v4, &__p);
            *(_BYTE *)(a3 + 1) = 1;
            if (!*(_BYTE *)a3)
            {
              v29 = sub_1DF35327C((uint64_t)&v119, (char)__p);
              goto LABEL_212;
            }
            goto LABEL_3;
          case 3:
            LOBYTE(__p) = 0;
            v44 = (char *)(v32 - 32);
            if (*(char *)(v32 - 9) < 0)
              v44 = *(char **)v44;
            sub_1DF3532F0((_WORD *)a3, v44, v4, (char *)&__p);
            *(_BYTE *)(a3 + 1) = 1;
            if (!*(_BYTE *)a3)
            {
              if (!v125)
                v125 = 1;
              v45 = (char)__p;
              v46 = v123;
              v30 = v8;
              if ((_QWORD)v123 == *((_QWORD *)&v123 + 1))
              {
                v29 = sub_1DF366C90(&v119, 1uLL);
                v30 = v8;
                v46 = v123;
              }
              *(_QWORD *)&v123 = v46 - 1;
              *(_BYTE *)(v46 - 1) = v45;
              goto LABEL_213;
            }
            goto LABEL_3;
          case 5:
            LOWORD(__p) = 0;
            v47 = (char *)(v32 - 32);
            if (*(char *)(v32 - 9) < 0)
              v47 = *(char **)v47;
            sub_1DF353758((_WORD *)a3, v47, v4, (__int16 *)&__p);
            *(_BYTE *)(a3 + 1) = 1;
            if (!*(_BYTE *)a3)
            {
LABEL_90:
              v29 = sub_1DF3822E0((uint64_t)&v119, (__int16)__p);
              goto LABEL_212;
            }
            goto LABEL_3;
          case 7:
            LODWORD(__p) = 0;
            v48 = (char *)(v32 - 32);
            if (*(char *)(v32 - 9) < 0)
              v48 = *(char **)v48;
            sub_1DF353BC0((_WORD *)a3, v48, v4, (unsigned int *)&__p);
            *(_BYTE *)(a3 + 1) = 1;
            if (!*(_BYTE *)a3)
            {
              if (v125 <= 3)
                v125 = 4;
              v39 = (int)__p;
              v40 = *((_QWORD *)&v123 + 1);
              v49 = ((_BYTE)v123 - ((_BYTE)v122 + BYTE8(v122))) & 3;
              if ((_QWORD)v123 - *((_QWORD *)&v123 + 1) < v49)
              {
                v29 = sub_1DF366C90(&v119, ((_BYTE)v123 - ((_BYTE)v122 + BYTE8(v122))) & 3);
                v30 = v8;
                *(_QWORD *)&v123 = v123 - v49;
              }
              else
              {
                v30 = v8;
                v42 = v123 - v49;
                *(_QWORD *)&v123 = v123 - v49;
                if (!v49)
                  goto LABEL_162;
              }
              v50 = 0;
              do
                *(_BYTE *)(v123 + v50++) = 0;
              while (v49 != v50);
              goto LABEL_161;
            }
            goto LABEL_3;
          case 8:
            LODWORD(__p) = 0;
            v51 = (char *)(v32 - 32);
            if (*(char *)(v32 - 9) < 0)
              v51 = *(char **)v51;
            sub_1DF34C708((_WORD *)a3, v51, v4, &__p);
            *(_BYTE *)(a3 + 1) = 1;
            if (!*(_BYTE *)a3)
            {
              if (v125 <= 3)
                v125 = 4;
              v39 = (int)__p;
              v40 = *((_QWORD *)&v123 + 1);
              v52 = ((_BYTE)v123 - ((_BYTE)v122 + BYTE8(v122))) & 3;
              if ((_QWORD)v123 - *((_QWORD *)&v123 + 1) < v52)
              {
                v29 = sub_1DF366C90(&v119, ((_BYTE)v123 - ((_BYTE)v122 + BYTE8(v122))) & 3);
                v30 = v8;
                *(_QWORD *)&v123 = v123 - v52;
              }
              else
              {
                v30 = v8;
                v42 = v123 - v52;
                *(_QWORD *)&v123 = v123 - v52;
                if (!v52)
                  goto LABEL_162;
              }
              v53 = 0;
              do
                *(_BYTE *)(v123 + v53++) = 0;
              while (v52 != v53);
              goto LABEL_161;
            }
            goto LABEL_3;
          case 9:
            __p = 0;
            v54 = (char *)(v32 - 32);
            if (*(char *)(v32 - 9) < 0)
              v54 = *(char **)v54;
            sub_1DF354028((_WORD *)a3, v54, v4, (uint64_t *)&__p);
            *(_BYTE *)(a3 + 1) = 1;
            if (!*(_BYTE *)a3)
            {
              v29 = sub_1DF3823C8((uint64_t)&v119, (uint64_t)__p);
              goto LABEL_212;
            }
            goto LABEL_3;
          case 11:
            LODWORD(__p) = 0;
            v55 = (char *)(v32 - 32);
            if (*(char *)(v32 - 9) < 0)
              v55 = *(char **)v55;
            sub_1DF354348((_WORD *)a3, v55, v4, (float *)&__p);
            *(_BYTE *)(a3 + 1) = 1;
            if (!*(_BYTE *)a3)
            {
              v29 = sub_1DF382428((uint64_t)&v119, *(float *)&__p);
              goto LABEL_212;
            }
            goto LABEL_3;
          case 12:
            __p = 0;
            v56 = (char *)(v32 - 32);
            if (*(char *)(v32 - 9) < 0)
              v56 = *(char **)v56;
            sub_1DF354544((_WORD *)a3, v56, v4, (double *)&__p);
            *(_BYTE *)(a3 + 1) = 1;
            if (!*(_BYTE *)a3)
            {
              v29 = sub_1DF382490((uint64_t)&v119, *(double *)&__p);
              goto LABEL_212;
            }
            goto LABEL_3;
          case 13:
            v57 = (const char *)(v32 - 32);
            if (*(char *)(v32 - 9) < 0)
              v57 = *(const char **)v57;
            v29 = atoi(v57);
            *(_WORD *)a3 = 256;
            if (v125 <= 3)
              v125 = 4;
            v59 = BYTE8(v122);
            v58 = v122;
            v60 = ((int)v123 - ((int)v122 + DWORD2(v122))) & 3;
            if ((_QWORD)v123 - *((_QWORD *)&v123 + 1) < v60)
            {
              v82 = v29;
              sub_1DF366C90(&v119, ((int)v123 - ((int)v122 + DWORD2(v122))) & 3);
              v29 = v82;
              *(_QWORD *)&v123 = v123 - v60;
            }
            else
            {
              v61 = v123 - v60;
              *(_QWORD *)&v123 = v123 - v60;
              if (!v60)
              {
                v62 = v122 + DWORD2(v122) - v61;
LABEL_174:
                v84 = ((_BYTE)v61 - (v58 + v59)) & 3;
                v85 = *((_QWORD *)&v123 + 1);
                if (v61 - *((_QWORD *)&v123 + 1) < v84)
                {
                  v102 = v4;
                  v103 = v29;
                  sub_1DF366C90(&v119, v84);
                  v29 = v103;
                  v4 = v102;
                  *(_QWORD *)&v123 = v123 - v84;
                }
                else
                {
                  v86 = v61 - v84;
                  *(_QWORD *)&v123 = v61 - v84;
                  if (!v84)
                    goto LABEL_209;
                }
                v87 = 0;
                do
                  *(_BYTE *)(v123 + v87++) = 0;
                while (v84 != v87);
                goto LABEL_208;
              }
            }
            v83 = 0;
            do
              *(_BYTE *)(v123 + v83++) = 0;
            while (v60 != v83);
            v59 = BYTE8(v122);
            v58 = v122;
            v61 = v123;
            v62 = v122 - v123 + DWORD2(v122);
            if (v125 <= 3)
              v125 = 4;
            goto LABEL_174;
          case 14:
            v63 = (const char *)(v32 - 32);
            if (*(char *)(v32 - 9) < 0)
              v63 = *(const char **)v63;
            v29 = atoi(v63);
            *(_WORD *)a3 = 256;
            if (v125 <= 3)
              v125 = 4;
            v65 = BYTE8(v122);
            v64 = v122;
            v66 = ((int)v123 - ((int)v122 + DWORD2(v122))) & 3;
            if ((_QWORD)v123 - *((_QWORD *)&v123 + 1) < v66)
            {
              v88 = v29;
              sub_1DF366C90(&v119, ((int)v123 - ((int)v122 + DWORD2(v122))) & 3);
              v29 = v88;
              *(_QWORD *)&v123 = v123 - v66;
            }
            else
            {
              v67 = v123 - v66;
              *(_QWORD *)&v123 = v123 - v66;
              if (!v66)
              {
                v62 = v122 + DWORD2(v122) - v67;
                goto LABEL_184;
              }
            }
            v89 = 0;
            do
              *(_BYTE *)(v123 + v89++) = 0;
            while (v66 != v89);
            v65 = BYTE8(v122);
            v64 = v122;
            v67 = v123;
            v62 = v122 - v123 + DWORD2(v122);
            if (v125 <= 3)
              v125 = 4;
LABEL_184:
            v90 = ((_BYTE)v67 - (v64 + v65)) & 3;
            v85 = *((_QWORD *)&v123 + 1);
            if (v67 - *((_QWORD *)&v123 + 1) < v90)
            {
              v104 = v4;
              v105 = v29;
              sub_1DF366C90(&v119, v90);
              v29 = v105;
              v4 = v104;
              *(_QWORD *)&v123 = v123 - v90;
            }
            else
            {
              v86 = v67 - v90;
              *(_QWORD *)&v123 = v67 - v90;
              if (!v90)
                goto LABEL_209;
            }
            v91 = 0;
            do
              *(_BYTE *)(v123 + v91++) = 0;
            while (v90 != v91);
            goto LABEL_208;
          case 15:
            v68 = *(_QWORD *)(v32 - 56);
            if (*(_BYTE *)(v68 + 200))
            {
              v29 = (uint64_t)flatbuffers::Parser::SerializeStruct(v29, (uint64_t)&v119, v68, v31);
              goto LABEL_212;
            }
            v69 = (const char *)(v32 - 32);
            if (*(char *)(v32 - 9) < 0)
              v69 = *(const char **)v69;
            v29 = atoi(v69);
            *(_WORD *)a3 = 256;
            if (v125 <= 3)
              v125 = 4;
            v71 = BYTE8(v122);
            v70 = v122;
            v72 = ((int)v123 - ((int)v122 + DWORD2(v122))) & 3;
            if ((_QWORD)v123 - *((_QWORD *)&v123 + 1) < v72)
            {
              v92 = v29;
              sub_1DF366C90(&v119, ((int)v123 - ((int)v122 + DWORD2(v122))) & 3);
              v29 = v92;
              *(_QWORD *)&v123 = v123 - v72;
            }
            else
            {
              v73 = v123 - v72;
              *(_QWORD *)&v123 = v123 - v72;
              if (!v72)
              {
                v62 = v122 + DWORD2(v122) - v73;
                goto LABEL_194;
              }
            }
            v93 = 0;
            do
              *(_BYTE *)(v123 + v93++) = 0;
            while (v72 != v93);
            v71 = BYTE8(v122);
            v70 = v122;
            v73 = v123;
            v62 = v122 - v123 + DWORD2(v122);
            if (v125 <= 3)
              v125 = 4;
LABEL_194:
            v94 = ((_BYTE)v73 - (v70 + v71)) & 3;
            v85 = *((_QWORD *)&v123 + 1);
            if (v73 - *((_QWORD *)&v123 + 1) < v94)
            {
              v106 = v4;
              v107 = v29;
              sub_1DF366C90(&v119, v94);
              v29 = v107;
              v4 = v106;
              *(_QWORD *)&v123 = v123 - v94;
            }
            else
            {
              v86 = v73 - v94;
              *(_QWORD *)&v123 = v73 - v94;
              if (!v94)
                goto LABEL_209;
            }
            v95 = 0;
            do
              *(_BYTE *)(v123 + v95++) = 0;
            while (v94 != v95);
            goto LABEL_208;
          case 16:
            v74 = (const char *)(v32 - 32);
            if (*(char *)(v32 - 9) < 0)
              v74 = *(const char **)v74;
            v29 = atoi(v74);
            *(_WORD *)a3 = 256;
            if (v125 <= 3)
              v125 = 4;
            v76 = BYTE8(v122);
            v75 = v122;
            v77 = ((int)v123 - ((int)v122 + DWORD2(v122))) & 3;
            if ((_QWORD)v123 - *((_QWORD *)&v123 + 1) < v77)
            {
              v96 = v29;
              sub_1DF366C90(&v119, ((int)v123 - ((int)v122 + DWORD2(v122))) & 3);
              v29 = v96;
              *(_QWORD *)&v123 = v123 - v77;
            }
            else
            {
              v78 = v123 - v77;
              *(_QWORD *)&v123 = v123 - v77;
              if (!v77)
              {
                v62 = v122 + DWORD2(v122) - v78;
                goto LABEL_204;
              }
            }
            v97 = 0;
            do
              *(_BYTE *)(v123 + v97++) = 0;
            while (v77 != v97);
            v76 = BYTE8(v122);
            v75 = v122;
            v78 = v123;
            v62 = v122 - v123 + DWORD2(v122);
            if (v125 <= 3)
              v125 = 4;
LABEL_204:
            v98 = ((_BYTE)v78 - (v75 + v76)) & 3;
            v85 = *((_QWORD *)&v123 + 1);
            if (v78 - *((_QWORD *)&v123 + 1) < v98)
            {
              v108 = v4;
              v109 = v29;
              sub_1DF366C90(&v119, v98);
              v29 = v109;
              v4 = v108;
              *(_QWORD *)&v123 = v123 - v98;
            }
            else
            {
              v86 = v78 - v98;
              *(_QWORD *)&v123 = v78 - v98;
              if (!v98)
                goto LABEL_209;
            }
            v99 = 0;
            do
              *(_BYTE *)(v123 + v99++) = 0;
            while (v98 != v99);
LABEL_208:
            v85 = *((_QWORD *)&v123 + 1);
            v86 = v123;
LABEL_209:
            a3 = *(_QWORD *)v113;
            if ((unint64_t)(v86 - v85) <= 3)
            {
              v100 = v4;
              v101 = v29;
              sub_1DF366C90(&v119, 4uLL);
              v29 = v101;
              v4 = v100;
              v86 = v123;
            }
            *(_DWORD *)(v86 - 4) = v62 - v29 + 4;
            *(_QWORD *)&v123 = v86 - 4;
LABEL_212:
            v30 = v8;
            goto LABEL_213;
          case 17:
            LODWORD(__p) = 0;
            v79 = (char *)(v32 - 32);
            if (*(char *)(v32 - 9) < 0)
              v79 = *(char **)v79;
            sub_1DF353BC0((_WORD *)a3, v79, v4, (unsigned int *)&__p);
            *(_BYTE *)(a3 + 1) = 1;
            if (*(_BYTE *)a3)
              goto LABEL_3;
            if (v125 <= 3)
              v125 = 4;
            v39 = (int)__p;
            v40 = *((_QWORD *)&v123 + 1);
            v80 = ((_BYTE)v123 - ((_BYTE)v122 + BYTE8(v122))) & 3;
            if ((_QWORD)v123 - *((_QWORD *)&v123 + 1) < v80)
            {
              v29 = sub_1DF366C90(&v119, ((_BYTE)v123 - ((_BYTE)v122 + BYTE8(v122))) & 3);
              v30 = v8;
              *(_QWORD *)&v123 = v123 - v80;
            }
            else
            {
              v30 = v8;
              v42 = v123 - v80;
              *(_QWORD *)&v123 = v123 - v80;
              if (!v80)
                goto LABEL_162;
            }
            v81 = 0;
            do
              *(_BYTE *)(v123 + v81++) = 0;
            while (v80 != v81);
LABEL_161:
            v40 = *((_QWORD *)&v123 + 1);
            v42 = v123;
LABEL_162:
            a3 = *(_QWORD *)v113;
            if ((unint64_t)(v42 - v40) <= 3)
            {
              v29 = sub_1DF366C90(&v119, 4uLL);
              v30 = v8;
              v42 = v123;
            }
            *(_DWORD *)(v42 - 4) = v39;
            *(_QWORD *)&v123 = v42 - 4;
LABEL_213:
            if ((char *)v31 == v30)
              break;
            continue;
          default:
            goto LABEL_213;
        }
        break;
      }
    }
    v110 = v123;
    v111 = sub_1DF348948(v112);
    MEMORY[0x1E0BFF5C0](v112 + 8, v110, v111);
    *(_WORD *)a3 = 0;
  }
  else
  {
    __p = operator new(0x28uLL);
    v117 = xmmword_1DF385BC0;
    strcpy((char *)__p, "Fixed-length array size is incorrect.");
    flatbuffers::Parser::Error(v4, *(_WORD **)v113);
    operator delete(__p);
  }
LABEL_3:
  sub_1DF366E78(&v119);
  if (v8)
  {
    v10 = v8;
    while (v9 != v10)
    {
      if (*(v9 - 9) < 0)
      {
        operator delete(*((void **)v9 - 4));
        v10 = v8;
      }
      v9 -= 64;
    }
    operator delete(v10);
  }
}

void flatbuffers::Parser::ParseHash(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  const char *v15;
  uint64_t v16;
  char v17;
  char v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  char v22;
  char v23;
  char *v24;
  const char *v25;
  uint64_t v26;
  char v27;
  char v28;
  char *v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  const char *v37;
  uint64_t v38;
  char v39;
  char v40;
  char *v41;
  const char *v42;
  uint64_t v43;
  char v44;
  char v45;
  char *v46;
  _BYTE *v47;
  _BYTE *v48;
  __int128 v49;
  uint64_t v50;
  void *__p[2];
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char v55;
  uint64_t v56;

  HIBYTE(v52) = 4;
  strcpy((char *)__p, "hash");
  v8 = sub_1DF370B40(a3 + 72, (const void **)__p);
  if ((uint64_t *)(a3 + 80) == v8)
    v9 = 0;
  else
    v9 = v8[7];
  if (SHIBYTE(v52) < 0)
    operator delete(__p[0]);
  switch(*(_DWORD *)a2)
  {
    case 5:
      v37 = (const char *)(v9 + 32);
      if (*(char *)(v9 + 55) < 0)
        v37 = *(const char **)v37;
      v38 = 0;
      v39 = 1;
      while (1)
      {
        v40 = v39;
        if (!strcmp(v37, (&off_1EA98ED28)[2 * v38]))
          break;
        v39 = 0;
        v38 = 1;
        if ((v40 & 1) == 0)
        {
          v41 = 0;
LABEL_72:
          v47 = a1 + 32;
          if (a1[55] < 0)
            v47 = *(_BYTE **)v47;
          ((void (*)(_BYTE *))v41)(v47);
          sub_1DF3826CC();
          goto LABEL_52;
        }
      }
      v41 = (&off_1EA98ED28)[2 * v38 + 1];
      goto LABEL_72;
    case 6:
      v42 = (const char *)(v9 + 32);
      if (*(char *)(v9 + 55) < 0)
        v42 = *(const char **)v42;
      v43 = 0;
      v44 = 1;
      while (1)
      {
        v45 = v44;
        if (!strcmp(v42, (&off_1EA98ED28)[2 * v43]))
          break;
        v44 = 0;
        v43 = 1;
        if ((v45 & 1) == 0)
        {
          v46 = 0;
          goto LABEL_76;
        }
      }
      v46 = (&off_1EA98ED28)[2 * v43 + 1];
LABEL_76:
      v48 = a1 + 32;
      if (a1[55] < 0)
        v48 = *(_BYTE **)v48;
      ((void (*)(_BYTE *))v46)(v48);
      sub_1DF382738();
      goto LABEL_52;
    case 7:
      v10 = (const char *)(v9 + 32);
      if (*(char *)(v9 + 55) < 0)
        v10 = *(const char **)v10;
      v11 = 0;
      v12 = 1;
      while (1)
      {
        v13 = v12;
        if (!strcmp(v10, (&off_1EA98ED48)[2 * v11]))
          break;
        v12 = 0;
        v11 = 1;
        if ((v13 & 1) == 0)
        {
          v14 = 0;
          goto LABEL_32;
        }
      }
      v14 = (&off_1EA98ED48)[2 * v11 + 1];
LABEL_32:
      v30 = a1 + 32;
      if (a1[55] < 0)
        v30 = *(_BYTE **)v30;
      ((void (*)(_BYTE *))v14)(v30);
      sub_1DF367FB0((uint64_t)__p);
      std::ostream::operator<<();
      goto LABEL_39;
    case 8:
      v15 = (const char *)(v9 + 32);
      if (*(char *)(v9 + 55) < 0)
        v15 = *(const char **)v15;
      v16 = 0;
      v17 = 1;
      while (1)
      {
        v18 = v17;
        if (!strcmp(v15, (&off_1EA98ED48)[2 * v16]))
          break;
        v17 = 0;
        v16 = 1;
        if ((v18 & 1) == 0)
        {
          v19 = 0;
          goto LABEL_36;
        }
      }
      v19 = (&off_1EA98ED48)[2 * v16 + 1];
LABEL_36:
      v31 = a1 + 32;
      if (a1[55] < 0)
        v31 = *(_BYTE **)v31;
      ((void (*)(_BYTE *))v19)(v31);
      sub_1DF367FB0((uint64_t)__p);
      std::ostream::operator<<();
LABEL_39:
      std::stringbuf::str();
      __p[0] = *(void **)MEMORY[0x1E0DE4F50];
      v32 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
      v52 = v32;
      v53 = MEMORY[0x1E0DE4FB8] + 16;
      if (v55 < 0)
        operator delete(v54);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1E0BFF758](&v56);
      v33 = a2 + 32;
      if (*(char *)(a2 + 55) < 0)
        operator delete(*(void **)v33);
      *(_OWORD *)v33 = v49;
      v34 = v50;
      goto LABEL_55;
    case 9:
      v20 = (const char *)(v9 + 32);
      if (*(char *)(v9 + 55) < 0)
        v20 = *(const char **)v20;
      v21 = 0;
      v22 = 1;
      while (1)
      {
        v23 = v22;
        if (!strcmp(v20, (&off_1EA98ED68)[2 * v21]))
          break;
        v22 = 0;
        v21 = 1;
        if ((v23 & 1) == 0)
        {
          v24 = 0;
          goto LABEL_45;
        }
      }
      v24 = (&off_1EA98ED68)[2 * v21 + 1];
LABEL_45:
      v35 = a1 + 32;
      if (a1[55] < 0)
        v35 = *(_BYTE **)v35;
      ((void (*)(_BYTE *))v24)(v35);
      sub_1DF345C20();
      goto LABEL_52;
    case 0xA:
      v25 = (const char *)(v9 + 32);
      if (*(char *)(v9 + 55) < 0)
        v25 = *(const char **)v25;
      v26 = 0;
      v27 = 1;
      break;
    default:
      goto LABEL_56;
  }
  while (1)
  {
    v28 = v27;
    if (!strcmp(v25, (&off_1EA98ED68)[2 * v26]))
      break;
    v27 = 0;
    v26 = 1;
    if ((v28 & 1) == 0)
    {
      v29 = 0;
      goto LABEL_49;
    }
  }
  v29 = (&off_1EA98ED68)[2 * v26 + 1];
LABEL_49:
  v36 = a1 + 32;
  if (a1[55] < 0)
    v36 = *(_BYTE **)v36;
  ((void (*)(_BYTE *))v29)(v36);
  sub_1DF356B08();
LABEL_52:
  v33 = a2 + 32;
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)v33);
  *(_OWORD *)v33 = *(_OWORD *)__p;
  v34 = v52;
LABEL_55:
  *(_QWORD *)(v33 + 16) = v34;
LABEL_56:
  flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a4);
  *(_BYTE *)(a4 + 1) = 1;
  if (!*(_BYTE *)a4)
    *(_WORD *)a4 = 0;
}

uint64_t sub_1DF352BC8(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(result + 72) < a2)
    *(_QWORD *)(result + 72) = a2;
  v2 = *(_QWORD *)(result + 48);
  v3 = (a2 - 1) & -(uint64_t)(*(_DWORD *)(result + 32) - v2 + *(_DWORD *)(result + 40));
  if (v2 - *(_QWORD *)(result + 56) < v3)
  {
    v5 = (a2 - 1) & -(uint64_t)(*(_DWORD *)(result + 32) - v2 + *(_DWORD *)(result + 40));
    v6 = result;
    sub_1DF366C90((uint64_t *)result, v3);
    v3 = v5;
    result = v6;
    *(_QWORD *)(v6 + 48) -= v5;
  }
  else
  {
    *(_QWORD *)(result + 48) = v2 - v3;
    if (!v3)
      return result;
  }
  v4 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(result + 48) + v4++) = 0;
  while (v3 != v4);
  return result;
}

void sub_1DF352C64(_WORD *a1, char *a2, uint64_t a3, flatbuffers::ClassicLocale *a4)
{
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  size_t v11;
  std::string::size_type v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *p_p;
  std::string::size_type size;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  void **v39;
  std::string::size_type v40;
  std::string *v41;
  std::string::size_type v42;
  void *v43[2];
  uint64_t v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string __p;
  std::string v50;
  std::string __dst;
  std::string v52;
  std::string v53;

  if (sub_1DF383B58(a4, a2))
  {
    *a1 = 0;
    return;
  }
  if (sub_1DF3833E0(*(_WORD *)a4) == 0.0)
  {
    v8 = strlen(a2);
    if (v8 <= 0x7FFFFFFFFFFFFFF7)
    {
      v9 = v8;
      if (v8 >= 0x17)
      {
        v14 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17)
          v14 = v8 | 7;
        v15 = v14 + 1;
        p_dst = (std::string *)operator new(v14 + 1);
        __dst.__r_.__value_.__l.__size_ = v9;
        __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
        p_dst = &__dst;
        if (!v8)
        {
LABEL_17:
          p_dst->__r_.__value_.__s.__data_[v9] = 0;
          v16 = std::string::insert(&__dst, 0, "invalid number: \"");
          v17 = v16->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
          v52.__r_.__value_.__r.__words[2] = v17;
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          v18 = std::string::append(&v52, "\"");
          v19 = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v53.__r_.__value_.__r.__words[2] = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          flatbuffers::Parser::Error(a3, a1);
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v53.__r_.__value_.__l.__data_);
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v52.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            v20 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_61:
            operator delete(v20);
            return;
          }
          return;
        }
      }
      memcpy(p_dst, a2, v9);
      goto LABEL_17;
    }
LABEL_62:
    abort();
  }
  v11 = strlen(a2);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_62;
  v12 = v11;
  if (v11 >= 0x17)
  {
    v21 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v21 = v11 | 7;
    v22 = v21 + 1;
    v13 = operator new(v21 + 1);
    v45.__r_.__value_.__l.__size_ = v12;
    v45.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    goto LABEL_26;
  }
  *((_BYTE *)&v45.__r_.__value_.__s + 23) = v11;
  v13 = &v45;
  if (v11)
LABEL_26:
    memcpy(v13, a2, v12);
  *((_BYTE *)v13 + v12) = 0;
  v23 = std::string::insert(&v45, 0, "invalid number: \"");
  v24 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v46, "\"");
  v26 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v47, ", constant does not fit ");
  v28 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  sub_1DF367CE4(6, &v50, 0.0);
  v29 = std::string::insert(&v50, 0, "[");
  v30 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&__dst, "; ");
  v32 = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  sub_1DF367CE4(6, &__p, 0.0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v35 = std::string::append(&v52, (const std::string::value_type *)p_p, size);
  v36 = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = std::string::append(&v53, "]");
  v38 = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)v43 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v44 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (v44 >= 0)
    v39 = v43;
  else
    v39 = (void **)v43[0];
  if (v44 >= 0)
    v40 = HIBYTE(v44) & 0x7F;
  else
    v40 = (std::string::size_type)v43[1];
  v41 = std::string::append(&v48, (const std::string::value_type *)v39, v40);
  v42 = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error(a3, a1);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44) < 0)
    operator delete(v43[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
  {
    v20 = (void *)v45.__r_.__value_.__r.__words[0];
    goto LABEL_61;
  }
}

uint64_t sub_1DF3530AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;

  if (*(_QWORD *)(a1 + 72) <= 7uLL)
    *(_QWORD *)(a1 + 72) = 8;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 7;
  if (v4 - v5 < v6)
  {
    v11 = ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 7;
    sub_1DF366C90((uint64_t *)a1, v6);
    v6 = v11;
    *(_QWORD *)(a1 + 48) -= v11;
  }
  else
  {
    v7 = v4 - v6;
    *(_QWORD *)(a1 + 48) = v7;
    if (!v6)
      goto LABEL_5;
  }
  v10 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v10++) = 0;
  while (v6 != v10);
  v7 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
LABEL_5:
  if ((unint64_t)(v7 - v5) <= 7)
  {
    sub_1DF366C90((uint64_t *)a1, 8uLL);
    v7 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(v7 - 8) = a2;
  v8 = v7 - 8;
  *(_QWORD *)(a1 + 48) = v8;
  return (*(_DWORD *)(a1 + 32) - v8 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_1DF353194(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;

  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v4 - v5 < v6)
  {
    v11 = ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
    sub_1DF366C90((uint64_t *)a1, v6);
    v6 = v11;
    *(_QWORD *)(a1 + 48) -= v11;
  }
  else
  {
    v7 = v4 - v6;
    *(_QWORD *)(a1 + 48) = v7;
    if (!v6)
      goto LABEL_5;
  }
  v10 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v10++) = 0;
  while (v6 != v10);
  v7 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
LABEL_5:
  if ((unint64_t)(v7 - v5) <= 3)
  {
    sub_1DF366C90((uint64_t *)a1, 4uLL);
    v7 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(v7 - 4) = a2;
  v8 = v7 - 4;
  *(_QWORD *)(a1 + 48) = v8;
  return (*(_DWORD *)(a1 + 32) - v8 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_1DF35327C(uint64_t a1, char a2)
{
  uint64_t v4;

  if (!*(_QWORD *)(a1 + 72))
    *(_QWORD *)(a1 + 72) = 1;
  v4 = *(_QWORD *)(a1 + 48);
  if (v4 == *(_QWORD *)(a1 + 56))
  {
    sub_1DF366C90((uint64_t *)a1, 1uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 1;
  *(_BYTE *)(v4 - 1) = a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

void sub_1DF3532F0(_WORD *a1, char *a2, uint64_t a3, char *a4)
{
  char *v8;
  char v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  unsigned __int8 v13;
  _xlocale *v14;
  const char *v15;
  int v16;
  unsigned __int8 v17;
  uint64_t v18;
  char v19;
  size_t v20;
  std::string::size_type v21;
  std::string *p_dst;
  size_t v23;
  std::string::size_type v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *p_p;
  std::string::size_type size;
  std::string *v43;
  std::string::size_type v44;
  std::string __p;
  std::string v46;
  std::string v47;
  std::string __dst;
  std::string v49;
  char *v50[2];
  std::string::size_type v51;

  v8 = a2;
  do
  {
    v10 = *v8++;
    v9 = v10;
    v11 = v10 - 48;
    if (v10)
      v12 = v11 > 9;
    else
      v12 = 0;
  }
  while (v12);
  if (v9 == 48 && (*v8 & 0xDF) == 0x58)
  {
    v50[0] = a2;
    v13 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v14 = (_xlocale *)qword_1F04755E8;
    v15 = a2;
    v16 = 16;
  }
  else
  {
    v50[0] = a2;
    v17 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v14 = (_xlocale *)qword_1F04755E8;
    v15 = a2;
    v16 = 10;
  }
  v18 = strtoll_l(v15, v50, v16, v14);
  if (v50[0] != a2 && !*v50[0])
  {
    if (v18 <= 127)
    {
      if (v18 >= -128)
      {
        *a4 = v18;
        *a1 = 0;
        return;
      }
      v19 = 0x80;
    }
    else
    {
      v19 = 127;
    }
    *a4 = v19;
    v23 = strlen(a2);
    if (v23 <= 0x7FFFFFFFFFFFFFF7)
    {
      v24 = v23;
      if (v23 >= 0x17)
      {
        v33 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17)
          v33 = v23 | 7;
        v34 = v33 + 1;
        v25 = operator new(v33 + 1);
        v46.__r_.__value_.__l.__size_ = v24;
        v46.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
        v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      }
      else
      {
        *((_BYTE *)&v46.__r_.__value_.__s + 23) = v23;
        v25 = &v46;
        if (!v23)
        {
LABEL_40:
          v25[v24] = 0;
          v35 = std::string::insert(&v46, 0, "invalid number: \"");
          v36 = v35->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
          v47.__r_.__value_.__r.__words[2] = v36;
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          v37 = std::string::append(&v47, "\"");
          v38 = v37->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v38;
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          v39 = std::string::append(&__dst, ", constant does not fit ");
          v40 = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v49.__r_.__value_.__r.__words[2] = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          sub_1DF368820(&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            size = __p.__r_.__value_.__l.__size_;
          v43 = std::string::append(&v49, (const std::string::value_type *)p_p, size);
          v44 = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)v50 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v51 = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          flatbuffers::Parser::Error(a3, a1);
          if (SHIBYTE(v51) < 0)
            operator delete(v50[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v49.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v47.__r_.__value_.__l.__data_);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          {
            v32 = (void *)v46.__r_.__value_.__r.__words[0];
            goto LABEL_58;
          }
          return;
        }
      }
      memcpy(v25, a2, v24);
      goto LABEL_40;
    }
LABEL_61:
    abort();
  }
  *a4 = 0;
  v20 = strlen(a2);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_61;
  v21 = v20;
  if (v20 >= 0x17)
  {
    v26 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v26 = v20 | 7;
    v27 = v26 + 1;
    p_dst = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v21;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_29;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v20;
  p_dst = &__dst;
  if (v20)
LABEL_29:
    memcpy(p_dst, a2, v21);
  p_dst->__r_.__value_.__s.__data_[v21] = 0;
  v28 = std::string::insert(&__dst, 0, "invalid number: \"");
  v29 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v49, "\"");
  v31 = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)v50 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v51 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error(a3, a1);
  if (SHIBYTE(v51) < 0)
    operator delete(v50[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    v32 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_58:
    operator delete(v32);
  }
}

void sub_1DF353758(_WORD *a1, char *a2, uint64_t a3, __int16 *a4)
{
  char *v8;
  char v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  unsigned __int8 v13;
  _xlocale *v14;
  const char *v15;
  int v16;
  unsigned __int8 v17;
  uint64_t v18;
  __int16 v19;
  size_t v20;
  std::string::size_type v21;
  std::string *p_dst;
  size_t v23;
  std::string::size_type v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *p_p;
  std::string::size_type size;
  std::string *v43;
  std::string::size_type v44;
  std::string __p;
  std::string v46;
  std::string v47;
  std::string __dst;
  std::string v49;
  char *v50[2];
  std::string::size_type v51;

  v8 = a2;
  do
  {
    v10 = *v8++;
    v9 = v10;
    v11 = v10 - 48;
    if (v10)
      v12 = v11 > 9;
    else
      v12 = 0;
  }
  while (v12);
  if (v9 == 48 && (*v8 & 0xDF) == 0x58)
  {
    v50[0] = a2;
    v13 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v14 = (_xlocale *)qword_1F04755E8;
    v15 = a2;
    v16 = 16;
  }
  else
  {
    v50[0] = a2;
    v17 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v14 = (_xlocale *)qword_1F04755E8;
    v15 = a2;
    v16 = 10;
  }
  v18 = strtoll_l(v15, v50, v16, v14);
  if (v50[0] != a2 && !*v50[0])
  {
    if (v18 < 0x8000)
    {
      if (v18 >= -32768)
      {
        *a4 = v18;
        *a1 = 0;
        return;
      }
      v19 = 0x8000;
    }
    else
    {
      v19 = 0x7FFF;
    }
    *a4 = v19;
    v23 = strlen(a2);
    if (v23 <= 0x7FFFFFFFFFFFFFF7)
    {
      v24 = v23;
      if (v23 >= 0x17)
      {
        v33 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17)
          v33 = v23 | 7;
        v34 = v33 + 1;
        v25 = operator new(v33 + 1);
        v46.__r_.__value_.__l.__size_ = v24;
        v46.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
        v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      }
      else
      {
        *((_BYTE *)&v46.__r_.__value_.__s + 23) = v23;
        v25 = &v46;
        if (!v23)
        {
LABEL_40:
          v25[v24] = 0;
          v35 = std::string::insert(&v46, 0, "invalid number: \"");
          v36 = v35->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
          v47.__r_.__value_.__r.__words[2] = v36;
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          v37 = std::string::append(&v47, "\"");
          v38 = v37->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v38;
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          v39 = std::string::append(&__dst, ", constant does not fit ");
          v40 = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v49.__r_.__value_.__r.__words[2] = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          sub_1DF368A58(&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            size = __p.__r_.__value_.__l.__size_;
          v43 = std::string::append(&v49, (const std::string::value_type *)p_p, size);
          v44 = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)v50 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v51 = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          flatbuffers::Parser::Error(a3, a1);
          if (SHIBYTE(v51) < 0)
            operator delete(v50[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v49.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v47.__r_.__value_.__l.__data_);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          {
            v32 = (void *)v46.__r_.__value_.__r.__words[0];
            goto LABEL_58;
          }
          return;
        }
      }
      memcpy(v25, a2, v24);
      goto LABEL_40;
    }
LABEL_61:
    abort();
  }
  *a4 = 0;
  v20 = strlen(a2);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_61;
  v21 = v20;
  if (v20 >= 0x17)
  {
    v26 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v26 = v20 | 7;
    v27 = v26 + 1;
    p_dst = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v21;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_29;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v20;
  p_dst = &__dst;
  if (v20)
LABEL_29:
    memcpy(p_dst, a2, v21);
  p_dst->__r_.__value_.__s.__data_[v21] = 0;
  v28 = std::string::insert(&__dst, 0, "invalid number: \"");
  v29 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v49, "\"");
  v31 = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)v50 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v51 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error(a3, a1);
  if (SHIBYTE(v51) < 0)
    operator delete(v50[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    v32 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_58:
    operator delete(v32);
  }
}

void sub_1DF353BC0(_WORD *a1, char *a2, uint64_t a3, unsigned int *a4)
{
  char *v8;
  char v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  unsigned __int8 v13;
  _xlocale *v14;
  const char *v15;
  int v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned int v19;
  size_t v20;
  std::string::size_type v21;
  _BYTE *v22;
  size_t v23;
  std::string::size_type v24;
  std::string *p_dst;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *p_p;
  std::string::size_type size;
  std::string *v43;
  std::string::size_type v44;
  std::string __p;
  std::string v46;
  std::string v47;
  std::string __dst;
  std::string v49;
  char *v50[2];
  std::string::size_type v51;

  v8 = a2;
  do
  {
    v10 = *v8++;
    v9 = v10;
    v11 = v10 - 48;
    if (v10)
      v12 = v11 > 9;
    else
      v12 = 0;
  }
  while (v12);
  if (v9 == 48 && (*v8 & 0xDF) == 0x58)
  {
    v50[0] = a2;
    v13 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v14 = (_xlocale *)qword_1F04755E8;
    v15 = a2;
    v16 = 16;
  }
  else
  {
    v50[0] = a2;
    v17 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v14 = (_xlocale *)qword_1F04755E8;
    v15 = a2;
    v16 = 10;
  }
  v18 = strtoll_l(v15, v50, v16, v14);
  if (v50[0] != a2 && !*v50[0])
  {
    v19 = 0x7FFFFFFF;
    if (v18 <= 0x7FFFFFFF)
    {
      if (v18 >= (uint64_t)0xFFFFFFFF80000000)
      {
        *a4 = v18;
        *a1 = 0;
        return;
      }
      v19 = 0x80000000;
    }
    *a4 = v19;
    v20 = strlen(a2);
    if (v20 <= 0x7FFFFFFFFFFFFFF7)
    {
      v21 = v20;
      if (v20 >= 0x17)
      {
        v33 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17)
          v33 = v20 | 7;
        v34 = v33 + 1;
        v22 = operator new(v33 + 1);
        v46.__r_.__value_.__l.__size_ = v21;
        v46.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
        v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
      }
      else
      {
        *((_BYTE *)&v46.__r_.__value_.__s + 23) = v20;
        v22 = &v46;
        if (!v20)
        {
LABEL_39:
          v22[v21] = 0;
          v35 = std::string::insert(&v46, 0, "invalid number: \"");
          v36 = v35->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
          v47.__r_.__value_.__r.__words[2] = v36;
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          v37 = std::string::append(&v47, "\"");
          v38 = v37->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v38;
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          v39 = std::string::append(&__dst, ", constant does not fit ");
          v40 = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v49.__r_.__value_.__r.__words[2] = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          sub_1DF368BA0(&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            size = __p.__r_.__value_.__l.__size_;
          v43 = std::string::append(&v49, (const std::string::value_type *)p_p, size);
          v44 = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)v50 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v51 = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          flatbuffers::Parser::Error(a3, a1);
          if (SHIBYTE(v51) < 0)
            operator delete(v50[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v49.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v47.__r_.__value_.__l.__data_);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          {
            v32 = (void *)v46.__r_.__value_.__r.__words[0];
            goto LABEL_57;
          }
          return;
        }
      }
      memcpy(v22, a2, v21);
      goto LABEL_39;
    }
LABEL_60:
    abort();
  }
  *a4 = 0;
  v23 = strlen(a2);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_60;
  v24 = v23;
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    p_dst = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v24;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_28;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v23;
  p_dst = &__dst;
  if (v23)
LABEL_28:
    memcpy(p_dst, a2, v24);
  p_dst->__r_.__value_.__s.__data_[v24] = 0;
  v28 = std::string::insert(&__dst, 0, "invalid number: \"");
  v29 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v49, "\"");
  v31 = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)v50 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v51 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error(a3, a1);
  if (SHIBYTE(v51) < 0)
    operator delete(v50[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    v32 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_57:
    operator delete(v32);
  }
}

void sub_1DF354028(_WORD *a1, char *a2, uint64_t a3, uint64_t *a4)
{
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  size_t v11;
  std::string::size_type v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *p_p;
  std::string::size_type size;
  std::string *v24;
  std::string::size_type v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  std::string __p;
  std::string __dst;
  std::string v35;
  std::string v36;
  std::string v37;
  __int128 v38;
  std::string::size_type v39;

  if (sub_1DF3679FC(a4, a2, 0, 1))
  {
    *a1 = 0;
    return;
  }
  if (*a4)
  {
    v8 = strlen(a2);
    if (v8 <= 0x7FFFFFFFFFFFFFF7)
    {
      v9 = v8;
      if (v8 >= 0x17)
      {
        v14 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17)
          v14 = v8 | 7;
        v15 = v14 + 1;
        p_dst = (std::string *)operator new(v14 + 1);
        __dst.__r_.__value_.__l.__size_ = v9;
        __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
        p_dst = &__dst;
        if (!v8)
        {
LABEL_16:
          p_dst->__r_.__value_.__s.__data_[v9] = 0;
          v16 = std::string::insert(&__dst, 0, "invalid number: \"");
          v17 = v16->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
          v35.__r_.__value_.__r.__words[2] = v17;
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          v18 = std::string::append(&v35, "\"");
          v19 = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v36.__r_.__value_.__r.__words[2] = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          v20 = std::string::append(&v36, ", constant does not fit ");
          v21 = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          v37.__r_.__value_.__r.__words[2] = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          sub_1DF368DD8(&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            size = __p.__r_.__value_.__l.__size_;
          v24 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
          v25 = v24->__r_.__value_.__r.__words[2];
          v38 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v39 = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          flatbuffers::Parser::Error(a3, a1);
          if (SHIBYTE(v39) < 0)
            operator delete((void *)v38);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v37.__r_.__value_.__l.__data_);
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v36.__r_.__value_.__l.__data_);
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v35.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            v26 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_44:
            operator delete(v26);
            return;
          }
          return;
        }
      }
      memcpy(p_dst, a2, v9);
      goto LABEL_16;
    }
LABEL_46:
    abort();
  }
  v11 = strlen(a2);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_46;
  v12 = v11;
  if (v11 >= 0x17)
  {
    v27 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v27 = v11 | 7;
    v28 = v27 + 1;
    v13 = operator new(v27 + 1);
    v36.__r_.__value_.__l.__size_ = v12;
    v36.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    goto LABEL_37;
  }
  *((_BYTE *)&v36.__r_.__value_.__s + 23) = v11;
  v13 = &v36;
  if (v11)
LABEL_37:
    memcpy(v13, a2, v12);
  *((_BYTE *)v13 + v12) = 0;
  v29 = std::string::insert(&v36, 0, "invalid number: \"");
  v30 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v37, "\"");
  v32 = v31->__r_.__value_.__r.__words[2];
  v38 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v39 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error(a3, a1);
  if (SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
  {
    v26 = (void *)v36.__r_.__value_.__r.__words[0];
    goto LABEL_44;
  }
}

void sub_1DF354348(_WORD *a1, char *a2, uint64_t a3, float *a4)
{
  unsigned __int8 v8;
  size_t v9;
  std::string::size_type v10;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  std::string __dst;
  std::string v19;
  char *v20[2];
  std::string::size_type v21;

  v20[0] = a2;
  v8 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
  {
    qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
    __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
    __cxa_guard_release(&qword_1F04755F0);
  }
  *a4 = strtof_l(a2, v20, (locale_t)qword_1F04755E8);
  if (v20[0] != a2 && !*v20[0])
  {
    *a1 = 0;
    return;
  }
  *a4 = 0.0;
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v10;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9;
    p_dst = &__dst;
    if (!v9)
      goto LABEL_12;
  }
  memcpy(p_dst, a2, v10);
LABEL_12:
  p_dst->__r_.__value_.__s.__data_[v10] = 0;
  v14 = std::string::insert(&__dst, 0, "invalid number: \"");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v19, "\"");
  v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v20 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v21 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error(a3, a1);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1DF354544(_WORD *a1, char *a2, uint64_t a3, double *a4)
{
  unsigned __int8 v8;
  size_t v9;
  std::string::size_type v10;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  std::string __dst;
  std::string v19;
  char *v20[2];
  std::string::size_type v21;

  v20[0] = a2;
  v8 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
  {
    qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
    __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
    __cxa_guard_release(&qword_1F04755F0);
  }
  *a4 = strtod_l(a2, v20, (locale_t)qword_1F04755E8);
  if (v20[0] != a2 && !*v20[0])
  {
    *a1 = 0;
    return;
  }
  *a4 = 0.0;
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v10;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9;
    p_dst = &__dst;
    if (!v9)
      goto LABEL_12;
  }
  memcpy(p_dst, a2, v10);
LABEL_12:
  p_dst->__r_.__value_.__s.__data_[v10] = 0;
  v14 = std::string::insert(&__dst, 0, "invalid number: \"");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v19, "\"");
  v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v20 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v21 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error(a3, a1);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

uint64_t *sub_1DF354740(uint64_t *result, uint64_t a2, int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  if (!a3)
    return result;
  v4 = result;
  if ((unint64_t)result[9] <= 3)
    result[9] = 4;
  v5 = result[4];
  v6 = result[5];
  v7 = result[6];
  v8 = ((_BYTE)v7 - ((_BYTE)v5 + (_BYTE)v6)) & 3;
  if (v7 - result[7] < v8)
  {
    v19 = ((_BYTE)v7 - ((_BYTE)v5 + (_BYTE)v6)) & 3;
    v16 = a3;
    result = (uint64_t *)sub_1DF366C90(result, v19);
    v8 = v19;
    a3 = v16;
    v4[6] -= v19;
  }
  else
  {
    v9 = v7 - v8;
    result[6] = v9;
    if (!v8)
      goto LABEL_6;
  }
  v17 = 0;
  do
    *(_BYTE *)(v4[6] + v17++) = 0;
  while (v8 != v17);
  v6 = v4[5];
  v9 = v4[6];
  v5 = v4[4];
LABEL_6:
  v10 = v6 - v9 + v5 - a3;
  v11 = v10 + 4;
  if (v10 == -4 && !*((_BYTE *)v4 + 80))
    return result;
  if ((unint64_t)v4[9] <= 3)
    v4[9] = 4;
  v12 = ((_BYTE)v9 - ((_BYTE)v5 + (_BYTE)v6)) & 3;
  v13 = v4[7];
  if (v9 - v13 < v12)
  {
    v20 = v12;
    sub_1DF366C90(v4, v12);
    v12 = v20;
    v4[6] -= v20;
  }
  else
  {
    v14 = v9 - v12;
    v4[6] = v9 - v12;
    if (!v12)
      goto LABEL_11;
  }
  v18 = 0;
  do
    *(_BYTE *)(v4[6] + v18++) = 0;
  while (v12 != v18);
  v14 = v4[6];
  v13 = v4[7];
LABEL_11:
  if (v14 - v13 <= 3)
  {
    sub_1DF366C90(v4, 4uLL);
    v14 = v4[6];
  }
  *(_DWORD *)(v14 - 4) = v11;
  v15 = v14 - 4;
  v4[6] = v15;
  return sub_1DF366DF8(v4, a2, *((_DWORD *)v4 + 8) - (int)v15 + *((_DWORD *)v4 + 10));
}

uint64_t sub_1DF3548F4(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int16 v12;
  unint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  char *v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  unsigned int *v23;

  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v4 - v5 < v6)
  {
    sub_1DF366C90((uint64_t *)a1, ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v6;
  }
  else
  {
    v7 = v4 - v6;
    *(_QWORD *)(a1 + 48) = v7;
    if (!v6)
      goto LABEL_8;
  }
  v8 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v8++) = 0;
  while (v6 != v8);
  v7 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
LABEL_8:
  if ((unint64_t)(v7 - v5) <= 3)
  {
    sub_1DF366C90((uint64_t *)a1, 4uLL);
    v7 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
  }
  *(_DWORD *)(v7 - 4) = 0;
  v9 = v7 - 4;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = *(_QWORD *)(a1 + 32) - v9 + *(_QWORD *)(a1 + 40);
  if ((unsigned __int16)(*(_WORD *)(a1 + 68) + 2) <= 4u)
    v11 = 4;
  else
    v11 = (unsigned __int16)(*(_WORD *)(a1 + 68) + 2);
  *(_WORD *)(a1 + 68) = v11;
  if (v9 - v5 < v11)
  {
    sub_1DF366C90((uint64_t *)a1, v11);
    v9 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v9 - v11;
  bzero((void *)(v9 - v11), v11);
  v12 = v10 - a2;
  v14 = *(unsigned __int16 **)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14[1] = v12;
  *v14 = *(_WORD *)(a1 + 68);
  v15 = *(unsigned int *)(a1 + 64);
  v16 = (char *)(v13 - 8 * v15);
  if ((_DWORD)v15)
  {
    v17 = (_WORD *)(v13 - 8 * v15);
    do
    {
      *(unsigned __int16 *)((char *)v14 + (unsigned __int16)v17[2]) = v10 - *v17;
      v17 += 4;
    }
    while ((unint64_t)v17 < v13);
  }
  *(_QWORD *)(a1 + 56) = v16;
  *(_DWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 68) = 0;
  v19 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  LODWORD(v20) = v18 - (_DWORD)v14 + v19;
  if (*(_BYTE *)(a1 + 81) && v18 < (unint64_t)v16)
  {
    v21 = *v14;
    v22 = v18 + v19;
    v23 = *(unsigned int **)(a1 + 40);
    while (1)
    {
      v20 = *v23;
      if ((_DWORD)v21 == *(unsigned __int16 *)(v22 - v20) && !memcmp((const void *)(v22 - v20), v14, v21))
        break;
      if (++v23 >= (unsigned int *)v16)
      {
        LODWORD(v20) = v18 - (_DWORD)v14 + v19;
        goto LABEL_26;
      }
    }
    v14 = (unsigned __int16 *)((char *)v14 + (v18 - (_DWORD)v14 + v19 - v10));
    *(_QWORD *)(a1 + 48) = v14;
  }
LABEL_26:
  if ((_DWORD)v20 == (_DWORD)v19 + (_DWORD)v18 - (_DWORD)v14)
  {
    if ((unint64_t)((char *)v14 - v16) <= 3)
    {
      sub_1DF366C90((uint64_t *)a1, 4uLL);
      v16 = *(char **)(a1 + 56);
      v19 = *(_QWORD *)(a1 + 32);
      v18 = *(_QWORD *)(a1 + 40);
    }
    *(_DWORD *)v16 = v20;
    *(_QWORD *)(a1 + 56) = v16 + 4;
  }
  *(_DWORD *)(v18 + v19 - v10) = v20 - v10;
  *(_BYTE *)(a1 + 70) = 0;
  return v10;
}

uint64_t sub_1DF354B48(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if ((uint64_t)(a2 - result) > a3)
  {
    v7 = result;
    v8 = -a3;
    do
    {
      v9 = v7 + a3;
      v10 = a2;
      while (v9 < v10)
      {
        if (sub_1DF370F4C((__int16 *)(v7 + (unsigned __int16)word_1F04755D0), (__int16 *)(v9 + (unsigned __int16)word_1F04755D0), dword_1F04755D4))
        {
          v10 += v8;
          if (*(_QWORD *)(*(_QWORD *)(a4 + 8) + 216))
          {
            v11 = 0;
            do
            {
              v12 = *(_BYTE *)(v9 + v11);
              *(_BYTE *)(v9 + v11) = *(_BYTE *)(v10 + v11);
              *(_BYTE *)(v10 + v11++) = v12;
            }
            while (v11 < *(_QWORD *)(*(_QWORD *)(a4 + 8) + 216));
          }
        }
        else
        {
          ++v9;
        }
      }
      v13 = v9 + v8;
      if (*(_QWORD *)(*(_QWORD *)(a4 + 8) + 216))
      {
        v14 = 0;
        do
        {
          v15 = *(_BYTE *)(v7 + v14);
          *(_BYTE *)(v7 + v14) = *(_BYTE *)(v13 + v14);
          *(_BYTE *)(v13 + v14++) = v15;
        }
        while (v14 < *(_QWORD *)(*(_QWORD *)(a4 + 8) + 216));
      }
      result = sub_1DF354B48(v7, v13, a3, a4);
      v7 = v10;
    }
    while ((uint64_t)(a2 - v10) > a3);
  }
  return result;
}

uint64_t sub_1DF354C68(uint64_t result, unint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  unsigned __int16 *v7;
  unsigned int v8;
  int *v9;
  unsigned __int16 *v10;
  __int16 *v11;
  __int16 *v12;
  __int16 *v13;
  __int16 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  if ((uint64_t)(a2 - result) >= 8)
  {
    v3 = (int *)result;
    while (1)
    {
      v4 = v3 + 1;
      v5 = (int *)a2;
      if ((unint64_t)(v3 + 1) < a2)
        break;
LABEL_21:
      v18 = (_DWORD)v4 - 4 - (_DWORD)v3;
      *v3 -= v18;
      v19 = *(v4 - 1) + v18;
      *(v4 - 1) = v19;
      v20 = *v3;
      *v3 = v19;
      *(v4 - 1) = v20;
      result = sub_1DF354C68(v3);
      v3 = v5;
      if ((uint64_t)(a2 - (_QWORD)v5) <= 7)
        return result;
    }
    while (1)
    {
      v6 = (int *)((char *)v3 + *v3);
      v7 = (unsigned __int16 *)((char *)v6 - *v6);
      v8 = *v7 <= (unsigned __int16)word_1F04755D0
         ? 0
         : *(unsigned __int16 *)((char *)v7 + (unsigned __int16)word_1F04755D0);
      v9 = (int *)((char *)v4 + *v4);
      v10 = (unsigned __int16 *)((char *)v9 - *v9);
      if (*v10 <= (unsigned __int16)word_1F04755D0)
        break;
      v11 = (__int16 *)((char *)v6 + v8);
      if (v8)
        v12 = v11;
      else
        v12 = 0;
      if (!*(unsigned __int16 *)((char *)v10 + (unsigned __int16)word_1F04755D0))
        goto LABEL_16;
      v13 = (__int16 *)((char *)v9 + *(unsigned __int16 *)((char *)v10 + (unsigned __int16)word_1F04755D0));
LABEL_17:
      if (sub_1DF370F4C(v12, v13, dword_1F04755D4))
      {
        v15 = (_DWORD)v5 - 4 - (_DWORD)v4;
        *v4 -= v15;
        v16 = *(v5 - 1) + v15;
        *(v5 - 1) = v16;
        v17 = *v4;
        *v4 = v16;
        *--v5 = v17;
      }
      else
      {
        ++v4;
      }
      if (v4 >= v5)
        goto LABEL_21;
    }
    v14 = (__int16 *)((char *)v6 + v8);
    if (v8)
      v12 = v14;
    else
      v12 = 0;
LABEL_16:
    v13 = 0;
    goto LABEL_17;
  }
  return result;
}

void flatbuffers::Parser::ParseNestedFlatbuffer(flatbuffers::Parser *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  const char *v24;
  char v25;
  void *v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  int v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _BYTE v41[32];
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  void *v47[3];
  __int128 v48;
  _BYTE v49[11];
  __int128 v50;
  _QWORD v51[2];
  __int128 v52;
  _OWORD v53[2];
  int v54;
  __int128 v55;
  _QWORD v56[2];
  __int128 v57;
  _QWORD v58[4];
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int16 v66;
  __int128 v67;
  unint64_t v68;
  char v69;
  __int128 v70;
  _BYTE v71[32];
  _BYTE *v72;
  _BYTE v73[32];
  uint64_t v74;
  _BYTE *v75;
  _BYTE v76[32];
  uint64_t v77;
  __int128 *v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE v83[32];
  __int128 v84;
  __int128 __p;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char v89;
  __int128 v90;
  __int128 v91;
  __int128 __src;
  uint64_t v93;
  unint64_t v94;
  __int16 v95;
  uint64_t v96;
  _QWORD v97[3];
  __int128 v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  __int128 *v102;
  __int128 v103;
  _QWORD *v104;
  __int128 *v105;
  __int128 v106;
  _QWORD *v107;
  uint64_t v108;
  __int16 v109;
  _DWORD v110[15];
  __int128 *v111;
  __int128 v112;
  __int128 *v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  char **v117;
  char *v118[2];
  _BYTE v119[26];
  __int128 v120;
  uint64_t v121;
  _BYTE v122[24];
  int v123;
  __int128 v124;
  void *v125;
  __int128 v126;
  uint64_t v127;
  __int16 v128;
  char v129;
  __int128 v130;
  uint64_t v131;
  int v132;
  char v133;
  __int128 v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  int v138;
  __int128 v139;
  uint64_t v140;
  __int16 v141;
  char v142;
  _QWORD v143[3];
  __int128 v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  __int16 v153;
  char v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  void *v159[2];
  char v160;
  _BYTE v161[24];
  _OWORD *v162[3];

  if (*((_DWORD *)this + 5) != 91)
  {
    v10 = *(_QWORD *)this;
    flatbuffers::Parser::SkipAnyJsonValue(this, a6);
    *(_BYTE *)(a6 + 1) = 1;
    if (*(_BYTE *)a6)
      return;
    sub_1DF3707F0(v159, (char *)(v10 - 1), (char *)(*(_QWORD *)this - 1), *(_QWORD *)this - v10);
    *(_DWORD *)&v41[3] = 0;
    *(_DWORD *)v41 = 0;
    *(_QWORD *)&v41[8] = 0x10100000002;
    v41[16] = 1;
    *(_QWORD *)&v41[17] = 0;
    v41[25] = 0;
    HIBYTE(v43) = 15;
    strcpy((char *)&v42, "std::unique_ptr");
    memset(v47, 0, sizeof(v47));
    v44 = 0u;
    v46 = 0;
    v45 = 0;
    LOWORD(v48) = 84;
    *(_DWORD *)&v49[7] = 257;
    memset(v51, 0, 13);
    v50 = 0u;
    v52 = 0u;
    memset(v53, 0, sizeof(v53));
    v54 = 1;
    memset(v56, 0, 11);
    v55 = 0u;
    v57 = 0u;
    memset(v58, 0, sizeof(v58));
    v59 = 0u;
    HIBYTE(v62) = 10;
    v60 = 0;
    strcpy((char *)&v61, "_generated");
    v63 = 0u;
    v64 = 0;
    v65 = 1uLL;
    v66 = 257;
    v67 = 0u;
    v68 = 0xFFFFFFFF00000000;
    v69 = 1;
    v70 = 0u;
    memset(v71, 0, sizeof(v71));
    memset(v73, 0, sizeof(v73));
    v72 = v73;
    v74 = 0;
    memset(v76, 0, sizeof(v76));
    v75 = v76;
    v77 = 0;
    v79 = 0u;
    v80 = 0u;
    v78 = &v79;
    v81 = 0;
    memset(v83, 0, sizeof(v83));
    v82 = v83;
    v88 = 0u;
    v87 = 0u;
    v86 = 0u;
    __p = 0u;
    v84 = 0u;
    v89 = 0;
    v90 = xmmword_1DF385C40;
    v91 = 0u;
    __src = 0u;
    v93 = 0;
    v94 = 1;
    v95 = 256;
    v96 = 0;
    v11 = operator new(0x100uLL);
    *v11 = 0u;
    v11[1] = 0u;
    v11[2] = 0u;
    v11[3] = 0u;
    v11[4] = 0u;
    v11[5] = 0u;
    v11[6] = 0u;
    v11[7] = 0u;
    v11[8] = 0u;
    v11[9] = 0u;
    v11[10] = 0u;
    v11[11] = 0u;
    v11[12] = 0u;
    v11[13] = 0u;
    v11[14] = 0u;
    v11[15] = 0u;
    v98 = 0u;
    v100 = 0;
    v97[2] = v11 + 16;
    v99 = 0;
    v103 = 0u;
    v101 = 7;
    v104 = v97;
    v102 = &v103;
    v106 = 0u;
    v107 = v97;
    v105 = &v106;
    v97[0] = v11;
    v97[1] = v11;
    v108 = 0;
    v109 = 0;
    memset(v110, 0, sizeof(v110));
    v112 = 0u;
    v111 = &v112;
    v114 = 0u;
    v113 = &v114;
    v115 = 0u;
    v116 = 0;
    v118[0] = 0;
    v118[1] = 0;
    v117 = v118;
    *(_OWORD *)v119 = *(_OWORD *)v41;
    *(_OWORD *)&v119[10] = *(_OWORD *)&v41[10];
    v120 = v42;
    v121 = v43;
    if (SHIBYTE(v45) < 0)
      sub_1DF36DA38(v122, (void *)v44, *((unint64_t *)&v44 + 1));
    else
      memset(v122, 0, sizeof(v122));
    v123 = v46;
    if (SHIBYTE(v47[2]) < 0)
    {
      sub_1DF36DA38(&v124, v47[0], (unint64_t)v47[1]);
    }
    else
    {
      v124 = *(_OWORD *)v47;
      v125 = v47[2];
    }
    if ((v49[7] & 0x80000000) != 0)
    {
      sub_1DF36DA38(&v126, (void *)v48, *((unint64_t *)&v48 + 1));
    }
    else
    {
      v126 = v48;
      v127 = *(_QWORD *)v49;
    }
    v128 = *(_WORD *)&v49[8];
    v129 = v49[10];
    if (SHIBYTE(v51[0]) < 0)
    {
      sub_1DF36DA38(&v130, (void *)v50, *((unint64_t *)&v50 + 1));
    }
    else
    {
      v130 = v50;
      v131 = v51[0];
    }
    v132 = v51[1];
    v133 = BYTE4(v51[1]);
    if (SBYTE7(v53[0]) < 0)
    {
      sub_1DF36DA38(&v134, (void *)v52, *((unint64_t *)&v52 + 1));
    }
    else
    {
      v134 = v52;
      v135 = *(_QWORD *)&v53[0];
    }
    if (SHIBYTE(v53[1]) < 0)
    {
      sub_1DF36DA38(&v136, *((void **)&v53[0] + 1), *(unint64_t *)&v53[1]);
    }
    else
    {
      v136 = *(_OWORD *)((char *)v53 + 8);
      v137 = *((_QWORD *)&v53[1] + 1);
    }
    v138 = v54;
    if (SHIBYTE(v56[0]) < 0)
    {
      sub_1DF36DA38(&v139, (void *)v55, *((unint64_t *)&v55 + 1));
    }
    else
    {
      v139 = v55;
      v140 = v56[0];
    }
    v141 = v56[1];
    v142 = BYTE2(v56[1]);
    memset(v143, 0, sizeof(v143));
    sub_1DF370610(v143, v57, *((uint64_t *)&v57 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v57 + 1) - v57) >> 3));
    if (SHIBYTE(v58[3]) < 0)
    {
      sub_1DF36DA38(&v144, (void *)v58[1], v58[2]);
    }
    else
    {
      v144 = *(_OWORD *)&v58[1];
      v145 = v58[3];
    }
    if (SHIBYTE(v60) < 0)
    {
      sub_1DF36DA38(&v146, (void *)v59, *((unint64_t *)&v59 + 1));
    }
    else
    {
      v146 = v59;
      v147 = v60;
    }
    if (SHIBYTE(v62) < 0)
    {
      sub_1DF36DA38(&v148, (void *)v61, *((unint64_t *)&v61 + 1));
    }
    else
    {
      v148 = v61;
      v149 = v62;
    }
    if (SHIBYTE(v64) < 0)
    {
      sub_1DF36DA38(&v150, (void *)v63, *((unint64_t *)&v63 + 1));
    }
    else
    {
      v150 = v63;
      v151 = v64;
    }
    v152 = v65;
    v153 = v66;
    v154 = 0;
    v155 = 0u;
    v156 = 0u;
    v157 = 0u;
    v158 = 0u;
    if ((_BYTE)v141)
      LOBYTE(v95) = 1;
    v12 = (_OWORD *)operator new();
    v13 = v12;
    *v12 = 0u;
    v12[1] = 0u;
    *((_QWORD *)&v86 + 1) = v12;
    v14 = (char *)__p;
    if ((unint64_t)__p >= *((_QWORD *)&__p + 1))
    {
      v16 = (char *)*((_QWORD *)&v84 + 1);
      v17 = (uint64_t)(__p - *((_QWORD *)&v84 + 1)) >> 3;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61)
        abort();
      v19 = *((_QWORD *)&__p + 1) - *((_QWORD *)&v84 + 1);
      if ((uint64_t)(*((_QWORD *)&__p + 1) - *((_QWORD *)&v84 + 1)) >> 2 > v18)
        v18 = v19 >> 2;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 61)
          sub_1DF3667C0();
        v21 = (char *)operator new(8 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[8 * v17];
      *(_QWORD *)v22 = v13;
      v15 = v22 + 8;
      if (v14 != v16)
      {
        do
        {
          v23 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *((_QWORD *)v22 - 1) = v23;
          v22 -= 8;
        }
        while (v14 != v16);
        v14 = (char *)*((_QWORD *)&v84 + 1);
      }
      *((_QWORD *)&v84 + 1) = v22;
      *(_QWORD *)&__p = v15;
      *((_QWORD *)&__p + 1) = &v21[8 * v20];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_QWORD *)__p = v12;
      v15 = v14 + 8;
    }
    *(_QWORD *)&__p = v15;
    *(_QWORD *)&v86 = *((_QWORD *)&v86 + 1);
    v161[23] = 10;
    strcpy(v161, "deprecated");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 8;
    strcpy(v161, "required");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 3;
    strcpy(v161, "key");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 6;
    strcpy(v161, "shared");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 4;
    strcpy(v161, "hash");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 2;
    strcpy(v161, "id");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 11;
    strcpy(v161, "force_align");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 9;
    strcpy(v161, "bit_flags");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 13;
    strcpy(v161, "bit_flags_all");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 14;
    strcpy(v161, "bit_flags_none");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 14;
    strcpy(v161, "original_order");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 17;
    strcpy(v161, "nested_flatbuffer");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 14;
    strcpy(v161, "csharp_partial");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 9;
    strcpy(v161, "streaming");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 10;
    strcpy(v161, "idempotent");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 8;
    strcpy(v161, "cpp_type");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 12;
    strcpy(v161, "cpp_ptr_type");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 16;
    strcpy(v161, "cpp_ptr_type_get");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 12;
    strcpy(v161, "cpp_str_type");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 17;
    strcpy(v161, "cpp_str_flex_ctor");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 13;
    strcpy(v161, "native_inline");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 19;
    strcpy(v161, "native_custom_alloc");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 11;
    strcpy(v161, "native_type");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 14;
    strcpy(v161, "native_default");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 10;
    strcpy(v161, "flexbuffer");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 7;
    strcpy(v161, "private");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v161[23] = 14;
    strcpy(v161, "apple_internal");
    v162[0] = v161;
    *((_BYTE *)sub_1DF366F5C((uint64_t)&v117, (const void **)v161, v162) + 56) = 1;
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    sub_1DF367324((uint64_t)v41);
    *(_QWORD *)&v110[1] = *(_QWORD *)(a3 + 224);
    sub_1DF3824F8((uint64_t)&v78, (uint64_t)this + 176);
    sub_1DF382548((uint64_t)v119, (__int128 *)((char *)this + 728));
    v154 = *((_BYTE *)this + 1136);
    if (v160 >= 0)
      v24 = (const char *)v159;
    else
      v24 = (const char *)v159[0];
    v25 = flatbuffers::Parser::Parse((flatbuffers::Parser *)&v67, v24, 0, 0);
    sub_1DF367658((char *)v79);
    v78 = &v79;
    v79 = 0uLL;
    *((_QWORD *)&v80 + 1) = v80;
    if ((v25 & 1) == 0)
    {
      flatbuffers::Parser::Error((uint64_t)this, (_WORD *)a6);
      *(_BYTE *)(a6 + 1) = 1;
      if (*(_BYTE *)a6)
      {
        v34 = 0;
        goto LABEL_130;
      }
    }
    v26 = (void *)__src;
    v27 = v94;
    v28 = (v91 - __src + DWORD2(v91));
    if (*((_QWORD *)this + 51) < v94)
      *((_QWORD *)this + 51) = v94;
    v29 = *((_QWORD *)this + 48);
    v30 = (v27 - 1) & -(uint64_t)(v28 + (*((_DWORD *)this + 92) - v29 + *((_DWORD *)this + 94)));
    if (v29 - *((_QWORD *)this + 49) < v30)
    {
      sub_1DF366C90((uint64_t *)this + 42, v30);
      *((_QWORD *)this + 48) -= v30;
    }
    else
    {
      *((_QWORD *)this + 48) = v29 - v30;
      if (!v30)
      {
LABEL_124:
        sub_1DF356044((uint64_t)this + 336, v26, v28);
        sub_1DF367FB0((uint64_t)v41);
        std::ostream::operator<<();
        std::stringbuf::str();
        *(_QWORD *)v41 = *MEMORY[0x1E0DE4F50];
        v32 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
        *(_QWORD *)&v41[*(_QWORD *)(*(_QWORD *)v41 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
        *(_QWORD *)&v41[16] = v32;
        *(_QWORD *)&v41[24] = MEMORY[0x1E0DE4FB8] + 16;
        if (SHIBYTE(v47[2]) < 0)
          operator delete(v47[0]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1E0BFF758](v49);
        v33 = (void **)(a2 + 32);
        if (*(char *)(a2 + 55) < 0)
          operator delete(*v33);
        *(_OWORD *)v33 = *(_OWORD *)v161;
        *(_QWORD *)(a2 + 48) = *(_QWORD *)&v161[16];
        v34 = 1;
LABEL_130:
        v35 = (uint64_t *)*((_QWORD *)&v84 + 1);
        v36 = (uint64_t *)__p;
        while (v35 != v36)
        {
          v37 = *v35;
          if (*v35)
          {
            *(_QWORD *)v41 = *v35;
            sub_1DF370598((void ***)v41);
            MEMORY[0x1E0BFF788](v37, 0x1020C4016EE4530);
            v36 = (uint64_t *)__p;
          }
          ++v35;
        }
        v38 = v157;
        if ((_QWORD)v157)
        {
          v39 = *((_QWORD *)&v157 + 1);
          v40 = (void *)v157;
          if (*((_QWORD *)&v157 + 1) != (_QWORD)v157)
          {
            do
            {
              if (*(char *)(v39 - 17) < 0)
                operator delete(*(void **)(v39 - 40));
              v39 -= 72;
            }
            while (v39 != v38);
            v40 = (void *)v157;
          }
          *((_QWORD *)&v157 + 1) = v38;
          operator delete(v40);
        }
        if (SHIBYTE(v156) < 0)
          operator delete(*((void **)&v155 + 1));
        sub_1DF367324((uint64_t)v119);
        sub_1DF367658(v118[0]);
        *(_QWORD *)v41 = &v115;
        sub_1DF370598((void ***)v41);
        sub_1DF3677DC((char *)v114);
        sub_1DF367830((_QWORD *)v112);
        if (SHIBYTE(v110[14]) < 0)
          operator delete(*(void **)&v110[9]);
        if (SHIBYTE(v110[8]) < 0)
          operator delete(*(void **)&v110[3]);
        sub_1DF38315C((uint64_t)v97);
        sub_1DF366E78((_QWORD *)&v88 + 1);
        if (SBYTE7(v88) < 0)
          operator delete((void *)v87);
        if (*((_QWORD *)&v84 + 1))
        {
          *(_QWORD *)&__p = *((_QWORD *)&v84 + 1);
          operator delete(*((void **)&v84 + 1));
        }
        sub_1DF3831EC((uint64_t)&v82);
        sub_1DF38328C((uint64_t)&v78);
        sub_1DF3678B4((uint64_t)&v75);
        sub_1DF367988((uint64_t)&v72);
        *(_QWORD *)v41 = &v71[8];
        sub_1DF370598((void ***)v41);
        if ((v71[7] & 0x80000000) != 0)
          operator delete((void *)v70);
        if (v160 < 0)
          operator delete(v159[0]);
        if (v34)
          goto LABEL_3;
        return;
      }
    }
    v31 = 0;
    do
      *(_BYTE *)(*((_QWORD *)this + 48) + v31++) = 0;
    while (v30 != v31);
    v26 = (void *)__src;
    v28 = (v91 - __src + DWORD2(v91));
    goto LABEL_124;
  }
  flatbuffers::Parser::ParseAnyValue(this, a2, a3, a4, a5, 0, 0);
  *(_BYTE *)(a6 + 1) = 1;
  if (!*(_BYTE *)a6)
LABEL_3:
    *(_WORD *)a6 = 0;
}

uint64_t sub_1DF356044(uint64_t a1, void *__src, size_t __n)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)(a1 + 70) = 1;
  v6 = *(_QWORD *)(a1 + 72);
  if (v6 <= 3)
  {
    v6 = 4;
    *(_QWORD *)(a1 + 72) = 4;
  }
  v7 = *(_QWORD *)(a1 + 48);
  v8 = ((_BYTE)v7 - *(_DWORD *)(a1 + 40) - (*(_BYTE *)(a1 + 32) + (_BYTE)__n)) & 3;
  if (v7 - *(_QWORD *)(a1 + 56) < v8)
  {
    sub_1DF366C90((uint64_t *)a1, ((_BYTE)v7 - *(_DWORD *)(a1 + 40) - (*(_BYTE *)(a1 + 32) + (_BYTE)__n)) & 3);
    *(_QWORD *)(a1 + 48) -= v8;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v7 - v8;
    if (!v8)
      goto LABEL_5;
  }
  v16 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v16++) = 0;
  while (v8 != v16);
  v6 = *(_QWORD *)(a1 + 72);
  if (!v6)
  {
    v6 = 1;
    *(_QWORD *)(a1 + 72) = 1;
  }
LABEL_5:
  if (__n)
  {
    v9 = *(_QWORD *)(a1 + 48);
    if (v9 - *(_QWORD *)(a1 + 56) < __n)
    {
      sub_1DF366C90((uint64_t *)a1, __n);
      v9 = *(_QWORD *)(a1 + 48);
    }
    *(_QWORD *)(a1 + 48) = v9 - __n;
    memcpy((void *)(v9 - __n), __src, __n);
    v6 = *(_QWORD *)(a1 + 72);
  }
  *(_BYTE *)(a1 + 70) = 0;
  if (v6 <= 3)
    *(_QWORD *)(a1 + 72) = 4;
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = ((_BYTE)v10 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v10 - v11 < v12)
  {
    sub_1DF366C90((uint64_t *)a1, ((_BYTE)v10 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v12;
  }
  else
  {
    v13 = v10 - v12;
    *(_QWORD *)(a1 + 48) = v13;
    if (!v12)
      goto LABEL_13;
  }
  v17 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v17++) = 0;
  while (v12 != v17);
  v13 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
LABEL_13:
  if ((unint64_t)(v13 - v11) <= 3)
  {
    sub_1DF366C90((uint64_t *)a1, 4uLL);
    v13 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(v13 - 4) = __n;
  v14 = v13 - 4;
  *(_QWORD *)(a1 + 48) = v14;
  return (*(_DWORD *)(a1 + 32) - v14 + *(_DWORD *)(a1 + 40));
}

void flatbuffers::Parser::TryTypedValue(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, int *a5@<X4>, int a6@<W5>, _BYTE *a7@<X6>, uint64_t a8@<X8>)
{
  const std::string::value_type *v15;
  int v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  char v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  unint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  void **v41;
  std::string::size_type v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  char v47;
  BOOL v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type v53;
  void *v54;
  std::string *v55;
  std::string::size_type v56;
  void *__p[2];
  uint64_t v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  __int128 v66;
  std::string::size_type v67;

  if (*(_DWORD *)(a1 + 20) != a3)
  {
LABEL_76:
    *(_WORD *)a8 = 0;
    return;
  }
  *a7 = 1;
  v15 = (const std::string::value_type *)(a5 + 8);
  std::string::operator=((std::string *)(a5 + 8), (const std::string *)(a1 + 32));
  if ((a4 & 1) == 0)
  {
    v16 = *a5;
    if (*a5)
    {
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&v59.__r_.__value_.__r.__words[1] = xmmword_1DF385C50;
      strcpy(v59.__r_.__value_.__l.__data_, "type mismatch: expecting: ");
      v17 = std::string::append(&v59, (&off_1EA98EA98)[v16 + 4]);
      v18 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v60, ", found: ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v61, (&off_1EA98EA98)[a6 + 4]);
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v23 = std::string::append(&v62, ", name: ");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (a2)
      {
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1DF36DA38(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)a2;
          v58 = *(_QWORD *)(a2 + 16);
        }
      }
      else
      {
        HIBYTE(v58) = 0;
        LOBYTE(__p[0]) = 0;
      }
      if (v58 >= 0)
        v41 = __p;
      else
        v41 = (void **)__p[0];
      if (v58 >= 0)
        v42 = HIBYTE(v58) & 0x7F;
      else
        v42 = (std::string::size_type)__p[1];
      v43 = std::string::append(&v63, (const std::string::value_type *)v41, v42);
      v44 = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      v45 = std::string::append(&v64, ", value: ");
      v46 = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      v47 = *((_BYTE *)a5 + 55);
      v48 = v47 < 0;
      if (v47 >= 0)
        v49 = v15;
      else
        v49 = (const std::string::value_type *)*((_QWORD *)a5 + 4);
      v50 = v47 & 0x7F;
      if (v48)
        v51 = *((_QWORD *)a5 + 5);
      else
        v51 = v50;
      v52 = std::string::append(&v65, v49, v51);
      v53 = v52->__r_.__value_.__r.__words[2];
      v66 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v67 = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      flatbuffers::Parser::Error(a1, (_WORD *)a8);
      if (SHIBYTE(v67) < 0)
        operator delete((void *)v66);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (SHIBYTE(v58) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      {
        v54 = (void *)v59.__r_.__value_.__r.__words[0];
LABEL_72:
        operator delete(v54);
      }
      return;
    }
    *a5 = a6;
  }
  if (a3 == 259)
    goto LABEL_75;
  v25 = *a5 + 4;
  v26 = v25 > 0x10;
  v27 = (1 << v25) & 0x18001;
  v28 = v26 || v27 == 0;
  if (v28
    || ((v29 = *((_BYTE *)a5 + 55), v30 = *((_QWORD *)a5 + 5), v29 >= 0)
      ? (v31 = (unsigned __int8 *)v15)
      : (v31 = (unsigned __int8 *)*((_QWORD *)a5 + 4)),
        v29 >= 0 ? (v32 = *((unsigned __int8 *)a5 + 55)) : (v32 = *((_QWORD *)a5 + 5)),
        !v32))
  {
LABEL_75:
    flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a8);
    *(_BYTE *)(a8 + 1) = 1;
    if (*(_BYTE *)a8)
      return;
    goto LABEL_76;
  }
  v33 = &v31[v32];
  v34 = v31;
LABEL_21:
  v35 = 0;
  while (*v34 != a0123456789[v35])
  {
    if (++v35 == 11)
    {
      if (++v34 != v33)
        goto LABEL_21;
      goto LABEL_75;
    }
  }
  if (v34 == v33)
    goto LABEL_75;
  v36 = (unsigned __int8 *)(v34 - v31);
  if (v36 == (unsigned __int8 *)-1)
    goto LABEL_75;
  v37 = v29;
  v38 = v29 & 0x7F;
  if (v37 >= 0)
    v30 = v38;
  if (v30 <= (unint64_t)(v36 + 1) || v36[(_QWORD)v31] != 48 || (v36[(_QWORD)v31 + 1] & 0xDF) != 0x58)
    goto LABEL_75;
  if (v32 > (unint64_t)(v36 + 2))
  {
    v39 = &v36[(_QWORD)v31 + 2];
LABEL_35:
    v40 = 0;
    while (*v39 != aPp[v40])
    {
      if (++v40 == 2)
      {
        if (++v39 != v33)
          goto LABEL_35;
        goto LABEL_78;
      }
    }
    if (v39 == v33 || v39 - v31 == -1)
      goto LABEL_78;
    goto LABEL_75;
  }
LABEL_78:
  std::operator+<char>();
  v55 = std::string::append(&v65, "\"");
  v56 = v55->__r_.__value_.__r.__words[2];
  v66 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v67 = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error(a1, (_WORD *)a8);
  if (SHIBYTE(v67) < 0)
    operator delete((void *)v66);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
  {
    v54 = (void *)v65.__r_.__value_.__r.__words[0];
    goto LABEL_72;
  }
}

double flatbuffers::Parser::ParseEnumFromString@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _WORD *a4@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string::size_type v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  unsigned __int8 **v23;
  std::string::size_type size;
  char v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  int v31;
  void *v33;
  int v34;
  char v35;
  uint64_t v36;
  std::string::size_type v37;
  uint64_t v38;
  uint64_t v39;
  std::string __p;
  std::string v42;
  std::string __str;
  char v44;

  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
    v7 = (unsigned int *)(v6 + 152);
  else
    v7 = (unsigned int *)a2;
  v8 = *v7;
  if (v8 <= 0xFFFFFFFC && v8 - 1 > 9)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    strcpy(__str.__r_.__value_.__l.__data_, "not a valid value for this field");
    flatbuffers::Parser::Error(a1, a4);
    operator delete(__str.__r_.__value_.__l.__data_);
    return result;
  }
  v11 = 0;
  v12 = 0;
  while (v12 != -1)
  {
    v13 = std::string::find((const std::string *)(a1 + 32), 32, v12);
    if (v13 == -1)
      v14 = -1;
    else
      v14 = v13 - v12;
    if (v13 == -1)
      v15 = -1;
    else
      v15 = v13 + 1;
    std::string::basic_string(&__str, (const std::string *)(a1 + 32), v12, v14, (std::allocator<char> *)&v42);
    v16 = *(_QWORD *)(a2 + 16);
    if (v16)
    {
      if (*(_BYTE *)(a1 + 743))
      {
        if (*(char *)(v16 + 23) < 0)
          v17 = *(_QWORD *)(v16 + 8);
        else
          v17 = *(unsigned __int8 *)(v16 + 23);
        std::string::basic_string(&v42, &__str, 0, v17, (std::allocator<char> *)&__p);
        v23 = *(unsigned __int8 ***)(a2 + 16);
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v42.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v42.__r_.__value_.__l.__size_;
        v25 = *((_BYTE *)v23 + 23);
        v26 = v25;
        v27 = (unsigned __int8 *)(v25 & 0x7F);
        if (v26 < 0)
          v27 = v23[1];
        if ((unsigned __int8 *)size == v27)
        {
          if (v26 >= 0)
            v28 = *(unsigned __int8 **)(a2 + 16);
          else
            v28 = *v23;
          if ((*((_BYTE *)&v42.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            v33 = (void *)v42.__r_.__value_.__r.__words[0];
            v34 = memcmp(v42.__r_.__value_.__l.__data_, v28, v42.__r_.__value_.__l.__size_);
            operator delete(v33);
            v23 = *(unsigned __int8 ***)(a2 + 16);
            if (!v34)
            {
LABEL_65:
              if (*((char *)v23 + 23) < 0)
                v37 = (std::string::size_type)v23[1];
              else
                v37 = *((unsigned __int8 *)v23 + 23);
              std::string::basic_string(&v42, &__str, v37, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
              v39 = sub_1DF383318((uint64_t)(v23 + 23), &v42);
              if (v23 + 24 == (unsigned __int8 **)v39)
                v22 = 0;
              else
                v22 = *(_QWORD *)(v39 + 56);
              if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v42.__r_.__value_.__l.__data_);
                if (v22)
                  goto LABEL_75;
              }
              else
              {
LABEL_74:
                if (v22)
                  goto LABEL_75;
              }
            }
          }
          else
          {
            if ((*((_BYTE *)&v42.__r_.__value_.__s + 23) & 0x7F) == 0)
              goto LABEL_65;
            v29 = 0;
            do
            {
              v30 = v42.__r_.__value_.__s.__data_[v29];
              v31 = v28[v29];
            }
            while (v30 == v31 && (*((_BYTE *)&v42.__r_.__value_.__s + 23) & 0x7F) - 1 != v29++);
            if (v30 == v31)
              goto LABEL_65;
          }
        }
        else if ((*((_BYTE *)&v42.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          operator delete(v42.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        v36 = sub_1DF383318(v16 + 184, &__str);
        if (v16 + 192 != v36)
        {
          v22 = *(_QWORD *)(v36 + 56);
          if (v22)
          {
LABEL_75:
            v11 |= *(_QWORD *)(v22 + 136);
            v35 = 1;
            goto LABEL_56;
          }
        }
      }
      std::operator+<char>();
LABEL_53:
      flatbuffers::Parser::Error(a1, a4);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      goto LABEL_55;
    }
    v18 = std::string::rfind(&__str, 46, 0xFFFFFFFFFFFFFFFFLL);
    if (v18 == -1)
    {
      v42.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
      *(_OWORD *)&v42.__r_.__value_.__r.__words[1] = xmmword_1DF385C70;
      strcpy(v42.__r_.__value_.__l.__data_, "enum values need to be qualified by an enum type");
      goto LABEL_53;
    }
    v19 = v18;
    std::string::basic_string(&v42, &__str, 0, v18, (std::allocator<char> *)&__p);
    v20 = flatbuffers::Parser::LookupEnum(a1, (uint64_t)&v42);
    if (v20)
    {
      std::string::basic_string(&__p, &__str, v19 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v44);
      v38 = sub_1DF383318(v20 + 184, &__p);
      if (v20 + 192 == v38)
        v22 = 0;
      else
        v22 = *(_QWORD *)(v38 + 56);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      std::operator+<char>();
      flatbuffers::Parser::Error(a1, a4);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v22 = 0;
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v42.__r_.__value_.__l.__data_);
      if (v20)
        goto LABEL_74;
    }
    else if (v20)
    {
      goto LABEL_74;
    }
LABEL_55:
    v35 = 0;
LABEL_56:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v12 = v15;
    if ((v35 & 1) == 0)
      return result;
  }
  sub_1DF356B08();
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  result = *(double *)&__str.__r_.__value_.__l.__data_;
  *(std::string *)a3 = __str;
  *a4 = 0;
  return result;
}

uint64_t sub_1DF356B08()
{
  uint64_t v0;
  _QWORD v2[13];
  char v3;
  uint64_t v4;

  sub_1DF367FB0((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E0DE4F50];
  v0 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v3 < 0)
    operator delete((void *)v2[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1E0BFF758](&v4);
}

void flatbuffers::Parser::TokenError(flatbuffers::Parser *this@<X0>, _WORD *a2@<X8>)
{
  std::string *v4;
  std::string::size_type v5;
  std::string v6;
  void *__p[2];
  std::string::size_type v8;

  flatbuffers::Parser::TokenToStringId((char *)this, *((_DWORD *)this + 5), &v6);
  v4 = std::string::insert(&v6, 0, "cannot parse value starting with: ");
  v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error((uint64_t)this, a2);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

double sub_1DF356C48(uint64_t a1)
{
  uint64_t v3;
  void **v4;
  double result;
  __int128 v6;
  uint64_t v7;
  _QWORD v8[13];
  char v9;
  uint64_t v10;

  if (*(_DWORD *)a1 > 0xFFFFFFFC || (*(_DWORD *)a1 - 1) <= 9)
  {
    sub_1DF367FB0((uint64_t)v8);
    std::ostream::operator<<();
    std::stringbuf::str();
    v8[0] = *MEMORY[0x1E0DE4F50];
    v3 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v8[2] = v3;
    v8[3] = MEMORY[0x1E0DE4FB8] + 16;
    if (v9 < 0)
      operator delete((void *)v8[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1E0BFF758](&v10);
    v4 = (void **)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      operator delete(*v4);
    result = *(double *)&v6;
    *(_OWORD *)v4 = v6;
    *(_QWORD *)(a1 + 48) = v7;
  }
  return result;
}

double sub_1DF356D38(uint64_t a1)
{
  uint64_t v3;
  void **v4;
  double result;
  __int128 v6;
  uint64_t v7;
  _QWORD v8[13];
  char v9;
  uint64_t v10;

  if (*(_DWORD *)a1 > 0xFFFFFFFC || (*(_DWORD *)a1 - 1) <= 9)
  {
    sub_1DF367FB0((uint64_t)v8);
    std::ostream::operator<<();
    std::stringbuf::str();
    v8[0] = *MEMORY[0x1E0DE4F50];
    v3 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v8[2] = v3;
    v8[3] = MEMORY[0x1E0DE4FB8] + 16;
    if (v9 < 0)
      operator delete((void *)v8[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1E0BFF758](&v10);
    v4 = (void **)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      operator delete(*v4);
    result = *(double *)&v6;
    *(_OWORD *)v4 = v6;
    *(_QWORD *)(a1 + 48) = v7;
  }
  return result;
}

BOOL sub_1DF356E28(uint64_t a1, const void **a2, uint64_t *a3)
{
  uint64_t **v6;
  _QWORD *v7;
  uint64_t v8;

  v6 = *(uint64_t ***)(a1 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 40))
  {
    v7 = sub_1DF3706BC((void **)(a1 + 24), (uint64_t)a3);
  }
  else
  {
    *v6 = a3;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 32) = v7;
  v8 = sub_1DF373324(a1, (uint64_t)a2);
  if (a1 + 8 == v8)
    sub_1DF37108C((uint64_t **)a1, a2, (uint64_t)a2)[7] = a3;
  return a1 + 8 != v8;
}

uint64_t *sub_1DF356EBC(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    JUMPOUT(0x1E0BFF788);
  }
  return result;
}

uint64_t flatbuffers::EnumDef::MinValue(flatbuffers::EnumDef *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 26);
  if (v1 == *((_QWORD *)this + 27))
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t flatbuffers::EnumDef::MaxValue(flatbuffers::EnumDef *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 27);
  if (*((_QWORD *)this + 26) == v1)
    return 0;
  else
    return *(_QWORD *)(v1 - 8);
}

uint64_t flatbuffers::EnumDef::Distance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD *)(a1 + 152);
  if (v3 == 10 || v3 == -3)
  {
    v5 = *(_QWORD *)(a2 + 136);
    v6 = *(_QWORD *)(a3 + 136);
    if (v5 <= v6)
      v7 = *(_QWORD *)(a3 + 136);
    else
      v7 = *(_QWORD *)(a2 + 136);
    if (v5 >= v6)
      v5 = *(_QWORD *)(a3 + 136);
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 136);
    v8 = *(_QWORD *)(a3 + 136);
    if ((uint64_t)v5 <= v8)
      v7 = *(_QWORD *)(a3 + 136);
    else
      v7 = *(_QWORD *)(a2 + 136);
    if ((uint64_t)v5 >= v8)
      v5 = *(_QWORD *)(a3 + 136);
  }
  return v7 - v5;
}

uint64_t flatbuffers::EnumDef::AllFlags(flatbuffers::EnumDef *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v1 = (uint64_t *)*((_QWORD *)this + 26);
  v2 = (uint64_t *)*((_QWORD *)this + 27);
  if (v1 != v2)
  {
    v3 = 0;
    do
    {
      v4 = *v1++;
      v3 |= *(_QWORD *)(v4 + 136);
    }
    while (v1 != v2);
  }
  v5 = *((_DWORD *)this + 38);
  if (v5 == -3 || v5 == 10)
    return sub_1DF356B08();
  else
    return sub_1DF345C20();
}

uint64_t flatbuffers::EnumDef::Count(flatbuffers::EnumDef *this)
{
  int v1;

  v1 = *((_DWORD *)this + 38);
  if (v1 == 10 || v1 == -3)
    return sub_1DF356B08();
  else
    return sub_1DF345C20();
}

uint64_t sub_1DF357004(char *a1, unint64_t *a2)
{
  _BOOL4 v4;
  uint64_t result;
  char *v6;
  int v7;
  unsigned int v8;
  BOOL v9;

  v4 = sub_1DF3667CC(a2, a1, 0, 1);
  result = 0;
  if (v4)
  {
    if (!*a2)
      return 1;
    v6 = a1 - 1;
    do
    {
      v7 = *++v6;
      v8 = v7 - 48;
      if (v7)
        v9 = v8 > 9;
      else
        v9 = 0;
    }
    while (v9);
    if (*(_BYTE *)((__PAIR128__((unint64_t)v6, (unint64_t)a1) - (unint64_t)v6) >> 64) == 45)
    {
      result = 0;
      *a2 = -1;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t *flatbuffers::EnumDef::SortByValue(flatbuffers::EnumDef *this)
{
  int v1;
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;

  v1 = *((_DWORD *)this + 38);
  if (v1 == 10 || v1 == -3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 26);
    v3 = (uint64_t *)*((_QWORD *)this + 27);
    v5 = 126 - 2 * __clz(v3 - v4);
    if (v3 == v4)
      v6 = 0;
    else
      v6 = v5;
    return sub_1DF371224(*((uint64_t **)this + 26), v3, v6, 1);
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 26);
    v8 = (uint64_t *)*((_QWORD *)this + 27);
    v10 = 126 - 2 * __clz(v8 - v9);
    if (v8 == v9)
      v11 = 0;
    else
      v11 = v10;
    return sub_1DF371C10(*((uint64_t **)this + 26), v8, v11, 1);
  }
}

_QWORD *flatbuffers::EnumDef::RemoveDuplicates(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  const void *v11;
  size_t v12;
  void **v13;

  v2 = (_QWORD *)this[26];
  v1 = (_QWORD *)this[27];
  if (v2 != v1)
  {
    v3 = (uint64_t)this;
    v4 = v2 + 1;
    if (v2 + 1 != v1)
    {
      v5 = this + 24;
      do
      {
        v6 = *v4;
        if (*(_QWORD *)(*v2 + 136) == *(_QWORD *)(*v4 + 136))
        {
          v7 = *(_QWORD **)(v3 + 184);
          if (v7 == v5)
            goto LABEL_15;
          do
          {
            if (v7[7] == v6)
              v7[7] = *v2;
            v8 = (_QWORD *)v7[1];
            if (v8)
            {
              do
              {
                v9 = v8;
                v8 = (_QWORD *)*v8;
              }
              while (v8);
            }
            else
            {
              do
              {
                v9 = (_QWORD *)v7[2];
                v10 = *v9 == (_QWORD)v7;
                v7 = v9;
              }
              while (!v10);
            }
            v7 = v9;
          }
          while (v9 != v5);
          if (v6)
          {
LABEL_15:
            sub_1DF367C54(v6 + 88);
            v13 = (void **)(v6 + 24);
            sub_1DF370598(&v13);
            if (*(char *)(v6 + 23) < 0)
              operator delete(*(void **)v6);
            this = (_QWORD *)MEMORY[0x1E0BFF788](v6, 0x10B2C4072A4B994);
          }
          *v4 = 0;
        }
        else
        {
          v2[1] = v6;
          ++v2;
        }
        ++v4;
      }
      while (v4 != v1);
    }
    if (v2 + 1 != v1)
    {
      v11 = v1;
      v12 = *(_QWORD *)(v3 + 216) - (_QWORD)v1;
      if (v12)
        this = memmove(v2 + 1, v11, v12);
      *(_QWORD *)(v3 + 216) = (char *)v2 + v12 + 8;
    }
  }
  return this;
}

void flatbuffers::Parser::ParseEnum(flatbuffers::Parser *this@<X0>, flatbuffers::EnumDef **a2@<X2>, int a3@<W1>, unsigned __int8 *a4@<X8>)
{
  uint64_t v8;
  char *v9;
  _OWORD *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  unsigned int v18;
  _BOOL4 v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  size_t v24;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  char *v32;
  _BOOL4 v33;
  std::string::size_type v34;
  char *v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  std::string *v44;
  std::string::size_type v45;
  void *v46;
  int v47;
  std::string::size_type v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  _BOOL4 v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  BOOL v67;
  uint64_t v68;
  uint64_t *v69;
  _BOOL4 v70;
  uint64_t *v71;
  uint64_t v72;
  _OWORD *v73;
  const char *v74;
  uint64_t v75;
  uint64_t *v76;
  BOOL v77;
  uint64_t v78;
  _BYTE *v79;
  __int128 v80;
  __int128 v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  std::string::size_type v88;
  BOOL v89;
  unint64_t v90;
  void *v91;
  uint64_t *v92;
  uint64_t v93;
  flatbuffers::EnumDef *v94;
  uint64_t *v95;
  uint64_t v96;
  _BOOL4 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  unint64_t v105;
  _BOOL4 v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BOOL4 v114;
  _QWORD v115[2];
  int v116;
  std::string::size_type v117;
  std::string __str;
  _QWORD **v119;
  _QWORD *v120[2];
  _BYTE __p[24];
  char v122;
  int v123;
  uint64_t v124;
  unint64_t v125;
  std::string __dst;
  std::string *v127;
  std::string *v128;
  uint64_t v129;
  std::string v130;
  std::string v131[2];

  v9 = (char *)this + 56;
  v8 = *((_QWORD *)this + 7);
  v127 = 0;
  v128 = 0;
  v129 = 0;
  sub_1DF370610(&v127, v8, *((_QWORD *)this + 8), 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 8) - v8) >> 3));
  flatbuffers::Parser::Next(this, (uint64_t)a4);
  a4[1] = 1;
  if (*a4)
    goto LABEL_9;
  v10 = (_OWORD *)((char *)this + 32);
  if (*((char *)this + 55) < 0)
  {
    sub_1DF36DA38(&__dst, *((void **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *v10;
    __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
  flatbuffers::Parser::Expect(this, 260, (uint64_t)a4);
  a4[1] = 1;
  if (*a4)
    goto LABEL_7;
  v125 = 0;
  flatbuffers::Parser::StartEnum((uint64_t)this, &__dst, a3, (uint64_t *)&v125, a4);
  a4[1] = 1;
  if (*a4)
    goto LABEL_7;
  if ((std::string **)(v125 + 48) != &v127)
    sub_1DF370C24(v125 + 48, v127, v128, 0xAAAAAAAAAAAAAAABLL * (((char *)v128 - (char *)v127) >> 3));
  if ((a3 & 1) != 0)
  {
    if (*((_DWORD *)this + 5) != 58)
      goto LABEL_20;
    flatbuffers::Parser::Next(this, (uint64_t)a4);
    a4[1] = 1;
    if (*a4)
      goto LABEL_7;
    flatbuffers::Parser::ParseType((uint64_t)this, v125 + 152, (uint64_t)a4);
    a4[1] = 1;
    if (*a4)
      goto LABEL_7;
    v11 = v125;
    v12 = *(_DWORD *)(v125 + 152) - 4;
    if (v12 >= 7 || ((0x55u >> v12) & 1) == 0)
    {
      *(_QWORD *)__p = operator new(0x38uLL);
      *(_OWORD *)&__p[8] = xmmword_1DF385AE0;
      strcpy(*(char **)__p, "underlying enum type must be an unsigned integral");
      goto LABEL_57;
    }
    *(_DWORD *)(v125 + 152) = dword_1DF385F44[v12];
    goto LABEL_234;
  }
  if (*((_BYTE *)this + 747))
    goto LABEL_20;
  if (*((_DWORD *)this + 5) != 58)
  {
    *(_QWORD *)__p = operator new(0x60uLL);
    *(_OWORD *)&__p[8] = xmmword_1DF385C80;
    strcpy(*(char **)__p, "must specify the underlying integer type for this enum (e.g. ': short', which was the default).");
LABEL_57:
    flatbuffers::Parser::Error((uint64_t)this, a4);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    goto LABEL_7;
  }
  flatbuffers::Parser::Next(this, (uint64_t)a4);
  a4[1] = 1;
  if (*a4)
    goto LABEL_7;
  flatbuffers::Parser::ParseType((uint64_t)this, v125 + 152, (uint64_t)a4);
  a4[1] = 1;
  if (*a4)
    goto LABEL_7;
  v11 = v125;
  v18 = *(_DWORD *)(v125 + 152);
  v20 = v18 < 0xFFFFFFFD && v18 - 11 < 0xFFFFFFF6;
  if (v18 == 2 || v20)
  {
    *(_QWORD *)__p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_1DF385BC0;
    strcpy(*(char **)__p, "underlying enum type must be integral");
    goto LABEL_57;
  }
LABEL_234:
  *(_QWORD *)(v11 + 168) = v11;
LABEL_20:
  flatbuffers::Parser::ParseMetaData((uint64_t)this, v125 + 72, a4);
  a4[1] = 1;
  if (*a4)
    goto LABEL_7;
  v13 = v125;
  v113 = *(int *)(v125 + 152);
  __p[23] = 9;
  v117 = *(_QWORD *)"bit_flags";
  strcpy(__p, "bit_flags");
  v14 = sub_1DF370B40(v125 + 72, (const void **)__p);
  if ((uint64_t *)(v13 + 80) != v14 && v14[7])
  {
    v15 = v113 <= 0xFFFFFFFC && (v113 - 1) >= 0xA;
    v16 = !v15;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((v16 & 1) != 0)
      goto LABEL_35;
    *(_QWORD *)__p = operator new(0x38uLL);
    *(_OWORD *)&__p[8] = xmmword_1DF385AD0;
    strcpy(*(char **)__p, "underlying type of bit_flags enum must be unsigned");
    flatbuffers::Parser::Warning((uint64_t)this);
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
LABEL_35:
  v116 = *((unsigned __int8 *)this + 747);
  *(_QWORD *)__p = this;
  *(_OWORD *)&__p[8] = v125;
  v122 = v116 ^ 1;
  v123 = 0;
  v124 = -1;
  flatbuffers::Parser::Expect(this, 123, (uint64_t)a4);
  a4[1] = 1;
  if (*a4)
    goto LABEL_40;
  if (((a3 & 1) != 0 || *((_DWORD *)this + 5) == 125) && !*((_BYTE *)this + 747))
  {
    *((_BYTE *)&v131[0].__r_.__value_.__s + 23) = 4;
    strcpy((char *)v131, "NONE");
    sub_1DF3588A4((uint64_t)__p, (uint64_t)v131);
    sub_1DF35C05C(a4, (uint64_t)__p, *(const void ***)&__p[16]);
    a4[1] = 1;
    if (*a4)
      goto LABEL_40;
  }
  v120[0] = 0;
  v120[1] = 0;
  v119 = v120;
  while (1)
  {
    if (*((_DWORD *)this + 5) == 125)
    {
LABEL_235:
      flatbuffers::Parser::Expect(this, 125, (uint64_t)a4);
      a4[1] = 1;
      if (*a4)
        goto LABEL_247;
      v90 = v125;
      if (*(_QWORD *)(v125 + 216) == *(_QWORD *)(v125 + 208))
      {
        v131[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
        *(_OWORD *)&v131[0].__r_.__value_.__r.__words[1] = xmmword_1DF385B90;
        strcpy(v131[0].__r_.__value_.__l.__data_, "incomplete enum declaration, values not found");
        goto LABEL_238;
      }
      *((_BYTE *)&v131[0].__r_.__value_.__s + 23) = 9;
      LOWORD(v131[0].__r_.__value_.__r.__words[1]) = 115;
      v131[0].__r_.__value_.__r.__words[0] = v117;
      v92 = sub_1DF370B40(v125 + 72, (const void **)&v131[0].__r_.__value_.__l.__data_);
      if ((uint64_t *)(v90 + 80) == v92)
        v93 = 0;
      else
        v93 = v92[7];
      if (SHIBYTE(v131[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131[0].__r_.__value_.__l.__data_);
      v94 = (flatbuffers::EnumDef *)v125;
      if (!v93 || (v95 = *(uint64_t **)(v125 + 208), v95 == *(uint64_t **)(v125 + 216)))
      {
LABEL_286:
        if (v116)
        {
          flatbuffers::EnumDef::SortByValue(v94);
          v94 = (flatbuffers::EnumDef *)v125;
        }
        if (a2)
          *a2 = v94;
        flatbuffers::Namespace::GetFullyQualifiedName(*((uint64_t **)this + 37), (uint64_t)v94, 0x3E8uLL, v131);
        v108 = operator new();
        v109 = v125;
        *(_QWORD *)v108 = 16;
        *(_QWORD *)(v108 + 8) = 0;
        *(_QWORD *)(v108 + 16) = v109;
        *(_WORD *)(v108 + 24) = 0;
        sub_1DF3589C0((uint64_t **)this + 10, (const void **)&v131[0].__r_.__value_.__l.__data_, v108);
        if (SHIBYTE(v131[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131[0].__r_.__value_.__l.__data_);
        *(_WORD *)a4 = 0;
        goto LABEL_247;
      }
      v115[0] = 0;
      v115[1] = 0;
      v112 = 0;
      v96 = 8 * byte_1DF385F2C[v113 + 4];
      v98 = v113 < 0xFFFFFFFD && (v113 - 11) < 0xFFFFFFF6;
      v114 = v98;
      v110 = v96;
      v111 = v96 - 1;
      v117 = *(_QWORD *)"bit_flags_all";
      do
      {
        v99 = *v95;
        v100 = *v95 + 88;
        *((_BYTE *)&v131[0].__r_.__value_.__s + 23) = 13;
        v131[0].__r_.__value_.__r.__words[0] = v117;
        *(std::string::size_type *)((char *)v131[0].__r_.__value_.__r.__words + 5) = *(_QWORD *)"lags_all";
        v131[0].__r_.__value_.__s.__data_[13] = 0;
        v101 = sub_1DF370B40(v100, (const void **)&v131[0].__r_.__value_.__l.__data_);
        if ((uint64_t *)(v99 + 96) == v101)
          v102 = 0;
        else
          v102 = v101[7];
        if (SHIBYTE(v131[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131[0].__r_.__value_.__l.__data_);
        if (v102)
        {
          v115[1] = v99;
        }
        else
        {
          *((_BYTE *)&v131[0].__r_.__value_.__s + 23) = 14;
          strcpy((char *)v131, "bit_flags_none");
          v103 = sub_1DF370B40(v100, (const void **)&v131[0].__r_.__value_.__l.__data_);
          if ((uint64_t *)(v99 + 96) == v103)
            v104 = 0;
          else
            v104 = v103[7];
          if (SHIBYTE(v131[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v131[0].__r_.__value_.__l.__data_);
          if (v104)
          {
            v112 = v99;
          }
          else
          {
            v105 = *(_QWORD *)(v99 + 136);
            v106 = v114;
            if (v105 != v111)
              v106 = 0;
            if (v106)
            {
              v131[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
              *(_OWORD *)&v131[0].__r_.__value_.__r.__words[1] = xmmword_1DF385AD0;
              strcpy(v131[0].__r_.__value_.__l.__data_, "underlying type of bit_flags enum must be unsigned");
              goto LABEL_238;
            }
            if (v105 >= v110)
            {
              v131[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
              *(_OWORD *)&v131[0].__r_.__value_.__r.__words[1] = xmmword_1DF385AE0;
              strcpy(v131[0].__r_.__value_.__l.__data_, "bit flag out of range of underlying integral type");
LABEL_238:
              flatbuffers::Parser::Error((uint64_t)this, a4);
              if (SHIBYTE(v131[0].__r_.__value_.__r.__words[2]) < 0)
              {
                v91 = (void *)v131[0].__r_.__value_.__r.__words[0];
                goto LABEL_246;
              }
              goto LABEL_247;
            }
            v107 = 1 << v105;
            *(_QWORD *)(v99 + 136) = v107;
            v115[0] |= v107;
          }
        }
        ++v95;
        v94 = (flatbuffers::EnumDef *)v125;
      }
      while (v95 != *(uint64_t **)(v125 + 216));
      if (v115[1])
      {
        *(_QWORD *)(v115[1] + 136) = v115[0];
        if (!v112)
        {
LABEL_285:
          flatbuffers::EnumDef::SortByValue(v94);
          v94 = (flatbuffers::EnumDef *)v125;
          goto LABEL_286;
        }
      }
      else if (!v112)
      {
        goto LABEL_286;
      }
      *(_QWORD *)(v112 + 136) = 0;
      goto LABEL_285;
    }
    if (*((_BYTE *)this + 747))
    {
      v21 = *((unsigned __int8 *)this + 55);
      v22 = (v21 & 0x80u) == 0 ? v21 & 0x7F : *((_QWORD *)this + 5);
      if (v22 == 6)
      {
        v23 = (char *)this + 32;
        if ((v21 & 0x80) != 0)
        {
          v23 = *(char **)v10;
          v21 = *((_QWORD *)this + 5);
        }
        v24 = v21 >= 6 ? 6 : v21;
        if (!memcmp(v23, "option", v24) && v21 == 6)
        {
          flatbuffers::Parser::ParseProtoOption(this, a4);
          a4[1] = 1;
          if (*a4)
            goto LABEL_247;
          goto LABEL_207;
        }
      }
    }
    v26 = sub_1DF3588A4((uint64_t)__p, (uint64_t)this + 32);
    v27 = v26;
    if (*(char *)(v26 + 23) < 0)
    {
      sub_1DF36DA38(&__str, *(void **)v26, *(_QWORD *)(v26 + 8));
    }
    else
    {
      v28 = *(_OWORD *)v26;
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v26 + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v28;
    }
    if ((char *)(v27 + 24) != v9)
      sub_1DF370C24(v27 + 24, *((std::string **)this + 7), *((std::string **)this + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3));
    flatbuffers::Parser::Expect(this, 260, (uint64_t)a4);
    a4[1] = 1;
    if (*a4)
      goto LABEL_244;
    if (a3)
      break;
LABEL_82:
    if (*((_DWORD *)this + 5) == 61)
    {
      flatbuffers::Parser::Next(this, (uint64_t)a4);
      a4[1] = 1;
      if (*a4)
        goto LABEL_244;
      LOBYTE(v123) = 1;
      v29 = *(_QWORD *)&__p[8];
      v30 = *(_DWORD *)(*(_QWORD *)&__p[8] + 152);
      if (v30 == 10 || v30 == -3)
      {
        v131[0].__r_.__value_.__r.__words[0] = 0;
        if (*((char *)this + 55) >= 0)
          v32 = (char *)this + 32;
        else
          v32 = (char *)*((_QWORD *)this + 4);
        v33 = sub_1DF3667CC((unint64_t *)v131, v32, 0, 1);
        v34 = v131[0].__r_.__value_.__r.__words[0];
        if (v33)
        {
          if (!v131[0].__r_.__value_.__r.__words[0])
            goto LABEL_117;
          v35 = v32 - 1;
          do
          {
            v36 = *++v35;
            v37 = v36 - 48;
            if (v36)
              v38 = v37 > 9;
            else
              v38 = 0;
          }
          while (v38);
          if (*(_BYTE *)((__PAIR128__((unint64_t)v35, (unint64_t)v32) - (unint64_t)v35) >> 64) != 45)
          {
LABEL_117:
            v48 = *(_QWORD *)(*(_QWORD *)&__p[16] + 136);
            *(_QWORD *)(*(_QWORD *)&__p[16] + 136) = v131[0].__r_.__value_.__r.__words[0];
            if (v34 > v48)
            {
LABEL_134:
              BYTE1(v123) = 1;
              *(_WORD *)a4 = 256;
              goto LABEL_135;
            }
LABEL_118:
            if (!v122)
              goto LABEL_134;
            v49 = *(_QWORD *)(v29 + 208);
            v50 = (unint64_t)(*(_QWORD *)(v29 + 216) - v49) >> 3;
            if (!(_DWORD)v50)
              goto LABEL_134;
            v51 = v50 - 1;
            do
            {
              if (HIDWORD(v124) == v51 || (_DWORD)v124 == v51)
                v53 = -1;
              else
                v53 = v51;
              v15 = v51-- != 0;
            }
            while (v15 && v53 == -1);
            if (v53 == -1 || !*(_QWORD *)(v49 + 8 * v53))
              goto LABEL_134;
            v54 = *(_QWORD *)__p;
            v131[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
            *(_OWORD *)&v131[0].__r_.__value_.__r.__words[1] = xmmword_1DF385C70;
            strcpy(v131[0].__r_.__value_.__l.__data_, "enum values must be specified in ascending order");
            flatbuffers::Parser::Error(v54, a4);
            if (SHIBYTE(v131[0].__r_.__value_.__r.__words[2]) < 0)
            {
              v46 = (void *)v131[0].__r_.__value_.__r.__words[0];
              goto LABEL_114;
            }
            goto LABEL_115;
          }
          v34 = -1;
        }
        *(_QWORD *)(*(_QWORD *)&__p[16] + 136) = v34;
      }
      else
      {
        v131[0].__r_.__value_.__r.__words[0] = 0;
        if (*((char *)this + 55) >= 0)
          v39 = (char *)this + 32;
        else
          v39 = (char *)*((_QWORD *)this + 4);
        v40 = sub_1DF3679FC((uint64_t *)v131, v39, 0, 1);
        v41 = v131[0].__r_.__value_.__r.__words[0];
        v42 = *(_QWORD *)(*(_QWORD *)&__p[16] + 136);
        *(_QWORD *)(*(_QWORD *)&__p[16] + 136) = v131[0].__r_.__value_.__r.__words[0];
        if (v40)
        {
          if (v41 > v42)
            goto LABEL_134;
          goto LABEL_118;
        }
      }
      v43 = *(_QWORD *)__p;
      std::operator+<char>();
      v44 = std::string::append(&v130, "\"");
      v45 = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v131[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v131[0].__r_.__value_.__r.__words[2] = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      flatbuffers::Parser::Error(v43, a4);
      if (SHIBYTE(v131[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      {
        v46 = (void *)v130.__r_.__value_.__r.__words[0];
LABEL_114:
        operator delete(v46);
      }
LABEL_115:
      v47 = *a4;
      a4[1] = 1;
      if (v47)
        goto LABEL_244;
LABEL_135:
      flatbuffers::Parser::Expect(this, 258, (uint64_t)a4);
      a4[1] = 1;
      if (*a4)
        goto LABEL_244;
      goto LABEL_136;
    }
    if (v116)
    {
      v131[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
      *(_OWORD *)&v131[0].__r_.__value_.__r.__words[1] = xmmword_1DF385AE0;
      strcpy(v131[0].__r_.__value_.__l.__data_, "Protobuf mode doesn't allow implicit enum values.");
      goto LABEL_242;
    }
LABEL_136:
    v55 = v27 + 88;
    flatbuffers::Parser::ParseMetaData((uint64_t)this, v27 + 88, a4);
    a4[1] = 1;
    if (*a4)
      goto LABEL_244;
    *((_BYTE *)&v131[0].__r_.__value_.__s + 23) = 13;
    strcpy((char *)v131, "bit_flags_all");
    qmemcpy(v115, "lags_allbit_flag", sizeof(v115));
    v56 = sub_1DF370B40(v27 + 88, (const void **)&v131[0].__r_.__value_.__l.__data_);
    v57 = (uint64_t *)(v27 + 96);
    if (v57 == v56)
      v58 = 0;
    else
      v58 = v56[7];
    if (SHIBYTE(v131[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v131[0].__r_.__value_.__l.__data_);
    if (v58)
    {
      v59 = *(_QWORD *)&__p[8];
      *((_BYTE *)&v131[0].__r_.__value_.__s + 23) = 9;
      v131[0].__r_.__value_.__r.__words[0] = v117;
      LOWORD(v131[0].__r_.__value_.__r.__words[1]) = 115;
      v60 = sub_1DF370B40(*(_QWORD *)&__p[8] + 72, (const void **)&v131[0].__r_.__value_.__l.__data_);
      v61 = (uint64_t *)(v59 + 80) == v60 || v60[7] == 0;
      if (SHIBYTE(v131[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131[0].__r_.__value_.__l.__data_);
      if (v61)
      {
        v64 = *(_QWORD *)__p;
        v131[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
        *(_OWORD *)&v131[0].__r_.__value_.__r.__words[1] = xmmword_1DF385B40;
        strcpy(v131[0].__r_.__value_.__l.__data_, "invalid bit_flags_all for enum definition: missing bit_flags attribute");
        goto LABEL_195;
      }
      v65 = *(_QWORD *)&__p[16];
      *((_BYTE *)&v131[0].__r_.__value_.__s + 23) = 14;
      strcpy((char *)v131, "bit_flags_none");
      v66 = sub_1DF370B40(*(_QWORD *)&__p[16] + 88, (const void **)&v131[0].__r_.__value_.__l.__data_);
      v67 = (uint64_t *)(v65 + 96) == v66 || v66[7] == 0;
      if (SHIBYTE(v131[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131[0].__r_.__value_.__l.__data_);
      if (!v67)
      {
        v64 = *(_QWORD *)__p;
        v73 = operator new(0x48uLL);
        v131[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
        *(_OWORD *)&v131[0].__r_.__value_.__r.__words[1] = xmmword_1DF385C90;
        v74 = "invalid attributes combination: bit_flags_all and bit_flags_none";
        goto LABEL_194;
      }
      if (BYTE1(v123))
      {
        v64 = *(_QWORD *)__p;
        v131[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
        *(_OWORD *)&v131[0].__r_.__value_.__r.__words[1] = xmmword_1DF385CA0;
        strcpy(v131[0].__r_.__value_.__l.__data_, "invalid attribute bit_flags_all on enumerator with an explicit value");
        goto LABEL_195;
      }
      if ((v124 & 0x80000000) == 0)
      {
        v64 = *(_QWORD *)__p;
        v131[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
        *(_OWORD *)&v131[0].__r_.__value_.__r.__words[1] = xmmword_1DF385B20;
        strcpy(v131[0].__r_.__value_.__l.__data_, "enumerator with bit_flags_all attribute already defined");
        goto LABEL_195;
      }
      *(_QWORD *)(v65 + 136) = -1;
      BYTE2(v123) = 1;
      goto LABEL_232;
    }
    *((_BYTE *)&v131[0].__r_.__value_.__s + 23) = 14;
    strcpy((char *)v131, "bit_flags_none");
    v62 = sub_1DF370B40(v55, (const void **)&v131[0].__r_.__value_.__l.__data_);
    if (v57 == v62)
      v63 = 0;
    else
      v63 = v62[7];
    if (SHIBYTE(v131[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v131[0].__r_.__value_.__l.__data_);
    if (v63)
    {
      v68 = *(_QWORD *)&__p[8];
      *((_BYTE *)&v131[0].__r_.__value_.__s + 23) = 9;
      v131[0].__r_.__value_.__r.__words[0] = v117;
      LOWORD(v131[0].__r_.__value_.__r.__words[1]) = 115;
      v69 = sub_1DF370B40(*(_QWORD *)&__p[8] + 72, (const void **)&v131[0].__r_.__value_.__l.__data_);
      v70 = (uint64_t *)(v68 + 80) == v69 || v69[7] == 0;
      if (SHIBYTE(v131[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131[0].__r_.__value_.__l.__data_);
      if (v70)
      {
        v64 = *(_QWORD *)__p;
        v131[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
        *(_OWORD *)&v131[0].__r_.__value_.__r.__words[1] = xmmword_1DF385CC0;
        strcpy(v131[0].__r_.__value_.__l.__data_, "invalid bit_flags_none for enum definition: missing bit_flags attribute");
        goto LABEL_195;
      }
      v75 = *(_QWORD *)&__p[16];
      *((_BYTE *)&v131[0].__r_.__value_.__s + 23) = 13;
      v131[0].__r_.__value_.__r.__words[0] = v115[1];
      *(std::string::size_type *)((char *)v131[0].__r_.__value_.__r.__words + 5) = v115[0];
      v131[0].__r_.__value_.__s.__data_[13] = 0;
      v76 = sub_1DF370B40(*(_QWORD *)&__p[16] + 88, (const void **)&v131[0].__r_.__value_.__l.__data_);
      v77 = (uint64_t *)(v75 + 96) == v76 || v76[7] == 0;
      if (SHIBYTE(v131[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131[0].__r_.__value_.__l.__data_);
      if (!v77)
      {
        v64 = *(_QWORD *)__p;
        v73 = operator new(0x48uLL);
        v131[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
        *(_OWORD *)&v131[0].__r_.__value_.__r.__words[1] = xmmword_1DF385C90;
        v74 = "invalid attributes combination: bit_flags_none and bit_flags_all";
LABEL_194:
        v80 = *((_OWORD *)v74 + 1);
        *v73 = *(_OWORD *)v74;
        v73[1] = v80;
        v81 = *((_OWORD *)v74 + 3);
        v73[2] = *((_OWORD *)v74 + 2);
        v73[3] = v81;
        *((_BYTE *)v73 + 64) = 0;
LABEL_195:
        flatbuffers::Parser::Error(v64, a4);
        if (SHIBYTE(v131[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131[0].__r_.__value_.__l.__data_);
        v82 = *a4;
        a4[1] = 1;
        if (v82)
          goto LABEL_244;
        goto LABEL_198;
      }
      if (BYTE1(v123))
      {
        v64 = *(_QWORD *)__p;
        v131[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
        *(_OWORD *)&v131[0].__r_.__value_.__r.__words[1] = xmmword_1DF385CB0;
        strcpy(v131[0].__r_.__value_.__l.__data_, "invalid attribute bit_flags_none on enumerator with an explicit value");
        goto LABEL_195;
      }
      if ((v124 & 0x8000000000000000) == 0)
      {
        v64 = *(_QWORD *)__p;
        v131[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
        *(_OWORD *)&v131[0].__r_.__value_.__r.__words[1] = xmmword_1DF385C00;
        strcpy(v131[0].__r_.__value_.__l.__data_, "enumerator with bit_flags_none attribute already defined");
        goto LABEL_195;
      }
      *(_QWORD *)(v75 + 136) = 0;
      HIBYTE(v123) = 1;
      goto LABEL_232;
    }
    *((_BYTE *)&v131[0].__r_.__value_.__s + 23) = 14;
    strcpy((char *)v131, "apple_internal");
    v71 = sub_1DF370B40(v55, (const void **)&v131[0].__r_.__value_.__l.__data_);
    if (v57 == v71)
      v72 = 0;
    else
      v72 = v71[7];
    if (SHIBYTE(v131[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v131[0].__r_.__value_.__l.__data_);
    if (v72)
    {
      *(_BYTE *)(*(_QWORD *)&__p[16] + 80) = 1;
LABEL_232:
      *(_WORD *)a4 = 256;
    }
LABEL_198:
    sub_1DF35C05C(a4, (uint64_t)__p, *(const void ***)&__p[16]);
    a4[1] = 1;
    if (*a4)
      goto LABEL_244;
    if (*((_BYTE *)this + 747) && *((_DWORD *)this + 5) == 91)
    {
      flatbuffers::Parser::Next(this, (uint64_t)a4);
      a4[1] = 1;
      v83 = *a4;
      do
      {
        if (v83)
          goto LABEL_244;
        v84 = *((_DWORD *)this + 5);
        flatbuffers::Parser::Next(this, (uint64_t)a4);
        a4[1] = 1;
        v83 = *a4;
      }
      while (v84 != 93);
      if (*a4)
        goto LABEL_244;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_207:
    if (*((_BYTE *)this + 747))
      v85 = 59;
    else
      v85 = 44;
    if (*((_DWORD *)this + 5) != v85)
      goto LABEL_235;
    flatbuffers::Parser::Next(this, (uint64_t)a4);
    a4[1] = 1;
    if (*a4)
      goto LABEL_247;
  }
  flatbuffers::Parser::ParseNamespacing(this, &__str, (std::string *)v27, a4);
  a4[1] = 1;
  if (*a4)
    goto LABEL_244;
  if (*((_BYTE *)this + 864))
  {
    std::string::operator=((std::string *)v27, &__str);
    if (*(char *)(v27 + 23) < 0)
    {
      v79 = *(_BYTE **)v27;
      v78 = *(_QWORD *)(v27 + 8);
    }
    else
    {
      v78 = *(unsigned __int8 *)(v27 + 23);
      v79 = (_BYTE *)v27;
    }
    for (; v78; --v78)
    {
      if (*v79 == 46)
        *v79 = 95;
      ++v79;
    }
  }
  if (*((_DWORD *)this + 5) != 58)
  {
    v87 = flatbuffers::Parser::LookupCreateStruct((uint64_t)this, &__str, 1, 0);
    *(_QWORD *)(v27 + 48) = 15;
    *(_QWORD *)(v27 + 56) = v87;
    *(_QWORD *)(v27 + 64) = 0;
    *(_WORD *)(v27 + 72) = 0;
    v86 = 15;
LABEL_229:
    if (!*(_BYTE *)(v125 + 149))
    {
      v88 = *(_QWORD *)(v27 + 56);
      v131[0].__r_.__value_.__r.__words[0] = v86;
      v131[0].__r_.__value_.__l.__size_ = v88;
      v89 = (sub_1DF383CB4((uint64_t)&v119, v86, v88, v131) & 1) == 0;
      *(_BYTE *)(v125 + 149) = v89;
    }
    goto LABEL_82;
  }
  flatbuffers::Parser::Next(this, (uint64_t)a4);
  a4[1] = 1;
  if (*a4)
    goto LABEL_244;
  flatbuffers::Parser::ParseType((uint64_t)this, v27 + 48, (uint64_t)a4);
  a4[1] = 1;
  if (*a4)
    goto LABEL_244;
  v86 = *(_DWORD *)(v27 + 48);
  if ((v86 | 2) == 0xF)
    goto LABEL_229;
  v131[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&v131[0].__r_.__value_.__r.__words[1] = xmmword_1DF385C70;
  strcpy(v131[0].__r_.__value_.__l.__data_, "union value type may only be table/struct/string");
LABEL_242:
  flatbuffers::Parser::Error((uint64_t)this, a4);
  if (SHIBYTE(v131[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131[0].__r_.__value_.__l.__data_);
LABEL_244:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v91 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_246:
    operator delete(v91);
  }
LABEL_247:
  sub_1DF366F24(v120[0]);
LABEL_40:
  v17 = *(_QWORD *)&__p[16];
  if (*(_QWORD *)&__p[16])
  {
    sub_1DF367C54(*(_QWORD *)&__p[16] + 88);
    v131[0].__r_.__value_.__r.__words[0] = v17 + 24;
    sub_1DF370598((void ***)v131);
    if (*(char *)(v17 + 23) < 0)
      operator delete(*(void **)v17);
    MEMORY[0x1E0BFF788](v17, 0x10B2C4072A4B994);
  }
LABEL_7:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_9:
  *(_QWORD *)__p = &v127;
  sub_1DF370598((void ***)__p);
}

void flatbuffers::Parser::StartEnum(uint64_t a1@<X0>, const std::string *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, _WORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  std::string __p;

  v10 = operator new();
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  *(_QWORD *)(v10 + 96) = 0;
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 72) = v10 + 80;
  *(_QWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)(v10 + 112) = 0;
  *(_BYTE *)(v10 + 120) = 0;
  *(_QWORD *)(v10 + 136) = 0xFFFFFFFF00000000;
  *(_DWORD *)(v10 + 144) = 1;
  *(_WORD *)(v10 + 148) = 0;
  *(_QWORD *)(v10 + 160) = 0;
  *(_QWORD *)(v10 + 168) = 0;
  *(_WORD *)(v10 + 176) = 0;
  *(_QWORD *)(v10 + 192) = 0;
  *(_QWORD *)(v10 + 152) = 0;
  *(_QWORD *)(v10 + 184) = v10 + 192;
  *(_QWORD *)(v10 + 200) = 0;
  *(_QWORD *)(v10 + 208) = 0;
  *(_QWORD *)(v10 + 216) = 0;
  *(_QWORD *)(v10 + 224) = 0;
  std::string::operator=((std::string *)v10, a2);
  std::string::operator=((std::string *)(v10 + 24), (const std::string *)(a1 + 1152));
  if (v10 + 48 != a1 + 56)
    sub_1DF370C24(v10 + 48, *(std::string **)(a1 + 56), *(std::string **)(a1 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3));
  *(_BYTE *)(v10 + 148) = a3;
  v11 = *(uint64_t **)(a1 + 296);
  *(_QWORD *)(v10 + 128) = v11;
  flatbuffers::Namespace::GetFullyQualifiedName(v11, (uint64_t)a2, 0x3E8uLL, &__p);
  v12 = sub_1DF382900(a1 + 176, (const void **)&__p.__r_.__value_.__l.__data_, v10);
  v13 = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v13)
    {
LABEL_5:
      std::operator+<char>();
      flatbuffers::Parser::Error(a1, a5);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if (v12)
  {
    goto LABEL_5;
  }
  if (a3)
    v14 = 1;
  else
    v14 = 7;
  *(_DWORD *)(v10 + 152) = v14;
  *(_QWORD *)(v10 + 168) = v10;
  if (a4)
    *a4 = v10;
  *a5 = 0;
}

uint64_t sub_1DF3588A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 208);
  v5 = (unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) - v4) >> 3;
  if (!(_DWORD)v5)
    goto LABEL_13;
  v6 = v5 - 1;
  do
  {
    if (*(_DWORD *)(a1 + 32) == v6)
    {
      v7 = -1;
    }
    else if (v6 == *(_DWORD *)(a1 + 36))
    {
      v7 = -1;
    }
    else
    {
      v7 = v6;
    }
    v8 = v6-- != 0;
  }
  while (v8 && v7 == -1);
  if (v7 == -1)
LABEL_13:
    v9 = 0;
  else
    v9 = *(_QWORD *)(v4 + 8 * v7);
  *(_BYTE *)(a1 + 25) = v9 == 0;
  *(_WORD *)(a1 + 26) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  v10 = operator new();
  v11 = v10;
  if (v9)
    v9 = *(_QWORD *)(v9 + 136);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DF36DA38((_BYTE *)v10, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(v11 + 80) = 0;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_WORD *)(v11 + 72) = 0;
  *(_QWORD *)(v11 + 104) = 0;
  *(_QWORD *)(v11 + 112) = 0;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 88) = v11 + 96;
  *(_QWORD *)(v11 + 120) = 0;
  *(_QWORD *)(v11 + 128) = 0;
  *(_QWORD *)(v11 + 136) = v9;
  *(_QWORD *)(a1 + 16) = v11;
  return v11;
}

uint64_t sub_1DF3589C0(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  char v10;
  BOOL v11;
  const void *v12;
  size_t v13;
  size_t v14;
  uint64_t *v15;
  uint64_t **v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  _BOOL4 v21;
  BOOL v22;
  uint64_t **v23;
  uint64_t **v24;
  int v25;
  size_t v26;
  const void *v27;
  _QWORD *v28;
  const void *v29;
  size_t v30;
  const void *v31;
  size_t v32;
  size_t v33;
  size_t v34;
  int v35;
  _BOOL4 v36;
  size_t v37;
  int v38;
  _BOOL4 v39;
  _QWORD *v40;
  _BYTE *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t result;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t *v47;
  char v48;
  int v49;
  uint64_t v50;
  _QWORD v51[2];

  v6 = a1[4];
  if (v6 >= a1[5])
  {
    v7 = sub_1DF3706BC((void **)a1 + 3, a3);
  }
  else
  {
    *v6 = a3;
    v7 = v6 + 1;
  }
  v8 = a1 + 1;
  v9 = a1[1];
  a1[4] = v7;
  if (!v9)
  {
    v24 = a1 + 1;
    goto LABEL_61;
  }
  v10 = *((_BYTE *)a2 + 23);
  v11 = v10 < 0;
  if (v10 >= 0)
    v12 = a2;
  else
    v12 = *a2;
  v13 = v10 & 0x7F;
  if (v11)
    v14 = (size_t)a2[1];
  else
    v14 = v13;
  v15 = v9;
  v16 = a1 + 1;
  do
  {
    if (*((char *)v15 + 55) < 0)
    {
      v17 = (const void *)v15[4];
      v18 = v15[5];
    }
    else
    {
      v17 = v15 + 4;
      v18 = *((unsigned __int8 *)v15 + 55);
    }
    if (v14 >= v18)
      v19 = v18;
    else
      v19 = v14;
    v20 = memcmp(v17, v12, v19);
    v21 = v18 < v14;
    if (v20)
      v21 = v20 < 0;
    v22 = !v21;
    if (v21)
      v23 = (uint64_t **)(v15 + 1);
    else
      v23 = (uint64_t **)v15;
    if (v22)
      v16 = (uint64_t **)v15;
    v15 = *v23;
  }
  while (*v23);
  if (v16 == v8)
  {
LABEL_28:
    v24 = a1 + 1;
    if (v9)
    {
      v25 = *((char *)a2 + 23);
      if (v25 >= 0)
        v26 = *((unsigned __int8 *)a2 + 23);
      else
        v26 = (size_t)a2[1];
      if (v25 >= 0)
        v27 = a2;
      else
        v27 = *a2;
      while (1)
      {
        while (1)
        {
          v24 = (uint64_t **)v9;
          v28 = v9 + 4;
          v29 = (const void *)v9[4];
          v30 = *((unsigned __int8 *)v9 + 55);
          if ((v30 & 0x80u) == 0)
            v31 = v28;
          else
            v31 = v29;
          v32 = v28[1];
          if ((v30 & 0x80u) == 0)
            v33 = v30 & 0x7F;
          else
            v33 = v28[1];
          if (v33 >= v26)
            v34 = v26;
          else
            v34 = v33;
          v35 = memcmp(v27, v31, v34);
          v36 = v26 < v33;
          if (v35)
            v36 = v35 < 0;
          if (!v36)
            break;
          v9 = *v24;
          v8 = v24;
          if (!*v24)
            goto LABEL_61;
        }
        if ((v30 & 0x80u) != 0)
          v30 = v32;
        if (v26 >= v30)
          v37 = v30;
        else
          v37 = v26;
        v38 = memcmp(v31, v27, v37);
        v39 = v30 < v26;
        if (v38)
          v39 = v38 < 0;
        if (!v39)
          break;
        v9 = v24[1];
        if (!v9)
        {
          v8 = v24 + 1;
          goto LABEL_61;
        }
      }
      v40 = v24;
      goto LABEL_66;
    }
LABEL_61:
    v40 = operator new(0x40uLL);
    v41 = v40 + 4;
    if (*((char *)a2 + 23) < 0)
    {
      sub_1DF36DA38(v41, (void *)*a2, (unint64_t)a2[1]);
    }
    else
    {
      *(_OWORD *)v41 = *(_OWORD *)a2;
      v40[6] = a2[2];
    }
    v40[7] = 0;
    *v40 = 0;
    v40[1] = 0;
    v40[2] = v24;
    *v8 = v40;
    v42 = (uint64_t *)**a1;
    v43 = v40;
    if (v42)
    {
      *a1 = v42;
      v43 = *v8;
    }
    sub_1DF36718C(a1[1], v43);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_66:
    result = 0;
    v40[7] = a3;
    return result;
  }
  v47 = v16[4];
  v46 = v16 + 4;
  v45 = v47;
  v48 = *((_BYTE *)v46 + 23);
  v49 = v48;
  if (v48 >= 0)
    v45 = v46;
  v50 = v48 & 0x7F;
  if (v49 < 0)
    v50 = v46[1];
  v51[0] = v45;
  v51[1] = v50;
  if ((sub_1DF36712C(a2, (uint64_t)v51) & 0x80000000) != 0)
  {
    v9 = *v8;
    goto LABEL_28;
  }
  return 1;
}

void flatbuffers::Parser::StartStruct(const std::string *a1@<X0>, std::string *a2@<X1>, std::string **a3@<X2>, _WORD *a4@<X8>)
{
  std::string *Struct;
  std::string *v9;
  _QWORD *size;
  _QWORD *v11;
  _QWORD *i;
  void *__p;
  char v14;

  Struct = (std::string *)flatbuffers::Parser::LookupCreateStruct((uint64_t)a1, a2, 1, 1);
  if (Struct[8].__r_.__value_.__s.__data_[9])
  {
    v9 = Struct;
    Struct[8].__r_.__value_.__s.__data_[9] = 0;
    std::string::operator=(Struct, a2);
    std::string::operator=(v9 + 1, a1 + 48);
    size = (_QWORD *)a1[6].__r_.__value_.__l.__size_;
    v11 = (_QWORD *)a1[6].__r_.__value_.__r.__words[2];
    if (size != v11)
    {
      while ((std::string *)*size != v9)
      {
        if (++size == v11)
        {
          size = (_QWORD *)a1[6].__r_.__value_.__r.__words[2];
          break;
        }
      }
    }
    if (size != v11)
    {
      for (i = size + 1; i != v11; ++i)
      {
        if ((std::string *)*i != v9)
          *size++ = *i;
      }
    }
    *size = v9;
    *a3 = v9;
    *a4 = 0;
  }
  else
  {
    std::operator+<char>();
    flatbuffers::Parser::Error((uint64_t)a1, a4);
    if (v14 < 0)
      operator delete(__p);
  }
}

void flatbuffers::Parser::CheckClash(char *__s@<X3>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, int a5@<W4>, _WORD *a6@<X8>)
{
  size_t v12;
  const std::string **v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  const std::string *v17;
  std::string::size_type size;
  unsigned int v19;
  std::string::size_type v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  std::string::size_type v26;
  char v27;
  BOOL v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  uint64_t v34;
  std::string v35;
  std::string v36;
  std::string v37;

  v12 = strlen(__s);
  v13 = *(const std::string ***)a3;
  if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
  {
LABEL_37:
    *a6 = 0;
    return;
  }
  v14 = v12;
  v15 = a4 + 152;
  v16 = a4 + 160;
  while (1)
  {
    v17 = *v13;
    if (SHIBYTE((*v13)->__r_.__value_.__r.__words[2]) < 0)
      break;
    size = HIBYTE((*v13)->__r_.__value_.__r.__words[2]);
    if (v14 < size)
      goto LABEL_7;
LABEL_13:
    if (++v13 == *(const std::string ***)(a3 + 8))
      goto LABEL_37;
  }
  size = v17->__r_.__value_.__l.__size_;
  if (size <= v14)
    goto LABEL_13;
LABEL_7:
  if (std::string::compare(*v13, size - v14, v14, __s))
    goto LABEL_13;
  v19 = (*v13)[6].__r_.__value_.__r.__words[1];
  if (v19 >= 0xFFFFFFFD || v19 == 1)
    goto LABEL_13;
  if (SHIBYTE(v17->__r_.__value_.__r.__words[2]) < 0)
    v21 = v17->__r_.__value_.__l.__size_;
  else
    v21 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
  std::string::basic_string(&v37, v17, 0, v21 - v14, (std::allocator<char> *)&v36);
  v22 = sub_1DF383318(v15, &v37);
  if (v16 == v22)
    v23 = 0;
  else
    v23 = *(_QWORD *)(v22 + 56);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    v34 = v23;
    operator delete(v37.__r_.__value_.__l.__data_);
    v23 = v34;
  }
  if (!v23 || *(_DWORD *)(v23 + 152) != a5)
    goto LABEL_13;
  v24 = v23;
  std::operator+<char>();
  v25 = std::string::append(&v35, " would clash with generated functions for field ");
  v26 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = *(_BYTE *)(v24 + 23);
  v28 = v27 < 0;
  if (v27 >= 0)
    v29 = (const std::string::value_type *)v24;
  else
    v29 = *(const std::string::value_type **)v24;
  v30 = v27 & 0x7F;
  if (v28)
    v31 = *(_QWORD *)(v24 + 8);
  else
    v31 = v30;
  v32 = std::string::append(&v36, v29, v31);
  v33 = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error(a2, a6);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
}

void **flatbuffers::Parser::UniqueNamespace(uint64_t a1, void **a2)
{
  void **v2;
  void ***v4;
  void ***v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int64_t v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 *v13;
  char v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _QWORD *v19;
  void **v21;

  v2 = a2;
  v5 = *(void ****)(a1 + 272);
  v4 = *(void ****)(a1 + 280);
  if (v5 != v4)
  {
    v7 = (unsigned __int8 *)*a2;
    v6 = (unsigned __int8 *)a2[1];
    v8 = v6 - (_BYTE *)*a2;
    do
    {
      v9 = (unsigned __int8 **)**v5;
      if (v8 == (_BYTE *)(*v5)[1] - (_BYTE *)v9)
      {
        if (v7 == v6)
        {
LABEL_27:
          v21 = v2;
          sub_1DF370598(&v21);
          MEMORY[0x1E0BFF788](v2, 0x1020C4016EE4530);
          return *v5;
        }
        v10 = v7;
        while (1)
        {
          v11 = v10[23];
          v12 = v11 & 0x7F;
          if ((v11 & 0x80u) == 0)
            v13 = (unsigned __int8 *)(v11 & 0x7F);
          else
            v13 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
          v14 = *((_BYTE *)v9 + 23);
          v15 = v14;
          v16 = (unsigned __int8 *)(v14 & 0x7F);
          if (v15 < 0)
            v16 = v9[1];
          if (v13 != v16)
            break;
          if (v15 >= 0)
            v17 = (unsigned __int8 *)v9;
          else
            v17 = *v9;
          if ((v10[23] & 0x80) != 0)
          {
            if (memcmp(*(const void **)v10, v17, *((_QWORD *)v10 + 1)))
              break;
          }
          else if ((v11 & 0x7F) != 0)
          {
            v18 = 0;
            while (v10[v18] == v17[v18])
            {
              if (v12 == ++v18)
                goto LABEL_22;
            }
            break;
          }
LABEL_22:
          v10 += 24;
          v9 += 3;
          if (v10 == v6)
            goto LABEL_27;
        }
      }
      ++v5;
    }
    while (v5 != v4);
  }
  if ((unint64_t)v4 >= *(_QWORD *)(a1 + 288))
  {
    v19 = sub_1DF3706BC((void **)(a1 + 272), (uint64_t)v2);
  }
  else
  {
    *v4 = v2;
    v19 = v4 + 1;
  }
  *(_QWORD *)(a1 + 280) = v19;
  return v2;
}

std::string *flatbuffers::Parser::UnqualifiedName@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4;
  std::string::size_type v5;
  std::string::size_type v6;
  std::string::size_type v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  std::string *v16;
  char *v17;
  __int128 v18;
  int64x2_t v19;
  std::string *v20;
  int v21;
  std::string v25;
  uint64_t v26;
  int64x2_t v27;
  unint64_t v28;
  uint64_t v29;

  v4 = operator new();
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)v4 = 0u;
  v5 = std::string::find(a2, 46, 0);
  if (v5 == -1)
  {
    v7 = 0;
  }
  else
  {
    v6 = v5;
    v7 = 0;
    do
    {
      std::string::basic_string(&v25, a2, v7, v6 - v7, (std::allocator<char> *)&v26);
      v8 = *(_QWORD *)(v4 + 8);
      v9 = *(_QWORD *)(v4 + 16);
      if (v8 >= v9)
      {
        v11 = *(_QWORD *)v4;
        v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *(_QWORD *)v4) >> 3);
        v13 = v12 + 1;
        if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((uint64_t)(v9 - v11) >> 3) > v13)
          v13 = 0x5555555555555556 * ((uint64_t)(v9 - v11) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v11) >> 3) >= 0x555555555555555)
          v14 = 0xAAAAAAAAAAAAAAALL;
        else
          v14 = v13;
        v29 = v4 + 16;
        if (v14)
        {
          if (v14 > 0xAAAAAAAAAAAAAAALL)
            sub_1DF3667C0();
          v15 = (char *)operator new(24 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = (std::string *)&v15[24 * v12];
        *v16 = v25;
        memset(&v25, 0, sizeof(v25));
        if (v8 == v11)
        {
          v19 = vdupq_n_s64(v8);
          v17 = &v15[24 * v12];
        }
        else
        {
          v17 = &v15[24 * v12];
          do
          {
            v18 = *(_OWORD *)(v8 - 24);
            *((_QWORD *)v17 - 1) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)(v17 - 24) = v18;
            v17 -= 24;
            *(_QWORD *)(v8 - 16) = 0;
            *(_QWORD *)(v8 - 8) = 0;
            *(_QWORD *)(v8 - 24) = 0;
            v8 -= 24;
          }
          while (v8 != v11);
          v19 = *(int64x2_t *)v4;
          v9 = *(_QWORD *)(v4 + 16);
        }
        v20 = v16 + 1;
        *(_QWORD *)v4 = v17;
        *(_QWORD *)(v4 + 8) = v16 + 1;
        v27 = v19;
        *(_QWORD *)(v4 + 16) = &v15[24 * v14];
        v28 = v9;
        v26 = v19.i64[0];
        sub_1DF370790((uint64_t)&v26);
        v21 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(v4 + 8) = v20;
        if (v21 < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
      }
      else
      {
        v10 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
        *(_QWORD *)(v8 + 16) = *((_QWORD *)&v25.__r_.__value_.__l + 2);
        *(_OWORD *)v8 = v10;
        *(_QWORD *)(v4 + 8) = v8 + 24;
      }
      v7 = v6 + 1;
      v6 = std::string::find(a2, 46, v6 + 1);
    }
    while (v6 != -1);
  }
  *(_QWORD *)(a1 + 296) = flatbuffers::Parser::UniqueNamespace(a1, (void **)v4);
  return std::string::basic_string(a3, a2, v7, ~v7, (std::allocator<char> *)&v26);
}

void flatbuffers::Parser::ParseDecl(flatbuffers::Parser *this@<X0>, uint64_t a2@<X8>)
{
  char **v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  size_t v8;
  char v9;
  char *v10;
  size_t v11;
  void *v12;
  std::string *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  std::string::value_type v17;
  uint64_t *v18;
  uint64_t v19;
  const char *v20;
  int v21;
  uint8x8_t v22;
  std::string::pointer data;
  uint64_t *p_size;
  char *size;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  std::string::size_type v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  int v42;
  uint64_t v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  void *v47;
  std::string::size_type v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string::size_type v52;
  std::string v53;
  std::string v54;
  std::string *v55;
  std::string __dst;
  std::string *v57;
  std::string *v58;
  uint64_t v59;
  std::string __p;
  uint64_t v61;
  void *v62;
  char v63;
  _BYTE v64[160];

  v57 = 0;
  v58 = 0;
  v59 = 0;
  sub_1DF370610(&v57, *((_QWORD *)this + 7), *((_QWORD *)this + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3));
  if (*((_DWORD *)this + 5) != 260)
    goto LABEL_26;
  v4 = (char **)((char *)this + 32);
  v5 = *((unsigned __int8 *)this + 55);
  if ((v5 & 0x80u) == 0)
    v6 = v5 & 0x7F;
  else
    v6 = *((_QWORD *)this + 5);
  if (v6 != 5)
  {
    if (v6 == 6)
    {
      v7 = (char *)this + 32;
      if ((v5 & 0x80) != 0)
      {
        v7 = *v4;
        v5 = *((_QWORD *)this + 5);
      }
      v8 = v5 >= 6 ? 6 : v5;
      if (!memcmp(v7, "struct", v8) && v5 == 6)
      {
        v9 = 1;
        goto LABEL_23;
      }
    }
LABEL_26:
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 20;
    strcpy((char *)&__p, "declaration expected");
    flatbuffers::Parser::Error((uint64_t)this, (_WORD *)a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v12 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_28:
      operator delete(v12);
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  v10 = (char *)this + 32;
  if ((v5 & 0x80) != 0)
  {
    v10 = *v4;
    v5 = *((_QWORD *)this + 5);
  }
  if (v5 >= 5)
    v11 = 5;
  else
    v11 = v5;
  if (memcmp(v10, "table", v11) || v5 != 5)
    goto LABEL_26;
  v9 = 0;
LABEL_23:
  flatbuffers::Parser::Next(this, a2);
  *(_BYTE *)(a2 + 1) = 1;
  if (!*(_BYTE *)a2)
  {
    if (*((char *)this + 55) < 0)
    {
      sub_1DF36DA38(&__dst, *((void **)this + 4), *((_QWORD *)this + 5));
    }
    else
    {
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v4;
      __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
    }
    flatbuffers::Parser::Expect(this, 260, a2);
    *(_BYTE *)(a2 + 1) = 1;
    if (*(_BYTE *)a2)
      goto LABEL_36;
    v55 = 0;
    flatbuffers::Parser::StartStruct((const std::string *)this, &__dst, &v55, (_WORD *)a2);
    *(_BYTE *)(a2 + 1) = 1;
    if (*(_BYTE *)a2)
      goto LABEL_36;
    v13 = v55;
    if (&v55[2] != (std::string *)&v57)
      sub_1DF370C24((uint64_t)&v55[2], v57, v58, 0xAAAAAAAAAAAAAAABLL * (((char *)v58 - (char *)v57) >> 3));
    v13[8].__r_.__value_.__s.__data_[8] = v9;
    flatbuffers::Parser::ParseMetaData((uint64_t)this, (uint64_t)&v13[3], (unsigned __int8 *)a2);
    *(_BYTE *)(a2 + 1) = 1;
    if (*(_BYTE *)a2)
      goto LABEL_36;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
    strcpy((char *)&__p, "original_order");
    v14 = sub_1DF370B40((uint64_t)&v13[3], (const void **)&__p.__r_.__value_.__l.__data_);
    if (&v13[3].__r_.__value_.__r.__words[1] == (std::string::size_type *)v14)
      v15 = 0;
    else
      v15 = v14[7];
    v16 = v15 == 0;
    v17 = v9 ^ 1;
    if (!v16)
      v17 = 0;
    v13[8].__r_.__value_.__s.__data_[10] = v17;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    flatbuffers::Parser::Expect(this, 123, a2);
    while (1)
    {
      *(_BYTE *)(a2 + 1) = 1;
      if (*(_BYTE *)a2)
        goto LABEL_36;
      if (*((_DWORD *)this + 5) == 125)
        break;
      flatbuffers::Parser::ParseField((uint64_t)this, (uint64_t)v13, a2);
    }
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 11;
    strcpy((char *)&__p, "force_align");
    v18 = sub_1DF370B40((uint64_t)&v13[3], (const void **)&__p.__r_.__value_.__l.__data_);
    if (&v13[3].__r_.__value_.__r.__words[1] == (std::string::size_type *)v18)
      v19 = 0;
    else
      v19 = v18[7];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v9 & 1) != 0)
    {
      if (v19)
      {
        v20 = (const char *)(v19 + 32);
        if (*(char *)(v19 + 55) < 0)
          v20 = *(const char **)v20;
        v21 = atoi(v20);
        if (*(_DWORD *)v19 != 7
          || v21 > 0x10
          || v13[8].__r_.__value_.__r.__words[2] > v21
          || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] >= 2uLL))
        {
          sub_1DF367FB0((uint64_t)&__p);
          std::ostream::operator<<();
          std::stringbuf::str();
          __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
          v44 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                    + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
          __p.__r_.__value_.__r.__words[2] = v44;
          v61 = MEMORY[0x1E0DE4FB8] + 16;
          if (v63 < 0)
            operator delete(v62);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1E0BFF758](v64);
          v45 = std::string::insert(&v54, 0, "force_align must be a power of two integer ranging from thestruct's natural alignment to ");
          v46 = v45->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v46;
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          flatbuffers::Parser::Error((uint64_t)this, (_WORD *)a2);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          {
            v47 = (void *)v54.__r_.__value_.__r.__words[0];
            goto LABEL_109;
          }
LABEL_36:
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_29;
          v12 = (void *)__dst.__r_.__value_.__r.__words[0];
          goto LABEL_28;
        }
        v13[8].__r_.__value_.__r.__words[2] = v21;
      }
      data = v13[9].__r_.__value_.__l.__data_;
      if (!data)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385C50;
        strcpy(__p.__r_.__value_.__l.__data_, "size 0 structs not allowed");
LABEL_107:
        flatbuffers::Parser::Error((uint64_t)this, (_WORD *)a2);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_36;
        v47 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_109;
      }
    }
    else
    {
      data = v13[9].__r_.__value_.__l.__data_;
    }
    p_size = (uint64_t *)&v13[7].__r_.__value_.__l.__size_;
    size = (char *)v13[7].__r_.__value_.__l.__size_;
    v26 = (v13[8].__r_.__value_.__r.__words[2] - 1) & -(uint64_t)data;
    v13[9].__r_.__value_.__r.__words[0] = (std::string::size_type)&data[v26];
    v27 = (char *)v13[7].__r_.__value_.__r.__words[2];
    if (v27 != size)
    {
      *(_QWORD *)(*((_QWORD *)v27 - 1) + 232) = v26;
      if ((v9 & 1) == 0)
      {
        v28 = 0;
        v29 = -(uint64_t)size;
        do
        {
          v30 = *(_QWORD *)size;
          v31 = *(_QWORD *)size + 72;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 2;
          strcpy((char *)&__p, "id");
          v32 = sub_1DF370B40(v31, (const void **)&__p.__r_.__value_.__l.__data_);
          if ((uint64_t *)(v30 + 80) == v32)
            v33 = 0;
          else
            v33 = v32[7];
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v33)
            ++v28;
          size += 8;
          v29 -= 8;
        }
        while (size != (char *)v13[7].__r_.__value_.__r.__words[2]);
        if (v28)
        {
          v34 = *p_size;
          if (v28 != -(*p_size + v29) >> 3)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385CD0;
            strcpy(__p.__r_.__value_.__l.__data_, "either all fields or no fields must have an 'id' attribute");
            goto LABEL_107;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1DF359CCC;
          v35 = 126 - 2 * __clz(v28);
          v36 = size == (char *)v34 ? 0 : v35;
          sub_1DF372654(v34, size, &__p, v36, 1);
          v37 = v13[7].__r_.__value_.__l.__size_;
          if ((int)((v13[7].__r_.__value_.__r.__words[2] - v37) >> 3) >= 1)
          {
            v38 = 0;
            while (1)
            {
              v39 = *(_QWORD *)(v37 + 8 * v38) + 72;
              *((_BYTE *)&__p.__r_.__value_.__s + 23) = 2;
              strcpy((char *)&__p, "id");
              v40 = sub_1DF370B40(v39, (const void **)&__p.__r_.__value_.__l.__data_)[7];
              v41 = (const char *)(v40 + 32);
              if (*(char *)(v40 + 55) < 0)
                v41 = *(const char **)v41;
              v42 = atoi(v41);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v38 != v42)
                break;
              v37 = v13[7].__r_.__value_.__l.__size_;
              *(_WORD *)(*(_QWORD *)(v37 + 8 * v38) + 208) = 2 * v38 + 4;
              if (++v38 >= (int)((v13[7].__r_.__value_.__r.__words[2] - v37) >> 3))
                goto LABEL_90;
            }
            sub_1DF367FB0((uint64_t)&__p);
            std::ostream::operator<<();
            std::stringbuf::str();
            __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
            v48 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                      + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
            __p.__r_.__value_.__r.__words[2] = v48;
            v61 = MEMORY[0x1E0DE4FB8] + 16;
            if (v63 < 0)
              operator delete(v62);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1E0BFF758](v64);
            v49 = std::string::insert(&v53, 0, "field id's must be consecutive from 0, id ");
            v50 = v49->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v54.__r_.__value_.__l.__data_ = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
            v54.__r_.__value_.__r.__words[2] = v50;
            v49->__r_.__value_.__l.__size_ = 0;
            v49->__r_.__value_.__r.__words[2] = 0;
            v49->__r_.__value_.__r.__words[0] = 0;
            v51 = std::string::append(&v54, " missing or set twice");
            v52 = v51->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v52;
            v51->__r_.__value_.__l.__size_ = 0;
            v51->__r_.__value_.__r.__words[2] = 0;
            v51->__r_.__value_.__r.__words[0] = 0;
            flatbuffers::Parser::Error((uint64_t)this, (_WORD *)a2);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v54.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_36;
            v47 = (void *)v53.__r_.__value_.__r.__words[0];
LABEL_109:
            operator delete(v47);
            goto LABEL_36;
          }
        }
      }
    }
LABEL_90:
    flatbuffers::Parser::CheckClash("_type", (uint64_t)this, (uint64_t)&v13[7].__r_.__value_.__l.__size_, (uint64_t)v13, 16, (_WORD *)a2);
    *(_BYTE *)(a2 + 1) = 1;
    if (!*(_BYTE *)a2)
    {
      flatbuffers::Parser::CheckClash("Type", (uint64_t)this, (uint64_t)&v13[7].__r_.__value_.__l.__size_, (uint64_t)v13, 16, (_WORD *)a2);
      *(_BYTE *)(a2 + 1) = 1;
      if (!*(_BYTE *)a2)
      {
        flatbuffers::Parser::CheckClash("_length", (uint64_t)this, (uint64_t)&v13[7].__r_.__value_.__l.__size_, (uint64_t)v13, 14, (_WORD *)a2);
        *(_BYTE *)(a2 + 1) = 1;
        if (!*(_BYTE *)a2)
        {
          flatbuffers::Parser::CheckClash("Length", (uint64_t)this, (uint64_t)&v13[7].__r_.__value_.__l.__size_, (uint64_t)v13, 14, (_WORD *)a2);
          *(_BYTE *)(a2 + 1) = 1;
          if (!*(_BYTE *)a2)
          {
            flatbuffers::Parser::CheckClash("_byte_vector", (uint64_t)this, (uint64_t)&v13[7].__r_.__value_.__l.__size_, (uint64_t)v13, 13, (_WORD *)a2);
            *(_BYTE *)(a2 + 1) = 1;
            if (!*(_BYTE *)a2)
            {
              flatbuffers::Parser::CheckClash("ByteVector", (uint64_t)this, (uint64_t)&v13[7].__r_.__value_.__l.__size_, (uint64_t)v13, 13, (_WORD *)a2);
              *(_BYTE *)(a2 + 1) = 1;
              if (!*(_BYTE *)a2)
              {
                flatbuffers::Parser::Expect(this, 125, a2);
                *(_BYTE *)(a2 + 1) = 1;
                if (!*(_BYTE *)a2)
                {
                  flatbuffers::Namespace::GetFullyQualifiedName(*((uint64_t **)this + 37), (uint64_t)v13, 0x3E8uLL, &__p);
                  v43 = operator new();
                  *(_QWORD *)v43 = 15;
                  *(_QWORD *)(v43 + 8) = v13;
                  *(_QWORD *)(v43 + 16) = 0;
                  *(_WORD *)(v43 + 24) = 0;
                  sub_1DF3589C0((uint64_t **)this + 10, (const void **)&__p.__r_.__value_.__l.__data_, v43);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  *(_WORD *)a2 = 0;
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_36;
  }
LABEL_29:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
  sub_1DF370598((void ***)&__p);
}

BOOL sub_1DF359CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const char *v4;
  int v5;
  uint64_t v6;
  const char *v7;
  int v8;
  void *__p[2];
  char v11;

  v11 = 2;
  strcpy((char *)__p, "id");
  v3 = sub_1DF370B40(a1 + 72, (const void **)__p)[7];
  v4 = (const char *)(v3 + 32);
  if (*(char *)(v3 + 55) < 0)
    v4 = *(const char **)v4;
  v5 = atoi(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  v11 = 2;
  strcpy((char *)__p, "id");
  v6 = sub_1DF370B40(a2 + 72, (const void **)__p)[7];
  v7 = (const char *)(v6 + 32);
  if (*(char *)(v6 + 55) < 0)
    v7 = *(const char **)v7;
  v8 = atoi(v7);
  if (v11 < 0)
    operator delete(__p[0]);
  return v5 < v8;
}

void flatbuffers::Parser::ParseService(flatbuffers::Parser *this@<X0>, unsigned __int8 *a2@<X8>)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _BOOL4 v9;
  int v10;
  std::string::size_type size;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  std::string __p;
  __int16 v21;
  std::string __dst;
  std::string *v23;
  std::string *v24;
  uint64_t v25;
  std::string __str;
  std::string *v27;
  std::string *v28;
  uint64_t v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  sub_1DF370610(&v27, *((_QWORD *)this + 7), *((_QWORD *)this + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3));
  flatbuffers::Parser::Next(this, (uint64_t)a2);
  a2[1] = 1;
  if (!*a2)
  {
    v4 = (_OWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
    {
      sub_1DF36DA38(&__str, *((void **)this + 4), *((_QWORD *)this + 5));
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v4;
      __str.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
    }
    flatbuffers::Parser::Expect(this, 260, (uint64_t)a2);
    a2[1] = 1;
    if (!*a2)
    {
      v5 = operator new();
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_QWORD *)(v5 + 72) = v5 + 80;
      v6 = v5 + 72;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_QWORD *)(v5 + 144) = 0;
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_QWORD *)(v5 + 96) = 0;
      *(_QWORD *)(v5 + 104) = 0;
      *(_BYTE *)(v5 + 120) = 0;
      *(_QWORD *)(v5 + 112) = 0;
      *(_QWORD *)(v5 + 140) = 0x1FFFFFFFFLL;
      *(_QWORD *)(v5 + 160) = 0;
      *(_QWORD *)(v5 + 152) = v5 + 160;
      v7 = v5 + 152;
      *(_QWORD *)(v5 + 168) = 0;
      *(_QWORD *)(v5 + 176) = 0;
      *(_QWORD *)(v5 + 184) = 0;
      *(_QWORD *)(v5 + 192) = 0;
      std::string::operator=((std::string *)v5, &__str);
      std::string::operator=((std::string *)(v5 + 24), (const std::string *)this + 48);
      sub_1DF370C24(v5 + 48, v27, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
      v8 = (uint64_t *)*((_QWORD *)this + 37);
      *(_QWORD *)(v5 + 128) = v8;
      flatbuffers::Namespace::GetFullyQualifiedName(v8, (uint64_t)&__str, 0x3E8uLL, &__p);
      v9 = sub_1DF382198((uint64_t)this + 224, (const void **)&__p.__r_.__value_.__l.__data_, v5);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v9)
      {
        std::operator+<char>();
        flatbuffers::Parser::Error((uint64_t)this, a2);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        flatbuffers::Parser::ParseMetaData((uint64_t)this, v6, a2);
        a2[1] = 1;
        if (!*a2)
        {
          flatbuffers::Parser::Expect(this, 123, (uint64_t)a2);
          a2[1] = 1;
          if (!*a2)
          {
            while (1)
            {
              v23 = 0;
              v24 = 0;
              v25 = 0;
              sub_1DF370610(&v23, *((_QWORD *)this + 7), *((_QWORD *)this + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3));
              if (*((char *)this + 55) < 0)
              {
                sub_1DF36DA38(&__dst, *((void **)this + 4), *((_QWORD *)this + 5));
              }
              else
              {
                *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *v4;
                __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
              }
              flatbuffers::Parser::Expect(this, 260, (uint64_t)a2);
              v10 = 1;
              a2[1] = 1;
              if (!*a2)
              {
                flatbuffers::Parser::Expect(this, 40, (uint64_t)a2);
                a2[1] = 1;
                if (!*a2)
                {
                  memset(&__p, 0, sizeof(__p));
                  v21 = 0;
                  v16 = 0;
                  v17 = 0;
                  v19 = 0;
                  v18 = 0;
                  flatbuffers::Parser::ParseTypeIdent(this, (uint64_t)&__p, a2);
                  a2[1] = 1;
                  if (!*a2)
                  {
                    flatbuffers::Parser::Expect(this, 41, (uint64_t)a2);
                    a2[1] = 1;
                    if (!*a2)
                    {
                      flatbuffers::Parser::Expect(this, 58, (uint64_t)a2);
                      a2[1] = 1;
                      if (!*a2)
                      {
                        flatbuffers::Parser::ParseTypeIdent(this, (uint64_t)&v16, a2);
                        a2[1] = 1;
                        if (!*a2)
                        {
                          if (LODWORD(__p.__r_.__value_.__l.__data_) == 15
                            && (size = __p.__r_.__value_.__l.__size_, !*(_BYTE *)(__p.__r_.__value_.__l.__size_ + 200))
                            && (_DWORD)v16 == 15
                            && (v12 = v17, !*(_BYTE *)(v17 + 200)))
                          {
                            v13 = operator new();
                            *(_OWORD *)(v13 + 64) = 0u;
                            *(_OWORD *)(v13 + 80) = 0u;
                            *(_QWORD *)(v13 + 72) = v13 + 80;
                            *(_OWORD *)(v13 + 96) = 0u;
                            *(_OWORD *)(v13 + 112) = 0u;
                            *(_OWORD *)(v13 + 128) = 0u;
                            *(_OWORD *)(v13 + 144) = 0u;
                            *(_OWORD *)v13 = 0u;
                            *(_OWORD *)(v13 + 16) = 0u;
                            *(_OWORD *)(v13 + 32) = 0u;
                            *(_OWORD *)(v13 + 48) = 0u;
                            *(_QWORD *)(v13 + 160) = 0;
                            *(_QWORD *)(v13 + 96) = 0;
                            *(_QWORD *)(v13 + 104) = 0;
                            *(_BYTE *)(v13 + 120) = 0;
                            *(_QWORD *)(v13 + 112) = 0;
                            *(_QWORD *)(v13 + 140) = 0x1FFFFFFFFLL;
                            std::string::operator=((std::string *)v13, &__dst);
                            *(_QWORD *)(v13 + 152) = size;
                            *(_QWORD *)(v13 + 160) = v12;
                            sub_1DF370C24(v13 + 48, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
                            if (sub_1DF382198(v7, (const void **)&__dst.__r_.__value_.__l.__data_, v13))
                            {
                              std::operator+<char>();
                              flatbuffers::Parser::Error((uint64_t)this, a2);
                              if (v15 < 0)
                                operator delete(v14);
                              v10 = 1;
                            }
                            else
                            {
                              flatbuffers::Parser::ParseMetaData((uint64_t)this, v13 + 72, a2);
                              v10 = 1;
                              a2[1] = 1;
                              if (!*a2)
                              {
                                flatbuffers::Parser::Expect(this, 59, (uint64_t)a2);
                                a2[1] = 1;
                                v10 = *a2;
                              }
                            }
                          }
                          else
                          {
                            v14 = operator new(0x30uLL);
                            v15 = 0x80;
                            strcpy((char *)v14, "rpc request and response types must be tables");
                            flatbuffers::Parser::Error((uint64_t)this, a2);
                            operator delete(v14);
                            v10 = 1;
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
              sub_1DF370598((void ***)&__p);
              if (v10)
                break;
              if (*((_DWORD *)this + 5) == 125)
              {
                flatbuffers::Parser::Next(this, (uint64_t)a2);
                a2[1] = 1;
                if (!*a2)
                  *(_WORD *)a2 = 0;
                break;
              }
            }
          }
        }
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  sub_1DF370598((void ***)&__p);
}

BOOL flatbuffers::Parser::SetRootType(flatbuffers::Parser *this, const char *__s)
{
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  size_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *__p[2];
  unint64_t v21;
  std::string __dst;

  v4 = strlen(__s);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_35;
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v9 = (_QWORD *)sub_1DF37099C((uint64_t)this + 128, (uint64_t)&__dst);
  if ((_QWORD *)((char *)this + 136) == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = v9[7];
    if (v10)
      ++*(_DWORD *)(v10 + 144);
  }
  *((_QWORD *)this + 72) = v10;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    v10 = *((_QWORD *)this + 72);
    if (v10)
      return v10 != 0;
  }
  else if (v10)
  {
    return v10 != 0;
  }
  v11 = (uint64_t *)*((_QWORD *)this + 37);
  v12 = strlen(__s);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
LABEL_35:
    abort();
  v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    __p[1] = v13;
    v21 = v16 | 0x8000000000000000;
    __p[0] = v14;
  }
  else
  {
    HIBYTE(v21) = v12;
    v14 = __p;
    if (!v12)
      goto LABEL_25;
  }
  memcpy(v14, __s, (size_t)v13);
LABEL_25:
  *((_BYTE *)v13 + (_QWORD)v14) = 0;
  flatbuffers::Namespace::GetFullyQualifiedName(v11, (uint64_t)__p, 0x3E8uLL, &__dst);
  v17 = (_QWORD *)sub_1DF37099C((uint64_t)this + 128, (uint64_t)&__dst);
  if ((_QWORD *)((char *)this + 136) == v17)
  {
    v18 = 0;
  }
  else
  {
    v18 = v17[7];
    if (v18)
      ++*(_DWORD *)(v18 + 144);
  }
  *((_QWORD *)this + 72) = v18;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  v10 = *((_QWORD *)this + 72);
  return v10 != 0;
}

void flatbuffers::Parser::ParseNamespace(flatbuffers::Parser *this@<X0>, uint64_t a2@<X8>)
{
  void **v4;
  void **v5;
  unint64_t v6;
  void ***v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  unint64_t v19;

  flatbuffers::Parser::Next(this, a2);
  *(_BYTE *)(a2 + 1) = 1;
  if (!*(_BYTE *)a2)
  {
    v4 = (void **)operator new();
    v5 = v4;
    *(_OWORD *)v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    v7 = (void ***)*((_QWORD *)this + 35);
    v6 = *((_QWORD *)this + 36);
    if ((unint64_t)v7 >= v6)
    {
      v9 = (_QWORD *)*((_QWORD *)this + 34);
      v10 = v7 - (void ***)v9;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61)
        abort();
      v12 = v6 - (_QWORD)v9;
      if (v12 >> 2 > v11)
        v11 = v12 >> 2;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 >> 61)
          sub_1DF3667C0();
        v14 = (char *)operator new(8 * v13);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[8 * v10];
      *(_QWORD *)v15 = v5;
      v8 = v15 + 8;
      if (v7 != v9)
      {
        do
        {
          v16 = (uint64_t)*--v7;
          *((_QWORD *)v15 - 1) = v16;
          v15 -= 8;
        }
        while (v7 != v9);
        v7 = (void ***)*((_QWORD *)this + 34);
      }
      *((_QWORD *)this + 34) = v15;
      *((_QWORD *)this + 35) = v8;
      *((_QWORD *)this + 36) = &v14[8 * v13];
      if (v7)
        operator delete(v7);
    }
    else
    {
      *v7 = v4;
      v8 = v7 + 1;
    }
    *((_QWORD *)this + 35) = v8;
    if (*((_DWORD *)this + 5) == 59)
    {
LABEL_32:
      *((_QWORD *)this + 35) = v8 - 1;
      *((_QWORD *)this + 37) = flatbuffers::Parser::UniqueNamespace((uint64_t)this, v5);
      flatbuffers::Parser::Expect(this, 59, a2);
      *(_BYTE *)(a2 + 1) = 1;
      if (!*(_BYTE *)a2)
        *(_WORD *)a2 = 0;
    }
    else
    {
      do
      {
        v17 = v5[1];
        if (v17 >= v5[2])
        {
          v19 = sub_1DF3731AC((unint64_t *)v5, (uint64_t)this + 32);
        }
        else
        {
          if (*((char *)this + 55) < 0)
          {
            sub_1DF36DA38(v5[1], *((void **)this + 4), *((_QWORD *)this + 5));
          }
          else
          {
            v18 = *((_OWORD *)this + 2);
            v17[2] = *((_QWORD *)this + 6);
            *(_OWORD *)v17 = v18;
          }
          v19 = (unint64_t)(v17 + 3);
        }
        v5[1] = (void *)v19;
        flatbuffers::Parser::Expect(this, 260, a2);
        *(_BYTE *)(a2 + 1) = 1;
        if (*(_BYTE *)a2)
          break;
        if (*((_DWORD *)this + 5) != 46)
        {
          v8 = (_QWORD *)*((_QWORD *)this + 35);
          goto LABEL_32;
        }
        flatbuffers::Parser::Next(this, a2);
        *(_BYTE *)(a2 + 1) = 1;
      }
      while (!*(_BYTE *)a2);
    }
  }
}

void flatbuffers::Parser::ParseProtoDecl(flatbuffers::Parser *this@<X0>, unsigned __int8 *a2@<X8>)
{
  int v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  int v12;
  unint64_t v13;
  char *v14;
  size_t v15;
  unint64_t v17;
  char *v18;
  size_t v19;
  unint64_t v20;
  char *v21;
  size_t v22;
  size_t v23;
  std::string *v25;
  std::string::size_type v26;
  size_t v27;
  size_t v28;
  int v29;
  uint64_t v30;
  std::string *v31;
  int v32;
  unint64_t *v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;
  std::string *v40;
  void *v41;
  char v42;
  std::string __dst;
  std::string *v44;
  void *__p[2];
  std::string::size_type v46;

  v4 = *((_DWORD *)this + 5);
  if (v4 != 260)
    goto LABEL_59;
  v5 = (char *)this + 32;
  v6 = *((unsigned __int8 *)this + 55);
  v7 = *((_QWORD *)this + 5);
  if ((v6 & 0x80u) == 0)
    v8 = v6 & 0x7F;
  else
    v8 = *((_QWORD *)this + 5);
  if (v8 == 4)
  {
    if ((v6 & 0x80) != 0)
      v5 = *(char **)v5;
    else
      v7 = *((unsigned __int8 *)this + 55);
    if (v7 >= 4)
      v23 = 4;
    else
      v23 = v7;
    if (!memcmp(v5, "enum", v23) && v7 == 4)
    {
      __p[0] = 0;
      flatbuffers::Parser::ParseEnum(this, (flatbuffers::EnumDef **)__p, 0, a2);
      a2[1] = 1;
      if (!*a2)
      {
        if (*((_DWORD *)this + 5) != 59 || (flatbuffers::Parser::Next(this, (uint64_t)a2), a2[1] = 1, !*a2))
        {
          flatbuffers::EnumDef::RemoveDuplicates((_QWORD *)__p[0]);
          goto LABEL_67;
        }
      }
      return;
    }
    goto LABEL_59;
  }
  if (v8 == 7)
  {
    v13 = *((unsigned __int8 *)this + 55);
    v14 = (char *)this + 32;
    if ((v6 & 0x80) != 0)
    {
      v14 = *(char **)v5;
      v13 = *((_QWORD *)this + 5);
    }
    if (v13 >= 7)
      v15 = 7;
    else
      v15 = v13;
    if (!memcmp(v14, "package", v15) && v13 == 7)
    {
      flatbuffers::Parser::ParseNamespace(this, (uint64_t)a2);
    }
    else
    {
      v17 = v6;
      v18 = (char *)this + 32;
      if ((v6 & 0x80) != 0)
      {
        v18 = *(char **)v5;
        v17 = v7;
      }
      if (v17 >= 7)
        v19 = 7;
      else
        v19 = v17;
      if (!memcmp(v18, "message", v19) && v17 == 7)
      {
        v12 = 0;
LABEL_35:
        __p[0] = 0;
        __p[1] = 0;
        v46 = 0;
        sub_1DF370610(__p, *((_QWORD *)this + 7), *((_QWORD *)this + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3));
        flatbuffers::Parser::Next(this, (uint64_t)a2);
        a2[1] = 1;
        if (*a2)
        {
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
LABEL_118:
          sub_1DF370598((void ***)&__dst);
          return;
        }
        v44 = 0;
        if (v12)
        {
          if (*((_DWORD *)this + 5) == 46)
          {
            flatbuffers::Parser::Next(this, (uint64_t)a2);
            a2[1] = 1;
            if (*a2)
              goto LABEL_117;
          }
          if (*((char *)this + 55) < 0)
          {
            sub_1DF36DA38(&__dst, *((void **)this + 4), *((_QWORD *)this + 5));
          }
          else
          {
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v5;
            __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
          }
          flatbuffers::Parser::Expect(this, 260, (uint64_t)a2);
          a2[1] = 1;
          if (!*a2)
          {
            flatbuffers::Parser::ParseNamespacing(this, &__dst, 0, a2);
            a2[1] = 1;
            if (!*a2)
            {
              v40 = (std::string *)flatbuffers::Parser::LookupCreateStruct((uint64_t)this, &__dst, 0, 0);
              v44 = v40;
              if (v40)
              {
                v31 = v40;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
                v30 = 0;
LABEL_105:
                if (&v31[2] != (std::string *)__p)
                  sub_1DF370C24((uint64_t)&v31[2], (std::string *)__p[0], (std::string *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
                flatbuffers::Parser::ParseProtoFields((uint64_t)this, (uint64_t)v31, v12, 0, a2);
                a2[1] = 1;
                if (!*a2)
                {
                  if ((v12 & 1) == 0)
                    *((_QWORD *)this + 37) = v30;
                  if (*((_DWORD *)this + 5) == 59)
                  {
                    flatbuffers::Parser::Next(this, (uint64_t)a2);
                    a2[1] = 1;
                    v32 = *a2;
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                    sub_1DF370598((void ***)&__dst);
                    if (v32)
                      return;
                  }
                  else
                  {
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                    sub_1DF370598((void ***)&__dst);
                  }
LABEL_67:
                  *(_WORD *)a2 = 0;
                  return;
                }
LABEL_117:
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                goto LABEL_118;
              }
              std::operator+<char>();
              flatbuffers::Parser::Error((uint64_t)this, a2);
              if (v42 < 0)
                operator delete(v41);
            }
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          goto LABEL_117;
        }
        if (*((char *)this + 55) < 0)
        {
          sub_1DF36DA38(&__dst, *((void **)this + 4), *((_QWORD *)this + 5));
        }
        else
        {
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v5;
          __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
        }
        flatbuffers::Parser::Expect(this, 260, (uint64_t)a2);
        a2[1] = 1;
        if (*a2 || (flatbuffers::Parser::StartStruct((const std::string *)this, &__dst, &v44, a2), a2[1] = 1, *a2))
        {
          v29 = 0;
          v30 = 0;
        }
        else
        {
          v33 = (unint64_t *)operator new();
          v34 = v33;
          *(_OWORD *)v33 = 0u;
          *((_OWORD *)v33 + 1) = 0u;
          v35 = *((_QWORD *)this + 37);
          if (v33 == (unint64_t *)v35
            || (sub_1DF370C24((uint64_t)v33, *(std::string **)v35, *(std::string **)(v35 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v35 + 8) - *(_QWORD *)v35) >> 3)), v37 = v34[1], v36 = v34[2], v34[3] = *(_QWORD *)(v35 + 24), v37 >= v36))
          {
            v39 = sub_1DF3731AC(v34, (uint64_t)&__dst);
          }
          else
          {
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_1DF36DA38((_BYTE *)v37, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
            }
            else
            {
              v38 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
              *(_QWORD *)(v37 + 16) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
              *(_OWORD *)v37 = v38;
            }
            v39 = v37 + 24;
          }
          v34[1] = v39;
          ++v34[3];
          v30 = *((_QWORD *)this + 37);
          *((_QWORD *)this + 37) = flatbuffers::Parser::UniqueNamespace((uint64_t)this, (void **)v34);
          v29 = 1;
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (!v29)
          goto LABEL_117;
        v31 = v44;
        goto LABEL_105;
      }
      if ((v6 & 0x80) != 0)
        v5 = *(char **)v5;
      else
        v7 = v6;
      if (v7 >= 7)
        v27 = 7;
      else
        v27 = v7;
      if (memcmp(v5, "service", v27) || v7 != 7)
        goto LABEL_59;
      flatbuffers::Parser::Next(this, (uint64_t)a2);
      a2[1] = 1;
      if (*a2)
        return;
      flatbuffers::Parser::Expect(this, 260, (uint64_t)a2);
      a2[1] = 1;
      if (*a2)
        return;
      flatbuffers::Parser::ParseProtoCurliesOrIdent(this, a2);
    }
    a2[1] = 1;
LABEL_49:
    if (*a2)
      return;
    goto LABEL_67;
  }
  if (v8 != 6)
  {
LABEL_59:
    flatbuffers::Parser::TokenToStringId((char *)this, v4, &__dst);
    v25 = std::string::insert(&__dst, 0, "don't know how to parse .proto declaration starting with ");
    v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v46 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error((uint64_t)this, a2);
    if (SHIBYTE(v46) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  v9 = *((unsigned __int8 *)this + 55);
  v10 = (char *)this + 32;
  if ((v6 & 0x80) != 0)
  {
    v10 = *(char **)v5;
    v9 = *((_QWORD *)this + 5);
  }
  if (v9 >= 6)
    v11 = 6;
  else
    v11 = v9;
  if (!memcmp(v10, "extend", v11) && v9 == 6)
  {
    v12 = 1;
    goto LABEL_35;
  }
  v20 = v6;
  v21 = (char *)this + 32;
  if ((v6 & 0x80) != 0)
  {
    v21 = *(char **)v5;
    v20 = v7;
  }
  if (v20 >= 6)
    v22 = 6;
  else
    v22 = v20;
  if (memcmp(v21, "syntax", v22) || v20 != 6)
  {
    if ((v6 & 0x80) != 0)
      v5 = *(char **)v5;
    else
      v7 = v6;
    if (v7 >= 6)
      v28 = 6;
    else
      v28 = v7;
    if (!memcmp(v5, "option", v28) && v7 == 6)
    {
      flatbuffers::Parser::ParseProtoOption(this, a2);
      goto LABEL_95;
    }
    goto LABEL_59;
  }
  flatbuffers::Parser::Next(this, (uint64_t)a2);
  a2[1] = 1;
  if (!*a2)
  {
    flatbuffers::Parser::Expect(this, 61, (uint64_t)a2);
    a2[1] = 1;
    if (!*a2)
    {
      flatbuffers::Parser::Expect(this, 257, (uint64_t)a2);
LABEL_95:
      a2[1] = 1;
      if (*a2)
        return;
      flatbuffers::Parser::Expect(this, 59, (uint64_t)a2);
      a2[1] = 1;
      goto LABEL_49;
    }
  }
}

void flatbuffers::Parser::ParseProtoFields(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, unsigned __int8 *a5@<X8>)
{
  const void **v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  size_t v15;
  char v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  unint64_t v21;
  const void *v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  const void *v27;
  size_t v28;
  BOOL v29;
  std::string *v30;
  void *v31;
  void *v32;
  std::string *v33;
  std::string::size_type v34;
  int v35;
  uint64_t v36;
  std::string *v37;
  void *v38;
  unint64_t v39;
  void **v40;
  size_t v41;
  std::string *v42;
  void **v43;
  unint64_t v44;
  size_t v45;
  std::string::size_type size;
  std::string::size_type v47;
  std::string *p_str;
  size_t v49;
  BOOL v50;
  unint64_t v51;
  const void *v52;
  size_t v53;
  const void *v55;
  size_t v56;
  const void *v57;
  size_t v58;
  const void *v60;
  size_t v61;
  int v63;
  int v64;
  const void *v65;
  size_t v66;
  const void *v68;
  size_t v69;
  unint64_t v70;
  const void *v71;
  size_t v72;
  const void *v73;
  size_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  int v82;
  std::string::size_type v83;
  uint64_t v84;
  std::string *v85;
  std::string::size_type v86;
  char v87;
  BOOL v88;
  const std::string::value_type *v89;
  std::string::size_type v90;
  std::string::size_type v91;
  std::string *v92;
  std::string::size_type v93;
  std::string *v94;
  std::string::size_type v95;
  void *v96;
  std::string *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  std::string __str;
  char v105;
  int v106;
  uint64_t v107;
  std::string v108;
  std::string v109;
  std::string v110;
  uint64_t v111;
  std::string __dst;
  uint64_t v113;
  std::string *v114;
  unint64_t v115;
  __int16 v116;
  unint64_t v117;
  std::string *v118;
  std::string *v119;
  std::string *v120;
  uint64_t v121;
  void *v122[2];
  void *v123[2];
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  void *__p;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  _QWORD v134[2];
  int v135;
  _QWORD *v136;
  _QWORD v137[2];
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  __int16 v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146[8];

  flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 123, (uint64_t)a5);
  a5[1] = 1;
  if (*a5)
    return;
  v8 = (const void **)(a1 + 32);
  v101 = (void *)*MEMORY[0x1E0DE4F50];
  v99 = *(void **)(MEMORY[0x1E0DE4F50] + 72);
  v100 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
  v98 = (void *)(MEMORY[0x1E0DE4FB8] + 16);
LABEL_4:
  while (1)
  {
    v9 = *(_DWORD *)(a1 + 20);
    if (v9 == 260)
      break;
    if (v9 == 125)
    {
      flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
      a5[1] = 1;
      if (!*a5)
        *(_WORD *)a5 = 0;
      return;
    }
LABEL_6:
    v119 = 0;
    v120 = 0;
    v121 = 0;
    sub_1DF370610(&v119, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3));
    if ((a4 & 1) != 0 || *(_DWORD *)(a1 + 20) != 260)
      goto LABEL_21;
    v10 = *(unsigned __int8 *)(a1 + 55);
    v11 = *(_QWORD *)(a1 + 40);
    if ((v10 & 0x80u) == 0)
      v12 = v10 & 0x7F;
    else
      v12 = *(_QWORD *)(a1 + 40);
    if (v12 == 5)
    {
      v68 = (const void *)(a1 + 32);
      if ((v10 & 0x80) != 0)
      {
        v68 = *v8;
        v10 = *(_QWORD *)(a1 + 40);
      }
      if (v10 >= 5)
        v69 = 5;
      else
        v69 = v10;
      v16 = 0;
      if (memcmp(v68, "oneof", v69))
        goto LABEL_264;
      v17 = 0;
      v18 = 0;
      if (v10 == 5)
      {
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
        v18 = 1;
        a5[1] = 1;
        if (*a5)
          goto LABEL_321;
        v16 = 0;
        v17 = 0;
      }
    }
    else
    {
      if (v12 != 8)
        goto LABEL_21;
      v13 = *(unsigned __int8 *)(a1 + 55);
      v14 = (const void *)(a1 + 32);
      if ((v10 & 0x80) != 0)
      {
        v14 = *v8;
        v13 = *(_QWORD *)(a1 + 40);
      }
      if (v13 >= 8)
        v15 = 8;
      else
        v15 = v13;
      if (!memcmp(v14, "optional", v15) && v13 == 8)
      {
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
        a5[1] = 1;
        if (*a5)
          goto LABEL_321;
LABEL_21:
        v16 = 0;
LABEL_22:
        v17 = 0;
LABEL_23:
        v18 = 0;
        goto LABEL_24;
      }
      v70 = v10;
      v71 = (const void *)(a1 + 32);
      if ((v10 & 0x80) != 0)
      {
        v71 = *v8;
        v70 = v11;
      }
      if (v70 >= 8)
        v72 = 8;
      else
        v72 = v70;
      if (!memcmp(v71, "required", v72) && v70 == 8)
      {
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
        v16 = 1;
        a5[1] = 1;
        if (*a5)
          goto LABEL_321;
        goto LABEL_22;
      }
      v73 = (const void *)(a1 + 32);
      if ((v10 & 0x80) != 0)
      {
        v73 = *v8;
        v10 = v11;
      }
      if (v10 >= 8)
        v74 = 8;
      else
        v74 = v10;
      v16 = 0;
      if (memcmp(v73, "repeated", v74))
      {
LABEL_264:
        v17 = 0;
        v18 = 0;
        goto LABEL_24;
      }
      v17 = 0;
      v18 = 0;
      if (v10 == 8)
      {
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
        v17 = 1;
        a5[1] = 1;
        if (*a5)
          goto LABEL_321;
        v16 = 0;
        goto LABEL_23;
      }
    }
LABEL_24:
    v19 = 0;
    v117 = 0;
    v118 = 0;
    v113 = 0;
    v114 = 0;
    v116 = 0;
    v115 = 0;
    if (*(_DWORD *)(a1 + 20) == 260)
    {
      v20 = *(unsigned __int8 *)(a1 + 55);
      if ((v20 & 0x80u) == 0)
        v21 = v20 & 0x7F;
      else
        v21 = *(_QWORD *)(a1 + 40);
      if (v21 == 5)
      {
        v22 = (const void *)(a1 + 32);
        if ((v20 & 0x80) != 0)
        {
          v22 = *v8;
          v20 = *(_QWORD *)(a1 + 40);
        }
        if (v20 >= 5)
          v23 = 5;
        else
          v23 = v20;
        v19 = memcmp(v22, "group", v23) == 0;
        if (v20 != 5)
          v19 = 0;
      }
      else
      {
        v19 = 0;
      }
    }
    if ((v18 | v19) != 1)
    {
      flatbuffers::Parser::ParseTypeFromProtoType(a1, &v113, a5);
      a5[1] = 1;
      if (*a5)
        goto LABEL_321;
      goto LABEL_70;
    }
    if ((v18 & 1) != 0)
    {
      if (*(_BYTE *)(a1 + 748))
      {
        flatbuffers::MakeCamel((char *)(a1 + 32), 1, &__str);
        v30 = std::string::append(&__str, "Union");
        v31 = (void *)v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)v122 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v123[0] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        flatbuffers::Parser::StartEnum(a1, (const std::string *)v122, 1, (uint64_t *)&v117, a5);
        a5[1] = 1;
        if (*a5)
        {
          if (SHIBYTE(v123[0]) < 0)
          {
            v96 = v122[0];
LABEL_320:
            operator delete(v96);
          }
          goto LABEL_321;
        }
        v113 = 16;
        v114 = 0;
        v115 = v117;
        v116 = 0;
        if (SHIBYTE(v123[0]) < 0)
        {
          v32 = v122[0];
          goto LABEL_74;
        }
        goto LABEL_70;
      }
    }
    else
    {
      flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
      a5[1] = 1;
      if (*a5)
        goto LABEL_321;
    }
    ++*(_DWORD *)(a1 + 1200);
    sub_1DF367FB0((uint64_t)v122);
    std::ostream::operator<<();
    std::stringbuf::str();
    v122[0] = v101;
    *(void **)((char *)v122 + *((_QWORD *)v101 - 3)) = v100;
    v123[0] = v99;
    v123[1] = v98;
    if (SHIBYTE(v131) < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1E0BFF758](v134);
    v33 = std::string::insert(&__dst, 0, "Anonymous");
    v34 = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    flatbuffers::Parser::StartStruct((const std::string *)a1, &__str, &v118, a5);
    a5[1] = 1;
    if (*a5)
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        v96 = (void *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_320;
      }
LABEL_321:
      v122[0] = &v119;
      sub_1DF370598((void ***)v122);
      return;
    }
    v113 = 15;
    v114 = v118;
    v115 = 0;
    v116 = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      v32 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_74:
      operator delete(v32);
      if (!v17)
        goto LABEL_75;
      goto LABEL_71;
    }
LABEL_70:
    if (!v17)
      goto LABEL_75;
LABEL_71:
    HIDWORD(v113) = v113;
    LODWORD(v113) = 14;
    if (HIDWORD(v113) == 14)
      HIDWORD(v113) = 13;
LABEL_75:
    if (*(char *)(a1 + 55) < 0)
    {
      sub_1DF36DA38(&__dst, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
    }
    else
    {
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
      __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 48);
    }
    flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 260, (uint64_t)a5);
    v35 = 1;
    a5[1] = 1;
    if (*a5)
      goto LABEL_79;
    if ((v18 & 1) == 0)
    {
      flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 61, (uint64_t)a5);
      a5[1] = 1;
      if (*a5)
        goto LABEL_79;
      flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 258, (uint64_t)a5);
      a5[1] = 1;
      if (*a5)
        goto LABEL_79;
    }
    v111 = 0;
    if (a3)
    {
      v84 = sub_1DF383318(a2 + 152, &__dst);
      if (a2 + 160 == v84)
      {
        v111 = 0;
      }
      else
      {
        v36 = *(_QWORD *)(v84 + 56);
        v111 = v36;
        if (v36)
          goto LABEL_87;
      }
    }
    flatbuffers::Parser::AddField(a1, a2, &__dst, (uint64_t)&v113, &v111, a5);
    a5[1] = 1;
    if (*a5)
      goto LABEL_79;
    v36 = v111;
LABEL_87:
    if ((std::string **)(v36 + 48) != &v119)
      sub_1DF370C24(v36 + 48, v119, v120, 0xAAAAAAAAAAAAAAABLL * (((char *)v120 - (char *)v119) >> 3));
    if (v113 <= 0xFFFFFFFB && (v113 - 1) >= 0xC)
      *(_BYTE *)(v36 + 217) = v16;
    if (*(_DWORD *)(a1 + 20) == 91)
    {
      flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
      a5[1] = 1;
      if (*a5)
        goto LABEL_79;
      v37 = (std::string *)(v36 + 184);
      do
      {
        while (1)
        {
          if (*(char *)(a1 + 55) < 0)
          {
            sub_1DF36DA38(v122, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
          }
          else
          {
            *(_OWORD *)v122 = *(_OWORD *)v8;
            v123[0] = *(void **)(a1 + 48);
          }
          flatbuffers::Parser::ParseProtoKey((flatbuffers::Parser *)a1, a5);
          v35 = 1;
          a5[1] = 1;
          if (!*a5)
          {
            flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 61, (uint64_t)a5);
            a5[1] = 1;
            if (!*a5)
            {
              if (*(char *)(a1 + 55) < 0)
              {
                sub_1DF36DA38(&__str, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
              }
              else
              {
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
                __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 48);
              }
              flatbuffers::Parser::ParseProtoCurliesOrIdent((flatbuffers::Parser *)a1, a5);
              a5[1] = 1;
              if (!*a5)
              {
                v97 = v37;
                if (SHIBYTE(v123[0]) >= 0)
                  v38 = (void *)(HIBYTE(v123[0]) & 0x7F);
                else
                  v38 = v122[1];
                if (v38 == (void *)10)
                {
                  if (SHIBYTE(v123[0]) >= 0)
                    v43 = v122;
                  else
                    v43 = (void **)v122[0];
                  if (SHIBYTE(v123[0]) >= 0)
                    v44 = HIBYTE(v123[0]);
                  else
                    v44 = (unint64_t)v122[1];
                  if (v44 >= 0xA)
                    v45 = 10;
                  else
                    v45 = v44;
                  if (!memcmp(v43, "deprecated", v45) && v44 == 10)
                  {
                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      size = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
                    else
                      size = __str.__r_.__value_.__l.__size_;
                    if (size == 4)
                    {
                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v47 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                      else
                        v47 = __str.__r_.__value_.__l.__size_;
                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        p_str = &__str;
                      else
                        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                      if (v47 >= 4)
                        v49 = 4;
                      else
                        v49 = v47;
                      v50 = memcmp(p_str, "true", v49) == 0;
                      if (v47 != 4)
                        v50 = 0;
                    }
                    else
                    {
                      v50 = 0;
                    }
                    *(_BYTE *)(v36 + 216) = v50;
                  }
                }
                else if (v38 == (void *)7)
                {
                  v39 = SHIBYTE(v123[0]) >= 0 ? HIBYTE(v123[0]) : (unint64_t)v122[1];
                  v40 = SHIBYTE(v123[0]) >= 0 ? v122 : (void **)v122[0];
                  v41 = v39 >= 7 ? 7 : v39;
                  if (!memcmp(v40, "default", v41)
                    && v39 == 7
                    && (v113 > 0xFFFFFFFB || (v113 - 1) <= 0xB))
                  {
                    v42 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                        ? &__str
                        : (std::string *)__str.__r_.__value_.__r.__words[0];
                    if (strpbrk((char *)v42, "0123456789-+.") == (char *)v42)
                      std::string::operator=(v97, &__str);
                  }
                }
                if (*(_DWORD *)(a1 + 20) == 44)
                {
                  flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
                  a5[1] = 1;
                  v35 = *a5;
                }
                else
                {
                  v35 = 6;
                }
                v37 = v97;
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
            }
          }
          if (SHIBYTE(v123[0]) < 0)
            break;
          if (v35)
            goto LABEL_166;
        }
        operator delete(v122[0]);
      }
      while (!v35);
LABEL_166:
      if (v35 != 6)
        goto LABEL_79;
      flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 93, (uint64_t)a5);
      v35 = 1;
      a5[1] = 1;
      if (*a5)
        goto LABEL_79;
    }
    if (v118)
    {
      flatbuffers::Parser::ParseProtoFields(a1, v118, 0, v18);
      a5[1] = 1;
      if (*a5)
        goto LABEL_79;
      if (*(_DWORD *)(a1 + 20) != 59)
        goto LABEL_312;
      flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
    }
    else
    {
      if (v117)
      {
        v124 = 0u;
        v125 = 0u;
        *(_OWORD *)v122 = 0u;
        *(_OWORD *)v123 = 0u;
        v128 = 0;
        __p = 0;
        v126 = 0;
        v127 = &v128;
        v134[0] = 0;
        v131 = 0;
        v132 = 0;
        v130 = 0;
        v133 = 0;
        v134[1] = 0xFFFFFFFF00000000;
        v135 = 1;
        v137[0] = 0;
        v137[1] = 0;
        v136 = v137;
        v138 = 0;
        v139 = 0;
        v141 = 0;
        v140 = 0;
        v142 = 257;
        v143 = 0;
        v144 = 1;
        v145 = 0;
        v146[0] = 0;
        flatbuffers::Parser::ParseProtoFields(a1, v122, 0, v18);
        v75 = 0;
        a5[1] = 1;
        if (!*a5)
        {
          if (*(_DWORD *)(a1 + 20) == 59)
          {
            flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
            a5[1] = 1;
            if (*a5)
              goto LABEL_305;
          }
          if (v138 == v139)
          {
            v75 = 1;
          }
          else
          {
            v76 = v138 + 8;
            while (1)
            {
              v77 = *(_QWORD *)(v76 - 8);
              if (*(_DWORD *)(v77 + 152) != 15)
                break;
              v78 = *(_QWORD *)(v77 + 160);
              if (!v78 || *(_BYTE *)(v78 + 200))
                break;
              __str.__r_.__value_.__r.__words[0] = a1;
              *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = v117;
              v105 = 1;
              v106 = 0;
              v107 = -1;
              v79 = sub_1DF3588A4((uint64_t)&__str, v78);
              v80 = *(_OWORD *)(v77 + 162);
              *(_OWORD *)(v79 + 48) = *(_OWORD *)(v77 + 152);
              *(_OWORD *)(v79 + 58) = v80;
              v81 = v79 + 24;
              if (v81 != v77 + 48)
                sub_1DF370C24(v81, *(std::string **)(v77 + 48), *(std::string **)(v77 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v77 + 56) - *(_QWORD *)(v77 + 48)) >> 3));
              sub_1DF35C05C(a5, (uint64_t)&__str, (const void **)v77);
              a5[1] = 1;
              v82 = *a5;
              v83 = __str.__r_.__value_.__r.__words[2];
              if (__str.__r_.__value_.__r.__words[2])
              {
                sub_1DF367C54(__str.__r_.__value_.__r.__words[2] + 88);
                v110.__r_.__value_.__r.__words[0] = v83 + 24;
                sub_1DF370598((void ***)&v110);
                if (*(char *)(v83 + 23) < 0)
                  operator delete(*(void **)v83);
                MEMORY[0x1E0BFF788](v83, 0x10B2C4072A4B994);
              }
              v75 = v82 == 0;
              if (!v82)
              {
                v29 = v76 == v139;
                v76 += 8;
                if (!v29)
                  continue;
              }
              goto LABEL_307;
            }
            std::operator+<char>();
            v85 = std::string::append(&v108, "' cannot be mapped to a union because member '");
            v86 = v85->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v109.__r_.__value_.__l.__data_ = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
            v109.__r_.__value_.__r.__words[2] = v86;
            v85->__r_.__value_.__l.__size_ = 0;
            v85->__r_.__value_.__r.__words[2] = 0;
            v85->__r_.__value_.__r.__words[0] = 0;
            v87 = *(_BYTE *)(v77 + 23);
            v88 = v87 < 0;
            if (v87 >= 0)
              v89 = (const std::string::value_type *)v77;
            else
              v89 = *(const std::string::value_type **)v77;
            v90 = v87 & 0x7F;
            if (v88)
              v91 = *(_QWORD *)(v77 + 8);
            else
              v91 = v90;
            v92 = std::string::append(&v109, v89, v91);
            v93 = v92->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v110.__r_.__value_.__l.__data_ = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
            v110.__r_.__value_.__r.__words[2] = v93;
            v92->__r_.__value_.__l.__size_ = 0;
            v92->__r_.__value_.__r.__words[2] = 0;
            v92->__r_.__value_.__r.__words[0] = 0;
            v94 = std::string::append(&v110, "' is not a table type.");
            v95 = v94->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
            __str.__r_.__value_.__r.__words[2] = v95;
            v94->__r_.__value_.__l.__size_ = 0;
            v94->__r_.__value_.__r.__words[2] = 0;
            v94->__r_.__value_.__r.__words[0] = 0;
            flatbuffers::Parser::Error(a1, a5);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v110.__r_.__value_.__l.__data_);
            if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v109.__r_.__value_.__l.__data_);
            if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v108.__r_.__value_.__l.__data_);
LABEL_305:
            v75 = 0;
          }
        }
LABEL_307:
        sub_1DF356EBC(v146, 0);
        sub_1DF368F80((uint64_t)&v136);
        sub_1DF367C54((uint64_t)&v127);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v125;
        sub_1DF370598((void ***)&__str);
        if (SHIBYTE(v124) < 0)
          operator delete(v123[1]);
        if (SHIBYTE(v123[0]) < 0)
          operator delete(v122[0]);
        if (!v75)
        {
          v35 = 1;
          goto LABEL_79;
        }
LABEL_312:
        v35 = 0;
        goto LABEL_79;
      }
      flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 59, (uint64_t)a5);
    }
    a5[1] = 1;
    if (!*a5)
      goto LABEL_312;
LABEL_79:
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v122[0] = &v119;
    sub_1DF370598((void ***)v122);
    if (v35)
      return;
  }
  v24 = *(unsigned __int8 *)(a1 + 55);
  v25 = *(_QWORD *)(a1 + 40);
  if ((v24 & 0x80u) == 0)
    v26 = v24 & 0x7F;
  else
    v26 = *(_QWORD *)(a1 + 40);
  switch(v26)
  {
    case 4uLL:
      v27 = (const void *)(a1 + 32);
      if ((v24 & 0x80) != 0)
      {
        v27 = *v8;
        v24 = *(_QWORD *)(a1 + 40);
      }
      if (v24 >= 4)
        v28 = 4;
      else
        v28 = v24;
      v29 = !memcmp(v27, "enum", v28) && v24 == 4;
      if (!v29)
        goto LABEL_6;
      goto LABEL_202;
    case 6uLL:
      v51 = *(unsigned __int8 *)(a1 + 55);
      v52 = (const void *)(a1 + 32);
      if ((v24 & 0x80) != 0)
      {
        v52 = *v8;
        v51 = *(_QWORD *)(a1 + 40);
      }
      if (v51 >= 6)
        v53 = 6;
      else
        v53 = v51;
      if (!memcmp(v52, "extend", v53) && v51 == 6)
        goto LABEL_202;
      v55 = (const void *)(a1 + 32);
      if ((v24 & 0x80) != 0)
      {
        v55 = *v8;
        v24 = v25;
      }
      if (v24 >= 6)
        v56 = 6;
      else
        v56 = v24;
      if (memcmp(v55, "option", v56) || v24 != 6)
        goto LABEL_6;
      flatbuffers::Parser::ParseProtoOption((flatbuffers::Parser *)a1, a5);
      goto LABEL_232;
    case 7uLL:
      v57 = (const void *)(a1 + 32);
      if ((v24 & 0x80) != 0)
      {
        v57 = *v8;
        v24 = *(_QWORD *)(a1 + 40);
      }
      if (v24 >= 7)
        v58 = 7;
      else
        v58 = v24;
      if (memcmp(v57, "message", v58) || v24 != 7)
        goto LABEL_6;
LABEL_202:
      flatbuffers::Parser::ParseProtoDecl((flatbuffers::Parser *)a1);
      goto LABEL_234;
    case 8uLL:
      v60 = (const void *)(a1 + 32);
      if ((v24 & 0x80) != 0)
      {
        v60 = *v8;
        v24 = *(_QWORD *)(a1 + 40);
      }
      if (v24 >= 8)
        v61 = 8;
      else
        v61 = v24;
      if (memcmp(v60, "reserved", v61) || v24 != 8)
        goto LABEL_6;
      flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
      a5[1] = 1;
      v63 = *a5;
      break;
    case 0xAuLL:
      v65 = (const void *)(a1 + 32);
      if ((v24 & 0x80) != 0)
      {
        v65 = *v8;
        v24 = *(_QWORD *)(a1 + 40);
      }
      if (v24 >= 0xA)
        v66 = 10;
      else
        v66 = v24;
      if (memcmp(v65, "extensions", v66) || v24 != 10)
        goto LABEL_6;
      flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
      a5[1] = 1;
      if (*a5)
        return;
      flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 258, (uint64_t)a5);
      a5[1] = 1;
      if (*a5)
        return;
      if (*(_DWORD *)(a1 + 20) != 260)
        goto LABEL_233;
      flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
      a5[1] = 1;
      if (*a5)
        return;
      flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
LABEL_232:
      a5[1] = 1;
      if (*a5)
        return;
LABEL_233:
      flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 59, (uint64_t)a5);
LABEL_234:
      a5[1] = 1;
      v63 = *a5;
      goto LABEL_235;
    default:
      goto LABEL_6;
  }
  while (!v63)
  {
    v64 = *(_DWORD *)(a1 + 20);
    flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
    a5[1] = 1;
    v63 = *a5;
    if (v64 == 59)
    {
LABEL_235:
      if (!v63)
        goto LABEL_4;
      return;
    }
  }
}

void flatbuffers::Parser::ParseProtoCurliesOrIdent(flatbuffers::Parser *this@<X0>, _BYTE *a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;

  v4 = *((_DWORD *)this + 5);
  flatbuffers::Parser::Next(this, (uint64_t)a2);
  a2[1] = 1;
  if (v4 == 123)
  {
    if (*a2)
      return;
    v5 = 1;
    while (v5)
    {
      v6 = *((_DWORD *)this + 5);
      if (v6 == 123)
        v7 = v5 + 1;
      else
        v7 = v5;
      if (v6 == 125)
        --v5;
      else
        v5 = v7;
      flatbuffers::Parser::Next(this, (uint64_t)a2);
      a2[1] = 1;
      if (*a2)
        return;
    }
  }
  else if (*a2)
  {
    return;
  }
  *(_WORD *)a2 = 0;
}

void flatbuffers::Parser::ParseTypeFromProtoType(uint64_t a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  const void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  const char *v10;
  char **v11;
  unint64_t v12;
  const void *v13;
  size_t v14;
  char *v15;

  v6 = (const void **)(a1 + 32);
  v7 = *(unsigned __int8 *)(a1 + 55);
  v8 = *(_QWORD *)(a1 + 40);
  if ((v7 & 0x80u) == 0)
    v9 = v7 & 0x7F;
  else
    v9 = *(_QWORD *)(a1 + 40);
  v10 = "float";
  v11 = &off_1EA98EB60;
  do
  {
    if (strlen(v10) == v9)
    {
      v12 = v7;
      v13 = v6;
      if ((v7 & 0x80) != 0)
      {
        if (v8 == -1)
          abort();
        v13 = *v6;
        v12 = v8;
      }
      v14 = v12 >= v9 ? v9 : v12;
      if (!memcmp(v13, v10, v14) && v12 == v9)
      {
        *a2 = *(v11 - 1);
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a3);
LABEL_19:
        a3[1] = 1;
        if (!*a3)
          *(_WORD *)a3 = 0;
        return;
      }
    }
    v15 = *v11;
    v11 += 2;
    v10 = v15;
  }
  while (v15);
  if (*(_DWORD *)(a1 + 20) != 46
    || (flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a3), a3[1] = 1, !*a3))
  {
    flatbuffers::Parser::ParseTypeIdent((flatbuffers::Parser *)a1, (uint64_t)a2, a3);
    goto LABEL_19;
  }
}

void sub_1DF35C05C(unsigned __int8 *a1, uint64_t a2, const void **a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::string::size_type v12;
  const std::string::value_type *v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  _BOOL8 v18;
  uint64_t v19;
  std::string *v20;
  std::string::size_type v21;
  const std::string::value_type *v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  unint64_t v27;
  _BOOL8 v28;
  std::string *v29;
  std::string::size_type v30;
  const std::string::value_type *v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  unint64_t v36;
  std::string *v37;
  std::string::size_type v38;
  const std::string::value_type *v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  std::string *v48;
  std::string::size_type v49;
  const std::string::value_type *v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type v54;
  uint64_t v55;
  std::string *v57;
  std::string::size_type v58;
  const std::string::value_type *v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  std::string::size_type v63;
  uint64_t v64;
  std::string *v66;
  std::string::size_type v67;
  const std::string::value_type *v68;
  std::string *v69;
  std::string::size_type v70;
  std::string *v71;
  std::string::size_type v72;
  uint64_t v73;
  std::string *v74;
  std::string::size_type v75;
  const std::string::value_type *v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  std::string::size_type v80;
  std::string *p_p;
  std::string::size_type size;
  std::string *v83;
  std::string::size_type v84;
  int v85;
  int v86;
  uint64_t v87;
  std::string __p;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  _BYTE v93[24];

  if (!*(_BYTE *)(a2 + 27) && !*(_BYTE *)(a2 + 28))
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(unsigned __int8 *)(a2 + 25);
    switch(*(_DWORD *)(*(_QWORD *)(a2 + 8) + 152))
    {
      case 0xFFFFFFFD:
      case 0xA:
        v18 = v7 == 0;
        v19 = *(_QWORD *)(v6 + 136);
        if (!__CFADD__(v18, v19))
          goto LABEL_92;
        v10 = *(_QWORD *)a2;
        sub_1DF356B08();
        v20 = std::string::insert(&v89, 0, "enum value does not fit, \"");
        v21 = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        if (v7)
          v22 = "\"";
        else
          v22 = " + 1\"";
        v23 = std::string::append(&v90, v22);
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v91, " out of ");
        v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        sub_1DF368120(&__p);
        goto LABEL_71;
      case 0xFFFFFFFE:
      case 8:
        v27 = *(_QWORD *)(v6 + 136);
        if ((v27 & 0x8000000000000000) == 0)
        {
          v28 = v7 == 0;
          if (v27 <= (v28 ^ 0xFFFFFFFFuLL))
          {
            v73 = v27 + v28;
            goto LABEL_94;
          }
        }
        v10 = *(_QWORD *)a2;
        sub_1DF345C20();
        v29 = std::string::insert(&v89, 0, "enum value does not fit, \"");
        v30 = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        if (v7)
          v31 = "\"";
        else
          v31 = " + 1\"";
        v32 = std::string::append(&v90, v31);
        v33 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        v34 = std::string::append(&v91, " out of ");
        v35 = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        sub_1DF368268(&__p);
        goto LABEL_71;
      case 0xFFFFFFFF:
      case 6:
        v8 = *(_QWORD *)(v6 + 136);
        v36 = 65534;
        if (*(_BYTE *)(a2 + 25))
          v36 = 0xFFFFLL;
        if ((v8 & 0x8000000000000000) == 0 && v8 <= v36)
          goto LABEL_63;
        v10 = *(_QWORD *)a2;
        sub_1DF345C20();
        v37 = std::string::insert(&v89, 0, "enum value does not fit, \"");
        v38 = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        if (v7)
          v39 = "\"";
        else
          v39 = " + 1\"";
        v40 = std::string::append(&v90, v39);
        v41 = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        v42 = std::string::append(&v91, " out of ");
        v43 = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        sub_1DF3684A0(&__p);
        goto LABEL_71;
      case 1:
      case 2:
      case 4:
        v8 = *(_QWORD *)(v6 + 136);
        v9 = 254;
        if (*(_BYTE *)(a2 + 25))
          v9 = 255;
        if ((v8 & 0x8000000000000000) == 0 && v8 <= v9)
          goto LABEL_63;
        v10 = *(_QWORD *)a2;
        sub_1DF345C20();
        v11 = std::string::insert(&v89, 0, "enum value does not fit, \"");
        v12 = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        if (v7)
          v13 = "\"";
        else
          v13 = " + 1\"";
        v14 = std::string::append(&v90, v13);
        v15 = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        v16 = std::string::append(&v91, " out of ");
        v17 = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        sub_1DF3685E8(&__p);
        goto LABEL_71;
      case 3:
        v8 = *(_QWORD *)(v6 + 136);
        v46 = 126;
        if (*(_BYTE *)(a2 + 25))
          v46 = 127;
        if (v8 >= -128 && v8 <= v46)
          goto LABEL_63;
        v10 = *(_QWORD *)a2;
        sub_1DF345C20();
        v48 = std::string::insert(&v89, 0, "enum value does not fit, \"");
        v49 = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if (v7)
          v50 = "\"";
        else
          v50 = " + 1\"";
        v51 = std::string::append(&v90, v50);
        v52 = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        v53 = std::string::append(&v91, " out of ");
        v54 = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        sub_1DF368820(&__p);
        goto LABEL_71;
      case 5:
        v8 = *(_QWORD *)(v6 + 136);
        v55 = 32766;
        if (*(_BYTE *)(a2 + 25))
          v55 = 0x7FFFLL;
        if (v8 >= -32768 && v8 <= v55)
          goto LABEL_63;
        v10 = *(_QWORD *)a2;
        sub_1DF345C20();
        v57 = std::string::insert(&v89, 0, "enum value does not fit, \"");
        v58 = v57->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v58;
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        if (v7)
          v59 = "\"";
        else
          v59 = " + 1\"";
        v60 = std::string::append(&v90, v59);
        v61 = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        v62 = std::string::append(&v91, " out of ");
        v63 = v62->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v63;
        v62->__r_.__value_.__l.__size_ = 0;
        v62->__r_.__value_.__r.__words[2] = 0;
        v62->__r_.__value_.__r.__words[0] = 0;
        sub_1DF368A58(&__p);
        goto LABEL_71;
      case 7:
        v8 = *(_QWORD *)(v6 + 136);
        v64 = 2147483646;
        if (*(_BYTE *)(a2 + 25))
          v64 = 0x7FFFFFFFLL;
        if (v8 >= (uint64_t)0xFFFFFFFF80000000 && v8 <= v64)
        {
LABEL_63:
          if (*(_BYTE *)(a2 + 25))
            v73 = v8;
          else
            v73 = v8 + 1;
          goto LABEL_94;
        }
        v10 = *(_QWORD *)a2;
        sub_1DF345C20();
        v66 = std::string::insert(&v89, 0, "enum value does not fit, \"");
        v67 = v66->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v67;
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        if (v7)
          v68 = "\"";
        else
          v68 = " + 1\"";
        v69 = std::string::append(&v90, v68);
        v70 = v69->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v70;
        v69->__r_.__value_.__l.__size_ = 0;
        v69->__r_.__value_.__r.__words[2] = 0;
        v69->__r_.__value_.__r.__words[0] = 0;
        v71 = std::string::append(&v91, " out of ");
        v72 = v71->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v72;
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        sub_1DF368BA0(&__p);
        goto LABEL_71;
      case 9:
        v18 = v7 == 0;
        v19 = *(_QWORD *)(v6 + 136);
        if (v19 <= (v18 ^ 0x7FFFFFFFFFFFFFFFLL))
        {
LABEL_92:
          v73 = v19 + v18;
LABEL_94:
          *(_QWORD *)(v6 + 136) = v73;
          *(_WORD *)a1 = 256;
          break;
        }
        v10 = *(_QWORD *)a2;
        sub_1DF345C20();
        v74 = std::string::insert(&v89, 0, "enum value does not fit, \"");
        v75 = v74->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v75;
        v74->__r_.__value_.__l.__size_ = 0;
        v74->__r_.__value_.__r.__words[2] = 0;
        v74->__r_.__value_.__r.__words[0] = 0;
        if (v7)
          v76 = "\"";
        else
          v76 = " + 1\"";
        v77 = std::string::append(&v90, v76);
        v78 = v77->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        v79 = std::string::append(&v91, " out of ");
        v80 = v79->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        sub_1DF368DD8(&__p);
LABEL_71:
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          size = __p.__r_.__value_.__l.__size_;
        v83 = std::string::append(&v92, (const std::string::value_type *)p_p, size);
        v84 = v83->__r_.__value_.__r.__words[2];
        *(_OWORD *)v93 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
        *(_QWORD *)&v93[16] = v84;
        v83->__r_.__value_.__l.__size_ = 0;
        v83->__r_.__value_.__r.__words[2] = 0;
        v83->__r_.__value_.__r.__words[0] = 0;
        flatbuffers::Parser::Error(v10, a1);
        if ((v93[23] & 0x80000000) != 0)
          operator delete(*(void **)v93);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v90.__r_.__value_.__l.__data_);
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        {
          v45 = (void *)v89.__r_.__value_.__r.__words[0];
LABEL_89:
          operator delete(v45);
        }
        v85 = *a1;
        a1[1] = 1;
        if (!v85)
          break;
        return;
      default:
        v44 = *(_QWORD *)a2;
        *(_QWORD *)v93 = operator new(0x28uLL);
        *(_OWORD *)&v93[8] = xmmword_1DF385CE0;
        strcpy(*(char **)v93, "fatal: invalid enum underlying type");
        flatbuffers::Parser::Error(v44, a1);
        v45 = *(void **)v93;
        goto LABEL_89;
    }
  }
  v86 = sub_1DF36402C((uint64_t **)(*(_QWORD *)(a2 + 8) + 184), a3, *(_QWORD *)(a2 + 16));
  *(_QWORD *)(a2 + 16) = 0;
  if (v86)
  {
    v87 = *(_QWORD *)a2;
    std::operator+<char>();
    flatbuffers::Parser::Error(v87, a1);
    if ((v93[23] & 0x80000000) != 0)
      operator delete(*(void **)v93);
  }
  else
  {
    if (*(_BYTE *)(a2 + 27))
    {
      *(_DWORD *)(a2 + 32) = ((*(_QWORD *)(*(_QWORD *)(a2 + 8) + 216) - *(_QWORD *)(*(_QWORD *)(a2 + 8) + 208)) >> 3)
                           - 1;
    }
    else if (*(_BYTE *)(a2 + 28))
    {
      *(_DWORD *)(a2 + 36) = ((*(_QWORD *)(*(_QWORD *)(a2 + 8) + 216) - *(_QWORD *)(*(_QWORD *)(a2 + 8) + 208)) >> 3)
                           - 1;
    }
    *(_WORD *)a1 = 0;
  }
}

void flatbuffers::Parser::ParseFlexBufferValue(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  unsigned __int8 v11;
  double v12;
  double v13;
  float v14;
  int v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  BOOL v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  size_t v30;
  unint64_t v31;
  char *v32;
  _BYTE *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  int v42;
  int v43;
  std::string *v44;
  uint64_t size;
  char *v46;
  uint64_t v47;
  flatbuffers::Parser *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __int128 *v54;
  unint64_t v55;
  uint64_t v56;
  std::string::size_type v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  size_t v64;
  unint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  size_t v87;
  unint64_t v88;
  char v89;
  int v90;
  char *v91;
  unint64_t v92;
  unint64_t v93;
  const char *v94;
  unsigned __int8 v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t *v106;
  unint64_t v107;
  __int16 v108;
  std::string v109;

  v6 = *(_DWORD *)(a1 + 20);
  switch(v6)
  {
    case 257:
      v89 = *(_BYTE *)(a1 + 55);
      v90 = v89;
      if (v89 >= 0)
        v91 = (char *)(a1 + 32);
      else
        v91 = *(char **)(a1 + 32);
      v92 = v89 & 0x7F;
      if (v90 >= 0)
        v93 = v92;
      else
        v93 = *(_QWORD *)(a1 + 40);
      sub_1DF383538(a2, v91, v93);
      v47 = a3;
      v48 = (flatbuffers::Parser *)a1;
      v49 = 257;
      goto LABEL_105;
    case 258:
      v94 = (const char *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v94 = *(const char **)v94;
      *__error() = 0;
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
      v95 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
      if ((v95 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
      {
        qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
        __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
        __cxa_guard_release(&qword_1F04755F0);
      }
      v96 = strtoll_l(v94, &v109.__r_.__value_.__l.__data_, 10, (locale_t)qword_1F04755E8);
      if (v109.__r_.__value_.__l.__data_ == v94 || *v109.__r_.__value_.__l.__data_ || (v97 = v96, *__error()))
        v97 = 0;
      sub_1DF382B54(a2, v97);
      v47 = a3;
      v48 = (flatbuffers::Parser *)a1;
      v49 = 258;
      goto LABEL_105;
    case 259:
      v10 = (const char *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v10 = *(const char **)v10;
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
      v11 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
      if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
      {
        qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
        __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
        __cxa_guard_release(&qword_1F04755F0);
      }
      v12 = strtod_l(v10, &v109.__r_.__value_.__l.__data_, (locale_t)qword_1F04755E8);
      if (v109.__r_.__value_.__l.__data_ == v10 || (v13 = v12, *v109.__r_.__value_.__l.__data_))
        v13 = 0.0;
      v14 = v13;
      if (v13 == v14)
        v15 = 2;
      else
        v15 = 3;
      v17 = *(char **)(a2 + 32);
      v16 = *(_QWORD *)(a2 + 40);
      if ((unint64_t)v17 < v16)
      {
        *(double *)v17 = v13;
        v18 = v17 + 16;
        *((_DWORD *)v17 + 2) = 3;
        *((_DWORD *)v17 + 3) = v15;
        goto LABEL_104;
      }
      v33 = *(_BYTE **)(a2 + 24);
      v34 = (v17 - v33) >> 4;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 60)
        goto LABEL_215;
      v36 = v16 - (_QWORD)v33;
      if (v36 >> 3 > v35)
        v35 = v36 >> 3;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
        v37 = 0xFFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (!v37)
      {
        v38 = 0;
        goto LABEL_99;
      }
      if (!(v37 >> 60))
      {
        v38 = (char *)operator new(16 * v37);
LABEL_99:
        v46 = &v38[16 * v34];
        *(double *)v46 = v13;
        *((_DWORD *)v46 + 2) = 3;
        *((_DWORD *)v46 + 3) = v15;
        v18 = v46 + 16;
        if (v17 != v33)
        {
          do
          {
            *((_OWORD *)v46 - 1) = *((_OWORD *)v17 - 1);
            v46 -= 16;
            v17 -= 16;
          }
          while (v17 != v33);
          v17 = *(char **)(a2 + 24);
        }
        *(_QWORD *)(a2 + 24) = v46;
        *(_QWORD *)(a2 + 32) = v18;
        *(_QWORD *)(a2 + 40) = &v38[16 * v37];
        if (v17)
          operator delete(v17);
LABEL_104:
        *(_QWORD *)(a2 + 32) = v18;
        v47 = a3;
        v48 = (flatbuffers::Parser *)a1;
        v49 = 259;
LABEL_105:
        flatbuffers::Parser::Expect(v48, v49, v47);
LABEL_211:
        *(_BYTE *)(a3 + 1) = 1;
        if (*(_BYTE *)a3)
          return;
        goto LABEL_212;
      }
      goto LABEL_216;
    case 260:
      v24 = (_QWORD *)(a1 + 32);
      v25 = *(unsigned __int8 *)(a1 + 55);
      v26 = *(_QWORD *)(a1 + 40);
      if ((v25 & 0x80u) == 0)
        v27 = v25 & 0x7F;
      else
        v27 = *(_QWORD *)(a1 + 40);
      if (v27 == 5)
      {
        if ((v25 & 0x80) != 0)
          v24 = (_QWORD *)*v24;
        else
          v26 = *(unsigned __int8 *)(a1 + 55);
        if (v26 >= 5)
          v64 = 5;
        else
          v64 = v26;
        if (!memcmp(v24, "false", v64) && v26 == 5)
        {
          v32 = *(char **)(a2 + 32);
          v65 = *(_QWORD *)(a2 + 40);
          if ((unint64_t)v32 < v65)
          {
            *(_QWORD *)v32 = 0;
            goto LABEL_124;
          }
          v73 = *(char **)(a2 + 24);
          v74 = (v32 - v73) >> 4;
          v75 = v74 + 1;
          if (!((unint64_t)(v74 + 1) >> 60))
          {
            v76 = v65 - (_QWORD)v73;
            if (v76 >> 3 > v75)
              v75 = v76 >> 3;
            if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0)
              v77 = 0xFFFFFFFFFFFFFFFLL;
            else
              v77 = v75;
            if (v77)
            {
              if (v77 >> 60)
                goto LABEL_216;
              v78 = (char *)operator new(16 * v77);
            }
            else
            {
              v78 = 0;
            }
            v104 = &v78[16 * v74];
            v105 = &v78[16 * v77];
            *(_QWORD *)v104 = 0;
            *((_QWORD *)v104 + 1) = 26;
            v66 = v104 + 16;
            if (v32 == v73)
              goto LABEL_208;
            do
            {
              *((_OWORD *)v104 - 1) = *((_OWORD *)v32 - 1);
              v104 -= 16;
              v32 -= 16;
            }
            while (v32 != v73);
            goto LABEL_207;
          }
          goto LABEL_215;
        }
      }
      else if (v27 == 4)
      {
        v28 = *(unsigned __int8 *)(a1 + 55);
        v29 = (_QWORD *)(a1 + 32);
        if ((v25 & 0x80) != 0)
        {
          v29 = (_QWORD *)*v24;
          v28 = *(_QWORD *)(a1 + 40);
        }
        if (v28 >= 4)
          v30 = 4;
        else
          v30 = v28;
        if (!memcmp(v29, "true", v30) && v28 == 4)
        {
          v32 = *(char **)(a2 + 32);
          v31 = *(_QWORD *)(a2 + 40);
          if ((unint64_t)v32 < v31)
          {
            *(_QWORD *)v32 = 1;
LABEL_124:
            *((_QWORD *)v32 + 1) = 26;
            v66 = v32 + 16;
LABEL_210:
            *(_QWORD *)(a2 + 32) = v66;
            flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a3);
            goto LABEL_211;
          }
          v67 = *(char **)(a2 + 24);
          v68 = (v32 - v67) >> 4;
          v69 = v68 + 1;
          if (!((unint64_t)(v68 + 1) >> 60))
          {
            v70 = v31 - (_QWORD)v67;
            if (v70 >> 3 > v69)
              v69 = v70 >> 3;
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0)
              v71 = 0xFFFFFFFFFFFFFFFLL;
            else
              v71 = v69;
            if (!v71)
            {
              v72 = 0;
              goto LABEL_190;
            }
            if (!(v71 >> 60))
            {
              v72 = (char *)operator new(16 * v71);
LABEL_190:
              v104 = &v72[16 * v68];
              v105 = &v72[16 * v71];
              *(_QWORD *)v104 = 1;
              *((_QWORD *)v104 + 1) = 26;
              v66 = v104 + 16;
              if (v32 == v67)
                goto LABEL_208;
              do
              {
                *((_OWORD *)v104 - 1) = *((_OWORD *)v32 - 1);
                v104 -= 16;
                v32 -= 16;
              }
              while (v32 != v67);
              goto LABEL_207;
            }
LABEL_216:
            sub_1DF3667C0();
          }
          goto LABEL_215;
        }
        if ((v25 & 0x80) != 0)
          v24 = (_QWORD *)*v24;
        else
          v26 = v25;
        if (v26 >= 4)
          v87 = 4;
        else
          v87 = v26;
        if (!memcmp(v24, "null", v87) && v26 == 4)
        {
          v32 = *(char **)(a2 + 32);
          v88 = *(_QWORD *)(a2 + 40);
          if ((unint64_t)v32 < v88)
          {
            v66 = v32 + 16;
            *(_QWORD *)v32 = 0;
            *((_QWORD *)v32 + 1) = 0;
            goto LABEL_210;
          }
          v98 = *(char **)(a2 + 24);
          v99 = (v32 - v98) >> 4;
          v100 = v99 + 1;
          if (!((unint64_t)(v99 + 1) >> 60))
          {
            v101 = v88 - (_QWORD)v98;
            if (v101 >> 3 > v100)
              v100 = v101 >> 3;
            if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF0)
              v102 = 0xFFFFFFFFFFFFFFFLL;
            else
              v102 = v100;
            if (v102)
            {
              if (v102 >> 60)
                goto LABEL_216;
              v103 = (char *)operator new(16 * v102);
            }
            else
            {
              v103 = 0;
            }
            v104 = &v103[16 * v99];
            v105 = &v103[16 * v102];
            v66 = v104 + 16;
            *(_QWORD *)v104 = 0;
            *((_QWORD *)v104 + 1) = 0;
            if (v32 == v98)
              goto LABEL_208;
            do
            {
              *((_OWORD *)v104 - 1) = *((_OWORD *)v32 - 1);
              v104 -= 16;
              v32 -= 16;
            }
            while (v32 != v98);
LABEL_207:
            v32 = *(char **)(a2 + 24);
LABEL_208:
            *(_QWORD *)(a2 + 24) = v104;
            *(_QWORD *)(a2 + 32) = v66;
            *(_QWORD *)(a2 + 40) = v105;
            if (v32)
              operator delete(v32);
            goto LABEL_210;
          }
LABEL_215:
          abort();
        }
      }
      goto LABEL_164;
    default:
      if (v6 == 91)
      {
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(_QWORD *)(a2 + 32);
        flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 91, a3);
        *(_BYTE *)(a3 + 1) = 1;
        if (*(_BYTE *)a3)
          goto LABEL_97;
        v21 = 0;
        v22 = (v19 - v20) >> 4;
        while (1)
        {
          v23 = !*(_BYTE *)(a1 + 729) || v21 == 0;
          if (v23 && *(_DWORD *)(a1 + 20) == 93)
            break;
          flatbuffers::Parser::ParseFlexBufferValue(a1, a2);
          *(_BYTE *)(a3 + 1) = 1;
          if (*(_BYTE *)a3)
            goto LABEL_97;
          if (*(_DWORD *)(a1 + 20) == 93)
            break;
          if (!*(_BYTE *)(a1 + 954))
          {
            flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 44, a3);
            *(_BYTE *)(a3 + 1) = 1;
            if (*(_BYTE *)a3)
              goto LABEL_97;
          }
          *(_WORD *)a3 = 256;
          --v21;
        }
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a3);
        *(_BYTE *)(a3 + 1) = 1;
        if (*(_BYTE *)a3)
        {
LABEL_97:
          *(_BYTE *)(a3 + 1) = 1;
          return;
        }
        sub_1DF382A90((_QWORD *)a2, v22);
        goto LABEL_212;
      }
      if (v6 != 123)
      {
LABEL_164:
        flatbuffers::Parser::TokenError((flatbuffers::Parser *)a1, (_WORD *)a3);
        return;
      }
      v8 = *(_QWORD *)(a2 + 24);
      v9 = *(_QWORD *)(a2 + 32);
      v7 = (uint64_t **)(a2 + 24);
      flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 123, (uint64_t)&v108);
      HIBYTE(v108) = 1;
      if ((_BYTE)v108)
        goto LABEL_5;
      v39 = 0;
      v107 = (v9 - v8) >> 4;
      break;
  }
  do
  {
    while (1)
    {
      if (*(_BYTE *)(a1 + 729))
        v40 = v39 == 0;
      else
        v40 = 1;
      if (v40 && *(_DWORD *)(a1 + 20) == 125)
        goto LABEL_94;
      memset(&v109, 0, sizeof(v109));
      std::string::operator=(&v109, (const std::string *)(a1 + 32));
      if (*(_DWORD *)(a1 + 20) == 257)
      {
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)&v108);
      }
      else
      {
        if (*(_BYTE *)(a1 + 729))
          v41 = 257;
        else
          v41 = 260;
        flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, v41, (uint64_t)&v108);
      }
      v42 = 1;
      HIBYTE(v108) = 1;
      if ((_BYTE)v108
        || (!*(_BYTE *)(a1 + 954) || (*(_DWORD *)(a1 + 20) | 0x20) != 0x7B)
        && (flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 58, (uint64_t)&v108), HIBYTE(v108) = 1, (_BYTE)v108))
      {
        v43 = 1;
        goto LABEL_72;
      }
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = &v109;
      else
        v44 = (std::string *)v109.__r_.__value_.__r.__words[0];
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v109.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v109.__r_.__value_.__l.__size_;
      sub_1DF383DFC(a2, (char *)v44, size);
      flatbuffers::Parser::ParseFlexBufferValue(a1, a2);
      if ((_BYTE)v108)
        goto LABEL_84;
      ++v39;
      v108 = 256;
      if (*(_DWORD *)(a1 + 20) != 125)
      {
        if (*(_BYTE *)(a1 + 954)
          || (flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 44, (uint64_t)&v108), !(_BYTE)v108))
        {
          v42 = 0;
          LOBYTE(v108) = 0;
        }
LABEL_84:
        HIBYTE(v108) = 1;
        v43 = v42;
        goto LABEL_72;
      }
      v42 = 0;
      v43 = 2;
LABEL_72:
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (v43)
        goto LABEL_93;
    }
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  while (!v43);
LABEL_93:
  if (v43 != 2)
  {
    *(_BYTE *)a3 = v42;
    *(_BYTE *)(a3 + 1) = 1;
    if (v42)
      return;
LABEL_109:
    v50 = *(_QWORD *)(a2 + 24);
    v51 = (*(_QWORD *)(a2 + 32) - v50) >> 4;
    if (*(_QWORD *)(a2 + 32) == v50)
      v50 = 0;
    v52 = v51 - v107;
    v53 = v52 >> 1;
    v54 = (__int128 *)(v50 + 16 * v107);
    v109.__r_.__value_.__r.__words[0] = a2;
    v55 = 126 - 2 * __clz(v52 >> 1);
    if (v52 >= 2)
      v56 = v55;
    else
      v56 = 0;
    sub_1DF3693F8(v54, &v54[2 * (v52 >> 1)], (uint64_t **)&v109, v56, 1);
    v109.__r_.__value_.__r.__words[0] = sub_1DF369050(a2, v107, v53, 2, 1, 0);
    v109.__r_.__value_.__l.__size_ = v57;
    v58 = sub_1DF369050(a2, v107 + 1, v53, 2, 0, (uint64_t)&v109);
    v60 = v59;
    v61 = *(_QWORD *)(a2 + 24);
    v62 = *(uint64_t **)(a2 + 32);
    v63 = ((uint64_t)v62 - v61) >> 4;
    if (v107 <= v63)
    {
      if (v107 < v63)
      {
        v62 = (uint64_t *)(v61 + 16 * v107);
        *(_QWORD *)(a2 + 32) = v62;
      }
    }
    else
    {
      sub_1DF36A834((char **)(a2 + 24), v107 - v63);
      v62 = *(uint64_t **)(a2 + 32);
    }
    v79 = *(_QWORD *)(a2 + 40);
    if ((unint64_t)v62 >= v79)
    {
      v81 = *v7;
      v82 = ((char *)v62 - (char *)*v7) >> 4;
      v83 = v82 + 1;
      if ((unint64_t)(v82 + 1) >> 60)
        goto LABEL_215;
      v84 = v79 - (_QWORD)v81;
      if (v84 >> 3 > v83)
        v83 = v84 >> 3;
      if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF0)
        v85 = 0xFFFFFFFFFFFFFFFLL;
      else
        v85 = v83;
      if (v85)
      {
        if (v85 >> 60)
          goto LABEL_216;
        v86 = (char *)operator new(16 * v85);
      }
      else
      {
        v86 = 0;
      }
      v106 = (uint64_t *)&v86[16 * v82];
      *v106 = v58;
      v106[1] = v60;
      v80 = v106 + 2;
      if (v62 != v81)
      {
        do
        {
          *((_OWORD *)v106 - 1) = *((_OWORD *)v62 - 1);
          v106 -= 2;
          v62 -= 2;
        }
        while (v62 != v81);
        v62 = *v7;
      }
      *(_QWORD *)(a2 + 24) = v106;
      *(_QWORD *)(a2 + 32) = v80;
      *(_QWORD *)(a2 + 40) = &v86[16 * v85];
      if (v62)
        operator delete(v62);
    }
    else
    {
      *v62 = v58;
      v62[1] = v60;
      v80 = v62 + 2;
    }
    *(_QWORD *)(a2 + 32) = v80;
LABEL_212:
    *(_WORD *)a3 = 0;
    return;
  }
LABEL_94:
  flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)&v108);
  if (!(_BYTE)v108)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_109;
  }
LABEL_5:
  *(_WORD *)a3 = 257;
}

void flatbuffers::Parser::StartParseFile(flatbuffers::Parser *this@<X0>, const char *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X8>)
{
  const char *v7;
  char __p[20];

  if (a3)
    v7 = a3;
  else
    v7 = (const char *)&unk_1DF38618F;
  MEMORY[0x1E0BFF5B4]((char *)this + 1152, v7);
  *((_QWORD *)this + 143) = a2;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 4) = 1;
  if (*((char *)this + 335) < 0)
  {
    **((_BYTE **)this + 39) = 0;
    *((_QWORD *)this + 40) = 0;
  }
  else
  {
    *((_BYTE *)this + 312) = 0;
    *((_BYTE *)this + 335) = 0;
  }
  flatbuffers::Parser::SkipByteOrderMark((unsigned __int8 **)this, (_WORD *)a4);
  *(_BYTE *)(a4 + 1) = 1;
  if (!*(_BYTE *)a4)
  {
    flatbuffers::Parser::Next(this, a4);
    *(_BYTE *)(a4 + 1) = 1;
    if (!*(_BYTE *)a4)
    {
      if (*((_DWORD *)this + 5) == 256)
      {
        strcpy(__p, "input file is empty");
        flatbuffers::Parser::Error((uint64_t)this, (_WORD *)a4);
      }
      else
      {
        *(_WORD *)a4 = 0;
      }
    }
  }
}

void flatbuffers::Parser::ParseRoot(uint64_t **this@<X0>, const char *a2@<X1>, const char **a3@<X2>, const char *a4@<X3>, unsigned __int8 *a5@<X8>)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  BOOL v30;
  uint64_t v31;
  std::string *v32;
  std::string::size_type v33;
  void *v34;
  std::string::size_type v35;
  std::string::size_type v36;
  std::string::size_type v37;
  uint64_t v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  std::string::size_type v42;
  void **v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  char v49;
  BOOL v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  std::string::size_type v53;
  std::string *v54;
  std::string::size_type v55;
  void *v56[2];
  char v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string __p;
  uint64_t v64;
  void *v65;
  char v66;
  _BYTE v67[160];

  flatbuffers::Parser::DoParse((flatbuffers::Parser *)this, a2, a3, a4, 0, a5);
  a5[1] = 1;
  if (*a5)
    return;
  v8 = this[19];
  v7 = this[20];
  while (v8 != v7)
  {
    v9 = *v8;
    if (*(_BYTE *)(*v8 + 201))
    {
      if (!*((_BYTE *)this + 747))
        goto LABEL_49;
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v9 + 128) + 8) - **(_QWORD **)(v9 + 128)) >> 3);
      if (v10 == -1)
        goto LABEL_49;
      do
      {
        flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(v9 + 128), v9, v10, &__p);
        v11 = flatbuffers::Parser::LookupEnum((uint64_t)this, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v12 = v10-- != 0;
      }
      while (v12 && !v11);
      if (!v11)
      {
LABEL_49:
        std::operator+<char>();
        if (*(_QWORD *)(v9 + 224))
        {
          std::operator+<char>();
          v32 = (v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v62
              : (std::string *)v62.__r_.__value_.__r.__words[0];
          v33 = (v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? *((_BYTE *)&v62.__r_.__value_.__s + 23) & 0x7F
              : v62.__r_.__value_.__l.__size_;
          std::string::append(&__p, (const std::string::value_type *)v32, v33);
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v62.__r_.__value_.__l.__data_);
        }
        goto LABEL_59;
      }
      v13 = this[19];
      v14 = this[20];
      v15 = *(_DWORD *)(v9 + 144);
      if (v13 != v14)
      {
        do
        {
          v16 = *(uint64_t **)(*v13 + 176);
          v17 = *(uint64_t **)(*v13 + 184);
          while (v16 != v17)
          {
            v18 = *v16;
            if (*(_QWORD *)(*v16 + 160) == v9)
            {
              *(_QWORD *)(v18 + 160) = 0;
              *(_QWORD *)(v18 + 168) = v11;
              if (*(_DWORD *)(v18 + 152) == 14)
                v19 = 156;
              else
                v19 = 152;
              *(_DWORD *)(v18 + v19) = *(_DWORD *)(v11 + 152);
              --*(_DWORD *)(v9 + 144);
              ++*(_DWORD *)(v11 + 144);
            }
            ++v16;
          }
          ++v13;
        }
        while (v13 != v14);
        v15 = *(_DWORD *)(v9 + 144);
      }
      if (v15)
      {
        sub_1DF367FB0((uint64_t)&__p);
        std::ostream::operator<<();
        std::stringbuf::str();
        v35 = *MEMORY[0x1E0DE4F50];
        __p.__r_.__value_.__r.__words[0] = v35;
        v37 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
        v36 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v35 - 24)) = v37;
        v38 = MEMORY[0x1E0DE4FB8] + 16;
        __p.__r_.__value_.__r.__words[2] = v36;
        v64 = MEMORY[0x1E0DE4FB8] + 16;
        if (v66 < 0)
          operator delete(v65);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1E0BFF758](v67);
        v39 = std::string::insert(&v58, 0, "internal: ");
        v40 = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        v41 = std::string::append(&v59, "/");
        v42 = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        sub_1DF367FB0((uint64_t)&__p);
        std::ostream::operator<<();
        std::stringbuf::str();
        __p.__r_.__value_.__r.__words[0] = v35;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v35 - 24)) = v37;
        __p.__r_.__value_.__r.__words[2] = v36;
        v64 = v38;
        if (v66 < 0)
          operator delete(v65);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1E0BFF758](v67);
        if (v57 >= 0)
          v43 = v56;
        else
          v43 = (void **)v56[0];
        if (v57 >= 0)
          v44 = v57 & 0x7F;
        else
          v44 = (std::string::size_type)v56[1];
        v45 = std::string::append(&v60, (const std::string::value_type *)v43, v44);
        v46 = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        v47 = std::string::append(&v61, " use(s) of pre-declaration enum not accounted for: ");
        v48 = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        v49 = *(_BYTE *)(v11 + 23);
        v50 = v49 < 0;
        if (v49 >= 0)
          v51 = (const std::string::value_type *)v11;
        else
          v51 = *(const std::string::value_type **)v11;
        v52 = v49 & 0x7F;
        if (v50)
          v53 = *(_QWORD *)(v11 + 8);
        else
          v53 = v52;
        v54 = std::string::append(&v62, v51, v53);
        v55 = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        flatbuffers::Parser::Error((uint64_t)this, a5);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v61.__r_.__value_.__l.__data_);
        if (v57 < 0)
          operator delete(v56[0]);
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v60.__r_.__value_.__l.__data_);
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v59.__r_.__value_.__l.__data_);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        {
          v34 = (void *)v58.__r_.__value_.__r.__words[0];
          goto LABEL_61;
        }
        return;
      }
      v20 = sub_1DF373324((uint64_t)(this + 16), v9);
      sub_1DF3734D4(this + 16, v20);
      v21 = this[20];
      v22 = (char *)v21 - (char *)(v8 + 1);
      if (v21 != v8 + 1)
        memmove(v8, v8 + 1, (char *)v21 - (char *)(v8 + 1));
      this[20] = (uint64_t *)((char *)v8 + v22);
      sub_1DF356EBC((uint64_t *)(v9 + 224), 0);
      sub_1DF368F80(v9 + 152);
      sub_1DF367C54(v9 + 72);
      __p.__r_.__value_.__r.__words[0] = v9 + 48;
      sub_1DF370598((void ***)&__p);
      if (*(char *)(v9 + 47) < 0)
        operator delete(*(void **)(v9 + 24));
      if (*(char *)(v9 + 23) < 0)
        operator delete(*(void **)v9);
      MEMORY[0x1E0BFF788](v9, 0x10B2C4058EA06FBLL);
      v7 = this[20];
    }
    else
    {
      ++v8;
    }
  }
  v23 = this[25];
  v24 = this[26];
  if (v23 == v24)
  {
LABEL_48:
    *(_WORD *)a5 = 0;
  }
  else
  {
    while (1)
    {
      v25 = *v23;
      if (*(_BYTE *)(*v23 + 148))
      {
        v26 = *(_QWORD *)(v25 + 208);
        v27 = *(_QWORD *)(v25 + 216);
        if (v26 != v27)
          break;
      }
LABEL_47:
      if (++v23 == v24)
        goto LABEL_48;
    }
    v28 = this[140];
    v30 = ((unint64_t)v28 & 0xFFFFFFFFFFFE7CA4) == 0 && v28 != 0;
    while (1)
    {
      if (!v30)
      {
        v31 = *(_QWORD *)(*(_QWORD *)v26 + 56);
        if (v31)
        {
          if (*(_BYTE *)(v31 + 200))
            break;
        }
      }
      v26 += 8;
      if (v26 == v27)
        goto LABEL_47;
    }
    std::operator+<char>();
LABEL_59:
    flatbuffers::Parser::Error((uint64_t)this, a5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v34 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_61:
      operator delete(v34);
    }
  }
}

void flatbuffers::Parser::DoParse(flatbuffers::Parser *this@<X0>, const char *a2@<X1>, const char **a3@<X2>, const char *a4@<X3>, const char *a5@<X4>, unsigned __int8 *a6@<X8>)
{
  const char *v7;
  const char **v10;
  uint64_t v11;
  uint64_t v12;
  flatbuffers **v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  flatbuffers *v21;
  size_t v22;
  BOOL v23;
  unint64_t v24;
  flatbuffers *v25;
  int v26;
  unint64_t v27;
  flatbuffers *v28;
  size_t v29;
  size_t v31;
  unsigned __int8 *v32;
  unint64_t v33;
  flatbuffers *v34;
  size_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  flatbuffers *v40;
  size_t v41;
  flatbuffers *v43;
  size_t v44;
  int v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  flatbuffers *v49;
  size_t v50;
  flatbuffers *v51;
  int v52;
  const char *v53;
  uint64_t v54;
  size_t v55;
  size_t v56;
  std::string **p_dst;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  flatbuffers *v61;
  std::string::size_type v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  int64x2_t v73;
  uint64_t v74;
  size_t v75;
  std::string::size_type v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  std::string *v81;
  std::string *v82;
  std::string *v83;
  std::string *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *i;
  uint64_t v92;
  const char *v93;
  size_t v94;
  size_t v95;
  std::string **v96;
  uint64_t v97;
  uint64_t v98;
  size_t v99;
  std::string::size_type v100;
  std::string *v101;
  uint64_t v102;
  uint64_t v103;
  flatbuffers::Parser *v104;
  const char *v105;
  size_t v106;
  std::string::size_type v107;
  std::string *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t **v112;
  uint64_t **v113;
  std::string::size_type size;
  std::string *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  size_t v119;
  uint64_t *v120;
  size_t v121;
  size_t v122;
  size_t v123;
  int v124;
  _BOOL4 v125;
  size_t v126;
  int v127;
  _BOOL4 v128;
  uint64_t *v129;
  uint64_t *v130;
  _QWORD *v131;
  uint64_t *v132;
  const char *v133;
  size_t v134;
  std::string::size_type v135;
  std::string *p_p;
  uint64_t v137;
  uint64_t v138;
  _OWORD *v139;
  std::string::size_type *v140;
  std::string::size_type **v141;
  std::string::size_type v142;
  std::string::size_type v143;
  unsigned __int8 *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  flatbuffers *v148;
  size_t v149;
  unsigned __int8 *v150;
  flatbuffers::Parser *v151;
  int v152;
  _DWORD *v153;
  flatbuffers *v154;
  size_t v155;
  flatbuffers *v156;
  size_t v157;
  unint64_t v158;
  flatbuffers *v159;
  size_t v160;
  flatbuffers *v161;
  size_t v162;
  flatbuffers *v163;
  size_t v164;
  flatbuffers *v165;
  size_t v166;
  uint64_t v167;
  char *v168;
  int v169;
  unint64_t v170;
  flatbuffers *v171;
  size_t v172;
  uint64_t v173;
  flatbuffers::Parser *v174;
  int v175;
  flatbuffers *v176;
  size_t v177;
  BOOL v178;
  char v179;
  uint64_t v180;
  std::string *v181;
  void *v182;
  std::string *v183;
  std::string::size_type v184;
  std::string *v185;
  std::string::size_type v186;
  const char *v187;
  uint64_t **v188;
  std::string *v189;
  unint64_t *v190;
  _QWORD **v191;
  const char *v192;
  char *__s;
  char *__sa;
  std::string *__dst;
  size_t v198;
  unint64_t v199;
  std::string v200;
  std::string __p;
  std::string v202;
  uint64_t v203;
  char *v204;

  v7 = a4;
  if (a4)
  {
    v99 = strlen(a4);
    if (v99 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_452;
    v100 = v99;
    if (v99 >= 0x17)
    {
      v102 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v99 | 7) != 0x17)
        v102 = v99 | 7;
      v103 = v102 + 1;
      v101 = (std::string *)operator new(v102 + 1);
      v202.__r_.__value_.__l.__size_ = v100;
      v202.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
      v202.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
    }
    else
    {
      *((_BYTE *)&v202.__r_.__value_.__s + 23) = v99;
      v101 = &v202;
      if (!v99)
      {
LABEL_226:
        v101->__r_.__value_.__s.__data_[v100] = 0;
        v104 = (flatbuffers::Parser *)sub_1DF383318((uint64_t)this + 632, &v202);
        if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v202.__r_.__value_.__l.__data_);
        if ((flatbuffers::Parser *)((char *)this + 640) != v104)
        {
LABEL_229:
          *(_WORD *)a6 = 0;
          return;
        }
        if (a5)
          v105 = a5;
        else
          v105 = (const char *)&unk_1DF38618F;
        v106 = strlen(v7);
        if (v106 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_452;
        v107 = v106;
        v187 = a5;
        v191 = (_QWORD **)((char *)this + 632);
        v192 = v105;
        if (v106 >= 0x17)
        {
          v109 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v106 | 7) != 0x17)
            v109 = v106 | 7;
          v110 = v109 + 1;
          v108 = (std::string *)operator new(v109 + 1);
          v202.__r_.__value_.__l.__size_ = v107;
          v202.__r_.__value_.__r.__words[2] = v110 | 0x8000000000000000;
          v202.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
        }
        else
        {
          *((_BYTE *)&v202.__r_.__value_.__s + 23) = v106;
          v108 = &v202;
          if (!v106)
          {
LABEL_244:
            __sa = (char *)v7;
            v108->__r_.__value_.__s.__data_[v107] = 0;
            v111 = *(uint64_t **)v104;
            v112 = (uint64_t **)v104;
            v113 = (uint64_t **)v104;
            if (*(_QWORD *)v104)
            {
              if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v202.__r_.__value_.__r.__words[2]);
              else
                size = v202.__r_.__value_.__l.__size_;
              if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v115 = &v202;
              else
                v115 = (std::string *)v202.__r_.__value_.__r.__words[0];
              while (1)
              {
                while (1)
                {
                  v113 = (uint64_t **)v111;
                  v118 = (uint64_t *)v111[4];
                  v116 = v111 + 4;
                  v117 = v118;
                  v119 = *((unsigned __int8 *)v116 + 23);
                  if ((v119 & 0x80u) == 0)
                    v120 = v116;
                  else
                    v120 = v117;
                  v121 = v116[1];
                  if ((v119 & 0x80u) == 0)
                    v122 = v119 & 0x7F;
                  else
                    v122 = v116[1];
                  if (v122 >= size)
                    v123 = size;
                  else
                    v123 = v122;
                  v124 = memcmp(v115, v120, v123);
                  v125 = size < v122;
                  if (v124)
                    v125 = v124 < 0;
                  if (!v125)
                    break;
                  v111 = *v113;
                  v112 = v113;
                  if (!*v113)
                    goto LABEL_275;
                }
                if ((v119 & 0x80u) == 0)
                  v121 = v119;
                if (size >= v121)
                  v126 = v121;
                else
                  v126 = size;
                v127 = memcmp(v120, v115, v126);
                v128 = v121 < size;
                if (v127)
                  v128 = v127 < 0;
                if (!v128)
                  break;
                v111 = v113[1];
                if (!v111)
                {
                  v112 = v113 + 1;
                  goto LABEL_275;
                }
              }
              v133 = __sa;
            }
            else
            {
LABEL_275:
              v129 = (uint64_t *)v113;
              v113 = (uint64_t **)operator new(0x50uLL);
              *((_OWORD *)v113 + 2) = *(_OWORD *)&v202.__r_.__value_.__l.__data_;
              v130 = (uint64_t *)v202.__r_.__value_.__r.__words[2];
              memset(&v202, 0, sizeof(v202));
              v113[6] = v130;
              v113[7] = 0;
              v113[8] = 0;
              v113[9] = 0;
              *v113 = 0;
              v113[1] = 0;
              v113[2] = v129;
              *v112 = (uint64_t *)v113;
              v131 = (_QWORD *)**v191;
              v132 = (uint64_t *)v113;
              if (v131)
              {
                *v191 = v131;
                v132 = *v112;
              }
              sub_1DF36718C(*(uint64_t **)v104, v132);
              ++*((_QWORD *)this + 81);
              v133 = __sa;
            }
            MEMORY[0x1E0BFF5B4](v113 + 7, v192);
            if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v202.__r_.__value_.__l.__data_);
            *(_OWORD *)&v202.__r_.__value_.__r.__words[1] = 0uLL;
            v202.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202.__r_.__value_.__l.__size_;
            v134 = strlen(v133);
            if (v134 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_452;
            v135 = v134;
            if (v134 >= 0x17)
            {
              v137 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v134 | 7) != 0x17)
                v137 = v134 | 7;
              v138 = v137 + 1;
              p_p = (std::string *)operator new(v137 + 1);
              __p.__r_.__value_.__l.__size_ = v135;
              __p.__r_.__value_.__r.__words[2] = v138 | 0x8000000000000000;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
            }
            else
            {
              *((_BYTE *)&__p.__r_.__value_.__s + 23) = v134;
              p_p = &__p;
              if (!v134)
                goto LABEL_288;
            }
            memcpy(p_p, __sa, v135);
LABEL_288:
            p_p->__r_.__value_.__s.__data_[v135] = 0;
            v200.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            v139 = sub_1DF3738EC((uint64_t)this + 656, (const void **)&__p.__r_.__value_.__l.__data_, &v200);
            v140 = (std::string::size_type *)(v139 + 4);
            v141 = (std::string::size_type **)v139 + 7;
            sub_1DF3739AC((uint64_t)v139 + 56, *((char **)v139 + 8));
            v142 = v202.__r_.__value_.__l.__size_;
            *(v140 - 1) = v202.__r_.__value_.__r.__words[0];
            *v140 = v142;
            v143 = v202.__r_.__value_.__r.__words[2];
            v140[1] = v202.__r_.__value_.__r.__words[2];
            if (v143)
            {
              *(_QWORD *)(v142 + 16) = v140;
              v202.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202.__r_.__value_.__l.__size_;
              *(_OWORD *)&v202.__r_.__value_.__r.__words[1] = 0uLL;
              v142 = 0;
            }
            else
            {
              *v141 = v140;
            }
            a5 = v187;
            v7 = __sa;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              v142 = v202.__r_.__value_.__l.__size_;
            }
            sub_1DF3739AC((uint64_t)&v202, (char *)v142);
            goto LABEL_2;
          }
        }
        memcpy(v108, v7, v107);
        goto LABEL_244;
      }
    }
    memcpy(v101, v7, v100);
    goto LABEL_226;
  }
LABEL_2:
  __s = (char *)v7;
  if (a3)
    v10 = a3;
  else
    v10 = (const char **)&off_1F04755A0;
  v11 = *((_QWORD *)this + 148);
  v12 = *((_QWORD *)this + 147);
  while (v11 != v12)
  {
    if (*(char *)(v11 - 17) < 0)
      operator delete(*(void **)(v11 - 40));
    v11 -= 72;
  }
  *((_QWORD *)this + 148) = v12;
  sub_1DF382D34((uint64_t)this + 336);
  *((_QWORD *)this + 37) = *((_QWORD *)this + 38);
  flatbuffers::Parser::StartParseFile(this, a2, __s, (uint64_t)a6);
  a6[1] = 1;
  if (*a6)
    return;
  v13 = (flatbuffers **)((char *)this + 32);
  v188 = (uint64_t **)((char *)this + 632);
  v189 = (std::string *)((char *)this + 584);
  v190 = (unint64_t *)((char *)this + 680);
  do
  {
    while (1)
    {
      v14 = *((unsigned __int8 *)this + 747);
      if (!*((_BYTE *)this + 747))
      {
        v26 = *((_DWORD *)this + 5);
        if (v26 != 260)
          goto LABEL_238;
        v16 = *((unsigned __int8 *)this + 55);
        v17 = *((_QWORD *)this + 5);
        v18 = v16 & 0x7F;
        goto LABEL_50;
      }
      v15 = *((char *)this + 55);
      v16 = *((unsigned __int8 *)this + 55);
      v17 = *((_QWORD *)this + 5);
      v18 = v16 & 0x7F;
      if (v15 >= 0)
        v19 = *((_BYTE *)this + 55) & 0x7F;
      else
        v19 = *((_QWORD *)this + 5);
      if (v19 == 7)
      {
        if (v15 < 0)
        {
          v28 = *v13;
          v27 = *((_QWORD *)this + 5);
        }
        else
        {
          v27 = *((unsigned __int8 *)this + 55);
          v28 = (flatbuffers::Parser *)((char *)this + 32);
        }
        if (v27 >= 7)
          v29 = 7;
        else
          v29 = v27;
        if (!memcmp(v28, "package", v29) && v27 == 7)
          goto LABEL_48;
      }
      else if (v19 == 6)
      {
        v20 = *((unsigned __int8 *)this + 55);
        v21 = (flatbuffers::Parser *)((char *)this + 32);
        if (v15 < 0)
        {
          v21 = *v13;
          v20 = *((_QWORD *)this + 5);
        }
        v22 = v20 >= 6 ? 6 : v20;
        v23 = !memcmp(v21, "option", v22) && v20 == 6;
        if (v23
          || (v15 < 0
            ? (flatbuffers *)(v25 = *v13, v24 = v17)
            : (v24 = v16, v25 = (flatbuffers::Parser *)((char *)this + 32)),
              v24 >= 6 ? (v31 = 6) : (v31 = v24),
              !memcmp(v25, "syntax", v31) && v24 == 6))
        {
LABEL_48:
          v32 = a6;
          flatbuffers::Parser::ParseProtoDecl(this, a6);
          a6[1] = 1;
          goto LABEL_157;
        }
      }
      v26 = *((_DWORD *)this + 5);
      if (v26 != 260)
      {
LABEL_238:
        if (v26 != 256)
          goto LABEL_294;
        goto LABEL_229;
      }
LABEL_50:
      if ((v16 & 0x80u) == 0)
        v33 = v18;
      else
        v33 = v17;
      if (v33 == 7)
      {
        v40 = (flatbuffers::Parser *)((char *)this + 32);
        if ((char)v16 < 0)
        {
          v40 = *v13;
          v16 = v17;
        }
        if (v16 >= 7)
          v41 = 7;
        else
          v41 = v16;
        if (memcmp(v40, "include", v41) || v16 != 7)
        {
          v26 = 260;
          goto LABEL_294;
        }
        goto LABEL_85;
      }
      if (v33 != 14)
        break;
      v34 = (flatbuffers::Parser *)((char *)this + 32);
      if ((char)v16 < 0)
      {
        v34 = *v13;
        v16 = v17;
      }
      if (v16 >= 0xE)
        v35 = 14;
      else
        v35 = v16;
      v36 = memcmp(v34, "native_include", v35);
      v26 = 260;
      if (v36 || v16 != 14)
        goto LABEL_294;
      flatbuffers::Parser::Next(this, (uint64_t)a6);
      a6[1] = 1;
      if (*a6)
        return;
      v37 = *((_QWORD *)this + 86);
      v38 = *((_QWORD *)this + 87);
      if (v37 >= v38)
      {
        v63 = *v190;
        v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v190) >> 3);
        v65 = v64 + 1;
        if (v64 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_452;
        v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - v63) >> 3);
        if (2 * v66 > v65)
          v65 = 2 * v66;
        v67 = v66 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v65;
        v204 = (char *)this + 696;
        if (v67)
        {
          if (v67 > 0xAAAAAAAAAAAAAAALL)
            sub_1DF3667C0();
          v68 = (char *)operator new(24 * v67);
        }
        else
        {
          v68 = 0;
        }
        v70 = &v68[24 * v64];
        if (*((char *)this + 55) < 0)
        {
          sub_1DF36DA38(v70, *((void **)this + 4), *((_QWORD *)this + 5));
          v37 = *((_QWORD *)this + 86);
          v63 = *((_QWORD *)this + 85);
        }
        else
        {
          *(_OWORD *)v70 = *(_OWORD *)v13;
          *((_QWORD *)v70 + 2) = *((_QWORD *)this + 6);
        }
        if (v37 == v63)
        {
          v73 = vdupq_n_s64(v63);
          v71 = v70;
        }
        else
        {
          v71 = v70;
          do
          {
            v72 = *(_OWORD *)(v37 - 24);
            *((_QWORD *)v71 - 1) = *(_QWORD *)(v37 - 8);
            *(_OWORD *)(v71 - 24) = v72;
            v71 -= 24;
            *(_QWORD *)(v37 - 16) = 0;
            *(_QWORD *)(v37 - 8) = 0;
            *(_QWORD *)(v37 - 24) = 0;
            v37 -= 24;
          }
          while (v37 != v63);
          v73 = *(int64x2_t *)v190;
        }
        v69 = v70 + 24;
        *((_QWORD *)this + 85) = v71;
        *((_QWORD *)this + 86) = v70 + 24;
        *(int64x2_t *)&v202.__r_.__value_.__r.__words[1] = v73;
        v74 = *((_QWORD *)this + 87);
        *((_QWORD *)this + 87) = &v68[24 * v67];
        v203 = v74;
        v202.__r_.__value_.__r.__words[0] = v73.i64[0];
        sub_1DF370790((uint64_t)&v202);
      }
      else
      {
        if (*((char *)this + 55) < 0)
        {
          sub_1DF36DA38(*((_BYTE **)this + 86), *((void **)this + 4), *((_QWORD *)this + 5));
        }
        else
        {
          v39 = *(_OWORD *)v13;
          *(_QWORD *)(v37 + 16) = *((_QWORD *)this + 6);
          *(_OWORD *)v37 = v39;
        }
        v69 = (char *)(v37 + 24);
      }
      *((_QWORD *)this + 86) = v69;
      flatbuffers::Parser::Expect(this, 257, (uint64_t)a6);
      a6[1] = 1;
      if (*a6)
        return;
      v32 = a6;
      flatbuffers::Parser::Expect(this, 59, (uint64_t)a6);
      a6[1] = 1;
LABEL_157:
      if (*v32)
        return;
    }
    v26 = 260;
    if (!v14 || v33 != 6)
      goto LABEL_296;
    v43 = (flatbuffers::Parser *)((char *)this + 32);
    if ((char)v16 < 0)
    {
      v43 = *v13;
      v16 = v17;
    }
    v44 = v16 >= 6 ? 6 : v16;
    v45 = memcmp(v43, "import", v44);
    v26 = 260;
    if (v45 || v16 != 6)
    {
LABEL_296:
      while (1)
      {
LABEL_294:
        if (*((_BYTE *)this + 747))
        {
          v144 = a6;
          flatbuffers::Parser::ParseProtoDecl(this, a6);
          goto LABEL_407;
        }
        if (v26 == 123)
          break;
        if (v26 == 260)
        {
          v145 = *((unsigned __int8 *)this + 55);
          v146 = *((_QWORD *)this + 5);
          if ((v145 & 0x80u) == 0)
            v147 = v145 & 0x7F;
          else
            v147 = *((_QWORD *)this + 5);
          switch(v147)
          {
            case 4uLL:
              v148 = (flatbuffers::Parser *)((char *)this + 32);
              if ((v145 & 0x80) != 0)
              {
                v148 = *v13;
                v145 = *((_QWORD *)this + 5);
              }
              if (v145 >= 4)
                v149 = 4;
              else
                v149 = v145;
              if (memcmp(v148, "enum", v149) || v145 != 4)
                goto LABEL_406;
              v144 = a6;
              v150 = a6;
              v151 = this;
              v152 = 0;
              goto LABEL_334;
            case 5uLL:
              v154 = (flatbuffers::Parser *)((char *)this + 32);
              if ((v145 & 0x80) != 0)
              {
                v154 = *v13;
                v145 = *((_QWORD *)this + 5);
              }
              if (v145 >= 5)
                v155 = 5;
              else
                v155 = v145;
              if (memcmp(v154, "union", v155) || v145 != 5)
                goto LABEL_406;
              v144 = a6;
              v150 = a6;
              v151 = this;
              v152 = 1;
LABEL_334:
              flatbuffers::Parser::ParseEnum(v151, 0, v152, v150);
              goto LABEL_407;
            case 7uLL:
              v156 = (flatbuffers::Parser *)((char *)this + 32);
              if ((v145 & 0x80) != 0)
              {
                v156 = *v13;
                v145 = *((_QWORD *)this + 5);
              }
              if (v145 >= 7)
                v157 = 7;
              else
                v157 = v145;
              if (memcmp(v156, "include", v157) || v145 != 7)
                goto LABEL_406;
              v202.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
              *(_OWORD *)&v202.__r_.__value_.__r.__words[1] = xmmword_1DF385B00;
              strcpy(v202.__r_.__value_.__l.__data_, "includes must come before declarations");
              goto LABEL_449;
            case 9uLL:
              v158 = *((unsigned __int8 *)this + 55);
              v159 = (flatbuffers::Parser *)((char *)this + 32);
              if ((v145 & 0x80) != 0)
              {
                v159 = *v13;
                v158 = *((_QWORD *)this + 5);
              }
              if (v158 >= 9)
                v160 = 9;
              else
                v160 = v158;
              if (!memcmp(v159, "namespace", v160) && v158 == 9)
              {
                v144 = a6;
                flatbuffers::Parser::ParseNamespace(this, (uint64_t)a6);
                goto LABEL_407;
              }
              v170 = v145;
              v171 = (flatbuffers::Parser *)((char *)this + 32);
              if ((v145 & 0x80) != 0)
              {
                v171 = *v13;
                v170 = v146;
              }
              if (v170 >= 9)
                v172 = 9;
              else
                v172 = v170;
              if (!memcmp(v171, "root_type", v172) && v170 == 9)
              {
                flatbuffers::Parser::Next(this, (uint64_t)a6);
                a6[1] = 1;
                if (*a6)
                  return;
                if (*((char *)this + 55) < 0)
                {
                  sub_1DF36DA38(&v202, *((void **)this + 4), *((_QWORD *)this + 5));
                }
                else
                {
                  *(_OWORD *)&v202.__r_.__value_.__l.__data_ = *(_OWORD *)v13;
                  v202.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
                }
                flatbuffers::Parser::Expect(this, 260, (uint64_t)a6);
                v178 = 1;
                a6[1] = 1;
                if (!*a6)
                {
                  flatbuffers::Parser::ParseNamespacing(this, &v202, 0, a6);
                  a6[1] = 1;
                  if (!*a6)
                  {
                    if (*((char *)this + 983) < 0)
                      v180 = *((_QWORD *)this + 121);
                    else
                      v180 = *((unsigned __int8 *)this + 983);
                    if (v180)
                    {
LABEL_436:
                      flatbuffers::Parser::Expect(this, 59, (uint64_t)a6);
                      a6[1] = 1;
                      v178 = *a6 != 0;
                    }
                    else
                    {
                      if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v181 = &v202;
                      else
                        v181 = (std::string *)v202.__r_.__value_.__r.__words[0];
                      if (flatbuffers::Parser::SetRootType(this, (const char *)v181))
                      {
                        if (!*(_BYTE *)(*((_QWORD *)this + 72) + 200))
                          goto LABEL_436;
                        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
                        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1DF385D00;
                        strcpy(__p.__r_.__value_.__l.__data_, "root type must be a table");
                      }
                      else
                      {
                        std::operator+<char>();
                      }
                      flatbuffers::Parser::Error((uint64_t)this, a6);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                    }
                  }
                }
                if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v202.__r_.__value_.__l.__data_);
                if (v178)
                  return;
                goto LABEL_408;
              }
              v176 = (flatbuffers::Parser *)((char *)this + 32);
              if ((v145 & 0x80) != 0)
              {
                v176 = *v13;
                v145 = v146;
              }
              if (v145 >= 9)
                v177 = 9;
              else
                v177 = v145;
              if (memcmp(v176, "attribute", v177) || v145 != 9)
                goto LABEL_406;
              flatbuffers::Parser::Next(this, (uint64_t)a6);
              a6[1] = 1;
              if (*a6)
                return;
              if (*((char *)this + 55) < 0)
              {
                sub_1DF36DA38(&v202, *((void **)this + 4), *((_QWORD *)this + 5));
              }
              else
              {
                *(_OWORD *)&v202.__r_.__value_.__l.__data_ = *(_OWORD *)v13;
                v202.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
              }
              if (*((_DWORD *)this + 5) == 260)
                flatbuffers::Parser::Next(this, (uint64_t)a6);
              else
                flatbuffers::Parser::Expect(this, 257, (uint64_t)a6);
              a6[1] = 1;
              if (*a6 || (flatbuffers::Parser::Expect(this, 59, (uint64_t)a6), a6[1] = 1, *a6))
              {
                v179 = 0;
              }
              else
              {
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
                *((_BYTE *)sub_1DF38411C((uint64_t)this + 704, (const void **)&v202.__r_.__value_.__l.__data_, (uint64_t *)&__p)+ 56) = 0;
                v179 = 1;
              }
              if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v202.__r_.__value_.__l.__data_);
              if ((v179 & 1) == 0)
                return;
              goto LABEL_408;
            case 0xBuLL:
              v161 = (flatbuffers::Parser *)((char *)this + 32);
              if ((v145 & 0x80) != 0)
              {
                v161 = *v13;
                v145 = *((_QWORD *)this + 5);
              }
              if (v145 >= 0xB)
                v162 = 11;
              else
                v162 = v145;
              if (memcmp(v161, "rpc_service", v162) || v145 != 11)
                goto LABEL_406;
              v144 = a6;
              flatbuffers::Parser::ParseService(this, a6);
              goto LABEL_407;
            case 0xEuLL:
              v163 = (flatbuffers::Parser *)((char *)this + 32);
              if ((v145 & 0x80) != 0)
              {
                v163 = *v13;
                v145 = *((_QWORD *)this + 5);
              }
              if (v145 >= 0xE)
                v164 = 14;
              else
                v164 = v145;
              if (memcmp(v163, "file_extension", v164) || v145 != 14)
                goto LABEL_406;
              flatbuffers::Parser::Next(this, (uint64_t)a6);
              a6[1] = 1;
              if (*a6)
                return;
              std::string::operator=((std::string *)((char *)this + 608), (const std::string *)((char *)this + 32));
              flatbuffers::Parser::Expect(this, 257, (uint64_t)a6);
              a6[1] = 1;
              if (*a6)
                return;
              goto LABEL_412;
            case 0xFuLL:
              v165 = (flatbuffers::Parser *)((char *)this + 32);
              if ((v145 & 0x80) != 0)
              {
                v165 = *v13;
                v145 = *((_QWORD *)this + 5);
              }
              if (v145 >= 0xF)
                v166 = 15;
              else
                v166 = v145;
              if (memcmp(v165, "file_identifier", v166) || v145 != 15)
                goto LABEL_406;
              flatbuffers::Parser::Next(this, (uint64_t)a6);
              a6[1] = 1;
              if (*a6)
                return;
              std::string::operator=(v189, (const std::string *)((char *)this + 32));
              flatbuffers::Parser::Expect(this, 257, (uint64_t)a6);
              a6[1] = 1;
              if (*a6)
                return;
              if (*((char *)this + 607) < 0)
                v167 = *((_QWORD *)this + 74);
              else
                v167 = *((unsigned __int8 *)this + 607);
              if (v167 != 4)
              {
                sub_1DF382DA0();
                v183 = std::string::insert(&v200, 0, "file_identifier must be exactly ");
                v184 = v183->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v184;
                v183->__r_.__value_.__l.__size_ = 0;
                v183->__r_.__value_.__r.__words[2] = 0;
                v183->__r_.__value_.__r.__words[0] = 0;
                v185 = std::string::append(&__p, " characters");
                v186 = v185->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v202.__r_.__value_.__l.__data_ = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
                v202.__r_.__value_.__r.__words[2] = v186;
                v185->__r_.__value_.__l.__size_ = 0;
                v185->__r_.__value_.__r.__words[2] = 0;
                v185->__r_.__value_.__r.__words[0] = 0;
                flatbuffers::Parser::Error((uint64_t)this, a6);
                if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v202.__r_.__value_.__l.__data_);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v200.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  return;
                v182 = (void *)v200.__r_.__value_.__r.__words[0];
LABEL_451:
                operator delete(v182);
                return;
              }
LABEL_412:
              v144 = a6;
              v173 = (uint64_t)a6;
              v174 = this;
              v175 = 59;
              break;
            default:
              goto LABEL_406;
          }
LABEL_395:
          flatbuffers::Parser::Expect(v174, v175, v173);
          goto LABEL_407;
        }
LABEL_406:
        v144 = a6;
        flatbuffers::Parser::ParseDecl(this, (uint64_t)a6);
LABEL_407:
        v144[1] = 1;
        if (*v144)
          return;
LABEL_408:
        v26 = *((_DWORD *)this + 5);
        if (v26 == 256)
          goto LABEL_229;
      }
      if (!*((_QWORD *)this + 72))
      {
        v202.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
        *(_OWORD *)&v202.__r_.__value_.__r.__words[1] = xmmword_1DF385CE0;
        strcpy(v202.__r_.__value_.__l.__data_, "no root type set to parse json with");
LABEL_449:
        flatbuffers::Parser::Error((uint64_t)this, a6);
        if ((SHIBYTE(v202.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        v182 = (void *)v202.__r_.__value_.__r.__words[0];
        goto LABEL_451;
      }
      if (*((_DWORD *)this + 92) - *((_DWORD *)this + 96) + *((_DWORD *)this + 94))
      {
        v202.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
        *(_OWORD *)&v202.__r_.__value_.__r.__words[1] = xmmword_1DF385CF0;
        strcpy(v202.__r_.__value_.__l.__data_, "cannot have more than one json object in a file");
        goto LABEL_449;
      }
      LODWORD(v202.__r_.__value_.__l.__data_) = 0;
      flatbuffers::Parser::ParseTable(this);
      a6[1] = 1;
      if (*a6)
        return;
      if (*((_BYTE *)this + 955))
      {
        if ((*((_BYTE *)this + 607) & 0x80) != 0)
        {
          if (*((_QWORD *)this + 74))
            v153 = (_DWORD *)v189->__r_.__value_.__r.__words[0];
          else
            v153 = 0;
        }
        else if (*((_BYTE *)this + 607))
        {
          v153 = (_DWORD *)((char *)this + 584);
        }
        else
        {
          v153 = 0;
        }
        v168 = (char *)this + 336;
        v169 = 1;
      }
      else
      {
        if ((*((_BYTE *)this + 607) & 0x80) != 0)
        {
          if (*((_QWORD *)this + 74))
            v153 = (_DWORD *)v189->__r_.__value_.__r.__words[0];
          else
            v153 = 0;
        }
        else if (*((_BYTE *)this + 607))
        {
          v153 = (_DWORD *)((char *)this + 584);
        }
        else
        {
          v153 = 0;
        }
        v168 = (char *)this + 336;
        v169 = 0;
      }
      sub_1DF370340((uint64_t)v168, (int)v202.__r_.__value_.__l.__data_, v153, v169);
      v144 = a6;
      v173 = (uint64_t)a6;
      v174 = this;
      v175 = 256;
      goto LABEL_395;
    }
LABEL_85:
    flatbuffers::Parser::Next(this, (uint64_t)a6);
    a6[1] = 1;
    if (*a6)
      return;
    v46 = *((unsigned __int8 *)this + 55);
    v47 = *((_BYTE *)this + 55);
    if (*((_BYTE *)this + 747))
    {
      v48 = v46 & 0x7F;
      if ((v46 & 0x80u) != 0)
        v48 = *((_QWORD *)this + 5);
      if (v48 == 6)
      {
        v49 = (flatbuffers::Parser *)((char *)this + 32);
        if ((char)v46 < 0)
        {
          v49 = *v13;
          v46 = *((_QWORD *)this + 5);
        }
        v50 = v46 >= 6 ? 6 : v46;
        if (!memcmp(v49, "public", v50) && v46 == 6)
        {
          flatbuffers::Parser::Next(this, (uint64_t)a6);
          a6[1] = 1;
          if (*a6)
            return;
          v47 = *((_BYTE *)this + 55);
        }
      }
    }
    v51 = (flatbuffers::Parser *)((char *)this + 32);
    if (v47 < 0)
      v51 = *v13;
    flatbuffers::PosixPath(v51, (uint64_t)&v202);
    flatbuffers::Parser::Expect(this, 257, (uint64_t)a6);
    v52 = 1;
    a6[1] = 1;
    if (*a6)
      goto LABEL_130;
    memset(&__p, 0, sizeof(__p));
    v53 = *v10;
    if (!*v10)
      goto LABEL_124;
    v54 = 1;
    do
    {
      v55 = strlen(v53);
      if (v55 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_452;
      v56 = v55;
      if (v55 >= 0x17)
      {
        v58 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v55 | 7) != 0x17)
          v58 = v55 | 7;
        v59 = v58 + 1;
        p_dst = (std::string **)operator new(v58 + 1);
        v198 = v56;
        v199 = v59 | 0x8000000000000000;
        __dst = (std::string *)p_dst;
LABEL_111:
        memmove(p_dst, v53, v56);
        goto LABEL_112;
      }
      HIBYTE(v199) = v55;
      p_dst = &__dst;
      if (v55)
        goto LABEL_111;
LABEL_112:
      *((_BYTE *)p_dst + v56) = 0;
      flatbuffers::ConCatPathFileName((uint64_t)&__dst, (uint64_t)&v202, (uint64_t)&v200);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v200;
      *((_BYTE *)&v200.__r_.__value_.__s + 23) = 0;
      v200.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v199) < 0)
        operator delete(__dst);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = (flatbuffers *)&__p;
      else
        v61 = (flatbuffers *)__p.__r_.__value_.__r.__words[0];
      if (off_1F04755C8(v61, v60))
        break;
      v53 = v10[v54++];
    }
    while (v53);
    v62 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v62 = __p.__r_.__value_.__l.__size_;
    if (!v62)
    {
LABEL_124:
      std::operator+<char>();
      flatbuffers::Parser::Error((uint64_t)this, a6);
      goto LABEL_125;
    }
    if (!__s)
      goto LABEL_170;
    v75 = strlen(__s);
    if (v75 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_452;
    v76 = v75;
    if (v75 >= 0x17)
    {
      v78 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v75 | 7) != 0x17)
        v78 = v75 | 7;
      v79 = v78 + 1;
      v77 = operator new(v78 + 1);
      v200.__r_.__value_.__l.__size_ = v76;
      v200.__r_.__value_.__r.__words[2] = v79 | 0x8000000000000000;
      v200.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
    }
    else
    {
      *((_BYTE *)&v200.__r_.__value_.__s + 23) = v75;
      v77 = &v200;
      if (!v75)
        goto LABEL_168;
    }
    memcpy(v77, __s, v76);
LABEL_168:
    *((_BYTE *)v77 + v76) = 0;
    __dst = &v200;
    v80 = sub_1DF3738EC((uint64_t)this + 656, (const void **)&v200.__r_.__value_.__l.__data_, (_OWORD **)&__dst);
    sub_1DF384024((uint64_t)v80 + 56, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v200.__r_.__value_.__l.__data_);
LABEL_170:
    if ((flatbuffers::Parser *)((char *)this + 640) != (flatbuffers::Parser *)sub_1DF383318((uint64_t)v188, &__p))
    {
      flatbuffers::Parser::Expect(this, 59, (uint64_t)a6);
      a6[1] = 1;
      v52 = *a6;
      goto LABEL_128;
    }
    memset(&v200, 0, sizeof(v200));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v81 = &__p;
    else
      v81 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (!off_1F04755C0((const char *)v81, 1, (uint64_t)&v200))
    {
      std::operator+<char>();
      flatbuffers::Parser::Error((uint64_t)this, a6);
      if (SHIBYTE(v199) < 0)
        operator delete(__dst);
      goto LABEL_125;
    }
    if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v82 = &v200;
    else
      v82 = (std::string *)v200.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v83 = &__p;
    else
      v83 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v84 = &v202;
    else
      v84 = (std::string *)v202.__r_.__value_.__r.__words[0];
    flatbuffers::Parser::DoParse(this, (const char *)v82, v10, (const char *)v83, (const char *)v84);
    a6[1] = 1;
    if (!*a6)
    {
      if (!*((_BYTE *)this + 749))
      {
        v85 = (uint64_t *)*((_QWORD *)this + 25);
        v86 = (uint64_t *)*((_QWORD *)this + 26);
        while (v85 != v86)
        {
          v87 = *v85++;
          *(_BYTE *)(v87 + 120) = 1;
        }
        v88 = *((_QWORD *)this + 19);
        v89 = *((_QWORD *)this + 20);
        while (v88 != v89)
        {
          if (!*(_BYTE *)(*(_QWORD *)v88 + 201))
            *(_BYTE *)(*(_QWORD *)v88 + 120) = 1;
          v88 += 8;
        }
        v90 = (uint64_t *)*((_QWORD *)this + 31);
        for (i = (uint64_t *)*((_QWORD *)this + 32); v90 != i; *(_BYTE *)(v92 + 120) = 1)
          v92 = *v90++;
      }
      *((_QWORD *)this + 72) = 0;
      if (*((char *)this + 607) < 0)
      {
        **((_BYTE **)this + 73) = 0;
        *((_QWORD *)this + 74) = 0;
      }
      else
      {
        *((_BYTE *)this + 584) = 0;
        *((_BYTE *)this + 607) = 0;
      }
      if (*((char *)this + 631) < 0)
      {
        **((_BYTE **)this + 76) = 0;
        *((_QWORD *)this + 77) = 0;
      }
      else
      {
        *((_BYTE *)this + 608) = 0;
        *((_BYTE *)this + 631) = 0;
      }
      v93 = __s;
      if (!__s)
      {
LABEL_206:
        flatbuffers::Parser::DoParse(this, a2, v10, v93, a5);
        goto LABEL_125;
      }
      v94 = strlen(__s);
      if (v94 <= 0x7FFFFFFFFFFFFFF7)
      {
        v95 = v94;
        if (v94 >= 0x17)
        {
          v97 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v94 | 7) != 0x17)
            v97 = v94 | 7;
          v98 = v97 + 1;
          v96 = (std::string **)operator new(v97 + 1);
          v198 = v95;
          v199 = v98 | 0x8000000000000000;
          __dst = (std::string *)v96;
        }
        else
        {
          HIBYTE(v199) = v94;
          v96 = &__dst;
          if (!v94)
            goto LABEL_215;
        }
        memcpy(v96, __s, v95);
LABEL_215:
        *((_BYTE *)v96 + v95) = 0;
        sub_1DF3840C8(v188, &__dst);
        if (SHIBYTE(v199) < 0)
          operator delete(__dst);
        v93 = __s;
        goto LABEL_206;
      }
LABEL_452:
      abort();
    }
LABEL_125:
    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v200.__r_.__value_.__l.__data_);
    v52 = 1;
LABEL_128:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_130:
    if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v202.__r_.__value_.__l.__data_);
  }
  while (!v52);
}

void flatbuffers::Parser::GetIncludedFilesRecursive(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  void *__p[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void **v21;

  a3[1] = 0;
  v4 = a3 + 1;
  a3[2] = 0;
  *a3 = a3 + 1;
  v18 = (uint64_t)&v18;
  v19 = &v18;
  v20 = 0;
  v5 = *(_BYTE *)(a2 + 23);
  v6 = v5;
  v7 = v5 & 0x7F;
  if (v6 < 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
    sub_1DF35F264(&v18, a2);
    if (v20)
    {
      v9 = a1 + 656;
      do
      {
        if (*((char *)v19 + 39) < 0)
        {
          sub_1DF36DA38(__p, (void *)v19[2], v19[3]);
        }
        else
        {
          *(_OWORD *)__p = *((_OWORD *)v19 + 1);
          v17 = v19[4];
        }
        sub_1DF35F2E0((uint64_t)&v18);
        sub_1DF384024((uint64_t)a3, (const void **)__p, (uint64_t)__p);
        v21 = __p;
        v10 = sub_1DF373B28(v9, (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
        v11 = (uint64_t *)v10[7];
        v12 = v10 + 8;
        if (v11 != v10 + 8)
        {
          do
          {
            if (v4 == (_QWORD *)sub_1DF373C5C((uint64_t)a3, (uint64_t)(v11 + 4)))
              sub_1DF35F264(&v18, (uint64_t)(v11 + 4));
            v13 = (uint64_t *)v11[1];
            if (v13)
            {
              do
              {
                v14 = v13;
                v13 = (uint64_t *)*v13;
              }
              while (v13);
            }
            else
            {
              do
              {
                v14 = (uint64_t *)v11[2];
                v15 = *v14 == (_QWORD)v11;
                v11 = v14;
              }
              while (!v15);
            }
            v11 = v14;
          }
          while (v14 != v12);
        }
        if (SHIBYTE(v17) < 0)
          operator delete(__p[0]);
      }
      while (v20);
    }
  }
  sub_1DF36ACE8((char *)&v18);
}

_BYTE *sub_1DF35F264(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *result;
  uint64_t v6;

  v4 = operator new(0x28uLL);
  result = v4 + 2;
  *v4 = 0;
  v4[1] = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_1DF36DA38(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    v4[4] = *(_QWORD *)(a2 + 16);
  }
  v6 = *a1;
  *v4 = *a1;
  v4[1] = a1;
  *(_QWORD *)(v6 + 8) = v4;
  *a1 = (uint64_t)v4;
  ++a1[2];
  return result;
}

void sub_1DF35F2E0(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;

  v2 = *(char **)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)v2;
  *(_QWORD *)(v3 + 8) = *((_QWORD *)v2 + 1);
  **((_QWORD **)v2 + 1) = v3;
  *(_QWORD *)(a1 + 16) = v1 - 1;
  if (v2[39] < 0)
    operator delete(*((void **)v2 + 2));
  operator delete(v2);
}

void flatbuffers::Parser::Serialize(flatbuffers::Parser *this)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  _DWORD *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  int v48;
  char *v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  int v57;
  int v58;
  _DWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  int v64;
  char *v65;
  _DWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int64_t v126;
  uint64_t v127;
  _DWORD *v128;
  uint64_t v129;
  char v130;
  int v131;
  char *v132;
  size_t v133;
  size_t v134;
  char v135;
  int v136;
  char *v137;
  size_t v138;
  size_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  char *v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  char *v218;
  int v219;
  uint64_t (*v220)();
  uint64_t (*v221)();

  v220 = (uint64_t (*)())((char *)this + 336);
  sub_1DF382D34((uint64_t)this + 336);
  v3 = (_BYTE *)*((_QWORD *)this + 19);
  v2 = (_BYTE *)*((_QWORD *)this + 20);
  v4 = v2 - v3;
  if (v2 == v3)
  {
    v6 = 0;
    v5 = 0;
  }
  else
  {
    if (v4 < 0)
      goto LABEL_328;
    v5 = (char *)operator new(v2 - v3);
    memcpy(v5, v3, v4);
    v6 = &v5[8 * (v4 >> 3)];
  }
  v7 = (v6 - v5) >> 3;
  v8 = 126 - 2 * __clz(v7);
  v9 = v6 - v5;
  v221 = flatbuffers::compareName<flatbuffers::StructDef>;
  if (v6 == v5)
    v10 = 0;
  else
    v10 = v8;
  sub_1DF373E5C((uint64_t)v5, v6, (uint64_t (**)(_QWORD))&v221, v10, 1);
  if ((int)v7 < 1)
  {
    if (!v5)
      goto LABEL_14;
  }
  else
  {
    v11 = 0;
    do
    {
      *(_DWORD *)(*(_QWORD *)&v5[8 * v11] + 140) = v11;
      ++v11;
    }
    while ((v9 >> 3) != v11);
  }
  operator delete(v5);
LABEL_14:
  v13 = (_BYTE *)*((_QWORD *)this + 25);
  v12 = (_BYTE *)*((_QWORD *)this + 26);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if ((v14 & 0x8000000000000000) == 0)
    {
      v15 = (char *)operator new(v12 - v13);
      memcpy(v15, v13, v14);
      v16 = &v15[8 * (v14 >> 3)];
      goto LABEL_18;
    }
LABEL_328:
    abort();
  }
  v16 = 0;
  v15 = 0;
LABEL_18:
  v17 = (v16 - v15) >> 3;
  v18 = 126 - 2 * __clz(v17);
  v19 = v16 - v15;
  v221 = flatbuffers::compareName<flatbuffers::EnumDef>;
  if (v16 == v15)
    v20 = 0;
  else
    v20 = v18;
  sub_1DF37482C((uint64_t)v15, v16, (uint64_t (**)(_QWORD))&v221, v20, 1);
  if ((int)v17 < 1)
  {
    if (!v15)
      goto LABEL_27;
  }
  else
  {
    v21 = 0;
    do
    {
      *(_DWORD *)(*(_QWORD *)&v15[8 * v21] + 140) = v21;
      ++v21;
    }
    while ((v19 >> 3) != v21);
  }
  operator delete(v15);
LABEL_27:
  v22 = (uint64_t *)*((_QWORD *)this + 19);
  if (v22 == *((uint64_t **)this + 20))
  {
    v23 = 0;
    v29 = 0;
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    do
    {
      v27 = flatbuffers::StructDef::Serialize(*v22, (uint64_t)v220, (uint64_t)this);
      v28 = v27;
      if (v24 >= v25)
      {
        v30 = (v24 - v26) >> 2;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62)
          goto LABEL_328;
        if ((v25 - v26) >> 1 > v31)
          v31 = (v25 - v26) >> 1;
        if ((unint64_t)(v25 - v26) >= 0x7FFFFFFFFFFFFFFCLL)
          v32 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        if (v32)
        {
          if (v32 >> 62)
LABEL_329:
            sub_1DF3667C0();
          v33 = (char *)operator new(4 * v32);
        }
        else
        {
          v33 = 0;
        }
        v23 = &v33[4 * v30];
        *(_DWORD *)v23 = v28;
        v29 = v23 + 4;
        while (v24 != v26)
        {
          v34 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v23 - 1) = v34;
          v23 -= 4;
        }
        v25 = &v33[4 * v32];
        if (v26)
          operator delete(v26);
        v26 = v23;
      }
      else
      {
        *(_DWORD *)v24 = v27;
        v29 = v24 + 4;
      }
      v35 = *v22++;
      *(_DWORD *)(v35 + 136) = v28;
      v24 = v29;
    }
    while (v22 != *((uint64_t **)this + 20));
  }
  v36 = (uint64_t *)*((_QWORD *)this + 25);
  if (v36 == *((uint64_t **)this + 26))
  {
    v37 = 0;
    v43 = 0;
  }
  else
  {
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    do
    {
      v41 = flatbuffers::EnumDef::Serialize(*v36, (uint64_t)v220, (uint64_t)this);
      v42 = v41;
      if (v38 >= v39)
      {
        v44 = (v38 - v40) >> 2;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 62)
          goto LABEL_328;
        if ((v39 - v40) >> 1 > v45)
          v45 = (v39 - v40) >> 1;
        if ((unint64_t)(v39 - v40) >= 0x7FFFFFFFFFFFFFFCLL)
          v46 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          if (v46 >> 62)
            goto LABEL_329;
          v47 = (char *)operator new(4 * v46);
        }
        else
        {
          v47 = 0;
        }
        v37 = &v47[4 * v44];
        *(_DWORD *)v37 = v42;
        v43 = v37 + 4;
        while (v38 != v40)
        {
          v48 = *((_DWORD *)v38 - 1);
          v38 -= 4;
          *((_DWORD *)v37 - 1) = v48;
          v37 -= 4;
        }
        v39 = &v47[4 * v46];
        if (v40)
        {
          v49 = v40;
          v50 = v43;
          operator delete(v49);
          v43 = v50;
        }
        v40 = v37;
      }
      else
      {
        *(_DWORD *)v38 = v41;
        v43 = v38 + 4;
      }
      v51 = *v36++;
      *(_DWORD *)(v51 + 136) = v42;
      v38 = (char *)v43;
    }
    while (v36 != *((uint64_t **)this + 26));
  }
  v214 = (char *)v43;
  v52 = (uint64_t *)*((_QWORD *)this + 31);
  if (v52 == *((uint64_t **)this + 32))
  {
    v53 = 0;
    v59 = 0;
  }
  else
  {
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    do
    {
      v57 = flatbuffers::ServiceDef::Serialize(*v52, (uint64_t)v220, (uint64_t)this);
      v58 = v57;
      if (v54 >= v55)
      {
        v60 = (v54 - v56) >> 2;
        v61 = v60 + 1;
        if ((unint64_t)(v60 + 1) >> 62)
          goto LABEL_328;
        if ((v55 - v56) >> 1 > v61)
          v61 = (v55 - v56) >> 1;
        if ((unint64_t)(v55 - v56) >= 0x7FFFFFFFFFFFFFFCLL)
          v62 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v62 = v61;
        if (v62)
        {
          if (v62 >> 62)
            goto LABEL_329;
          v63 = (char *)operator new(4 * v62);
        }
        else
        {
          v63 = 0;
        }
        v53 = &v63[4 * v60];
        *(_DWORD *)v53 = v58;
        v59 = v53 + 4;
        while (v54 != v56)
        {
          v64 = *((_DWORD *)v54 - 1);
          v54 -= 4;
          *((_DWORD *)v53 - 1) = v64;
          v53 -= 4;
        }
        v55 = &v63[4 * v62];
        if (v56)
        {
          v65 = v56;
          v66 = v59;
          operator delete(v65);
          v59 = v66;
        }
        v56 = v53;
      }
      else
      {
        *(_DWORD *)v54 = v57;
        v59 = v54 + 4;
      }
      v67 = *v52++;
      *(_DWORD *)(v67 + 136) = v58;
      v54 = (char *)v59;
    }
    while (v52 != *((uint64_t **)this + 32));
  }
  v218 = (char *)v59;
  v68 = (v29 - v23) >> 2;
  v69 = 126 - 2 * __clz(v68);
  v70 = v29 - v23;
  if (v29 == v23)
    v71 = &flatbuffers::data<flatbuffers::Offset<reflection::Object>,std::allocator<flatbuffers::Offset<reflection::Object>>>(std::vector<flatbuffers::Offset<reflection::Object>> &)::t;
  else
    v71 = v23;
  v221 = v220;
  if (v29 == v23)
    v72 = 0;
  else
    v72 = v69;
  sub_1DF36E4E0((uint64_t)v71, (_DWORD *)((char *)v71 + v70), (uint64_t)&v221, v72, 1);
  *((_BYTE *)this + 406) = 1;
  if (*((_QWORD *)this + 51) <= 3uLL)
    *((_QWORD *)this + 51) = 4;
  v73 = *((_QWORD *)this + 48);
  v74 = ((_BYTE)v73 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3;
  if (v73 - *((_QWORD *)this + 49) < v74)
  {
    sub_1DF366C90((uint64_t *)v220, ((_BYTE)v73 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3);
    *((_QWORD *)this + 48) -= v74;
  }
  else
  {
    *((_QWORD *)this + 48) = v73 - v74;
    if (!v74)
      goto LABEL_110;
  }
  v75 = 0;
  do
    *(_BYTE *)(*((_QWORD *)this + 48) + v75++) = 0;
  while (v74 != v75);
  if (*((_QWORD *)this + 51) <= 3uLL)
    *((_QWORD *)this + 51) = 4;
LABEL_110:
  v76 = *((_QWORD *)this + 48);
  v77 = ((_BYTE)v76 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3;
  if (v76 - *((_QWORD *)this + 49) < v77)
  {
    sub_1DF366C90((uint64_t *)v220, ((_BYTE)v76 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3);
    *((_QWORD *)this + 48) -= v77;
  }
  else
  {
    *((_QWORD *)this + 48) = v76 - v77;
    if (!v77)
      goto LABEL_114;
  }
  v78 = 0;
  do
    *(_BYTE *)(*((_QWORD *)this + 48) + v78++) = 0;
  while (v77 != v78);
LABEL_114:
  if (v23 != v29)
  {
    do
    {
      v79 = v71[--v68];
      if (*((_QWORD *)this + 51) <= 3uLL)
        *((_QWORD *)this + 51) = 4;
      v80 = *((_QWORD *)this + 46);
      v81 = *((_QWORD *)this + 47);
      v82 = *((_QWORD *)this + 48);
      v83 = ((int)v82 - ((int)v80 + (int)v81)) & 3;
      if (v82 - *((_QWORD *)this + 49) < v83)
      {
        sub_1DF366C90((uint64_t *)v220, ((int)v82 - ((int)v80 + (int)v81)) & 3);
        *((_QWORD *)this + 48) -= v83;
      }
      else
      {
        v84 = v82 - v83;
        *((_QWORD *)this + 48) = v84;
        if (!v83)
        {
          v85 = v80 + v81 - v84;
          goto LABEL_125;
        }
      }
      v86 = 0;
      do
        *(_BYTE *)(*((_QWORD *)this + 48) + v86++) = 0;
      while (v83 != v86);
      v81 = *((_QWORD *)this + 47);
      v84 = *((_QWORD *)this + 48);
      v80 = *((_QWORD *)this + 46);
      v85 = v80 - v84 + v81;
      if (*((_QWORD *)this + 51) <= 3uLL)
        *((_QWORD *)this + 51) = 4;
LABEL_125:
      v87 = ((_BYTE)v84 - ((_BYTE)v80 + (_BYTE)v81)) & 3;
      v88 = *((_QWORD *)this + 49);
      if (v84 - v88 < v87)
      {
        sub_1DF366C90((uint64_t *)v220, v87);
        *((_QWORD *)this + 48) -= v87;
LABEL_127:
        v90 = 0;
        do
          *(_BYTE *)(*((_QWORD *)this + 48) + v90++) = 0;
        while (v87 != v90);
        v89 = *((_QWORD *)this + 48);
        v88 = *((_QWORD *)this + 49);
        goto LABEL_130;
      }
      v89 = v84 - v87;
      *((_QWORD *)this + 48) = v84 - v87;
      if (v87)
        goto LABEL_127;
LABEL_130:
      if ((unint64_t)(v89 - v88) <= 3)
      {
        sub_1DF366C90((uint64_t *)v220, 4uLL);
        v89 = *((_QWORD *)this + 48);
      }
      *(_DWORD *)(v89 - 4) = v85 - v79 + 4;
      *((_QWORD *)this + 48) = v89 - 4;
    }
    while (v68);
  }
  *((_BYTE *)this + 406) = 0;
  if (*((_QWORD *)this + 51) <= 3uLL)
    *((_QWORD *)this + 51) = 4;
  v92 = *((_QWORD *)this + 48);
  v91 = *((_QWORD *)this + 49);
  v93 = ((_BYTE)v92 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3;
  if (v92 - v91 < v93)
  {
    sub_1DF366C90((uint64_t *)v220, ((_BYTE)v92 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3);
    *((_QWORD *)this + 48) -= v93;
  }
  else
  {
    v94 = v92 - v93;
    *((_QWORD *)this + 48) = v92 - v93;
    if (!v93)
      goto LABEL_142;
  }
  v95 = 0;
  do
    *(_BYTE *)(*((_QWORD *)this + 48) + v95++) = 0;
  while (v93 != v95);
  v94 = *((_QWORD *)this + 48);
  v91 = *((_QWORD *)this + 49);
LABEL_142:
  if ((unint64_t)(v94 - v91) <= 3)
  {
    sub_1DF366C90((uint64_t *)v220, 4uLL);
    v94 = *((_QWORD *)this + 48);
  }
  v96 = (v214 - v37) >> 2;
  v97 = 126 - 2 * __clz(v96);
  *(_DWORD *)(v94 - 4) = v70 >> 2;
  v213 = v94 - 4;
  *((_QWORD *)this + 48) = v94 - 4;
  v211 = *((_DWORD *)this + 92);
  v212 = *((_DWORD *)this + 94);
  if (v214 == v37)
    v98 = &flatbuffers::data<flatbuffers::Offset<reflection::Enum>,std::allocator<flatbuffers::Offset<reflection::Enum>>>(std::vector<flatbuffers::Offset<reflection::Enum>> &)::t;
  else
    v98 = v37;
  if (v214 == v37)
    v99 = 0;
  else
    v99 = v97;
  v221 = v220;
  sub_1DF36EF00((uint64_t)v98, (_DWORD *)((char *)v98 + v214 - v37), (uint64_t)&v221, v99, 1);
  *((_BYTE *)this + 406) = 1;
  if (*((_QWORD *)this + 51) <= 3uLL)
    *((_QWORD *)this + 51) = 4;
  v100 = *((_QWORD *)this + 48);
  v101 = ((_BYTE)v100 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3;
  if (v100 - *((_QWORD *)this + 49) < v101)
  {
    sub_1DF366C90((uint64_t *)v220, ((_BYTE)v100 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3);
    *((_QWORD *)this + 48) -= v101;
  }
  else
  {
    *((_QWORD *)this + 48) = v100 - v101;
    if (!v101)
      goto LABEL_158;
  }
  v102 = 0;
  do
    *(_BYTE *)(*((_QWORD *)this + 48) + v102++) = 0;
  while (v101 != v102);
  if (*((_QWORD *)this + 51) <= 3uLL)
    *((_QWORD *)this + 51) = 4;
LABEL_158:
  v103 = *((_QWORD *)this + 48);
  v104 = ((_BYTE)v103 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3;
  if (v103 - *((_QWORD *)this + 49) < v104)
  {
    sub_1DF366C90((uint64_t *)v220, ((_BYTE)v103 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3);
    *((_QWORD *)this + 48) -= v104;
  }
  else
  {
    *((_QWORD *)this + 48) = v103 - v104;
    if (!v104)
      goto LABEL_162;
  }
  v105 = 0;
  do
    *(_BYTE *)(*((_QWORD *)this + 48) + v105++) = 0;
  while (v104 != v105);
LABEL_162:
  if (v37 != v214)
  {
    do
    {
      v106 = v98[--v96];
      if (*((_QWORD *)this + 51) <= 3uLL)
        *((_QWORD *)this + 51) = 4;
      v107 = *((_QWORD *)this + 46);
      v108 = *((_QWORD *)this + 47);
      v109 = *((_QWORD *)this + 48);
      v110 = ((int)v109 - ((int)v107 + (int)v108)) & 3;
      if (v109 - *((_QWORD *)this + 49) < v110)
      {
        sub_1DF366C90((uint64_t *)v220, ((int)v109 - ((int)v107 + (int)v108)) & 3);
        *((_QWORD *)this + 48) -= v110;
      }
      else
      {
        v111 = v109 - v110;
        *((_QWORD *)this + 48) = v111;
        if (!v110)
        {
          v112 = v107 + v108 - v111;
          goto LABEL_173;
        }
      }
      v113 = 0;
      do
        *(_BYTE *)(*((_QWORD *)this + 48) + v113++) = 0;
      while (v110 != v113);
      v108 = *((_QWORD *)this + 47);
      v111 = *((_QWORD *)this + 48);
      v107 = *((_QWORD *)this + 46);
      v112 = v107 - v111 + v108;
      if (*((_QWORD *)this + 51) <= 3uLL)
        *((_QWORD *)this + 51) = 4;
LABEL_173:
      v114 = ((_BYTE)v111 - ((_BYTE)v107 + (_BYTE)v108)) & 3;
      v115 = *((_QWORD *)this + 49);
      if (v111 - v115 < v114)
      {
        sub_1DF366C90((uint64_t *)v220, v114);
        *((_QWORD *)this + 48) -= v114;
LABEL_175:
        v117 = 0;
        do
          *(_BYTE *)(*((_QWORD *)this + 48) + v117++) = 0;
        while (v114 != v117);
        v116 = *((_QWORD *)this + 48);
        v115 = *((_QWORD *)this + 49);
        goto LABEL_178;
      }
      v116 = v111 - v114;
      *((_QWORD *)this + 48) = v111 - v114;
      if (v114)
        goto LABEL_175;
LABEL_178:
      if ((unint64_t)(v116 - v115) <= 3)
      {
        sub_1DF366C90((uint64_t *)v220, 4uLL);
        v116 = *((_QWORD *)this + 48);
      }
      *(_DWORD *)(v116 - 4) = v112 - v106 + 4;
      *((_QWORD *)this + 48) = v116 - 4;
    }
    while (v96);
  }
  *((_BYTE *)this + 406) = 0;
  if (*((_QWORD *)this + 51) <= 3uLL)
    *((_QWORD *)this + 51) = 4;
  v119 = *((_QWORD *)this + 48);
  v118 = *((_QWORD *)this + 49);
  v120 = ((_BYTE)v119 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3;
  if (v119 - v118 < v120)
  {
    sub_1DF366C90((uint64_t *)v220, ((_BYTE)v119 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3);
    *((_QWORD *)this + 48) -= v120;
    v122 = v218;
  }
  else
  {
    v121 = v119 - v120;
    *((_QWORD *)this + 48) = v119 - v120;
    v122 = v218;
    if (!v120)
      goto LABEL_190;
  }
  v123 = 0;
  do
    *(_BYTE *)(*((_QWORD *)this + 48) + v123++) = 0;
  while (v120 != v123);
  v121 = *((_QWORD *)this + 48);
  v118 = *((_QWORD *)this + 49);
LABEL_190:
  if ((unint64_t)(v121 - v118) <= 3)
  {
    sub_1DF366C90((uint64_t *)v220, 4uLL);
    v122 = v218;
    v121 = *((_QWORD *)this + 48);
  }
  v124 = (v122 - v53) >> 2;
  v125 = 126 - 2 * __clz(v124);
  v126 = v122 - v53;
  *(_DWORD *)(v121 - 4) = (unint64_t)(v214 - v37) >> 2;
  v127 = v121 - 4;
  *((_QWORD *)this + 48) = v127;
  v207 = *((_DWORD *)this + 92);
  v209 = *((_DWORD *)this + 94);
  if (v122 == v53)
    v128 = &flatbuffers::data<flatbuffers::Offset<reflection::Service>,std::allocator<flatbuffers::Offset<reflection::Service>>>(std::vector<flatbuffers::Offset<reflection::Service>> &)::t;
  else
    v128 = v53;
  if (v122 == v53)
    v129 = 0;
  else
    v129 = v125;
  v130 = *((_BYTE *)this + 607);
  v131 = v130;
  if (v130 >= 0)
    v132 = (char *)this + 584;
  else
    v132 = (char *)*((_QWORD *)this + 73);
  v133 = v130 & 0x7F;
  if (v131 >= 0)
    v134 = v133;
  else
    v134 = *((_QWORD *)this + 74);
  v210 = sub_1DF366A24((uint64_t)v220, v132, v134);
  v135 = *((_BYTE *)this + 631);
  v136 = v135;
  if (v135 >= 0)
    v137 = (char *)this + 608;
  else
    v137 = (char *)*((_QWORD *)this + 76);
  v138 = v135 & 0x7F;
  if (v136 >= 0)
    v139 = v138;
  else
    v139 = *((_QWORD *)this + 77);
  v208 = sub_1DF366A24((uint64_t)v220, v137, v139);
  v215 = v126;
  v221 = v220;
  sub_1DF36F920((uint64_t)v128, (_DWORD *)((char *)v128 + v126), (uint64_t)&v221, v129, 1);
  *((_BYTE *)this + 406) = 1;
  if (*((_QWORD *)this + 51) <= 3uLL)
    *((_QWORD *)this + 51) = 4;
  v140 = *((_QWORD *)this + 48);
  v141 = ((_BYTE)v140 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3;
  if (v140 - *((_QWORD *)this + 49) < v141)
  {
    sub_1DF366C90((uint64_t *)v220, ((_BYTE)v140 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3);
    *((_QWORD *)this + 48) -= v141;
  }
  else
  {
    *((_QWORD *)this + 48) = v140 - v141;
    if (!v141)
      goto LABEL_218;
  }
  v142 = 0;
  do
    *(_BYTE *)(*((_QWORD *)this + 48) + v142++) = 0;
  while (v141 != v142);
  if (*((_QWORD *)this + 51) <= 3uLL)
    *((_QWORD *)this + 51) = 4;
LABEL_218:
  v143 = *((_QWORD *)this + 48);
  v144 = ((_BYTE)v143 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3;
  if (v143 - *((_QWORD *)this + 49) < v144)
  {
    sub_1DF366C90((uint64_t *)v220, ((_BYTE)v143 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3);
    *((_QWORD *)this + 48) -= v144;
  }
  else
  {
    *((_QWORD *)this + 48) = v143 - v144;
    if (!v144)
      goto LABEL_222;
  }
  v145 = 0;
  do
    *(_BYTE *)(*((_QWORD *)this + 48) + v145++) = 0;
  while (v144 != v145);
LABEL_222:
  if (v53 != v218)
  {
    do
    {
      v146 = v128[--v124];
      if (*((_QWORD *)this + 51) <= 3uLL)
        *((_QWORD *)this + 51) = 4;
      v147 = *((_QWORD *)this + 46);
      v148 = *((_QWORD *)this + 47);
      v149 = *((_QWORD *)this + 48);
      v150 = ((int)v149 - ((int)v147 + (int)v148)) & 3;
      if (v149 - *((_QWORD *)this + 49) < v150)
      {
        sub_1DF366C90((uint64_t *)v220, ((int)v149 - ((int)v147 + (int)v148)) & 3);
        *((_QWORD *)this + 48) -= v150;
      }
      else
      {
        v151 = v149 - v150;
        *((_QWORD *)this + 48) = v151;
        if (!v150)
        {
          v152 = v147 + v148 - v151;
          goto LABEL_233;
        }
      }
      v153 = 0;
      do
        *(_BYTE *)(*((_QWORD *)this + 48) + v153++) = 0;
      while (v150 != v153);
      v148 = *((_QWORD *)this + 47);
      v151 = *((_QWORD *)this + 48);
      v147 = *((_QWORD *)this + 46);
      v152 = v147 - v151 + v148;
      if (*((_QWORD *)this + 51) <= 3uLL)
        *((_QWORD *)this + 51) = 4;
LABEL_233:
      v154 = ((_BYTE)v151 - ((_BYTE)v147 + (_BYTE)v148)) & 3;
      v155 = *((_QWORD *)this + 49);
      if (v151 - v155 < v154)
      {
        sub_1DF366C90((uint64_t *)v220, v154);
        *((_QWORD *)this + 48) -= v154;
LABEL_235:
        v157 = 0;
        do
          *(_BYTE *)(*((_QWORD *)this + 48) + v157++) = 0;
        while (v154 != v157);
        v156 = *((_QWORD *)this + 48);
        v155 = *((_QWORD *)this + 49);
        goto LABEL_238;
      }
      v156 = v151 - v154;
      *((_QWORD *)this + 48) = v151 - v154;
      if (v154)
        goto LABEL_235;
LABEL_238:
      if ((unint64_t)(v156 - v155) <= 3)
      {
        sub_1DF366C90((uint64_t *)v220, 4uLL);
        v156 = *((_QWORD *)this + 48);
      }
      *(_DWORD *)(v156 - 4) = v152 - v146 + 4;
      *((_QWORD *)this + 48) = v156 - 4;
    }
    while (v124);
  }
  *((_BYTE *)this + 406) = 0;
  if (*((_QWORD *)this + 51) <= 3uLL)
    *((_QWORD *)this + 51) = 4;
  v159 = *((_QWORD *)this + 48);
  v158 = *((_QWORD *)this + 49);
  v160 = ((_BYTE)v159 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3;
  if (v159 - v158 < v160)
  {
    sub_1DF366C90((uint64_t *)v220, ((_BYTE)v159 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3);
    *((_QWORD *)this + 48) -= v160;
  }
  else
  {
    v161 = v159 - v160;
    *((_QWORD *)this + 48) = v159 - v160;
    if (!v160)
      goto LABEL_250;
  }
  v162 = 0;
  do
    *(_BYTE *)(*((_QWORD *)this + 48) + v162++) = 0;
  while (v160 != v162);
  v161 = *((_QWORD *)this + 48);
  v158 = *((_QWORD *)this + 49);
LABEL_250:
  if ((unint64_t)(v161 - v158) <= 3)
  {
    sub_1DF366C90((uint64_t *)v220, 4uLL);
    v161 = *((_QWORD *)this + 48);
  }
  v163 = v207 - v127 + v209;
  *(_DWORD *)(v161 - 4) = v215 >> 2;
  v164 = v161 - 4;
  *((_QWORD *)this + 48) = v164;
  v165 = *((_QWORD *)this + 46);
  v166 = *((_QWORD *)this + 47);
  v167 = v165 - v164 + v166;
  v168 = *((_QWORD *)this + 72);
  if (v168)
    v169 = *(_DWORD *)(v168 + 136);
  else
    v169 = 0;
  v219 = v211 - v213 + v212;
  *((_BYTE *)this + 406) = 1;
  if (v167)
  {
    if (*((_QWORD *)this + 51) <= 3uLL)
      *((_QWORD *)this + 51) = 4;
    v170 = ((_BYTE)v164 - ((_BYTE)v165 + (_BYTE)v166)) & 3;
    if (v164 - *((_QWORD *)this + 49) < v170)
    {
      v216 = ((_BYTE)v164 - ((_BYTE)v165 + (_BYTE)v166)) & 3;
      sub_1DF366C90((uint64_t *)v220, v216);
      v170 = v216;
      *((_QWORD *)this + 48) -= v216;
    }
    else
    {
      v171 = v164 - v170;
      *((_QWORD *)this + 48) = v171;
      if (!v170)
        goto LABEL_263;
    }
    v172 = 0;
    do
      *(_BYTE *)(*((_QWORD *)this + 48) + v172++) = 0;
    while (v170 != v172);
    v166 = *((_QWORD *)this + 47);
    v171 = *((_QWORD *)this + 48);
    v165 = *((_QWORD *)this + 46);
LABEL_263:
    v173 = v166 - v171 + v165 - v167;
    v174 = v173 + 4;
    if (v173 == -4 && !*((_BYTE *)this + 416))
      goto LABEL_275;
    if (*((_QWORD *)this + 51) <= 3uLL)
      *((_QWORD *)this + 51) = 4;
    v175 = ((_BYTE)v171 - ((_BYTE)v165 + (_BYTE)v166)) & 3;
    v176 = *((_QWORD *)this + 49);
    if (v171 - v176 < v175)
    {
      v217 = v175;
      sub_1DF366C90((uint64_t *)v220, v175);
      v175 = v217;
      *((_QWORD *)this + 48) -= v217;
    }
    else
    {
      v177 = v171 - v175;
      *((_QWORD *)this + 48) = v171 - v175;
      if (!v175)
      {
LABEL_272:
        if ((unint64_t)(v177 - v176) <= 3)
        {
          sub_1DF366C90((uint64_t *)v220, 4uLL);
          v177 = *((_QWORD *)this + 48);
        }
        *(_DWORD *)(v177 - 4) = v174;
        v179 = v177 - 4;
        *((_QWORD *)this + 48) = v179;
        sub_1DF366DF8((uint64_t *)v220, 14, *((_DWORD *)this + 92) - v179 + *((_DWORD *)this + 94));
        goto LABEL_275;
      }
    }
    v178 = 0;
    do
      *(_BYTE *)(*((_QWORD *)this + 48) + v178++) = 0;
    while (v175 != v178);
    v177 = *((_QWORD *)this + 48);
    v176 = *((_QWORD *)this + 49);
    goto LABEL_272;
  }
LABEL_275:
  sub_1DF36AD60((uint64_t *)v220, 12, v169);
  sub_1DF354740((uint64_t *)v220, 10, v208);
  sub_1DF354740((uint64_t *)v220, 8, v210);
  if (!v163)
    goto LABEL_295;
  if (*((_QWORD *)this + 51) <= 3uLL)
    *((_QWORD *)this + 51) = 4;
  v180 = *((_QWORD *)this + 46);
  v181 = *((_QWORD *)this + 47);
  v182 = *((_QWORD *)this + 48);
  v183 = ((_BYTE)v182 - ((_BYTE)v180 + (_BYTE)v181)) & 3;
  if (v182 - *((_QWORD *)this + 49) < v183)
  {
    sub_1DF366C90((uint64_t *)v220, ((_BYTE)v182 - ((_BYTE)v180 + (_BYTE)v181)) & 3);
    *((_QWORD *)this + 48) -= v183;
  }
  else
  {
    v184 = v182 - v183;
    *((_QWORD *)this + 48) = v184;
    if (!v183)
      goto LABEL_283;
  }
  v185 = 0;
  do
    *(_BYTE *)(*((_QWORD *)this + 48) + v185++) = 0;
  while (v183 != v185);
  v181 = *((_QWORD *)this + 47);
  v184 = *((_QWORD *)this + 48);
  v180 = *((_QWORD *)this + 46);
LABEL_283:
  v186 = v181 - v184 + v180 - v163;
  v187 = v186 + 4;
  if (v186 == -4 && !*((_BYTE *)this + 416))
    goto LABEL_295;
  if (*((_QWORD *)this + 51) <= 3uLL)
    *((_QWORD *)this + 51) = 4;
  v188 = ((_BYTE)v184 - ((_BYTE)v180 + (_BYTE)v181)) & 3;
  v189 = *((_QWORD *)this + 49);
  if (v184 - v189 < v188)
  {
    sub_1DF366C90((uint64_t *)v220, v188);
    *((_QWORD *)this + 48) -= v188;
LABEL_289:
    v191 = 0;
    do
      *(_BYTE *)(*((_QWORD *)this + 48) + v191++) = 0;
    while (v188 != v191);
    v190 = *((_QWORD *)this + 48);
    v189 = *((_QWORD *)this + 49);
    goto LABEL_292;
  }
  v190 = v184 - v188;
  *((_QWORD *)this + 48) = v184 - v188;
  if (v188)
    goto LABEL_289;
LABEL_292:
  if ((unint64_t)(v190 - v189) <= 3)
  {
    sub_1DF366C90((uint64_t *)v220, 4uLL);
    v190 = *((_QWORD *)this + 48);
  }
  *(_DWORD *)(v190 - 4) = v187;
  v192 = v190 - 4;
  *((_QWORD *)this + 48) = v192;
  sub_1DF366DF8((uint64_t *)v220, 6, *((_DWORD *)this + 92) - v192 + *((_DWORD *)this + 94));
LABEL_295:
  if (!v219)
    goto LABEL_315;
  if (*((_QWORD *)this + 51) <= 3uLL)
    *((_QWORD *)this + 51) = 4;
  v193 = *((_QWORD *)this + 46);
  v194 = *((_QWORD *)this + 47);
  v195 = *((_QWORD *)this + 48);
  v196 = ((_BYTE)v195 - ((_BYTE)v193 + (_BYTE)v194)) & 3;
  if (v195 - *((_QWORD *)this + 49) < v196)
  {
    sub_1DF366C90((uint64_t *)v220, ((_BYTE)v195 - ((_BYTE)v193 + (_BYTE)v194)) & 3);
    *((_QWORD *)this + 48) -= v196;
  }
  else
  {
    v197 = v195 - v196;
    *((_QWORD *)this + 48) = v197;
    if (!v196)
      goto LABEL_303;
  }
  v198 = 0;
  do
    *(_BYTE *)(*((_QWORD *)this + 48) + v198++) = 0;
  while (v196 != v198);
  v194 = *((_QWORD *)this + 47);
  v197 = *((_QWORD *)this + 48);
  v193 = *((_QWORD *)this + 46);
LABEL_303:
  v199 = v194 - v197 + v193 - v219;
  v200 = v199 + 4;
  if (v199 == -4 && !*((_BYTE *)this + 416))
    goto LABEL_315;
  if (*((_QWORD *)this + 51) <= 3uLL)
    *((_QWORD *)this + 51) = 4;
  v201 = ((_BYTE)v197 - ((_BYTE)v193 + (_BYTE)v194)) & 3;
  v202 = *((_QWORD *)this + 49);
  if (v197 - v202 < v201)
  {
    sub_1DF366C90((uint64_t *)v220, v201);
    *((_QWORD *)this + 48) -= v201;
LABEL_309:
    v204 = 0;
    do
      *(_BYTE *)(*((_QWORD *)this + 48) + v204++) = 0;
    while (v201 != v204);
    v203 = *((_QWORD *)this + 48);
    v202 = *((_QWORD *)this + 49);
    goto LABEL_312;
  }
  v203 = v197 - v201;
  *((_QWORD *)this + 48) = v197 - v201;
  if (v201)
    goto LABEL_309;
LABEL_312:
  if ((unint64_t)(v203 - v202) <= 3)
  {
    sub_1DF366C90((uint64_t *)v220, 4uLL);
    v203 = *((_QWORD *)this + 48);
  }
  *(_DWORD *)(v203 - 4) = v200;
  v205 = v203 - 4;
  *((_QWORD *)this + 48) = v205;
  sub_1DF366DF8((uint64_t *)v220, 4, *((_DWORD *)this + 92) - v205 + *((_DWORD *)this + 94));
LABEL_315:
  v206 = sub_1DF3548F4((uint64_t)v220, v167);
  sub_1DF370340((uint64_t)v220, v206, "BFBS", *((unsigned __int8 *)this + 955));
  if (v53)
    operator delete(v53);
  if (v37)
    operator delete(v37);
  if (v23)
    operator delete(v23);
}

uint64_t flatbuffers::StructDef::Serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void ***v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  std::string *p_p;
  size_t size;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  BOOL v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v89;
  uint64_t v90;
  int v91;
  std::string __p;
  uint64_t v93;

  v6 = *(void ****)(a1 + 176);
  if (v6 == *(void ****)(a1 + 184))
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = flatbuffers::FieldDef::Serialize(*v6, a2, (unsigned __int16)(((_DWORD)v6 - *(_DWORD *)(a1 + 176)) >> 3), a3);
      v13 = v12;
      if (v9 >= v10)
      {
        v14 = (v9 - v11) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          abort();
        if ((v10 - v11) >> 1 > v15)
          v15 = (v10 - v11) >> 1;
        if ((unint64_t)(v10 - v11) >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
        {
          if (v16 >> 62)
            sub_1DF3667C0();
          v17 = (char *)operator new(4 * v16);
        }
        else
        {
          v17 = 0;
        }
        v7 = &v17[4 * v14];
        *(_DWORD *)v7 = v13;
        v8 = v7 + 4;
        while (v9 != v11)
        {
          v18 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v7 - 1) = v18;
          v7 -= 4;
        }
        v10 = &v17[4 * v16];
        if (v11)
          operator delete(v11);
        v11 = v7;
      }
      else
      {
        *(_DWORD *)v9 = v12;
        v8 = v9 + 4;
      }
      ++v6;
      v9 = v8;
    }
    while (v6 != *(void ****)(a1 + 184));
  }
  v19 = (v8 - v7) >> 2;
  v20 = 126 - 2 * __clz(v19);
  if (v8 == v7)
    v21 = &flatbuffers::data<flatbuffers::Offset<reflection::Field>,std::allocator<flatbuffers::Offset<reflection::Field>>>(std::vector<flatbuffers::Offset<reflection::Field>> &)::t;
  else
    v21 = v7;
  if (v8 == v7)
    v22 = 0;
  else
    v22 = v20;
  flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a1 + 128), a1, 0x3E8uLL, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v91 = sub_1DF366A24(a2, p_p, size);
  v89 = v8 - v7;
  v93 = a2;
  sub_1DF36DAC0((uint64_t)v21, (_DWORD *)((char *)v21 + v8 - v7), (uint64_t)&v93, v22, 1);
  *(_BYTE *)(a2 + 70) = 1;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v25 = *(_QWORD *)(a2 + 48);
  v26 = ((_BYTE)v25 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v25 - *(_QWORD *)(a2 + 56) < v26)
  {
    sub_1DF366C90((uint64_t *)a2, ((_BYTE)v25 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v26;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v25 - v26;
    if (!v26)
      goto LABEL_43;
  }
  v27 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v27++) = 0;
  while (v26 != v27);
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
LABEL_43:
  v28 = *(_QWORD *)(a2 + 48);
  v29 = ((_BYTE)v28 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v28 - *(_QWORD *)(a2 + 56) < v29)
  {
    sub_1DF366C90((uint64_t *)a2, ((_BYTE)v28 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v29;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v28 - v29;
    if (!v29)
      goto LABEL_47;
  }
  v30 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v30++) = 0;
  while (v29 != v30);
LABEL_47:
  if (v7 != v8)
  {
    do
    {
      v41 = v21[--v19];
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v42 = *(_QWORD *)(a2 + 32);
      v43 = *(_QWORD *)(a2 + 40);
      v44 = *(_QWORD *)(a2 + 48);
      v45 = ((int)v44 - ((int)v42 + (int)v43)) & 3;
      if (v44 - *(_QWORD *)(a2 + 56) < v45)
      {
        sub_1DF366C90((uint64_t *)a2, ((int)v44 - ((int)v42 + (int)v43)) & 3);
        *(_QWORD *)(a2 + 48) -= v45;
      }
      else
      {
        v46 = v44 - v45;
        *(_QWORD *)(a2 + 48) = v46;
        if (!v45)
        {
          v47 = v42 + v43 - v46;
          goto LABEL_69;
        }
      }
      v48 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v48++) = 0;
      while (v45 != v48);
      v43 = *(_QWORD *)(a2 + 40);
      v46 = *(_QWORD *)(a2 + 48);
      v42 = *(_QWORD *)(a2 + 32);
      v47 = v42 - v46 + v43;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
LABEL_69:
      v49 = ((_BYTE)v46 - ((_BYTE)v42 + (_BYTE)v43)) & 3;
      v50 = *(_QWORD *)(a2 + 56);
      if (v46 - v50 < v49)
      {
        sub_1DF366C90((uint64_t *)a2, v49);
        *(_QWORD *)(a2 + 48) -= v49;
LABEL_71:
        v52 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v52++) = 0;
        while (v49 != v52);
        v51 = *(_QWORD *)(a2 + 48);
        v50 = *(_QWORD *)(a2 + 56);
        goto LABEL_74;
      }
      v51 = v46 - v49;
      *(_QWORD *)(a2 + 48) = v46 - v49;
      if (v49)
        goto LABEL_71;
LABEL_74:
      if ((unint64_t)(v51 - v50) <= 3)
      {
        sub_1DF366C90((uint64_t *)a2, 4uLL);
        v51 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v51 - 4) = v47 - v41 + 4;
      *(_QWORD *)(a2 + 48) = v51 - 4;
    }
    while (v19);
  }
  *(_BYTE *)(a2 + 70) = 0;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v31 = *(_QWORD *)(a2 + 48);
  v32 = *(_QWORD *)(a2 + 56);
  v33 = ((_BYTE)v31 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v31 - v32 < v33)
  {
    sub_1DF366C90((uint64_t *)a2, ((_BYTE)v31 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v33;
  }
  else
  {
    v34 = v31 - v33;
    *(_QWORD *)(a2 + 48) = v34;
    if (!v33)
      goto LABEL_55;
  }
  v35 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v35++) = 0;
  while (v33 != v35);
  v34 = *(_QWORD *)(a2 + 48);
  v32 = *(_QWORD *)(a2 + 56);
LABEL_55:
  if ((unint64_t)(v34 - v32) <= 3)
  {
    sub_1DF366C90((uint64_t *)a2, 4uLL);
    v34 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v34 - 4) = v89 >> 2;
  v36 = v34 - 4;
  *(_QWORD *)(a2 + 48) = v36;
  v37 = *(_DWORD *)(a2 + 40);
  v38 = *(_DWORD *)(a2 + 32) - v36;
  v39 = sub_1DF364380(a2, (_QWORD *)(a1 + 72), a3);
  if (*(_BYTE *)(a3 + 897))
    v40 = sub_1DF3622C0(a2, (uint64_t *)(a1 + 48));
  else
    v40 = 0;
  v53 = v38 + v37;
  v54 = *(unsigned __int8 *)(a1 + 200);
  v55 = *(_DWORD *)(a1 + 208);
  v56 = *(_DWORD *)(a1 + 216);
  v57 = v39;
  v58 = 1;
  *(_BYTE *)(a2 + 70) = 1;
  v59 = *(_QWORD *)(a2 + 48);
  v60 = *(_QWORD *)(a2 + 32);
  v90 = *(_QWORD *)(a2 + 40);
  sub_1DF38384C((uint64_t *)a2, 16, v40);
  sub_1DF36AD60((uint64_t *)a2, 14, v57);
  if (v56 || *(_BYTE *)(a2 + 80))
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v61 = *(_QWORD *)(a2 + 48);
    v62 = *(_QWORD *)(a2 + 56);
    v63 = ((_BYTE)v61 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v61 - v62 < v63)
    {
      sub_1DF366C90((uint64_t *)a2, ((_BYTE)v61 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v63;
    }
    else
    {
      v64 = v61 - v63;
      *(_QWORD *)(a2 + 48) = v64;
      if (!v63)
      {
LABEL_89:
        if ((unint64_t)(v64 - v62) <= 3)
        {
          sub_1DF366C90((uint64_t *)a2, 4uLL);
          v64 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v64 - 4) = v56;
        v66 = v64 - 4;
        *(_QWORD *)(a2 + 48) = v66;
        sub_1DF366DF8((uint64_t *)a2, 12, *(_DWORD *)(a2 + 32) - v66 + *(_DWORD *)(a2 + 40));
        v58 = *(_BYTE *)(a2 + 80) == 0;
        goto LABEL_92;
      }
    }
    v65 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v65++) = 0;
    while (v63 != v65);
    v64 = *(_QWORD *)(a2 + 48);
    v62 = *(_QWORD *)(a2 + 56);
    goto LABEL_89;
  }
LABEL_92:
  if (!v55 && v58)
    goto LABEL_104;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v67 = *(_QWORD *)(a2 + 48);
  v68 = *(_QWORD *)(a2 + 56);
  v69 = ((_BYTE)v67 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v67 - v68 < v69)
  {
    sub_1DF366C90((uint64_t *)a2, ((_BYTE)v67 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v69;
LABEL_98:
    v71 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v71++) = 0;
    while (v69 != v71);
    v70 = *(_QWORD *)(a2 + 48);
    v68 = *(_QWORD *)(a2 + 56);
    goto LABEL_101;
  }
  v70 = v67 - v69;
  *(_QWORD *)(a2 + 48) = v70;
  if (v69)
    goto LABEL_98;
LABEL_101:
  if ((unint64_t)(v70 - v68) <= 3)
  {
    sub_1DF366C90((uint64_t *)a2, 4uLL);
    v70 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v70 - 4) = v55;
  v72 = v70 - 4;
  *(_QWORD *)(a2 + 48) = v72;
  sub_1DF366DF8((uint64_t *)a2, 10, *(_DWORD *)(a2 + 32) - v72 + *(_DWORD *)(a2 + 40));
LABEL_104:
  if (!v53)
    goto LABEL_126;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v73 = *(_QWORD *)(a2 + 32);
  v74 = *(_QWORD *)(a2 + 40);
  v75 = *(_QWORD *)(a2 + 48);
  v76 = ((_BYTE)v75 - ((_BYTE)v73 + (_BYTE)v74)) & 3;
  if (v75 - *(_QWORD *)(a2 + 56) < v76)
  {
    sub_1DF366C90((uint64_t *)a2, ((_BYTE)v75 - ((_BYTE)v73 + (_BYTE)v74)) & 3);
    *(_QWORD *)(a2 + 48) -= v76;
LABEL_109:
    v78 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v78++) = 0;
    while (v76 != v78);
    v74 = *(_QWORD *)(a2 + 40);
    v77 = *(_QWORD *)(a2 + 48);
    v73 = *(_QWORD *)(a2 + 32);
    goto LABEL_112;
  }
  v77 = v75 - v76;
  *(_QWORD *)(a2 + 48) = v77;
  if (v76)
    goto LABEL_109;
LABEL_112:
  v79 = v74 - v77 + v73 - v53 + 4;
  if (v79)
    v80 = 0;
  else
    v80 = *(_BYTE *)(a2 + 80) == 0;
  if (v80)
    goto LABEL_126;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v81 = ((_BYTE)v77 - ((_BYTE)v73 + (_BYTE)v74)) & 3;
  v82 = *(_QWORD *)(a2 + 56);
  if (v77 - v82 < v81)
  {
    sub_1DF366C90((uint64_t *)a2, v81);
    *(_QWORD *)(a2 + 48) -= v81;
LABEL_120:
    v84 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v84++) = 0;
    while (v81 != v84);
    v83 = *(_QWORD *)(a2 + 48);
    v82 = *(_QWORD *)(a2 + 56);
    goto LABEL_123;
  }
  v83 = v77 - v81;
  *(_QWORD *)(a2 + 48) = v77 - v81;
  if (v81)
    goto LABEL_120;
LABEL_123:
  if ((unint64_t)(v83 - v82) <= 3)
  {
    sub_1DF366C90((uint64_t *)a2, 4uLL);
    v83 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v83 - 4) = v79;
  v85 = v83 - 4;
  *(_QWORD *)(a2 + 48) = v85;
  sub_1DF366DF8((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v85 + *(_DWORD *)(a2 + 40));
LABEL_126:
  sub_1DF354740((uint64_t *)a2, 4, v91);
  if (v54 | *(unsigned __int8 *)(a2 + 80))
  {
    v86 = sub_1DF35327C(a2, v54);
    sub_1DF366DF8((uint64_t *)a2, 8, v86);
  }
  v87 = sub_1DF3548F4(a2, (unsigned __int16)v60 - (unsigned __int16)v59 + (unsigned __int16)v90);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v7)
    operator delete(v7);
  return v87;
}

uint64_t flatbuffers::EnumDef::Serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void ***v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;
  std::string *p_p;
  size_t size;
  int v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v76;
  std::string __p;

  v4 = a1;
  v5 = *(void ****)(a1 + 208);
  if (v5 == *(void ****)(a1 + 216))
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v8 = 0;
    v7 = 0;
    v9 = 0;
    do
    {
      v10 = flatbuffers::EnumVal::Serialize(*v5, a2, a3);
      v11 = v10;
      if (v9 >= v8)
      {
        v12 = (v9 - v7) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          abort();
        if ((v8 - v7) >> 1 > v13)
          v13 = (v8 - v7) >> 1;
        if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          if (v14 >> 62)
            sub_1DF3667C0();
          v15 = (char *)operator new(4 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[4 * v12];
        *(_DWORD *)v16 = v11;
        v6 = v16 + 4;
        while (v9 != v7)
        {
          v17 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        v8 = &v15[4 * v14];
        if (v7)
          operator delete(v7);
        v7 = v16;
        v4 = a1;
      }
      else
      {
        *(_DWORD *)v9 = v10;
        v6 = v9 + 4;
      }
      ++v5;
      v9 = v6;
    }
    while (v5 != *(void ****)(v4 + 216));
  }
  flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(v4 + 128), v4, 0x3E8uLL, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v20 = sub_1DF366A24(a2, p_p, size);
  v76 = v6 - v7;
  if (v6 == v7)
    v21 = (char *)&flatbuffers::data<flatbuffers::Offset<reflection::EnumVal>,std::allocator<flatbuffers::Offset<reflection::EnumVal>>>(std::vector<flatbuffers::Offset<reflection::EnumVal>> const&)::t;
  else
    v21 = v7;
  *(_BYTE *)(a2 + 70) = 1;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v22 = *(_QWORD *)(a2 + 48);
  v23 = ((_BYTE)v22 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v22 - *(_QWORD *)(a2 + 56) < v23)
  {
    sub_1DF366C90((uint64_t *)a2, ((_BYTE)v22 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v23;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v22 - v23;
    if (!v23)
      goto LABEL_40;
  }
  v24 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v24++) = 0;
  while (v23 != v24);
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
LABEL_40:
  v25 = *(_QWORD *)(a2 + 48);
  v26 = ((_BYTE)v25 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v25 - *(_QWORD *)(a2 + 56) < v26)
  {
    sub_1DF366C90((uint64_t *)a2, ((_BYTE)v25 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v26;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v25 - v26;
    if (!v26)
      goto LABEL_44;
  }
  v27 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v27++) = 0;
  while (v26 != v27);
LABEL_44:
  if (v7 != v6)
  {
    v41 = v76 >> 2;
    do
    {
      --v41;
      v42 = *(_DWORD *)&v21[4 * v41];
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v43 = *(_QWORD *)(a2 + 32);
      v44 = *(_QWORD *)(a2 + 40);
      v45 = *(_QWORD *)(a2 + 48);
      v46 = ((int)v45 - ((int)v43 + (int)v44)) & 3;
      if (v45 - *(_QWORD *)(a2 + 56) < v46)
      {
        sub_1DF366C90((uint64_t *)a2, ((int)v45 - ((int)v43 + (int)v44)) & 3);
        *(_QWORD *)(a2 + 48) -= v46;
      }
      else
      {
        v47 = v45 - v46;
        *(_QWORD *)(a2 + 48) = v47;
        if (!v46)
        {
          v48 = v43 + v44 - v47;
          goto LABEL_71;
        }
      }
      v49 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v49++) = 0;
      while (v46 != v49);
      v44 = *(_QWORD *)(a2 + 40);
      v47 = *(_QWORD *)(a2 + 48);
      v43 = *(_QWORD *)(a2 + 32);
      v48 = v43 - v47 + v44;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
LABEL_71:
      v50 = ((_BYTE)v47 - ((_BYTE)v43 + (_BYTE)v44)) & 3;
      v51 = *(_QWORD *)(a2 + 56);
      if (v47 - v51 < v50)
      {
        sub_1DF366C90((uint64_t *)a2, v50);
        *(_QWORD *)(a2 + 48) -= v50;
LABEL_73:
        v53 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v53++) = 0;
        while (v50 != v53);
        v52 = *(_QWORD *)(a2 + 48);
        v51 = *(_QWORD *)(a2 + 56);
        goto LABEL_76;
      }
      v52 = v47 - v50;
      *(_QWORD *)(a2 + 48) = v47 - v50;
      if (v50)
        goto LABEL_73;
LABEL_76:
      if ((unint64_t)(v52 - v51) <= 3)
      {
        sub_1DF366C90((uint64_t *)a2, 4uLL);
        v52 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v52 - 4) = v48 - v42 + 4;
      *(_QWORD *)(a2 + 48) = v52 - 4;
    }
    while (v41);
  }
  *(_BYTE *)(a2 + 70) = 0;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v28 = *(_QWORD *)(a2 + 48);
  v29 = *(_QWORD *)(a2 + 56);
  v30 = ((_BYTE)v28 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v28 - v29 < v30)
  {
    sub_1DF366C90((uint64_t *)a2, ((_BYTE)v28 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v30;
    v32 = v20;
  }
  else
  {
    v31 = v28 - v30;
    *(_QWORD *)(a2 + 48) = v31;
    v32 = v20;
    if (!v30)
      goto LABEL_52;
  }
  v33 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v33++) = 0;
  while (v30 != v33);
  v31 = *(_QWORD *)(a2 + 48);
  v29 = *(_QWORD *)(a2 + 56);
LABEL_52:
  if ((unint64_t)(v31 - v29) <= 3)
  {
    sub_1DF366C90((uint64_t *)a2, 4uLL);
    v31 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v31 - 4) = (unint64_t)v76 >> 2;
  v34 = v31 - 4;
  *(_QWORD *)(a2 + 48) = v34;
  v35 = *(_DWORD *)(a2 + 32) - v34 + *(_DWORD *)(a2 + 40);
  v36 = *(_QWORD *)(a1 + 160);
  if (v36 || (v36 = *(_QWORD *)(a1 + 168)) != 0)
    v37 = *(_DWORD *)(v36 + 140);
  else
    v37 = -1;
  v38 = sub_1DF364CBC(a2, *(_DWORD *)(a1 + 152), *(_DWORD *)(a1 + 156), v37, *(unsigned __int16 *)(a1 + 176));
  v39 = sub_1DF364380(a2, (_QWORD *)(a1 + 72), a3);
  if (*(_BYTE *)(a3 + 897))
    v40 = sub_1DF3622C0(a2, (uint64_t *)(a1 + 48));
  else
    v40 = 0;
  v54 = *(unsigned __int8 *)(a1 + 148);
  v55 = v32;
  v56 = v38;
  *(_BYTE *)(a2 + 70) = 1;
  v57 = *(_QWORD *)(a2 + 40);
  v58 = *(_QWORD *)(a2 + 48);
  v59 = *(_QWORD *)(a2 + 32);
  sub_1DF38384C((uint64_t *)a2, 14, v40);
  sub_1DF36AD60((uint64_t *)a2, 12, v39);
  sub_1DF36AD60((uint64_t *)a2, 10, v56);
  if (v35)
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v60 = *(_QWORD *)(a2 + 32);
    v61 = *(_QWORD *)(a2 + 40);
    v62 = *(_QWORD *)(a2 + 48);
    v63 = ((_BYTE)v62 - ((_BYTE)v60 + (_BYTE)v61)) & 3;
    if (v62 - *(_QWORD *)(a2 + 56) < v63)
    {
      sub_1DF366C90((uint64_t *)a2, ((_BYTE)v62 - ((_BYTE)v60 + (_BYTE)v61)) & 3);
      *(_QWORD *)(a2 + 48) -= v63;
    }
    else
    {
      v64 = v62 - v63;
      *(_QWORD *)(a2 + 48) = v64;
      if (!v63)
      {
LABEL_90:
        v66 = v61 - v64 + v60 - v35 + 4;
        if ((_DWORD)v61 - (_DWORD)v64 + (_DWORD)v60 - v35 == -4 && *(_BYTE *)(a2 + 80) == 0)
          goto LABEL_104;
        if (*(_QWORD *)(a2 + 72) <= 3uLL)
          *(_QWORD *)(a2 + 72) = 4;
        v68 = ((_BYTE)v64 - ((_BYTE)v60 + (_BYTE)v61)) & 3;
        v69 = *(_QWORD *)(a2 + 56);
        if (v64 - v69 < v68)
        {
          sub_1DF366C90((uint64_t *)a2, v68);
          *(_QWORD *)(a2 + 48) -= v68;
        }
        else
        {
          v70 = v64 - v68;
          *(_QWORD *)(a2 + 48) = v64 - v68;
          if (!v68)
          {
LABEL_101:
            if ((unint64_t)(v70 - v69) <= 3)
            {
              sub_1DF366C90((uint64_t *)a2, 4uLL);
              v70 = *(_QWORD *)(a2 + 48);
            }
            *(_DWORD *)(v70 - 4) = v66;
            v72 = v70 - 4;
            *(_QWORD *)(a2 + 48) = v72;
            sub_1DF366DF8((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v72 + *(_DWORD *)(a2 + 40));
            goto LABEL_104;
          }
        }
        v71 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v71++) = 0;
        while (v68 != v71);
        v70 = *(_QWORD *)(a2 + 48);
        v69 = *(_QWORD *)(a2 + 56);
        goto LABEL_101;
      }
    }
    v65 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v65++) = 0;
    while (v63 != v65);
    v61 = *(_QWORD *)(a2 + 40);
    v64 = *(_QWORD *)(a2 + 48);
    v60 = *(_QWORD *)(a2 + 32);
    goto LABEL_90;
  }
LABEL_104:
  sub_1DF354740((uint64_t *)a2, 4, v55);
  if (v54 | *(unsigned __int8 *)(a2 + 80))
  {
    v73 = sub_1DF35327C(a2, v54);
    sub_1DF366DF8((uint64_t *)a2, 8, v73);
  }
  v74 = sub_1DF3548F4(a2, (unsigned __int16)v59 - (unsigned __int16)v58 + (unsigned __int16)v57);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v7)
    operator delete(v7);
  return v74;
}

uint64_t flatbuffers::ServiceDef::Serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void ***v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  std::string *p_p;
  size_t size;
  int v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v67;
  uint64_t v68;
  std::string __p;

  v5 = *(void ****)(a1 + 176);
  if (v5 == *(void ****)(a1 + 184))
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v8 = a3;
    v9 = 0;
    v7 = 0;
    v10 = 0;
    do
    {
      v11 = flatbuffers::RPCCall::Serialize(*v5, a2, v8);
      v12 = v11;
      if (v10 >= v9)
      {
        v13 = (v10 - v7) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          abort();
        if ((v9 - v7) >> 1 > v14)
          v14 = (v9 - v7) >> 1;
        if ((unint64_t)(v9 - v7) >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          if (v15 >> 62)
            sub_1DF3667C0();
          v16 = (char *)operator new(4 * v15);
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[4 * v13];
        *(_DWORD *)v17 = v12;
        v6 = v17 + 4;
        while (v10 != v7)
        {
          v18 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        v9 = &v16[4 * v15];
        if (v7)
          operator delete(v7);
        v7 = v17;
        v8 = a3;
      }
      else
      {
        *(_DWORD *)v10 = v11;
        v6 = v10 + 4;
      }
      ++v5;
      v10 = v6;
    }
    while (v5 != *(void ****)(a1 + 184));
  }
  flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a1 + 128), a1, 0x3E8uLL, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v21 = sub_1DF366A24(a2, p_p, size);
  v68 = v6 - v7;
  if (v6 == v7)
    v22 = (char *)&flatbuffers::data<flatbuffers::Offset<reflection::RPCCall>,std::allocator<flatbuffers::Offset<reflection::RPCCall>>>(std::vector<flatbuffers::Offset<reflection::RPCCall>> const&)::t;
  else
    v22 = v7;
  *(_BYTE *)(a2 + 70) = 1;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v23 = *(_QWORD *)(a2 + 48);
  v24 = ((_BYTE)v23 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v23 - *(_QWORD *)(a2 + 56) < v24)
  {
    sub_1DF366C90((uint64_t *)a2, ((_BYTE)v23 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v24;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v23 - v24;
    if (!v24)
      goto LABEL_40;
  }
  v25 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v25++) = 0;
  while (v24 != v25);
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
LABEL_40:
  v26 = *(_QWORD *)(a2 + 48);
  v27 = ((_BYTE)v26 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  v67 = v21;
  if (v26 - *(_QWORD *)(a2 + 56) < v27)
  {
    sub_1DF366C90((uint64_t *)a2, v27);
    *(_QWORD *)(a2 + 48) -= v27;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v26 - v27;
    if (!v27)
      goto LABEL_44;
  }
  v28 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v28++) = 0;
  while (v27 != v28);
LABEL_44:
  if (v7 != v6)
  {
    v38 = v68 >> 2;
    do
    {
      --v38;
      v39 = *(_DWORD *)&v22[4 * v38];
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v40 = *(_QWORD *)(a2 + 32);
      v41 = *(_QWORD *)(a2 + 40);
      v42 = *(_QWORD *)(a2 + 48);
      v43 = ((int)v42 - ((int)v40 + (int)v41)) & 3;
      if (v42 - *(_QWORD *)(a2 + 56) < v43)
      {
        sub_1DF366C90((uint64_t *)a2, ((int)v42 - ((int)v40 + (int)v41)) & 3);
        *(_QWORD *)(a2 + 48) -= v43;
      }
      else
      {
        v44 = v42 - v43;
        *(_QWORD *)(a2 + 48) = v44;
        if (!v43)
        {
          v45 = v40 + v41 - v44;
          goto LABEL_67;
        }
      }
      v46 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v46++) = 0;
      while (v43 != v46);
      v41 = *(_QWORD *)(a2 + 40);
      v44 = *(_QWORD *)(a2 + 48);
      v40 = *(_QWORD *)(a2 + 32);
      v45 = v40 - v44 + v41;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
LABEL_67:
      v47 = ((_BYTE)v44 - ((_BYTE)v40 + (_BYTE)v41)) & 3;
      v48 = *(_QWORD *)(a2 + 56);
      if (v44 - v48 < v47)
      {
        sub_1DF366C90((uint64_t *)a2, v47);
        *(_QWORD *)(a2 + 48) -= v47;
LABEL_69:
        v50 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v50++) = 0;
        while (v47 != v50);
        v49 = *(_QWORD *)(a2 + 48);
        v48 = *(_QWORD *)(a2 + 56);
        goto LABEL_72;
      }
      v49 = v44 - v47;
      *(_QWORD *)(a2 + 48) = v44 - v47;
      if (v47)
        goto LABEL_69;
LABEL_72:
      if ((unint64_t)(v49 - v48) <= 3)
      {
        sub_1DF366C90((uint64_t *)a2, 4uLL);
        v49 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v49 - 4) = v45 - v39 + 4;
      *(_QWORD *)(a2 + 48) = v49 - 4;
    }
    while (v38);
  }
  *(_BYTE *)(a2 + 70) = 0;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v29 = *(_QWORD *)(a2 + 48);
  v30 = *(_QWORD *)(a2 + 56);
  v31 = ((_BYTE)v29 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v29 - v30 < v31)
  {
    sub_1DF366C90((uint64_t *)a2, ((_BYTE)v29 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v31;
  }
  else
  {
    v32 = v29 - v31;
    *(_QWORD *)(a2 + 48) = v32;
    if (!v31)
      goto LABEL_52;
  }
  v33 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v33++) = 0;
  while (v31 != v33);
  v32 = *(_QWORD *)(a2 + 48);
  v30 = *(_QWORD *)(a2 + 56);
LABEL_52:
  if ((unint64_t)(v32 - v30) <= 3)
  {
    sub_1DF366C90((uint64_t *)a2, 4uLL);
    v32 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v32 - 4) = (unint64_t)v68 >> 2;
  v34 = v32 - 4;
  *(_QWORD *)(a2 + 48) = v34;
  v35 = *(_DWORD *)(a2 + 32) - v34 + *(_DWORD *)(a2 + 40);
  v36 = sub_1DF364380(a2, (_QWORD *)(a1 + 72), a3);
  if (*(_BYTE *)(a3 + 897))
    v37 = sub_1DF3622C0(a2, (uint64_t *)(a1 + 48));
  else
    v37 = 0;
  *(_BYTE *)(a2 + 70) = 1;
  v51 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
  sub_1DF38384C((uint64_t *)a2, 10, v37);
  sub_1DF36AD60((uint64_t *)a2, 8, v36);
  if (v35)
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v52 = *(_QWORD *)(a2 + 32);
    v53 = *(_QWORD *)(a2 + 40);
    v54 = *(_QWORD *)(a2 + 48);
    v55 = ((_BYTE)v54 - ((_BYTE)v52 + (_BYTE)v53)) & 3;
    if (v54 - *(_QWORD *)(a2 + 56) < v55)
    {
      sub_1DF366C90((uint64_t *)a2, ((_BYTE)v54 - ((_BYTE)v52 + (_BYTE)v53)) & 3);
      *(_QWORD *)(a2 + 48) -= v55;
    }
    else
    {
      v56 = v54 - v55;
      *(_QWORD *)(a2 + 48) = v56;
      if (!v55)
        goto LABEL_86;
    }
    v57 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v57++) = 0;
    while (v55 != v57);
    v53 = *(_QWORD *)(a2 + 40);
    v56 = *(_QWORD *)(a2 + 48);
    v52 = *(_QWORD *)(a2 + 32);
LABEL_86:
    v58 = v53 - v56 + v52 - v35;
    v59 = v58 + 4;
    if (v58 == -4 && !*(_BYTE *)(a2 + 80))
      goto LABEL_98;
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v60 = ((_BYTE)v56 - ((_BYTE)v52 + (_BYTE)v53)) & 3;
    v61 = *(_QWORD *)(a2 + 56);
    if (v56 - v61 < v60)
    {
      sub_1DF366C90((uint64_t *)a2, v60);
      *(_QWORD *)(a2 + 48) -= v60;
    }
    else
    {
      v62 = v56 - v60;
      *(_QWORD *)(a2 + 48) = v56 - v60;
      if (!v60)
      {
LABEL_95:
        if ((unint64_t)(v62 - v61) <= 3)
        {
          sub_1DF366C90((uint64_t *)a2, 4uLL);
          v62 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v62 - 4) = v59;
        v64 = v62 - 4;
        *(_QWORD *)(a2 + 48) = v64;
        sub_1DF366DF8((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v64 + *(_DWORD *)(a2 + 40));
        goto LABEL_98;
      }
    }
    v63 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v63++) = 0;
    while (v60 != v63);
    v62 = *(_QWORD *)(a2 + 48);
    v61 = *(_QWORD *)(a2 + 56);
    goto LABEL_95;
  }
LABEL_98:
  sub_1DF354740((uint64_t *)a2, 4, v67);
  v65 = sub_1DF3548F4(a2, v51);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v7)
    operator delete(v7);
  return v65;
}

uint64_t flatbuffers::FieldDef::Serialize(void **a1, uint64_t a2, int a3, uint64_t a4)
{
  char v8;
  BOOL v9;
  void *v10;
  size_t v11;
  size_t v12;
  int v13;
  _DWORD *v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  char *v19;
  unsigned __int8 v20;
  double v21;
  double v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  double v27;
  int v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  _BOOL4 v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned __int8 v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  char *v53;

  v8 = *((_BYTE *)a1 + 23);
  v9 = v8 < 0;
  if (v8 >= 0)
    v10 = a1;
  else
    v10 = *a1;
  v11 = v8 & 0x7F;
  if (v9)
    v12 = (size_t)a1[1];
  else
    v12 = v11;
  v13 = sub_1DF366A24(a2, v10, v12);
  v14 = a1[20];
  v52 = a3;
  if (v14 || (v14 = a1[21]) != 0)
    v15 = v14[35];
  else
    v15 = -1;
  v16 = sub_1DF364CBC(a2, *((_DWORD *)a1 + 38), *((_DWORD *)a1 + 39), v15, *((unsigned __int16 *)a1 + 88));
  v17 = sub_1DF364380(a2, a1 + 9, a4);
  if (*(_BYTE *)(a4 + 897))
    v51 = sub_1DF3622C0(a2, (uint64_t *)a1 + 6);
  else
    v51 = 0;
  v18 = (char *)(a1 + 23);
  v19 = (char *)(a1 + 23);
  if (*((char *)a1 + 207) < 0)
    v19 = *(char **)v18;
  v53 = v19;
  v20 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
  {
    qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
    __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
    __cxa_guard_release(&qword_1F04755F0);
  }
  v21 = strtod_l(v19, &v53, (locale_t)qword_1F04755E8);
  if (v53 == v19 || (v22 = v21, *v53))
    v22 = 0.0;
  v23 = *((_DWORD *)a1 + 38);
  v49 = *((unsigned __int16 *)a1 + 104);
  if (v23 <= 0xFFFFFFFC && v23 - 1 > 9)
    goto LABEL_22;
  if (*((char *)a1 + 207) < 0)
    v18 = *(char **)v18;
  *__error() = 0;
  v53 = v18;
  v44 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
  if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
  {
    qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
    __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
    __cxa_guard_release(&qword_1F04755F0);
  }
  v45 = strtoll_l(v18, &v53, 10, (locale_t)qword_1F04755E8);
  if (v53 == v18 || *v53 || (v24 = v45, *__error()))
LABEL_22:
    v24 = 0;
  v25 = *((_DWORD *)a1 + 38);
  v26 = (v25 - 11) < 2 || v25 == -4;
  v27 = 0.0;
  if (v26)
    v27 = v22;
  v50 = *((unsigned __int8 *)a1 + 216);
  v28 = *((unsigned __int8 *)a1 + 217);
  v48 = *((unsigned __int8 *)a1 + 218);
  v29 = *((unsigned __int8 *)a1 + 222);
  v30 = 1;
  *(_BYTE *)(a2 + 70) = 1;
  v32 = *(_QWORD *)(a2 + 40);
  v31 = *(_QWORD *)(a2 + 48);
  v33 = *(_QWORD *)(a2 + 32);
  if (v27 != 0.0 || *(_BYTE *)(a2 + 80) != 0)
  {
    v35 = sub_1DF382490(a2, v27);
    sub_1DF366DF8((uint64_t *)a2, 14, v35);
    v30 = *(_BYTE *)(a2 + 80) == 0;
  }
  if (v24 || !v30)
  {
    v36 = sub_1DF3823C8(a2, v24);
    sub_1DF366DF8((uint64_t *)a2, 12, v36);
  }
  sub_1DF38384C((uint64_t *)a2, 24, v51);
  sub_1DF36AD60((uint64_t *)a2, 22, v17);
  sub_1DF36AD60((uint64_t *)a2, 6, v16);
  sub_1DF354740((uint64_t *)a2, 4, v13);
  if (v49 || *(_BYTE *)(a2 + 80))
  {
    v46 = sub_1DF3822E0(a2, v49);
    sub_1DF366DF8((uint64_t *)a2, 10, v46);
    v37 = *(_BYTE *)(a2 + 80) == 0;
  }
  else
  {
    v37 = 1;
  }
  if (v52 || !v37)
  {
    v47 = sub_1DF3822E0(a2, v52);
    sub_1DF366DF8((uint64_t *)a2, 8, v47);
    v38 = *(_BYTE *)(a2 + 80) != 0;
    if (v29)
      goto LABEL_43;
  }
  else
  {
    v38 = 0;
    if (v29)
    {
LABEL_43:
      v39 = sub_1DF35327C(a2, v29);
      sub_1DF366DF8((uint64_t *)a2, 26, v39);
      v38 = *(_BYTE *)(a2 + 80) != 0;
      goto LABEL_44;
    }
  }
  if (v38)
    goto LABEL_43;
LABEL_44:
  if (v48 || v38)
  {
    v40 = sub_1DF35327C(a2, v48);
    sub_1DF366DF8((uint64_t *)a2, 20, v40);
    v38 = *(_BYTE *)(a2 + 80) != 0;
  }
  if (v28 || v38)
  {
    v41 = sub_1DF35327C(a2, v28);
    sub_1DF366DF8((uint64_t *)a2, 18, v41);
    v38 = *(_BYTE *)(a2 + 80) != 0;
  }
  if (v50 || v38)
  {
    v42 = sub_1DF35327C(a2, v50);
    sub_1DF366DF8((uint64_t *)a2, 16, v42);
  }
  return sub_1DF3548F4(a2, (unsigned __int16)v33 - (unsigned __int16)v31 + (unsigned __int16)v32);
}

uint64_t flatbuffers::Definition::SerializeAttributes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1DF364380(a2, (_QWORD *)(a1 + 72), a3);
}

uint64_t sub_1DF3622C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v3 = *a2;
  v4 = a2[1] - *a2;
  if (v4)
  {
    v6 = v4 / 24;
    if (v6 >> 62)
      abort();
    v8 = 4 * v6;
    v5 = (char *)operator new(4 * v6);
    bzero(v5, v8);
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(_BYTE *)(v3 + v9 + 23);
      if (v11 >= 0)
        v12 = (void *)(v3 + v9);
      else
        v12 = *(void **)(v3 + v9);
      if (v11 >= 0)
        v13 = v11 & 0x7F;
      else
        v13 = *(_QWORD *)(v3 + v9 + 8);
      *(_DWORD *)&v5[4 * v10++] = sub_1DF366A24(a1, v12, v13);
      v3 = *a2;
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    v4 = (uint64_t)&v5[v8];
  }
  else
  {
    v5 = 0;
  }
  v14 = v4 - (_QWORD)v5;
  if (v14)
    v15 = v5;
  else
    v15 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  v16 = sub_1DF3837A0(a1, (uint64_t)v15, v14 >> 2);
  if (v5)
    operator delete(v5);
  return v16;
}

BOOL flatbuffers::StructDef::Deserialize(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned __int16 *v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  _DWORD *v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  std::string::size_type v15;
  const void *v16;
  unsigned int v17;
  std::string *p_dst;
  uint64_t v19;
  uint64_t *v20;
  BOOL v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int *v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  int *v41;
  unsigned __int16 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unsigned int *v48;
  std::string __dst;
  std::string __p;

  v5 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v5 >= 0xFu && (v6 = v5[7]) != 0)
    v7 = (int *)((char *)a3 + v6 + *(unsigned int *)((char *)a3 + v6));
  else
    v7 = 0;
  if (!sub_1DF364910(a1 + 72, a2, v7))
    return 0;
  v8 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v8 >= 0x11u && (v9 = v8[8]) != 0)
    v10 = (int *)((char *)a3 + v9 + *(unsigned int *)((char *)a3 + v9));
  else
    v10 = 0;
  flatbuffers::DeserializeDoc((int64x2_t *)(a1 + 48), v10);
  v12 = *a3;
  if (*(unsigned __int16 *)((char *)a3 - v12) < 5u)
  {
    v13 = 0;
  }
  else
  {
    v13 = *(unsigned __int16 *)((char *)a3 - v12 + 4);
    LODWORD(v12) = *(int *)((char *)a3 + *(unsigned __int16 *)((char *)a3 - v12 + 4));
  }
  v14 = (unsigned int *)((char *)a3 + v13 + v12);
  v17 = *v14;
  v16 = v14 + 1;
  v15 = v17;
  if (v17 >= 0x17)
  {
    if ((v15 | 7) == 0x17)
      v19 = (v15 & 0xFFFFFFF8) + 8;
    else
      v19 = v15 | 7;
    p_dst = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v19 - 0x7FFFFFFFFFFFFFFFLL;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_21;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v15;
  p_dst = &__dst;
  if ((_DWORD)v15)
LABEL_21:
    memcpy(p_dst, v16, v15);
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  flatbuffers::Parser::UnqualifiedName(a2, &__dst, &__p);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 201) = 0;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&__p, "original_order");
  v20 = sub_1DF370B40(a1 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  v21 = ((uint64_t *)(a1 + 80) == v20 || !v20[7]) && *(_BYTE *)(a1 + 200) == 0;
  *(_BYTE *)(a1 + 202) = v21;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v22 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v22 >= 7u && (v23 = v22[3]) != 0)
    v24 = (unsigned int *)((char *)a3 + v23 + *(unsigned int *)((char *)a3 + v23));
  else
    v24 = 0;
  v25 = *v24;
  if ((_DWORD)v25)
  {
    v26 = (unsigned int *)operator new(4 * v25);
    bzero(v26, 4 * v25);
    v27 = 0;
    v48 = v24 + 1;
    v28 = v25;
    do
    {
      v29 = v24[1];
      v30 = (char *)v24 + v29 - *(int *)((char *)v24 + v29 + 4);
      if (*((unsigned __int16 *)v30 + 2) >= 9u && (v31 = *((unsigned __int16 *)v30 + 6)) != 0)
        v32 = *(unsigned __int16 *)((char *)v24 + v29 + v31 + 4);
      else
        v32 = 0;
      v26[v32] = v27++;
      ++v24;
      --v28;
    }
    while (v28);
    v11 = 0;
    v33 = 0;
    v34 = 0;
    if (v25 <= 1)
      v35 = 1;
    else
      v35 = v25;
    v47 = v35;
    while (1)
    {
      v36 = &v48[v26[v33]];
      v37 = (int *)((char *)v36 + *v36);
      v38 = operator new();
      *(_OWORD *)v38 = 0u;
      *(_OWORD *)(v38 + 16) = 0u;
      *(_OWORD *)(v38 + 32) = 0u;
      *(_OWORD *)(v38 + 48) = 0u;
      *(_QWORD *)(v38 + 88) = 0;
      *(_QWORD *)(v38 + 96) = 0;
      *(_QWORD *)(v38 + 80) = 0;
      *(_QWORD *)(v38 + 64) = 0;
      *(_QWORD *)(v38 + 72) = v38 + 80;
      *(_QWORD *)(v38 + 128) = 0;
      *(_QWORD *)(v38 + 104) = 0;
      *(_QWORD *)(v38 + 112) = 0;
      *(_BYTE *)(v38 + 120) = 0;
      *(_QWORD *)(v38 + 136) = 0xFFFFFFFF00000000;
      *(_DWORD *)(v38 + 144) = 1;
      *(_QWORD *)(v38 + 152) = 0;
      *(_QWORD *)(v38 + 160) = 0;
      *(_QWORD *)(v38 + 168) = 0;
      *(_WORD *)(v38 + 176) = 0;
      *(_BYTE *)(v38 + 207) = 1;
      *(_WORD *)(v38 + 184) = 48;
      *(_WORD *)(v38 + 208) = -1;
      *(_DWORD *)(v38 + 216) = 0;
      *(_DWORD *)(v38 + 219) = 0;
      *(_QWORD *)(v38 + 224) = 0;
      *(_QWORD *)(v38 + 232) = 0;
      if (!flatbuffers::FieldDef::Deserialize(v38, a2, v37)
        || sub_1DF3489C8((uint64_t **)(a1 + 152), (const void **)v38, v38))
      {
        break;
      }
      if (*(_BYTE *)(a1 + 200))
      {
        v39 = sub_1DF348948((int *)(v38 + 152));
        if (++v33 >= v25)
        {
          v44 = v39 + v34;
          v45 = (*(_QWORD *)(a1 + 208) - 1) & -(v39 + v34);
        }
        else
        {
          v40 = &v48[v26[v33]];
          v41 = (int *)((char *)v40 + *v40);
          v42 = (unsigned __int16 *)((char *)v41 - *v41);
          if (*v42 < 0xBu)
          {
            v43 = 0;
          }
          else
          {
            v43 = v42[5];
            if (v43)
              v43 = *(unsigned __int16 *)((char *)v41 + v43);
          }
          v44 = v39 + v34;
          v45 = v43 - v39 - *(unsigned __int16 *)(v38 + 208);
        }
        *(_QWORD *)(v38 + 232) = v45;
        v34 = v45 + v44;
      }
      else
      {
        ++v33;
      }
      v11 = v33 >= v25;
      if (v33 == v47)
      {
        v11 = 1;
        goto LABEL_68;
      }
    }
    if (*(char *)(v38 + 207) < 0)
      operator delete(*(void **)(v38 + 184));
    sub_1DF367C54(v38 + 72);
    __p.__r_.__value_.__r.__words[0] = v38 + 48;
    sub_1DF370598((void ***)&__p);
    if (*(char *)(v38 + 47) < 0)
      operator delete(*(void **)(v38 + 24));
    if (*(char *)(v38 + 23) < 0)
      operator delete(*(void **)v38);
    MEMORY[0x1E0BFF788](v38, 0x10B2C40559199D4);
LABEL_68:
    operator delete(v26);
  }
  else
  {
    return 1;
  }
  return v11;
}

uint64_t flatbuffers::Definition::DeserializeAttributes(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  return sub_1DF364910(a1 + 72, a2, a3);
}

uint64_t flatbuffers::FieldDef::Deserialize(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int v7;
  unsigned int *v8;
  std::string::size_type v9;
  const void *v10;
  unsigned int v11;
  std::string *p_p;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  int *v16;
  uint64_t result;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  double v22;
  uint64_t v23;
  void **v24;
  std::string::size_type v25;
  uint64_t v26;
  void **v27;
  unsigned __int16 *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t *v35;
  BOOL v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned __int16 *v44;
  uint64_t v45;
  _DWORD *v46;
  unsigned __int16 *v47;
  uint64_t v48;
  std::string __p;

  v6 = *a3;
  if (*(unsigned __int16 *)((char *)a3 - v6) < 5u)
  {
    v7 = 0;
  }
  else
  {
    v7 = *(unsigned __int16 *)((char *)a3 - v6 + 4);
    LODWORD(v6) = *(int *)((char *)a3 + *(unsigned __int16 *)((char *)a3 - v6 + 4));
  }
  v8 = (unsigned int *)((char *)a3 + v7 + v6);
  v11 = *v8;
  v10 = v8 + 1;
  v9 = v11;
  if (v11 >= 0x17)
  {
    if ((v9 | 7) == 0x17)
      v13 = (v9 & 0xFFFFFFF8) + 8;
    else
      v13 = v9 | 7;
    p_p = (std::string *)operator new(v13 + 1);
    __p.__r_.__value_.__l.__size_ = v9;
    __p.__r_.__value_.__r.__words[2] = v13 - 0x7FFFFFFFFFFFFFFFLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_11;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v9;
  p_p = &__p;
  if ((_DWORD)v9)
LABEL_11:
    memcpy(p_p, v10, v9);
  p_p->__r_.__value_.__s.__data_[v9] = 0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = __p;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 296);
  v14 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v14 >= 7u && (v15 = v14[3]) != 0)
    v16 = (int *)((char *)a3 + v15 + *(unsigned int *)((char *)a3 + v15));
  else
    v16 = 0;
  result = flatbuffers::Type::Deserialize(a1 + 152, (_QWORD *)a2, v16);
  if ((_DWORD)result)
  {
    v18 = (unsigned __int16 *)((char *)a3 - *a3);
    if (*v18 < 0xBu)
    {
      LOWORD(v19) = 0;
    }
    else
    {
      v19 = v18[5];
      if (v18[5])
        LOWORD(v19) = *(_WORD *)((char *)a3 + v19);
    }
    *(_WORD *)(a1 + 208) = v19;
    v20 = *(_DWORD *)(a1 + 152);
    if (v20 > 0xFFFFFFFC || v20 - 1 <= 9)
    {
      sub_1DF345C20();
      v27 = (void **)(a1 + 184);
      if (*(char *)(a1 + 207) < 0)
        operator delete(*v27);
      *(_OWORD *)v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 200) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    }
    else
    {
      v21 = v20 + 4;
      if (v21 <= 0x10 && ((1 << v21) & 0x18001) != 0)
      {
        v22 = 0.0;
        if (*v18 >= 0xFu)
        {
          v23 = v18[7];
          if (v23)
            v22 = *(double *)((char *)a3 + v23);
        }
        sub_1DF362EF8(16, &__p, v22);
        v24 = (void **)(a1 + 184);
        if (*(char *)(a1 + 207) < 0)
          operator delete(*v24);
        *(_OWORD *)v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(a1 + 200) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        if (*(char *)(a1 + 207) < 0)
        {
          v26 = *(_QWORD *)(a1 + 184);
          v25 = *(_QWORD *)(a1 + 192);
        }
        else
        {
          v25 = *(unsigned __int8 *)(a1 + 207);
          v26 = a1 + 184;
        }
        v39 = v26 - 1;
        while (v25)
        {
          v40 = *(unsigned __int8 *)(v39 + v25--);
          if (v40 != 48)
          {
            if (v25 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
              std::string::erase((std::string *)(a1 + 184), v25, 0xFFFFFFFFFFFFFFFFLL);
            break;
          }
        }
      }
    }
    v28 = (unsigned __int16 *)((char *)a3 - *a3);
    v29 = *v28;
    if (v29 <= 0x10)
    {
      *(_BYTE *)(a1 + 216) = 0;
    }
    else
    {
      v30 = v28[8];
      if (v28[8])
        LOBYTE(v30) = *((_BYTE *)a3 + v30) != 0;
      *(_BYTE *)(a1 + 216) = v30;
      if (v29 > 0x12)
      {
        v31 = v28[9];
        if (v28[9])
          LOBYTE(v31) = *((_BYTE *)a3 + v31) != 0;
        *(_BYTE *)(a1 + 217) = v31;
        if (v29 > 0x14)
        {
          v32 = v28[10];
          if (v28[10])
            LOBYTE(v32) = *((_BYTE *)a3 + v32) != 0;
          *(_BYTE *)(a1 + 218) = v32;
          if (v29 >= 0x17 && (v33 = v28[11]) != 0)
            v34 = (int *)((char *)a3 + v33 + *(unsigned int *)((char *)a3 + v33));
          else
            v34 = 0;
LABEL_52:
          result = sub_1DF364910(a1 + 72, a2, v34);
          if (!(_DWORD)result)
            return result;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 10;
          strcpy((char *)&__p, "flexbuffer");
          v35 = sub_1DF370B40(a1 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
          v36 = (uint64_t *)(a1 + 80) == v35 || v35[7] == 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (v36)
              goto LABEL_62;
          }
          else if (v36)
          {
            goto LABEL_62;
          }
          *(_BYTE *)(a1 + 221) = 1;
          *(_BYTE *)(a2 + 1136) = 1;
          if (*(_DWORD *)(a1 + 152) != 14 || *(_DWORD *)(a1 + 156) != 4)
            return 0;
LABEL_62:
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 17;
          strcpy((char *)&__p, "nested_flatbuffer");
          v37 = sub_1DF370B40(a1 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
          if ((uint64_t *)(a1 + 80) == v37)
            v38 = 0;
          else
            v38 = v37[7];
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (!v38)
              goto LABEL_85;
          }
          else if (!v38)
          {
LABEL_85:
            v44 = (unsigned __int16 *)((char *)a3 - *a3);
            if (*v44 >= 0x19u && (v45 = v44[12]) != 0)
              v46 = (int *)((char *)a3 + v45 + *(unsigned int *)((char *)a3 + v45));
            else
              v46 = 0;
            flatbuffers::DeserializeDoc((int64x2_t *)(a1 + 48), v46);
            v47 = (unsigned __int16 *)((char *)a3 - *a3);
            if (*v47 < 0x1Bu)
            {
              LOBYTE(v48) = 0;
            }
            else
            {
              v48 = v47[13];
              if (v48)
                LOBYTE(v48) = *((_BYTE *)a3 + v48) != 0;
            }
            *(_BYTE *)(a1 + 222) = v48;
            return 1;
          }
          flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a2 + 296), v38 + 32, 0x3E8uLL, &__p);
          v41 = sub_1DF37099C(a2 + 128, (uint64_t)&__p);
          if (a2 + 136 == v41)
          {
            v42 = 0;
          }
          else
          {
            v42 = *(_QWORD *)(v41 + 56);
            if (v42)
            {
              v43 = 0;
              ++*(_DWORD *)(v42 + 144);
              goto LABEL_81;
            }
          }
          v43 = 1;
LABEL_81:
          *(_QWORD *)(a1 + 224) = v42;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((v43 & 1) == 0)
              goto LABEL_85;
          }
          else if ((v43 & 1) == 0)
          {
            goto LABEL_85;
          }
          return 0;
        }
LABEL_51:
        v34 = 0;
        *(_BYTE *)(a1 + 218) = 0;
        goto LABEL_52;
      }
    }
    *(_BYTE *)(a1 + 217) = 0;
    goto LABEL_51;
  }
  return result;
}

uint64_t flatbuffers::Type::Serialize(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 || (v2 = *(_QWORD *)(a1 + 16)) != 0)
    v3 = *(_DWORD *)(v2 + 140);
  else
    v3 = -1;
  return sub_1DF364CBC(a2, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), v3, *(unsigned __int16 *)(a1 + 24));
}

uint64_t flatbuffers::Type::Deserialize(uint64_t a1, _QWORD *a2, int *a3)
{
  unsigned __int16 *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!a3)
    return 1;
  v3 = (unsigned __int16 *)((char *)a3 - *a3);
  v4 = *v3;
  if (v4 <= 4)
  {
    *(_DWORD *)a1 = 0;
  }
  else
  {
    v5 = v3[2];
    if (v3[2])
      LODWORD(v5) = *((char *)a3 + v5);
    *(_DWORD *)a1 = v5;
    if (v4 > 6)
    {
      v6 = v3[3];
      if (v3[3])
        LODWORD(v6) = *((char *)a3 + v6);
      *(_DWORD *)(a1 + 4) = v6;
      if (v4 < 0xB)
      {
        LOWORD(v7) = 0;
      }
      else
      {
        v7 = v3[5];
        if (v3[5])
          LOWORD(v7) = *(_WORD *)((char *)a3 + v7);
      }
      goto LABEL_13;
    }
  }
  LOWORD(v7) = 0;
  *(_DWORD *)(a1 + 4) = 0;
LABEL_13:
  *(_WORD *)(a1 + 24) = v7;
  if (*v3 < 9u)
    return 1;
  if (!v3[4])
    return 1;
  v8 = *(unsigned int *)((char *)a3 + v3[4]);
  if ((v8 & 0x80000000) != 0)
    return 1;
  if (v3[2])
  {
    v9 = *((unsigned __int8 *)a3 + v3[2]);
    switch(v9)
    {
      case 17:
        goto LABEL_20;
      case 15:
        goto LABEL_22;
      case 14:
LABEL_20:
        v10 = v3[3];
        if (v10 && *((_BYTE *)a3 + v10) == 15)
        {
LABEL_22:
          v11 = a2[19];
          if (v8 < (a2[20] - v11) >> 3)
          {
            v12 = *(_QWORD *)(v11 + 8 * v8);
            *(_QWORD *)(a1 + 8) = v12;
            ++*(_DWORD *)(v12 + 144);
            return 1;
          }
          return 0;
        }
        break;
    }
  }
  v13 = a2[25];
  if (v8 < (a2[26] - v13) >> 3)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v13 + 8 * v8);
    return 1;
  }
  return 0;
}

uint64_t sub_1DF362EF8@<X0>(int a1@<W0>, std::string *a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  char v7;
  BOOL v8;
  std::string *v9;
  std::string::size_type size;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned __int8 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  std::string::size_type v23;
  char *v24[2];
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[11];
  char v30;
  uint64_t v31;

  sub_1DF367FB0((uint64_t)v28);
  v6 = v29[0];
  *(_DWORD *)((char *)&v29[1] + *(_QWORD *)(v29[0] - 24)) = *(_DWORD *)((_BYTE *)&v29[1] + *(_QWORD *)(v29[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v29[2] + *(_QWORD *)(v6 - 24)) = a1;
  std::ostream::operator<<();
  std::stringbuf::str();
  v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v8 = v7 < 0;
  v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if (v7 >= 0)
    v9 = a2;
  size = v7 & 0x7F;
  if (v8)
    size = a2->__r_.__value_.__l.__size_;
  while (size)
  {
    v11 = *((unsigned __int8 *)&v9[-1].__r_.__value_.__r.__words[2] + size-- + 7);
    if (v11 != 48)
    {
      if (size != -1)
      {
        v12 = v9->__r_.__value_.__s.__data_[size] == 46;
        v13 = 1;
        if (v12)
          v13 = 2;
        std::string::resize(a2, v13 + size, 0);
      }
      break;
    }
  }
  v14 = MEMORY[0x1E0DE4F50];
  v15 = MEMORY[0x1E0DE4FB8];
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = (char *)a2;
  else
    v16 = (char *)a2->__r_.__value_.__r.__words[0];
  v24[0] = v16;
  v17 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
  {
    qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
    __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
    __cxa_guard_release(&qword_1F04755F0);
  }
  v18 = strtod_l(v16, v24, (locale_t)qword_1F04755E8);
  if (v24[0] == v16 || *v24[0])
    v18 = 0.0;
  if (v18 != a3)
  {
    sub_1DF367FB0((uint64_t)v24);
    *(_DWORD *)((char *)&v25[1] + *(_QWORD *)(v25[0] - 24)) |= 0x104u;
    std::ostream::operator<<();
    std::stringbuf::str();
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      operator delete(a2->__r_.__value_.__l.__data_);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v22;
    a2->__r_.__value_.__r.__words[2] = v23;
    v24[0] = *(char **)v14;
    v19 = *(_QWORD *)(v14 + 72);
    *(char **)((char *)v24 + *((_QWORD *)v24[0] - 3)) = *(char **)(v14 + 64);
    v25[0] = v19;
    v25[1] = v15 + 16;
    if (v26 < 0)
      operator delete((void *)v25[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1E0BFF758](&v27);
  }
  v28[0] = *(_QWORD *)v14;
  v20 = *(_QWORD *)(v14 + 72);
  *(_QWORD *)((char *)v28 + *(_QWORD *)(v28[0] - 24)) = *(_QWORD *)(v14 + 64);
  v29[0] = v20;
  v29[1] = v15 + 16;
  if (v30 < 0)
    operator delete((void *)v29[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1E0BFF758](&v31);
}

uint64_t flatbuffers::RPCCall::Serialize(void **a1, uint64_t a2, uint64_t a3)
{
  char v6;
  BOOL v7;
  void *v8;
  size_t v9;
  size_t v10;
  int v11;
  int v12;
  int v13;
  _DWORD *v14;
  int v15;
  int v16;
  int v17;

  v6 = *((_BYTE *)a1 + 23);
  v7 = v6 < 0;
  if (v6 >= 0)
    v8 = a1;
  else
    v8 = *a1;
  v9 = v6 & 0x7F;
  if (v7)
    v10 = (size_t)a1[1];
  else
    v10 = v9;
  v11 = sub_1DF366A24(a2, v8, v10);
  v12 = sub_1DF364380(a2, a1 + 9, a3);
  if (*(_BYTE *)(a3 + 897))
    v13 = sub_1DF3622C0(a2, (uint64_t *)a1 + 6);
  else
    v13 = 0;
  v14 = a1[20];
  v15 = *((_DWORD *)a1[19] + 34);
  v16 = v14[34];
  *(_BYTE *)(a2 + 70) = 1;
  v17 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
  sub_1DF38384C((uint64_t *)a2, 12, v13);
  sub_1DF36AD60((uint64_t *)a2, 10, v12);
  sub_1DF36AD60((uint64_t *)a2, 8, v16);
  sub_1DF36AD60((uint64_t *)a2, 6, v15);
  sub_1DF354740((uint64_t *)a2, 4, v11);
  return sub_1DF3548F4(a2, v17);
}

uint64_t flatbuffers::RPCCall::Deserialize(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int v7;
  unsigned int *v8;
  size_t v9;
  const void *v10;
  unsigned int v11;
  __int128 *p_dst;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t result;
  unsigned __int16 *v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned __int16 *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  size_t v27;
  const void *v28;
  unsigned int v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  int *v36;
  uint64_t v37;
  int v38;
  unsigned int *v39;
  size_t v40;
  const void *v41;
  unsigned int v42;
  __int128 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 __dst;
  uint64_t v48;

  v6 = *a3;
  if (*(unsigned __int16 *)((char *)a3 - v6) < 5u)
  {
    v7 = 0;
  }
  else
  {
    v7 = *(unsigned __int16 *)((char *)a3 - v6 + 4);
    LODWORD(v6) = *(int *)((char *)a3 + *(unsigned __int16 *)((char *)a3 - v6 + 4));
  }
  v8 = (unsigned int *)((char *)a3 + v7 + v6);
  v11 = *v8;
  v10 = v8 + 1;
  v9 = v11;
  if (v11 >= 0x17)
  {
    if ((v9 | 7) == 0x17)
      v13 = (v9 & 0xFFFFFFF8) + 8;
    else
      v13 = v9 | 7;
    p_dst = (__int128 *)operator new(v13 + 1);
    *((_QWORD *)&__dst + 1) = v9;
    v48 = v13 - 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v48) = v9;
  p_dst = &__dst;
  if ((_DWORD)v9)
LABEL_11:
    memcpy(p_dst, v10, v9);
  *((_BYTE *)p_dst + v9) = 0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v48;
  v14 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
    v16 = (int *)((char *)a3 + v15 + *(unsigned int *)((char *)a3 + v15));
  else
    v16 = 0;
  result = sub_1DF364910(a1 + 72, a2, v16);
  if ((_DWORD)result)
  {
    v18 = (unsigned __int16 *)((char *)a3 - *a3);
    if (*v18 >= 0xDu && (v19 = v18[6]) != 0)
      v20 = (int *)((char *)a3 + v19 + *(unsigned int *)((char *)a3 + v19));
    else
      v20 = 0;
    flatbuffers::DeserializeDoc((int64x2_t *)(a1 + 48), v20);
    v21 = (unsigned __int16 *)((char *)a3 - *a3);
    if (*v21 < 7u)
    {
      v22 = 0;
    }
    else
    {
      v22 = (int *)v21[3];
      if (v22)
        v22 = (int *)((char *)v22 + (_QWORD)a3 + *(unsigned int *)((char *)v22 + (_QWORD)a3));
    }
    v23 = a2 + 128;
    v24 = *v22;
    if (*(unsigned __int16 *)((char *)v22 - v24) < 5u)
    {
      v25 = 0;
    }
    else
    {
      v25 = *(unsigned __int16 *)((char *)v22 - v24 + 4);
      LODWORD(v24) = *(int *)((char *)v22 + *(unsigned __int16 *)((char *)v22 - v24 + 4));
    }
    v26 = (unsigned int *)((char *)v22 + v25 + v24);
    v29 = *v26;
    v28 = v26 + 1;
    v27 = v29;
    if (v29 >= 0x17)
    {
      if ((v27 | 7) == 0x17)
        v31 = (v27 & 0xFFFFFFF8) + 8;
      else
        v31 = v27 | 7;
      v30 = (__int128 *)operator new(v31 + 1);
      *((_QWORD *)&__dst + 1) = v27;
      v48 = v31 - 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)&__dst = v30;
    }
    else
    {
      HIBYTE(v48) = v27;
      v30 = &__dst;
      if (!(_DWORD)v27)
      {
LABEL_38:
        *((_BYTE *)v30 + v27) = 0;
        v32 = sub_1DF37099C(a2 + 128, (uint64_t)&__dst);
        v33 = a2 + 136;
        if (a2 + 136 == v32)
          v34 = 0;
        else
          v34 = *(_QWORD *)(v32 + 56);
        *(_QWORD *)(a1 + 152) = v34;
        if (SHIBYTE(v48) < 0)
          operator delete((void *)__dst);
        v35 = (unsigned __int16 *)((char *)a3 - *a3);
        if (*v35 < 9u)
        {
          v36 = 0;
        }
        else
        {
          v36 = (int *)v35[4];
          if (v36)
            v36 = (int *)((char *)v36 + (_QWORD)a3 + *(unsigned int *)((char *)v36 + (_QWORD)a3));
        }
        v37 = *v36;
        if (*(unsigned __int16 *)((char *)v36 - v37) < 5u)
        {
          v38 = 0;
        }
        else
        {
          v38 = *(unsigned __int16 *)((char *)v36 - v37 + 4);
          LODWORD(v37) = *(int *)((char *)v36 + *(unsigned __int16 *)((char *)v36 - v37 + 4));
        }
        v39 = (unsigned int *)((char *)v36 + v38 + v37);
        v42 = *v39;
        v41 = v39 + 1;
        v40 = v42;
        if (v42 >= 0x17)
        {
          if ((v40 | 7) == 0x17)
            v44 = (v40 & 0xFFFFFFF8) + 8;
          else
            v44 = v40 | 7;
          v43 = (__int128 *)operator new(v44 + 1);
          *((_QWORD *)&__dst + 1) = v40;
          v48 = v44 - 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)&__dst = v43;
        }
        else
        {
          HIBYTE(v48) = v40;
          v43 = &__dst;
          if (!(_DWORD)v40)
            goto LABEL_58;
        }
        memmove(v43, v41, v40);
LABEL_58:
        *((_BYTE *)v43 + v40) = 0;
        v45 = sub_1DF37099C(v23, (uint64_t)&__dst);
        if (v33 == v45)
          v46 = 0;
        else
          v46 = *(_QWORD *)(v45 + 56);
        *(_QWORD *)(a1 + 160) = v46;
        if (SHIBYTE(v48) < 0)
          operator delete((void *)__dst);
        return *(_QWORD *)(a1 + 152) && *(_QWORD *)(a1 + 160) != 0;
      }
    }
    memmove(v30, v28, v27);
    goto LABEL_38;
  }
  return result;
}

uint64_t flatbuffers::ServiceDef::Deserialize(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  int v7;
  unsigned int *v8;
  std::string::size_type v9;
  const void *v10;
  unsigned int v11;
  std::string *p_p;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t result;
  uint64_t v26;
  unsigned __int16 *v27;
  uint64_t v28;
  _DWORD *v29;
  std::string __p;
  std::string v31;

  v6 = (int)*a3;
  if (*(unsigned __int16 *)((char *)a3 - v6) < 5u)
  {
    v7 = 0;
  }
  else
  {
    v7 = *(unsigned __int16 *)((char *)a3 - v6 + 4);
    LODWORD(v6) = *(unsigned int *)((char *)a3 + *(unsigned __int16 *)((char *)a3 - v6 + 4));
  }
  v8 = (unsigned int *)((char *)a3 + v7 + v6);
  v11 = *v8;
  v10 = v8 + 1;
  v9 = v11;
  if (v11 >= 0x17)
  {
    if ((v9 | 7) == 0x17)
      v13 = (v9 & 0xFFFFFFF8) + 8;
    else
      v13 = v9 | 7;
    p_p = (std::string *)operator new(v13 + 1);
    __p.__r_.__value_.__l.__size_ = v9;
    __p.__r_.__value_.__r.__words[2] = v13 - 0x7FFFFFFFFFFFFFFFLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_11;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v9;
  p_p = &__p;
  if ((_DWORD)v9)
LABEL_11:
    memcpy(p_p, v10, v9);
  p_p->__r_.__value_.__s.__data_[v9] = 0;
  flatbuffers::Parser::UnqualifiedName(a2, &__p, &v31);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v31;
  *((_BYTE *)&v31.__r_.__value_.__s + 23) = 0;
  v31.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v14 = 0;
  v15 = (int)*a3;
  v16 = *(unsigned __int16 *)((char *)a3 - v15);
  if (v16 >= 7)
  {
    if (*(_WORD *)((char *)a3 - v15 + 6))
    {
      v17 = 0;
      v18 = 4;
      while (1)
      {
        v15 = (int)*a3;
        v16 = *(unsigned __int16 *)((char *)a3 - v15);
        if (v16 < 7)
        {
          v19 = 0;
          v20 = *a3;
        }
        else
        {
          v19 = *(unsigned __int16 *)((char *)a3 - v15 + 6);
          v20 = *(unsigned int *)((char *)a3 + *(unsigned __int16 *)((char *)a3 - v15 + 6));
        }
        if (v17 >= *(unsigned int *)((char *)a3 + v19 + v20))
          break;
        v21 = operator new();
        v22 = v21;
        v23 = 0;
        *(_OWORD *)(v21 + 48) = 0u;
        *(_OWORD *)(v21 + 64) = 0u;
        *(_OWORD *)(v21 + 96) = 0u;
        *(_OWORD *)(v21 + 112) = 0u;
        *(_OWORD *)(v21 + 128) = 0u;
        *(_OWORD *)(v21 + 144) = 0u;
        *(_OWORD *)v21 = 0u;
        *(_OWORD *)(v21 + 16) = 0u;
        *(_OWORD *)(v21 + 32) = 0u;
        *(_QWORD *)(v21 + 160) = 0;
        *(_OWORD *)(v21 + 80) = 0u;
        *(_QWORD *)(v21 + 72) = v21 + 80;
        *(_QWORD *)(v21 + 96) = 0;
        *(_QWORD *)(v21 + 104) = 0;
        *(_BYTE *)(v21 + 120) = 0;
        *(_QWORD *)(v21 + 112) = 0;
        *(_QWORD *)(v21 + 140) = 0x1FFFFFFFFLL;
        v24 = (unsigned __int16 *)((char *)a3 - (int)*a3);
        if (*v24 >= 7u)
        {
          v23 = v24[3];
          if (v24[3])
            v23 += (uint64_t)a3 + *(unsigned int *)((char *)a3 + v23);
        }
        if (flatbuffers::RPCCall::Deserialize(v21, a2, (int *)(v23 + v18 + *(unsigned int *)(v23 + v18))))
        {
          ++v17;
          v18 += 4;
          if (!sub_1DF382198(a1 + 152, (const void **)v22, v22))
            continue;
        }
        sub_1DF367C54(v22 + 72);
        v31.__r_.__value_.__r.__words[0] = v22 + 48;
        sub_1DF370598((void ***)&v31);
        if (*(char *)(v22 + 47) < 0)
          operator delete(*(void **)(v22 + 24));
        if (*(char *)(v22 + 23) < 0)
          operator delete(*(void **)v22);
        MEMORY[0x1E0BFF788](v22, 0x10B2C40EE200C30);
        return 0;
      }
    }
    v26 = -v15;
    if (v16 >= 9 && *(_WORD *)((char *)a3 + v26 + 8))
      v14 = (unsigned int *)((char *)a3
                           + *(unsigned __int16 *)((char *)a3 + v26 + 8)
                           + *(unsigned int *)((char *)a3 + *(unsigned __int16 *)((char *)a3 + v26 + 8)));
    else
      v14 = 0;
  }
  result = sub_1DF364910(a1 + 72, a2, v14);
  if ((_DWORD)result)
  {
    v27 = (unsigned __int16 *)((char *)a3 - (int)*a3);
    if (*v27 >= 0xBu && (v28 = v27[5]) != 0)
      v29 = (unsigned int *)((char *)a3 + v28 + *(unsigned int *)((char *)a3 + v28));
    else
      v29 = 0;
    flatbuffers::DeserializeDoc((int64x2_t *)(a1 + 48), v29);
    return 1;
  }
  return result;
}

uint64_t flatbuffers::EnumVal::Serialize(void **a1, uint64_t a2, uint64_t a3)
{
  char v6;
  BOOL v7;
  void *v8;
  size_t v9;
  size_t v10;
  int v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;

  v6 = *((_BYTE *)a1 + 23);
  v7 = v6 < 0;
  if (v6 >= 0)
    v8 = a1;
  else
    v8 = *a1;
  v9 = v6 & 0x7F;
  if (v7)
    v10 = (size_t)a1[1];
  else
    v10 = v9;
  v11 = sub_1DF366A24(a2, v8, v10);
  v12 = a1[7];
  if (v12 || (v12 = a1[8]) != 0)
    v13 = v12[35];
  else
    v13 = -1;
  v14 = sub_1DF364CBC(a2, *((_DWORD *)a1 + 12), *((_DWORD *)a1 + 13), v13, *((unsigned __int16 *)a1 + 36));
  if (*(_BYTE *)(a3 + 897))
    v15 = sub_1DF3622C0(a2, (uint64_t *)a1 + 3);
  else
    v15 = 0;
  v16 = sub_1DF364380(a2, a1 + 11, a3);
  v17 = (uint64_t)a1[17];
  v18 = a1[7];
  if (v18)
    v19 = v18[34];
  else
    v19 = 0;
  v20 = *((unsigned __int8 *)a1 + 80);
  *(_BYTE *)(a2 + 70) = 1;
  v21 = *(_QWORD *)(a2 + 40);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(_QWORD *)(a2 + 32);
  v24 = v16;
  if (v17 || *(_BYTE *)(a2 + 80))
  {
    v25 = sub_1DF3823C8(a2, v17);
    sub_1DF366DF8((uint64_t *)a2, 6, v25);
  }
  sub_1DF36AD60((uint64_t *)a2, 14, v24);
  sub_1DF38384C((uint64_t *)a2, 12, v15);
  sub_1DF36AD60((uint64_t *)a2, 10, v14);
  sub_1DF36AD60((uint64_t *)a2, 8, v19);
  sub_1DF354740((uint64_t *)a2, 4, v11);
  if (v20 | *(unsigned __int8 *)(a2 + 80))
  {
    v26 = sub_1DF35327C(a2, v20);
    sub_1DF366DF8((uint64_t *)a2, 16, v26);
  }
  return sub_1DF3548F4(a2, (unsigned __int16)v23 - (unsigned __int16)v22 + (unsigned __int16)v21);
}

uint64_t flatbuffers::EnumDef::Deserialize(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int v7;
  unsigned int *v8;
  std::string::size_type v9;
  const void *v10;
  unsigned int v11;
  std::string *p_p;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  unsigned __int16 *v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  _DWORD *v33;
  std::string __p;
  std::string v35;

  v6 = *a3;
  if (*(unsigned __int16 *)((char *)a3 - v6) < 5u)
  {
    v7 = 0;
  }
  else
  {
    v7 = *(unsigned __int16 *)((char *)a3 - v6 + 4);
    LODWORD(v6) = *(int *)((char *)a3 + *(unsigned __int16 *)((char *)a3 - v6 + 4));
  }
  v8 = (unsigned int *)((char *)a3 + v7 + v6);
  v11 = *v8;
  v10 = v8 + 1;
  v9 = v11;
  if (v11 >= 0x17)
  {
    if ((v9 | 7) == 0x17)
      v13 = (v9 & 0xFFFFFFF8) + 8;
    else
      v13 = v9 | 7;
    p_p = (std::string *)operator new(v13 + 1);
    __p.__r_.__value_.__l.__size_ = v9;
    __p.__r_.__value_.__r.__words[2] = v13 - 0x7FFFFFFFFFFFFFFFLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v9;
    p_p = &__p;
    if (!(_DWORD)v9)
      goto LABEL_12;
  }
  memcpy(p_p, v10, v9);
LABEL_12:
  p_p->__r_.__value_.__s.__data_[v9] = 0;
  flatbuffers::Parser::UnqualifiedName((uint64_t)a2, &__p, &v35);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v35;
  *((_BYTE *)&v35.__r_.__value_.__s + 23) = 0;
  v35.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v14 = 0;
  v15 = 4;
  while (1)
  {
    v16 = *a3;
    v17 = (unsigned __int16 *)((char *)a3 - v16);
    v18 = *(unsigned __int16 *)((char *)a3 - v16);
    if (v18 < 7)
    {
      v19 = 0;
    }
    else
    {
      v19 = v17[3];
      LODWORD(v16) = *(int *)((char *)a3 + v17[3]);
    }
    if (v14 >= *(unsigned int *)((char *)a3 + v19 + v16))
      break;
    v20 = operator new();
    v21 = v20;
    v22 = 0;
    *(_BYTE *)(v20 + 80) = 0;
    *(_OWORD *)v20 = 0u;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
    *(_OWORD *)(v20 + 58) = 0u;
    *(_QWORD *)(v20 + 104) = 0;
    *(_QWORD *)(v20 + 96) = 0;
    *(_QWORD *)(v20 + 88) = v20 + 96;
    *(_OWORD *)(v20 + 112) = 0u;
    *(_OWORD *)(v20 + 128) = 0u;
    v23 = (unsigned __int16 *)((char *)a3 - *a3);
    if (*v23 >= 7u)
    {
      v22 = v23[3];
      if (v23[3])
        v22 += (uint64_t)a3 + *(unsigned int *)((char *)a3 + v22);
    }
    if (flatbuffers::EnumVal::Deserialize(v20, a2, (int *)(v22 + v15 + *(unsigned int *)(v22 + v15))))
    {
      ++v14;
      v15 += 4;
      if (!sub_1DF36402C((uint64_t **)(a1 + 184), (const void **)v21, v21))
        continue;
    }
    sub_1DF367C54(v21 + 88);
    v35.__r_.__value_.__r.__words[0] = v21 + 24;
    sub_1DF370598((void ***)&v35);
    if (*(char *)(v21 + 23) < 0)
      operator delete(*(void **)v21);
    MEMORY[0x1E0BFF788](v21, 0x10B2C4072A4B994);
    return 0;
  }
  if (v18 <= 8)
  {
    v27 = 0;
    *(_BYTE *)(a1 + 148) = 0;
  }
  else
  {
    v25 = v17[4];
    if (v17[4])
      LOBYTE(v25) = *((_BYTE *)a3 + v25) != 0;
    *(_BYTE *)(a1 + 148) = v25;
    if (v18 >= 0xB && (v26 = v17[5]) != 0)
      v27 = (int *)((char *)a3 + v26 + *(unsigned int *)((char *)a3 + v26));
    else
      v27 = 0;
  }
  result = flatbuffers::Type::Deserialize(a1 + 152, a2, v27);
  if ((_DWORD)result)
  {
    v28 = (unsigned __int16 *)((char *)a3 - *a3);
    if (*v28 >= 0xDu && (v29 = v28[6]) != 0)
      v30 = (int *)((char *)a3 + v29 + *(unsigned int *)((char *)a3 + v29));
    else
      v30 = 0;
    result = sub_1DF364910(a1 + 72, (uint64_t)a2, v30);
    if ((_DWORD)result)
    {
      v31 = (unsigned __int16 *)((char *)a3 - *a3);
      if (*v31 >= 0xFu && (v32 = v31[7]) != 0)
        v33 = (int *)((char *)a3 + v32 + *(unsigned int *)((char *)a3 + v32));
      else
        v33 = 0;
      flatbuffers::DeserializeDoc((int64x2_t *)(a1 + 48), v33);
      return 1;
    }
  }
  return result;
}

uint64_t flatbuffers::EnumVal::Deserialize(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int v7;
  unsigned int *v8;
  size_t v9;
  const void *v10;
  unsigned int v11;
  __int128 *p_dst;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t result;
  unsigned __int16 *v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  _DWORD *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  __int128 __dst;
  uint64_t v29;

  v6 = *a3;
  if (*(unsigned __int16 *)((char *)a3 - v6) < 5u)
  {
    v7 = 0;
  }
  else
  {
    v7 = *(unsigned __int16 *)((char *)a3 - v6 + 4);
    LODWORD(v6) = *(int *)((char *)a3 + *(unsigned __int16 *)((char *)a3 - v6 + 4));
  }
  v8 = (unsigned int *)((char *)a3 + v7 + v6);
  v11 = *v8;
  v10 = v8 + 1;
  v9 = v11;
  if (v11 >= 0x17)
  {
    if ((v9 | 7) == 0x17)
      v13 = (v9 & 0xFFFFFFF8) + 8;
    else
      v13 = v9 | 7;
    p_dst = (__int128 *)operator new(v13 + 1);
    *((_QWORD *)&__dst + 1) = v9;
    v29 = v13 - 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v29) = v9;
  p_dst = &__dst;
  if ((_DWORD)v9)
LABEL_11:
    memcpy(p_dst, v10, v9);
  *((_BYTE *)p_dst + v9) = 0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v29;
  v14 = (unsigned __int16 *)((char *)a3 - *a3);
  v15 = *v14;
  if (v15 <= 6)
  {
    v18 = 0;
    *(_QWORD *)(a1 + 136) = 0;
  }
  else
  {
    v16 = v14[3];
    if (v14[3])
      v16 = *(_QWORD *)((char *)a3 + v16);
    *(_QWORD *)(a1 + 136) = v16;
    if (v15 >= 0xB && (v17 = v14[5]) != 0)
      v18 = (int *)((char *)a3 + v17 + *(unsigned int *)((char *)a3 + v17));
    else
      v18 = 0;
  }
  result = flatbuffers::Type::Deserialize(a1 + 48, a2, v18);
  if ((_DWORD)result)
  {
    v20 = (unsigned __int16 *)((char *)a3 - *a3);
    if (*v20 >= 0xDu && (v21 = v20[6]) != 0)
      v22 = (int *)((char *)a3 + v21 + *(unsigned int *)((char *)a3 + v21));
    else
      v22 = 0;
    flatbuffers::DeserializeDoc((int64x2_t *)(a1 + 24), v22);
    v23 = (unsigned __int16 *)((char *)a3 - *a3);
    if (*v23 >= 0xFu && (v24 = v23[7]) != 0)
      v25 = (int *)((char *)a3 + v24 + *(unsigned int *)((char *)a3 + v24));
    else
      v25 = 0;
    result = sub_1DF364910(a1 + 88, (uint64_t)a2, v25);
    if ((_DWORD)result)
    {
      v26 = (unsigned __int16 *)((char *)a3 - *a3);
      if (*v26 < 0x11u)
      {
        LOBYTE(v27) = 0;
      }
      else
      {
        v27 = v26[8];
        if (v27)
          LOBYTE(v27) = *((_BYTE *)a3 + v27) != 0;
      }
      *(_BYTE *)(a1 + 80) = v27;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1DF36402C(uint64_t **a1, const void **a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  size_t v11;
  const void *v12;
  const void *v13;
  size_t v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t *v17;
  size_t v18;
  size_t v19;
  int v20;
  _BOOL4 v21;
  BOOL v22;
  uint64_t **v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t *v26;
  char v27;
  int v28;
  uint64_t *v29;
  size_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  int v34;
  _BOOL4 v35;
  uint64_t **v36;
  size_t v37;
  uint64_t *v38;
  size_t v39;
  size_t v40;
  size_t v41;
  int v42;
  _BOOL4 v43;
  size_t v44;
  int v45;
  _BOOL4 v46;
  _QWORD *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t result;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  const void **v62;

  v7 = a1[4];
  v6 = (unint64_t)a1[5];
  if ((unint64_t)v7 >= v6)
  {
    v53 = a1[3];
    v54 = v7 - v53;
    v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 61)
      abort();
    v56 = v6 - (_QWORD)v53;
    if (v56 >> 2 > v55)
      v55 = v56 >> 2;
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
      v57 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v57 = v55;
    if (v57)
    {
      if (v57 >> 61)
        sub_1DF3667C0();
      v58 = (char *)operator new(8 * v57);
    }
    else
    {
      v58 = 0;
    }
    v59 = &v58[8 * v54];
    v60 = &v58[8 * v57];
    *(_QWORD *)v59 = a3;
    v8 = (uint64_t *)(v59 + 8);
    if (v7 != v53)
    {
      do
      {
        v61 = *--v7;
        *((_QWORD *)v59 - 1) = v61;
        v59 -= 8;
      }
      while (v7 != v53);
      v7 = a1[3];
    }
    a1[3] = (uint64_t *)v59;
    a1[4] = v8;
    a1[5] = (uint64_t *)v60;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v7 = a3;
    v8 = v7 + 1;
  }
  v9 = a1 + 1;
  v10 = (uint64_t **)a1[1];
  a1[4] = v8;
  v11 = *((unsigned __int8 *)a2 + 23);
  v62 = a2;
  if (!v10)
  {
    v36 = a1 + 1;
LABEL_67:
    v47 = operator new(0x40uLL);
    v48 = v47 + 4;
    if ((v11 & 0x80) != 0)
    {
      sub_1DF36DA38(v48, (void *)*v62, (unint64_t)v62[1]);
    }
    else
    {
      *(_OWORD *)v48 = *(_OWORD *)v62;
      v47[6] = v62[2];
    }
    v49 = a3;
    v47[7] = 0;
    *v47 = 0;
    v47[1] = 0;
    v47[2] = v36;
    *v9 = v47;
    v50 = (uint64_t *)**a1;
    v51 = v47;
    if (v50)
    {
      *a1 = v50;
      v51 = *v9;
    }
    sub_1DF36718C(a1[1], v51);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_72:
    result = 0;
    v47[7] = v49;
    return result;
  }
  v12 = a2[1];
  if ((v11 & 0x80u) == 0)
    v13 = a2;
  else
    v13 = *a2;
  if ((v11 & 0x80u) == 0)
    v14 = v11 & 0x7F;
  else
    v14 = (size_t)a2[1];
  v15 = v10;
  v16 = a1 + 1;
  do
  {
    if (*((char *)v15 + 55) < 0)
    {
      v17 = v15[4];
      v18 = (size_t)v15[5];
    }
    else
    {
      v17 = (uint64_t *)(v15 + 4);
      v18 = *((unsigned __int8 *)v15 + 55);
    }
    if (v14 >= v18)
      v19 = v18;
    else
      v19 = v14;
    v20 = memcmp(v17, v13, v19);
    v21 = v18 < v14;
    if (v20)
      v21 = v20 < 0;
    v22 = !v21;
    if (v21)
      v23 = v15 + 1;
    else
      v23 = v15;
    if (v22)
      v16 = v15;
    v15 = (uint64_t **)*v23;
  }
  while (*v23);
  if (v16 == v9)
  {
    if ((v11 & 0x80u) == 0)
      v32 = v11;
    else
      v32 = (size_t)v12;
    goto LABEL_43;
  }
  v26 = v16[4];
  v25 = v16 + 4;
  v24 = v26;
  v27 = *((_BYTE *)v25 + 23);
  v28 = v27;
  if (v27 >= 0)
    v29 = v25;
  else
    v29 = v24;
  v30 = v27 & 0x7F;
  if (v28 >= 0)
    v31 = v30;
  else
    v31 = v25[1];
  if ((v11 & 0x80u) == 0)
    v32 = v11;
  else
    v32 = (size_t)v12;
  if (v31 >= v32)
    v33 = v32;
  else
    v33 = v31;
  v34 = memcmp(v13, v29, v33);
  v35 = v32 < v31;
  if (v34)
    v35 = v34 < 0;
  if (v35)
  {
    while (1)
    {
      while (1)
      {
LABEL_43:
        v36 = v10;
        v37 = *((unsigned __int8 *)v10 + 55);
        if ((v37 & 0x80u) == 0)
          v38 = (uint64_t *)(v10 + 4);
        else
          v38 = v10[4];
        v39 = (size_t)v10[5];
        if ((v37 & 0x80u) == 0)
          v40 = v37 & 0x7F;
        else
          v40 = (size_t)v10[5];
        if (v40 >= v32)
          v41 = v32;
        else
          v41 = v40;
        v42 = memcmp(v13, v38, v41);
        v43 = v32 < v40;
        if (v42)
          v43 = v42 < 0;
        if (!v43)
          break;
        v10 = (uint64_t **)*v10;
        v9 = v36;
        if (!*v36)
          goto LABEL_67;
      }
      if ((v37 & 0x80u) != 0)
        v37 = v39;
      if (v32 >= v37)
        v44 = v37;
      else
        v44 = v32;
      v45 = memcmp(v38, v13, v44);
      v46 = v37 < v32;
      if (v45)
        v46 = v45 < 0;
      if (!v46)
        break;
      v10 = (uint64_t **)v10[1];
      if (!v10)
      {
        v9 = v36 + 1;
        goto LABEL_67;
      }
    }
    v47 = v10;
    v49 = a3;
    goto LABEL_72;
  }
  return 1;
}

uint64_t sub_1DF364380(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  void *v15;
  size_t v16;
  size_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  char v23;
  void *v24;
  size_t v25;
  size_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  int v35;
  _QWORD *v36;
  _QWORD *v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;

  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    return 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v70 = a3 + 704;
  do
  {
    v12 = sub_1DF383318(v70, v4 + 4);
    if (*(_BYTE *)(a3 + 898) || !*(_BYTE *)(v12 + 56))
    {
      v13 = *((_BYTE *)v4 + 55);
      v14 = v13 < 0;
      if (v13 >= 0)
        v15 = v4 + 4;
      else
        v15 = (void *)v4[4];
      v16 = v13 & 0x7F;
      if (v14)
        v17 = v4[5];
      else
        v17 = v16;
      v18 = sub_1DF366A24(a1, v15, v17);
      v19 = v4[7];
      v22 = *(void **)(v19 + 32);
      v20 = v19 + 32;
      v21 = v22;
      v23 = *(_BYTE *)(v20 + 23);
      if (v23 >= 0)
        v24 = (void *)v20;
      else
        v24 = v21;
      v25 = *(_QWORD *)(v20 + 8);
      if (v23 >= 0)
        v26 = v23 & 0x7F;
      else
        v26 = v25;
      v27 = sub_1DF366A24(a1, v24, v26);
      *(_BYTE *)(a1 + 70) = 1;
      v28 = *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40);
      sub_1DF354740((uint64_t *)a1, 6, v27);
      sub_1DF354740((uint64_t *)a1, 4, v18);
      v29 = sub_1DF3548F4(a1, v28);
      v30 = v29;
      if (v9 >= v10)
      {
        v31 = (v9 - v11) >> 2;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 62)
          abort();
        if ((v10 - v11) >> 1 > v32)
          v32 = (v10 - v11) >> 1;
        if ((unint64_t)(v10 - v11) >= 0x7FFFFFFFFFFFFFFCLL)
          v33 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v33 = v32;
        if (v33)
        {
          if (v33 >> 62)
            sub_1DF3667C0();
          v34 = (char *)operator new(4 * v33);
        }
        else
        {
          v34 = 0;
        }
        v7 = &v34[4 * v31];
        *(_DWORD *)v7 = v30;
        v8 = v7 + 4;
        while (v9 != v11)
        {
          v35 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v7 - 1) = v35;
          v7 -= 4;
        }
        v10 = &v34[4 * v33];
        if (v11)
          operator delete(v11);
        v9 = v8;
        v11 = v7;
      }
      else
      {
        *(_DWORD *)v9 = v29;
        v9 += 4;
        v8 = v9;
      }
    }
    v36 = (_QWORD *)v4[1];
    if (v36)
    {
      do
      {
        v37 = v36;
        v36 = (_QWORD *)*v36;
      }
      while (v36);
    }
    else
    {
      do
      {
        v37 = (_QWORD *)v4[2];
        v38 = *v37 == (_QWORD)v4;
        v4 = v37;
      }
      while (!v38);
    }
    v4 = v37;
  }
  while (v37 != v3);
  if (v9 == v11)
  {
    v68 = 0;
    v7 = v9;
    if (!v9)
      return v68;
LABEL_95:
    operator delete(v7);
    return v68;
  }
  v39 = (v8 - v7) >> 2;
  v40 = 126 - 2 * __clz(v39);
  v41 = v8 - v7;
  if (v8 == v7)
    v42 = &flatbuffers::data<flatbuffers::Offset<reflection::KeyValue>,std::allocator<flatbuffers::Offset<reflection::KeyValue>>>(std::vector<flatbuffers::Offset<reflection::KeyValue>> &)::t;
  else
    v42 = v7;
  v71 = a1;
  if (v8 == v7)
    v43 = 0;
  else
    v43 = v40;
  sub_1DF36AF14((uint64_t)v42, (_DWORD *)((char *)v42 + v41), (uint64_t)&v71, v43, 1);
  *(_BYTE *)(a1 + 70) = 1;
  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v44 = *(_QWORD *)(a1 + 48);
  v45 = ((_BYTE)v44 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v44 - *(_QWORD *)(a1 + 56) < v45)
  {
    sub_1DF366C90((uint64_t *)a1, ((_BYTE)v44 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v45;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v44 - v45;
    if (!v45)
      goto LABEL_57;
  }
  v46 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v46++) = 0;
  while (v45 != v46);
  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
LABEL_57:
  v47 = *(_QWORD *)(a1 + 48);
  v48 = ((_BYTE)v47 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v47 - *(_QWORD *)(a1 + 56) < v48)
  {
    sub_1DF366C90((uint64_t *)a1, ((_BYTE)v47 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v48;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v47 - v48;
    if (!v48)
      goto LABEL_61;
  }
  v49 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v49++) = 0;
  while (v48 != v49);
LABEL_61:
  if (v7 != v8)
  {
    do
    {
      v50 = v42[--v39];
      if (*(_QWORD *)(a1 + 72) <= 3uLL)
        *(_QWORD *)(a1 + 72) = 4;
      v51 = *(_QWORD *)(a1 + 32);
      v52 = *(_QWORD *)(a1 + 40);
      v53 = *(_QWORD *)(a1 + 48);
      v54 = ((int)v53 - ((int)v51 + (int)v52)) & 3;
      if (v53 - *(_QWORD *)(a1 + 56) < v54)
      {
        sub_1DF366C90((uint64_t *)a1, ((int)v53 - ((int)v51 + (int)v52)) & 3);
        *(_QWORD *)(a1 + 48) -= v54;
      }
      else
      {
        v55 = v53 - v54;
        *(_QWORD *)(a1 + 48) = v55;
        if (!v54)
        {
          v56 = v51 + v52 - v55;
          goto LABEL_72;
        }
      }
      v57 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a1 + 48) + v57++) = 0;
      while (v54 != v57);
      v52 = *(_QWORD *)(a1 + 40);
      v55 = *(_QWORD *)(a1 + 48);
      v51 = *(_QWORD *)(a1 + 32);
      v56 = v51 - v55 + v52;
      if (*(_QWORD *)(a1 + 72) <= 3uLL)
        *(_QWORD *)(a1 + 72) = 4;
LABEL_72:
      v58 = ((_BYTE)v55 - ((_BYTE)v51 + (_BYTE)v52)) & 3;
      v59 = *(_QWORD *)(a1 + 56);
      if (v55 - v59 < v58)
      {
        sub_1DF366C90((uint64_t *)a1, v58);
        *(_QWORD *)(a1 + 48) -= v58;
LABEL_74:
        v61 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a1 + 48) + v61++) = 0;
        while (v58 != v61);
        v60 = *(_QWORD *)(a1 + 48);
        v59 = *(_QWORD *)(a1 + 56);
        goto LABEL_77;
      }
      v60 = v55 - v58;
      *(_QWORD *)(a1 + 48) = v55 - v58;
      if (v58)
        goto LABEL_74;
LABEL_77:
      if ((unint64_t)(v60 - v59) <= 3)
      {
        sub_1DF366C90((uint64_t *)a1, 4uLL);
        v60 = *(_QWORD *)(a1 + 48);
      }
      *(_DWORD *)(v60 - 4) = v56 - v50 + 4;
      *(_QWORD *)(a1 + 48) = v60 - 4;
    }
    while (v39);
  }
  *(_BYTE *)(a1 + 70) = 0;
  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v62 = *(_QWORD *)(a1 + 48);
  v63 = *(_QWORD *)(a1 + 56);
  v64 = ((_BYTE)v62 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v62 - v63 < v64)
  {
    sub_1DF366C90((uint64_t *)a1, ((_BYTE)v62 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v64;
  }
  else
  {
    v65 = v62 - v64;
    *(_QWORD *)(a1 + 48) = v65;
    if (!v64)
      goto LABEL_89;
  }
  v66 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v66++) = 0;
  while (v64 != v66);
  v65 = *(_QWORD *)(a1 + 48);
  v63 = *(_QWORD *)(a1 + 56);
LABEL_89:
  if ((unint64_t)(v65 - v63) <= 3)
  {
    sub_1DF366C90((uint64_t *)a1, 4uLL);
    v65 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(v65 - 4) = v41 >> 2;
  v67 = v65 - 4;
  *(_QWORD *)(a1 + 48) = v67;
  v68 = (*(_DWORD *)(a1 + 32) - v67 + *(_DWORD *)(a1 + 40));
  if (v7)
    goto LABEL_95;
  return v68;
}

uint64_t sub_1DF364910(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  __int128 *p_dst;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  __int128 *v21;
  uint64_t v22;
  _BOOL4 v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  char *v34;
  __int128 __dst;
  uint64_t v36;
  __int128 *v37;

  if (!a3)
    return 1;
  v4 = 1;
  if (*a3)
  {
    v5 = 0;
    v6 = 0;
    v32 = a2 + 704;
    while (1)
    {
      v7 = a3[v5 + 1];
      v8 = operator new();
      *(_WORD *)(v8 + 32) = 48;
      v9 = (void **)(v8 + 32);
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)v8 = 0;
      *(_WORD *)(v8 + 24) = 0;
      *(_BYTE *)(v8 + 55) = 1;
      *(_WORD *)(v8 + 56) = -1;
      v34 = (char *)&a3[v5] + v7;
      LODWORD(v10) = *((_DWORD *)v34 + 1);
      v11 = -(uint64_t)(int)v10;
      v12 = *(unsigned __int16 *)((char *)&a3[v5 + 1] + v7 - (int)v10);
      if (v12 < 7)
        goto LABEL_17;
      v13 = *(unsigned __int16 *)((char *)&a3[v5 + 2] + v7 - (int)v10 + 2);
      if (!v13)
        goto LABEL_18;
      v14 = (char *)a3 + v7 + v13 + v5 * 4 + *(unsigned int *)((char *)&a3[v5 + 1] + v7 + v13);
      v15 = *((unsigned int *)v14 + 1);
      if (v15 >= 0x17)
      {
        v17 = (v15 & 0xFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v17 = v15 | 7;
        v31 = v17;
        p_dst = (__int128 *)operator new(v17 + 1);
        *((_QWORD *)&__dst + 1) = v15;
        v36 = v31 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v36) = *((_DWORD *)v14 + 1);
        p_dst = &__dst;
        if (!(_DWORD)v15)
          goto LABEL_14;
      }
      memcpy(p_dst, v14 + 8, v15);
LABEL_14:
      *((_BYTE *)p_dst + v15) = 0;
      if (*(char *)(v8 + 55) < 0)
        operator delete(*v9);
      *(_OWORD *)v9 = __dst;
      *(_QWORD *)(v8 + 48) = v36;
      v10 = *((int *)v34 + 1);
      v11 = -v10;
      v12 = *(unsigned __int16 *)((char *)&a3[v5 + 1] + v7 - v10);
LABEL_17:
      if (v12 >= 5)
      {
LABEL_18:
        v18 = *(unsigned __int16 *)((char *)a3 + v7 + v11 + v5 * 4 + 8);
        LODWORD(v10) = *(_DWORD *)((char *)a3 + v7 + v5 * 4 + v18 + 4);
        goto LABEL_20;
      }
      LODWORD(v18) = 0;
LABEL_20:
      v19 = (unint64_t)a3 + v7 + v5 * 4 + v18 + v10;
      v20 = *(unsigned int *)(v19 + 4);
      if (v20 >= 0x17)
      {
        if ((v20 | 7) == 0x17)
          v22 = (v20 & 0xFFFFFFF8) + 8;
        else
          v22 = v20 | 7;
        v21 = (__int128 *)operator new(v22 + 1);
        *((_QWORD *)&__dst + 1) = v20;
        v36 = v22 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = v21;
LABEL_27:
        memcpy(v21, (const void *)(v19 + 8), v20);
        goto LABEL_28;
      }
      HIBYTE(v36) = *(_DWORD *)(v19 + 4);
      v21 = &__dst;
      if ((_DWORD)v20)
        goto LABEL_27;
LABEL_28:
      *((_BYTE *)v21 + v20) = 0;
      v23 = sub_1DF382198(a1, (const void **)&__dst, v8);
      if (SHIBYTE(v36) < 0)
        operator delete((void *)__dst);
      if (v23)
      {
        if (*(char *)(v8 + 55) < 0)
          operator delete(*v9);
        MEMORY[0x1E0BFF788](v8, 0x1032C40E9BF265ALL);
        return 0;
      }
      v24 = *((_DWORD *)v34 + 1);
      if (*(unsigned __int16 *)((char *)&a3[v5 + 1] + v7 - (int)v24) < 5u)
      {
        LODWORD(v25) = 0;
      }
      else
      {
        v25 = *(unsigned __int16 *)((char *)&a3[v5 + 2] + v7 - (int)v24);
        v24 = *(_DWORD *)((char *)a3 + v7 + v5 * 4 + v25 + 4);
      }
      v26 = (unint64_t)a3 + v7 + v5 * 4 + v25 + v24;
      v27 = *(unsigned int *)(v26 + 4);
      if (v27 >= 0x17)
      {
        if ((v27 | 7) == 0x17)
          v29 = (v27 & 0xFFFFFFF8) + 8;
        else
          v29 = v27 | 7;
        v28 = (__int128 *)operator new(v29 + 1);
        *((_QWORD *)&__dst + 1) = v27;
        v36 = v29 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = v28;
      }
      else
      {
        HIBYTE(v36) = *(_DWORD *)(v26 + 4);
        v28 = &__dst;
        if (!(_DWORD)v27)
          goto LABEL_42;
      }
      memcpy(v28, (const void *)(v26 + 8), v27);
LABEL_42:
      *((_BYTE *)v28 + v27) = 0;
      v37 = &__dst;
      sub_1DF366F5C(v32, (const void **)&__dst, &v37);
      if (SHIBYTE(v36) < 0)
        operator delete((void *)__dst);
      ++v6;
      ++v5;
      if (v6 >= *a3)
        return 1;
    }
  }
  return v4;
}

uint64_t sub_1DF364CBC(uint64_t a1, char a2, char a3, int a4, int a5)
{
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;

  v10 = 1;
  *(_BYTE *)(a1 + 70) = 1;
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 32);
  if (a4 == -1 && !*(_BYTE *)(a1 + 80))
    goto LABEL_13;
  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v14 = ((_BYTE)v12 - ((_BYTE)v13 + (_BYTE)v11)) & 3;
  v15 = *(_QWORD *)(a1 + 56);
  if (v12 - v15 < v14)
  {
    sub_1DF366C90((uint64_t *)a1, ((_BYTE)v12 - ((_BYTE)v13 + (_BYTE)v11)) & 3);
    v14 = ((_BYTE)v12 - ((_BYTE)v13 + (_BYTE)v11)) & 3;
    *(_QWORD *)(a1 + 48) -= v14;
LABEL_7:
    v17 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a1 + 48) + v17++) = 0;
    while (v14 != v17);
    v16 = *(_QWORD *)(a1 + 48);
    v15 = *(_QWORD *)(a1 + 56);
    goto LABEL_10;
  }
  v16 = v12 - v14;
  *(_QWORD *)(a1 + 48) = v12 - v14;
  if ((((_BYTE)v12 - ((_BYTE)v13 + (_BYTE)v11)) & 3) != 0)
    goto LABEL_7;
LABEL_10:
  if ((unint64_t)(v16 - v15) <= 3)
  {
    sub_1DF366C90((uint64_t *)a1, 4uLL);
    v16 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(v16 - 4) = a4;
  v18 = v16 - 4;
  *(_QWORD *)(a1 + 48) = v18;
  sub_1DF366DF8((uint64_t *)a1, 8, *(_DWORD *)(a1 + 32) - v18 + *(_DWORD *)(a1 + 40));
  v10 = *(_BYTE *)(a1 + 80) == 0;
LABEL_13:
  if (a5 || !v10)
  {
    v24 = sub_1DF3822E0(a1, a5);
    sub_1DF366DF8((uint64_t *)a1, 10, v24);
    v19 = *(_BYTE *)(a1 + 80) == 0;
  }
  else
  {
    v19 = 1;
  }
  if (a3 || !v19)
  {
    if (!*(_QWORD *)(a1 + 72))
      *(_QWORD *)(a1 + 72) = 1;
    v21 = *(_QWORD *)(a1 + 48);
    if (v21 == *(_QWORD *)(a1 + 56))
    {
      sub_1DF366C90((uint64_t *)a1, 1uLL);
      v21 = *(_QWORD *)(a1 + 48);
    }
    *(_QWORD *)(a1 + 48) = v21 - 1;
    *(_BYTE *)(v21 - 1) = a3;
    sub_1DF366DF8((uint64_t *)a1, 6, *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
    v20 = *(_BYTE *)(a1 + 80) == 0;
  }
  else
  {
    v20 = 1;
  }
  if (a2 || !v20)
  {
    if (!*(_QWORD *)(a1 + 72))
      *(_QWORD *)(a1 + 72) = 1;
    v22 = *(_QWORD *)(a1 + 48);
    if (v22 == *(_QWORD *)(a1 + 56))
    {
      sub_1DF366C90((uint64_t *)a1, 1uLL);
      v22 = *(_QWORD *)(a1 + 48);
    }
    *(_QWORD *)(a1 + 48) = v22 - 1;
    *(_BYTE *)(v22 - 1) = a2;
    sub_1DF366DF8((uint64_t *)a1, 4, *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
  }
  return sub_1DF3548F4(a1, (unsigned __int16)v13 - (unsigned __int16)v12 + (unsigned __int16)v11);
}

uint64_t flatbuffers::Parser::Deserialize(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  __int128 *p_dst;
  uint64_t v11;
  void **v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  size_t v43;
  void *p_p;
  uint64_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  _DWORD *v52;
  size_t v53;
  void *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  size_t v77;
  char *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  size_t v89;
  char *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unsigned int *v96;
  _QWORD *v97;
  char **v98;
  unsigned __int16 *v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  size_t v107;
  char *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int *v116;
  _QWORD *v117;
  uint64_t v118;
  char *v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  size_t v128;
  char *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int16 *v139;
  unsigned int v140;
  unsigned int *v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unint64_t v145;
  size_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  void *__p;
  size_t v153;
  uint64_t v154;
  __int128 __dst;
  uint64_t v156;
  void **v157;

  v3 = a1;
  v4 = (unsigned __int16 *)((char *)a2 - (int)*a2);
  if (*v4 < 9u || (v5 = v4[4]) == 0)
  {
    HIBYTE(v156) = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_13;
  }
  v6 = (unsigned int *)((char *)a2 + v5);
  v7 = *v6;
  v9 = (char *)v6 + v7 + 4;
  v8 = *(unsigned int *)((char *)v6 + v7);
  if (v8 >= 0x17)
  {
    if ((v8 | 7) == 0x17)
      v11 = (v8 & 0xFFFFFFF8) + 8;
    else
      v11 = v8 | 7;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = v8;
    v156 = v11 - 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v156) = *(unsigned int *)((char *)v6 + v7);
    p_dst = &__dst;
    if (!(_DWORD)v8)
      goto LABEL_12;
  }
  memcpy(p_dst, v9, v8);
LABEL_12:
  v3 = a1;
  *((_BYTE *)p_dst + v8) = 0;
LABEL_13:
  v12 = (void **)(v3 + 584);
  if (*(char *)(v3 + 607) < 0)
    operator delete(*v12);
  *(_OWORD *)v12 = __dst;
  *(_QWORD *)(v3 + 600) = v156;
  v13 = (unsigned __int16 *)((char *)a2 - (int)*a2);
  if (*v13 < 0xBu || (v14 = v13[5]) == 0)
  {
    HIBYTE(v156) = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_27;
  }
  v15 = (unsigned int *)((char *)a2 + v14);
  v16 = *v15;
  v18 = (char *)v15 + v16 + 4;
  v17 = *(unsigned int *)((char *)v15 + v16);
  if (v17 >= 0x17)
  {
    if ((v17 | 7) == 0x17)
      v20 = (v17 & 0xFFFFFFF8) + 8;
    else
      v20 = v17 | 7;
    v19 = (__int128 *)operator new(v20 + 1);
    *((_QWORD *)&__dst + 1) = v17;
    v156 = v20 - 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)&__dst = v19;
  }
  else
  {
    HIBYTE(v156) = *(unsigned int *)((char *)v15 + v16);
    v19 = &__dst;
    if (!(_DWORD)v17)
      goto LABEL_26;
  }
  memcpy(v19, v18, v17);
LABEL_26:
  v3 = a1;
  *((_BYTE *)v19 + v17) = 0;
LABEL_27:
  v21 = (void **)(v3 + 608);
  if (*(char *)(v3 + 631) < 0)
    operator delete(*v21);
  v22 = 0;
  *(_OWORD *)v21 = __dst;
  *(_QWORD *)(v3 + 624) = v156;
  *((_QWORD *)&__dst + 1) = 0;
  v156 = 0;
  *(_QWORD *)&__dst = (char *)&__dst + 8;
  v23 = (unsigned __int16 *)((char *)a2 - (int)*a2);
  if (*v23 >= 5u)
  {
    v22 = v23[2];
    if (v23[2])
      v22 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v22);
  }
  v24 = v3 + 128;
  v25 = (uint64_t **)(v3 + 80);
  v26 = v22 + 8;
  while (1)
  {
    v27 = (int)*a2;
    v28 = (char *)a2 - v27;
    v29 = *(unsigned __int16 *)((char *)a2 - v27);
    if (v29 < 5)
    {
      v30 = 0;
    }
    else
    {
      v30 = *((unsigned __int16 *)v28 + 2);
      LODWORD(v27) = *(unsigned int *)((char *)a2 + *((unsigned __int16 *)v28 + 2));
    }
    if ((unsigned int *)(v26 - 4) == (unsigned int *)((char *)&a2[*(unsigned int *)((char *)a2 + v30
                                                                                                + v27)
                                                                 + 1]
                                                     + v30
                                                     + v27))
      break;
    v31 = operator new();
    v32 = v31;
    *(_OWORD *)v31 = 0u;
    *(_OWORD *)(v31 + 16) = 0u;
    *(_OWORD *)(v31 + 32) = 0u;
    *(_OWORD *)(v31 + 48) = 0u;
    *(_QWORD *)(v31 + 88) = 0;
    *(_QWORD *)(v31 + 96) = 0;
    *(_QWORD *)(v31 + 80) = 0;
    *(_QWORD *)(v31 + 64) = 0;
    *(_QWORD *)(v31 + 72) = v31 + 80;
    *(_QWORD *)(v31 + 128) = 0;
    *(_QWORD *)(v31 + 104) = 0;
    *(_QWORD *)(v31 + 112) = 0;
    *(_BYTE *)(v31 + 120) = 0;
    *(_QWORD *)(v31 + 136) = 0xFFFFFFFF00000000;
    *(_DWORD *)(v31 + 144) = 1;
    *(_QWORD *)(v31 + 160) = 0;
    *(_QWORD *)(v31 + 152) = v31 + 160;
    *(_QWORD *)(v31 + 168) = 0;
    *(_QWORD *)(v31 + 176) = 0;
    *(_QWORD *)(v31 + 184) = 0;
    *(_QWORD *)(v31 + 192) = 0;
    *(_BYTE *)(v31 + 200) = 0;
    *(_WORD *)(v31 + 201) = 257;
    *(_BYTE *)(v31 + 203) = 0;
    *(_QWORD *)(v31 + 208) = 1;
    *(_QWORD *)(v31 + 216) = 0;
    *(_QWORD *)(v31 + 224) = 0;
    v33 = *(unsigned int *)(v26 - 4);
    v34 = *(_DWORD *)(v26 + v33 - 4);
    v35 = (int)v34;
    v36 = *(unsigned __int16 *)(v26 + v33 - (int)v34 - 4);
    if (v36 >= 0xD)
    {
      v37 = *(unsigned __int16 *)(v26 + v33 - (int)v34 + 8);
      if (*(_WORD *)(v26 + v33 - v35 + 8))
        LODWORD(v37) = *(_DWORD *)(v26 + v33 + v37 - 4);
      *(_QWORD *)(v31 + 216) = (int)v37;
LABEL_42:
      v38 = v33 - v35;
      v39 = *(unsigned __int16 *)(v26 + v33 - v35 + 4);
      if (*(_WORD *)(v26 + v33 - v35 + 4))
        LOBYTE(v39) = *(_BYTE *)(v26 + v33 + v39 - 4) != 0;
      *(_BYTE *)(v31 + 200) = v39;
      if (v36 < 0xB)
      {
        LODWORD(v40) = 0;
      }
      else
      {
        v40 = *(unsigned __int16 *)(v26 + v38 + 6);
        if (*(_WORD *)(v26 + v38 + 6))
          LODWORD(v40) = *(_DWORD *)(v26 + v33 + v40 - 4);
      }
      *(_QWORD *)(v31 + 208) = (int)v40;
LABEL_49:
      v41 = *(unsigned __int16 *)(v26 + v33 - v35);
      v34 = *(_DWORD *)(v26 + v33 + v41 - 4);
      goto LABEL_50;
    }
    if (v36 >= 9)
      goto LABEL_42;
    *(_QWORD *)(v31 + 208) = 0;
    if (v36 >= 5)
      goto LABEL_49;
    LODWORD(v41) = 0;
LABEL_50:
    v42 = (unsigned int *)(v26 + v33 + v41 + (unint64_t)v34);
    v43 = *(v42 - 1);
    if (v43 >= 0x17)
    {
      if ((v43 | 7) == 0x17)
        v45 = (v43 & 0xFFFFFFF8) + 8;
      else
        v45 = v43 | 7;
      p_p = operator new(v45 + 1);
      v153 = v43;
      v154 = v45 - 0x7FFFFFFFFFFFFFFFLL;
      __p = p_p;
LABEL_57:
      memmove(p_p, v42, v43);
      goto LABEL_58;
    }
    HIBYTE(v154) = *(v42 - 1);
    p_p = &__p;
    if ((_DWORD)v43)
      goto LABEL_57;
LABEL_58:
    *((_BYTE *)p_p + v43) = 0;
    v46 = sub_1DF356E28(v24, (const void **)&__p, (uint64_t *)v32);
    if (SHIBYTE(v154) < 0)
      operator delete(__p);
    if (v46)
    {
      sub_1DF356EBC((uint64_t *)(v32 + 224), 0);
      sub_1DF368F80(v32 + 152);
      sub_1DF367C54(v32 + 72);
      __p = (void *)(v32 + 48);
      sub_1DF370598((void ***)&__p);
      if (*(char *)(v32 + 47) < 0)
        operator delete(*(void **)(v32 + 24));
      if (*(char *)(v32 + 23) < 0)
        operator delete(*(void **)v32);
      v61 = v32;
      v59 = 1491732219;
      goto LABEL_86;
    }
    v47 = operator new();
    *(_QWORD *)v47 = 15;
    *(_QWORD *)(v47 + 8) = v32;
    *(_QWORD *)(v47 + 16) = 0;
    *(_WORD *)(v47 + 24) = 0;
    v48 = *(unsigned int *)(v26 - 4);
    v49 = v26 + v48;
    v50 = *(_DWORD *)(v26 + v48 - 4);
    if (*(unsigned __int16 *)(v26 + v48 - (int)v50 - 4) < 5u)
    {
      LODWORD(v51) = 0;
    }
    else
    {
      v51 = *(unsigned __int16 *)(v26 + v48 - (int)v50);
      v50 = *(_DWORD *)(v49 + v51 - 4);
    }
    v52 = (_DWORD *)(v49 + v51 + (unint64_t)v50);
    v53 = *(v52 - 1);
    if (v53 >= 0x17)
    {
      if ((v53 | 7) == 0x17)
        v55 = (v53 & 0xFFFFFFF8) + 8;
      else
        v55 = v53 | 7;
      v54 = operator new(v55 + 1);
      v153 = v53;
      v154 = v55 - 0x7FFFFFFFFFFFFFFFLL;
      __p = v54;
    }
    else
    {
      HIBYTE(v154) = *(v52 - 1);
      v54 = &__p;
      if (!(_DWORD)v53)
        goto LABEL_72;
    }
    memmove(v54, v52, v53);
LABEL_72:
    *((_BYTE *)v54 + v53) = 0;
    v56 = sub_1DF3589C0(v25, (const void **)&__p, v47);
    if (SHIBYTE(v154) < 0)
      operator delete(__p);
    v26 += 4;
    if (v56)
    {
      v61 = v47;
LABEL_87:
      v60 = 0x1020C4001A1C0B8;
      goto LABEL_88;
    }
  }
  if (v29 < 7)
  {
    v57 = 0;
    v58 = (_QWORD *)a1;
  }
  else
  {
    v57 = *((unsigned __int16 *)v28 + 3);
    v58 = (_QWORD *)a1;
    if (v57)
      v57 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v57);
  }
  v64 = (unsigned int *)(v57 + 4);
  v65 = (uint64_t)(v58 + 22);
  v150 = v58 + 22;
  while (1)
  {
    v66 = (int)*a2;
    v67 = (char *)a2 - v66;
    v68 = *(unsigned __int16 *)((char *)a2 - v66);
    if (v68 < 7)
    {
      v69 = 0;
      v70 = *a2;
    }
    else
    {
      v69 = *((unsigned __int16 *)v67 + 3);
      v70 = *(unsigned int *)((char *)a2 + *((unsigned __int16 *)v67 + 3));
    }
    if (v64 == (unsigned int *)((char *)&a2[*(unsigned int *)((char *)a2 + v69 + v70) + 1] + v69 + v70))
      break;
    v71 = operator new();
    *(_OWORD *)v71 = 0u;
    *(_OWORD *)(v71 + 16) = 0u;
    *(_OWORD *)(v71 + 32) = 0u;
    *(_OWORD *)(v71 + 48) = 0u;
    *(_QWORD *)(v71 + 88) = 0;
    *(_QWORD *)(v71 + 96) = 0;
    *(_QWORD *)(v71 + 80) = 0;
    *(_QWORD *)(v71 + 64) = 0;
    *(_QWORD *)(v71 + 72) = v71 + 80;
    *(_QWORD *)(v71 + 128) = 0;
    *(_QWORD *)(v71 + 104) = 0;
    *(_QWORD *)(v71 + 112) = 0;
    *(_BYTE *)(v71 + 120) = 0;
    *(_QWORD *)(v71 + 136) = 0xFFFFFFFF00000000;
    *(_DWORD *)(v71 + 144) = 1;
    *(_WORD *)(v71 + 148) = 0;
    *(_QWORD *)(v71 + 160) = 0;
    *(_QWORD *)(v71 + 168) = 0;
    *(_WORD *)(v71 + 176) = 0;
    *(_QWORD *)(v71 + 152) = 0;
    *(_QWORD *)(v71 + 192) = 0;
    *(_QWORD *)(v71 + 184) = v71 + 192;
    *(_QWORD *)(v71 + 200) = 0;
    *(_QWORD *)(v71 + 208) = 0;
    *(_QWORD *)(v71 + 216) = 0;
    *(_QWORD *)(v71 + 224) = 0;
    v72 = *v64;
    v73 = *(unsigned int *)((char *)v64 + v72);
    if (*(unsigned __int16 *)((char *)v64 + v72 - (int)v73) < 5u)
    {
      LODWORD(v74) = 0;
    }
    else
    {
      v74 = *(unsigned __int16 *)((char *)v64 + v72 - (int)v73 + 4);
      v73 = *(unsigned int *)((char *)v64 + v72 + v74);
    }
    v75 = v74 + (unint64_t)v73;
    v76 = (char *)v64 + v72;
    v78 = &v76[v75 + 4];
    v77 = *(unsigned int *)&v76[v75];
    if (v77 >= 0x17)
    {
      if ((v77 | 7) == 0x17)
        v80 = (v77 & 0xFFFFFFF8) + 8;
      else
        v80 = v77 | 7;
      v79 = operator new(v80 + 1);
      v81 = v80 - 0x7FFFFFFFFFFFFFFFLL;
      v65 = (uint64_t)(v58 + 22);
      v153 = v77;
      v154 = v81;
      __p = v79;
LABEL_107:
      memmove(v79, v78, v77);
      goto LABEL_108;
    }
    HIBYTE(v154) = *(_DWORD *)&v76[v75];
    v79 = &__p;
    if ((_DWORD)v77)
      goto LABEL_107;
LABEL_108:
    *((_BYTE *)v79 + v77) = 0;
    v82 = sub_1DF382900(v65, (const void **)&__p, v71);
    if (SHIBYTE(v154) < 0)
      operator delete(__p);
    if (v82)
    {
      sub_1DF36D988(v71 + 184);
      sub_1DF367C54(v71 + 72);
      __p = (void *)(v71 + 48);
      sub_1DF370598((void ***)&__p);
      if (*(char *)(v71 + 47) < 0)
        operator delete(*(void **)(v71 + 24));
      if (*(char *)(v71 + 23) < 0)
        operator delete(*(void **)v71);
      v61 = v71;
      v59 = -1629151129;
LABEL_86:
      v60 = v59 | 0x10B2C4000000000;
LABEL_88:
      MEMORY[0x1E0BFF788](v61, v60);
      goto LABEL_89;
    }
    v83 = operator new();
    *(_QWORD *)v83 = 16;
    *(_QWORD *)(v83 + 8) = 0;
    *(_QWORD *)(v83 + 16) = v71;
    *(_WORD *)(v83 + 24) = 0;
    v84 = *v64;
    v85 = *(unsigned int *)((char *)v64 + v84);
    if (*(unsigned __int16 *)((char *)v64 + v84 - (int)v85) < 5u)
    {
      LODWORD(v86) = 0;
    }
    else
    {
      v86 = *(unsigned __int16 *)((char *)v64 + v84 - (int)v85 + 4);
      v85 = *(unsigned int *)((char *)v64 + v84 + v86);
    }
    v87 = v86 + (unint64_t)v85;
    v88 = (char *)v64 + v84;
    v90 = &v88[v87 + 4];
    v89 = *(unsigned int *)&v88[v87];
    if (v89 >= 0x17)
    {
      if ((v89 | 7) == 0x17)
        v92 = (v89 & 0xFFFFFFF8) + 8;
      else
        v92 = v89 | 7;
      v91 = operator new(v92 + 1);
      v93 = v92 - 0x7FFFFFFFFFFFFFFFLL;
      v65 = (uint64_t)(v58 + 22);
      v153 = v89;
      v154 = v93;
      __p = v91;
    }
    else
    {
      HIBYTE(v154) = *(_DWORD *)&v88[v87];
      v91 = &__p;
      if (!(_DWORD)v89)
        goto LABEL_122;
    }
    memmove(v91, v90, v89);
LABEL_122:
    *((_BYTE *)v91 + v89) = 0;
    v94 = sub_1DF3589C0(v25, (const void **)&__p, v83);
    if (SHIBYTE(v154) < 0)
      operator delete(__p);
    ++v64;
    if (v94)
    {
      v61 = v83;
      goto LABEL_87;
    }
  }
  if (v68 < 5)
  {
    v95 = 0;
  }
  else
  {
    v95 = *((unsigned __int16 *)v67 + 2);
    if (v95)
      v95 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v95);
  }
  v96 = (unsigned int *)(v95 + 4);
  v97 = v58 + 17;
  v98 = (char **)(v58 + 34);
  while (2)
  {
    v99 = (unsigned __int16 *)((char *)a2 - (int)v66);
    v100 = *v99;
    if (v100 < 5)
    {
      v101 = 0;
    }
    else
    {
      v101 = v99[2];
      LODWORD(v66) = *(unsigned int *)((char *)a2 + v99[2]);
    }
    if (v96 == (unsigned int *)((char *)&a2[*(unsigned int *)((char *)a2 + v101 + v66) + 1]
                               + v101
                               + v66))
    {
      if (v100 < 7)
      {
        v114 = 0;
        v115 = (uint64_t)v150;
      }
      else
      {
        v114 = v99[3];
        v115 = (uint64_t)v150;
        if (v99[3])
          v114 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v114);
      }
      v116 = (unsigned int *)(v114 + 4);
      v117 = v58 + 23;
      while (1)
      {
        v118 = (int)*a2;
        v119 = (char *)a2 - v118;
        v120 = *(unsigned __int16 *)((char *)a2 - v118);
        if (v120 < 7)
        {
          v121 = 0;
          v122 = *a2;
        }
        else
        {
          v121 = *((unsigned __int16 *)v119 + 3);
          v122 = *(unsigned int *)((char *)a2 + *((unsigned __int16 *)v119 + 3));
        }
        if (v116 == (unsigned int *)((char *)&a2[*(unsigned int *)((char *)a2 + v121 + v122) + 1] + v121 + v122))
        {
          if (v120 < 0xF || (v136 = *((unsigned __int16 *)v119 + 7)) == 0)
          {
LABEL_207:
            v62 = 1;
            goto LABEL_90;
          }
          v137 = (uint64_t)(v58 + 28);
          v138 = v136 + *(unsigned int *)((char *)a2 + v136);
          while (2)
          {
            v139 = (unsigned __int16 *)((char *)a2 - (int)v118);
            if (*v139 < 0xFu)
            {
              v140 = 0;
            }
            else
            {
              v140 = v139[7];
              LODWORD(v118) = *(unsigned int *)((char *)a2 + v140);
            }
            v141 = (unsigned int *)((char *)a2 + v138 + 4);
            if (v141 == (unsigned int *)((char *)&a2[*(unsigned int *)((char *)a2 + v140 + v118) + 1]
                                        + v140
                                        + v118))
              goto LABEL_207;
            v142 = *v141;
            v143 = *(unsigned int *)((char *)a2 + v138 + v142 + 4);
            if (*(unsigned __int16 *)((char *)a2 + v138 + v142 - (int)v143 + 4) < 5u)
            {
              LODWORD(v144) = 0;
            }
            else
            {
              v144 = *(unsigned __int16 *)((char *)a2 + v138 + v142 - (int)v143 + 8);
              v143 = *(unsigned int *)((char *)a2 + v142 + v138 + v144 + 4);
            }
            v145 = (unint64_t)a2 + v142 + v138 + v144 + v143;
            v146 = *(unsigned int *)(v145 + 4);
            if (v146 >= 0x17)
            {
              if ((v146 | 7) == 0x17)
                v148 = (v146 & 0xFFFFFFF8) + 8;
              else
                v148 = v146 | 7;
              v147 = operator new(v148 + 1);
              v153 = v146;
              v154 = v148 - 0x7FFFFFFFFFFFFFFFLL;
              __p = v147;
            }
            else
            {
              HIBYTE(v154) = *(_DWORD *)(v145 + 4);
              v147 = &__p;
              if (!(_DWORD)v146)
              {
LABEL_202:
                *((_BYTE *)v147 + v146) = 0;
                v149 = operator new();
                *(_OWORD *)(v149 + 48) = 0u;
                *(_OWORD *)(v149 + 64) = 0u;
                *(_OWORD *)(v149 + 96) = 0u;
                *(_OWORD *)(v149 + 112) = 0u;
                *(_OWORD *)(v149 + 128) = 0u;
                *(_OWORD *)v149 = 0u;
                *(_OWORD *)(v149 + 16) = 0u;
                *(_OWORD *)(v149 + 32) = 0u;
                *(_OWORD *)(v149 + 80) = 0u;
                *(_QWORD *)(v149 + 72) = v149 + 80;
                *(_QWORD *)(v149 + 96) = 0;
                *(_QWORD *)(v149 + 104) = 0;
                *(_BYTE *)(v149 + 120) = 0;
                *(_QWORD *)(v149 + 112) = 0;
                *(_QWORD *)(v149 + 160) = 0;
                *(_QWORD *)(v149 + 144) = 0;
                *(_QWORD *)(v149 + 152) = v149 + 160;
                *(_QWORD *)(v149 + 140) = 0x1FFFFFFFFLL;
                *(_QWORD *)(v149 + 168) = 0;
                *(_QWORD *)(v149 + 176) = 0;
                *(_QWORD *)(v149 + 184) = 0;
                *(_QWORD *)(v149 + 192) = 0;
                *(_QWORD *)(v149 + 128) = sub_1DF365DEC((uint64_t)&__p, v98, (uint64_t **)&__dst);
                if (!flatbuffers::ServiceDef::Deserialize(v149, a1, (unsigned int *)((char *)a2 + v138 + *v141 + 4))|| sub_1DF382198(v137, (const void **)&__p, v149))
                {
                  sub_1DF383A40(v149 + 152);
                  sub_1DF367C54(v149 + 72);
                  v157 = (void **)(v149 + 48);
                  sub_1DF370598(&v157);
                  if (*(char *)(v149 + 47) < 0)
                    operator delete(*(void **)(v149 + 24));
                  if (*(char *)(v149 + 23) < 0)
                    operator delete(*(void **)v149);
                  MEMORY[0x1E0BFF788](v149, 0x10B2C401A85D49FLL);
                  goto LABEL_218;
                }
                if (SHIBYTE(v154) < 0)
                  operator delete(__p);
                LODWORD(v118) = *a2;
                v138 += 4;
                continue;
              }
            }
            break;
          }
          memmove(v147, (const void *)(v145 + 8), v146);
          goto LABEL_202;
        }
        v123 = *v116;
        v124 = *(unsigned int *)((char *)v116 + v123);
        if (*(unsigned __int16 *)((char *)v116 + v123 - (int)v124) < 5u)
        {
          LODWORD(v125) = 0;
        }
        else
        {
          v125 = *(unsigned __int16 *)((char *)v116 + v123 - (int)v124 + 4);
          v124 = *(unsigned int *)((char *)v116 + v123 + v125);
        }
        v126 = v125 + (unint64_t)v124;
        v127 = (char *)v116 + v123;
        v129 = &v127[v126 + 4];
        v128 = *(unsigned int *)&v127[v126];
        if (v128 >= 0x17)
        {
          if ((v128 | 7) == 0x17)
            v131 = (v128 & 0xFFFFFFF8) + 8;
          else
            v131 = v128 | 7;
          v130 = operator new(v131 + 1);
          v132 = v131 - 0x7FFFFFFFFFFFFFFFLL;
          v58 = (_QWORD *)a1;
          v153 = v128;
          v154 = v132;
          __p = v130;
        }
        else
        {
          HIBYTE(v154) = *(_DWORD *)&v127[v126];
          v130 = &__p;
          if (!(_DWORD)v128)
            goto LABEL_177;
        }
        memmove(v130, v129, v128);
LABEL_177:
        *((_BYTE *)v130 + v128) = 0;
        v133 = sub_1DF370890(v115, (uint64_t)&__p);
        if (v117 == (_QWORD *)v133)
          v134 = 0;
        else
          v134 = *(_QWORD *)(v133 + 56);
        *(_QWORD *)(v134 + 128) = sub_1DF365DEC((uint64_t)&__p, v98, (uint64_t **)&__dst);
        v135 = flatbuffers::EnumDef::Deserialize(v134, v58, (int *)((char *)v116 + *v116));
        if (SHIBYTE(v154) < 0)
          operator delete(__p);
        ++v116;
        if ((v135 & 1) == 0)
          goto LABEL_89;
      }
    }
    v102 = *v96;
    v103 = *(unsigned int *)((char *)v96 + v102);
    if (*(unsigned __int16 *)((char *)v96 + v102 - (int)v103) < 5u)
    {
      LODWORD(v104) = 0;
    }
    else
    {
      v104 = *(unsigned __int16 *)((char *)v96 + v102 - (int)v103 + 4);
      v103 = *(unsigned int *)((char *)v96 + v102 + v104);
    }
    v105 = v104 + (unint64_t)v103;
    v106 = (char *)v96 + v102;
    v108 = &v106[v105 + 4];
    v107 = *(unsigned int *)&v106[v105];
    if (v107 >= 0x17)
    {
      if ((v107 | 7) == 0x17)
        v110 = (v107 & 0xFFFFFFF8) + 8;
      else
        v110 = v107 | 7;
      v109 = operator new(v110 + 1);
      v111 = v110 - 0x7FFFFFFFFFFFFFFFLL;
      v58 = (_QWORD *)a1;
      v153 = v107;
      v154 = v111;
      __p = v109;
      goto LABEL_145;
    }
    HIBYTE(v154) = *(_DWORD *)&v106[v105];
    v109 = &__p;
    if ((_DWORD)v107)
LABEL_145:
      memmove(v109, v108, v107);
    *((_BYTE *)v109 + v107) = 0;
    v112 = sub_1DF37099C(v24, (uint64_t)&__p);
    if (v97 == (_QWORD *)v112)
      v113 = 0;
    else
      v113 = *(_QWORD *)(v112 + 56);
    *(_QWORD *)(v113 + 128) = sub_1DF365DEC((uint64_t)&__p, v98, (uint64_t **)&__dst);
    if (flatbuffers::StructDef::Deserialize(v113, (uint64_t)v58, (int *)((char *)v96 + *v96)))
    {
      v66 = (int)*a2;
      if (*(unsigned __int16 *)((char *)a2 - v66) >= 0xDu
        && *(_WORD *)((char *)a2 - v66 + 12)
        && (char *)v96 + *v96 == (char *)a2
                               + *(unsigned __int16 *)((char *)a2 - v66 + 12)
                               + *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - v66 + 12)))
      {
        v58[72] = v113;
      }
      if (SHIBYTE(v154) < 0)
      {
        operator delete(__p);
        LODWORD(v66) = *a2;
      }
      ++v96;
      continue;
    }
    break;
  }
LABEL_218:
  if (SHIBYTE(v154) < 0)
    operator delete(__p);
LABEL_89:
  v62 = 0;
LABEL_90:
  sub_1DF367658(*((char **)&__dst + 1));
  return v62;
}

char **sub_1DF365DEC(uint64_t a1, char **a2, uint64_t **a3)
{
  std::string::size_type v5;
  size_t v6;
  const void *v7;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  char v13;
  size_t v14;
  __int128 *v15;
  uint64_t **v16;
  _QWORD *v17;
  const void *v18;
  const void *v19;
  size_t v20;
  const void *v21;
  size_t v22;
  size_t v23;
  size_t v24;
  int v25;
  _BOOL4 v26;
  size_t v27;
  size_t v28;
  int v29;
  _BOOL4 v30;
  _QWORD *v31;
  _BYTE *v32;
  uint64_t *v33;
  uint64_t *v34;
  char **v35;
  _OWORD *v36;
  char **v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string::size_type v52;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  std::string *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  std::string *v62;
  char *v63;
  char *v64;
  char *v65;
  __int128 v66;
  char *v67;
  char *v68;
  std::string v71;
  __int128 __dst;
  int64_t v73;
  _QWORD v74[5];

  v5 = std::string::rfind((const std::string *)a1, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v5 == -1)
  {
    HIBYTE(v73) = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_15;
  }
  v6 = v5;
  if (*(char *)(a1 + 23) >= 0)
    v7 = (const void *)a1;
  else
    v7 = *(const void **)a1;
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_99;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = v6;
    v73 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v73) = v5;
    p_dst = &__dst;
    if (!v5)
      goto LABEL_14;
  }
  memmove(p_dst, v7, v6);
LABEL_14:
  *((_BYTE *)p_dst + v6) = 0;
LABEL_15:
  v12 = a3 + 1;
  v11 = a3[1];
  v13 = HIBYTE(v73);
  if (v11)
  {
    if (v73 >= 0)
      v14 = HIBYTE(v73);
    else
      v14 = *((_QWORD *)&__dst + 1);
    if (v73 >= 0)
      v15 = &__dst;
    else
      v15 = (__int128 *)__dst;
    while (1)
    {
      while (1)
      {
        v16 = (uint64_t **)v11;
        v19 = (const void *)v11[4];
        v17 = v11 + 4;
        v18 = v19;
        v20 = *((unsigned __int8 *)v17 + 23);
        if ((v20 & 0x80u) == 0)
          v21 = v17;
        else
          v21 = v18;
        v22 = v17[1];
        if ((v20 & 0x80u) == 0)
          v23 = v20 & 0x7F;
        else
          v23 = v17[1];
        if (v23 >= v14)
          v24 = v14;
        else
          v24 = v23;
        v25 = memcmp(v15, v21, v24);
        v26 = v14 < v23;
        if (v25)
          v26 = v25 < 0;
        if (!v26)
          break;
        v11 = *v16;
        v12 = v16;
        if (!*v16)
          goto LABEL_48;
      }
      if ((v20 & 0x80u) == 0)
        v27 = v20;
      else
        v27 = v22;
      if (v14 >= v27)
        v28 = v27;
      else
        v28 = v14;
      v29 = memcmp(v21, v15, v28);
      v30 = v27 < v14;
      if (v29)
        v30 = v29 < 0;
      if (!v30)
        break;
      v11 = v16[1];
      if (!v11)
      {
        v12 = v16 + 1;
        goto LABEL_48;
      }
    }
    v31 = v16;
  }
  else
  {
    v16 = a3 + 1;
LABEL_48:
    v31 = operator new(0x40uLL);
    v32 = v31 + 4;
    if (v13 < 0)
    {
      sub_1DF36DA38(v32, (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      *(_OWORD *)v32 = __dst;
      v31[6] = v73;
    }
    v31[7] = 0;
    *v31 = 0;
    v31[1] = 0;
    v31[2] = v16;
    *v12 = v31;
    v33 = (uint64_t *)**a3;
    v34 = v31;
    if (v33)
    {
      *a3 = v33;
      v34 = *v12;
    }
    sub_1DF36718C(a3[1], v34);
    a3[2] = (uint64_t *)((char *)a3[2] + 1);
  }
  v35 = (char **)v31[7];
  if (!v35)
  {
    v36 = (_OWORD *)operator new();
    *v36 = 0u;
    v36[1] = 0u;
    v31[7] = v36;
    v37 = a2;
    v39 = a2[1];
    v38 = (unint64_t)a2[2];
    if ((unint64_t)v39 < v38)
    {
      *(_QWORD *)v39 = v36;
      v40 = v39 + 8;
LABEL_73:
      v37[1] = v40;
      v50 = std::string::find((const std::string *)a1, 46, 0);
      v35 = (char **)v31[7];
      if (v50 != -1)
      {
        v51 = v50;
        v52 = 0;
        do
        {
          std::string::basic_string(&v71, (const std::string *)a1, v52, v51 - v52, (std::allocator<char> *)v74);
          v53 = (unint64_t)v35[2];
          v54 = (unint64_t)v35[1];
          if (v54 >= v53)
          {
            v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - (_QWORD)*v35) >> 3);
            v58 = v57 + 1;
            if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_99;
            v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - (_QWORD)*v35) >> 3);
            if (2 * v59 > v58)
              v58 = 2 * v59;
            if (v59 >= 0x555555555555555)
              v60 = 0xAAAAAAAAAAAAAAALL;
            else
              v60 = v58;
            v74[4] = v35 + 2;
            if (v60)
            {
              if (v60 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_100;
              v61 = (char *)operator new(24 * v60);
            }
            else
            {
              v61 = 0;
            }
            v62 = (std::string *)&v61[24 * v57];
            *v62 = v71;
            memset(&v71, 0, sizeof(v71));
            v64 = *v35;
            v63 = v35[1];
            if (v63 == *v35)
            {
              v67 = v35[1];
              v65 = &v61[24 * v57];
            }
            else
            {
              v65 = &v61[24 * v57];
              do
              {
                v66 = *(_OWORD *)(v63 - 24);
                *((_QWORD *)v65 - 1) = *((_QWORD *)v63 - 1);
                *(_OWORD *)(v65 - 24) = v66;
                v65 -= 24;
                *((_QWORD *)v63 - 2) = 0;
                *((_QWORD *)v63 - 1) = 0;
                *((_QWORD *)v63 - 3) = 0;
                v63 -= 24;
              }
              while (v63 != v64);
              v67 = *v35;
              v63 = v35[1];
            }
            v56 = v62 + 1;
            *v35 = v65;
            v74[0] = v67;
            v74[1] = v67;
            v35[1] = (char *)&v62[1];
            v74[2] = v63;
            v68 = v35[2];
            v35[2] = &v61[24 * v60];
            v74[3] = v68;
            sub_1DF370790((uint64_t)v74);
          }
          else
          {
            v55 = *(_OWORD *)&v71.__r_.__value_.__l.__data_;
            *(_QWORD *)(v54 + 16) = *((_QWORD *)&v71.__r_.__value_.__l + 2);
            *(_OWORD *)v54 = v55;
            memset(&v71, 0, sizeof(v71));
            v56 = (std::string *)(v54 + 24);
          }
          v35[1] = (char *)v56;
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v71.__r_.__value_.__l.__data_);
          v52 = v51 + 1;
          v51 = std::string::find((const std::string *)a1, 46, v51 + 1);
          v35 = (char **)v31[7];
        }
        while (v51 != -1);
      }
      goto LABEL_96;
    }
    v41 = *a2;
    v42 = (v39 - *a2) >> 3;
    v43 = v42 + 1;
    if (!((unint64_t)(v42 + 1) >> 61))
    {
      v44 = v38 - (_QWORD)v41;
      if (v44 >> 2 > v43)
        v43 = v44 >> 2;
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
        v45 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v45 = v43;
      if (v45)
      {
        if (v45 >> 61)
LABEL_100:
          sub_1DF3667C0();
        v46 = (char *)operator new(8 * v45);
        v36 = (_OWORD *)v31[7];
        v37 = a2;
      }
      else
      {
        v46 = 0;
      }
      v47 = &v46[8 * v42];
      v48 = &v46[8 * v45];
      *(_QWORD *)v47 = v36;
      v40 = v47 + 8;
      if (v39 != v41)
      {
        do
        {
          v49 = *((_QWORD *)v39 - 1);
          v39 -= 8;
          *((_QWORD *)v47 - 1) = v49;
          v47 -= 8;
        }
        while (v39 != v41);
        v39 = *v37;
      }
      *v37 = v47;
      v37[1] = v40;
      v37[2] = v48;
      if (v39)
      {
        operator delete(v39);
        v37 = a2;
      }
      goto LABEL_73;
    }
LABEL_99:
    abort();
  }
LABEL_96:
  if (SHIBYTE(v73) < 0)
    operator delete((void *)__dst);
  return v35;
}

void flatbuffers::Parser::ConformTo(flatbuffers::Parser *this@<X0>, const flatbuffers::Parser *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  const void **v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v37;
  std::string __p;

  v4 = (uint64_t *)*((_QWORD *)this + 19);
  if (v4 == *((uint64_t **)this + 20))
    goto LABEL_43;
  v5 = (char *)a2 + 128;
  v37 = (char *)a2 + 136;
  while (2)
  {
    v6 = *v4;
    flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(*v4 + 128), *v4, 0x3E8uLL, &__p);
    v7 = sub_1DF37099C((uint64_t)v5, (uint64_t)&__p);
    if (v37 == (char *)v7 || (v8 = *(_QWORD *)(v7 + 56)) == 0)
    {
      v23 = 4;
      goto LABEL_34;
    }
    ++*(_DWORD *)(v8 + 144);
    v9 = *(_QWORD ***)(v6 + 176);
    if (v9 == *(_QWORD ***)(v6 + 184))
    {
      v23 = 0;
      goto LABEL_34;
    }
    while (1)
    {
      v10 = (uint64_t)*v9;
      v11 = sub_1DF383318(v8 + 152, *v9);
      if (v8 + 160 != v11)
      {
        v12 = *(_QWORD *)(v11 + 56);
        if (v12)
          break;
      }
      v21 = *(_QWORD *)(v8 + 176);
      v22 = *(_QWORD *)(v8 + 184);
      if (v21 != v22)
      {
        while (*(unsigned __int16 *)(v10 + 208) != *(unsigned __int16 *)(*(_QWORD *)v21 + 208))
        {
          v21 += 8;
          if (v21 == v22)
            goto LABEL_31;
        }
        if (!sub_1DF366650(v10 + 152, *(_QWORD *)v21 + 152))
          goto LABEL_40;
      }
LABEL_31:
      v23 = 0;
      if (++v9 == *(_QWORD ***)(v6 + 184))
        goto LABEL_34;
    }
    if (*(unsigned __int16 *)(v10 + 208) != *(unsigned __int16 *)(v12 + 208))
      goto LABEL_40;
    v13 = *(_BYTE *)(v10 + 207);
    v14 = v13 & 0x7F;
    if (v13 >= 0)
      v15 = v13 & 0x7F;
    else
      v15 = *(_QWORD *)(v10 + 192);
    v16 = *(_BYTE *)(v12 + 207);
    v17 = v16;
    v18 = v16 & 0x7F;
    if (v17 < 0)
      v18 = *(_QWORD *)(v12 + 192);
    if (v15 != v18)
      goto LABEL_40;
    v19 = (const void **)(v10 + 184);
    if (v17 >= 0)
      v20 = (unsigned __int8 *)(v12 + 184);
    else
      v20 = *(unsigned __int8 **)(v12 + 184);
    if ((*(_BYTE *)(v10 + 207) & 0x80) != 0)
    {
      if (memcmp(*v19, v20, *(_QWORD *)(v10 + 192)))
        goto LABEL_40;
LABEL_30:
      if (!sub_1DF366650(v10 + 152, v12 + 152))
        goto LABEL_40;
      goto LABEL_31;
    }
    if ((v13 & 0x7F) == 0)
      goto LABEL_30;
    while (*(unsigned __int8 *)v19 == *v20)
    {
      v19 = (const void **)((char *)v19 + 1);
      ++v20;
      if (!--v14)
        goto LABEL_30;
    }
LABEL_40:
    std::operator+<char>();
    v23 = 1;
LABEL_34:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v23 | 4) == 4)
    {
      if (++v4 == *((uint64_t **)this + 20))
      {
LABEL_43:
        v24 = (uint64_t *)*((_QWORD *)this + 25);
        if (v24 == *((uint64_t **)this + 26))
        {
LABEL_62:
          a3[23] = 0;
          *a3 = 0;
        }
        else
        {
          while (1)
          {
            v25 = *v24;
            flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(*v24 + 128), *v24, 0x3E8uLL, &__p);
            v26 = (_QWORD *)sub_1DF370890((uint64_t)a2 + 176, (uint64_t)&__p);
            if ((_QWORD *)((char *)a2 + 184) == v26 || (v27 = v26[7]) == 0)
            {
              v34 = 13;
            }
            else
            {
              v28 = *(_QWORD ***)(v25 + 208);
              if (v28 == *(_QWORD ***)(v25 + 216))
              {
                v34 = 0;
              }
              else
              {
                v29 = v27 + 184;
                v30 = v27 + 192;
                while (1)
                {
                  v31 = (uint64_t)*v28;
                  v32 = sub_1DF383318(v29, *v28);
                  if (v30 != v32)
                  {
                    v33 = *(_QWORD *)(v32 + 56);
                    if (v33)
                    {
                      if (*(_QWORD *)(v31 + 136) != *(_QWORD *)(v33 + 136))
                        break;
                    }
                  }
                  v34 = 0;
                  if (++v28 == *(_QWORD ***)(v25 + 216))
                    goto LABEL_54;
                }
                std::operator+<char>();
                v34 = 1;
              }
            }
LABEL_54:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v34 != 13 && v34)
              break;
            if (++v24 == *((uint64_t **)this + 26))
              goto LABEL_62;
          }
        }
        return;
      }
      continue;
    }
    break;
  }
}

BOOL sub_1DF366650(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  signed __int8 v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  signed __int8 v15;
  unsigned __int8 *v16;
  unsigned __int8 v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;
  _BOOL8 result;

  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 **)(a2 + 8);
  if (v4 != v5)
  {
    v6 = v4[23];
    v7 = v6 & 0x7F;
    if (v6 >= 0)
      v8 = (unsigned __int8 *)(v6 & 0x7F);
    else
      v8 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v9 = v5[23];
    v10 = (char)v9;
    v11 = (unsigned __int8 *)(v9 & 0x7F);
    if (v10 < 0)
      v11 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
    if (v8 != v11)
      return 0;
    if (v10 >= 0)
      v12 = *(unsigned __int8 **)(a2 + 8);
    else
      v12 = *(unsigned __int8 **)v5;
    if ((v4[23] & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v12, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if ((v6 & 0x7F) != 0)
    {
      while (*v4 == *v12)
      {
        ++v4;
        ++v12;
        if (!--v7)
          goto LABEL_19;
      }
      return 0;
    }
  }
LABEL_19:
  v13 = *(unsigned __int8 **)(a1 + 16);
  v14 = *(unsigned __int8 **)(a2 + 16);
  if (v13 == v14)
    return 1;
  v15 = v13[23];
  if (v15 >= 0)
    v16 = (unsigned __int8 *)(v15 & 0x7F);
  else
    v16 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
  v17 = v14[23];
  v18 = (char)v17;
  v19 = (unsigned __int8 *)(v17 & 0x7F);
  if (v18 < 0)
    v19 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
  if (v16 != v19)
    return 0;
  if (v18 >= 0)
    v20 = *(unsigned __int8 **)(a2 + 16);
  else
    v20 = *(unsigned __int8 **)v14;
  if ((v13[23] & 0x80) != 0)
    return memcmp(*(const void **)v13, v20, *((_QWORD *)v13 + 1)) == 0;
  if ((v15 & 0x7F) == 0)
    return 1;
  v21 = (v15 & 0x7F) - 1;
  do
  {
    v23 = *v13++;
    v22 = v23;
    v25 = *v20++;
    v24 = v25;
    v27 = v21-- != 0;
    result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

void sub_1DF3667C0()
{
  abort();
}

BOOL sub_1DF3667CC(unint64_t *a1, char *a2, int a3, int a4)
{
  unsigned __int8 v8;
  _xlocale *v9;
  const char *v10;
  int v11;
  char *v12;
  char v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  _BOOL8 result;
  char *v20;

  if (a3 <= 0)
  {
    v12 = a2;
    do
    {
      v14 = *v12++;
      v13 = v14;
      v15 = v14 - 48;
      if (v14)
        v16 = v15 > 9;
      else
        v16 = 0;
    }
    while (v16);
    if (v13 == 48 && (*v12 & 0xDF) == 0x58)
    {
      if (a4)
        *__error() = 0;
      v20 = a2;
      v17 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
      if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
      {
        qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
        __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
        __cxa_guard_release(&qword_1F04755F0);
      }
      v9 = (_xlocale *)qword_1F04755E8;
      v10 = a2;
      v11 = 16;
    }
    else
    {
      if (a4)
        *__error() = 0;
      v20 = a2;
      v18 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
      if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
      {
        qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
        __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
        __cxa_guard_release(&qword_1F04755F0);
      }
      v9 = (_xlocale *)qword_1F04755E8;
      v10 = a2;
      v11 = 10;
    }
  }
  else
  {
    if (a4)
      *__error() = 0;
    v20 = a2;
    v8 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v9 = (_xlocale *)qword_1F04755E8;
    v10 = a2;
    v11 = a3;
  }
  *a1 = strtoull_l(v10, &v20, v11, v9);
  if (v20 != a2 && !*v20)
    return !a4 || !*__error();
  result = 0;
  *a1 = 0;
  return result;
}

uint64_t sub_1DF366A24(uint64_t a1, void *__src, size_t __n)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v7 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v8 = (~(_BYTE)__n + (_BYTE)v7 - (*(_BYTE *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v7 - v6 < v8)
  {
    sub_1DF366C90((uint64_t *)a1, v8);
    *(_QWORD *)(a1 + 48) -= v8;
  }
  else
  {
    v9 = v7 - v8;
    *(_QWORD *)(a1 + 48) = v7 - v8;
    if (!v8)
      goto LABEL_5;
  }
  v17 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v17++) = 0;
  while (v8 != v17);
  v9 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
LABEL_5:
  if (v9 == v6)
  {
    sub_1DF366C90((uint64_t *)a1, 1uLL);
    v9 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v9 - 1;
  *(_BYTE *)(v9 - 1) = 0;
  if (__n)
  {
    v10 = *(_QWORD *)(a1 + 48);
    if (v10 - *(_QWORD *)(a1 + 56) < __n)
    {
      sub_1DF366C90((uint64_t *)a1, __n);
      v10 = *(_QWORD *)(a1 + 48);
    }
    *(_QWORD *)(a1 + 48) = v10 - __n;
    memcpy((void *)(v10 - __n), __src, __n);
  }
  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = ((_BYTE)v11 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v11 - v12 < v13)
  {
    sub_1DF366C90((uint64_t *)a1, ((_BYTE)v11 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v13;
  }
  else
  {
    v14 = v11 - v13;
    *(_QWORD *)(a1 + 48) = v14;
    if (!v13)
      goto LABEL_15;
  }
  v18 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v18++) = 0;
  while (v13 != v18);
  v14 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
LABEL_15:
  if ((unint64_t)(v14 - v12) <= 3)
  {
    sub_1DF366C90((uint64_t *)a1, 4uLL);
    v14 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(v14 - 4) = __n;
  v15 = v14 - 4;
  *(_QWORD *)(a1 + 48) = v15;
  return (*(_DWORD *)(a1 + 32) - v15 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_1DF366BF4(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = result;
  if (*(_QWORD *)(result + 72) <= 3uLL)
    *(_QWORD *)(result + 72) = 4;
  v3 = *(_QWORD *)(result + 48);
  v4 = ((_BYTE)v3 - *(_DWORD *)(result + 40) - (*(_BYTE *)(result + 32) + a2)) & 3;
  if (v3 - *(_QWORD *)(result + 56) < v4)
  {
    result = sub_1DF366C90((uint64_t *)result, ((_BYTE)v3 - *(_DWORD *)(result + 40) - (*(_BYTE *)(result + 32) + a2)) & 3);
    *(_QWORD *)(v2 + 48) -= v4;
  }
  else
  {
    *(_QWORD *)(result + 48) = v3 - v4;
    if (!v4)
      return result;
  }
  v5 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(v2 + 48) + v5++) = 0;
  while (v4 != v5);
  return result;
}

uint64_t sub_1DF366C90(uint64_t *a1, unint64_t a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  char *v12;

  v4 = a1[4];
  v3 = (char *)a1[5];
  v5 = &v3[v4 - a1[6]];
  v6 = a1[7] - (_QWORD)v3;
  if (v4)
    v7 = v4 >> 1;
  else
    v7 = a1[2];
  if (v7 <= a2)
    v7 = a2;
  v8 = (v4 + a1[3] + v7 - 1) & -a1[3];
  a1[4] = v8;
  v9 = *a1;
  if (!v3)
  {
    if (v9)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v8);
    else
      result = operator new[]();
    goto LABEL_12;
  }
  if (v9)
  {
    result = (*(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, v3, v4, v8, v5, v6);
LABEL_12:
    v10 = (char *)result;
    goto LABEL_13;
  }
  v10 = (char *)operator new[]();
  memcpy(&v10[v8 - v5], &v3[v4 - v5], v5);
  memcpy(v10, v3, v6);
  result = MEMORY[0x1E0BFF770](v3, 0x1000C8077774924);
LABEL_13:
  v12 = &v10[a1[4] - v5];
  a1[5] = (uint64_t)v10;
  a1[6] = (uint64_t)v12;
  a1[7] = (uint64_t)&v10[v6];
  return result;
}

uint64_t *sub_1DF366DF8(uint64_t *result, uint64_t a2, unsigned int a3)
{
  uint64_t *v5;
  unint64_t *v6;
  unsigned int v7;

  v5 = result;
  v6 = (unint64_t *)result[7];
  if ((unint64_t)(result[6] - (_QWORD)v6) <= 7)
  {
    result = (uint64_t *)sub_1DF366C90(result, 8uLL);
    v6 = (unint64_t *)v5[7];
  }
  *v6 = a3 | (unint64_t)(a2 << 32);
  v5[7] += 8;
  ++*((_DWORD *)v5 + 16);
  v7 = *((unsigned __int16 *)v5 + 34);
  if (v7 <= a2)
    LOWORD(v7) = a2;
  *((_WORD *)v5 + 34) = v7;
  return result;
}

_QWORD *sub_1DF366E78(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[11];
  if (v2)
  {
    sub_1DF366F24(*(_QWORD **)(v2 + 8));
    MEMORY[0x1E0BFF788](v2, 0x1060C40C2B13FB5);
  }
  if (a1[5])
  {
    if (*a1)
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
    else
      MEMORY[0x1E0BFF770](a1[5], 0x1000C8077774924);
  }
  a1[5] = 0;
  if (*((_BYTE *)a1 + 8) && *a1)
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  *a1 = 0;
  *((_BYTE *)a1 + 8) = 0;
  return a1;
}

void sub_1DF366F24(_QWORD *a1)
{
  if (a1)
  {
    sub_1DF366F24(*a1);
    sub_1DF366F24(a1[1]);
    operator delete(a1);
  }
}

_OWORD *sub_1DF366F5C(uint64_t a1, const void **a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  void **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v14;

  v5 = (void **)sub_1DF367010(a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = operator new(0x40uLL);
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_BYTE *)v6 + 56) = 0;
    v10 = v14;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v10;
    *v7 = v6;
    v11 = **(_QWORD **)a1;
    v12 = (uint64_t *)v6;
    if (v11)
    {
      *(_QWORD *)a1 = v11;
      v12 = (uint64_t *)*v7;
    }
    sub_1DF36718C(*(uint64_t **)(a1 + 8), v12);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

_QWORD *sub_1DF367010(uint64_t a1, _QWORD *a2, const void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  size_t v7;
  const void *v8;
  _QWORD *v9;
  _QWORD *v10;
  const void *v11;
  const void *v12;
  size_t v13;
  const void *v14;
  size_t v15;
  size_t v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  size_t v20;
  int v21;
  _BOOL4 v22;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v6 = *((char *)a3 + 23);
    if (v6 >= 0)
      v7 = *((unsigned __int8 *)a3 + 23);
    else
      v7 = (size_t)a3[1];
    if (v6 >= 0)
      v8 = a3;
    else
      v8 = *a3;
    do
    {
      while (1)
      {
        v9 = v4;
        v12 = (const void *)v4[4];
        v10 = v4 + 4;
        v11 = v12;
        v13 = *((unsigned __int8 *)v10 + 23);
        if ((v13 & 0x80u) == 0)
          v14 = v10;
        else
          v14 = v11;
        v15 = v10[1];
        if ((v13 & 0x80u) == 0)
          v16 = v13 & 0x7F;
        else
          v16 = v10[1];
        if (v16 >= v7)
          v17 = v7;
        else
          v17 = v16;
        v18 = memcmp(v8, v14, v17);
        v19 = v7 < v16;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v4 = (_QWORD *)*v9;
        v5 = v9;
        if (!*v9)
          goto LABEL_33;
      }
      if ((v13 & 0x80u) != 0)
        v13 = v15;
      if (v7 >= v13)
        v20 = v13;
      else
        v20 = v7;
      v21 = memcmp(v14, v8, v20);
      v22 = v13 < v7;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        break;
      v5 = v9 + 1;
      v4 = (_QWORD *)v9[1];
    }
    while (v4);
  }
  else
  {
    v9 = (_QWORD *)(a1 + 8);
  }
LABEL_33:
  *a2 = v9;
  return v5;
}

uint64_t sub_1DF36712C(const void **a1, uint64_t a2)
{
  const void *v3;
  size_t v4;
  size_t v5;
  const void **v6;
  size_t v7;
  uint64_t result;
  unsigned int v9;

  v3 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*((char *)a1 + 23) < 0)
  {
    v6 = a1;
    a1 = (const void **)*a1;
    v5 = (size_t)v6[1];
  }
  else
  {
    v5 = *((unsigned __int8 *)a1 + 23);
  }
  if (v4 >= v5)
    v7 = v5;
  else
    v7 = *(_QWORD *)(a2 + 8);
  LODWORD(result) = memcmp(a1, v3, v7);
  if (v5 < v4)
    v9 = -1;
  else
    v9 = v4 < v5;
  if ((_DWORD)result)
    return result;
  else
    return v9;
}

uint64_t *sub_1DF36718C(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t sub_1DF367324(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  if (*(char *)(a1 + 359) < 0)
    operator delete(*(void **)(a1 + 336));
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  if (*(char *)(a1 + 311) < 0)
    operator delete(*(void **)(a1 + 288));
  v3 = (void **)(a1 + 264);
  sub_1DF370598(&v3);
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_1DF36741C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  const void **v17;
  __int128 v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v8 = v6[1] ? (char *)v6[1] : (char *)v6;
    if (v8)
    {
      v9 = (char *)sub_1DF367604((uint64_t)v8);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          v11 = (uint64_t)v8;
          v8 = v9;
          std::string::operator=((std::string *)(v11 + 32), (const std::string *)(v10 + 4));
          *(_QWORD *)(v11 + 56) = v10[7];
          sub_1DF38304C(a1, v11);
          if (v9)
            v9 = (char *)sub_1DF367604((uint64_t)v9);
          v12 = (_QWORD *)v10[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v10[2];
              v13 = *a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v10 = a2;
        }
        while (a2 != a3);
      }
      sub_1DF367658(v8);
      if (v9)
      {
        do
        {
          v14 = v9;
          v9 = (char *)*((_QWORD *)v9 + 2);
        }
        while (v9);
        sub_1DF367658(v14);
      }
    }
  }
  if (a2 != a3)
  {
    do
    {
      v15 = (char *)operator new(0x40uLL);
      v16 = (uint64_t *)v15;
      v17 = (const void **)(v15 + 32);
      if (*((char *)a2 + 55) < 0)
      {
        sub_1DF36DA38(v15 + 32, (void *)a2[4], a2[5]);
      }
      else
      {
        v18 = *((_OWORD *)a2 + 2);
        *((_QWORD *)v15 + 6) = a2[6];
        *(_OWORD *)v17 = v18;
      }
      v16[7] = a2[7];
      v19 = (uint64_t **)sub_1DF3830BC(a1, &v24, v17);
      v20 = v24;
      *v16 = 0;
      v16[1] = 0;
      v16[2] = v20;
      *v19 = v16;
      v21 = **(_QWORD **)a1;
      if (v21)
      {
        *(_QWORD *)a1 = v21;
        v16 = *v19;
      }
      sub_1DF36718C(*(uint64_t **)(a1 + 8), v16);
      ++*(_QWORD *)(a1 + 16);
      v22 = (_QWORD *)a2[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)a2[2];
          v13 = *v23 == (_QWORD)a2;
          a2 = v23;
        }
        while (!v13);
      }
      a2 = v23;
    }
    while (v23 != a3);
  }
}

_QWORD *sub_1DF367604(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

void sub_1DF367658(char *a1)
{
  if (a1)
  {
    sub_1DF367658(*(_QWORD *)a1);
    sub_1DF367658(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

_QWORD *sub_1DF3676A0(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  void **v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  void *v17;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      goto LABEL_23;
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 61)
LABEL_23:
      abort();
    result = operator new(8 * v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v11];
    v12 = a3 - v6;
    if (v12)
      result = memcpy(result, v6, v12);
    v13 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v13 = (void **)(result + 1);
  v14 = (_BYTE *)result[1];
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
  {
    v12 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v17 = (void *)*result;
LABEL_21:
    result = memmove(v17, __src, v12);
    goto LABEL_22;
  }
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = memmove((void *)*result, __src, v14 - v9);
    v9 = (char *)*v13;
  }
  v12 = a3 - v16;
  if (v12)
  {
    v17 = v9;
    __src = v16;
    goto LABEL_21;
  }
LABEL_22:
  *v13 = &v9[v12];
  return result;
}

void sub_1DF3677DC(char *a1)
{
  if (a1)
  {
    sub_1DF3677DC(*(_QWORD *)a1);
    sub_1DF3677DC(*((_QWORD *)a1 + 1));
    sub_1DF3739AC((uint64_t)(a1 + 56), *((char **)a1 + 8));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void sub_1DF367830(_QWORD *a1)
{
  if (a1)
  {
    sub_1DF367830(*a1);
    sub_1DF367830(a1[1]);
    sub_1DF367874((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t sub_1DF367874(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1DF3678B4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void **v6;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        sub_1DF356EBC((uint64_t *)(v4 + 224), 0);
        sub_1DF368F80(v4 + 152);
        sub_1DF367C54(v4 + 72);
        v6 = (void **)(v4 + 48);
        sub_1DF370598(&v6);
        if (*(char *)(v4 + 47) < 0)
          operator delete(*(void **)(v4 + 24));
        if (*(char *)(v4 + 23) < 0)
          operator delete(*(void **)v4);
        MEMORY[0x1E0BFF788](v4, 0x10B2C4058EA06FBLL);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1DF367658(*(char **)(a1 + 8));
  return a1;
}

uint64_t sub_1DF367988(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v3 = *(_QWORD **)(a1 + 24);
  v2 = *(_QWORD **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        MEMORY[0x1E0BFF788](*v3, 0x1020C4001A1C0B8);
        v2 = *(_QWORD **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(_QWORD **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1DF367658(*(char **)(a1 + 8));
  return a1;
}

BOOL sub_1DF3679FC(uint64_t *a1, char *a2, int a3, int a4)
{
  unsigned __int8 v8;
  _xlocale *v9;
  const char *v10;
  int v11;
  char *v12;
  char v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  _BOOL8 result;
  char *v20;

  if (a3 <= 0)
  {
    v12 = a2;
    do
    {
      v14 = *v12++;
      v13 = v14;
      v15 = v14 - 48;
      if (v14)
        v16 = v15 > 9;
      else
        v16 = 0;
    }
    while (v16);
    if (v13 == 48 && (*v12 & 0xDF) == 0x58)
    {
      if (a4)
        *__error() = 0;
      v20 = a2;
      v17 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
      if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
      {
        qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
        __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
        __cxa_guard_release(&qword_1F04755F0);
      }
      v9 = (_xlocale *)qword_1F04755E8;
      v10 = a2;
      v11 = 16;
    }
    else
    {
      if (a4)
        *__error() = 0;
      v20 = a2;
      v18 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
      if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
      {
        qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
        __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
        __cxa_guard_release(&qword_1F04755F0);
      }
      v9 = (_xlocale *)qword_1F04755E8;
      v10 = a2;
      v11 = 10;
    }
  }
  else
  {
    if (a4)
      *__error() = 0;
    v20 = a2;
    v8 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v9 = (_xlocale *)qword_1F04755E8;
    v10 = a2;
    v11 = a3;
  }
  *a1 = strtoll_l(v10, &v20, v11, v9);
  if (v20 != a2 && !*v20)
    return !a4 || !*__error();
  result = 0;
  *a1 = 0;
  return result;
}

uint64_t sub_1DF367C54(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        if (*(char *)(v4 + 55) < 0)
          operator delete(*(void **)(v4 + 32));
        MEMORY[0x1E0BFF788](v4, 0x1032C40E9BF265ALL);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1DF367658(*(char **)(a1 + 8));
  return a1;
}

uint64_t sub_1DF367CE4@<X0>(int a1@<W0>, std::string *a2@<X8>, float a3@<S0>)
{
  uint64_t v6;
  char v7;
  BOOL v8;
  std::string *v9;
  std::string::size_type size;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned __int8 v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  std::string::size_type v23;
  char *v24[2];
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[11];
  char v30;
  uint64_t v31;

  sub_1DF367FB0((uint64_t)v28);
  v6 = v29[0];
  *(_DWORD *)((char *)&v29[1] + *(_QWORD *)(v29[0] - 24)) = *(_DWORD *)((_BYTE *)&v29[1] + *(_QWORD *)(v29[0] - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v29[2] + *(_QWORD *)(v6 - 24)) = a1;
  std::ostream::operator<<();
  std::stringbuf::str();
  v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v8 = v7 < 0;
  v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if (v7 >= 0)
    v9 = a2;
  size = v7 & 0x7F;
  if (v8)
    size = a2->__r_.__value_.__l.__size_;
  while (size)
  {
    v11 = *((unsigned __int8 *)&v9[-1].__r_.__value_.__r.__words[2] + size-- + 7);
    if (v11 != 48)
    {
      if (size != -1)
      {
        v12 = v9->__r_.__value_.__s.__data_[size] == 46;
        v13 = 1;
        if (v12)
          v13 = 2;
        std::string::resize(a2, v13 + size, 0);
      }
      break;
    }
  }
  v14 = MEMORY[0x1E0DE4F50];
  v15 = MEMORY[0x1E0DE4FB8];
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = (char *)a2;
  else
    v16 = (char *)a2->__r_.__value_.__r.__words[0];
  v24[0] = v16;
  v17 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
  {
    qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
    __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
    __cxa_guard_release(&qword_1F04755F0);
  }
  v18 = strtof_l(v16, v24, (locale_t)qword_1F04755E8);
  if (v24[0] == v16 || *v24[0])
    v18 = 0.0;
  if (v18 != a3)
  {
    sub_1DF367FB0((uint64_t)v24);
    *(_DWORD *)((char *)&v25[1] + *(_QWORD *)(v25[0] - 24)) |= 0x104u;
    std::ostream::operator<<();
    std::stringbuf::str();
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      operator delete(a2->__r_.__value_.__l.__data_);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v22;
    a2->__r_.__value_.__r.__words[2] = v23;
    v24[0] = *(char **)v14;
    v19 = *(_QWORD *)(v14 + 72);
    *(char **)((char *)v24 + *((_QWORD *)v24[0] - 3)) = *(char **)(v14 + 64);
    v25[0] = v19;
    v25[1] = v15 + 16;
    if (v26 < 0)
      operator delete((void *)v25[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1E0BFF758](&v27);
  }
  v28[0] = *(_QWORD *)v14;
  v20 = *(_QWORD *)(v14 + 72);
  *(_QWORD *)((char *)v28 + *(_QWORD *)(v28[0] - 24)) = *(_QWORD *)(v14 + 64);
  v29[0] = v20;
  v29[1] = v15 + 16;
  if (v30 < 0)
    operator delete((void *)v29[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1E0BFF758](&v31);
}

uint64_t sub_1DF367FB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = (_QWORD *)(a1 + 16);
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *v4 = v9;
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *v4 = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

uint64_t sub_1DF3680A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v2 - 24)) = a2[8];
  v3 = a2[9];
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  return std::iostream::~basic_iostream();
}

void sub_1DF368120(std::string *a1)
{
  std::string *v2;
  std::string::size_type v3;
  std::string *v4;
  std::string::size_type v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  void *__p[2];
  char v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  sub_1DF356B08();
  v2 = std::string::insert(&v13, 0, "[");
  v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v14, "; ");
  v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_1DF356B08();
  if (v12 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v12 >= 0)
    v7 = v12 & 0x7F;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v15, (const std::string::value_type *)v6, v7);
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v16, "]");
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1DF368268(std::string *a1)
{
  std::string::size_type v2;
  std::string::size_type v3;
  std::string::size_type v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  void *v15[2];
  char v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  void *__p;
  char v23;
  _BYTE v24[160];

  sub_1DF367FB0((uint64_t)&v20);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2 = *MEMORY[0x1E0DE4F50];
  v20.__r_.__value_.__r.__words[0] = v2;
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + *(_QWORD *)(v2 - 24)) = v3;
  v5 = MEMORY[0x1E0DE4FB8] + 16;
  v20.__r_.__value_.__r.__words[2] = v4;
  v21 = MEMORY[0x1E0DE4FB8] + 16;
  if (v23 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E0BFF758](v24);
  v6 = std::string::insert(&v17, 0, "[");
  v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v18, "; ");
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_1DF367FB0((uint64_t)&v20);
  std::ostream::operator<<();
  std::stringbuf::str();
  v20.__r_.__value_.__r.__words[0] = v2;
  *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + *(_QWORD *)(v2 - 24)) = v3;
  v20.__r_.__value_.__r.__words[2] = v4;
  v21 = v5;
  if (v23 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E0BFF758](v24);
  if (v16 >= 0)
    v10 = v15;
  else
    v10 = (void **)v15[0];
  if (v16 >= 0)
    v11 = v16 & 0x7F;
  else
    v11 = (std::string::size_type)v15[1];
  v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v20, "]");
  *a1 = *v14;
  v14->__r_.__value_.__r.__words[0] = 0;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1DF3684A0(std::string *a1)
{
  std::string *v2;
  std::string::size_type v3;
  std::string *v4;
  std::string::size_type v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  void *__p[2];
  char v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  sub_1DF382738();
  v2 = std::string::insert(&v13, 0, "[");
  v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v14, "; ");
  v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_1DF382738();
  if (v12 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v12 >= 0)
    v7 = v12 & 0x7F;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v15, (const std::string::value_type *)v6, v7);
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v16, "]");
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1DF3685E8(std::string *a1)
{
  std::string::size_type v2;
  std::string::size_type v3;
  std::string::size_type v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  void *v15[2];
  char v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  void *__p;
  char v23;
  _BYTE v24[160];

  sub_1DF367FB0((uint64_t)&v20);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2 = *MEMORY[0x1E0DE4F50];
  v20.__r_.__value_.__r.__words[0] = v2;
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + *(_QWORD *)(v2 - 24)) = v3;
  v5 = MEMORY[0x1E0DE4FB8] + 16;
  v20.__r_.__value_.__r.__words[2] = v4;
  v21 = MEMORY[0x1E0DE4FB8] + 16;
  if (v23 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E0BFF758](v24);
  v6 = std::string::insert(&v17, 0, "[");
  v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v18, "; ");
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_1DF367FB0((uint64_t)&v20);
  std::ostream::operator<<();
  std::stringbuf::str();
  v20.__r_.__value_.__r.__words[0] = v2;
  *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + *(_QWORD *)(v2 - 24)) = v3;
  v20.__r_.__value_.__r.__words[2] = v4;
  v21 = v5;
  if (v23 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E0BFF758](v24);
  if (v16 >= 0)
    v10 = v15;
  else
    v10 = (void **)v15[0];
  if (v16 >= 0)
    v11 = v16 & 0x7F;
  else
    v11 = (std::string::size_type)v15[1];
  v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v20, "]");
  *a1 = *v14;
  v14->__r_.__value_.__r.__words[0] = 0;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1DF368820(std::string *a1)
{
  std::string::size_type v2;
  std::string::size_type v3;
  std::string::size_type v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  void *v15[2];
  char v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  void *__p;
  char v23;
  _BYTE v24[160];

  sub_1DF367FB0((uint64_t)&v20);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2 = *MEMORY[0x1E0DE4F50];
  v20.__r_.__value_.__r.__words[0] = v2;
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + *(_QWORD *)(v2 - 24)) = v3;
  v5 = MEMORY[0x1E0DE4FB8] + 16;
  v20.__r_.__value_.__r.__words[2] = v4;
  v21 = MEMORY[0x1E0DE4FB8] + 16;
  if (v23 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E0BFF758](v24);
  v6 = std::string::insert(&v17, 0, "[");
  v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v18, "; ");
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_1DF367FB0((uint64_t)&v20);
  std::ostream::operator<<();
  std::stringbuf::str();
  v20.__r_.__value_.__r.__words[0] = v2;
  *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + *(_QWORD *)(v2 - 24)) = v3;
  v20.__r_.__value_.__r.__words[2] = v4;
  v21 = v5;
  if (v23 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E0BFF758](v24);
  if (v16 >= 0)
    v10 = v15;
  else
    v10 = (void **)v15[0];
  if (v16 >= 0)
    v11 = v16 & 0x7F;
  else
    v11 = (std::string::size_type)v15[1];
  v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v20, "]");
  *a1 = *v14;
  v14->__r_.__value_.__r.__words[0] = 0;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1DF368A58(std::string *a1)
{
  std::string *v2;
  std::string::size_type v3;
  std::string *v4;
  std::string::size_type v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  void *__p[2];
  char v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  sub_1DF3826CC();
  v2 = std::string::insert(&v13, 0, "[");
  v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v14, "; ");
  v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_1DF3826CC();
  if (v12 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v12 >= 0)
    v7 = v12 & 0x7F;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v15, (const std::string::value_type *)v6, v7);
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v16, "]");
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1DF368BA0(std::string *a1)
{
  std::string::size_type v2;
  std::string::size_type v3;
  std::string::size_type v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  void *v15[2];
  char v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  void *__p;
  char v23;
  _BYTE v24[160];

  sub_1DF367FB0((uint64_t)&v20);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2 = *MEMORY[0x1E0DE4F50];
  v20.__r_.__value_.__r.__words[0] = v2;
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + *(_QWORD *)(v2 - 24)) = v3;
  v5 = MEMORY[0x1E0DE4FB8] + 16;
  v20.__r_.__value_.__r.__words[2] = v4;
  v21 = MEMORY[0x1E0DE4FB8] + 16;
  if (v23 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E0BFF758](v24);
  v6 = std::string::insert(&v17, 0, "[");
  v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v18, "; ");
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_1DF367FB0((uint64_t)&v20);
  std::ostream::operator<<();
  std::stringbuf::str();
  v20.__r_.__value_.__r.__words[0] = v2;
  *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + *(_QWORD *)(v2 - 24)) = v3;
  v20.__r_.__value_.__r.__words[2] = v4;
  v21 = v5;
  if (v23 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E0BFF758](v24);
  if (v16 >= 0)
    v10 = v15;
  else
    v10 = (void **)v15[0];
  if (v16 >= 0)
    v11 = v16 & 0x7F;
  else
    v11 = (std::string::size_type)v15[1];
  v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v20, "]");
  *a1 = *v14;
  v14->__r_.__value_.__r.__words[0] = 0;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1DF368DD8(std::string *a1)
{
  std::string *v2;
  std::string::size_type v3;
  std::string *v4;
  std::string::size_type v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  void *__p[2];
  char v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  sub_1DF345C20();
  v2 = std::string::insert(&v13, 0, "[");
  v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v14, "; ");
  v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_1DF345C20();
  if (v12 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v12 >= 0)
    v7 = v12 & 0x7F;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v15, (const std::string::value_type *)v6, v7);
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v16, "]");
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

uint64_t sub_1DF368F20(uint64_t a1)
{
  void **v3;

  sub_1DF367C54(a1 + 72);
  v3 = (void **)(a1 + 48);
  sub_1DF370598(&v3);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1DF368F80(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void **v6;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        if (*(char *)(v4 + 207) < 0)
          operator delete(*(void **)(v4 + 184));
        sub_1DF367C54(v4 + 72);
        v6 = (void **)(v4 + 48);
        sub_1DF370598(&v6);
        if (*(char *)(v4 + 47) < 0)
          operator delete(*(void **)(v4 + 24));
        if (*(char *)(v4 + 23) < 0)
          operator delete(*(void **)v4);
        MEMORY[0x1E0BFF788](v4, 0x10B2C40559199D4);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1DF367658(*(char **)(a1 + 8));
  return a1;
}

uint64_t sub_1DF369050(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  char *v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *p_src;
  BOOL v34;
  int v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  size_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char v48;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t __src;

  if (HIDWORD(a3))
    v11 = 3;
  else
    v11 = 2;
  if (a3 >= 0x10000)
    v12 = v11;
  else
    v12 = 1;
  if (a3 < 0x100)
    v12 = 0;
  if (*(_DWORD *)(a1 + 56) <= v12)
    v13 = v12;
  else
    v13 = *(_DWORD *)(a1 + 56);
  if (a6)
  {
    v14 = sub_1DF36A3B4(a6, *(_QWORD *)(a1 + 8) - *(_QWORD *)a1, 0);
    if (v13 <= v14)
      v13 = v14;
    v15 = 3;
  }
  else
  {
    v15 = 1;
  }
  v55 = a6;
  v16 = *(_QWORD *)(a1 + 24);
  v17 = (*(_QWORD *)(a1 + 32) - v16) >> 4;
  v57 = a4;
  v18 = 16 * a4;
  v53 = *(char **)(a1 + 8);
  v50 = a3;
  v51 = *(char **)a1;
  if (v17 > a2)
  {
    v19 = 0;
    v20 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    v21 = v16 + 16 * a2;
    v22 = v15 + a2;
    do
    {
      v23 = sub_1DF36A3B4(v21, v20, v22 + v19);
      if (v13 <= v23)
        v13 = v23;
      v19 += a4;
      v21 += v18;
    }
    while (a2 + v19 < v17);
  }
  LOBYTE(__src) = 0;
  sub_1DF36A444((char **)a1, v53, (v51 - v53) & ((1 << v13) - 1), (char *)&__src);
  if (v55)
  {
    v24 = *(char **)(a1 + 8);
    v25 = (1 << v13);
    __src = (uint64_t)&v24[-*(_QWORD *)v55 - *(_QWORD *)a1];
    sub_1DF36A650(a1, v24, (char *)&__src, (char *)&__src + v25, v25);
    __src = 1 << *(_DWORD *)(v55 + 12);
    sub_1DF36A650(a1, *(char **)(a1 + 8), (char *)&__src, (char *)&__src + v25, v25);
  }
  else
  {
    v25 = (1 << v13);
  }
  __src = v50;
  sub_1DF36A650(a1, *(char **)(a1 + 8), (char *)&__src, (char *)&__src + v25, v25);
  v26 = *(_QWORD *)(a1 + 24);
  v27 = *(_QWORD *)(a1 + 32);
  v52 = *(char **)a1;
  v54 = *(_QWORD *)(a1 + 8);
  if (a2 >= (v27 - v26) >> 4)
  {
    v30 = a4;
  }
  else
  {
    v28 = 16 * a2;
    v29 = a2;
    v30 = v57;
    do
    {
      sub_1DF383444(a1, v26 + v28, (1 << v13));
      v29 += v57;
      v26 = *(_QWORD *)(a1 + 24);
      v27 = *(_QWORD *)(a1 + 32);
      v28 += v18;
    }
    while (v29 < (v27 - v26) >> 4);
  }
  if ((a5 & 1) == 0 && a2 < (v27 - v26) >> 4)
  {
    do
    {
      LODWORD(__src) = v13;
      v31 = v26 + 16 * a2;
      v32 = *(_DWORD *)(v31 + 8);
      p_src = (uint64_t *)(v31 + 12);
      v34 = v32 < 4 || v32 == 26;
      if (v34 && *(_DWORD *)p_src < v13)
        p_src = &__src;
      v35 = *(_DWORD *)p_src | (4 * v32);
      v37 = *(char **)(a1 + 8);
      v36 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v37 >= v36)
      {
        v39 = *(char **)a1;
        v40 = &v37[-*(_QWORD *)a1];
        v41 = (unint64_t)(v40 + 1);
        if ((uint64_t)(v40 + 1) < 0)
          abort();
        v42 = v36 - (_QWORD)v39;
        if (2 * v42 > v41)
          v41 = 2 * v42;
        if (v42 >= 0x3FFFFFFFFFFFFFFFLL)
          v43 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
          v44 = (char *)operator new(v43);
        else
          v44 = 0;
        v45 = &v40[(_QWORD)v44];
        v46 = &v40[(_QWORD)v44];
        *v46 = v35;
        v38 = v46 + 1;
        if (v37 != v39)
        {
          v47 = &v37[~(unint64_t)v39];
          do
          {
            v48 = *--v37;
            (v47--)[(_QWORD)v44] = v48;
          }
          while (v37 != v39);
          v37 = *(char **)a1;
          v45 = v44;
        }
        *(_QWORD *)a1 = v45;
        *(_QWORD *)(a1 + 8) = v38;
        *(_QWORD *)(a1 + 16) = &v44[v43];
        if (v37)
          operator delete(v37);
        v30 = v57;
      }
      else
      {
        *v37 = v35;
        v38 = v37 + 1;
      }
      *(_QWORD *)(a1 + 8) = v38;
      a2 += v30;
      v26 = *(_QWORD *)(a1 + 24);
    }
    while (a2 < (*(_QWORD *)(a1 + 32) - v26) >> 4);
  }
  return v54 - (_QWORD)v52;
}

void sub_1DF3693F8(__int128 *a1, __int128 *a2, uint64_t **a3, uint64_t a4, char a5)
{
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  __int128 *v37;
  __int128 *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 *v50;
  BOOL v52;
  uint64_t v53;
  __int128 *v54;
  __int128 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  __int128 v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  __int128 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 *v100;
  __int128 v101;
  uint64_t v102;
  unint64_t v103;
  __int128 *v104;
  uint64_t v105;
  uint64_t v106;
  _OWORD *v107;
  __int128 v108;
  uint64_t v109;
  BOOL v110;
  __int128 *v111;
  uint64_t v112;
  uint64_t v113;
  __int128 *v114;
  uint64_t **v115;
  __int128 *v116;
  __int128 v117;
  uint64_t v118;
  int v119;
  __int128 *v120;
  __int128 *v121;
  int64_t v122;
  uint64_t **v123;
  __int128 *v124;
  __int128 *v125;
  uint64_t v127;
  uint64_t v128;
  __int128 *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;

LABEL_1:
  v124 = a2;
  v125 = a2 - 2;
  v120 = a2 - 6;
  v121 = a2 - 4;
  v9 = a1;
  while (2)
  {
    v10 = (uint64_t)v9;
    v11 = (char *)a2 - (char *)v9;
    v12 = ((char *)a2 - (char *)v9) >> 5;
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        v47 = *((_QWORD *)a2 - 4);
        v46 = a2 - 2;
        v45 = v47;
        if (**a3 == (*a3)[1])
          v48 = 0;
        else
          v48 = **a3;
        if (strcmp((const char *)(v48 + v45), (const char *)(v48 + *(_QWORD *)v9)) < 0)
        {
          v139 = *v9;
          v147 = v9[1];
          v49 = v46[1];
          *v9 = *v46;
          v9[1] = v49;
          *v46 = v139;
          v46[1] = v147;
        }
        return;
      case 3:
        sub_1DF369E30(v9, v9 + 2, v125, a3);
        return;
      case 4:
        sub_1DF36A190((uint64_t)v9, v9 + 2, v9 + 4, v125, a3);
        return;
      case 5:
        sub_1DF36A284((uint64_t)v9, v9 + 2, v9 + 4, v9 + 6, v125, a3);
        return;
      default:
        if (v11 <= 767)
        {
          v50 = v9 + 2;
          v52 = v9 == a2 || v50 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 0;
              v54 = v9;
              do
              {
                v55 = v50;
                if (**a3 == (*a3)[1])
                  v56 = 0;
                else
                  v56 = **a3;
                v57 = *((_QWORD *)v54 + 4);
                if (strcmp((const char *)(v56 + v57), (const char *)(v56 + *(_QWORD *)v54)) < 0)
                {
                  v140 = *(__int128 *)((char *)v54 + 40);
                  v148 = *((_QWORD *)v54 + 7);
                  v58 = v53;
                  while (1)
                  {
                    v59 = (char *)v9 + v58;
                    v60 = *(__int128 *)((char *)v9 + v58 + 16);
                    *((_OWORD *)v59 + 2) = *(__int128 *)((char *)v9 + v58);
                    *((_OWORD *)v59 + 3) = v60;
                    if (!v58)
                      break;
                    if (**a3 == (*a3)[1])
                      v61 = 0;
                    else
                      v61 = **a3;
                    v58 -= 32;
                    if ((strcmp((const char *)(v61 + v57), (const char *)(v61 + *((_QWORD *)v59 - 4))) & 0x80000000) == 0)
                    {
                      v62 = (uint64_t)v9 + v58 + 32;
                      goto LABEL_90;
                    }
                  }
                  v62 = (uint64_t)v9;
LABEL_90:
                  *(_QWORD *)v62 = v57;
                  *(_QWORD *)(v62 + 24) = v148;
                  *(_OWORD *)(v62 + 8) = v140;
                }
                v50 = v55 + 2;
                v53 += 32;
                v54 = v55;
              }
              while (v55 + 2 != a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v111 = v50;
              if (**a3 == (*a3)[1])
                v112 = 0;
              else
                v112 = **a3;
              v113 = *(_QWORD *)(v10 + 32);
              if (strcmp((const char *)(v112 + v113), (const char *)(v112 + *(_QWORD *)v10)) < 0)
              {
                v143 = *(_OWORD *)(v10 + 40);
                v151 = *(_QWORD *)(v10 + 56);
                v114 = v111;
                v115 = a3;
                do
                {
                  v116 = v114 - 2;
                  v117 = *(v114 - 1);
                  *v114 = *(v114 - 2);
                  v114[1] = v117;
                  if (**v115 == (*v115)[1])
                    v118 = 0;
                  else
                    v118 = **v115;
                  v119 = strcmp((const char *)(v118 + v113), (const char *)(v118 + *((_QWORD *)v114 - 8)));
                  v114 = v116;
                }
                while (v119 < 0);
                *(_QWORD *)v116 = v113;
                *((_QWORD *)v116 + 3) = v151;
                *(__int128 *)((char *)v116 + 8) = v143;
                a3 = v115;
              }
              v50 = v111 + 2;
              v10 = (uint64_t)v111;
            }
            while (v111 + 2 != a2);
          }
          return;
        }
        v129 = v9;
        if (!a4)
        {
          if (v9 != a2)
          {
            v63 = (unint64_t)(v12 - 2) >> 1;
            v64 = v63;
            v123 = a3;
            do
            {
              v65 = v64;
              if (v63 >= v64)
              {
                v66 = (2 * v64) | 1;
                v67 = v10 + 32 * v66;
                v68 = 2 * v64 + 2;
                v69 = *a3;
                v70 = **a3;
                v122 = v65;
                if (v68 >= v12)
                {
                  v75 = v69[1];
                  v76 = *(_QWORD *)v67;
                }
                else
                {
                  v127 = v69[1];
                  if (v70 == v127)
                    v71 = 0;
                  else
                    v71 = **a3;
                  v72 = *(_QWORD *)v67;
                  v73 = *(_QWORD *)(v67 + 32);
                  v74 = strcmp((const char *)(v71 + *(_QWORD *)v67), (const char *)(v71 + v73));
                  v75 = v127;
                  if (v74 >= 0)
                    v76 = v72;
                  else
                    v76 = v73;
                  v65 = v122;
                  if (v74 < 0)
                  {
                    v67 += 32;
                    v66 = v68;
                  }
                }
                v77 = v10 + 32 * v65;
                if (v70 == v75)
                  v78 = 0;
                else
                  v78 = v70;
                v128 = *(_QWORD *)v77;
                v63 = (unint64_t)(v12 - 2) >> 1;
                if ((strcmp((const char *)(v78 + v76), (const char *)(v78 + *(_QWORD *)v77)) & 0x80000000) == 0)
                {
                  v149 = *(_QWORD *)(v77 + 24);
                  v141 = *(_OWORD *)(v77 + 8);
                  do
                  {
                    v79 = (_OWORD *)v77;
                    v77 = v67;
                    v80 = *(_OWORD *)(v67 + 16);
                    *v79 = *(_OWORD *)v67;
                    v79[1] = v80;
                    if (v63 < v66)
                      break;
                    v81 = (2 * v66) | 1;
                    v67 = v10 + 32 * v81;
                    v66 = 2 * v66 + 2;
                    v82 = *a3;
                    v83 = **a3;
                    if (v66 >= v12)
                    {
                      v84 = v82[1];
                      v89 = *(_QWORD *)v67;
                      v66 = v81;
                    }
                    else
                    {
                      v84 = v82[1];
                      if (v83 == v84)
                        v85 = 0;
                      else
                        v85 = **a3;
                      v86 = *(_QWORD *)v67;
                      v87 = *(_QWORD *)(v67 + 32);
                      v88 = strcmp((const char *)(v85 + *(_QWORD *)v67), (const char *)(v85 + v87));
                      if (v88 >= 0)
                        v89 = v86;
                      else
                        v89 = v87;
                      v63 = (unint64_t)(v12 - 2) >> 1;
                      a3 = v123;
                      if (v88 < 0)
                        v67 += 32;
                      v10 = (uint64_t)v129;
                      if (v88 >= 0)
                        v66 = v81;
                    }
                    v90 = v83 == v84 ? 0 : v83;
                  }
                  while ((strcmp((const char *)(v90 + v89), (const char *)(v90 + v128)) & 0x80000000) == 0);
                  *(_QWORD *)v77 = v128;
                  *(_QWORD *)(v77 + 24) = v149;
                  *(_OWORD *)(v77 + 8) = v141;
                  v65 = v122;
                }
              }
              v64 = v65 - 1;
            }
            while (v65);
            v91 = v124;
            do
            {
              v92 = 0;
              v142 = *(_OWORD *)v10;
              v150 = *(_OWORD *)(v10 + 16);
              v93 = v12 - 2;
              if (v12 < 2)
                v93 = v12 - 1;
              v94 = v93 >> 1;
              do
              {
                v95 = v10 + 32 * v92 + 32;
                v96 = (2 * v92) | 1;
                v97 = 2 * v92 + 2;
                if (v97 < v12)
                {
                  v98 = **a3 == (*a3)[1] ? 0 : **a3;
                  if (strcmp((const char *)(v98 + *(_QWORD *)v95), (const char *)(v98 + *(_QWORD *)(v95 + 32))) < 0)
                  {
                    v95 += 32;
                    v96 = v97;
                  }
                }
                v99 = *(_OWORD *)(v95 + 16);
                *(_OWORD *)v10 = *(_OWORD *)v95;
                *(_OWORD *)(v10 + 16) = v99;
                v10 = v95;
                v92 = v96;
              }
              while (v96 <= v94);
              v100 = v91 - 2;
              if ((__int128 *)v95 == v91 - 2)
              {
                v91 -= 2;
                *(_OWORD *)v95 = v142;
                *(_OWORD *)(v95 + 16) = v150;
              }
              else
              {
                v101 = *(v91 - 1);
                *(_OWORD *)v95 = *v100;
                *(_OWORD *)(v95 + 16) = v101;
                *v100 = v142;
                *(v91 - 1) = v150;
                v91 -= 2;
                v102 = v95 - (_QWORD)v129 + 32;
                if (v102 >= 33)
                {
                  v103 = (((unint64_t)v102 >> 5) - 2) >> 1;
                  v104 = &v129[2 * v103];
                  v105 = **a3 == (*a3)[1] ? 0 : **a3;
                  v106 = *(_QWORD *)v95;
                  if (strcmp((const char *)(v105 + *(_QWORD *)v104), (const char *)(v105 + *(_QWORD *)v95)) < 0)
                  {
                    v135 = *(_QWORD *)(v95 + 24);
                    v132 = *(_OWORD *)(v95 + 8);
                    do
                    {
                      v107 = (_OWORD *)v95;
                      v95 = (uint64_t)v104;
                      v108 = v104[1];
                      *v107 = *v104;
                      v107[1] = v108;
                      if (!v103)
                        break;
                      v103 = (v103 - 1) >> 1;
                      v104 = &v129[2 * v103];
                      v109 = **a3 == (*a3)[1] ? 0 : **a3;
                    }
                    while (strcmp((const char *)(v109 + *(_QWORD *)v104), (const char *)(v109 + v106)) < 0);
                    *(_QWORD *)v95 = v106;
                    *(_QWORD *)(v95 + 24) = v135;
                    *(_OWORD *)(v95 + 8) = v132;
                  }
                }
              }
              v110 = v12-- <= 2;
              v10 = (uint64_t)v129;
            }
            while (!v110);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v9[2 * ((unint64_t)v12 >> 1)];
        if ((unint64_t)v11 <= 0x1000)
        {
          sub_1DF369E30((__int128 *)(v10 + 32 * ((unint64_t)v12 >> 1)), (__int128 *)v10, v125, a3);
        }
        else
        {
          sub_1DF369E30((__int128 *)v10, (__int128 *)(v10 + 32 * ((unint64_t)v12 >> 1)), v125, a3);
          sub_1DF369E30((__int128 *)(v10 + 32), v14 - 2, v121, a3);
          sub_1DF369E30((__int128 *)(v10 + 64), (__int128 *)(v10 + 32 + 32 * v13), v120, a3);
          sub_1DF369E30(v14 - 2, (__int128 *)(v10 + 32 * ((unint64_t)v12 >> 1)), (__int128 *)(v10 + 32 + 32 * v13), a3);
          v136 = *(_OWORD *)v10;
          v144 = *(_OWORD *)(v10 + 16);
          v15 = v14[1];
          *(_OWORD *)v10 = *v14;
          *(_OWORD *)(v10 + 16) = v15;
          *v14 = v136;
          v14[1] = v144;
        }
        --a4;
        v16 = *(_QWORD *)v10;
        v17 = *a3;
        v18 = **a3;
        v19 = v10;
        if ((a5 & 1) == 0)
        {
          v20 = v17[1];
          if (v18 == v20)
            v21 = 0;
          else
            v21 = **a3;
          if (strcmp((const char *)(v21 + *(_QWORD *)(v19 - 32)), (const char *)(v21 + v16)) < 0)
            goto LABEL_14;
          v134 = *(_QWORD *)(v19 + 24);
          v131 = *(_OWORD *)(v19 + 8);
          if (strcmp((const char *)(v21 + v16), (const char *)(v21 + *(_QWORD *)v125)) < 0)
          {
            v9 = (__int128 *)v19;
            do
            {
              v36 = *((_QWORD *)v9 + 4);
              v9 += 2;
            }
            while ((strcmp((const char *)(v21 + v16), (const char *)(v21 + v36)) & 0x80000000) == 0);
          }
          else
          {
            v37 = (__int128 *)(v19 + 32);
            do
            {
              v9 = v37;
              if (v37 >= a2)
                break;
              v37 += 2;
            }
            while ((strcmp((const char *)(v21 + v16), (const char *)(v21 + *(_QWORD *)v9)) & 0x80000000) == 0);
          }
          v38 = a2;
          if (v9 < a2)
          {
            v38 = a2;
            do
            {
              v39 = *((_QWORD *)v38 - 4);
              v38 -= 2;
            }
            while (strcmp((const char *)(v21 + v16), (const char *)(v21 + v39)) < 0);
          }
          while (v9 < v38)
          {
            v138 = *v9;
            v146 = v9[1];
            v40 = v38[1];
            *v9 = *v38;
            v9[1] = v40;
            *v38 = v138;
            v38[1] = v146;
            if (**a3 == (*a3)[1])
              v41 = 0;
            else
              v41 = **a3;
            do
            {
              v42 = *((_QWORD *)v9 + 4);
              v9 += 2;
            }
            while ((strcmp((const char *)(v41 + v16), (const char *)(v41 + v42)) & 0x80000000) == 0);
            do
            {
              v43 = *((_QWORD *)v38 - 4);
              v38 -= 2;
            }
            while (strcmp((const char *)(v41 + v16), (const char *)(v41 + v43)) < 0);
          }
          if (v9 - 2 != v129)
          {
            v44 = *(v9 - 1);
            *v129 = *(v9 - 2);
            v129[1] = v44;
          }
          a5 = 0;
          *((_QWORD *)v9 - 4) = v16;
          *((_QWORD *)v9 - 1) = v134;
          *(__int128 *)((char *)v9 - 24) = v131;
          a2 = v124;
          continue;
        }
        v20 = v17[1];
LABEL_14:
        v22 = 0;
        v133 = *(_QWORD *)(v19 + 24);
        v130 = *(_OWORD *)(v19 + 8);
        if (v18 == v20)
          v23 = 0;
        else
          v23 = v18;
        do
        {
          v24 = strcmp((const char *)(v23 + *(_QWORD *)(v19 + v22 + 32)), (const char *)(v23 + v16));
          v22 += 32;
        }
        while (v24 < 0);
        v25 = v19 + v22;
        v26 = a2;
        if (v22 == 32)
        {
          v26 = a2;
          do
          {
            if (v25 >= (unint64_t)v26)
              break;
            v28 = *((_QWORD *)v26 - 4);
            v26 -= 2;
          }
          while ((strcmp((const char *)(v23 + v28), (const char *)(v23 + v16)) & 0x80000000) == 0);
        }
        else
        {
          do
          {
            v27 = *((_QWORD *)v26 - 4);
            v26 -= 2;
          }
          while ((strcmp((const char *)(v23 + v27), (const char *)(v23 + v16)) & 0x80000000) == 0);
        }
        v9 = (__int128 *)(v19 + v22);
        if (v25 < (unint64_t)v26)
        {
          v29 = v26;
          do
          {
            v137 = *v9;
            v145 = v9[1];
            v30 = v29[1];
            *v9 = *v29;
            v9[1] = v30;
            *v29 = v137;
            v29[1] = v145;
            if (**a3 == (*a3)[1])
              v31 = 0;
            else
              v31 = **a3;
            do
            {
              v32 = *((_QWORD *)v9 + 4);
              v9 += 2;
            }
            while (strcmp((const char *)(v31 + v32), (const char *)(v31 + v16)) < 0);
            do
            {
              v33 = *((_QWORD *)v29 - 4);
              v29 -= 2;
            }
            while ((strcmp((const char *)(v31 + v33), (const char *)(v31 + v16)) & 0x80000000) == 0);
          }
          while (v9 < v29);
        }
        a1 = v129;
        if (v9 - 2 != v129)
        {
          v34 = *(v9 - 1);
          *v129 = *(v9 - 2);
          v129[1] = v34;
        }
        *((_QWORD *)v9 - 4) = v16;
        *((_QWORD *)v9 - 1) = v133;
        *(__int128 *)((char *)v9 - 24) = v130;
        a2 = v124;
        if (v25 < (unint64_t)v26)
        {
LABEL_37:
          sub_1DF3693F8(v129, v9 - 2, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v35 = sub_1DF369F64(v129, v9 - 2, a3);
        if (!sub_1DF369F64(v9, v124, a3))
        {
          if (v35)
            continue;
          goto LABEL_37;
        }
        a2 = v9 - 2;
        if (!v35)
          goto LABEL_1;
        return;
    }
  }
}

uint64_t sub_1DF369E30(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t **a4)
{
  uint64_t v8;
  const char *v9;
  int v10;
  uint64_t result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;

  if (**a4 == (*a4)[1])
    v8 = 0;
  else
    v8 = **a4;
  v9 = (const char *)(v8 + *(_QWORD *)a2);
  v10 = strcmp(v9, (const char *)(v8 + *(_QWORD *)a1));
  result = strcmp((const char *)(v8 + *(_QWORD *)a3), v9);
  if (v10 < 0)
  {
    if ((result & 0x80000000) != 0)
    {
      v13 = *a1;
      v12 = a1[1];
      v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
LABEL_18:
      *a3 = v13;
      a3[1] = v12;
      return result;
    }
    v23 = *a1;
    v22 = a1[1];
    v24 = a2[1];
    *a1 = *a2;
    a1[1] = v24;
    *a2 = v23;
    a2[1] = v22;
    if (**a4 == (*a4)[1])
      v25 = 0;
    else
      v25 = **a4;
    result = strcmp((const char *)(v25 + *(_QWORD *)a3), (const char *)(v25 + *(_QWORD *)a2));
    if ((result & 0x80000000) != 0)
    {
      v13 = *a2;
      v12 = a2[1];
      v26 = a3[1];
      *a2 = *a3;
      a2[1] = v26;
      goto LABEL_18;
    }
  }
  else if ((result & 0x80000000) != 0)
  {
    v16 = *a2;
    v15 = a2[1];
    v17 = a3[1];
    *a2 = *a3;
    a2[1] = v17;
    *a3 = v16;
    a3[1] = v15;
    v18 = **a4 == (*a4)[1] ? 0 : **a4;
    result = strcmp((const char *)(v18 + *(_QWORD *)a2), (const char *)(v18 + *(_QWORD *)a1));
    if ((result & 0x80000000) != 0)
    {
      v20 = *a1;
      v19 = a1[1];
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      *a2 = v20;
      a2[1] = v19;
    }
  }
  return result;
}

BOOL sub_1DF369F64(__int128 *a1, __int128 *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v6 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 2;
      if (**a3 == (*a3)[1])
        v9 = 0;
      else
        v9 = **a3;
      if (strcmp((const char *)(v9 + *((_QWORD *)a2 - 4)), (const char *)(v9 + *(_QWORD *)a1)) < 0)
      {
        v11 = *a1;
        v10 = a1[1];
        v12 = v8[1];
        *a1 = *v8;
        a1[1] = v12;
        *v8 = v11;
        v8[1] = v10;
      }
      return 1;
    case 3:
      sub_1DF369E30(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_1DF36A190((uint64_t)a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_1DF36A284((uint64_t)a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v13 = a1 + 4;
      sub_1DF369E30(a1, a1 + 2, a1 + 4, a3);
      v14 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v17 = **a3 == (*a3)[1] ? 0 : **a3;
    v18 = *(_QWORD *)v14;
    if (strcmp((const char *)(v17 + *(_QWORD *)v14), (const char *)(v17 + *(_QWORD *)v13)) < 0)
    {
      v24 = *(__int128 *)((char *)v14 + 8);
      v25 = *((_QWORD *)v14 + 3);
      v19 = v15;
      while (1)
      {
        v20 = (char *)a1 + v19;
        v21 = *(__int128 *)((char *)a1 + v19 + 80);
        *((_OWORD *)v20 + 6) = *(__int128 *)((char *)a1 + v19 + 64);
        *((_OWORD *)v20 + 7) = v21;
        if (v19 == -64)
          break;
        if (**a3 == (*a3)[1])
          v22 = 0;
        else
          v22 = **a3;
        v19 -= 32;
        if ((strcmp((const char *)(v22 + v18), (const char *)(v22 + *((_QWORD *)v20 + 4))) & 0x80000000) == 0)
        {
          v23 = (uint64_t)a1 + v19 + 96;
          goto LABEL_21;
        }
      }
      v23 = (uint64_t)a1;
LABEL_21:
      *(_QWORD *)v23 = v18;
      *(_OWORD *)(v23 + 8) = v24;
      *(_QWORD *)(v23 + 24) = v25;
      if (++v16 == 8)
        return v14 + 2 == a2;
    }
    v13 = v14;
    v15 += 32;
    v14 += 2;
    if (v14 == a2)
      return 1;
  }
}

__n128 sub_1DF36A190(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t **a5)
{
  uint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  sub_1DF369E30((__int128 *)a1, a2, a3, a5);
  if (**a5 == (*a5)[1])
    v10 = 0;
  else
    v10 = **a5;
  if (strcmp((const char *)(v10 + *(_QWORD *)a4), (const char *)(v10 + *(_QWORD *)a3)) < 0)
  {
    v13 = *a3;
    v12 = a3[1];
    v14 = a4[1];
    *a3 = *a4;
    a3[1] = v14;
    *a4 = v13;
    a4[1] = v12;
    v15 = **a5 == (*a5)[1] ? 0 : **a5;
    if (strcmp((const char *)(v15 + *(_QWORD *)a3), (const char *)(v15 + *(_QWORD *)a2)) < 0)
    {
      v17 = *a2;
      v16 = a2[1];
      v18 = a3[1];
      *a2 = *a3;
      a2[1] = v18;
      *a3 = v17;
      a3[1] = v16;
      if (**a5 == (*a5)[1])
        v19 = 0;
      else
        v19 = **a5;
      if (strcmp((const char *)(v19 + *(_QWORD *)a2), (const char *)(v19 + *(_QWORD *)a1)) < 0)
      {
        v20 = *(_OWORD *)a1;
        result = *(__n128 *)(a1 + 16);
        v21 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v21;
        *a2 = v20;
        a2[1] = (__int128)result;
      }
    }
  }
  return result;
}

__n128 sub_1DF36A284(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, uint64_t **a6)
{
  uint64_t v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  sub_1DF36A190(a1, a2, a3, a4, a6);
  if (**a6 == (*a6)[1])
    v12 = 0;
  else
    v12 = **a6;
  if (strcmp((const char *)(v12 + *(_QWORD *)a5), (const char *)(v12 + *(_QWORD *)a4)) < 0)
  {
    v15 = *a4;
    v14 = a4[1];
    v16 = a5[1];
    *a4 = *a5;
    a4[1] = v16;
    *a5 = v15;
    a5[1] = v14;
    v17 = **a6 == (*a6)[1] ? 0 : **a6;
    if (strcmp((const char *)(v17 + *(_QWORD *)a4), (const char *)(v17 + *(_QWORD *)a3)) < 0)
    {
      v19 = *a3;
      v18 = a3[1];
      v20 = a4[1];
      *a3 = *a4;
      a3[1] = v20;
      *a4 = v19;
      a4[1] = v18;
      v21 = **a6 == (*a6)[1] ? 0 : **a6;
      if (strcmp((const char *)(v21 + *(_QWORD *)a3), (const char *)(v21 + *(_QWORD *)a2)) < 0)
      {
        v23 = *a2;
        v22 = a2[1];
        v24 = a3[1];
        *a2 = *a3;
        a2[1] = v24;
        *a3 = v23;
        a3[1] = v22;
        if (**a6 == (*a6)[1])
          v25 = 0;
        else
          v25 = **a6;
        if (strcmp((const char *)(v25 + *(_QWORD *)a2), (const char *)(v25 + *(_QWORD *)a1)) < 0)
        {
          v26 = *(_OWORD *)a1;
          result = *(__n128 *)(a1 + 16);
          v27 = a2[1];
          *(_OWORD *)a1 = *a2;
          *(_OWORD *)(a1 + 16) = v27;
          *a2 = v26;
          a2[1] = (__int128)result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1DF36A3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  uint64_t result;
  uint64_t v6;
  unint64_t i;
  unint64_t v8;
  BOOL v9;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = v3 < 4 || v3 == 26;
  if (v4)
    return *(unsigned int *)(a1 + 12);
  v6 = a2 - *(_QWORD *)a1;
  for (i = 1; ; i *= 2)
  {
    v8 = v6 + i * a3 + ((i - 1) & -a2);
    if (v8 >= 0x100)
    {
      if (v8 >= 0x10000)
        result = HIDWORD(v8) ? 3 : 2;
      else
        result = 1;
    }
    else
    {
      result = 0;
    }
    if (1 << result == i)
      break;
    v9 = i >= 4;
    v4 = i == 4;
    if (!v4 && v9)
      return 3;
  }
  return result;
}

char *sub_1DF36A444(char **a1, char *__src, unint64_t a3, char *a4)
{
  char *v5;
  unint64_t v6;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  size_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char v35;
  char *v36;
  char *v37;

  if (!a3)
    return __src;
  v5 = a4;
  v6 = a3;
  v9 = a1[1];
  v8 = a1[2];
  if (v8 - v9 >= a3)
  {
    v16 = v9 - __src;
    v17 = a3 - (v9 - __src);
    if (a3 <= v9 - __src)
    {
      v18 = a1[1];
      v20 = a3;
      goto LABEL_17;
    }
    v18 = &__src[a3];
    v19 = a1[1];
    do
    {
      *v19++ = *a4;
      --v17;
    }
    while (v17);
    a1[1] = v18;
    if (v16)
    {
      v20 = v9 - __src;
LABEL_17:
      v21 = &__src[a3];
      v22 = v18;
      if (&v18[-a3] < v9)
      {
        if (a3 <= v16)
          v23 = v9 - __src;
        else
          v23 = a3;
        v24 = &__src[-a3];
        v25 = __src;
        v26 = __src;
        do
        {
          v25[v23] = v24[v23];
          ++v26;
          ++v24;
          ++v25;
        }
        while (&v26[v23 - (_QWORD)v9 - a3]);
        if (a3 > v16)
          v16 = a3;
        v22 = &v25[v16];
      }
      a1[1] = v22;
      if (v18 != v21)
        memmove(&__src[a3], __src, v18 - v21);
      if (__src <= v5)
      {
        if (a1[1] <= v5)
          v27 = 0;
        else
          v27 = v6;
        v5 += v27;
      }
      v28 = __src;
      do
      {
        *v28++ = *v5;
        --v20;
      }
      while (v20);
    }
    return __src;
  }
  v10 = *a1;
  v11 = v9 - *a1 + a3;
  if (v11 < 0)
    abort();
  v12 = (char *)(__src - v10);
  v13 = v8 - v10;
  if (2 * v13 > v11)
    v11 = 2 * v13;
  if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v14 = v11;
  if (v14)
    v15 = operator new(v14);
  else
    v15 = 0;
  v29 = &v12[(_QWORD)v15];
  v30 = &v29[v6];
  v31 = v29;
  do
  {
    *v31++ = *v5;
    --v6;
  }
  while (v6);
  v32 = *a1;
  if (__src == *a1)
  {
    v34 = v29;
  }
  else
  {
    v33 = __src;
    v34 = v29;
    do
    {
      v35 = *--v33;
      *--v34 = v35;
    }
    while (v33 != v32);
    v9 = a1[1];
  }
  v36 = (char *)v15 + v14;
  if (v9 != __src)
    memmove(v30, __src, v9 - __src);
  v37 = *a1;
  *a1 = v34;
  a1[1] = &v30[v9 - __src];
  a1[2] = v36;
  if (v37)
    operator delete(v37);
  return v29;
}

char *sub_1DF36A650(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      abort();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v17 = (char *)operator new(v15);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v27 = &v13[(_QWORD)v17];
    memcpy(&v13[(_QWORD)v17], __src, a5);
    v28 = &v13[(_QWORD)v17];
    v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(_QWORD)v17 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(char **)(a1 + 8);
      v28 = v17;
    }
    v30 = &v27[a5];
    v31 = &v17[v29];
    if (v10 != v5)
      memmove(v30, v5, v10 - v5);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v30[v10 - v5];
    *(_QWORD *)(a1 + 16) = v31;
    if (v32)
      operator delete(v32);
    return v27;
  }
  v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v19 = &__src[a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &v5[a5];
    v23 = &v21[-a5];
    v24 = v21;
    if (&v21[-a5] < v10)
    {
      v25 = &v10[a5] - v21;
      v24 = v21;
      do
      {
        v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&v5[a5], v5, v21 - v22);
    if (v19 != __src)
      memmove(v5, __src, v19 - __src);
    return v5;
  }
  v19 = &__src[v18];
  v20 = a4 - &__src[v18];
  if (a4 != &__src[v18])
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  v21 = &v10[v20];
  *(_QWORD *)(a1 + 8) = &v10[v20];
  if (v18 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1DF36A834(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      bzero(a1[1], 16 * a2);
      v5 += 16 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = v5 - *a1;
    v8 = a2 + (v7 >> 4);
    if (v8 >> 60)
      abort();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_1DF3667C0();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[16 * (v7 >> 4)];
    v13 = &v11[16 * v10];
    bzero(v12, 16 * a2);
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v5 - 1);
        v12 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v12;
    a1[1] = &v11[16 * a2 + v7];
    a1[2] = v13;
    if (v5)
      operator delete(v5);
  }
}

_OWORD *sub_1DF36A964(void **a1, _OWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _OWORD *v12;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 60)
      sub_1DF3667C0();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * v4];
  *(_OWORD *)v11 = *a2;
  v12 = v11 + 16;
  if (v2 != v3)
  {
    do
    {
      *((_OWORD *)v11 - 1) = *((_OWORD *)v2 - 1);
      v11 -= 16;
      v2 -= 16;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[16 * v9];
  if (v2)
    operator delete(v2);
  return v12;
}

_QWORD *sub_1DF36AA48(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (!v4)
    return v3;
  v6 = *(_QWORD **)(a1 + 24);
  v7 = *v6 == v6[1] ? 0 : *v6;
  v8 = (const char *)(v7 + a2);
  v9 = (_QWORD *)(a1 + 8);
  do
  {
    if (a3 >= v4[5])
      v10 = v4[5];
    else
      v10 = a3;
    v11 = strncmp((const char *)(v7 + v4[4]), v8, v10 + 1);
    v12 = v4 + 1;
    if (v11 >= 0)
    {
      v12 = v4;
      v9 = v4;
    }
    v4 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v3 == v9)
    return v3;
  v13 = v9[5] >= a3 ? a3 : v9[5];
  if (strncmp(v8, (const char *)(v7 + v9[4]), v13 + 1) < 0)
    return v3;
  return v9;
}

void sub_1DF36AAFC(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      abort();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *sub_1DF36AC20(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v8;
  uint64_t v9;
  const char *v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  size_t v14;

  v6 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v8 = *(uint64_t **)(a1 + 24);
    if (*v8 == v8[1])
      v9 = 0;
    else
      v9 = *v8;
    v10 = (const char *)(v9 + a3);
    do
    {
      while (1)
      {
        v11 = v5;
        v12 = (const char *)(v9 + v5[4]);
        v13 = v5[5] >= a4 ? a4 : v5[5];
        v14 = v13 + 1;
        if ((strncmp(v10, v12, v13 + 1) & 0x80000000) == 0)
          break;
        v5 = (_QWORD *)*v11;
        v6 = v11;
        if (!*v11)
          goto LABEL_16;
      }
      if ((strncmp(v12, v10, v14) & 0x80000000) == 0)
        break;
      v6 = v11 + 1;
      v5 = (_QWORD *)v11[1];
    }
    while (v5);
  }
  else
  {
    v11 = (_QWORD *)(a1 + 8);
  }
LABEL_16:
  *a2 = v11;
  return v6;
}

void sub_1DF36ACE8(char *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;

  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(_QWORD *)a1;
    v3 = (char *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (char *)*((_QWORD *)v3 + 1);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t *sub_1DF36AD60(uint64_t *result, uint64_t a2, int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;

  if (!a3)
    return result;
  v4 = result;
  if ((unint64_t)result[9] <= 3)
    result[9] = 4;
  v5 = result[4];
  v6 = result[5];
  v7 = result[6];
  v8 = ((_BYTE)v7 - ((_BYTE)v5 + (_BYTE)v6)) & 3;
  if (v7 - result[7] < v8)
  {
    v19 = ((_BYTE)v7 - ((_BYTE)v5 + (_BYTE)v6)) & 3;
    v18 = a3;
    result = (uint64_t *)sub_1DF366C90(result, v19);
    v8 = v19;
    a3 = v18;
    v4[6] -= v19;
  }
  else
  {
    v9 = v7 - v8;
    result[6] = v9;
    if (!v8)
      goto LABEL_9;
  }
  v10 = 0;
  do
    *(_BYTE *)(v4[6] + v10++) = 0;
  while (v8 != v10);
  v6 = v4[5];
  v9 = v4[6];
  v5 = v4[4];
LABEL_9:
  v11 = v6 - v9 + v5 - a3;
  v12 = v11 + 4;
  if (v11 == -4 && !*((_BYTE *)v4 + 80))
    return result;
  if ((unint64_t)v4[9] <= 3)
    v4[9] = 4;
  v13 = ((_BYTE)v9 - ((_BYTE)v5 + (_BYTE)v6)) & 3;
  v14 = v4[7];
  if (v9 - v14 < v13)
  {
    v20 = v13;
    sub_1DF366C90(v4, v13);
    v13 = v20;
    v4[6] -= v20;
  }
  else
  {
    v15 = v9 - v13;
    v4[6] = v9 - v13;
    if (!v13)
      goto LABEL_18;
  }
  v16 = 0;
  do
    *(_BYTE *)(v4[6] + v16++) = 0;
  while (v13 != v16);
  v15 = v4[6];
  v14 = v4[7];
LABEL_18:
  if (v15 - v14 <= 3)
  {
    sub_1DF366C90(v4, 4uLL);
    v15 = v4[6];
  }
  *(_DWORD *)(v15 - 4) = v12;
  v17 = v15 - 4;
  v4[6] = v17;
  return sub_1DF366DF8(v4, a2, *((_DWORD *)v4 + 8) - (int)v17 + *((_DWORD *)v4 + 10));
}

uint64_t sub_1DF36AF14(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  BOOL v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  uint64_t *v78;
  unsigned int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int *v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int *v104;
  uint64_t v105;
  unsigned int *v106;
  int64_t v107;
  unsigned int v108;
  unsigned int *v111;
  unsigned int *v112;
  unsigned int *v113;

  v6 = a3;
  v8 = (unsigned int *)result;
LABEL_2:
  v104 = a2 - 2;
  v106 = a2 - 1;
  v103 = a2 - 3;
  v9 = v8;
  v111 = a2;
  while (2)
  {
    v8 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v49 = *(a2 - 1);
        v50 = *(_QWORD *)(*(_QWORD *)v6 + 40) + *(_QWORD *)(*(_QWORD *)v6 + 32);
        v51 = *v9;
        result = sub_1DF36BA10((int *)(v50 - v49), (int *)(v50 - v51));
        if ((_DWORD)result)
        {
          *v9 = v49;
          *(a2 - 1) = v51;
        }
        return result;
      case 3:
        return sub_1DF36B770(v9, v9 + 1, v106, *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
      case 4:
        return sub_1DF36BAAC(v9, v9 + 1, v9 + 2, v106, v6);
      case 5:
        return sub_1DF36BB68(v9, v9 + 1, v9 + 2, v9 + 3, v106, v6);
      default:
        v113 = v9;
        if (v10 <= 95)
        {
          v52 = v9 + 1;
          v54 = v9 == a2 || v52 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = *(_QWORD *)(*(_QWORD *)v6 + 40) + *(_QWORD *)(*(_QWORD *)v6 + 32);
              v57 = v9;
              do
              {
                v59 = *v57;
                v58 = v57[1];
                v57 = v52;
                result = sub_1DF36BA10((int *)(v56 - v58), (int *)(v56 - v59));
                if ((_DWORD)result)
                {
                  v60 = v55;
                  while (1)
                  {
                    *(unsigned int *)((char *)v9 + v60 + 4) = v59;
                    if (!v60)
                      break;
                    v59 = *(unsigned int *)((char *)v9 + v60 - 4);
                    result = sub_1DF36BA10((int *)(v56 - v58), (int *)(v56 - v59));
                    v60 -= 4;
                    if ((result & 1) == 0)
                    {
                      v61 = (unsigned int *)((char *)v9 + v60 + 4);
                      goto LABEL_77;
                    }
                  }
                  v61 = v9;
LABEL_77:
                  *v61 = v58;
                }
                v52 = v57 + 1;
                v55 += 4;
              }
              while (v57 + 1 != a2);
            }
          }
          else if (!v54)
          {
            v99 = *(_QWORD *)(*(_QWORD *)v6 + 40) + *(_QWORD *)(*(_QWORD *)v6 + 32);
            do
            {
              v101 = *v8;
              v100 = v8[1];
              v8 = v52;
              result = sub_1DF36BA10((int *)(v99 - v100), (int *)(v99 - v101));
              if ((_DWORD)result)
              {
                v102 = v8;
                do
                {
                  *v102 = v101;
                  v101 = *(v102 - 2);
                  result = sub_1DF36BA10((int *)(v99 - v100), (int *)(v99 - v101));
                  --v102;
                }
                while ((result & 1) != 0);
                *v102 = v100;
              }
              v52 = v8 + 1;
            }
            while (v8 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v62 = (unint64_t)(v11 - 2) >> 1;
            v63 = v62;
            do
            {
              v64 = v63;
              if (v62 >= v63)
              {
                v65 = *(_QWORD *)a3;
                v107 = v64;
                v66 = (2 * v64) | 1;
                v67 = &v8[v66];
                v68 = 2 * v64 + 2;
                if (v68 >= v11)
                {
                  LODWORD(v72) = *v67;
                  v71 = *(_QWORD *)(v65 + 32);
                  v70 = *(_QWORD *)(v65 + 40);
                }
                else
                {
                  v69 = *v67;
                  v71 = *(_QWORD *)(v65 + 32);
                  v70 = *(_QWORD *)(v65 + 40);
                  v72 = v67[1];
                  if (sub_1DF36BA10((int *)(v70 + v71 - v69), (int *)(v70 + v71 - v72)))
                  {
                    ++v67;
                    v66 = v68;
                  }
                  else
                  {
                    LODWORD(v72) = v69;
                  }
                }
                v64 = v107;
                v73 = &v8[v107];
                v74 = v70 + v71;
                v105 = *v73;
                result = sub_1DF36BA10((int *)(v74 - v72), (int *)(v74 - v105));
                v62 = (unint64_t)(v11 - 2) >> 1;
                if ((result & 1) == 0)
                {
                  do
                  {
                    *v73 = v72;
                    v73 = v67;
                    if (v62 < v66)
                      break;
                    v75 = (2 * v66) | 1;
                    v67 = &v8[v75];
                    v66 = 2 * v66 + 2;
                    if (v66 >= v11)
                    {
                      LODWORD(v72) = *v67;
                      v66 = v75;
                    }
                    else
                    {
                      v72 = *v67;
                      v76 = v67[1];
                      v77 = sub_1DF36BA10((int *)(v74 - v72), (int *)(v74 - v76));
                      if (v77)
                        LODWORD(v72) = v76;
                      v62 = (unint64_t)(v11 - 2) >> 1;
                      if (v77)
                        ++v67;
                      v8 = v113;
                      if (!v77)
                        v66 = v75;
                    }
                    result = sub_1DF36BA10((int *)(v74 - v72), (int *)(v74 - v105));
                  }
                  while (!(_DWORD)result);
                  v64 = v107;
                  *v73 = v105;
                }
              }
              v63 = v64 - 1;
            }
            while (v64);
            v78 = (uint64_t *)a3;
            v79 = v111;
            do
            {
              v112 = v79;
              v80 = 0;
              v108 = *v8;
              v81 = *v78;
              v82 = v11 - 2;
              if (v11 < 2)
                v82 = v11 - 1;
              v83 = v82 >> 1;
              do
              {
                v84 = &v8[v80 + 1];
                v85 = (2 * v80) | 1;
                v86 = 2 * v80 + 2;
                if (v86 >= v11)
                {
                  v90 = *v84;
                  v80 = (2 * v80) | 1;
                }
                else
                {
                  v87 = *v84;
                  v88 = *(_QWORD *)(v81 + 40) + *(_QWORD *)(v81 + 32);
                  v89 = v84[1];
                  result = sub_1DF36BA10((int *)(v88 - v87), (int *)(v88 - v89));
                  if ((_DWORD)result)
                    v90 = v89;
                  else
                    v90 = v87;
                  if ((_DWORD)result)
                  {
                    ++v84;
                    v80 = v86;
                  }
                  else
                  {
                    v80 = v85;
                  }
                }
                *v8 = v90;
                v8 = v84;
              }
              while (v80 <= v83);
              v91 = v112 - 1;
              if (v84 == v112 - 1)
              {
                v79 = v112 - 1;
                *v84 = v108;
              }
              else
              {
                *v84 = *v91;
                v79 = v112 - 1;
                *v91 = v108;
                v92 = (char *)v84 - (char *)v113 + 4;
                if (v92 >= 5)
                {
                  v93 = (((unint64_t)v92 >> 2) - 2) >> 1;
                  v94 = &v113[v93];
                  v95 = *v94;
                  v96 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
                  v97 = *v84;
                  result = sub_1DF36BA10((int *)(v96 - v95), (int *)(v96 - v97));
                  if ((_DWORD)result)
                  {
                    do
                    {
                      *v84 = v95;
                      v84 = v94;
                      if (!v93)
                        break;
                      v93 = (v93 - 1) >> 1;
                      v94 = &v113[v93];
                      v95 = *v94;
                      result = sub_1DF36BA10((int *)(v96 - v95), (int *)(v96 - v97));
                    }
                    while ((result & 1) != 0);
                    *v84 = v97;
                  }
                }
              }
              v98 = v11-- <= 2;
              v78 = (uint64_t *)a3;
              v8 = v113;
            }
            while (!v98);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v9[(unint64_t)v11 >> 1];
        v14 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v15 = *(_QWORD *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v10 < 0x201)
        {
          sub_1DF36B770(&v8[(unint64_t)v11 >> 1], v8, v106, v14, v15);
        }
        else
        {
          sub_1DF36B770(v8, &v8[(unint64_t)v11 >> 1], v106, v14, v15);
          sub_1DF36B770(v8 + 1, v13 - 1, v104, *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
          sub_1DF36B770(v8 + 2, &v8[v12 + 1], v103, *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
          sub_1DF36B770(v13 - 1, &v8[(unint64_t)v11 >> 1], &v8[v12 + 1], *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
          v16 = *v8;
          *v8 = *v13;
          *v13 = v16;
        }
        --a4;
        v17 = *(_QWORD *)v6;
        v18 = *v8;
        if ((a5 & 1) == 0)
        {
          v21 = *(_QWORD *)(v17 + 32);
          v20 = *(_QWORD *)(v17 + 40);
          v22 = v20 + v21;
          v23 = (int *)(v20 + v21 - v18);
          if (sub_1DF36BA10((int *)(v20 + v21 - *(v8 - 1)), v23))
          {
            v19 = a4;
            goto LABEL_13;
          }
          result = sub_1DF36BA10((int *)(v20 + v21 - v18), (int *)(v22 - *v106));
          if ((result & 1) != 0)
          {
            v9 = v8;
            do
            {
              v40 = v9[1];
              ++v9;
              result = sub_1DF36BA10((int *)(v20 + v21 - v18), (int *)(v22 - v40));
            }
            while ((result & 1) == 0);
          }
          else
          {
            v41 = v8 + 1;
            do
            {
              v9 = v41;
              if (v41 >= v111)
                break;
              ++v41;
              result = sub_1DF36BA10(v23, (int *)(v22 - *v9));
            }
            while (!(_DWORD)result);
          }
          v42 = v111;
          if (v9 < v111)
          {
            v42 = v111;
            do
            {
              v43 = *--v42;
              result = sub_1DF36BA10(v23, (int *)(v22 - v43));
            }
            while ((result & 1) != 0);
          }
          if (v9 < v42)
          {
            v44 = *v9;
            v45 = *v42;
            do
            {
              *v9 = v45;
              *v42 = v44;
              do
              {
                v46 = v9[1];
                ++v9;
                v44 = v46;
              }
              while (!sub_1DF36BA10(v23, (int *)(v22 - v46)));
              do
              {
                v47 = *--v42;
                v45 = v47;
                result = sub_1DF36BA10(v23, (int *)(v22 - v47));
              }
              while ((result & 1) != 0);
            }
            while (v9 < v42);
          }
          v48 = v9 - 1;
          if (v9 - 1 != v8)
            *v8 = *v48;
          a5 = 0;
          *v48 = v18;
          v6 = a3;
          a2 = v111;
          continue;
        }
        v19 = a4;
        v21 = *(_QWORD *)(v17 + 32);
        v20 = *(_QWORD *)(v17 + 40);
LABEL_13:
        v24 = 0;
        v25 = v20 + v21;
        v26 = (int *)(v20 + v21 - v18);
        do
          v27 = v8[++v24];
        while (sub_1DF36BA10((int *)(v25 - v27), v26));
        v28 = &v8[v24];
        v29 = v111;
        if (v24 == 1)
        {
          v29 = v111;
          do
          {
            if (v28 >= v29)
              break;
            v31 = *--v29;
          }
          while (!sub_1DF36BA10((int *)(v25 - v31), v26));
        }
        else
        {
          do
            v30 = *--v29;
          while (!sub_1DF36BA10((int *)(v25 - v30), v26));
        }
        if (v28 >= v29)
        {
          v38 = v28 - 1;
        }
        else
        {
          v32 = *v29;
          v33 = v27;
          v34 = v28;
          v35 = v29;
          do
          {
            *v34 = v32;
            *v35 = v33;
            do
            {
              v36 = v34[1];
              ++v34;
              v33 = v36;
            }
            while (sub_1DF36BA10((int *)(v25 - v36), v26));
            do
            {
              v37 = *--v35;
              v32 = v37;
            }
            while (!sub_1DF36BA10((int *)(v25 - v37), v26));
          }
          while (v34 < v35);
          v38 = v34 - 1;
          v8 = v113;
        }
        a4 = v19;
        v6 = a3;
        if (v38 != v8)
          *v8 = *v38;
        *v38 = v18;
        a2 = v111;
        if (v28 < v29)
        {
LABEL_34:
          result = sub_1DF36AF14(v8, v38, a3, a4, a5 & 1);
          a5 = 0;
          v9 = v38 + 1;
          continue;
        }
        v39 = sub_1DF36B84C(v8, v38, a3);
        v9 = v38 + 1;
        result = sub_1DF36B84C(v38 + 1, v111, a3);
        if (!(_DWORD)result)
        {
          if (v39)
            continue;
          goto LABEL_34;
        }
        a2 = v38;
        if (!v39)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1DF36B770(_DWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int *v12;
  BOOL v13;
  uint64_t v14;
  _BOOL8 result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = *a2;
  v9 = a5 + a4;
  v10 = (int *)(a5 + a4 - v8);
  v11 = *a1;
  v12 = (int *)(a5 + a4 - v11);
  v13 = sub_1DF36BA10(v10, v12);
  v14 = *a3;
  result = sub_1DF36BA10((int *)(v9 - v14), v10);
  if (v13)
  {
    if (result)
    {
      *a1 = v14;
    }
    else
    {
      *a1 = v8;
      *a2 = v11;
      v18 = *a3;
      result = sub_1DF36BA10((int *)(v9 - v18), v12);
      if (!result)
        return result;
      *a2 = v18;
    }
    *a3 = v11;
  }
  else if (result)
  {
    *a2 = v14;
    *a3 = v8;
    v16 = *a2;
    v17 = *a1;
    result = sub_1DF36BA10((int *)(v9 - v16), (int *)(v9 - v17));
    if (result)
    {
      *a1 = v16;
      *a2 = v17;
    }
  }
  return result;
}

BOOL sub_1DF36B84C(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  _DWORD *v21;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      v10 = *a1;
      if (sub_1DF36BA10((int *)(v9 - v8), (int *)(v9 - v10)))
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_1DF36B770(a1, a1 + 1, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 32), *(_QWORD *)(*(_QWORD *)a3 + 40));
      return 1;
    case 4:
      sub_1DF36BAAC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1DF36BB68(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      sub_1DF36B770(a1, a1 + 1, a1 + 2, *(_QWORD *)(*(_QWORD *)a3 + 32), *(_QWORD *)(*(_QWORD *)a3 + 40));
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      v15 = 12;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v17 = *v11;
    if (sub_1DF36BA10((int *)(v14 - v16), (int *)(v14 - v17)))
    {
      v18 = v15;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v17;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v17 = *(unsigned int *)((char *)a1 + v18 - 8);
        v20 = sub_1DF36BA10((int *)(v14 - v16), (int *)(v14 - v17));
        v18 = v19;
        if (!v20)
        {
          v21 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *v21 = v16;
      if (++v13 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v15 += 4;
    if (++v12 == a2)
      return 1;
  }
}

BOOL sub_1DF36BA10(int *a1, int *a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int *v7;
  const void *v8;
  unsigned int v9;
  unsigned int v10;
  const void *v11;
  unsigned int v12;
  unsigned int v13;
  size_t v14;
  int v15;

  v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 >= 5u && (v3 = v2[2]) != 0)
    v4 = (unsigned int *)((char *)a1 + v3 + *(unsigned int *)((char *)a1 + v3));
  else
    v4 = 0;
  v5 = *a2;
  if (*(unsigned __int16 *)((char *)a2 - v5) < 5u)
  {
    v6 = 0;
  }
  else
  {
    v6 = *(unsigned __int16 *)((char *)a2 - v5 + 4);
    LODWORD(v5) = *(int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - v5 + 4));
  }
  v7 = (unsigned int *)((char *)a2 + v6 + v5);
  v10 = *v4;
  v8 = v4 + 1;
  v9 = v10;
  v13 = *v7;
  v11 = v7 + 1;
  v12 = v13;
  if (v13 >= v9)
    v14 = v9;
  else
    v14 = v12;
  v15 = memcmp(v8, v11, v14);
  if (v15)
    return v15 < 0;
  else
    return v9 < v12;
}

BOOL sub_1DF36BAAC(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_1DF36B770(a1, a2, a3, *(_QWORD *)(*(_QWORD *)a5 + 32), *(_QWORD *)(*(_QWORD *)a5 + 40));
  v10 = *a4;
  v11 = *(_QWORD *)(*(_QWORD *)a5 + 40) + *(_QWORD *)(*(_QWORD *)a5 + 32);
  v12 = *a3;
  result = sub_1DF36BA10((int *)(v11 - v10), (int *)(v11 - v12));
  if (result)
  {
    *a3 = v10;
    *a4 = v12;
    v14 = *a3;
    v15 = *a2;
    result = sub_1DF36BA10((int *)(v11 - v14), (int *)(v11 - v15));
    if (result)
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      result = sub_1DF36BA10((int *)(v11 - v16), (int *)(v11 - v17));
      if (result)
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

BOOL sub_1DF36BB68(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_1DF36BAAC(a1, a2, a3, a4, a6);
  v12 = *a5;
  v13 = *(_QWORD *)(*(_QWORD *)a6 + 40) + *(_QWORD *)(*(_QWORD *)a6 + 32);
  v14 = *a4;
  result = sub_1DF36BA10((int *)(v13 - v12), (int *)(v13 - v14));
  if (result)
  {
    *a4 = v12;
    *a5 = v14;
    v16 = *a4;
    v17 = *a3;
    result = sub_1DF36BA10((int *)(v13 - v16), (int *)(v13 - v17));
    if (result)
    {
      *a3 = v16;
      *a4 = v17;
      v18 = *a3;
      v19 = *a2;
      result = sub_1DF36BA10((int *)(v13 - v18), (int *)(v13 - v19));
      if (result)
      {
        *a2 = v18;
        *a3 = v19;
        v20 = *a2;
        v21 = *a1;
        result = sub_1DF36BA10((int *)(v13 - v20), (int *)(v13 - v21));
        if (result)
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1DF36BC44(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;

  if ((a2 & 3) != 0 && *(_BYTE *)(a1 + 40))
    return 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 < 5 || v2 - 4 < a2)
    return 0;
  v4 = *(unsigned int *)(*(_QWORD *)a1 + a2);
  if ((int)v4 < 1)
    return 0;
  if (v2 - 1 >= v4 + a2)
    return v4;
  return 0;
}

uint64_t sub_1DF36BC94(int *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned __int16 *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v38;
  unsigned int *v39;
  int *v40;
  unsigned __int16 *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v56;
  unsigned int *v57;
  int *v58;
  unsigned __int16 *v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  char *v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 *v68;
  uint64_t v69;
  unsigned __int16 *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  unsigned __int16 *v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned __int16 *v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v100;
  unsigned int *v101;
  unsigned __int16 *v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int16 *v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned __int16 *v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  unsigned __int16 *v117;
  uint64_t v118;
  unsigned __int16 *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  unsigned __int16 *v126;
  uint64_t v127;
  unsigned int *v128;
  uint64_t v129;
  char *v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  unint64_t v136;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unsigned __int16 *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  unsigned int *v148;
  uint64_t v149;
  int *v150;
  unsigned __int16 *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unsigned int *v167;
  int *v168;
  unsigned __int16 *v169;
  uint64_t v170;
  unsigned __int16 *v171;
  uint64_t v172;
  unsigned __int16 *v173;
  uint64_t v174;
  unsigned int *v175;
  uint64_t v176;
  char *v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int *v181;
  unint64_t v182;
  char *v183;
  unsigned __int16 *v184;
  uint64_t v185;
  unsigned __int16 *v186;
  uint64_t v187;
  unsigned int *v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  unsigned __int16 *v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int *v195;
  unsigned __int16 *v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  char *v203;
  unsigned __int16 *v204;
  uint64_t v205;
  unsigned __int16 *v206;
  uint64_t v207;
  unsigned int *v208;
  uint64_t v209;
  unint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  uint64_t v221;
  char *v222;
  char *v223;
  _DWORD *v224;
  unsigned int *v225;
  char *v226;

  result = sub_1DF36CF04((uint64_t *)a2, a1);
  if (!(_DWORD)result)
    return result;
  v5 = *a1;
  v6 = (char *)a1 - v5;
  v7 = *(unsigned __int16 *)((char *)a1 - v5);
  if (v7 < 5)
    return 0;
  v8 = *((unsigned __int16 *)v6 + 2);
  if (!*((_WORD *)v6 + 2))
    return 0;
  v9 = *(_QWORD *)a2;
  result = sub_1DF36BC44(a2, (unint64_t)a1 + v8 - *(_QWORD *)a2);
  if (!(_DWORD)result)
    return result;
  v10 = (unsigned int *)((char *)a1 + v8 + *(unsigned int *)((char *)a1 + v8));
  v11 = (unint64_t)v10 - v9;
  if ((((unint64_t)v10 - v9) & 3) != 0 && *(_BYTE *)(a2 + 40) != 0)
    return 0;
  result = 0;
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 < 5 || v13 - 4 < v11)
    return result;
  v14 = *v10;
  if (v14 > 0x1FFFFFFE)
    return 0;
  v15 = 4 * v14 + 4;
  v16 = v13 > v15;
  v17 = v13 - v15;
  v18 = v16 && v17 >= v11;
  if (!v18)
    return 0;
  if ((_DWORD)v14)
  {
    v19 = 0;
    v20 = v10 + 1;
    do
    {
      if ((sub_1DF36CFBC((int *)((char *)v20 + *v20), a2) & 1) == 0)
        return 0;
      ++v19;
      ++v20;
    }
    while (v19 < *v10);
    v5 = *a1;
    v21 = -v5;
    v7 = *(unsigned __int16 *)((char *)a1 - v5);
  }
  else
  {
    v21 = -v5;
  }
  if (v7 < 7)
    return 0;
  v22 = *(unsigned __int16 *)((char *)a1 + v21 + 6);
  if (!v22)
    return 0;
  v23 = *(_QWORD *)a2;
  result = sub_1DF36BC44(a2, (unint64_t)a1 + v22 - *(_QWORD *)a2);
  if (!(_DWORD)result)
    return result;
  v24 = 0;
  v25 = (unsigned __int16 *)((char *)a1 - (int)v5);
  v26 = *v25;
  if (v26 < 7)
    goto LABEL_185;
  v27 = -(uint64_t)(int)v5;
  v28 = v25[3];
  if (!v28)
    goto LABEL_177;
  v29 = *(unsigned int *)((char *)a1 + v28);
  v30 = (unint64_t)a1 + v28 + v29 - v23;
  if ((v30 & 3) != 0 && *(_BYTE *)(a2 + 40) != 0)
    return 0;
  v32 = (unsigned int *)((char *)a1 + v28 + v29);
  result = 0;
  v33 = *(_QWORD *)(a2 + 8);
  if (v33 < 5 || v33 - 4 < v30)
    return result;
  v34 = *v32;
  if (v34 > 0x1FFFFFFE)
    return 0;
  v35 = 4 * v34 + 4;
  v16 = v33 > v35;
  v36 = v33 - v35;
  if (!v16 || v36 < v30)
    return 0;
  if ((_DWORD)v34)
  {
    v221 = 0;
    v38 = (char *)a1 + v29 + v28;
    v216 = v38 + 12;
    v213 = v38 + 8;
    while (1)
    {
      v39 = &v32[v221 + 1];
      v215 = *v39;
      v40 = (int *)((char *)v39 + v215);
      result = sub_1DF36CF04((uint64_t *)a2, (int *)((char *)v39 + v215));
      if (!(_DWORD)result)
        return result;
      v41 = (unsigned __int16 *)((char *)v40 - *v40);
      if (*v41 < 5u)
        return 0;
      v42 = v41[2];
      if (!v41[2])
        return 0;
      result = sub_1DF36BC44(a2, (unint64_t)v40 + v42 - *(_QWORD *)a2);
      if (!(_DWORD)result)
        return result;
      result = sub_1DF36CE84(a2, (unsigned int *)((char *)v40 + v42 + *(unsigned int *)((char *)v40 + v42)));
      if (!(_DWORD)result)
        return result;
      v43 = *v40;
      v44 = (char *)v40 - v43;
      v45 = *(unsigned __int16 *)((char *)v40 - v43);
      if (v45 < 7)
        return 0;
      v46 = *((unsigned __int16 *)v44 + 3);
      if (!*((_WORD *)v44 + 3))
        return 0;
      v47 = *(_QWORD *)a2;
      result = sub_1DF36BC44(a2, (unint64_t)v40 + v46 - *(_QWORD *)a2);
      if (!(_DWORD)result)
        return result;
      v48 = *(unsigned int *)((char *)v40 + v46);
      v225 = (unsigned int *)((char *)v40 + v46 + v48);
      v49 = (unint64_t)v225 - v47;
      if ((((unint64_t)v225 - v47) & 3) != 0 && *(_BYTE *)(a2 + 40) != 0)
        return 0;
      result = 0;
      v51 = *(_QWORD *)(a2 + 8);
      if (v51 < 5 || v51 - 4 < v49)
        return result;
      v52 = *v225;
      if (v52 > 0x1FFFFFFE)
        return 0;
      v53 = 4 * v52 + 4;
      v16 = v51 > v53;
      v54 = v51 - v53;
      if (!v16 || v54 < v49)
        return 0;
      if ((_DWORD)v52)
        break;
      v95 = -v43;
LABEL_128:
      if (v45 < 9)
        return 0;
      v96 = (char *)v40 + v95;
      if (*((_WORD *)v96 + 4))
      {
        v97 = *(_QWORD *)(a2 + 8);
        if (v45 < 0xB || v97 < 2 || v97 - 1 < (unint64_t)v40 + *((unsigned __int16 *)v96 + 4) - *(_QWORD *)a2)
          return 0;
      }
      else if (v45 < 0xB)
      {
        return 0;
      }
      v100 = *((unsigned __int16 *)v96 + 5);
      if (!v100)
        return 0;
      result = sub_1DF36BC44(a2, (unint64_t)v40 + v100 - *(_QWORD *)a2);
      if (!(_DWORD)result)
        return result;
      v101 = 0;
      v102 = (unsigned __int16 *)((char *)v40 - (int)v43);
      v103 = *v102;
      if (v103 >= 0xB)
      {
        v104 = v102[5];
        if (v104)
        {
          result = sub_1DF36D85C((int *)((char *)v40 + v104 + *(unsigned int *)((char *)v40 + v104)), a2);
          if (!(_DWORD)result)
            return result;
          v43 = *v40;
          v105 = -v43;
          v103 = *(unsigned __int16 *)((char *)v40 - v43);
        }
        else
        {
          v105 = -(uint64_t)(int)v43;
        }
        if (v103 < 0xD || !*(_WORD *)((char *)v40 + v105 + 12))
          goto LABEL_152;
        result = sub_1DF36BC44(a2, (unint64_t)v40 + *(unsigned __int16 *)((char *)v40 + v105 + 12) - *(_QWORD *)a2);
        if (!(_DWORD)result)
          return result;
        v106 = (unsigned __int16 *)((char *)v40 - (int)v43);
        if (*v106 >= 0xDu && (v107 = v106[6]) != 0)
          v101 = (unsigned int *)((char *)v40 + v107 + *(unsigned int *)((char *)v40 + v107));
        else
LABEL_152:
          v101 = 0;
      }
      result = sub_1DF36D7F4(a2, v101);
      if (!(_DWORD)result)
        return result;
      v108 = 0;
      v109 = (unsigned __int16 *)((char *)v40 - (int)v43);
      v110 = *v109;
      if (v110 >= 0xD)
      {
        v111 = -(uint64_t)(int)v43;
        v112 = v109[6];
        if (v112)
        {
          v113 = (char *)v40 + v112;
          v114 = *(unsigned int *)((char *)v40 + v112);
          if (*(int *)((char *)v40 + v112 + v114))
          {
            v115 = 0;
            v116 = &v213[v215 + v114 + v112];
            while ((sub_1DF383950((int *)&v116[*(unsigned int *)v116], a2) & 1) != 0)
            {
              ++v115;
              v116 += 4;
              if (v115 >= *(unsigned int *)&v113[v114])
              {
                v43 = *v40;
                v111 = -v43;
                v110 = *(unsigned __int16 *)((char *)v40 - v43);
                goto LABEL_161;
              }
            }
            return 0;
          }
        }
        if (v110 < 0xF || !*(_WORD *)((char *)v40 + v111 + 14))
          goto LABEL_167;
LABEL_161:
        result = sub_1DF36BC44(a2, (unint64_t)v40 + *(unsigned __int16 *)((char *)v40 + v111 + 14) - *(_QWORD *)a2);
        if (!(_DWORD)result)
          return result;
        v117 = (unsigned __int16 *)((char *)v40 - (int)v43);
        if (*v117 >= 0xFu && (v118 = v117[7]) != 0)
          v108 = (unsigned int *)((char *)v40 + v118 + *(unsigned int *)((char *)v40 + v118));
        else
LABEL_167:
          v108 = 0;
      }
      result = sub_1DF36D7F4(a2, v108);
      if (!(_DWORD)result)
        return result;
      v119 = (unsigned __int16 *)((char *)v40 - *v40);
      if (*v119 >= 0xFu)
      {
        v120 = v119[7];
        if (v120)
        {
          v121 = (char *)v40 + v120;
          v122 = *(unsigned int *)((char *)v40 + v120);
          if (*(_DWORD *)&v121[v122])
          {
            v123 = 0;
            v124 = &v213[v215 + v122 + v120];
            while (sub_1DF36CE84(a2, (unsigned int *)&v124[*(unsigned int *)v124]))
            {
              ++v123;
              v124 += 4;
              if (v123 >= *(unsigned int *)&v121[v122])
                goto LABEL_175;
            }
            return 0;
          }
        }
      }
LABEL_175:
      --*(_DWORD *)(a2 + 16);
      v216 += 4;
      v213 += 4;
      if (++v221 >= (unint64_t)*v32)
      {
        v5 = *a1;
        v27 = -v5;
        v26 = *(unsigned __int16 *)((char *)a1 - v5);
        goto LABEL_177;
      }
    }
    v56 = 0;
    v223 = &v216[v215 + v48 + v46];
    while (1)
    {
      v57 = &v225[v56 + 1];
      v218 = *v57;
      v58 = (int *)((char *)v57 + v218);
      result = sub_1DF36CF04((uint64_t *)a2, (int *)((char *)v57 + v218));
      if (!(_DWORD)result)
        return result;
      v59 = (unsigned __int16 *)((char *)v58 - *v58);
      if (*v59 < 5u)
        return 0;
      v60 = v59[2];
      if (!v59[2])
        return 0;
      result = sub_1DF36BC44(a2, (unint64_t)v58 + v60 - *(_QWORD *)a2);
      if (!(_DWORD)result)
        return result;
      result = sub_1DF36CE84(a2, (unsigned int *)((char *)v58 + v60 + *(unsigned int *)((char *)v58 + v60)));
      if (!(_DWORD)result)
        return result;
      v61 = 0;
      v62 = *v58;
      v63 = (char *)v58 - v62;
      v64 = *(unsigned __int16 *)((char *)v58 - v62);
      if (v64 >= 7)
      {
        if (*((_WORD *)v63 + 3))
        {
          result = 0;
          v65 = *(_QWORD *)(a2 + 8);
          if (v65 < 9 || v65 - 8 < (unint64_t)v58 + *((unsigned __int16 *)v63 + 3) - *(_QWORD *)a2)
            return result;
        }
        if (v64 < 9)
          goto LABEL_97;
        v66 = *((unsigned __int16 *)v63 + 4);
        if (*((_WORD *)v63 + 4))
        {
          result = sub_1DF36BC44(a2, (unint64_t)v58 + v66 - *(_QWORD *)a2);
          if (!(_DWORD)result)
            return result;
          result = sub_1DF36CFBC((int *)((char *)v58 + v66 + *(unsigned int *)((char *)v58 + v66)), a2);
          if (!(_DWORD)result)
            return result;
          v62 = *v58;
          v67 = -v62;
          v64 = *(unsigned __int16 *)((char *)v58 - v62);
        }
        else
        {
          v67 = -v62;
        }
        if (v64 < 0xB)
          goto LABEL_97;
        if (*(_WORD *)((char *)v58 + v67 + 10))
        {
          result = sub_1DF36BC44(a2, (unint64_t)v58 + *(unsigned __int16 *)((char *)v58 + v67 + 10) - *(_QWORD *)a2);
          if (!(_DWORD)result)
            return result;
          v61 = 0;
          v68 = (unsigned __int16 *)((char *)v58 - (int)v62);
          v64 = *v68;
          if (v64 < 0xB)
            goto LABEL_98;
          v69 = v68[5];
          if (v69)
          {
            result = sub_1DF36D85C((int *)((char *)v58 + v69 + *(unsigned int *)((char *)v58 + v69)), a2);
            if (!(_DWORD)result)
              return result;
            v62 = *v58;
            v67 = -v62;
            v64 = *(unsigned __int16 *)((char *)v58 - v62);
          }
          else
          {
            v67 = -(uint64_t)(int)v62;
          }
        }
        if (v64 < 0xD || !*(_WORD *)((char *)v58 + v67 + 12))
          goto LABEL_97;
        result = sub_1DF36BC44(a2, (unint64_t)v58 + *(unsigned __int16 *)((char *)v58 + v67 + 12) - *(_QWORD *)a2);
        if (!(_DWORD)result)
          return result;
        v70 = (unsigned __int16 *)((char *)v58 - (int)v62);
        if (*v70 >= 0xDu && (v71 = v70[6]) != 0)
          v61 = (unsigned int *)((char *)v58 + v71 + *(unsigned int *)((char *)v58 + v71));
        else
LABEL_97:
          v61 = 0;
      }
LABEL_98:
      result = sub_1DF36D7F4(a2, v61);
      if (!(_DWORD)result)
        return result;
      v72 = *v58;
      v73 = *(unsigned __int16 *)((char *)v58 - v72);
      if (v73 < 0xD)
        goto LABEL_112;
      v74 = -v72;
      v75 = *(unsigned __int16 *)((char *)v58 - v72 + 12);
      if (*(_WORD *)((char *)v58 - v72 + 12))
      {
        v76 = (char *)v58 + v75;
        v77 = *(unsigned int *)((char *)v58 + v75);
        if (*(int *)((char *)v58 + v75 + v77))
        {
          v78 = 0;
          v79 = &v223[v218 + v77 + v75];
          while (sub_1DF36CE84(a2, (unsigned int *)&v79[*(unsigned int *)v79]))
          {
            ++v78;
            v79 += 4;
            if (v78 >= *(unsigned int *)&v76[v77])
            {
              v72 = *v58;
              v74 = -v72;
              v73 = *(unsigned __int16 *)((char *)v58 - v72);
              goto LABEL_106;
            }
          }
          return 0;
        }
      }
      if (v73 < 0xF)
        goto LABEL_112;
      v80 = *(unsigned __int16 *)((char *)v58 + v74 + 14);
      if (!v80)
        goto LABEL_112;
LABEL_106:
      result = sub_1DF36BC44(a2, (unint64_t)v58 + v80 - *(_QWORD *)a2);
      if (!(_DWORD)result)
        return result;
      v81 = (unsigned __int16 *)((char *)v58 - (int)v72);
      if (*v81 >= 0xFu && (v82 = v81[7]) != 0)
        v83 = (unsigned int *)((char *)v58 + v82 + *(unsigned int *)((char *)v58 + v82));
      else
LABEL_112:
        v83 = 0;
      result = sub_1DF36D7F4(a2, v83);
      if (!(_DWORD)result)
        return result;
      v84 = (unsigned __int16 *)((char *)v58 - (int)v72);
      v85 = *v84;
      if (v85 >= 0xF)
      {
        v86 = -(uint64_t)(int)v72;
        v87 = v84[7];
        if (v87)
        {
          v88 = (char *)v58 + v87;
          v89 = *(unsigned int *)((char *)v58 + v87);
          if (*(int *)((char *)v58 + v87 + v89))
          {
            v90 = 0;
            v91 = &v223[v218 + v89 + v87];
            while ((sub_1DF383950((int *)&v91[*(unsigned int *)v91], a2) & 1) != 0)
            {
              ++v90;
              v91 += 4;
              if (v90 >= *(unsigned int *)&v88[v89])
              {
                v92 = *v58;
                v86 = -v92;
                v85 = *(unsigned __int16 *)((char *)v58 - v92);
                goto LABEL_121;
              }
            }
            return 0;
          }
        }
LABEL_121:
        if (v85 >= 0x11)
        {
          v93 = *(unsigned __int16 *)((char *)v58 + v86 + 16);
          if (v93)
          {
            result = 0;
            v94 = *(_QWORD *)(a2 + 8);
            if (v94 < 2 || v94 - 1 < (unint64_t)v58 + v93 - *(_QWORD *)a2)
              return result;
          }
        }
      }
      --*(_DWORD *)(a2 + 16);
      ++v56;
      v223 += 4;
      if (v56 >= *v225)
      {
        v43 = *v40;
        v95 = -v43;
        v45 = *(unsigned __int16 *)((char *)v40 - v43);
        goto LABEL_128;
      }
    }
  }
LABEL_177:
  if (v26 < 9)
  {
LABEL_184:
    v24 = 0;
    goto LABEL_185;
  }
  if (!*(_WORD *)((char *)a1 + v27 + 8))
  {
LABEL_182:
    v125 = *(unsigned __int16 *)((char *)a1 + v27 + 8);
    if (v125)
    {
      v24 = (unsigned int *)((char *)a1 + v125 + *(unsigned int *)((char *)a1 + v125));
      goto LABEL_185;
    }
    goto LABEL_184;
  }
  result = sub_1DF36BC44(a2, (unint64_t)a1 + *(unsigned __int16 *)((char *)a1 + v27 + 8) - *(_QWORD *)a2);
  if (!(_DWORD)result)
    return result;
  v24 = 0;
  if (*(unsigned __int16 *)((char *)a1 - (int)v5) >= 9u)
  {
    v27 = -(uint64_t)(int)v5;
    goto LABEL_182;
  }
LABEL_185:
  result = sub_1DF36CE84(a2, v24);
  if (!(_DWORD)result)
    return result;
  v126 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v126 >= 0xBu && (v127 = v126[5]) != 0)
  {
    result = sub_1DF36BC44(a2, (unint64_t)a1 + v127 - *(_QWORD *)a2);
    if (!(_DWORD)result)
      return result;
    v128 = (unsigned int *)((char *)a1 + v127 + *(unsigned int *)((char *)a1 + v127));
  }
  else
  {
    v128 = 0;
  }
  result = sub_1DF36CE84(a2, v128);
  if ((_DWORD)result)
  {
    v129 = *a1;
    v130 = (char *)a1 - v129;
    v131 = *(unsigned __int16 *)((char *)a1 - v129);
    if (v131 < 0xD)
      goto LABEL_217;
    v132 = *((unsigned __int16 *)v130 + 6);
    if (*((_WORD *)v130 + 6))
    {
      result = sub_1DF36BC44(a2, (unint64_t)a1 + v132 - *(_QWORD *)a2);
      if (!(_DWORD)result)
        return result;
      result = sub_1DF36CFBC((int *)((char *)a1 + v132 + *(unsigned int *)((char *)a1 + v132)), a2);
      if (!(_DWORD)result)
        return result;
      v129 = *a1;
      v133 = -v129;
      v131 = *(unsigned __int16 *)((char *)a1 - v129);
    }
    else
    {
      v133 = -v129;
    }
    if (v131 < 0xF)
      goto LABEL_217;
    if (*(_WORD *)((char *)a1 + v133 + 14))
    {
      result = sub_1DF36BC44(a2, (unint64_t)a1 + *(unsigned __int16 *)((char *)a1 + v133 + 14) - *(_QWORD *)a2);
      if (!(_DWORD)result)
        return result;
      if (*(unsigned __int16 *)((char *)a1 - (int)v129) < 0xFu)
        goto LABEL_217;
      v133 = -(uint64_t)(int)v129;
    }
    v134 = *(unsigned __int16 *)((char *)a1 + v133 + 14);
    if (!v134)
    {
LABEL_217:
      v143 = (unsigned __int16 *)((char *)a1 - (int)v129);
      if (*v143 >= 0xFu
        && (v144 = v143[7]) != 0
        && (v145 = *(unsigned int *)((char *)a1 + v144), v224 = (int *)((char *)a1 + v144 + v145), *v224))
      {
        v146 = 0;
        v147 = (char *)a1 + v145 + v144;
        v222 = v147 + 12;
        v226 = v147 + 8;
        while (1)
        {
          v148 = &v224[v146 + 1];
          v149 = *v148;
          v150 = (int *)((char *)v148 + v149);
          result = sub_1DF36CF04((uint64_t *)a2, (int *)((char *)v148 + v149));
          if (!(_DWORD)result)
            break;
          v151 = (unsigned __int16 *)((char *)v150 - *v150);
          if (*v151 < 5u)
            return 0;
          v152 = v151[2];
          if (!v151[2])
            return 0;
          result = sub_1DF36BC44(a2, (unint64_t)v150 + v152 - *(_QWORD *)a2);
          if (!(_DWORD)result)
            return result;
          result = sub_1DF36CE84(a2, (unsigned int *)((char *)v150 + v152 + *(unsigned int *)((char *)v150 + v152)));
          if (!(_DWORD)result)
            return result;
          v153 = *v150;
          v154 = (char *)v150 - v153;
          v155 = *(unsigned __int16 *)((char *)v150 - v153);
          if (v155 < 7)
            goto LABEL_288;
          v156 = -v153;
          v157 = *((unsigned __int16 *)v154 + 3);
          if (*((_WORD *)v154 + 3))
          {
            v158 = *(_QWORD *)a2;
            result = sub_1DF36BC44(a2, (unint64_t)v150 + v157 - *(_QWORD *)a2);
            if (!(_DWORD)result)
              return result;
            v159 = *(unsigned int *)((char *)v150 + v157);
            v220 = (unsigned int *)((char *)v150 + v157 + v159);
            v160 = (unint64_t)v220 - v158;
            if ((((unint64_t)v220 - v158) & 3) != 0 && *(_BYTE *)(a2 + 40) != 0)
              return 0;
            result = 0;
            v162 = *(_QWORD *)(a2 + 8);
            if (v162 < 5 || v162 - 4 < v160)
              return result;
            v163 = *v220;
            if (v163 > 0x1FFFFFFE)
              return 0;
            v164 = 4 * v163 + 4;
            v16 = v162 > v164;
            v165 = v162 - v164;
            if (!v16 || v165 < v160)
              return 0;
            if ((_DWORD)v163)
            {
              v217 = &v222[v149 + v159 + v157];
              v219 = 0;
              while (1)
              {
                v167 = &v220[v219 + 1];
                v214 = *v167;
                v168 = (int *)((char *)v167 + v214);
                result = sub_1DF36CF04((uint64_t *)a2, (int *)((char *)v167 + v214));
                if (!(_DWORD)result)
                  return result;
                v169 = (unsigned __int16 *)((char *)v168 - *v168);
                if (*v169 < 5u)
                  return 0;
                v170 = v169[2];
                if (!v169[2])
                  return 0;
                result = sub_1DF36BC44(a2, (unint64_t)v168 + v170 - *(_QWORD *)a2);
                if (!(_DWORD)result)
                  return result;
                result = sub_1DF36CE84(a2, (unsigned int *)((char *)v168 + v170 + *(unsigned int *)((char *)v168 + v170)));
                if (!(_DWORD)result)
                  return result;
                v171 = (unsigned __int16 *)((char *)v168 - *v168);
                if (*v171 < 7u)
                  return 0;
                v172 = v171[3];
                if (!v171[3])
                  return 0;
                result = sub_1DF36BC44(a2, (unint64_t)v168 + v172 - *(_QWORD *)a2);
                if (!(_DWORD)result)
                  return result;
                result = sub_1DF36CFBC((int *)((char *)v168 + v172 + *(unsigned int *)((char *)v168 + v172)), a2);
                if (!(_DWORD)result)
                  return result;
                v173 = (unsigned __int16 *)((char *)v168 - *v168);
                if (*v173 < 9u)
                  return 0;
                v174 = v173[4];
                if (!v173[4])
                  return 0;
                result = sub_1DF36BC44(a2, (unint64_t)v168 + v174 - *(_QWORD *)a2);
                if (!(_DWORD)result)
                  return result;
                result = sub_1DF36CFBC((int *)((char *)v168 + v174 + *(unsigned int *)((char *)v168 + v174)), a2);
                if (!(_DWORD)result)
                  return result;
                v175 = 0;
                v176 = *v168;
                v177 = (char *)v168 - v176;
                v178 = *(unsigned __int16 *)((char *)v168 - v176);
                if (v178 >= 0xB)
                {
                  v212 = -v176;
                  v179 = *((unsigned __int16 *)v177 + 5);
                  if (*((_WORD *)v177 + 5))
                  {
                    result = sub_1DF36BC44(a2, (unint64_t)v168 + v179 - *(_QWORD *)a2);
                    if (!(_DWORD)result)
                      return result;
                    v180 = *(unsigned int *)((char *)v168 + v179);
                    v181 = (unsigned int *)((char *)v168 + v179 + v180);
                    result = sub_1DF36D7F4(a2, v181);
                    if (!(_DWORD)result)
                      return result;
                    if (*v181)
                    {
                      v182 = 0;
                      v183 = &v217[v214 + v180 + v179];
                      while ((sub_1DF383950((int *)&v183[*(unsigned int *)v183], a2) & 1) != 0)
                      {
                        ++v182;
                        v183 += 4;
                        if (v182 >= *v181)
                        {
                          v176 = *v168;
                          v212 = -v176;
                          v178 = *(unsigned __int16 *)((char *)v168 - v176);
                          goto LABEL_266;
                        }
                      }
                      return 0;
                    }
                  }
                  if (v178 < 0xD || !*(_WORD *)((char *)v168 + v212 + 12))
                    goto LABEL_272;
LABEL_266:
                  result = sub_1DF36BC44(a2, (unint64_t)v168 + *(unsigned __int16 *)((char *)v168 + v212 + 12) - *(_QWORD *)a2);
                  if (!(_DWORD)result)
                    return result;
                  v184 = (unsigned __int16 *)((char *)v168 - (int)v176);
                  if (*v184 >= 0xDu && (v185 = v184[6]) != 0)
                    v175 = (unsigned int *)((char *)v168 + v185 + *(unsigned int *)((char *)v168 + v185));
                  else
LABEL_272:
                    v175 = 0;
                }
                result = sub_1DF36D7F4(a2, v175);
                if (!(_DWORD)result)
                  return result;
                v186 = (unsigned __int16 *)((char *)v168 - *v168);
                if (*v186 >= 0xDu)
                {
                  v187 = v186[6];
                  if (v187)
                  {
                    v188 = (unsigned int *)((char *)v168 + v187);
                    v189 = *v188;
                    if (*(unsigned int *)((char *)v188 + v189))
                    {
                      v190 = 0;
                      v191 = &v217[v214 + v189 + v187];
                      while (sub_1DF36CE84(a2, (unsigned int *)&v191[*(unsigned int *)v191]))
                      {
                        ++v190;
                        v191 += 4;
                        if (v190 >= *(unsigned int *)((char *)v188 + v189))
                          goto LABEL_280;
                      }
                      return 0;
                    }
                  }
                }
LABEL_280:
                --*(_DWORD *)(a2 + 16);
                v217 += 4;
                if (++v219 >= (unint64_t)*v220)
                {
                  v153 = *v150;
                  v156 = -v153;
                  v155 = *(unsigned __int16 *)((char *)v150 - v153);
                  goto LABEL_282;
                }
              }
            }
          }
          if (v155 < 9 || !*(_WORD *)((char *)v150 + v156 + 8))
            goto LABEL_288;
LABEL_282:
          result = sub_1DF36BC44(a2, (unint64_t)v150 + *(unsigned __int16 *)((char *)v150 + v156 + 8) - *(_QWORD *)a2);
          if (!(_DWORD)result)
            return result;
          v192 = (unsigned __int16 *)((char *)v150 - (int)v153);
          if (*v192 >= 9u && (v193 = v192[4]) != 0)
            v194 = (unsigned int *)((char *)v150 + v193 + *(unsigned int *)((char *)v150 + v193));
          else
LABEL_288:
            v194 = 0;
          result = sub_1DF36D7F4(a2, v194);
          if (!(_DWORD)result)
            return result;
          v195 = 0;
          v196 = (unsigned __int16 *)((char *)v150 - (int)v153);
          v197 = *v196;
          if (v197 >= 9)
          {
            v198 = -(uint64_t)(int)v153;
            v199 = v196[4];
            if (v199)
            {
              v200 = (char *)v150 + v199;
              v201 = *(unsigned int *)((char *)v150 + v199);
              if (*(int *)((char *)v150 + v199 + v201))
              {
                v202 = 0;
                v203 = &v226[v149 + v201 + v199];
                while ((sub_1DF383950((int *)&v203[*(unsigned int *)v203], a2) & 1) != 0)
                {
                  ++v202;
                  v203 += 4;
                  if (v202 >= *(unsigned int *)&v200[v201])
                  {
                    v153 = *v150;
                    v198 = -v153;
                    v197 = *(unsigned __int16 *)((char *)v150 - v153);
                    goto LABEL_297;
                  }
                }
                return 0;
              }
            }
            if (v197 < 0xB || !*(_WORD *)((char *)v150 + v198 + 10))
              goto LABEL_303;
LABEL_297:
            result = sub_1DF36BC44(a2, (unint64_t)v150 + *(unsigned __int16 *)((char *)v150 + v198 + 10) - *(_QWORD *)a2);
            if (!(_DWORD)result)
              return result;
            v204 = (unsigned __int16 *)((char *)v150 - (int)v153);
            if (*v204 >= 0xBu && (v205 = v204[5]) != 0)
              v195 = (unsigned int *)((char *)v150 + v205 + *(unsigned int *)((char *)v150 + v205));
            else
LABEL_303:
              v195 = 0;
          }
          result = sub_1DF36D7F4(a2, v195);
          if (!(_DWORD)result)
            return result;
          v206 = (unsigned __int16 *)((char *)v150 - *v150);
          if (*v206 >= 0xBu)
          {
            v207 = v206[5];
            if (v207)
            {
              v208 = (unsigned int *)((char *)v150 + v207);
              v209 = *v208;
              if (*(unsigned int *)((char *)v208 + v209))
              {
                v210 = 0;
                v211 = &v226[v149 + v209 + v207];
                while (sub_1DF36CE84(a2, (unsigned int *)&v211[*(unsigned int *)v211]))
                {
                  ++v210;
                  v211 += 4;
                  if (v210 >= *(unsigned int *)((char *)v208 + v209))
                    goto LABEL_311;
                }
                return 0;
              }
            }
          }
LABEL_311:
          --*(_DWORD *)(a2 + 16);
          ++v146;
          v222 += 4;
          v226 += 4;
          if (v146 >= *v224)
            goto LABEL_312;
        }
      }
      else
      {
LABEL_312:
        --*(_DWORD *)(a2 + 16);
        return 1;
      }
      return result;
    }
    v135 = (unsigned int *)((char *)a1 + v134 + *(unsigned int *)((char *)a1 + v134));
    v136 = (unint64_t)v135 - *(_QWORD *)a2;
    if ((v136 & 3) != 0 && *(_BYTE *)(a2 + 40) != 0)
      return 0;
    result = 0;
    v138 = *(_QWORD *)(a2 + 8);
    if (v138 >= 5 && v138 - 4 >= v136)
    {
      v139 = *v135;
      if (v139 > 0x1FFFFFFE)
        return 0;
      v140 = 4 * v139 + 4;
      v18 = v138 >= v140;
      v141 = v138 - v140;
      if (v141 == 0 || !v18 || v141 < v136)
        return 0;
      goto LABEL_217;
    }
  }
  return result;
}

BOOL sub_1DF36CE84(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  BOOL v9;

  if (!a2)
    return 1;
  v2 = (unint64_t)a2 - *(_QWORD *)a1;
  if (((v2 & 3) == 0 || !*(_BYTE *)(a1 + 40))
    && ((v3 = *(_QWORD *)(a1 + 8), v3 >= 5) ? (v4 = v3 - 4 >= v2) : (v4 = 0),
        v4
     && (v5 = *a2, v5 <= 0x7FFFFFFE)
     && ((v6 = v5 + 4, v7 = v5 + 4 + v2, v3 - 1 >= v7) ? (v8 = v3 > v6) : (v8 = 0),
         v8 ? (v9 = v3 - v6 >= v2) : (v9 = 0),
         v9)))
  {
    return *(_BYTE *)(*(_QWORD *)a1 + v7) == 0;
  }
  else
  {
    return 0;
  }
}

BOOL sub_1DF36CF04(uint64_t *a1, int *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;

  v2 = *a1;
  v3 = (unint64_t)a2 - *a1;
  if ((v3 & 3) != 0 && *((_BYTE *)a1 + 40))
    return 0;
  v4 = a1[1];
  v5 = v4 >= 5 && v4 - 4 >= v3;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = *((_DWORD *)a1 + 5);
  v8 = *((_DWORD *)a1 + 4) + 1;
  *((_DWORD *)a1 + 4) = v8;
  v9 = *((_DWORD *)a1 + 6) + 1;
  *((_DWORD *)a1 + 6) = v9;
  if (v8 > v7 || v9 > *((_DWORD *)a1 + 7))
    return 0;
  v10 = v3 - v6;
  if ((v10 & 1) != 0)
  {
    v11 = 0;
    if (*((_BYTE *)a1 + 40) || v4 - 2 < v10)
      return v11;
  }
  else if (v4 - 2 < v10)
  {
    return 0;
  }
  v12 = *(unsigned __int16 *)(v2 + v10);
  if ((v12 & 1) != 0 && *((_BYTE *)a1 + 40))
    return 0;
  v5 = v4 >= v12;
  v14 = v4 - v12;
  return v14 != 0 && v5 && v14 >= v10;
}

uint64_t sub_1DF36CFBC(int *a1, uint64_t a2)
{
  uint64_t result;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t v25;
  int *v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  unsigned __int16 *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  char *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned __int16 *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned __int16 *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  unint64_t v79;
  unsigned int *v80;
  uint64_t v81;
  unsigned __int16 *v82;
  uint64_t v83;
  _DWORD *v84;
  unint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;

  result = sub_1DF36CF04((uint64_t *)a2, a1);
  if ((_DWORD)result)
  {
    v5 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v5 < 5u)
      return 0;
    v6 = v5[2];
    if (!v5[2])
      return 0;
    result = sub_1DF36BC44(a2, (unint64_t)a1 + v6 - *(_QWORD *)a2);
    if ((_DWORD)result)
    {
      result = sub_1DF36CE84(a2, (unsigned int *)((char *)a1 + v6 + *(unsigned int *)((char *)a1 + v6)));
      if ((_DWORD)result)
      {
        v7 = *a1;
        v8 = (char *)a1 - v7;
        v9 = *(unsigned __int16 *)((char *)a1 - v7);
        if (v9 < 7)
          return 0;
        v10 = *((unsigned __int16 *)v8 + 3);
        if (!*((_WORD *)v8 + 3))
          return 0;
        v11 = *(_QWORD *)a2;
        result = sub_1DF36BC44(a2, (unint64_t)a1 + v10 - *(_QWORD *)a2);
        if (!(_DWORD)result)
          return result;
        v12 = *(unsigned int *)((char *)a1 + v10);
        v13 = (unsigned int *)((char *)a1 + v10 + v12);
        v14 = (unint64_t)v13 - v11;
        if ((((unint64_t)v13 - v11) & 3) != 0 && *(_BYTE *)(a2 + 40) != 0)
          return 0;
        result = 0;
        v16 = *(_QWORD *)(a2 + 8);
        if (v16 >= 5 && v16 - 4 >= v14)
        {
          v17 = *v13;
          if (v17 > 0x1FFFFFFE)
            return 0;
          v18 = 4 * v17 + 4;
          v19 = v16 > v18;
          v20 = v16 - v18;
          if (!v19 || v20 < v14)
            return 0;
          if ((_DWORD)v17)
          {
            v22 = 0;
            v23 = v13 + 1;
            v88 = (uint64_t)a1 + v12 + v10 + 8;
            while (1)
            {
              v24 = &v23[v22];
              v25 = *v24;
              v26 = (int *)((char *)v24 + v25);
              result = sub_1DF36CF04((uint64_t *)a2, (int *)((char *)v24 + v25));
              if (!(_DWORD)result)
                return result;
              v27 = (unsigned __int16 *)((char *)v26 - *v26);
              if (*v27 < 5u)
                return 0;
              v28 = v27[2];
              if (!v27[2])
                return 0;
              result = sub_1DF36BC44(a2, (unint64_t)v26 + v28 - *(_QWORD *)a2);
              if (!(_DWORD)result)
                return result;
              result = sub_1DF36CE84(a2, (unsigned int *)((char *)v26 + v28 + *(unsigned int *)((char *)v26 + v28)));
              if (!(_DWORD)result)
                return result;
              v29 = (unsigned __int16 *)((char *)v26 - *v26);
              if (*v29 < 7u)
                return 0;
              v30 = v29[3];
              if (!v29[3])
                return 0;
              result = sub_1DF36BC44(a2, (unint64_t)v26 + v30 - *(_QWORD *)a2);
              if (!(_DWORD)result)
                return result;
              result = sub_1DF36D85C((int *)((char *)v26 + v30 + *(unsigned int *)((char *)v26 + v30)), a2);
              if (!(_DWORD)result)
                return result;
              v31 = *v26;
              v32 = (unsigned __int16 *)((char *)v26 - v31);
              v33 = *(unsigned __int16 *)((char *)v26 - v31);
              if (v33 < 9)
                goto LABEL_66;
              if (v32[4])
              {
                result = 0;
                v34 = *(_QWORD *)(a2 + 8);
                if (v34 < 3 || v34 - 2 < (unint64_t)v26 + v32[4] - *(_QWORD *)a2)
                  return result;
              }
              if (v33 < 0xB)
                goto LABEL_66;
              if (v32[5])
              {
                result = 0;
                v35 = *(_QWORD *)(a2 + 8);
                if (v35 < 3 || v35 - 2 < (unint64_t)v26 + v32[5] - *(_QWORD *)a2)
                  return result;
              }
              if (v33 < 0xD)
                goto LABEL_66;
              if (v32[6])
              {
                result = 0;
                v36 = *(_QWORD *)(a2 + 8);
                if (v36 < 9 || v36 - 8 < (unint64_t)v26 + v32[6] - *(_QWORD *)a2)
                  return result;
              }
              if (v33 < 0xF)
                goto LABEL_66;
              if (v32[7])
              {
                result = 0;
                v37 = *(_QWORD *)(a2 + 8);
                if (v37 < 9 || v37 - 8 < (unint64_t)v26 + v32[7] - *(_QWORD *)a2)
                  return result;
              }
              if (v33 < 0x11)
                goto LABEL_66;
              if (v32[8])
              {
                result = 0;
                v38 = *(_QWORD *)(a2 + 8);
                if (v38 < 2 || v38 - 1 < (unint64_t)v26 + v32[8] - *(_QWORD *)a2)
                  return result;
              }
              if (v33 < 0x13)
                goto LABEL_66;
              if (v32[9])
              {
                result = 0;
                v39 = *(_QWORD *)(a2 + 8);
                if (v39 < 2 || v39 - 1 < (unint64_t)v26 + v32[9] - *(_QWORD *)a2)
                  return result;
              }
              if (v33 < 0x15)
                goto LABEL_66;
              if (v32[10])
              {
                result = 0;
                v40 = *(_QWORD *)(a2 + 8);
                if (v40 < 2 || v40 - 1 < (unint64_t)v26 + v32[10] - *(_QWORD *)a2)
                  return result;
              }
              if (v33 < 0x17)
              {
LABEL_66:
                v43 = 0;
                v42 = 0;
              }
              else
              {
                v41 = v32[11];
                if (v32[11])
                {
                  result = sub_1DF36BC44(a2, (unint64_t)v26 + v41 - *(_QWORD *)a2);
                  if (!(_DWORD)result)
                    return result;
                  v42 = (unsigned int *)((char *)v26 + v41 + *(unsigned int *)((char *)v26 + v41));
                }
                else
                {
                  v42 = 0;
                }
                v43 = 1;
              }
              result = sub_1DF36D7F4(a2, v42);
              if (!(_DWORD)result)
                return result;
              v44 = -v31;
              if (v43)
              {
                v45 = v32[11];
                if (v32[11])
                {
                  v46 = (char *)v26 + v45;
                  v47 = *(unsigned int *)((char *)v26 + v45);
                  if (*(int *)((char *)v26 + v45 + v47))
                  {
                    v48 = 0;
                    v49 = (unsigned int *)(v88 + v25 + v47 + v45);
                    while ((sub_1DF383950((int *)((char *)v49 + *v49), a2) & 1) != 0)
                    {
                      ++v48;
                      ++v49;
                      if (v48 >= *(unsigned int *)&v46[v47])
                      {
                        v31 = *v26;
                        v44 = -v31;
                        v33 = *(unsigned __int16 *)((char *)v26 - v31);
                        goto LABEL_75;
                      }
                    }
                    return 0;
                  }
                }
              }
              if (v33 < 0x19)
                goto LABEL_81;
              v50 = *(unsigned __int16 *)((char *)v26 + v44 + 24);
              if (!v50)
                goto LABEL_81;
LABEL_75:
              result = sub_1DF36BC44(a2, (unint64_t)v26 + v50 - *(_QWORD *)a2);
              if (!(_DWORD)result)
                return result;
              v51 = (unsigned __int16 *)((char *)v26 - (int)v31);
              if (*v51 >= 0x19u && (v52 = v51[12]) != 0)
                v53 = (unsigned int *)((char *)v26 + v52 + *(unsigned int *)((char *)v26 + v52));
              else
LABEL_81:
                v53 = 0;
              result = sub_1DF36D7F4(a2, v53);
              if (!(_DWORD)result)
                return result;
              v54 = *v26;
              v55 = (char *)v26 - v54;
              v56 = *(unsigned __int16 *)((char *)v26 - v54);
              if (v56 >= 0x19)
              {
                v57 = -v54;
                v58 = *((unsigned __int16 *)v55 + 12);
                if (v58)
                {
                  v59 = (char *)v26 + v58;
                  v60 = *(unsigned int *)((char *)v26 + v58);
                  if (*(int *)((char *)v26 + v58 + v60))
                  {
                    v61 = 0;
                    v62 = (unsigned int *)(v88 + v25 + v60 + v58);
                    while (sub_1DF36CE84(a2, (unsigned int *)((char *)v62 + *v62)))
                    {
                      ++v61;
                      ++v62;
                      if (v61 >= *(unsigned int *)&v59[v60])
                      {
                        v63 = *v26;
                        v57 = -v63;
                        v56 = *(unsigned __int16 *)((char *)v26 - v63);
                        goto LABEL_90;
                      }
                    }
                    return 0;
                  }
                }
LABEL_90:
                if (v56 >= 0x1B)
                {
                  v64 = *(unsigned __int16 *)((char *)v26 + v57 + 26);
                  if (v64)
                  {
                    result = 0;
                    v65 = *(_QWORD *)(a2 + 8);
                    if (v65 < 2 || v65 - 1 < (unint64_t)v26 + v64 - *(_QWORD *)a2)
                      return result;
                  }
                }
              }
              --*(_DWORD *)(a2 + 16);
              ++v22;
              v23 = v13 + 1;
              v88 += 4;
              if (v22 >= *v13)
              {
                v7 = *a1;
                v87 = -v7;
                v9 = *(unsigned __int16 *)((char *)a1 - v7);
                goto LABEL_99;
              }
            }
          }
          v87 = -v7;
LABEL_99:
          if (v9 >= 9)
          {
            v66 = (unsigned __int16 *)((char *)a1 + v87);
            if (*(_WORD *)((char *)a1 + v87 + 8))
            {
              result = 0;
              v67 = *(_QWORD *)(a2 + 8);
              if (v67 < 2
                || v67 - 1 < (unint64_t)a1 + *(unsigned __int16 *)((char *)a1 + v87 + 8) - *(_QWORD *)a2)
              {
                return result;
              }
            }
            if (v9 >= 0xB)
            {
              if (v66[5])
              {
                result = 0;
                v68 = *(_QWORD *)(a2 + 8);
                if (v68 < 5 || v68 - 4 < (unint64_t)a1 + v66[5] - *(_QWORD *)a2)
                  return result;
              }
              if (v9 >= 0xD)
              {
                if (v66[6])
                {
                  result = 0;
                  v69 = *(_QWORD *)(a2 + 8);
                  if (v69 < 5 || v69 - 4 < (unint64_t)a1 + v66[6] - *(_QWORD *)a2)
                    return result;
                }
                if (v9 >= 0xF)
                {
                  v70 = v66[7];
                  if (v70)
                  {
                    result = sub_1DF36BC44(a2, (unint64_t)a1 + v70 - *(_QWORD *)a2);
                    if (!(_DWORD)result)
                      return result;
                    v71 = 0;
                    if (*(unsigned __int16 *)((char *)a1 - (int)v7) < 0xFu)
                    {
LABEL_119:
                      result = sub_1DF36D7F4(a2, v71);
                      if (!(_DWORD)result)
                        return result;
                      v73 = 0;
                      v74 = (unsigned __int16 *)((char *)a1 - (int)v7);
                      v75 = *v74;
                      if (v75 >= 0xF)
                      {
                        v76 = -(uint64_t)(int)v7;
                        v77 = v74[7];
                        if (v77)
                        {
                          v78 = (int *)((char *)a1 + v77 + *(unsigned int *)((char *)a1 + v77));
                          if (*v78)
                          {
                            v79 = 0;
                            v80 = v78 + 1;
                            while ((sub_1DF383950((int *)((char *)v80 + *v80), a2) & 1) != 0)
                            {
                              ++v79;
                              ++v80;
                              if (v79 >= *v78)
                              {
                                v7 = *a1;
                                v76 = -v7;
                                v75 = *(unsigned __int16 *)((char *)a1 - v7);
                                goto LABEL_127;
                              }
                            }
                            return 0;
                          }
                        }
                        if (v75 < 0x11)
                          goto LABEL_134;
LABEL_127:
                        if (*(_WORD *)((char *)a1 + v76 + 16))
                        {
                          result = sub_1DF36BC44(a2, (unint64_t)a1 + *(unsigned __int16 *)((char *)a1 + v76 + 16) - *(_QWORD *)a2);
                          if (!(_DWORD)result)
                            return result;
                          v73 = 0;
                          if (*(unsigned __int16 *)((char *)a1 - (int)v7) < 0x11u)
                            goto LABEL_135;
                          v76 = -(uint64_t)(int)v7;
                        }
                        v81 = *(unsigned __int16 *)((char *)a1 + v76 + 16);
                        if (v81)
                          v73 = (unsigned int *)((char *)a1 + v81 + *(unsigned int *)((char *)a1 + v81));
                        else
LABEL_134:
                          v73 = 0;
                      }
LABEL_135:
                      result = sub_1DF36D7F4(a2, v73);
                      if ((_DWORD)result)
                      {
                        v82 = (unsigned __int16 *)((char *)a1 - *a1);
                        if (*v82 < 0x11u
                          || (v83 = v82[8]) == 0
                          || (v84 = (int *)((char *)a1 + v83 + *(unsigned int *)((char *)a1 + v83)), !*v84))
                        {
LABEL_142:
                          --*(_DWORD *)(a2 + 16);
                          return 1;
                        }
                        v85 = 0;
                        v86 = v84 + 1;
                        while (sub_1DF36CE84(a2, (unsigned int *)((char *)v86 + *v86)))
                        {
                          ++v85;
                          ++v86;
                          if (v85 >= *v84)
                            goto LABEL_142;
                        }
                        return 0;
                      }
                      return result;
                    }
                    v87 = -(uint64_t)(int)v7;
                  }
                  v72 = *(unsigned __int16 *)((char *)a1 + v87 + 14);
                  if (v72)
                  {
                    v71 = (unsigned int *)((char *)a1 + v72 + *(unsigned int *)((char *)a1 + v72));
                    goto LABEL_119;
                  }
                }
              }
            }
          }
          v71 = 0;
          goto LABEL_119;
        }
      }
    }
  }
  return result;
}

BOOL sub_1DF36D7F4(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  if (!a2)
    return 1;
  v2 = (unint64_t)a2 - *(_QWORD *)a1;
  if ((v2 & 3) != 0 && *(_BYTE *)(a1 + 40))
    return 0;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 < 5 || v3 - 4 < v2)
    return 0;
  v5 = *a2;
  if (v5 > 0x1FFFFFFE)
    return 0;
  v6 = 4 * v5 + 4;
  v7 = v3 > v6;
  v8 = v3 - v6;
  return v7 && v8 >= v2;
}

BOOL sub_1DF36D85C(int *a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned __int16 *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  result = sub_1DF36CF04((uint64_t *)a2, a1);
  if (result)
  {
    v5 = (unsigned __int16 *)((char *)a1 - *a1);
    v6 = *v5;
    if (v6 < 5)
      goto LABEL_18;
    if (!v5[2]
      || (result = 0, v7 = *(_QWORD *)(a2 + 8), v7 >= 2) && v7 - 1 >= (unint64_t)a1 + v5[2] - *(_QWORD *)a2)
    {
      if (v6 < 7
        || (!v5[3]
         || (result = 0, v8 = *(_QWORD *)(a2 + 8), v8 >= 2) && v8 - 1 >= (unint64_t)a1 + v5[3] - *(_QWORD *)a2)
        && (v6 < 9
         || (!v5[4]
          || (result = 0, v9 = *(_QWORD *)(a2 + 8), v9 >= 5) && v9 - 4 >= (unint64_t)a1 + v5[4] - *(_QWORD *)a2)
         && (v6 < 0xB
          || (v10 = v5[5]) == 0
          || (result = 0, v11 = *(_QWORD *)(a2 + 8), v11 >= 3)
          && v11 - 2 >= (unint64_t)a1 + v10 - *(_QWORD *)a2)))
      {
LABEL_18:
        --*(_DWORD *)(a2 + 16);
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_1DF36D988(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void **v6;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        sub_1DF367C54(v4 + 88);
        v6 = (void **)(v4 + 24);
        sub_1DF370598(&v6);
        if (*(char *)(v4 + 23) < 0)
          operator delete(*(void **)v4);
        MEMORY[0x1E0BFF788](v4, 0x10B2C4072A4B994);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1DF367658(*(char **)(a1 + 8));
  return a1;
}

void *sub_1DF36DA38(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_1DF36DAC0(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  BOOL v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  uint64_t *v78;
  unsigned int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int *v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int *v104;
  uint64_t v105;
  unsigned int *v106;
  int64_t v107;
  unsigned int v108;
  unsigned int *v111;
  unsigned int *v112;
  unsigned int *v113;

  v6 = a3;
  v8 = (unsigned int *)result;
LABEL_2:
  v104 = a2 - 2;
  v106 = a2 - 1;
  v103 = a2 - 3;
  v9 = v8;
  v111 = a2;
  while (2)
  {
    v8 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v49 = *(a2 - 1);
        v50 = *(_QWORD *)(*(_QWORD *)v6 + 40) + *(_QWORD *)(*(_QWORD *)v6 + 32);
        v51 = *v9;
        result = sub_1DF36BA10((int *)(v50 - v49), (int *)(v50 - v51));
        if ((_DWORD)result)
        {
          *v9 = v49;
          *(a2 - 1) = v51;
        }
        return result;
      case 3:
        return sub_1DF36B770(v9, v9 + 1, v106, *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
      case 4:
        return sub_1DF36BAAC(v9, v9 + 1, v9 + 2, v106, v6);
      case 5:
        return sub_1DF36BB68(v9, v9 + 1, v9 + 2, v9 + 3, v106, v6);
      default:
        v113 = v9;
        if (v10 <= 95)
        {
          v52 = v9 + 1;
          v54 = v9 == a2 || v52 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = *(_QWORD *)(*(_QWORD *)v6 + 40) + *(_QWORD *)(*(_QWORD *)v6 + 32);
              v57 = v9;
              do
              {
                v59 = *v57;
                v58 = v57[1];
                v57 = v52;
                result = sub_1DF36BA10((int *)(v56 - v58), (int *)(v56 - v59));
                if ((_DWORD)result)
                {
                  v60 = v55;
                  while (1)
                  {
                    *(unsigned int *)((char *)v9 + v60 + 4) = v59;
                    if (!v60)
                      break;
                    v59 = *(unsigned int *)((char *)v9 + v60 - 4);
                    result = sub_1DF36BA10((int *)(v56 - v58), (int *)(v56 - v59));
                    v60 -= 4;
                    if ((result & 1) == 0)
                    {
                      v61 = (unsigned int *)((char *)v9 + v60 + 4);
                      goto LABEL_77;
                    }
                  }
                  v61 = v9;
LABEL_77:
                  *v61 = v58;
                }
                v52 = v57 + 1;
                v55 += 4;
              }
              while (v57 + 1 != a2);
            }
          }
          else if (!v54)
          {
            v99 = *(_QWORD *)(*(_QWORD *)v6 + 40) + *(_QWORD *)(*(_QWORD *)v6 + 32);
            do
            {
              v101 = *v8;
              v100 = v8[1];
              v8 = v52;
              result = sub_1DF36BA10((int *)(v99 - v100), (int *)(v99 - v101));
              if ((_DWORD)result)
              {
                v102 = v8;
                do
                {
                  *v102 = v101;
                  v101 = *(v102 - 2);
                  result = sub_1DF36BA10((int *)(v99 - v100), (int *)(v99 - v101));
                  --v102;
                }
                while ((result & 1) != 0);
                *v102 = v100;
              }
              v52 = v8 + 1;
            }
            while (v8 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v62 = (unint64_t)(v11 - 2) >> 1;
            v63 = v62;
            do
            {
              v64 = v63;
              if (v62 >= v63)
              {
                v65 = *(_QWORD *)a3;
                v107 = v64;
                v66 = (2 * v64) | 1;
                v67 = &v8[v66];
                v68 = 2 * v64 + 2;
                if (v68 >= v11)
                {
                  LODWORD(v72) = *v67;
                  v71 = *(_QWORD *)(v65 + 32);
                  v70 = *(_QWORD *)(v65 + 40);
                }
                else
                {
                  v69 = *v67;
                  v71 = *(_QWORD *)(v65 + 32);
                  v70 = *(_QWORD *)(v65 + 40);
                  v72 = v67[1];
                  if (sub_1DF36BA10((int *)(v70 + v71 - v69), (int *)(v70 + v71 - v72)))
                  {
                    ++v67;
                    v66 = v68;
                  }
                  else
                  {
                    LODWORD(v72) = v69;
                  }
                }
                v64 = v107;
                v73 = &v8[v107];
                v74 = v70 + v71;
                v105 = *v73;
                result = sub_1DF36BA10((int *)(v74 - v72), (int *)(v74 - v105));
                v62 = (unint64_t)(v11 - 2) >> 1;
                if ((result & 1) == 0)
                {
                  do
                  {
                    *v73 = v72;
                    v73 = v67;
                    if (v62 < v66)
                      break;
                    v75 = (2 * v66) | 1;
                    v67 = &v8[v75];
                    v66 = 2 * v66 + 2;
                    if (v66 >= v11)
                    {
                      LODWORD(v72) = *v67;
                      v66 = v75;
                    }
                    else
                    {
                      v72 = *v67;
                      v76 = v67[1];
                      v77 = sub_1DF36BA10((int *)(v74 - v72), (int *)(v74 - v76));
                      if (v77)
                        LODWORD(v72) = v76;
                      v62 = (unint64_t)(v11 - 2) >> 1;
                      if (v77)
                        ++v67;
                      v8 = v113;
                      if (!v77)
                        v66 = v75;
                    }
                    result = sub_1DF36BA10((int *)(v74 - v72), (int *)(v74 - v105));
                  }
                  while (!(_DWORD)result);
                  v64 = v107;
                  *v73 = v105;
                }
              }
              v63 = v64 - 1;
            }
            while (v64);
            v78 = (uint64_t *)a3;
            v79 = v111;
            do
            {
              v112 = v79;
              v80 = 0;
              v108 = *v8;
              v81 = *v78;
              v82 = v11 - 2;
              if (v11 < 2)
                v82 = v11 - 1;
              v83 = v82 >> 1;
              do
              {
                v84 = &v8[v80 + 1];
                v85 = (2 * v80) | 1;
                v86 = 2 * v80 + 2;
                if (v86 >= v11)
                {
                  v90 = *v84;
                  v80 = (2 * v80) | 1;
                }
                else
                {
                  v87 = *v84;
                  v88 = *(_QWORD *)(v81 + 40) + *(_QWORD *)(v81 + 32);
                  v89 = v84[1];
                  result = sub_1DF36BA10((int *)(v88 - v87), (int *)(v88 - v89));
                  if ((_DWORD)result)
                    v90 = v89;
                  else
                    v90 = v87;
                  if ((_DWORD)result)
                  {
                    ++v84;
                    v80 = v86;
                  }
                  else
                  {
                    v80 = v85;
                  }
                }
                *v8 = v90;
                v8 = v84;
              }
              while (v80 <= v83);
              v91 = v112 - 1;
              if (v84 == v112 - 1)
              {
                v79 = v112 - 1;
                *v84 = v108;
              }
              else
              {
                *v84 = *v91;
                v79 = v112 - 1;
                *v91 = v108;
                v92 = (char *)v84 - (char *)v113 + 4;
                if (v92 >= 5)
                {
                  v93 = (((unint64_t)v92 >> 2) - 2) >> 1;
                  v94 = &v113[v93];
                  v95 = *v94;
                  v96 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
                  v97 = *v84;
                  result = sub_1DF36BA10((int *)(v96 - v95), (int *)(v96 - v97));
                  if ((_DWORD)result)
                  {
                    do
                    {
                      *v84 = v95;
                      v84 = v94;
                      if (!v93)
                        break;
                      v93 = (v93 - 1) >> 1;
                      v94 = &v113[v93];
                      v95 = *v94;
                      result = sub_1DF36BA10((int *)(v96 - v95), (int *)(v96 - v97));
                    }
                    while ((result & 1) != 0);
                    *v84 = v97;
                  }
                }
              }
              v98 = v11-- <= 2;
              v78 = (uint64_t *)a3;
              v8 = v113;
            }
            while (!v98);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v9[(unint64_t)v11 >> 1];
        v14 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v15 = *(_QWORD *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v10 < 0x201)
        {
          sub_1DF36B770(&v8[(unint64_t)v11 >> 1], v8, v106, v14, v15);
        }
        else
        {
          sub_1DF36B770(v8, &v8[(unint64_t)v11 >> 1], v106, v14, v15);
          sub_1DF36B770(v8 + 1, v13 - 1, v104, *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
          sub_1DF36B770(v8 + 2, &v8[v12 + 1], v103, *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
          sub_1DF36B770(v13 - 1, &v8[(unint64_t)v11 >> 1], &v8[v12 + 1], *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
          v16 = *v8;
          *v8 = *v13;
          *v13 = v16;
        }
        --a4;
        v17 = *(_QWORD *)v6;
        v18 = *v8;
        if ((a5 & 1) == 0)
        {
          v21 = *(_QWORD *)(v17 + 32);
          v20 = *(_QWORD *)(v17 + 40);
          v22 = v20 + v21;
          v23 = (int *)(v20 + v21 - v18);
          if (sub_1DF36BA10((int *)(v20 + v21 - *(v8 - 1)), v23))
          {
            v19 = a4;
            goto LABEL_13;
          }
          result = sub_1DF36BA10((int *)(v20 + v21 - v18), (int *)(v22 - *v106));
          if ((result & 1) != 0)
          {
            v9 = v8;
            do
            {
              v40 = v9[1];
              ++v9;
              result = sub_1DF36BA10((int *)(v20 + v21 - v18), (int *)(v22 - v40));
            }
            while ((result & 1) == 0);
          }
          else
          {
            v41 = v8 + 1;
            do
            {
              v9 = v41;
              if (v41 >= v111)
                break;
              ++v41;
              result = sub_1DF36BA10(v23, (int *)(v22 - *v9));
            }
            while (!(_DWORD)result);
          }
          v42 = v111;
          if (v9 < v111)
          {
            v42 = v111;
            do
            {
              v43 = *--v42;
              result = sub_1DF36BA10(v23, (int *)(v22 - v43));
            }
            while ((result & 1) != 0);
          }
          if (v9 < v42)
          {
            v44 = *v9;
            v45 = *v42;
            do
            {
              *v9 = v45;
              *v42 = v44;
              do
              {
                v46 = v9[1];
                ++v9;
                v44 = v46;
              }
              while (!sub_1DF36BA10(v23, (int *)(v22 - v46)));
              do
              {
                v47 = *--v42;
                v45 = v47;
                result = sub_1DF36BA10(v23, (int *)(v22 - v47));
              }
              while ((result & 1) != 0);
            }
            while (v9 < v42);
          }
          v48 = v9 - 1;
          if (v9 - 1 != v8)
            *v8 = *v48;
          a5 = 0;
          *v48 = v18;
          v6 = a3;
          a2 = v111;
          continue;
        }
        v19 = a4;
        v21 = *(_QWORD *)(v17 + 32);
        v20 = *(_QWORD *)(v17 + 40);
LABEL_13:
        v24 = 0;
        v25 = v20 + v21;
        v26 = (int *)(v20 + v21 - v18);
        do
          v27 = v8[++v24];
        while (sub_1DF36BA10((int *)(v25 - v27), v26));
        v28 = &v8[v24];
        v29 = v111;
        if (v24 == 1)
        {
          v29 = v111;
          do
          {
            if (v28 >= v29)
              break;
            v31 = *--v29;
          }
          while (!sub_1DF36BA10((int *)(v25 - v31), v26));
        }
        else
        {
          do
            v30 = *--v29;
          while (!sub_1DF36BA10((int *)(v25 - v30), v26));
        }
        if (v28 >= v29)
        {
          v38 = v28 - 1;
        }
        else
        {
          v32 = *v29;
          v33 = v27;
          v34 = v28;
          v35 = v29;
          do
          {
            *v34 = v32;
            *v35 = v33;
            do
            {
              v36 = v34[1];
              ++v34;
              v33 = v36;
            }
            while (sub_1DF36BA10((int *)(v25 - v36), v26));
            do
            {
              v37 = *--v35;
              v32 = v37;
            }
            while (!sub_1DF36BA10((int *)(v25 - v37), v26));
          }
          while (v34 < v35);
          v38 = v34 - 1;
          v8 = v113;
        }
        a4 = v19;
        v6 = a3;
        if (v38 != v8)
          *v8 = *v38;
        *v38 = v18;
        a2 = v111;
        if (v28 < v29)
        {
LABEL_34:
          result = sub_1DF36DAC0(v8, v38, a3, a4, a5 & 1);
          a5 = 0;
          v9 = v38 + 1;
          continue;
        }
        v39 = sub_1DF36E31C(v8, v38, a3);
        v9 = v38 + 1;
        result = sub_1DF36E31C(v38 + 1, v111, a3);
        if (!(_DWORD)result)
        {
          if (v39)
            continue;
          goto LABEL_34;
        }
        a2 = v38;
        if (!v39)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1DF36E31C(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  _DWORD *v21;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      v10 = *a1;
      if (sub_1DF36BA10((int *)(v9 - v8), (int *)(v9 - v10)))
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_1DF36B770(a1, a1 + 1, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 32), *(_QWORD *)(*(_QWORD *)a3 + 40));
      return 1;
    case 4:
      sub_1DF36BAAC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1DF36BB68(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      sub_1DF36B770(a1, a1 + 1, a1 + 2, *(_QWORD *)(*(_QWORD *)a3 + 32), *(_QWORD *)(*(_QWORD *)a3 + 40));
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      v15 = 12;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v17 = *v11;
    if (sub_1DF36BA10((int *)(v14 - v16), (int *)(v14 - v17)))
    {
      v18 = v15;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v17;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v17 = *(unsigned int *)((char *)a1 + v18 - 8);
        v20 = sub_1DF36BA10((int *)(v14 - v16), (int *)(v14 - v17));
        v18 = v19;
        if (!v20)
        {
          v21 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *v21 = v16;
      if (++v13 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v15 += 4;
    if (++v12 == a2)
      return 1;
  }
}

uint64_t sub_1DF36E4E0(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  BOOL v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  uint64_t *v78;
  unsigned int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int *v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int *v104;
  uint64_t v105;
  unsigned int *v106;
  int64_t v107;
  unsigned int v108;
  unsigned int *v111;
  unsigned int *v112;
  unsigned int *v113;

  v6 = a3;
  v8 = (unsigned int *)result;
LABEL_2:
  v104 = a2 - 2;
  v106 = a2 - 1;
  v103 = a2 - 3;
  v9 = v8;
  v111 = a2;
  while (2)
  {
    v8 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v49 = *(a2 - 1);
        v50 = *(_QWORD *)(*(_QWORD *)v6 + 40) + *(_QWORD *)(*(_QWORD *)v6 + 32);
        v51 = *v9;
        result = sub_1DF36BA10((int *)(v50 - v49), (int *)(v50 - v51));
        if ((_DWORD)result)
        {
          *v9 = v49;
          *(a2 - 1) = v51;
        }
        return result;
      case 3:
        return sub_1DF36B770(v9, v9 + 1, v106, *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
      case 4:
        return sub_1DF36BAAC(v9, v9 + 1, v9 + 2, v106, v6);
      case 5:
        return sub_1DF36BB68(v9, v9 + 1, v9 + 2, v9 + 3, v106, v6);
      default:
        v113 = v9;
        if (v10 <= 95)
        {
          v52 = v9 + 1;
          v54 = v9 == a2 || v52 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = *(_QWORD *)(*(_QWORD *)v6 + 40) + *(_QWORD *)(*(_QWORD *)v6 + 32);
              v57 = v9;
              do
              {
                v59 = *v57;
                v58 = v57[1];
                v57 = v52;
                result = sub_1DF36BA10((int *)(v56 - v58), (int *)(v56 - v59));
                if ((_DWORD)result)
                {
                  v60 = v55;
                  while (1)
                  {
                    *(unsigned int *)((char *)v9 + v60 + 4) = v59;
                    if (!v60)
                      break;
                    v59 = *(unsigned int *)((char *)v9 + v60 - 4);
                    result = sub_1DF36BA10((int *)(v56 - v58), (int *)(v56 - v59));
                    v60 -= 4;
                    if ((result & 1) == 0)
                    {
                      v61 = (unsigned int *)((char *)v9 + v60 + 4);
                      goto LABEL_77;
                    }
                  }
                  v61 = v9;
LABEL_77:
                  *v61 = v58;
                }
                v52 = v57 + 1;
                v55 += 4;
              }
              while (v57 + 1 != a2);
            }
          }
          else if (!v54)
          {
            v99 = *(_QWORD *)(*(_QWORD *)v6 + 40) + *(_QWORD *)(*(_QWORD *)v6 + 32);
            do
            {
              v101 = *v8;
              v100 = v8[1];
              v8 = v52;
              result = sub_1DF36BA10((int *)(v99 - v100), (int *)(v99 - v101));
              if ((_DWORD)result)
              {
                v102 = v8;
                do
                {
                  *v102 = v101;
                  v101 = *(v102 - 2);
                  result = sub_1DF36BA10((int *)(v99 - v100), (int *)(v99 - v101));
                  --v102;
                }
                while ((result & 1) != 0);
                *v102 = v100;
              }
              v52 = v8 + 1;
            }
            while (v8 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v62 = (unint64_t)(v11 - 2) >> 1;
            v63 = v62;
            do
            {
              v64 = v63;
              if (v62 >= v63)
              {
                v65 = *(_QWORD *)a3;
                v107 = v64;
                v66 = (2 * v64) | 1;
                v67 = &v8[v66];
                v68 = 2 * v64 + 2;
                if (v68 >= v11)
                {
                  LODWORD(v72) = *v67;
                  v71 = *(_QWORD *)(v65 + 32);
                  v70 = *(_QWORD *)(v65 + 40);
                }
                else
                {
                  v69 = *v67;
                  v71 = *(_QWORD *)(v65 + 32);
                  v70 = *(_QWORD *)(v65 + 40);
                  v72 = v67[1];
                  if (sub_1DF36BA10((int *)(v70 + v71 - v69), (int *)(v70 + v71 - v72)))
                  {
                    ++v67;
                    v66 = v68;
                  }
                  else
                  {
                    LODWORD(v72) = v69;
                  }
                }
                v64 = v107;
                v73 = &v8[v107];
                v74 = v70 + v71;
                v105 = *v73;
                result = sub_1DF36BA10((int *)(v74 - v72), (int *)(v74 - v105));
                v62 = (unint64_t)(v11 - 2) >> 1;
                if ((result & 1) == 0)
                {
                  do
                  {
                    *v73 = v72;
                    v73 = v67;
                    if (v62 < v66)
                      break;
                    v75 = (2 * v66) | 1;
                    v67 = &v8[v75];
                    v66 = 2 * v66 + 2;
                    if (v66 >= v11)
                    {
                      LODWORD(v72) = *v67;
                      v66 = v75;
                    }
                    else
                    {
                      v72 = *v67;
                      v76 = v67[1];
                      v77 = sub_1DF36BA10((int *)(v74 - v72), (int *)(v74 - v76));
                      if (v77)
                        LODWORD(v72) = v76;
                      v62 = (unint64_t)(v11 - 2) >> 1;
                      if (v77)
                        ++v67;
                      v8 = v113;
                      if (!v77)
                        v66 = v75;
                    }
                    result = sub_1DF36BA10((int *)(v74 - v72), (int *)(v74 - v105));
                  }
                  while (!(_DWORD)result);
                  v64 = v107;
                  *v73 = v105;
                }
              }
              v63 = v64 - 1;
            }
            while (v64);
            v78 = (uint64_t *)a3;
            v79 = v111;
            do
            {
              v112 = v79;
              v80 = 0;
              v108 = *v8;
              v81 = *v78;
              v82 = v11 - 2;
              if (v11 < 2)
                v82 = v11 - 1;
              v83 = v82 >> 1;
              do
              {
                v84 = &v8[v80 + 1];
                v85 = (2 * v80) | 1;
                v86 = 2 * v80 + 2;
                if (v86 >= v11)
                {
                  v90 = *v84;
                  v80 = (2 * v80) | 1;
                }
                else
                {
                  v87 = *v84;
                  v88 = *(_QWORD *)(v81 + 40) + *(_QWORD *)(v81 + 32);
                  v89 = v84[1];
                  result = sub_1DF36BA10((int *)(v88 - v87), (int *)(v88 - v89));
                  if ((_DWORD)result)
                    v90 = v89;
                  else
                    v90 = v87;
                  if ((_DWORD)result)
                  {
                    ++v84;
                    v80 = v86;
                  }
                  else
                  {
                    v80 = v85;
                  }
                }
                *v8 = v90;
                v8 = v84;
              }
              while (v80 <= v83);
              v91 = v112 - 1;
              if (v84 == v112 - 1)
              {
                v79 = v112 - 1;
                *v84 = v108;
              }
              else
              {
                *v84 = *v91;
                v79 = v112 - 1;
                *v91 = v108;
                v92 = (char *)v84 - (char *)v113 + 4;
                if (v92 >= 5)
                {
                  v93 = (((unint64_t)v92 >> 2) - 2) >> 1;
                  v94 = &v113[v93];
                  v95 = *v94;
                  v96 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
                  v97 = *v84;
                  result = sub_1DF36BA10((int *)(v96 - v95), (int *)(v96 - v97));
                  if ((_DWORD)result)
                  {
                    do
                    {
                      *v84 = v95;
                      v84 = v94;
                      if (!v93)
                        break;
                      v93 = (v93 - 1) >> 1;
                      v94 = &v113[v93];
                      v95 = *v94;
                      result = sub_1DF36BA10((int *)(v96 - v95), (int *)(v96 - v97));
                    }
                    while ((result & 1) != 0);
                    *v84 = v97;
                  }
                }
              }
              v98 = v11-- <= 2;
              v78 = (uint64_t *)a3;
              v8 = v113;
            }
            while (!v98);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v9[(unint64_t)v11 >> 1];
        v14 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v15 = *(_QWORD *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v10 < 0x201)
        {
          sub_1DF36B770(&v8[(unint64_t)v11 >> 1], v8, v106, v14, v15);
        }
        else
        {
          sub_1DF36B770(v8, &v8[(unint64_t)v11 >> 1], v106, v14, v15);
          sub_1DF36B770(v8 + 1, v13 - 1, v104, *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
          sub_1DF36B770(v8 + 2, &v8[v12 + 1], v103, *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
          sub_1DF36B770(v13 - 1, &v8[(unint64_t)v11 >> 1], &v8[v12 + 1], *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
          v16 = *v8;
          *v8 = *v13;
          *v13 = v16;
        }
        --a4;
        v17 = *(_QWORD *)v6;
        v18 = *v8;
        if ((a5 & 1) == 0)
        {
          v21 = *(_QWORD *)(v17 + 32);
          v20 = *(_QWORD *)(v17 + 40);
          v22 = v20 + v21;
          v23 = (int *)(v20 + v21 - v18);
          if (sub_1DF36BA10((int *)(v20 + v21 - *(v8 - 1)), v23))
          {
            v19 = a4;
            goto LABEL_13;
          }
          result = sub_1DF36BA10((int *)(v20 + v21 - v18), (int *)(v22 - *v106));
          if ((result & 1) != 0)
          {
            v9 = v8;
            do
            {
              v40 = v9[1];
              ++v9;
              result = sub_1DF36BA10((int *)(v20 + v21 - v18), (int *)(v22 - v40));
            }
            while ((result & 1) == 0);
          }
          else
          {
            v41 = v8 + 1;
            do
            {
              v9 = v41;
              if (v41 >= v111)
                break;
              ++v41;
              result = sub_1DF36BA10(v23, (int *)(v22 - *v9));
            }
            while (!(_DWORD)result);
          }
          v42 = v111;
          if (v9 < v111)
          {
            v42 = v111;
            do
            {
              v43 = *--v42;
              result = sub_1DF36BA10(v23, (int *)(v22 - v43));
            }
            while ((result & 1) != 0);
          }
          if (v9 < v42)
          {
            v44 = *v9;
            v45 = *v42;
            do
            {
              *v9 = v45;
              *v42 = v44;
              do
              {
                v46 = v9[1];
                ++v9;
                v44 = v46;
              }
              while (!sub_1DF36BA10(v23, (int *)(v22 - v46)));
              do
              {
                v47 = *--v42;
                v45 = v47;
                result = sub_1DF36BA10(v23, (int *)(v22 - v47));
              }
              while ((result & 1) != 0);
            }
            while (v9 < v42);
          }
          v48 = v9 - 1;
          if (v9 - 1 != v8)
            *v8 = *v48;
          a5 = 0;
          *v48 = v18;
          v6 = a3;
          a2 = v111;
          continue;
        }
        v19 = a4;
        v21 = *(_QWORD *)(v17 + 32);
        v20 = *(_QWORD *)(v17 + 40);
LABEL_13:
        v24 = 0;
        v25 = v20 + v21;
        v26 = (int *)(v20 + v21 - v18);
        do
          v27 = v8[++v24];
        while (sub_1DF36BA10((int *)(v25 - v27), v26));
        v28 = &v8[v24];
        v29 = v111;
        if (v24 == 1)
        {
          v29 = v111;
          do
          {
            if (v28 >= v29)
              break;
            v31 = *--v29;
          }
          while (!sub_1DF36BA10((int *)(v25 - v31), v26));
        }
        else
        {
          do
            v30 = *--v29;
          while (!sub_1DF36BA10((int *)(v25 - v30), v26));
        }
        if (v28 >= v29)
        {
          v38 = v28 - 1;
        }
        else
        {
          v32 = *v29;
          v33 = v27;
          v34 = v28;
          v35 = v29;
          do
          {
            *v34 = v32;
            *v35 = v33;
            do
            {
              v36 = v34[1];
              ++v34;
              v33 = v36;
            }
            while (sub_1DF36BA10((int *)(v25 - v36), v26));
            do
            {
              v37 = *--v35;
              v32 = v37;
            }
            while (!sub_1DF36BA10((int *)(v25 - v37), v26));
          }
          while (v34 < v35);
          v38 = v34 - 1;
          v8 = v113;
        }
        a4 = v19;
        v6 = a3;
        if (v38 != v8)
          *v8 = *v38;
        *v38 = v18;
        a2 = v111;
        if (v28 < v29)
        {
LABEL_34:
          result = sub_1DF36E4E0(v8, v38, a3, a4, a5 & 1);
          a5 = 0;
          v9 = v38 + 1;
          continue;
        }
        v39 = sub_1DF36ED3C(v8, v38, a3);
        v9 = v38 + 1;
        result = sub_1DF36ED3C(v38 + 1, v111, a3);
        if (!(_DWORD)result)
        {
          if (v39)
            continue;
          goto LABEL_34;
        }
        a2 = v38;
        if (!v39)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1DF36ED3C(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  _DWORD *v21;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      v10 = *a1;
      if (sub_1DF36BA10((int *)(v9 - v8), (int *)(v9 - v10)))
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_1DF36B770(a1, a1 + 1, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 32), *(_QWORD *)(*(_QWORD *)a3 + 40));
      return 1;
    case 4:
      sub_1DF36BAAC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1DF36BB68(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      sub_1DF36B770(a1, a1 + 1, a1 + 2, *(_QWORD *)(*(_QWORD *)a3 + 32), *(_QWORD *)(*(_QWORD *)a3 + 40));
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      v15 = 12;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v17 = *v11;
    if (sub_1DF36BA10((int *)(v14 - v16), (int *)(v14 - v17)))
    {
      v18 = v15;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v17;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v17 = *(unsigned int *)((char *)a1 + v18 - 8);
        v20 = sub_1DF36BA10((int *)(v14 - v16), (int *)(v14 - v17));
        v18 = v19;
        if (!v20)
        {
          v21 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *v21 = v16;
      if (++v13 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v15 += 4;
    if (++v12 == a2)
      return 1;
  }
}

uint64_t sub_1DF36EF00(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  BOOL v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  uint64_t *v78;
  unsigned int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int *v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int *v104;
  uint64_t v105;
  unsigned int *v106;
  int64_t v107;
  unsigned int v108;
  unsigned int *v111;
  unsigned int *v112;
  unsigned int *v113;

  v6 = a3;
  v8 = (unsigned int *)result;
LABEL_2:
  v104 = a2 - 2;
  v106 = a2 - 1;
  v103 = a2 - 3;
  v9 = v8;
  v111 = a2;
  while (2)
  {
    v8 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v49 = *(a2 - 1);
        v50 = *(_QWORD *)(*(_QWORD *)v6 + 40) + *(_QWORD *)(*(_QWORD *)v6 + 32);
        v51 = *v9;
        result = sub_1DF36BA10((int *)(v50 - v49), (int *)(v50 - v51));
        if ((_DWORD)result)
        {
          *v9 = v49;
          *(a2 - 1) = v51;
        }
        return result;
      case 3:
        return sub_1DF36B770(v9, v9 + 1, v106, *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
      case 4:
        return sub_1DF36BAAC(v9, v9 + 1, v9 + 2, v106, v6);
      case 5:
        return sub_1DF36BB68(v9, v9 + 1, v9 + 2, v9 + 3, v106, v6);
      default:
        v113 = v9;
        if (v10 <= 95)
        {
          v52 = v9 + 1;
          v54 = v9 == a2 || v52 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = *(_QWORD *)(*(_QWORD *)v6 + 40) + *(_QWORD *)(*(_QWORD *)v6 + 32);
              v57 = v9;
              do
              {
                v59 = *v57;
                v58 = v57[1];
                v57 = v52;
                result = sub_1DF36BA10((int *)(v56 - v58), (int *)(v56 - v59));
                if ((_DWORD)result)
                {
                  v60 = v55;
                  while (1)
                  {
                    *(unsigned int *)((char *)v9 + v60 + 4) = v59;
                    if (!v60)
                      break;
                    v59 = *(unsigned int *)((char *)v9 + v60 - 4);
                    result = sub_1DF36BA10((int *)(v56 - v58), (int *)(v56 - v59));
                    v60 -= 4;
                    if ((result & 1) == 0)
                    {
                      v61 = (unsigned int *)((char *)v9 + v60 + 4);
                      goto LABEL_77;
                    }
                  }
                  v61 = v9;
LABEL_77:
                  *v61 = v58;
                }
                v52 = v57 + 1;
                v55 += 4;
              }
              while (v57 + 1 != a2);
            }
          }
          else if (!v54)
          {
            v99 = *(_QWORD *)(*(_QWORD *)v6 + 40) + *(_QWORD *)(*(_QWORD *)v6 + 32);
            do
            {
              v101 = *v8;
              v100 = v8[1];
              v8 = v52;
              result = sub_1DF36BA10((int *)(v99 - v100), (int *)(v99 - v101));
              if ((_DWORD)result)
              {
                v102 = v8;
                do
                {
                  *v102 = v101;
                  v101 = *(v102 - 2);
                  result = sub_1DF36BA10((int *)(v99 - v100), (int *)(v99 - v101));
                  --v102;
                }
                while ((result & 1) != 0);
                *v102 = v100;
              }
              v52 = v8 + 1;
            }
            while (v8 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v62 = (unint64_t)(v11 - 2) >> 1;
            v63 = v62;
            do
            {
              v64 = v63;
              if (v62 >= v63)
              {
                v65 = *(_QWORD *)a3;
                v107 = v64;
                v66 = (2 * v64) | 1;
                v67 = &v8[v66];
                v68 = 2 * v64 + 2;
                if (v68 >= v11)
                {
                  LODWORD(v72) = *v67;
                  v71 = *(_QWORD *)(v65 + 32);
                  v70 = *(_QWORD *)(v65 + 40);
                }
                else
                {
                  v69 = *v67;
                  v71 = *(_QWORD *)(v65 + 32);
                  v70 = *(_QWORD *)(v65 + 40);
                  v72 = v67[1];
                  if (sub_1DF36BA10((int *)(v70 + v71 - v69), (int *)(v70 + v71 - v72)))
                  {
                    ++v67;
                    v66 = v68;
                  }
                  else
                  {
                    LODWORD(v72) = v69;
                  }
                }
                v64 = v107;
                v73 = &v8[v107];
                v74 = v70 + v71;
                v105 = *v73;
                result = sub_1DF36BA10((int *)(v74 - v72), (int *)(v74 - v105));
                v62 = (unint64_t)(v11 - 2) >> 1;
                if ((result & 1) == 0)
                {
                  do
                  {
                    *v73 = v72;
                    v73 = v67;
                    if (v62 < v66)
                      break;
                    v75 = (2 * v66) | 1;
                    v67 = &v8[v75];
                    v66 = 2 * v66 + 2;
                    if (v66 >= v11)
                    {
                      LODWORD(v72) = *v67;
                      v66 = v75;
                    }
                    else
                    {
                      v72 = *v67;
                      v76 = v67[1];
                      v77 = sub_1DF36BA10((int *)(v74 - v72), (int *)(v74 - v76));
                      if (v77)
                        LODWORD(v72) = v76;
                      v62 = (unint64_t)(v11 - 2) >> 1;
                      if (v77)
                        ++v67;
                      v8 = v113;
                      if (!v77)
                        v66 = v75;
                    }
                    result = sub_1DF36BA10((int *)(v74 - v72), (int *)(v74 - v105));
                  }
                  while (!(_DWORD)result);
                  v64 = v107;
                  *v73 = v105;
                }
              }
              v63 = v64 - 1;
            }
            while (v64);
            v78 = (uint64_t *)a3;
            v79 = v111;
            do
            {
              v112 = v79;
              v80 = 0;
              v108 = *v8;
              v81 = *v78;
              v82 = v11 - 2;
              if (v11 < 2)
                v82 = v11 - 1;
              v83 = v82 >> 1;
              do
              {
                v84 = &v8[v80 + 1];
                v85 = (2 * v80) | 1;
                v86 = 2 * v80 + 2;
                if (v86 >= v11)
                {
                  v90 = *v84;
                  v80 = (2 * v80) | 1;
                }
                else
                {
                  v87 = *v84;
                  v88 = *(_QWORD *)(v81 + 40) + *(_QWORD *)(v81 + 32);
                  v89 = v84[1];
                  result = sub_1DF36BA10((int *)(v88 - v87), (int *)(v88 - v89));
                  if ((_DWORD)result)
                    v90 = v89;
                  else
                    v90 = v87;
                  if ((_DWORD)result)
                  {
                    ++v84;
                    v80 = v86;
                  }
                  else
                  {
                    v80 = v85;
                  }
                }
                *v8 = v90;
                v8 = v84;
              }
              while (v80 <= v83);
              v91 = v112 - 1;
              if (v84 == v112 - 1)
              {
                v79 = v112 - 1;
                *v84 = v108;
              }
              else
              {
                *v84 = *v91;
                v79 = v112 - 1;
                *v91 = v108;
                v92 = (char *)v84 - (char *)v113 + 4;
                if (v92 >= 5)
                {
                  v93 = (((unint64_t)v92 >> 2) - 2) >> 1;
                  v94 = &v113[v93];
                  v95 = *v94;
                  v96 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
                  v97 = *v84;
                  result = sub_1DF36BA10((int *)(v96 - v95), (int *)(v96 - v97));
                  if ((_DWORD)result)
                  {
                    do
                    {
                      *v84 = v95;
                      v84 = v94;
                      if (!v93)
                        break;
                      v93 = (v93 - 1) >> 1;
                      v94 = &v113[v93];
                      v95 = *v94;
                      result = sub_1DF36BA10((int *)(v96 - v95), (int *)(v96 - v97));
                    }
                    while ((result & 1) != 0);
                    *v84 = v97;
                  }
                }
              }
              v98 = v11-- <= 2;
              v78 = (uint64_t *)a3;
              v8 = v113;
            }
            while (!v98);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v9[(unint64_t)v11 >> 1];
        v14 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v15 = *(_QWORD *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v10 < 0x201)
        {
          sub_1DF36B770(&v8[(unint64_t)v11 >> 1], v8, v106, v14, v15);
        }
        else
        {
          sub_1DF36B770(v8, &v8[(unint64_t)v11 >> 1], v106, v14, v15);
          sub_1DF36B770(v8 + 1, v13 - 1, v104, *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
          sub_1DF36B770(v8 + 2, &v8[v12 + 1], v103, *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
          sub_1DF36B770(v13 - 1, &v8[(unint64_t)v11 >> 1], &v8[v12 + 1], *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
          v16 = *v8;
          *v8 = *v13;
          *v13 = v16;
        }
        --a4;
        v17 = *(_QWORD *)v6;
        v18 = *v8;
        if ((a5 & 1) == 0)
        {
          v21 = *(_QWORD *)(v17 + 32);
          v20 = *(_QWORD *)(v17 + 40);
          v22 = v20 + v21;
          v23 = (int *)(v20 + v21 - v18);
          if (sub_1DF36BA10((int *)(v20 + v21 - *(v8 - 1)), v23))
          {
            v19 = a4;
            goto LABEL_13;
          }
          result = sub_1DF36BA10((int *)(v20 + v21 - v18), (int *)(v22 - *v106));
          if ((result & 1) != 0)
          {
            v9 = v8;
            do
            {
              v40 = v9[1];
              ++v9;
              result = sub_1DF36BA10((int *)(v20 + v21 - v18), (int *)(v22 - v40));
            }
            while ((result & 1) == 0);
          }
          else
          {
            v41 = v8 + 1;
            do
            {
              v9 = v41;
              if (v41 >= v111)
                break;
              ++v41;
              result = sub_1DF36BA10(v23, (int *)(v22 - *v9));
            }
            while (!(_DWORD)result);
          }
          v42 = v111;
          if (v9 < v111)
          {
            v42 = v111;
            do
            {
              v43 = *--v42;
              result = sub_1DF36BA10(v23, (int *)(v22 - v43));
            }
            while ((result & 1) != 0);
          }
          if (v9 < v42)
          {
            v44 = *v9;
            v45 = *v42;
            do
            {
              *v9 = v45;
              *v42 = v44;
              do
              {
                v46 = v9[1];
                ++v9;
                v44 = v46;
              }
              while (!sub_1DF36BA10(v23, (int *)(v22 - v46)));
              do
              {
                v47 = *--v42;
                v45 = v47;
                result = sub_1DF36BA10(v23, (int *)(v22 - v47));
              }
              while ((result & 1) != 0);
            }
            while (v9 < v42);
          }
          v48 = v9 - 1;
          if (v9 - 1 != v8)
            *v8 = *v48;
          a5 = 0;
          *v48 = v18;
          v6 = a3;
          a2 = v111;
          continue;
        }
        v19 = a4;
        v21 = *(_QWORD *)(v17 + 32);
        v20 = *(_QWORD *)(v17 + 40);
LABEL_13:
        v24 = 0;
        v25 = v20 + v21;
        v26 = (int *)(v20 + v21 - v18);
        do
          v27 = v8[++v24];
        while (sub_1DF36BA10((int *)(v25 - v27), v26));
        v28 = &v8[v24];
        v29 = v111;
        if (v24 == 1)
        {
          v29 = v111;
          do
          {
            if (v28 >= v29)
              break;
            v31 = *--v29;
          }
          while (!sub_1DF36BA10((int *)(v25 - v31), v26));
        }
        else
        {
          do
            v30 = *--v29;
          while (!sub_1DF36BA10((int *)(v25 - v30), v26));
        }
        if (v28 >= v29)
        {
          v38 = v28 - 1;
        }
        else
        {
          v32 = *v29;
          v33 = v27;
          v34 = v28;
          v35 = v29;
          do
          {
            *v34 = v32;
            *v35 = v33;
            do
            {
              v36 = v34[1];
              ++v34;
              v33 = v36;
            }
            while (sub_1DF36BA10((int *)(v25 - v36), v26));
            do
            {
              v37 = *--v35;
              v32 = v37;
            }
            while (!sub_1DF36BA10((int *)(v25 - v37), v26));
          }
          while (v34 < v35);
          v38 = v34 - 1;
          v8 = v113;
        }
        a4 = v19;
        v6 = a3;
        if (v38 != v8)
          *v8 = *v38;
        *v38 = v18;
        a2 = v111;
        if (v28 < v29)
        {
LABEL_34:
          result = sub_1DF36EF00(v8, v38, a3, a4, a5 & 1);
          a5 = 0;
          v9 = v38 + 1;
          continue;
        }
        v39 = sub_1DF36F75C(v8, v38, a3);
        v9 = v38 + 1;
        result = sub_1DF36F75C(v38 + 1, v111, a3);
        if (!(_DWORD)result)
        {
          if (v39)
            continue;
          goto LABEL_34;
        }
        a2 = v38;
        if (!v39)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1DF36F75C(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  _DWORD *v21;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      v10 = *a1;
      if (sub_1DF36BA10((int *)(v9 - v8), (int *)(v9 - v10)))
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_1DF36B770(a1, a1 + 1, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 32), *(_QWORD *)(*(_QWORD *)a3 + 40));
      return 1;
    case 4:
      sub_1DF36BAAC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1DF36BB68(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      sub_1DF36B770(a1, a1 + 1, a1 + 2, *(_QWORD *)(*(_QWORD *)a3 + 32), *(_QWORD *)(*(_QWORD *)a3 + 40));
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      v15 = 12;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v17 = *v11;
    if (sub_1DF36BA10((int *)(v14 - v16), (int *)(v14 - v17)))
    {
      v18 = v15;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v17;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v17 = *(unsigned int *)((char *)a1 + v18 - 8);
        v20 = sub_1DF36BA10((int *)(v14 - v16), (int *)(v14 - v17));
        v18 = v19;
        if (!v20)
        {
          v21 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *v21 = v16;
      if (++v13 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v15 += 4;
    if (++v12 == a2)
      return 1;
  }
}

uint64_t sub_1DF36F920(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  BOOL v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  uint64_t *v78;
  unsigned int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int *v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int *v104;
  uint64_t v105;
  unsigned int *v106;
  int64_t v107;
  unsigned int v108;
  unsigned int *v111;
  unsigned int *v112;
  unsigned int *v113;

  v6 = a3;
  v8 = (unsigned int *)result;
LABEL_2:
  v104 = a2 - 2;
  v106 = a2 - 1;
  v103 = a2 - 3;
  v9 = v8;
  v111 = a2;
  while (2)
  {
    v8 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v49 = *(a2 - 1);
        v50 = *(_QWORD *)(*(_QWORD *)v6 + 40) + *(_QWORD *)(*(_QWORD *)v6 + 32);
        v51 = *v9;
        result = sub_1DF36BA10((int *)(v50 - v49), (int *)(v50 - v51));
        if ((_DWORD)result)
        {
          *v9 = v49;
          *(a2 - 1) = v51;
        }
        return result;
      case 3:
        return sub_1DF36B770(v9, v9 + 1, v106, *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
      case 4:
        return sub_1DF36BAAC(v9, v9 + 1, v9 + 2, v106, v6);
      case 5:
        return sub_1DF36BB68(v9, v9 + 1, v9 + 2, v9 + 3, v106, v6);
      default:
        v113 = v9;
        if (v10 <= 95)
        {
          v52 = v9 + 1;
          v54 = v9 == a2 || v52 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = *(_QWORD *)(*(_QWORD *)v6 + 40) + *(_QWORD *)(*(_QWORD *)v6 + 32);
              v57 = v9;
              do
              {
                v59 = *v57;
                v58 = v57[1];
                v57 = v52;
                result = sub_1DF36BA10((int *)(v56 - v58), (int *)(v56 - v59));
                if ((_DWORD)result)
                {
                  v60 = v55;
                  while (1)
                  {
                    *(unsigned int *)((char *)v9 + v60 + 4) = v59;
                    if (!v60)
                      break;
                    v59 = *(unsigned int *)((char *)v9 + v60 - 4);
                    result = sub_1DF36BA10((int *)(v56 - v58), (int *)(v56 - v59));
                    v60 -= 4;
                    if ((result & 1) == 0)
                    {
                      v61 = (unsigned int *)((char *)v9 + v60 + 4);
                      goto LABEL_77;
                    }
                  }
                  v61 = v9;
LABEL_77:
                  *v61 = v58;
                }
                v52 = v57 + 1;
                v55 += 4;
              }
              while (v57 + 1 != a2);
            }
          }
          else if (!v54)
          {
            v99 = *(_QWORD *)(*(_QWORD *)v6 + 40) + *(_QWORD *)(*(_QWORD *)v6 + 32);
            do
            {
              v101 = *v8;
              v100 = v8[1];
              v8 = v52;
              result = sub_1DF36BA10((int *)(v99 - v100), (int *)(v99 - v101));
              if ((_DWORD)result)
              {
                v102 = v8;
                do
                {
                  *v102 = v101;
                  v101 = *(v102 - 2);
                  result = sub_1DF36BA10((int *)(v99 - v100), (int *)(v99 - v101));
                  --v102;
                }
                while ((result & 1) != 0);
                *v102 = v100;
              }
              v52 = v8 + 1;
            }
            while (v8 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v62 = (unint64_t)(v11 - 2) >> 1;
            v63 = v62;
            do
            {
              v64 = v63;
              if (v62 >= v63)
              {
                v65 = *(_QWORD *)a3;
                v107 = v64;
                v66 = (2 * v64) | 1;
                v67 = &v8[v66];
                v68 = 2 * v64 + 2;
                if (v68 >= v11)
                {
                  LODWORD(v72) = *v67;
                  v71 = *(_QWORD *)(v65 + 32);
                  v70 = *(_QWORD *)(v65 + 40);
                }
                else
                {
                  v69 = *v67;
                  v71 = *(_QWORD *)(v65 + 32);
                  v70 = *(_QWORD *)(v65 + 40);
                  v72 = v67[1];
                  if (sub_1DF36BA10((int *)(v70 + v71 - v69), (int *)(v70 + v71 - v72)))
                  {
                    ++v67;
                    v66 = v68;
                  }
                  else
                  {
                    LODWORD(v72) = v69;
                  }
                }
                v64 = v107;
                v73 = &v8[v107];
                v74 = v70 + v71;
                v105 = *v73;
                result = sub_1DF36BA10((int *)(v74 - v72), (int *)(v74 - v105));
                v62 = (unint64_t)(v11 - 2) >> 1;
                if ((result & 1) == 0)
                {
                  do
                  {
                    *v73 = v72;
                    v73 = v67;
                    if (v62 < v66)
                      break;
                    v75 = (2 * v66) | 1;
                    v67 = &v8[v75];
                    v66 = 2 * v66 + 2;
                    if (v66 >= v11)
                    {
                      LODWORD(v72) = *v67;
                      v66 = v75;
                    }
                    else
                    {
                      v72 = *v67;
                      v76 = v67[1];
                      v77 = sub_1DF36BA10((int *)(v74 - v72), (int *)(v74 - v76));
                      if (v77)
                        LODWORD(v72) = v76;
                      v62 = (unint64_t)(v11 - 2) >> 1;
                      if (v77)
                        ++v67;
                      v8 = v113;
                      if (!v77)
                        v66 = v75;
                    }
                    result = sub_1DF36BA10((int *)(v74 - v72), (int *)(v74 - v105));
                  }
                  while (!(_DWORD)result);
                  v64 = v107;
                  *v73 = v105;
                }
              }
              v63 = v64 - 1;
            }
            while (v64);
            v78 = (uint64_t *)a3;
            v79 = v111;
            do
            {
              v112 = v79;
              v80 = 0;
              v108 = *v8;
              v81 = *v78;
              v82 = v11 - 2;
              if (v11 < 2)
                v82 = v11 - 1;
              v83 = v82 >> 1;
              do
              {
                v84 = &v8[v80 + 1];
                v85 = (2 * v80) | 1;
                v86 = 2 * v80 + 2;
                if (v86 >= v11)
                {
                  v90 = *v84;
                  v80 = (2 * v80) | 1;
                }
                else
                {
                  v87 = *v84;
                  v88 = *(_QWORD *)(v81 + 40) + *(_QWORD *)(v81 + 32);
                  v89 = v84[1];
                  result = sub_1DF36BA10((int *)(v88 - v87), (int *)(v88 - v89));
                  if ((_DWORD)result)
                    v90 = v89;
                  else
                    v90 = v87;
                  if ((_DWORD)result)
                  {
                    ++v84;
                    v80 = v86;
                  }
                  else
                  {
                    v80 = v85;
                  }
                }
                *v8 = v90;
                v8 = v84;
              }
              while (v80 <= v83);
              v91 = v112 - 1;
              if (v84 == v112 - 1)
              {
                v79 = v112 - 1;
                *v84 = v108;
              }
              else
              {
                *v84 = *v91;
                v79 = v112 - 1;
                *v91 = v108;
                v92 = (char *)v84 - (char *)v113 + 4;
                if (v92 >= 5)
                {
                  v93 = (((unint64_t)v92 >> 2) - 2) >> 1;
                  v94 = &v113[v93];
                  v95 = *v94;
                  v96 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
                  v97 = *v84;
                  result = sub_1DF36BA10((int *)(v96 - v95), (int *)(v96 - v97));
                  if ((_DWORD)result)
                  {
                    do
                    {
                      *v84 = v95;
                      v84 = v94;
                      if (!v93)
                        break;
                      v93 = (v93 - 1) >> 1;
                      v94 = &v113[v93];
                      v95 = *v94;
                      result = sub_1DF36BA10((int *)(v96 - v95), (int *)(v96 - v97));
                    }
                    while ((result & 1) != 0);
                    *v84 = v97;
                  }
                }
              }
              v98 = v11-- <= 2;
              v78 = (uint64_t *)a3;
              v8 = v113;
            }
            while (!v98);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v9[(unint64_t)v11 >> 1];
        v14 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v15 = *(_QWORD *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v10 < 0x201)
        {
          sub_1DF36B770(&v8[(unint64_t)v11 >> 1], v8, v106, v14, v15);
        }
        else
        {
          sub_1DF36B770(v8, &v8[(unint64_t)v11 >> 1], v106, v14, v15);
          sub_1DF36B770(v8 + 1, v13 - 1, v104, *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
          sub_1DF36B770(v8 + 2, &v8[v12 + 1], v103, *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
          sub_1DF36B770(v13 - 1, &v8[(unint64_t)v11 >> 1], &v8[v12 + 1], *(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(*(_QWORD *)v6 + 40));
          v16 = *v8;
          *v8 = *v13;
          *v13 = v16;
        }
        --a4;
        v17 = *(_QWORD *)v6;
        v18 = *v8;
        if ((a5 & 1) == 0)
        {
          v21 = *(_QWORD *)(v17 + 32);
          v20 = *(_QWORD *)(v17 + 40);
          v22 = v20 + v21;
          v23 = (int *)(v20 + v21 - v18);
          if (sub_1DF36BA10((int *)(v20 + v21 - *(v8 - 1)), v23))
          {
            v19 = a4;
            goto LABEL_13;
          }
          result = sub_1DF36BA10((int *)(v20 + v21 - v18), (int *)(v22 - *v106));
          if ((result & 1) != 0)
          {
            v9 = v8;
            do
            {
              v40 = v9[1];
              ++v9;
              result = sub_1DF36BA10((int *)(v20 + v21 - v18), (int *)(v22 - v40));
            }
            while ((result & 1) == 0);
          }
          else
          {
            v41 = v8 + 1;
            do
            {
              v9 = v41;
              if (v41 >= v111)
                break;
              ++v41;
              result = sub_1DF36BA10(v23, (int *)(v22 - *v9));
            }
            while (!(_DWORD)result);
          }
          v42 = v111;
          if (v9 < v111)
          {
            v42 = v111;
            do
            {
              v43 = *--v42;
              result = sub_1DF36BA10(v23, (int *)(v22 - v43));
            }
            while ((result & 1) != 0);
          }
          if (v9 < v42)
          {
            v44 = *v9;
            v45 = *v42;
            do
            {
              *v9 = v45;
              *v42 = v44;
              do
              {
                v46 = v9[1];
                ++v9;
                v44 = v46;
              }
              while (!sub_1DF36BA10(v23, (int *)(v22 - v46)));
              do
              {
                v47 = *--v42;
                v45 = v47;
                result = sub_1DF36BA10(v23, (int *)(v22 - v47));
              }
              while ((result & 1) != 0);
            }
            while (v9 < v42);
          }
          v48 = v9 - 1;
          if (v9 - 1 != v8)
            *v8 = *v48;
          a5 = 0;
          *v48 = v18;
          v6 = a3;
          a2 = v111;
          continue;
        }
        v19 = a4;
        v21 = *(_QWORD *)(v17 + 32);
        v20 = *(_QWORD *)(v17 + 40);
LABEL_13:
        v24 = 0;
        v25 = v20 + v21;
        v26 = (int *)(v20 + v21 - v18);
        do
          v27 = v8[++v24];
        while (sub_1DF36BA10((int *)(v25 - v27), v26));
        v28 = &v8[v24];
        v29 = v111;
        if (v24 == 1)
        {
          v29 = v111;
          do
          {
            if (v28 >= v29)
              break;
            v31 = *--v29;
          }
          while (!sub_1DF36BA10((int *)(v25 - v31), v26));
        }
        else
        {
          do
            v30 = *--v29;
          while (!sub_1DF36BA10((int *)(v25 - v30), v26));
        }
        if (v28 >= v29)
        {
          v38 = v28 - 1;
        }
        else
        {
          v32 = *v29;
          v33 = v27;
          v34 = v28;
          v35 = v29;
          do
          {
            *v34 = v32;
            *v35 = v33;
            do
            {
              v36 = v34[1];
              ++v34;
              v33 = v36;
            }
            while (sub_1DF36BA10((int *)(v25 - v36), v26));
            do
            {
              v37 = *--v35;
              v32 = v37;
            }
            while (!sub_1DF36BA10((int *)(v25 - v37), v26));
          }
          while (v34 < v35);
          v38 = v34 - 1;
          v8 = v113;
        }
        a4 = v19;
        v6 = a3;
        if (v38 != v8)
          *v8 = *v38;
        *v38 = v18;
        a2 = v111;
        if (v28 < v29)
        {
LABEL_34:
          result = sub_1DF36F920(v8, v38, a3, a4, a5 & 1);
          a5 = 0;
          v9 = v38 + 1;
          continue;
        }
        v39 = sub_1DF37017C(v8, v38, a3);
        v9 = v38 + 1;
        result = sub_1DF37017C(v38 + 1, v111, a3);
        if (!(_DWORD)result)
        {
          if (v39)
            continue;
          goto LABEL_34;
        }
        a2 = v38;
        if (!v39)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1DF37017C(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  _DWORD *v21;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      v10 = *a1;
      if (sub_1DF36BA10((int *)(v9 - v8), (int *)(v9 - v10)))
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_1DF36B770(a1, a1 + 1, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 32), *(_QWORD *)(*(_QWORD *)a3 + 40));
      return 1;
    case 4:
      sub_1DF36BAAC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1DF36BB68(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      sub_1DF36B770(a1, a1 + 1, a1 + 2, *(_QWORD *)(*(_QWORD *)a3 + 32), *(_QWORD *)(*(_QWORD *)a3 + 40));
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = *(_QWORD *)(*(_QWORD *)a3 + 40) + *(_QWORD *)(*(_QWORD *)a3 + 32);
      v15 = 12;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v17 = *v11;
    if (sub_1DF36BA10((int *)(v14 - v16), (int *)(v14 - v17)))
    {
      v18 = v15;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v17;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v17 = *(unsigned int *)((char *)a1 + v18 - 8);
        v20 = sub_1DF36BA10((int *)(v14 - v16), (int *)(v14 - v17));
        v18 = v19;
        if (!v20)
        {
          v21 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *v21 = v16;
      if (++v13 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v15 += 4;
    if (++v12 == a2)
      return 1;
  }
}

uint64_t sub_1DF370340(uint64_t result, int a2, _DWORD *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v7 = result;
  v9 = *(_QWORD *)(result + 40);
  v8 = *(_QWORD *)(result + 48);
  *(_QWORD *)(result + 56) = v9;
  v10 = -4;
  v11 = -8;
  if (!a4)
    v11 = -4;
  if (!a3)
    v10 = 0;
  v12 = (v11 + v10 - (*(_DWORD *)(result + 32) + v9 - v8)) & (*(_QWORD *)(result + 72) - 1);
  if (v8 - v9 < v12)
  {
    result = sub_1DF366C90((uint64_t *)result, v12);
    *(_QWORD *)(v7 + 48) -= v12;
  }
  else
  {
    *(_QWORD *)(result + 48) = v8 - v12;
    if (!v12)
      goto LABEL_7;
  }
  v24 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v24++) = 0;
  while (v12 != v24);
LABEL_7:
  if (a3)
  {
    v25 = *(_QWORD *)(v7 + 48);
    if ((unint64_t)(v25 - *(_QWORD *)(v7 + 56)) <= 3)
    {
      result = sub_1DF366C90((uint64_t *)v7, 4uLL);
      v25 = *(_QWORD *)(v7 + 48);
    }
    *(_QWORD *)(v7 + 48) = v25 - 4;
    *(_DWORD *)(v25 - 4) = *a3;
  }
  if (*(_QWORD *)(v7 + 72) <= 3uLL)
    *(_QWORD *)(v7 + 72) = 4;
  v13 = *(_QWORD *)(v7 + 32);
  v14 = *(_QWORD *)(v7 + 40);
  v15 = *(_QWORD *)(v7 + 48);
  v16 = ((int)v15 - ((int)v13 + (int)v14)) & 3;
  if (v15 - *(_QWORD *)(v7 + 56) < v16)
  {
    result = sub_1DF366C90((uint64_t *)v7, ((int)v15 - ((int)v13 + (int)v14)) & 3);
    *(_QWORD *)(v7 + 48) -= v16;
  }
  else
  {
    v17 = v15 - v16;
    *(_QWORD *)(v7 + 48) = v17;
    if (!v16)
    {
      v18 = v13 + v14 - v17;
      goto LABEL_13;
    }
  }
  v26 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v26++) = 0;
  while (v16 != v26);
  v14 = *(_QWORD *)(v7 + 40);
  v17 = *(_QWORD *)(v7 + 48);
  v13 = *(_QWORD *)(v7 + 32);
  v18 = v13 - v17 + v14;
  if (*(_QWORD *)(v7 + 72) <= 3uLL)
    *(_QWORD *)(v7 + 72) = 4;
LABEL_13:
  v19 = v18 - a2 + 4;
  v20 = ((_BYTE)v17 - ((_BYTE)v13 + (_BYTE)v14)) & 3;
  v21 = *(_QWORD *)(v7 + 56);
  if (v17 - v21 < v20)
  {
    result = sub_1DF366C90((uint64_t *)v7, v20);
    *(_QWORD *)(v7 + 48) -= v20;
  }
  else
  {
    v22 = v17 - v20;
    *(_QWORD *)(v7 + 48) = v17 - v20;
    if (!v20)
      goto LABEL_15;
  }
  v27 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v27++) = 0;
  while (v20 != v27);
  v22 = *(_QWORD *)(v7 + 48);
  v21 = *(_QWORD *)(v7 + 56);
LABEL_15:
  if ((unint64_t)(v22 - v21) <= 3)
  {
    result = sub_1DF366C90((uint64_t *)v7, 4uLL);
    v22 = *(_QWORD *)(v7 + 48);
  }
  *(_DWORD *)(v22 - 4) = v19;
  v23 = v22 - 4;
  *(_QWORD *)(v7 + 48) = v23;
  if (a4)
    result = sub_1DF353194(v7, *(_DWORD *)(v7 + 40) - (int)v23 + *(_DWORD *)(v7 + 32));
  *(_BYTE *)(v7 + 71) = 1;
  return result;
}

void sub_1DF370598(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1DF370610(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v6 = result;
    v7 = 3 * a4;
    result = operator new(24 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        result = sub_1DF36DA38(v8, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)v8 = *(_OWORD *)a2;
        v8[2] = *(_QWORD *)(a2 + 16);
      }
      a2 += 24;
      v8 += 3;
    }
    v6[1] = v8;
  }
  return result;
}

_QWORD *sub_1DF3706BC(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 61)
      sub_1DF3667C0();
    v10 = (char *)operator new(8 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[8 * v4];
  *(_QWORD *)v11 = a2;
  v12 = v11 + 8;
  if (v2 != v3)
  {
    do
    {
      v13 = *((_QWORD *)v2 - 1);
      v2 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[8 * v9];
  if (v2)
    operator delete(v2);
  return v12;
}

uint64_t sub_1DF370790(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1DF3707F0(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = result;
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *v7 = result;
    v7 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v7 = v10;
    v7 = (_QWORD *)((char *)v7 + 1);
  }
  *(_BYTE *)v7 = 0;
  return result;
}

uint64_t sub_1DF370890(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  BOOL v6;
  const void *v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  size_t v13;
  int v14;
  _BOOL4 v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = *(_BYTE *)(a2 + 23);
  v6 = v5 < 0;
  v7 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
  v8 = v5 & 0x7F;
  v9 = v6 ? *(_QWORD *)(a2 + 8) : v8;
  v10 = a1 + 8;
  do
  {
    if (*(char *)(v3 + 55) < 0)
    {
      v11 = *(const void **)(v3 + 32);
      v12 = *(_QWORD *)(v3 + 40);
    }
    else
    {
      v11 = (const void *)(v3 + 32);
      v12 = *(unsigned __int8 *)(v3 + 55);
    }
    if (v9 >= v12)
      v13 = v12;
    else
      v13 = v9;
    v14 = memcmp(v11, v7, v13);
    v15 = v12 < v9;
    if (v14)
      v15 = v14 < 0;
    v16 = !v15;
    if (v15)
      v17 = (uint64_t *)(v3 + 8);
    else
      v17 = (uint64_t *)v3;
    if (v16)
      v10 = v3;
    v3 = *v17;
  }
  while (*v17);
  if (v10 == v2)
    return v2;
  v18 = *(_QWORD *)(v10 + 32);
  v19 = *(_BYTE *)(v10 + 55);
  v20 = v19;
  if (v19 >= 0)
    v18 = v10 + 32;
  v21 = *(_QWORD *)(v10 + 40);
  v22 = v19 & 0x7F;
  if (v20 >= 0)
    v21 = v22;
  v24[0] = v18;
  v24[1] = v21;
  if ((sub_1DF36712C((const void **)a2, (uint64_t)v24) & 0x80000000) != 0)
    return v2;
  return v10;
}

uint64_t sub_1DF37099C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  size_t v11;
  int v12;
  _BOOL4 v13;
  BOOL v14;
  uint64_t *v15;
  char v16;
  const void *v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _BOOL4 v21;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = (v4 & 0x80u) == 0 ? (const void *)a2 : *(const void **)a2;
  v7 = (v4 & 0x80u) == 0 ? v4 & 0x7F : *(_QWORD *)(a2 + 8);
  v8 = a1 + 8;
  do
  {
    if (*(char *)(v3 + 55) < 0)
    {
      v9 = *(const void **)(v3 + 32);
      v10 = *(_QWORD *)(v3 + 40);
    }
    else
    {
      v9 = (const void *)(v3 + 32);
      v10 = *(unsigned __int8 *)(v3 + 55);
    }
    if (v7 >= v10)
      v11 = v10;
    else
      v11 = v7;
    v12 = memcmp(v9, v6, v11);
    v13 = v10 < v7;
    if (v12)
      v13 = v12 < 0;
    v14 = !v13;
    if (v13)
      v15 = (uint64_t *)(v3 + 8);
    else
      v15 = (uint64_t *)v3;
    if (v14)
      v8 = v3;
    v3 = *v15;
  }
  while (*v15);
  if (v8 == v2)
    return v2;
  v16 = *(_BYTE *)(v8 + 55);
  if (v16 >= 0)
    v17 = (const void *)(v8 + 32);
  else
    v17 = *(const void **)(v8 + 32);
  if (v16 >= 0)
    v18 = v16 & 0x7F;
  else
    v18 = *(_QWORD *)(v8 + 40);
  if ((v4 & 0x80u) != 0)
    v4 = v5;
  v19 = v18 >= v4 ? v4 : v18;
  v20 = memcmp(v6, v17, v19);
  v21 = v4 < v18;
  if (v20)
    v21 = v20 < 0;
  if (v21)
    return v2;
  return v8;
}

uint64_t sub_1DF370AC0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t *sub_1DF370B40(uint64_t a1, const void **a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *result;
  uint64_t *v5;
  const void **v6;
  const void *v7;
  char v8;
  BOOL v9;
  const void *v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  const void *v14;
  char v15;
  int v16;
  const void *v17;
  const void *v18;
  int v19;
  uint64_t *v20;
  uint64_t *v22;
  const void *v23;
  const void *v24;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v20 = (uint64_t *)(a1 + 8);
  v22 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = (uint64_t *)v3;
    v6 = (const void **)(v3 + 32);
    v7 = a2;
    v8 = *((_BYTE *)a2 + 23);
    v9 = v8 < 0;
    if (v8 < 0)
      v7 = *a2;
    v10 = (const void *)(v8 & 0x7F);
    if (v9)
      v10 = a2[1];
    v23 = v7;
    v24 = v10;
    v11 = sub_1DF36712C(v6, (uint64_t)&v23);
    if (v11 >= 0)
      v12 = v5;
    else
      v12 = v5 + 1;
    v13 = v22;
    if (v11 >= 0)
      v13 = v5;
    v22 = v13;
    v3 = *v12;
  }
  while (v3);
  v2 = v20;
  if (v22 == v20)
    return v2;
  v14 = (const void *)v22[4];
  v15 = *((_BYTE *)v22 + 55);
  v16 = v15;
  if (v15 >= 0)
    v14 = v22 + 4;
  v17 = (const void *)v22[5];
  v18 = (const void *)(v15 & 0x7F);
  if (v16 >= 0)
    v17 = v18;
  v23 = v14;
  v24 = v17;
  v19 = sub_1DF36712C(a2, (uint64_t)&v23);
  result = v22;
  v2 = v20;
  if (v19 < 0)
    return v2;
  return result;
}

void sub_1DF370C24(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  std::string *v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  std::string *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;

  v6 = __str;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) >= a4)
  {
    v17 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)v9) >> 3) >= a4)
    {
      if (__str == a3)
      {
        v23 = *(std::string **)a1;
      }
      else
      {
        v23 = *(std::string **)a1;
        do
        {
          std::string::operator=(v9++, v6++);
          ++v23;
        }
        while (v6 != a3);
        v17 = *(std::string **)(a1 + 8);
      }
      while (v17 != v23)
      {
        if (SHIBYTE(v17[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17[-1].__r_.__value_.__l.__data_);
        --v17;
      }
      *(_QWORD *)(a1 + 8) = v23;
    }
    else
    {
      v18 = (std::string *)((char *)__str + 8 * (((char *)v17 - (char *)v9) >> 3));
      if (v17 != v9)
      {
        v19 = 8 * (((char *)v17 - (char *)v9) >> 3);
        do
        {
          std::string::operator=(v9++, v6++);
          v19 -= 24;
        }
        while (v19);
        v9 = *(std::string **)(a1 + 8);
      }
      v20 = v9;
      if (v18 != a3)
      {
        v20 = v9;
        v21 = v9;
        do
        {
          if (SHIBYTE(v18->__r_.__value_.__r.__words[2]) < 0)
          {
            sub_1DF36DA38(v21, v18->__r_.__value_.__l.__data_, v18->__r_.__value_.__l.__size_);
          }
          else
          {
            v22 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
            v21->__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
          }
          ++v18;
          ++v21;
          ++v20;
        }
        while (v18 != a3);
      }
      *(_QWORD *)(a1 + 8) = v20;
    }
  }
  else
  {
    if (v9)
    {
      v10 = *(std::string **)(a1 + 8);
      v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (SHIBYTE(v10[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v10[-1].__r_.__value_.__l.__data_);
          --v10;
        }
        while (v10 != v9);
        v11 = *(std::string **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_45;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v13 = 2 * v12;
    if (2 * v12 <= a4)
      v13 = a4;
    v14 = v12 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v13;
    if (v14 > 0xAAAAAAAAAAAAAAALL)
LABEL_45:
      abort();
    v15 = 3 * v14;
    v16 = operator new(24 * v14);
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = &v16[v15];
    while (v6 != a3)
    {
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_1DF36DA38(v16, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)v16 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v16[2] = *((_QWORD *)&v6->__r_.__value_.__l + 2);
      }
      ++v6;
      v16 += 3;
    }
    *(_QWORD *)(a1 + 8) = v16;
  }
}

_BYTE *sub_1DF370E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  result = v6 + 32;
  if (*(char *)(a3 + 23) < 0)
  {
    result = sub_1DF36DA38(result, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t sub_1DF370EEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 72;
      *(_QWORD *)(a1 + 16) = v2 - 72;
      if (*(char *)(v2 - 17) < 0)
      {
        operator delete(*(void **)(v2 - 40));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_1DF370F4C(__int16 *a1, __int16 *a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  _BOOL8 result;
  int v7;
  int v8;
  BOOL v10;
  unsigned int *v11;
  unsigned int *v12;
  const void *v13;
  unsigned int v14;
  unsigned int v15;
  const void *v16;
  unsigned int v17;
  unsigned int v18;
  size_t v19;
  int v20;
  __int16 v21;
  float v22;

  switch(a3)
  {
    case -4:
      v21 = *a2;
      v22 = sub_1DF3833E0(*a1);
      v10 = v22 < sub_1DF3833E0(v21);
      goto LABEL_21;
    case -3:
    case 10:
      v5 = *(_QWORD *)a1 >= *(_QWORD *)a2;
      return !v5;
    case -2:
    case 8:
      v3 = *(_DWORD *)a1;
      v4 = *(_DWORD *)a2;
      goto LABEL_6;
    case -1:
    case 6:
      v3 = (unsigned __int16)*a1;
      v4 = (unsigned __int16)*a2;
      goto LABEL_6;
    case 0:
    case 1:
    case 2:
    case 4:
      v3 = *(unsigned __int8 *)a1;
      v4 = *(unsigned __int8 *)a2;
LABEL_6:
      v5 = v3 >= v4;
      return !v5;
    case 3:
      v7 = *(char *)a1;
      v8 = *(char *)a2;
      return v7 < v8;
    case 5:
      v7 = *a1;
      v8 = *a2;
      return v7 < v8;
    case 7:
      v7 = *(_DWORD *)a1;
      v8 = *(_DWORD *)a2;
      return v7 < v8;
    case 9:
      return *(_QWORD *)a1 < *(_QWORD *)a2;
    case 11:
      v10 = *(float *)a1 < *(float *)a2;
      goto LABEL_21;
    case 12:
      v10 = *(double *)a1 < *(double *)a2;
LABEL_21:
      result = v10;
      break;
    case 13:
      v11 = (unsigned int *)((char *)a1 + *(unsigned int *)a1);
      v12 = (unsigned int *)((char *)a2 + *(unsigned int *)a2);
      v15 = *v11;
      v13 = v11 + 1;
      v14 = v15;
      v18 = *v12;
      v16 = v12 + 1;
      v17 = v18;
      if (v18 >= v14)
        v19 = v14;
      else
        v19 = v17;
      v20 = memcmp(v13, v16, v19);
      if (v20)
        result = v20 < 0;
      else
        result = v14 < v17;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t **sub_1DF37108C(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  size_t v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  size_t v21;
  int v22;
  _BOOL4 v23;
  _QWORD *v24;
  _BYTE *v25;
  uint64_t *v26;
  uint64_t *v27;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v5;
        v13 = (const void *)v5[4];
        v11 = v5 + 4;
        v12 = v13;
        v14 = *((unsigned __int8 *)v11 + 23);
        if ((v14 & 0x80u) == 0)
          v15 = v11;
        else
          v15 = v12;
        v16 = v11[1];
        if ((v14 & 0x80u) == 0)
          v17 = v14 & 0x7F;
        else
          v17 = v11[1];
        if (v17 >= v8)
          v18 = v8;
        else
          v18 = v17;
        v19 = memcmp(v9, v15, v18);
        v20 = v8 < v17;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_33;
      }
      if ((v14 & 0x80u) != 0)
        v14 = v16;
      if (v8 >= v14)
        v21 = v14;
      else
        v21 = v8;
      v22 = memcmp(v15, v9, v21);
      v23 = v14 < v8;
      if (v22)
        v23 = v22 < 0;
      if (!v23)
        return v10;
      v5 = v10[1];
      if (!v5)
      {
        v6 = v10 + 1;
        goto LABEL_33;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_33:
    v24 = operator new(0x40uLL);
    v25 = v24 + 4;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_1DF36DA38(v25, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)v25 = *(_OWORD *)a3;
      v24[6] = *(_QWORD *)(a3 + 16);
    }
    v24[7] = 0;
    *v24 = 0;
    v24[1] = 0;
    v24[2] = v10;
    *v6 = v24;
    v26 = (uint64_t *)**a1;
    v27 = v24;
    if (v26)
    {
      *a1 = v26;
      v27 = *v6;
    }
    sub_1DF36718C(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v24;
}

uint64_t *sub_1DF371224(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (*(_QWORD *)(v37 + 136) < *(_QWORD *)(*v8 + 136))
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1DF37190C(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1DF371B7C(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v39 = v8 + 1;
        v40 = v8 + 2;
        v41 = v8 + 3;
        result = sub_1DF371B7C(v8, v8 + 1, v8 + 2, v8 + 3);
        v42 = *(a2 - 1);
        v43 = v8[3];
        if (*(_QWORD *)(v42 + 136) < *(_QWORD *)(v43 + 136))
        {
          *v41 = v42;
          *(a2 - 1) = v43;
          v44 = *v41;
          v45 = *v40;
          v46 = *(_QWORD *)(*v41 + 136);
          if (v46 < *(_QWORD *)(*v40 + 136))
          {
            *v40 = v44;
            *v41 = v45;
            v47 = *v39;
            if (v46 < *(_QWORD *)(*v39 + 136))
            {
              v8[1] = v44;
              v8[2] = v47;
              v48 = *v8;
              if (v46 < *(_QWORD *)(*v8 + 136))
              {
                *v8 = v44;
                v8[1] = v48;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v49 = v8 + 1;
          v51 = v8 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 8;
              v53 = v8;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = v49;
                v56 = *(_QWORD *)(v54 + 136);
                if (v56 < *(_QWORD *)(v55 + 136))
                {
                  v57 = v52;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v57) = v55;
                    v58 = v57 - 8;
                    if (v57 == 8)
                      break;
                    v55 = *(uint64_t *)((char *)v8 + v57 - 16);
                    v57 -= 8;
                    if (v56 >= *(_QWORD *)(v55 + 136))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v54;
                }
                v49 = v53 + 1;
                v52 += 8;
              }
              while (v53 + 1 != a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v89 = *v7;
              v88 = v7[1];
              v7 = v49;
              v90 = *(_QWORD *)(v88 + 136);
              if (v90 < *(_QWORD *)(v89 + 136))
              {
                do
                {
                  *v49 = v89;
                  v89 = *(v49 - 2);
                  --v49;
                }
                while (v90 < *(_QWORD *)(v89 + 136));
                *v49 = v88;
              }
              v49 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (unint64_t)(v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 < v10 && *(_QWORD *)(v65 + 136) < *(_QWORD *)(v64[1] + 136))
                {
                  v65 = v64[1];
                  ++v64;
                  v63 = 2 * v62 + 2;
                }
                result = &v8[v62];
                v66 = *result;
                v67 = *(_QWORD *)(*result + 136);
                if (*(_QWORD *)(v65 + 136) >= v67)
                {
                  do
                  {
                    v68 = v64;
                    *result = v65;
                    if (v60 < v63)
                      break;
                    v69 = (2 * v63) | 1;
                    v64 = &v8[v69];
                    v70 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v70 < v10 && *(_QWORD *)(v65 + 136) < *(_QWORD *)(v64[1] + 136))
                    {
                      v65 = v64[1];
                      ++v64;
                      v69 = v70;
                    }
                    result = v68;
                    v63 = v69;
                  }
                  while (*(_QWORD *)(v65 + 136) >= v67);
                  *v68 = v66;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            do
            {
              v71 = 0;
              v72 = *v8;
              v73 = v8;
              do
              {
                v74 = &v73[v71];
                v77 = v74[1];
                v75 = v74 + 1;
                v76 = v77;
                v78 = (2 * v71) | 1;
                v79 = 2 * v71 + 2;
                if (v79 < v10)
                {
                  result = *(uint64_t **)(v76 + 136);
                  if ((unint64_t)result < *(_QWORD *)(v75[1] + 136))
                  {
                    v76 = v75[1];
                    ++v75;
                    v78 = v79;
                  }
                }
                *v73 = v76;
                v73 = v75;
                v71 = v78;
              }
              while (v78 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v75 == --a2)
              {
                *v75 = v72;
              }
              else
              {
                *v75 = *a2;
                *a2 = v72;
                v80 = (char *)v75 - (char *)v8 + 8;
                if (v80 >= 9)
                {
                  v81 = (((unint64_t)v80 >> 3) - 2) >> 1;
                  v82 = &v8[v81];
                  v83 = *v82;
                  v84 = *v75;
                  v85 = *(_QWORD *)(*v75 + 136);
                  if (*(_QWORD *)(*v82 + 136) < v85)
                  {
                    do
                    {
                      v86 = v82;
                      *v75 = v83;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = &v8[v81];
                      v83 = *v82;
                      v75 = v86;
                    }
                    while (*(_QWORD *)(*v82 + 136) < v85);
                    *v86 = v84;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1DF37190C(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1DF37190C(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1DF37190C(v7 + 1, v12 - 1, a2 - 2);
          sub_1DF37190C(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1DF37190C(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_QWORD *)(v14 + 136);
          if (*(_QWORD *)(*(v7 - 1) + 136) < v15)
            goto LABEL_12;
          if (v15 >= *(_QWORD *)(*(a2 - 1) + 136))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v15 >= *(_QWORD *)(*v8 + 136));
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v15 >= *(_QWORD *)(v28 + 136));
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v15 < *(_QWORD *)(v31 + 136));
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v15 >= *(_QWORD *)(v34 + 136));
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v15 < *(_QWORD *)(v35 + 136));
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = *(_QWORD *)(v14 + 136);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_QWORD *)(v17 + 136) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_QWORD *)(v21 + 136) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_QWORD *)(v20 + 136) >= v15);
        }
        if (v18 >= v19)
        {
          v8 = &v7[v16];
        }
        else
        {
          v22 = *v19;
          v8 = &v7[v16];
          v23 = v19;
          do
          {
            *v8 = v22;
            *v23 = v17;
            do
            {
              v24 = v8[1];
              ++v8;
              v17 = v24;
            }
            while (*(_QWORD *)(v24 + 136) < v15);
            do
            {
              v25 = *--v23;
              v22 = v25;
            }
            while (*(_QWORD *)(v25 + 136) >= v15);
          }
          while (v8 < v23);
        }
        v26 = v8 - 1;
        if (v8 - 1 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = (uint64_t *)sub_1DF371224(v7, v8 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = sub_1DF371994(v7, v8 - 1);
        result = (uint64_t *)sub_1DF371994(v8, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 1;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1DF37190C(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_QWORD *)(*a2 + 136);
  v6 = *(_QWORD *)(*result + 136);
  v7 = *a3;
  v8 = *(_QWORD *)(*a3 + 136);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_QWORD *)(*a2 + 136) < *(_QWORD *)(*result + 136))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_QWORD *)(*a3 + 136) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1DF371994(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_QWORD *)(v6 + 136) < *(_QWORD *)(*a1 + 136))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1DF37190C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1DF371B7C(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      sub_1DF371B7C(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_QWORD *)(v21 + 136) < *(_QWORD *)(v22 + 136))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_QWORD *)(*v20 + 136);
        if (v25 < *(_QWORD *)(*v19 + 136))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(_QWORD *)(*v18 + 136))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(_QWORD *)(*a1 + 136))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1DF37190C(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_QWORD *)(*v9 + 136);
    if (v14 < *(_QWORD *)(*v8 + 136))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_QWORD *)(v13 + 136))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *sub_1DF371B7C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1DF37190C(a1, a2, a3);
  v9 = *a3;
  if (*(_QWORD *)(*a4 + 136) < *(_QWORD *)(*a3 + 136))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_QWORD *)(*a3 + 136) < *(_QWORD *)(*a2 + 136))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_QWORD *)(*a2 + 136) < *(_QWORD *)(*a1 + 136))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t *sub_1DF371C10(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (*(_QWORD *)(v37 + 136) < *(_QWORD *)(*v8 + 136))
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1DF3722F8(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1DF372568(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v39 = v8 + 1;
        v40 = v8 + 2;
        v41 = v8 + 3;
        result = sub_1DF372568(v8, v8 + 1, v8 + 2, v8 + 3);
        v42 = *(a2 - 1);
        v43 = v8[3];
        if (*(_QWORD *)(v42 + 136) < *(_QWORD *)(v43 + 136))
        {
          *v41 = v42;
          *(a2 - 1) = v43;
          v44 = *v41;
          v45 = *v40;
          v46 = *(_QWORD *)(*v41 + 136);
          if (v46 < *(_QWORD *)(*v40 + 136))
          {
            *v40 = v44;
            *v41 = v45;
            v47 = *v39;
            if (v46 < *(_QWORD *)(*v39 + 136))
            {
              v8[1] = v44;
              v8[2] = v47;
              v48 = *v8;
              if (v46 < *(_QWORD *)(*v8 + 136))
              {
                *v8 = v44;
                v8[1] = v48;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v49 = v8 + 1;
          v51 = v8 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 8;
              v53 = v8;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = v49;
                v56 = *(_QWORD *)(v54 + 136);
                if (v56 < *(_QWORD *)(v55 + 136))
                {
                  v57 = v52;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v57) = v55;
                    v58 = v57 - 8;
                    if (v57 == 8)
                      break;
                    v55 = *(uint64_t *)((char *)v8 + v57 - 16);
                    v57 -= 8;
                    if (v56 >= *(_QWORD *)(v55 + 136))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v54;
                }
                v49 = v53 + 1;
                v52 += 8;
              }
              while (v53 + 1 != a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v89 = *v7;
              v88 = v7[1];
              v7 = v49;
              v90 = *(_QWORD *)(v88 + 136);
              if (v90 < *(_QWORD *)(v89 + 136))
              {
                do
                {
                  *v49 = v89;
                  v89 = *(v49 - 2);
                  --v49;
                }
                while (v90 < *(_QWORD *)(v89 + 136));
                *v49 = v88;
              }
              v49 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (unint64_t)(v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 < v10 && *(_QWORD *)(v65 + 136) < *(_QWORD *)(v64[1] + 136))
                {
                  v65 = v64[1];
                  ++v64;
                  v63 = 2 * v62 + 2;
                }
                result = &v8[v62];
                v66 = *result;
                v67 = *(_QWORD *)(*result + 136);
                if (*(_QWORD *)(v65 + 136) >= v67)
                {
                  do
                  {
                    v68 = v64;
                    *result = v65;
                    if (v60 < v63)
                      break;
                    v69 = (2 * v63) | 1;
                    v64 = &v8[v69];
                    v70 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v70 < v10 && *(_QWORD *)(v65 + 136) < *(_QWORD *)(v64[1] + 136))
                    {
                      v65 = v64[1];
                      ++v64;
                      v69 = v70;
                    }
                    result = v68;
                    v63 = v69;
                  }
                  while (*(_QWORD *)(v65 + 136) >= v67);
                  *v68 = v66;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            do
            {
              v71 = 0;
              v72 = *v8;
              v73 = v8;
              do
              {
                v74 = &v73[v71];
                v77 = v74[1];
                v75 = v74 + 1;
                v76 = v77;
                v78 = (2 * v71) | 1;
                v79 = 2 * v71 + 2;
                if (v79 < v10)
                {
                  result = *(uint64_t **)(v76 + 136);
                  if ((uint64_t)result < *(_QWORD *)(v75[1] + 136))
                  {
                    v76 = v75[1];
                    ++v75;
                    v78 = v79;
                  }
                }
                *v73 = v76;
                v73 = v75;
                v71 = v78;
              }
              while (v78 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v75 == --a2)
              {
                *v75 = v72;
              }
              else
              {
                *v75 = *a2;
                *a2 = v72;
                v80 = (char *)v75 - (char *)v8 + 8;
                if (v80 >= 9)
                {
                  v81 = (((unint64_t)v80 >> 3) - 2) >> 1;
                  v82 = &v8[v81];
                  v83 = *v82;
                  v84 = *v75;
                  v85 = *(_QWORD *)(*v75 + 136);
                  if (*(_QWORD *)(*v82 + 136) < v85)
                  {
                    do
                    {
                      v86 = v82;
                      *v75 = v83;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = &v8[v81];
                      v83 = *v82;
                      v75 = v86;
                    }
                    while (*(_QWORD *)(*v82 + 136) < v85);
                    *v86 = v84;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1DF3722F8(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1DF3722F8(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1DF3722F8(v7 + 1, v12 - 1, a2 - 2);
          sub_1DF3722F8(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1DF3722F8(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_QWORD *)(v14 + 136);
          if (*(_QWORD *)(*(v7 - 1) + 136) < v15)
            goto LABEL_12;
          if (v15 >= *(_QWORD *)(*(a2 - 1) + 136))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v15 >= *(_QWORD *)(*v8 + 136));
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v15 >= *(_QWORD *)(v28 + 136));
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v15 < *(_QWORD *)(v31 + 136));
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v15 >= *(_QWORD *)(v34 + 136));
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v15 < *(_QWORD *)(v35 + 136));
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = *(_QWORD *)(v14 + 136);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_QWORD *)(v17 + 136) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_QWORD *)(v21 + 136) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_QWORD *)(v20 + 136) >= v15);
        }
        if (v18 >= v19)
        {
          v8 = &v7[v16];
        }
        else
        {
          v22 = *v19;
          v8 = &v7[v16];
          v23 = v19;
          do
          {
            *v8 = v22;
            *v23 = v17;
            do
            {
              v24 = v8[1];
              ++v8;
              v17 = v24;
            }
            while (*(_QWORD *)(v24 + 136) < v15);
            do
            {
              v25 = *--v23;
              v22 = v25;
            }
            while (*(_QWORD *)(v25 + 136) >= v15);
          }
          while (v8 < v23);
        }
        v26 = v8 - 1;
        if (v8 - 1 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = (uint64_t *)sub_1DF371C10(v7, v8 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = sub_1DF372380(v7, v8 - 1);
        result = (uint64_t *)sub_1DF372380(v8, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 1;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1DF3722F8(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_QWORD *)(*a2 + 136);
  v6 = *(_QWORD *)(*result + 136);
  v7 = *a3;
  v8 = *(_QWORD *)(*a3 + 136);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_QWORD *)(*a2 + 136) < *(_QWORD *)(*result + 136))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_QWORD *)(*a3 + 136) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1DF372380(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_QWORD *)(v6 + 136) < *(_QWORD *)(*a1 + 136))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1DF3722F8(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1DF372568(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      sub_1DF372568(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_QWORD *)(v21 + 136) < *(_QWORD *)(v22 + 136))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_QWORD *)(*v20 + 136);
        if (v25 < *(_QWORD *)(*v19 + 136))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(_QWORD *)(*v18 + 136))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(_QWORD *)(*a1 + 136))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1DF3722F8(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_QWORD *)(*v9 + 136);
    if (v14 < *(_QWORD *)(*v8 + 136))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_QWORD *)(v13 + 136))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *sub_1DF372568(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1DF3722F8(a1, a2, a3);
  v9 = *a3;
  if (*(_QWORD *)(*a4 + 136) < *(_QWORD *)(*a3 + 136))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_QWORD *)(*a3 + 136) < *(_QWORD *)(*a2 + 136))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_QWORD *)(*a2 + 136) < *(_QWORD *)(*a1 + 136))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

_QWORD *sub_1DF3725FC(uint64_t a1, _QWORD *a2, int a3, unint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unint64_t v9;

  v6 = *(_QWORD *)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v7 = (_QWORD *)v5;
        v8 = *(_DWORD *)(v5 + 32);
        if (v8 <= a3)
          break;
LABEL_3:
        v5 = *v7;
        result = v7;
        if (!*v7)
          goto LABEL_11;
      }
      if (v8 >= a3)
      {
        v9 = v7[5];
        if (v9 > a4)
          goto LABEL_3;
        if (v9 >= a4)
          goto LABEL_11;
      }
      result = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_11;
    }
  }
  v7 = result;
LABEL_11:
  *a2 = v7;
  return result;
}

uint64_t sub_1DF372654(uint64_t result, char *a2, uint64_t (**a3)(_QWORD), uint64_t a4, char a5)
{
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  BOOL v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  int64_t v83;
  uint64_t v84;

  v9 = (char *)result;
LABEL_2:
  v81 = a2 - 16;
  v82 = a2 - 8;
  v80 = a2 - 24;
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - v10;
    v12 = (a2 - v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*((_QWORD *)a2 - 1), *(_QWORD *)v10);
        if ((_DWORD)result)
        {
          v40 = *(_QWORD *)v10;
          *(_QWORD *)v10 = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v40;
        }
        return result;
      case 3uLL:
        return sub_1DF372DA0(v10, (_QWORD *)v10 + 1, v82, a3);
      case 4uLL:
        return sub_1DF373024(v10, (_QWORD *)v10 + 1, (_QWORD *)v10 + 2, v82, a3);
      case 5uLL:
        return sub_1DF3730D4(v10, (_QWORD *)v10 + 1, (_QWORD *)v10 + 2, (_QWORD *)v10 + 3, v82, a3);
      default:
        if (v11 <= 191)
        {
          v41 = v10 + 8;
          v43 = v10 == a2 || v41 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = v10;
              do
              {
                v47 = *(_QWORD *)v45;
                v46 = *((_QWORD *)v45 + 1);
                v45 = v41;
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v46, v47);
                if ((_DWORD)result)
                {
                  v48 = *(_QWORD *)v45;
                  v49 = v44;
                  while (1)
                  {
                    *(_QWORD *)&v10[v49 + 8] = *(_QWORD *)&v10[v49];
                    if (!v49)
                      break;
                    result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v48, *(_QWORD *)&v10[v49 - 8]);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v10[v49 + 8];
                      goto LABEL_74;
                    }
                  }
                  v50 = v10;
LABEL_74:
                  *(_QWORD *)v50 = v48;
                }
                v41 = v45 + 8;
                v44 += 8;
              }
              while (v45 + 8 != a2);
            }
          }
          else if (!v43)
          {
            do
            {
              v74 = *(_QWORD *)v9;
              v73 = *((_QWORD *)v9 + 1);
              v9 = v41;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v73, v74);
              if ((_DWORD)result)
              {
                v75 = *(_QWORD *)v9;
                v76 = v9;
                do
                {
                  v77 = v76;
                  v78 = *((_QWORD *)v76 - 1);
                  v76 -= 8;
                  *(_QWORD *)v77 = v78;
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v75, *((_QWORD *)v77 - 2));
                }
                while ((result & 1) != 0);
                *(_QWORD *)v76 = v75;
              }
              v41 = v9 + 8;
            }
            while (v9 + 8 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v51 = (v12 - 2) >> 1;
            v83 = v51;
            v79 = a2;
            do
            {
              v52 = v51;
              if (v83 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = &v9[8 * v53];
                if (2 * v51 + 2 < (uint64_t)v12
                  && ((unsigned int (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v54, *((_QWORD *)v54 + 1)))
                {
                  v54 += 8;
                  v53 = 2 * v52 + 2;
                }
                v55 = &v9[8 * v52];
                result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v54, *(_QWORD *)v55);
                if ((result & 1) == 0)
                {
                  v56 = *(_QWORD *)v55;
                  do
                  {
                    v57 = v54;
                    *(_QWORD *)v55 = *(_QWORD *)v54;
                    if (v83 < v53)
                      break;
                    v58 = (2 * v53) | 1;
                    v54 = &v9[8 * v58];
                    v59 = 2 * v53 + 2;
                    if (v59 < (uint64_t)v12
                      && ((unsigned int (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v54, *((_QWORD *)v54 + 1)))
                    {
                      v54 += 8;
                      v58 = v59;
                    }
                    result = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(_QWORD *)v54, v56);
                    v55 = v57;
                    v53 = v58;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v57 = v56;
                  a2 = v79;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            do
            {
              v60 = a2;
              v61 = 0;
              v84 = *(_QWORD *)v9;
              v62 = v9;
              do
              {
                v63 = &v62[8 * v61 + 8];
                v64 = (2 * v61) | 1;
                v65 = 2 * v61 + 2;
                if (v65 < (uint64_t)v12)
                {
                  result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)&v62[8 * v61 + 8], *(_QWORD *)&v62[8 * v61 + 16]);
                  if ((_DWORD)result)
                  {
                    v63 += 8;
                    v64 = v65;
                  }
                }
                *(_QWORD *)v62 = *(_QWORD *)v63;
                v62 = v63;
                v61 = v64;
              }
              while (v64 <= (uint64_t)((v12 - 2) >> 1));
              a2 = v60 - 8;
              if (v63 == v60 - 8)
              {
                *(_QWORD *)v63 = v84;
              }
              else
              {
                *(_QWORD *)v63 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v84;
                v66 = v63 - v9 + 8;
                if (v66 >= 9)
                {
                  v67 = (((unint64_t)v66 >> 3) - 2) >> 1;
                  v68 = &v9[8 * v67];
                  result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v68, *(_QWORD *)v63);
                  if ((_DWORD)result)
                  {
                    v69 = v60 - 8;
                    v70 = *(_QWORD *)v63;
                    do
                    {
                      v71 = v68;
                      *(_QWORD *)v63 = *(_QWORD *)v68;
                      if (!v67)
                        break;
                      v67 = (v67 - 1) >> 1;
                      v68 = &v9[8 * v67];
                      result = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(_QWORD *)v68, v70);
                      v63 = v71;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v71 = v70;
                    a2 = v69;
                  }
                }
              }
            }
            while ((uint64_t)v12-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[8 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x401)
        {
          sub_1DF372DA0(&v9[8 * (v12 >> 1)], v9, v82, a3);
        }
        else
        {
          sub_1DF372DA0(v9, &v9[8 * (v12 >> 1)], v82, a3);
          sub_1DF372DA0((_QWORD *)v9 + 1, (_QWORD *)v14 - 1, v81, a3);
          sub_1DF372DA0((_QWORD *)v9 + 2, &v9[8 * v13 + 8], v80, a3);
          sub_1DF372DA0((_QWORD *)v14 - 1, &v9[8 * (v12 >> 1)], &v9[8 * v13 + 8], a3);
          v15 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *(_QWORD *)v14;
          *(_QWORD *)v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0
          && (((uint64_t (*)(_QWORD, _QWORD))*a3)(*((_QWORD *)v9 - 1), *(_QWORD *)v9) & 1) == 0)
        {
          v31 = *(_QWORD *)v9;
          result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v9, *(_QWORD *)v82);
          if ((result & 1) != 0)
          {
            v10 = v9;
            do
            {
              v32 = *((_QWORD *)v10 + 1);
              v10 += 8;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v33 = v9 + 8;
            do
            {
              v10 = v33;
              if (v33 >= a2)
                break;
              v33 += 8;
              result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v31, *(_QWORD *)v10);
            }
            while (!(_DWORD)result);
          }
          v34 = a2;
          if (v10 < a2)
          {
            v34 = a2;
            do
            {
              v35 = *((_QWORD *)v34 - 1);
              v34 -= 8;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v35);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v34)
          {
            v36 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *(_QWORD *)v34;
            *(_QWORD *)v34 = v36;
            do
            {
              v37 = *((_QWORD *)v10 + 1);
              v10 += 8;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v31, v37));
            do
            {
              v38 = *((_QWORD *)v34 - 1);
              v34 -= 8;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v38);
            }
            while ((result & 1) != 0);
          }
          v39 = v10 - 8;
          if (v10 - 8 != v9)
            *(_QWORD *)v9 = *(_QWORD *)v39;
          a5 = 0;
          *(_QWORD *)v39 = v31;
          continue;
        }
        v16 = 0;
        v17 = *(_QWORD *)v9;
        do
        {
          v18 = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(_QWORD *)&v9[v16 + 8], v17);
          v16 += 8;
        }
        while ((v18 & 1) != 0);
        v19 = &v9[v16];
        v20 = a2;
        if (v16 == 8)
        {
          do
          {
            if (v19 >= a2)
              break;
            v22 = *((_QWORD *)a2 - 1);
            a2 -= 8;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v22, v17) & 1) == 0);
        }
        else
        {
          do
          {
            v21 = *((_QWORD *)a2 - 1);
            a2 -= 8;
          }
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v21, v17));
        }
        if (v19 >= a2)
        {
          v28 = v19 - 8;
        }
        else
        {
          v23 = &v9[v16];
          v24 = a2;
          do
          {
            v25 = *(_QWORD *)v23;
            *(_QWORD *)v23 = *(_QWORD *)v24;
            *(_QWORD *)v24 = v25;
            do
            {
              v26 = *((_QWORD *)v23 + 1);
              v23 += 8;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v26, v17) & 1) != 0);
            do
            {
              v27 = *((_QWORD *)v24 - 1);
              v24 -= 8;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v27, v17));
          }
          while (v23 < v24);
          v28 = v23 - 8;
        }
        if (v28 != v9)
          *(_QWORD *)v9 = *(_QWORD *)v28;
        *(_QWORD *)v28 = v17;
        v29 = v19 >= a2;
        a2 = v20;
        if (!v29)
        {
LABEL_32:
          result = sub_1DF372654(v9, v28, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v28 + 8;
          continue;
        }
        v30 = sub_1DF372E80(v9, v28, a3);
        v10 = v28 + 8;
        result = sub_1DF372E80((_QWORD *)v28 + 1, v20, a3);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_32;
        }
        a2 = v28;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_1DF372DA0(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(_QWORD))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a3, *a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = (*a4)(*a3);
      if ((_DWORD)result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if ((_DWORD)result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
    if ((_DWORD)result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL sub_1DF372E80(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_1DF372DA0(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1DF373024(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1DF3730D4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      sub_1DF372DA0(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t sub_1DF373024(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t (**a5)(_QWORD))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1DF372DA0(a1, a2, a3, a5);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_1DF3730D4(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t (**a6)(_QWORD))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1DF373024(a1, a2, a3, a4, a6);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a5, *a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a4, *a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a3, *a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a2, *a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1DF3731AC(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  __int128 v12;
  int64x2_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  int64x2_t v18;
  unint64_t v19;
  unint64_t *v20;

  v3 = *a1;
  v2 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - v3) >> 3) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  v20 = a1 + 2;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_1DF3667C0();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v4];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DF36DA38(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v2 = a1[1];
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  }
  if (v2 == v3)
  {
    v13 = vdupq_n_s64(v3);
    v11 = (unint64_t)v10;
  }
  else
  {
    v11 = (unint64_t)v10;
    do
    {
      v12 = *(_OWORD *)(v2 - 24);
      *(_QWORD *)(v11 - 8) = *(_QWORD *)(v2 - 8);
      *(_OWORD *)(v11 - 24) = v12;
      v11 -= 24;
      *(_QWORD *)(v2 - 16) = 0;
      *(_QWORD *)(v2 - 8) = 0;
      *(_QWORD *)(v2 - 24) = 0;
      v2 -= 24;
    }
    while (v2 != v3);
    v13 = *(int64x2_t *)a1;
  }
  v14 = (unint64_t)(v10 + 24);
  *a1 = v11;
  a1[1] = v14;
  v18 = v13;
  v15 = a1[2];
  a1[2] = (unint64_t)&v9[24 * v8];
  v19 = v15;
  v17 = v13.i64[0];
  sub_1DF370790((uint64_t)&v17);
  return v14;
}

uint64_t sub_1DF373324(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  BOOL v6;
  const void *v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  size_t v13;
  int v14;
  _BOOL4 v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = *(_BYTE *)(a2 + 23);
  v6 = v5 < 0;
  v7 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
  v8 = v5 & 0x7F;
  v9 = v6 ? *(_QWORD *)(a2 + 8) : v8;
  v10 = a1 + 8;
  do
  {
    if (*(char *)(v3 + 55) < 0)
    {
      v11 = *(const void **)(v3 + 32);
      v12 = *(_QWORD *)(v3 + 40);
    }
    else
    {
      v11 = (const void *)(v3 + 32);
      v12 = *(unsigned __int8 *)(v3 + 55);
    }
    if (v9 >= v12)
      v13 = v12;
    else
      v13 = v9;
    v14 = memcmp(v11, v7, v13);
    v15 = v12 < v9;
    if (v14)
      v15 = v14 < 0;
    v16 = !v15;
    if (v15)
      v17 = (uint64_t *)(v3 + 8);
    else
      v17 = (uint64_t *)v3;
    if (v16)
      v10 = v3;
    v3 = *v17;
  }
  while (*v17);
  if (v10 == v2)
    return v2;
  v19 = *(_QWORD *)(v10 + 32);
  v20 = *(_BYTE *)(v10 + 55);
  v21 = v20;
  if (v20 >= 0)
    v19 = v10 + 32;
  v22 = *(_QWORD *)(v10 + 40);
  v23 = v20 & 0x7F;
  if (v21 >= 0)
    v22 = v23;
  v24[0] = v19;
  v24[1] = v22;
  if ((sub_1DF36712C((const void **)a2, (uint64_t)v24) & 0x80000000) != 0)
    return v2;
  return v10;
}

_QWORD *sub_1DF373430(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  const char *v10;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v6 = *(uint64_t **)(a1 + 24);
    if (*v6 == v6[1])
      v7 = 0;
    else
      v7 = *v6;
    v8 = (const char *)(v7 + a3);
    do
    {
      while (1)
      {
        v9 = v4;
        v10 = (const char *)(v7 + v4[4]);
        if ((strcmp(v8, v10) & 0x80000000) == 0)
          break;
        v4 = (_QWORD *)*v9;
        v5 = v9;
        if (!*v9)
          goto LABEL_13;
      }
      if ((strcmp(v10, v8) & 0x80000000) == 0)
        break;
      v5 = v9 + 1;
      v4 = (_QWORD *)v9[1];
    }
    while (v4);
  }
  else
  {
    v9 = (_QWORD *)(a1 + 8);
  }
LABEL_13:
  *a2 = v9;
  return v5;
}

void sub_1DF3734D4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t *v7;

  v3 = *(_QWORD **)(a2 + 8);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)a2;
    do
    {
      v4 = (_QWORD *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = (uint64_t *)a1[1];
  --a1[2];
  sub_1DF37355C(v7, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  operator delete((void *)a2);
}

uint64_t *sub_1DF37355C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t **v19;
  _QWORD *v20;
  uint64_t *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = (uint64_t *)v7[2];
    if ((uint64_t *)*v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v12 + 24) = 0;
      v18 = (uint64_t *)v7[1];
      *v12 = (uint64_t)v18;
      if (v18)
        v18[2] = (uint64_t)v12;
      v7[2] = v12[2];
      v19 = (uint64_t **)v12[2];
      if (*v19 == v12)
      {
        *v19 = v7;
        v18 = (uint64_t *)*v12;
      }
      else
      {
        v19[1] = v7;
      }
      v7[1] = (uint64_t)v12;
      v12[2] = (uint64_t)v7;
      if (result == v12)
        result = v7;
      v7 = v18;
    }
    v20 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v20 + 24))
      goto LABEL_71;
    v21 = (uint64_t *)v7[1];
    if (v21 && !*((_BYTE *)v21 + 24))
    {
      if (v20 && !*((_BYTE *)v20 + 24))
      {
LABEL_71:
        v21 = v7;
      }
      else
      {
        *((_BYTE *)v21 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v27 = *v21;
        v7[1] = *v21;
        if (v27)
          *(_QWORD *)(v27 + 16) = v7;
        v21[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
        *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        v20 = v7;
      }
      v24 = v21[2];
      *((_BYTE *)v21 + 24) = *(_BYTE *)(v24 + 24);
      *(_BYTE *)(v24 + 24) = 1;
      *((_BYTE *)v20 + 24) = 1;
      v25 = *(uint64_t **)v24;
      v28 = *(_QWORD *)(*(_QWORD *)v24 + 8);
      *(_QWORD *)v24 = v28;
      if (v28)
        *(_QWORD *)(v28 + 16) = v24;
      v25[2] = *(_QWORD *)(v24 + 16);
      *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v25;
      v25[1] = v24;
      goto LABEL_75;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v22 = v17 == result;
    else
      v22 = 1;
    if (v22)
      goto LABEL_56;
LABEL_52:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v12 + 24) = 0;
    v13 = (uint64_t *)v12[1];
    v14 = *v13;
    v12[1] = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = v12[2];
    *(_QWORD *)(v12[2] + 8 * (*(_QWORD *)v12[2] != (_QWORD)v12)) = v13;
    *v13 = (uint64_t)v12;
    v12[2] = (uint64_t)v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_62;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_56:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_56;
    goto LABEL_52;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_62:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v23 = v15[1];
    *v7 = v23;
    if (v23)
      *(_QWORD *)(v23 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v24 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v24 + 24);
  *(_BYTE *)(v24 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v25 = *(uint64_t **)(v24 + 8);
  v26 = *v25;
  *(_QWORD *)(v24 + 8) = *v25;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  v25[2] = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v25;
  *v25 = v24;
LABEL_75:
  *(_QWORD *)(v24 + 16) = v25;
  return result;
}

_OWORD *sub_1DF3738EC(uint64_t a1, const void **a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  void **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v14;

  v5 = (void **)sub_1DF367010(a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = operator new(0x50uLL);
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    v8[1] = 0;
    v8[2] = 0;
    *v8 = 0;
    *((_QWORD *)v6 + 9) = 0;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 7) = v6 + 4;
    v10 = v14;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v10;
    *v7 = v6;
    v11 = **(_QWORD **)a1;
    v12 = (uint64_t *)v6;
    if (v11)
    {
      *(_QWORD *)a1 = v11;
      v12 = (uint64_t *)*v7;
    }
    sub_1DF36718C(*(uint64_t **)(a1 + 8), v12);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

void sub_1DF3739AC(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1DF3739AC(a1, *(_QWORD *)a2);
    sub_1DF3739AC(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

_QWORD *sub_1DF3739FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_1DF36DA38(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    result[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *sub_1DF373A64(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return sub_1DF37355C(v6, a2);
}

_BYTE *sub_1DF373AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  result = v6 + 32;
  if (*(char *)(a3 + 23) < 0)
  {
    result = sub_1DF36DA38(result, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  v6[56] = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t *sub_1DF373B28(uint64_t a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v6 = (uint64_t **)sub_1DF367010(a1, &v12, a2);
  result = *v6;
  if (!*v6)
  {
    sub_1DF373BE4(a1, a4, (uint64_t)&v11);
    v8 = v12;
    v9 = v11;
    *v11 = 0;
    v9[1] = 0;
    v9[2] = v8;
    *v6 = v9;
    v10 = **(_QWORD **)a1;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v9 = *v6;
    }
    sub_1DF36718C(*(uint64_t **)(a1 + 8), v9);
    ++*(_QWORD *)(a1 + 16);
    return v11;
  }
  return result;
}

_BYTE *sub_1DF373BE4@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_1DF36DA38(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_1DF373C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  size_t v11;
  int v12;
  _BOOL4 v13;
  BOOL v14;
  uint64_t *v15;
  char v16;
  const void *v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _BOOL4 v21;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = (v4 & 0x80u) == 0 ? (const void *)a2 : *(const void **)a2;
  v7 = (v4 & 0x80u) == 0 ? v4 & 0x7F : *(_QWORD *)(a2 + 8);
  v8 = a1 + 8;
  do
  {
    if (*(char *)(v3 + 55) < 0)
    {
      v9 = *(const void **)(v3 + 32);
      v10 = *(_QWORD *)(v3 + 40);
    }
    else
    {
      v9 = (const void *)(v3 + 32);
      v10 = *(unsigned __int8 *)(v3 + 55);
    }
    if (v7 >= v10)
      v11 = v10;
    else
      v11 = v7;
    v12 = memcmp(v9, v6, v11);
    v13 = v10 < v7;
    if (v12)
      v13 = v12 < 0;
    v14 = !v13;
    if (v13)
      v15 = (uint64_t *)(v3 + 8);
    else
      v15 = (uint64_t *)v3;
    if (v14)
      v8 = v3;
    v3 = *v15;
  }
  while (*v15);
  if (v8 == v2)
    return v2;
  v16 = *(_BYTE *)(v8 + 55);
  if (v16 >= 0)
    v17 = (const void *)(v8 + 32);
  else
    v17 = *(const void **)(v8 + 32);
  if (v16 >= 0)
    v18 = v16 & 0x7F;
  else
    v18 = *(_QWORD *)(v8 + 40);
  if ((v4 & 0x80u) != 0)
    v4 = v5;
  v19 = v18 >= v4 ? v4 : v18;
  v20 = memcmp(v6, v17, v19);
  v21 = v4 < v18;
  if (v20)
    v21 = v20 < 0;
  if (v21)
    return v2;
  return v8;
}

BOOL flatbuffers::compareName<flatbuffers::StructDef>(uint64_t a1, uint64_t a2)
{
  int v3;
  void *v4;
  std::string *v5;
  std::string::size_type size;
  char v7;
  std::string::size_type v8;
  std::string *p_p;
  size_t v10;
  int v11;
  std::string v13;
  std::string __p;

  flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a1 + 128), a1, 0x3E8uLL, &__p);
  flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a2 + 128), a2, 0x3E8uLL, &v13);
  v3 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  v4 = (void *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v13;
  else
    v5 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    size = v13.__r_.__value_.__l.__size_;
  v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v8 = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (size >= v8)
    v10 = v8;
  else
    v10 = size;
  v11 = memcmp(p_p, v5, v10);
  if (v3 < 0)
  {
    operator delete(v4);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_18;
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_18;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_18:
  if (v11)
    return v11 < 0;
  else
    return v8 < size;
}

uint64_t sub_1DF373E5C(uint64_t result, char *a2, uint64_t (**a3)(_QWORD), uint64_t a4, char a5)
{
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  BOOL v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  int64_t v83;
  uint64_t v84;

  v9 = (char *)result;
LABEL_2:
  v81 = a2 - 16;
  v82 = a2 - 8;
  v80 = a2 - 24;
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - v10;
    v12 = (a2 - v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*((_QWORD *)a2 - 1), *(_QWORD *)v10);
        if ((_DWORD)result)
        {
          v40 = *(_QWORD *)v10;
          *(_QWORD *)v10 = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v40;
        }
        return result;
      case 3uLL:
        return sub_1DF372DA0(v10, (_QWORD *)v10 + 1, v82, a3);
      case 4uLL:
        return sub_1DF373024(v10, (_QWORD *)v10 + 1, (_QWORD *)v10 + 2, v82, a3);
      case 5uLL:
        return sub_1DF3730D4(v10, (_QWORD *)v10 + 1, (_QWORD *)v10 + 2, (_QWORD *)v10 + 3, v82, a3);
      default:
        if (v11 <= 191)
        {
          v41 = v10 + 8;
          v43 = v10 == a2 || v41 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = v10;
              do
              {
                v47 = *(_QWORD *)v45;
                v46 = *((_QWORD *)v45 + 1);
                v45 = v41;
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v46, v47);
                if ((_DWORD)result)
                {
                  v48 = *(_QWORD *)v45;
                  v49 = v44;
                  while (1)
                  {
                    *(_QWORD *)&v10[v49 + 8] = *(_QWORD *)&v10[v49];
                    if (!v49)
                      break;
                    result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v48, *(_QWORD *)&v10[v49 - 8]);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v10[v49 + 8];
                      goto LABEL_74;
                    }
                  }
                  v50 = v10;
LABEL_74:
                  *(_QWORD *)v50 = v48;
                }
                v41 = v45 + 8;
                v44 += 8;
              }
              while (v45 + 8 != a2);
            }
          }
          else if (!v43)
          {
            do
            {
              v74 = *(_QWORD *)v9;
              v73 = *((_QWORD *)v9 + 1);
              v9 = v41;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v73, v74);
              if ((_DWORD)result)
              {
                v75 = *(_QWORD *)v9;
                v76 = v9;
                do
                {
                  v77 = v76;
                  v78 = *((_QWORD *)v76 - 1);
                  v76 -= 8;
                  *(_QWORD *)v77 = v78;
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v75, *((_QWORD *)v77 - 2));
                }
                while ((result & 1) != 0);
                *(_QWORD *)v76 = v75;
              }
              v41 = v9 + 8;
            }
            while (v9 + 8 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v51 = (v12 - 2) >> 1;
            v83 = v51;
            v79 = a2;
            do
            {
              v52 = v51;
              if (v83 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = &v9[8 * v53];
                if (2 * v51 + 2 < (uint64_t)v12
                  && ((unsigned int (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v54, *((_QWORD *)v54 + 1)))
                {
                  v54 += 8;
                  v53 = 2 * v52 + 2;
                }
                v55 = &v9[8 * v52];
                result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v54, *(_QWORD *)v55);
                if ((result & 1) == 0)
                {
                  v56 = *(_QWORD *)v55;
                  do
                  {
                    v57 = v54;
                    *(_QWORD *)v55 = *(_QWORD *)v54;
                    if (v83 < v53)
                      break;
                    v58 = (2 * v53) | 1;
                    v54 = &v9[8 * v58];
                    v59 = 2 * v53 + 2;
                    if (v59 < (uint64_t)v12
                      && ((unsigned int (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v54, *((_QWORD *)v54 + 1)))
                    {
                      v54 += 8;
                      v58 = v59;
                    }
                    result = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(_QWORD *)v54, v56);
                    v55 = v57;
                    v53 = v58;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v57 = v56;
                  a2 = v79;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            do
            {
              v60 = a2;
              v61 = 0;
              v84 = *(_QWORD *)v9;
              v62 = v9;
              do
              {
                v63 = &v62[8 * v61 + 8];
                v64 = (2 * v61) | 1;
                v65 = 2 * v61 + 2;
                if (v65 < (uint64_t)v12)
                {
                  result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)&v62[8 * v61 + 8], *(_QWORD *)&v62[8 * v61 + 16]);
                  if ((_DWORD)result)
                  {
                    v63 += 8;
                    v64 = v65;
                  }
                }
                *(_QWORD *)v62 = *(_QWORD *)v63;
                v62 = v63;
                v61 = v64;
              }
              while (v64 <= (uint64_t)((v12 - 2) >> 1));
              a2 = v60 - 8;
              if (v63 == v60 - 8)
              {
                *(_QWORD *)v63 = v84;
              }
              else
              {
                *(_QWORD *)v63 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v84;
                v66 = v63 - v9 + 8;
                if (v66 >= 9)
                {
                  v67 = (((unint64_t)v66 >> 3) - 2) >> 1;
                  v68 = &v9[8 * v67];
                  result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v68, *(_QWORD *)v63);
                  if ((_DWORD)result)
                  {
                    v69 = v60 - 8;
                    v70 = *(_QWORD *)v63;
                    do
                    {
                      v71 = v68;
                      *(_QWORD *)v63 = *(_QWORD *)v68;
                      if (!v67)
                        break;
                      v67 = (v67 - 1) >> 1;
                      v68 = &v9[8 * v67];
                      result = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(_QWORD *)v68, v70);
                      v63 = v71;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v71 = v70;
                    a2 = v69;
                  }
                }
              }
            }
            while ((uint64_t)v12-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[8 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x401)
        {
          sub_1DF372DA0(&v9[8 * (v12 >> 1)], v9, v82, a3);
        }
        else
        {
          sub_1DF372DA0(v9, &v9[8 * (v12 >> 1)], v82, a3);
          sub_1DF372DA0((_QWORD *)v9 + 1, (_QWORD *)v14 - 1, v81, a3);
          sub_1DF372DA0((_QWORD *)v9 + 2, &v9[8 * v13 + 8], v80, a3);
          sub_1DF372DA0((_QWORD *)v14 - 1, &v9[8 * (v12 >> 1)], &v9[8 * v13 + 8], a3);
          v15 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *(_QWORD *)v14;
          *(_QWORD *)v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0
          && (((uint64_t (*)(_QWORD, _QWORD))*a3)(*((_QWORD *)v9 - 1), *(_QWORD *)v9) & 1) == 0)
        {
          v31 = *(_QWORD *)v9;
          result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v9, *(_QWORD *)v82);
          if ((result & 1) != 0)
          {
            v10 = v9;
            do
            {
              v32 = *((_QWORD *)v10 + 1);
              v10 += 8;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v33 = v9 + 8;
            do
            {
              v10 = v33;
              if (v33 >= a2)
                break;
              v33 += 8;
              result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v31, *(_QWORD *)v10);
            }
            while (!(_DWORD)result);
          }
          v34 = a2;
          if (v10 < a2)
          {
            v34 = a2;
            do
            {
              v35 = *((_QWORD *)v34 - 1);
              v34 -= 8;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v35);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v34)
          {
            v36 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *(_QWORD *)v34;
            *(_QWORD *)v34 = v36;
            do
            {
              v37 = *((_QWORD *)v10 + 1);
              v10 += 8;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v31, v37));
            do
            {
              v38 = *((_QWORD *)v34 - 1);
              v34 -= 8;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v38);
            }
            while ((result & 1) != 0);
          }
          v39 = v10 - 8;
          if (v10 - 8 != v9)
            *(_QWORD *)v9 = *(_QWORD *)v39;
          a5 = 0;
          *(_QWORD *)v39 = v31;
          continue;
        }
        v16 = 0;
        v17 = *(_QWORD *)v9;
        do
        {
          v18 = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(_QWORD *)&v9[v16 + 8], v17);
          v16 += 8;
        }
        while ((v18 & 1) != 0);
        v19 = &v9[v16];
        v20 = a2;
        if (v16 == 8)
        {
          do
          {
            if (v19 >= a2)
              break;
            v22 = *((_QWORD *)a2 - 1);
            a2 -= 8;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v22, v17) & 1) == 0);
        }
        else
        {
          do
          {
            v21 = *((_QWORD *)a2 - 1);
            a2 -= 8;
          }
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v21, v17));
        }
        if (v19 >= a2)
        {
          v28 = v19 - 8;
        }
        else
        {
          v23 = &v9[v16];
          v24 = a2;
          do
          {
            v25 = *(_QWORD *)v23;
            *(_QWORD *)v23 = *(_QWORD *)v24;
            *(_QWORD *)v24 = v25;
            do
            {
              v26 = *((_QWORD *)v23 + 1);
              v23 += 8;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v26, v17) & 1) != 0);
            do
            {
              v27 = *((_QWORD *)v24 - 1);
              v24 -= 8;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v27, v17));
          }
          while (v23 < v24);
          v28 = v23 - 8;
        }
        if (v28 != v9)
          *(_QWORD *)v9 = *(_QWORD *)v28;
        *(_QWORD *)v28 = v17;
        v29 = v19 >= a2;
        a2 = v20;
        if (!v29)
        {
LABEL_32:
          result = sub_1DF373E5C(v9, v28, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v28 + 8;
          continue;
        }
        v30 = sub_1DF3745A8(v9, v28, a3);
        v10 = v28 + 8;
        result = sub_1DF3745A8((_QWORD *)v28 + 1, v20, a3);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_32;
        }
        a2 = v28;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1DF3745A8(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_1DF372DA0(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1DF373024(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1DF3730D4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      sub_1DF372DA0(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

BOOL flatbuffers::compareName<flatbuffers::EnumDef>(uint64_t a1, uint64_t a2)
{
  int v3;
  void *v4;
  std::string *v5;
  std::string::size_type size;
  char v7;
  std::string::size_type v8;
  std::string *p_p;
  size_t v10;
  int v11;
  std::string v13;
  std::string __p;

  flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a1 + 128), a1, 0x3E8uLL, &__p);
  flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a2 + 128), a2, 0x3E8uLL, &v13);
  v3 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  v4 = (void *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v13;
  else
    v5 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    size = v13.__r_.__value_.__l.__size_;
  v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v8 = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (size >= v8)
    v10 = v8;
  else
    v10 = size;
  v11 = memcmp(p_p, v5, v10);
  if (v3 < 0)
  {
    operator delete(v4);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_18;
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_18;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_18:
  if (v11)
    return v11 < 0;
  else
    return v8 < size;
}

uint64_t sub_1DF37482C(uint64_t result, char *a2, uint64_t (**a3)(_QWORD), uint64_t a4, char a5)
{
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  BOOL v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  int64_t v83;
  uint64_t v84;

  v9 = (char *)result;
LABEL_2:
  v81 = a2 - 16;
  v82 = a2 - 8;
  v80 = a2 - 24;
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - v10;
    v12 = (a2 - v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*((_QWORD *)a2 - 1), *(_QWORD *)v10);
        if ((_DWORD)result)
        {
          v40 = *(_QWORD *)v10;
          *(_QWORD *)v10 = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v40;
        }
        return result;
      case 3uLL:
        return sub_1DF372DA0(v10, (_QWORD *)v10 + 1, v82, a3);
      case 4uLL:
        return sub_1DF373024(v10, (_QWORD *)v10 + 1, (_QWORD *)v10 + 2, v82, a3);
      case 5uLL:
        return sub_1DF3730D4(v10, (_QWORD *)v10 + 1, (_QWORD *)v10 + 2, (_QWORD *)v10 + 3, v82, a3);
      default:
        if (v11 <= 191)
        {
          v41 = v10 + 8;
          v43 = v10 == a2 || v41 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = v10;
              do
              {
                v47 = *(_QWORD *)v45;
                v46 = *((_QWORD *)v45 + 1);
                v45 = v41;
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v46, v47);
                if ((_DWORD)result)
                {
                  v48 = *(_QWORD *)v45;
                  v49 = v44;
                  while (1)
                  {
                    *(_QWORD *)&v10[v49 + 8] = *(_QWORD *)&v10[v49];
                    if (!v49)
                      break;
                    result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v48, *(_QWORD *)&v10[v49 - 8]);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v10[v49 + 8];
                      goto LABEL_74;
                    }
                  }
                  v50 = v10;
LABEL_74:
                  *(_QWORD *)v50 = v48;
                }
                v41 = v45 + 8;
                v44 += 8;
              }
              while (v45 + 8 != a2);
            }
          }
          else if (!v43)
          {
            do
            {
              v74 = *(_QWORD *)v9;
              v73 = *((_QWORD *)v9 + 1);
              v9 = v41;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v73, v74);
              if ((_DWORD)result)
              {
                v75 = *(_QWORD *)v9;
                v76 = v9;
                do
                {
                  v77 = v76;
                  v78 = *((_QWORD *)v76 - 1);
                  v76 -= 8;
                  *(_QWORD *)v77 = v78;
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v75, *((_QWORD *)v77 - 2));
                }
                while ((result & 1) != 0);
                *(_QWORD *)v76 = v75;
              }
              v41 = v9 + 8;
            }
            while (v9 + 8 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v51 = (v12 - 2) >> 1;
            v83 = v51;
            v79 = a2;
            do
            {
              v52 = v51;
              if (v83 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = &v9[8 * v53];
                if (2 * v51 + 2 < (uint64_t)v12
                  && ((unsigned int (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v54, *((_QWORD *)v54 + 1)))
                {
                  v54 += 8;
                  v53 = 2 * v52 + 2;
                }
                v55 = &v9[8 * v52];
                result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v54, *(_QWORD *)v55);
                if ((result & 1) == 0)
                {
                  v56 = *(_QWORD *)v55;
                  do
                  {
                    v57 = v54;
                    *(_QWORD *)v55 = *(_QWORD *)v54;
                    if (v83 < v53)
                      break;
                    v58 = (2 * v53) | 1;
                    v54 = &v9[8 * v58];
                    v59 = 2 * v53 + 2;
                    if (v59 < (uint64_t)v12
                      && ((unsigned int (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v54, *((_QWORD *)v54 + 1)))
                    {
                      v54 += 8;
                      v58 = v59;
                    }
                    result = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(_QWORD *)v54, v56);
                    v55 = v57;
                    v53 = v58;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v57 = v56;
                  a2 = v79;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            do
            {
              v60 = a2;
              v61 = 0;
              v84 = *(_QWORD *)v9;
              v62 = v9;
              do
              {
                v63 = &v62[8 * v61 + 8];
                v64 = (2 * v61) | 1;
                v65 = 2 * v61 + 2;
                if (v65 < (uint64_t)v12)
                {
                  result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)&v62[8 * v61 + 8], *(_QWORD *)&v62[8 * v61 + 16]);
                  if ((_DWORD)result)
                  {
                    v63 += 8;
                    v64 = v65;
                  }
                }
                *(_QWORD *)v62 = *(_QWORD *)v63;
                v62 = v63;
                v61 = v64;
              }
              while (v64 <= (uint64_t)((v12 - 2) >> 1));
              a2 = v60 - 8;
              if (v63 == v60 - 8)
              {
                *(_QWORD *)v63 = v84;
              }
              else
              {
                *(_QWORD *)v63 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v84;
                v66 = v63 - v9 + 8;
                if (v66 >= 9)
                {
                  v67 = (((unint64_t)v66 >> 3) - 2) >> 1;
                  v68 = &v9[8 * v67];
                  result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v68, *(_QWORD *)v63);
                  if ((_DWORD)result)
                  {
                    v69 = v60 - 8;
                    v70 = *(_QWORD *)v63;
                    do
                    {
                      v71 = v68;
                      *(_QWORD *)v63 = *(_QWORD *)v68;
                      if (!v67)
                        break;
                      v67 = (v67 - 1) >> 1;
                      v68 = &v9[8 * v67];
                      result = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(_QWORD *)v68, v70);
                      v63 = v71;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v71 = v70;
                    a2 = v69;
                  }
                }
              }
            }
            while ((uint64_t)v12-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[8 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x401)
        {
          sub_1DF372DA0(&v9[8 * (v12 >> 1)], v9, v82, a3);
        }
        else
        {
          sub_1DF372DA0(v9, &v9[8 * (v12 >> 1)], v82, a3);
          sub_1DF372DA0((_QWORD *)v9 + 1, (_QWORD *)v14 - 1, v81, a3);
          sub_1DF372DA0((_QWORD *)v9 + 2, &v9[8 * v13 + 8], v80, a3);
          sub_1DF372DA0((_QWORD *)v14 - 1, &v9[8 * (v12 >> 1)], &v9[8 * v13 + 8], a3);
          v15 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *(_QWORD *)v14;
          *(_QWORD *)v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0
          && (((uint64_t (*)(_QWORD, _QWORD))*a3)(*((_QWORD *)v9 - 1), *(_QWORD *)v9) & 1) == 0)
        {
          v31 = *(_QWORD *)v9;
          result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v9, *(_QWORD *)v82);
          if ((result & 1) != 0)
          {
            v10 = v9;
            do
            {
              v32 = *((_QWORD *)v10 + 1);
              v10 += 8;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v33 = v9 + 8;
            do
            {
              v10 = v33;
              if (v33 >= a2)
                break;
              v33 += 8;
              result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v31, *(_QWORD *)v10);
            }
            while (!(_DWORD)result);
          }
          v34 = a2;
          if (v10 < a2)
          {
            v34 = a2;
            do
            {
              v35 = *((_QWORD *)v34 - 1);
              v34 -= 8;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v35);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v34)
          {
            v36 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *(_QWORD *)v34;
            *(_QWORD *)v34 = v36;
            do
            {
              v37 = *((_QWORD *)v10 + 1);
              v10 += 8;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v31, v37));
            do
            {
              v38 = *((_QWORD *)v34 - 1);
              v34 -= 8;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v38);
            }
            while ((result & 1) != 0);
          }
          v39 = v10 - 8;
          if (v10 - 8 != v9)
            *(_QWORD *)v9 = *(_QWORD *)v39;
          a5 = 0;
          *(_QWORD *)v39 = v31;
          continue;
        }
        v16 = 0;
        v17 = *(_QWORD *)v9;
        do
        {
          v18 = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(_QWORD *)&v9[v16 + 8], v17);
          v16 += 8;
        }
        while ((v18 & 1) != 0);
        v19 = &v9[v16];
        v20 = a2;
        if (v16 == 8)
        {
          do
          {
            if (v19 >= a2)
              break;
            v22 = *((_QWORD *)a2 - 1);
            a2 -= 8;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v22, v17) & 1) == 0);
        }
        else
        {
          do
          {
            v21 = *((_QWORD *)a2 - 1);
            a2 -= 8;
          }
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v21, v17));
        }
        if (v19 >= a2)
        {
          v28 = v19 - 8;
        }
        else
        {
          v23 = &v9[v16];
          v24 = a2;
          do
          {
            v25 = *(_QWORD *)v23;
            *(_QWORD *)v23 = *(_QWORD *)v24;
            *(_QWORD *)v24 = v25;
            do
            {
              v26 = *((_QWORD *)v23 + 1);
              v23 += 8;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v26, v17) & 1) != 0);
            do
            {
              v27 = *((_QWORD *)v24 - 1);
              v24 -= 8;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v27, v17));
          }
          while (v23 < v24);
          v28 = v23 - 8;
        }
        if (v28 != v9)
          *(_QWORD *)v9 = *(_QWORD *)v28;
        *(_QWORD *)v28 = v17;
        v29 = v19 >= a2;
        a2 = v20;
        if (!v29)
        {
LABEL_32:
          result = sub_1DF37482C(v9, v28, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v28 + 8;
          continue;
        }
        v30 = sub_1DF374F78(v9, v28, a3);
        v10 = v28 + 8;
        result = sub_1DF374F78((_QWORD *)v28 + 1, v20, a3);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_32;
        }
        a2 = v28;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1DF374F78(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_1DF372DA0(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1DF373024(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1DF3730D4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      sub_1DF372DA0(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t flatbuffers::GenerateTextFromTable(uint64_t a1, int *a2, uint64_t a3, std::string *a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = sub_1DF37099C(a1 + 128, a3);
  if (a1 + 136 == v7)
    return 0;
  v8 = *(_QWORD *)(v7 + 56);
  if (!v8)
    return 0;
  ++*(_DWORD *)(v8 + 144);
  return sub_1DF375194(a1, a2, v8, a4);
}

uint64_t sub_1DF375194(uint64_t a1, int *a2, uint64_t a3, std::string *this)
{
  uint64_t v8;
  std::string *v10[2];

  v10[0] = (std::string *)(a1 + 728);
  v10[1] = this;
  std::string::reserve(this, 0x400uLL);
  v8 = sub_1DF375BFC(v10, a3, a2, 0);
  if ((_DWORD)v8 && (*(_DWORD *)(a1 + 736) & 0x80000000) == 0)
    std::string::push_back(this, 10);
  return v8;
}

uint64_t flatbuffers::GenerateText(uint64_t a1, unsigned int *a2, std::string *this)
{
  unsigned int *v3;

  if (*(_BYTE *)(a1 + 955))
    v3 = a2 + 1;
  else
    v3 = a2;
  return sub_1DF375194(a1, (int *)((char *)v3 + *v3), *(_QWORD *)(a1 + 576), this);
}

uint64_t flatbuffers::GenerateTextFile(uint64_t a1, const void **a2, const void **a3)
{
  flatbuffers *p_p;
  std::string *v6;
  std::string::size_type size;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unsigned int *v12;
  std::string __p;
  std::string v16;

  if (*(_BYTE *)(a1 + 728))
  {
    memset(&v16, 0, sizeof(v16));
    sub_1DF3753A4(a1 + 560, *(unsigned __int8 *)(a1 + 729), &v16);
    sub_1DF3758F8(&__p, a2, a3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = (flatbuffers *)&__p;
    else
      p_p = (flatbuffers *)__p.__r_.__value_.__r.__words[0];
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v16;
    else
      v6 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v16.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v16.__r_.__value_.__l.__size_;
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a1 + 384);
  v10 = *(_QWORD *)(a1 + 576);
  if (*(_DWORD *)(a1 + 368) - (_DWORD)v9 + *(_DWORD *)(a1 + 376))
    v11 = v10 == 0;
  else
    v11 = 1;
  if (v11)
    return 1;
  memset(&v16, 0, sizeof(v16));
  v12 = (unsigned int *)(v9 + 4 * *(unsigned __int8 *)(a1 + 955));
  if (sub_1DF375194(a1, (int *)((char *)v12 + *v12), v10, &v16))
  {
    sub_1DF3758F8(&__p, a2, a3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = (flatbuffers *)&__p;
    else
      p_p = (flatbuffers *)__p.__r_.__value_.__r.__words[0];
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v16;
    else
      v6 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v16.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v16.__r_.__value_.__l.__size_;
LABEL_11:
    v8 = flatbuffers::SaveFile(p_p, (const char *)v6, (const char *)size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  v8 = 0;
LABEL_31:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1DF3753A4(uint64_t a1, uint64_t a2, std::string *a3)
{
  unsigned int v6;
  const std::string::value_type *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  char v15;
  std::string *v16;
  char *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  std::string *p_p;
  std::string::size_type size;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned int v28;
  int v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  std::string::size_type v35;
  std::string::size_type v36;
  std::string::size_type v37;
  std::string::size_type v38;
  uint64_t v39;
  unint64_t v40;
  std::string::size_type v41;
  unint64_t v42;
  char *v43;
  std::string::size_type v44;
  std::string::value_type v45;
  char *v46;
  std::string::size_type v47;
  std::string::size_type v48;
  unint64_t v49;
  std::string __p;
  unsigned int v51;

  v6 = *(_DWORD *)(a1 + 12);
  switch(v6)
  {
    case 0u:
      v7 = "null";
      goto LABEL_18;
    case 1u:
    case 6u:
      sub_1DF384500(a1);
      sub_1DF345C20();
      goto LABEL_42;
    case 2u:
    case 7u:
      sub_1DF3847C0(a1);
      sub_1DF356B08();
      goto LABEL_42;
    case 3u:
    case 8u:
      v21 = sub_1DF384A7C(a1);
      sub_1DF362EF8(12, &__p, v21);
LABEL_42:
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(a3, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    case 4u:
      v8 = *(unsigned int **)a1;
      v9 = *(unsigned __int8 *)(a1 + 8);
      if (v9 > 3)
      {
        if (v9 > 7)
          v10 = *(_QWORD *)v8;
        else
          v10 = *v8;
      }
      else if (v9 > 1)
      {
        v10 = *(unsigned __int16 *)v8;
      }
      else
      {
        v10 = *(unsigned __int8 *)v8;
      }
      v17 = (char *)v8 - v10;
      if (!(_DWORD)a2)
      {
        v16 = a3;
        v7 = (char *)v8 - v10;
        goto LABEL_29;
      }
      v18 = strlen((const char *)v8 - v10);
      v19 = (uint64_t)v17;
LABEL_38:
      sub_1DF379BAC(v19, v18, a3, 1, 0);
      return;
    case 5u:
      v11 = *(unsigned int **)a1;
      v12 = *(unsigned __int8 *)(a1 + 8);
      if (v12 > 3)
      {
        if (v12 > 7)
          v13 = *(_QWORD *)v11;
        else
          v13 = *v11;
      }
      else if (v12 > 1)
      {
        v13 = *(unsigned __int16 *)v11;
      }
      else
      {
        v13 = *(unsigned __int8 *)v11;
      }
      v19 = (uint64_t)v11 - v13;
      v20 = *(unsigned __int8 *)(a1 + 9);
      if (v20 > 3)
      {
        if (v20 > 7)
          v18 = *(_QWORD *)(v19 - v20);
        else
          v18 = *(unsigned int *)(v19 - v20);
      }
      else if (v20 > 1)
      {
        v18 = *(unsigned __int16 *)(v19 - v20);
      }
      else
      {
        v18 = *(unsigned __int8 *)(v19 - v20);
      }
      goto LABEL_38;
    case 9u:
      std::string::append(a3, "{ ");
      if (*(_DWORD *)(a1 + 12) != 9)
      {
        v33 = (char *)&unk_1DF38605E;
        LODWORD(v34) = 1;
        goto LABEL_63;
      }
      v24 = *(unsigned int **)a1;
      v25 = *(unsigned __int8 *)(a1 + 8);
      if (v25 > 3)
      {
        if (v25 > 7)
          v26 = *(_QWORD *)v24;
        else
          v26 = *v24;
      }
      else if (v25 > 1)
      {
        v26 = *(unsigned __int16 *)v24;
      }
      else
      {
        v26 = *(unsigned __int8 *)v24;
      }
      v33 = (char *)v24 - v26;
      v34 = *(unsigned __int8 *)(a1 + 9);
      if (v34 > 3)
      {
        sub_1DF384DA8((uint64_t)&__p, (uint64_t)v24 - v26, v34);
        if (v34 >= 8)
          v35 = *(_QWORD *)&v33[-v34];
        else
          v35 = *(unsigned int *)&v33[-v34];
        goto LABEL_64;
      }
      if (v34 < 2)
      {
LABEL_63:
        sub_1DF384DA8((uint64_t)&__p, (uint64_t)v33, v34);
        v34 = v34;
        v35 = v33[-v34];
        goto LABEL_64;
      }
      sub_1DF384DA8((uint64_t)&__p, (uint64_t)v24 - v26, v34);
      v35 = *(unsigned __int16 *)&v33[-v34];
LABEL_64:
      v47 = v35;
      v36 = __p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
        v37 = 0;
        v46 = &v33[v35 * v34];
        v38 = __p.__r_.__value_.__r.__words[0];
        v39 = __p.__r_.__value_.__s.__data_[8];
        v40 = __p.__r_.__value_.__s.__data_[8] | ((unint64_t)v51 << 32) | 0x100;
        v41 = __p.__r_.__value_.__r.__words[2] - 1;
        do
        {
          v48 = v38;
          v49 = v40;
          sub_1DF3753A4(&v48, a2, a3);
          std::string::append(a3, ": ");
          if (v47 <= v37)
          {
            v43 = 0;
            v42 = 257;
          }
          else
          {
            v42 = ((unint64_t)(v46[v37] >> 2) << 32) | ((unint64_t)(1 << (v46[v37] & 3)) << 8) | v34;
            v43 = v33;
          }
          v48 = (std::string::size_type)v43;
          v49 = v42;
          sub_1DF3753A4(&v48, a2, a3);
          if (v37 < v41)
            std::string::append(a3, ", ");
          ++v37;
          v33 += v34;
          v38 += v39;
        }
        while (v36 != v37);
      }
      std::string::append(a3, " }");
      return;
    case 0x1Au:
      if (sub_1DF384D40(a1))
        v7 = "true";
      else
        v7 = "false";
      goto LABEL_18;
    default:
      if (v6 - 9 <= 1)
      {
        sub_1DF384F40((uint64_t)&__p, (unsigned int **)a1);
        sub_1DF384E5C(a3, (uint64_t)&__p, a2);
      }
      else if (v6 > 0x24 || ((1 << v6) & 0x100000F800) == 0)
      {
        v15 = v6 - 16;
        if (v6 - 16 <= 8)
        {
          v27 = v6 - 16;
          v28 = (v6 - 16) / 3u + 2;
          v29 = (v15 - 3 * (v27 / 3u) + 1);
          v30 = *(unsigned int **)a1;
          v31 = *(unsigned __int8 *)(a1 + 8);
          if (v31 > 3)
          {
            if (v31 > 7)
              v32 = *(_QWORD *)v30;
            else
              v32 = *v30;
          }
          else if (v31 > 1)
          {
            v32 = *(unsigned __int16 *)v30;
          }
          else
          {
            v32 = *(unsigned __int8 *)v30;
          }
          v44 = (std::string::size_type)v30 - v32;
          v45 = *(_BYTE *)(a1 + 9);
          __p.__r_.__value_.__r.__words[0] = v44;
          __p.__r_.__value_.__s.__data_[8] = v45;
          HIDWORD(__p.__r_.__value_.__r.__words[1]) = v29;
          __p.__r_.__value_.__s.__data_[16] = v28;
          sub_1DF385198(a3, (uint64_t)&__p, a2);
        }
        else if (v6 == 25)
        {
          sub_1DF385264((uint64_t)&__p, (unsigned int **)a1);
          sub_1DF379BAC((uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2], a3, 1, 0);
        }
        else
        {
          v7 = "(?)";
LABEL_18:
          v16 = a3;
LABEL_29:
          std::string::append(v16, v7);
        }
      }
      else
      {
        sub_1DF3850C4((uint64_t)&__p, (unsigned int **)a1);
        sub_1DF384FF8(a3, (uint64_t)&__p, a2);
      }
      return;
  }
}

void sub_1DF3758F8(std::string *a1, const void **a2, const void **a3)
{
  char v6;
  int v7;
  size_t v8;
  size_t v9;
  char v10;
  int v11;
  size_t v12;
  size_t v13;
  std::string *p_p;
  const void *v15;
  const void *v16;
  std::string *v17;
  std::string __p;

  v6 = *((_BYTE *)a2 + 23);
  v7 = v6;
  v8 = v6 & 0x7F;
  if (v7 >= 0)
    v9 = v8;
  else
    v9 = (size_t)a2[1];
  v10 = *((_BYTE *)a3 + 23);
  v11 = v10;
  v12 = v10 & 0x7F;
  if (v11 >= 0)
    v13 = v12;
  else
    v13 = (size_t)a3[1];
  p_p = &__p;
  sub_1DF370AC0((uint64_t)&__p, v13 + v9);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0)
      v15 = a2;
    else
      v15 = *a2;
    memmove(p_p, v15, v9);
  }
  if (v13)
  {
    if (*((char *)a3 + 23) >= 0)
      v16 = a3;
    else
      v16 = *a3;
    memmove((char *)p_p + v9, v16, v13);
  }
  p_p->__r_.__value_.__s.__data_[v9 + v13] = 0;
  v17 = std::string::append(&__p, ".json");
  *a1 = *v17;
  v17->__r_.__value_.__r.__words[0] = 0;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void flatbuffers::TextMakeRule(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v8;
  std::string::size_type v9;
  char v10;
  BOOL v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  std::string *v21;
  BOOL v22;
  std::string v23;
  std::string __p;
  std::string v25;

  if (*(_DWORD *)(a1 + 368) - *(_DWORD *)(a1 + 384) + *(_DWORD *)(a1 + 376) && *(_QWORD *)(a1 + 576))
  {
    flatbuffers::StripExtension(a3, &__p);
    flatbuffers::StripPath(&__p, &v25);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_1DF3758F8(&v23, a2, (const void **)&v25.__r_.__value_.__l.__data_);
    v8 = std::string::append(&v23, ": ");
    v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = *(_BYTE *)(a3 + 23);
    v11 = v10 < 0;
    if (v10 >= 0)
      v12 = (const std::string::value_type *)a3;
    else
      v12 = *(const std::string::value_type **)a3;
    v13 = v10 & 0x7F;
    if (v11)
      v14 = *(_QWORD *)(a3 + 8);
    else
      v14 = v13;
    v15 = std::string::append(&__p, v12, v14);
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)a4 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    *(_QWORD *)(a4 + 16) = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    flatbuffers::Parser::GetIncludedFilesRecursive(a1, *(_QWORD *)(a1 + 576) + 24, &__p);
    v17 = __p.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[1])
    {
      do
      {
        std::operator+<char>();
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v23;
        else
          v18 = (std::string *)v23.__r_.__value_.__r.__words[0];
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v23.__r_.__value_.__l.__size_;
        std::string::append((std::string *)a4, (const std::string::value_type *)v18, size);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v23.__r_.__value_.__l.__data_);
        v20 = *(std::string **)(v17 + 8);
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = *(std::string **)(v17 + 16);
            v22 = v21->__r_.__value_.__r.__words[0] == v17;
            v17 = (std::string::size_type)v21;
          }
          while (!v22);
        }
        v17 = (std::string::size_type)v21;
      }
      while (v21 != (std::string *)&__p.__r_.__value_.__r.__words[1]);
    }
    sub_1DF3739AC((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_BYTE *)(a4 + 23) = 0;
    *(_BYTE *)a4 = 0;
  }
}

uint64_t sub_1DF375BFC(std::string **a1, uint64_t a2, int *a3, int a4)
{
  int v8;
  uint64_t *v9;
  int v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  unsigned __int16 *v16;
  std::string *v17;
  int v18;
  unsigned int v19;
  char v21;
  BOOL v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string *v26;
  int v27;
  unsigned int *v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  __int16 *v37;
  __int16 v38;
  uint64_t v39;
  char *v40;
  char v41;
  uint64_t v42;
  int *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  char *v49;
  unsigned int v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char v54;
  int v55;
  unsigned int v56;
  BOOL v57;
  unsigned __int8 v58;
  _xlocale *v59;
  const char *v60;
  int v61;
  char *v62;
  char *v63;
  char v64;
  int v65;
  unsigned int v66;
  BOOL v67;
  unsigned __int8 v68;
  _xlocale *v69;
  const char *v70;
  int v71;
  char *v72;
  char *v73;
  char v74;
  int v75;
  unsigned int v76;
  BOOL v77;
  unsigned __int8 v78;
  _xlocale *v79;
  const char *v80;
  int v81;
  unsigned __int8 v82;
  uint64_t v83;
  unsigned __int16 *v84;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  unsigned __int16 *v88;
  uint64_t v89;
  unsigned __int8 v90;
  uint64_t v91;
  unsigned int v92;
  unsigned __int16 *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int16 *v96;
  unsigned __int16 v97;
  uint64_t v98;
  unsigned __int16 *v99;
  unsigned __int16 v100;
  uint64_t v101;
  unsigned __int16 *v102;
  uint64_t v103;
  uint64_t result;
  uint64_t v105;
  char *v106[2];

  std::string::push_back(a1[1], 123);
  v8 = (*a1)->__r_.__value_.__r.__words[1];
  v9 = *(uint64_t **)(a2 + 176);
  if (v9 == *(uint64_t **)(a2 + 184))
    goto LABEL_182;
  v10 = 0;
  v11 = 0;
  v105 = (v8 & ~(v8 >> 31)) + a4;
  v12 = *(unsigned __int8 *)(a2 + 200);
  do
  {
    v13 = *v9;
    if (v12)
    {
      v14 = 1;
    }
    else
    {
      v15 = *(unsigned __int16 *)(v13 + 208);
      v16 = (unsigned __int16 *)((char *)a3 - *a3);
      v14 = *v16 > v15 && *(unsigned __int16 *)((char *)v16 + v15) != 0;
    }
    if (!*(_BYTE *)(v13 + 221) && !*(_QWORD *)(v13 + 224))
    {
      v29 = *(_DWORD *)(v13 + 152) == 14 && v14;
      if (!v12 && v29)
      {
        if ((*a1)->__r_.__value_.__s.__data_[6])
        {
          v14 = 1;
        }
        else
        {
          v33 = *(unsigned __int16 *)(v13 + 208);
          v34 = *a3;
          if (*(unsigned __int16 *)((char *)a3 - v34) <= v33)
          {
            v35 = 0;
          }
          else
          {
            v35 = *(unsigned __int16 *)((char *)a3 + v33 - v34);
            LODWORD(v34) = *(int *)((char *)a3 + v35);
          }
          v14 = *(int *)((char *)a3 + v35 + v34) != 0;
        }
      }
    }
    v17 = *a1;
    v18 = (*a1)->__r_.__value_.__s.__data_[5];
    if ((*a1)->__r_.__value_.__s.__data_[5])
    {
      v19 = *(_DWORD *)(v13 + 152);
      v18 = (v19 > 0xFFFFFFFB || v19 - 1 <= 0xB) && *(_BYTE *)(v13 + 216) == 0;
    }
    if ((v14 | v18) == 1)
    {
      if (v10 && !v17[9].__r_.__value_.__s.__data_[10])
      {
        std::string::push_back(a1[1], 44);
        v17 = *a1;
      }
      if ((v17->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
        std::string::push_back(a1[1], 10);
      std::string::append(a1[1], (int)v105, 32);
      if ((*a1)->__r_.__value_.__s.__data_[1])
        std::string::push_back(a1[1], 34);
      v21 = *(_BYTE *)(v13 + 23);
      v22 = v21 < 0;
      if (v21 >= 0)
        v23 = (const std::string::value_type *)v13;
      else
        v23 = *(const std::string::value_type **)v13;
      v24 = v21 & 0x7F;
      if (v22)
        v25 = *(_QWORD *)(v13 + 8);
      else
        v25 = v24;
      std::string::append(a1[1], v23, v25);
      v26 = *a1;
      if ((*a1)->__r_.__value_.__s.__data_[1])
      {
        std::string::push_back(a1[1], 34);
        v26 = *a1;
      }
      if (!v26[9].__r_.__value_.__s.__data_[10] || (*(_DWORD *)(v13 + 152) & 0xFFFFFFFE) != 0xE)
        std::string::push_back(a1[1], 58);
      std::string::push_back(a1[1], 32);
      v27 = *(_DWORD *)(v13 + 152);
      switch(v27)
      {
        case -4:
          sub_1DF3841BC(a1, v13, a3, *(unsigned __int8 *)(a2 + 200));
          goto LABEL_154;
        case -3:
        case 10:
          sub_1DF3766AC(a1, v13, a3, *(unsigned __int8 *)(a2 + 200));
          goto LABEL_154;
        case -2:
        case 8:
          sub_1DF37679C(a1, v13, a3, *(unsigned __int8 *)(a2 + 200));
          goto LABEL_154;
        case -1:
        case 6:
          sub_1DF376998(a1, v13, a3, *(unsigned __int8 *)(a2 + 200));
          goto LABEL_154;
        case 0:
        case 1:
        case 2:
        case 4:
          sub_1DF376B98(a1, v13, a3, *(unsigned __int8 *)(a2 + 200));
          goto LABEL_154;
        case 3:
          v39 = *(unsigned __int16 *)(v13 + 208);
          if (*(_BYTE *)(a2 + 200))
          {
            v40 = (char *)a3 + v39;
LABEL_62:
            v41 = *v40;
            goto LABEL_133;
          }
          if (*(char *)(v13 + 207) >= 0)
            v62 = (char *)(v13 + 184);
          else
            v62 = *(char **)(v13 + 184);
          v63 = v62;
          do
          {
            v65 = *v63++;
            v64 = v65;
            v66 = v65 - 48;
            if (v65)
              v67 = v66 > 9;
            else
              v67 = 0;
          }
          while (v67);
          if (v64 == 48 && (*v63 & 0xDF) == 0x58)
          {
            v106[0] = v62;
            v68 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
            if ((v68 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
            {
              qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
              __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
              __cxa_guard_release(&qword_1F04755F0);
            }
            v69 = (_xlocale *)qword_1F04755E8;
            v70 = v62;
            v71 = 16;
          }
          else
          {
            v106[0] = v62;
            v86 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
            if ((v86 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
            {
              qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
              __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
              __cxa_guard_release(&qword_1F04755F0);
            }
            v69 = (_xlocale *)qword_1F04755E8;
            v70 = v62;
            v71 = 10;
          }
          v87 = strtoll_l(v70, v106, v71, v69);
          v41 = 0;
          if (v106[0] != v62 && !*v106[0])
          {
            v41 = 0x80;
            if (v87 > -128)
              v41 = v87;
            if (v87 > 127)
              v41 = 127;
          }
          v88 = (unsigned __int16 *)((char *)a3 - *a3);
          if (*v88 > v39)
          {
            v89 = *(unsigned __int16 *)((char *)v88 + v39);
            if (v89)
            {
              v40 = (char *)a3 + v89;
              goto LABEL_62;
            }
          }
LABEL_133:
          sub_1DF3782FC(a1, v41, *(_DWORD *)(v13 + 152), *(_QWORD *)(v13 + 168));
          goto LABEL_154;
        case 5:
          v36 = *(unsigned __int16 *)(v13 + 208);
          if (*(_BYTE *)(a2 + 200))
          {
            v37 = (__int16 *)((char *)a3 + v36);
LABEL_59:
            v38 = *v37;
            goto LABEL_121;
          }
          if (*(char *)(v13 + 207) >= 0)
            v52 = (char *)(v13 + 184);
          else
            v52 = *(char **)(v13 + 184);
          v53 = v52;
          do
          {
            v55 = *v53++;
            v54 = v55;
            v56 = v55 - 48;
            if (v55)
              v57 = v56 > 9;
            else
              v57 = 0;
          }
          while (v57);
          if (v54 == 48 && (*v53 & 0xDF) == 0x58)
          {
            v106[0] = v52;
            v58 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
            if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
            {
              qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
              __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
              __cxa_guard_release(&qword_1F04755F0);
            }
            v59 = (_xlocale *)qword_1F04755E8;
            v60 = v52;
            v61 = 16;
          }
          else
          {
            v106[0] = v52;
            v82 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
            if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
            {
              qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
              __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
              __cxa_guard_release(&qword_1F04755F0);
            }
            v59 = (_xlocale *)qword_1F04755E8;
            v60 = v52;
            v61 = 10;
          }
          v83 = strtoll_l(v60, v106, v61, v59);
          v38 = 0;
          if (v106[0] != v52 && !*v106[0])
          {
            v38 = 0x8000;
            if (v83 > -32768)
              v38 = v83;
            if (v83 >= 0x8000)
              v38 = 0x7FFF;
          }
          v84 = (unsigned __int16 *)((char *)a3 - *a3);
          if (*v84 > v36)
          {
            v85 = *(unsigned __int16 *)((char *)v84 + v36);
            if (v85)
            {
              v37 = (__int16 *)((char *)a3 + v85);
              goto LABEL_59;
            }
          }
LABEL_121:
          sub_1DF378754(a1, v38, *(_DWORD *)(v13 + 152), *(_QWORD *)(v13 + 168));
          goto LABEL_154;
        case 7:
          v42 = *(unsigned __int16 *)(v13 + 208);
          if (*(_BYTE *)(a2 + 200))
          {
            v43 = (int *)((char *)a3 + v42);
LABEL_65:
            v44 = *v43;
            goto LABEL_146;
          }
          if (*(char *)(v13 + 207) >= 0)
            v72 = (char *)(v13 + 184);
          else
            v72 = *(char **)(v13 + 184);
          v73 = v72;
          do
          {
            v75 = *v73++;
            v74 = v75;
            v76 = v75 - 48;
            if (v75)
              v77 = v76 > 9;
            else
              v77 = 0;
          }
          while (v77);
          if (v74 == 48 && (*v73 & 0xDF) == 0x58)
          {
            v106[0] = v72;
            v78 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
            if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
            {
              qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
              __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
              __cxa_guard_release(&qword_1F04755F0);
            }
            v79 = (_xlocale *)qword_1F04755E8;
            v80 = v72;
            v81 = 16;
          }
          else
          {
            v106[0] = v72;
            v90 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
            if ((v90 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
            {
              qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
              __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
              __cxa_guard_release(&qword_1F04755F0);
            }
            v79 = (_xlocale *)qword_1F04755E8;
            v80 = v72;
            v81 = 10;
          }
          v91 = strtoll_l(v80, v106, v81, v79);
          v44 = 0;
          if (v106[0] != v72 && !*v106[0])
          {
            v92 = 0x80000000;
            if (v91 > (uint64_t)0xFFFFFFFF80000000)
              v92 = v91;
            if (v91 <= 0x7FFFFFFF)
              v44 = v92;
            else
              v44 = 0x7FFFFFFF;
          }
          v93 = (unsigned __int16 *)((char *)a3 - *a3);
          if (*v93 > v42)
          {
            v94 = *(unsigned __int16 *)((char *)v93 + v42);
            if (v94)
            {
              v43 = (int *)((char *)a3 + v94);
              goto LABEL_65;
            }
          }
LABEL_146:
          sub_1DF3782FC(a1, v44, *(_DWORD *)(v13 + 152), *(_QWORD *)(v13 + 168));
          goto LABEL_154;
        case 9:
          sub_1DF384258(a1, v13, a3, *(unsigned __int8 *)(a2 + 200));
          goto LABEL_154;
        case 11:
          sub_1DF3842FC(a1, v13, a3, *(unsigned __int8 *)(a2 + 200));
          goto LABEL_154;
        case 12:
          sub_1DF384394(a1, v13, a3, *(unsigned __int8 *)(a2 + 200));
          goto LABEL_154;
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
          if (*(_BYTE *)(a2 + 200))
          {
            v28 = (unsigned int *)((char *)a3 + *(unsigned __int16 *)(v13 + 208));
            goto LABEL_39;
          }
          if (*(_BYTE *)(v13 + 221))
          {
            v30 = *(unsigned __int16 *)(v13 + 208);
            v31 = *a3;
            if (*(unsigned __int16 *)((char *)a3 - v31) <= v30)
            {
              v32 = 0;
            }
            else
            {
              v32 = *(unsigned __int16 *)((char *)a3 + v30 - v31);
              LODWORD(v31) = *(int *)((char *)a3 + v32);
            }
            v49 = (char *)a3 + v32 + v31 + *(int *)((char *)a3 + v32 + v31);
            v50 = v49[2];
            v49 += 2;
            v51 = v49[1];
            v106[0] = &v49[-v51];
            v106[1] = (char *)(((unint64_t)(v50 >> 2) << 32) | ((unint64_t)(1 << (v50 & 3)) << 8) | v51);
            sub_1DF3753A4((uint64_t)v106, (*a1)->__r_.__value_.__s.__data_[1], a1[1]);
            goto LABEL_154;
          }
          v45 = *(_QWORD *)(v13 + 224);
          if (v45)
          {
            v46 = *(unsigned __int16 *)(v13 + 208);
            v47 = (unsigned __int16 *)((char *)a3 - *a3);
            if (*v47 <= v46)
            {
              v48 = 0;
            }
            else
            {
              v48 = *(unsigned __int16 *)((char *)v47 + v46);
              if (v48)
                v48 += (uint64_t)a3 + *(unsigned int *)((char *)a3 + v48);
            }
            result = sub_1DF375BFC(a1, v45, v48 + 4 + *(unsigned int *)(v48 + 4), v105);
            if (!(_DWORD)result)
              return result;
            goto LABEL_154;
          }
          if (v27 == 15 && *(_BYTE *)(*(_QWORD *)(v13 + 160) + 200))
          {
            v95 = *(unsigned __int16 *)(v13 + 208);
            v96 = (unsigned __int16 *)((char *)a3 - *a3);
            if (*v96 > v95)
            {
              v97 = *(unsigned __int16 *)((char *)v96 + v95);
              if (v97)
              {
                v28 = (unsigned int *)((char *)a3 + v97);
                goto LABEL_39;
              }
            }
          }
          else
          {
            v101 = *(unsigned __int16 *)(v13 + 208);
            v102 = (unsigned __int16 *)((char *)a3 - *a3);
            if (*v102 > v101)
            {
              v103 = *(unsigned __int16 *)((char *)v102 + v101);
              if (v103)
              {
                v28 = (unsigned int *)((char *)a3 + v103 + *(unsigned int *)((char *)a3 + v103));
                goto LABEL_39;
              }
            }
          }
          v28 = 0;
LABEL_39:
          if ((sub_1DF3797DC(a1, v28, v13 + 152, v105, v11, 0xFFFFFFFF) & 1) == 0)
            return 0;
LABEL_154:
          ++v10;
          v98 = *(unsigned __int16 *)(v13 + 208);
          if (*(_BYTE *)(a2 + 200))
          {
            v11 = (unsigned int *)((char *)a3 + v98);
            v12 = 1;
          }
          else
          {
            v99 = (unsigned __int16 *)((char *)a3 - *a3);
            if (*v99 > v98 && (v100 = *(unsigned __int16 *)((char *)v99 + v98)) != 0)
            {
              v12 = 0;
              v11 = (unsigned int *)((char *)a3 + v100);
            }
            else
            {
              v12 = 0;
              v11 = 0;
            }
          }
          break;
        default:
          goto LABEL_154;
      }
    }
    ++v9;
  }
  while (v9 != *(uint64_t **)(a2 + 184));
  v8 = (*a1)->__r_.__value_.__r.__words[1];
LABEL_182:
  if ((v8 & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a4, 32);
  std::string::push_back(a1[1], 125);
  return 1;
}

void sub_1DF3766AC(std::string **a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v7;
  char *v8;
  _BOOL4 v9;
  uint64_t v10;
  char *v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v7 = *(unsigned __int16 *)(a2 + 208);
  if (a4)
  {
    v18 = (uint64_t *)((char *)a3 + v7);
    goto LABEL_20;
  }
  v19 = 0;
  if (*(char *)(a2 + 207) >= 0)
    v8 = (char *)(a2 + 184);
  else
    v8 = *(char **)(a2 + 184);
  v9 = sub_1DF3667CC((unint64_t *)&v19, v8, 0, 1);
  v10 = v19;
  if (v9 && v19 != 0)
  {
    v12 = v8 - 1;
    do
    {
      v13 = *++v12;
      v14 = v13 - 48;
      if (v13)
        v15 = v14 > 9;
      else
        v15 = 0;
    }
    while (v15);
    if (*(_BYTE *)((__PAIR128__((unint64_t)v12, (unint64_t)v8) - (unint64_t)v12) >> 64) == 45)
      v10 = -1;
  }
  v16 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v16 > v7)
  {
    v17 = *(unsigned __int16 *)((char *)v16 + v7);
    if (v17)
    {
      v18 = (uint64_t *)((char *)a3 + v17);
LABEL_20:
      v10 = *v18;
    }
  }
  sub_1DF377294(a1, v10, *(_DWORD *)(a2 + 152), *(_QWORD *)(a2 + 168));
}

void sub_1DF37679C(std::string **a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v7;
  int *v8;
  char *v9;
  char *v10;
  char v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  unsigned __int8 v15;
  _xlocale *v16;
  const char *v17;
  int v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unsigned __int16 *v23;
  uint64_t v24;
  char *v25;

  v7 = *(unsigned __int16 *)(a2 + 208);
  if (a4)
  {
    v8 = (int *)((char *)a3 + v7);
LABEL_28:
    v22 = *v8;
    goto LABEL_29;
  }
  if (*(char *)(a2 + 207) >= 0)
    v9 = (char *)(a2 + 184);
  else
    v9 = *(char **)(a2 + 184);
  v10 = v9;
  do
  {
    v12 = *v10++;
    v11 = v12;
    v13 = v12 - 48;
    if (v12)
      v14 = v13 > 9;
    else
      v14 = 0;
  }
  while (v14);
  if (v11 == 48 && (*v10 & 0xDF) == 0x58)
  {
    v25 = v9;
    v15 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v16 = (_xlocale *)qword_1F04755E8;
    v17 = v9;
    v18 = 16;
  }
  else
  {
    v25 = v9;
    v19 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v16 = (_xlocale *)qword_1F04755E8;
    v17 = v9;
    v18 = 10;
  }
  v20 = strtoll_l(v17, &v25, v18, v16);
  if (v25 != v9 && *v25 == 0)
    v21 = v20;
  else
    v21 = 0;
  if (v21 >= 0xFFFFFFFF)
    LODWORD(v21) = -1;
  if (v25 != v9 && *v25 == 0)
    v22 = v21;
  else
    v22 = 0;
  v23 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v23 > v7)
  {
    v24 = *(unsigned __int16 *)((char *)v23 + v7);
    if (v24)
    {
      v8 = (int *)((char *)a3 + v24);
      goto LABEL_28;
    }
  }
LABEL_29:
  sub_1DF37766C(a1, v22, *(_DWORD *)(a2 + 152), *(_QWORD *)(a2 + 168));
}

void sub_1DF376998(std::string **a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v7;
  unsigned __int16 *v8;
  char *v9;
  char *v10;
  char v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  unsigned __int8 v15;
  _xlocale *v16;
  const char *v17;
  int v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int16 v22;
  unsigned __int16 *v23;
  uint64_t v24;
  char *v25;

  v7 = *(unsigned __int16 *)(a2 + 208);
  if (a4)
  {
    v8 = (unsigned __int16 *)((char *)a3 + v7);
LABEL_28:
    v22 = *v8;
    goto LABEL_29;
  }
  if (*(char *)(a2 + 207) >= 0)
    v9 = (char *)(a2 + 184);
  else
    v9 = *(char **)(a2 + 184);
  v10 = v9;
  do
  {
    v12 = *v10++;
    v11 = v12;
    v13 = v12 - 48;
    if (v12)
      v14 = v13 > 9;
    else
      v14 = 0;
  }
  while (v14);
  if (v11 == 48 && (*v10 & 0xDF) == 0x58)
  {
    v25 = v9;
    v15 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v16 = (_xlocale *)qword_1F04755E8;
    v17 = v9;
    v18 = 16;
  }
  else
  {
    v25 = v9;
    v19 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v16 = (_xlocale *)qword_1F04755E8;
    v17 = v9;
    v18 = 10;
  }
  v20 = strtoll_l(v17, &v25, v18, v16);
  if (v25 != v9 && *v25 == 0)
    v21 = v20;
  else
    v21 = 0;
  if (v21 >= 0xFFFF)
    LOWORD(v21) = -1;
  if (v25 != v9 && *v25 == 0)
    v22 = v21;
  else
    v22 = 0;
  v23 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v23 > v7)
  {
    v24 = *(unsigned __int16 *)((char *)v23 + v7);
    if (v24)
    {
      v8 = (unsigned __int16 *)((char *)a3 + v24);
      goto LABEL_28;
    }
  }
LABEL_29:
  sub_1DF377AC4(a1, v22, *(_DWORD *)(a2 + 152), *(_QWORD *)(a2 + 168));
}

void sub_1DF376B98(std::string **a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v7;
  unsigned __int8 *v8;
  char *v9;
  char *v10;
  char v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  unsigned __int8 v15;
  _xlocale *v16;
  const char *v17;
  int v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  unsigned __int16 *v23;
  uint64_t v24;
  char *v25;

  v7 = *(unsigned __int16 *)(a2 + 208);
  if (a4)
  {
    v8 = (unsigned __int8 *)a3 + v7;
LABEL_28:
    v22 = *v8;
    goto LABEL_29;
  }
  if (*(char *)(a2 + 207) >= 0)
    v9 = (char *)(a2 + 184);
  else
    v9 = *(char **)(a2 + 184);
  v10 = v9;
  do
  {
    v12 = *v10++;
    v11 = v12;
    v13 = v12 - 48;
    if (v12)
      v14 = v13 > 9;
    else
      v14 = 0;
  }
  while (v14);
  if (v11 == 48 && (*v10 & 0xDF) == 0x58)
  {
    v25 = v9;
    v15 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v16 = (_xlocale *)qword_1F04755E8;
    v17 = v9;
    v18 = 16;
  }
  else
  {
    v25 = v9;
    v19 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v16 = (_xlocale *)qword_1F04755E8;
    v17 = v9;
    v18 = 10;
  }
  v20 = strtoll_l(v17, &v25, v18, v16);
  if (v25 != v9 && *v25 == 0)
    v21 = v20;
  else
    v21 = 0;
  if (v21 >= 0xFF)
    LOBYTE(v21) = -1;
  if (v25 != v9 && *v25 == 0)
    v22 = v21;
  else
    v22 = 0;
  v23 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v23 > v7)
  {
    v24 = *(unsigned __int16 *)((char *)v23 + v7);
    if (v24)
    {
      v8 = (unsigned __int8 *)a3 + v24;
      goto LABEL_28;
    }
  }
LABEL_29:
  sub_1DF377EA4(a1, v22, *(_DWORD *)(a2 + 152), *(_QWORD *)(a2 + 168));
}

void sub_1DF376D98(std::string **a1, __int16 a2, int a3, uint64_t a4)
{
  const std::string::value_type *v6;
  BOOL v8;
  float v9;
  std::string *p_p;
  std::string::size_type size;
  float v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  BOOL v17;
  char v18;
  BOOL v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  char v23;
  BOOL v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  float v30;
  const std::string::value_type ***v31;
  const std::string::value_type ***v32;
  const std::string::value_type **v33;
  uint64_t v34;
  uint64_t *v35;
  BOOL v36;
  uint64_t *v37;
  uint64_t v38;
  const std::string::value_type *v39;
  char v40;
  BOOL v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  std::string::size_type v44;
  char v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  std::string *v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::string::size_type __n;
  unint64_t v52;
  uint64_t v53;
  const void *v54[2];
  char v55;
  std::string __p;

  if (a3 == 2)
  {
    if (sub_1DF3833E0(a2) == 0.0)
      v6 = "false";
    else
      v6 = "true";
    std::string::append(a1[1], v6);
    return;
  }
  if ((*a1)->__r_.__value_.__s.__data_[12])
    v8 = a4 == 0;
  else
    v8 = 1;
  if (v8)
  {
LABEL_11:
    v9 = sub_1DF3833E0(a2);
    sub_1DF367CE4(6, &__p, v9);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    std::string::append(a1[1], (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  v12 = sub_1DF3833E0(a2);
  v13 = *(uint64_t **)(a4 + 208);
  v14 = *(uint64_t **)(a4 + 216);
  if (v13 == v14)
  {
LABEL_23:
    if (sub_1DF3833E0(a2) != 0.0)
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&__p, "bit_flags");
      v16 = sub_1DF370B40(a4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
      v17 = (uint64_t *)(a4 + 80) == v16 || v16[7] == 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v17)
      {
        v28 = a1[1];
        if (SHIBYTE(v28->__r_.__value_.__r.__words[2]) < 0)
          v29 = v28->__r_.__value_.__l.__size_;
        else
          v29 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
        __n = v29;
        v30 = sub_1DF3833E0(a2);
        std::string::push_back(a1[1], 34);
        v31 = *(const std::string::value_type ****)(a4 + 208);
        v32 = *(const std::string::value_type ****)(a4 + 216);
        if (v31 != v32)
        {
          v52 = (unint64_t)v30;
          v53 = 0;
          do
          {
            v33 = *v31;
            v34 = (uint64_t)(*v31 + 11);
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = 13;
            strcpy((char *)&__p, "bit_flags_all");
            v35 = sub_1DF370B40(v34, (const void **)&__p.__r_.__value_.__l.__data_);
            if (v33 + 12 == (const std::string::value_type **)v35 || !v35[7])
            {
              v55 = 14;
              strcpy((char *)v54, "bit_flags_none");
              v37 = sub_1DF370B40(v34, v54);
              if (v33 + 12 == (const std::string::value_type **)v37)
                v38 = 0;
              else
                v38 = v37[7];
              v36 = v38 != 0;
              if (v55 < 0)
                operator delete((void *)v54[0]);
            }
            else
            {
              v36 = 1;
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (!v36)
            {
              v39 = v33[17];
              if (((unint64_t)v39 & v52) != 0)
              {
                if ((*a1)->__r_.__value_.__s.__data_[15])
                {
                  v40 = *(_BYTE *)(a4 + 23);
                  v41 = v40 < 0;
                  if (v40 >= 0)
                    v42 = (const std::string::value_type *)a4;
                  else
                    v42 = *(const std::string::value_type **)a4;
                  v43 = v40 & 0x7F;
                  if (v41)
                    v44 = *(_QWORD *)(a4 + 8);
                  else
                    v44 = v43;
                  std::string::append(a1[1], v42, v44);
                }
                v53 |= (unint64_t)v39;
                v45 = *((_BYTE *)*v31 + 23);
                if (v45 >= 0)
                  v46 = (const std::string::value_type *)*v31;
                else
                  v46 = **v31;
                if (v45 >= 0)
                  v47 = v45 & 0x7F;
                else
                  v47 = (std::string::size_type)(*v31)[1];
                std::string::append(a1[1], v46, v47);
                std::string::push_back(a1[1], 32);
              }
            }
            ++v31;
          }
          while (v31 != v32);
          if (v53 && v53 == v52)
          {
            v48 = a1[1];
            if (SHIBYTE(v48->__r_.__value_.__r.__words[2]) < 0)
              v49 = v48->__r_.__value_.__l.__size_;
            else
              v49 = HIBYTE(v48->__r_.__value_.__r.__words[2]);
            v50 = v49 - 1;
            if ((*((_BYTE *)&v48->__r_.__value_.__s + 23) & 0x80) != 0)
              v48 = (std::string *)v48->__r_.__value_.__r.__words[0];
            v48->__r_.__value_.__s.__data_[v50] = 34;
            return;
          }
        }
        std::string::resize(a1[1], __n, 0);
      }
    }
    goto LABEL_11;
  }
  while (1)
  {
    v15 = *v13;
    if (*(_QWORD *)(*v13 + 136) == (uint64_t)v12)
      break;
    if (++v13 == v14)
      goto LABEL_23;
  }
  std::string::push_back(a1[1], 34);
  if ((*a1)->__r_.__value_.__s.__data_[15])
  {
    v18 = *(_BYTE *)(a4 + 23);
    v19 = v18 < 0;
    if (v18 >= 0)
      v20 = (const std::string::value_type *)a4;
    else
      v20 = *(const std::string::value_type **)a4;
    v21 = v18 & 0x7F;
    if (v19)
      v22 = *(_QWORD *)(a4 + 8);
    else
      v22 = v21;
    std::string::append(a1[1], v20, v22);
  }
  v23 = *(_BYTE *)(v15 + 23);
  v24 = v23 < 0;
  if (v23 >= 0)
    v25 = (const std::string::value_type *)v15;
  else
    v25 = *(const std::string::value_type **)v15;
  v26 = v23 & 0x7F;
  if (v24)
    v27 = *(_QWORD *)(v15 + 8);
  else
    v27 = v26;
  std::string::append(a1[1], v25, v27);
  std::string::push_back(a1[1], 34);
}

void sub_1DF3771C4(float *a1, char *a2)
{
  unsigned __int8 v4;
  char *v5;

  v5 = a2;
  v4 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
  {
    qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
    __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
    __cxa_guard_release(&qword_1F04755F0);
  }
  *a1 = strtof_l(a2, &v5, (locale_t)qword_1F04755E8);
  if (v5 == a2 || *v5)
    *a1 = 0.0;
}

void sub_1DF377294(std::string **a1, uint64_t a2, int a3, uint64_t a4)
{
  const std::string::value_type *v6;
  BOOL v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  char v13;
  BOOL v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  char v18;
  BOOL v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type size;
  const std::string::value_type ***v25;
  const std::string::value_type ***v26;
  const std::string::value_type **v27;
  uint64_t v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t v32;
  const std::string::value_type *v33;
  char v34;
  BOOL v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  char v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  void **v44;
  std::string::size_type v45;
  std::string::size_type v46;
  uint64_t v47;
  const void *v48[2];
  char v49;
  void *__p[2];
  char v51;

  if (a3 == 2)
  {
    if (a2)
      v6 = "true";
    else
      v6 = "false";
    std::string::append(a1[1], v6);
    return;
  }
  if ((*a1)->__r_.__value_.__s.__data_[12])
    v8 = a4 == 0;
  else
    v8 = 1;
  if (v8)
    goto LABEL_76;
  for (i = *(uint64_t **)(a4 + 208); i != *(uint64_t **)(a4 + 216); ++i)
  {
    v10 = *i;
    if (*(_QWORD *)(*i + 136) == a2)
    {
      std::string::push_back(a1[1], 34);
      if ((*a1)->__r_.__value_.__s.__data_[15])
      {
        v13 = *(_BYTE *)(a4 + 23);
        v14 = v13 < 0;
        if (v13 >= 0)
          v15 = (const std::string::value_type *)a4;
        else
          v15 = *(const std::string::value_type **)a4;
        v16 = v13 & 0x7F;
        if (v14)
          v17 = *(_QWORD *)(a4 + 8);
        else
          v17 = v16;
        std::string::append(a1[1], v15, v17);
      }
      v18 = *(_BYTE *)(v10 + 23);
      v19 = v18 < 0;
      if (v18 >= 0)
        v20 = (const std::string::value_type *)v10;
      else
        v20 = *(const std::string::value_type **)v10;
      v21 = v18 & 0x7F;
      if (v19)
        v22 = *(_QWORD *)(v10 + 8);
      else
        v22 = v21;
      std::string::append(a1[1], v20, v22);
      std::string::push_back(a1[1], 34);
      return;
    }
  }
  if (!a2)
    goto LABEL_76;
  v51 = 9;
  strcpy((char *)__p, "bit_flags");
  v11 = sub_1DF370B40(a4 + 72, (const void **)__p);
  v12 = (uint64_t *)(a4 + 80) == v11 || v11[7] == 0;
  if (v51 < 0)
  {
    operator delete(__p[0]);
    if (v12)
      goto LABEL_76;
  }
  else if (v12)
  {
LABEL_76:
    sub_1DF356B08();
    if (v51 >= 0)
      v44 = __p;
    else
      v44 = (void **)__p[0];
    if (v51 >= 0)
      v45 = v51 & 0x7F;
    else
      v45 = (std::string::size_type)__p[1];
    std::string::append(a1[1], (const std::string::value_type *)v44, v45);
    if (v51 < 0)
      operator delete(__p[0]);
    return;
  }
  v23 = a1[1];
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
    size = v23->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(v23->__r_.__value_.__r.__words[2]);
  std::string::push_back(v23, 34);
  v25 = *(const std::string::value_type ****)(a4 + 208);
  v26 = *(const std::string::value_type ****)(a4 + 216);
  if (v25 == v26)
  {
LABEL_75:
    std::string::resize(a1[1], size, 0);
    goto LABEL_76;
  }
  v47 = 0;
  do
  {
    v27 = *v25;
    v28 = (uint64_t)(*v25 + 11);
    v51 = 13;
    strcpy((char *)__p, "bit_flags_all");
    v29 = sub_1DF370B40(v28, (const void **)__p);
    if (v27 + 12 == (const std::string::value_type **)v29 || !v29[7])
    {
      v49 = 14;
      strcpy((char *)v48, "bit_flags_none");
      v31 = sub_1DF370B40(v28, v48);
      if (v27 + 12 == (const std::string::value_type **)v31)
        v32 = 0;
      else
        v32 = v31[7];
      v30 = v32 != 0;
      if (v49 < 0)
        operator delete((void *)v48[0]);
    }
    else
    {
      v30 = 1;
    }
    if (v51 < 0)
    {
      operator delete(__p[0]);
      if (v30)
        goto LABEL_70;
    }
    else if (v30)
    {
      goto LABEL_70;
    }
    v33 = v27[17];
    if (((unint64_t)v33 & a2) != 0)
    {
      if ((*a1)->__r_.__value_.__s.__data_[15])
      {
        v34 = *(_BYTE *)(a4 + 23);
        v35 = v34 < 0;
        if (v34 >= 0)
          v36 = (const std::string::value_type *)a4;
        else
          v36 = *(const std::string::value_type **)a4;
        v37 = v34 & 0x7F;
        if (v35)
          v38 = *(_QWORD *)(a4 + 8);
        else
          v38 = v37;
        std::string::append(a1[1], v36, v38);
      }
      v47 |= (unint64_t)v33;
      v39 = *((_BYTE *)*v25 + 23);
      if (v39 >= 0)
        v40 = (const std::string::value_type *)*v25;
      else
        v40 = **v25;
      if (v39 >= 0)
        v41 = v39 & 0x7F;
      else
        v41 = (std::string::size_type)(*v25)[1];
      std::string::append(a1[1], v40, v41);
      std::string::push_back(a1[1], 32);
    }
LABEL_70:
    ++v25;
  }
  while (v25 != v26);
  if (!v47 || v47 != a2)
    goto LABEL_75;
  v42 = a1[1];
  if (SHIBYTE(v42->__r_.__value_.__r.__words[2]) < 0)
    v43 = v42->__r_.__value_.__l.__size_;
  else
    v43 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
  v46 = v43 - 1;
  if ((*((_BYTE *)&v42->__r_.__value_.__s + 23) & 0x80) != 0)
    v42 = (std::string *)v42->__r_.__value_.__r.__words[0];
  v42->__r_.__value_.__s.__data_[v46] = 34;
}

void sub_1DF37766C(std::string **a1, int a2, int a3, uint64_t a4)
{
  const std::string::value_type *v6;
  BOOL v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  char v13;
  BOOL v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  char v18;
  BOOL v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type size;
  const std::string::value_type ***v25;
  const std::string::value_type ***v26;
  const std::string::value_type **v27;
  uint64_t v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t v32;
  const std::string::value_type *v33;
  char v34;
  BOOL v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  char v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  uint64_t v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::string::size_type v47;
  uint64_t v48;
  const void *v49[2];
  char v50;
  void *__p[2];
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char v55;
  uint64_t v56;

  if (a3 == 2)
  {
    if (a2)
      v6 = "true";
    else
      v6 = "false";
    std::string::append(a1[1], v6);
    return;
  }
  if ((*a1)->__r_.__value_.__s.__data_[12])
    v8 = a4 == 0;
  else
    v8 = 1;
  if (v8)
    goto LABEL_76;
  for (i = *(uint64_t **)(a4 + 208); i != *(uint64_t **)(a4 + 216); ++i)
  {
    v10 = *i;
    if (*(_QWORD *)(*i + 136) == a2)
    {
      std::string::push_back(a1[1], 34);
      if ((*a1)->__r_.__value_.__s.__data_[15])
      {
        v13 = *(_BYTE *)(a4 + 23);
        v14 = v13 < 0;
        if (v13 >= 0)
          v15 = (const std::string::value_type *)a4;
        else
          v15 = *(const std::string::value_type **)a4;
        v16 = v13 & 0x7F;
        if (v14)
          v17 = *(_QWORD *)(a4 + 8);
        else
          v17 = v16;
        std::string::append(a1[1], v15, v17);
      }
      v18 = *(_BYTE *)(v10 + 23);
      v19 = v18 < 0;
      if (v18 >= 0)
        v20 = (const std::string::value_type *)v10;
      else
        v20 = *(const std::string::value_type **)v10;
      v21 = v18 & 0x7F;
      if (v19)
        v22 = *(_QWORD *)(v10 + 8);
      else
        v22 = v21;
      std::string::append(a1[1], v20, v22);
      std::string::push_back(a1[1], 34);
      return;
    }
  }
  if (!a2)
    goto LABEL_76;
  HIBYTE(v52) = 9;
  strcpy((char *)__p, "bit_flags");
  v11 = sub_1DF370B40(a4 + 72, (const void **)__p);
  v12 = (uint64_t *)(a4 + 80) == v11 || v11[7] == 0;
  if (SHIBYTE(v52) < 0)
  {
    operator delete(__p[0]);
    if (v12)
    {
LABEL_76:
      sub_1DF367FB0((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      __p[0] = *(void **)MEMORY[0x1E0DE4F50];
      v44 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
      v52 = v44;
      v53 = MEMORY[0x1E0DE4FB8] + 16;
      if (v55 < 0)
        operator delete(v54);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1E0BFF758](&v56);
      if (v50 >= 0)
        v45 = (const std::string::value_type *)v49;
      else
        v45 = (const std::string::value_type *)v49[0];
      if (v50 >= 0)
        v46 = v50 & 0x7F;
      else
        v46 = (std::string::size_type)v49[1];
      std::string::append(a1[1], v45, v46);
      if (v50 < 0)
        operator delete((void *)v49[0]);
      return;
    }
  }
  else if (v12)
  {
    goto LABEL_76;
  }
  v23 = a1[1];
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
    size = v23->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(v23->__r_.__value_.__r.__words[2]);
  std::string::push_back(v23, 34);
  v25 = *(const std::string::value_type ****)(a4 + 208);
  v26 = *(const std::string::value_type ****)(a4 + 216);
  if (v25 == v26)
  {
LABEL_75:
    std::string::resize(a1[1], size, 0);
    goto LABEL_76;
  }
  v48 = 0;
  do
  {
    v27 = *v25;
    v28 = (uint64_t)(*v25 + 11);
    HIBYTE(v52) = 13;
    strcpy((char *)__p, "bit_flags_all");
    v29 = sub_1DF370B40(v28, (const void **)__p);
    if (v27 + 12 == (const std::string::value_type **)v29 || !v29[7])
    {
      v50 = 14;
      strcpy((char *)v49, "bit_flags_none");
      v31 = sub_1DF370B40(v28, v49);
      if (v27 + 12 == (const std::string::value_type **)v31)
        v32 = 0;
      else
        v32 = v31[7];
      v30 = v32 != 0;
      if (v50 < 0)
        operator delete((void *)v49[0]);
    }
    else
    {
      v30 = 1;
    }
    if (SHIBYTE(v52) < 0)
    {
      operator delete(__p[0]);
      if (v30)
        goto LABEL_70;
    }
    else if (v30)
    {
      goto LABEL_70;
    }
    v33 = v27[17];
    if ((v33 & a2) != 0)
    {
      if ((*a1)->__r_.__value_.__s.__data_[15])
      {
        v34 = *(_BYTE *)(a4 + 23);
        v35 = v34 < 0;
        if (v34 >= 0)
          v36 = (const std::string::value_type *)a4;
        else
          v36 = *(const std::string::value_type **)a4;
        v37 = v34 & 0x7F;
        if (v35)
          v38 = *(_QWORD *)(a4 + 8);
        else
          v38 = v37;
        std::string::append(a1[1], v36, v38);
      }
      v48 |= (unint64_t)v33;
      v39 = *((_BYTE *)*v25 + 23);
      if (v39 >= 0)
        v40 = (const std::string::value_type *)*v25;
      else
        v40 = **v25;
      if (v39 >= 0)
        v41 = v39 & 0x7F;
      else
        v41 = (std::string::size_type)(*v25)[1];
      std::string::append(a1[1], v40, v41);
      std::string::push_back(a1[1], 32);
    }
LABEL_70:
    ++v25;
  }
  while (v25 != v26);
  if (!v48 || v48 != a2)
    goto LABEL_75;
  v42 = a1[1];
  if (SHIBYTE(v42->__r_.__value_.__r.__words[2]) < 0)
    v43 = v42->__r_.__value_.__l.__size_;
  else
    v43 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
  v47 = v43 - 1;
  if ((*((_BYTE *)&v42->__r_.__value_.__s + 23) & 0x80) != 0)
    v42 = (std::string *)v42->__r_.__value_.__r.__words[0];
  v42->__r_.__value_.__s.__data_[v47] = 34;
}

void sub_1DF377AC4(std::string **a1, unsigned int a2, int a3, uint64_t a4)
{
  const std::string::value_type *v5;
  BOOL v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  char v13;
  BOOL v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  char v18;
  BOOL v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type size;
  const std::string::value_type ***v25;
  const std::string::value_type ***v26;
  const std::string::value_type **v27;
  uint64_t v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t v32;
  const std::string::value_type *v33;
  char v34;
  BOOL v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  char v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  std::string::size_type v44;
  void **v45;
  std::string::size_type v46;
  std::string::size_type __n;
  uint64_t v48;
  const void *v49[2];
  char v50;
  void *__p[2];
  char v52;

  if (a3 == 2)
  {
    if (a2)
      v5 = "true";
    else
      v5 = "false";
    std::string::append(a1[1], v5);
    return;
  }
  if ((*a1)->__r_.__value_.__s.__data_[12])
    v7 = a4 == 0;
  else
    v7 = 1;
  if (v7)
    goto LABEL_80;
  v8 = a2;
  for (i = *(uint64_t **)(a4 + 208); i != *(uint64_t **)(a4 + 216); ++i)
  {
    v10 = *i;
    if (*(_QWORD *)(*i + 136) == a2)
    {
      std::string::push_back(a1[1], 34);
      if ((*a1)->__r_.__value_.__s.__data_[15])
      {
        v13 = *(_BYTE *)(a4 + 23);
        v14 = v13 < 0;
        if (v13 >= 0)
          v15 = (const std::string::value_type *)a4;
        else
          v15 = *(const std::string::value_type **)a4;
        v16 = v13 & 0x7F;
        if (v14)
          v17 = *(_QWORD *)(a4 + 8);
        else
          v17 = v16;
        std::string::append(a1[1], v15, v17);
      }
      v18 = *(_BYTE *)(v10 + 23);
      v19 = v18 < 0;
      if (v18 >= 0)
        v20 = (const std::string::value_type *)v10;
      else
        v20 = *(const std::string::value_type **)v10;
      v21 = v18 & 0x7F;
      if (v19)
        v22 = *(_QWORD *)(v10 + 8);
      else
        v22 = v21;
      std::string::append(a1[1], v20, v22);
      std::string::push_back(a1[1], 34);
      return;
    }
  }
  if (!a2)
    goto LABEL_80;
  v52 = 9;
  strcpy((char *)__p, "bit_flags");
  v11 = sub_1DF370B40(a4 + 72, (const void **)__p);
  v12 = (uint64_t *)(a4 + 80) == v11 || v11[7] == 0;
  if (v52 < 0)
    operator delete(__p[0]);
  if (v12)
    goto LABEL_80;
  v23 = a1[1];
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
    size = v23->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(v23->__r_.__value_.__r.__words[2]);
  __n = size;
  std::string::push_back(v23, 34);
  v25 = *(const std::string::value_type ****)(a4 + 208);
  v26 = *(const std::string::value_type ****)(a4 + 216);
  if (v25 == v26)
    goto LABEL_79;
  v48 = 0;
  do
  {
    v27 = *v25;
    v28 = (uint64_t)(*v25 + 11);
    v52 = 13;
    strcpy((char *)__p, "bit_flags_all");
    v29 = sub_1DF370B40(v28, (const void **)__p);
    if (v27 + 12 == (const std::string::value_type **)v29 || !v29[7])
    {
      v50 = 14;
      strcpy((char *)v49, "bit_flags_none");
      v31 = sub_1DF370B40(v28, v49);
      if (v27 + 12 == (const std::string::value_type **)v31)
        v32 = 0;
      else
        v32 = v31[7];
      v30 = v32 != 0;
      if (v50 < 0)
        operator delete((void *)v49[0]);
    }
    else
    {
      v30 = 1;
    }
    if (v52 < 0)
    {
      operator delete(__p[0]);
      if (v30)
        goto LABEL_69;
    }
    else if (v30)
    {
      goto LABEL_69;
    }
    v33 = v27[17];
    if (((unint64_t)v33 & v8) != 0)
    {
      if ((*a1)->__r_.__value_.__s.__data_[15])
      {
        v34 = *(_BYTE *)(a4 + 23);
        v35 = v34 < 0;
        if (v34 >= 0)
          v36 = (const std::string::value_type *)a4;
        else
          v36 = *(const std::string::value_type **)a4;
        v37 = v34 & 0x7F;
        if (v35)
          v38 = *(_QWORD *)(a4 + 8);
        else
          v38 = v37;
        std::string::append(a1[1], v36, v38);
      }
      v48 |= (unint64_t)v33;
      v39 = *((_BYTE *)*v25 + 23);
      if (v39 >= 0)
        v40 = (const std::string::value_type *)*v25;
      else
        v40 = **v25;
      if (v39 >= 0)
        v41 = v39 & 0x7F;
      else
        v41 = (std::string::size_type)(*v25)[1];
      std::string::append(a1[1], v40, v41);
      std::string::push_back(a1[1], 32);
    }
LABEL_69:
    ++v25;
  }
  while (v25 != v26);
  if (v48 && v48 == v8)
  {
    v42 = a1[1];
    if (SHIBYTE(v42->__r_.__value_.__r.__words[2]) < 0)
      v43 = v42->__r_.__value_.__l.__size_;
    else
      v43 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
    v44 = v43 - 1;
    if ((*((_BYTE *)&v42->__r_.__value_.__s + 23) & 0x80) != 0)
      v42 = (std::string *)v42->__r_.__value_.__r.__words[0];
    v42->__r_.__value_.__s.__data_[v44] = 34;
    return;
  }
LABEL_79:
  std::string::resize(a1[1], __n, 0);
LABEL_80:
  sub_1DF382738();
  if (v52 >= 0)
    v45 = __p;
  else
    v45 = (void **)__p[0];
  if (v52 >= 0)
    v46 = v52 & 0x7F;
  else
    v46 = (std::string::size_type)__p[1];
  std::string::append(a1[1], (const std::string::value_type *)v45, v46);
  if (v52 < 0)
    operator delete(__p[0]);
}

void sub_1DF377EA4(std::string **a1, int a2, int a3, uint64_t a4)
{
  const std::string::value_type *v6;
  BOOL v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  char v13;
  BOOL v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  char v18;
  BOOL v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type size;
  const std::string::value_type ***v25;
  const std::string::value_type ***v26;
  const std::string::value_type **v27;
  uint64_t v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t v32;
  const std::string::value_type *v33;
  char v34;
  BOOL v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  char v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  uint64_t v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::string::size_type v47;
  uint64_t v48;
  const void *v49[2];
  char v50;
  void *__p[2];
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char v55;
  uint64_t v56;

  if (a3 == 2)
  {
    if (a2)
      v6 = "true";
    else
      v6 = "false";
    std::string::append(a1[1], v6);
    return;
  }
  if ((*a1)->__r_.__value_.__s.__data_[12])
    v8 = a4 == 0;
  else
    v8 = 1;
  if (v8)
    goto LABEL_76;
  for (i = *(uint64_t **)(a4 + 208); i != *(uint64_t **)(a4 + 216); ++i)
  {
    v10 = *i;
    if (*(_QWORD *)(*i + 136) == a2)
    {
      std::string::push_back(a1[1], 34);
      if ((*a1)->__r_.__value_.__s.__data_[15])
      {
        v13 = *(_BYTE *)(a4 + 23);
        v14 = v13 < 0;
        if (v13 >= 0)
          v15 = (const std::string::value_type *)a4;
        else
          v15 = *(const std::string::value_type **)a4;
        v16 = v13 & 0x7F;
        if (v14)
          v17 = *(_QWORD *)(a4 + 8);
        else
          v17 = v16;
        std::string::append(a1[1], v15, v17);
      }
      v18 = *(_BYTE *)(v10 + 23);
      v19 = v18 < 0;
      if (v18 >= 0)
        v20 = (const std::string::value_type *)v10;
      else
        v20 = *(const std::string::value_type **)v10;
      v21 = v18 & 0x7F;
      if (v19)
        v22 = *(_QWORD *)(v10 + 8);
      else
        v22 = v21;
      std::string::append(a1[1], v20, v22);
      std::string::push_back(a1[1], 34);
      return;
    }
  }
  if (!a2)
    goto LABEL_76;
  HIBYTE(v52) = 9;
  strcpy((char *)__p, "bit_flags");
  v11 = sub_1DF370B40(a4 + 72, (const void **)__p);
  v12 = (uint64_t *)(a4 + 80) == v11 || v11[7] == 0;
  if (SHIBYTE(v52) < 0)
  {
    operator delete(__p[0]);
    if (v12)
    {
LABEL_76:
      sub_1DF367FB0((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      __p[0] = *(void **)MEMORY[0x1E0DE4F50];
      v44 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
      v52 = v44;
      v53 = MEMORY[0x1E0DE4FB8] + 16;
      if (v55 < 0)
        operator delete(v54);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1E0BFF758](&v56);
      if (v50 >= 0)
        v45 = (const std::string::value_type *)v49;
      else
        v45 = (const std::string::value_type *)v49[0];
      if (v50 >= 0)
        v46 = v50 & 0x7F;
      else
        v46 = (std::string::size_type)v49[1];
      std::string::append(a1[1], v45, v46);
      if (v50 < 0)
        operator delete((void *)v49[0]);
      return;
    }
  }
  else if (v12)
  {
    goto LABEL_76;
  }
  v23 = a1[1];
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
    size = v23->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(v23->__r_.__value_.__r.__words[2]);
  std::string::push_back(v23, 34);
  v25 = *(const std::string::value_type ****)(a4 + 208);
  v26 = *(const std::string::value_type ****)(a4 + 216);
  if (v25 == v26)
  {
LABEL_75:
    std::string::resize(a1[1], size, 0);
    goto LABEL_76;
  }
  v48 = 0;
  do
  {
    v27 = *v25;
    v28 = (uint64_t)(*v25 + 11);
    HIBYTE(v52) = 13;
    strcpy((char *)__p, "bit_flags_all");
    v29 = sub_1DF370B40(v28, (const void **)__p);
    if (v27 + 12 == (const std::string::value_type **)v29 || !v29[7])
    {
      v50 = 14;
      strcpy((char *)v49, "bit_flags_none");
      v31 = sub_1DF370B40(v28, v49);
      if (v27 + 12 == (const std::string::value_type **)v31)
        v32 = 0;
      else
        v32 = v31[7];
      v30 = v32 != 0;
      if (v50 < 0)
        operator delete((void *)v49[0]);
    }
    else
    {
      v30 = 1;
    }
    if (SHIBYTE(v52) < 0)
    {
      operator delete(__p[0]);
      if (v30)
        goto LABEL_70;
    }
    else if (v30)
    {
      goto LABEL_70;
    }
    v33 = v27[17];
    if ((v33 & a2) != 0)
    {
      if ((*a1)->__r_.__value_.__s.__data_[15])
      {
        v34 = *(_BYTE *)(a4 + 23);
        v35 = v34 < 0;
        if (v34 >= 0)
          v36 = (const std::string::value_type *)a4;
        else
          v36 = *(const std::string::value_type **)a4;
        v37 = v34 & 0x7F;
        if (v35)
          v38 = *(_QWORD *)(a4 + 8);
        else
          v38 = v37;
        std::string::append(a1[1], v36, v38);
      }
      v48 |= (unint64_t)v33;
      v39 = *((_BYTE *)*v25 + 23);
      if (v39 >= 0)
        v40 = (const std::string::value_type *)*v25;
      else
        v40 = **v25;
      if (v39 >= 0)
        v41 = v39 & 0x7F;
      else
        v41 = (std::string::size_type)(*v25)[1];
      std::string::append(a1[1], v40, v41);
      std::string::push_back(a1[1], 32);
    }
LABEL_70:
    ++v25;
  }
  while (v25 != v26);
  if (!v48 || v48 != a2)
    goto LABEL_75;
  v42 = a1[1];
  if (SHIBYTE(v42->__r_.__value_.__r.__words[2]) < 0)
    v43 = v42->__r_.__value_.__l.__size_;
  else
    v43 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
  v47 = v43 - 1;
  if ((*((_BYTE *)&v42->__r_.__value_.__s + 23) & 0x80) != 0)
    v42 = (std::string *)v42->__r_.__value_.__r.__words[0];
  v42->__r_.__value_.__s.__data_[v47] = 34;
}

void sub_1DF3782FC(std::string **a1, int a2, int a3, uint64_t a4)
{
  const std::string::value_type *v6;
  BOOL v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  char v13;
  BOOL v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  char v18;
  BOOL v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type size;
  const std::string::value_type ***v25;
  const std::string::value_type ***v26;
  const std::string::value_type **v27;
  uint64_t v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t v32;
  const std::string::value_type *v33;
  char v34;
  BOOL v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  char v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  uint64_t v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::string::size_type v47;
  uint64_t v48;
  const void *v49[2];
  char v50;
  void *__p[2];
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char v55;
  uint64_t v56;

  if (a3 == 2)
  {
    if (a2)
      v6 = "true";
    else
      v6 = "false";
    std::string::append(a1[1], v6);
    return;
  }
  if ((*a1)->__r_.__value_.__s.__data_[12])
    v8 = a4 == 0;
  else
    v8 = 1;
  if (v8)
    goto LABEL_76;
  for (i = *(uint64_t **)(a4 + 208); i != *(uint64_t **)(a4 + 216); ++i)
  {
    v10 = *i;
    if (*(_QWORD *)(*i + 136) == a2)
    {
      std::string::push_back(a1[1], 34);
      if ((*a1)->__r_.__value_.__s.__data_[15])
      {
        v13 = *(_BYTE *)(a4 + 23);
        v14 = v13 < 0;
        if (v13 >= 0)
          v15 = (const std::string::value_type *)a4;
        else
          v15 = *(const std::string::value_type **)a4;
        v16 = v13 & 0x7F;
        if (v14)
          v17 = *(_QWORD *)(a4 + 8);
        else
          v17 = v16;
        std::string::append(a1[1], v15, v17);
      }
      v18 = *(_BYTE *)(v10 + 23);
      v19 = v18 < 0;
      if (v18 >= 0)
        v20 = (const std::string::value_type *)v10;
      else
        v20 = *(const std::string::value_type **)v10;
      v21 = v18 & 0x7F;
      if (v19)
        v22 = *(_QWORD *)(v10 + 8);
      else
        v22 = v21;
      std::string::append(a1[1], v20, v22);
      std::string::push_back(a1[1], 34);
      return;
    }
  }
  if (!a2)
    goto LABEL_76;
  HIBYTE(v52) = 9;
  strcpy((char *)__p, "bit_flags");
  v11 = sub_1DF370B40(a4 + 72, (const void **)__p);
  v12 = (uint64_t *)(a4 + 80) == v11 || v11[7] == 0;
  if (SHIBYTE(v52) < 0)
  {
    operator delete(__p[0]);
    if (v12)
    {
LABEL_76:
      sub_1DF367FB0((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      __p[0] = *(void **)MEMORY[0x1E0DE4F50];
      v44 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
      v52 = v44;
      v53 = MEMORY[0x1E0DE4FB8] + 16;
      if (v55 < 0)
        operator delete(v54);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1E0BFF758](&v56);
      if (v50 >= 0)
        v45 = (const std::string::value_type *)v49;
      else
        v45 = (const std::string::value_type *)v49[0];
      if (v50 >= 0)
        v46 = v50 & 0x7F;
      else
        v46 = (std::string::size_type)v49[1];
      std::string::append(a1[1], v45, v46);
      if (v50 < 0)
        operator delete((void *)v49[0]);
      return;
    }
  }
  else if (v12)
  {
    goto LABEL_76;
  }
  v23 = a1[1];
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
    size = v23->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(v23->__r_.__value_.__r.__words[2]);
  std::string::push_back(v23, 34);
  v25 = *(const std::string::value_type ****)(a4 + 208);
  v26 = *(const std::string::value_type ****)(a4 + 216);
  if (v25 == v26)
  {
LABEL_75:
    std::string::resize(a1[1], size, 0);
    goto LABEL_76;
  }
  v48 = 0;
  do
  {
    v27 = *v25;
    v28 = (uint64_t)(*v25 + 11);
    HIBYTE(v52) = 13;
    strcpy((char *)__p, "bit_flags_all");
    v29 = sub_1DF370B40(v28, (const void **)__p);
    if (v27 + 12 == (const std::string::value_type **)v29 || !v29[7])
    {
      v50 = 14;
      strcpy((char *)v49, "bit_flags_none");
      v31 = sub_1DF370B40(v28, v49);
      if (v27 + 12 == (const std::string::value_type **)v31)
        v32 = 0;
      else
        v32 = v31[7];
      v30 = v32 != 0;
      if (v50 < 0)
        operator delete((void *)v49[0]);
    }
    else
    {
      v30 = 1;
    }
    if (SHIBYTE(v52) < 0)
    {
      operator delete(__p[0]);
      if (v30)
        goto LABEL_70;
    }
    else if (v30)
    {
      goto LABEL_70;
    }
    v33 = v27[17];
    if (((unint64_t)v33 & a2) != 0)
    {
      if ((*a1)->__r_.__value_.__s.__data_[15])
      {
        v34 = *(_BYTE *)(a4 + 23);
        v35 = v34 < 0;
        if (v34 >= 0)
          v36 = (const std::string::value_type *)a4;
        else
          v36 = *(const std::string::value_type **)a4;
        v37 = v34 & 0x7F;
        if (v35)
          v38 = *(_QWORD *)(a4 + 8);
        else
          v38 = v37;
        std::string::append(a1[1], v36, v38);
      }
      v48 |= (unint64_t)v33;
      v39 = *((_BYTE *)*v25 + 23);
      if (v39 >= 0)
        v40 = (const std::string::value_type *)*v25;
      else
        v40 = **v25;
      if (v39 >= 0)
        v41 = v39 & 0x7F;
      else
        v41 = (std::string::size_type)(*v25)[1];
      std::string::append(a1[1], v40, v41);
      std::string::push_back(a1[1], 32);
    }
LABEL_70:
    ++v25;
  }
  while (v25 != v26);
  if (!v48 || v48 != a2)
    goto LABEL_75;
  v42 = a1[1];
  if (SHIBYTE(v42->__r_.__value_.__r.__words[2]) < 0)
    v43 = v42->__r_.__value_.__l.__size_;
  else
    v43 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
  v47 = v43 - 1;
  if ((*((_BYTE *)&v42->__r_.__value_.__s + 23) & 0x80) != 0)
    v42 = (std::string *)v42->__r_.__value_.__r.__words[0];
  v42->__r_.__value_.__s.__data_[v47] = 34;
}

void sub_1DF378754(std::string **a1, int a2, int a3, uint64_t a4)
{
  const std::string::value_type *v5;
  BOOL v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  char v13;
  BOOL v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  char v18;
  BOOL v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type size;
  const std::string::value_type ***v25;
  const std::string::value_type ***v26;
  const std::string::value_type **v27;
  uint64_t v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t v32;
  const std::string::value_type *v33;
  char v34;
  BOOL v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  char v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  std::string::size_type v44;
  void **v45;
  std::string::size_type v46;
  std::string::size_type __n;
  uint64_t v48;
  const void *v49[2];
  char v50;
  void *__p[2];
  char v52;

  if (a3 == 2)
  {
    if (a2)
      v5 = "true";
    else
      v5 = "false";
    std::string::append(a1[1], v5);
    return;
  }
  if ((*a1)->__r_.__value_.__s.__data_[12])
    v7 = a4 == 0;
  else
    v7 = 1;
  if (v7)
    goto LABEL_80;
  v8 = a2;
  for (i = *(uint64_t **)(a4 + 208); i != *(uint64_t **)(a4 + 216); ++i)
  {
    v10 = *i;
    if (*(_QWORD *)(*i + 136) == a2)
    {
      std::string::push_back(a1[1], 34);
      if ((*a1)->__r_.__value_.__s.__data_[15])
      {
        v13 = *(_BYTE *)(a4 + 23);
        v14 = v13 < 0;
        if (v13 >= 0)
          v15 = (const std::string::value_type *)a4;
        else
          v15 = *(const std::string::value_type **)a4;
        v16 = v13 & 0x7F;
        if (v14)
          v17 = *(_QWORD *)(a4 + 8);
        else
          v17 = v16;
        std::string::append(a1[1], v15, v17);
      }
      v18 = *(_BYTE *)(v10 + 23);
      v19 = v18 < 0;
      if (v18 >= 0)
        v20 = (const std::string::value_type *)v10;
      else
        v20 = *(const std::string::value_type **)v10;
      v21 = v18 & 0x7F;
      if (v19)
        v22 = *(_QWORD *)(v10 + 8);
      else
        v22 = v21;
      std::string::append(a1[1], v20, v22);
      std::string::push_back(a1[1], 34);
      return;
    }
  }
  if (!a2)
    goto LABEL_80;
  v52 = 9;
  strcpy((char *)__p, "bit_flags");
  v11 = sub_1DF370B40(a4 + 72, (const void **)__p);
  v12 = (uint64_t *)(a4 + 80) == v11 || v11[7] == 0;
  if (v52 < 0)
    operator delete(__p[0]);
  if (v12)
    goto LABEL_80;
  v23 = a1[1];
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
    size = v23->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(v23->__r_.__value_.__r.__words[2]);
  __n = size;
  std::string::push_back(v23, 34);
  v25 = *(const std::string::value_type ****)(a4 + 208);
  v26 = *(const std::string::value_type ****)(a4 + 216);
  if (v25 == v26)
    goto LABEL_79;
  v48 = 0;
  do
  {
    v27 = *v25;
    v28 = (uint64_t)(*v25 + 11);
    v52 = 13;
    strcpy((char *)__p, "bit_flags_all");
    v29 = sub_1DF370B40(v28, (const void **)__p);
    if (v27 + 12 == (const std::string::value_type **)v29 || !v29[7])
    {
      v50 = 14;
      strcpy((char *)v49, "bit_flags_none");
      v31 = sub_1DF370B40(v28, v49);
      if (v27 + 12 == (const std::string::value_type **)v31)
        v32 = 0;
      else
        v32 = v31[7];
      v30 = v32 != 0;
      if (v50 < 0)
        operator delete((void *)v49[0]);
    }
    else
    {
      v30 = 1;
    }
    if (v52 < 0)
    {
      operator delete(__p[0]);
      if (v30)
        goto LABEL_69;
    }
    else if (v30)
    {
      goto LABEL_69;
    }
    v33 = v27[17];
    if (((unint64_t)v33 & v8) != 0)
    {
      if ((*a1)->__r_.__value_.__s.__data_[15])
      {
        v34 = *(_BYTE *)(a4 + 23);
        v35 = v34 < 0;
        if (v34 >= 0)
          v36 = (const std::string::value_type *)a4;
        else
          v36 = *(const std::string::value_type **)a4;
        v37 = v34 & 0x7F;
        if (v35)
          v38 = *(_QWORD *)(a4 + 8);
        else
          v38 = v37;
        std::string::append(a1[1], v36, v38);
      }
      v48 |= (unint64_t)v33;
      v39 = *((_BYTE *)*v25 + 23);
      if (v39 >= 0)
        v40 = (const std::string::value_type *)*v25;
      else
        v40 = **v25;
      if (v39 >= 0)
        v41 = v39 & 0x7F;
      else
        v41 = (std::string::size_type)(*v25)[1];
      std::string::append(a1[1], v40, v41);
      std::string::push_back(a1[1], 32);
    }
LABEL_69:
    ++v25;
  }
  while (v25 != v26);
  if (v48 && v48 == v8)
  {
    v42 = a1[1];
    if (SHIBYTE(v42->__r_.__value_.__r.__words[2]) < 0)
      v43 = v42->__r_.__value_.__l.__size_;
    else
      v43 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
    v44 = v43 - 1;
    if ((*((_BYTE *)&v42->__r_.__value_.__s + 23) & 0x80) != 0)
      v42 = (std::string *)v42->__r_.__value_.__r.__words[0];
    v42->__r_.__value_.__s.__data_[v44] = 34;
    return;
  }
LABEL_79:
  std::string::resize(a1[1], __n, 0);
LABEL_80:
  sub_1DF3826CC();
  if (v52 >= 0)
    v45 = __p;
  else
    v45 = (void **)__p[0];
  if (v52 >= 0)
    v46 = v52 & 0x7F;
  else
    v46 = (std::string::size_type)__p[1];
  std::string::append(a1[1], (const std::string::value_type *)v45, v46);
  if (v52 < 0)
    operator delete(__p[0]);
}

void sub_1DF378B34(std::string **a1, uint64_t a2, int a3, uint64_t a4)
{
  const std::string::value_type *v6;
  BOOL v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  char v13;
  BOOL v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  char v18;
  BOOL v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type size;
  const std::string::value_type ***v25;
  const std::string::value_type ***v26;
  const std::string::value_type **v27;
  uint64_t v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t v32;
  const std::string::value_type *v33;
  char v34;
  BOOL v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  char v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  void **v44;
  std::string::size_type v45;
  std::string::size_type v46;
  uint64_t v47;
  const void *v48[2];
  char v49;
  void *__p[2];
  char v51;

  if (a3 == 2)
  {
    if (a2)
      v6 = "true";
    else
      v6 = "false";
    std::string::append(a1[1], v6);
    return;
  }
  if ((*a1)->__r_.__value_.__s.__data_[12])
    v8 = a4 == 0;
  else
    v8 = 1;
  if (v8)
    goto LABEL_76;
  for (i = *(uint64_t **)(a4 + 208); i != *(uint64_t **)(a4 + 216); ++i)
  {
    v10 = *i;
    if (*(_QWORD *)(*i + 136) == a2)
    {
      std::string::push_back(a1[1], 34);
      if ((*a1)->__r_.__value_.__s.__data_[15])
      {
        v13 = *(_BYTE *)(a4 + 23);
        v14 = v13 < 0;
        if (v13 >= 0)
          v15 = (const std::string::value_type *)a4;
        else
          v15 = *(const std::string::value_type **)a4;
        v16 = v13 & 0x7F;
        if (v14)
          v17 = *(_QWORD *)(a4 + 8);
        else
          v17 = v16;
        std::string::append(a1[1], v15, v17);
      }
      v18 = *(_BYTE *)(v10 + 23);
      v19 = v18 < 0;
      if (v18 >= 0)
        v20 = (const std::string::value_type *)v10;
      else
        v20 = *(const std::string::value_type **)v10;
      v21 = v18 & 0x7F;
      if (v19)
        v22 = *(_QWORD *)(v10 + 8);
      else
        v22 = v21;
      std::string::append(a1[1], v20, v22);
      std::string::push_back(a1[1], 34);
      return;
    }
  }
  if (!a2)
    goto LABEL_76;
  v51 = 9;
  strcpy((char *)__p, "bit_flags");
  v11 = sub_1DF370B40(a4 + 72, (const void **)__p);
  v12 = (uint64_t *)(a4 + 80) == v11 || v11[7] == 0;
  if (v51 < 0)
  {
    operator delete(__p[0]);
    if (v12)
      goto LABEL_76;
  }
  else if (v12)
  {
LABEL_76:
    sub_1DF345C20();
    if (v51 >= 0)
      v44 = __p;
    else
      v44 = (void **)__p[0];
    if (v51 >= 0)
      v45 = v51 & 0x7F;
    else
      v45 = (std::string::size_type)__p[1];
    std::string::append(a1[1], (const std::string::value_type *)v44, v45);
    if (v51 < 0)
      operator delete(__p[0]);
    return;
  }
  v23 = a1[1];
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
    size = v23->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(v23->__r_.__value_.__r.__words[2]);
  std::string::push_back(v23, 34);
  v25 = *(const std::string::value_type ****)(a4 + 208);
  v26 = *(const std::string::value_type ****)(a4 + 216);
  if (v25 == v26)
  {
LABEL_75:
    std::string::resize(a1[1], size, 0);
    goto LABEL_76;
  }
  v47 = 0;
  do
  {
    v27 = *v25;
    v28 = (uint64_t)(*v25 + 11);
    v51 = 13;
    strcpy((char *)__p, "bit_flags_all");
    v29 = sub_1DF370B40(v28, (const void **)__p);
    if (v27 + 12 == (const std::string::value_type **)v29 || !v29[7])
    {
      v49 = 14;
      strcpy((char *)v48, "bit_flags_none");
      v31 = sub_1DF370B40(v28, v48);
      if (v27 + 12 == (const std::string::value_type **)v31)
        v32 = 0;
      else
        v32 = v31[7];
      v30 = v32 != 0;
      if (v49 < 0)
        operator delete((void *)v48[0]);
    }
    else
    {
      v30 = 1;
    }
    if (v51 < 0)
    {
      operator delete(__p[0]);
      if (v30)
        goto LABEL_70;
    }
    else if (v30)
    {
      goto LABEL_70;
    }
    v33 = v27[17];
    if (((unint64_t)v33 & a2) != 0)
    {
      if ((*a1)->__r_.__value_.__s.__data_[15])
      {
        v34 = *(_BYTE *)(a4 + 23);
        v35 = v34 < 0;
        if (v34 >= 0)
          v36 = (const std::string::value_type *)a4;
        else
          v36 = *(const std::string::value_type **)a4;
        v37 = v34 & 0x7F;
        if (v35)
          v38 = *(_QWORD *)(a4 + 8);
        else
          v38 = v37;
        std::string::append(a1[1], v36, v38);
      }
      v47 |= (unint64_t)v33;
      v39 = *((_BYTE *)*v25 + 23);
      if (v39 >= 0)
        v40 = (const std::string::value_type *)*v25;
      else
        v40 = **v25;
      if (v39 >= 0)
        v41 = v39 & 0x7F;
      else
        v41 = (std::string::size_type)(*v25)[1];
      std::string::append(a1[1], v40, v41);
      std::string::push_back(a1[1], 32);
    }
LABEL_70:
    ++v25;
  }
  while (v25 != v26);
  if (!v47 || v47 != a2)
    goto LABEL_75;
  v42 = a1[1];
  if (SHIBYTE(v42->__r_.__value_.__r.__words[2]) < 0)
    v43 = v42->__r_.__value_.__l.__size_;
  else
    v43 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
  v46 = v43 - 1;
  if ((*((_BYTE *)&v42->__r_.__value_.__s + 23) & 0x80) != 0)
    v42 = (std::string *)v42->__r_.__value_.__r.__words[0];
  v42->__r_.__value_.__s.__data_[v46] = 34;
}

void sub_1DF378F0C(std::string **a1, int a2, uint64_t a3, float a4)
{
  const std::string::value_type *v6;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  char v14;
  BOOL v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string::size_type v18;
  char v19;
  BOOL v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type size;
  const std::string::value_type ***v26;
  const std::string::value_type ***v27;
  uint64_t v28;
  const std::string::value_type **v29;
  uint64_t v30;
  uint64_t *v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t v34;
  const std::string::value_type *v35;
  char v36;
  BOOL v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  std::string::size_type v40;
  char v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *p_p;
  std::string::size_type v47;
  std::string::size_type v48;
  unint64_t v49;
  const void *v50[2];
  char v51;
  std::string __p;

  if (a2 == 2)
  {
    if (a4 == 0.0)
      v6 = "false";
    else
      v6 = "true";
    std::string::append(a1[1], v6);
    return;
  }
  if ((*a1)->__r_.__value_.__s.__data_[12])
    v8 = a3 == 0;
  else
    v8 = 1;
  if (v8)
    goto LABEL_75;
  v9 = *(uint64_t **)(a3 + 208);
  v10 = *(uint64_t **)(a3 + 216);
  if (v9 == v10)
  {
LABEL_13:
    if (a4 == 0.0)
      goto LABEL_75;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&__p, "bit_flags");
    v12 = sub_1DF370B40(a3 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    v13 = (uint64_t *)(a3 + 80) == v12 || v12[7] == 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v13)
        goto LABEL_75;
    }
    else if (v13)
    {
      goto LABEL_75;
    }
    v24 = a1[1];
    if (SHIBYTE(v24->__r_.__value_.__r.__words[2]) < 0)
      size = v24->__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v24->__r_.__value_.__r.__words[2]);
    std::string::push_back(v24, 34);
    v26 = *(const std::string::value_type ****)(a3 + 208);
    v27 = *(const std::string::value_type ****)(a3 + 216);
    if (v26 == v27)
      goto LABEL_74;
    v28 = 0;
    v49 = (unint64_t)a4;
    while (1)
    {
      v29 = *v26;
      v30 = (uint64_t)(*v26 + 11);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 13;
      strcpy((char *)&__p, "bit_flags_all");
      v31 = sub_1DF370B40(v30, (const void **)&__p.__r_.__value_.__l.__data_);
      if (v29 + 12 == (const std::string::value_type **)v31 || !v31[7])
      {
        v51 = 14;
        strcpy((char *)v50, "bit_flags_none");
        v33 = sub_1DF370B40(v30, v50);
        if (v29 + 12 == (const std::string::value_type **)v33)
          v34 = 0;
        else
          v34 = v33[7];
        v32 = v34 != 0;
        if (v51 < 0)
          operator delete((void *)v50[0]);
      }
      else
      {
        v32 = 1;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v32)
        {
LABEL_53:
          v35 = v29[17];
          if (((unint64_t)v35 & v49) != 0)
          {
            if ((*a1)->__r_.__value_.__s.__data_[15])
            {
              v36 = *(_BYTE *)(a3 + 23);
              v37 = v36 < 0;
              if (v36 >= 0)
                v38 = (const std::string::value_type *)a3;
              else
                v38 = *(const std::string::value_type **)a3;
              v39 = v36 & 0x7F;
              if (v37)
                v40 = *(_QWORD *)(a3 + 8);
              else
                v40 = v39;
              std::string::append(a1[1], v38, v40);
            }
            v28 |= (unint64_t)v35;
            v41 = *((_BYTE *)*v26 + 23);
            if (v41 >= 0)
              v42 = (const std::string::value_type *)*v26;
            else
              v42 = **v26;
            if (v41 >= 0)
              v43 = v41 & 0x7F;
            else
              v43 = (std::string::size_type)(*v26)[1];
            std::string::append(a1[1], v42, v43);
            std::string::push_back(a1[1], 32);
          }
        }
      }
      else if (!v32)
      {
        goto LABEL_53;
      }
      if (++v26 == v27)
      {
        if (v28 && v28 == v49)
        {
          v44 = a1[1];
          if (SHIBYTE(v44->__r_.__value_.__r.__words[2]) < 0)
            v45 = v44->__r_.__value_.__l.__size_;
          else
            v45 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
          v48 = v45 - 1;
          if ((*((_BYTE *)&v44->__r_.__value_.__s + 23) & 0x80) != 0)
            v44 = (std::string *)v44->__r_.__value_.__r.__words[0];
          v44->__r_.__value_.__s.__data_[v48] = 34;
          return;
        }
LABEL_74:
        std::string::resize(a1[1], size, 0);
LABEL_75:
        sub_1DF367CE4(6, &__p, a4);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          v47 = __p.__r_.__value_.__l.__size_;
        std::string::append(a1[1], (const std::string::value_type *)p_p, v47);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return;
      }
    }
  }
  while (1)
  {
    v11 = *v9;
    if (*(_QWORD *)(*v9 + 136) == (uint64_t)a4)
      break;
    if (++v9 == v10)
      goto LABEL_13;
  }
  std::string::push_back(a1[1], 34);
  if ((*a1)->__r_.__value_.__s.__data_[15])
  {
    v14 = *(_BYTE *)(a3 + 23);
    v15 = v14 < 0;
    if (v14 >= 0)
      v16 = (const std::string::value_type *)a3;
    else
      v16 = *(const std::string::value_type **)a3;
    v17 = v14 & 0x7F;
    if (v15)
      v18 = *(_QWORD *)(a3 + 8);
    else
      v18 = v17;
    std::string::append(a1[1], v16, v18);
  }
  v19 = *(_BYTE *)(v11 + 23);
  v20 = v19 < 0;
  if (v19 >= 0)
    v21 = (const std::string::value_type *)v11;
  else
    v21 = *(const std::string::value_type **)v11;
  v22 = v19 & 0x7F;
  if (v20)
    v23 = *(_QWORD *)(v11 + 8);
  else
    v23 = v22;
  std::string::append(a1[1], v21, v23);
  std::string::push_back(a1[1], 34);
}

void sub_1DF37930C(std::string **a1, int a2, uint64_t a3, double a4)
{
  const std::string::value_type *v6;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  char v14;
  BOOL v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string::size_type v18;
  char v19;
  BOOL v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type size;
  const std::string::value_type ***v26;
  const std::string::value_type ***v27;
  uint64_t v28;
  const std::string::value_type **v29;
  uint64_t v30;
  uint64_t *v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t v34;
  const std::string::value_type *v35;
  char v36;
  BOOL v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  std::string::size_type v40;
  char v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *p_p;
  std::string::size_type v47;
  std::string::size_type v48;
  unint64_t v49;
  const void *v50[2];
  char v51;
  std::string __p;

  if (a2 == 2)
  {
    if (a4 == 0.0)
      v6 = "false";
    else
      v6 = "true";
    std::string::append(a1[1], v6);
    return;
  }
  if ((*a1)->__r_.__value_.__s.__data_[12])
    v8 = a3 == 0;
  else
    v8 = 1;
  if (v8)
    goto LABEL_75;
  v9 = *(uint64_t **)(a3 + 208);
  v10 = *(uint64_t **)(a3 + 216);
  if (v9 == v10)
  {
LABEL_13:
    if (a4 == 0.0)
      goto LABEL_75;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&__p, "bit_flags");
    v12 = sub_1DF370B40(a3 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    v13 = (uint64_t *)(a3 + 80) == v12 || v12[7] == 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v13)
        goto LABEL_75;
    }
    else if (v13)
    {
      goto LABEL_75;
    }
    v24 = a1[1];
    if (SHIBYTE(v24->__r_.__value_.__r.__words[2]) < 0)
      size = v24->__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v24->__r_.__value_.__r.__words[2]);
    std::string::push_back(v24, 34);
    v26 = *(const std::string::value_type ****)(a3 + 208);
    v27 = *(const std::string::value_type ****)(a3 + 216);
    if (v26 == v27)
      goto LABEL_74;
    v28 = 0;
    v49 = (unint64_t)a4;
    while (1)
    {
      v29 = *v26;
      v30 = (uint64_t)(*v26 + 11);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 13;
      strcpy((char *)&__p, "bit_flags_all");
      v31 = sub_1DF370B40(v30, (const void **)&__p.__r_.__value_.__l.__data_);
      if (v29 + 12 == (const std::string::value_type **)v31 || !v31[7])
      {
        v51 = 14;
        strcpy((char *)v50, "bit_flags_none");
        v33 = sub_1DF370B40(v30, v50);
        if (v29 + 12 == (const std::string::value_type **)v33)
          v34 = 0;
        else
          v34 = v33[7];
        v32 = v34 != 0;
        if (v51 < 0)
          operator delete((void *)v50[0]);
      }
      else
      {
        v32 = 1;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v32)
        {
LABEL_53:
          v35 = v29[17];
          if (((unint64_t)v35 & v49) != 0)
          {
            if ((*a1)->__r_.__value_.__s.__data_[15])
            {
              v36 = *(_BYTE *)(a3 + 23);
              v37 = v36 < 0;
              if (v36 >= 0)
                v38 = (const std::string::value_type *)a3;
              else
                v38 = *(const std::string::value_type **)a3;
              v39 = v36 & 0x7F;
              if (v37)
                v40 = *(_QWORD *)(a3 + 8);
              else
                v40 = v39;
              std::string::append(a1[1], v38, v40);
            }
            v28 |= (unint64_t)v35;
            v41 = *((_BYTE *)*v26 + 23);
            if (v41 >= 0)
              v42 = (const std::string::value_type *)*v26;
            else
              v42 = **v26;
            if (v41 >= 0)
              v43 = v41 & 0x7F;
            else
              v43 = (std::string::size_type)(*v26)[1];
            std::string::append(a1[1], v42, v43);
            std::string::push_back(a1[1], 32);
          }
        }
      }
      else if (!v32)
      {
        goto LABEL_53;
      }
      if (++v26 == v27)
      {
        if (v28 && v28 == v49)
        {
          v44 = a1[1];
          if (SHIBYTE(v44->__r_.__value_.__r.__words[2]) < 0)
            v45 = v44->__r_.__value_.__l.__size_;
          else
            v45 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
          v48 = v45 - 1;
          if ((*((_BYTE *)&v44->__r_.__value_.__s + 23) & 0x80) != 0)
            v44 = (std::string *)v44->__r_.__value_.__r.__words[0];
          v44->__r_.__value_.__s.__data_[v48] = 34;
          return;
        }
LABEL_74:
        std::string::resize(a1[1], size, 0);
LABEL_75:
        sub_1DF362EF8(12, &__p, a4);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          v47 = __p.__r_.__value_.__l.__size_;
        std::string::append(a1[1], (const std::string::value_type *)p_p, v47);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return;
      }
    }
  }
  while (1)
  {
    v11 = *v9;
    if (*(_QWORD *)(*v9 + 136) == (uint64_t)a4)
      break;
    if (++v9 == v10)
      goto LABEL_13;
  }
  std::string::push_back(a1[1], 34);
  if ((*a1)->__r_.__value_.__s.__data_[15])
  {
    v14 = *(_BYTE *)(a3 + 23);
    v15 = v14 < 0;
    if (v14 >= 0)
      v16 = (const std::string::value_type *)a3;
    else
      v16 = *(const std::string::value_type **)a3;
    v17 = v14 & 0x7F;
    if (v15)
      v18 = *(_QWORD *)(a3 + 8);
    else
      v18 = v17;
    std::string::append(a1[1], v16, v18);
  }
  v19 = *(_BYTE *)(v11 + 23);
  v20 = v19 < 0;
  if (v19 >= 0)
    v21 = (const std::string::value_type *)v11;
  else
    v21 = *(const std::string::value_type **)v11;
  v22 = v19 & 0x7F;
  if (v20)
    v23 = *(_QWORD *)(v11 + 8);
  else
    v23 = v22;
  std::string::append(a1[1], v21, v23);
  std::string::push_back(a1[1], 34);
}

void sub_1DF37970C(double *a1, char *a2)
{
  unsigned __int8 v4;
  char *v5;

  v5 = a2;
  v4 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
  {
    qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
    __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
    __cxa_guard_release(&qword_1F04755F0);
  }
  *a1 = strtod_l(a2, &v5, (locale_t)qword_1F04755E8);
  if (v5 == a2 || *v5)
    *a1 = 0.0;
}

uint64_t sub_1DF3797DC(std::string **a1, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int a6)
{
  uint64_t v8;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int16 v21;

  v8 = a6;
LABEL_2:
  switch(*(_DWORD *)a3)
  {
    case 0xD:
      return sub_1DF379BAC((uint64_t)(a2 + 1), *a2, a1[1], (*a1)[5].__r_.__value_.__s.__data_[17], (*a1)[5].__r_.__value_.__s.__data_[18]);
    case 0xE:
      v10 = *(_DWORD *)(a3 + 4);
      v11 = *(_WORD *)(a3 + 24);
      v18 = v10;
      v19 = 0;
      v20 = *(_OWORD *)(a3 + 8);
      v21 = v11;
      if (v10 != 15)
      {
        switch(v10)
        {
          case -4:
            sub_1DF37A0B4(a1, (uint64_t)a2, *a2, (uint64_t)&v18, a4);
            return 1;
          case -3:
          case 10:
            sub_1DF37A254(a1, (uint64_t)a2, *a2, (uint64_t)&v18, a4);
            return 1;
          case -2:
          case 8:
            sub_1DF37A3F4(a1, (uint64_t)a2, *a2, (uint64_t)&v18, a4);
            return 1;
          case -1:
          case 6:
            sub_1DF37A594(a1, (uint64_t)a2, *a2, (uint64_t)&v18, a4);
            return 1;
          case 0:
          case 1:
          case 2:
          case 4:
            sub_1DF37A734(a1, (uint64_t)a2, *a2, (uint64_t)&v18, a4);
            return 1;
          case 3:
            sub_1DF37A8D4(a1, (uint64_t)a2, *a2, (uint64_t)&v18, a4);
            return 1;
          case 5:
            sub_1DF37AA74(a1, (uint64_t)a2, *a2, (uint64_t)&v18, a4);
            return 1;
          case 7:
          case 17:
            sub_1DF37AC14(a1, (uint64_t)a2, *a2, (uint64_t)&v18, a4);
            return 1;
          case 9:
            sub_1DF37ADB4(a1, (uint64_t)a2, *a2, (uint64_t)&v18, a4);
            return 1;
          case 11:
            sub_1DF37AF54(a1, (uint64_t)a2, *a2, (uint64_t)&v18, a4);
            return 1;
          case 12:
            sub_1DF37B0F4(a1, (uint64_t)a2, *a2, (uint64_t)&v18, a4);
            return 1;
          case 13:
          case 14:
          case 16:
            break;
          default:
            return 1;
        }
      }
      return (sub_1DF37B294(a1, (uint64_t)a2, *a2, (uint64_t)&v18, a4) & 1) != 0;
    case 0xF:
      return sub_1DF375BFC(a1, *(_QWORD *)(a3 + 8), a2, a4);
    case 0x10:
      v13 = *(_QWORD *)(a3 + 16);
      switch(*(_DWORD *)(v13 + 152))
      {
        case 0xFFFFFFFD:
          if ((v8 & 0x80000000) != 0)
            v14 = *(_QWORD *)a5;
          else
            v14 = *(_QWORD *)((char *)&a5[2 * v8 + 1] + *a5);
          break;
        case 0xFFFFFFFE:
          v14 = *a5;
          if ((v8 & 0x80000000) == 0)
            v14 = *(unsigned int *)((char *)&a5[v8 + 1] + v14);
          break;
        case 0xFFFFFFFF:
          if ((v8 & 0x80000000) != 0)
            v14 = *(unsigned __int16 *)a5;
          else
            v14 = *(unsigned __int16 *)((char *)a5 + 2 * v8 + *a5 + 4);
          break;
        case 1:
          if ((v8 & 0x80000000) != 0)
            v14 = *(unsigned __int8 *)a5;
          else
            v14 = *((unsigned __int8 *)a5 + v8 + *a5 + 4);
          break;
        default:
          abort();
      }
      v16 = *(_QWORD *)(v13 + 216);
      v17 = *(_QWORD *)(v13 + 208) + 8 * *(unsigned __int8 *)(v13 + 148);
      if (v17 == v16)
        return 0;
      break;
    case 0x11:
      v15 = *(unsigned __int16 *)(a3 + 24);
      v18 = *(_DWORD *)(a3 + 4);
      v19 = 0;
      v20 = *(_OWORD *)(a3 + 8);
      v21 = v15;
      switch(v18)
      {
        case -4:
          sub_1DF37B42C(a1, (uint64_t)a2, v15, (uint64_t)&v18, a4);
          return 1;
        case -3:
        case 10:
          sub_1DF37B5C8(a1, (uint64_t)a2, v15, (uint64_t)&v18, a4);
          return 1;
        case -2:
        case 8:
          sub_1DF37B764(a1, (uint64_t)a2, v15, (uint64_t)&v18, a4);
          return 1;
        case -1:
        case 6:
          sub_1DF37B900(a1, (uint64_t)a2, v15, (uint64_t)&v18, a4);
          return 1;
        case 0:
        case 1:
        case 2:
        case 4:
          sub_1DF37BA9C(a1, (uint64_t)a2, v15, (uint64_t)&v18, a4);
          return 1;
        case 3:
          sub_1DF37BC38(a1, (uint64_t)a2, v15, (uint64_t)&v18, a4);
          return 1;
        case 5:
          sub_1DF37BDD4(a1, (uint64_t)a2, v15, (uint64_t)&v18, a4);
          return 1;
        case 7:
          sub_1DF37BF70(a1, (uint64_t)a2, v15, (uint64_t)&v18, a4);
          return 1;
        case 9:
          sub_1DF37C10C(a1, (uint64_t)a2, v15, (uint64_t)&v18, a4);
          return 1;
        case 11:
          sub_1DF37C2A8(a1, (uint64_t)a2, v15, (uint64_t)&v18, a4);
          return 1;
        case 12:
          sub_1DF37C444(a1, (uint64_t)a2, v15, (uint64_t)&v18, a4);
          return 1;
        case 13:
        case 14:
        case 15:
          return (sub_1DF37C5E0(a1, (uint64_t)a2, v15, (uint64_t)&v18, a4) & 1) != 0;
        case 16:
          return sub_1DF37C5E0(a1, (uint64_t)a2, v15, (uint64_t)&v18, a4) != 0;
        default:
          return 1;
      }
    default:
      return 0;
  }
  do
  {
    if (*(_QWORD *)(*(_QWORD *)v17 + 136) == v14)
    {
      a5 = 0;
      a3 = *(_QWORD *)v17 + 48;
      v8 = 0xFFFFFFFFLL;
      goto LABEL_2;
    }
    v12 = 0;
    v17 += 8;
  }
  while (v17 != v16);
  return v12;
}

uint64_t sub_1DF379BAC(uint64_t a1, unint64_t a2, std::string *this, int a4, int a5)
{
  uint64_t v8;
  unsigned int v9;
  const char *v10;
  const char *v11;
  const std::string::value_type *v12;
  uint64_t v13;
  std::string *v14;
  const std::string::value_type *v15;
  const char *v16;
  const char *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  char *v24;
  char v25;
  uint64_t v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  const std::string::value_type *p_p;
  std::string::size_type v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  void *__p;
  std::string::size_type v37;
  char v38;

  std::string::append(this, "\"");
  if (!a2)
  {
LABEL_79:
    std::string::append(this, "\"");
    return 1;
  }
  v8 = 0;
  v9 = 0;
  v10 = "\\\"";
  v11 = "\\\\";
  while (2)
  {
    v12 = (const std::string::value_type *)(a1 + v8);
    v13 = *(char *)(a1 + v8);
    switch(*(_BYTE *)(a1 + v8))
    {
      case 8:
        v14 = this;
        v15 = "\\b";
        goto LABEL_15;
      case 9:
        v14 = this;
        v15 = "\\t";
        goto LABEL_15;
      case 0xA:
        v14 = this;
        v15 = "\\n";
        goto LABEL_15;
      case 0xB:
        goto LABEL_8;
      case 0xC:
        v14 = this;
        v15 = "\\f";
        goto LABEL_15;
      case 0xD:
        v14 = this;
        v15 = "\\r";
        goto LABEL_15;
      default:
        if ((_DWORD)v13 == 34)
        {
          v14 = this;
          v15 = v10;
          goto LABEL_15;
        }
        if ((_DWORD)v13 == 92)
        {
          v14 = this;
          v15 = v11;
LABEL_15:
          std::string::append(v14, v15);
          goto LABEL_16;
        }
LABEL_8:
        if ((v13 - 32) <= 0x5E)
        {
          std::string::push_back(this, *(_BYTE *)(a1 + v8));
LABEL_16:
          v8 = ++v9;
          if (v9 >= a2)
            goto LABEL_79;
          continue;
        }
        v16 = v11;
        v17 = v10;
        v18 = 0;
        v19 = *(unsigned __int8 *)(a1 + v8);
        v20 = 128;
        v21 = -1;
        while ((v20 & v19) != 0)
        {
          ++v18;
          v20 >>= 1;
          ++v21;
          if (v18 == 6)
            goto LABEL_23;
        }
        if ((((_DWORD)v19 << v18) & 0x80) == 0)
        {
          if (v18)
          {
            if (v18 == 1 || v18 > 4)
              goto LABEL_23;
            v24 = (char *)(v12 + 1);
            LODWORD(v13) = v13 & ~(-1 << (7 - v18));
            do
            {
              v25 = *v24;
              if ((*v24 & 0xC0) != 0x80)
                goto LABEL_23;
              ++v24;
              v13 = v25 & 0x3Fu | ((_DWORD)v13 << 6);
              --v21;
            }
            while (v21);
            v26 = a1 + 2 + v8 + v18 - 2;
            if (v13 >> 11 == 27)
              goto LABEL_23;
            if (v18 == 4)
            {
              if ((v13 - 1114112) < 0xFFF00000)
                goto LABEL_23;
            }
            else if (v18 == 3)
            {
              if ((v13 - 0x10000) < 0xFFFF0800)
                goto LABEL_23;
            }
            else if ((v13 - 2048) < 0xFFFFF880)
            {
              goto LABEL_23;
            }
          }
          else
          {
            v26 = (uint64_t)(v12 + 1);
            if ((v13 & 0x80000000) != 0)
              goto LABEL_23;
          }
          if (a5)
          {
            std::string::append(this, v12, v26 - (v8 + a1));
          }
          else
          {
            if (WORD1(v13))
            {
              if (WORD1(v13) > 0x10u)
                goto LABEL_50;
              std::string::append(this, "\\u");
              sub_1DF38442C(((v13 - 0x10000) >> 10) + 55296, 4);
              if (v38 >= 0)
                p_p = (const std::string::value_type *)&__p;
              else
                p_p = (const std::string::value_type *)__p;
              if (v38 >= 0)
                v30 = v38 & 0x7F;
              else
                v30 = v37;
              std::string::append(this, p_p, v30);
              if (v38 < 0)
                operator delete(__p);
              std::string::append(this, "\\u");
              sub_1DF38442C(v13 & 0x3FF | 0xDC00, 4);
              v31 = v38 >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
              v32 = v38 >= 0 ? v38 & 0x7F : v37;
              std::string::append(this, v31, v32);
              if ((v38 & 0x80000000) == 0)
                goto LABEL_50;
            }
            else
            {
              std::string::append(this, "\\u");
              sub_1DF38442C(v13, 4);
              if (v38 >= 0)
                v27 = (const std::string::value_type *)&__p;
              else
                v27 = (const std::string::value_type *)__p;
              if (v38 >= 0)
                v28 = v38 & 0x7F;
              else
                v28 = v37;
              std::string::append(this, v27, v28);
              if ((v38 & 0x80000000) == 0)
                goto LABEL_50;
            }
            operator delete(__p);
          }
LABEL_50:
          v9 = v26 + ~(_DWORD)a1;
          v10 = v17;
          v11 = v16;
          goto LABEL_16;
        }
LABEL_23:
        if (a4)
        {
          std::string::append(this, "\\x");
          sub_1DF38442C(v19, 2);
          if (v38 >= 0)
            v22 = (const std::string::value_type *)&__p;
          else
            v22 = (const std::string::value_type *)__p;
          if (v38 >= 0)
            v23 = v38 & 0x7F;
          else
            v23 = v37;
          std::string::append(this, v22, v23);
          if (v38 < 0)
            operator delete(__p);
          v10 = v17;
          v11 = v16;
          goto LABEL_16;
        }
        return 0;
    }
  }
}

uint64_t sub_1DF37A034(std::ios_base *this, std::ios_base::fmtflags a2)
{
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v5;
  char v6;
  std::locale v8;

  fmtflags = this[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(this);
    v5 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    LOBYTE(fmtflags) = v6;
  }
  this[1].__fmtflags_ = a2;
  return (char)fmtflags;
}

void sub_1DF37A0B4(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v20;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v20 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = a2 + 4;
    v17 = 1;
    do
    {
      if (v17 == 1)
      {
        v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v18 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v18)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v18)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF376D98(a1, *(_WORD *)(v16 + 2 * v12), *(_DWORD *)a4, *(_QWORD *)(a4 + 16));
      ++v13;
      v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37A254(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v20;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v20 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = a2 + 4;
    v17 = 1;
    do
    {
      if (v17 == 1)
      {
        v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v18 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v18)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v18)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF377294(a1, *(_QWORD *)(v16 + 8 * v12), *(_DWORD *)a4, *(_QWORD *)(a4 + 16));
      ++v13;
      v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37A3F4(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v20;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v20 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = a2 + 4;
    v17 = 1;
    do
    {
      if (v17 == 1)
      {
        v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v18 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v18)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v18)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF37766C(a1, *(_DWORD *)(v16 + 4 * v12), *(_DWORD *)a4, *(_QWORD *)(a4 + 16));
      ++v13;
      v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37A594(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v20;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v20 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = a2 + 4;
    v17 = 1;
    do
    {
      if (v17 == 1)
      {
        v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v18 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v18)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v18)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF377AC4(a1, *(unsigned __int16 *)(v16 + 2 * v12), *(_DWORD *)a4, *(_QWORD *)(a4 + 16));
      ++v13;
      v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37A734(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v20;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v20 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = a2 + 4;
    v17 = 1;
    do
    {
      if (v17 == 1)
      {
        v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v18 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v18)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v18)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF377EA4(a1, *(unsigned __int8 *)(v16 + v12), *(_DWORD *)a4, *(_QWORD *)(a4 + 16));
      ++v13;
      v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37A8D4(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v20;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v20 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = a2 + 4;
    v17 = 1;
    do
    {
      if (v17 == 1)
      {
        v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v18 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v18)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v18)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF3782FC(a1, *(char *)(v16 + v12), *(_DWORD *)a4, *(_QWORD *)(a4 + 16));
      ++v13;
      v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37AA74(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v20;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v20 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = a2 + 4;
    v17 = 1;
    do
    {
      if (v17 == 1)
      {
        v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v18 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v18)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v18)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF378754(a1, *(__int16 *)(v16 + 2 * v12), *(_DWORD *)a4, *(_QWORD *)(a4 + 16));
      ++v13;
      v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37AC14(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v20;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v20 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = a2 + 4;
    v17 = 1;
    do
    {
      if (v17 == 1)
      {
        v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v18 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v18)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v18)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF3782FC(a1, *(_DWORD *)(v16 + 4 * v12), *(_DWORD *)a4, *(_QWORD *)(a4 + 16));
      ++v13;
      v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37ADB4(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v20;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v20 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = a2 + 4;
    v17 = 1;
    do
    {
      if (v17 == 1)
      {
        v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v18 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v18)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v18)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF378B34(a1, *(_QWORD *)(v16 + 8 * v12), *(_DWORD *)a4, *(_QWORD *)(a4 + 16));
      ++v13;
      v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37AF54(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v20;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v20 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = a2 + 4;
    v17 = 1;
    do
    {
      if (v17 == 1)
      {
        v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v18 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v18)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v18)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF378F0C(a1, *(_DWORD *)a4, *(_QWORD *)(a4 + 16), *(float *)(v16 + 4 * v12));
      ++v13;
      v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37B0F4(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v20;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v20 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = a2 + 4;
    v17 = 1;
    do
    {
      if (v17 == 1)
      {
        v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v18 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v18)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v18)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF37930C(a1, *(_DWORD *)a4, *(_QWORD *)(a4 + 16), *(double *)(v16 + 8 * v12));
      ++v13;
      v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

uint64_t sub_1DF37B294(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  _BOOL4 v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;

  v9 = *(_DWORD *)a4 == 15 && *(_BYTE *)(*(_QWORD *)(a4 + 8) + 200) != 0;
  v10 = (*a1)->__r_.__value_.__r.__words[1];
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v10 & ~(v10 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v14 = a2 + 4;
    while (1)
    {
      if (v13)
      {
        v15 = *a1;
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
        {
          std::string::push_back(a1[1], 44);
          v15 = *a1;
        }
        if ((v15->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      std::string::append(a1[1], v11, 32);
      if (v9)
        v16 = v14 + *(_QWORD *)(*(_QWORD *)(a4 + 8) + 216) * v12;
      else
        LODWORD(v16) = v14 + 4 * v12 + *(_DWORD *)(v14 + 4 * v12);
      if ((sub_1DF3797DC((int)a1, v16) & 1) == 0)
        return 0;
      v12 = ++v13;
      if (v13 >= a3)
        goto LABEL_18;
    }
  }
  else
  {
LABEL_18:
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    std::string::append(a1[1], a5, 32);
    std::string::push_back(a1[1], 93);
    return 1;
  }
}

void sub_1DF37B42C(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v19;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v19 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = 1;
    do
    {
      if (v16 == 1)
      {
        v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v17 = v13 % 0xC;
        if (v19 >= 0xFFFFFFFE && v17)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v17)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF376D98(a1, *(_WORD *)(a2 + 2 * v12), *(_DWORD *)a4, *(_QWORD *)(a4 + 16));
      ++v13;
      v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37B5C8(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v19;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v19 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = 1;
    do
    {
      if (v16 == 1)
      {
        v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v17 = v13 % 0xC;
        if (v19 >= 0xFFFFFFFE && v17)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v17)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF377294(a1, *(_QWORD *)(a2 + 8 * v12), *(_DWORD *)a4, *(_QWORD *)(a4 + 16));
      ++v13;
      v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37B764(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v19;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v19 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = 1;
    do
    {
      if (v16 == 1)
      {
        v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v17 = v13 % 0xC;
        if (v19 >= 0xFFFFFFFE && v17)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v17)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF37766C(a1, *(_DWORD *)(a2 + 4 * v12), *(_DWORD *)a4, *(_QWORD *)(a4 + 16));
      ++v13;
      v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37B900(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v19;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v19 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = 1;
    do
    {
      if (v16 == 1)
      {
        v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v17 = v13 % 0xC;
        if (v19 >= 0xFFFFFFFE && v17)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v17)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF377AC4(a1, *(unsigned __int16 *)(a2 + 2 * v12), *(_DWORD *)a4, *(_QWORD *)(a4 + 16));
      ++v13;
      v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37BA9C(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v19;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v19 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = 1;
    do
    {
      if (v16 == 1)
      {
        v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v17 = v13 % 0xC;
        if (v19 >= 0xFFFFFFFE && v17)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v17)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF377EA4(a1, *(unsigned __int8 *)(a2 + v12), *(_DWORD *)a4, *(_QWORD *)(a4 + 16));
      ++v13;
      v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37BC38(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v19;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v19 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = 1;
    do
    {
      if (v16 == 1)
      {
        v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v17 = v13 % 0xC;
        if (v19 >= 0xFFFFFFFE && v17)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v17)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF3782FC(a1, *(char *)(a2 + v12), *(_DWORD *)a4, *(_QWORD *)(a4 + 16));
      ++v13;
      v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37BDD4(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v19;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v19 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = 1;
    do
    {
      if (v16 == 1)
      {
        v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v17 = v13 % 0xC;
        if (v19 >= 0xFFFFFFFE && v17)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v17)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF378754(a1, *(__int16 *)(a2 + 2 * v12), *(_DWORD *)a4, *(_QWORD *)(a4 + 16));
      ++v13;
      v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37BF70(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v19;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v19 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = 1;
    do
    {
      if (v16 == 1)
      {
        v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v17 = v13 % 0xC;
        if (v19 >= 0xFFFFFFFE && v17)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v17)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF3782FC(a1, *(_DWORD *)(a2 + 4 * v12), *(_DWORD *)a4, *(_QWORD *)(a4 + 16));
      ++v13;
      v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37C10C(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v19;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v19 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = 1;
    do
    {
      if (v16 == 1)
      {
        v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v17 = v13 % 0xC;
        if (v19 >= 0xFFFFFFFE && v17)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v17)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF378B34(a1, *(_QWORD *)(a2 + 8 * v12), *(_DWORD *)a4, *(_QWORD *)(a4 + 16));
      ++v13;
      v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37C2A8(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v19;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v19 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = 1;
    do
    {
      if (v16 == 1)
      {
        v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v17 = v13 % 0xC;
        if (v19 >= 0xFFFFFFFE && v17)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v17)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF378F0C(a1, *(_DWORD *)a4, *(_QWORD *)(a4 + 16), *(float *)(a2 + 4 * v12));
      ++v13;
      v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

void sub_1DF37C444(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v19;

  v9 = (*a1)->__r_.__value_.__r.__words[1];
  v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v12 = 0;
    v13 = 0;
    v19 = v10 - 5;
    v14 = v10 - 3;
    v15 = v11;
    v16 = 1;
    do
    {
      if (v16 == 1)
      {
        v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
          std::string::push_back(a1[1], 44);
        v17 = v13 % 0xC;
        if (v19 >= 0xFFFFFFFE && v17)
          goto LABEL_16;
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      if (v14 <= 1 && !v17)
        std::string::append(a1[1], v15, 32);
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_1DF37930C(a1, *(_DWORD *)a4, *(_QWORD *)(a4 + 16), *(double *)(a2 + 8 * v12));
      ++v13;
      v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
    std::string::push_back(a1[1], 10);
  std::string::append(a1[1], a5, 32);
  std::string::push_back(a1[1], 93);
}

uint64_t sub_1DF37C5E0(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  _BOOL4 v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  std::string *v15;
  uint64_t v16;

  v10 = *(_DWORD *)a4 == 15 && *(_BYTE *)(*(_QWORD *)(a4 + 8) + 200) != 0;
  v11 = (*a1)->__r_.__value_.__r.__words[1];
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    v12 = (v11 & ~(v11 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    v13 = 0;
    v14 = 0;
    while (1)
    {
      if (v14)
      {
        v15 = *a1;
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
        {
          std::string::push_back(a1[1], 44);
          v15 = *a1;
        }
        if ((v15->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
          std::string::push_back(a1[1], 10);
      }
      std::string::append(a1[1], v12, 32);
      if (v10)
        v16 = a2 + *(_QWORD *)(*(_QWORD *)(a4 + 8) + 216) * v13;
      else
        LODWORD(v16) = 0;
      if ((sub_1DF3797DC((int)a1, v16) & 1) == 0)
        return 0;
      v13 = ++v14;
      if (v14 >= a3)
        goto LABEL_18;
    }
  }
  else
  {
LABEL_18:
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0)
      std::string::push_back(a1[1], 10);
    std::string::append(a1[1], a5, 32);
    std::string::push_back(a1[1], 93);
    return 1;
  }
}

uint64_t flatbuffers::GetAnyValueI(int a1, char *a2)
{
  uint64_t v2;
  char *v3;
  unsigned __int8 v4;
  uint64_t v5;
  char *v8;

  switch(a1)
  {
    case 1:
    case 2:
    case 4:
      v2 = *a2;
      break;
    case 3:
      v2 = *a2;
      break;
    case 5:
      v2 = *(__int16 *)a2;
      break;
    case 6:
      v2 = *(unsigned __int16 *)a2;
      break;
    case 7:
      v2 = *(int *)a2;
      break;
    case 8:
      v2 = *(unsigned int *)a2;
      break;
    case 9:
    case 10:
      v2 = *(_QWORD *)a2;
      break;
    case 11:
      v2 = (uint64_t)*(float *)a2;
      break;
    case 12:
      v2 = (uint64_t)*(double *)a2;
      break;
    case 13:
      v3 = &a2[*(unsigned int *)a2 + 4];
      *__error() = 0;
      v8 = v3;
      v4 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
      if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
      {
        qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
        __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
        __cxa_guard_release(&qword_1F04755F0);
      }
      v5 = strtoll_l(v3, &v8, 10, (locale_t)qword_1F04755E8);
      if (v8 == v3 || *v8 != 0)
        goto LABEL_13;
      v2 = v5;
      if (*__error())
        goto LABEL_13;
      break;
    default:
LABEL_13:
      v2 = 0;
      break;
  }
  return v2;
}

double flatbuffers::GetAnyValueF(int a1, char *a2)
{
  double result;
  char *v3;
  unsigned __int8 v4;
  char *v5;

  switch(a1)
  {
    case 13:
      v3 = &a2[*(unsigned int *)a2 + 4];
      v5 = v3;
      v4 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
      if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
      {
        qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
        __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
        __cxa_guard_release(&qword_1F04755F0);
      }
      result = strtod_l(v3, &v5, (locale_t)qword_1F04755E8);
      if (v5 == v3 || *v5)
        return 0.0;
      break;
    case 12:
      return *(double *)a2;
    case 11:
      return *(float *)a2;
    default:
      return (double)flatbuffers::GetAnyValueI(a1, a2);
  }
  return result;
}

unint64_t flatbuffers::GetAnyValueS@<X0>(unint64_t result@<X0>, char *a2@<X1>, int *a3@<X2>, unsigned int a4@<W3>, char *a5@<X8>)
{
  char *v6;
  double AnyValueF;
  const char *v8;
  size_t v9;
  unsigned __int16 *v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  unsigned int *v24;
  size_t v25;
  const void *v26;
  unsigned int v27;
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int v48;
  int *v49;
  unsigned __int16 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 *v61;
  uint64_t v62;
  std::string *p_dst;
  unint64_t size;
  uint64_t v65;
  _DWORD *v66;
  std::string::size_type v67;
  void *p_str;
  uint64_t v69;
  std::string *v70;
  std::string::size_type v71;
  std::string *v72;
  std::string::size_type v73;
  char *v75;
  char *v76;
  std::string __str;
  std::string __dst;

  v6 = a5;
  switch((int)result)
  {
    case 11:
    case 12:
      AnyValueF = flatbuffers::GetAnyValueF(result, a2);
      return sub_1DF362EF8(12, (std::string *)v6, AnyValueF);
    case 13:
      v8 = &a2[*(unsigned int *)a2 + 4];
      result = strlen(v8);
      if (result >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v9 = result;
      if (result >= 0x17)
      {
        v16 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((result | 7) != 0x17)
          v16 = result | 7;
        v17 = v16 + 1;
        v18 = (char *)operator new(v16 + 1);
        *((_QWORD *)v6 + 1) = v9;
        *((_QWORD *)v6 + 2) = v17 | 0x8000000000000000;
        *(_QWORD *)v6 = v18;
        v6 = v18;
      }
      else
      {
        v6[23] = result;
        if (!result)
          goto LABEL_18;
      }
      result = (unint64_t)memcpy(v6, v8, v9);
LABEL_18:
      v6[v9] = 0;
      return result;
    case 14:
      a5[23] = 12;
      strcpy(a5, "[(elements)]");
      return result;
    case 15:
      if (!a3)
      {
        a5[23] = 7;
        *(_DWORD *)a5 = 1650553896;
        v15 = 694512738;
        goto LABEL_23;
      }
      v12 = (unsigned __int16 *)((char *)a3 - *a3);
      if (*v12 >= 5u && (v13 = v12[2]) != 0)
        v14 = (char *)a3 + v13 + *(unsigned int *)((char *)a3 + v13);
      else
        v14 = 0;
      v19 = &v14[4 * a4];
      v20 = *((unsigned int *)v19 + 1);
      v21 = &v19[v20 + 4];
      v22 = *(int *)v21;
      if (*(unsigned __int16 *)&v21[-v22] < 5u)
      {
        v23 = 0;
      }
      else
      {
        v23 = *(unsigned __int16 *)&v21[-v22 + 4];
        LODWORD(v22) = *(_DWORD *)&v21[*(unsigned __int16 *)&v21[-v22 + 4]];
      }
      v24 = (unsigned int *)&v21[v23 + v22];
      v27 = *v24;
      v26 = v24 + 1;
      v25 = v27;
      v75 = v14;
      if (v27 >= 0x17)
      {
        if ((v25 | 7) == 0x17)
          v29 = (v25 & 0xFFFFFFF8) + 8;
        else
          v29 = v25 | 7;
        v28 = operator new(v29 + 1);
        *((_QWORD *)v6 + 1) = v25;
        *((_QWORD *)v6 + 2) = v29 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)v6 = v28;
      }
      else
      {
        v6[23] = v25;
        v28 = v6;
        if (!(_DWORD)v25)
          goto LABEL_33;
      }
      memmove(v28, v26, v25);
LABEL_33:
      *((_BYTE *)v28 + v25) = 0;
      v30 = &v21[-*(int *)v21];
      if (*(unsigned __int16 *)v30 >= 9u)
      {
        v31 = *((unsigned __int16 *)v30 + 4);
        if (v31)
        {
          if (v21[v31])
            return (unint64_t)std::string::append((std::string *)v6, "(struct)");
        }
      }
      v32 = *(unsigned int *)a2;
      std::string::append((std::string *)v6, " { ");
      v33 = *(unsigned __int16 *)&v21[-*(int *)v21 + 6];
      v34 = *(unsigned int *)&v21[v33];
      v76 = &v21[v33 + v34];
      v35 = *(unsigned int *)v76;
      if ((_DWORD)v35)
      {
        v36 = &a2[v32];
        for (i = (uint64_t)&v75[4 * a4 + 12 + v33 + v20 + v34]; ; i += 4)
        {
          v38 = *(unsigned int *)(i - 4);
          v39 = i + v38;
          v40 = v38 - *(int *)(i + v38 - 4);
          v41 = *(unsigned __int16 *)(i + v40 - 4);
          if (v41 >= 0xB && *(_WORD *)(i + v40 + 6))
            v42 = *(unsigned __int16 *)(i + v38 + *(unsigned __int16 *)(i + v40 + 6) - 4);
          else
            v42 = 0;
          v43 = &v36[-*(int *)v36];
          v44 = *(unsigned __int16 *)v43;
          if (v44 > v42)
          {
            if (*(_WORD *)&v43[v42])
              break;
          }
LABEL_113:
          if (i == (_QWORD)&v76[4 * v35 + 4])
            return (unint64_t)std::string::append((std::string *)v6, "}");
        }
        if (v41 < 0xB)
        {
          v47 = &v36[v44];
          if (v41 < 7)
          {
            v48 = 0;
            v49 = 0;
            goto LABEL_58;
          }
        }
        else if (*(_WORD *)(i + v40 + 6))
        {
          v45 = *(unsigned __int16 *)(i + v38 + *(unsigned __int16 *)(i + v40 + 6) - 4);
          if (v44 <= v45 || (v46 = *(unsigned __int16 *)&v43[v45]) == 0)
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
            __dst.__r_.__value_.__s.__data_[0] = 0;
            goto LABEL_70;
          }
          v47 = &v36[v46];
        }
        else
        {
          v47 = &v36[v44];
        }
        if (*(_WORD *)(i + v40 + 2))
          v49 = (int *)(i
                      + v38
                      + *(unsigned __int16 *)(i + v40 + 2)
                      + *(unsigned int *)(i + v38 + *(unsigned __int16 *)(i + v40 + 2) - 4)
                      - 4);
        else
          v49 = 0;
        v48 = 1;
LABEL_58:
        v50 = (unsigned __int16 *)((char *)v49 - *v49);
        if (*v50 >= 5u && (v51 = v50[2]) != 0)
        {
          v52 = *((char *)v49 + v51);
          if (!v48)
          {
LABEL_61:
            v53 = 0;
LABEL_65:
            v54 = (unsigned __int16 *)(v53 - *(int *)v53);
            if (*v54 >= 9u && (v55 = v54[4]) != 0)
              v56 = *(unsigned int *)(v53 + v55);
            else
              v56 = 0xFFFFFFFFLL;
            flatbuffers::GetAnyValueS(&__dst, v52, v47, a3, v56);
LABEL_70:
            LODWORD(v57) = *(_DWORD *)(v39 - 4);
            v58 = *(unsigned __int16 *)(i + v38 - (int)v57 - 4);
            v59 = 0;
            if (v58 >= 7)
            {
              v59 = *(unsigned __int16 *)(i + v38 - (int)v57 + 2);
              if (*(_WORD *)(i + v38 - (int)v57 + 2))
                v59 = i + v38 + v59 + *(unsigned int *)(i + v38 + v59 - 4) - 4;
            }
            v60 = -(uint64_t)(int)v57;
            v61 = (unsigned __int16 *)(v59 - *(int *)v59);
            if (*v61 >= 5u)
            {
              v62 = v61[2];
              if (v62)
              {
                if (*(_BYTE *)(v59 + v62) == 13)
                {
                  memset(&__str, 0, sizeof(__str));
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    p_dst = &__dst;
                  else
                    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
                  else
                    size = __dst.__r_.__value_.__l.__size_;
                  sub_1DF379BAC((uint64_t)p_dst, size, &__str, 1, 0);
                  std::string::operator=(&__dst, &__str);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                  v57 = *(int *)(v39 - 4);
                  v60 = -v57;
                  v58 = *(unsigned __int16 *)(i + v38 - v57 - 4);
                }
              }
            }
            if (v58 < 5)
            {
              LODWORD(v65) = 0;
            }
            else
            {
              v65 = *(unsigned __int16 *)(i + v60 + v38);
              LODWORD(v57) = *(_DWORD *)(i + v38 + v65 - 4);
            }
            v66 = (_DWORD *)(i + v38 + v65 + (unint64_t)v57);
            v67 = *(v66 - 1);
            if (v67 >= 0x17)
            {
              if ((v67 | 7) == 0x17)
                v69 = (v67 & 0xFFFFFFF8) + 8;
              else
                v69 = v67 | 7;
              p_str = operator new(v69 + 1);
              __str.__r_.__value_.__l.__size_ = v67;
              __str.__r_.__value_.__r.__words[2] = v69 - 0x7FFFFFFFFFFFFFFFLL;
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
            }
            else
            {
              *((_BYTE *)&__str.__r_.__value_.__s + 23) = *(v66 - 1);
              p_str = &__str;
              if (!(_DWORD)v67)
                goto LABEL_96;
            }
            memmove(p_str, v66, v67);
LABEL_96:
            *((_BYTE *)p_str + v67) = 0;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v70 = &__str;
            else
              v70 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v71 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
            else
              v71 = __str.__r_.__value_.__l.__size_;
            std::string::append((std::string *)v6, (const std::string::value_type *)v70, v71);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            std::string::append((std::string *)v6, ": ");
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v72 = &__dst;
            else
              v72 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v73 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
            else
              v73 = __dst.__r_.__value_.__l.__size_;
            std::string::append((std::string *)v6, (const std::string::value_type *)v72, v73);
            std::string::append((std::string *)v6, ", ");
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            v35 = *(unsigned int *)v76;
            goto LABEL_113;
          }
        }
        else
        {
          v52 = 0;
          if (!v48)
            goto LABEL_61;
        }
        v53 = *(unsigned __int16 *)(i + v40 + 2);
        if (v53)
          v53 = i + v38 + v53 + *(unsigned int *)(i + v38 + v53 - 4) - 4;
        goto LABEL_65;
      }
      return (unint64_t)std::string::append((std::string *)v6, "}");
    case 16:
      a5[23] = 7;
      *(_DWORD *)a5 = 1768846632;
      v15 = 695103337;
LABEL_23:
      *(_DWORD *)(v6 + 3) = v15;
      v6[7] = 0;
      return result;
    default:
      flatbuffers::GetAnyValueI(result, a2);
      return sub_1DF345C20();
  }
}

double flatbuffers::SetAnyValueI(int a1, _BYTE *a2, uint64_t a3)
{
  double result;

  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
      *a2 = a3;
      break;
    case 5:
    case 6:
      *(_WORD *)a2 = a3;
      break;
    case 7:
    case 8:
      *(_DWORD *)a2 = a3;
      break;
    case 9:
    case 10:
      *(_QWORD *)a2 = a3;
      break;
    case 11:
      *(float *)&result = (float)a3;
      *(float *)a2 = (float)a3;
      break;
    case 12:
      result = (double)a3;
      *(double *)a2 = (double)a3;
      break;
    default:
      return result;
  }
  return result;
}

double flatbuffers::SetAnyValueF(int a1, double *a2, double result)
{
  if (a1 == 12)
  {
    *a2 = result;
  }
  else if (a1 == 11)
  {
    *(float *)&result = result;
    *(_DWORD *)a2 = LODWORD(result);
  }
  else
  {
    return flatbuffers::SetAnyValueI(a1, a2, (uint64_t)result);
  }
  return result;
}

double flatbuffers::SetAnyValueS(int a1, double *a2, char *a3)
{
  unsigned __int8 v6;
  double result;
  unsigned __int8 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  double *v13;
  uint64_t v14;
  char *v15;

  if ((a1 - 11) > 1)
  {
    *__error() = 0;
    v15 = a3;
    v8 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    v9 = strtoll_l(a3, &v15, 10, (locale_t)qword_1F04755E8);
    v10 = v15 != a3 && *v15 == 0;
    if (!v10 || (v11 = v9, *__error()))
      v11 = 0;
    v12 = a1;
    v13 = a2;
    v14 = v11;
  }
  else
  {
    v15 = a3;
    v6 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
    {
      qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
      __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
      __cxa_guard_release(&qword_1F04755F0);
    }
    result = strtod_l(a3, &v15, (locale_t)qword_1F04755E8);
    if (v15 == a3 || *v15)
      result = 0.0;
    if (a1 == 12)
    {
      *a2 = result;
      return result;
    }
    if (a1 == 11)
    {
      *(float *)&result = result;
      *(_DWORD *)a2 = LODWORD(result);
      return result;
    }
    v14 = (uint64_t)result;
    v12 = a1;
    v13 = a2;
  }
  return flatbuffers::SetAnyValueI(v12, v13, v14);
}

void *flatbuffers::SetString(int *a1, const void **a2, unsigned int *a3, uint64_t *a4, int *a5)
{
  char v6;
  char v7;
  const void *v8;
  const void *v9;
  int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v18;
  uint64_t v19;
  const void *v20;
  void *v21;
  const void *v22;
  const void *v23;
  char v25[32];
  void *__p;
  void *v27;

  v6 = *((_BYTE *)a2 + 23);
  v7 = v6;
  v8 = a2[1];
  v9 = (const void *)(v6 & 0x7F);
  if (v6 >= 0)
    v10 = v6 & 0x7F;
  else
    v10 = a2[1];
  v11 = *a3;
  v12 = *a4;
  if (*a4 == a4[1])
    v12 = 0;
  v13 = (_DWORD)a3 - v12;
  v14 = ((_DWORD)a3 - v12 + 4);
  if (v10 != (_DWORD)v11)
  {
    v18 = v10 - v11;
    bzero((void *)(v12 + v14), v11);
    sub_1DF380938((uint64_t)v25, a1, v14, v18, a4, a5);
    if (__p)
    {
      v27 = __p;
      operator delete(__p);
    }
    v12 = *a4;
    if (*a4 == a4[1])
      v19 = 0;
    else
      v19 = *a4;
    LODWORD(v20) = *((_BYTE *)a2 + 23) & 0x7F;
    if (*((char *)a2 + 23) < 0)
      v20 = a2[1];
    *(_DWORD *)(v19 + v13) = (_DWORD)v20;
    v7 = *((_BYTE *)a2 + 23);
    v8 = a2[1];
    v9 = (const void *)(v7 & 0x7F);
  }
  v21 = (void *)(v12 + v14);
  if (v7 >= 0)
    v22 = a2;
  else
    v22 = *a2;
  if (v7 >= 0)
    v23 = v9;
  else
    v23 = v8;
  return memcpy(v21, v22, (size_t)v23 + 1);
}

uint64_t flatbuffers::ResizeAnyVector(int *a1, int a2, uint64_t a3, int a4, int a5, uint64_t *a6, int *a7)
{
  int v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v18;
  _BYTE v20[32];
  void *__p;
  void *v22;

  v7 = a2 - a4;
  v8 = ((a2 - a4) * a5);
  v9 = *a6;
  v10 = a6[1];
  if (*a6 == v10)
    v11 = 0;
  else
    v11 = *a6;
  v12 = a3 - v11;
  v13 = a3 - v11 + a5 * a4 + 4;
  if ((_DWORD)v8)
  {
    if (v7 < 0)
      bzero((void *)(v11 + v13 - -(int)v8), -(int)v8);
    sub_1DF380938((uint64_t)v20, a1, v13, v8, a6, a7);
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
    v9 = *a6;
    v10 = a6[1];
    if (*a6 == v10)
      v18 = 0;
    else
      v18 = *a6;
    *(_DWORD *)(v18 + v12) = a2;
    if (v7 >= 1)
    {
      bzero((void *)(v18 + v13), v8);
      v9 = *a6;
      v10 = a6[1];
    }
  }
  if (v9 == v10)
    v9 = 0;
  return v9 + v13;
}

char *flatbuffers::AddFlatBuffer(_QWORD *a1, char *a2, uint64_t a3)
{
  char *v6;
  char *v7;
  char *i;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char v17;
  char *v18;

  v7 = (char *)*a1;
  v6 = (char *)a1[1];
  for (i = &v6[-*a1]; (i & 7) != 4; i = &v6[-*a1])
  {
    v9 = a1[2];
    if ((unint64_t)v6 >= v9)
    {
      v10 = (unint64_t)(i + 1);
      if ((uint64_t)(i + 1) < 0)
        abort();
      v11 = v9 - (_QWORD)v7;
      if (2 * v11 > v10)
        v10 = 2 * v11;
      if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
        v13 = (char *)operator new(v12);
      else
        v13 = 0;
      v14 = &i[(_QWORD)v13];
      i[(_QWORD)v13] = 0;
      v15 = (uint64_t)&i[(_QWORD)v13 + 1];
      if (v6 != v7)
      {
        v16 = i - 1;
        do
        {
          v17 = *--v6;
          (v16--)[(_QWORD)v13] = v17;
        }
        while (v6 != v7);
        v7 = (char *)*a1;
        v14 = v13;
      }
      *a1 = v14;
      a1[1] = v15;
      a1[2] = &v13[v12];
      if (v7)
        operator delete(v7);
      v6 = (char *)v15;
    }
    else
    {
      *v6++ = 0;
    }
    a1[1] = v6;
    v7 = (char *)*a1;
  }
  sub_1DF36A650((uint64_t)a1, v6, a2 + 4, &a2[a3], a3 - 4);
  v18 = (char *)*a1;
  if (*a1 == a1[1])
    v18 = 0;
  return &v18[i - 4 + *(unsigned int *)a2];
}

uint64_t *flatbuffers::CopyInline(uint64_t a1, int *a2, int *a3, unint64_t a4, size_t __n)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v22;

  if (*(_QWORD *)(a1 + 72) < a4)
    *(_QWORD *)(a1 + 72) = a4;
  v8 = *(_QWORD *)(a1 + 48);
  v9 = (a4 - 1) & -(uint64_t)(*(_DWORD *)(a1 + 32) - v8 + *(_DWORD *)(a1 + 40));
  if (v8 - *(_QWORD *)(a1 + 56) < v9)
  {
    v22 = a3;
    sub_1DF366C90((uint64_t *)a1, (a4 - 1) & -(uint64_t)(*(_DWORD *)(a1 + 32) - v8 + *(_DWORD *)(a1 + 40)));
    a3 = v22;
    *(_QWORD *)(a1 + 48) -= v9;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v8 - v9;
    if (!v9)
      goto LABEL_7;
  }
  v10 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v10++) = 0;
  while (v9 != v10);
LABEL_7:
  v11 = *a2;
  v12 = *(unsigned __int16 *)((char *)a2 - v11);
  if (v12 < 0xB)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    v13 = *(unsigned __int16 *)((char *)a2 - v11 + 10);
    if (*(_WORD *)((char *)a2 - v11 + 10))
      LODWORD(v13) = *(unsigned __int16 *)((char *)a2 + v13);
  }
  v14 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v14 > v13 && (v15 = *(unsigned __int16 *)((char *)v14 + v13)) != 0)
  {
    v16 = (char *)a3 + v15;
    if (!__n)
    {
LABEL_14:
      v17 = -v11;
      goto LABEL_19;
    }
  }
  else
  {
    v16 = 0;
    if (!__n)
      goto LABEL_14;
  }
  v18 = *(_QWORD *)(a1 + 48);
  if (v18 - *(_QWORD *)(a1 + 56) < __n)
  {
    sub_1DF366C90((uint64_t *)a1, __n);
    v18 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v18 - __n;
  memcpy((void *)(v18 - __n), v16, __n);
  v19 = *a2;
  v17 = -v19;
  v12 = *(unsigned __int16 *)((char *)a2 - v19);
LABEL_19:
  if (v12 >= 0xB && *(_WORD *)((char *)a2 + v17 + 10))
    v20 = *(unsigned __int16 *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v17 + 10));
  else
    v20 = 0;
  return sub_1DF366DF8((uint64_t *)a1, v20, *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::CopyTable(uint64_t a1, int *a2, int *a3, int *a4, int a5)
{
  int *v6;
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  char *v12;
  unsigned int *v13;
  int *v14;
  unsigned __int16 *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  char *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int *v40;
  char *v41;
  uint64_t v42;
  int *v43;
  unsigned __int16 *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned __int16 *v53;
  uint64_t v54;
  int v55;
  unsigned __int16 *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  int v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  unint64_t v87;
  unsigned int *v88;
  unsigned int *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  size_t v93;
  int v94;
  int *v95;
  unsigned __int16 *v96;
  uint64_t v97;
  uint64_t v98;
  int *v99;
  unsigned __int16 *v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  unint64_t v106;
  unsigned int *v107;
  unsigned int *v108;
  int *v109;
  unsigned int v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  char *v192;
  unsigned int v193;
  uint64_t v194;
  unsigned __int16 *v195;
  uint64_t v196;
  int *v197;
  int *v198;
  unsigned __int16 *v199;
  uint64_t v200;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  int *v206;
  size_t v207;
  unsigned __int16 *v208;
  uint64_t v209;
  uint64_t v210;
  int *v211;
  unsigned __int16 *v212;
  uint64_t v213;
  uint64_t v214;
  int *v215;
  unsigned __int16 *v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  unsigned __int16 *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  char *v234;
  char *v235;
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  _DWORD *v240;
  char *v241;
  char *v242;
  char *v243;
  char *v244;
  char *v245;
  char *v246;
  char *v247;
  char *v248;
  char *v249;
  char *v250;
  char *v253;
  char *__p;

  v6 = a3;
  v8 = 0;
  v9 = *a3;
  v10 = *(unsigned __int16 *)((char *)a3 - v9);
  if (v10 >= 7)
  {
    if (*(_WORD *)((char *)a3 - v9 + 6))
      v8 = (int *)((char *)a3
                 + *(unsigned __int16 *)((char *)a3 - v9 + 6)
                 + *(unsigned int *)((char *)a3 + *(unsigned __int16 *)((char *)a3 - v9 + 6)));
    else
      v8 = 0;
  }
  v11 = v8 + 1;
  if (!*v8)
  {
    __p = 0;
    v183 = -v9;
    goto LABEL_271;
  }
  __p = 0;
  v12 = 0;
  v253 = 0;
  v13 = v8 + 1;
  while (2)
  {
    v14 = (int *)((char *)v13 + *v13);
    v15 = (unsigned __int16 *)((char *)v14 - *v14);
    v16 = *v15;
    if (v16 >= 0xB && v15[5])
      v17 = *(unsigned __int16 *)((char *)v14 + v15[5]);
    else
      v17 = 0;
    v18 = *a4;
    v19 = (char *)a4 - v18;
    v20 = *(unsigned __int16 *)((char *)a4 - v18);
    if (v20 <= v17 || !*(_WORD *)&v19[v17])
      goto LABEL_62;
    if (v16 < 7)
    {
      v21 = 0;
    }
    else
    {
      v21 = (int *)v15[3];
      if (v15[3])
        v21 = (int *)((char *)v21 + (_QWORD)v14 + *(unsigned int *)((char *)v21 + (_QWORD)v14));
    }
    v22 = (unsigned __int16 *)((char *)v21 - *v21);
    if (*v22 < 5u || (v23 = v22[2]) == 0)
    {
LABEL_62:
      v49 = v12;
      goto LABEL_63;
    }
    switch(*((_BYTE *)v21 + v23))
    {
      case 0xD:
        if (a5)
        {
          if (v16 >= 0xB)
          {
            v24 = v15[5];
            if (v24)
            {
              v25 = *(unsigned __int16 *)((char *)v14 + v24);
              if (v20 <= v25)
              {
                LODWORD(v20) = 0;
                goto LABEL_26;
              }
              LODWORD(v20) = *(unsigned __int16 *)&v19[v25];
            }
          }
          LODWORD(v18) = *(int *)((char *)a4 + v20);
LABEL_26:
          v26 = sub_1DF380FBC((_QWORD *)a1, (char *)a4 + v20 + v18 + 4, *(unsigned int *)((char *)a4 + v20 + v18));
          goto LABEL_73;
        }
        if (v16 >= 0xB)
        {
          v37 = v15[5];
          if (v37)
          {
            v38 = *(unsigned __int16 *)((char *)v14 + v37);
            if (v20 <= v38)
              goto LABEL_62;
            LODWORD(v20) = *(unsigned __int16 *)&v19[v38];
            if (!*(_WORD *)&v19[v38])
              goto LABEL_62;
          }
        }
        v26 = sub_1DF366A24(a1, (char *)a4 + v20 + *(int *)((char *)a4 + v20) + 4, *(unsigned int *)((char *)a4 + v20 + *(int *)((char *)a4 + v20)));
LABEL_73:
        v52 = v26;
        goto LABEL_113;
      case 0xE:
        if (v16 < 0xB)
        {
          v28 = (unsigned int *)((char *)a4 + v20 + *(unsigned int *)((char *)a4 + v20));
          if (v16 <= 6)
          {
            v39 = 0;
            goto LABEL_77;
          }
        }
        else if (v15[5]
               && ((v27 = *(unsigned __int16 *)((char *)v14 + v15[5]), v20 <= v27)
                || (LODWORD(v20) = *(unsigned __int16 *)&v19[v27], !*(_WORD *)&v19[v27])))
        {
          v28 = 0;
        }
        else
        {
          v28 = (unsigned int *)((char *)a4 + v20 + *(int *)((char *)a4 + v20));
        }
        v39 = (int *)v15[3];
        if (v15[3])
          v39 = (int *)((char *)v39 + (_QWORD)v14 + *(unsigned int *)((char *)v39 + (_QWORD)v14));
LABEL_77:
        v53 = (unsigned __int16 *)((char *)v39 - *v39);
        if (*v53 < 7u || (v54 = v53[3]) == 0)
        {
          v55 = 0;
LABEL_85:
          v58 = qword_1DF3860D0[v55 + 3];
LABEL_86:
          v59 = *v28;
          *(_BYTE *)(a1 + 70) = 1;
          v60 = *(_QWORD *)(a1 + 72);
          if (v60 <= 3)
          {
            *(_QWORD *)(a1 + 72) = 4;
            v60 = 4;
          }
          v61 = v58 * v59;
          v62 = *(_QWORD *)(a1 + 48);
          v63 = ((_BYTE)v62
               - (*(_DWORD *)(a1 + 32)
                + *(_DWORD *)(a1 + 40))
               - (_BYTE)v61) & 3;
          if (v62 - *(_QWORD *)(a1 + 56) < v63)
          {
            sub_1DF366C90((uint64_t *)a1, ((_BYTE)v62 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40)) - (_BYTE)v61) & 3);
            *(_QWORD *)(a1 + 48) -= v63;
            goto LABEL_90;
          }
          *(_QWORD *)(a1 + 48) = v62 - v63;
          if (v63)
          {
LABEL_90:
            v64 = 0;
            do
              *(_BYTE *)(*(_QWORD *)(a1 + 48) + v64++) = 0;
            while (v63 != v64);
            v60 = *(_QWORD *)(a1 + 72);
          }
          if (v60 < v58)
            *(_QWORD *)(a1 + 72) = v58;
          v65 = *(_QWORD *)(a1 + 48);
          v66 = (v58 - 1) & -(uint64_t)(v61 + (*(_DWORD *)(a1 + 32) - v65 + *(_DWORD *)(a1 + 40)));
          if (v65 - *(_QWORD *)(a1 + 56) < v66)
          {
            sub_1DF366C90((uint64_t *)a1, (v58 - 1) & -(uint64_t)(v61 + (*(_DWORD *)(a1 + 32) - v65 + *(_DWORD *)(a1 + 40))));
            *(_QWORD *)(a1 + 48) -= v66;
            goto LABEL_97;
          }
          *(_QWORD *)(a1 + 48) = v65 - v66;
          if (v66)
          {
LABEL_97:
            v67 = 0;
            do
              *(_BYTE *)(*(_QWORD *)(a1 + 48) + v67++) = 0;
            while (v66 != v67);
          }
          v68 = *v28;
          v69 = v58 * v68;
          if (v69)
          {
            v70 = *(_QWORD *)(a1 + 48);
            if (v70 - *(_QWORD *)(a1 + 56) < v69)
            {
              sub_1DF366C90((uint64_t *)a1, v69);
              v70 = *(_QWORD *)(a1 + 48);
            }
            *(_QWORD *)(a1 + 48) = v70 - v69;
            memcpy((void *)(v70 - v69), v28 + 1, v69);
            LODWORD(v68) = *v28;
          }
          *(_BYTE *)(a1 + 70) = 0;
          if (*(_QWORD *)(a1 + 72) <= 3uLL)
            *(_QWORD *)(a1 + 72) = 4;
          v71 = *(_QWORD *)(a1 + 48);
          v72 = *(_QWORD *)(a1 + 56);
          v73 = ((_BYTE)v71 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
          if (v71 - v72 >= v73)
          {
            v74 = v71 - v73;
            *(_QWORD *)(a1 + 48) = v74;
            if (v73)
            {
LABEL_107:
              v75 = 0;
              do
                *(_BYTE *)(*(_QWORD *)(a1 + 48) + v75++) = 0;
              while (v73 != v75);
              v74 = *(_QWORD *)(a1 + 48);
              v72 = *(_QWORD *)(a1 + 56);
            }
            if ((unint64_t)(v74 - v72) <= 3)
            {
              sub_1DF366C90((uint64_t *)a1, 4uLL);
              v74 = *(_QWORD *)(a1 + 48);
            }
            *(_DWORD *)(v74 - 4) = v68;
            v76 = v74 - 4;
            *(_QWORD *)(a1 + 48) = v76;
            v52 = *(_DWORD *)(a1 + 32) - v76 + *(_DWORD *)(a1 + 40);
            goto LABEL_113;
          }
          sub_1DF366C90((uint64_t *)a1, ((_BYTE)v71 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
          *(_QWORD *)(a1 + 48) -= v73;
          goto LABEL_107;
        }
        v55 = *((char *)v39 + v54);
        v240 = v28;
        if (v55 == 13)
        {
          v83 = *v28;
          if ((_DWORD)v83)
          {
            v84 = (char *)operator new(4 * v83);
            bzero(v84, 4 * v83);
            v85 = v84;
            v86 = &v84[4 * v83];
            if (*v28)
            {
              v232 = &v84[4 * v83];
              v87 = 0;
              v88 = v28 + 1;
              v89 = v28 + 2;
              do
              {
                v90 = v85;
                v91 = *(v89 - 1);
                v92 = (char *)v89 + v91;
                v93 = *(unsigned int *)((char *)&v88[v87] + v91);
                if (a5)
                  v94 = sub_1DF380FBC((_QWORD *)a1, v92, v93);
                else
                  v94 = sub_1DF366A24(a1, v92, v93);
                *(_DWORD *)&v90[4 * v87] = v94;
                v85 = v90;
                ++v87;
                ++v89;
              }
              while (v87 < *v240);
              v86 = v232;
            }
          }
          else
          {
            v85 = 0;
            v86 = 0;
          }
          v112 = v86 - v85;
          if (v86 == v85)
            v113 = (char *)&flatbuffers::data<flatbuffers::Offset<flatbuffers::String const*>,std::allocator<flatbuffers::Offset<flatbuffers::String const*>>>(std::vector<flatbuffers::Offset<flatbuffers::String const*>> const&)::t;
          else
            v113 = v85;
          *(_BYTE *)(a1 + 70) = 1;
          if (*(_QWORD *)(a1 + 72) <= 3uLL)
            *(_QWORD *)(a1 + 72) = 4;
          v114 = *(_QWORD *)(a1 + 48);
          v115 = ((_BYTE)v114 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
          if (v114 - *(_QWORD *)(a1 + 56) < v115)
          {
            v247 = v85;
            v166 = v86;
            v167 = v86 - v85;
            v168 = v113;
            sub_1DF366C90((uint64_t *)a1, v115);
            v86 = v166;
            v113 = v168;
            v112 = v167;
            v85 = v247;
            *(_QWORD *)(a1 + 48) -= v115;
          }
          else
          {
            *(_QWORD *)(a1 + 48) = v114 - v115;
            if (!v115)
              goto LABEL_177;
          }
          v116 = 0;
          do
            *(_BYTE *)(*(_QWORD *)(a1 + 48) + v116++) = 0;
          while (v115 != v116);
          if (*(_QWORD *)(a1 + 72) <= 3uLL)
            *(_QWORD *)(a1 + 72) = 4;
LABEL_177:
          v117 = *(_QWORD *)(a1 + 48);
          v118 = ((_BYTE)v117 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
          if (v117 - *(_QWORD *)(a1 + 56) < v118)
          {
            v248 = v85;
            v169 = v86;
            v170 = v112;
            v171 = v113;
            sub_1DF366C90((uint64_t *)a1, v118);
            v86 = v169;
            v113 = v171;
            v112 = v170;
            v85 = v248;
            *(_QWORD *)(a1 + 48) -= v118;
          }
          else
          {
            *(_QWORD *)(a1 + 48) = v117 - v118;
            if (!v118)
            {
LABEL_181:
              if (v85 == v86)
              {
LABEL_203:
                *(_BYTE *)(a1 + 70) = 0;
                if (*(_QWORD *)(a1 + 72) <= 3uLL)
                  *(_QWORD *)(a1 + 72) = 4;
                v135 = *(_QWORD *)(a1 + 48);
                v136 = *(_QWORD *)(a1 + 56);
                v137 = ((_BYTE)v135 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
                if (v135 - v136 >= v137)
                {
                  v138 = v135 - v137;
                  *(_QWORD *)(a1 + 48) = v138;
                  if (v137)
                    goto LABEL_207;
                  goto LABEL_255;
                }
                v178 = v85;
                v179 = v112;
                sub_1DF366C90((uint64_t *)a1, ((_BYTE)v135 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
                v112 = v179;
                v85 = v178;
                *(_QWORD *)(a1 + 48) -= v137;
LABEL_207:
                v139 = 0;
                do
                  *(_BYTE *)(*(_QWORD *)(a1 + 48) + v139++) = 0;
                while (v137 != v139);
LABEL_254:
                v138 = *(_QWORD *)(a1 + 48);
                v136 = *(_QWORD *)(a1 + 56);
                goto LABEL_255;
              }
              v120 = v112 >> 2;
              while (1)
              {
                if (*(_QWORD *)(a1 + 72) <= 3uLL)
                  *(_QWORD *)(a1 + 72) = 4;
                --v120;
                v121 = *(_DWORD *)&v113[4 * v120];
                v122 = *(_QWORD *)(a1 + 32);
                v123 = *(_QWORD *)(a1 + 40);
                v124 = *(_QWORD *)(a1 + 48);
                v125 = ((int)v124 - ((int)v122 + (int)v123)) & 3;
                if (v124 - *(_QWORD *)(a1 + 56) < v125)
                {
                  v234 = v113;
                  v241 = v85;
                  v128 = v112;
                  sub_1DF366C90((uint64_t *)a1, ((int)v124 - ((int)v122 + (int)v123)) & 3);
                  v113 = v234;
                  v85 = v241;
                  v112 = v128;
                  *(_QWORD *)(a1 + 48) -= v125;
                }
                else
                {
                  v126 = v124 - v125;
                  *(_QWORD *)(a1 + 48) = v126;
                  if (!v125)
                  {
                    v127 = v122 + v123 - v126;
                    goto LABEL_193;
                  }
                }
                v129 = 0;
                do
                  *(_BYTE *)(*(_QWORD *)(a1 + 48) + v129++) = 0;
                while (v125 != v129);
                v123 = *(_QWORD *)(a1 + 40);
                v126 = *(_QWORD *)(a1 + 48);
                v122 = *(_QWORD *)(a1 + 32);
                v127 = v122 - v126 + v123;
                if (*(_QWORD *)(a1 + 72) <= 3uLL)
                  *(_QWORD *)(a1 + 72) = 4;
LABEL_193:
                v130 = ((_BYTE)v126 - ((_BYTE)v122 + (_BYTE)v123)) & 3;
                v131 = *(_QWORD *)(a1 + 56);
                if (v126 - v131 < v130)
                {
                  v236 = v113;
                  v243 = v85;
                  v230 = v112;
                  sub_1DF366C90((uint64_t *)a1, v130);
                  v112 = v230;
                  v113 = v236;
                  v85 = v243;
                  *(_QWORD *)(a1 + 48) -= v130;
LABEL_195:
                  v133 = 0;
                  do
                    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v133++) = 0;
                  while (v130 != v133);
                  v132 = *(_QWORD *)(a1 + 48);
                  v131 = *(_QWORD *)(a1 + 56);
                  goto LABEL_198;
                }
                v132 = v126 - v130;
                *(_QWORD *)(a1 + 48) = v126 - v130;
                if (v130)
                  goto LABEL_195;
LABEL_198:
                if ((unint64_t)(v132 - v131) <= 3)
                {
                  v235 = v113;
                  v242 = v85;
                  v134 = v112;
                  sub_1DF366C90((uint64_t *)a1, 4uLL);
                  v113 = v235;
                  v85 = v242;
                  v112 = v134;
                  v132 = *(_QWORD *)(a1 + 48);
                }
                *(_DWORD *)(v132 - 4) = v127 - v121 + 4;
                *(_QWORD *)(a1 + 48) = v132 - 4;
                if (!v120)
                  goto LABEL_203;
              }
            }
          }
          v119 = 0;
          do
            *(_BYTE *)(*(_QWORD *)(a1 + 48) + v119++) = 0;
          while (v118 != v119);
          goto LABEL_181;
        }
        if (v55 != 15)
          goto LABEL_85;
        v56 = (unsigned __int16 *)((char *)a2 - *a2);
        if (*v56 < 5u)
        {
          v57 = 0;
        }
        else
        {
          v57 = v56[2];
          if (v57)
            v57 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v57);
        }
        if (v16 < 7)
        {
          v95 = 0;
        }
        else
        {
          v95 = (int *)v15[3];
          if (v95)
            v95 = (int *)((char *)v95 + (_QWORD)v14 + *(unsigned int *)((char *)v95 + (_QWORD)v14));
        }
        v96 = (unsigned __int16 *)((char *)v95 - *v95);
        if (*v96 >= 9u && (v97 = v96[4]) != 0)
          v98 = *(unsigned int *)((char *)v95 + v97);
        else
          v98 = 0xFFFFFFFFLL;
        v99 = (int *)(v57 + 4 * v98 + 4 + *(unsigned int *)(v57 + 4 * v98 + 4));
        v100 = (unsigned __int16 *)((char *)v99 - *v99);
        v101 = *v100;
        if (v101 > 8 && v100[4] && *((_BYTE *)v99 + v100[4]))
        {
          if (v101 < 0xD)
          {
            LODWORD(v102) = 0;
          }
          else
          {
            v102 = v100[6];
            if (v102)
              LODWORD(v102) = *(int *)((char *)v99 + v102);
          }
          v58 = (int)v102;
          goto LABEL_86;
        }
        v103 = *v28;
        if ((_DWORD)v103)
        {
          v104 = (char *)operator new(4 * v103);
          bzero(v104, 4 * v103);
          v85 = v104;
          v105 = &v104[4 * v103];
          if (*v240)
          {
            v233 = v105;
            v106 = 0;
            v107 = v240 + 1;
            v108 = v240 + 1;
            v109 = v99;
            do
            {
              v110 = *v108++;
              v111 = v85;
              *(_DWORD *)&v85[4 * v106] = flatbuffers::CopyTable(a1, a2, v109, (char *)v107 + v110, 0);
              v85 = v111;
              ++v106;
              v107 = v108;
            }
            while (v106 < *v240);
            v105 = v233;
          }
        }
        else
        {
          v85 = 0;
          v105 = 0;
        }
        v112 = v105 - v85;
        if (v105 == v85)
          v140 = (char *)&flatbuffers::data<flatbuffers::Offset<flatbuffers::Table const*>,std::allocator<flatbuffers::Offset<flatbuffers::Table const*>>>(std::vector<flatbuffers::Offset<flatbuffers::Table const*>> const&)::t;
        else
          v140 = v85;
        *(_BYTE *)(a1 + 70) = 1;
        if (*(_QWORD *)(a1 + 72) <= 3uLL)
          *(_QWORD *)(a1 + 72) = 4;
        v141 = *(_QWORD *)(a1 + 48);
        v142 = ((_BYTE)v141 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
        if (v141 - *(_QWORD *)(a1 + 56) < v142)
        {
          v249 = v85;
          v172 = v105 - v85;
          v173 = v140;
          sub_1DF366C90((uint64_t *)a1, v142);
          v140 = v173;
          v112 = v172;
          v85 = v249;
          *(_QWORD *)(a1 + 48) -= v142;
        }
        else
        {
          *(_QWORD *)(a1 + 48) = v141 - v142;
          if (!v142)
            goto LABEL_222;
        }
        v143 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a1 + 48) + v143++) = 0;
        while (v142 != v143);
        if (*(_QWORD *)(a1 + 72) <= 3uLL)
          *(_QWORD *)(a1 + 72) = 4;
LABEL_222:
        v144 = *(_QWORD *)(a1 + 48);
        v145 = ((_BYTE)v144 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
        if (v144 - *(_QWORD *)(a1 + 56) < v145)
        {
          v250 = v85;
          v174 = v112;
          v175 = v140;
          sub_1DF366C90((uint64_t *)a1, v145);
          v140 = v175;
          v112 = v174;
          v85 = v250;
          *(_QWORD *)(a1 + 48) -= v145;
        }
        else
        {
          *(_QWORD *)(a1 + 48) = v144 - v145;
          if (!v145)
            goto LABEL_226;
        }
        v146 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a1 + 48) + v146++) = 0;
        while (v145 != v146);
LABEL_226:
        if (v85 != v105)
        {
          v147 = v112 >> 2;
          do
          {
            if (*(_QWORD *)(a1 + 72) <= 3uLL)
              *(_QWORD *)(a1 + 72) = 4;
            --v147;
            v148 = *(_DWORD *)&v140[4 * v147];
            v149 = *(_QWORD *)(a1 + 32);
            v150 = *(_QWORD *)(a1 + 40);
            v151 = *(_QWORD *)(a1 + 48);
            v152 = ((int)v151 - ((int)v149 + (int)v150)) & 3;
            if (v151 - *(_QWORD *)(a1 + 56) < v152)
            {
              v237 = v140;
              v244 = v85;
              v155 = v112;
              sub_1DF366C90((uint64_t *)a1, ((int)v151 - ((int)v149 + (int)v150)) & 3);
              v140 = v237;
              v85 = v244;
              v112 = v155;
              *(_QWORD *)(a1 + 48) -= v152;
            }
            else
            {
              v153 = v151 - v152;
              *(_QWORD *)(a1 + 48) = v153;
              if (!v152)
              {
                v154 = v149 + v150 - v153;
                goto LABEL_238;
              }
            }
            v156 = 0;
            do
              *(_BYTE *)(*(_QWORD *)(a1 + 48) + v156++) = 0;
            while (v152 != v156);
            v150 = *(_QWORD *)(a1 + 40);
            v153 = *(_QWORD *)(a1 + 48);
            v149 = *(_QWORD *)(a1 + 32);
            v154 = v149 - v153 + v150;
            if (*(_QWORD *)(a1 + 72) <= 3uLL)
              *(_QWORD *)(a1 + 72) = 4;
LABEL_238:
            v157 = ((_BYTE)v153 - ((_BYTE)v149 + (_BYTE)v150)) & 3;
            v158 = *(_QWORD *)(a1 + 56);
            if (v153 - v158 < v157)
            {
              v239 = v140;
              v246 = v85;
              v231 = v112;
              sub_1DF366C90((uint64_t *)a1, v157);
              v112 = v231;
              v140 = v239;
              v85 = v246;
              *(_QWORD *)(a1 + 48) -= v157;
LABEL_240:
              v160 = 0;
              do
                *(_BYTE *)(*(_QWORD *)(a1 + 48) + v160++) = 0;
              while (v157 != v160);
              v159 = *(_QWORD *)(a1 + 48);
              v158 = *(_QWORD *)(a1 + 56);
              goto LABEL_243;
            }
            v159 = v153 - v157;
            *(_QWORD *)(a1 + 48) = v153 - v157;
            if (v157)
              goto LABEL_240;
LABEL_243:
            if ((unint64_t)(v159 - v158) <= 3)
            {
              v238 = v140;
              v245 = v85;
              v161 = v112;
              sub_1DF366C90((uint64_t *)a1, 4uLL);
              v140 = v238;
              v85 = v245;
              v112 = v161;
              v159 = *(_QWORD *)(a1 + 48);
            }
            *(_DWORD *)(v159 - 4) = v154 - v148 + 4;
            *(_QWORD *)(a1 + 48) = v159 - 4;
          }
          while (v147);
        }
        *(_BYTE *)(a1 + 70) = 0;
        if (*(_QWORD *)(a1 + 72) <= 3uLL)
          *(_QWORD *)(a1 + 72) = 4;
        v162 = *(_QWORD *)(a1 + 48);
        v136 = *(_QWORD *)(a1 + 56);
        v163 = ((_BYTE)v162 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
        if (v162 - v136 < v163)
        {
          v180 = v85;
          v181 = v112;
          sub_1DF366C90((uint64_t *)a1, ((_BYTE)v162 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
          v112 = v181;
          v85 = v180;
          *(_QWORD *)(a1 + 48) -= v163;
LABEL_252:
          v164 = 0;
          do
            *(_BYTE *)(*(_QWORD *)(a1 + 48) + v164++) = 0;
          while (v163 != v164);
          goto LABEL_254;
        }
        v138 = v162 - v163;
        *(_QWORD *)(a1 + 48) = v138;
        if (v163)
          goto LABEL_252;
LABEL_255:
        if ((unint64_t)(v138 - v136) <= 3)
        {
          v176 = v85;
          v177 = v112;
          sub_1DF366C90((uint64_t *)a1, 4uLL);
          v112 = v177;
          v85 = v176;
          v138 = *(_QWORD *)(a1 + 48);
        }
        *(_DWORD *)(v138 - 4) = (unint64_t)v112 >> 2;
        v165 = v138 - 4;
        *(_QWORD *)(a1 + 48) = v165;
        v52 = *(_DWORD *)(a1 + 32) - v165 + *(_DWORD *)(a1 + 40);
        if (v85)
          operator delete(v85);
LABEL_113:
        if (!v52)
          goto LABEL_116;
        if (v12 < v253)
        {
          *(_DWORD *)v12 = v52;
          v12 += 4;
LABEL_116:
          v49 = v12;
          v6 = a3;
          goto LABEL_63;
        }
        v77 = (v12 - __p) >> 2;
        v78 = v77 + 1;
        if ((unint64_t)(v77 + 1) >> 62)
          abort();
        if ((v253 - __p) >> 1 > v78)
          v78 = (v253 - __p) >> 1;
        if ((unint64_t)(v253 - __p) >= 0x7FFFFFFFFFFFFFFCLL)
          v79 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v79 = v78;
        if (v79)
        {
          if (v79 >> 62)
            sub_1DF3667C0();
          v80 = (char *)operator new(4 * v79);
        }
        else
        {
          v80 = 0;
        }
        v81 = &v80[4 * v77];
        *(_DWORD *)v81 = v52;
        v49 = v81 + 4;
        if (v12 == __p)
        {
          v6 = a3;
        }
        else
        {
          v6 = a3;
          do
          {
            v82 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *((_DWORD *)v81 - 1) = v82;
            v81 -= 4;
          }
          while (v12 != __p);
        }
        v253 = &v80[4 * v79];
        if (__p)
          operator delete(__p);
        __p = v81;
LABEL_63:
        ++v13;
        v12 = v49;
        if (v13 != &v11[*v8])
          continue;
        v182 = *v6;
        v183 = -v182;
        v10 = *(unsigned __int16 *)((char *)v6 - v182);
LABEL_271:
        if (v10 < 9
          || (v184 = (char *)v6 + v183, !*((_WORD *)v184 + 4))
          || !*((_BYTE *)v6 + *((unsigned __int16 *)v184 + 4)))
        {
          *(_BYTE *)(a1 + 70) = 1;
          v186 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 40);
          goto LABEL_279;
        }
        if (v10 >= 0xB && *((_WORD *)v184 + 5))
        {
          v185 = *(int *)((char *)v6 + *((unsigned __int16 *)v184 + 5));
          if (*(_QWORD *)(a1 + 72) < v185)
            *(_QWORD *)(a1 + 72) = v185;
        }
        else
        {
          v185 = 0;
        }
        v224 = *(_QWORD *)(a1 + 32);
        v225 = *(_QWORD *)(a1 + 40);
        v226 = *(_QWORD *)(a1 + 48);
        v227 = (v185 - 1) & -(uint64_t)(v224 - v226 + v225);
        if (v226 - *(_QWORD *)(a1 + 56) < v227)
        {
          sub_1DF366C90((uint64_t *)a1, v227);
          *(_QWORD *)(a1 + 48) -= v227;
LABEL_344:
          v229 = 0;
          do
            *(_BYTE *)(*(_QWORD *)(a1 + 48) + v229++) = 0;
          while (v227 != v229);
          v225 = *(_QWORD *)(a1 + 40);
          v228 = *(_QWORD *)(a1 + 48);
          v224 = *(_QWORD *)(a1 + 32);
          goto LABEL_347;
        }
        LOWORD(v228) = v226 - v227;
        *(_QWORD *)(a1 + 48) = v226 - v227;
        if (v227)
          goto LABEL_344;
LABEL_347:
        LOWORD(v186) = v225 - v228 + v224;
LABEL_279:
        if (*v8)
        {
          v187 = 0;
          v188 = 0;
          do
          {
            v189 = v8[v187 + 1];
            v190 = (char *)&v8[v187] + v189;
            v191 = v189 - *((int *)v190 + 1);
            v192 = (char *)&v8[v187] + v191;
            v193 = *((unsigned __int16 *)v192 + 2);
            if (v193 < 0xB)
            {
              LODWORD(v194) = 0;
            }
            else
            {
              v194 = *((unsigned __int16 *)v192 + 7);
              if (v194)
                LODWORD(v194) = *(unsigned __int16 *)((char *)&v8[v187 + 1] + v189 + v194);
            }
            v195 = (unsigned __int16 *)((char *)a4 - *a4);
            if (*v195 <= v194 || !*(unsigned __int16 *)((char *)v195 + v194))
              goto LABEL_306;
            if (v193 >= 7 && *(_WORD *)((char *)&v8[v187 + 2] + v191 + 2))
            {
              v196 = v189 + *(unsigned __int16 *)((char *)&v8[v187 + 2] + v191 + 2);
              v197 = (_DWORD *)((char *)&v8[v187 + 1] + v196 + *(unsigned int *)((char *)&v8[v187 + 1] + v196));
            }
            else
            {
              v197 = 0;
            }
            v198 = (int *)(v190 + 4);
            v199 = (unsigned __int16 *)((char *)v197 - *v197);
            if (*v199 < 5u)
            {
              LODWORD(v200) = 0;
            }
            else
            {
              v200 = v199[2];
              if (v200)
              {
                LODWORD(v200) = *((char *)v197 + v200);
                if ((v200 - 13) < 2 || (_DWORD)v200 == 16)
                  goto LABEL_298;
                if ((_DWORD)v200 == 15)
                {
                  v208 = (unsigned __int16 *)((char *)a2 - *a2);
                  if (*v208 < 5u)
                  {
                    v209 = 0;
                  }
                  else
                  {
                    v209 = v208[2];
                    if (v209)
                      v209 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v209);
                  }
                  if (v193 >= 7 && *(_WORD *)((char *)&v8[v187 + 2] + v191 + 2))
                  {
                    v210 = v189 + *(unsigned __int16 *)((char *)&v8[v187 + 2] + v191 + 2);
                    v211 = (_DWORD *)((char *)&v8[v187 + 1] + v210 + *(unsigned int *)((char *)&v8[v187 + 1] + v210));
                  }
                  else
                  {
                    v211 = 0;
                  }
                  v212 = (unsigned __int16 *)((char *)v211 - *v211);
                  if (*v212 >= 9u && (v213 = v212[4]) != 0)
                    v214 = *(unsigned int *)((char *)v211 + v213);
                  else
                    v214 = 0xFFFFFFFFLL;
                  v215 = (int *)(v209 + 4 * v214 + 4 + *(unsigned int *)(v209 + 4 * v214 + 4));
                  v216 = (unsigned __int16 *)((char *)v215 - *v215);
                  v217 = *v216;
                  if (v217 < 9 || !v216[4] || !*((_BYTE *)v215 + v216[4]))
                  {
LABEL_298:
                    if (v193 >= 0xB && (v202 = *(unsigned __int16 *)((char *)&v8[v187 + 3] + v191 + 2)) != 0)
                      v203 = *(unsigned __int16 *)((char *)&v8[v187 + 1] + v189 + v202);
                    else
                      v203 = 0;
                    sub_1DF354740((uint64_t *)a1, v203, *(_DWORD *)&__p[4 * v188++]);
                    goto LABEL_306;
                  }
                  if (v217 < 0xB)
                  {
                    v204 = 0;
                  }
                  else
                  {
                    v218 = v216[5];
                    if (v216[5])
                      LODWORD(v218) = *(int *)((char *)v215 + v218);
                    v204 = (int)v218;
                    if (v217 >= 0xD)
                    {
                      v219 = v216[6];
                      if (v216[6])
                        LODWORD(v219) = *(int *)((char *)v215 + v219);
                      goto LABEL_332;
                    }
                  }
                  LODWORD(v219) = 0;
LABEL_332:
                  v207 = (int)v219;
                  v205 = a1;
                  v206 = a4;
                  goto LABEL_303;
                }
              }
            }
            v204 = qword_1DF3860D0[(int)v200 + 3];
            v205 = a1;
            v206 = a4;
            v207 = v204;
LABEL_303:
            flatbuffers::CopyInline(v205, v198, v206, v204, v207);
LABEL_306:
            ++v187;
          }
          while (&v8[v187 + 1] != &v11[*v8]);
        }
        v220 = (unsigned __int16 *)((char *)v6 - *v6);
        if (*v220 >= 9u && (v221 = v220[4]) != 0 && *((_BYTE *)v6 + v221))
        {
          *(_QWORD *)(a1 + 56) -= 8 * *(unsigned int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = 0;
          *(_WORD *)(a1 + 68) = 0;
          v222 = (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
        }
        else
        {
          v222 = sub_1DF3548F4(a1, v186);
        }
        if (__p)
          operator delete(__p);
        return v222;
      case 0xF:
        v29 = (unsigned __int16 *)((char *)a2 - *a2);
        if (*v29 < 5u)
        {
          v30 = 0;
        }
        else
        {
          v30 = v29[2];
          if (v30)
            v30 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v30);
        }
        if (v16 < 7)
        {
          v40 = 0;
        }
        else
        {
          v40 = (int *)v15[3];
          if (v15[3])
            v40 = (int *)((char *)v40 + (_QWORD)v14 + *(unsigned int *)((char *)v40 + (_QWORD)v14));
        }
        v44 = (unsigned __int16 *)((char *)v40 - *v40);
        if (*v44 >= 9u && (v45 = v44[4]) != 0)
          v46 = *(unsigned int *)((char *)v40 + v45);
        else
          v46 = 0xFFFFFFFFLL;
        v31 = (char *)(v30 + 4 * v46 + 4 + *(unsigned int *)(v30 + 4 * v46 + 4));
        v47 = &v31[-*(int *)v31];
        if (*(unsigned __int16 *)v47 >= 9u)
        {
          v48 = *((unsigned __int16 *)v47 + 4);
          if (v48)
          {
            if (v31[v48])
              goto LABEL_62;
          }
        }
        if (v16 < 0xB)
        {
          v43 = a2;
          goto LABEL_70;
        }
        v50 = v15[5];
        v43 = a2;
        if (!v50)
          goto LABEL_70;
        v51 = *(unsigned __int16 *)((char *)v14 + v50);
        if (v20 > v51)
        {
          LODWORD(v20) = *(unsigned __int16 *)&v19[v51];
LABEL_70:
          LODWORD(v18) = *(int *)((char *)a4 + v20);
          goto LABEL_71;
        }
        LODWORD(v20) = 0;
LABEL_71:
        v41 = (char *)a4 + v20 + v18;
        v42 = a1;
LABEL_72:
        v26 = flatbuffers::CopyTable(v42, v43, v31, v41, 0);
        goto LABEL_73;
      case 0x10:
        v31 = sub_1DF37EBF0(a2, v6, (int *)((char *)v13 + *v13), a4);
        v32 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v32 >= 0xBu && (v33 = v32[5]) != 0)
          v34 = *(unsigned __int16 *)((char *)v14 + v33);
        else
          v34 = 0;
        v35 = *a4;
        if (*(unsigned __int16 *)((char *)a4 - v35) <= v34)
        {
          v36 = 0;
        }
        else
        {
          v36 = *(unsigned __int16 *)((char *)a4 + v34 - v35);
          LODWORD(v35) = *(int *)((char *)a4 + v36);
        }
        v41 = (char *)a4 + v36 + v35;
        v42 = a1;
        v43 = a2;
        goto LABEL_72;
      default:
        goto LABEL_62;
    }
  }
}

char *sub_1DF37EBF0(int *a1, int *a2, int *a3, int *a4)
{
  unsigned __int16 *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  int *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int *v17;
  char *v18;
  int v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  std::string::size_type v24;
  const void *v25;
  unsigned int v26;
  std::string *p_dst;
  uint64_t v28;
  std::string *v29;
  std::string::size_type v30;
  void **v31;
  unsigned int *v32;
  int *v33;
  char *v34;
  unsigned __int16 *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int *v43;
  int *v44;
  unsigned __int16 *v45;
  uint64_t v46;
  std::string __dst;
  void *__p[2];
  uint64_t v50;
  void **__key;

  v5 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v5 >= 7u && (v6 = v5[3]) != 0)
    v7 = (char *)a1 + v6 + *(unsigned int *)((char *)a1 + v6);
  else
    v7 = 0;
  v8 = *a3;
  v9 = (char *)a3 - v8;
  v10 = *(unsigned __int16 *)((char *)a3 - v8);
  if (v10 < 7)
  {
    v11 = 0;
  }
  else
  {
    v11 = (int *)*((unsigned __int16 *)v9 + 3);
    if (*((_WORD *)v9 + 3))
      v11 = (int *)((char *)v11 + (_QWORD)a3 + *(unsigned int *)((char *)v11 + (_QWORD)a3));
  }
  v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 9u && (v13 = v12[4]) != 0)
    v14 = 4 * *(unsigned int *)((char *)v11 + v13);
  else
    v14 = 0x3FFFFFFFCLL;
  v15 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v15 >= 7u && (v16 = v15[3]) != 0)
    v17 = (unsigned int *)((char *)a2 + v16 + *(unsigned int *)((char *)a2 + v16));
  else
    v17 = 0;
  v18 = &v7[v14];
  if (v10 < 5)
  {
    v19 = 0;
  }
  else
  {
    v19 = *((unsigned __int16 *)v9 + 2);
    LODWORD(v8) = *(int *)((char *)a3 + *((unsigned __int16 *)v9 + 2));
  }
  v22 = *((_DWORD *)v18 + 1);
  v20 = v18 + 4;
  v21 = v22;
  v23 = (unsigned int *)((char *)a3 + v19 + v8);
  v26 = *v23;
  v25 = v23 + 1;
  v24 = v26;
  if (v26 >= 0x17)
  {
    if ((v24 | 7) == 0x17)
      v28 = (v24 & 0xFFFFFFF8) + 8;
    else
      v28 = v24 | 7;
    p_dst = (std::string *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v24;
    __dst.__r_.__value_.__r.__words[2] = v28 - 0x7FFFFFFFFFFFFFFFLL;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_27;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v24;
  p_dst = &__dst;
  if ((_DWORD)v24)
LABEL_27:
    memcpy(p_dst, v25, v24);
  p_dst->__r_.__value_.__s.__data_[v24] = 0;
  v29 = std::string::append(&__dst, "_type");
  v30 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v50 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = __p;
  if (v50 < 0)
    v31 = (void **)__p[0];
  __key = v31;
  v32 = (unsigned int *)bsearch(&__key, v17 + 1, *v17, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1DF38123C);
  if (v32)
    v33 = (int *)((char *)v32 + *v32);
  else
    v33 = 0;
  if (SHIBYTE(v50) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v34 = &v20[v21];
  v35 = (unsigned __int16 *)((char *)v33 - *v33);
  v36 = *v35;
  if (v36 < 0xB)
  {
    LODWORD(v37) = 0;
LABEL_44:
    LOBYTE(v38) = 0;
    goto LABEL_45;
  }
  v37 = v35[5];
  if (v35[5])
    LODWORD(v37) = *(unsigned __int16 *)((char *)v33 + v37);
  if (v36 < 0xD)
    goto LABEL_44;
  v38 = v35[6];
  if (v38)
    LOBYTE(v38) = *((_BYTE *)v33 + v38);
LABEL_45:
  v39 = (unsigned __int16 *)((char *)a4 - *a4);
  if (*v39 > v37)
  {
    v40 = *(unsigned __int16 *)((char *)v39 + v37);
    if (v40)
      LOBYTE(v38) = *((_BYTE *)a4 + v40);
  }
  v41 = *(int *)v34;
  if (*(unsigned __int16 *)&v34[-v41] < 7u)
  {
    v42 = 0;
  }
  else
  {
    v42 = *(unsigned __int16 *)&v34[-v41 + 6];
    LODWORD(v41) = *(_DWORD *)&v34[*(unsigned __int16 *)&v34[-v41 + 6]];
  }
  LOBYTE(__p[0]) = v38;
  v43 = (unsigned int *)bsearch(__p, &v34[v42 + 4 + v41], *(unsigned int *)&v34[v42 + v41], 4uLL, (int (__cdecl *)(const void *, const void *))sub_1DF381294);
  if (v43)
    v44 = (int *)((char *)v43 + *v43);
  else
    v44 = 0;
  v45 = (unsigned __int16 *)((char *)v44 - *v44);
  if (*v45 >= 9u && (v46 = v45[4]) != 0)
    return (char *)v44 + v46 + *(unsigned int *)((char *)v44 + v46);
  else
    return 0;
}

uint64_t flatbuffers::VerifyStruct(_QWORD *a1, int *a2, unsigned int a3, int *a4, int a5)
{
  unsigned __int16 *v5;
  uint64_t v6;
  int v7;
  unsigned __int16 *v8;
  unint64_t v9;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  BOOL v14;

  v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 <= a3)
    return a5 ^ 1u;
  v6 = *(unsigned __int16 *)((char *)v5 + a3);
  if (v6)
    v7 = 0;
  else
    v7 = a5;
  if (!v6)
    return v7 ^ 1u;
  v8 = (unsigned __int16 *)((char *)a4 - *a4);
  if (*v8 < 0xDu)
  {
    v9 = 0;
  }
  else
  {
    v9 = v8[6];
    if (v9)
      v9 = *(int *)((char *)a4 + v9);
  }
  v11 = a1[1];
  v12 = (char *)a2 + v6 - *a1;
  v14 = v11 >= v9;
  v13 = v11 - v9;
  return v13 != 0 && v14 && v13 >= (unint64_t)v12;
}

uint64_t flatbuffers::VerifyVectorOfStructs(uint64_t a1, int *a2, unsigned int a3, int *a4, int a5)
{
  unsigned __int16 *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;

  v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 <= a3)
    return a5 ^ 1u;
  v6 = *(unsigned __int16 *)((char *)v5 + a3);
  if (!v6)
    return a5 ^ 1u;
  v7 = (unsigned int *)((char *)a2 + v6 + *(unsigned int *)((char *)a2 + v6));
  v8 = (unsigned __int16 *)((char *)a4 - *a4);
  if (*v8 >= 0xDu && (v9 = v8[6]) != 0)
    v10 = *(int *)((char *)a4 + v9);
  else
    v10 = 0;
  v12 = (unint64_t)v7 - *(_QWORD *)a1;
  if ((v12 & 3) != 0 && *(_BYTE *)(a1 + 40) != 0)
    return 0;
  v11 = 0;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14 >= 5 && v14 - 4 >= v12)
  {
    v15 = *v7;
    if (0x7FFFFFFF / v10 <= v15)
      return 0;
    v16 = v10 * v15 + 4;
    v18 = v14 >= v16;
    v17 = v14 - v16;
    return v17 != 0 && v18 && v17 >= v12;
  }
  return v11;
}

uint64_t flatbuffers::VerifyUnion(_QWORD *a1, int *a2, uint64_t a3, unsigned int *a4, int *a5)
{
  unsigned __int16 *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int16 *v9;
  int *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  int *v31;
  unsigned __int16 *v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  unsigned __int16 *v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;

  if (!a3)
    return 1;
  v5 = (unsigned __int16 *)((char *)a2 - *a2);
  v6 = *v5;
  if (v6 < 7)
  {
    v7 = 0;
  }
  else
  {
    v7 = v5[3];
    if (v5[3])
      v7 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v7);
  }
  v9 = (unsigned __int16 *)((char *)a5 - *a5);
  if (*v9 < 7u)
  {
    v10 = 0;
  }
  else
  {
    v10 = (int *)v9[3];
    if (v10)
      v10 = (int *)((char *)v10 + (_QWORD)a5 + *(unsigned int *)((char *)v10 + (_QWORD)a5));
  }
  v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 9u && (v12 = v11[4]) != 0)
    v13 = 4 * *(unsigned int *)((char *)v10 + v12);
  else
    v13 = 0x3FFFFFFFCLL;
  v14 = (int *)(v7 + v13 + 4 + *(unsigned int *)(v7 + v13 + 4));
  v15 = *v14;
  v16 = (char *)v14 - v15;
  v17 = *(unsigned __int16 *)((char *)v14 - v15);
  if (v17 < 7)
  {
    LODWORD(v18) = 0;
    v21 = 4;
    LODWORD(v19) = *v14;
  }
  else
  {
    v18 = *((unsigned __int16 *)v16 + 3);
    if (*((_WORD *)v16 + 3))
    {
      v19 = *(unsigned int *)((char *)v14 + v18);
      v20 = (char *)v14 + v18 + v19;
    }
    else
    {
      v20 = 0;
      LODWORD(v19) = *v14;
    }
    v21 = (uint64_t)(v20 + 4);
  }
  v22 = (uint64_t)&v14[*(int *)((char *)v14 + v18 + v19) + 1]
      + v18
      + v19;
  if (v21 != v22)
  {
    while (1)
    {
      v23 = *(unsigned int *)v21;
      v24 = v23 - *(int *)(v21 + v23);
      if (*(unsigned __int16 *)(v21 + v24) >= 7u && (v25 = *(unsigned __int16 *)(v21 + v24 + 6)) != 0)
        v26 = *(_QWORD *)(v21 + v23 + v25);
      else
        v26 = 0;
      if (v26 == a3)
        break;
      v21 += 4;
      if (v21 == v22)
      {
        v21 = v22;
        break;
      }
    }
  }
  if (v17 < 7)
  {
    v27 = 0;
  }
  else
  {
    v27 = *((unsigned __int16 *)v16 + 3);
    LODWORD(v15) = *(int *)((char *)v14 + v27);
  }
  if ((int *)v21 == (int *)((char *)&v14[*(int *)((char *)v14 + v27 + v15) + 1] + v27 + v15))
    return 0;
  v28 = (int *)(v21 + *(unsigned int *)v21);
  v29 = (unsigned __int16 *)((char *)v28 - *v28);
  if (*v29 >= 0xBu && (v30 = v29[5]) != 0)
    v31 = (int *)((char *)v28 + v30 + *(unsigned int *)((char *)v28 + v30));
  else
    v31 = 0;
  v32 = (unsigned __int16 *)((char *)v31 - *v31);
  v33 = *v32;
  if (v33 < 5 || !v32[2])
    return 0;
  v34 = *((char *)v31 + v32[2]);
  if (v34 == 13)
    return sub_1DF36CE84((uint64_t)a1, a4);
  if (v34 != 15)
    return 0;
  if (v6 < 5)
  {
    v35 = 0;
  }
  else
  {
    v35 = v5[2];
    if (v35)
      v35 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v35);
  }
  if (v33 >= 9 && v32[4])
    v36 = 4 * *(unsigned int *)((char *)v31 + v32[4]);
  else
    v36 = 0x3FFFFFFFCLL;
  v37 = (int *)(v35 + v36 + 4 + *(unsigned int *)(v35 + v36 + 4));
  v38 = (unsigned __int16 *)((char *)v37 - *v37);
  v39 = *v38;
  if (v39 < 9 || !v38[4] || !*((_BYTE *)v37 + v38[4]))
    return flatbuffers::VerifyObject();
  if (v39 < 0xD)
  {
    v40 = 0;
  }
  else
  {
    v40 = v38[6];
    if (v40)
      v40 = *(int *)((char *)v37 + v40);
  }
  v41 = a1[1];
  v43 = v41 >= v40;
  v42 = v41 - v40;
  return v42 != 0 && v43 && v42 >= (unint64_t)a4 - *a1;
}

uint64_t flatbuffers::VerifyObject(uint64_t a1, int *a2, int *a3, int *a4, int a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned __int16 *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unsigned __int16 *v39;
  uint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned __int16 *v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  unsigned __int16 *v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned __int16 *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  unsigned __int16 *v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  unsigned __int16 *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned __int16 *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _BOOL8 v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  unsigned __int16 *v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  unsigned __int16 *v91;
  uint64_t v92;
  int *v93;
  unsigned __int16 *v94;
  uint64_t v95;
  int v96;
  unsigned __int16 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned __int16 *v107;
  uint64_t v108;
  unsigned int *v109;
  uint64_t v110;
  uint64_t v111;
  _BOOL4 v112;

  if (!a4)
    return a5 ^ 1u;
  result = sub_1DF36CF04((uint64_t *)a1, a4);
  if (!(_DWORD)result)
    return result;
  v10 = *(unsigned __int16 *)((char *)a3 - *a3 + 6);
  v11 = *(unsigned int *)((char *)a3 + v10);
  if (*(int *)((char *)a3 + v10 + v11))
  {
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = v10;
      v15 = v11 + v10;
      v16 = *(unsigned int *)((char *)&a3[v12 + 1] + v15);
      v17 = v15 + v16;
      v18 = (int *)((char *)&a3[v12] + v15 + v16);
      v19 = v18[1];
      v20 = *(unsigned __int16 *)((char *)&a3[v12 + 1] + v17 - v19);
      if (v20 < 7)
      {
        v22 = 0;
      }
      else
      {
        v21 = v14 + v11 + v16;
        v22 = (int *)*(unsigned __int16 *)((char *)&a3[v12 + 2] + v21 - v19 + 2);
        if (*(_WORD *)((char *)&a3[v12 + 2] + v21 - v19 + 2))
          v22 = (int *)((char *)v22
                      + v21
                      + v12 * 4
                      + (_QWORD)a3
                      + *(unsigned int *)((char *)&a3[v12 + 1] + (_QWORD)v22 + v21)
                      + 4);
      }
      v23 = (unsigned __int16 *)((char *)v22 - *v22);
      if (*v23 < 5u)
        goto LABEL_45;
      v24 = v23[2];
      if (!v24)
        goto LABEL_45;
      v25 = v18 + 1;
      switch(*((_BYTE *)v22 + v24))
      {
        case 0xFD:
        case 9:
        case 0xA:
        case 0xC:
          if (v20 >= 0xB && (v26 = v14 + v11 + v16, *(_WORD *)((char *)&a3[v12 + 3] + v26 - v19 + 2)))
            v27 = *(unsigned __int16 *)((char *)a3
                                      + v26
                                      + v12 * 4
                                      + *(unsigned __int16 *)((char *)&a3[v12 + 3] + v26 - v19 + 2)
                                      + 4);
          else
            v27 = 0;
          v34 = (unsigned __int16 *)((char *)a4 - *a4);
          if (*v34 <= v27)
            goto LABEL_45;
          v35 = *(unsigned __int16 *)((char *)v34 + v27);
          if (!v35)
            goto LABEL_45;
          result = 0;
          v36 = *(_QWORD *)(a1 + 8);
          if (v36 < 9)
            return result;
          v37 = (char *)a4 + v35 - *(_QWORD *)a1;
          v38 = v36 - 8;
          goto LABEL_44;
        case 0xFE:
        case 7:
        case 8:
        case 0xB:
          if (v20 >= 0xB && (v28 = v14 + v11 + v16, *(_WORD *)((char *)&a3[v12 + 3] + v28 - v19 + 2)))
            v29 = *(unsigned __int16 *)((char *)a3
                                      + v28
                                      + v12 * 4
                                      + *(unsigned __int16 *)((char *)&a3[v12 + 3] + v28 - v19 + 2)
                                      + 4);
          else
            v29 = 0;
          v39 = (unsigned __int16 *)((char *)a4 - *a4);
          if (*v39 <= v29)
            goto LABEL_45;
          v40 = *(unsigned __int16 *)((char *)v39 + v29);
          if (!v40)
            goto LABEL_45;
          result = 0;
          v41 = *(_QWORD *)(a1 + 8);
          if (v41 < 5)
            return result;
          v37 = (char *)a4 + v40 - *(_QWORD *)a1;
          v38 = v41 - 4;
          goto LABEL_44;
        case 0xFF:
        case 5:
        case 6:
          if (v20 >= 0xB && (v32 = v14 + v11 + v16, *(_WORD *)((char *)&a3[v12 + 3] + v32 - v19 + 2)))
            v33 = *(unsigned __int16 *)((char *)a3
                                      + v32
                                      + v12 * 4
                                      + *(unsigned __int16 *)((char *)&a3[v12 + 3] + v32 - v19 + 2)
                                      + 4);
          else
            v33 = 0;
          v45 = (unsigned __int16 *)((char *)a4 - *a4);
          if (*v45 <= v33)
            goto LABEL_45;
          v46 = *(unsigned __int16 *)((char *)v45 + v33);
          if (!v46)
            goto LABEL_45;
          result = 0;
          v47 = *(_QWORD *)(a1 + 8);
          if (v47 < 3)
            return result;
          v37 = (char *)a4 + v46 - *(_QWORD *)a1;
          v38 = v47 - 2;
          goto LABEL_44;
        case 1:
        case 2:
        case 3:
        case 4:
          if (v20 >= 0xB && (v30 = v14 + v11 + v16, *(_WORD *)((char *)&a3[v12 + 3] + v30 - v19 + 2)))
            v31 = *(unsigned __int16 *)((char *)a3
                                      + v30
                                      + v12 * 4
                                      + *(unsigned __int16 *)((char *)&a3[v12 + 3] + v30 - v19 + 2)
                                      + 4);
          else
            v31 = 0;
          v42 = (unsigned __int16 *)((char *)a4 - *a4);
          if (*v42 <= v31)
            goto LABEL_45;
          v43 = *(unsigned __int16 *)((char *)v42 + v31);
          if (!v43)
            goto LABEL_45;
          result = 0;
          v44 = *(_QWORD *)(a1 + 8);
          if (v44 < 2)
            return result;
          v37 = (char *)a4 + v43 - *(_QWORD *)a1;
          v38 = v44 - 1;
LABEL_44:
          if (v38 >= (unint64_t)v37)
            goto LABEL_45;
          return result;
        case 0xD:
          if (v20 >= 0xB && (v48 = v14 + v11 + v16, *(_WORD *)((char *)&a3[v12 + 3] + v48 - v19 + 2)))
            v49 = *(unsigned __int16 *)((char *)a3
                                      + v48
                                      + v12 * 4
                                      + *(unsigned __int16 *)((char *)&a3[v12 + 3] + v48 - v19 + 2)
                                      + 4);
          else
            v49 = 0;
          v54 = (unsigned __int16 *)((char *)a4 - *a4);
          v55 = *v54;
          if (v55 > v49)
          {
            v56 = *(unsigned __int16 *)((char *)v54 + v49);
            if (v56)
            {
              result = 0;
              v57 = *(_QWORD *)(a1 + 8);
              if (v57 < 5 || v57 - 4 < (unint64_t)a4 + v56 - *(_QWORD *)a1)
                return result;
            }
          }
          if (v20 >= 0xB
            && (v58 = v14 + v11 + v16, (v59 = *(unsigned __int16 *)((char *)&a3[v12 + 3] + v58 - v19 + 2)) != 0))
          {
            v60 = *(unsigned __int16 *)((char *)a3 + v58 + v12 * 4 + v59 + 4);
          }
          else
          {
            v60 = 0;
          }
          if (v55 > v60 && (v63 = *(unsigned __int16 *)((char *)v54 + v60)) != 0)
            v64 = (unsigned int *)((char *)a4 + v63 + *(unsigned int *)((char *)a4 + v63));
          else
            v64 = 0;
          if (!sub_1DF36CE84(a1, v64))
            return 0;
          goto LABEL_45;
        case 0xE:
          if ((flatbuffers::VerifyVector(a1, a2, a4, v18 + 1) & 1) != 0)
            goto LABEL_45;
          return 0;
        case 0xF:
          v50 = (unsigned __int16 *)((char *)a2 - *a2);
          if (*v50 < 5u)
          {
            v51 = 0;
          }
          else
          {
            v51 = v50[2];
            if (v51)
              v51 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v51);
          }
          if (v20 >= 7 && (v65 = v14 + v11 + v16, *(_WORD *)((char *)&a3[v12 + 2] + v65 - v19 + 2)))
          {
            v66 = v65 + *(unsigned __int16 *)((char *)&a3[v12 + 2] + v65 - v19 + 2);
            v67 = (int *)((char *)&a3[v12 + 1] + v66 + *(unsigned int *)((char *)&a3[v12 + 1] + v66));
          }
          else
          {
            v67 = 0;
          }
          v68 = (unsigned __int16 *)((char *)v67 - *v67);
          if (*v68 >= 9u && (v69 = v68[4]) != 0)
            v70 = *(unsigned int *)((char *)v67 + v69);
          else
            v70 = 0xFFFFFFFFLL;
          v71 = (int *)(v51 + 4 * v70 + 4 + *(unsigned int *)(v51 + 4 * v70 + 4));
          v72 = (unsigned __int16 *)((char *)v71 - *v71);
          if (*v72 >= 9u)
          {
            v73 = v72[4];
            if (v73)
            {
              if (*((_BYTE *)v71 + v73))
              {
                if (v20 < 0xB)
                {
                  v75 = 0;
                }
                else
                {
                  v74 = v14 + v11 + v16;
                  if (*(_WORD *)((char *)&a3[v12 + 3] + v74 - v19 + 2))
                    v75 = *(unsigned __int16 *)((char *)a3
                                              + v74
                                              + v12 * 4
                                              + *(unsigned __int16 *)((char *)&a3[v12 + 3] + v74 - v19 + 2)
                                              + 4);
                  else
                    v75 = 0;
                  if (v20 >= 0x13)
                  {
                    v110 = v14 + v11 + v16;
                    v111 = *(unsigned __int16 *)((char *)&a3[v12 + 5] + v110 - v19 + 2);
                    if (v111)
                    {
                      v112 = *((unsigned __int8 *)a3 + v110 + v12 * 4 + v111 + 4) != 0;
                      goto LABEL_151;
                    }
                  }
                }
                v112 = 0;
LABEL_151:
                if ((flatbuffers::VerifyStruct((_QWORD *)a1, a4, v75, v71, v112) & 1) == 0)
                  return 0;
                goto LABEL_45;
              }
            }
          }
          if (v20 >= 0xB && (v76 = v14 + v11 + v16, *(_WORD *)((char *)&a3[v12 + 3] + v76 - v19 + 2)))
            v77 = *(unsigned __int16 *)((char *)a3
                                      + v76
                                      + v12 * 4
                                      + *(unsigned __int16 *)((char *)&a3[v12 + 3] + v76 - v19 + 2)
                                      + 4);
          else
            v77 = 0;
          v78 = (unsigned __int16 *)((char *)a4 - *a4);
          if (*v78 > v77 && (v79 = *(unsigned __int16 *)((char *)v78 + v77)) != 0)
            v80 = (char *)a4 + v79 + *(unsigned int *)((char *)a4 + v79);
          else
            v80 = 0;
          v83 = v20 >= 0x13
             && (v81 = v14 + v11 + v16, (v82 = *(unsigned __int16 *)((char *)&a3[v12 + 5] + v81 - v19 + 2)) != 0)
             && *((unsigned __int8 *)a3 + v81 + v12 * 4 + v82 + 4) != 0;
          if ((flatbuffers::VerifyObject(a1, a2, v71, v80, v83) & 1) == 0)
            return 0;
LABEL_45:
          ++v13;
          v10 = *(unsigned __int16 *)((char *)a3 - *a3 + 6);
          v11 = *(unsigned int *)((char *)a3 + v10);
          ++v12;
          if (v13 >= *(unsigned int *)((char *)a3 + v10 + v11))
            goto LABEL_154;
          break;
        case 0x10:
          if (v20 >= 0xB && (v52 = v14 + v11 + v16, *(_WORD *)((char *)&a3[v12 + 3] + v52 - v19 + 2)))
            v53 = *(_WORD *)((char *)a3 + v52
                                        + v12 * 4
                                        + *(unsigned __int16 *)((char *)&a3[v12 + 3] + v52 - v19 + 2)
                                        + 4);
          else
            v53 = 0;
          v61 = (unsigned __int16 *)((char *)a2 - *a2);
          if (*v61 < 7u)
          {
            v62 = 0;
          }
          else
          {
            v62 = v61[3];
            if (v62)
              v62 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v62);
          }
          if (v20 >= 7 && (v84 = v14 + v11 + v16, *(_WORD *)((char *)&a3[v12 + 2] + v84 - v19 + 2)))
          {
            v85 = v84 + *(unsigned __int16 *)((char *)&a3[v12 + 2] + v84 - v19 + 2);
            v86 = (int *)((char *)&a3[v12 + 1] + v85 + *(unsigned int *)((char *)&a3[v12 + 1] + v85));
          }
          else
          {
            v86 = 0;
          }
          v87 = (unsigned __int16 *)((char *)v86 - *v86);
          if (*v87 >= 9u && (v88 = v87[4]) != 0)
            v89 = *(unsigned int *)((char *)v86 + v88);
          else
            v89 = 0xFFFFFFFFLL;
          v90 = (int *)(v62 + 4 * v89 + 4 + *(unsigned int *)(v62 + 4 * v89 + 4));
          v91 = (unsigned __int16 *)((char *)v90 - *v90);
          if (*v91 >= 0xBu && (v92 = v91[5]) != 0)
            v93 = (int *)((char *)v90 + v92 + *(unsigned int *)((char *)v90 + v92));
          else
            v93 = 0;
          v94 = (unsigned __int16 *)((char *)v93 - *v93);
          if (*v94 >= 5u)
          {
            v95 = v94[2];
            if (v95)
            {
              result = 0;
              v96 = *((char *)v93 + v95) + 3;
              v97 = v53 - 2;
              switch(v96)
              {
                case 0:
                  v98 = *a4;
                  if (*(unsigned __int16 *)((char *)a4 - v98) <= v97)
                    goto LABEL_134;
                  v99 = *(unsigned __int16 *)((char *)a4 + v97 - v98);
                  if (!v99)
                    goto LABEL_134;
                  v100 = *(_QWORD *)((char *)a4 + v99);
                  goto LABEL_135;
                case 1:
                  v98 = *a4;
                  if (*(unsigned __int16 *)((char *)a4 - v98) <= v97)
                    goto LABEL_134;
                  v101 = *(unsigned __int16 *)((char *)a4 + v97 - v98);
                  if (!v101)
                    goto LABEL_134;
                  v100 = *(unsigned int *)((char *)a4 + v101);
                  goto LABEL_135;
                case 2:
                  v98 = *a4;
                  if (*(unsigned __int16 *)((char *)a4 - v98) <= v97)
                    goto LABEL_134;
                  v102 = *(unsigned __int16 *)((char *)a4 + v97 - v98);
                  if (!v102)
                    goto LABEL_134;
                  v100 = *(unsigned __int16 *)((char *)a4 + v102);
                  goto LABEL_135;
                case 4:
                  v98 = *a4;
                  if (*(unsigned __int16 *)((char *)a4 - v98) > v97
                    && (v103 = *(unsigned __int16 *)((char *)a4 + v97 - v98)) != 0)
                  {
                    v100 = *((unsigned __int8 *)a4 + v103);
                  }
                  else
                  {
LABEL_134:
                    v100 = 0;
                  }
LABEL_135:
                  if (v20 >= 0xB
                    && (v104 = v14 + v11 + v16,
                        (v105 = *(unsigned __int16 *)((char *)&a3[v12 + 3] + v104 - v19 + 2)) != 0))
                  {
                    v106 = *(unsigned __int16 *)((char *)a3 + v104 + v12 * 4 + v105 + 4);
                  }
                  else
                  {
                    v106 = 0;
                  }
                  v107 = (unsigned __int16 *)((char *)a4 - (int)v98);
                  if (*v107 > v106 && (v108 = *(unsigned __int16 *)((char *)v107 + v106)) != 0)
                    v109 = (unsigned int *)((char *)a4 + v108 + *(unsigned int *)((char *)a4 + v108));
                  else
                    v109 = 0;
                  result = flatbuffers::VerifyUnion((_QWORD *)a1, a2, v100, v109, v25);
                  if (!(_DWORD)result)
                    return result;
                  goto LABEL_45;
                default:
                  return result;
              }
            }
          }
          return 0;
        default:
          goto LABEL_45;
      }
    }
  }
LABEL_154:
  --*(_DWORD *)(a1 + 16);
  return 1;
}

uint64_t flatbuffers::VerifyVector(uint64_t a1, int *a2, int *a3, int *a4)
{
  unsigned __int16 *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int16 *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  int *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v53;
  unint64_t v54;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  unsigned int *v65;
  unint64_t v66;
  unsigned int *v67;
  int *v68;
  uint64_t v69;
  unsigned int *v70;
  unint64_t v71;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned __int16 *v78;
  uint64_t v79;
  unsigned __int16 *v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  unsigned __int16 *v84;
  uint64_t v85;
  uint64_t v86;
  _BOOL4 v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  unint64_t v91;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v98;
  unsigned int *v99;
  int *v100;
  unsigned __int16 *v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  unsigned __int16 *v105;
  uint64_t v106;
  int *v107;
  unsigned __int16 *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int16 v111;
  uint64_t v112;
  unsigned __int16 v113;
  uint64_t v114;
  unsigned __int16 v115;
  uint64_t v116;
  unsigned __int16 v117;
  uint64_t v118;
  unsigned int *v119;
  uint64_t v120;
  unsigned int *v121;
  uint64_t v122;
  unsigned int *v123;
  uint64_t v124;
  unsigned int *v125;
  uint64_t v126;
  unsigned int *v127;
  unsigned int *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int *v131;
  unsigned int *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int *v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int *v140;
  uint64_t v141;
  int v142;

  v7 = (unsigned __int16 *)((char *)a4 - *a4);
  v8 = *v7;
  if (v8 >= 0xB && v7[5])
    v9 = *(unsigned __int16 *)((char *)a4 + v7[5]);
  else
    v9 = 0;
  v10 = (unsigned __int16 *)((char *)a3 - *a3);
  v11 = *v10;
  if (v11 > v9)
  {
    v12 = *(unsigned __int16 *)((char *)v10 + v9);
    if (v12)
    {
      v13 = *(_QWORD *)(a1 + 8);
      v14 = (unint64_t)a3 + v12 - *(_QWORD *)a1;
      v15 = v13 >= 5 && v13 - 4 >= v14;
      if (!v15)
        return 0;
    }
  }
  if (v8 < 7)
  {
    v16 = 0;
  }
  else
  {
    v16 = (int *)v7[3];
    if (v7[3])
      v16 = (int *)((char *)v16 + (_QWORD)a4 + *(unsigned int *)((char *)v16 + (_QWORD)a4));
  }
  v17 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v17 < 7u)
    return 0;
  v18 = v17[3];
  if (!v18)
    return 0;
  result = 0;
  switch(*((_BYTE *)v16 + v18))
  {
    case 0xFD:
      if (v8 < 0xB)
      {
        LODWORD(v42) = 0;
      }
      else
      {
        v42 = v7[5];
        if (v42)
          LODWORD(v42) = *(unsigned __int16 *)((char *)a4 + v42);
      }
      if (v11 > v42 && (v56 = *(unsigned __int16 *)((char *)v10 + v42)) != 0)
        v57 = (unsigned int *)((char *)a3 + v56 + *(unsigned int *)((char *)a3 + v56));
      else
        v57 = 0;
      return sub_1DF38087C(a1, v57);
    case 0xFE:
      if (v8 < 0xB)
      {
        LODWORD(v43) = 0;
      }
      else
      {
        v43 = v7[5];
        if (v43)
          LODWORD(v43) = *(unsigned __int16 *)((char *)a4 + v43);
      }
      if (v11 > v43 && (v58 = *(unsigned __int16 *)((char *)v10 + v43)) != 0)
        v59 = (unsigned int *)((char *)a3 + v58 + *(unsigned int *)((char *)a3 + v58));
      else
        v59 = 0;
      return sub_1DF36D7F4(a1, v59);
    case 0xFF:
      if (v8 < 0xB)
      {
        LODWORD(v44) = 0;
      }
      else
      {
        v44 = v7[5];
        if (v44)
          LODWORD(v44) = *(unsigned __int16 *)((char *)a4 + v44);
      }
      if (v11 > v44 && (v60 = *(unsigned __int16 *)((char *)v10 + v44)) != 0)
        v61 = (unsigned int *)((char *)a3 + v60 + *(unsigned int *)((char *)a3 + v60));
      else
        v61 = 0;
      return sub_1DF380814(a1, v61);
    case 1:
      if (v8 < 0xB)
      {
        LODWORD(v45) = 0;
      }
      else
      {
        v45 = v7[5];
        if (v45)
          LODWORD(v45) = *(unsigned __int16 *)((char *)a4 + v45);
      }
      if (v11 > v45 && (v62 = *(unsigned __int16 *)((char *)v10 + v45)) != 0)
        v63 = (unsigned int *)((char *)a3 + v62 + *(unsigned int *)((char *)a3 + v62));
      else
        v63 = 0;
      return sub_1DF3807B0(a1, v63);
    case 2:
    case 3:
    case 4:
      if (v8 < 0xB)
      {
        LODWORD(v20) = 0;
      }
      else
      {
        v20 = v7[5];
        if (v20)
          LODWORD(v20) = *(unsigned __int16 *)((char *)a4 + v20);
      }
      if (v11 <= v20)
        return 1;
      v24 = *(unsigned __int16 *)((char *)v10 + v20);
      if (!v24)
        return 1;
      v25 = (unsigned int *)((char *)a3 + v24 + *(unsigned int *)((char *)a3 + v24));
      v26 = (unint64_t)v25 - *(_QWORD *)a1;
      if ((v26 & 3) != 0 && *(_BYTE *)(a1 + 40) != 0)
        return 0;
      result = 0;
      v28 = *(_QWORD *)(a1 + 8);
      if (v28 >= 5 && v28 - 4 >= v26)
      {
        v29 = *v25;
        if (v29 <= 0x7FFFFFFE)
          goto LABEL_100;
        return 0;
      }
      return result;
    case 5:
    case 6:
      if (v8 < 0xB)
      {
        LODWORD(v23) = 0;
      }
      else
      {
        v23 = v7[5];
        if (v23)
          LODWORD(v23) = *(unsigned __int16 *)((char *)a4 + v23);
      }
      if (v11 <= v23)
        return 1;
      v50 = *(unsigned __int16 *)((char *)v10 + v23);
      if (!v50)
        return 1;
      v51 = (unsigned int *)((char *)a3 + v50 + *(unsigned int *)((char *)a3 + v50));
      v26 = (unint64_t)v51 - *(_QWORD *)a1;
      if ((v26 & 3) != 0 && *(_BYTE *)(a1 + 40) != 0)
        return 0;
      result = 0;
      v28 = *(_QWORD *)(a1 + 8);
      if (v28 >= 5 && v28 - 4 >= v26)
      {
        v53 = *v51;
        if (v53 > 0x3FFFFFFE)
          return 0;
        v29 = 2 * v53;
        goto LABEL_100;
      }
      return result;
    case 7:
    case 8:
    case 0xB:
      if (v8 < 0xB)
      {
        LODWORD(v21) = 0;
      }
      else
      {
        v21 = v7[5];
        if (v21)
          LODWORD(v21) = *(unsigned __int16 *)((char *)a4 + v21);
      }
      if (v11 <= v21)
        return 1;
      v30 = *(unsigned __int16 *)((char *)v10 + v21);
      if (!v30)
        return 1;
      v31 = (unsigned int *)((char *)a3 + v30 + *(unsigned int *)((char *)a3 + v30));
      v26 = (unint64_t)v31 - *(_QWORD *)a1;
      if ((v26 & 3) != 0 && *(_BYTE *)(a1 + 40) != 0)
        return 0;
      result = 0;
      v28 = *(_QWORD *)(a1 + 8);
      if (v28 >= 5 && v28 - 4 >= v26)
      {
        v33 = *v31;
        if (v33 > 0x1FFFFFFE)
          return 0;
        v29 = 4 * v33;
LABEL_100:
        v54 = v29 + 4;
        v15 = v28 >= v54;
        v41 = v28 - v54;
        v40 = v41 != 0 && v15;
        return v40 && v41 >= v26;
      }
      return result;
    case 9:
    case 0xA:
    case 0xC:
      if (v8 < 0xB)
      {
        LODWORD(v22) = 0;
      }
      else
      {
        v22 = v7[5];
        if (v22)
          LODWORD(v22) = *(unsigned __int16 *)((char *)a4 + v22);
      }
      if (v11 <= v22)
        return 1;
      v34 = *(unsigned __int16 *)((char *)v10 + v22);
      if (!v34)
        return 1;
      v35 = (unsigned int *)((char *)a3 + v34 + *(unsigned int *)((char *)a3 + v34));
      v26 = (unint64_t)v35 - *(_QWORD *)a1;
      if ((v26 & 3) != 0 && *(_BYTE *)(a1 + 40) != 0)
        return 0;
      result = 0;
      v37 = *(_QWORD *)(a1 + 8);
      if (v37 >= 5 && v37 - 4 >= v26)
      {
        v38 = *v35;
        if (v38 > 0xFFFFFFE)
          return 0;
        v39 = (8 * v38) | 4;
        v15 = v37 >= v39;
        v41 = v37 - v39;
        v40 = v41 != 0 && v15;
        return v40 && v41 >= v26;
      }
      return result;
    case 0xD:
      if (v8 < 0xB)
      {
        LODWORD(v46) = 0;
      }
      else
      {
        v46 = v7[5];
        if (v46)
          LODWORD(v46) = *(unsigned __int16 *)((char *)a4 + v46);
      }
      if (v11 > v46 && (v64 = *(unsigned __int16 *)((char *)v10 + v46)) != 0)
        v65 = (unsigned int *)((char *)a3 + v64 + *(unsigned int *)((char *)a3 + v64));
      else
        v65 = 0;
      result = sub_1DF36D7F4(a1, v65);
      if ((_DWORD)result)
      {
        if (!v65 || !*v65)
          return 1;
        v66 = 0;
        v67 = v65 + 1;
        do
        {
          result = sub_1DF36CE84(a1, (unsigned int *)((char *)v67 + *v67));
          if ((result & 1) == 0)
            break;
          ++v66;
          ++v67;
        }
        while (v66 < *v65);
      }
      return result;
    case 0xF:
      v47 = (unsigned __int16 *)((char *)a2 - *a2);
      if (*v47 < 5u)
      {
        v48 = 0;
      }
      else
      {
        v48 = v47[2];
        if (v48)
          v48 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v48);
      }
      if (v8 < 7)
      {
        v68 = 0;
      }
      else
      {
        v68 = (int *)v7[3];
        if (v7[3])
          v68 = (int *)((char *)v68 + (_QWORD)a4 + *(unsigned int *)((char *)v68 + (_QWORD)a4));
      }
      v80 = (unsigned __int16 *)((char *)v68 - *v68);
      if (*v80 >= 9u && (v81 = v80[4]) != 0)
        v82 = 4 * *(unsigned int *)((char *)v68 + v81);
      else
        v82 = 0x3FFFFFFFCLL;
      v83 = (int *)(v48 + v82 + 4 + *(unsigned int *)(v48 + v82 + 4));
      v84 = (unsigned __int16 *)((char *)v83 - *v83);
      if (*v84 >= 9u)
      {
        v85 = v84[4];
        if (v85)
        {
          if (*((_BYTE *)v83 + v85))
          {
            if (v8 < 0xB)
            {
              LODWORD(v86) = 0;
            }
            else
            {
              v86 = v7[5];
              if (v7[5])
                LODWORD(v86) = *(unsigned __int16 *)((char *)a4 + v86);
              if (v8 >= 0x13 && v7[9])
              {
                v87 = *((unsigned __int8 *)a4 + v7[9]) != 0;
                return flatbuffers::VerifyVectorOfStructs(a1, a3, v86, v83, v87);
              }
            }
            v87 = 0;
            return flatbuffers::VerifyVectorOfStructs(a1, a3, v86, v83, v87);
          }
        }
      }
      if (v8 < 0xB)
      {
        LODWORD(v88) = 0;
      }
      else
      {
        v88 = v7[5];
        if (v88)
          LODWORD(v88) = *(unsigned __int16 *)((char *)a4 + v88);
      }
      if (v11 <= v88)
        return 1;
      v89 = *(unsigned __int16 *)((char *)v10 + v88);
      if (!v89)
        return 1;
      v90 = (unsigned int *)((char *)a3 + v89 + *(unsigned int *)((char *)a3 + v89));
      v91 = (unint64_t)v90 - *(_QWORD *)a1;
      if ((v91 & 3) != 0 && *(_BYTE *)(a1 + 40) != 0)
        return 0;
      result = 0;
      v93 = *(_QWORD *)(a1 + 8);
      if (v93 >= 5 && v93 - 4 >= v91)
      {
        v94 = *v90;
        if (v94 > 0x1FFFFFFE)
          return 0;
        v95 = 4 * v94 + 4;
        v40 = v93 > v95;
        v96 = v93 - v95;
        if (!v40 || v96 < v91)
          return 0;
        if (!(_DWORD)v94)
          return 1;
        v98 = 0;
        v99 = v90 + 1;
        do
        {
          result = flatbuffers::VerifyObject(a1, a2, v83, (char *)v99 + *v99, 1);
          if ((result & 1) == 0)
            break;
          ++v98;
          ++v99;
        }
        while (v98 < *v90);
      }
      break;
    case 0x10:
      if (v8 < 0xB)
      {
        LODWORD(v49) = 0;
      }
      else
      {
        v49 = v7[5];
        if (v7[5])
          LODWORD(v49) = *(unsigned __int16 *)((char *)a4 + v49);
      }
      if (v11 <= v49)
        return 1;
      v69 = *(unsigned __int16 *)((char *)v10 + v49);
      if (!v69)
        return 1;
      v70 = (unsigned int *)((char *)a3 + v69 + *(unsigned int *)((char *)a3 + v69));
      v71 = (unint64_t)v70 - *(_QWORD *)a1;
      if ((v71 & 3) != 0 && *(_BYTE *)(a1 + 40) != 0)
        return 0;
      result = 0;
      v73 = *(_QWORD *)(a1 + 8);
      if (v73 >= 5 && v73 - 4 >= v71)
      {
        v74 = *v70;
        if (v74 > 0x1FFFFFFE)
          return 0;
        v75 = 4 * v74 + 4;
        v40 = v73 > v75;
        v76 = v73 - v75;
        if (!v40 || v76 < v71)
          return 0;
        v78 = (unsigned __int16 *)((char *)a2 - *a2);
        if (*v78 < 7u)
        {
          v79 = 0;
        }
        else
        {
          v79 = v78[3];
          if (v79)
            v79 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v79);
        }
        if (v8 < 7)
        {
          v100 = 0;
        }
        else
        {
          v100 = (int *)v7[3];
          if (v7[3])
            v100 = (int *)((char *)v100 + (_QWORD)a4 + *(unsigned int *)((char *)v100 + (_QWORD)a4));
        }
        v101 = (unsigned __int16 *)((char *)v100 - *v100);
        if (*v101 >= 9u && (v102 = v101[4]) != 0)
          v103 = 4 * *(unsigned int *)((char *)v100 + v102);
        else
          v103 = 0x3FFFFFFFCLL;
        v104 = (int *)(v79 + v103 + 4 + *(unsigned int *)(v79 + v103 + 4));
        v105 = (unsigned __int16 *)((char *)v104 - *v104);
        if (*v105 >= 0xBu && (v106 = v105[5]) != 0)
          v107 = (int *)((char *)v104 + v106 + *(unsigned int *)((char *)v104 + v106));
        else
          v107 = 0;
        v108 = (unsigned __int16 *)((char *)v107 - *v107);
        if (*v108 < 5u)
          return 0;
        v109 = v108[2];
        if (!v109)
          return 0;
        v142 = *v70;
        result = 0;
        switch(*((_BYTE *)v107 + v109))
        {
          case 0xFD:
            if (v8 >= 0xB && (v110 = v7[5]) != 0)
              v111 = *(_WORD *)((char *)a4 + v110) - 2;
            else
              v111 = -2;
            if (v11 > v111 && (v118 = *(unsigned __int16 *)((char *)v10 + v111)) != 0)
              v119 = (unsigned int *)((char *)a3 + v118 + *(unsigned int *)((char *)a3 + v118));
            else
              v119 = 0;
            result = sub_1DF38087C(a1, v119);
            if ((_DWORD)result)
            {
              if (!v142)
                return 1;
              v126 = 0;
              v127 = v119 + 1;
              v128 = v70 + 1;
              do
              {
                v129 = v126;
                result = flatbuffers::VerifyUnion((_QWORD *)a1, a2, *(_QWORD *)&v127[2 * v126], (unsigned int *)((char *)v128 + *v128), a4);
                if ((result & 1) == 0)
                  break;
                ++v128;
                v126 = v129 + 1;
              }
              while (v129 + 1 < (unint64_t)*v70);
            }
            break;
          case 0xFE:
            if (v8 >= 0xB && (v112 = v7[5]) != 0)
              v113 = *(_WORD *)((char *)a4 + v112) - 2;
            else
              v113 = -2;
            if (v11 > v113 && (v120 = *(unsigned __int16 *)((char *)v10 + v113)) != 0)
              v121 = (unsigned int *)((char *)a3 + v120 + *(unsigned int *)((char *)a3 + v120));
            else
              v121 = 0;
            result = sub_1DF36D7F4(a1, v121);
            if ((_DWORD)result)
            {
              if (!v142)
                return 1;
              v130 = 0;
              v131 = v121 + 1;
              v132 = v70 + 1;
              do
              {
                v133 = v130;
                result = flatbuffers::VerifyUnion((_QWORD *)a1, a2, v131[v130], (unsigned int *)((char *)v132 + *v132), a4);
                if ((result & 1) == 0)
                  break;
                ++v132;
                v130 = v133 + 1;
              }
              while (v133 + 1 < (unint64_t)*v70);
            }
            break;
          case 0xFF:
            if (v8 >= 0xB && (v114 = v7[5]) != 0)
              v115 = *(_WORD *)((char *)a4 + v114) - 2;
            else
              v115 = -2;
            if (v11 > v115 && (v122 = *(unsigned __int16 *)((char *)v10 + v115)) != 0)
              v123 = (unsigned int *)((char *)a3 + v122 + *(unsigned int *)((char *)a3 + v122));
            else
              v123 = 0;
            result = sub_1DF380814(a1, v123);
            if ((_DWORD)result)
            {
              if (!v142)
                return 1;
              v134 = 0;
              v135 = v123 + 1;
              v136 = v70 + 1;
              do
              {
                v137 = v134;
                result = flatbuffers::VerifyUnion((_QWORD *)a1, a2, *((unsigned __int16 *)v135 + v134), (unsigned int *)((char *)v136 + *v136), a4);
                if ((result & 1) == 0)
                  break;
                ++v136;
                v134 = v137 + 1;
              }
              while (v137 + 1 < (unint64_t)*v70);
            }
            break;
          case 1:
            if (v8 >= 0xB && (v116 = v7[5]) != 0)
              v117 = *(_WORD *)((char *)a4 + v116) - 2;
            else
              v117 = -2;
            if (v11 > v117 && (v124 = *(unsigned __int16 *)((char *)v10 + v117)) != 0)
              v125 = (unsigned int *)((char *)a3 + v124 + *(unsigned int *)((char *)a3 + v124));
            else
              v125 = 0;
            result = sub_1DF3807B0(a1, v125);
            if ((_DWORD)result)
            {
              if (!v142)
                return 1;
              v138 = 0;
              v139 = v125 + 1;
              v140 = v70 + 1;
              do
              {
                v141 = v138;
                result = flatbuffers::VerifyUnion((_QWORD *)a1, a2, *((unsigned __int8 *)v139 + v138), (unsigned int *)((char *)v140 + *v140), a4);
                if ((result & 1) == 0)
                  break;
                ++v140;
                v138 = v141 + 1;
              }
              while (v141 + 1 < (unint64_t)*v70);
            }
            break;
          default:
            return result;
        }
      }
      return result;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1DF3807B0(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unsigned int v10;

  if (!a2)
    return 1;
  v2 = (unint64_t)a2 - *(_QWORD *)a1;
  if ((v2 & 3) != 0 && *(_BYTE *)(a1 + 40))
    return 0;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 < 5 || v3 - 4 < v2)
    return 0;
  v6 = *a2;
  v7 = v3 > v6 + 4;
  v8 = v3 - (v6 + 4);
  v10 = v7 && v8 >= v2;
  if (v6 <= 0x7FFFFFFE)
    return v10;
  else
    return 0;
}

BOOL sub_1DF380814(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  if (!a2)
    return 1;
  v2 = (unint64_t)a2 - *(_QWORD *)a1;
  if ((v2 & 3) != 0 && *(_BYTE *)(a1 + 40))
    return 0;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 < 5 || v3 - 4 < v2)
    return 0;
  v5 = *a2;
  if (v5 > 0x3FFFFFFE)
    return 0;
  v6 = 2 * v5 + 4;
  v7 = v3 > v6;
  v8 = v3 - v6;
  return v7 && v8 >= v2;
}

BOOL sub_1DF38087C(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  if (!a2)
    return 1;
  v2 = (unint64_t)a2 - *(_QWORD *)a1;
  if ((v2 & 3) != 0 && *(_BYTE *)(a1 + 40))
    return 0;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 < 5 || v3 - 4 < v2)
    return 0;
  v5 = *a2;
  if (v5 > 0xFFFFFFE)
    return 0;
  v6 = (8 * v5) | 4;
  v7 = v3 > v6;
  v8 = v3 - v6;
  return v7 && v8 >= v2;
}

uint64_t flatbuffers::Verify(int *a1, int *a2, unsigned int *a3, uint64_t a4)
{
  _QWORD v5[2];
  __int128 v6;
  uint64_t v7;
  char v8;

  v5[0] = a3;
  v5[1] = a4;
  v6 = xmmword_1DF385D10;
  v7 = 0;
  v8 = 1;
  return flatbuffers::VerifyObject((uint64_t)v5, a1, a2, (int *)((char *)a3 + *a3), 1);
}

uint64_t sub_1DF380938(uint64_t a1, int *a2, unsigned int a3, int a4, _QWORD *a5, int *a6)
{
  _BYTE *v12;
  _DWORD *v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _BYTE *v18;
  unsigned int v19;
  _DWORD *v20;
  uint64_t v21;
  int *v22;
  uint64_t v24;
  int v25;
  unint64_t v26;
  char **v27;
  char *v28;
  char *v29;
  char *v30;
  int64_t v31;
  char v33;

  v12 = 0;
  *(_QWORD *)a1 = a2;
  v13 = (_DWORD *)*a5;
  v14 = *a5 == a5[1];
  *(_QWORD *)(a1 + 24) = a5;
  v15 = a5[1] - *a5;
  if (v14)
    v13 = 0;
  v16 = (unint64_t)v13 + a3;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (v15 >= 4)
  {
    v17 = v15 >> 2;
    v12 = operator new(v15 >> 2);
    *(_QWORD *)(a1 + 32) = v12;
    v18 = &v12[v15 >> 2];
    *(_QWORD *)(a1 + 48) = v18;
    bzero(v12, v17);
    *(_QWORD *)(a1 + 40) = v18;
  }
  v19 = (a4 + 7) & 0xFFFFFFF8;
  *(_DWORD *)(a1 + 16) = v19;
  if (v19)
  {
    v20 = (_DWORD *)*a5;
    if (*a5 == a5[1])
      v20 = 0;
    v21 = *v20;
    v22 = (_DWORD *)((char *)v20 + v21);
    if (v16 >= (unint64_t)v20 && v16 <= (unint64_t)v22)
    {
      *v20 = v21 + v19;
      *v12 = 1;
    }
    if (!a6)
    {
      v24 = *a2;
      if (*(unsigned __int16 *)((char *)a2 - v24) < 0xDu)
      {
        v25 = 0;
      }
      else
      {
        v25 = *(unsigned __int16 *)((char *)a2 - v24 + 12);
        LODWORD(v24) = *(int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - v24 + 12));
      }
      a6 = (int *)((char *)a2 + v25 + v24);
    }
    sub_1DF380ACC(a1, a6, v22);
    v26 = *(unsigned int *)(a1 + 16);
    v27 = *(char ***)(a1 + 24);
    v28 = &(*v27)[a3];
    if ((int)v26 < 1)
    {
      if ((_DWORD)v26)
      {
        v29 = &v28[-(int)v26];
        v30 = v27[1];
        v31 = v30 - v29;
        if (v30 != v29)
          memmove(&(*v27)[a3], v29, v30 - v29);
        v27[1] = &v28[v31];
      }
    }
    else
    {
      v33 = 0;
      sub_1DF36A444(v27, v28, v26, &v33);
    }
  }
  return a1;
}

uint64_t sub_1DF380ACC(uint64_t result, int *a2, int *a3)
{
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int **v7;
  uint64_t v8;
  int *v9;
  int *v10;
  unsigned int *v12;
  _DWORD *v13;
  int *v14;
  unsigned int *v15;
  int *v16;
  unsigned __int16 *v17;
  unsigned int v18;
  int *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int *v36;
  int *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int *v43;
  unsigned __int16 *v45;
  unsigned int v46;
  int *v47;
  int *v48;
  int *v49;
  char *v50;
  int *v51;
  unsigned __int16 *v52;
  uint64_t v53;
  unsigned __int16 *v54;
  uint64_t v55;
  char *v56;
  int *v57;
  unsigned __int16 *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  int *v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int *v72;
  int *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  int *v78;
  int *v79;
  char *v80;

  v3 = *(uint64_t **)(result + 24);
  if (*v3 == v3[1])
    v4 = 0;
  else
    v4 = *v3;
  v5 = (_BYTE *)(*(_QWORD *)(result + 32) + (((uint64_t)a3 - v4) >> 2));
  if (!*v5)
  {
    v7 = (int **)result;
    v8 = *a3;
    v9 = (int *)((char *)a3 - v8);
    v10 = *(int **)(result + 8);
    if (v10 <= a3)
    {
      if (v10 < v9)
        return result;
      *a3 = v8 - *(_DWORD *)(result + 16);
      goto LABEL_101;
    }
    v12 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 6));
    v13 = (unsigned int *)((char *)v12 + *v12);
    if (*v13)
    {
      v14 = a3 + 1;
      v15 = v13 + 1;
      while (1)
      {
        v16 = (int *)((char *)v15 + *v15);
        v17 = (unsigned __int16 *)((char *)v16 - *v16);
        v18 = *v17;
        if (v18 < 7)
        {
          v19 = 0;
        }
        else
        {
          v19 = (int *)v17[3];
          if (v17[3])
            v19 = (int *)((char *)v19 + (_QWORD)v16 + *(unsigned int *)((char *)v19 + (_QWORD)v16));
        }
        v20 = (unsigned __int16 *)((char *)v19 - *v19);
        if (*v20 < 5u)
          goto LABEL_55;
        v21 = v20[2];
        if (!v21)
          goto LABEL_55;
        v22 = *((char *)v19 + v21);
        if (v22 < 13)
          goto LABEL_55;
        if (v18 < 0xB)
        {
          LODWORD(v23) = 0;
        }
        else
        {
          v23 = v17[5];
          if (v17[5])
            LODWORD(v23) = *(unsigned __int16 *)((char *)v16 + v23);
        }
        v24 = (unsigned __int16 *)((char *)a3 - *a3);
        if (*v24 <= v23)
          goto LABEL_55;
        v25 = *(unsigned __int16 *)((char *)v24 + v23);
        if (!v25)
          goto LABEL_55;
        if (v22 == 15)
        {
          v26 = (unsigned __int16 *)((char *)*v7 - **v7);
          if (*v26 >= 5u && (v27 = v26[2]) != 0)
            v28 = (char *)*v7 + v27 + *(unsigned int *)((char *)*v7 + v27);
          else
            v28 = 0;
          if (v18 < 7)
          {
            v30 = 0;
          }
          else
          {
            v30 = (int *)v17[3];
            if (v30)
              v30 = (int *)((char *)v30 + (_QWORD)v16 + *(unsigned int *)((char *)v30 + (_QWORD)v16));
          }
          v31 = (unsigned __int16 *)((char *)v30 - *v30);
          if (*v31 >= 9u && (v32 = v31[4]) != 0)
            v33 = *(unsigned int *)((char *)v30 + v32);
          else
            v33 = 0xFFFFFFFFLL;
          v29 = &v28[4 * v33 + 4 + *(unsigned int *)&v28[4 * v33 + 4]];
          v34 = &v29[-*(int *)v29];
          if (*(unsigned __int16 *)v34 >= 9u)
          {
            v35 = *((unsigned __int16 *)v34 + 4);
            if (v35)
            {
              if (v29[v35])
                goto LABEL_55;
            }
          }
        }
        else
        {
          v29 = 0;
        }
        v36 = (int *)((char *)a3 + v25);
        v38 = v7[3];
        v37 = v7[4];
        if (*(_QWORD *)v38 == *((_QWORD *)v38 + 1))
          v39 = 0;
        else
          v39 = *(_QWORD *)v38;
        v40 = ((uint64_t)v36 - v39) >> 2;
        if (!*((_BYTE *)v37 + v40))
        {
          v41 = *v36;
          v42 = (int *)((char *)v36 + v41);
          v43 = v7[1];
          if (v43 >= v36 && v43 <= v42)
          {
            *v36 = *((_DWORD *)v7 + 4) + v41;
            *((_BYTE *)v37 + v40) = 1;
          }
          if (v22 == 16)
          {
            v48 = v14;
            v49 = (int *)((char *)v36 + v41);
            v50 = sub_1DF37EBF0(*v7, a2, v16, a3);
            v42 = v49;
            v14 = v48;
            v29 = v50;
LABEL_54:
            v51 = v14;
            result = sub_1DF380ACC(v7, v29, v42);
            v14 = v51;
            goto LABEL_55;
          }
          if (v22 == 15)
            goto LABEL_54;
          if (v22 != 14)
            goto LABEL_55;
          v45 = (unsigned __int16 *)((char *)v16 - *v16);
          v46 = *v45;
          if (v46 < 7)
          {
            v47 = 0;
          }
          else
          {
            v47 = (int *)v45[3];
            if (v45[3])
              v47 = (int *)((char *)v47 + (_QWORD)v16 + *(unsigned int *)((char *)v47 + (_QWORD)v16));
          }
          v52 = (unsigned __int16 *)((char *)v47 - *v47);
          if (*v52 < 7u)
            goto LABEL_55;
          v53 = v52[3];
          if (!v53)
            goto LABEL_55;
          result = *((unsigned __int8 *)v47 + v53);
          if ((result & 0xFFFFFFFD) != 0xD)
            goto LABEL_55;
          if ((_DWORD)result == 15)
          {
            v54 = (unsigned __int16 *)((char *)*v7 - **v7);
            if (*v54 >= 5u && (v55 = v54[2]) != 0)
              v56 = (char *)*v7 + v55 + *(unsigned int *)((char *)*v7 + v55);
            else
              v56 = 0;
            if (v46 < 7)
            {
              v57 = 0;
            }
            else
            {
              v57 = (int *)v45[3];
              if (v57)
                v57 = (int *)((char *)v57 + (_QWORD)v16 + *(unsigned int *)((char *)v57 + (_QWORD)v16));
            }
            v58 = (unsigned __int16 *)((char *)v57 - *v57);
            if (*v58 >= 9u && (v59 = v58[4]) != 0)
              v60 = *(unsigned int *)((char *)v57 + v59);
            else
              v60 = 0xFFFFFFFFLL;
            v80 = &v56[4 * v60 + 4 + *(unsigned int *)&v56[4 * v60 + 4]];
            v61 = &v80[-*(int *)v80];
            if (*(unsigned __int16 *)v61 >= 9u)
            {
              v62 = *((unsigned __int16 *)v61 + 4);
              if (v62)
              {
                if (v80[v62])
                  goto LABEL_55;
              }
            }
          }
          else
          {
            v80 = 0;
          }
          if (*v42)
          {
            v63 = 0;
            v64 = (char *)v14 + v25;
            v65 = (char *)v14 + v25;
            v78 = v42;
            v79 = v14;
            v77 = v41;
            v76 = result;
            do
            {
              v67 = v7[3];
              v66 = v7[4];
              if (*(_QWORD *)v67 == *((_QWORD *)v67 + 1))
                v68 = 0;
              else
                v68 = *(_QWORD *)v67;
              v69 = (uint64_t)&v64[v41 - v68] >> 2;
              if (!*((_BYTE *)v66 + v69))
              {
                v70 = *(unsigned int *)&v65[v41];
                v71 = (unint64_t)&v65[v41 + v70];
                v72 = v7[1];
                if (v72 >= (int *)&v65[v41] && (unint64_t)v72 <= v71)
                {
                  *(_DWORD *)&v65[v41] = *((_DWORD *)v7 + 4) + v70;
                  *((_BYTE *)v66 + v69) = 1;
                }
                if ((_DWORD)result == 15)
                {
                  sub_1DF380ACC(v7, v80, v71);
                  result = v76;
                  v41 = v77;
                  v42 = v78;
                  v14 = v79;
                }
              }
              ++v63;
              v65 += 4;
              v64 += 4;
            }
            while (v63 < *v42);
          }
        }
LABEL_55:
        if (++v15 == &v13[*v13 + 1])
        {
          v10 = v7[1];
          break;
        }
      }
    }
    if (v10 >= a3 && v10 <= v9)
    {
      *a3 -= *((_DWORD *)v7 + 4);
      v74 = v7[3];
      if (*(_QWORD *)v74 == *((_QWORD *)v74 + 1))
        v75 = 0;
      else
        v75 = *(_QWORD *)v74;
      v5 = (char *)v7[4] + (((uint64_t)a3 - v75) >> 2);
LABEL_101:
      *v5 = 1;
    }
  }
  return result;
}

uint64_t sub_1DF380FBC(_QWORD *a1, void *__src, size_t __n)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int *v15;
  const void *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  size_t v23;
  int v24;
  _BOOL4 v25;
  BOOL v26;
  uint64_t **v27;
  uint64_t v28;
  unsigned int v29;
  size_t v30;
  int v31;
  _BOOL4 v32;
  uint64_t *v33;
  _DWORD *v34;
  uint64_t *v35;
  uint64_t v37;
  const void *v38;
  unsigned int v39;
  size_t v40;
  int v41;
  _BOOL4 v42;
  int v43;
  _BOOL4 v44;
  _QWORD *v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;

  if (!a1[11])
  {
    v45 = (_QWORD *)operator new();
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = a1;
    *v45 = v45 + 1;
    a1[11] = v45;
  }
  v7 = a1[5];
  v6 = a1[6];
  v8 = a1[4];
  v9 = sub_1DF366A24((uint64_t)a1, __src, __n);
  v10 = v9;
  v11 = (uint64_t **)a1[11];
  v12 = v11 + 1;
  v13 = v11[1];
  if (v13)
  {
    v46 = v7;
    v47 = v8;
    v48 = v6;
    v14 = v11[3][5] + v11[3][4];
    v49 = v9;
    v15 = (unsigned int *)(v14 - v9);
    v18 = *v15;
    v16 = v15 + 1;
    v17 = v18;
    v19 = v11 + 1;
    v20 = v11[1];
    do
    {
      v21 = *((unsigned int *)v20 + 7);
      v22 = *(_DWORD *)(v14 - v21);
      if (v17 >= v22)
        v23 = v22;
      else
        v23 = v17;
      v24 = memcmp((const void *)(v14 - v21 + 4), v16, v23);
      v25 = v22 < v17;
      if (v24)
        v25 = v24 < 0;
      v26 = !v25;
      if (v25)
        v27 = (uint64_t **)(v20 + 1);
      else
        v27 = (uint64_t **)v20;
      if (v26)
        v19 = (uint64_t **)v20;
      v20 = *v27;
    }
    while (*v27);
    if (v12 == v19)
    {
      v10 = v49;
      goto LABEL_31;
    }
    v28 = *((unsigned int *)v19 + 7);
    v29 = *(_DWORD *)(v14 - v28);
    if (v29 >= v17)
      v30 = v17;
    else
      v30 = v29;
    v31 = memcmp(v16, (const void *)(v14 - v28 + 4), v30);
    v32 = v17 < v29;
    if (v31)
      v32 = v31 < 0;
    v10 = v49;
    if (v32)
    {
      while (1)
      {
        while (1)
        {
LABEL_31:
          v33 = v13;
          v37 = *((unsigned int *)v13 + 7);
          v38 = (const void *)(v14 - v37 + 4);
          v39 = *(_DWORD *)(v14 - v37);
          if (v39 >= v17)
            v40 = v17;
          else
            v40 = v39;
          v41 = memcmp(v16, (const void *)(v14 - v37 + 4), v40);
          v42 = v17 < v39;
          if (v41)
            v42 = v41 < 0;
          if (!v42)
            break;
          v13 = (uint64_t *)*v13;
          v12 = (uint64_t **)v33;
          if (!*v33)
            goto LABEL_26;
        }
        v43 = memcmp(v38, v16, v40);
        v44 = v39 < v17;
        if (v43)
          v44 = v43 < 0;
        if (!v44)
          break;
        v13 = (uint64_t *)v13[1];
        if (!v13)
        {
          v12 = (uint64_t **)(v33 + 1);
          goto LABEL_26;
        }
      }
    }
    else
    {
      a1[6] += *((_DWORD *)a1 + 8) + v48 - (v47 + v46 + a1[6]) + *((_DWORD *)a1 + 10);
      return v28;
    }
  }
  else
  {
    v33 = (uint64_t *)(v11 + 1);
LABEL_26:
    v34 = operator new(0x20uLL);
    v34[7] = v10;
    *(_QWORD *)v34 = 0;
    *((_QWORD *)v34 + 1) = 0;
    *((_QWORD *)v34 + 2) = v33;
    *v12 = (uint64_t *)v34;
    v35 = (uint64_t *)**v11;
    if (v35)
    {
      *v11 = v35;
      v34 = *v12;
    }
    sub_1DF36718C(v11[1], (uint64_t *)v34);
    v11[2] = (uint64_t *)((char *)v11[2] + 1);
  }
  return v10;
}

uint64_t sub_1DF38123C(const char **a1, unsigned int *a2)
{
  int *v2;
  unsigned __int16 *v3;
  uint64_t v4;
  char *v5;

  v2 = (int *)((char *)a2 + *a2);
  v3 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v3 >= 5u && (v4 = v3[2]) != 0)
    v5 = (char *)v2 + v4 + *(unsigned int *)((char *)v2 + v4);
  else
    v5 = 0;
  return -strcmp(v5 + 4, *a1);
}

uint64_t sub_1DF381294(unsigned __int8 *a1, unsigned int *a2)
{
  int *v2;
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _BOOL4 v8;
  int v9;

  v2 = (int *)((char *)a2 + *a2);
  v3 = *a1;
  v4 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v4 >= 7u && (v5 = v4[3]) != 0)
    v6 = *(_QWORD *)((char *)v2 + v5);
  else
    v6 = 0;
  v7 = v6 < v3;
  v8 = v6 > v3;
  v9 = v7;
  return (v9 - v8);
}

BOOL flatbuffers::LoadFileRaw(const char *a1, int a2, uint64_t a3)
{
  _BOOL8 v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[8];
  void *__p[2];
  __int128 v19;
  int v20;
  _QWORD v21[19];
  stat v22;
  _QWORD v23[20];

  v23[19] = *MEMORY[0x1E0C80C00];
  if (!stat(a1, &v22) && (v22.st_mode & 0x4000) != 0)
    return 0;
  sub_1DF38550C(&v22);
  if (v22.st_qspare[1])
  {
    if (a2)
    {
      std::istream::seekg();
      std::istream::tellg();
      std::string::resize((std::string *)a3, v21[2], 0);
      std::istream::seekg();
      std::istream::read();
    }
    else
    {
      v7 = MEMORY[0x1E0DE4FE0];
      v8 = MEMORY[0x1E0DE4FE0] + 64;
      v9 = (uint64_t *)MEMORY[0x1E0DE4F60];
      v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v21[0] = MEMORY[0x1E0DE4FE0] + 64;
      v16 = v10;
      *(uint64_t *)((char *)&v17[-1] + *(_QWORD *)(v10 - 24)) = v11;
      v12 = (std::ios_base *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24));
      std::ios_base::init(v12, v17);
      v12[1].__vftable = 0;
      v12[1].__fmtflags_ = -1;
      v16 = v7 + 24;
      v21[0] = v8;
      std::streambuf::basic_streambuf();
      v13 = MEMORY[0x1E0DE4FB8] + 16;
      v17[0] = MEMORY[0x1E0DE4FB8] + 16;
      *(_OWORD *)__p = 0u;
      v19 = 0u;
      v20 = 16;
      std::ostream::operator<<();
      std::stringbuf::str();
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v14;
      *(_QWORD *)(a3 + 16) = v15;
      v16 = *v9;
      *(uint64_t *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = v9[3];
      v17[0] = v13;
      if (SBYTE7(v19) < 0)
        operator delete(__p[0]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1E0BFF758](v21);
    }
    v5 = (*((_BYTE *)&v22.st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&v22.st_dev - 24)) & 1) == 0;
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)&v22.st_dev = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)&v22.st_dev + *(_QWORD *)(*(_QWORD *)&v22.st_dev - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1E0BFF644](&v22.st_uid);
  std::istream::~istream();
  MEMORY[0x1E0BFF758](v23);
  return v5;
}

uint64_t flatbuffers::DirExists(flatbuffers *this, const char *a2)
{
  stat v3;

  if (stat((const char *)this, &v3))
    return 0;
  else
    return (v3.st_mode >> 14) & 1;
}

uint64_t (*flatbuffers::SetLoadFileFunction(uint64_t (*a1)(void)))(void)
{
  uint64_t (*v1)(void);
  uint64_t (*v2)(void);

  v1 = off_1F04755C0;
  v2 = (uint64_t (*)(void))flatbuffers::LoadFileRaw;
  if (a1)
    v2 = a1;
  off_1F04755C0 = v2;
  return v1;
}

uint64_t (*flatbuffers::SetFileExistsFunction(flatbuffers *this, BOOL (*a2)(const char *)))(flatbuffers *__hidden this, const char *)
{
  uint64_t (*v2)(flatbuffers *__hidden, const char *);
  uint64_t (*v3)(flatbuffers *__hidden, const char *);

  v2 = off_1F04755C8;
  v3 = (uint64_t (*)(flatbuffers *__hidden, const char *))flatbuffers::FileExistsRaw;
  if (this)
    v3 = (uint64_t (*)(flatbuffers *__hidden, const char *))this;
  off_1F04755C8 = v3;
  return v2;
}

BOOL flatbuffers::SaveFile(flatbuffers *this, const char *a2, const char *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  _BOOL8 v9;
  uint64_t v11;
  _QWORD v12[51];
  _QWORD v13[21];

  v13[19] = *MEMORY[0x1E0C80C00];
  v3 = MEMORY[0x1E0DE4FB0];
  v4 = MEMORY[0x1E0DE4FB0] + 64;
  v5 = (uint64_t *)MEMORY[0x1E0DE4F48];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  v13[0] = MEMORY[0x1E0DE4FB0] + 64;
  v11 = v6;
  *(_QWORD *)((char *)&v12[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24));
  std::ios_base::init(v8, v12);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v11 = v3 + 24;
  v13[0] = v4;
  MEMORY[0x1E0BFF638](v12);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24)), *(_DWORD *)((char *)&v12[3] + *(_QWORD *)(v11 - 24)) | 4);
  if (v12[15])
  {
    std::ostream::write();
    v9 = (*((_BYTE *)&v12[3] + *(_QWORD *)(v11 - 24)) & 1) == 0;
  }
  else
  {
    v9 = 0;
  }
  v11 = *v5;
  *(_QWORD *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24)) = v5[3];
  MEMORY[0x1E0BFF644](v12);
  std::ostream::~ostream();
  MEMORY[0x1E0BFF758](v13);
  return v9;
}

std::string *flatbuffers::StripExtension@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *result;
  char v5;

  result = (std::string *)std::string::rfind((const std::string *)a1, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (result != (std::string *)-1)
    return std::string::basic_string(a2, (const std::string *)a1, 0, (std::string::size_type)result, (std::allocator<char> *)&v5);
  if (*(char *)(a1 + 23) < 0)
    return (std::string *)sub_1DF36DA38(a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
  a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  return result;
}

std::string *flatbuffers::GetExtension@<X0>(const std::string *a1@<X0>, uint64_t a2@<X8>)
{
  std::string *result;
  char v5;

  result = (std::string *)std::string::rfind(a1, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (result != (std::string *)-1)
    return std::string::basic_string((std::string *)a2, a1, (std::string::size_type)result->__r_.__value_.__r.__words + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v5);
  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  return result;
}

std::string *flatbuffers::StripPath@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  int v2;
  std::string *v3;
  std::string::size_type size;
  char *v5;
  int v6;
  char v7;

  v2 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v2 >= 0)
    v3 = __str;
  else
    v3 = (std::string *)__str->__r_.__value_.__r.__words[0];
  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v2 < 0)
    size = __str->__r_.__value_.__l.__size_;
  v5 = (char *)&v3[-1].__r_.__value_.__r.__words[2] + 7;
  while (size)
  {
    v6 = v5[size--];
    if (v6 == 92 || v6 == 47)
    {
      if (size != -1)
        return std::string::basic_string(a2, __str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v7);
      break;
    }
  }
  if (v2 < 0)
    return (std::string *)sub_1DF36DA38(a2, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  *a2 = *__str;
  return __str;
}

std::string *flatbuffers::StripFileName@<X0>(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  char *v4;
  int v5;
  char v6;

  v2 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = __str->__r_.__value_.__l.__size_;
  }
  else
  {
    v2 = __str;
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  v4 = (char *)&v2[-1].__r_.__value_.__r.__words[2] + 7;
  while (size)
  {
    v5 = v4[size--];
    if (v5 == 92 || v5 == 47)
    {
      if (size != -1)
        return std::string::basic_string((std::string *)a2, __str, 0, size, (std::allocator<char> *)&v6);
      break;
    }
  }
  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  return __str;
}

std::string *flatbuffers::ConCatPathFileName@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  BOOL v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string::size_type v15;
  std::string *result;
  _BYTE *v17;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_1DF36DA38((_BYTE *)a3, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
  }
  v5 = *(_BYTE *)(a3 + 23);
  v6 = v5;
  v7 = v5 & 0x7F;
  if (v6 < 0)
    v7 = *(_QWORD *)(a3 + 8);
  if (v7)
  {
    v8 = v7 - 1;
    v9 = v6 >= 0 ? a3 : *(_QWORD *)a3;
    v10 = *(unsigned __int8 *)(v9 + v8);
    if (v10 != 47)
    {
      if (v10 == 92)
        *(_BYTE *)(v9 + v8) = 47;
      else
        std::string::push_back((std::string *)a3, 47);
    }
  }
  v11 = *(_BYTE *)(a2 + 23);
  v12 = v11 < 0;
  if (v11 >= 0)
    v13 = (const std::string::value_type *)a2;
  else
    v13 = *(const std::string::value_type **)a2;
  v14 = v11 & 0x7F;
  if (v12)
    v15 = *(_QWORD *)(a2 + 8);
  else
    v15 = v14;
  result = std::string::append((std::string *)a3, v13, v15);
  if (*(char *)(a3 + 23) >= 0)
    v17 = (_BYTE *)a3;
  else
    v17 = *(_BYTE **)a3;
  if (*v17 == 46 && v17[1] == 47)
    return std::string::erase((std::string *)a3, 0, 2uLL);
  return result;
}

void flatbuffers::EnsureDirExists(uint64_t a1)
{
  void *v2;
  const char *v3;
  void *__p[2];
  char v5;

  flatbuffers::StripFileName((std::string *)a1, (uint64_t)__p);
  v2 = (void *)(v5 & 0x7F);
  if (v5 < 0)
    v2 = __p[1];
  if (v2)
    flatbuffers::EnsureDirExists(__p);
  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  mkdir(v3, 0x1E8u);
  if (v5 < 0)
    operator delete(__p[0]);
}

size_t flatbuffers::AbsolutePath@<X0>(const char *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v2;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char __s[1024];
  uint64_t v10;

  v2 = a1;
  v10 = *MEMORY[0x1E0C80C00];
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  result = (size_t)realpath(a1, __s);
  if (result)
  {
    result = strlen(__s);
    if (result >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v5 = result;
    if (result >= 0x17)
    {
      v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((result | 7) != 0x17)
        v6 = result | 7;
      v7 = v6 + 1;
      v8 = operator new(v6 + 1);
      a2[1] = v5;
      a2[2] = v7 | 0x8000000000000000;
      *a2 = v8;
      a2 = v8;
    }
    else
    {
      *((_BYTE *)a2 + 23) = result;
      if (!result)
        goto LABEL_14;
    }
    result = (size_t)memcpy(a2, __s, v5);
LABEL_14:
    *((_BYTE *)a2 + v5) = 0;
    return result;
  }
  if (v2[23] < 0)
    return (size_t)sub_1DF36DA38(a2, *(void **)v2, *((_QWORD *)v2 + 1));
  *(_OWORD *)a2 = *(_OWORD *)v2;
  a2[2] = *((_QWORD *)v2 + 2);
  return result;
}

flatbuffers::ClassicLocale *flatbuffers::ClassicLocale::ClassicLocale(flatbuffers::ClassicLocale *this)
{
  *(_QWORD *)this = newlocale(0, "C", 0);
  return this;
}

{
  *(_QWORD *)this = newlocale(0, "C", 0);
  return this;
}

void flatbuffers::ClassicLocale::~ClassicLocale(locale_t *this)
{
  freelocale(*this);
}

{
  freelocale(*this);
}

uint64_t flatbuffers::ClassicLocale::Get(flatbuffers::ClassicLocale *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_1F04755F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1F04755F0))
  {
    qword_1F04755E8 = (uint64_t)newlocale(0, "C", 0);
    __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_1F04755E8, &dword_1DF344000);
    __cxa_guard_release(&qword_1F04755F0);
  }
  return qword_1F04755E8;
}

std::string *flatbuffers::RemoveStringQuotes@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  char v2;
  std::string *v3;
  unint64_t size;
  int v5;
  std::string::size_type v6;
  char v7;

  v2 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v2 >= 0)
    v3 = __str;
  else
    v3 = (std::string *)__str->__r_.__value_.__r.__words[0];
  size = v2 & 0x7E;
  if (v2 < 0)
    size = __str->__r_.__value_.__l.__size_;
  if (size >= 2)
  {
    v5 = v3->__r_.__value_.__s.__data_[0];
    if (v5 == 39 || v5 == 34)
    {
      v6 = v2 >= 0 ? v2 & 0x7F : __str->__r_.__value_.__l.__size_;
      if (v5 == v3->__r_.__value_.__s.__data_[v6 - 1])
        return std::string::basic_string(a2, __str, 1uLL, v6 - 2, (std::allocator<char> *)&v7);
    }
  }
  if ((*((_BYTE *)&__str->__r_.__value_.__s + 23) & 0x80) != 0)
    return (std::string *)sub_1DF36DA38(a2, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  *a2 = *__str;
  return __str;
}

BOOL flatbuffers::SetGlobalTestLocale(char *a1, uint64_t a2)
{
  char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  __int128 *p_dst;
  uint64_t v8;
  uint64_t v9;
  __int128 __dst;
  unint64_t v12;

  v3 = setlocale(0, a1);
  v4 = v3;
  if (!a2 || !v3)
    return v4 != 0;
  v5 = strlen(v3);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v6;
    v12 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v12) = v5;
    p_dst = &__dst;
    if (!v5)
      goto LABEL_11;
  }
  memmove(p_dst, v4, v6);
LABEL_11:
  *((_BYTE *)p_dst + v6) = 0;
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v12;
  return v4 != 0;
}

BOOL flatbuffers::ReadEnvironmentVariable(const char *a1, uint64_t a2)
{
  char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  __int128 *p_dst;
  uint64_t v8;
  uint64_t v9;
  __int128 __dst;
  unint64_t v12;

  v3 = getenv(a1);
  v4 = v3;
  if (!a2 || !v3)
    return v4 != 0;
  v5 = strlen(v3);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v6;
    v12 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v12) = v5;
    p_dst = &__dst;
    if (!v5)
      goto LABEL_11;
  }
  memmove(p_dst, v4, v6);
LABEL_11:
  *((_BYTE *)p_dst + v6) = 0;
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v12;
  return v4 != 0;
}

uint64_t flatbuffers::HideAppleInternal(flatbuffers *this)
{
  return 0;
}

void flatbuffers::Parser::ParseNamespacing(flatbuffers::Parser *this@<X0>, std::string *a2@<X1>, std::string *a3@<X2>, _BYTE *a4@<X8>)
{
  const std::string *v8;
  char v9;
  BOOL v10;
  const std::string::value_type *v11;
  uint64_t v12;
  std::string::size_type v13;

  v8 = (const std::string *)((char *)this + 32);
  while (*((_DWORD *)this + 5) == 46)
  {
    flatbuffers::Parser::Next(this, (uint64_t)a4);
    a4[1] = 1;
    if (!*a4)
    {
      std::string::append(a2, ".");
      v9 = *((_BYTE *)this + 55);
      v10 = v9 < 0;
      v11 = v9 >= 0 ? (const std::string::value_type *)v8 : (const std::string::value_type *)*((_QWORD *)this + 4);
      v12 = v9 & 0x7F;
      v13 = v10 ? *((_QWORD *)this + 5) : v12;
      std::string::append(a2, v11, v13);
      if (a3)
        std::string::operator=(a3, v8);
      flatbuffers::Parser::Expect(this, 260, (uint64_t)a4);
      a4[1] = 1;
      if (!*a4)
        continue;
    }
    return;
  }
  *(_WORD *)a4 = 0;
}

uint64_t sub_1DF382084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  LODWORD(v1) = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 17)
  {
    v1 = *(int *)(a1 + 4);
    if ((_DWORD)v1 == 15)
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(v2 + 200))
        return *(_QWORD *)(v2 + 208);
    }
  }
  else
  {
    if ((_DWORD)v1 == 15)
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(v2 + 200))
        return *(_QWORD *)(v2 + 208);
    }
    v1 = (int)v1;
  }
  return byte_1DF385F2C[v1 + 4];
}

uint64_t flatbuffers::EnumDef::FindByValue(uint64_t a1, char *a2)
{
  int v3;
  char *v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  v3 = *(_DWORD *)(a1 + 152);
  if (v3 != 10 && v3 != -3)
  {
    if (a2[23] < 0)
      a2 = *(char **)a2;
    if (!sub_1DF3679FC(&v11, a2, 0, 1))
      return 0;
    v8 = v11;
LABEL_11:
    for (i = *(uint64_t **)(a1 + 208); i != *(uint64_t **)(a1 + 216); ++i)
    {
      result = *i;
      if (*(_QWORD *)(*i + 136) == v8)
        return result;
    }
    return 0;
  }
  v10 = 0;
  if (a2[23] >= 0)
    v5 = a2;
  else
    v5 = *(char **)a2;
  v6 = sub_1DF357004(v5, (unint64_t *)&v10);
  result = 0;
  if ((v6 & 1) != 0)
  {
    v8 = v10;
    goto LABEL_11;
  }
  return result;
}

BOOL sub_1DF382198(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  const void **v10;

  v6 = *(uint64_t **)(a1 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 40))
  {
    v7 = sub_1DF3706BC((void **)(a1 + 24), a3);
  }
  else
  {
    *v6 = a3;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 32) = v7;
  v8 = sub_1DF383318(a1, a2);
  if (a1 + 8 == v8)
  {
    v10 = a2;
    sub_1DF383AB8(a1, a2, (uint64_t *)&v10)[7] = a3;
  }
  return a1 + 8 != v8;
}

uint64_t *flatbuffers::Parser::SerializeStruct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v7;
  unint64_t v8;
  uint64_t v9;

  sub_1DF352BC8(a2, *(_QWORD *)(a3 + 208));
  if (*(char *)(a4 + 55) >= 0)
    v7 = (const void *)(a4 + 32);
  else
    v7 = *(const void **)(a4 + 32);
  v8 = *(_QWORD *)(a3 + 216);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 48);
    if (v9 - *(_QWORD *)(a2 + 56) < v8)
    {
      sub_1DF366C90((uint64_t *)a2, v8);
      v9 = *(_QWORD *)(a2 + 48);
    }
    *(_QWORD *)(a2 + 48) = v9 - v8;
    memcpy((void *)(v9 - v8), v7, v8);
  }
  return sub_1DF366DF8((uint64_t *)a2, *(unsigned __int16 *)(a4 + 56), *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40));
}

uint64_t sub_1DF3822E0(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1DF352BC8(a1, 2uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 1)
  {
    sub_1DF366C90((uint64_t *)a1, 2uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_WORD *)(v4 - 2) = a2;
  v5 = v4 - 2;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

void sub_1DF382340(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4)
{
  float v8;
  unsigned int v9;

  v8 = sub_1DF3833E0(a3);
  if (v8 != sub_1DF3833E0(a4) || *(_BYTE *)(a1 + 80))
  {
    v9 = sub_1DF3822E0(a1, a3);
    sub_1DF366DF8((uint64_t *)a1, a2, v9);
  }
}

uint64_t sub_1DF3823C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1DF352BC8(a1, 8uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 7)
  {
    sub_1DF366C90((uint64_t *)a1, 8uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(v4 - 8) = a2;
  v5 = v4 - 8;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_1DF382428(uint64_t a1, float a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1DF352BC8(a1, 4uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 3)
  {
    sub_1DF366C90((uint64_t *)a1, 4uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(float *)(v4 - 4) = a2;
  v5 = v4 - 4;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_1DF382490(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1DF352BC8(a1, 8uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 7)
  {
    sub_1DF366C90((uint64_t *)a1, 8uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(double *)(v4 - 8) = a2;
  v5 = v4 - 8;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_1DF3824F8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1DF36741C(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
    sub_1DF3676A0((_QWORD *)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  }
  return a1;
}

uint64_t sub_1DF382548(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  char v5;
  char v6;
  char v7;
  __int16 v8;

  v4 = *a2;
  *(_OWORD *)(a1 + 10) = *(__int128 *)((char *)a2 + 10);
  *(_OWORD *)a1 = v4;
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 2));
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)((char *)a2 + 56));
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  std::string::operator=((std::string *)(a1 + 88), (const std::string *)((char *)a2 + 88));
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 7));
  v5 = *((_BYTE *)a2 + 138);
  *(_WORD *)(a1 + 136) = *((_WORD *)a2 + 68);
  *(_BYTE *)(a1 + 138) = v5;
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)a2 + 6);
  v6 = *((_BYTE *)a2 + 172);
  *(_DWORD *)(a1 + 168) = *((_DWORD *)a2 + 42);
  *(_BYTE *)(a1 + 172) = v6;
  std::string::operator=((std::string *)(a1 + 176), (const std::string *)(a2 + 11));
  std::string::operator=((std::string *)(a1 + 200), (const std::string *)((char *)a2 + 200));
  *(_DWORD *)(a1 + 224) = *((_DWORD *)a2 + 56);
  std::string::operator=((std::string *)(a1 + 232), (const std::string *)((char *)a2 + 232));
  v7 = *((_BYTE *)a2 + 258);
  *(_WORD *)(a1 + 256) = *((_WORD *)a2 + 128);
  *(_BYTE *)(a1 + 258) = v7;
  if ((__int128 *)a1 != a2)
    sub_1DF370C24(a1 + 264, *((std::string **)a2 + 33), *((std::string **)a2 + 34), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 34) - *((_QWORD *)a2 + 33)) >> 3));
  std::string::operator=((std::string *)(a1 + 288), (const std::string *)a2 + 12);
  std::string::operator=((std::string *)(a1 + 312), (const std::string *)a2 + 13);
  std::string::operator=((std::string *)(a1 + 336), (const std::string *)a2 + 14);
  std::string::operator=((std::string *)(a1 + 360), (const std::string *)a2 + 15);
  v8 = *((_WORD *)a2 + 200);
  *(_OWORD *)(a1 + 384) = a2[24];
  *(_WORD *)(a1 + 400) = v8;
  return a1;
}

uint64_t flatbuffers::Parser::Parse(flatbuffers::Parser *this, const char *a2, const char **a3, const char *a4)
{
  unsigned __int8 v5[2];

  if (*((_BYTE *)this + 728))
    return flatbuffers::Parser::ParseFlexBuffer(this, a2, a4, (uint64_t)this + 432);
  flatbuffers::Parser::ParseRoot((uint64_t **)this, a2, a3, a4, v5);
  return v5[0] == 0;
}

uint64_t sub_1DF3826CC()
{
  _BYTE v1[128];
  uint64_t v2;

  sub_1DF367FB0((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_1DF3680A8((uint64_t)v1, MEMORY[0x1E0DE4F50]);
  return MEMORY[0x1E0BFF758](&v2);
}

uint64_t sub_1DF382738()
{
  _BYTE v1[128];
  uint64_t v2;

  sub_1DF367FB0((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_1DF3680A8((uint64_t)v1, MEMORY[0x1E0DE4F50]);
  return MEMORY[0x1E0BFF758](&v2);
}

uint64_t sub_1DF3827A4(uint64_t **a1, uint64_t a2, const void **a3)
{
  uint64_t result;
  uint64_t v6;

  result = sub_1DF373324((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)result)
  {
    v6 = *(_QWORD *)(result + 56);
    sub_1DF3734D4(a1, result);
    result = (uint64_t)sub_1DF37108C(a1, a3, (uint64_t)a3);
    *(_QWORD *)(result + 56) = v6;
  }
  return result;
}

void flatbuffers::Parser::ParseProtoOption(flatbuffers::Parser *this@<X0>, _BYTE *a2@<X8>)
{
  flatbuffers::Parser::Next(this, (uint64_t)a2);
  a2[1] = 1;
  if (!*a2)
  {
    flatbuffers::Parser::ParseProtoKey(this, a2);
    a2[1] = 1;
    if (!*a2)
    {
      flatbuffers::Parser::Expect(this, 61, (uint64_t)a2);
      a2[1] = 1;
      if (!*a2)
      {
        flatbuffers::Parser::ParseProtoCurliesOrIdent(this, a2);
        a2[1] = 1;
        if (!*a2)
          *(_WORD *)a2 = 0;
      }
    }
  }
}

_QWORD *flatbuffers::Parser::MarkGenerated(_QWORD *this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;
  uint64_t v4;
  uint64_t j;
  uint64_t *v6;
  uint64_t *k;
  uint64_t v8;

  v1 = (uint64_t *)this[25];
  for (i = (uint64_t *)this[26]; v1 != i; *(_BYTE *)(v3 + 120) = 1)
    v3 = *v1++;
  v4 = this[19];
  for (j = this[20]; v4 != j; v4 += 8)
  {
    if (!*(_BYTE *)(*(_QWORD *)v4 + 201))
      *(_BYTE *)(*(_QWORD *)v4 + 120) = 1;
  }
  v6 = (uint64_t *)this[31];
  for (k = (uint64_t *)this[32]; v6 != k; *(_BYTE *)(v8 + 120) = 1)
    v8 = *v6++;
  return this;
}

BOOL sub_1DF382900(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  const void **v10;

  v6 = *(uint64_t **)(a1 + 32);
  if ((unint64_t)v6 < *(_QWORD *)(a1 + 40))
  {
    *v6 = a3;
    v7 = v6 + 1;
  }
  else
  {
    v7 = sub_1DF3706BC((void **)(a1 + 24), a3);
  }
  *(_QWORD *)(a1 + 32) = v7;
  v8 = sub_1DF373324(a1, (uint64_t)a2);
  if (a1 + 8 == v8)
  {
    v10 = a2;
    sub_1DF383D5C(a1, a2, (uint64_t *)&v10)[7] = a3;
  }
  return a1 + 8 != v8;
}

void flatbuffers::Parser::ParseProtoKey(flatbuffers::Parser *this@<X0>, _BYTE *a2@<X8>)
{
  int v4;

  if (*((_DWORD *)this + 5) == 40)
  {
    flatbuffers::Parser::Next(this, (uint64_t)a2);
    while (1)
    {
      a2[1] = 1;
      if (*a2)
        break;
      v4 = *((_DWORD *)this + 5);
      if (v4 != 260 && v4 != 46)
      {
        flatbuffers::Parser::Expect(this, 41, (uint64_t)a2);
        while (1)
        {
          a2[1] = 1;
          if (*a2)
            break;
          if (*((_DWORD *)this + 5) != 46)
            goto LABEL_8;
          flatbuffers::Parser::Next(this, (uint64_t)a2);
          a2[1] = 1;
          if (*a2)
            break;
          flatbuffers::Parser::Expect(this, 260, (uint64_t)a2);
        }
        return;
      }
      flatbuffers::Parser::Next(this, (uint64_t)a2);
    }
  }
  else
  {
    flatbuffers::Parser::Expect(this, 260, (uint64_t)a2);
    a2[1] = 1;
    if (!*a2)
LABEL_8:
      *(_WORD *)a2 = 0;
  }
}

_OWORD *sub_1DF382A90(_QWORD *a1, unint64_t a2)
{
  char **v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  _OWORD *result;
  __int128 v9;

  v4 = (char **)(a1 + 3);
  *(_QWORD *)&v9 = sub_1DF369050((uint64_t)a1, a2, ((uint64_t)(a1[4] - a1[3]) >> 4) - a2, 1, 0, 0);
  *((_QWORD *)&v9 + 1) = v5;
  v6 = (char *)a1[4];
  v7 = (v6 - *v4) >> 4;
  if (a2 <= v7)
  {
    if (a2 < v7)
    {
      v6 = &(*v4)[16 * a2];
      a1[4] = v6;
    }
  }
  else
  {
    sub_1DF36A834(v4, a2 - v7);
    v6 = (char *)a1[4];
  }
  if ((unint64_t)v6 >= a1[5])
  {
    result = sub_1DF36A964((void **)v4, &v9);
  }
  else
  {
    *(_OWORD *)v6 = v9;
    result = v6 + 16;
  }
  a1[4] = result;
  return result;
}

_OWORD *sub_1DF382B54(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  int v4;
  int v5;
  _OWORD *v6;
  _OWORD *result;
  __int128 v8;

  v3 = (2 * a2) ^ (a2 >> 63);
  if (HIDWORD(v3))
    v4 = 3;
  else
    v4 = 2;
  if (v3 < 0x10000)
    v4 = 1;
  if (v3 >= 0x100)
    v5 = v4;
  else
    v5 = 0;
  *(_QWORD *)&v8 = a2;
  DWORD2(v8) = 1;
  HIDWORD(v8) = v5;
  v6 = *(_OWORD **)(a1 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 40))
  {
    result = sub_1DF36A964((void **)(a1 + 24), &v8);
  }
  else
  {
    *v6 = v8;
    result = v6 + 1;
  }
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

uint64_t flatbuffers::Parser::ParseFlexBuffer(flatbuffers::Parser *a1, const char *a2, const char *a3, uint64_t a4)
{
  _BYTE v7[2];
  _BYTE v8[2];

  flatbuffers::Parser::StartParseFile(a1, a2, a3, (uint64_t)v8);
  if (v8[0])
    return 0;
  flatbuffers::Parser::ParseFlexBufferValue((uint64_t)a1, a4, (uint64_t)v7);
  if (v7[0])
    return 0;
  sub_1DF382C3C(a4);
  return 1;
}

char *sub_1DF382C3C(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int *v7;
  BOOL v8;
  char *result;
  char v10;
  int v11;
  char __src;
  char v13;
  uint64_t v14;

  v3 = *(char **)a1;
  v2 = *(char **)(a1 + 8);
  v4 = (1 << sub_1DF36A3B4(*(_QWORD *)(a1 + 24), (uint64_t)&v2[-*(_QWORD *)a1], 0));
  v10 = 0;
  sub_1DF36A444((char **)a1, v2, (v4 - 1) & (v3 - v2), &v10);
  sub_1DF383444(a1, *(_QWORD *)(a1 + 24), v4);
  v5 = *(_QWORD *)(a1 + 24);
  v11 = 0;
  v6 = *(_DWORD *)(v5 + 8);
  v7 = (int *)(v5 + 12);
  v8 = v6 < 4 || v6 == 26;
  if (v8 && *v7 < 0)
    v7 = &v11;
  __src = *v7 | (4 * v6);
  sub_1DF36A650(a1, *(char **)(a1 + 8), &__src, &v13, 1);
  v13 = v4;
  result = sub_1DF36A650(a1, *(char **)(a1 + 8), &v13, (char *)&v14, 1);
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

void sub_1DF382D34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 68) = 0;
  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = v1 + *(_QWORD *)(a1 + 32);
  }
  else
  {
    v2 = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 48) = v2;
  *(_QWORD *)(a1 + 56) = v1;
  *(_WORD *)(a1 + 70) = 0;
  *(_QWORD *)(a1 + 72) = 1;
  v3 = *(_QWORD *)(a1 + 88);
  if (v3)
  {
    sub_1DF366F24(*(_QWORD **)(v3 + 8));
    *(_QWORD *)v3 = v3 + 8;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 8) = 0;
  }
}

uint64_t sub_1DF382DA0()
{
  _BYTE v1[128];
  uint64_t v2;

  sub_1DF367FB0((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_1DF3680A8((uint64_t)v1, MEMORY[0x1E0DE4F50]);
  return MEMORY[0x1E0BFF758](&v2);
}

uint64_t flatbuffers::Parser::Deserialize(flatbuffers::Parser *this, const char *a2, uint64_t a3)
{
  const char *v3;
  const unsigned __int8 *v5;
  uint64_t result;
  _QWORD v7[2];
  __int128 v8;
  uint64_t v9;
  char v10;

  v3 = a2;
  v7[0] = a2;
  v7[1] = a3;
  v8 = xmmword_1DF385D10;
  v9 = 0;
  v10 = 1;
  v5 = (const unsigned __int8 *)(a2 + 4);
  if (!strncmp(a2 + 4, "BFBS", 4uLL))
  {
    if ((sub_1DF3838D0(v7, 0) & 1) != 0)
      return flatbuffers::Parser::Deserialize((uint64_t)this, (unsigned int *)&v3[*(unsigned int *)v3]);
    return 0;
  }
  if (strncmp(v3 + 8, "BFBS", 4uLL))
    return 0;
  result = sub_1DF382EC4(v7);
  v3 = (const char *)v5;
  if ((_DWORD)result)
    return flatbuffers::Parser::Deserialize((uint64_t)this, (unsigned int *)&v3[*(unsigned int *)v3]);
  return result;
}

uint64_t sub_1DF382EC4(_QWORD *a1)
{
  unint64_t v1;

  v1 = a1[1];
  if (v1 >= 5 && v1 - 4 == *(_DWORD *)*a1)
    return sub_1DF3838D0(a1, 4uLL);
  else
    return 0;
}

uint64_t sub_1DF382EF4(_BYTE *a1)
{
  int v1;
  int v2;
  unsigned __int8 *v3;
  int v4;

  v1 = -2128831035;
  v2 = *a1;
  if (*a1)
  {
    v3 = a1 + 1;
    do
    {
      v1 = (16777619 * v1) ^ v2;
      v4 = *v3++;
      v2 = v4;
    }
    while (v4);
  }
  return (unsigned __int16)(v1 ^ HIWORD(v1));
}

uint64_t sub_1DF382F2C(_BYTE *a1)
{
  int v1;
  int v2;
  unsigned __int8 *v3;
  int v4;

  v1 = -2128831035;
  v2 = *a1;
  if (*a1)
  {
    v3 = a1 + 1;
    do
    {
      v1 = 16777619 * (v1 ^ v2);
      v4 = *v3++;
      v2 = v4;
    }
    while (v4);
  }
  return (unsigned __int16)(v1 ^ HIWORD(v1));
}

uint64_t flatbuffers::HashFnv1<unsigned int>(_BYTE *a1)
{
  uint64_t result;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;

  result = 2166136261;
  v3 = *a1;
  if (*a1)
  {
    v4 = a1 + 1;
    do
    {
      result = (16777619 * (_DWORD)result) ^ v3;
      v5 = *v4++;
      v3 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t flatbuffers::HashFnv1a<unsigned int>(_BYTE *a1)
{
  uint64_t result;
  int v3;
  unsigned __int8 *v4;
  int v5;

  result = 2166136261;
  v3 = *a1;
  if (*a1)
  {
    v4 = a1 + 1;
    do
    {
      result = 16777619 * (result ^ v3);
      v5 = *v4++;
      v3 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t flatbuffers::HashFnv1<unsigned long long>(_BYTE *a1)
{
  uint64_t result;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;

  result = 0xCBF29CE484222645;
  v3 = *a1;
  if (*a1)
  {
    v4 = a1 + 1;
    do
    {
      result = (0x100000001B3 * result) ^ v3;
      v5 = *v4++;
      v3 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t flatbuffers::HashFnv1a<unsigned long long>(_BYTE *a1)
{
  uint64_t result;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;

  result = 0xCBF29CE484222645;
  v3 = *a1;
  if (*a1)
  {
    v4 = a1 + 1;
    do
    {
      result = 0x100000001B3 * (result ^ v3);
      v5 = *v4++;
      v3 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t *sub_1DF38304C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;

  v2 = (uint64_t *)a2;
  v4 = (uint64_t **)sub_1DF3830BC(a1, &v8, (const void **)(a2 + 32));
  v5 = v8;
  *v2 = 0;
  v2[1] = 0;
  v2[2] = v5;
  *v4 = v2;
  v6 = **(_QWORD **)a1;
  if (v6)
  {
    *(_QWORD *)a1 = v6;
    v2 = *v4;
  }
  result = sub_1DF36718C(*(uint64_t **)(a1 + 8), v2);
  ++*(_QWORD *)(a1 + 16);
  return result;
}

_QWORD *sub_1DF3830BC(uint64_t a1, _QWORD *a2, const void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  _QWORD v15[2];

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = v4;
        v9 = (_QWORD *)v4[4];
        v7 = v4 + 4;
        v8 = v9;
        v10 = *((_BYTE *)v7 + 23);
        v11 = v10;
        if (v10 >= 0)
          v8 = v7;
        v12 = v7[1];
        v13 = v10 & 0x7F;
        if (v11 >= 0)
          v12 = v13;
        v15[0] = v8;
        v15[1] = v12;
        if ((sub_1DF36712C(a3, (uint64_t)v15) & 0x80000000) == 0)
          break;
        v4 = (_QWORD *)*v5;
        result = v5;
        if (!*v5)
          goto LABEL_12;
      }
      v4 = (_QWORD *)v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_12:
  *a2 = v5;
  return result;
}

uint64_t sub_1DF38315C(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_1DF3831B0(*(_QWORD **)(a1 + 104));
  sub_1DF3831B0(*(_QWORD **)(a1 + 72));
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1DF3831B0(_QWORD *a1)
{
  if (a1)
  {
    sub_1DF3831B0(*a1);
    sub_1DF3831B0(a1[1]);
    operator delete(a1);
  }
}

uint64_t sub_1DF3831EC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v6 = *v3;
      if (*v3)
      {
        sub_1DF383A40(v6 + 152);
        v5 = sub_1DF368F20(v6);
        MEMORY[0x1E0BFF788](v5, 0x10B2C401A85D49FLL);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1DF367658(*(char **)(a1 + 8));
  return a1;
}

uint64_t sub_1DF38328C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        sub_1DF36D988(v4 + 184);
        v5 = sub_1DF368F20(v4);
        MEMORY[0x1E0BFF788](v5, 0x10B2C409EE52067);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1DF367658(*(char **)(a1 + 8));
  return a1;
}

uint64_t sub_1DF383318(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  BOOL v7;
  const void *v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  const void *v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const void *v18;
  uint64_t v19;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = *((_BYTE *)a2 + 23);
    v7 = v6 < 0;
    v8 = (const void *)*a2;
    if (v6 >= 0)
      v8 = a2;
    v9 = v6 & 0x7F;
    if (v7)
      v9 = a2[1];
    v18 = v8;
    v19 = v9;
    v10 = sub_1DF36712C((const void **)(v3 + 32), (uint64_t)&v18);
    v11 = (uint64_t *)(v3 + 8);
    if (v10 >= 0)
    {
      v11 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v11;
  }
  while (*v11);
  if (v5 == v2)
    return v2;
  v12 = *(const void **)(v5 + 32);
  v13 = *(_BYTE *)(v5 + 55);
  v14 = v13;
  if (v13 >= 0)
    v12 = (const void *)(v5 + 32);
  v15 = *(_QWORD *)(v5 + 40);
  v16 = v13 & 0x7F;
  if (v14 >= 0)
    v15 = v16;
  v18 = v12;
  v19 = v15;
  if ((sub_1DF36712C((const void **)a2, (uint64_t)&v18) & 0x80000000) != 0)
    return v2;
  return v5;
}

float sub_1DF3833E0(__int16 a1)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  float result;

  v1 = a1 & 0x7FFF;
  v2 = __clz(v1);
  v3 = (v1 << (v2 - 8)) ^ 0x800000 | (1124073472 - (v2 << 23));
  if ((a1 & 0x7FFF) == 0)
    v3 = 0;
  if ((unsigned __int16)(a1 & 0x7FFF) >> 10 >= 0x1Fu)
    v4 = (v1 << 13) | 0x7F800000;
  else
    v4 = v3;
  v5 = (v1 << 13) + 939524096;
  if (((a1 & 0x7FFFu) - 1024) >> 11 > 0xE)
    v5 = v4;
  LODWORD(result) = v5 | ((a1 & 0x8000) << 16);
  return result;
}

char *sub_1DF383444(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;
  int64_t v6;
  char *v7;
  double v8;
  double __src;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 <= 1)
  {
    if (v3 >= 2)
    {
LABEL_11:
      v8 = *(double *)a2;
      v7 = *(char **)(a1 + 8);
      v6 = a3;
      *(_QWORD *)&__src = &v7[-*(_QWORD *)&v8 - *(_QWORD *)a1];
      return sub_1DF36A650(a1, v7, (char *)&__src, (char *)&__src + a3, v6);
    }
  }
  else if (v3 != 2 && v3 != 26)
  {
    if (v3 == 3)
      return sub_1DF3834D4((char *)a1, a3, *(double *)a2);
    goto LABEL_11;
  }
  v6 = a3;
  __src = *(double *)a2;
  v7 = *(char **)(a1 + 8);
  return sub_1DF36A650(a1, v7, (char *)&__src, (char *)&__src + a3, v6);
}

char *sub_1DF3834D4(char *result, int a2, double a3)
{
  char *v3;
  char *v4;
  char *v5;
  int64_t v6;
  float v7;
  double v8;
  uint64_t v9;
  uint64_t vars0;

  if (a2 == 4)
  {
    v7 = a3;
    *((float *)&v9 + 1) = v7;
    v3 = (char *)*((_QWORD *)result + 1);
    v4 = (char *)&vars0;
    v5 = (char *)&v9 + 4;
    v6 = 4;
  }
  else
  {
    if (a2 != 8)
      return result;
    v8 = a3;
    v3 = (char *)*((_QWORD *)result + 1);
    v4 = (char *)&v9;
    v5 = (char *)&v8;
    v6 = 8;
  }
  return sub_1DF36A650((uint64_t)result, v3, v5, v4, v6);
}

void sub_1DF383538(uint64_t a1, char *a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;

  v6 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = sub_1DF383608(a1, a2, a3);
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
  {
    v8 = (uint64_t)v7;
    *(_QWORD *)&v12 = v7;
    *((_QWORD *)&v12 + 1) = a3;
    v9 = sub_1DF36AA48(a1 + 96, (uint64_t)v7, a3);
    if ((_QWORD *)(a1 + 104) == v9)
    {
      sub_1DF383700(a1 + 96, v8, a3, &v12);
    }
    else
    {
      v10 = v9;
      v11 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
      if (v5 - v6 <= v11)
      {
        if (v5 - v6 < v11)
          *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + v5 - v6;
      }
      else
      {
        sub_1DF36AAFC((unint64_t *)a1, v5 - v6 - v11);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) - 16) = v10[4];
    }
  }
}

char *sub_1DF383608(uint64_t a1, char *a2, unint64_t a3)
{
  int v6;
  int v7;
  int64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v16;

  if (HIDWORD(a3))
    v6 = 3;
  else
    v6 = 2;
  if (a3 < 0x10000)
    v6 = 1;
  if (a3 >= 0x100)
    v7 = v6;
  else
    v7 = 0;
  v8 = (1 << v7);
  v9 = *(char **)(a1 + 8);
  v10 = (*(_QWORD *)a1 - (_QWORD)v9) & (v8 - 1);
  LOBYTE(v16) = 0;
  sub_1DF36A444((char **)a1, v9, v10, (char *)&v16);
  *(_QWORD *)&v16 = a3;
  sub_1DF36A650(a1, *(char **)(a1 + 8), (char *)&v16, (char *)&v16 + v8, v8);
  v11 = *(char **)(a1 + 8);
  v12 = &v11[-*(_QWORD *)a1];
  sub_1DF36A650(a1, v11, a2, &a2[a3 + 1], a3 + 1);
  *(_QWORD *)&v16 = v12;
  DWORD2(v16) = 5;
  HIDWORD(v16) = v7;
  v13 = *(_OWORD **)(a1 + 32);
  if ((unint64_t)v13 >= *(_QWORD *)(a1 + 40))
  {
    v14 = sub_1DF36A964((void **)(a1 + 24), &v16);
  }
  else
  {
    *v13 = v16;
    v14 = v13 + 1;
  }
  *(_QWORD *)(a1 + 32) = v14;
  return v12;
}

uint64_t **sub_1DF383700(uint64_t a1, uint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t **result;
  uint64_t **v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  result = (uint64_t **)sub_1DF36AC20(a1, &v12, a2, a3);
  if (!*result)
  {
    v7 = result;
    v8 = operator new(0x30uLL);
    v8[2] = *a4;
    v9 = v12;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v9;
    *v7 = (uint64_t *)v8;
    v10 = **(_QWORD **)a1;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v11 = *v7;
    }
    else
    {
      v11 = (uint64_t *)v8;
    }
    result = (uint64_t **)sub_1DF36718C(*(uint64_t **)(a1 + 8), v11);
    ++*(_QWORD *)(a1 + 16);
  }
  return result;
}

uint64_t sub_1DF3837A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  *(_BYTE *)(a1 + 70) = 1;
  v6 = 4 * a3;
  sub_1DF366BF4(a1, 4 * a3);
  sub_1DF366BF4(a1, v6);
  if (a3)
  {
    v7 = a2 - 4;
    v8 = a3;
    do
    {
      v9 = v8 - 1;
      v10 = *(_DWORD *)(v7 + 4 * v8);
      sub_1DF352BC8(a1, 4uLL);
      sub_1DF353194(a1, *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40) - v10 + 4);
      v8 = v9;
    }
    while (v9);
  }
  *(_BYTE *)(a1 + 70) = 0;
  return sub_1DF353194(a1, a3);
}

uint64_t *sub_1DF38384C(uint64_t *result, uint64_t a2, int a3)
{
  uint64_t v5;
  int v6;
  unsigned int v7;

  if (a3)
  {
    v5 = (uint64_t)result;
    result = (uint64_t *)sub_1DF352BC8((uint64_t)result, 4uLL);
    v6 = *(_DWORD *)(v5 + 32) - *(_DWORD *)(v5 + 48) + *(_DWORD *)(v5 + 40) - a3;
    if (v6 != -4 || *(_BYTE *)(v5 + 80))
    {
      v7 = sub_1DF353194(v5, v6 + 4);
      return sub_1DF366DF8((uint64_t *)v5, a2, v7);
    }
  }
  return result;
}

uint64_t sub_1DF3838D0(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unsigned int v5;

  if (a1[1] >= 8uLL
    && (v4 = *a1 + a2, !strncmp((const char *)(v4 + 4), "BFBS", 4uLL))
    && (v5 = sub_1DF36BC44((uint64_t)a1, a2)) != 0)
  {
    return sub_1DF36BC94((int *)(v4 + v5), (uint64_t)a1);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1DF383950(int *a1, uint64_t a2)
{
  uint64_t result;
  unsigned __int16 *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned int *v9;

  result = sub_1DF36CF04((uint64_t *)a2, a1);
  if ((_DWORD)result)
  {
    v5 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v5 >= 5u && (v6 = v5[2]) != 0)
    {
      result = sub_1DF36BC44(a2, (unint64_t)a1 + v6 - *(_QWORD *)a2);
      if ((_DWORD)result)
      {
        result = sub_1DF36CE84(a2, (unsigned int *)((char *)a1 + v6 + *(unsigned int *)((char *)a1 + v6)));
        if ((_DWORD)result)
        {
          v7 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v7 >= 7u && (v8 = v7[3]) != 0)
          {
            result = sub_1DF36BC44(a2, (unint64_t)a1 + v8 - *(_QWORD *)a2);
            if (!(_DWORD)result)
              return result;
            v9 = (unsigned int *)((char *)a1 + v8 + *(unsigned int *)((char *)a1 + v8));
          }
          else
          {
            v9 = 0;
          }
          result = sub_1DF36CE84(a2, v9);
          if ((_DWORD)result)
          {
            --*(_DWORD *)(a2 + 16);
            return 1;
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1DF383A40(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        v4 = sub_1DF368F20(*v3);
        MEMORY[0x1E0BFF788](v4, 0x10B2C40EE200C30);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1DF367658(*(char **)(a1 + 8));
  return a1;
}

uint64_t *sub_1DF383AB8(uint64_t a1, const void **a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  v5 = (uint64_t **)sub_1DF367010(a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v8 = v5;
    sub_1DF370E7C((uint64_t)&v12, a1, *a3);
    v9 = v13;
    v6 = v12;
    *v12 = 0;
    v6[1] = 0;
    v6[2] = v9;
    *v8 = v6;
    v10 = **(_QWORD **)a1;
    v11 = v6;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v11 = *v8;
    }
    sub_1DF36718C(*(uint64_t **)(a1 + 8), v11);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

uint64_t sub_1DF383B58(flatbuffers::ClassicLocale *a1, char *a2)
{
  _xlocale *v4;
  float v5;
  uint64_t result;
  char *v7;

  v7 = a2;
  v4 = (_xlocale *)flatbuffers::ClassicLocale::Get(a1);
  v5 = strtof_l(a2, &v7, v4);
  *(_WORD *)a1 = sub_1DF383BD4(v5);
  if (v7 != a2 && !*v7)
    return 1;
  result = 0;
  *(_WORD *)a1 = 0;
  return result;
}

uint64_t sub_1DF383BD4(float a1)
{
  unsigned int v1;
  __int16 v2;
  __int16 v3;
  int v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _BOOL4 v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v1 = LODWORD(a1) & 0x7FFFFFFF;
  if ((LODWORD(a1) & 0x7FFFFFFFu) - 947912704 >= (LODWORD(a1) & 0x7FFFFFFFu) - 1199570944)
  {
    if (v1 < 0x7F800001)
    {
      v6 = v1 >> 23;
      v7 = HIBYTE(v1);
      v8 = LODWORD(a1) & 0x7FFFFF | 0x800000;
      v9 = v8 << ((v1 >> 23) - 81) != 0;
      v10 = v8 >> (113 - (v1 >> 23));
      v11 = v10 >> 13;
      v12 = v10 & 0x1FFF | v9;
      v4 = ((v10 >> 13) & 1) + (v10 >> 13);
      if (v12 != 4096)
        LOWORD(v4) = v11;
      if (v12 > 0x1000)
        LOWORD(v4) = v11 + 1;
      if (v7 < 0x2D)
        LOWORD(v4) = 0;
      if (v6 > 0x8E)
        LOWORD(v4) = 31744;
    }
    else
    {
      v4 = (LODWORD(a1) >> 13) & 0x1FF | 0x7E00;
    }
  }
  else
  {
    v2 = LODWORD(a1) >> 13;
    v3 = v2 + 0x4000;
    if ((LOWORD(a1) & 0x1FFF) == 0x1000)
      v3 = ((LODWORD(a1) >> 13) & 1) + v2 + 0x4000;
    LOWORD(v4) = v2 + 16385;
    if ((LOWORD(a1) & 0x1FFFu) <= 0x1000)
      LOWORD(v4) = v3;
  }
  return (unsigned __int16)(v4 | (LODWORD(a1) >> 31 << 15));
}

uint64_t sub_1DF383CB4(uint64_t a1, int a2, unint64_t a3, _OWORD *a4)
{
  uint64_t **v6;
  uint64_t **v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v6 = (uint64_t **)sub_1DF3725FC(a1, &v13, a2, a3);
  if (*v6)
    return 0;
  v8 = v6;
  v9 = operator new(0x30uLL);
  v9[2] = *a4;
  v10 = v13;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = v10;
  *v8 = (uint64_t *)v9;
  v11 = **(_QWORD **)a1;
  if (v11)
  {
    *(_QWORD *)a1 = v11;
    v12 = *v8;
  }
  else
  {
    v12 = (uint64_t *)v9;
  }
  sub_1DF36718C(*(uint64_t **)(a1 + 8), v12);
  ++*(_QWORD *)(a1 + 16);
  return 1;
}

uint64_t *sub_1DF383D5C(uint64_t a1, const void **a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v12;
  uint64_t v13;

  v5 = (uint64_t **)sub_1DF367010(a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    sub_1DF370E7C((uint64_t)&v12, a1, *a3);
    v8 = v13;
    v6 = v12;
    *v12 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v7 = v6;
    v9 = **(_QWORD **)a1;
    v10 = v6;
    if (v9)
    {
      *(_QWORD *)a1 = v9;
      v10 = *v7;
    }
    sub_1DF36718C(*(uint64_t **)(a1 + 8), v10);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

_OWORD *sub_1DF383DFC(uint64_t a1, char *__src, uint64_t a3)
{
  char *v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *result;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;

  v5 = *(char **)(a1 + 8);
  v6 = (unint64_t)&v5[-*(_QWORD *)a1];
  v13 = v6;
  sub_1DF36A650(a1, v5, __src, &__src[a3 + 1], a3 + 1);
  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
  {
    v9 = sub_1DF383EF0(a1 + 64, v6);
    if ((_QWORD *)(a1 + 72) == v9)
    {
      sub_1DF383F88(a1 + 64, v6, (uint64_t *)&v13);
    }
    else
    {
      v10 = v9;
      v11 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
      if (v6 <= v11)
      {
        if (v6 < v11)
          *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + v6;
      }
      else
      {
        sub_1DF36AAFC((unint64_t *)a1, v6 - v11);
      }
      v6 = v10[4];
    }
  }
  *(_QWORD *)&v12 = v6;
  *((_QWORD *)&v12 + 1) = 4;
  v7 = *(_OWORD **)(a1 + 32);
  if ((unint64_t)v7 >= *(_QWORD *)(a1 + 40))
  {
    result = sub_1DF36A964((void **)(a1 + 24), &v12);
  }
  else
  {
    *v7 = v12;
    result = v7 + 1;
  }
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

_QWORD *sub_1DF383EF0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  const char *v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *(_QWORD **)(a1 + 24);
  v5 = *v4 == v4[1] ? 0 : *v4;
  v6 = (const char *)(v5 + a2);
  v7 = (_QWORD *)(a1 + 8);
  do
  {
    v8 = strcmp((const char *)(v5 + v3[4]), v6);
    v9 = v3 + 1;
    if (v8 >= 0)
    {
      v9 = v3;
      v7 = v3;
    }
    v3 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v7 == v2 || strcmp(v6, (const char *)(v5 + v7[4])) < 0)
    return v2;
  return v7;
}

uint64_t **sub_1DF383F88(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t **result;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  result = (uint64_t **)sub_1DF373430(a1, &v11, a2);
  if (!*result)
  {
    v6 = result;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a3;
    v8 = v11;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v8;
    *v6 = v7;
    v9 = **(_QWORD **)a1;
    if (v9)
    {
      *(_QWORD *)a1 = v9;
      v10 = *v6;
    }
    else
    {
      v10 = v7;
    }
    result = (uint64_t **)sub_1DF36718C(*(uint64_t **)(a1 + 8), v10);
    ++*(_QWORD *)(a1 + 16);
  }
  return result;
}

uint64_t *sub_1DF384024(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v5 = (uint64_t **)sub_1DF367010(a1, &v11, a2);
  result = *v5;
  if (!*v5)
  {
    sub_1DF3739FC(a1, a3, (uint64_t)&v10);
    v7 = v11;
    v8 = v10;
    *v10 = 0;
    v8[1] = 0;
    v8[2] = v7;
    *v5 = v8;
    v9 = **(_QWORD **)a1;
    if (v9)
    {
      *(_QWORD *)a1 = v9;
      v8 = *v5;
    }
    sub_1DF36718C(*(uint64_t **)(a1 + 8), v8);
    ++*(_QWORD *)(a1 + 16);
    return v10;
  }
  return result;
}

void sub_1DF3840C8(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_1DF383318((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    v4 = v3;
    sub_1DF373A64(a1, v3);
    sub_1DF367874((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

uint64_t *sub_1DF38411C(uint64_t a1, const void **a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  v5 = (uint64_t **)sub_1DF367010(a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v8 = v5;
    sub_1DF373AB8((uint64_t)&v12, a1, *a3);
    v9 = v13;
    v6 = v12;
    *v12 = 0;
    v6[1] = 0;
    v6[2] = v9;
    *v8 = v6;
    v10 = **(_QWORD **)a1;
    v11 = v6;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v11 = *v8;
    }
    sub_1DF36718C(*(uint64_t **)(a1 + 8), v11);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

void sub_1DF3841BC(std::string **a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v7;
  __int16 *v8;
  __int16 v9;
  char *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  __int16 v13;

  v7 = *(unsigned __int16 *)(a2 + 208);
  if (a4)
  {
    v8 = (__int16 *)((char *)a3 + v7);
LABEL_3:
    v9 = *v8;
    goto LABEL_4;
  }
  if (*(char *)(a2 + 207) >= 0)
    v10 = (char *)(a2 + 184);
  else
    v10 = *(char **)(a2 + 184);
  sub_1DF383B58((flatbuffers::ClassicLocale *)&v13, v10);
  v9 = v13;
  v11 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v11 > v7)
  {
    v12 = *(unsigned __int16 *)((char *)v11 + v7);
    if (v12)
    {
      v8 = (__int16 *)((char *)a3 + v12);
      goto LABEL_3;
    }
  }
LABEL_4:
  sub_1DF376D98(a1, v9, *(_DWORD *)(a2 + 152), *(_QWORD *)(a2 + 168));
}

void sub_1DF384258(std::string **a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(unsigned __int16 *)(a2 + 208);
  if (a4)
  {
    v8 = (uint64_t *)((char *)a3 + v7);
LABEL_3:
    v9 = *v8;
    goto LABEL_4;
  }
  v13 = 0;
  if (*(char *)(a2 + 207) >= 0)
    v10 = (char *)(a2 + 184);
  else
    v10 = *(char **)(a2 + 184);
  sub_1DF3679FC(&v13, v10, 0, 1);
  v9 = v13;
  v11 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v11 > v7)
  {
    v12 = *(unsigned __int16 *)((char *)v11 + v7);
    if (v12)
    {
      v8 = (uint64_t *)((char *)a3 + v12);
      goto LABEL_3;
    }
  }
LABEL_4:
  sub_1DF378B34(a1, v9, *(_DWORD *)(a2 + 152), *(_QWORD *)(a2 + 168));
}

void sub_1DF3842FC(std::string **a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v7;
  float *v8;
  float v9;
  char *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  float v13;

  v7 = *(unsigned __int16 *)(a2 + 208);
  if (a4)
  {
    v8 = (float *)((char *)a3 + v7);
LABEL_3:
    v9 = *v8;
    goto LABEL_4;
  }
  v13 = 0.0;
  if (*(char *)(a2 + 207) >= 0)
    v10 = (char *)(a2 + 184);
  else
    v10 = *(char **)(a2 + 184);
  sub_1DF3771C4(&v13, v10);
  v9 = v13;
  v11 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v11 > v7)
  {
    v12 = *(unsigned __int16 *)((char *)v11 + v7);
    if (v12)
    {
      v8 = (float *)((char *)a3 + v12);
      goto LABEL_3;
    }
  }
LABEL_4:
  sub_1DF378F0C(a1, *(_DWORD *)(a2 + 152), *(_QWORD *)(a2 + 168), v9);
}

void sub_1DF384394(std::string **a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v7;
  double *v8;
  double v9;
  char *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  double v13;

  v7 = *(unsigned __int16 *)(a2 + 208);
  if (a4)
  {
    v8 = (double *)((char *)a3 + v7);
LABEL_3:
    v9 = *v8;
    goto LABEL_4;
  }
  v13 = 0.0;
  if (*(char *)(a2 + 207) >= 0)
    v10 = (char *)(a2 + 184);
  else
    v10 = *(char **)(a2 + 184);
  sub_1DF37970C(&v13, v10);
  v9 = v13;
  v11 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v11 > v7)
  {
    v12 = *(unsigned __int16 *)((char *)v11 + v7);
    if (v12)
    {
      v8 = (double *)((char *)a3 + v12);
      goto LABEL_3;
    }
  }
LABEL_4:
  sub_1DF37930C(a1, *(_DWORD *)(a2 + 152), *(_QWORD *)(a2 + 168), v9);
}

uint64_t sub_1DF38442C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];
  _QWORD v7[14];
  uint64_t v8;

  sub_1DF367FB0((uint64_t)v6);
  v3 = v7[0];
  *(_QWORD *)((char *)&v7[3] + *(_QWORD *)(v7[0] - 24)) = a2;
  sub_1DF37A034((std::ios_base *)((char *)v7 + *(_QWORD *)(v3 - 24)), 0x30u);
  v4 = v7[0];
  *(_DWORD *)((char *)&v7[1] + *(_QWORD *)(v7[0] - 24)) = *(_DWORD *)((_BYTE *)&v7[1] + *(_QWORD *)(v7[0] - 24)) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)&v7[1] + *(_QWORD *)(v4 - 24)) |= 0x4000u;
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_1DF3680A8((uint64_t)v6, MEMORY[0x1E0DE4F50]);
  return MEMORY[0x1E0BFF758](&v8);
}

uint64_t sub_1DF384500(uint64_t a1)
{
  uint64_t result;
  int v3;
  const char *v4;
  unsigned int v5;
  unsigned int v6;
  float *v7;
  unsigned int v8;
  int v9;
  const char *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  char *v25[3];
  uint64_t v26;

  result = 0;
  v3 = *(_DWORD *)(a1 + 12);
  switch(v3)
  {
    case 1:
      goto LABEL_2;
    case 2:
      v4 = *(const char **)a1;
      v6 = *(unsigned __int8 *)(a1 + 8);
      if (v6 > 3)
      {
        if (v6 > 7)
          return *(_QWORD *)v4;
        return *(unsigned int *)v4;
      }
      else if (v6 > 1)
      {
        return *(unsigned __int16 *)v4;
      }
      else
      {
        return *(unsigned __int8 *)v4;
      }
    case 3:
      v7 = *(float **)a1;
      v8 = *(unsigned __int8 *)(a1 + 8);
      if (v8 <= 3)
      {
        if (v8 > 1)
          v9 = *(__int16 *)v7;
        else
          v9 = *(char *)v7;
        return (uint64_t)(double)v9;
      }
      if (v8 <= 7)
        return (uint64_t)*v7;
      return (uint64_t)*(double *)v7;
    case 4:
    case 9:
      return result;
    case 5:
      sub_1DF38531C((uint64_t)v25, (const char **)a1);
      v26 = 0;
      if (sub_1DF3679FC(&v26, v25[0], 10, 1))
        return v26;
      else
        return 0;
    case 6:
      v10 = *(const char **)a1;
      v11 = *(unsigned __int8 *)(a1 + 8);
      if (v11 > 3)
      {
        if (v11 > 7)
          v12 = *(_QWORD *)v10;
        else
          v12 = *(unsigned int *)v10;
      }
      else if (v11 > 1)
      {
        v12 = *(unsigned __int16 *)v10;
      }
      else
      {
        v12 = *(unsigned __int8 *)v10;
      }
      v20 = -v12;
      v21 = *(unsigned __int8 *)(a1 + 9);
      if (v21 > 3)
      {
        if (v21 > 7)
          goto LABEL_54;
        result = *(int *)&v10[v20];
      }
      else if (v21 > 1)
      {
        result = *(__int16 *)&v10[v20];
      }
      else
      {
        result = v10[v20];
      }
      break;
    case 7:
      v10 = *(const char **)a1;
      v13 = *(unsigned __int8 *)(a1 + 8);
      if (v13 > 3)
      {
        if (v13 > 7)
          v14 = *(_QWORD *)v10;
        else
          v14 = *(unsigned int *)v10;
      }
      else if (v13 > 1)
      {
        v14 = *(unsigned __int16 *)v10;
      }
      else
      {
        v14 = *(unsigned __int8 *)v10;
      }
      v20 = -v14;
      v22 = *(unsigned __int8 *)(a1 + 9);
      if (v22 > 3)
      {
        if (v22 > 7)
LABEL_54:
          result = *(_QWORD *)&v10[v20];
        else
          result = *(unsigned int *)&v10[v20];
      }
      else if (v22 > 1)
      {
        result = *(unsigned __int16 *)&v10[v20];
      }
      else
      {
        result = v10[v20];
      }
      break;
    case 8:
      v15 = *(const char **)a1;
      v16 = *(unsigned __int8 *)(a1 + 8);
      if (v16 > 3)
      {
        if (v16 > 7)
          v17 = *(_QWORD *)v15;
        else
          v17 = *(unsigned int *)v15;
      }
      else if (v16 > 1)
      {
        v17 = *(unsigned __int16 *)v15;
      }
      else
      {
        v17 = *(unsigned __int8 *)v15;
      }
      v23 = -v17;
      v24 = *(unsigned __int8 *)(a1 + 9);
      if (v24 > 3)
      {
        if (v24 > 7)
          return (uint64_t)*(double *)&v15[v23];
        else
          return (uint64_t)*(float *)&v15[v23];
      }
      else
      {
        if (v24 > 1)
          v9 = *(__int16 *)&v15[v23];
        else
          v9 = v15[v23];
        return (uint64_t)(double)v9;
      }
    case 10:
      sub_1DF384F40((uint64_t)v25, (unsigned int **)a1);
      return (uint64_t)v25[2];
    default:
      if (v3 != 26)
        return result;
LABEL_2:
      v4 = *(const char **)a1;
      v5 = *(unsigned __int8 *)(a1 + 8);
      if (v5 > 3)
      {
        if (v5 > 7)
          return *(_QWORD *)v4;
        else
          return *(int *)v4;
      }
      else if (v5 > 1)
      {
        return *(__int16 *)v4;
      }
      else
      {
        return *v4;
      }
  }
  return result;
}

unint64_t sub_1DF3847C0(uint64_t a1)
{
  unint64_t result;
  int v3;
  const char *v4;
  unsigned int v5;
  unsigned int v6;
  float *v7;
  unsigned int v8;
  int v9;
  const char *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  char *v25[3];
  unint64_t v26;

  result = 0;
  v3 = *(_DWORD *)(a1 + 12);
  switch(v3)
  {
    case 1:
      v4 = *(const char **)a1;
      v5 = *(unsigned __int8 *)(a1 + 8);
      if (v5 > 3)
      {
        if (v5 > 7)
          return *(_QWORD *)v4;
        return *(int *)v4;
      }
      else if (v5 > 1)
      {
        return *(__int16 *)v4;
      }
      else
      {
        return *v4;
      }
    case 2:
      goto LABEL_6;
    case 3:
      v7 = *(float **)a1;
      v8 = *(unsigned __int8 *)(a1 + 8);
      if (v8 <= 3)
      {
        if (v8 > 1)
          v9 = *(__int16 *)v7;
        else
          v9 = *(char *)v7;
        return (unint64_t)(double)v9;
      }
      if (v8 <= 7)
        return (unint64_t)*v7;
      return (unint64_t)*(double *)v7;
    case 4:
    case 9:
      return result;
    case 5:
      sub_1DF38531C((uint64_t)v25, (const char **)a1);
      v26 = 0;
      if (sub_1DF3667CC(&v26, v25[0], 10, 1))
        return v26;
      else
        return 0;
    case 6:
      v10 = *(const char **)a1;
      v11 = *(unsigned __int8 *)(a1 + 8);
      if (v11 > 3)
      {
        if (v11 > 7)
          v12 = *(_QWORD *)v10;
        else
          v12 = *(unsigned int *)v10;
      }
      else if (v11 > 1)
      {
        v12 = *(unsigned __int16 *)v10;
      }
      else
      {
        v12 = *(unsigned __int8 *)v10;
      }
      v20 = -v12;
      v21 = *(unsigned __int8 *)(a1 + 9);
      if (v21 > 3)
      {
        if (v21 > 7)
          goto LABEL_53;
        result = *(int *)&v10[v20];
      }
      else if (v21 > 1)
      {
        result = *(__int16 *)&v10[v20];
      }
      else
      {
        result = v10[v20];
      }
      break;
    case 7:
      v10 = *(const char **)a1;
      v13 = *(unsigned __int8 *)(a1 + 8);
      if (v13 > 3)
      {
        if (v13 > 7)
          v14 = *(_QWORD *)v10;
        else
          v14 = *(unsigned int *)v10;
      }
      else if (v13 > 1)
      {
        v14 = *(unsigned __int16 *)v10;
      }
      else
      {
        v14 = *(unsigned __int8 *)v10;
      }
      v20 = -v14;
      v22 = *(unsigned __int8 *)(a1 + 9);
      if (v22 > 3)
      {
        if (v22 > 7)
LABEL_53:
          result = *(_QWORD *)&v10[v20];
        else
          result = *(unsigned int *)&v10[v20];
      }
      else if (v22 > 1)
      {
        result = *(unsigned __int16 *)&v10[v20];
      }
      else
      {
        result = v10[v20];
      }
      break;
    case 8:
      v15 = *(const char **)a1;
      v16 = *(unsigned __int8 *)(a1 + 8);
      if (v16 > 3)
      {
        if (v16 > 7)
          v17 = *(_QWORD *)v15;
        else
          v17 = *(unsigned int *)v15;
      }
      else if (v16 > 1)
      {
        v17 = *(unsigned __int16 *)v15;
      }
      else
      {
        v17 = *(unsigned __int8 *)v15;
      }
      v23 = -v17;
      v24 = *(unsigned __int8 *)(a1 + 9);
      if (v24 > 3)
      {
        if (v24 > 7)
          return (unint64_t)*(double *)&v15[v23];
        else
          return (unint64_t)*(float *)&v15[v23];
      }
      else
      {
        if (v24 > 1)
          v9 = *(__int16 *)&v15[v23];
        else
          v9 = v15[v23];
        return (unint64_t)(double)v9;
      }
    case 10:
      sub_1DF384F40((uint64_t)v25, (unsigned int **)a1);
      return (unint64_t)v25[2];
    default:
      if (v3 == 26)
      {
LABEL_6:
        v4 = *(const char **)a1;
        v6 = *(unsigned __int8 *)(a1 + 8);
        if (v6 > 3)
        {
          if (v6 > 7)
            return *(_QWORD *)v4;
          else
            return *(unsigned int *)v4;
        }
        else if (v6 > 1)
        {
          return *(unsigned __int16 *)v4;
        }
        else
        {
          return *(unsigned __int8 *)v4;
        }
      }
      return result;
  }
  return result;
}

double sub_1DF384A7C(uint64_t a1)
{
  int v1;
  double result;
  const char *v3;
  unsigned int v4;
  const char *v6;
  unsigned int v7;
  float *v9;
  unsigned int v10;
  int v11;
  const char *v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  unsigned int v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  char *v28[3];
  double v29;

  v1 = *(_DWORD *)(a1 + 12);
  result = 0.0;
  switch(v1)
  {
    case 1:
      v3 = *(const char **)a1;
      v4 = *(unsigned __int8 *)(a1 + 8);
      if (v4 > 3)
      {
        if (v4 > 7)
          return (double)*(uint64_t *)v3;
        else
          return (double)*(int *)v3;
      }
      else if (v4 > 1)
      {
        return (double)*(__int16 *)v3;
      }
      else
      {
        return (double)*v3;
      }
    case 2:
      goto LABEL_6;
    case 3:
      v9 = *(float **)a1;
      v10 = *(unsigned __int8 *)(a1 + 8);
      if (v10 <= 3)
      {
        if (v10 > 1)
          v11 = *(__int16 *)v9;
        else
          v11 = *(char *)v9;
        goto LABEL_69;
      }
      if (v10 <= 7)
      {
        v21 = *v9;
        goto LABEL_62;
      }
      result = *(double *)v9;
      break;
    case 4:
    case 9:
      return result;
    case 5:
      v29 = 0.0;
      sub_1DF38531C((uint64_t)v28, (const char **)a1);
      sub_1DF37970C(&v29, v28[0]);
      return v29;
    case 6:
      v12 = *(const char **)a1;
      v13 = *(unsigned __int8 *)(a1 + 8);
      if (v13 > 3)
      {
        if (v13 > 7)
          v14 = *(_QWORD *)v12;
        else
          v14 = *(unsigned int *)v12;
      }
      else if (v13 > 1)
      {
        v14 = *(unsigned __int16 *)v12;
      }
      else
      {
        v14 = *(unsigned __int8 *)v12;
      }
      v22 = -v14;
      v23 = *(unsigned __int8 *)(a1 + 9);
      if (v23 > 3)
      {
        if (v23 > 7)
          return (double)*(uint64_t *)&v12[v22];
        else
          return (double)*(int *)&v12[v22];
      }
      else if (v23 > 1)
      {
        return (double)*(__int16 *)&v12[v22];
      }
      else
      {
        return (double)v12[v22];
      }
    case 7:
      v15 = *(const char **)a1;
      v16 = *(unsigned __int8 *)(a1 + 8);
      if (v16 > 3)
      {
        if (v16 > 7)
          v17 = *(_QWORD *)v15;
        else
          v17 = *(unsigned int *)v15;
      }
      else if (v16 > 1)
      {
        v17 = *(unsigned __int16 *)v15;
      }
      else
      {
        v17 = *(unsigned __int8 *)v15;
      }
      v24 = -v17;
      v25 = *(unsigned __int8 *)(a1 + 9);
      if (v25 > 3)
      {
        if (v25 > 7)
          return (double)*(unint64_t *)&v15[v24];
        else
          return (double)*(unsigned int *)&v15[v24];
      }
      else if (v25 > 1)
      {
        return (double)*(unsigned __int16 *)&v15[v24];
      }
      else
      {
        return (double)v15[v24];
      }
    case 8:
      v18 = *(const char **)a1;
      v19 = *(unsigned __int8 *)(a1 + 8);
      if (v19 > 3)
      {
        if (v19 > 7)
          v20 = *(_QWORD *)v18;
        else
          v20 = *(unsigned int *)v18;
      }
      else if (v19 > 1)
      {
        v20 = *(unsigned __int16 *)v18;
      }
      else
      {
        v20 = *(unsigned __int8 *)v18;
      }
      v26 = -v20;
      v27 = *(unsigned __int8 *)(a1 + 9);
      if (v27 > 3)
      {
        if (v27 > 7)
        {
          result = *(double *)&v18[v26];
        }
        else
        {
          v21 = *(float *)&v18[v26];
LABEL_62:
          result = v21;
        }
      }
      else
      {
        if (v27 > 1)
          v11 = *(__int16 *)&v18[v26];
        else
          v11 = v18[v26];
LABEL_69:
        result = (double)v11;
      }
      break;
    case 10:
      sub_1DF384F40((uint64_t)v28, (unsigned int **)a1);
      return (double)(unint64_t)v28[2];
    default:
      if (v1 == 26)
      {
LABEL_6:
        v6 = *(const char **)a1;
        v7 = *(unsigned __int8 *)(a1 + 8);
        if (v7 > 3)
        {
          if (v7 > 7)
            return (double)*(unint64_t *)v6;
          else
            return (double)*(unsigned int *)v6;
        }
        else if (v7 > 1)
        {
          return (double)*(unsigned __int16 *)v6;
        }
        else
        {
          return (double)*(unsigned __int8 *)v6;
        }
      }
      return result;
  }
  return result;
}

BOOL sub_1DF384D40(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  unint64_t v3;

  if (*(_DWORD *)(a1 + 12) == 26)
  {
    v1 = *(unsigned int **)a1;
    v2 = *(unsigned __int8 *)(a1 + 8);
    if (v2 > 3)
    {
      if (v2 > 7)
        v3 = *(_QWORD *)v1;
      else
        v3 = *v1;
    }
    else if (v2 > 1)
    {
      v3 = *(unsigned __int16 *)v1;
    }
    else
    {
      v3 = *(unsigned __int8 *)v1;
    }
  }
  else
  {
    v3 = sub_1DF3847C0(a1);
  }
  return v3 != 0;
}

uint64_t sub_1DF384DA8(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  unsigned int *v3;
  uint64_t v4;
  char *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (unsigned int *)(a2 - 3 * a3);
  if (a3 > 3u)
  {
    if (a3 < 8u)
    {
      v5 = (char *)v3 - *v3;
      v6 = *(unsigned int *)((char *)v3 + a3);
      goto LABEL_9;
    }
    v4 = *(_QWORD *)v3;
  }
  else
  {
    if (a3 >= 2u)
    {
      v5 = (char *)v3 - *(unsigned __int16 *)v3;
      LOWORD(v6) = *(_WORD *)((char *)v3 + a3);
      goto LABEL_9;
    }
    v4 = *(unsigned __int8 *)v3;
  }
  v5 = (char *)v3 - v4;
  LOBYTE(v6) = *((_BYTE *)v3 + a3);
LABEL_9:
  v7 = v6;
  *(_QWORD *)result = v5;
  *(_BYTE *)(result + 8) = v6;
  v8 = -(uint64_t)v6;
  if (v7 > 3)
  {
    if (v7 > 7)
      v9 = *(_QWORD *)&v5[v8];
    else
      v9 = *(unsigned int *)&v5[v8];
  }
  else if (v7 > 1)
  {
    v9 = *(unsigned __int16 *)&v5[v8];
  }
  else
  {
    v9 = v5[v8];
  }
  *(_QWORD *)(result + 16) = v9;
  *(_DWORD *)(result + 24) = 4;
  return result;
}

std::string *sub_1DF384E5C(std::string *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t i;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v13[2];

  std::string::append(a1, "[ ");
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    for (i = 0; i < v6; ++i)
    {
      if (i)
      {
        std::string::append(a1, ", ");
        v6 = *(_QWORD *)(a2 + 16);
      }
      if (v6 <= i)
      {
        v10 = 0;
        v11 = 257;
      }
      else
      {
        v8 = *(unsigned __int8 *)(a2 + 8);
        v9 = *(unsigned __int8 *)(*(_QWORD *)a2 + v6 * v8 + i);
        v10 = *(_QWORD *)a2 + i * v8;
        v11 = ((unint64_t)(v9 >> 2) << 32) | ((unint64_t)(1 << (v9 & 3)) << 8) | v8;
      }
      v13[0] = v10;
      v13[1] = v11;
      sub_1DF3753A4(v13, a3, a1);
      v6 = *(_QWORD *)(a2 + 16);
    }
  }
  return std::string::append(a1, " ]");
}

uint64_t sub_1DF384F40(uint64_t result, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  if ((*((_DWORD *)a2 + 3) - 9) > 1)
  {
    v5 = 0;
    *(_QWORD *)result = &unk_1DF38605A;
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    v2 = *a2;
    v3 = *((unsigned __int8 *)a2 + 8);
    if (v3 > 3)
    {
      if (v3 > 7)
        v4 = *(_QWORD *)v2;
      else
        v4 = *v2;
    }
    else if (v3 > 1)
    {
      v4 = *(unsigned __int16 *)v2;
    }
    else
    {
      v4 = *(unsigned __int8 *)v2;
    }
    v6 = (char *)v2 - v4;
    v7 = *((unsigned __int8 *)a2 + 9);
    *(_QWORD *)result = v6;
    *(_BYTE *)(result + 8) = v7;
    if (v7 > 3)
    {
      if (v7 > 7)
        v5 = *(_QWORD *)&v6[-v7];
      else
        v5 = *(unsigned int *)&v6[-v7];
    }
    else if (v7 > 1)
    {
      v5 = *(unsigned __int16 *)&v6[-v7];
    }
    else
    {
      v5 = v6[-v7];
    }
  }
  *(_QWORD *)(result + 16) = v5;
  return result;
}

std::string *sub_1DF384FF8(std::string *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v12[2];

  std::string::append(a1, "[ ");
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    for (i = 0; i < v6; ++i)
    {
      if (i)
      {
        std::string::append(a1, ", ");
        v6 = *(_QWORD *)(a2 + 16);
      }
      if (v6 <= i)
      {
        v9 = 0;
        v10 = 257;
      }
      else
      {
        v8 = *(unsigned __int8 *)(a2 + 8);
        v9 = *(_QWORD *)a2 + i * v8;
        v10 = v8 | ((unint64_t)*(unsigned int *)(a2 + 24) << 32) | 0x100;
      }
      v12[0] = v9;
      v12[1] = v10;
      sub_1DF3753A4(v12, a3, a1);
      v6 = *(_QWORD *)(a2 + 16);
    }
  }
  return std::string::append(a1, " ]");
}

uint64_t sub_1DF3850C4(uint64_t result, unsigned int **a2)
{
  int v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_DWORD *)a2 + 3);
  if ((v2 - 11) < 5 || v2 == 36)
  {
    v3 = *a2;
    v4 = *((unsigned __int8 *)a2 + 8);
    if (v4 > 3)
    {
      if (v4 > 7)
        v5 = *(_QWORD *)v3;
      else
        v5 = *v3;
    }
    else if (v4 > 1)
    {
      v5 = *(unsigned __int16 *)v3;
    }
    else
    {
      v5 = *(unsigned __int8 *)v3;
    }
    v7 = (char *)v3 - v5;
    v8 = *((unsigned __int8 *)a2 + 9);
    v6 = v2 - 10;
    *(_QWORD *)result = v7;
    *(_BYTE *)(result + 8) = v8;
    if (v8 > 3)
    {
      if (v8 > 7)
        v9 = *(_QWORD *)&v7[-v8];
      else
        v9 = *(unsigned int *)&v7[-v8];
    }
    else if (v8 > 1)
    {
      v9 = *(unsigned __int16 *)&v7[-v8];
    }
    else
    {
      v9 = v7[-v8];
    }
    *(_QWORD *)(result + 16) = v9;
    if (v6 == 5)
      v6 = 4;
  }
  else
  {
    *(_QWORD *)result = &unk_1DF38605F;
    v6 = 1;
    *(_BYTE *)(result + 8) = 1;
    *(_QWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = v6;
  return result;
}

std::string *sub_1DF385198(std::string *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD v12[2];

  std::string::append(a1, "[ ");
  LODWORD(v6) = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    v7 = 0;
    do
    {
      if (v7)
      {
        std::string::append(a1, ", ");
        LODWORD(v6) = *(unsigned __int8 *)(a2 + 16);
      }
      if (v7 >= v6)
      {
        v9 = 0;
        v10 = 257;
      }
      else
      {
        v8 = *(unsigned __int8 *)(a2 + 8);
        v9 = *(_QWORD *)a2 + v7 * v8;
        v10 = v8 | ((unint64_t)*(unsigned int *)(a2 + 12) << 32) | 0x100;
      }
      v12[0] = v9;
      v12[1] = v10;
      sub_1DF3753A4(v12, a3, a1);
      ++v7;
      v6 = *(unsigned __int8 *)(a2 + 16);
    }
    while (v7 < v6);
  }
  return std::string::append(a1, " ]");
}

uint64_t sub_1DF385264(uint64_t result, unsigned int **a2)
{
  int v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v2 = *((_DWORD *)a2 + 3);
  if (v2 == 25 || v2 == 5)
  {
    v4 = *a2;
    v5 = *((unsigned __int8 *)a2 + 8);
    if (v5 > 3)
    {
      if (v5 > 7)
        v6 = *(_QWORD *)v4;
      else
        v6 = *v4;
    }
    else if (v5 > 1)
    {
      v6 = *(unsigned __int16 *)v4;
    }
    else
    {
      v6 = *(unsigned __int8 *)v4;
    }
    v8 = (char *)v4 - v6;
    v9 = *((unsigned __int8 *)a2 + 9);
    *(_QWORD *)result = v8;
    *(_BYTE *)(result + 8) = v9;
    if (v9 > 3)
    {
      if (v9 > 7)
        v7 = *(_QWORD *)&v8[-v9];
      else
        v7 = *(unsigned int *)&v8[-v9];
    }
    else if (v9 > 1)
    {
      v7 = *(unsigned __int16 *)&v8[-v9];
    }
    else
    {
      v7 = v8[-v9];
    }
  }
  else
  {
    v7 = 0;
    *(_QWORD *)result = &jpt_1DF37C788;
    *(_BYTE *)(result + 8) = 1;
  }
  *(_QWORD *)(result + 16) = v7;
  return result;
}

size_t sub_1DF38531C(uint64_t a1, const char **a2)
{
  int v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  unsigned int v8;
  uint64_t v9;
  size_t result;
  char *v11;
  uint64_t v12;
  const char *v13;
  char v14;

  v3 = *((_DWORD *)a2 + 3);
  if (v3 == 4)
  {
    v7 = *a2;
    v8 = *((unsigned __int8 *)a2 + 8);
    if (v8 > 3)
    {
      if (v8 > 7)
        v9 = *(_QWORD *)v7;
      else
        v9 = *(unsigned int *)v7;
    }
    else if (v8 > 1)
    {
      v9 = *(unsigned __int16 *)v7;
    }
    else
    {
      v9 = *(unsigned __int8 *)v7;
    }
    v13 = &v7[-v9];
    v14 = *((_BYTE *)a2 + 9);
    result = strlen(&v7[-v9]);
    *(_QWORD *)a1 = v13;
    *(_BYTE *)(a1 + 8) = v14;
  }
  else if (v3 == 5)
  {
    v4 = (unsigned int *)*a2;
    v5 = *((unsigned __int8 *)a2 + 8);
    if (v5 > 3)
    {
      if (v5 > 7)
        v6 = *(_QWORD *)v4;
      else
        v6 = *v4;
    }
    else if (v5 > 1)
    {
      v6 = *(unsigned __int16 *)v4;
    }
    else
    {
      v6 = *(unsigned __int8 *)v4;
    }
    v11 = (char *)v4 - v6;
    v12 = *((unsigned __int8 *)a2 + 9);
    *(_QWORD *)a1 = v11;
    *(_BYTE *)(a1 + 8) = v12;
    if (v12 > 3)
    {
      if (v12 > 7)
        result = *(_QWORD *)&v11[-v12];
      else
        result = *(unsigned int *)&v11[-v12];
    }
    else if (v12 > 1)
    {
      result = *(unsigned __int16 *)&v11[-v12];
    }
    else
    {
      result = v11[-v12];
    }
  }
  else
  {
    result = 0;
    *(_QWORD *)a1 = &unk_1DF386059;
    *(_BYTE *)(a1 + 8) = 1;
  }
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

BOOL flatbuffers::FileExistsRaw(flatbuffers *this, const char *a2)
{
  _BOOL8 v2;
  _QWORD v4[2];
  _BYTE v5[408];
  _QWORD v6[20];

  v6[19] = *MEMORY[0x1E0C80C00];
  sub_1DF38550C(v4);
  v2 = *(_DWORD *)&v5[*(_QWORD *)(v4[0] - 24) + 16] == 0;
  v4[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1E0BFF644](v5);
  std::istream::~istream();
  MEMORY[0x1E0BFF758](v6);
  return v2;
}

_QWORD *sub_1DF38550C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v6;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v6 - 24)) = v5;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1E0BFF638](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

uint64_t flatbuffers::LoadFile()
{
  return off_1F04755C0();
}

uint64_t flatbuffers::FileExists(flatbuffers *this, const char *a2)
{
  return off_1F04755C8(this, (const char *)off_1F04755C8);
}

void flatbuffers::PosixPath(flatbuffers *this@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v5;
  char v6;
  BOOL v7;
  _BYTE *v8;
  uint64_t v9;

  v5 = strlen((const char *)this);
  std::string::__init((std::string *)a2, (const std::string::value_type *)this, v5);
  v6 = *(_BYTE *)(a2 + 23);
  v7 = v6 < 0;
  v8 = *(_BYTE **)a2;
  if (v6 >= 0)
    v8 = (_BYTE *)a2;
  v9 = v6 & 0x7F;
  if (v7)
    v9 = *(_QWORD *)(a2 + 8);
  for (; v9; --v9)
  {
    if (*v8 == 92)
      *v8 = 47;
    ++v8;
  }
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1E0DE41C8](this, __c, __pos);
}

std::string::size_type std::string::rfind(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1E0DE41D0](this, __c, __pos);
}

int std::string::compare(const std::string *this, std::string::size_type __pos1, std::string::size_type __n1, const std::string::value_type *__s)
{
  return MEMORY[0x1E0DE41E0](this, __pos1, __n1, __s);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1E0DE41F0]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4408](this, __pos, __n);
}

void std::string::__init(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  MEMORY[0x1E0DE4410](this, __s, __sz);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4420](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1E0DE4438](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4440](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4448](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4468](this, __pos, __s);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x1E0DE4480](this, __n, __c);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x1E0DE44A8](this, __requested_capacity);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x1E0DE44B0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1E0DE44C8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1E0DE44E0](this, __c);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1E0DE4590]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1E0DE45A8]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1E0DE45B0]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x1E0DE45D0]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x1E0DE45E8]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x1E0DE45F0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1E0DE4628]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1E0DE46A8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46D8]();
}

{
  return MEMORY[0x1E0DE46E8]();
}

{
  return MEMORY[0x1E0DE46F8]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

{
  return MEMORY[0x1E0DE4718]();
}

{
  return MEMORY[0x1E0DE4720]();
}

{
  return MEMORY[0x1E0DE4728]();
}

{
  return MEMORY[0x1E0DE4730]();
}

{
  return MEMORY[0x1E0DE4738]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1E0DE4D88]();
}

uint64_t operator delete[]()
{
  return off_1EA98E950();
}

void operator delete(void *__p)
{
  off_1EA98E958(__p);
}

uint64_t operator delete()
{
  return off_1EA98E960();
}

uint64_t operator new[]()
{
  return off_1EA98E968();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1EA98E970(__sz);
}

uint64_t operator new()
{
  return off_1EA98E978();
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x1E0C81500](__x);
  return result;
}

long double asin(long double __x)
{
  long double result;

  MEMORY[0x1E0C81598](__x);
  return result;
}

long double atan(long double __x)
{
  long double result;

  MEMORY[0x1E0C81618](__x);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1E0C81738](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B40](__x);
  return result;
}

int freelocale(locale_t a1)
{
  return MEMORY[0x1E0C834D8](a1);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C84160](a1, a2);
}

locale_t newlocale(int a1, const char *a2, locale_t a3)
{
  return (locale_t)MEMORY[0x1E0C843A0](*(_QWORD *)&a1, a2, a3);
}

char *__cdecl realpath(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1E0C85038](a1, a2);
}

char *__cdecl setlocale(int a1, const char *a2)
{
  return (char *)MEMORY[0x1E0C85358](*(_QWORD *)&a1, a2);
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x1E0C85418](__x);
  return result;
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strpbrk(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1E0C855D0](__s1, __s2);
}

double strtod_l(const char *a1, char **a2, locale_t a3)
{
  double result;

  MEMORY[0x1E0C85620](a1, a2, a3);
  return result;
}

float strtof_l(const char *a1, char **a2, locale_t a3)
{
  float result;

  MEMORY[0x1E0C85630](a1, a2, a3);
  return result;
}

uint64_t strtoll_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x1E0C85680](a1, a2, *(_QWORD *)&a3, a4);
}

unint64_t strtoull_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x1E0C856B0](a1, a2, *(_QWORD *)&a3, a4);
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x1E0C857E8](__x);
  return result;
}
