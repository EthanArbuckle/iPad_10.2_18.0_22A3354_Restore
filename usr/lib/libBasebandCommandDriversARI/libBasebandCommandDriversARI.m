DIR *support::fs::readDir(const char *a1, uint64_t a2)
{
  DIR *result;
  DIR *v4;
  dirent *v5;
  dirent *v6;
  size_t d_namlen;
  _BYTE *v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  _BYTE __dst[24];

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  result = opendir(a1);
  if (result)
  {
    v4 = result;
    v5 = readdir(result);
    if (v5)
    {
      v6 = v5;
      do
      {
        memset(__dst, 170, sizeof(__dst));
        d_namlen = v6->d_namlen;
        if (d_namlen >= 0x17)
        {
          if ((d_namlen | 7) == 0x17)
            v11 = ((unsigned __int16)d_namlen & 0xFFF8) + 8;
          else
            v11 = d_namlen | 7;
          v8 = operator new(v11 + 1);
          *(_QWORD *)&__dst[8] = d_namlen;
          *(_QWORD *)&__dst[16] = v11 - 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)__dst = v8;
        }
        else
        {
          __dst[23] = v6->d_namlen;
          v8 = __dst;
          if (!(_DWORD)d_namlen)
          {
            __dst[d_namlen] = 0;
            v9 = *(std::string **)(a2 + 8);
            if ((unint64_t)v9 < *(_QWORD *)(a2 + 16))
              goto LABEL_10;
            goto LABEL_17;
          }
        }
        memmove(v8, v6->d_name, d_namlen);
        v8[d_namlen] = 0;
        v9 = *(std::string **)(a2 + 8);
        if ((unint64_t)v9 < *(_QWORD *)(a2 + 16))
        {
LABEL_10:
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
          }
          else
          {
            v10 = *(_OWORD *)__dst;
            v9->__r_.__value_.__r.__words[2] = *(_QWORD *)&__dst[16];
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
          }
          *(_QWORD *)(a2 + 8) = v9 + 1;
          *(_QWORD *)(a2 + 8) = v9 + 1;
          if ((__dst[23] & 0x80000000) == 0)
            goto LABEL_6;
LABEL_21:
          operator delete(*(void **)__dst);
          goto LABEL_6;
        }
LABEL_17:
        *(_QWORD *)(a2 + 8) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)__dst);
        if ((__dst[23] & 0x80000000) != 0)
          goto LABEL_21;
LABEL_6:
        v6 = readdir(v4);
      }
      while (v6);
    }
    return (DIR *)closedir(v4);
  }
  return result;
}

void sub_227A73064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL support::fs::loadFile(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _BOOL8 v4;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  __int128 v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  _QWORD __b[91];

  __b[89] = *MEMORY[0x24BDAC8D0];
  memset(__b, 170, 0x240uLL);
  std::ifstream::basic_ifstream(__b);
  if (!__b[17]
    || (std::istream::tellg(), std::istream::seekg(), std::istream::tellg(), v3 = __b[88], std::istream::seekg(), !v3)
    || *(_DWORD *)((char *)&__b[4] + *(_QWORD *)(__b[0] - 24)))
  {
    v4 = 0;
    goto LABEL_5;
  }
  v7 = *(char **)a2;
  v6 = *(char **)(a2 + 8);
  v8 = (unint64_t)&v6[-*(_QWORD *)a2];
  v9 = v3 - v8;
  if (v3 <= v8)
  {
    if (v3 < v8)
      *(_QWORD *)(a2 + 8) = &v7[v3];
    goto LABEL_36;
  }
  v10 = *(_QWORD *)(a2 + 16);
  if (v10 - (uint64_t)v6 < v9)
  {
    if ((v3 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v10 - (_QWORD)v7;
    v12 = 2 * v11;
    if (2 * v11 <= v3)
      v12 = v3;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v14 = (char *)operator new(v13);
    v15 = &v14[v8];
    v16 = &v14[v13];
    bzero(&v14[v8], v3 - v8);
    if (v6 == v7)
      goto LABEL_34;
    if (v8 >= 8 && (unint64_t)(v7 - v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        v17 = 0;
        goto LABEL_26;
      }
      v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      v18 = v6 - 16;
      v19 = &v14[v6 - 16 - v7];
      v20 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v21 = *(_OWORD *)v18;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)v19 = v21;
        v19 -= 32;
        v18 -= 32;
        v20 -= 32;
      }
      while (v20);
      if (v8 == v17)
        goto LABEL_33;
      if ((v8 & 0x18) != 0)
      {
LABEL_26:
        v15 -= v8 & 0xFFFFFFFFFFFFFFF8;
        v22 = &v6[-v17 - 8];
        v23 = (char *)(v22 - v7);
        v24 = v17 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v25 = *(_QWORD *)v22;
          v22 -= 8;
          *(_QWORD *)&v23[(_QWORD)v14] = v25;
          v23 -= 8;
          v24 += 8;
        }
        while (v24);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_33;
        goto LABEL_31;
      }
      v15 -= v17;
      v6 -= v17;
    }
LABEL_31:
    v26 = v15 - 1;
    do
    {
      v27 = *--v6;
      *v26-- = v27;
    }
    while (v6 != v7);
LABEL_33:
    v6 = v7;
    v15 = v14;
LABEL_34:
    *(_QWORD *)a2 = v15;
    *(_QWORD *)(a2 + 8) = &v14[v3];
    *(_QWORD *)(a2 + 16) = v16;
    if (v6)
      operator delete(v6);
    goto LABEL_36;
  }
  bzero(*(void **)(a2 + 8), v3 - v8);
  *(_QWORD *)(a2 + 8) = &v6[v9];
LABEL_36:
  std::istream::read();
  v4 = __b[1] == (int)v3;
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)__b + *(_QWORD *)(__b[0] - 24)), *(_DWORD *)((char *)&__b[4] + *(_QWORD *)(__b[0] - 24)) | 4);
LABEL_5:
  __b[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)__b + *(_QWORD *)(__b[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x22E2A466C](&__b[2]);
  std::istream::~istream();
  MEMORY[0x22E2A47D4](&__b[53]);
  return v4;
}

void sub_227A73410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x22E2A4660](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_227A73504(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x22E2A47D4](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x22E2A466C](a1 + 2);
  std::istream::~istream();
  MEMORY[0x22E2A47D4](a1 + 53);
  return a1;
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v4;

  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (!locale)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&locale->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(this);
  }
  else
  {
LABEL_5:
    std::locale::~locale(this);
  }
}

BOOL support::fs::createDir(const char *a1, mode_t a2, int a3)
{
  const char *v5;
  timespec v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  void **v11;
  std::string::size_type v12;
  uint64_t v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  timespec v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _BYTE __p[56];
  void *v27[2];
  uint64_t v28;
  stat v29;

  v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v29.st_blksize = v6;
  *(timespec *)v29.st_qspare = v6;
  v29.st_birthtimespec = v6;
  *(timespec *)&v29.st_size = v6;
  v29.st_mtimespec = v6;
  v29.st_ctimespec = v6;
  *(timespec *)&v29.st_uid = v6;
  v29.st_atimespec = v6;
  *(timespec *)&v29.st_dev = v6;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (!stat(a1, &v29))
    return 1;
  if (!a3)
  {
    if (v5[23] >= 0)
      v21 = v5;
    else
      v21 = *(const char **)v5;
    return mkdir(v21, a2) == 0;
  }
  v27[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v28 = 0x1AAAAAAAAAAAAAALL;
  v27[0] = (void *)0xAAAAAAAAAAAA002FLL;
  memset(&__p[32], 170, 24);
  ctu::tokenize();
  memset(__p, 0, 24);
  if (v5[23] >= 0)
    v7 = v5;
  else
    v7 = *(const char **)v5;
  if (*v7 == 47)
  {
    *(_OWORD *)__p = *(_OWORD *)v27;
    *(_QWORD *)&__p[16] = v28;
  }
  v8 = *(_QWORD *)&__p[32];
  if (*(_QWORD *)&__p[40] != *(_QWORD *)&__p[32])
  {
    v9 = 0;
    v10 = 1;
    while (1)
    {
      if (v10 != 1)
      {
        if (v28 >= 0)
          v11 = v27;
        else
          v11 = (void **)v27[0];
        if (v28 >= 0)
          v12 = HIBYTE(v28);
        else
          v12 = (std::string::size_type)v27[1];
        std::string::append((std::string *)__p, (const std::string::value_type *)v11, v12);
        v8 = *(_QWORD *)&__p[32];
      }
      v13 = v8 + 24 * v9;
      v14 = *(char *)(v13 + 23);
      v15 = v14 >= 0 ? (const std::string::value_type *)v13 : *(const std::string::value_type **)v13;
      v16 = v14 >= 0 ? *(unsigned __int8 *)(v13 + 23) : *(_QWORD *)(v13 + 8);
      std::string::append((std::string *)__p, v15, v16);
      v17.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v17.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v29.st_blksize = v17;
      *(timespec *)v29.st_qspare = v17;
      v29.st_birthtimespec = v17;
      *(timespec *)&v29.st_size = v17;
      v29.st_mtimespec = v17;
      v29.st_ctimespec = v17;
      *(timespec *)&v29.st_uid = v17;
      v29.st_atimespec = v17;
      *(timespec *)&v29.st_dev = v17;
      v18 = __p[23] >= 0 ? __p : *(const char **)__p;
      if (stat(v18, &v29))
      {
        v19 = __p[23] >= 0 ? __p : *(const char **)__p;
        if (mkdir(v19, a2))
          break;
      }
      v9 = v10;
      v8 = *(_QWORD *)&__p[32];
      ++v10;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[40] - *(_QWORD *)&__p[32]) >> 3) <= v9)
        goto LABEL_42;
    }
    v20 = 0;
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_42:
  v20 = 1;
  if ((__p[23] & 0x80000000) != 0)
LABEL_43:
    operator delete(*(void **)__p);
LABEL_44:
  v22 = *(_QWORD *)&__p[32];
  if (*(_QWORD *)&__p[32])
  {
    v23 = *(_QWORD *)&__p[40];
    v24 = *(void **)&__p[32];
    if (*(_QWORD *)&__p[40] != *(_QWORD *)&__p[32])
    {
      do
      {
        if (*(char *)(v23 - 1) < 0)
          operator delete(*(void **)(v23 - 24));
        v23 -= 24;
      }
      while (v23 != v22);
      v24 = *(void **)&__p[32];
    }
    *(_QWORD *)&__p[40] = v22;
    operator delete(v24);
  }
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
  return v20;
}

void sub_227A73884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t support::fs::removeDir(const char *a1)
{
  const std::__fs::filesystem::path *v1;
  timespec v2;
  _BOOL8 v3;
  std::error_code *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  char *v8;
  __int128 v9;
  int v10;
  std::string::size_type size;
  std::string *v12;
  std::string *p_p;
  int v14;
  size_t v15;
  unint64_t v16;
  char *p_dst;
  uint64_t v18;
  uint64_t v19;
  const std::__fs::filesystem::path *v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type v23;
  char v24;
  timespec v25;
  std::string *v26;
  std::error_code *v27;
  const std::__fs::filesystem::path *v28;
  std::string *v29;
  char v30;
  std::string *v31;
  DIR *v32;
  DIR *v33;
  dirent *v34;
  const std::__fs::filesystem::path *v35;
  const char *v36;
  void **v37;
  void **v38;
  void *v39;
  std::string __p;
  void *v42;
  void **v43;
  uint64_t v44;
  stat __dst;
  _QWORD v46[5];

  v1 = (const std::__fs::filesystem::path *)a1;
  v46[2] = *MEMORY[0x24BDAC8D0];
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blksize = v2;
  *(timespec *)__dst.st_qspare = v2;
  __dst.st_birthtimespec = v2;
  *(timespec *)&__dst.st_size = v2;
  __dst.st_mtimespec = v2;
  __dst.st_ctimespec = v2;
  *(timespec *)&__dst.st_uid = v2;
  __dst.st_atimespec = v2;
  *(timespec *)&__dst.st_dev = v2;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (stat(a1, &__dst))
    return 1;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  support::fs::readDir((const char *)v1, (uint64_t)&v42);
  v5 = 0;
  while (1)
  {
    v6 = v5;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (_BYTE *)v42) >> 3);
    v3 = v7 <= v5;
    if (v7 <= v5)
      break;
    v8 = (char *)v42 + 24 * v5;
    memset(&__p, 170, sizeof(__p));
    if (v8[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (size == 2)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      if (LOWORD(p_p->__r_.__value_.__l.__data_) == 11822)
      {
LABEL_58:
        v30 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_6;
      }
    }
    else if (size == 1)
    {
      v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &__p;
      if (v12->__r_.__value_.__s.__data_[0] == 46)
        goto LABEL_58;
    }
    v14 = SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    if (v14 >= 0)
      v15 = HIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    else
      v15 = v1->__pn_.__r_.__value_.__l.__size_;
    v16 = v15 + 1;
    memset(&__dst, 170, 24);
    if (v15 + 1 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v16 >= 0x17)
    {
      v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v18 = v16 | 7;
      v19 = v18 + 1;
      p_dst = (char *)operator new(v18 + 1);
      __dst.st_ino = v15 + 1;
      *(_QWORD *)&__dst.st_uid = v19 | 0x8000000000000000;
      *(_QWORD *)&__dst.st_dev = p_dst;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = (char *)&__dst;
      HIBYTE(__dst.st_gid) = v15 + 1;
      if (!v15)
        goto LABEL_38;
    }
    if (v14 >= 0)
      v20 = v1;
    else
      v20 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
    memmove(p_dst, v20, v15);
LABEL_38:
    *(_WORD *)&p_dst[v15] = 47;
    if (v10 >= 0)
      v21 = &__p;
    else
      v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v22 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v21, size);
    v23 = v22->__r_.__value_.__r.__words[0];
    v46[0] = v22->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
    v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v23;
    __p.__r_.__value_.__l.__size_ = v46[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v46 + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v24;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v23 = __p.__r_.__value_.__r.__words[0];
    }
    v25.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v25.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize = v25;
    *(timespec *)__dst.st_qspare = v25;
    __dst.st_birthtimespec = v25;
    *(timespec *)&__dst.st_size = v25;
    __dst.st_mtimespec = v25;
    __dst.st_ctimespec = v25;
    *(timespec *)&__dst.st_uid = v25;
    __dst.st_atimespec = v25;
    if (v24 >= 0)
      v26 = &__p;
    else
      v26 = (std::string *)v23;
    *(timespec *)&__dst.st_dev = v25;
    if (!stat((const char *)v26, &__dst)
      && ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (v31 = &__p)
        : (v31 = (std::string *)__p.__r_.__value_.__r.__words[0]),
          (v32 = opendir((const char *)v31), (v33 = v32) != 0) && (v34 = readdir(v32), closedir(v33), v34)))
    {
      std::string::append(&__p, "/", 1uLL);
      v30 = support::fs::removeDir(&__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = (const std::__fs::filesystem::path *)&__p;
      else
        v28 = (const std::__fs::filesystem::path *)__p.__r_.__value_.__r.__words[0];
      if (!remove(v28, v27))
        goto LABEL_58;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &__p;
      else
        v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v30 = unlink((const char *)v29) == 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
    }
LABEL_6:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
    v5 = v6 + 1;
    if ((v30 & 1) == 0)
      goto LABEL_75;
  }
  if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = v1;
  else
    v35 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
  if (remove(v35, v4))
  {
    if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = (const char *)v1;
    else
      v36 = (const char *)v1->__pn_.__r_.__value_.__r.__words[0];
    unlink(v36);
  }
LABEL_75:
  v37 = (void **)v42;
  if (v42)
  {
    v38 = v43;
    v39 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v38 - 1) < 0)
          operator delete(*(v38 - 3));
        v38 -= 3;
      }
      while (v38 != v37);
      v39 = v42;
    }
    v43 = v37;
    operator delete(v39);
  }
  return v3;
}

void sub_227A73CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227A73D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((a16 & 0x80000000) == 0)
  {
    std::vector<std::string>::~vector[abi:ne180100](&a17);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t support::fs::removeDirContents(const char *a1, unint64_t a2)
{
  const char *v3;
  void **v4;
  void **v5;
  double v6;
  __int128 v7;
  int v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  int v12;
  size_t v13;
  unint64_t v14;
  stat *p_dst;
  std::string::size_type v16;
  void **v17;
  void **v18;
  const char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  std::string *v24;
  std::string *v25;
  __int128 v26;
  timespec v27;
  void **v28;
  char v29;
  int v30;
  timespec v31;
  void **v32;
  std::error_code *v33;
  const std::__fs::filesystem::path *v34;
  void **v35;
  void **v36;
  DIR *v37;
  DIR *v38;
  dirent *v39;
  int v40;
  size_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  std::string *v47;
  std::string::size_type size;
  std::string *v49;
  __int128 v50;
  char v51;
  char v52;
  void **v53;
  void *v54;
  time_t v56;
  char v57;
  int v58;
  std::string v59;
  void *__p[4];
  std::string v61;
  void *v62;
  void **v63;
  uint64_t v64;
  stat __dst;

  v3 = a1;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  support::fs::readDir(a1, (uint64_t)&v62);
  v56 = time(0);
  v5 = (void **)v62;
  v4 = v63;
  if (v62 == v63)
  {
    v52 = 1;
    if (v62)
      goto LABEL_105;
    return v52 & 1;
  }
  v6 = (double)a2;
  v57 = 1;
  while (1)
  {
    memset(&v61, 170, sizeof(v61));
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v61, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
    }
    else
    {
      v7 = *(_OWORD *)v5;
      v61.__r_.__value_.__r.__words[2] = (std::string::size_type)v5[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v7;
    }
    v8 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
    v9 = (v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v61.__r_.__value_.__r.__words[2])
       : v61.__r_.__value_.__l.__size_;
    if (v9 == 2)
      break;
    if (v9 == 1)
    {
      v10 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v61;
      if (v10->__r_.__value_.__s.__data_[0] == 46)
        goto LABEL_95;
    }
LABEL_19:
    memset(__p, 170, 24);
    v12 = v3[23];
    if (v12 >= 0)
      v13 = *((unsigned __int8 *)v3 + 23);
    else
      v13 = *((_QWORD *)v3 + 1);
    v14 = v13 + 1;
    memset(&__dst, 170, 24);
    if (v13 + 1 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v14 >= 0x17)
    {
      v58 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
      v16 = v9;
      v17 = v5;
      v18 = v4;
      v19 = v3;
      v20 = a2;
      v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v21 = v14 | 7;
      v22 = v21 + 1;
      p_dst = (stat *)operator new(v21 + 1);
      __dst.st_ino = v13 + 1;
      *(_QWORD *)&__dst.st_uid = v22 | 0x8000000000000000;
      *(_QWORD *)&__dst.st_dev = p_dst;
      a2 = v20;
      v3 = v19;
      v4 = v18;
      v5 = v17;
      v9 = v16;
      v8 = v58;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = &__dst;
      HIBYTE(__dst.st_gid) = v13 + 1;
      if (!v13)
        goto LABEL_33;
    }
    if (v12 >= 0)
      v23 = v3;
    else
      v23 = *(const char **)v3;
    memmove(p_dst, v23, v13);
LABEL_33:
    *(_WORD *)((char *)&p_dst->st_dev + v13) = 47;
    if (v8 >= 0)
      v24 = &v61;
    else
      v24 = (std::string *)v61.__r_.__value_.__r.__words[0];
    v25 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v24, v9);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __p[2] = (void *)v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      if (!a2)
        goto LABEL_47;
    }
    else if (!a2)
    {
      goto LABEL_47;
    }
    v27.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v27.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize = v27;
    *(timespec *)__dst.st_qspare = v27;
    __dst.st_birthtimespec = v27;
    *(timespec *)&__dst.st_size = v27;
    __dst.st_mtimespec = v27;
    __dst.st_ctimespec = v27;
    __dst.st_atimespec = v27;
    *(timespec *)&__dst.st_dev = v27;
    *(timespec *)&__dst.st_uid = v27;
    if (SHIBYTE(__p[2]) >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if (!stat((const char *)v28, &__dst) && difftime(v56, __dst.st_ctimespec.tv_sec) >= v6)
    {
LABEL_47:
      v31.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v31.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blksize = v31;
      *(timespec *)__dst.st_qspare = v31;
      __dst.st_birthtimespec = v31;
      *(timespec *)&__dst.st_size = v31;
      __dst.st_mtimespec = v31;
      __dst.st_ctimespec = v31;
      __dst.st_atimespec = v31;
      *(timespec *)&__dst.st_dev = v31;
      *(timespec *)&__dst.st_uid = v31;
      if (SHIBYTE(__p[2]) >= 0)
        v32 = __p;
      else
        v32 = (void **)__p[0];
      if (stat((const char *)v32, &__dst)
        || (SHIBYTE(__p[2]) >= 0 ? (v36 = __p) : (v36 = (void **)__p[0]),
            (v37 = opendir((const char *)v36), (v38 = v37) == 0) || (v39 = readdir(v37), closedir(v38), !v39)))
      {
        if (SHIBYTE(__p[2]) >= 0)
          v34 = (const std::__fs::filesystem::path *)__p;
        else
          v34 = (const std::__fs::filesystem::path *)__p[0];
        if (!remove(v34, v33)
          || (SHIBYTE(__p[2]) >= 0 ? (v35 = __p) : (v35 = (void **)__p[0]), !unlink((const char *)v35)))
        {
LABEL_89:
          v30 = 0;
          v57 = 1;
          v29 = 1;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
            goto LABEL_91;
          goto LABEL_90;
        }
        goto LABEL_59;
      }
      v40 = v3[23];
      if (v40 >= 0)
        v41 = *((unsigned __int8 *)v3 + 23);
      else
        v41 = *((_QWORD *)v3 + 1);
      v42 = v41 + 1;
      memset(&v59, 170, sizeof(v59));
      if (v41 + 1 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v42 >= 0x17)
      {
        v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17)
          v44 = v42 | 7;
        v45 = v44 + 1;
        v43 = (char *)operator new(v44 + 1);
        v59.__r_.__value_.__l.__size_ = v41 + 1;
        v59.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
        v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      }
      else
      {
        memset(&v59, 0, sizeof(v59));
        v43 = (char *)&v59;
        *((_BYTE *)&v59.__r_.__value_.__s + 23) = v41 + 1;
        if (!v41)
          goto LABEL_80;
      }
      if (v40 >= 0)
        v46 = v3;
      else
        v46 = *(const char **)v3;
      memmove(v43, v46, v41);
LABEL_80:
      *(_WORD *)&v43[v41] = 47;
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = &v61;
      else
        v47 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      else
        size = v61.__r_.__value_.__l.__size_;
      v49 = std::string::append(&v59, (const std::string::value_type *)v47, size);
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      *(_QWORD *)&__dst.st_uid = *((_QWORD *)&v49->__r_.__value_.__l + 2);
      *(_OWORD *)&__dst.st_dev = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      v51 = support::fs::removeDir((const char *)&__dst);
      if (SHIBYTE(__dst.st_gid) < 0)
      {
        operator delete(*(void **)&__dst.st_dev);
        if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_88;
      }
      else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_88:
        if ((v51 & 1) != 0)
          goto LABEL_89;
LABEL_59:
        v57 = 0;
        v29 = 0;
        v30 = 2;
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          goto LABEL_91;
        goto LABEL_90;
      }
      operator delete(v59.__r_.__value_.__l.__data_);
      if ((v51 & 1) != 0)
        goto LABEL_89;
      goto LABEL_59;
    }
    v29 = 0;
    v30 = 3;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_91;
LABEL_90:
    operator delete(__p[0]);
LABEL_91:
    if ((v29 & 1) != 0)
      goto LABEL_95;
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_93;
LABEL_96:
    operator delete(v61.__r_.__value_.__l.__data_);
    if (v30 != 3)
      goto LABEL_97;
LABEL_3:
    v5 += 3;
    if (v5 == v4)
      goto LABEL_102;
  }
  v11 = (std::string *)v61.__r_.__value_.__r.__words[0];
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v61;
  if (LOWORD(v11->__r_.__value_.__l.__data_) != 11822)
    goto LABEL_19;
LABEL_95:
  v30 = 0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_96;
LABEL_93:
  if (v30 == 3)
    goto LABEL_3;
LABEL_97:
  if (!v30)
    goto LABEL_3;
LABEL_102:
  v5 = (void **)v62;
  v52 = v57;
  if (!v62)
    return v52 & 1;
LABEL_105:
  v53 = v63;
  v54 = v5;
  if (v63 != v5)
  {
    do
    {
      if (*((char *)v53 - 1) < 0)
        operator delete(*(v53 - 3));
      v53 -= 3;
    }
    while (v53 != v5);
    v54 = v62;
  }
  v63 = v5;
  operator delete(v54);
  return v52 & 1;
}

void sub_227A742F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  std::vector<std::string>::~vector[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

BOOL support::fs::getFilteredFiles(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  DIR *v7;
  DIR *v8;
  dirent *v9;
  char *d_name;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  std::string::size_type v19;
  _BYTE *v20;
  _WORD *v21;
  DIR *v22;
  uint64_t v23;
  uint64_t v24;
  timespec v25;
  int v26;
  size_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  const std::string::value_type *v33;
  std::string *v34;
  __int128 v35;
  void **v36;
  std::sub_match<const char *> *v37;
  std::sub_match<std::__wrap_iter<const char *>> *v38;
  __int128 v39;
  int v40;
  int v41;
  unint64_t v42;
  __int128 v43;
  std::string *v44;
  unsigned __int8 v45;
  NSObject *v46;
  _BOOL8 result;
  int *v48;
  char *v49;
  char v50;
  const char *v52;
  std::string v53;
  _BYTE __dst[24];
  void *__p[2];
  _QWORD v56[9];
  __int128 v57;
  uint64_t v58;
  stat v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *__error() = 0;
  if (a1[23] < 0)
  {
    v7 = opendir(*(const char **)a1);
    if (v7)
      goto LABEL_3;
  }
  else
  {
    v7 = opendir(a1);
    if (v7)
    {
LABEL_3:
      v8 = v7;
      v9 = readdir(v7);
      if (v9)
      {
        v52 = a1;
        v50 = 0;
        while (1)
        {
          d_name = v9->d_name;
          memset(__dst, 170, sizeof(__dst));
          v11 = strlen(v9->d_name);
          if (v11 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v12 = v11;
          if (v11 >= 0x17)
            break;
          __dst[23] = v11;
          v13 = __dst;
          if (v11)
            goto LABEL_12;
LABEL_13:
          v13[v12] = 0;
          v16 = __dst[23];
          v17 = __dst[23];
          v18 = *(_QWORD *)&__dst[8];
          if (__dst[23] >= 0)
            v19 = __dst[23];
          else
            v19 = *(_QWORD *)&__dst[8];
          if (v19 == 2)
          {
            v21 = *(_WORD **)__dst;
            if (__dst[23] >= 0)
              v21 = __dst;
            if (*v21 == 11822)
              goto LABEL_73;
          }
          else if (v19 == 1)
          {
            v20 = *(_BYTE **)__dst;
            if (__dst[23] >= 0)
              v20 = __dst;
            if (*v20 == 46)
              goto LABEL_73;
          }
          if ((a4 & 1) != 0)
            goto LABEL_53;
          v22 = v8;
          v23 = a4;
          v24 = a3;
          v25.tv_sec = 0xAAAAAAAAAAAAAAAALL;
          v25.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
          *(timespec *)&v59.st_blksize = v25;
          *(timespec *)v59.st_qspare = v25;
          v59.st_birthtimespec = v25;
          *(timespec *)&v59.st_size = v25;
          v59.st_mtimespec = v25;
          v59.st_ctimespec = v25;
          *(timespec *)&v59.st_uid = v25;
          v59.st_atimespec = v25;
          *(timespec *)&v59.st_dev = v25;
          v26 = v52[23];
          if (v26 >= 0)
            v27 = *((unsigned __int8 *)v52 + 23);
          else
            v27 = *((_QWORD *)v52 + 1);
          v28 = v27 + 1;
          memset(&v53, 170, sizeof(v53));
          if (v27 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v28 >= 0x17)
          {
            v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v28 | 7) != 0x17)
              v30 = v28 | 7;
            v31 = v30 + 1;
            v29 = (char *)operator new(v30 + 1);
            v53.__r_.__value_.__l.__size_ = v27 + 1;
            v53.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
            v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
          }
          else
          {
            memset(&v53, 0, sizeof(v53));
            v29 = (char *)&v53;
            *((_BYTE *)&v53.__r_.__value_.__s + 23) = v27 + 1;
            if (!v27)
              goto LABEL_40;
          }
          if (v26 >= 0)
            v32 = v52;
          else
            v32 = *(const char **)v52;
          memmove(v29, v32, v27);
LABEL_40:
          a3 = v24;
          *(_WORD *)&v29[v27] = 47;
          if (v17 >= 0)
            v33 = __dst;
          else
            v33 = *(const std::string::value_type **)__dst;
          v34 = std::string::append(&v53, v33, v19);
          a4 = v23;
          v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v56[0] = *((_QWORD *)&v34->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          if (v56[0] >= 0)
            v36 = __p;
          else
            v36 = (void **)__p[0];
          lstat((const char *)v36, &v59);
          v8 = v22;
          if (SHIBYTE(v56[0]) < 0)
          {
            operator delete(__p[0]);
            if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_48:
              if ((v59.st_mode & 0xF000) != 0xA000)
                goto LABEL_52;
              goto LABEL_73;
            }
          }
          else if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_48;
          }
          operator delete(v53.__r_.__value_.__l.__data_);
          if ((v59.st_mode & 0xF000) != 0xA000)
          {
LABEL_52:
            v16 = __dst[23];
            v18 = *(_QWORD *)&__dst[8];
            LOBYTE(v17) = __dst[23];
LABEL_53:
            if ((v17 & 0x80u) == 0)
              v37 = (std::sub_match<const char *> *)__dst;
            else
              v37 = *(std::sub_match<const char *> **)__dst;
            if ((v17 & 0x80u) != 0)
              v16 = v18;
            v38 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v37 + v16);
            *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v57 = v39;
            v56[6] = 0xAAAAAAAAAAAAAA00;
            v56[3] = 0xAAAAAAAAAAAAAAAALL;
            v56[4] = 0;
            v56[5] = 0;
            v56[7] = 0;
            v56[8] = 0;
            LOBYTE(v57) = 0;
            BYTE8(v57) = 0;
            v58 = 0;
            *(_OWORD *)__p = 0u;
            memset(v56, 0, 25);
            *(_OWORD *)&v59.st_birthtimespec.tv_nsec = v39;
            v59.st_ctimespec.tv_sec = 0xAAAAAAAAAAAAAAAALL;
            v59.st_atimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
            memset(&v59.st_mtimespec, 0, 17);
            memset(&v59.st_ctimespec.tv_nsec, 0, 17);
            LOBYTE(v59.st_size) = 0;
            v59.st_blocks = 0;
            memset(&v59, 0, 41);
            v40 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a2, v37, (std::sub_match<const char *> *)((char *)v37 + v16), (std::vector<std::csub_match> *)&v59, 4160);
            std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v37, v38, (uint64_t *)&v59.st_dev, 0);
            if (*(_QWORD *)&v59.st_dev)
            {
              v59.st_ino = *(_QWORD *)&v59.st_dev;
              operator delete(*(void **)&v59.st_dev);
            }
            if ((_BYTE)v57)
              v41 = v40 ^ 1;
            else
              v41 = 1;
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if ((v40 & v41) != 0)
            {
              v42 = *(_QWORD *)(a3 + 8);
              if (v42 >= *(_QWORD *)(a3 + 16))
              {
                v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)__dst);
              }
              else
              {
                if ((__dst[23] & 0x80000000) != 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(a3 + 8), *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
                }
                else
                {
                  v43 = *(_OWORD *)__dst;
                  *(_QWORD *)(v42 + 16) = *(_QWORD *)&__dst[16];
                  *(_OWORD *)v42 = v43;
                }
                v44 = (std::string *)(v42 + 24);
                *(_QWORD *)(a3 + 8) = v42 + 24;
              }
              *(_QWORD *)(a3 + 8) = v44;
              v50 = 1;
            }
          }
LABEL_73:
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          v9 = readdir(v8);
          if (!v9)
            goto LABEL_85;
        }
        v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v14 = v11 | 7;
        v15 = v14 + 1;
        v13 = operator new(v14 + 1);
        *(_QWORD *)&__dst[8] = v12;
        *(_QWORD *)&__dst[16] = v15 | 0x8000000000000000;
        *(_QWORD *)__dst = v13;
LABEL_12:
        memmove(v13, d_name, v12);
        goto LABEL_13;
      }
      v50 = 0;
LABEL_85:
      closedir(v8);
      return v50 & 1;
    }
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_253DF25A0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_227A72000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v46 = qword_253DF25A0;
    result = os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_0);
    v46 = qword_253DF25A0;
    result = os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v48 = __error();
  v49 = strerror(*v48);
  v59.st_dev = 136315394;
  *(_QWORD *)&v59.st_mode = a1;
  WORD2(v59.st_ino) = 2080;
  *(__darwin_ino64_t *)((char *)&v59.st_ino + 6) = (__darwin_ino64_t)v49;
  _os_log_error_impl(&dword_227A72000, v46, OS_LOG_TYPE_ERROR, "Error %s (%s)\n", (uint8_t *)&v59, 0x16u);
  return 0;
}

void sub_227A749CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  uint64_t v49;
  uint64_t v50;

  *(_QWORD *)(v49 + 8) = v50;
  if (a30 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *support::fs::readCurrentLine@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  std::locale v9[16];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::istream::tellg();
  v4 = v10;
  if (v10 >= 2)
  {
    do
    {
      std::istream::seekg();
      if (std::istream::peek() == 10)
        break;
    }
    while (v4-- > 1);
  }
  std::istream::seekg();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v6 = std::locale::use_facet(v9, MEMORY[0x24BEDB350]);
  v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(v9);
  return std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)a2, v7);
}

void sub_227A74B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void sub_227A74B7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24F031588, MEMORY[0x24BEDAAF0]);
}

void sub_227A74BF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  void **v14;
  std::string *v16;
  std::string *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    v11 = v10 + 1;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((_QWORD *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_227A74EB0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24F031590, MEMORY[0x24BEDAB00]);
}

void sub_227A74F8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

uint64_t std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

_QWORD *std::string::__assign_no_alias<true>(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      std::string::__throw_length_error[abi:ne180100]();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v13;
  uint64_t v14;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
    goto LABEL_12;
  }
  v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = v7 - 1;
  v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2)
      goto LABEL_7;
LABEL_14:
    v13 = 2 * v10;
    if (__len > 2 * v10)
      v13 = __len;
    v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v14 = v13 | 7;
    if (v13 >= 0x17)
      v9 = v14 + 1;
    else
      v9 = 23;
    v8 = operator new(v9);
    if (!__len)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2)
    goto LABEL_14;
LABEL_7:
  v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len)
LABEL_8:
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22)
    operator delete(v11);
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1, char *a2, int a3)
{
  const std::locale *v6;
  size_t v7;

  v6 = (const std::locale *)MEMORY[0x22E2A4798]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x24BEDB350]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x24BEDB4B0]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(a1, a2, &a2[v7]) != (std::basic_regex<char> *)&a2[v7])
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_227A752D0(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_227A752EC(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v15;
  std::basic_regex<char> *v16;
  std::__owns_one_state<char> *v17;
  int v18;
  std::basic_regex<char> *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  std::basic_regex<char> *v30;
  char *v31;
  std::__owns_one_state<char> *v32;
  int v33;
  std::basic_regex<char> *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = operator new(8uLL);
  *v6 = &unk_24F031B38;
  v7 = operator new(0x10uLL);
  v7[1] = v6;
  v8 = operator new(0x20uLL);
  *v8 = &unk_24F031B90;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v12 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 56) = v12;
      v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if (v13 <= 0x3F)
        goto LABEL_6;
LABEL_11:
      if (v13 != 64)
      {
        if (v13 == 128)
          return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(a1, a2, a3);
        if (v13 == 256)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
LABEL_38:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    }
  }
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 > 0x3F)
    goto LABEL_11;
LABEL_6:
  if (v13)
  {
    if (v13 == 16)
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, a3);
    if (v13 != 32)
      goto LABEL_38;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  }
  v15 = a2;
  while (1)
  {
    v16 = (std::basic_regex<char> *)v15;
    v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v15, a3);
    if (v15 == (char *)v16)
      break;
LABEL_17:
    if (v15 == (char *)v16)
      goto LABEL_23;
  }
  v17 = *(std::__owns_one_state<char> **)(a1 + 56);
  v18 = *(_DWORD *)(a1 + 28);
  v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v16, (std::basic_regex<char> *)a3);
  if (v19 != v16)
  {
    v15 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v19, (std::basic_regex<char> *)a3, v17, (v18 + 1), (*(_DWORD *)(a1 + 28) + 1));
    goto LABEL_17;
  }
LABEL_23:
  if (v16 == (std::basic_regex<char> *)a2)
  {
    v20 = operator new(0x10uLL);
    v21 = *(_QWORD *)(a1 + 56);
    v22 = *(_QWORD *)(v21 + 8);
    v20[1] = v22;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v16 == (std::basic_regex<char> *)a3)
    return (std::basic_regex<char> *)a3;
  while (2)
  {
    if (LOBYTE(v16->__traits_.__loc_.__locale_) != 124)
      return v16;
    v29 = *(_QWORD *)(a1 + 56);
    v30 = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
    v31 = (char *)&v16->__traits_.__loc_.__locale_ + 1;
    while (2)
    {
      v16 = (std::basic_regex<char> *)v31;
      v31 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v31, a3);
      if (v31 != (char *)v16)
      {
LABEL_32:
        if (v31 == (char *)v16)
          goto LABEL_27;
        continue;
      }
      break;
    }
    v32 = *(std::__owns_one_state<char> **)(a1 + 56);
    v33 = *(_DWORD *)(a1 + 28);
    v34 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v16, (std::basic_regex<char> *)a3);
    if (v34 != v16)
    {
      v31 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v34, (std::basic_regex<char> *)a3, v32, (v33 + 1), (*(_DWORD *)(a1 + 28) + 1));
      goto LABEL_32;
    }
LABEL_27:
    if (v16 == v30)
    {
      v35 = operator new(0x10uLL);
      v36 = *(_QWORD *)(a1 + 56);
      v37 = *(_QWORD *)(v36 + 8);
      v35[1] = v37;
      *(_QWORD *)(v36 + 8) = v35;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    v23 = operator new(0x18uLL);
    v24 = *(_QWORD *)(v29 + 8);
    v23[1] = *(_QWORD *)(v12 + 8);
    v23[2] = v24;
    *v23 = &unk_24F032150;
    *(_QWORD *)(v12 + 8) = v23;
    *(_QWORD *)(v29 + 8) = 0;
    v25 = operator new(0x10uLL);
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v25[1] = v26;
    *(_QWORD *)(v29 + 8) = v25;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v27 = operator new(0x10uLL);
    v28 = *(_QWORD *)(v29 + 8);
    *v27 = &unk_24F032198;
    v27[1] = v28;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v27;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v29 + 8);
    if (v16 != (std::basic_regex<char> *)a3)
      continue;
    return (std::basic_regex<char> *)a3;
  }
}

void sub_227A75700(_Unwind_Exception *a1)
{
  void *v1;
  void (__cdecl ***v2)(std::__owns_one_state<char> *__hidden);

  operator delete(v1);
  operator delete(v2);
  (*(void (**)(void *))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_227A7573C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2A460C](exception, 17);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_227A7578C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  std::basic_regex<char> *v8;
  std::__owns_one_state<char> *v9;
  unsigned int marked_count;
  std::basic_regex<char> *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;
  std::__node<char> *v20;
  std::__owns_one_state<char> *v21;
  std::basic_regex<char> *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  std::basic_regex<char> *v26;
  std::__node<char> *v27;
  std::__owns_one_state<char> *v28;
  std::__node<char> *v29;

  end = a1->__end_;
  v7 = a2;
  while (1)
  {
    v8 = (std::basic_regex<char> *)v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v7, a3);
    if (v7 == (char *)v8)
      break;
LABEL_2:
    if (v7 == (char *)v8)
      goto LABEL_6;
  }
  v9 = a1->__end_;
  marked_count = a1->__marked_count_;
  v11 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
  if (v11 != v8)
  {
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == (std::basic_regex<char> *)a2)
  {
    v12 = (std::__node<char> *)operator new(0x10uLL);
    v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 == (std::basic_regex<char> *)a3)
    return a3;
  while (2)
  {
    if (LOBYTE(v8->__traits_.__loc_.__locale_) != 124)
      return (char *)v8;
    v21 = a1->__end_;
    v22 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v23 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (2)
    {
      v8 = (std::basic_regex<char> *)v23;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v23, a3);
      if (v23 != (char *)v8)
      {
LABEL_14:
        if (v23 == (char *)v8)
          goto LABEL_17;
        continue;
      }
      break;
    }
    v24 = a1->__end_;
    v25 = a1->__marked_count_;
    v26 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
    if (v26 != v8)
    {
      v23 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v26, (std::basic_regex<char> *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
      goto LABEL_14;
    }
LABEL_17:
    if (v8 == v22)
    {
      v27 = (std::__node<char> *)operator new(0x10uLL);
      v28 = a1->__end_;
      v29 = v28->__first_;
      v27[1].__vftable = (std::__node<char>_vtbl *)v29;
      v28->__first_ = v27;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    v15 = (std::__node<char> *)operator new(0x18uLL);
    v16 = v21->__first_;
    v15[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
    v15[2].__vftable = (std::__node<char>_vtbl *)v16;
    v15->__vftable = (std::__node<char>_vtbl *)&unk_24F032150;
    end->__first_ = v15;
    v21->__first_ = 0;
    v17 = (std::__node<char> *)operator new(0x10uLL);
    v18 = a1->__end_->__first_;
    v17[1].__vftable = (std::__node<char>_vtbl *)v18;
    v21->__first_ = v17;
    a1->__end_->__first_ = 0;
    v19 = (std::__node<char> *)operator new(0x10uLL);
    v20 = v21->__first_;
    v19->__vftable = (std::__node<char>_vtbl *)&unk_24F032198;
    v19[1].__vftable = (std::__node<char>_vtbl *)v20;
    a1->__end_->__first_ = v19;
    a1->__end_ = (std::__owns_one_state<char> *)v21->__first_;
    if (v8 != (std::basic_regex<char> *)a3)
      continue;
    return a3;
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  std::basic_regex<char> *v3;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::__owns_one_state<char> *v11;
  int v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3)
    return a2;
  if (*a2 == 94)
  {
    v6 = operator new(0x18uLL);
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v6 = &unk_24F031C88;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      v10 = v3;
      v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, (uint64_t)v10, a3);
      if (v13 != (char *)v10)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v3 != v10)
          continue;
      }
      if ((char *)&v10->__traits_.__loc_.__locale_ + 1 != a3 || LOBYTE(v10->__traits_.__loc_.__locale_) != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v14 = operator new(0x18uLL);
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *v14 = &unk_24F031CD0;
      v14[1] = v17;
      *((_BYTE *)v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::basic_regex<char> *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_13;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v7, v3);
  }
  while (v7 != v8);
  if (v8 == a2)
LABEL_13:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 != v3)
  {
    while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
    {
      v9 = *(_QWORD *)(a1 + 56);
      v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), v3);
      if (v11 == (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1))
        goto LABEL_13;
      do
      {
        v8 = v11;
        v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v11, v3);
      }
      while (v11 != v8);
      if (v8 == v10)
        goto LABEL_13;
      v12 = operator new(0x18uLL);
      v13 = *(_QWORD *)(v9 + 8);
      v12[1] = *(_QWORD *)(v6 + 8);
      v12[2] = v13;
      *v12 = &unk_24F032150;
      *(_QWORD *)(v6 + 8) = v12;
      *(_QWORD *)(v9 + 8) = 0;
      v14 = operator new(0x10uLL);
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v14[1] = v15;
      *(_QWORD *)(v9 + 8) = v14;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
      v16 = operator new(0x10uLL);
      v17 = *(_QWORD *)(v9 + 8);
      *v16 = &unk_24F032198;
      v16[1] = v17;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
      if (v8 == v3)
        return v3;
    }
    return v8;
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = operator new(0x10uLL);
    v11 = *(_QWORD *)(v6 + 8);
    v10[1] = v11;
    *(_QWORD *)(v6 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (char *)memchr(v9, 10, a3 - v9);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v9)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v9, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_24F032150;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_24F032198;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v9 = v22;
    else
      v9 = v22 + 1;
  }
  while (v9 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::basic_regex<char> *v21;
  std::basic_regex<char> *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = operator new(0x10uLL);
    v11 = *(_QWORD *)(v6 + 8);
    v10[1] = v11;
    *(_QWORD *)(v6 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v9 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v9 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (std::basic_regex<char> *)memchr(v9, 10, (char *)a3 - (char *)v9);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v9)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v9, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_24F032150;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_24F032198;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v9 = v22;
    else
      v9 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
  }
  while (v9 != a3);
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2A460C](exception, 14);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_227A76088(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000227B189D1)
    return a1 + 24;
  if (((v3 & 0x8000000227B189D1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000227B189D1))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000227B189D1 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  operator delete(this);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  BOOL v8;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v20;
  __int128 v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  unsigned int marked_count;
  std::basic_regex<char> v27;

  if (a2 == a3)
    return a2;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v15 = a2[1];
        if (v15 == 66)
        {
          v16 = (char *)operator new(0x30uLL);
          v24 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_24F031D18;
          *((_QWORD *)v16 + 1) = v24;
          std::locale::locale((std::locale *)v16 + 2, (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          v16[40] = 1;
        }
        else
        {
          if (v15 != 98)
            return a2;
          v16 = (char *)operator new(0x30uLL);
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_24F031D18;
          *((_QWORD *)v16 + 1) = v17;
          std::locale::locale((std::locale *)v16 + 2, (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          v16[40] = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return a2 + 2;
      }
      return a2;
    }
    if (v6 != 94)
      return a2;
    v10 = operator new(0x18uLL);
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
LABEL_14:
    *v10 = v14 + 16;
    v10[1] = v13;
    *((_BYTE *)v10 + 16) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v10 = operator new(0x18uLL);
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    goto LABEL_14;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (v8)
    return a2;
  v8 = *v7 == 63;
  v18 = a2 + 2;
  if (!v8 || v18 == a3)
    return a2;
  v20 = *v18;
  if (v20 == 33)
  {
    *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v27.__loop_count_ = v25;
    *(_OWORD *)&v27.__start_.__cntrl_ = v25;
    *(_OWORD *)&v27.__traits_.__loc_.__locale_ = v25;
    *(_OWORD *)&v27.__traits_.__col_ = v25;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v27);
    v27.__flags_ = *(_DWORD *)(a1 + 24);
    v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v27, a2 + 3, a3);
    marked_count = v27.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v27, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v22 == a3 || *v22 != 41)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    goto LABEL_32;
  }
  if (v20 != 61)
    return a2;
  *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v27.__loop_count_ = v21;
  *(_OWORD *)&v27.__start_.__cntrl_ = v21;
  *(_OWORD *)&v27.__traits_.__loc_.__locale_ = v21;
  *(_OWORD *)&v27.__traits_.__col_ = v21;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v27);
  v27.__flags_ = *(_DWORD *)(a1 + 24);
  v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v27, a2 + 3, a3);
  v23 = v27.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v27, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v23;
  if (v22 == a3 || *v22 != 41)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_32:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v27.__traits_.__loc_);
  return v22 + 1;
}

void sub_227A76588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_227A7659C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_227A765B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_227A765C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  int *p_open_count;
  char *v7;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v12;
  unsigned int marked_count;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *v19;

  v3 = a2;
  if (a2 != a3)
  {
    switch(LOBYTE(a2->__traits_.__loc_.__locale_))
    {
      case '(':
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3)
          goto LABEL_26;
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
          && BYTE1(a2->__traits_.__loc_.__locale_) == 63
          && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, (char *)a3);
          if (v7 == (char *)a3)
            goto LABEL_26;
          v3 = (std::basic_regex<char> *)v7;
          if (*v7 != 41)
            goto LABEL_26;
        }
        else
        {
          if ((this->__flags_ & 2) != 0)
          {
            marked_count = this->__marked_count_;
          }
          else
          {
            v12 = (std::__node<char> *)operator new(0x18uLL);
            marked_count = this->__marked_count_ + 1;
            this->__marked_count_ = marked_count;
            end = this->__end_;
            first = end->__first_;
            v12->__vftable = (std::__node<char>_vtbl *)&unk_24F031FE8;
            v12[1].__vftable = (std::__node<char>_vtbl *)first;
            LODWORD(v12[2].__vftable) = marked_count;
            end->__first_ = v12;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, (char *)a3);
          if (v16 == (char *)a3 || (v3 = (std::basic_regex<char> *)v16, *v16 != 41))
LABEL_26:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          if ((this->__flags_ & 2) == 0)
          {
            v17 = (std::__node<char> *)operator new(0x18uLL);
            v18 = this->__end_;
            v19 = v18->__first_;
            v17->__vftable = (std::__node<char>_vtbl *)&unk_24F032030;
            v17[1].__vftable = (std::__node<char>_vtbl *)v19;
            LODWORD(v17[2].__vftable) = marked_count;
            v18->__first_ = v17;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
        }
        --*p_open_count;
LABEL_23:
        v3 = (std::basic_regex<char> *)((char *)v3 + 1);
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
      case '*':
      case '+':
      case '?':
        goto LABEL_25;
      case '.':
        v8 = (std::__node<char> *)operator new(0x10uLL);
        v9 = this->__end_;
        v10 = v9->__first_;
        v8->__vftable = (std::__node<char>_vtbl *)&unk_24F031DA8;
        v8[1].__vftable = (std::__node<char>_vtbl *)v10;
        v9->__first_ = v8;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_23;
      case '[':
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      case '\\':
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123)
LABEL_25:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v6;
  int locale_low;
  std::basic_regex<char> *v8;
  char *v9;
  size_t v10;
  char *v11;
  int v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  std::basic_regex<char> *v17;
  unsigned __int8 *v18;
  BOOL v20;
  std::basic_regex<char> *v21;
  BOOL v22;
  char *v23;
  size_t v24;
  std::basic_regex<char> *v25;
  int v26;
  int v27;
  std::basic_regex<char> *v28;
  int v29;
  std::basic_regex<char> *v30;
  _BYTE *v31;

  if (this == a3)
    return this;
  v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6)
        v20 = 1;
      else
        v20 = v8 == a3;
      if (!v20 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v10 = 0;
        goto LABEL_35;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v24 = 0;
      goto LABEL_44;
    }
    if (locale_low == 43)
    {
      v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v10 = 1;
LABEL_35:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v10, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v9;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v24 = 1;
      goto LABEL_44;
    }
    return this;
  }
  if (locale_low == 63)
  {
    v21 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6)
      v22 = 1;
    else
      v22 = v21 == a3;
    if (v22 || LOBYTE(v21->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v21;
    }
    else
    {
      v23 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v23;
    }
  }
  else
  {
    if (locale_low != 123)
      return this;
    v11 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_71;
    v12 = *v11;
    if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38)
      goto LABEL_71;
    v13 = v12 - 48;
    v14 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_19:
      v14 = (char *)a3;
    }
    else
    {
      while (1)
      {
        v15 = *v14;
        if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
          break;
        if (v13 >= 214748364)
          goto LABEL_71;
        v13 = v15 + 10 * v13 - 48;
        if (++v14 == (char *)a3)
          goto LABEL_19;
      }
    }
    if (v14 == v11)
      goto LABEL_71;
    if (v14 == (char *)a3)
      goto LABEL_72;
    v16 = *v14;
    if (v16 != 44)
    {
      if (v16 == 125)
      {
        v17 = (std::basic_regex<char> *)(v14 + 1);
        if (v6 || v17 == a3 || LOBYTE(v17->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 1);
          return v17;
        }
        else
        {
          v18 = (unsigned __int8 *)(v14 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v18;
        }
      }
LABEL_71:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    v25 = (std::basic_regex<char> *)(v14 + 1);
    if (v14 + 1 == (char *)a3)
      goto LABEL_71;
    v26 = LOBYTE(v25->__traits_.__loc_.__locale_);
    if (v26 == 125)
    {
      v8 = (std::basic_regex<char> *)(v14 + 2);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v10 = v13;
        v9 = v14 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        goto LABEL_35;
      }
      v24 = v13;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
LABEL_44:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v24, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v8;
    }
    if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38)
      goto LABEL_72;
    v27 = v26 - 48;
    v28 = (std::basic_regex<char> *)(v14 + 2);
    if (v28 == a3)
    {
LABEL_60:
      v28 = a3;
    }
    else
    {
      while (1)
      {
        v29 = LOBYTE(v28->__traits_.__loc_.__locale_);
        if ((v29 & 0xF8) != 0x30 && (v29 & 0xFE) != 0x38)
          break;
        if (v27 >= 214748364)
          goto LABEL_71;
        v27 = v29 + 10 * v27 - 48;
        v28 = (std::basic_regex<char> *)((char *)v28 + 1);
        if (v28 == a3)
          goto LABEL_60;
      }
    }
    if (v28 == v25 || v28 == a3 || LOBYTE(v28->__traits_.__loc_.__locale_) != 125)
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v27 < v13)
      goto LABEL_71;
    v30 = (std::basic_regex<char> *)((char *)&v28->__traits_.__loc_.__locale_ + 1);
    if (v6 || v30 == a3 || LOBYTE(v30->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 1);
      return v30;
    }
    else
    {
      v31 = (char *)&v28->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v31;
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x22E2A4798]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x24BEDB350]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x24BEDB4B0]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_227A76C70(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  char *v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = (char *)operator new(0x58uLL);
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &unk_24F031D60;
  *((_QWORD *)v8 + 1) = first;
  std::locale::locale((std::locale *)v8 + 2, &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *((_QWORD *)v8 + 7) = a2->__start_.__ptr_;
  *((_QWORD *)v8 + 8) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *((_QWORD *)v8 + 9) = a2->__end_;
  *((_DWORD *)v8 + 20) = a4;
  v8[84] = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2A460C](exception, 6);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_227A76D74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a2 + 92))
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
    return result;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8) && (*(_BYTE *)(a2 + 88) & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F031D18;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F031D18;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_19;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          v6 = *v2;
          if (v6 == 95)
            goto LABEL_17;
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    v7 = *(v4 - 1);
    v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      v9 = 1;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    else
    {
      v9 = 0;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(_BYTE *)(result + 40) == (v9 != 0))
        goto LABEL_20;
      goto LABEL_27;
    }
LABEL_24:
    if (*(_BYTE *)(result + 40) != (v9 != 1))
      goto LABEL_27;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(a2 + 88) & 8) == 0)
  {
    v6 = *(v3 - 1);
    if (v6 == 95)
      goto LABEL_17;
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(_BYTE *)(result + 40) != 1)
        goto LABEL_27;
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(_QWORD *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(_BYTE *)(result + 40))
    goto LABEL_20;
LABEL_27:
  v10 = *(_QWORD *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void (__cdecl **v6)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24F031D60;
  v2 = (std::locale *)(a1 + 2);
  v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1];
  if (v6)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v6 + 1))(v6);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&unk_24F031D60;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  operator delete(a1);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::vector<std::csub_match>::size_type v5;
  uint64_t v6;
  const char *v7;
  BOOL v8;
  char v9;
  std::sub_match<const char *> *begin;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  std::sub_match<const char *> *v16;
  uint64_t v17;
  std::vector<std::csub_match> __p;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20 = 0xAAAAAAAAAAAAAAAALL;
  v22 = 0xAAAAAAAAAAAAAA00;
  v24 = v4;
  v21 = 0;
  v23 = 0uLL;
  LOBYTE(v24) = 0;
  BYTE8(v24) = 0;
  v25 = 0;
  memset(&__p, 0, sizeof(__p));
  v5 = (*(_DWORD *)(a1 + 44) + 1);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&v19 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)&v19 + 1) = v19;
  LOBYTE(v20) = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, (std::vector<std::csub_match>::const_reference)&v19);
  *((_QWORD *)&v20 + 1) = v6;
  v21 = v6;
  LOBYTE(v22) = 0;
  v23 = v19;
  LOBYTE(v24) = v20;
  v25 = v6;
  BYTE8(v24) = 1;
  v7 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v8 = v7 == *(const char **)(a2 + 8);
  else
    v8 = 0;
  v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v7, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 1;
  do
  {
    v16 = &begin[v15];
    v17 = v14 + 24 * (v13 + v12);
    *(std::pair<const char *, const char *> *)v17 = v16->std::pair<const char *, const char *>;
    *(_BYTE *)(v17 + 16) = v16->matched;
    v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_227A77408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  void *v25;
  void *v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  void *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  _BYTE v45[96];
  std::vector<std::csub_match>::value_type __x;
  char *v47;
  char *v48;
  unint64_t v49;

  v47 = 0;
  v48 = 0;
  v49 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.second = a3;
    *(_QWORD *)&__x.matched = 0xAAAAAAAAAAAAAA00;
    __x.first = a3;
    *(_DWORD *)v45 = 0;
    memset(&v45[8], 0, 85);
    v48 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v47, (uint64_t)v45);
    if (*(_QWORD *)&v45[56])
    {
      *(_QWORD *)&v45[64] = *(_QWORD *)&v45[56];
      operator delete(*(void **)&v45[56]);
    }
    if (*(_QWORD *)&v45[32])
    {
      *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
      operator delete(*(void **)&v45[32]);
    }
    v13 = v48;
    *((_DWORD *)v48 - 24) = 0;
    *((_QWORD *)v13 - 11) = a2;
    *((_QWORD *)v13 - 10) = a2;
    *((_QWORD *)v13 - 9) = a3;
    v14 = *((_QWORD *)v13 - 8);
    v15 = *(unsigned int *)(a1 + 28);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v13 - 7) - v14) >> 3);
    if (v15 <= v16)
    {
      if (v15 < v16)
        *((_QWORD *)v13 - 7) = v14 + 24 * v15;
    }
    else
    {
      std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
      v13 = v48;
    }
    v17 = *((_QWORD *)v13 - 5);
    v18 = *(unsigned int *)(a1 + 32);
    v19 = (*((_QWORD *)v13 - 4) - v17) >> 4;
    if (v18 <= v19)
    {
      if (v18 < v19)
        *((_QWORD *)v13 - 4) = v17 + 16 * v18;
    }
    else
    {
      std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v18 - v19);
      v13 = v48;
    }
    *((_QWORD *)v13 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *(v13 - 4) = a6;
    v20 = 1;
    while (2)
    {
      if ((v20 & 0xFFF) == 0 && (int)(v20 >> 12) >= (int)a3 - (int)a2)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v22 = *((_QWORD *)v13 - 2);
      if (v22)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v13 - 96);
      switch(*((_DWORD *)v13 - 24))
      {
        case 0xFFFFFC18:
          v23 = (const char *)*((_QWORD *)v13 - 10);
          if ((a5 & 0x20) != 0 && v23 == a2 || (a5 & 0x1000) != 0 && v23 != a3)
            goto LABEL_26;
          v36 = *a4;
          *(_QWORD *)v36 = a2;
          *(_QWORD *)(v36 + 8) = v23;
          *(_BYTE *)(v36 + 16) = 1;
          v37 = *((_QWORD *)v13 - 8);
          v38 = *((_QWORD *)v13 - 7) - v37;
          if (v38)
          {
            v39 = 0xAAAAAAAAAAAAAAABLL * (v38 >> 3);
            v40 = (_BYTE *)(v37 + 16);
            v41 = 1;
            do
            {
              v42 = v36 + 24 * v41;
              *(_OWORD *)v42 = *((_OWORD *)v40 - 1);
              v43 = *v40;
              v40 += 24;
              *(_BYTE *)(v42 + 16) = v43;
            }
            while (v39 > v41++);
          }
          v6 = 1;
          v21 = v47;
          if (!v47)
            return v6;
          goto LABEL_37;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_16;
        case 0xFFFFFC1F:
LABEL_26:
          v24 = v48;
          v25 = (void *)*((_QWORD *)v48 - 5);
          if (v25)
          {
            *((_QWORD *)v48 - 4) = v25;
            operator delete(v25);
          }
          v26 = (void *)*((_QWORD *)v24 - 8);
          if (v26)
          {
            *((_QWORD *)v24 - 7) = v26;
            operator delete(v26);
          }
          v48 = v24 - 96;
          goto LABEL_16;
        case 0xFFFFFC20:
          *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v45[64] = v27;
          *(_OWORD *)&v45[80] = v27;
          *(_OWORD *)&v45[32] = v27;
          *(_OWORD *)&v45[48] = v27;
          *(_OWORD *)v45 = v27;
          *(_OWORD *)&v45[16] = v27;
          std::__state<char>::__state((uint64_t)v45, (__int128 *)v13 - 6);
          (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v13 - 2) + 24))(*((_QWORD *)v13 - 2), 1, v13 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v45[80] + 24))(*(_QWORD *)&v45[80], 0, v45);
          v28 = v48;
          if ((unint64_t)v48 >= v49)
          {
            v48 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v47, (uint64_t)v45);
            if (*(_QWORD *)&v45[56])
            {
              *(_QWORD *)&v45[64] = *(_QWORD *)&v45[56];
              operator delete(*(void **)&v45[56]);
            }
          }
          else
          {
            v29 = *(_OWORD *)&v45[16];
            *(_OWORD *)v48 = *(_OWORD *)v45;
            *((_OWORD *)v28 + 1) = v29;
            *((_QWORD *)v28 + 4) = 0;
            *((_QWORD *)v28 + 5) = 0;
            *((_QWORD *)v28 + 6) = 0;
            *((_QWORD *)v28 + 7) = 0;
            *((_OWORD *)v28 + 2) = *(_OWORD *)&v45[32];
            *((_QWORD *)v28 + 6) = *(_QWORD *)&v45[48];
            memset(&v45[32], 0, 24);
            *((_QWORD *)v28 + 8) = 0;
            *((_QWORD *)v28 + 9) = 0;
            *(_OWORD *)(v28 + 56) = *(_OWORD *)&v45[56];
            *((_QWORD *)v28 + 9) = *(_QWORD *)&v45[72];
            memset(&v45[56], 0, 24);
            v30 = *(_QWORD *)&v45[80];
            *(_QWORD *)(v28 + 85) = *(_QWORD *)&v45[85];
            *((_QWORD *)v28 + 10) = v30;
            v48 = v28 + 96;
          }
          if (*(_QWORD *)&v45[32])
          {
            *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
            operator delete(*(void **)&v45[32]);
          }
LABEL_16:
          v21 = v47;
          v13 = v48;
          ++v20;
          if (v47 != v48)
            continue;
          v6 = 0;
          if (v47)
          {
LABEL_37:
            v31 = v48;
            v32 = v21;
            if (v48 != v21)
            {
              do
              {
                v33 = (void *)*((_QWORD *)v31 - 5);
                if (v33)
                {
                  *((_QWORD *)v31 - 4) = v33;
                  operator delete(v33);
                }
                v34 = (void *)*((_QWORD *)v31 - 8);
                if (v34)
                {
                  *((_QWORD *)v31 - 7) = v34;
                  operator delete(v34);
                }
                v31 -= 96;
              }
              while (v31 != v21);
              v32 = v47;
            }
            v48 = v21;
            operator delete(v32);
          }
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  return v6;
}

void sub_227A77834(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_227A77848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::__state<char>::~__state((uint64_t *)va);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_227A77890(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_227A778A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  uint64_t v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::sub_match<const char *> *v14;
  std::vector<std::csub_match>::pointer end;
  unint64_t v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v10;
    v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    v13 = 24 * __n;
    v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v12->matched = *(_QWORD *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  end = this->__end_;
  v16 = end - begin;
  if (v16 >= __n)
    v17 = __n;
  else
    v17 = end - begin;
  if (v17)
  {
    v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  v19 = &end[__n - v16];
  v20 = 24 * __n - 24 * v16;
  do
  {
    v21 = __u->std::pair<const char *, const char *>;
    *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2A460C](exception, 12);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_227A77AC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2A460C](exception, 16);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_227A77B14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 8);
        if (v6)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v21 - 8);
      if (v23)
      {
        *((_QWORD *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::sub_match<const char *> *value;
  std::vector<std::csub_match>::pointer end;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::sub_match<const char *> *v13;
  std::vector<std::csub_match>::size_type v14;
  std::pair<const char *, const char *> v15;
  std::sub_match<const char *> *v16;
  std::vector<std::csub_match>::size_type v17;
  std::sub_match<const char *> *v18;
  std::pair<const char *, const char *> *v19;
  std::pair<const char *, const char *> v20;
  std::vector<std::csub_match>::pointer begin;
  std::pair<const char *, const char *> v22;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = &end[__n];
      v14 = 24 * __n;
      do
      {
        v15 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    v17 = 24 * __n;
    v18 = &v16[__n];
    v19 = v16;
    do
    {
      v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      *v19 = v20;
      v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v22 = end[-1].std::pair<const char *, const char *>;
        *(_QWORD *)&v16[-1].matched = *(_QWORD *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
      operator delete(end);
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::pair<unsigned long, const char *> *value;
  std::pair<unsigned long, const char *> *end;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12;
  std::pair<unsigned long, const char *> *v13;
  size_t v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((v7 + __n) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    v14 = __n;
    v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

uint64_t std::__state<char>::__state(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(_QWORD *)(a1 + 40) = &v9[v10];
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 7);
  v11 = (_BYTE *)*((_QWORD *)a2 + 8);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(_QWORD *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  v15 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)((char *)a2 + 85);
  *(_QWORD *)(a1 + 80) = v15;
  return a1;
}

void sub_227A78184(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  int v7;
  unsigned int v8;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v7 = *v5;
  v8 = v7 - 48;
  if (v7 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v8);
    return a2 + 2;
  }
  if ((v7 - 49) > 8)
    goto LABEL_18;
  v10 = a2 + 2;
  if (a2 + 2 == a3)
  {
    v10 = a3;
  }
  else
  {
    while (1)
    {
      v11 = *v10;
      if ((v11 - 48) > 9)
        break;
      if (v8 >= 0x19999999)
        goto LABEL_23;
      ++v10;
      v8 = v11 + 10 * v8 - 48;
      if (v10 == a3)
      {
        v10 = a3;
        break;
      }
    }
    if (!v8)
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v8 > this->__marked_count_)
    goto LABEL_23;
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v8);
  if (v10 == v5)
  {
LABEL_18:
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>((uint64_t)this, a2 + 1, a3);
    if (v10 == v5)
    {
      v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, a3, 0);
      if (v12 == v5)
        return a2;
      else
        return v12;
    }
  }
  return v10;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  void *v8;
  char *v9;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == a3)
      goto LABEL_20;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_20;
    do
    {
      v9 = v7;
      v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v7, a3, (uint64_t)v8);
    }
    while (v7 != v9);
    if (v9 == a3)
      goto LABEL_20;
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_227A7846C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2A460C](exception, 11);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_227A784B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *result;

  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2A460C](exception, 3);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_227A785FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  _DWORD *v5;
  _DWORD *v6;
  int v7;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v6;
        *(_QWORD *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_227A787E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_227A787F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_227A78808(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_227A7881C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_227A78830(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_227A78844(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  unsigned __int8 *result;
  unsigned __int8 v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  char v13;
  unsigned __int8 v14;
  char v15;
  std::basic_regex<char>::value_type v16;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3)
        goto LABEL_81;
      v8 = v4[1];
      if (((v8 & 0xDF) - 65) > 0x19u)
        goto LABEL_81;
      v9 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v9;
        *((_BYTE *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v9);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        v10 = v4[1];
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            v11 = *v4;
            if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
              goto LABEL_38;
          }
        }
      }
      goto LABEL_81;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        v6 = 11;
LABEL_65:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_38:
      if (v4 + 1 == a3)
        goto LABEL_81;
      v12 = v4[1];
      v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
        goto LABEL_43;
      v12 |= 0x20u;
      if ((v12 - 97) >= 6u)
        goto LABEL_81;
      v13 = -87;
LABEL_43:
      if (v4 + 2 == a3)
        goto LABEL_81;
      v14 = v4[2];
      v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u)
LABEL_81:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        v15 = -87;
      }
      v16 = v14 + 16 * (v12 + v13) + v15;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v16;
      *((_BYTE *)a4 + 1) = 0;
      result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0)
        goto LABEL_81;
      if (!a4)
        goto LABEL_65;
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v5;
      *((_BYTE *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  std::__node<char> *v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  char *v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (char *)operator new(0x30uLL);
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_24F031DF0;
    *((_QWORD *)v8 + 1) = first;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (char *)operator new(0x30uLL);
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_24F031E38;
    *((_QWORD *)v8 + 1) = v10;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = v2;
    goto LABEL_6;
  }
  v5 = (std::__node<char> *)operator new(0x18uLL);
  end = this->__end_;
  v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_24F031E80;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LOBYTE(v5[2].__vftable) = v2;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_227A78E20(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2A460C](exception, 4);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_227A78E98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  std::__node<char> *v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new(0x30uLL);
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new(0x30uLL);
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = (std::__node<char> *)operator new(0x18uLL);
  end = this->__end_;
  v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_24F031F58;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LODWORD(v5[2].__vftable) = __i;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F031DF0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F031DF0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v4 + 8);
  }
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F031E38;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F031E38;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F031EC8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F031EC8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(_BYTE *)(v3 + 16)
    || (v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3, v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  v6 = result;
  if (v4 >= 1)
  {
    v7 = 0;
    while (1)
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)v3 + v7));
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v7));
      if (v8 != (_DWORD)result)
        goto LABEL_3;
      if (v4 == ++v7)
      {
        v5 = *(_QWORD *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v5 + v4;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v6 + 8);
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F031F10;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F031F10;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(v3 + 24 * v2 + 16)
    || (v4 = (unsigned __int8 **)(v3 + 24 * v2),
        v5 = *v4,
        v6 = v4[1] - *v4,
        v7 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    v8 = v6;
    v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      v11 = *v5++;
      v10 = v11;
      v12 = *v9++;
      if (v10 != v12)
        goto LABEL_3;
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v7 + v6;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    *(_QWORD *)(a2 + 80) = *((_QWORD *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 40);
    v5 = *(_BYTE **)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 40) = v13;
        *(_QWORD *)(a1 + 48) = v15;
        *(_QWORD *)(a1 + 56) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 40);
  v7 = *(_BYTE **)(a1 + 40);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 48) = v15;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  std::string::size_type size;
  std::string *v14;
  BOOL v15;
  std::locale v17;
  std::string v18;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v17, v11);
  std::locale::name(&v18, &v17);
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v18;
    v15 = v14->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  else
  {
    v15 = 1;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v17);
  *(_BYTE *)(a1 + 171) = v15;
  return a1;
}

void sub_227A79C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  std::locale *v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v9 + 136));
  v14 = *(void **)(v9 + 112);
  if (v14)
  {
    *(_QWORD *)(v9 + 120) = v14;
    operator delete(v14);
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
    {
LABEL_3:
      v16 = *v12;
      if (!*v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v9 + 72) = v15;
  operator delete(v15);
  v16 = *v12;
  if (!*v12)
  {
LABEL_5:
    std::locale::~locale(v10);
    v17 = *(_QWORD *)(v9 + 8);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v9 + 48) = v16;
  operator delete(v16);
  goto LABEL_5;
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0)
LABEL_9:
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale *v1;

  v1 = std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);
  operator delete(v1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v2;
  char *current;
  char *last;
  char v6;
  char v7;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v14;
  char v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  void **v19;
  char v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  BOOL v24;
  uint64_t v25;
  _BOOL4 negate;
  void *v27;
  unsigned __int8 v28;
  std::vector<char>::pointer v29;
  unint64_t v30;
  int v31;
  std::regex_traits<char>::char_class_type v32;
  char v33;
  int v34;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v36;
  char *v37;
  std::vector<std::pair<std::string, std::string>>::pointer v38;
  std::vector<std::pair<std::string, std::string>>::pointer v39;
  unsigned int v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  void **v44;
  void *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  BOOL v48;
  int v49;
  char *v50;
  size_t v51;
  size_t v52;
  int v53;
  int v54;
  char *v55;
  size_t v56;
  size_t v57;
  int v58;
  int v59;
  char *v60;
  size_t v61;
  size_t v62;
  int v63;
  int v64;
  char *v65;
  size_t v66;
  size_t v67;
  int v68;
  int v69;
  int v70;
  std::vector<std::string>::pointer v71;
  uint64_t v72;
  int64_t v73;
  unint64_t v74;
  unint64_t v75;
  const void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  BOOL v80;
  std::string *v81;
  void *v82;
  int v83;
  std::string *v84;
  uint64_t v85;
  const void *v86;
  void *v87;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v88;
  std::vector<std::string>::pointer v89;
  int v90;
  int64_t v91;
  unint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  std::string *v98;
  void *v99;
  int v100;
  void **v101;
  uint64_t v102;
  uint64_t v103;
  const void *v104;
  uint64_t v105;
  std::string::size_type size;
  int v107;
  std::vector<std::string>::pointer v108;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v111;
  std::regex_traits<char>::char_class_type neg_mask;
  int v113;
  std::string::size_type v114;
  std::regex_traits<char>::char_class_type v115;
  int v116;
  std::__node<char> *first;
  int v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  std::string::value_type *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char v126;
  BOOL v127;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v128;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v129;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v130;
  _BOOL4 v131;
  _BOOL4 v132;
  int v133;
  uint64_t v134;
  int v135;
  void *v136[3];
  __int16 __src;
  void *__p[3];

  v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v25 = 0;
    negate = this->__negate_;
    goto LABEL_245;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_34;
  v6 = *current;
  LOBYTE(__src) = *current;
  v7 = current[1];
  HIBYTE(__src) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>(&__src, (uint64_t)&this->__traits_, __p, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    v27 = __p[1];
    operator delete(__p[0]);
    if (v27)
      goto LABEL_8;
LABEL_34:
    negate = 0;
    v25 = 1;
    v28 = *v2->__current_;
    LOBYTE(__src) = v28;
    if (!this->__icase_)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (!HIBYTE(__p[2]))
    goto LABEL_34;
LABEL_8:
  begin = this->__digraphs_.__begin_;
  v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    p_second = &begin->second;
    while (__src != *(p_second - 1) || HIBYTE(__src) != *p_second)
    {
      p_second += 2;
      if (!--v11)
        goto LABEL_17;
    }
    goto LABEL_227;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
    goto LABEL_167;
  }
  memset(v136, 170, sizeof(v136));
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x2AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAA00AAAALL;
  LOWORD(__p[0]) = __src;
  (*(void (**)(void **__return_ptr, const std::collate<char> *, void **, char *))(*(_QWORD *)this->__traits_.__col_
                                                                                           + 32))(v136, this->__traits_.__col_, __p, (char *)__p + 2);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v14 = this->__ranges_.__begin_;
  v15 = HIBYTE(v136[2]);
  v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (!v16)
  {
    v24 = 0;
    v70 = 0;
    v69 = 0;
    goto LABEL_164;
  }
  v128 = v2;
  v17 = 0;
  v18 = v16 / 48;
  if (SHIBYTE(v136[2]) >= 0)
    v19 = v136;
  else
    v19 = (void **)v136[0];
  v20 = HIBYTE(v136[2]);
  if (SHIBYTE(v136[2]) >= 0)
    v21 = (void *)HIBYTE(v136[2]);
  else
    v21 = v136[1];
  if (v18 <= 1)
    v22 = 1;
  else
    v22 = v16 / 48;
  v23 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
  v24 = 1;
  do
  {
    v59 = (char)*(v23 - 24);
    if (v59 >= 0)
      v60 = (char *)(v23 - 47);
    else
      v60 = *(char **)(v23 - 47);
    if (v59 >= 0)
      v61 = *(v23 - 24);
    else
      v61 = *(_QWORD *)(v23 - 39);
    if ((unint64_t)v21 >= v61)
      v62 = v61;
    else
      v62 = (size_t)v21;
    v63 = memcmp(v60, v19, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0)
        goto LABEL_98;
    }
    else if (v61 > (unint64_t)v21)
    {
      goto LABEL_98;
    }
    v64 = (char)*v23;
    if (v64 >= 0)
      v65 = (char *)(v23 - 23);
    else
      v65 = *(char **)(v23 - 23);
    if (v64 >= 0)
      v66 = *v23;
    else
      v66 = *(_QWORD *)(v23 - 15);
    if (v66 >= (unint64_t)v21)
      v67 = (size_t)v21;
    else
      v67 = v66;
    v68 = memcmp(v19, v65, v67);
    if (v68)
    {
      if (v68 < 0)
      {
LABEL_123:
        v69 = 1;
        v70 = 5;
        goto LABEL_162;
      }
    }
    else if ((unint64_t)v21 <= v66)
    {
      goto LABEL_123;
    }
LABEL_98:
    v24 = ++v17 < v18;
    v23 += 48;
  }
  while (v22 != v17);
  v70 = 0;
  v69 = 0;
LABEL_162:
  v2 = v128;
  p_traits = &this->__traits_;
  v15 = v20;
LABEL_164:
  if (v15 < 0)
    operator delete(v136[0]);
  negate = v69;
  if (v24)
    goto LABEL_207;
LABEL_167:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_209;
  v133 = negate;
  v88 = v2;
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)p_traits, __p, __p);
  v89 = this->__equivalences_.__begin_;
  v90 = SHIBYTE(__p[2]);
  v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (!v91)
    goto LABEL_188;
  v92 = v91 / 24;
  v93 = __p[1];
  if (SHIBYTE(__p[2]) >= 0)
    v94 = (void *)HIBYTE(__p[2]);
  else
    v94 = __p[1];
  if (SHIBYTE(__p[2]) < 0)
  {
    v135 = SHIBYTE(__p[2]);
    v103 = 0;
    v104 = __p[0];
    if (v92 <= 1)
      v105 = 1;
    else
      v105 = v91 / 24;
    v97 = 1;
    do
    {
      size = HIBYTE(v89->__r_.__value_.__r.__words[2]);
      v107 = (char)size;
      if ((size & 0x80u) != 0)
        size = v89->__r_.__value_.__l.__size_;
      if (v94 == (void *)size)
      {
        v108 = v107 >= 0 ? v89 : (std::vector<std::string>::pointer)v89->__r_.__value_.__r.__words[0];
        if (!memcmp(v104, v108, (size_t)v93))
        {
          v133 = 1;
          v70 = 5;
          goto LABEL_203;
        }
      }
      v97 = ++v103 < v92;
      ++v89;
    }
    while (v105 != v103);
    v70 = 0;
LABEL_203:
    v2 = v88;
    v90 = v135;
    goto LABEL_204;
  }
  if (!HIBYTE(__p[2]))
  {
    v114 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
    if ((v114 & 0x80u) != 0)
      v114 = v89->__r_.__value_.__l.__size_;
    if (v114 != HIBYTE(__p[2]))
    {
      v119 = 0;
      if (v92 <= 1)
        v120 = 1;
      else
        v120 = v92;
      v121 = v120 - 1;
      v122 = &v89[1].__r_.__value_.__s.__data_[8];
      v2 = v88;
      while (v121 != v119)
      {
        ++v119;
        v123 = v122[15];
        v125 = *(_QWORD *)v122;
        v122 += 24;
        v124 = v125;
        if ((v123 & 0x80u) != 0)
          v123 = v124;
        if (v94 == (void *)v123)
        {
          v97 = v119 < v92;
          v133 = 1;
          v70 = 5;
          goto LABEL_204;
        }
      }
      v97 = 0;
      v70 = 0;
      goto LABEL_204;
    }
    v2 = v88;
    negate = 1;
LABEL_208:
    v25 = 2;
    goto LABEL_245;
  }
  v95 = 0;
  v96 = v92 <= 1 ? 1 : v91 / 24;
  v97 = 1;
  do
  {
    v98 = &v89[v95];
    v99 = (void *)HIBYTE(v98->__r_.__value_.__r.__words[2]);
    v100 = (char)v99;
    if ((char)v99 < 0)
      v99 = (void *)v98->__r_.__value_.__l.__size_;
    if (v94 == v99)
    {
      if (v100 < 0)
        v98 = (std::string *)v98->__r_.__value_.__r.__words[0];
      v101 = __p;
      v102 = HIBYTE(__p[2]);
      while (*(unsigned __int8 *)v101 == v98->__r_.__value_.__s.__data_[0])
      {
        v101 = (void **)((char *)v101 + 1);
        v98 = (std::string *)((char *)v98 + 1);
        if (!--v102)
        {
          v133 = 1;
          v70 = 5;
          v2 = v88;
          goto LABEL_204;
        }
      }
    }
    v97 = ++v95 < v92;
  }
  while (v95 != v96);
LABEL_188:
  v97 = 0;
  v70 = 0;
  v2 = v88;
LABEL_204:
  if (v90 < 0)
    operator delete(__p[0]);
  negate = v133;
  if (!v97)
  {
LABEL_209:
    if ((char)__src < 0)
    {
      neg_mask = this->__neg_mask_;
    }
    else
    {
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v111 = tab[__src];
      if (((v111 & mask) != 0 || __src == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(__src) & 0x80000000) == 0
        && ((tab[HIBYTE(__src)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(__src) == 95))
      {
        goto LABEL_227;
      }
      neg_mask = this->__neg_mask_;
      if ((neg_mask & v111) != 0 || __src == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_226:
        v113 = negate;
LABEL_228:
        negate = v113;
        v25 = 2;
        goto LABEL_245;
      }
    }
    if ((SHIBYTE(__src) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(__src)] & neg_mask) == 0)
      {
        v113 = 1;
        if (HIBYTE(__src) != 95 || (neg_mask & 0x80) == 0)
          goto LABEL_228;
      }
      goto LABEL_226;
    }
LABEL_227:
    v113 = 1;
    goto LABEL_228;
  }
LABEL_207:
  if (v70)
    goto LABEL_208;
  v25 = 2;
  v28 = *v2->__current_;
  LOBYTE(__src) = v28;
  if (this->__icase_)
  {
LABEL_35:
    v28 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v28);
    LOBYTE(__src) = v28;
  }
LABEL_36:
  v29 = this->__chars_.__begin_;
  v30 = this->__chars_.__end_ - v29;
  if (v30)
  {
    if (v30 <= 1)
      v30 = 1;
    while (1)
    {
      v31 = *v29++;
      if (v31 == v28)
        break;
      if (!--v30)
        goto LABEL_41;
    }
LABEL_244:
    negate = 1;
    goto LABEL_245;
  }
LABEL_41:
  v32 = this->__neg_mask_;
  if (v32 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v28 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v28] & v32) == 0)
    {
      v34 = (v32 >> 7) & 1;
      v33 = v28 == 95 ? v34 : 0;
    }
    else
    {
      v33 = 1;
    }
    end = this->__neg_chars_.__end_;
    v36 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v28, end - this->__neg_chars_.__begin_);
    v37 = v36 ? v36 : end;
    if ((v33 & 1) == 0 && v37 == end)
      goto LABEL_244;
  }
  v38 = this->__ranges_.__begin_;
  v39 = this->__ranges_.__end_;
  if (v38 == v39)
    goto LABEL_128;
  memset(v136, 170, sizeof(v136));
  if (!this->__collate_)
  {
    v40 = 1;
    HIBYTE(v136[2]) = 1;
    LOWORD(v136[0]) = v28;
    v41 = (char *)v39 - (char *)v38;
    if (v41)
      goto LABEL_59;
LABEL_155:
    v48 = 0;
    if ((v40 & 0x80) != 0)
      goto LABEL_126;
    goto LABEL_127;
  }
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x1AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  LOWORD(__p[0]) = v28;
  (*(void (**)(void **__return_ptr, const std::collate<char> *, void **, char *))(*(_QWORD *)this->__traits_.__col_
                                                                                           + 32))(v136, this->__traits_.__col_, __p, (char *)__p + 1);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v38 = this->__ranges_.__begin_;
  v40 = HIBYTE(v136[2]);
  v41 = (char *)this->__ranges_.__end_ - (char *)v38;
  if (!v41)
    goto LABEL_155;
LABEL_59:
  v134 = v25;
  v131 = negate;
  v129 = v2;
  v42 = 0;
  v43 = v41 / 48;
  v126 = v40;
  if ((v40 & 0x80u) == 0)
    v44 = v136;
  else
    v44 = (void **)v136[0];
  if ((v40 & 0x80u) == 0)
    v45 = (void *)v40;
  else
    v45 = v136[1];
  if (v43 <= 1)
    v46 = 1;
  else
    v46 = v41 / 48;
  v47 = (unsigned __int8 *)&v38->second.__r_.__value_.__r.__words[2] + 7;
  v48 = 1;
  while (2)
  {
    v49 = (char)*(v47 - 24);
    if (v49 >= 0)
      v50 = (char *)(v47 - 47);
    else
      v50 = *(char **)(v47 - 47);
    if (v49 >= 0)
      v51 = *(v47 - 24);
    else
      v51 = *(_QWORD *)(v47 - 39);
    if ((unint64_t)v45 >= v51)
      v52 = v51;
    else
      v52 = (size_t)v45;
    v53 = memcmp(v50, v44, v52);
    if (v53)
    {
      if (v53 < 0)
        goto LABEL_84;
    }
    else if (v51 <= (unint64_t)v45)
    {
LABEL_84:
      v54 = (char)*v47;
      if (v54 >= 0)
        v55 = (char *)(v47 - 23);
      else
        v55 = *(char **)(v47 - 23);
      if (v54 >= 0)
        v56 = *v47;
      else
        v56 = *(_QWORD *)(v47 - 15);
      if (v56 >= (unint64_t)v45)
        v57 = (size_t)v45;
      else
        v57 = v56;
      v58 = memcmp(v44, v55, v57);
      if (v58)
      {
        if (v58 < 0)
        {
LABEL_95:
          negate = 1;
          v2 = v129;
          v25 = v134;
          if ((v126 & 0x80) == 0)
            goto LABEL_127;
          goto LABEL_126;
        }
      }
      else if ((unint64_t)v45 <= v56)
      {
        goto LABEL_95;
      }
    }
    v48 = ++v42 < v43;
    v47 += 48;
    if (v46 != v42)
      continue;
    break;
  }
  v2 = v129;
  negate = v131;
  v25 = v134;
  if ((v126 & 0x80) == 0)
    goto LABEL_127;
LABEL_126:
  operator delete(v136[0]);
LABEL_127:
  if (v48)
    goto LABEL_245;
LABEL_128:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_239:
    if ((v28 & 0x80) != 0)
      goto LABEL_245;
    v115 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v28] & v115) == 0)
    {
      v116 = (v115 >> 7) & 1;
      if (v28 != 95)
        v116 = 0;
      if (v116 != 1)
        goto LABEL_245;
    }
    goto LABEL_244;
  }
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)&this->__traits_, (_BYTE *)&__src + 1, __p);
  v71 = this->__equivalences_.__begin_;
  v72 = HIBYTE(__p[2]);
  v73 = (char *)this->__equivalences_.__end_ - (char *)v71;
  if (!v73)
  {
    if ((HIBYTE(__p[2]) & 0x80) != 0)
      operator delete(__p[0]);
LABEL_238:
    v28 = __src;
    goto LABEL_239;
  }
  v132 = negate;
  v130 = v2;
  v74 = 0;
  v75 = v73 / 24;
  v76 = __p[0];
  v77 = __p[1];
  if (SHIBYTE(__p[2]) >= 0)
    v78 = (void *)HIBYTE(__p[2]);
  else
    v78 = __p[1];
  if (v75 <= 1)
    v79 = 1;
  else
    v79 = v73 / 24;
  v80 = 1;
  while (2)
  {
    v81 = &v71[v74];
    v82 = (void *)HIBYTE(v81->__r_.__value_.__r.__words[2]);
    v83 = (char)v82;
    if ((char)v82 < 0)
      v82 = (void *)v81->__r_.__value_.__l.__size_;
    if (v78 != v82)
    {
LABEL_149:
      if (++v74 == v79)
      {
        if ((v72 & 0x80) != 0)
LABEL_236:
          operator delete(__p[0]);
        v2 = v130;
        negate = v132;
        goto LABEL_238;
      }
      goto LABEL_153;
    }
    if (v83 >= 0)
      v84 = &v71[v74];
    else
      v84 = (std::string *)v81->__r_.__value_.__r.__words[0];
    if ((v72 & 0x80) == 0)
    {
      if (!(_DWORD)v72)
      {
LABEL_157:
        v2 = v130;
        negate = 1;
        if (!v80)
          goto LABEL_238;
        goto LABEL_245;
      }
      v85 = 0;
      while (*((unsigned __int8 *)__p + v85) == v84->__r_.__value_.__s.__data_[v85])
      {
        if (v72 == ++v85)
          goto LABEL_157;
      }
      goto LABEL_149;
    }
    v127 = v80;
    v86 = v76;
    v87 = v77;
    if (memcmp(v76, v84, (size_t)v77))
    {
      ++v74;
      v77 = v87;
      v76 = v86;
      if (v74 == v79)
        goto LABEL_236;
LABEL_153:
      v80 = v74 < v75;
      continue;
    }
    break;
  }
  operator delete(__p[0]);
  v2 = v130;
  negate = 1;
  if (!v127)
    goto LABEL_238;
LABEL_245:
  if (negate == this->__negate_)
  {
    first = 0;
    v118 = -993;
  }
  else
  {
    v2->__current_ += v25;
    first = this->__first_;
    v118 = -995;
  }
  v2->__do_ = v118;
  v2->__node_ = first;
}

void sub_227A7A844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;

  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*((void **)v3 - 3));
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0)
LABEL_19:
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  v11 = a1[1].__locale_;
  if (v11)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void std::regex_traits<char>::__lookup_collatename<char *>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  size_t v19;
  std::string v20;
  _BYTE __dst[24];

  v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    __dst[23] = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v5);
    v9 += v5;
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  v9 = operator new(v10 + 1);
  *(_QWORD *)&__dst[8] = v5;
  *(_QWORD *)&__dst[16] = v11 | 0x8000000000000000;
  *(_QWORD *)__dst = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *v9 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    v12 = *(char **)__dst;
    if (!*(_QWORD *)&__dst[8])
      goto LABEL_18;
  }
  else
  {
    if (!__dst[23])
      return;
    v12 = __dst;
  }
  std::__get_collation_name(&v20, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
  v13 = v20.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v20.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_16;
  if ((__dst[23] & 0x80000000) != 0)
  {
    v15 = *(_QWORD *)&__dst[8];
    v12 = *(char **)__dst;
    if (*(_QWORD *)&__dst[8] < 3uLL)
      goto LABEL_24;
LABEL_18:
    operator delete(v12);
    return;
  }
  v15 = __dst[23];
  if (__dst[23] < 3u)
  {
    v12 = __dst;
LABEL_24:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v20, *(_QWORD *)(a2 + 16), v12, &v12[v15]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v20;
    if (*(char *)(a4 + 23) < 0)
    {
      v17 = *(_QWORD *)(a4 + 8);
      if (v17 == 1 || v17 == 12)
      {
        if (__dst != (_BYTE *)a4)
        {
          if (__dst[23] >= 0)
            v18 = __dst;
          else
            v18 = *(_BYTE **)__dst;
          if (__dst[23] >= 0)
            v19 = __dst[23];
          else
            v19 = *(_QWORD *)&__dst[8];
          std::string::__assign_no_alias<false>((void **)a4, v18, v19);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v16 = *(unsigned __int8 *)(a4 + 23);
      if (v16 == 1 || v16 == 12)
      {
        if (__dst != (_BYTE *)a4)
        {
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a4, *(void **)__dst, *(size_t *)&__dst[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__dst;
            *(_QWORD *)(a4 + 16) = *(_QWORD *)&__dst[16];
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
LABEL_16:
    if ((__dst[23] & 0x80000000) == 0)
      return;
    v12 = *(char **)__dst;
    goto LABEL_18;
  }
}

void sub_227A7AC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  size_t v5;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  void *__dst[3];

  v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v5);
    v9 = (void **)((char *)v9 + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v5;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)v9 = 0;
  memset(a4, 170, 24);
  v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  if (SHIBYTE(__dst[2]) < 0)
    v12 = (char *)__dst[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v13, &v12[(_QWORD)v13]);
  v14 = *((unsigned __int8 *)a4 + 23);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = a4[1];
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      return;
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0)
      v16 = a4;
    else
      v16 = (_BYTE *)*a4;
    v16[11] = v16[3];
    if (SHIBYTE(__dst[2]) < 0)
      goto LABEL_26;
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 23) = 0;
    goto LABEL_25;
  }
  *(_BYTE *)*a4 = 0;
  a4[1] = 0;
  if (SHIBYTE(__dst[2]) < 0)
LABEL_26:
    operator delete(__dst[0]);
}

void sub_227A7AE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2A460C](exception, 5);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_227A7AE7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v4;
  int v5;
  char *v6;
  int v9;
  int v10;
  char v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  std::basic_regex<char>::value_type *v26;
  char *v27;
  char *v28;
  int v29;
  void **v30;
  _BYTE *v31;
  char *v32;
  _BYTE *v34;
  void *v35[2];
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  void *__p[2];
  uint64_t v40;
  __int128 v41;
  int64_t v42;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (char *)a4;
  v9 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_38:
    v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_33;
  }
  v10 = a2[1];
  if (v10 != 46)
  {
    if (v10 != 58)
    {
      if (v10 == 61)
      {
        v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
        v11 = 0;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
      v9 = 0;
      goto LABEL_38;
    }
    v12 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      v13 = 0;
      v14 = (unsigned __int8 *)v4;
      if (v4[2] == 58)
        goto LABEL_14;
      do
      {
        do
        {
          if (a3 - v4 - 4 == v13)
            goto LABEL_89;
          v14 = (unsigned __int8 *)&v4[++v13];
        }
        while (v4[v13 + 2] != 58);
LABEL_14:
        ;
      }
      while (v14[3] != 93);
      v15 = &v4[v13 + 2];
      if (v15 != a3)
      {
        v16 = std::regex_traits<char>::__lookup_classname<char const*>(a1, v12, v15, *(_DWORD *)(a1 + 24) & 1);
        if (!v16)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
        v11 = 0;
        *((_DWORD *)v6 + 40) |= v16;
        v6 = &v4[v13 + 4];
        if (SHIBYTE(v40) < 0)
          goto LABEL_63;
        goto LABEL_64;
      }
    }
LABEL_89:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  v17 = a2 + 2;
  if (a3 - (v4 + 2) < 2)
    goto LABEL_89;
  v18 = a3 - v4 - 4;
  v19 = v4 + 2;
  v20 = v17 + 1;
  if (*v17 == 46)
    goto LABEL_23;
  do
  {
    do
    {
      if (!v18)
        goto LABEL_89;
      --v18;
      v19 = v20;
      v21 = *v20++;
    }
    while (v21 != 46);
LABEL_23:
    ;
  }
  while (*v20 != 93);
  if (v19 == a3)
    goto LABEL_89;
  std::regex_traits<char>::__lookup_collatename<char const*>(v17, a1, v19, (uint64_t)&v41);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v40 = v42;
  *(_OWORD *)__p = v41;
  v22 = (char *)HIBYTE(v42);
  v9 = SHIBYTE(v42);
  v23 = *((_QWORD *)&v41 + 1);
  if (v42 < 0)
    v22 = (char *)__p[1];
  if ((unint64_t)(v22 - 1) >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  v4 = v19 + 2;
  v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v42 >= 0)
    v23 = HIBYTE(v42);
  if (v23)
  {
    v28 = v4;
    if (v4 == a3)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_33:
  if ((v24 | 0x40) != 0x40)
  {
    LOBYTE(v25) = *v4;
LABEL_57:
    if (v9 < 0)
    {
      v34 = __p[0];
      __p[1] = (void *)1;
      *(_BYTE *)__p[0] = v25;
      v34[1] = 0;
      v28 = v4 + 1;
      if (v4 + 1 == a3)
        goto LABEL_41;
    }
    else
    {
      HIBYTE(v40) = 1;
      LOWORD(__p[0]) = v25;
      v28 = v4 + 1;
      if (v4 + 1 == a3)
        goto LABEL_41;
    }
    goto LABEL_40;
  }
  v25 = *v4;
  if (v25 != 92)
    goto LABEL_57;
  v26 = v4 + 1;
  if (v24)
    v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v26, a3, (uint64_t *)__p);
  else
    v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v26, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v6);
  v28 = v27;
  if (v27 == a3)
  {
LABEL_41:
    if (SHIBYTE(v40) < 0)
    {
      if (!__p[1])
        goto LABEL_62;
      if (__p[1] != (void *)1)
      {
        v30 = (void **)__p[0];
LABEL_61:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v6, *(char *)v30, *((char *)v30 + 1));
LABEL_62:
        v11 = 1;
        v4 = v28;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
      v30 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v40))
        goto LABEL_62;
      v30 = __p;
      if (HIBYTE(v40) != 1)
        goto LABEL_61;
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, *(char *)v30);
    goto LABEL_62;
  }
LABEL_40:
  v29 = *v28;
  if (v29 == 93)
    goto LABEL_41;
  v31 = v28 + 1;
  if (v28 + 1 == a3 || v29 != 45 || *v31 == 93)
    goto LABEL_41;
  v41 = 0uLL;
  v42 = 0;
  v4 = v28 + 2;
  if (v28 + 2 == a3 || *v31 != 91 || *v4 != 46)
  {
    if ((v24 | 0x40) == 0x40)
    {
      LODWORD(v31) = *v31;
      if ((_DWORD)v31 == 92)
      {
        if (v24)
          v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v28 + 2, a3, (uint64_t *)&v41);
        else
          v32 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v28 + 2, (unsigned __int8 *)a3, (uint64_t)&v41, (uint64_t)v6);
        goto LABEL_79;
      }
    }
    else
    {
      LOBYTE(v31) = *v31;
    }
    HIBYTE(v42) = 1;
    LOWORD(v41) = v31;
    goto LABEL_80;
  }
  v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v28 + 3, a3, (uint64_t)&v41);
LABEL_79:
  v4 = v32;
LABEL_80:
  *(_OWORD *)v37 = *(_OWORD *)__p;
  v38 = v40;
  __p[1] = 0;
  v40 = 0;
  __p[0] = 0;
  *(_OWORD *)v35 = v41;
  v36 = v42;
  v41 = 0uLL;
  v42 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v6, (char *)v37, (uint64_t)v35);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_83;
LABEL_87:
      operator delete((void *)v41);
      v11 = 1;
      if (SHIBYTE(v40) < 0)
        goto LABEL_63;
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete(v37[0]);
  if (SHIBYTE(v42) < 0)
    goto LABEL_87;
LABEL_83:
  v11 = 1;
  if (SHIBYTE(v40) < 0)
LABEL_63:
    operator delete(__p[0]);
LABEL_64:
  if ((v11 & 1) != 0)
    return v4;
  return v6;
}

void sub_227A7B394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  char *v9;
  void **v10;
  unint64_t v11;
  __int128 v12;
  void *v13;
  void **v14;
  void **v15;
  void *__p[3];
  void *v18[3];

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_39;
  v7 = 0;
  v8 = __src;
  if (*__src != 61)
    goto LABEL_5;
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      v8 = &__src[++v7];
      if (__src[v7] == 61)
        goto LABEL_4;
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v7] == a3)
    goto LABEL_39;
  memset(v18, 170, sizeof(v18));
  std::regex_traits<char>::__lookup_collatename<char const*>(__src, a1, &__src[v7], (uint64_t)v18);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
    v9 = (char *)HIBYTE(v18[2]);
    if (HIBYTE(v18[2]))
    {
      memset(__p, 170, sizeof(__p));
      v10 = v18;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v9 = (char *)v18[1];
  if (!v18[1])
    goto LABEL_40;
  memset(__p, 170, sizeof(__p));
  v10 = (void **)v18[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v10, &v9[(_QWORD)v10], (_BYTE **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      v11 = *(_QWORD *)(a4 + 144);
      if (v11 >= *(_QWORD *)(a4 + 152))
      {
        *(_QWORD *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v12 = *(_OWORD *)__p;
          *(void **)(v11 + 16) = __p[2];
          *(_OWORD *)v11 = v12;
        }
        *(_QWORD *)(a4 + 144) = v11 + 24;
        *(_QWORD *)(a4 + 144) = v11 + 24;
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  v13 = (void *)HIBYTE(v18[2]);
  if (SHIBYTE(v18[2]) < 0)
    v13 = v18[1];
  if (v13 == (void *)2)
  {
    v15 = v18;
    if (SHIBYTE(v18[2]) < 0)
      v15 = (void **)v18[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v15, *((char *)v15 + 1));
  }
  else
  {
    if (v13 != (void *)1)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    v14 = v18;
    if (SHIBYTE(v18[2]) < 0)
      v14 = (void **)v18[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v14);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v18[2]) < 0)
      goto LABEL_38;
    return &__src[v7 + 2];
  }
LABEL_33:
  if (SHIBYTE(v18[2]) < 0)
LABEL_38:
    operator delete(v18[0]);
  return &__src[v7 + 2];
}

void sub_227A7B65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  unint64_t v12;

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_15;
  v6 = 0;
  v7 = __src;
  if (*__src != 46)
    goto LABEL_5;
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      v7 = &__src[++v6];
      if (__src[v6] == 46)
        goto LABEL_4;
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v6] == a3)
    goto LABEL_15;
  std::regex_traits<char>::__lookup_collatename<char const*>(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v11;
  v8 = v12;
  *(_QWORD *)(a4 + 16) = v12;
  v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a4 + 8);
  if (v9 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return &__src[v6 + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type *v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  std::basic_regex<char>::value_type v11;

  if (a2 == a3)
LABEL_70:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v5;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_70;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (a4)
          goto LABEL_43;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        v8 = a3;
        if (a4)
          goto LABEL_43;
        goto LABEL_69;
      }
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      if (!a4)
        goto LABEL_69;
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return v8;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t j;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t k;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t m;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char v35;
  char *v36;
  char v37;
  _BYTE *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  int v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  void *__p[2];
  uint64_t v49;
  void *v50[2];
  uint64_t v51;

  v3 = a3;
  v4 = (uint64_t)a2;
  if (!*(_BYTE *)(a1 + 170))
  {
    v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((_QWORD *)a2 + 1) != 1)
        goto LABEL_74;
    }
    else if (v16 != 1)
    {
LABEL_74:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8) != 1)
        goto LABEL_74;
    }
    else if (*(_BYTE *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(_BYTE *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)__p = *(_OWORD *)v4;
      v49 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      *(_OWORD *)v50 = *(_OWORD *)v3;
      v51 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)v3 = 0;
      v39 = *(_QWORD *)(a1 + 96);
      if (v39 < *(_QWORD *)(a1 + 104))
      {
        v40 = *(_OWORD *)__p;
        *(_QWORD *)(v39 + 16) = v49;
        *(_OWORD *)v39 = v40;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(_QWORD *)(v39 + 40) = v41;
        v50[1] = 0;
        v51 = 0;
        v50[0] = 0;
        *(_QWORD *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      v42 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
      v43 = SHIBYTE(v51);
      *(_QWORD *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    v34 = a2;
    if ((v16 & 0x80) != 0)
      v34 = *(char **)a2;
    v35 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
        goto LABEL_64;
    }
    else
    {
      *(_BYTE *)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        v37 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v36);
        v38 = (_BYTE *)v3;
        if (*(char *)(v3 + 23) < 0)
          v38 = *(_BYTE **)v3;
        *v38 = v37;
        goto LABEL_67;
      }
    }
    v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(_BYTE *)(a1 + 169))
  {
    for (i = 0; ; ++i)
    {
      v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(_QWORD *)(v4 + 8))
        {
LABEL_13:
          for (j = 0; ; ++j)
          {
            v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(_QWORD *)(v3 + 8))
                goto LABEL_44;
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            v13 = v3;
            if ((v12 & 0x80) != 0)
              v13 = *(_QWORD *)v3;
            v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v13 + j));
            v15 = v3;
            if (*(char *)(v3 + 23) < 0)
              v15 = *(_QWORD *)v3;
            *(_BYTE *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      v8 = v4;
      if ((v7 & 0x80) != 0)
        v8 = *(_QWORD *)v4;
      v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v8 + i));
      v10 = v4;
      if (*(char *)(v4 + 23) < 0)
        v10 = *(_QWORD *)v4;
      *(_BYTE *)(v10 + i) = v9;
    }
  }
  for (k = 0; ; ++k)
  {
    v19 = a2[23];
    if (a2[23] < 0)
      break;
    if (k >= v19)
      goto LABEL_35;
LABEL_33:
    v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      v18 = *(char **)a2;
      v20 = *(char **)a2;
    }
    else
    {
      v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((_QWORD *)a2 + 1))
    goto LABEL_33;
LABEL_35:
  for (m = 0; ; ++m)
  {
    v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0)
      break;
    if (m >= v23)
      goto LABEL_44;
LABEL_42:
    v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      v22 = *(_QWORD *)a3;
      v24 = *(_QWORD *)a3;
    }
    else
    {
      v24 = a3;
    }
    *(_BYTE *)(v24 + m) = *(_BYTE *)(v22 + m);
  }
  if (m < *(_QWORD *)(a3 + 8))
    goto LABEL_42;
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    v26 = v4;
    v4 = *(_QWORD *)v4;
    v25 = *(_QWORD *)(v26 + 8);
  }
  else
  {
    v25 = *(unsigned __int8 *)(v4 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    v28 = v3;
    v3 = *(_QWORD *)v3;
    v27 = *(_QWORD *)(v28 + 8);
  }
  else
  {
    v27 = *(unsigned __int8 *)(v3 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)__p = *(_OWORD *)v46;
  v49 = v47;
  *(_OWORD *)v50 = *(_OWORD *)v44;
  v51 = v45;
  v29 = *(_QWORD *)(a1 + 96);
  if (v29 >= *(_QWORD *)(a1 + 104))
  {
    v32 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    v33 = SHIBYTE(v51);
    *(_QWORD *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  v30 = *(_OWORD *)__p;
  *(_QWORD *)(v29 + 16) = v49;
  *(_OWORD *)v29 = v30;
  __p[1] = 0;
  v49 = 0;
  __p[0] = 0;
  v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(_QWORD *)(v29 + 40) = v31;
  v50[1] = 0;
  v51 = 0;
  v50[0] = 0;
  *(_QWORD *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0)
    goto LABEL_69;
}

void sub_227A7C250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_227A7C264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _WORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  unint64_t v36;
  __int128 v37;
  __int16 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  unint64_t v53;
  __int128 v54;
  __int16 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  _OWORD *v60;
  char *v61;
  unint64_t v62;
  __int128 v63;
  __int16 v64;

  if (*(_BYTE *)(a1 + 169))
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
    v8 = *(char **)(a1 + 120);
    v7 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      v9 = (char **)(a1 + 112);
      v10 = *(char **)(a1 + 112);
      v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        v12 = v11 >> 1;
        v13 = v7 - (_QWORD)v10;
        if (v13 <= (v11 >> 1) + 1)
          v14 = v12 + 1;
        else
          v14 = v13;
        if (v13 >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (!v15)
        {
          v16 = 0;
          v17 = (_WORD *)(2 * v12);
          v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          v19 = 2 * v12 + 2;
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
LABEL_30:
          v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E)
            goto LABEL_71;
          if ((unint64_t)(v8 - &v16[v11 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
            goto LABEL_71;
          v31 = (v30 >> 1) + 1;
          v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          v33 = &v8[-v32];
          v17 = (_WORD *)((char *)v17 - v32);
          v34 = &v16[2 * v12 - 16];
          v35 = v8 - 16;
          v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          v16 = operator new(2 * v15);
          v17 = &v16[2 * v12];
          v18 = &v16[2 * v15];
          *v17 = v6;
          v19 = (uint64_t)(v17 + 1);
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
          goto LABEL_30;
        }
LABEL_68:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_67:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
LABEL_28:
    *(_WORD *)v8 = v6;
    v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  v9 = (char **)(a1 + 112);
  v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  v8 = *(char **)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21)
      goto LABEL_28;
    v22 = *v9;
    v23 = v8 - *v9;
    if (v23 <= -3)
      goto LABEL_67;
    v24 = v23 >> 1;
    v25 = v21 - (_QWORD)v22;
    if (v25 <= (v23 >> 1) + 1)
      v26 = v24 + 1;
    else
      v26 = v25;
    if (v25 >= 0x7FFFFFFFFFFFFFFELL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      if (v27 < 0)
        goto LABEL_68;
      v28 = operator new(2 * v27);
      v17 = &v28[2 * v24];
      v18 = &v28[2 * v27];
      *v17 = v6;
      v19 = (uint64_t)(v17 + 1);
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    else
    {
      v28 = 0;
      v17 = (_WORD *)(2 * v24);
      v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      v19 = 2 * v24 + 2;
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E)
      goto LABEL_72;
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_72;
    v48 = (v47 >> 1) + 1;
    v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    v50 = &v8[-v49];
    v17 = (_WORD *)((char *)v17 - v49);
    v51 = &v28[2 * v24 - 16];
    v52 = v8 - 16;
    v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21)
    goto LABEL_28;
  v39 = *v9;
  v40 = v8 - *v9;
  if (v40 <= -3)
    goto LABEL_67;
  v41 = v40 >> 1;
  v42 = v21 - (_QWORD)v39;
  if (v42 <= (v40 >> 1) + 1)
    v43 = v41 + 1;
  else
    v43 = v42;
  if (v42 >= 0x7FFFFFFFFFFFFFFELL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v43;
  if (!v44)
  {
    v45 = 0;
    v17 = (_WORD *)(2 * v41);
    v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    v19 = 2 * v41 + 2;
    v46 = (char *)(v8 - v39);
    if (v8 == v39)
      goto LABEL_64;
    goto LABEL_57;
  }
  if (v44 < 0)
    goto LABEL_68;
  v45 = operator new(2 * v44);
  v17 = &v45[2 * v41];
  v18 = &v45[2 * v44];
  *v17 = v6;
  v19 = (uint64_t)(v17 + 1);
  v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E)
      goto LABEL_73;
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_73;
    v57 = (v56 >> 1) + 1;
    v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    v59 = &v8[-v58];
    v17 = (_WORD *)((char *)v17 - v58);
    v60 = &v45[2 * v41 - 16];
    v61 = v8 - 16;
    v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      *v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v18;
  if (v8)
    operator delete(v8);
LABEL_66:
  *(_QWORD *)(a1 + 120) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2A460C](exception, 1);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_227A7C6A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<char const*>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  size_t v19;
  std::string v20;
  _BYTE __dst[24];

  v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    __dst[23] = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v5);
    v9 += v5;
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  v9 = operator new(v10 + 1);
  *(_QWORD *)&__dst[8] = v5;
  *(_QWORD *)&__dst[16] = v11 | 0x8000000000000000;
  *(_QWORD *)__dst = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *v9 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    v12 = *(char **)__dst;
    if (!*(_QWORD *)&__dst[8])
      goto LABEL_18;
  }
  else
  {
    if (!__dst[23])
      return;
    v12 = __dst;
  }
  std::__get_collation_name(&v20, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
  v13 = v20.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v20.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_16;
  if ((__dst[23] & 0x80000000) != 0)
  {
    v15 = *(_QWORD *)&__dst[8];
    v12 = *(char **)__dst;
    if (*(_QWORD *)&__dst[8] < 3uLL)
      goto LABEL_24;
LABEL_18:
    operator delete(v12);
    return;
  }
  v15 = __dst[23];
  if (__dst[23] < 3u)
  {
    v12 = __dst;
LABEL_24:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v20, *(_QWORD *)(a2 + 16), v12, &v12[v15]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v20;
    if (*(char *)(a4 + 23) < 0)
    {
      v17 = *(_QWORD *)(a4 + 8);
      if (v17 == 1 || v17 == 12)
      {
        if (__dst != (_BYTE *)a4)
        {
          if (__dst[23] >= 0)
            v18 = __dst;
          else
            v18 = *(_BYTE **)__dst;
          if (__dst[23] >= 0)
            v19 = __dst[23];
          else
            v19 = *(_QWORD *)&__dst[8];
          std::string::__assign_no_alias<false>((void **)a4, v18, v19);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v16 = *(unsigned __int8 *)(a4 + 23);
      if (v16 == 1 || v16 == 12)
      {
        if (__dst != (_BYTE *)a4)
        {
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a4, *(void **)__dst, *(size_t *)&__dst[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__dst;
            *(_QWORD *)(a4 + 16) = *(_QWORD *)&__dst[16];
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
LABEL_16:
    if ((__dst[23] & 0x80000000) == 0)
      return;
    v12 = *(char **)__dst;
    goto LABEL_18;
  }
}

void sub_227A7C90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _BYTE **a4@<X8>)
{
  unint64_t v5;
  _OWORD *v9;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  void **v20;
  _BYTE *v21;
  int v22;
  _BYTE *v23;
  void *__p[3];

  v5 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 > 0x16)
  {
    v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v16 = v5 | 7;
    v17 = v16 + 1;
    v9 = operator new(v16 + 1);
    __p[1] = (void *)v5;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v9 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)v9 + (v5 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = v9 + 1;
    v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  memset(a4, 170, 24);
  v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v19 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v20, &v19[(_QWORD)v20]);
  v21 = (_BYTE *)*((unsigned __int8 *)a4 + 23);
  v22 = (char)v21;
  if ((char)v21 < 0)
    v21 = a4[1];
  if (v21 == (_BYTE *)1)
    goto LABEL_32;
  if (v21 != (_BYTE *)12)
  {
    if (v22 < 0)
    {
      **a4 = 0;
      a4[1] = 0;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        return;
LABEL_35:
      operator delete(__p[0]);
      return;
    }
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return;
    goto LABEL_35;
  }
  if (v22 >= 0)
    v23 = a4;
  else
    v23 = *a4;
  v23[11] = v23[3];
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_35;
}

void sub_227A7CB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2A460C](exception, 2);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_227A7CB94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, _BYTE *__src, _BYTE *a3, BOOL a4)
{
  size_t v4;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  const char *v14;
  uint64_t classname;
  void *__dst[3];

  v4 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v4);
    v9 = (void **)((char *)v9 + v4);
    goto LABEL_9;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v4;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)v9 = 0;
  v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  if (SHIBYTE(__dst[2]) < 0)
    v12 = (char *)__dst[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v13, &v12[(_QWORD)v13]);
  if (SHIBYTE(__dst[2]) >= 0)
    v14 = (const char *)__dst;
  else
    v14 = (const char *)__dst[0];
  classname = std::__get_classname(v14, a4);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  return classname;
}

void sub_227A7CCE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 64);
    v5 = *(_BYTE **)(a1 + 72);
    v16 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 64) = v13;
        *(_QWORD *)(a1 + 72) = v15;
        *(_QWORD *)(a1 + 80) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 64);
  v7 = *(_BYTE **)(a1 + 64);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 80) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 72) = v15;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3;
  _OWORD *v7;
  _BYTE *v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  void **v18;
  void *__p[3];

  v3 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3 > 0x16)
  {
    v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v14 = v3 | 7;
    v15 = v14 + 1;
    v7 = operator new(v14 + 1);
    __p[1] = (void *)v3;
    __p[2] = (void *)(v15 | 0x8000000000000000);
    __p[0] = v7;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v8 = v7;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v7 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v3 < 0x20 || (unint64_t)v7 - a2 < 0x20)
  {
    v8 = v7;
    v9 = (char *)a2;
  }
  else
  {
    v8 = (char *)v7 + (v3 & 0xFFFFFFFFFFFFFFE0);
    v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    v10 = (__int128 *)(a2 + 16);
    v11 = v7 + 1;
    v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *v8 = 0;
  v17 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v17 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v18, &v17[(_QWORD)v18]);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_227A7D2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2A460C](exception, 9);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_227A7D348(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v15 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13)
        goto LABEL_22;
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13)
    operator delete(v13);
  return v11;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  void *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = operator new(0x10uLL);
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new(0x38uLL);
  LODWORD(first) = this->__loop_count_;
  v18 = __s->__first_;
  *(_QWORD *)v17 = &unk_24F032078;
  *((_QWORD *)v17 + 1) = v18;
  *((_QWORD *)v17 + 2) = v14;
  *((_QWORD *)v17 + 3) = __min;
  *((_QWORD *)v17 + 4) = __max;
  *((_DWORD *)v17 + 10) = (_DWORD)first;
  *((_DWORD *)v17 + 11) = v9;
  *((_DWORD *)v17 + 12) = v8;
  *((_BYTE *)v17 + 52) = __greedy;
  __s->__first_ = 0;
  v19 = (std::__node<char> *)operator new(0x10uLL);
  v19->__vftable = (std::__node<char>_vtbl *)&unk_24F032108;
  v19[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v19;
  this->__end_ = (std::__owns_one_state<char> *)*((_QWORD *)v17 + 2);
  __s->__first_ = (std::__node<char> *)v17;
  this->__loop_count_ = (_DWORD)first + 1;
}

void sub_227A7D75C(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);

  std::__loop<char>::~__loop(v1);
  _Unwind_Resume(a1);
}

void sub_227A7D770(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2A460C](exception, 8);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_227A7D7E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2A460C](exception, 7);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_227A7D82C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24F0320D8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24F0320D8;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *v4 = 0;
    if (!*(_QWORD *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(_QWORD *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
      v20 = *(_DWORD *)(result + 44);
      v21 = *(_DWORD *)(result + 48);
      if (v20 == v21)
        return result;
      v22 = (v21 - 1);
      v23 = (v20 - 1);
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        v28 = v25 + 24 * v23 + 24;
        v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(_QWORD *)(v28 - 24) = v24;
          *(_QWORD *)(v28 - 16) = v24;
          *(_QWORD *)v28 = v24;
          *(_QWORD *)(v28 + 8) = v24;
          *(_BYTE *)(v28 - 8) = 0;
          *(_BYTE *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL))
          return result;
      }
      else
      {
        v27 = v23;
      }
      v30 = v22 - v27;
      v31 = (_BYTE *)(v25 + 24 * v27 + 16);
      do
      {
        *((_QWORD *)v31 - 2) = v24;
        *((_QWORD *)v31 - 1) = v24;
        *v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  v5 = *v4 + 1;
  *v4 = v5;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6)
    v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
  if (v8 && v5 >= v6)
    goto LABEL_26;
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(result + 44);
  v13 = *(_DWORD *)(result + 48);
  if (v12 == v13)
    return result;
  v14 = (v13 - 1);
  v15 = (v12 - 1);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    v19 = v15;
LABEL_39:
    v34 = v14 - v19;
    v35 = (_BYTE *)(v17 + 24 * v19 + 16);
    do
    {
      *((_QWORD *)v35 - 2) = v16;
      *((_QWORD *)v35 - 1) = v16;
      *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  v32 = v17 + 24 * v15 + 24;
  v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)(v32 - 24) = v16;
    *(_QWORD *)(v32 - 16) = v16;
    *(_QWORD *)v32 = v16;
    *(_QWORD *)(v32 + 8) = v16;
    *(_BYTE *)(v32 - 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_39;
  return result;
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 44);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(_QWORD *)(a3 + 16);
  v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    v5 = (v4 - 1);
    v6 = (v3 - 1);
    v7 = *(_QWORD *)(a3 + 24);
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      v10 = v6;
LABEL_9:
      v13 = v5 - v10;
      v14 = (_BYTE *)(v8 + 24 * v10 + 16);
      do
      {
        *((_QWORD *)v14 - 2) = v7;
        *((_QWORD *)v14 - 1) = v7;
        *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    v11 = v8 + 24 * v6 + 24;
    v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v11 - 24) = v7;
      *(_QWORD *)(v11 - 16) = v7;
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 - 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_9;
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24F0320D8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24F0320D8;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24F0320D8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24F0320D8;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2A460C](exception, 15);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_227A7DDFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(uint64_t a1, uint64_t a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::basic_regex<char> *v15;
  std::__owns_one_state<char> *v16;
  int v17;
  std::basic_regex<char> *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>((std::basic_regex<char> *)a1, (char *)a2, a3);
  v7 = v6;
  if (v6 != (char *)a2 || v6 == a3)
    return v7;
  if ((char *)(a2 + 1) == a3)
    return (char *)a2;
  if (*(_BYTE *)a2 != 92)
    return (char *)a2;
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new(0x18uLL);
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *v10 = &unk_24F031FE8;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3)
        goto LABEL_25;
      v15 = v9;
      v16 = *(std::__owns_one_state<char> **)(a1 + 56);
      v17 = *(_DWORD *)(a1 + 28);
      v18 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v15, a3);
      if (v18 == v15)
        break;
      v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v18, (std::basic_regex<char> *)a3, v16, (v17 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v9 != v15);
    if ((char *)&v15->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v15->__traits_.__loc_.__locale_) != 92
      || BYTE1(v15->__traits_.__loc_.__locale_) != 41)
    {
LABEL_25:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    v7 = (char *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 41);
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v19 = operator new(0x18uLL);
      v20 = *(_QWORD *)(a1 + 56);
      v21 = *(_QWORD *)(v20 + 8);
      *v19 = &unk_24F032030;
      v19[1] = v21;
      *((_DWORD *)v19 + 4) = v11;
      *(_QWORD *)(v20 + 8) = v19;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v7;
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return (char *)a2;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  std::basic_regex<char> *v6;
  int locale_low;
  std::basic_regex<char> *v9;
  int v10;
  int v11;
  std::basic_regex<char> *v12;
  int v13;
  std::basic_regex<char> *v14;
  int v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;

  v6 = this;
  if (this == a3)
    return v6;
  locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)v6 + 1);
  }
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return v6;
  }
  v9 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v9 == a3)
    goto LABEL_43;
  v10 = LOBYTE(v9->__traits_.__loc_.__locale_);
  if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38)
    goto LABEL_43;
  v11 = v10 - 48;
  v12 = (std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_16:
    v12 = a3;
  }
  else
  {
    while (1)
    {
      v13 = LOBYTE(v12->__traits_.__loc_.__locale_);
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38)
        break;
      if (v11 >= 214748364)
        goto LABEL_43;
      v11 = v13 + 10 * v11 - 48;
      v12 = (std::basic_regex<char> *)((char *)v12 + 1);
      if (v12 == a3)
        goto LABEL_16;
    }
  }
  if (v12 == v9)
    goto LABEL_43;
  if (v12 == a3)
    goto LABEL_41;
  v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 1);
  v15 = LOBYTE(v12->__traits_.__loc_.__locale_);
  if (v15 != 44)
  {
    if (v14 != a3 && v15 == 92 && LOBYTE(v14->__traits_.__loc_.__locale_) == 125)
    {
      v19 = (unsigned __int8 *)&v12->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v11, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_41;
  }
  if (v14 == a3)
    goto LABEL_41;
  v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
  if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
  {
    v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2) == a3)
      goto LABEL_41;
    v17 = v16 - 48;
    while (1)
    {
      v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
      if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38)
        break;
      if (v17 >= 214748364)
        goto LABEL_43;
      v17 = v16 + 10 * v17 - 48;
      v14 = (std::basic_regex<char> *)((char *)v14 + 1);
      if (v14 == a3)
        goto LABEL_41;
    }
  }
  else
  {
    v17 = -1;
  }
  if (v14 == a3
    || (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1) == a3
    || v16 != 92
    || BYTE1(v14->__traits_.__loc_.__locale_) != 125)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  v18 = (unsigned __int8 *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 125);
  if (v17 != -1)
  {
    if (v17 >= v11)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v17, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v18;
    }
LABEL_43:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v5;
  char *v6;
  int v9;
  std::__node<char> *v10;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  v6 = a2 + 1;
  v5 = *a2;
  if (a2 + 1 == a3 && v5 == 36)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
    return a2 + 1;
  }
  else
  {
    if (v6 != a3 && v5 == 92)
    {
      v9 = *v6;
      if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
        return a2 + 2;
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    }
    if (v5 != 46)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    v10 = (std::__node<char> *)operator new(0x10uLL);
    end = this->__end_;
    first = end->__first_;
    v10->__vftable = (std::__node<char>_vtbl *)&unk_24F0321E0;
    v10[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  std::basic_regex<char> *v8;
  int locale_low;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::basic_regex<char> *v22;
  std::basic_regex<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2
    && (v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(a1, a2, a3), v8 == a2))
  {
    if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46)
    {
      v14 = operator new(0x10uLL);
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v15 + 8);
      *v14 = &unk_24F0321E0;
      v14[1] = v16;
      *(_QWORD *)(v15 + 8) = v14;
LABEL_14:
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, (char *)a2, (char *)a3);
    if (v8 != a2)
      goto LABEL_25;
  }
  else if (v8 != a2)
  {
    goto LABEL_25;
  }
  if (v8 == a3)
  {
LABEL_25:
    if (v8 != a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return a2;
  }
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v10 = operator new(0x18uLL);
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
      goto LABEL_13;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = operator new(0x18uLL);
        v19 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        *v18 = &unk_24F031FE8;
        v18[1] = v21;
        *((_DWORD *)v18 + 4) = v19;
        *(_QWORD *)(v20 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v22 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v22 == a3 || (v23 = v22, LOBYTE(v22->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v24 = operator new(0x18uLL);
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *v24 = &unk_24F032030;
        v24[1] = v26;
        *((_DWORD *)v24 + 4) = v19;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v8 = (std::basic_regex<char> *)((char *)&v23->__traits_.__loc_.__locale_ + 1);
      goto LABEL_25;
    case '^':
      v10 = operator new(0x18uLL);
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
LABEL_13:
      v17 = *(_QWORD *)(v12 + 8);
      *v10 = v13 + 16;
      v10[1] = v17;
      *((_BYTE *)v10 + 16) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      goto LABEL_14;
  }
  return a2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_)
        return this;
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::basic_regex<char>::value_type *v4;
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type *result;
  _BOOL4 v7;
  uint64_t v8;

  v3 = this;
  if (this == a3)
    return (std::basic_regex<char>::value_type *)v3;
  v4 = (char *)&this->__traits_.__loc_.__locale_ + 1;
  if ((std::basic_regex<char> *)((char *)&v3->__traits_.__loc_.__locale_ + 1) == a3
    || LOBYTE(v3->__traits_.__loc_.__locale_) != 92)
  {
    return (std::basic_regex<char>::value_type *)v3;
  }
  v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      return (char *)v3 + 2;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, (std::basic_regex<char>::value_type *)a3, 0);
      }
      else
      {
        v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        v8 = 2;
        if (!v7)
          v8 = 0;
        result = (char *)v3 + v8;
      }
      break;
  }
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  int v9;
  int v10;
  const std::vector<std::csub_match>::value_type *v11;
  int v12;
  const char *i;
  std::vector<std::csub_match>::pointer begin;
  std::sub_match<const char *> *first;
  std::sub_match<const char *> *second;
  uint64_t result;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0)
    this[4].__end_ = a2;
  LOBYTE(this[4].__begin_) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) != 0)goto LABEL_28;
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28;
LABEL_13:
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      v12 = v9 | 0x80;
      for (i = (char *)&a2->first + 1; i != (const char *)a3; ++i)
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
          }
          else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)i, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
          {
            goto LABEL_28;
          }
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      }
      std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a3, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
      }
      else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
      {
        goto LABEL_28;
      }
    }
    result = 0;
    this->__end_ = this->__begin_;
    return result;
  }
  if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) == 0)goto LABEL_13;
LABEL_28:
  if (this->__end_ == this->__begin_)
    begin = (std::vector<std::csub_match>::pointer)v11;
  else
    begin = this->__begin_;
  first = (std::sub_match<const char *> *)begin->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)begin->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)begin->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *this, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  std::vector<std::ssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  std::vector<std::ssub_match>::pointer v25;
  std::sub_match<std::__wrap_iter<const char *>> *v26;

  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  begin = this->__begin_;
  end = this->__end_;
  v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      end = (std::vector<std::ssub_match>::pointer)((char *)begin + 8 * ((a4[1] - *a4) >> 3));
      this->__end_ = end;
    }
  }
  else
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v11 - v14);
    begin = this->__begin_;
    end = this->__end_;
  }
  if (end != begin)
  {
    v15 = 0;
    v16 = 0;
    v18 = *a4;
    v17 = a4[1];
    do
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      v20 = (_QWORD *)(v18 + v15 * 24);
      if (v19 <= v16)
        v21 = a4 + 3;
      else
        v21 = v20;
      begin[v15].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v21 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16)
        v22 = (uint64_t)(a4 + 3);
      else
        v22 = *a4 + v15 * 24;
      this->__begin_[v15].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *(_QWORD *)(v22 + 8) - v10);
      v18 = *a4;
      v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16)
        v23 = (uint64_t)(a4 + 3);
      else
        v23 = *a4 + v15 * 24;
      v24 = *(_BYTE *)(v23 + 16);
      begin = this->__begin_;
      v25 = this->__end_;
      this->__begin_[v15].matched = v24;
      ++v16;
      ++v15;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)begin) >> 3));
  }
  this[1].__begin_ = a3;
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  v26 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  this[2].__begin_ = v26;
  this[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(this[2].__end_cap_.__value_) = *((_BYTE *)a4 + 64);
  this[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  this[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(this[3].__end_cap_.__value_) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    this[4].__end_ = v26;
  LOBYTE(this[4].__begin_) = *((_BYTE *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::vector<std::pair<unsigned long, const char *>> *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void **v85;
  void **v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t *v92;
  uint64_t v93;
  char v94;
  _BYTE v97[96];
  __int128 v98;
  __int128 v99;
  __int128 v100;

  v99 = 0u;
  v100 = 0u;
  v98 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    v85 = (void **)*((_QWORD *)&v98 + 1);
    v86 = (void **)v99;
    *((_QWORD *)&v100 + 1) = 0;
    v87 = v99 - *((_QWORD *)&v98 + 1);
    if ((_QWORD)v99 - *((_QWORD *)&v98 + 1) < 0x11uLL)
      goto LABEL_81;
    do
    {
LABEL_80:
      operator delete(*v85);
      v86 = (void **)v99;
      v85 = (void **)(*((_QWORD *)&v98 + 1) + 8);
      *((_QWORD *)&v98 + 1) = v85;
      v87 = v99 - (_QWORD)v85;
    }
    while ((_QWORD)v99 - (_QWORD)v85 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)v97 = 0;
  memset(&v97[8], 0, 85);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v98);
  v11 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (((_QWORD)v100 + *((_QWORD *)&v100 + 1)) / 0x2AuLL))
      + 96 * (((_QWORD)v100 + *((_QWORD *)&v100 + 1)) % 0x2AuLL);
  v12 = *(_OWORD *)&v97[16];
  *(_OWORD *)v11 = *(_OWORD *)v97;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  memset(&v97[32], 0, 24);
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  memset(&v97[56], 0, 24);
  v13 = *(_QWORD *)&v97[80];
  *(_QWORD *)(v11 + 85) = *(_QWORD *)&v97[85];
  *(_QWORD *)(v11 + 80) = v13;
  v15 = *((_QWORD *)&v100 + 1);
  v14 = v100;
  v16 = ++*((_QWORD *)&v100 + 1);
  v17 = *((_QWORD *)&v98 + 1);
  v18 = *(unsigned int *)(a1 + 32);
  v19 = v100 + v15;
  v20 = 8 * (v19 / 0x2A);
  v21 = 96 * (v19 % 0x2A);
  v22 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + v20) + v21;
  *(_DWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 24) = a3;
  v23 = *(_QWORD *)(v17 + v20) + v21;
  v26 = *(_QWORD *)(v23 + 56);
  v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  v25 = v26;
  v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  v92 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27)
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    v16 = *((_QWORD *)&v100 + 1);
    v14 = v100;
    v17 = *((_QWORD *)&v98 + 1);
  }
  v93 = 0;
  v94 = 0;
  v28 = 0;
  v29 = v14 + v16 - 1;
  v30 = 8 * (v29 / 0x2A);
  v31 = 96 * (v29 % 0x2A);
  *(_QWORD *)(*(_QWORD *)(v17 + v30) + v31 + 80) = v6;
  v32 = a3 - a2;
  v33 = *(_QWORD *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(_BYTE *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v35 = v16 + v100 - 1;
    v36 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v35 / 0x2A));
    v37 = v35 % 0x2A;
    v38 = v36 + 96 * (v35 % 0x2A);
    v40 = (_QWORD *)(v38 + 80);
    v39 = *(_QWORD *)(v38 + 80);
    if (v39)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v36 + 96 * v37);
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        v41 = *(_QWORD *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != a3)
          goto LABEL_21;
        v65 = v41 - *(_QWORD *)(v36 + 96 * v37 + 8);
        v66 = v93;
        if ((v94 & (v93 >= v65)) == 0)
          v66 = v65;
        if (v66 == v32)
        {
          v67 = (void **)*((_QWORD *)&v98 + 1);
          v68 = v99;
          if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          {
            *((_QWORD *)&v100 + 1) = 0;
            v82 = 0;
          }
          else
          {
            v69 = (_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * ((unint64_t)v100 / 0x2A));
            v70 = (_QWORD *)(*v69 + 96 * ((unint64_t)v100 % 0x2A));
            v71 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * ((*((_QWORD *)&v100 + 1) + (_QWORD)v100) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v100 + 1) + (_QWORD)v100) % 0x2AuLL);
            if (v70 != (_QWORD *)v71)
            {
              do
              {
                v72 = (void *)v70[7];
                if (v72)
                {
                  v70[8] = v72;
                  operator delete(v72);
                }
                v73 = (void *)v70[4];
                if (v73)
                {
                  v70[5] = v73;
                  operator delete(v73);
                }
                v70 += 12;
                if ((_QWORD *)((char *)v70 - *v69) == (_QWORD *)4032)
                {
                  v74 = (_QWORD *)v69[1];
                  ++v69;
                  v70 = v74;
                }
              }
              while (v70 != (_QWORD *)v71);
              v67 = (void **)*((_QWORD *)&v98 + 1);
              v68 = v99;
            }
            *((_QWORD *)&v100 + 1) = 0;
            v82 = v68 - (_QWORD)v67;
            if (v82 >= 0x11)
            {
              do
              {
                operator delete(*v67);
                v67 = (void **)(*((_QWORD *)&v98 + 1) + 8);
                *((_QWORD *)&v98 + 1) = v67;
                v82 = v99 - (_QWORD)v67;
              }
              while ((_QWORD)v99 - (_QWORD)v67 > 0x10uLL);
            }
          }
          if (v82 >> 3 == 1)
          {
            v83 = 21;
          }
          else
          {
            if (v82 >> 3 != 2)
            {
LABEL_76:
              v94 = 1;
              v93 = a3 - a2;
              goto LABEL_8;
            }
            v83 = 42;
          }
          *(_QWORD *)&v100 = v83;
          goto LABEL_76;
        }
        v93 = v66;
        v75 = *((_QWORD *)&v100 + 1) + v100 - 1;
        v76 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v75 / 0x2A));
        v77 = v75 % 0x2A;
        v78 = *(void **)(v76 + 96 * (v75 % 0x2A) + 56);
        if (v78)
        {
          *(_QWORD *)(v76 + 96 * v77 + 64) = v78;
          operator delete(v78);
        }
        v79 = *(void **)(v76 + 96 * v77 + 32);
        if (v79)
        {
          *(_QWORD *)(v76 + 96 * v77 + 40) = v79;
          operator delete(v79);
        }
        v80 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v81 = v100;
        --*((_QWORD *)&v100 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v80 = 0;
        if ((unint64_t)(v80 - (*((_QWORD *)&v81 + 1) + v81) + 1) >= 0x54)
        {
          operator delete(*(void **)(v99 - 8));
          *(_QWORD *)&v99 = v99 - 8;
        }
        v94 = 1;
LABEL_8:
        v16 = *((_QWORD *)&v100 + 1);
        if (*((_QWORD *)&v100 + 1))
          continue;
        if ((v94 & 1) != 0)
        {
          v84 = *v92;
          *(_QWORD *)v84 = a2;
          *(_QWORD *)(v84 + 8) = a2 + v93;
          v6 = 1;
          *(_BYTE *)(v84 + 16) = 1;
          goto LABEL_79;
        }
        v6 = 0;
        v85 = (void **)*((_QWORD *)&v98 + 1);
        v86 = (void **)v99;
        *((_QWORD *)&v100 + 1) = 0;
        v87 = v99 - *((_QWORD *)&v98 + 1);
        if ((_QWORD)v99 - *((_QWORD *)&v98 + 1) >= 0x11uLL)
          goto LABEL_80;
LABEL_81:
        v88 = v87 >> 3;
        if (v88 == 1)
        {
          v89 = 21;
LABEL_85:
          *(_QWORD *)&v100 = v89;
        }
        else if (v88 == 2)
        {
          v89 = 42;
          goto LABEL_85;
        }
        if (v85 != v86)
        {
          do
          {
            v90 = *v85++;
            operator delete(v90);
          }
          while (v85 != v86);
          if ((_QWORD)v99 != *((_QWORD *)&v98 + 1))
            *(_QWORD *)&v99 = v99 + ((*((_QWORD *)&v98 + 1) - v99 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v98)
          operator delete((void *)v98);
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        v49 = v100;
        if (!(_QWORD)v100)
        {
          std::deque<std::__state<char>>::__add_front_capacity((uint64_t)&v98);
          v49 = v100;
        }
        v50 = (_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v49 / 0x2A));
        v51 = *v50 + 96 * (v49 % 0x2A);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v51 = 0;
        if (v51 == *v50)
          v51 = *(v50 - 1) + 4032;
        v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        v53 = v36 + 96 * v37;
        *(_QWORD *)(v51 - 56) = 0;
        *(_QWORD *)(v51 - 48) = 0;
        *(_QWORD *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(_QWORD *)(v51 - 48) = *(_QWORD *)(v53 + 48);
        *(_QWORD *)(v53 + 32) = 0;
        *(_QWORD *)(v53 + 40) = 0;
        *(_QWORD *)(v53 + 48) = 0;
        *(_QWORD *)(v51 - 40) = 0;
        *(_QWORD *)(v51 - 32) = 0;
        *(_QWORD *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(_QWORD *)(v51 - 24) = *(_QWORD *)(v53 + 72);
        *(_QWORD *)(v53 + 56) = 0;
        *(_QWORD *)(v53 + 64) = 0;
        *(_QWORD *)(v53 + 72) = 0;
        v54 = *v40;
        *(_QWORD *)(v51 - 11) = *(_QWORD *)(v38 + 85);
        *(_QWORD *)(v51 - 16) = v54;
        v55 = *((_QWORD *)&v100 + 1);
        *(_QWORD *)&v100 = v100 - 1;
        ++*((_QWORD *)&v100 + 1);
        v56 = v55 + v100;
        v57 = (v55 + (uint64_t)v100) / 0x2AuLL;
        v43 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * v57);
        v44 = v56 - 42 * v57;
        v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45)
          goto LABEL_23;
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        v42 = *((_QWORD *)&v100 + 1) + v100 - 1;
        v43 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v42 / 0x2A));
        v44 = v42 % 0x2A;
        v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(_QWORD *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(_QWORD *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        v47 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v48 = v100;
        --*((_QWORD *)&v100 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v47 = 0;
        if ((unint64_t)(v47 - (*((_QWORD *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v99 - 8));
          *(_QWORD *)&v99 = v99 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v97[64] = v58;
        *(_OWORD *)&v97[80] = v58;
        *(_OWORD *)&v97[32] = v58;
        *(_OWORD *)&v97[48] = v58;
        *(_OWORD *)v97 = v58;
        *(_OWORD *)&v97[16] = v58;
        std::__state<char>::__state((uint64_t)v97, (__int128 *)(v36 + 96 * v37));
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v97[80] + 24))(*(_QWORD *)&v97[80], 0, v97);
        v59 = *((_QWORD *)&v98 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v60 = 0;
        else
          v60 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v61 = *((_QWORD *)&v100 + 1) + v100;
        if (v60 == *((_QWORD *)&v100 + 1) + (_QWORD)v100)
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v98);
          v59 = *((_QWORD *)&v98 + 1);
          v61 = *((_QWORD *)&v100 + 1) + v100;
        }
        v62 = *(_QWORD *)(v59 + 8 * (v61 / 0x2A)) + 96 * (v61 % 0x2A);
        v63 = *(_OWORD *)&v97[16];
        *(_OWORD *)v62 = *(_OWORD *)v97;
        *(_OWORD *)(v62 + 16) = v63;
        *(_QWORD *)(v62 + 40) = 0;
        *(_QWORD *)(v62 + 48) = 0;
        *(_QWORD *)(v62 + 32) = 0;
        *(_OWORD *)(v62 + 32) = *(_OWORD *)&v97[32];
        *(_QWORD *)(v62 + 48) = *(_QWORD *)&v97[48];
        memset(&v97[32], 0, 24);
        *(_QWORD *)(v62 + 56) = 0;
        *(_QWORD *)(v62 + 64) = 0;
        *(_QWORD *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)&v97[56];
        *(_QWORD *)(v62 + 72) = *(_QWORD *)&v97[72];
        memset(&v97[56], 0, 24);
        v64 = *(_QWORD *)&v97[80];
        *(_QWORD *)(v62 + 85) = *(_QWORD *)&v97[85];
        *(_QWORD *)(v62 + 80) = v64;
        ++*((_QWORD *)&v100 + 1);
        if (*(_QWORD *)&v97[56])
        {
          *(_QWORD *)&v97[64] = *(_QWORD *)&v97[56];
          operator delete(*(void **)&v97[56]);
        }
        if (*(_QWORD *)&v97[32])
        {
          *(_QWORD *)&v97[40] = *(_QWORD *)&v97[32];
          operator delete(*(void **)&v97[32]);
        }
        goto LABEL_8;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_227A7F628(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_227A7F63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::__state<char>::~__state((uint64_t *)va);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v11 - 144));
  _Unwind_Resume(a1);
}

void sub_227A7F684(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_227A7F698(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  const char *v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  char *v24;
  const char *v25;
  char *v26;
  void *v27;
  void *v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  void *v55;
  uint64_t *v57;
  const char *v58;
  const char *v59;
  char v60;
  _BYTE v62[96];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v64[40];
  void *v65[2];
  _BYTE v66[40];
  char *v67;
  char *v68;
  unint64_t v69;

  v67 = 0;
  v68 = 0;
  v69 = 0;
  *(_DWORD *)&v66[36] = -1431655766;
  *(_QWORD *)v64 = 0xAAAAAAAA00000000;
  memset(&v64[8], 0, 32);
  *(_OWORD *)v65 = 0u;
  memset(v66, 0, 36);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_63;
  __x.second = a3;
  *(_QWORD *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)v62 = 0;
  memset(&v62[8], 0, 85);
  v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
  if (*(_QWORD *)&v62[56])
  {
    *(_QWORD *)&v62[64] = *(_QWORD *)&v62[56];
    operator delete(*(void **)&v62[56]);
  }
  if (*(_QWORD *)&v62[32])
  {
    *(_QWORD *)&v62[40] = *(_QWORD *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  v12 = v68;
  *((_DWORD *)v68 - 24) = 0;
  *((_QWORD *)v12 - 11) = a2;
  *((_QWORD *)v12 - 10) = a2;
  *((_QWORD *)v12 - 9) = a3;
  v13 = *((_QWORD *)v12 - 8);
  v14 = *(unsigned int *)(a1 + 28);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v12 - 7) - v13) >> 3);
  if (v14 <= v15)
  {
    if (v14 < v15)
      *((_QWORD *)v12 - 7) = v13 + 24 * v14;
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v12 - 64), v14 - v15, &__x);
    v12 = v68;
  }
  v16 = *((_QWORD *)v12 - 5);
  v17 = *(unsigned int *)(a1 + 32);
  v18 = (*((_QWORD *)v12 - 4) - v16) >> 4;
  v57 = a4;
  if (v17 <= v18)
  {
    if (v17 < v18)
      *((_QWORD *)v12 - 4) = v16 + 16 * v17;
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v12 - 40), v17 - v18);
    v12 = v68;
  }
  v60 = 0;
  v19 = 0;
  v20 = (const char *)(a3 - a2);
  *((_QWORD *)v12 - 2) = v6;
  *((_DWORD *)v12 - 2) = a5;
  v59 = 0;
  *(v12 - 4) = a6;
  v58 = a3;
  do
  {
    v21 = (++v19 & 0xFFF) != 0 || (int)(v19 >> 12) < (int)v20;
    if (!v21)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v23 = v12 - 16;
    v22 = *((_QWORD *)v12 - 2);
    v24 = v12 - 96;
    if (v22)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v12 - 96);
    switch(*(_DWORD *)v24)
    {
      case 0xFFFFFC18:
        v25 = (const char *)*((_QWORD *)v12 - 10);
        if ((a5 & 0x20) != 0 && v25 == a2 || (a5 & 0x1000) != 0 && v25 != v58)
          goto LABEL_29;
        v33 = &v25[-*((_QWORD *)v12 - 11)];
        v34 = v59;
        if ((v60 & ((uint64_t)v59 >= (uint64_t)v33)) == 0)
        {
          v35 = *((_OWORD *)v12 - 5);
          *(_OWORD *)v64 = *(_OWORD *)v24;
          *(_OWORD *)&v64[16] = v35;
          if (v64 != v24)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char **)&v64[32], *((char **)v12 - 8), *((char **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((uint64_t)v66, *((const double **)v12 - 5), *((const double **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          }
          v36 = *(_QWORD *)v23;
          *(_QWORD *)&v66[29] = *(_QWORD *)(v12 - 11);
          *(_QWORD *)&v66[24] = v36;
          v34 = v33;
        }
        v37 = v68;
        if (v34 == v20)
        {
          v38 = v67;
          while (v37 != v38)
          {
            v39 = (void *)*((_QWORD *)v37 - 5);
            if (v39)
            {
              *((_QWORD *)v37 - 4) = v39;
              operator delete(v39);
            }
            v40 = (void *)*((_QWORD *)v37 - 8);
            if (v40)
            {
              *((_QWORD *)v37 - 7) = v40;
              operator delete(v40);
            }
            v37 -= 96;
          }
          v68 = v38;
          v60 = 1;
          v59 = v20;
        }
        else
        {
          v59 = v34;
          v41 = (void *)*((_QWORD *)v68 - 5);
          if (v41)
          {
            *((_QWORD *)v68 - 4) = v41;
            operator delete(v41);
          }
          v42 = (void *)*((_QWORD *)v37 - 8);
          if (v42)
          {
            *((_QWORD *)v37 - 7) = v42;
            operator delete(v42);
          }
          v68 = v37 - 96;
          v60 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        v26 = v68;
        v27 = (void *)*((_QWORD *)v68 - 5);
        if (v27)
        {
          *((_QWORD *)v68 - 4) = v27;
          operator delete(v27);
        }
        v28 = (void *)*((_QWORD *)v26 - 8);
        if (v28)
        {
          *((_QWORD *)v26 - 7) = v28;
          operator delete(v28);
        }
        v68 = v26 - 96;
        break;
      case 0xFFFFFC20:
        *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v62[64] = v29;
        *(_OWORD *)&v62[80] = v29;
        *(_OWORD *)&v62[32] = v29;
        *(_OWORD *)&v62[48] = v29;
        *(_OWORD *)v62 = v29;
        *(_OWORD *)&v62[16] = v29;
        std::__state<char>::__state((uint64_t)v62, (__int128 *)v12 - 6);
        (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v23 + 24))(*(_QWORD *)v23, 1, v12 - 96);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v62[80] + 24))(*(_QWORD *)&v62[80], 0, v62);
        v30 = v68;
        if ((unint64_t)v68 >= v69)
        {
          v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
          if (*(_QWORD *)&v62[56])
          {
            *(_QWORD *)&v62[64] = *(_QWORD *)&v62[56];
            operator delete(*(void **)&v62[56]);
          }
        }
        else
        {
          v31 = *(_OWORD *)&v62[16];
          *(_OWORD *)v68 = *(_OWORD *)v62;
          *((_OWORD *)v30 + 1) = v31;
          *((_QWORD *)v30 + 4) = 0;
          *((_QWORD *)v30 + 5) = 0;
          *((_QWORD *)v30 + 6) = 0;
          *((_QWORD *)v30 + 7) = 0;
          *((_OWORD *)v30 + 2) = *(_OWORD *)&v62[32];
          *((_QWORD *)v30 + 6) = *(_QWORD *)&v62[48];
          memset(&v62[32], 0, 24);
          *((_QWORD *)v30 + 8) = 0;
          *((_QWORD *)v30 + 9) = 0;
          *(_OWORD *)(v30 + 56) = *(_OWORD *)&v62[56];
          *((_QWORD *)v30 + 9) = *(_QWORD *)&v62[72];
          memset(&v62[56], 0, 24);
          v32 = *(_QWORD *)&v62[80];
          *(_QWORD *)(v30 + 85) = *(_QWORD *)&v62[85];
          *((_QWORD *)v30 + 10) = v32;
          v68 = v30 + 96;
        }
        if (*(_QWORD *)&v62[32])
        {
          *(_QWORD *)&v62[40] = *(_QWORD *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    v12 = v68;
  }
  while (v67 != v68);
  if ((v60 & 1) == 0)
  {
LABEL_63:
    v49 = 0;
    v50 = *(void **)v66;
    if (!*(_QWORD *)v66)
      goto LABEL_65;
    goto LABEL_64;
  }
  v43 = *v57;
  *(_QWORD *)v43 = a2;
  *(_QWORD *)(v43 + 8) = &v59[(_QWORD)a2];
  *(_BYTE *)(v43 + 16) = 1;
  if (v65[0] != *(void **)&v64[32])
  {
    v44 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65[0] - *(_QWORD *)&v64[32]) >> 3);
    v45 = (_BYTE *)(*(_QWORD *)&v64[32] + 16);
    v46 = 1;
    do
    {
      v47 = v43 + 24 * v46;
      *(_OWORD *)v47 = *((_OWORD *)v45 - 1);
      v48 = *v45;
      v45 += 24;
      *(_BYTE *)(v47 + 16) = v48;
      v21 = v44 > v46++;
    }
    while (v21);
  }
  v49 = 1;
  v50 = *(void **)v66;
  if (*(_QWORD *)v66)
  {
LABEL_64:
    *(_QWORD *)&v66[8] = v50;
    operator delete(v50);
  }
LABEL_65:
  if (*(_QWORD *)&v64[32])
  {
    v65[0] = *(void **)&v64[32];
    operator delete(*(void **)&v64[32]);
  }
  v51 = v67;
  if (v67)
  {
    v52 = v68;
    v53 = v67;
    if (v68 != v67)
    {
      do
      {
        v54 = (void *)*((_QWORD *)v52 - 5);
        if (v54)
        {
          *((_QWORD *)v52 - 4) = v54;
          operator delete(v54);
        }
        v55 = (void *)*((_QWORD *)v52 - 8);
        if (v55)
        {
          *((_QWORD *)v52 - 7) = v55;
          operator delete(v55);
        }
        v52 -= 96;
      }
      while (v52 != v51);
      v53 = v67;
    }
    v68 = v51;
    operator delete(v53);
  }
  return v49;
}

void sub_227A7FC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a35);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v35 - 120));
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::clear(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v11 = 0;
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 / 0x2A];
    v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 + 7);
        if (v8)
        {
          *((_QWORD *)v6 + 8) = v8;
          operator delete(v8);
        }
        v9 = (void *)*((_QWORD *)v6 + 4);
        if (v9)
        {
          *((_QWORD *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (_BYTE *)*v5 == 4032)
        {
          v10 = (char *)v5[1];
          ++v5;
          v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
    a1[5] = 0;
    v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v12 = a1[2];
        v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        v11 = v12 - (_QWORD)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v13 = 42;
  }
  a1[4] = v13;
}

void **std::deque<std::__state<char>>::~deque[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  _BYTE *v5;
  _BYTE *v6;

  std::deque<std::__state<char>>::clear(a1);
  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    v6 = a1[1];
    v5 = a1[2];
    if (v5 != v6)
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  BOOL v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v32 = (v5 - v9) >> 2;
      if (v5 == v9)
        v32 = 1;
      if (!(v32 >> 61))
      {
        v33 = v32 >> 2;
        v34 = 8 * v32;
        v35 = (char *)operator new(8 * v32);
        v36 = &v35[8 * v33];
        v37 = &v35[v34];
        v39 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            v73 = &v35[8 * v33];
            v41 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v40 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v41 = &v36[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v41 = &v35[8 * v33];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v41 = v80;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v89);
    v42 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v42 + 1);
    v8 = *v42;
    *(_QWORD *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v43 = (v5 - v9) >> 2;
      if (v5 == v9)
        v43 = 1;
      if (!(v43 >> 61))
      {
        v44 = v43 >> 2;
        v45 = 8 * v43;
        v35 = (char *)operator new(8 * v43);
        v36 = &v35[8 * v44];
        v37 = &v35[v45];
        v46 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            v81 = &v35[8 * v44];
            v48 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v47 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v48 = &v36[v83];
              v7 += v83;
              v84 = (__int128 *)(v42 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v48 = &v35[8 * v44];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v48 = v88;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v35;
        *(_QWORD *)(a1 + 8) = v36;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFC0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v30 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v49 = 1;
      else
        v49 = v20 >> 2;
      if (v49 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v27 = (char *)operator new(8 * v49);
      v28 = &v27[8 * v49];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v27;
      *(_QWORD *)v27 = v30;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v31 = v21 + 2;
      if (v21 >= -1)
        v31 = v21 + 1;
      v27 -= 8 * (v31 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    goto LABEL_49;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_49:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v25)
            v57 = 1;
          else
            v57 = (v28 - v25) >> 2;
          if (v57 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v58 = (char *)operator new(8 * v57);
          v59 = v58;
          v60 = (v57 + 3) >> 2;
          v27 = &v58[8 * v60];
          v61 = v29 - v25;
          v38 = v29 == v25;
          v29 = v27;
          if (!v38)
          {
            v29 = &v27[v61 & 0xFFFFFFFFFFFFFFF8];
            v62 = v61 - 8;
            v63 = &v58[8 * v60];
            v64 = v25;
            if (v62 < 0x38)
              goto LABEL_89;
            v65 = 8 * v60;
            v63 = &v58[8 * v60];
            v64 = v25;
            if ((unint64_t)(v63 - v25) < 0x20)
              goto LABEL_89;
            v66 = (v62 >> 3) + 1;
            v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            v63 = &v27[v67];
            v64 = &v25[v67];
            v68 = (__int128 *)(v25 + 16);
            v69 = &v58[v65 + 16];
            v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v71 = *v68;
              *((_OWORD *)v69 - 1) = *(v68 - 1);
              *(_OWORD *)v69 = v71;
              v68 += 2;
              v69 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_89:
              do
              {
                v72 = *(_QWORD *)v64;
                v64 += 8;
                *(_QWORD *)v63 = v72;
                v63 += 8;
              }
              while (v63 != v29);
            }
          }
          v28 = &v58[8 * v57];
          operator delete(v25);
          v25 = v59;
        }
        else
        {
          v53 = (v28 - v29) >> 3;
          if (v53 >= -1)
            v54 = v53 + 1;
          else
            v54 = v53 + 2;
          v55 = v54 >> 1;
          v27 = &v25[8 * (v54 >> 1)];
          v56 = v25;
          if (v29 != v25)
          {
            memmove(v27, v25, v29 - v25);
            v56 = v29;
          }
          v29 = (char *)v56 + 8 * v55;
        }
      }
      v52 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v27 - 1) = v52;
      v27 -= 8;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
  }
LABEL_45:
  v51 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v51)
    operator delete(v51);
}

void sub_227A803C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<std::__state<char>>::__add_front_capacity(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  BOOL v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  void *v46;
  void *v47;

  v3 = *(uint64_t **)(a1 + 8);
  v2 = *(uint64_t **)(a1 + 16);
  v4 = v2 - v3;
  if (v2 == v3)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v5 - (*(_QWORD *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(_QWORD *)(a1 + 32) = v6 + 42;
    v47 = (void *)*(v2 - 1);
    *(_QWORD *)(a1 + 16) = v2 - 1;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
    return;
  }
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(uint64_t **)a1;
  v9 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v47);
      v43 = *(_QWORD *)(a1 + 16);
      v47 = *(void **)(v43 - 8);
      *(_QWORD *)(a1 + 16) = v43 - 8;
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
        goto LABEL_9;
    }
    else
    {
      v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
      {
LABEL_9:
        v10 = 21;
LABEL_45:
        *(_QWORD *)(a1 + 32) = v10;
        return;
      }
    }
    v10 = *(_QWORD *)(a1 + 32) + 42;
    goto LABEL_45;
  }
  if (v7 == v8)
    v11 = 1;
  else
    v11 = v9 >> 2;
  if (v11 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v12 = (char *)operator new(8 * v11);
  v13 = operator new(0xFC0uLL);
  v14 = v13;
  if (v11)
  {
    v15 = &v12[8 * v11];
    *(_QWORD *)v12 = v13;
    v16 = v12 + 8;
    if (v3 != v2)
    {
LABEL_16:
      v17 = v12;
      while (1)
      {
        if (v16 == v15)
        {
          if (v17 <= v12)
          {
            if (v16 == v12)
              v26 = 1;
            else
              v26 = (v16 - v12) >> 2;
            if (v26 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v27 = (char *)operator new(8 * v26);
            v28 = v27;
            v29 = v26 >> 2;
            v18 = &v27[8 * (v26 >> 2)];
            v31 = v16 - v17;
            v30 = v16 == v17;
            v16 = v18;
            if (!v30)
            {
              v16 = &v18[v31 & 0xFFFFFFFFFFFFFFF8];
              v32 = v31 - 8;
              if (v32 < 0x38 || (v33 = 8 * v29, (unint64_t)(&v27[8 * v29] - v17) < 0x20))
              {
                v34 = &v27[8 * (v26 >> 2)];
                v35 = v17;
                goto LABEL_35;
              }
              v37 = (v32 >> 3) + 1;
              v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
              v34 = &v18[v38];
              v35 = &v17[v38];
              v39 = (__int128 *)(v17 + 16);
              v40 = &v27[v33 + 16];
              v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v42 = *v39;
                *((_OWORD *)v40 - 1) = *(v39 - 1);
                *(_OWORD *)v40 = v42;
                v39 += 2;
                v40 += 32;
                v41 -= 4;
              }
              while (v41);
              if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_35:
                  v36 = *(_QWORD *)v35;
                  v35 += 8;
                  *(_QWORD *)v34 = v36;
                  v34 += 8;
                }
                while (v34 != v16);
              }
            }
            v15 = &v27[8 * v26];
            if (v12)
              operator delete(v12);
            v12 = v28;
            goto LABEL_18;
          }
          v20 = (v17 - v12) >> 3;
          if (v20 >= -1)
            v21 = v20 + 1;
          else
            v21 = v20 + 2;
          v22 = v21 >> 1;
          v23 = &v17[-8 * (v21 >> 1)];
          v24 = v16;
          if (v16 != v17)
          {
            memmove(v23, v17, v16 - v17);
            v24 = v17;
          }
          v25 = -v22;
          v15 = v16;
          v16 = &v23[v16 - v17];
          v18 = &v24[8 * v25];
        }
        else
        {
          v18 = v17;
        }
LABEL_18:
        v19 = *v3++;
        *(_QWORD *)v16 = v19;
        v16 += 8;
        v17 = v18;
        if (v3 == *(uint64_t **)(a1 + 16))
          goto LABEL_48;
      }
    }
  }
  else
  {
    v44 = (char *)operator new(8uLL);
    v15 = v44 + 8;
    operator delete(v12);
    v3 = *(uint64_t **)(a1 + 8);
    v45 = *(uint64_t **)(a1 + 16);
    v12 = v44;
    *(_QWORD *)v44 = v14;
    v16 = v44 + 8;
    if (v3 != v45)
      goto LABEL_16;
  }
  v18 = v12;
LABEL_48:
  v46 = *(void **)a1;
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = v15;
  if (v16 - v18 == 8)
  {
    *(_QWORD *)(a1 + 32) = 21;
    if (v46)
LABEL_50:
      operator delete(v46);
  }
  else
  {
    *(_QWORD *)(a1 + 32) += 42;
    if (v46)
      goto LABEL_50;
  }
}

void sub_227A80A7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char **a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v18 = a1[1];
    v17 = a1 + 1;
    v14 = v18;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_OWORD *)v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      v16 = v24 - result;
      v14 = result;
    }
    else
    {
      v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      v21 = v14;
      if (v20 != a3)
      {
        v22 = v14;
        do
        {
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    v16 = v15 - v14;
    v17 = a1 + 1;
  }
  *v17 = &v14[v16];
  return result;
}

double *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8;
  double *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  int64_t v15;
  _QWORD *v16;
  double *v17;
  int64_t v18;
  unint64_t v19;
  const double *v20;
  unint64_t v21;
  double *v22;
  const double *v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  __int128 v28;
  unint64_t v29;
  char *v30;
  const double *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  BOOL v37;
  char v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  const double *v42;
  double *v43;
  uint64_t v44;
  const double *v45;
  double *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  const double *v56;
  double *v57;
  uint64_t v58;
  const double *v59;
  double *v60;
  float64x2x2_t v61;
  float64x2x2_t v62;
  float64x2x2_t v63;
  float64x2x2_t v64;

  v8 = *(_QWORD *)(a1 + 16);
  result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_62;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37)
      v11 = v10;
    if (v11 >> 60)
LABEL_62:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = 2 * v11;
    result = (double *)operator new(16 * v11);
    v13 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v14 = result;
    if (a2 != a3)
    {
      result = (double *)memcpy(result, a2, ((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0);
      v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0));
    }
    v15 = (char *)v14 - (char *)v13;
    v16 = (_QWORD *)(a1 + 8);
    goto LABEL_29;
  }
  v17 = *(double **)(a1 + 8);
  v16 = (_QWORD *)(a1 + 8);
  v13 = v17;
  v18 = (char *)v17 - (char *)result;
  v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      v30 = (char *)result;
    }
    else
    {
      v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             v48 = (char *)result + v47,
             v49 = (unint64_t)a2 + v47,
             v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (v51 = 1),
            v51 ? (v52 = 0) : (v52 = 1),
            v48 > (char *)a2 ? (v53 = (unint64_t)result >= v49) : (v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        v30 = (char *)result;
        v31 = a2;
      }
      else
      {
        v54 = (v29 >> 4) + 1;
        v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        v30 = (char *)&result[v55];
        v31 = &a2[v55];
        v56 = a2 + 4;
        v57 = result + 4;
        v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = v56 - 4;
          v62 = vld2q_f64(v59);
          v64 = vld2q_f64(v56);
          v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
      do
      {
        v32 = *(_QWORD *)v31;
        v33 = *((_QWORD *)v31 + 1);
        v31 += 2;
        *(_QWORD *)v30 = v32;
        *((_QWORD *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    v15 = v30 - (char *)result;
    v13 = result;
    goto LABEL_29;
  }
  v20 = &a2[2 * v19];
  if (v13 != result)
  {
    v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           v35 = (char *)result + v34 - 8,
           v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (v37 = 1),
          v37 ? (v38 = 0) : (v38 = 1),
          v35 > (char *)a2 ? (v39 = (unint64_t)result >= v36) : (v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      v22 = result;
      v23 = a2;
    }
    else
    {
      v40 = (v21 >> 4) + 1;
      v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      v22 = &result[v41];
      v23 = &a2[v41];
      v42 = a2 + 4;
      v43 = result + 4;
      v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v45 = v42 - 4;
        v61 = vld2q_f64(v45);
        v63 = vld2q_f64(v42);
        v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_18;
    }
    do
    {
      v24 = *(_QWORD *)v23;
      v25 = *((_QWORD *)v23 + 1);
      v23 += 2;
      *(_QWORD *)v22 = v24;
      *((_QWORD *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  v26 = v13;
  if (v20 != a3)
  {
    v27 = v13;
    do
    {
      v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *v16 = (char *)v13 + v15;
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::sub_match<std::__wrap_iter<const char *>> *value;
  std::vector<std::ssub_match>::pointer end;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::sub_match<std::__wrap_iter<const char *>> *v11;
  std::vector<std::ssub_match>::size_type v12;
  std::sub_match<std::__wrap_iter<const char *>> *v13;
  std::vector<std::ssub_match>::size_type v14;
  std::sub_match<std::__wrap_iter<const char *>> *v15;
  std::sub_match<std::__wrap_iter<const char *>> *v16;
  std::vector<std::ssub_match>::pointer begin;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v11 = &end[__n];
      v12 = 24 * __n;
      do
      {
        end->first.__i_ = 0;
        end->second.__i_ = 0;
        end->matched = 0;
        ++end;
        v12 -= 24;
      }
      while (v12);
      end = v11;
    }
    this->__end_ = end;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v7 = v6 + __n;
    if (v6 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v6];
    v14 = 24 * __n;
    v15 = &v13[__n];
    v16 = v13;
    do
    {
      v16->first.__i_ = 0;
      v16->second.__i_ = 0;
      v16->matched = 0;
      ++v16;
      v14 -= 24;
    }
    while (v14);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v18 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(_QWORD *)&v13[-1].matched = *(_QWORD *)&end[-1].matched;
        v13[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v18;
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v9];
    if (end)
      operator delete(end);
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(uint64_t a1, uint64_t a2, int a3)
{
  const std::locale *v6;
  uint64_t v7;
  char *v8;

  v6 = (const std::locale *)MEMORY[0x22E2A4798]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x24BEDB350]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x24BEDB4B0]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (char *)a2;
  else
    v8 = *(char **)a2;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (&v8[v7] != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(a1, v8, &v8[v7]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_227A811BC(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_227A811D8(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int v12;

  v6 = operator new(8uLL);
  *v6 = &unk_24F031B38;
  v7 = operator new(0x10uLL);
  v7[1] = v6;
  v8 = operator new(0x20uLL);
  *v8 = &unk_24F031B90;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (!v9)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    v12 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v12 <= 0x3F)
    {
LABEL_6:
      if (!v12)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      if (v12 != 16)
      {
        if (v12 != 32)
LABEL_19:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
        return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, a3);
    }
  }
  else
  {
LABEL_5:
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    v12 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v12 <= 0x3F)
      goto LABEL_6;
  }
  if (v12 == 64)
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  if (v12 == 128)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v12 != 256)
    goto LABEL_19;
  return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
}

void sub_227A813A0(_Unwind_Exception *a1)
{
  void *v1;
  void (__cdecl ***v2)(std::__owns_one_state<char> *__hidden);

  operator delete(v1);
  operator delete(v2);
  (*(void (**)(void *))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_227A813DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  std::basic_regex<char> *v8;
  std::__owns_one_state<char> *v9;
  unsigned int marked_count;
  std::basic_regex<char> *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;
  std::__node<char> *v20;
  std::__owns_one_state<char> *v21;
  std::basic_regex<char> *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  std::basic_regex<char> *v26;
  std::__node<char> *v27;
  std::__owns_one_state<char> *v28;
  std::__node<char> *v29;

  end = a1->__end_;
  v7 = a2;
  while (1)
  {
    v8 = (std::basic_regex<char> *)v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v7, a3);
    if (v8 == (std::basic_regex<char> *)v7)
      break;
LABEL_2:
    if (v7 == (char *)v8)
      goto LABEL_6;
  }
  v9 = a1->__end_;
  marked_count = a1->__marked_count_;
  v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
  if (v8 != v11)
  {
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 != (std::basic_regex<char> *)a2)
  {
    if (v8 != (std::basic_regex<char> *)a3)
      goto LABEL_14;
    return a3;
  }
  v12 = (std::__node<char> *)operator new(0x10uLL);
  v13 = a1->__end_;
  first = v13->__first_;
  v12[1].__vftable = (std::__node<char>_vtbl *)first;
  v13->__first_ = v12;
  a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  if (v8 != (std::basic_regex<char> *)a3)
  {
LABEL_14:
    if (LOBYTE(v8->__traits_.__loc_.__locale_) != 124)
      return (char *)v8;
    v21 = a1->__end_;
    v22 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v23 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (1)
    {
      v8 = (std::basic_regex<char> *)v23;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v23, a3);
      if (v8 == (std::basic_regex<char> *)v23)
      {
        v24 = a1->__end_;
        v25 = a1->__marked_count_;
        v26 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
        if (v8 == v26)
        {
LABEL_11:
          if (v8 == v22)
          {
            v27 = (std::__node<char> *)operator new(0x10uLL);
            v28 = a1->__end_;
            v29 = v28->__first_;
            v27[1].__vftable = (std::__node<char>_vtbl *)v29;
            v28->__first_ = v27;
            a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          }
          v15 = (std::__node<char> *)operator new(0x18uLL);
          v16 = v21->__first_;
          v15[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
          v15[2].__vftable = (std::__node<char>_vtbl *)v16;
          v15->__vftable = (std::__node<char>_vtbl *)&unk_24F032150;
          end->__first_ = v15;
          v21->__first_ = 0;
          v17 = (std::__node<char> *)operator new(0x10uLL);
          v18 = a1->__end_->__first_;
          v17[1].__vftable = (std::__node<char>_vtbl *)v18;
          v21->__first_ = v17;
          a1->__end_->__first_ = 0;
          v19 = (std::__node<char> *)operator new(0x10uLL);
          v20 = v21->__first_;
          v19->__vftable = (std::__node<char>_vtbl *)&unk_24F032198;
          v19[1].__vftable = (std::__node<char>_vtbl *)v20;
          a1->__end_->__first_ = v19;
          a1->__end_ = (std::__owns_one_state<char> *)v21->__first_;
          if (v8 == (std::basic_regex<char> *)a3)
            return a3;
          goto LABEL_14;
        }
        v23 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v26, (std::basic_regex<char> *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
      }
      if (v23 == (char *)v8)
        goto LABEL_11;
    }
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  std::basic_regex<char> *v3;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  std::__owns_one_state<char> *v11;
  int v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3)
    return a2;
  if (*a2 == 94)
  {
    v6 = operator new(0x18uLL);
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v6 = &unk_24F031C88;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      v10 = v3;
      v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, (uint64_t)v10, a3);
      if (v10 != v13)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v10 != (_BYTE *)v3)
          continue;
      }
      if (v10 + 1 != a3 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v14 = operator new(0x18uLL);
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *v14 = &unk_24F031CD0;
      v14[1] = v17;
      *((_BYTE *)v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::basic_regex<char> *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_12;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
LABEL_12:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3)
    return a3;
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if ((std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1) == v11)
      goto LABEL_12;
    do
    {
      v8 = v11;
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10)
      goto LABEL_12;
    v12 = operator new(0x18uLL);
    v13 = *(_QWORD *)(v9 + 8);
    v12[1] = *(_QWORD *)(v6 + 8);
    v12[2] = v13;
    *v12 = &unk_24F032150;
    *(_QWORD *)(v6 + 8) = v12;
    *(_QWORD *)(v9 + 8) = 0;
    v14 = operator new(0x10uLL);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v14[1] = v15;
    *(_QWORD *)(v9 + 8) = v14;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v16 = operator new(0x10uLL);
    v17 = *(_QWORD *)(v9 + 8);
    *v16 = &unk_24F032198;
    v16[1] = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
    if (v8 == a3)
      return a3;
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(v6 + 8);
    v9[1] = v10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v11 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v11 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (char *)memchr(v11, 10, a3 - v11);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v11)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_24F032150;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_24F032198;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v11 = v22;
    else
      v11 = v22 + 1;
  }
  while (v11 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  _QWORD *v9;
  uint64_t v10;
  std::basic_regex<char> *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::basic_regex<char> *v21;
  std::basic_regex<char> *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(v6 + 8);
    v9[1] = v10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v11)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_24F032150;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_24F032198;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v11 = v22;
    else
      v11 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
  }
  while (v11 != a3);
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v6;
  int v7;
  __int128 v8;
  char *v9;
  unsigned int v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unsigned int marked_count;
  std::basic_regex<char> v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v17 = a2[1];
        if (v17 == 66)
        {
          v18 = (char *)operator new(0x30uLL);
          v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v18 = &unk_24F031D18;
          *((_QWORD *)v18 + 1) = v20;
          std::locale::locale((std::locale *)v18 + 2, (const std::locale *)a1);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(a1 + 8);
          v18[40] = 1;
        }
        else
        {
          if (v17 != 98)
            return v3;
          v18 = (char *)operator new(0x30uLL);
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v18 = &unk_24F031D18;
          *((_QWORD *)v18 + 1) = v19;
          std::locale::locale((std::locale *)v18 + 2, (const std::locale *)a1);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(a1 + 8);
          v18[40] = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return v3 + 2;
      }
      return v3;
    }
    if (v6 != 94)
      return v3;
    v11 = operator new(0x18uLL);
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
LABEL_17:
    *v11 = v15 + 16;
    v11[1] = v14;
    *((_BYTE *)v11 + 16) = v12;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 == 36)
  {
    v11 = operator new(0x18uLL);
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3)
    return v3;
  v7 = a2[2];
  if (v7 == 33)
  {
    *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v23.__loop_count_ = v21;
    *(_OWORD *)&v23.__start_.__cntrl_ = v21;
    *(_OWORD *)&v23.__traits_.__loc_.__locale_ = v21;
    *(_OWORD *)&v23.__traits_.__col_ = v21;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v23);
    v23.__flags_ = *(_DWORD *)(a1 + 24);
    v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v23, v3 + 3, a3);
    marked_count = v23.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v23, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v9 == a3 || *v9 != 41)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    goto LABEL_27;
  }
  if (v7 != 61)
    return v3;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v23.__loop_count_ = v8;
  *(_OWORD *)&v23.__start_.__cntrl_ = v8;
  *(_OWORD *)&v23.__traits_.__loc_.__locale_ = v8;
  *(_OWORD *)&v23.__traits_.__col_ = v8;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v23);
  v23.__flags_ = *(_DWORD *)(a1 + 24);
  v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v23, v3 + 3, a3);
  v10 = v23.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v23, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v10;
  if (v9 == a3 || *v9 != 41)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_27:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v23.__traits_.__loc_);
  return v9 + 1;
}

void sub_227A81F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_227A81FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_227A81FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_227A81FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::basic_regex<char> *v6;
  std::basic_regex<char> *result;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;
  unsigned int marked_count;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  std::basic_regex<char> *v15;
  std::basic_regex<char> *v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *v19;

  v3 = a2;
  if (a2 == a3)
    return v3;
  switch(LOBYTE(a2->__traits_.__loc_.__locale_))
  {
    case '(':
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3)
        goto LABEL_26;
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
        && BYTE1(a2->__traits_.__loc_.__locale_) == 63
        && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
      {
        ++this->__open_count_;
        v6 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, a3);
        if (v6 != a3 && LOBYTE(v6->__traits_.__loc_.__locale_) == 41)
        {
          --this->__open_count_;
          return (std::basic_regex<char> *)((char *)&v6->__traits_.__loc_.__locale_ + 1);
        }
LABEL_26:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((this->__flags_ & 2) != 0)
      {
        marked_count = this->__marked_count_;
      }
      else
      {
        v11 = (std::__node<char> *)operator new(0x18uLL);
        marked_count = this->__marked_count_ + 1;
        this->__marked_count_ = marked_count;
        end = this->__end_;
        first = end->__first_;
        v11->__vftable = (std::__node<char>_vtbl *)&unk_24F031FE8;
        v11[1].__vftable = (std::__node<char>_vtbl *)first;
        LODWORD(v11[2].__vftable) = marked_count;
        end->__first_ = v11;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      ++this->__open_count_;
      v15 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, a3);
      if (v15 == a3)
        goto LABEL_26;
      v16 = v15;
      if (LOBYTE(v15->__traits_.__loc_.__locale_) != 41)
        goto LABEL_26;
      if ((this->__flags_ & 2) == 0)
      {
        v17 = (std::__node<char> *)operator new(0x18uLL);
        v18 = this->__end_;
        v19 = v18->__first_;
        v17->__vftable = (std::__node<char>_vtbl *)&unk_24F032030;
        v17[1].__vftable = (std::__node<char>_vtbl *)v19;
        LODWORD(v17[2].__vftable) = marked_count;
        v18->__first_ = v17;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      result = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
      break;
    case ')':
    case ',':
    case '-':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    case '*':
    case '+':
    case '?':
      goto LABEL_25;
    case '.':
      v8 = (std::__node<char> *)operator new(0x10uLL);
      v9 = this->__end_;
      v10 = v9->__first_;
      v8->__vftable = (std::__node<char>_vtbl *)&unk_24F031DA8;
      v8[1].__vftable = (std::__node<char>_vtbl *)v10;
      v9->__first_ = v8;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return (std::basic_regex<char> *)((char *)v3 + 1);
    case '[':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, (char *)a3);
    case '\\':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    default:
      if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123)
LABEL_25:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v6;
  int locale_low;
  std::basic_regex<char> *v8;
  std::basic_regex<char> *v9;
  char *v10;
  size_t v11;
  char *v13;
  int v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  std::basic_regex<char> *v19;
  unsigned __int8 *v20;
  BOOL v21;
  std::basic_regex<char> *v22;
  BOOL v23;
  char *v24;
  size_t v25;
  std::basic_regex<char> *v26;
  int v27;
  int v28;
  std::basic_regex<char> *v29;
  int v30;
  std::basic_regex<char> *v31;
  _BYTE *v32;

  if (this == a3)
    return this;
  v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6)
        v21 = 1;
      else
        v21 = v9 == a3;
      if (!v21 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v11 = 0;
        goto LABEL_36;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v25 = 0;
      goto LABEL_45;
    }
    v8 = this;
    if (locale_low == 43)
    {
      v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v11 = 1;
LABEL_36:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v10;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v25 = 1;
      goto LABEL_45;
    }
    return v8;
  }
  if (locale_low == 63)
  {
    v22 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6)
      v23 = 1;
    else
      v23 = v22 == a3;
    if (v23 || LOBYTE(v22->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v22;
    }
    else
    {
      v24 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v24;
    }
  }
  else
  {
    v8 = this;
    if (locale_low != 123)
      return v8;
    v13 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_72;
    v14 = *v13;
    if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      goto LABEL_72;
    v15 = v14 - 48;
    v16 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_21:
      v16 = (char *)a3;
    }
    else
    {
      while (1)
      {
        v17 = *v16;
        if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38)
          break;
        if (v15 >= 214748364)
          goto LABEL_72;
        v15 = v17 + 10 * v15 - 48;
        if (++v16 == (char *)a3)
          goto LABEL_21;
      }
    }
    if (v16 == v13)
      goto LABEL_72;
    if (v16 == (char *)a3)
      goto LABEL_73;
    v18 = *v16;
    if (v18 != 44)
    {
      if (v18 == 125)
      {
        v19 = (std::basic_regex<char> *)(v16 + 1);
        if (v6 || v19 == a3 || LOBYTE(v19->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 1);
          return v19;
        }
        else
        {
          v20 = (unsigned __int8 *)(v16 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v20;
        }
      }
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    v26 = (std::basic_regex<char> *)(v16 + 1);
    if (v16 + 1 == (char *)a3)
      goto LABEL_72;
    v27 = LOBYTE(v26->__traits_.__loc_.__locale_);
    if (v27 == 125)
    {
      v9 = (std::basic_regex<char> *)(v16 + 2);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v11 = v15;
        v10 = v16 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        goto LABEL_36;
      }
      v25 = v15;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
LABEL_45:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v25, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v9;
    }
    if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38)
      goto LABEL_73;
    v28 = v27 - 48;
    v29 = (std::basic_regex<char> *)(v16 + 2);
    if (v29 == a3)
    {
LABEL_61:
      v29 = a3;
    }
    else
    {
      while (1)
      {
        v30 = LOBYTE(v29->__traits_.__loc_.__locale_);
        if ((v30 & 0xF8) != 0x30 && (v30 & 0xFE) != 0x38)
          break;
        if (v28 >= 214748364)
          goto LABEL_72;
        v28 = v30 + 10 * v28 - 48;
        v29 = (std::basic_regex<char> *)((char *)v29 + 1);
        if (v29 == a3)
          goto LABEL_61;
      }
    }
    if (v29 == v26 || v29 == a3 || LOBYTE(v29->__traits_.__loc_.__locale_) != 125)
LABEL_73:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v28 < v15)
      goto LABEL_72;
    v31 = (std::basic_regex<char> *)((char *)&v29->__traits_.__loc_.__locale_ + 1);
    if (v6 || v31 == a3 || LOBYTE(v31->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 1);
      return v31;
    }
    else
    {
      v32 = (char *)&v29->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v32;
    }
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  int v8;
  unsigned int v9;
  int v11;
  unsigned __int8 *v12;

  if (a2 == a3)
    return a2;
  v4 = a2;
  if (*a2 == 92)
  {
    v6 = a2 + 1;
    if (a2 + 1 == a3)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    v8 = *v6;
    v9 = v8 - 48;
    if (v8 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
      return a2 + 2;
    }
    if ((v8 - 49) <= 8)
    {
      v4 = a2 + 2;
      if (a2 + 2 == a3)
      {
        v4 = a3;
      }
      else
      {
        while (1)
        {
          v11 = *v4;
          if ((v11 - 48) > 9)
            break;
          if (v9 >= 0x19999999)
            goto LABEL_24;
          ++v4;
          v9 = v11 + 10 * v9 - 48;
          if (v4 == a3)
          {
            v4 = a3;
            break;
          }
        }
        if (!v9)
LABEL_24:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      if (v9 > this->__marked_count_)
        goto LABEL_24;
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v9);
      if (v4 != v6)
        return v4;
    }
    v4 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 1, a3);
    if (v6 == v4)
    {
      v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, a2 + 1, a3, 0);
      if (v6 == v12)
        return a2;
      else
        return v12;
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  void *v8;
  char *v9;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == a3)
      goto LABEL_20;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_20;
    do
    {
      v9 = v7;
      v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v7, a3, (uint64_t)v8);
    }
    while (v9 != v7);
    if (v9 == a3)
      goto LABEL_20;
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_227A828F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *result;

  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  _DWORD *v5;
  _DWORD *v6;
  int v7;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v6;
        *(_QWORD *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_227A82B44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_227A82B58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_227A82B6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_227A82B80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_227A82B94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_227A82BA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  unsigned __int8 *result;
  unsigned int v8;
  std::basic_regex<char>::value_type v10;
  int v11;
  int v12;
  unsigned __int8 v13;
  char v14;
  unsigned __int8 v15;
  char v16;
  std::basic_regex<char>::value_type v17;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3 || (char)v4[1] < 65)
        goto LABEL_85;
      v8 = v4[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u)
        goto LABEL_85;
      v10 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v10;
        *((_BYTE *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v10);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        v11 = v4[1];
        if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            v12 = *v4;
            if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38 || (v12 | 0x20u) - 97 < 6)
              goto LABEL_42;
          }
        }
      }
      goto LABEL_85;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        v6 = 11;
LABEL_68:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_42:
      if (v4 + 1 == a3)
        goto LABEL_85;
      v13 = v4[1];
      v14 = -48;
      if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38)
        goto LABEL_47;
      v13 |= 0x20u;
      if ((v13 - 97) >= 6u)
        goto LABEL_85;
      v14 = -87;
LABEL_47:
      if (v4 + 2 == a3)
        goto LABEL_85;
      v15 = v4[2];
      v16 = -48;
      if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
      {
        v15 |= 0x20u;
        if ((v15 - 97) >= 6u)
LABEL_85:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        v16 = -87;
      }
      v17 = v15 + 16 * (v13 + v14) + v16;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v17;
      *((_BYTE *)a4 + 1) = 0;
      result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0)
        goto LABEL_85;
      if (!a4)
        goto LABEL_68;
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v5;
      *((_BYTE *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v4;
  int64_t v5;
  int v6;
  char *v7;
  char *v8;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  char *v19;
  int v20;
  _BYTE *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  char *v25;
  uint64_t v26;
  int v27;
  int v28;
  std::basic_regex<char>::value_type *v29;
  char *v30;
  _BYTE *v31;
  int v32;
  void **v33;
  _BYTE *v34;
  char *v35;
  void *v37[2];
  uint64_t v38;
  void *v39[2];
  uint64_t v40;
  void *__p[2];
  uint64_t v42;
  __int128 v43;
  int64_t v44;

  v4 = a2;
  v5 = a2 - a3;
  if (a2 == a3)
    return a2;
  v6 = *a2;
  v7 = a2;
  if (v6 == 93)
    return v7;
  v8 = (char *)a4;
  v11 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v42 = 0;
  if (a2 + 1 == a3 || v6 != 91)
  {
LABEL_36:
    v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_39;
  }
  v12 = a2[1];
  if (v12 != 46)
  {
    if (v12 == 58)
    {
      v14 = (uint64_t)(a2 + 2);
      if (a3 - (v4 + 2) < 2)
        goto LABEL_91;
      v15 = 0;
      v16 = v5 + 4;
      v17 = (unsigned __int8 *)v4;
      v18 = v16;
      if (v4[2] == 58)
        goto LABEL_15;
      do
      {
        do
        {
          if (!v18)
            goto LABEL_91;
          v17 = (unsigned __int8 *)&v4[++v15];
          v18 = v16 + v15;
        }
        while (v4[v15 + 2] != 58);
LABEL_15:
        ;
      }
      while (v17[3] != 93);
      v19 = &v4[v15 + 2];
      if (v19 == a3)
LABEL_91:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      v20 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, v14, v19, *(_DWORD *)(a1 + 24) & 1);
      if (!v20)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
      v13 = 0;
      *((_DWORD *)v8 + 40) |= v20;
      v8 = &v4[v15 + 4];
      v7 = v4;
      if (SHIBYTE(v42) < 0)
        goto LABEL_70;
      goto LABEL_71;
    }
    if (v12 == 61)
    {
      v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
      v13 = 0;
      v7 = v4;
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_71;
      goto LABEL_70;
    }
    v11 = 0;
    goto LABEL_36;
  }
  v21 = a2 + 2;
  if (a3 - (v4 + 2) < 2)
    goto LABEL_92;
  v22 = (unsigned __int8 *)(v4 + 2);
  v23 = (unsigned __int8 *)(v4 + 3);
  if (*v21 == 46)
    goto LABEL_24;
  do
  {
    do
    {
      if (a3 - 4 == v4)
        goto LABEL_92;
      ++v4;
      v22 = v23;
      v24 = *v23++;
    }
    while (v24 != 46);
LABEL_24:
    ;
  }
  while (*v23 != 93);
  if (v22 == (unsigned __int8 *)a3)
LABEL_92:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)v21, v4 + 2, (uint64_t)&v43);
  if (SHIBYTE(v42) < 0)
    operator delete(__p[0]);
  v42 = v44;
  *(_OWORD *)__p = v43;
  v25 = (char *)HIBYTE(v44);
  v11 = SHIBYTE(v44);
  v26 = *((_QWORD *)&v43 + 1);
  if (v44 < 0)
    v25 = (char *)__p[1];
  if ((unint64_t)(v25 - 1) >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  v4 = (char *)(v22 + 2);
  v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v44 >= 0)
    v26 = HIBYTE(v44);
  if (v26)
  {
    if (v4 == a3)
      goto LABEL_52;
    goto LABEL_51;
  }
LABEL_39:
  if ((v27 | 0x40) != 0x40)
  {
    LOBYTE(v28) = *v4;
LABEL_44:
    if (v11 < 0)
    {
      v31 = __p[0];
      __p[1] = (void *)1;
      *(_BYTE *)__p[0] = v28;
      v31[1] = 0;
      if (++v4 == a3)
        goto LABEL_52;
    }
    else
    {
      HIBYTE(v42) = 1;
      LOWORD(__p[0]) = v28;
      if (++v4 == a3)
        goto LABEL_52;
    }
    goto LABEL_51;
  }
  v28 = *v4;
  if (v28 != 92)
    goto LABEL_44;
  v29 = v4 + 1;
  if (v27)
    v30 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v29, a3, (uint64_t *)__p);
  else
    v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v29, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v8);
  v4 = v30;
  if (v30 == a3)
  {
LABEL_52:
    if (SHIBYTE(v42) < 0)
    {
      if (!__p[1])
        goto LABEL_69;
      if (__p[1] != (void *)1)
      {
        v33 = (void **)__p[0];
LABEL_68:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v8, *(char *)v33, *((char *)v33 + 1));
LABEL_69:
        v13 = 1;
        v7 = v4;
        if ((SHIBYTE(v42) & 0x80000000) == 0)
          goto LABEL_71;
        goto LABEL_70;
      }
      v33 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v42))
        goto LABEL_69;
      v33 = __p;
      if (HIBYTE(v42) != 1)
        goto LABEL_68;
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, *(char *)v33);
    goto LABEL_69;
  }
LABEL_51:
  v32 = *v4;
  if (v32 == 93)
    goto LABEL_52;
  v34 = v4 + 1;
  if (v4 + 1 == a3 || v32 != 45 || *v34 == 93)
    goto LABEL_52;
  v43 = 0uLL;
  v44 = 0;
  v7 = v4 + 2;
  if (v4 + 2 == a3 || *v34 != 91 || *v7 != 46)
  {
    if ((v27 | 0x40) == 0x40)
    {
      LODWORD(v34) = *v34;
      if ((_DWORD)v34 == 92)
      {
        if (v27)
          v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4 + 2, a3, (uint64_t *)&v43);
        else
          v35 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v4 + 2, (unsigned __int8 *)a3, (uint64_t)&v43, (uint64_t)v8);
        goto LABEL_81;
      }
    }
    else
    {
      LOBYTE(v34) = *v34;
    }
    HIBYTE(v44) = 1;
    LOWORD(v43) = v34;
    goto LABEL_82;
  }
  v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v4 + 3, a3, (uint64_t)&v43);
LABEL_81:
  v7 = v35;
LABEL_82:
  *(_OWORD *)v39 = *(_OWORD *)__p;
  v40 = v42;
  __p[1] = 0;
  v42 = 0;
  __p[0] = 0;
  *(_OWORD *)v37 = v43;
  v38 = v44;
  v43 = 0uLL;
  v44 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v8, (char *)v39, (uint64_t)v37);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(v37[0]);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_84:
      if ((SHIBYTE(v44) & 0x80000000) == 0)
        goto LABEL_85;
LABEL_89:
      operator delete((void *)v43);
      v13 = 1;
      if (SHIBYTE(v42) < 0)
        goto LABEL_70;
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_84;
  }
  operator delete(v39[0]);
  if (SHIBYTE(v44) < 0)
    goto LABEL_89;
LABEL_85:
  v13 = 1;
  if (SHIBYTE(v42) < 0)
LABEL_70:
    operator delete(__p[0]);
LABEL_71:
  if ((v13 & 1) != 0)
    return v7;
  return v8;
}

void sub_227A835AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  char *v11;
  void **v12;
  unint64_t v13;
  __int128 v14;
  void *v15;
  void **v16;
  void **v17;
  void *__p[3];
  void *v20[3];

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_39;
  v6 = a3 - 2;
  v7 = a2;
  v8 = a2;
  v9 = a2 + 1;
  if (*a2 != 61)
    goto LABEL_5;
LABEL_4:
  if (*v9 != 93)
  {
LABEL_5:
    while (a2 != v6)
    {
      ++v7;
      --v6;
      v8 = v9;
      v10 = *v9++;
      if (v10 == 61)
        goto LABEL_4;
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v8 == a3)
    goto LABEL_39;
  memset(v20, 170, sizeof(v20));
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v7, (uint64_t)v20);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
    v11 = (char *)HIBYTE(v20[2]);
    if (HIBYTE(v20[2]))
    {
      memset(__p, 170, sizeof(__p));
      v12 = v20;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v11 = (char *)v20[1];
  if (!v20[1])
    goto LABEL_40;
  memset(__p, 170, sizeof(__p));
  v12 = (void **)v20[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v12, &v11[(_QWORD)v12], (_BYTE **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      v13 = *(_QWORD *)(a4 + 144);
      if (v13 >= *(_QWORD *)(a4 + 152))
      {
        *(_QWORD *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v14 = *(_OWORD *)__p;
          *(void **)(v13 + 16) = __p[2];
          *(_OWORD *)v13 = v14;
        }
        *(_QWORD *)(a4 + 144) = v13 + 24;
        *(_QWORD *)(a4 + 144) = v13 + 24;
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  v15 = (void *)HIBYTE(v20[2]);
  if (SHIBYTE(v20[2]) < 0)
    v15 = v20[1];
  if (v15 == (void *)2)
  {
    v17 = v20;
    if (SHIBYTE(v20[2]) < 0)
      v17 = (void **)v20[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v17, *((char *)v17 + 1));
  }
  else
  {
    if (v15 != (void *)1)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    v16 = v20;
    if (SHIBYTE(v20[2]) < 0)
      v16 = (void **)v20[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v16);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v20[2]) < 0)
      goto LABEL_38;
    return v7 + 2;
  }
LABEL_33:
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
    return v7 + 2;
LABEL_38:
  operator delete(v20[0]);
  return v7 + 2;
}

void sub_227A838B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  unint64_t v14;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  v8 = a2 + 1;
  if (*a2 != 46)
    goto LABEL_5;
LABEL_4:
  if (*v8 != 93)
  {
LABEL_5:
    while (a2 != v5)
    {
      ++v6;
      --v5;
      v7 = v8;
      v9 = *v8++;
      if (v9 == 46)
        goto LABEL_4;
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v7 == a3)
    goto LABEL_15;
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v13;
  v10 = v14;
  *(_QWORD *)(a4 + 16) = v14;
  v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a4 + 8);
  if (v11 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type *v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  std::basic_regex<char>::value_type v11;

  if (a2 == a3)
LABEL_70:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v5;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_70;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (a4)
          goto LABEL_43;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        v8 = a3;
        if (a4)
          goto LABEL_43;
        goto LABEL_69;
      }
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      if (!a4)
        goto LABEL_69;
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return v8;
  }
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  char *v9;
  char *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  std::string v27;
  char __s[24];

  v5 = (unint64_t)&a3[-a2];
  memset(__s, 170, sizeof(__s));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    __s[23] = (_BYTE)a3 - a2;
    v9 = __s;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v16 = v5 | 7;
  v17 = v16 + 1;
  v9 = (char *)operator new(v16 + 1);
  *(_QWORD *)&__s[8] = v5;
  *(_QWORD *)&__s[16] = v17 | 0x8000000000000000;
  *(_QWORD *)__s = v9;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)&v9[-a2] < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
    do
    {
LABEL_15:
      v18 = *v11++;
      *v10++ = v18;
    }
    while (v11 != a3);
    goto LABEL_16;
  }
  v10 = &v9[v5 & 0xFFFFFFFFFFFFFFE0];
  v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
  v12 = (__int128 *)(a2 + 16);
  v13 = v9 + 16;
  v14 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v15 = *v12;
    *(v13 - 1) = *(v12 - 1);
    *v13 = v15;
    v12 += 2;
    v13 += 2;
    v14 -= 32;
  }
  while (v14);
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFE0))
    goto LABEL_15;
LABEL_16:
  *v10 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (__s[23] < 0)
  {
    v19 = *(char **)__s;
    if (!*(_QWORD *)&__s[8])
      goto LABEL_29;
  }
  else
  {
    if (!__s[23])
      return;
    v19 = __s;
  }
  std::__get_collation_name(&v27, v19);
  *(_OWORD *)a4 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  v20 = v27.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v27.__r_.__value_.__l + 2);
  v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a4 + 8);
  if (v21)
  {
LABEL_23:
    if ((__s[23] & 0x80000000) == 0)
      return;
    v19 = *(char **)__s;
LABEL_29:
    operator delete(v19);
    return;
  }
  if (__s[23] < 0)
  {
    v19 = *(char **)__s;
    v22 = *(_QWORD *)&__s[8];
    if (*(_QWORD *)&__s[8] >= 3uLL)
      goto LABEL_29;
    goto LABEL_31;
  }
  v22 = __s[23];
  if (__s[23] < 3u)
  {
    v19 = __s;
LABEL_31:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v27, *(_QWORD *)(a1 + 16), v19, &v19[v22]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v27;
    if (*(char *)(a4 + 23) < 0)
    {
      v24 = *(_QWORD *)(a4 + 8);
      if (v24 == 1 || v24 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] >= 0)
            v25 = __s;
          else
            v25 = *(char **)__s;
          if (__s[23] >= 0)
            v26 = __s[23];
          else
            v26 = *(_QWORD *)&__s[8];
          std::string::__assign_no_alias<false>((void **)a4, v25, v26);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v23 = *(unsigned __int8 *)(a4 + 23);
      if (v23 == 1 || v23 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] < 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a4, *(void **)__s, *(size_t *)&__s[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__s;
            *(_QWORD *)(a4 + 16) = *(_QWORD *)&__s[16];
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
    goto LABEL_23;
  }
}

void sub_227A84288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, BOOL a4)
{
  unint64_t v4;
  _OWORD *v9;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  void **v20;
  void **v21;
  uint64_t classname;
  void *__p[3];

  v4 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 > 0x16)
  {
    v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v16 = v4 | 7;
    v17 = v16 + 1;
    v9 = operator new(v16 + 1);
    __p[1] = (void *)v4;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v9 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v4 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)v9 + (v4 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v4 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = v9 + 1;
    v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v19 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v20, &v19[(_QWORD)v20]);
  if (SHIBYTE(__p[2]) >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  classname = std::__get_classname((const char *)v21, a4);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_227A84450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3)
{
  char *v6;
  int v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  int v16;
  std::basic_regex<char> *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (char *)a2, a3);
  if ((char *)a2 != v6 || (char *)a2 == a3 || (char *)(a2 + 1) == a3 || *(_BYTE *)a2 != 92)
    return v6;
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new(0x18uLL);
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *v10 = &unk_24F031FE8;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3)
        goto LABEL_23;
      v14 = v9;
      v15 = *(std::__owns_one_state<char> **)(a1 + 56);
      v16 = *(_DWORD *)(a1 + 28);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v14, a3);
      if (v14 == v17)
        break;
      v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v14 != v9);
    if ((char *)&v14->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v14->__traits_.__loc_.__locale_) != 92
      || BYTE1(v14->__traits_.__loc_.__locale_) != 41)
    {
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    v6 = (char *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 41);
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v18 = operator new(0x18uLL);
      v19 = *(_QWORD *)(a1 + 56);
      v20 = *(_QWORD *)(v19 + 8);
      *v18 = &unk_24F032030;
      v18[1] = v20;
      *((_DWORD *)v18 + 4) = v11;
      *(_QWORD *)(v19 + 8) = v18;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v6;
    }
    return v6;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return v6;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int locale_low;
  unsigned __int8 *v9;
  std::basic_regex<char> *v10;
  int v11;
  int v12;
  std::basic_regex<char> *v13;
  int v14;
  std::basic_regex<char> *v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;

  if (this == a3)
    return this;
  locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  v9 = (unsigned __int8 *)a3;
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return this;
  }
  v10 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v10 == a3)
    goto LABEL_45;
  v11 = LOBYTE(v10->__traits_.__loc_.__locale_);
  if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38)
    goto LABEL_45;
  v12 = v11 - 48;
  v13 = (std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_15:
    v13 = a3;
  }
  else
  {
    while (1)
    {
      v14 = LOBYTE(v13->__traits_.__loc_.__locale_);
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
        break;
      if (v12 >= 214748364)
        goto LABEL_45;
      v12 = v14 + 10 * v12 - 48;
      v13 = (std::basic_regex<char> *)((char *)v13 + 1);
      if (v13 == a3)
        goto LABEL_15;
    }
  }
  if (v13 == v10)
    goto LABEL_45;
  if (v13 == a3)
LABEL_46:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 1);
  v16 = LOBYTE(v13->__traits_.__loc_.__locale_);
  if (v16 != 44)
  {
    if (v15 != a3 && v16 == 92 && LOBYTE(v15->__traits_.__loc_.__locale_) == 125)
    {
      v19 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v12, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_46;
  }
  if (v15 == a3)
    goto LABEL_46;
  v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
  if ((v17 & 0xF8) == 0x30 || (v17 & 0xFE) == 0x38)
  {
    v18 = v17 - 48;
    v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_37:
      v15 = a3;
      goto LABEL_40;
    }
    while (1)
    {
      v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
      if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38)
        break;
      if (v18 >= 214748364)
        goto LABEL_45;
      v18 = v17 + 10 * v18 - 48;
      v15 = (std::basic_regex<char> *)((char *)v15 + 1);
      if (v15 == a3)
        goto LABEL_37;
    }
  }
  else
  {
    v18 = -1;
  }
  if (v15 == a3)
  {
    v20 = (unsigned __int8 *)v15;
    v15 = a3;
    v9 = v20;
  }
  else if ((std::basic_regex<char> *)((char *)&v15->__traits_.__loc_.__locale_ + 1) == a3 || v17 != 92)
  {
    v9 = (unsigned __int8 *)v15;
  }
  else
  {
    v9 = (unsigned __int8 *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 125);
  }
LABEL_40:
  if (v15 == (std::basic_regex<char> *)v9)
    goto LABEL_46;
  if (v18 != -1)
  {
    if (v18 >= v12)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v18, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v9;
    }
LABEL_45:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v9;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v5;
  char *v6;
  int v9;
  std::__node<char> *v10;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  v6 = a2 + 1;
  v5 = *a2;
  if (a2 + 1 == a3 && v5 == 36)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
    return a2 + 1;
  }
  else if (v6 != a3
         && v5 == 92
         && (v9 = *v6, (v9 - 36) <= 0x3A)
         && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
    return a2 + 2;
  }
  else
  {
    if (*a2 != 46)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
    v10 = (std::__node<char> *)operator new(0x10uLL);
    end = this->__end_;
    first = end->__first_;
    v10->__vftable = (std::__node<char>_vtbl *)&unk_24F0321E0;
    v10[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  std::basic_regex<char> *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int locale_low;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::basic_regex<char> *v22;
  std::basic_regex<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2)
  {
    v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char>::value_type *)a2, (std::basic_regex<char>::value_type *)a3);
    if (v8 == a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, (char *)a2, (char *)a3);
      }
      else
      {
        v9 = operator new(0x10uLL);
        v10 = *(_QWORD *)(a1 + 56);
        v11 = *(_QWORD *)(v10 + 8);
        *v9 = &unk_24F0321E0;
        v9[1] = v11;
        *(_QWORD *)(v10 + 8) = v9;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      }
    }
  }
  if (v8 != a2 || v8 == a3)
  {
LABEL_23:
    if (v8 != a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return a2;
  }
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v13 = operator new(0x18uLL);
      v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v15 = *(_QWORD *)(a1 + 56);
      goto LABEL_14;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = operator new(0x18uLL);
        v19 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        *v18 = &unk_24F031FE8;
        v18[1] = v21;
        *((_DWORD *)v18 + 4) = v19;
        *(_QWORD *)(v20 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v22 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v22 == a3 || (v23 = v22, LOBYTE(v22->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v24 = operator new(0x18uLL);
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *v24 = &unk_24F032030;
        v24[1] = v26;
        *((_DWORD *)v24 + 4) = v19;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v8 = (std::basic_regex<char> *)((char *)&v23->__traits_.__loc_.__locale_ + 1);
      goto LABEL_23;
    case '^':
      v13 = operator new(0x18uLL);
      v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v15 = *(_QWORD *)(a1 + 56);
LABEL_14:
      v17 = *(_QWORD *)(v15 + 8);
      *v13 = v16 + 16;
      v13[1] = v17;
      *((_BYTE *)v13 + 16) = v14;
      *(_QWORD *)(v15 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return a2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_)
        return this;
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  std::basic_regex<char>::value_type *v3;
  std::basic_regex<char>::value_type *v4;
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type *result;
  _BOOL4 v7;
  uint64_t v8;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
      }
      else
      {
        v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        v8 = 2;
        if (!v7)
          v8 = 0;
        result = &v3[v8];
      }
      break;
  }
  return result;
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  v11 = -86;
  MEMORY[0x22E2A46A8](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_227A84F54(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x227A84F20);
  }
  __cxa_rethrow();
}

void sub_227A84F98(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void checkError(AriSdk::MsgBase *a1@<X0>, uint64_t a2@<X1>, CFTypeRef *a3@<X8>)
{
  int v4;
  void *v5;
  CFTypeRef v6;
  std::string __p;
  CFTypeRef cf;
  std::string v9;

  *a3 = 0;
  memset(&v9, 170, sizeof(v9));
  checkErrorStr(a1, a2, (uint64_t)&v9);
  v4 = SHIBYTE(v9.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (void *)v9.__r_.__value_.__r.__words[0];
    if (!v9.__r_.__value_.__l.__size_)
    {
LABEL_16:
      operator delete(v5);
      return;
    }
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else
  {
    if (!*((_BYTE *)&v9.__r_.__value_.__s + 23))
      return;
    __p = v9;
  }
  CreateError();
  if (&cf != a3)
  {
    v6 = *a3;
    *a3 = cf;
    cf = 0;
    if (!v6)
      goto LABEL_11;
    CFRelease(v6);
  }
  if (cf)
    CFRelease(cf);
LABEL_11:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v4 & 0x80000000) == 0)
      return;
    goto LABEL_15;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v4 < 0)
  {
LABEL_15:
    v5 = (void *)v9.__r_.__value_.__r.__words[0];
    goto LABEL_16;
  }
}

void sub_227A850A0(_Unwind_Exception *a1)
{
  const void **v1;
  void *v2;

  operator delete(v2);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void sub_227A850C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17)
{
  const void **v17;
  int v18;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_3:
      ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v17);
      _Unwind_Resume(a1);
    }
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v17);
  _Unwind_Resume(a1);
}

void sub_227A85108(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

uint64_t checkErrorStr@<X0>(AriSdk::MsgBase *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  const void **v17;
  uint64_t v18;
  uint64_t result;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::ios_base *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t GMID;
  void **v33;
  uint64_t v34;
  char v35;
  size_t v36;
  void **v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  uint64_t v43;
  void *__p[2];
  int64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *v51[2];
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (!*((_BYTE *)a1 + 33))
  {
    result = (*(uint64_t (**)(AriSdk::MsgBase *))(*(_QWORD *)a1 + 32))(a1);
    if ((result & 1) != 0)
      return result;
    *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v53 = 0xAAAAAAAAAAAAAAAALL;
    v63 = v21;
    v62 = v21;
    v61 = v21;
    v60 = v21;
    v59 = v21;
    v58 = v21;
    v57 = v21;
    v56 = v21;
    v55 = v21;
    *(_OWORD *)v51 = v21;
    v52 = v21;
    v49 = v21;
    v50 = v21;
    v47 = v21;
    v48 = v21;
    v22 = MEMORY[0x24BEDB870];
    v23 = MEMORY[0x24BEDB870] + 64;
    v54 = MEMORY[0x24BEDB870] + 64;
    v8 = (uint64_t *)MEMORY[0x24BEDB800];
    v24 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
    v46 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
    *(uint64_t *)((char *)&v46 + *(_QWORD *)(v46 - 24)) = v24;
    v25 = (std::ios_base *)((char *)&v46 + *(_QWORD *)(v46 - 24));
    std::ios_base::init(v25, &v47);
    v25[1].__vftable = 0;
    v25[1].__fmtflags_ = -1;
    v46 = v22 + 24;
    v54 = v23;
    std::streambuf::basic_streambuf();
    v11 = MEMORY[0x24BEDB848];
    *(_QWORD *)&v47 = MEMORY[0x24BEDB848] + 16;
    *(_OWORD *)v51 = 0u;
    v52 = 0u;
    LODWORD(v53) = 16;
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Failed to ", 10);
    v27 = *(char *)(a2 + 23);
    if (v27 >= 0)
      v28 = a2;
    else
      v28 = *(_QWORD *)a2;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(a2 + 23);
    else
      v29 = *(_QWORD *)(a2 + 8);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)": BB responded with unexpected GMID: 0x", 39);
    GMID = AriSdk::MsgBase::getGMID(a1);
    ctu::hex((ctu *)((GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26)));
    if (v45 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v45 >= 0)
      v34 = HIBYTE(v45);
    else
      v34 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
    if (SHIBYTE(v45) < 0)
    {
      operator delete(__p[0]);
      v35 = v53;
      if ((v53 & 0x10) == 0)
      {
LABEL_26:
        if ((v35 & 8) == 0)
          goto LABEL_27;
        v38 = (const void *)v48;
        v36 = v49 - v48;
        if ((_QWORD)v49 - (_QWORD)v48 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_55:
          std::string::__throw_length_error[abi:ne180100]();
LABEL_40:
        if (v36 >= 0x17)
        {
          v43 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v36 | 7) != 0x17)
            v43 = v36 | 7;
          v40 = v43 + 1;
          v41 = (void **)operator new(v43 + 1);
          goto LABEL_46;
        }
LABEL_41:
        HIBYTE(v45) = v36;
        v37 = __p;
        if (!v36)
          goto LABEL_48;
        goto LABEL_47;
      }
    }
    else
    {
      v35 = v53;
      if ((v53 & 0x10) == 0)
        goto LABEL_26;
    }
    v42 = *((_QWORD *)&v52 + 1);
    if (*((_QWORD *)&v52 + 1) < (unint64_t)v50)
    {
      *((_QWORD *)&v52 + 1) = v50;
      v42 = v50;
    }
    v38 = (const void *)*((_QWORD *)&v49 + 1);
    v36 = v42 - *((_QWORD *)&v49 + 1);
    if ((unint64_t)(v42 - *((_QWORD *)&v49 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_55;
    goto LABEL_40;
  }
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53 = 0xAAAAAAAAAAAAAAAALL;
  v63 = v5;
  v62 = v5;
  v61 = v5;
  v60 = v5;
  v59 = v5;
  v58 = v5;
  v57 = v5;
  v56 = v5;
  v55 = v5;
  *(_OWORD *)v51 = v5;
  v52 = v5;
  v49 = v5;
  v50 = v5;
  v47 = v5;
  v48 = v5;
  v6 = MEMORY[0x24BEDB870];
  v7 = MEMORY[0x24BEDB870] + 64;
  v54 = MEMORY[0x24BEDB870] + 64;
  v8 = (uint64_t *)MEMORY[0x24BEDB800];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v46 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v46 + *(_QWORD *)(v46 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v46 + *(_QWORD *)(v46 - 24));
  std::ios_base::init(v10, &v47);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v46 = v6 + 24;
  v54 = v7;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v47 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)v51 = 0u;
  v52 = 0u;
  LODWORD(v53) = 16;
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Failed to ", 10);
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = a2;
  else
    v14 = *(_QWORD *)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": BB responded with NACK (is baseband resetting?)", 49);
  if ((v53 & 0x10) != 0)
  {
    v18 = *((_QWORD *)&v52 + 1);
    if (*((_QWORD *)&v52 + 1) < (unint64_t)v50)
    {
      *((_QWORD *)&v52 + 1) = v50;
      v18 = v50;
    }
    v17 = (const void **)&v49 + 1;
LABEL_31:
    v38 = *v17;
    v36 = v18 - (_QWORD)*v17;
    if (v36 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v36 >= 0x17)
    {
      v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v36 | 7) != 0x17)
        v39 = v36 | 7;
      v40 = v39 + 1;
      v41 = (void **)operator new(v39 + 1);
LABEL_46:
      v37 = v41;
      __p[1] = (void *)v36;
      v45 = v40 | 0x8000000000000000;
      __p[0] = v41;
LABEL_47:
      memmove(v37, v38, v36);
      goto LABEL_48;
    }
    goto LABEL_41;
  }
  if ((v53 & 8) != 0)
  {
    v17 = (const void **)&v48;
    v18 = v49;
    goto LABEL_31;
  }
LABEL_27:
  v36 = 0;
  HIBYTE(v45) = 0;
  v37 = __p;
LABEL_48:
  *((_BYTE *)v37 + v36) = 0;
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = *(_OWORD *)__p;
  *(_QWORD *)(a3 + 16) = v45;
  v46 = *v8;
  *(uint64_t *)((char *)&v46 + *(_QWORD *)(v46 - 24)) = v8[3];
  *(_QWORD *)&v47 = v11 + 16;
  if (SBYTE7(v52) < 0)
    operator delete(v51[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22E2A47D4](&v54);
}

void sub_227A855C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22E2A47D4](a1 + 112);
  return a1;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _QWORD v13[2];
  std::locale v14;

  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x22E2A46C0](v13, a1);
  if (LOBYTE(v13[0]))
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x22E2A46CC](v13);
  return a1;
}

void sub_227A85818(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x22E2A46CC](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x227A857F8);
}

void sub_227A85860(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[3];

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      memset(__b, 170, sizeof(__b));
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        __b[2] = (void *)(v15 | 0x8000000000000000);
        __b[0] = v13;
      }
      else
      {
        HIBYTE(__b[2]) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (SHIBYTE(__b[2]) >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(__b[2]) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_227A85A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *abm::asString(unsigned int a1)
{
  if (a1 > 9)
    return "Unknown";
  else
    return off_24F032250[a1];
}

{
  if (a1 > 3)
    return "Unknown";
  else
    return off_24F0322A0[a1];
}

const char *abm::asString(int a1)
{
  if ((a1 - 1) > 2)
    return "Unknown";
  else
    return off_24F0322C0[a1 - 1];
}

{
  if ((a1 - 1) > 2)
    return "Unknown";
  else
    return off_24F0322D8[a1 - 1];
}

double ARICellularCertCommandDriver::create@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  double result;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;

  v4 = operator new(0x88uLL);
  v5 = (uint64_t)v4;
  v6 = a1[1];
  v13 = *a1;
  v14 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  ARICellularCertCommandDriver::ARICellularCertCommandDriver(v4, &v13);
  *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<ARICellularCertCommandDriver>::shared_ptr[abi:ne180100]<ARICellularCertCommandDriver,std::shared_ptr<ARICellularCertCommandDriver> ctu::SharedSynchronizable<CellularCertCommandDriver>::make_shared_ptr<ARICellularCertCommandDriver>(ARICellularCertCommandDriver*)::{lambda(ARICellularCertCommandDriver*)#1},void>(&v15, v5);
  ctu::Loggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v15);
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  (*(void (**)(_QWORD))(*(_QWORD *)v15 + 72))(v15);
  result = *(double *)&v15;
  *a2 = v15;
  return result;
}

void sub_227A85B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_227A85BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_227A85BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_227A85BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

_QWORD *ARICellularCertCommandDriver::ARICellularCertCommandDriver(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  NSObject *object;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v3 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  CellularCertCommandDriver::CellularCertCommandDriver(a1, &v12);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *a1 = off_24F032300;
  v9 = a1[11];
  object = v9;
  if (v9)
    dispatch_retain(v9);
  ice::Client::create();
  if (object)
    dispatch_release(object);
  a1[15] = 0;
  a1[16] = 0;
  return a1;
}

void sub_227A85D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  CellularCertCommandDriver *v10;

  if (object)
    dispatch_release(object);
  CellularCertCommandDriver::~CellularCertCommandDriver(v10);
  _Unwind_Resume(a1);
}

void sub_227A85D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *CellularCertCommandDriver::CellularCertCommandDriver(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  _BYTE v7[16];

  *a1 = off_24F032408;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v7, "com.apple.telephony.abm", "cellularcert.drv");
  v4 = dispatch_queue_create("cellularcert.drv", 0);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = v4;
  if (v4)
  {
    v5 = v4;
    dispatch_retain(v4);
    a1[12] = 0;
    dispatch_release(v5);
  }
  else
  {
    a1[12] = 0;
  }
  ctu::Loggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(a1, (uint64_t)v7, a2);
  *a1 = off_24F032468;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v7);
  *a1 = off_24F032408;
  return a1;
}

void sub_227A85E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  ctu::SharedSynchronizable<CellularCertCommandDriver>::~SharedSynchronizable(v9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

void CellularCertCommandDriver::~CellularCertCommandDriver(CellularCertCommandDriver *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = off_24F0324A8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = *((_QWORD *)this + 12);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 11);
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ARICellularCertCommandDriver::~ARICellularCertCommandDriver(ARICellularCertCommandDriver *this)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  uint8_t v11[16];

  *(_QWORD *)this = off_24F032300;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v11, 2u);
  }
  v3 = *((_QWORD *)this + 16);
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)*((_QWORD *)this + 15);
  if (v4)
    _Block_release(v4);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)this = off_24F0324A8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v8 = *((_QWORD *)this + 12);
  if (v8)
    dispatch_release(v8);
  v9 = *((_QWORD *)this + 11);
  if (v9)
    dispatch_release(v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

{
  void *v1;

  ARICellularCertCommandDriver::~ARICellularCertCommandDriver(this);
  operator delete(v1);
}

void ARICellularCertCommandDriver::init(ARICellularCertCommandDriver *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CellularCertCommandDriver>::execute_wrapped<ARICellularCertCommandDriver::init(void)::$_0>(ARICellularCertCommandDriver::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ARICellularCertCommandDriver::init(void)::$_0,dispatch_queue_s *::default_delete<ARICellularCertCommandDriver::init(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ARICellularCertCommandDriver::ackCellularCertStatusResult(ARICellularCertCommandDriver *this, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _BYTE *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v3 || (v5 = *((_QWORD *)this + 9), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *(_QWORD *)v8 = this;
  v8[8] = a2;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = *((_QWORD *)this + 11);
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CellularCertCommandDriver>::execute_wrapped<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0>(ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0,dispatch_queue_s *::default_delete<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ARICellularCertCommandDriver::ackCellularCertModeResult(ARICellularCertCommandDriver *this, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _BYTE *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v3 || (v5 = *((_QWORD *)this + 9), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *(_QWORD *)v8 = this;
  v8[8] = a2;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = *((_QWORD *)this + 11);
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CellularCertCommandDriver>::execute_wrapped<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0>(ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0,dispatch_queue_s *::default_delete<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ARICellularCertCommandDriver::registerCellularCertEventHandler(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  dispatch_object_t object[2];
  _QWORD block[6];

  v5 = a1;
  *(_OWORD *)object = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI25CellularCertCommandDriverE20execute_wrapped_syncIZN28ARICellularCertCommandDriver32registerCellularCertEventHandlerEON8dispatch8callbackIU13block_pointerFvPKcN3xpc4dictEEEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSG__block_invoke;
  block[3] = &__block_descriptor_tmp_25;
  block[4] = a1 + 72;
  block[5] = &v5;
  v3 = a1 + 88;
  v2 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(v3 + 8))
  {
    dispatch_async_and_wait(v2, block);
    v4 = object[1];
    if (!object[1])
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_sync(v2, block);
  v4 = object[1];
  if (object[1])
LABEL_3:
    dispatch_release(v4);
LABEL_4:
  if (object[0])
    _Block_release(object[0]);
}

uint64_t ctu::Loggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "cellularcert.drv");
}

uint64_t ctu::Loggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = off_24F0324A8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_24F0324E8;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_227A863DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedSynchronizable<CellularCertCommandDriver>::~SharedSynchronizable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

_QWORD *ctu::SharedLoggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_24F0324A8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_24F0324A8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

_QWORD *ctu::Loggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_24F0324A8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_24F0324A8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_227A86640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_227A8665C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<ARICellularCertCommandDriver>::shared_ptr[abi:ne180100]<ARICellularCertCommandDriver,std::shared_ptr<ARICellularCertCommandDriver> ctu::SharedSynchronizable<CellularCertCommandDriver>::make_shared_ptr<ARICellularCertCommandDriver>(ARICellularCertCommandDriver*)::{lambda(ARICellularCertCommandDriver*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_24F032528;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_227A86778(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ARICellularCertCommandDriver> ctu::SharedSynchronizable<CellularCertCommandDriver>::make_shared_ptr<ARICellularCertCommandDriver>(ARICellularCertCommandDriver*)::{lambda(ARICellularCertCommandDriver*)#1}::operator() const(ARICellularCertCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_227A86798(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ARICellularCertCommandDriver *,std::shared_ptr<ARICellularCertCommandDriver> ctu::SharedSynchronizable<CellularCertCommandDriver>::make_shared_ptr<ARICellularCertCommandDriver>(ARICellularCertCommandDriver*)::{lambda(ARICellularCertCommandDriver *)#1},std::allocator<ARICellularCertCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ARICellularCertCommandDriver *,std::shared_ptr<ARICellularCertCommandDriver> ctu::SharedSynchronizable<CellularCertCommandDriver>::make_shared_ptr<ARICellularCertCommandDriver>(ARICellularCertCommandDriver*)::{lambda(ARICellularCertCommandDriver *)#1},std::allocator<ARICellularCertCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<ARICellularCertCommandDriver> ctu::SharedSynchronizable<CellularCertCommandDriver>::make_shared_ptr<ARICellularCertCommandDriver>(ARICellularCertCommandDriver*)::{lambda(ARICellularCertCommandDriver*)#1}::operator() const(ARICellularCertCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<ARICellularCertCommandDriver *,std::shared_ptr<ARICellularCertCommandDriver> ctu::SharedSynchronizable<CellularCertCommandDriver>::make_shared_ptr<ARICellularCertCommandDriver>(ARICellularCertCommandDriver*)::{lambda(ARICellularCertCommandDriver *)#1},std::allocator<ARICellularCertCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI25CellularCertCommandDriverE15make_shared_ptrI28ARICellularCertCommand"
                     "DriverEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI25CellularCertCommandDriverE15make_shared_ptrI28ARICellular"
                                "CertCommandDriverEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI25CellularCertCommandDriverE15make_shared_ptrI28ARICellularCertCommandDriverEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI25CellularCertCommandDriverE15make_shared_ptrI28ARICellularCertCommandDriverEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<ARICellularCertCommandDriver> ctu::SharedSynchronizable<CellularCertCommandDriver>::make_shared_ptr<ARICellularCertCommandDriver>(ARICellularCertCommandDriver*)::{lambda(ARICellularCertCommandDriver*)#1}::operator() const(ARICellularCertCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB808] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB6D8], MEMORY[0x24BEDAC00]);
}

void dispatch::async<void ctu::SharedSynchronizable<CellularCertCommandDriver>::execute_wrapped<ARICellularCertCommandDriver::init(void)::$_0>(ARICellularCertCommandDriver::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ARICellularCertCommandDriver::init(void)::$_0,dispatch_queue_s *::default_delete<ARICellularCertCommandDriver::init(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[5];
  _QWORD v14[5];
  _QWORD v15[5];
  _QWORD v16[5];
  _QWORD v17[5];
  _QWORD v18[5];
  uint8_t buf[8];
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  void *v22;
  _QWORD *v23;

  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  v5 = *(_QWORD *)(v3 + 104);
  v6 = MEMORY[0x24BDAC760];
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 0x40000000;
  v18[2] = ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke;
  v18[3] = &__block_descriptor_tmp;
  v18[4] = v3;
  *(_QWORD *)buf = v18;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v5, 0, (uint64_t *)buf);
  v7 = *(_QWORD *)(v3 + 104);
  v17[0] = v6;
  v17[1] = 0x40000000;
  v17[2] = ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_3;
  v17[3] = &__block_descriptor_tmp_4;
  v17[4] = v3;
  *(_QWORD *)buf = v17;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v7, 1, (uint64_t *)buf);
  v8 = *(_QWORD *)(v3 + 104);
  v16[0] = v6;
  v16[1] = 0x40000000;
  v16[2] = ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_5;
  v16[3] = &__block_descriptor_tmp_7;
  v16[4] = v3;
  *(_QWORD *)buf = v16;
  ice::Client::setEventHandler<void({block_pointer})(dispatch::group_session)>(v8, 2, (uint64_t *)buf);
  v9 = *(_QWORD *)(v3 + 104);
  v15[0] = v6;
  v15[1] = 0x40000000;
  v15[2] = ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_8;
  v15[3] = &__block_descriptor_tmp_9;
  v15[4] = v3;
  *(_QWORD *)buf = v15;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v9, 3, (uint64_t *)buf);
  v14[0] = v6;
  v14[1] = 0x40000000;
  v14[2] = ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_10;
  v14[3] = &__block_descriptor_tmp_14;
  v14[4] = v3;
  *(_QWORD *)buf = v6;
  v20 = 0x40000000;
  v21 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke;
  v22 = &unk_24F032680;
  v23 = v14;
  *(_QWORD *)buf = _Block_copy(buf);
  ice::Client::regIndicationInternal();
  if (*(_QWORD *)buf)
    _Block_release(*(const void **)buf);
  v13[0] = v6;
  v13[1] = 0x40000000;
  v13[2] = ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_15;
  v13[3] = &__block_descriptor_tmp_16;
  v13[4] = v3;
  *(_QWORD *)buf = v6;
  v20 = 0x40000000;
  v21 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke;
  v22 = &unk_24F032680;
  v23 = v13;
  *(_QWORD *)buf = _Block_copy(buf);
  ice::Client::regIndicationInternal();
  if (*(_QWORD *)buf)
    _Block_release(*(const void **)buf);
  ice::Client::start(*(ice::Client **)(v3 + 104));
  operator delete(v2);
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  operator delete(a1);
}

void sub_227A86B30(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v5 = *(const void **)(v3 - 128);
  if (v5)
    _Block_release(v5);
  operator delete(v2);
  v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ice::Client::setEventHandler<void({block_pointer})(void)>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void *v4;
  const void *v5;
  void *v6;
  void *v7;
  _QWORD aBlock[5];

  v3 = *a3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke;
  aBlock[3] = &unk_24F032630;
  aBlock[4] = v3;
  v4 = _Block_copy(aBlock);
  v5 = v4;
  if (v4)
    v6 = _Block_copy(v4);
  else
    v6 = 0;
  v7 = v6;
  ice::Client::regEventHandlerInternal();
  if (v7)
    _Block_release(v7);
  if (v5)
    _Block_release(v5);
}

void sub_227A86C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  const void *v9;

  if (aBlock)
    _Block_release(aBlock);
  if (v9)
    _Block_release(v9);
  _Unwind_Resume(exception_object);
}

void ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v2 = 0;
    _os_log_debug_impl(&dword_227A72000, v1, OS_LOG_TYPE_DEBUG, "#D ARI Started event received.", v2, 2u);
  }
}

void ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_3(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v2 = 0;
    _os_log_debug_impl(&dword_227A72000, v1, OS_LOG_TYPE_DEBUG, "#D ARI Stopped event received.", v2, 2u);
  }
}

void ice::Client::setEventHandler<void({block_pointer})(dispatch::group_session)>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void *v4;
  const void *v5;
  void *v6;
  void *v7;
  _QWORD aBlock[5];

  v3 = *a3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi1EEEU13block_pointerFT_NS2_13group_sessionEE_block_invoke;
  aBlock[3] = &unk_24F032658;
  aBlock[4] = v3;
  v4 = _Block_copy(aBlock);
  v5 = v4;
  if (v4)
    v6 = _Block_copy(v4);
  else
    v6 = 0;
  v7 = v6;
  ice::Client::regEventHandlerInternal();
  if (v7)
    _Block_release(v7);
  if (v5)
    _Block_release(v5);
}

void sub_227A86E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  const void *v9;

  if (aBlock)
    _Block_release(aBlock);
  if (v9)
    _Block_release(v9);
  _Unwind_Resume(exception_object);
}

void ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_5(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_227A72000, v1, OS_LOG_TYPE_DEFAULT, "#I ARI LPM Enter event received", v2, 2u);
  }
}

void ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_8(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_227A72000, v1, OS_LOG_TYPE_DEFAULT, "#I ARI LPM Exit event received", v2, 2u);
  }
}

uint64_t ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_10(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  __int128 v3;
  int v5;
  NSObject *v6;
  const char *v7;
  char **v8;
  char *v9;
  xpc_object_t v10;
  const void *v11;
  void *v12;
  NSObject *v13;
  _OWORD v14[4];
  __int128 v15;
  __int128 buf;
  void (*v17)(_QWORD *);
  void *v18;
  void *aBlock;
  char *v20;
  xpc_object_t object;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[3] = v3;
  v15 = v3;
  v14[1] = v3;
  v14[2] = v3;
  v14[0] = v3;
  AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK((AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK *)v14, a2);
  if (!AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK::unpack((AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK *)v14))
  {
    v5 = **((_DWORD **)&v15 + 1);
    v6 = v2[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = "activated";
      if (!v5)
        v7 = "de-activated";
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v7;
      _os_log_impl(&dword_227A72000, v6, OS_LOG_TYPE_DEFAULT, "#I Cellular test %s", (uint8_t *)&buf, 0xCu);
    }
    if (v2[15] && v2[16])
    {
      v8 = &abm::kCommandCellularCertBootstrap;
      if (!v5)
        v8 = &abm::kCommandCellularCertShutdown;
      v9 = *v8;
      v10 = xpc_null_create();
      v11 = (const void *)v2[15];
      if (v11)
        v12 = _Block_copy(v11);
      else
        v12 = 0;
      v13 = v2[16];
      *(_QWORD *)&buf = MEMORY[0x24BDAC760];
      *((_QWORD *)&buf + 1) = 1174405120;
      v17 = ___ZNK8dispatch8callbackIU13block_pointerFvPKcN3xpc4dictEEEclIJS2_S4_EEEvDpT__block_invoke;
      v18 = &__block_descriptor_tmp_22;
      if (v12)
      {
        aBlock = _Block_copy(v12);
        v20 = v9;
        object = v10;
        if (v10)
        {
LABEL_16:
          xpc_retain(v10);
LABEL_19:
          dispatch_async(v13, &buf);
          xpc_release(object);
          object = 0;
          if (aBlock)
            _Block_release(aBlock);
          if (v12)
            _Block_release(v12);
          xpc_release(v10);
          return MEMORY[0x22E2A43CC](v14);
        }
      }
      else
      {
        aBlock = 0;
        v20 = v9;
        object = v10;
        if (v10)
          goto LABEL_16;
      }
      object = xpc_null_create();
      goto LABEL_19;
    }
  }
  return MEMORY[0x22E2A43CC](v14);
}

void sub_227A87114(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_15(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  __int128 v3;
  xpc_object_t v4;
  xpc_object_t v5;
  int v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  xpc_object_t v12;
  uint64_t v13;
  xpc_object_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  int64_t v19;
  int64_t v20;
  int64_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  char *v36;
  xpc_object_t v37;
  const void *v38;
  void *v39;
  NSObject *v40;
  uint64_t v42;
  void *v43;
  _OWORD v44[4];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  _QWORD block[4];
  void *v52;
  char *v53;
  xpc_object_t v54;

  v2 = *(_QWORD *)(a1 + 32);
  v50 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v48 = v3;
  v49 = v3;
  v46 = v3;
  v47 = v3;
  v44[3] = v3;
  v45 = v3;
  v44[1] = v3;
  v44[2] = v3;
  v44[0] = v3;
  AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK((AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK *)v44, a2);
  if (!AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK::unpack((AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK *)v44))
  {
    v4 = xpc_dictionary_create(0, 0, 0);
    if (v4 || (v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x22E2A4C30](v4) == MEMORY[0x24BDACFA0])
      {
        xpc_retain(v4);
        v5 = v4;
      }
      else
      {
        v5 = xpc_null_create();
      }
    }
    else
    {
      v5 = xpc_null_create();
      v4 = 0;
    }
    xpc_release(v4);
    v6 = **((_DWORD **)&v45 + 1);
    if (**((_DWORD **)&v45 + 1))
    {
      if (v6 == 1)
      {
        v7 = xpc_string_create(abm::kCellularCertConfigure_ModeB);
        if (!v7)
          v7 = xpc_null_create();
      }
      else
      {
        if (v6 != 2)
          goto LABEL_20;
        v7 = xpc_string_create(abm::kCellularCertConfigure_ModeOpen);
        if (!v7)
          v7 = xpc_null_create();
      }
    }
    else
    {
      v7 = xpc_string_create(abm::kCellularCertConfigure_ModeA);
      if (!v7)
        v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, abm::kKeyCellularCertConfigure_Mode, v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
LABEL_20:
    if (*(_BYTE *)v46)
    {
      v9 = xpc_int64_create(*(unsigned __int8 *)v46);
      if (!v9)
        v9 = xpc_null_create();
      xpc_dictionary_set_value(v5, abm::kKeyCellularCertConfigure_DelayTimer, v9);
      v10 = xpc_null_create();
      xpc_release(v9);
      xpc_release(v10);
    }
    v11 = **((_BYTE **)&v46 + 1);
    v12 = xpc_array_create(0, 0);
    v13 = MEMORY[0x24BDACF78];
    v42 = v2;
    v43 = v5;
    if (v12 || (v12 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x22E2A4C30](v12) == v13)
      {
        xpc_retain(v12);
        v14 = v12;
      }
      else
      {
        v14 = xpc_null_create();
      }
    }
    else
    {
      v14 = xpc_null_create();
      v12 = 0;
    }
    xpc_release(v12);
    if ((_DWORD)v11)
    {
      v15 = 0;
      v16 = 12 * v11;
      do
      {
        v17 = *(unsigned __int8 *)(v47 + v15);
        v18 = *(unsigned __int8 *)(v47 + v15 + 1);
        v19 = *(unsigned __int8 *)(v47 + v15 + 2);
        v20 = *(unsigned int *)(v47 + v15 + 4);
        v21 = *(unsigned __int16 *)(v47 + v15 + 8);
        v22 = xpc_dictionary_create(0, 0, 0);
        if (v22 || (v22 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x22E2A4C30](v22) == MEMORY[0x24BDACFA0])
          {
            xpc_retain(v22);
            v23 = v22;
          }
          else
          {
            v23 = xpc_null_create();
          }
        }
        else
        {
          v23 = xpc_null_create();
          v22 = 0;
        }
        xpc_release(v22);
        v24 = xpc_int64_create(v17);
        if (!v24)
          v24 = xpc_null_create();
        xpc_dictionary_set_value(v23, abm::kKeyCellularCertConfigure_DRB_ID, v24);
        v25 = xpc_null_create();
        xpc_release(v24);
        xpc_release(v25);
        v26 = xpc_int64_create(v18);
        if (!v26)
          v26 = xpc_null_create();
        xpc_dictionary_set_value(v23, abm::kKeyCellularCertConfigure_RB_ENTRY_INDEX, v26);
        v27 = xpc_null_create();
        xpc_release(v26);
        xpc_release(v27);
        v28 = xpc_int64_create(v19);
        if (!v28)
          v28 = xpc_null_create();
        xpc_dictionary_set_value(v23, abm::kKeyCellularCertConfigure_VIRTUAL_DRB, v28);
        v29 = xpc_null_create();
        xpc_release(v28);
        xpc_release(v29);
        v30 = xpc_int64_create(v20);
        if (!v30)
          v30 = xpc_null_create();
        xpc_dictionary_set_value(v23, abm::kKeyCellularCertConfigure_UL_SDU_SCALING, v30);
        v31 = xpc_null_create();
        xpc_release(v30);
        xpc_release(v31);
        v32 = xpc_int64_create(v21);
        if (!v32)
          v32 = xpc_null_create();
        xpc_dictionary_set_value(v23, abm::kKeyCellularCertConfigure_UL_SDU_SIZE, v32);
        v33 = xpc_null_create();
        xpc_release(v32);
        xpc_release(v33);
        xpc_array_append_value(v14, v23);
        xpc_release(v23);
        v15 += 12;
      }
      while (v16 != v15);
    }
    if (MEMORY[0x22E2A4C30](v14) == MEMORY[0x24BDACF78] && xpc_array_get_count(v14))
    {
      if (v14)
      {
        xpc_retain(v14);
        v34 = v14;
      }
      else
      {
        v34 = xpc_null_create();
      }
      xpc_dictionary_set_value(v43, abm::kKeyCellularCertConfigure_ConfigList, v34);
      v35 = xpc_null_create();
      xpc_release(v34);
      xpc_release(v35);
    }
    if (!*(_QWORD *)(v42 + 120) || !*(_QWORD *)(v42 + 128))
      goto LABEL_72;
    v36 = abm::kCommandCellularCertConfigure;
    if (v43)
    {
      xpc_retain(v43);
      v37 = v43;
      v38 = *(const void **)(v42 + 120);
      if (v38)
      {
LABEL_59:
        v39 = _Block_copy(v38);
        goto LABEL_62;
      }
    }
    else
    {
      v37 = xpc_null_create();
      v38 = *(const void **)(v42 + 120);
      if (v38)
        goto LABEL_59;
    }
    v39 = 0;
LABEL_62:
    v40 = *(NSObject **)(v42 + 128);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvPKcN3xpc4dictEEEclIJS2_S4_EEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_22;
    if (v39)
    {
      v52 = _Block_copy(v39);
      v53 = v36;
      v54 = v37;
      if (v37)
      {
LABEL_64:
        xpc_retain(v37);
LABEL_67:
        dispatch_async(v40, block);
        xpc_release(v54);
        v54 = 0;
        if (v52)
          _Block_release(v52);
        if (v39)
          _Block_release(v39);
        xpc_release(v37);
LABEL_72:
        xpc_release(v14);
        xpc_release(v43);
        return MEMORY[0x22E2A43A8](v44);
      }
    }
    else
    {
      v52 = 0;
      v53 = v36;
      v54 = v37;
      if (v37)
        goto LABEL_64;
    }
    v54 = xpc_null_create();
    goto LABEL_67;
  }
  return MEMORY[0x22E2A43A8](v44);
}

void sub_227A87878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  void *v11;

  xpc_release(v11);
  xpc_release(object);
  MEMORY[0x22E2A43A8](&a11);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

uint64_t ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi1EEEU13block_pointerFT_NS2_13group_sessionEE_block_invoke(uint64_t a1, dispatch_object_t object)
{
  uint64_t v4;
  dispatch_group_t group;

  if (object)
  {
    dispatch_retain(object);
    dispatch_retain(object);
    dispatch_group_enter(object);
    dispatch_release(object);
    v4 = *(_QWORD *)(a1 + 32);
    dispatch_retain(object);
    dispatch_group_enter(object);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
  }
  group = object;
  (*(void (**)(uint64_t, dispatch_group_t *))(v4 + 16))(v4, &group);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (object)
  {
    dispatch_group_leave(object);
    dispatch_release(object);
  }
  return 0;
}

void sub_227A87A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  NSObject *v10;

  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvPKcN3xpc4dictEEEclIJS2_S4_EEEvDpT__block_invoke(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  xpc_object_t object;

  v1 = a1[4];
  v2 = a1[5];
  v3 = (void *)a1[6];
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v1 + 16))(v1, v2, &object);
  xpc_release(object);
}

void sub_227A87AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c56_ZTSN8dispatch5blockIU13block_pointerFvPKcN3xpc4dictEEEE48c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  xpc_object_t result;

  v4 = *(void **)(a2 + 32);
  if (v4)
    v4 = _Block_copy(v4);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    return xpc_retain(v5);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_32c56_ZTSN8dispatch5blockIU13block_pointerFvPKcN3xpc4dictEEEE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
}

void dispatch::async<void ctu::SharedSynchronizable<CellularCertCommandDriver>::execute_wrapped<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0>(ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0,dispatch_queue_s *::default_delete<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(unsigned __int8 **a1)
{
  unsigned __int8 *v2;
  _QWORD *v3;
  NSObject *v4;
  __int128 v5;
  int v6;
  _DWORD *v7;
  void *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _OWORD v37[4];
  void *__p[2];
  void *v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t aBlock;
  uint64_t v45;
  uint64_t (*v46)(uint64_t);
  void *v47;
  __int128 *v48;

  v2 = *a1;
  v3 = *(_QWORD **)*a1;
  v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v37[0]) = 0;
    _os_log_debug_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEBUG, "#D Acknowledging cellular certification status result", (uint8_t *)v37, 2u);
  }
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[3] = v5;
  *(_OWORD *)__p = v5;
  v37[1] = v5;
  v37[2] = v5;
  v37[0] = v5;
  AriSdk::ARI_IBICallPsLoopbackTestModeStatusRsp_SDK::ARI_IBICallPsLoopbackTestModeStatusRsp_SDK((AriSdk::ARI_IBICallPsLoopbackTestModeStatusRsp_SDK *)v37);
  v6 = v2[8];
  v7 = operator new(4uLL);
  *v7 = v6 == 0;
  v8 = __p[1];
  __p[1] = v7;
  if (v8)
    operator delete(v8);
  v9 = (std::__shared_weak_count *)v3[10];
  if (!v9 || (v10 = (std::__shared_weak_count_vtbl *)v3[9], (v11 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v12);
  }
  v17 = v3[13];
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  v19 = (std::__shared_weak_count *)operator new(0x30uLL);
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)off_24F032710;
  v19[1].__vftable = v10;
  v19[1].__shared_owners_ = (uint64_t)v12;
  v19[1].__shared_weak_owners_ = (uint64_t)v3;
  v21 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v40 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v40 + 1) = 1174405120;
  *(_QWORD *)&v41 = ___ZN3ice6detail12wrapCallbackIZZN28ARICellularCertCommandDriver27ackCellularCertStatusResultEbENK3__0clEvEUlPKhjE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v41 + 1) = &__block_descriptor_tmp_23;
  v42 = (unint64_t)&v19[1];
  v43 = v19;
  do
    v22 = __ldxr(v20);
  while (__stxr(v22 + 1, v20));
  aBlock = v21;
  v45 = 0x40000000;
  v46 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke;
  v47 = &unk_24F032680;
  v48 = &v40;
  v23 = _Block_copy(&aBlock);
  v24 = v43;
  if (v43)
  {
    v25 = (unint64_t *)&v43->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  do
    v27 = __ldaxr(v20);
  while (__stlxr(v27 - 1, v20));
  if (v27)
  {
    if (__p[0])
      goto LABEL_28;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (__p[0])
      goto LABEL_28;
  }
  v28 = operator new(4uLL);
  *v28 = 0;
  __p[0] = v28;
LABEL_28:
  v42 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40 = v29;
  v41 = v29;
  v30 = *(std::__shared_weak_count **)(v17 + 16);
  aBlock = *(_QWORD *)(v17 + 8);
  if (!v30)
  {
    v45 = 0;
LABEL_45:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v45 = (uint64_t)std::__shared_weak_count::lock(v30);
  if (!v45)
    goto LABEL_45;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v31 = (std::__shared_weak_count *)v45;
  if (v45)
  {
    v32 = (unint64_t *)(v45 + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v39 = v23;
  ice::SendMsgBaseProxy::callback();
  if (v39)
    _Block_release(v39);
  MEMORY[0x22E2A2FF8](&v40);
  std::__shared_weak_count::__release_weak(v12);
  MEMORY[0x22E2A4384](v37);
  operator delete(v2);
  v34 = (std::__shared_weak_count *)a1[2];
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(a1);
}

void sub_227A87F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *aBlock,char a21)
{
  _QWORD *v21;
  void *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  if (aBlock)
    _Block_release(aBlock);
  MEMORY[0x22E2A2FF8](&a21);
  std::__shared_weak_count::__release_weak(v23);
  MEMORY[0x22E2A4384](&a9);
  operator delete(v22);
  v25 = (std::__shared_weak_count *)v21[2];
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

void ___ZN3ice6detail12wrapCallbackIZZN28ARICellularCertCommandDriver27ackCellularCertStatusResultEbENK3__0clEvEUlPKhjE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        v4 = v3;
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
}

uint64_t __copy_helper_block_e8_32c110_ZTSNSt3__110shared_ptrIZZN28ARICellularCertCommandDriver27ackCellularCertStatusResultEbENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c110_ZTSNSt3__110shared_ptrIZZN28ARICellularCertCommandDriver27ackCellularCertStatusResultEbENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F032710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F032710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void dispatch::async<void ctu::SharedSynchronizable<CellularCertCommandDriver>::execute_wrapped<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0>(ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0,dispatch_queue_s *::default_delete<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(unsigned __int8 **a1)
{
  unsigned __int8 *v2;
  _QWORD *v3;
  NSObject *v4;
  __int128 v5;
  int v6;
  _DWORD *v7;
  void *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _OWORD v37[4];
  void *__p[2];
  __int128 v39;
  __int128 v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t aBlock;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  void *v49;
  __int128 *v50;

  v2 = *a1;
  v3 = *(_QWORD **)*a1;
  v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v37[0]) = 0;
    _os_log_debug_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEBUG, "#D Acknowledging cellular certification mode result", (uint8_t *)v37, 2u);
  }
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v39 = v5;
  v40 = v5;
  v37[3] = v5;
  *(_OWORD *)__p = v5;
  v37[1] = v5;
  v37[2] = v5;
  v37[0] = v5;
  AriSdk::ARI_IBICallPsLoopbackTestModeConfigRsp_SDK::ARI_IBICallPsLoopbackTestModeConfigRsp_SDK((AriSdk::ARI_IBICallPsLoopbackTestModeConfigRsp_SDK *)v37);
  v6 = v2[8];
  v7 = operator new(4uLL);
  *v7 = v6 == 0;
  v8 = __p[1];
  __p[1] = v7;
  if (v8)
    operator delete(v8);
  v9 = (std::__shared_weak_count *)v3[10];
  if (!v9 || (v10 = (std::__shared_weak_count_vtbl *)v3[9], (v11 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v12);
  }
  v17 = v3[13];
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  v19 = (std::__shared_weak_count *)operator new(0x30uLL);
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)off_24F032790;
  v19[1].__vftable = v10;
  v19[1].__shared_owners_ = (uint64_t)v12;
  v19[1].__shared_weak_owners_ = (uint64_t)v3;
  v21 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v42 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v42 + 1) = 1174405120;
  *(_QWORD *)&v43 = ___ZN3ice6detail12wrapCallbackIZZN28ARICellularCertCommandDriver25ackCellularCertModeResultEbENK3__0clEvEUlPKhjE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v43 + 1) = &__block_descriptor_tmp_24;
  v44 = (unint64_t)&v19[1];
  v45 = v19;
  do
    v22 = __ldxr(v20);
  while (__stxr(v22 + 1, v20));
  aBlock = v21;
  v47 = 0x40000000;
  v48 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke;
  v49 = &unk_24F032680;
  v50 = &v42;
  v23 = _Block_copy(&aBlock);
  v24 = v45;
  if (v45)
  {
    v25 = (unint64_t *)&v45->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  do
    v27 = __ldaxr(v20);
  while (__stlxr(v27 - 1, v20));
  if (v27)
  {
    if (__p[0])
      goto LABEL_28;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (__p[0])
      goto LABEL_28;
  }
  v28 = operator new(4uLL);
  *v28 = 0;
  __p[0] = v28;
LABEL_28:
  v44 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42 = v29;
  v43 = v29;
  v30 = *(std::__shared_weak_count **)(v17 + 16);
  aBlock = *(_QWORD *)(v17 + 8);
  if (!v30)
  {
    v47 = 0;
LABEL_45:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v47 = (uint64_t)std::__shared_weak_count::lock(v30);
  if (!v47)
    goto LABEL_45;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v31 = (std::__shared_weak_count *)v47;
  if (v47)
  {
    v32 = (unint64_t *)(v47 + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v41 = v23;
  ice::SendMsgBaseProxy::callback();
  if (v41)
    _Block_release(v41);
  MEMORY[0x22E2A2FF8](&v42);
  std::__shared_weak_count::__release_weak(v12);
  MEMORY[0x22E2A436C](v37);
  operator delete(v2);
  v34 = (std::__shared_weak_count *)a1[2];
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(a1);
}

void sub_227A884B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock,char a25)
{
  _QWORD *v25;
  void *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  if (aBlock)
    _Block_release(aBlock);
  MEMORY[0x22E2A2FF8](&a25);
  std::__shared_weak_count::__release_weak(v27);
  MEMORY[0x22E2A436C](&a9);
  operator delete(v26);
  v29 = (std::__shared_weak_count *)v25[2];
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  operator delete(v25);
  _Unwind_Resume(a1);
}

void ___ZN3ice6detail12wrapCallbackIZZN28ARICellularCertCommandDriver25ackCellularCertModeResultEbENK3__0clEvEUlPKhjE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        v4 = v3;
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
}

uint64_t __copy_helper_block_e8_32c108_ZTSNSt3__110shared_ptrIZZN28ARICellularCertCommandDriver25ackCellularCertModeResultEbENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c108_ZTSNSt3__110shared_ptrIZZN28ARICellularCertCommandDriver25ackCellularCertModeResultEbENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F032790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F032790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZNK3ctu20SharedSynchronizableI25CellularCertCommandDriverE20execute_wrapped_syncIZN28ARICellularCertCommandDriver32registerCellularCertEventHandlerEON8dispatch8callbackIU13block_pointerFvPKcN3xpc4dictEEEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSG__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;

  v1 = *(uint64_t **)(a1 + 40);
  v3 = *v1;
  v2 = (void *)v1[1];
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 120);
  *(_QWORD *)(v3 + 120) = v2;
  if (v4)
    _Block_release(v4);
  v5 = v1[2];
  if (v5)
    dispatch_retain(v5);
  v6 = *(NSObject **)(v3 + 128);
  *(_QWORD *)(v3 + 128) = v5;
  if (v6)
    dispatch_release(v6);
}

void awd::ARIAwdCommandDriver::sendEnableMetricSubmission(_QWORD *a1, uint64_t *a2, char a3, const void **a4)
{
  std::__shared_weak_count *v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  NSObject *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  _QWORD *v27;
  unint64_t *v28;
  NSObject *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint8_t v33[16];

  if (*a2)
  {
    v5 = (std::__shared_weak_count *)a1[10];
    if (!v5 || (v9 = a1[9], (v10 = std::__shared_weak_count::lock(v5)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v11 = v10;
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    v17 = *a2;
    v16 = a2[1];
    if (v16)
    {
      v18 = (unint64_t *)(v16 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    if (*a4)
      v20 = _Block_copy(*a4);
    else
      v20 = 0;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v23 = (std::__shared_weak_count *)a1[10];
    if (!v23 || (v24 = a1[9], (v25 = std::__shared_weak_count::lock(v23)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v26 = v25;
    v27 = operator new(0x38uLL);
    *v27 = v17;
    v27[1] = v16;
    *((_BYTE *)v27 + 16) = a3;
    v27[3] = v20;
    v27[4] = a1;
    v27[5] = v9;
    v27[6] = v11;
    v28 = (unint64_t *)&v26->__shared_owners_;
    v29 = a1[11];
    do
      v30 = __ldxr(v28);
    while (__stxr(v30 + 1, v28));
    v31 = operator new(0x18uLL);
    *v31 = v27;
    v31[1] = v24;
    v31[2] = v26;
    dispatch_async_f(v29, v31, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v32 = __ldaxr(v28);
    while (__stlxr(v32 - 1, v28));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    std::__shared_weak_count::__release_weak(v11);
  }
  else
  {
    v21 = a1[5];
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v33 = 0;
      _os_log_error_impl(&dword_227A72000, v21, OS_LOG_TYPE_ERROR, "AppContext is NULL", v33, 2u);
    }
  }
}

void awd::ARIAwdCommandDriver::sendAddConfiguration(_QWORD *a1, _QWORD *a2, char a3, uint64_t a4, void **a5)
{
  std::__shared_weak_count *v6;
  void *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  const void *v21;
  size_t v22;
  char *v23;
  char *v24;
  void *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  _QWORD *v31;
  char v32;
  void *v33;
  size_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  NSObject *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  NSObject *v46;
  __int128 v47;
  char v48;
  void *__p;
  char *v50;
  char *v51;
  void *aBlock[2];
  std::__shared_weak_count *v53;
  _QWORD *v54;

  if (*a2)
  {
    v6 = (std::__shared_weak_count *)a1[10];
    if (!v6 || (v11 = (void *)a1[9], (v12 = std::__shared_weak_count::lock(v6)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v13 = v12;
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v13);
    }
    v18 = a2[1];
    *(_QWORD *)&v47 = *a2;
    *((_QWORD *)&v47 + 1) = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v48 = a3;
    v50 = 0;
    v51 = 0;
    __p = 0;
    v21 = *(const void **)a4;
    v22 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
    if (v22)
    {
      if ((v22 & 0x8000000000000000) != 0)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v22);
      v24 = &v23[v22];
      __p = v23;
      v51 = &v23[v22];
      memcpy(v23, v21, v22);
      v50 = v24;
    }
    v25 = *a5;
    if (*a5)
      v25 = _Block_copy(v25);
    aBlock[0] = v25;
    aBlock[1] = v11;
    v53 = v13;
    do
      v26 = __ldxr(p_shared_weak_owners);
    while (__stxr(v26 + 1, p_shared_weak_owners));
    v54 = a1;
    v27 = (std::__shared_weak_count *)a1[10];
    if (!v27 || (v28 = a1[9], (v29 = std::__shared_weak_count::lock(v27)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v30 = v29;
    v31 = operator new(0x50uLL);
    *(_OWORD *)v31 = v47;
    v47 = 0uLL;
    v32 = v48;
    v31[3] = 0;
    *((_BYTE *)v31 + 16) = v32;
    v31[4] = 0;
    v31[5] = 0;
    v33 = __p;
    v34 = v50 - (_BYTE *)__p;
    if (v50 != __p)
    {
      if ((v34 & 0x8000000000000000) != 0)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v35 = (char *)operator new(v50 - (_BYTE *)__p);
      v31[3] = v35;
      v36 = &v35[v34];
      v31[5] = &v35[v34];
      memcpy(v35, v33, v34);
      v31[4] = v36;
    }
    v37 = *(_OWORD *)aBlock;
    aBlock[0] = 0;
    *((_OWORD *)v31 + 3) = v37;
    v38 = v53;
    aBlock[1] = 0;
    v53 = 0;
    v31[8] = v38;
    v31[9] = a1;
    v39 = a1[11];
    v40 = (unint64_t *)&v30->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    v42 = operator new(0x18uLL);
    *v42 = v31;
    v42[1] = v28;
    v42[2] = v30;
    dispatch_async_f(v39, v42, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v43 = __ldaxr(v40);
    while (__stlxr(v43 - 1, v40));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    if (v53)
      std::__shared_weak_count::__release_weak(v53);
    if (aBlock[0])
      _Block_release(aBlock[0]);
    if (__p)
    {
      v50 = (char *)__p;
      operator delete(__p);
    }
    if (*((_QWORD *)&v47 + 1))
    {
      v44 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v47 + 1) + 16))(*((_QWORD *)&v47 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v47 + 1));
      }
    }
    std::__shared_weak_count::__release_weak(v13);
  }
  else
  {
    v46 = a1[5];
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v47) = 0;
      _os_log_error_impl(&dword_227A72000, v46, OS_LOG_TYPE_ERROR, "AppContext is NULL", (uint8_t *)&v47, 2u);
    }
  }
}

void sub_227A88C90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  void **v14;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v16 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v13 + 32) = v16;
    operator delete(v16);
  }
  v17 = *(std::__shared_weak_count **)(v13 + 8);
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      __clang_call_terminate(a1);
    }
  }
  __clang_call_terminate(a1);
}

void awd::ARIAwdCommandDriver::sendClearConfiguration(_QWORD *a1, uint64_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  NSObject *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  unint64_t *v26;
  NSObject *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8_t v31[16];

  if (*a2)
  {
    v4 = (std::__shared_weak_count *)a1[10];
    if (!v4 || (v7 = a1[9], (v8 = std::__shared_weak_count::lock(v4)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v9 = v8;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    v15 = *a2;
    v16 = a2[1];
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    if (*a3)
    {
      v19 = _Block_copy(*a3);
      v20 = (std::__shared_weak_count *)a1[10];
      if (!v20)
LABEL_30:
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      v19 = 0;
      v20 = (std::__shared_weak_count *)a1[10];
      if (!v20)
        goto LABEL_30;
    }
    v22 = a1[9];
    v23 = std::__shared_weak_count::lock(v20);
    if (!v23)
      goto LABEL_30;
    v24 = v23;
    v25 = operator new(0x30uLL);
    *v25 = v7;
    v25[1] = v9;
    v25[2] = v15;
    v25[3] = v16;
    v25[4] = v19;
    v25[5] = a1;
    v26 = (unint64_t *)&v24->__shared_owners_;
    v27 = a1[11];
    do
      v28 = __ldxr(v26);
    while (__stxr(v28 + 1, v26));
    v29 = operator new(0x18uLL);
    *v29 = v25;
    v29[1] = v22;
    v29[2] = v24;
    dispatch_async_f(v27, v29, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v30 = __ldaxr(v26);
    while (__stlxr(v30 - 1, v26));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    v21 = a1[5];
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v31 = 0;
      _os_log_error_impl(&dword_227A72000, v21, OS_LOG_TYPE_ERROR, "AppContext is NULL", v31, 2u);
    }
  }
}

void awd::ARIAwdCommandDriver::sendUpdateProperties(_QWORD *a1, uint64_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  NSObject *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  unint64_t *v26;
  NSObject *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8_t v31[16];

  if (*a2)
  {
    v4 = (std::__shared_weak_count *)a1[10];
    if (!v4 || (v7 = a1[9], (v8 = std::__shared_weak_count::lock(v4)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v9 = v8;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    v15 = *a2;
    v16 = a2[1];
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    if (*a3)
    {
      v19 = _Block_copy(*a3);
      v20 = (std::__shared_weak_count *)a1[10];
      if (!v20)
LABEL_30:
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      v19 = 0;
      v20 = (std::__shared_weak_count *)a1[10];
      if (!v20)
        goto LABEL_30;
    }
    v22 = a1[9];
    v23 = std::__shared_weak_count::lock(v20);
    if (!v23)
      goto LABEL_30;
    v24 = v23;
    v25 = operator new(0x30uLL);
    *v25 = v7;
    v25[1] = v9;
    v25[2] = v15;
    v25[3] = v16;
    v25[4] = v19;
    v25[5] = a1;
    v26 = (unint64_t *)&v24->__shared_owners_;
    v27 = a1[11];
    do
      v28 = __ldxr(v26);
    while (__stxr(v28 + 1, v26));
    v29 = operator new(0x18uLL);
    *v29 = v25;
    v29[1] = v22;
    v29[2] = v24;
    dispatch_async_f(v27, v29, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v30 = __ldaxr(v26);
    while (__stlxr(v30 - 1, v26));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    v21 = a1[5];
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v31 = 0;
      _os_log_error_impl(&dword_227A72000, v21, OS_LOG_TYPE_ERROR, "AppContext is NULL", v31, 2u);
    }
  }
}

void awd::ARIAwdCommandDriver::sendQueriableMetric(_QWORD *a1, uint64_t *a2, _OWORD *a3, const void **a4)
{
  std::__shared_weak_count *v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  NSObject *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  char *v27;
  unint64_t *v28;
  NSObject *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint8_t v33[32];

  if (*a2)
  {
    v5 = (std::__shared_weak_count *)a1[10];
    if (!v5 || (v9 = a1[9], (v10 = std::__shared_weak_count::lock(v5)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v11 = v10;
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v17 = *a2;
    v18 = a2[1];
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    *(_OWORD *)v33 = *a3;
    *(_OWORD *)&v33[12] = *(_OWORD *)((char *)a3 + 12);
    if (*a4)
    {
      v21 = _Block_copy(*a4);
      v22 = (std::__shared_weak_count *)a1[10];
      if (!v22)
LABEL_30:
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      v21 = 0;
      v22 = (std::__shared_weak_count *)a1[10];
      if (!v22)
        goto LABEL_30;
    }
    v24 = a1[9];
    v25 = std::__shared_weak_count::lock(v22);
    if (!v25)
      goto LABEL_30;
    v26 = v25;
    v27 = (char *)operator new(0x50uLL);
    *(_QWORD *)v27 = v9;
    *((_QWORD *)v27 + 1) = v11;
    *((_QWORD *)v27 + 2) = v17;
    *((_QWORD *)v27 + 3) = v18;
    *((_OWORD *)v27 + 2) = *(_OWORD *)v33;
    *(_OWORD *)(v27 + 44) = *(_OWORD *)&v33[12];
    *((_QWORD *)v27 + 8) = v21;
    *((_QWORD *)v27 + 9) = a1;
    v28 = (unint64_t *)&v26->__shared_owners_;
    v29 = a1[11];
    do
      v30 = __ldxr(v28);
    while (__stxr(v30 + 1, v28));
    v31 = operator new(0x18uLL);
    *v31 = v27;
    v31[1] = v24;
    v31[2] = v26;
    dispatch_async_f(v29, v31, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v32 = __ldaxr(v28);
    while (__stlxr(v32 - 1, v28));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    std::__shared_weak_count::__release_weak(v11);
  }
  else
  {
    v23 = a1[5];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v33 = 0;
      _os_log_error_impl(&dword_227A72000, v23, OS_LOG_TYPE_ERROR, "AppContext is NULL", v33, 2u);
    }
  }
}

void awd::ARIAwdCommandDriver::sendQueriableMetric(_QWORD *a1, uint64_t *a2, _OWORD *a3, __int128 *a4, const void **a5)
{
  std::__shared_weak_count *v6;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  std::__shared_weak_count *v26;
  NSObject *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  _QWORD *v31;
  __int128 v32;
  unint64_t *v33;
  NSObject *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _BYTE v38[32];
  __int128 v39;
  uint64_t v40;

  if (*a2)
  {
    v6 = (std::__shared_weak_count *)a1[10];
    if (!v6 || (v11 = a1[9], (v12 = std::__shared_weak_count::lock(v6)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v13 = v12;
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v13);
    }
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    v20 = *a2;
    v19 = a2[1];
    if (v19)
    {
      v21 = (unint64_t *)(v19 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = *(_OWORD *)((char *)a3 + 12);
    v24 = *a4;
    *(_OWORD *)v38 = *a3;
    *(_OWORD *)&v38[12] = v23;
    v39 = v24;
    v40 = *((_QWORD *)a4 + 2);
    if (*a5)
    {
      v25 = _Block_copy(*a5);
      v26 = (std::__shared_weak_count *)a1[10];
      if (!v26)
LABEL_30:
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      v25 = 0;
      v26 = (std::__shared_weak_count *)a1[10];
      if (!v26)
        goto LABEL_30;
    }
    v28 = a1[9];
    v29 = std::__shared_weak_count::lock(v26);
    if (!v29)
      goto LABEL_30;
    v30 = v29;
    v31 = operator new(0x68uLL);
    *v31 = v11;
    v31[1] = v13;
    v31[2] = v20;
    v31[3] = v19;
    v32 = *(_OWORD *)&v38[16];
    *((_OWORD *)v31 + 2) = *(_OWORD *)v38;
    *((_OWORD *)v31 + 3) = v32;
    *((_OWORD *)v31 + 4) = v39;
    v31[10] = v40;
    v31[11] = v25;
    v31[12] = a1;
    v33 = (unint64_t *)&v30->__shared_owners_;
    v34 = a1[11];
    do
      v35 = __ldxr(v33);
    while (__stxr(v35 + 1, v33));
    v36 = operator new(0x18uLL);
    *v36 = v31;
    v36[1] = v28;
    v36[2] = v30;
    dispatch_async_f(v34, v36, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v37 = __ldaxr(v33);
    while (__stlxr(v37 - 1, v33));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    std::__shared_weak_count::__release_weak(v13);
  }
  else
  {
    v27 = a1[5];
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v38 = 0;
      _os_log_error_impl(&dword_227A72000, v27, OS_LOG_TYPE_ERROR, "AppContext is NULL", v38, 2u);
    }
  }
}

void awd::ARIAwdCommandDriver::init(awd::ARIAwdCommandDriver *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  _QWORD *v15;
  unint64_t *v16;
  NSObject *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v11 || (v12 = *((_QWORD *)this + 9), (v13 = std::__shared_weak_count::lock(v11)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v14 = v13;
  v15 = operator new(0x18uLL);
  *v15 = this;
  v15[1] = v3;
  v15[2] = v5;
  v16 = (unint64_t *)&v14->__shared_owners_;
  v17 = *((_QWORD *)this + 11);
  do
    v18 = __ldxr(v16);
  while (__stxr(v18 + 1, v16));
  v19 = operator new(0x18uLL);
  *v19 = v15;
  v19[1] = v12;
  v19[2] = v14;
  dispatch_async_f(v17, v19, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::init(void)::$_0>(awd::ARIAwdCommandDriver::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::init(void)::$_0,dispatch_queue_s *::default_delete<awd::ARIAwdCommandDriver::init(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v20 = __ldaxr(v16);
  while (__stlxr(v20 - 1, v16));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void awd::ARIAwdCommandDriver::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  awd::AwdCommandDriver *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  std::__shared_weak_count *v22;

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = (awd::AwdCommandDriver *)operator new(0xA0uLL);
  v7 = (uint64_t)v6;
  v8 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v20[0] = v11;
  v20[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  awd::ARIAwdCommandDriver::ARIAwdCommandDriver(v6, (uint64_t)&v21, (uint64_t)v20);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<awd::ARIAwdCommandDriver>::shared_ptr[abi:ne180100]<awd::ARIAwdCommandDriver,std::shared_ptr<awd::ARIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::ARIAwdCommandDriver>(awd::ARIAwdCommandDriver*)::{lambda(awd::ARIAwdCommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  awd::ARIAwdCommandDriver::init((awd::ARIAwdCommandDriver *)*a3);
}

void sub_227A89854(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_227A89868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

awd::AwdCommandDriver *awd::ARIAwdCommandDriver::ARIAwdCommandDriver(awd::AwdCommandDriver *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *object;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(std::__shared_weak_count **)(a3 + 8);
  v17 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  awd::AwdCommandDriver::AwdCommandDriver();
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *(_QWORD *)a1 = off_24F032800;
  v14 = *((_QWORD *)a1 + 11);
  object = v14;
  if (v14)
    dispatch_retain(v14);
  awd::AwdCommandDriver::getName(a1);
  ice::Client::create();
  if (object)
    dispatch_release(object);
  ctu::LoggerCommonBase::setLogLevel();
  return a1;
}

void sub_227A899E0(_Unwind_Exception *a1)
{
  awd::AwdCommandDriver *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v3);
  awd::AwdCommandDriver::~AwdCommandDriver(v1);
  _Unwind_Resume(a1);
}

void sub_227A89A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_227A89A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  awd::AwdCommandDriver *v10;

  if (object)
    dispatch_release(object);
  awd::AwdCommandDriver::~AwdCommandDriver(v10);
  _Unwind_Resume(a1);
}

uint64_t awd::ARIAwdCommandDriver::handleClientStarted_sync(awd::ARIAwdCommandDriver *this)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_debug_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEBUG, "#D Started", v4, 2u);
  }
  awd::ARIAwdCommandDriver::sendGlobalSwitch_sync(this, 1);
  return awd::AwdCommandDriver::broadcastState_sync();
}

uint64_t awd::ARIAwdCommandDriver::sendGlobalSwitch_sync(awd::ARIAwdCommandDriver *this, int a2)
{
  __int128 v4;
  _DWORD *v5;
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  const void *v23;
  unint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  const char *v36;
  _OWORD v37[2];
  unint64_t v38;
  _OWORD v39[4];
  void *__p[2];
  const void *aBlock[5];
  __int128 buf;
  void (*v43)(uint64_t, const unsigned __int8 *);
  void *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v39[3] = v4;
  *(_OWORD *)__p = v4;
  v39[1] = v4;
  v39[2] = v4;
  v39[0] = v4;
  AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK::ARI_CsiAwdsGlobalSwitchReq_SDK((AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK *)v39);
  v5 = operator new(4uLL);
  *v5 = a2;
  v6 = __p[0];
  __p[0] = v5;
  if (v6)
    operator delete(v6);
  v7 = ctu::Clock::now_in_nanoseconds((ctu::Clock *)v5);
  v8 = operator new(8uLL);
  *v8 = v7 / 0xF4240;
  v9 = __p[1];
  __p[1] = v8;
  if (v9)
    operator delete(v9);
  v10 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v36 = "disabled";
    if (a2)
      v36 = "enabled";
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v36;
    _os_log_debug_impl(&dword_227A72000, v10, OS_LOG_TYPE_DEBUG, "#D Requesting global switch to be %s", (uint8_t *)&buf, 0xCu);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v11)
LABEL_39:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v11)
      goto LABEL_39;
  }
  v12 = (std::__shared_weak_count_vtbl *)*((_QWORD *)this + 9);
  v13 = std::__shared_weak_count::lock(v11);
  if (!v13)
    goto LABEL_39;
  v14 = v13;
  p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  v19 = *((_QWORD *)this + 18);
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  v21 = (std::__shared_weak_count *)operator new(0x38uLL);
  v21->__shared_owners_ = 0;
  v22 = (unint64_t *)&v21->__shared_owners_;
  v21->__shared_weak_owners_ = 0;
  v21[1].__vftable = v12;
  v21->__vftable = (std::__shared_weak_count_vtbl *)off_24F032E70;
  v21[1].__shared_owners_ = (uint64_t)v14;
  v21[1].__shared_weak_owners_ = (uint64_t)this;
  LODWORD(v21[2].__vftable) = a2;
  v23 = (const void *)MEMORY[0x24BDAC760];
  *(_QWORD *)&buf = MEMORY[0x24BDAC760];
  *((_QWORD *)&buf + 1) = 1174405120;
  v43 = ___ZN3ice6detail12wrapCallbackIZNK3awd19ARIAwdCommandDriver21sendGlobalSwitch_syncEbE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v44 = &__block_descriptor_tmp_22_0;
  v45 = v21 + 1;
  v46 = v21;
  do
    v24 = __ldxr(v22);
  while (__stxr(v24 + 1, v22));
  aBlock[0] = v23;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_0;
  aBlock[3] = &unk_24F032918;
  aBlock[4] = &buf;
  v25 = _Block_copy(aBlock);
  v26 = v46;
  if (v46)
  {
    v27 = (unint64_t *)&v46->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  do
    v29 = __ldaxr(v22);
  while (__stlxr(v29 - 1, v22));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[0] = v30;
  v37[1] = v30;
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v31 = *(std::__shared_weak_count **)(v19 + 16);
  *(_QWORD *)&buf = *(_QWORD *)(v19 + 8);
  if (!v31)
  {
    *((_QWORD *)&buf + 1) = 0;
LABEL_41:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  *((_QWORD *)&buf + 1) = std::__shared_weak_count::lock(v31);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_41;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v32 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  aBlock[0] = v25;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v37);
  std::__shared_weak_count::__release_weak(v14);
  return MEMORY[0x22E2A39D0](v39);
}

void sub_227A89E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t awd::ARIAwdCommandDriver::handleMetricSubmissionInd_sync(awd::ARIAwdCommandDriver *this, const unsigned __int8 *a2)
{
  __int128 v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  int *v9;
  int v10;
  const void *v11;
  unint64_t GMID;
  int v13;
  int v14;
  int v15;
  int v16;
  size_t v17;
  char *v18;
  char **v19;
  char **v20;
  unsigned int v21;
  BOOL v22;
  char **v23;
  std::__shared_weak_count *v24;
  char *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  NSObject *v28;
  char *v29;
  char *v30;
  NSObject *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  void **v35;
  std::__shared_weak_count *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  void *v44;
  char v45;
  _OWORD v46[2];
  void *__p;
  void *v48;
  char *v49;
  _BYTE v50[28];
  _BYTE v51[28];
  char *v52;
  std::__shared_weak_count *v53;
  char *v54;
  char *v55;
  char *v56;
  _OWORD v57[4];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint8_t buf[4];
  _BYTE v66[10];
  void **v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v64 = v3;
  v63 = v3;
  v62 = v3;
  v61 = v3;
  v60 = v3;
  v59 = v3;
  v58 = v3;
  v57[3] = v3;
  v57[2] = v3;
  v57[1] = v3;
  v57[0] = v3;
  AriSdk::ARI_CsiAwdsMetricSubInd_SDK::ARI_CsiAwdsMetricSubInd_SDK((AriSdk::ARI_CsiAwdsMetricSubInd_SDK *)v57, a2);
  if ((ice::isARIResponseValid() & 1) != 0)
  {
    v4 = AriSdk::ARI_CsiAwdsMetricSubInd_SDK::unpack((AriSdk::ARI_CsiAwdsMetricSubInd_SDK *)v57);
    v5 = *((_QWORD *)this + 5);
    if (v4)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = asString();
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v66 = v6;
        *(_WORD *)&v66[8] = 1024;
        LODWORD(v67) = v4;
        _os_log_impl(&dword_227A72000, v5, OS_LOG_TYPE_DEFAULT, "#N Could not unpack CsiAwdsMetricSubInd: %s (%d)", buf, 0x12u);
      }
      return MEMORY[0x22E2A35D4](v57);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_227A72000, v5, OS_LOG_TYPE_DEBUG, "#D Got metric submission from BB", buf, 2u);
      v9 = (int *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
      {
LABEL_10:
        v10 = *v9;
        v11 = (const void *)v63;
        if (!(_QWORD)v63)
          return MEMORY[0x22E2A35D4](v57);
LABEL_14:
        if (v11 != *((const void **)&v63 + 1))
        {
          v13 = *(_DWORD *)v58;
          v40 = **((_DWORD **)&v58 + 1);
          v14 = *(_DWORD *)v59;
          v15 = **((_DWORD **)&v59 + 1);
          v16 = *(_DWORD *)v60;
          v43 = *(unsigned __int8 *)v61;
          v38 = **((_BYTE **)&v61 + 1);
          v39 = (unsigned __int16)**((_WORD **)&v60 + 1);
          v41 = *(unsigned __int8 *)v62;
          v42 = **((_BYTE **)&v62 + 1);
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v17 = *((_QWORD *)&v63 + 1) - (_QWORD)v11;
          if ((uint64_t)(*((_QWORD *)&v63 + 1) - (_QWORD)v11) < 0)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v37 = v16;
          v18 = (char *)operator new(*((_QWORD *)&v63 + 1) - (_QWORD)v11);
          v54 = v18;
          v56 = &v18[v17];
          memmove(v18, v11, v17);
          v55 = &v18[v17];
          v19 = (char **)*((_QWORD *)this + 16);
          if (!v19)
            goto LABEL_46;
          v20 = (char **)((char *)this + 128);
          do
          {
            v21 = *((unsigned __int8 *)v19 + 32);
            v22 = v21 >= v13;
            if (v21 >= v13)
              v23 = v19;
            else
              v23 = v19 + 1;
            if (v22)
              v20 = v19;
            v19 = (char **)*v23;
          }
          while (*v23);
          if (v20 == (char **)((char *)this + 128)
            || *((unsigned __int8 *)v20 + 32) > v13)
          {
            goto LABEL_46;
          }
          v25 = v20[5];
          v24 = (std::__shared_weak_count *)v20[6];
          v52 = v25;
          v53 = v24;
          v36 = v24;
          if (v24)
          {
            p_shared_owners = (unint64_t *)&v24->__shared_owners_;
            do
              v27 = __ldxr(p_shared_owners);
            while (__stxr(v27 + 1, p_shared_owners));
          }
          if (v25)
          {
            *(_QWORD *)&v51[16] = 0xAAAAAAAAAAAAAAAALL;
            *(_DWORD *)&v51[24] = -1431655766;
            *(_DWORD *)&v51[12] = v40;
            *(_DWORD *)v51 = v14;
            if (!v15)
            {
              v28 = *((_QWORD *)this + 5);
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_227A72000, v28, OS_LOG_TYPE_DEFAULT, "#N Baseband did not supply metric ID, using trigger ID instead...", buf, 2u);
              }
              v15 = v10;
            }
            *(_DWORD *)&v51[4] = v15;
            *(_DWORD *)&v51[8] = 60;
            v51[16] = v41 != 0;
            v51[17] = v42 != 0;
            *(_DWORD *)&v51[20] = v43;
            v51[24] = 1;
            *(_OWORD *)v50 = *(_OWORD *)v51;
            *(_OWORD *)&v50[12] = *(_OWORD *)&v51[12];
            v29 = (char *)operator new(v17);
            v30 = &v29[v17];
            __p = v29;
            v49 = &v29[v17];
            memcpy(v29, v18, v17);
            v48 = v30;
            awd::AppContext::operator()();
            if (__p)
            {
              v48 = __p;
              operator delete(__p);
            }
            if (v43)
            {
              v46[0] = *(_OWORD *)v51;
              *(_OWORD *)((char *)v46 + 12) = *(_OWORD *)&v51[12];
              awd::AppContext::operator()();
            }
            v31 = *((_QWORD *)this + 5);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
            {
              v34 = awd::asString();
              awd::asString();
              v35 = v45 >= 0 ? &v44 : (void **)v44;
              *(_DWORD *)buf = 136316418;
              *(_QWORD *)v66 = v34;
              *(_WORD *)&v66[8] = 2080;
              v67 = v35;
              v68 = 1024;
              v69 = v37;
              v70 = 1024;
              v71 = v39;
              v72 = 1024;
              v73 = v43;
              v74 = 1024;
              v75 = v38;
              _os_log_debug_impl(&dword_227A72000, v31, OS_LOG_TYPE_DEBUG, "#D Got metric segment for: %s, %s, packetLength: %u, packetNumber: %u, isLastPacket: %u, isLastSegment: %u", buf, 0x2Eu);
              if (v45 < 0)
                operator delete(v44);
            }
          }
          if (v36)
          {
            v32 = (unint64_t *)&v36->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          v18 = v54;
          if (v54)
LABEL_46:
            operator delete(v18);
        }
        return MEMORY[0x22E2A35D4](v57);
      }
    }
    else
    {
      v9 = (int *)*((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1))
        goto LABEL_10;
    }
    v10 = 0;
    v11 = (const void *)v63;
    if (!(_QWORD)v63)
      return MEMORY[0x22E2A35D4](v57);
    goto LABEL_14;
  }
  v7 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v57);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v66 = (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26);
    *(_WORD *)&v66[4] = 1024;
    *(_DWORD *)&v66[6] = -842137600;
    _os_log_error_impl(&dword_227A72000, v7, OS_LOG_TYPE_ERROR, "Got unexpected message 0x%0x, expected CsiAwdsMetricSubInd (0x%0x)", buf, 0xEu);
  }
  return MEMORY[0x22E2A35D4](v57);
}

void sub_227A8A440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  operator delete(v37);
  MEMORY[0x22E2A35D4](&a37);
  _Unwind_Resume(a1);
}

void sub_227A8A4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  MEMORY[0x22E2A35D4](&a37);
  _Unwind_Resume(a1);
}

uint64_t awd::ARIAwdCommandDriver::handleTriggerSubmissionInd_sync(awd::ARIAwdCommandDriver *this, const unsigned __int8 *a2)
{
  __int128 v3;
  char isARIResponseValid;
  NSObject *v5;
  char **v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char **v12;
  unsigned int v13;
  BOOL v14;
  char **v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t GMID;
  uint64_t v25;
  void *v26;
  void *p_p;
  void *__p;
  char v29;
  void *v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  uint64_t v36;
  _BYTE v37[28];
  char *v38;
  std::__shared_weak_count *v39;
  _OWORD v40[4];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint8_t buf[4];
  _BYTE v45[10];
  void *v46;
  __int16 v47;
  void *v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42 = v3;
  v43 = v3;
  v40[3] = v3;
  v41 = v3;
  v40[1] = v3;
  v40[2] = v3;
  v40[0] = v3;
  AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK::ARI_CsiAwdsMetricSubTriggerInd_SDK((AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK *)v40, a2);
  isARIResponseValid = ice::isARIResponseValid();
  v5 = *((_QWORD *)this + 5);
  if ((isARIResponseValid & 1) != 0)
  {
    if (os_log_type_enabled(*((os_log_t *)this + 5), OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_227A72000, v5, OS_LOG_TYPE_DEBUG, "#D Got trigger submission from BB", buf, 2u);
    }
    if (!AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK::unpack((AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK *)v40))
    {
      v6 = (char **)*((_QWORD *)this + 16);
      if (v6)
      {
        v7 = *(_DWORD *)v41;
        v8 = **((_DWORD **)&v41 + 1);
        v9 = *(_DWORD *)v42;
        v10 = **((_DWORD **)&v42 + 1);
        v11 = *(_QWORD *)v43;
        v12 = (char **)((char *)this + 128);
        do
        {
          v13 = *((unsigned __int8 *)v6 + 32);
          v14 = v13 >= v7;
          if (v13 >= v7)
            v15 = v6;
          else
            v15 = v6 + 1;
          if (v14)
            v12 = v6;
          v6 = (char **)*v15;
        }
        while (*v15);
        if (v12 != (char **)((char *)this + 128) && *((unsigned __int8 *)v12 + 32) <= v7)
        {
          v16 = v12[5];
          v17 = (std::__shared_weak_count *)v12[6];
          v38 = v16;
          v39 = v17;
          if (v17)
          {
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldxr(p_shared_owners);
            while (__stxr(v19 + 1, p_shared_owners));
          }
          if (v16)
          {
            *(_QWORD *)&v37[16] = 0xAAAAAA00AAAA0000;
            *(_DWORD *)&v37[24] = -1431655936;
            v36 = v11;
            *(_DWORD *)v37 = 0;
            *(_DWORD *)&v37[4] = v10;
            *(_QWORD *)&v37[8] = 60;
            *((_QWORD *)&v35 + 1) = v9 | 0xAAAAAAAA00000000;
            *(_QWORD *)&v35 = __PAIR64__(v8, v10);
            *(_OWORD *)((char *)v34 + 12) = *(_OWORD *)&v37[12];
            v34[0] = *(_OWORD *)v37;
            v33 = v11;
            v32 = v35;
            awd::AppContext::operator()();
            v20 = *((_QWORD *)this + 5);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
            {
              v25 = awd::asString();
              awd::asString();
              awd::asString();
              v26 = &v30;
              if (v31 < 0)
                v26 = v30;
              if (v29 >= 0)
                p_p = &__p;
              else
                p_p = __p;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)v45 = v25;
              *(_WORD *)&v45[8] = 2080;
              v46 = v26;
              v47 = 2080;
              v48 = p_p;
              _os_log_debug_impl(&dword_227A72000, v20, OS_LOG_TYPE_DEBUG, "#D Got trigger for: %s, %s, %s", buf, 0x20u);
              if (v29 < 0)
                operator delete(__p);
              if (v31 < 0)
                operator delete(v30);
            }
          }
          if (v17)
          {
            v21 = (unint64_t *)&v17->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
        }
      }
    }
  }
  else if (os_log_type_enabled(*((os_log_t *)this + 5), OS_LOG_TYPE_ERROR))
  {
    GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v40);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v45 = (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26);
    *(_WORD *)&v45[4] = 1024;
    *(_DWORD *)&v45[6] = -842170368;
    _os_log_error_impl(&dword_227A72000, v5, OS_LOG_TYPE_ERROR, "Got unexpected message 0x%0x, expected CsiAwdsMetricSubInd (0x%0x)", buf, 0xEu);
  }
  return MEMORY[0x22E2A3F40](v40);
}

void sub_227A8A800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  MEMORY[0x22E2A3F40](&a36);
  _Unwind_Resume(a1);
}

void awd::ARIAwdCommandDriver::~ARIAwdCommandDriver(awd::ARIAwdCommandDriver *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_24F032800;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    awd::AwdCommandDriver::~AwdCommandDriver(this);
  }
  else
  {
LABEL_5:
    awd::AwdCommandDriver::~AwdCommandDriver(this);
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = off_24F032800;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    awd::AwdCommandDriver::~AwdCommandDriver(this);
  }
  else
  {
LABEL_5:
    awd::AwdCommandDriver::~AwdCommandDriver(this);
  }
  operator delete(v5);
}

uint64_t ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(awd::AwdCommandDriver *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *Name;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  Name = (const char *)awd::AwdCommandDriver::getName(a1);
  result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, Name, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  __int128 v5;
  int AppID;
  _DWORD *v7;
  void *v8;
  int v9;
  _DWORD *v10;
  void *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  const void *v17;
  uint64_t v18;
  awd::AppContext *v19;
  unint64_t *v20;
  unint64_t v21;
  char v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  const void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t aBlock;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  void *v55;
  __int128 *v56;
  uint8_t buf[16];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 __p;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 32);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(v1 + 16))
      v4 = "enabled";
    else
      v4 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl(&dword_227A72000, v3, OS_LOG_TYPE_DEFAULT, "#I Requesting metric submission to be %s", buf, 0xCu);
  }
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v60 = v5;
  __p = v5;
  v59 = v5;
  *(_OWORD *)buf = v5;
  v58 = v5;
  AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK::ARI_CsiAwdsMetricSubSwitchReq_SDK((AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK *)buf);
  AppID = awd::AppContext::getAppID(*(awd::AppContext **)v1);
  v7 = operator new(4uLL);
  *v7 = AppID;
  v8 = (void *)__p;
  *(_QWORD *)&__p = v7;
  if (v8)
    operator delete(v8);
  v9 = *(unsigned __int8 *)(v1 + 16);
  v10 = operator new(4uLL);
  *v10 = v9;
  v11 = (void *)*((_QWORD *)&__p + 1);
  *((_QWORD *)&__p + 1) = v10;
  if (v11)
    operator delete(v11);
  v12 = *(_QWORD *)(v2 + 144);
  v13 = *(std::__shared_weak_count_vtbl **)(v1 + 40);
  v14 = *(_QWORD *)(v1 + 48);
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 16);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *(const void **)(v1 + 24);
  if (v17)
  {
    v46 = _Block_copy(v17);
    v19 = *(awd::AppContext **)v1;
    v18 = *(_QWORD *)(v1 + 8);
    if (!v18)
      goto LABEL_19;
  }
  else
  {
    v46 = 0;
    v19 = *(awd::AppContext **)v1;
    v18 = *(_QWORD *)(v1 + 8);
    if (!v18)
      goto LABEL_19;
  }
  v20 = (unint64_t *)(v18 + 8);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
LABEL_19:
  v45 = v12;
  v22 = *(_BYTE *)(v1 + 16);
  v23 = (std::__shared_weak_count *)operator new(0x50uLL);
  v23->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  v23->__shared_weak_owners_ = 0;
  v23->__vftable = (std::__shared_weak_count_vtbl *)off_24F0328D0;
  v23[1].__vftable = v13;
  v23[1].__shared_owners_ = v14;
  v23[1].__shared_weak_owners_ = (uint64_t)v46;
  v23[2].__vftable = (std::__shared_weak_count_vtbl *)v19;
  v23[2].__shared_owners_ = v18;
  LODWORD(v23[2].__shared_weak_owners_) = AppID;
  BYTE4(v23[2].__shared_weak_owners_) = v22;
  v23[3].__vftable = (std::__shared_weak_count_vtbl *)v2;
  v25 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v48 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v48 + 1) = 1174405120;
  *(_QWORD *)&v49 = ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS2_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENS9_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v49 + 1) = &__block_descriptor_tmp_0;
  v50 = (unint64_t)&v23[1];
  v51 = v23;
  do
    v26 = __ldxr(p_shared_owners);
  while (__stxr(v26 + 1, p_shared_owners));
  aBlock = v25;
  v53 = 0x40000000;
  v54 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_0;
  v55 = &unk_24F032918;
  v56 = &v48;
  v27 = _Block_copy(&aBlock);
  v28 = v51;
  if (v51)
  {
    v29 = (unint64_t *)&v51->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  do
    v31 = __ldaxr(p_shared_owners);
  while (__stlxr(v31 - 1, p_shared_owners));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v48 = v32;
  v49 = v32;
  v50 = 0xAAAAAAAAAAAAAAAALL;
  v33 = *(std::__shared_weak_count **)(v45 + 16);
  aBlock = *(_QWORD *)(v45 + 8);
  if (!v33)
  {
    v53 = 0;
LABEL_54:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v53 = (uint64_t)std::__shared_weak_count::lock(v33);
  if (!v53)
    goto LABEL_54;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v34 = (std::__shared_weak_count *)v53;
  if (v53)
  {
    v35 = (unint64_t *)(v53 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  ice::SendMsgBaseProxy::callback();
  if (v27)
    _Block_release(v27);
  MEMORY[0x22E2A2FF8](&v48);
  MEMORY[0x22E2A3E44](buf);
  v37 = *(std::__shared_weak_count **)(v1 + 48);
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  v38 = *(const void **)(v1 + 24);
  if (v38)
    _Block_release(v38);
  v39 = *(std::__shared_weak_count **)(v1 + 8);
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  operator delete((void *)v1);
  v42 = (std::__shared_weak_count *)a1[2];
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  operator delete(a1);
}

void sub_227A8AE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, void *aBlock, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS2_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENS9_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  int v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  int AppID;
  BOOL v18;
  _OWORD v19[4];
  __int128 v20;
  _BYTE buf[12];
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD *)(v2 + 48);
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*(_QWORD *)v2)
        {
LABEL_18:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v19[3] = v8;
        v20 = v8;
        v19[1] = v8;
        v19[2] = v8;
        v19[0] = v8;
        AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK::ARI_CsiAwdsMetricSubSwitchRspCb_SDK((AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK *)v19, a2);
        if (ice::isARIResponseValid()
          && !AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK::unpack((AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK *)v19))
        {
          v16 = **((_DWORD **)&v20 + 1);
          AppID = awd::AppContext::getAppID(*(awd::AppContext **)(v2 + 24));
          if (v16)
            v18 = 0;
          else
            v18 = *(_DWORD *)v20 == AppID;
          v9 = v18;
          v10 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            goto LABEL_8;
        }
        else
        {
          v9 = 0;
          v10 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
LABEL_8:
            v11 = "enabled";
            v12 = "error";
            if (!*(_BYTE *)(v2 + 44))
              v11 = "disabled";
            if (v9)
              v12 = "success";
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v11;
            v22 = 2080;
            v23 = v12;
            _os_log_impl(&dword_227A72000, v10, OS_LOG_TYPE_DEFAULT, "#I Metric submission %s %s", buf, 0x16u);
          }
        }
        v13 = *(void **)(v2 + 16);
        if (v13)
          v13 = _Block_copy(v13);
        *(_QWORD *)buf = v13;
        awd::AppContext::operator()();
        if (*(_QWORD *)buf)
          _Block_release(*(const void **)buf);
        MEMORY[0x22E2A4000](v19);
        goto LABEL_18;
      }
    }
  }
}

void sub_227A8B1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c168_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver26sendEnableMetricSubmissionENS0_INS1_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c168_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver26sendEnableMetricSubmissionENS0_INS1_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0328D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0328D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (const void *)a1[5];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (const void *)a1[5];
  if (v5)
LABEL_6:
    _Block_release(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_0(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  int AppID;
  _DWORD *v14;
  void *v15;
  char v16;
  _BYTE *v17;
  void *v18;
  _DWORD *v19;
  void *v20;
  _DWORD *v21;
  uint64_t v22;
  void *v23;
  _WORD *v24;
  void *v25;
  _BYTE *v26;
  const char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  size_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  const char *v40;
  _BYTE *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  __int128 v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count_vtbl *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  const void *v60;
  void *v61;
  uint64_t v62;
  awd::AppContext *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  __int128 v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _OWORD v89[2];
  unint64_t v90;
  const void *aBlock[5];
  _BYTE v92[24];
  __int128 v93;
  std::__shared_weak_count *v94;
  __int16 v95;
  unint64_t v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  _BOOL4 v102;
  _BYTE buf[32];
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  unint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v3 = *(_QWORD *)(*a1 + 24);
  v2 = *(_QWORD *)(*a1 + 32);
  v84 = v2 - v3;
  v87 = *(_QWORD *)(*a1 + 72);
  v88 = (_QWORD *)*a1;
  v4 = *(NSObject **)(v87 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = awd::asString();
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v2 - v3;
    _os_log_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEFAULT, "#I Requesting to add configuration type: %s, payload size: %lu", buf, 0x16u);
  }
  if (v2 != v3 && (unint64_t)(v84 + 3839) >= 0xF00)
  {
    LODWORD(v9) = 0;
    v86 = (v84 + 3839) / 0xF00uLL;
    v80 = *(_QWORD *)(v1 + 24) + v84;
    v81 = *(_QWORD *)(v1 + 24);
    do
    {
      v110 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v108 = v10;
      v109 = v10;
      v11 = v81 + (3840 * v9);
      if (v80 >= v11 + 3840)
        v12 = v11 + 3840;
      else
        v12 = v80;
      v106 = v10;
      v107 = v10;
      v104 = v10;
      v105 = v10;
      *(_OWORD *)buf = v10;
      *(_OWORD *)&buf[16] = v10;
      AriSdk::ARI_CsiAwdsAddConfigReq_SDK::ARI_CsiAwdsAddConfigReq_SDK((AriSdk::ARI_CsiAwdsAddConfigReq_SDK *)buf);
      AppID = awd::AppContext::getAppID(*(awd::AppContext **)v1);
      v14 = operator new(4uLL);
      *v14 = AppID;
      v15 = (void *)v106;
      *(_QWORD *)&v106 = v14;
      if (v15)
        operator delete(v15);
      v16 = *(_BYTE *)(v1 + 16);
      v17 = operator new(1uLL);
      *v17 = v16;
      v18 = (void *)*((_QWORD *)&v106 + 1);
      *((_QWORD *)&v106 + 1) = v17;
      if (v18)
        operator delete(v18);
      v19 = operator new(4uLL);
      *v19 = v84;
      v20 = (void *)v107;
      *(_QWORD *)&v107 = v19;
      if (v20)
        operator delete(v20);
      v21 = operator new(4uLL);
      v83 = v12;
      v22 = v12 - v11;
      *v21 = v22;
      v23 = (void *)*((_QWORD *)&v107 + 1);
      *((_QWORD *)&v107 + 1) = v21;
      if (v23)
        operator delete(v23);
      v24 = operator new(2uLL);
      *v24 = v9;
      v25 = (void *)v108;
      *(_QWORD *)&v108 = v24;
      if (v25)
        operator delete(v25);
      v26 = operator new(1uLL);
      v85 = AppID;
      v82 = (unsigned __int16)v9 + 1;
      *v26 = v86 == v82;
      v28 = (void *)*((_QWORD *)&v108 + 1);
      *((_QWORD *)&v108 + 1) = v26;
      if (v28)
        operator delete(v28);
      if (v22 >= 1)
      {
        v29 = 0;
        while (1)
        {
          v32 = (char *)*((_QWORD *)&v109 + 1);
          v31 = (char *)v109;
          v33 = *((_QWORD *)&v109 + 1) - v109;
          if (*((_QWORD *)&v109 + 1) - (_QWORD)v109 >= 0xF00uLL)
          {
            AriOsa::LogSrcInfo((AriOsa *)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "emplace_back", v27);
            v41 = v92;
            if (v92[23] < 0)
              v41 = *(_BYTE **)v92;
            Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array is full, cannot add new values", v40, v41, 371);
            if ((v92[23] & 0x80000000) != 0)
              operator delete(*(void **)v92);
            goto LABEL_32;
          }
          if (*((_QWORD *)&v109 + 1) >= v110)
            break;
          **((_BYTE **)&v109 + 1) = *(_BYTE *)(v11 + v29);
          v30 = (uint64_t)(v32 + 1);
LABEL_31:
          *((_QWORD *)&v109 + 1) = v30;
LABEL_32:
          if (++v29 >= v22)
            goto LABEL_64;
        }
        v34 = v110 - v109;
        if (2 * (v110 - (unint64_t)v109) <= v33 + 1)
          v35 = v33 + 1;
        else
          v35 = 2 * v34;
        if (v34 >= 0x3FFFFFFFFFFFFFFFLL)
          v36 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v37 = (char *)operator new(v36);
        v38 = &v37[v33];
        v37[v33] = *(_BYTE *)(v11 + v29);
        v30 = (uint64_t)&v37[v33 + 1];
        if (v32 != v31)
        {
          if (v33 >= 8 && (unint64_t)(v31 - v37) >= 0x20)
          {
            if (v33 >= 0x20)
            {
              v39 = v33 & 0xFFFFFFFFFFFFFFE0;
              v42 = &v37[v33 - 16];
              v43 = v32 - 16;
              v44 = v33 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v45 = *(_OWORD *)v43;
                *((_OWORD *)v42 - 1) = *((_OWORD *)v43 - 1);
                *(_OWORD *)v42 = v45;
                v42 -= 32;
                v43 -= 32;
                v44 -= 32;
              }
              while (v44);
              if (v33 == v39)
                goto LABEL_61;
              if ((v33 & 0x18) != 0)
                goto LABEL_54;
              v38 -= v39;
              v32 -= v39;
            }
            else
            {
              v39 = 0;
LABEL_54:
              v38 -= v33 & 0xFFFFFFFFFFFFFFF8;
              v46 = &v37[&v32[-v39] - v31 - 8];
              v47 = &v32[-v39 - 8];
              v48 = v39 - (v33 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v49 = *(_QWORD *)v47;
                v47 -= 8;
                *(_QWORD *)v46 = v49;
                v46 -= 8;
                v48 += 8;
              }
              while (v48);
              v32 -= v33 & 0xFFFFFFFFFFFFFFF8;
              if (v33 == (v33 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_61:
                v32 = v31;
                v38 = v37;
                goto LABEL_62;
              }
            }
          }
          v50 = v38 - 1;
          do
          {
            v51 = *--v32;
            *v50-- = v51;
          }
          while (v32 != v31);
          goto LABEL_61;
        }
LABEL_62:
        *(_QWORD *)&v109 = v38;
        *((_QWORD *)&v109 + 1) = &v37[v33 + 1];
        v110 = (unint64_t)&v37[v36];
        if (v32)
          operator delete(v32);
        goto LABEL_31;
      }
LABEL_64:
      v52 = *(NSObject **)(v87 + 40);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        awd::AppContext::getAppID(*(awd::AppContext **)v1);
        v53 = awd::asString();
        v54 = awd::asString();
        *(_DWORD *)v92 = 136317186;
        *(_QWORD *)&v92[4] = v53;
        *(_WORD *)&v92[12] = 2080;
        *(_QWORD *)&v92[14] = v54;
        *(_WORD *)&v92[22] = 1024;
        LODWORD(v93) = v84;
        WORD2(v93) = 2048;
        *(_QWORD *)((char *)&v93 + 6) = (v84 + 3839) / 0xF00uLL;
        HIWORD(v93) = 2048;
        v94 = (std::__shared_weak_count *)(v81 + (3840 * v9));
        v95 = 2048;
        v96 = v83;
        v97 = 1024;
        v98 = v22;
        v99 = 1024;
        v100 = (unsigned __int16)v9;
        v101 = 1024;
        v102 = v86 == v82;
        _os_log_impl(&dword_227A72000, v52, OS_LOG_TYPE_DEFAULT, "#I AppID: %s, config type: %s, total length: %d, number of segments: %lu, start: %p, end: %p, segment length: %d, segment number: %d, is last segment: %d", v92, 0x4Cu);
      }
      v55 = *(_QWORD *)(v87 + 144);
      v56 = *(std::__shared_weak_count_vtbl **)(v1 + 56);
      v57 = *(_QWORD *)(v1 + 64);
      if (v57)
      {
        v58 = (unint64_t *)(v57 + 16);
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      v60 = *(const void **)(v1 + 48);
      if (v60)
      {
        v61 = _Block_copy(v60);
        v63 = *(awd::AppContext **)v1;
        v62 = *(_QWORD *)(v1 + 8);
        if (v62)
          goto LABEL_73;
      }
      else
      {
        v61 = 0;
        v63 = *(awd::AppContext **)v1;
        v62 = *(_QWORD *)(v1 + 8);
        if (v62)
        {
LABEL_73:
          v64 = (unint64_t *)(v62 + 8);
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
        }
      }
      v66 = (std::__shared_weak_count *)operator new(0x50uLL);
      v66->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      v66->__shared_weak_owners_ = 0;
      v66->__vftable = (std::__shared_weak_count_vtbl *)off_24F032978;
      v66[1].__vftable = v56;
      v66[1].__shared_owners_ = v57;
      v66[1].__shared_weak_owners_ = (uint64_t)v61;
      v66[2].__vftable = (std::__shared_weak_count_vtbl *)v63;
      v66[2].__shared_owners_ = v62;
      LODWORD(v66[2].__shared_weak_owners_) = v85;
      v66[3].__vftable = (std::__shared_weak_count_vtbl *)v87;
      *(_QWORD *)v92 = MEMORY[0x24BDAC760];
      *(_QWORD *)&v92[8] = 1174405120;
      *(_QWORD *)&v92[16] = ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver20sendAddConfigurationENSt3__110shared_ptrINS2_10AppContextEEENS2_11PayloadTypeERKNS4_6vectorIhNS4_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENSG_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
      *(_QWORD *)&v93 = &__block_descriptor_tmp_10;
      *((_QWORD *)&v93 + 1) = v66 + 1;
      v94 = v66;
      do
        v68 = __ldxr(p_shared_owners);
      while (__stxr(v68 + 1, p_shared_owners));
      aBlock[0] = (const void *)MEMORY[0x24BDAC760];
      aBlock[1] = (const void *)0x40000000;
      aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_0;
      aBlock[3] = &unk_24F032918;
      aBlock[4] = v92;
      v69 = _Block_copy(aBlock);
      v70 = v94;
      if (v94)
      {
        v71 = (unint64_t *)&v94->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      do
        v73 = __ldaxr(p_shared_owners);
      while (__stlxr(v73 - 1, p_shared_owners));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
      *(_QWORD *)&v74 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v74 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v89[0] = v74;
      v89[1] = v74;
      v90 = 0xAAAAAAAAAAAAAAAALL;
      v75 = *(std::__shared_weak_count **)(v55 + 16);
      *(_QWORD *)v92 = *(_QWORD *)(v55 + 8);
      if (!v75)
      {
        *(_QWORD *)&v92[8] = 0;
LABEL_95:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      *(_QWORD *)&v92[8] = std::__shared_weak_count::lock(v75);
      if (!*(_QWORD *)&v92[8])
        goto LABEL_95;
      ice::SendMsgBaseProxy::SendMsgBaseProxy();
      v76 = *(std::__shared_weak_count **)&v92[8];
      if (*(_QWORD *)&v92[8])
      {
        v77 = (unint64_t *)(*(_QWORD *)&v92[8] + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      aBlock[0] = v69;
      ice::SendMsgBaseProxy::callback();
      if (aBlock[0])
        _Block_release(aBlock[0]);
      MEMORY[0x22E2A2FF8](v89);
      MEMORY[0x22E2A35B0](buf);
      v9 = (v9 + 1);
    }
    while (v86 > v9);
  }
  std::unique_ptr<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v88);
  v5 = a1;
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v5 = a1;
    }
  }
  operator delete(v5);
}

void sub_227A8BB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *aBlock,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;

  std::unique_ptr<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a24);
  v43 = __p;
  v44 = (std::__shared_weak_count *)__p[2];
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      v43 = __p;
    }
  }
  operator delete(v43);
  _Unwind_Resume(a1);
}

_QWORD **std::unique_ptr<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](_QWORD **a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  const void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[8];
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v4 = (const void *)v2[6];
    if (v4)
      _Block_release(v4);
    v5 = (void *)v2[3];
    if (v5)
    {
      v2[4] = v5;
      operator delete(v5);
    }
    v6 = (std::__shared_weak_count *)v2[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver20sendAddConfigurationENSt3__110shared_ptrINS2_10AppContextEEENS2_11PayloadTypeERKNS4_6vectorIhNS4_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENSG_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  int v9;
  NSObject *v10;
  int v11;
  int AppID;
  BOOL v13;
  const char *v14;
  void *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _OWORD v18[4];
  __int128 v19;
  const void *buf[4];

  buf[3] = *(const void **)MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD *)(v2 + 48);
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*(_QWORD *)v2)
        {
LABEL_25:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v18[3] = v8;
        v19 = v8;
        v18[1] = v8;
        v18[2] = v8;
        v18[0] = v8;
        AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK::ARI_CsiAwdsAddConfigRspCb_SDK((AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK *)v18, a2);
        if (ice::isARIResponseValid())
        {
          if (AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK::unpack((AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK *)v18))
          {
            v9 = 0;
            v10 = *(NSObject **)(v5 + 40);
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
              goto LABEL_20;
          }
          else
          {
            v11 = **((_DWORD **)&v19 + 1);
            AppID = awd::AppContext::getAppID(*(awd::AppContext **)(v2 + 24));
            if (v11)
              v13 = 0;
            else
              v13 = *(_DWORD *)v19 == AppID;
            v9 = v13;
            v10 = *(NSObject **)(v5 + 40);
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
              goto LABEL_20;
          }
          v14 = "error";
          if (v9)
            v14 = "success";
          LODWORD(buf[0]) = 136315138;
          *(const void **)((char *)buf + 4) = v14;
          _os_log_impl(&dword_227A72000, v10, OS_LOG_TYPE_DEFAULT, "#I Added configuration %s", (uint8_t *)buf, 0xCu);
        }
LABEL_20:
        v15 = *(void **)(v2 + 16);
        if (v15)
          v15 = _Block_copy(v15);
        buf[0] = v15;
        awd::AppContext::operator()();
        if (buf[0])
          _Block_release(buf[0]);
        MEMORY[0x22E2A38BC](v18);
        goto LABEL_25;
      }
    }
  }
}

void sub_227A8BF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c212_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver20sendAddConfigurationENS0_INS1_10AppContextEEENS1_11PayloadTypeERKNS_6vectorIhNS_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c212_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver20sendAddConfigurationENS0_INS1_10AppContextEEENS1_11PayloadTypeERKNS_6vectorIhNS_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F032978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F032978;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (const void *)a1[5];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (const void *)a1[5];
  if (v5)
LABEL_6:
    _Block_release(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  NSObject *v3;
  __int128 v4;
  int AppID;
  _DWORD *v6;
  void *v7;
  uint64_t v8;
  awd::AppContext *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  const void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t aBlock;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  void *v50;
  __int128 *v51;
  uint8_t buf[16];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  void *__p;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 40);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    awd::AppContext::getAppID(*((awd::AppContext **)v1 + 2));
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = awd::asString();
    _os_log_impl(&dword_227A72000, v3, OS_LOG_TYPE_DEFAULT, "#I Requesting to clear configuration for app: %s", buf, 0xCu);
  }
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v54 = v4;
  v55 = v4;
  *(_OWORD *)buf = v4;
  v53 = v4;
  AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK::ARI_CsiAwdsDeleteConfigReq_SDK((AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK *)buf);
  AppID = awd::AppContext::getAppID(*((awd::AppContext **)v1 + 2));
  v6 = operator new(4uLL);
  *v6 = AppID;
  v7 = __p;
  __p = v6;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD *)(v2 + 144);
  v9 = *(awd::AppContext **)v1;
  v10 = *((_QWORD *)v1 + 1);
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (const void *)*((_QWORD *)v1 + 4);
  if (v13)
  {
    v14 = _Block_copy(v13);
    v16 = (std::__shared_weak_count_vtbl *)*((_QWORD *)v1 + 2);
    v15 = *((_QWORD *)v1 + 3);
    if (!v15)
      goto LABEL_14;
  }
  else
  {
    v14 = 0;
    v16 = (std::__shared_weak_count_vtbl *)*((_QWORD *)v1 + 2);
    v15 = *((_QWORD *)v1 + 3);
    if (!v15)
      goto LABEL_14;
  }
  v17 = (unint64_t *)(v15 + 8);
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
LABEL_14:
  v41 = v8;
  v19 = (std::__shared_weak_count *)operator new(0x50uLL);
  v19->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)off_24F0329F8;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)v9;
  v19[1].__shared_owners_ = v10;
  v19[1].__shared_weak_owners_ = (uint64_t)v14;
  v19[2].__vftable = v16;
  v19[2].__shared_owners_ = v15;
  LODWORD(v19[2].__shared_weak_owners_) = AppID;
  v19[3].__vftable = (std::__shared_weak_count_vtbl *)v2;
  v21 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v43 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v43 + 1) = 1174405120;
  *(_QWORD *)&v44 = ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver22sendClearConfigurationENSt3__110shared_ptrINS2_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENS9_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v44 + 1) = &__block_descriptor_tmp_11;
  v45 = (unint64_t)&v19[1];
  v46 = v19;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  aBlock = v21;
  v48 = 0x40000000;
  v49 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_0;
  v50 = &unk_24F032918;
  v51 = &v43;
  v23 = _Block_copy(&aBlock);
  v24 = v46;
  if (v46)
  {
    v25 = (unint64_t *)&v46->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  *(_QWORD *)&v28 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v43 = v28;
  v44 = v28;
  v45 = 0xAAAAAAAAAAAAAAAALL;
  v29 = *(std::__shared_weak_count **)(v41 + 16);
  aBlock = *(_QWORD *)(v41 + 8);
  if (!v29)
  {
    v48 = 0;
LABEL_49:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v48 = (uint64_t)std::__shared_weak_count::lock(v29);
  if (!v48)
    goto LABEL_49;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v30 = (std::__shared_weak_count *)v48;
  if (v48)
  {
    v31 = (unint64_t *)(v48 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  ice::SendMsgBaseProxy::callback();
  if (v23)
    _Block_release(v23);
  MEMORY[0x22E2A2FF8](&v43);
  MEMORY[0x22E2A39B8](buf);
  v33 = (const void *)*((_QWORD *)v1 + 4);
  if (v33)
    _Block_release(v33);
  v34 = (std::__shared_weak_count *)*((_QWORD *)v1 + 3);
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)*((_QWORD *)v1 + 1);
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  operator delete(v1);
  v38 = (std::__shared_weak_count *)a1[2];
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  operator delete(a1);
}

void sub_227A8C500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, void *aBlock, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver22sendClearConfigurationENSt3__110shared_ptrINS2_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENS9_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  int v9;
  NSObject *v10;
  int v11;
  int AppID;
  BOOL v13;
  const char *v14;
  void *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _OWORD v18[4];
  __int128 v19;
  const void *buf[4];

  buf[3] = *(const void **)MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD *)(v2 + 48);
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*(_QWORD *)v2)
        {
LABEL_25:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v18[3] = v8;
        v19 = v8;
        v18[1] = v8;
        v18[2] = v8;
        v18[0] = v8;
        AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK::ARI_CsiAwdsDeleteConfigRspCb_SDK((AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK *)v18, a2);
        if (ice::isARIResponseValid())
        {
          if (AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK::unpack((AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK *)v18))
          {
            v9 = 0;
            v10 = *(NSObject **)(v5 + 40);
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
              goto LABEL_20;
          }
          else
          {
            v11 = **((_DWORD **)&v19 + 1);
            AppID = awd::AppContext::getAppID(*(awd::AppContext **)(v2 + 24));
            if (v11)
              v13 = 0;
            else
              v13 = *(_DWORD *)v19 == AppID;
            v9 = v13;
            v10 = *(NSObject **)(v5 + 40);
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
              goto LABEL_20;
          }
          v14 = "error";
          if (v9)
            v14 = "success";
          LODWORD(buf[0]) = 136315138;
          *(const void **)((char *)buf + 4) = v14;
          _os_log_impl(&dword_227A72000, v10, OS_LOG_TYPE_DEFAULT, "#I Clear configuration %s", (uint8_t *)buf, 0xCu);
        }
LABEL_20:
        v15 = *(void **)(v2 + 16);
        if (v15)
          v15 = _Block_copy(v15);
        buf[0] = v15;
        awd::AppContext::operator()();
        if (buf[0])
          _Block_release(buf[0]);
        MEMORY[0x22E2A3D24](v18);
        goto LABEL_25;
      }
    }
  }
}

void sub_227A8C884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c163_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver22sendClearConfigurationENS0_INS1_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c163_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver22sendClearConfigurationENS0_INS1_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0329F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0329F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (const void *)a1[5];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (const void *)a1[5];
  if (v5)
LABEL_6:
    _Block_release(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  NSObject *v3;
  __int128 v4;
  int AppID;
  int Properties;
  _DWORD *v7;
  void *v8;
  _BYTE *v9;
  void *v10;
  _BYTE *v11;
  void *v12;
  uint64_t v13;
  awd::AppContext *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  void *v19;
  uint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  const void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint8_t buf[16];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  void *__p[2];
  void *v53;
  void *v54;
  __int128 v55;
  __int128 v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t aBlock;
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  void *v62;
  __int128 *v63;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 40);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_227A72000, v3, OS_LOG_TYPE_DEBUG, "#D Requesting to update properties", buf, 2u);
  }
  v53 = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v51 = v4;
  *(_OWORD *)__p = v4;
  v49 = v4;
  v50 = v4;
  *(_OWORD *)buf = v4;
  AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK::ARI_CsiAwdsPiiLocConfigReq_SDK((AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK *)buf);
  AppID = awd::AppContext::getAppID(*((awd::AppContext **)v1 + 2));
  Properties = awd::AppContext::getProperties(*((awd::AppContext **)v1 + 2));
  v7 = operator new(4uLL);
  *v7 = AppID;
  v8 = __p[0];
  __p[0] = v7;
  if (v8)
    operator delete(v8);
  v9 = operator new(1uLL);
  *v9 = BYTE1(Properties) & 1;
  v10 = __p[1];
  __p[1] = v9;
  if (v10)
    operator delete(v10);
  v11 = operator new(1uLL);
  *v11 = BYTE2(Properties) & 1;
  v12 = v53;
  v53 = v11;
  if (v12)
    operator delete(v12);
  v13 = *(_QWORD *)(v2 + 144);
  v14 = *(awd::AppContext **)v1;
  v15 = *((_QWORD *)v1 + 1);
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 16);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = (const void *)*((_QWORD *)v1 + 4);
  if (v18)
  {
    v19 = _Block_copy(v18);
    v21 = (std::__shared_weak_count_vtbl *)*((_QWORD *)v1 + 2);
    v20 = *((_QWORD *)v1 + 3);
    if (!v20)
      goto LABEL_18;
  }
  else
  {
    v19 = 0;
    v21 = (std::__shared_weak_count_vtbl *)*((_QWORD *)v1 + 2);
    v20 = *((_QWORD *)v1 + 3);
    if (!v20)
      goto LABEL_18;
  }
  v22 = (unint64_t *)(v20 + 8);
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
LABEL_18:
  v46 = v13;
  v24 = (std::__shared_weak_count *)operator new(0x50uLL);
  v24->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  v24->__shared_weak_owners_ = 0;
  v24->__vftable = (std::__shared_weak_count_vtbl *)off_24F032A78;
  v24[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  v24[1].__shared_owners_ = v15;
  v24[1].__shared_weak_owners_ = (uint64_t)v19;
  v24[2].__vftable = v21;
  v24[2].__shared_owners_ = v20;
  LODWORD(v24[2].__shared_weak_owners_) = AppID;
  v24[3].__vftable = (std::__shared_weak_count_vtbl *)v2;
  v26 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v55 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v55 + 1) = 1174405120;
  *(_QWORD *)&v56 = ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS2_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENS9_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v56 + 1) = &__block_descriptor_tmp_12;
  v57 = (unint64_t)&v24[1];
  v58 = v24;
  do
    v27 = __ldxr(p_shared_owners);
  while (__stxr(v27 + 1, p_shared_owners));
  aBlock = v26;
  v60 = 0x40000000;
  v61 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_0;
  v62 = &unk_24F032918;
  v63 = &v55;
  v28 = _Block_copy(&aBlock);
  v29 = v58;
  if (v58)
  {
    v30 = (unint64_t *)&v58->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  *(_QWORD *)&v33 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v55 = v33;
  v56 = v33;
  v57 = 0xAAAAAAAAAAAAAAAALL;
  v34 = *(std::__shared_weak_count **)(v46 + 16);
  aBlock = *(_QWORD *)(v46 + 8);
  if (!v34)
  {
    v60 = 0;
LABEL_53:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v60 = (uint64_t)std::__shared_weak_count::lock(v34);
  if (!v60)
    goto LABEL_53;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v35 = (std::__shared_weak_count *)v60;
  if (v60)
  {
    v36 = (unint64_t *)(v60 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v54 = v28;
  ice::SendMsgBaseProxy::callback();
  if (v54)
    _Block_release(v54);
  MEMORY[0x22E2A2FF8](&v55);
  MEMORY[0x22E2A39E8](buf);
  v38 = (const void *)*((_QWORD *)v1 + 4);
  if (v38)
    _Block_release(v38);
  v39 = (std::__shared_weak_count *)*((_QWORD *)v1 + 3);
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)v1 + 1);
  if (v42)
    std::__shared_weak_count::__release_weak(v42);
  operator delete(v1);
  v43 = (std::__shared_weak_count *)a1[2];
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  operator delete(a1);
}

void sub_227A8CE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *aBlock,char a23)
{
  _QWORD *v23;
  const void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;

  if (aBlock)
    _Block_release(aBlock);
  MEMORY[0x22E2A2FF8](&a23);
  MEMORY[0x22E2A39E8](&a11);
  v25 = (const void *)v23[4];
  if (v25)
    _Block_release(v25);
  v26 = (std::__shared_weak_count *)v23[3];
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)v23[1];
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  operator delete(v23);
  v30 = (std::__shared_weak_count *)__p[2];
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS2_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENS9_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  int v9;
  NSObject *v10;
  void *v11;
  int v12;
  int AppID;
  BOOL v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  const char *v17;
  _OWORD v18[4];
  __int128 v19;
  const void *aBlock[4];

  aBlock[3] = *(const void **)MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD *)(v2 + 48);
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*(_QWORD *)v2)
        {
LABEL_23:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v18[3] = v8;
        v19 = v8;
        v18[1] = v8;
        v18[2] = v8;
        v18[0] = v8;
        AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK::ARI_CsiAwdsPiiLocConfigRspCb_SDK((AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK *)v18, a2);
        if (!ice::isARIResponseValid())
        {
          v11 = *(void **)(v2 + 16);
          if (!v11)
            goto LABEL_20;
          goto LABEL_19;
        }
        if (AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK::unpack((AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK *)v18))
        {
          v9 = 0;
          v10 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
            goto LABEL_28;
        }
        else
        {
          v12 = **((_DWORD **)&v19 + 1);
          AppID = awd::AppContext::getAppID(*(awd::AppContext **)(v2 + 24));
          if (v12)
            v14 = 0;
          else
            v14 = *(_DWORD *)v19 == AppID;
          v9 = v14;
          v10 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
LABEL_28:
            v17 = "error";
            if (v9)
              v17 = "success";
            LODWORD(aBlock[0]) = 136315138;
            *(const void **)((char *)aBlock + 4) = v17;
            _os_log_debug_impl(&dword_227A72000, v10, OS_LOG_TYPE_DEBUG, "#D Update properties %s", (uint8_t *)aBlock, 0xCu);
            v11 = *(void **)(v2 + 16);
            if (!v11)
              goto LABEL_20;
            goto LABEL_19;
          }
        }
        v11 = *(void **)(v2 + 16);
        if (!v11)
        {
LABEL_20:
          aBlock[0] = v11;
          awd::AppContext::operator()();
          if (aBlock[0])
            _Block_release(aBlock[0]);
          MEMORY[0x22E2A3D6C](v18);
          goto LABEL_23;
        }
LABEL_19:
        v11 = _Block_copy(v11);
        goto LABEL_20;
      }
    }
  }
}

void sub_227A8D1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c161_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver20sendUpdatePropertiesENS0_INS1_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c161_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver20sendUpdatePropertiesENS0_INS1_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F032A78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F032A78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (const void *)a1[5];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (const void *)a1[5];
  if (v5)
LABEL_6:
    _Block_release(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  NSObject *v3;
  __int128 v4;
  int AppID;
  _DWORD *v6;
  void *v7;
  int v8;
  _DWORD *v9;
  void *v10;
  int v11;
  _DWORD *v12;
  void *v13;
  _DWORD *v14;
  void *v15;
  _DWORD *v16;
  void *v17;
  _DWORD *v18;
  void *v19;
  uint64_t v20;
  awd::AppContext *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  const void *v25;
  void *v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  const void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void **v53;
  uint64_t v54;
  void *v56[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  void *__p[2];
  void *v61[2];
  void *v62[2];
  unint64_t v63;
  void *v64;
  uint64_t aBlock;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  void *v68;
  uint8_t *v69;
  uint8_t buf[16];
  __int128 v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 72);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    awd::asString();
    v53 = (SBYTE7(v57) & 0x80u) == 0 ? v56 : (void **)v56[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v53;
    _os_log_debug_impl(&dword_227A72000, v3, OS_LOG_TYPE_DEBUG, "#D Querying metric: %s", buf, 0xCu);
    if (SBYTE7(v57) < 0)
      operator delete(v56[0]);
  }
  v63 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v61 = v4;
  *(_OWORD *)v62 = v4;
  v59 = v4;
  *(_OWORD *)__p = v4;
  v57 = v4;
  v58 = v4;
  *(_OWORD *)v56 = v4;
  AriSdk::ARI_CsiAwdsQueryReq_SDK::ARI_CsiAwdsQueryReq_SDK((AriSdk::ARI_CsiAwdsQueryReq_SDK *)v56);
  AppID = awd::AppContext::getAppID(*((awd::AppContext **)v1 + 2));
  v6 = operator new(4uLL);
  *v6 = AppID;
  v7 = __p[0];
  __p[0] = v6;
  if (v7)
    operator delete(v7);
  v8 = *((_DWORD *)v1 + 11);
  v9 = operator new(4uLL);
  *v9 = v8;
  v10 = __p[1];
  __p[1] = v9;
  if (v10)
    operator delete(v10);
  v11 = *((_DWORD *)v1 + 9);
  v12 = operator new(4uLL);
  *v12 = v11;
  v13 = v61[1];
  v61[1] = v12;
  if (v13)
    operator delete(v13);
  v14 = operator new(4uLL);
  *v14 = 0;
  v15 = v61[0];
  v61[0] = v14;
  if (v15)
    operator delete(v15);
  v16 = operator new(4uLL);
  *v16 = 0;
  v17 = v62[0];
  v62[0] = v16;
  if (v17)
    operator delete(v17);
  v18 = operator new(4uLL);
  *v18 = 0;
  v19 = v62[1];
  v62[1] = v18;
  if (v19)
    operator delete(v19);
  v20 = *(_QWORD *)(v2 + 144);
  v21 = *(awd::AppContext **)v1;
  v22 = *((_QWORD *)v1 + 1);
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = (const void *)*((_QWORD *)v1 + 8);
  if (v25)
  {
    v26 = _Block_copy(v25);
    v28 = (std::__shared_weak_count_vtbl *)*((_QWORD *)v1 + 2);
    v27 = *((_QWORD *)v1 + 3);
    if (!v27)
      goto LABEL_23;
  }
  else
  {
    v26 = 0;
    v28 = (std::__shared_weak_count_vtbl *)*((_QWORD *)v1 + 2);
    v27 = *((_QWORD *)v1 + 3);
    if (!v27)
      goto LABEL_23;
  }
  v29 = (unint64_t *)(v27 + 8);
  do
    v30 = __ldxr(v29);
  while (__stxr(v30 + 1, v29));
LABEL_23:
  v54 = v20;
  v31 = (std::__shared_weak_count *)operator new(0x50uLL);
  v31->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v31->__shared_owners_;
  v31->__shared_weak_owners_ = 0;
  v31->__vftable = (std::__shared_weak_count_vtbl *)off_24F032AF8;
  v31[1].__vftable = (std::__shared_weak_count_vtbl *)v21;
  v31[1].__shared_owners_ = v22;
  v31[1].__shared_weak_owners_ = (uint64_t)v26;
  v31[2].__vftable = v28;
  v31[2].__shared_owners_ = v27;
  LODWORD(v31[2].__shared_weak_owners_) = AppID;
  v31[3].__vftable = (std::__shared_weak_count_vtbl *)v2;
  v33 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 1174405120;
  *(_QWORD *)&v71 = ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS2_10AppContextEEERKNS2_10MetricInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENSC_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v71 + 1) = &__block_descriptor_tmp_13;
  v72 = (unint64_t)&v31[1];
  v73 = v31;
  do
    v34 = __ldxr(p_shared_owners);
  while (__stxr(v34 + 1, p_shared_owners));
  aBlock = v33;
  v66 = 0x40000000;
  v67 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_0;
  v68 = &unk_24F032918;
  v69 = buf;
  v35 = _Block_copy(&aBlock);
  v36 = v73;
  if (v73)
  {
    v37 = (unint64_t *)&v73->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  do
    v39 = __ldaxr(p_shared_owners);
  while (__stlxr(v39 - 1, p_shared_owners));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)buf = v40;
  v71 = v40;
  v72 = 0xAAAAAAAAAAAAAAAALL;
  v41 = *(std::__shared_weak_count **)(v54 + 16);
  aBlock = *(_QWORD *)(v54 + 8);
  if (!v41)
  {
    v66 = 0;
LABEL_63:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v66 = (uint64_t)std::__shared_weak_count::lock(v41);
  if (!v66)
    goto LABEL_63;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v42 = (std::__shared_weak_count *)v66;
  if (v66)
  {
    v43 = (unint64_t *)(v66 + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v64 = v35;
  ice::SendMsgBaseProxy::callback();
  if (v64)
    _Block_release(v64);
  MEMORY[0x22E2A2FF8](buf);
  MEMORY[0x22E2A3220](v56);
  v45 = (const void *)*((_QWORD *)v1 + 8);
  if (v45)
    _Block_release(v45);
  v46 = (std::__shared_weak_count *)*((_QWORD *)v1 + 3);
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = (std::__shared_weak_count *)*((_QWORD *)v1 + 1);
  if (v49)
    std::__shared_weak_count::__release_weak(v49);
  operator delete(v1);
  v50 = (std::__shared_weak_count *)a1[2];
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  operator delete(a1);
}

void sub_227A8D80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,uint64_t a28,uint64_t a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS2_10AppContextEEERKNS2_10MetricInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENSC_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  int v9;
  NSObject *v10;
  void *v11;
  int v12;
  int AppID;
  BOOL v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  const char *v17;
  _OWORD v18[4];
  __int128 v19;
  const void *aBlock[4];

  aBlock[3] = *(const void **)MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD *)(v2 + 48);
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*(_QWORD *)v2)
        {
LABEL_23:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v18[3] = v8;
        v19 = v8;
        v18[1] = v8;
        v18[2] = v8;
        v18[0] = v8;
        AriSdk::ARI_CsiAwdsQueryRspCb_SDK::ARI_CsiAwdsQueryRspCb_SDK((AriSdk::ARI_CsiAwdsQueryRspCb_SDK *)v18, a2);
        if (!ice::isARIResponseValid())
        {
          v11 = *(void **)(v2 + 16);
          if (!v11)
            goto LABEL_20;
          goto LABEL_19;
        }
        if (AriSdk::ARI_CsiAwdsQueryRspCb_SDK::unpack((AriSdk::ARI_CsiAwdsQueryRspCb_SDK *)v18))
        {
          v9 = 0;
          v10 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
            goto LABEL_28;
        }
        else
        {
          v12 = **((_DWORD **)&v19 + 1);
          AppID = awd::AppContext::getAppID(*(awd::AppContext **)(v2 + 24));
          if (v12)
            v14 = 0;
          else
            v14 = *(_DWORD *)v19 == AppID;
          v9 = v14;
          v10 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
LABEL_28:
            v17 = "error";
            if (v9)
              v17 = "success";
            LODWORD(aBlock[0]) = 136315138;
            *(const void **)((char *)aBlock + 4) = v17;
            _os_log_debug_impl(&dword_227A72000, v10, OS_LOG_TYPE_DEBUG, "#D Metric query %s", (uint8_t *)aBlock, 0xCu);
            v11 = *(void **)(v2 + 16);
            if (!v11)
              goto LABEL_20;
            goto LABEL_19;
          }
        }
        v11 = *(void **)(v2 + 16);
        if (!v11)
        {
LABEL_20:
          aBlock[0] = v11;
          awd::AppContext::operator()();
          if (aBlock[0])
            _Block_release(aBlock[0]);
          MEMORY[0x22E2A33C4](v18);
          goto LABEL_23;
        }
LABEL_19:
        v11 = _Block_copy(v11);
        goto LABEL_20;
      }
    }
  }
}

void sub_227A8DBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c179_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver19sendQueriableMetricENS0_INS1_10AppContextEEERKNS1_10MetricInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c179_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver19sendQueriableMetricENS0_INS1_10AppContextEEERKNS1_10MetricInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F032AF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F032AF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (const void *)a1[5];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (const void *)a1[5];
  if (v5)
LABEL_6:
    _Block_release(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  NSObject *v3;
  __int128 v4;
  int AppID;
  _DWORD *v6;
  void *v7;
  int v8;
  _DWORD *v9;
  void *v10;
  int v11;
  _DWORD *v12;
  void *v13;
  int v14;
  _DWORD *v15;
  void *v16;
  int v17;
  _DWORD *v18;
  void *v19;
  int v20;
  _DWORD *v21;
  void *v22;
  uint64_t v23;
  awd::AppContext *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  const void *v28;
  void *v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  const void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void **v56;
  void **v57;
  uint64_t v58;
  void *v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  void *__p[2];
  void *v65[2];
  void *v66[2];
  unint64_t v67;
  void *v68;
  void *v69[2];
  __int128 v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  _BYTE aBlock[24];
  void *v74;
  void **v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 96);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    awd::asString();
    awd::asString();
    v56 = v60;
    if (SBYTE7(v61) < 0)
      v56 = (void **)v60[0];
    if ((SBYTE7(v70) & 0x80u) == 0)
      v57 = v69;
    else
      v57 = (void **)v69[0];
    *(_DWORD *)aBlock = 136315394;
    *(_QWORD *)&aBlock[4] = v56;
    *(_WORD *)&aBlock[12] = 2080;
    *(_QWORD *)&aBlock[14] = v57;
    _os_log_debug_impl(&dword_227A72000, v3, OS_LOG_TYPE_DEBUG, "#D Querying metric: %s with trigger: %s", aBlock, 0x16u);
    if (SBYTE7(v70) < 0)
      operator delete(v69[0]);
    if (SBYTE7(v61) < 0)
      operator delete(v60[0]);
  }
  v67 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v65 = v4;
  *(_OWORD *)v66 = v4;
  v63 = v4;
  *(_OWORD *)__p = v4;
  v61 = v4;
  v62 = v4;
  *(_OWORD *)v60 = v4;
  AriSdk::ARI_CsiAwdsQueryReq_SDK::ARI_CsiAwdsQueryReq_SDK((AriSdk::ARI_CsiAwdsQueryReq_SDK *)v60);
  AppID = awd::AppContext::getAppID(*((awd::AppContext **)v1 + 2));
  v6 = operator new(4uLL);
  *v6 = AppID;
  v7 = __p[0];
  __p[0] = v6;
  if (v7)
    operator delete(v7);
  v8 = *((_DWORD *)v1 + 17);
  v9 = operator new(4uLL);
  *v9 = v8;
  v10 = __p[1];
  __p[1] = v9;
  if (v10)
    operator delete(v10);
  v11 = *((_DWORD *)v1 + 18);
  v12 = operator new(4uLL);
  *v12 = v11;
  v13 = v65[0];
  v65[0] = v12;
  if (v13)
    operator delete(v13);
  v14 = *((_DWORD *)v1 + 16);
  v15 = operator new(4uLL);
  *v15 = v14;
  v16 = v65[1];
  v65[1] = v15;
  if (v16)
    operator delete(v16);
  v17 = *((_DWORD *)v1 + 8);
  v18 = operator new(4uLL);
  *v18 = v17;
  v19 = v66[0];
  v66[0] = v18;
  if (v19)
    operator delete(v19);
  v20 = *((_DWORD *)v1 + 9);
  v21 = operator new(4uLL);
  *v21 = v20;
  v22 = v66[1];
  v66[1] = v21;
  if (v22)
    operator delete(v22);
  v23 = *(_QWORD *)(v2 + 144);
  v24 = *(awd::AppContext **)v1;
  v25 = *((_QWORD *)v1 + 1);
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 16);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = (const void *)*((_QWORD *)v1 + 11);
  if (v28)
  {
    v29 = _Block_copy(v28);
    v31 = (std::__shared_weak_count_vtbl *)*((_QWORD *)v1 + 2);
    v30 = *((_QWORD *)v1 + 3);
    if (!v30)
      goto LABEL_23;
  }
  else
  {
    v29 = 0;
    v31 = (std::__shared_weak_count_vtbl *)*((_QWORD *)v1 + 2);
    v30 = *((_QWORD *)v1 + 3);
    if (!v30)
      goto LABEL_23;
  }
  v32 = (unint64_t *)(v30 + 8);
  do
    v33 = __ldxr(v32);
  while (__stxr(v33 + 1, v32));
LABEL_23:
  v58 = v23;
  v34 = (std::__shared_weak_count *)operator new(0x50uLL);
  v34->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v34->__shared_owners_;
  v34->__shared_weak_owners_ = 0;
  v34->__vftable = (std::__shared_weak_count_vtbl *)off_24F032B78;
  v34[1].__vftable = (std::__shared_weak_count_vtbl *)v24;
  v34[1].__shared_owners_ = v25;
  v34[1].__shared_weak_owners_ = (uint64_t)v29;
  v34[2].__vftable = v31;
  v34[2].__shared_owners_ = v30;
  LODWORD(v34[2].__shared_weak_owners_) = AppID;
  v34[3].__vftable = (std::__shared_weak_count_vtbl *)v2;
  v36 = MEMORY[0x24BDAC760];
  v69[0] = (void *)MEMORY[0x24BDAC760];
  v69[1] = (void *)1174405120;
  *(_QWORD *)&v70 = ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS2_10AppContextEEERKNS2_10MetricInfoERKNS2_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENSF_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v70 + 1) = &__block_descriptor_tmp_14_0;
  v71 = (unint64_t)&v34[1];
  v72 = v34;
  do
    v37 = __ldxr(p_shared_owners);
  while (__stxr(v37 + 1, p_shared_owners));
  *(_QWORD *)aBlock = v36;
  *(_QWORD *)&aBlock[8] = 0x40000000;
  *(_QWORD *)&aBlock[16] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_0;
  v74 = &unk_24F032918;
  v75 = v69;
  v38 = _Block_copy(aBlock);
  v39 = v72;
  if (v72)
  {
    v40 = (unint64_t *)&v72->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  do
    v42 = __ldaxr(p_shared_owners);
  while (__stlxr(v42 - 1, p_shared_owners));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  *(_QWORD *)&v43 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v69 = v43;
  v70 = v43;
  v71 = 0xAAAAAAAAAAAAAAAALL;
  v44 = *(std::__shared_weak_count **)(v58 + 16);
  *(_QWORD *)aBlock = *(_QWORD *)(v58 + 8);
  if (!v44)
  {
    *(_QWORD *)&aBlock[8] = 0;
LABEL_67:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  *(_QWORD *)&aBlock[8] = std::__shared_weak_count::lock(v44);
  if (!*(_QWORD *)&aBlock[8])
    goto LABEL_67;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v45 = *(std::__shared_weak_count **)&aBlock[8];
  if (*(_QWORD *)&aBlock[8])
  {
    v46 = (unint64_t *)(*(_QWORD *)&aBlock[8] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v68 = v38;
  ice::SendMsgBaseProxy::callback();
  if (v68)
    _Block_release(v68);
  MEMORY[0x22E2A2FF8](v69);
  MEMORY[0x22E2A3220](v60);
  v48 = (const void *)*((_QWORD *)v1 + 11);
  if (v48)
    _Block_release(v48);
  v49 = (std::__shared_weak_count *)*((_QWORD *)v1 + 3);
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)v1 + 1);
  if (v52)
    std::__shared_weak_count::__release_weak(v52);
  operator delete(v1);
  v53 = (std::__shared_weak_count *)a1[2];
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  operator delete(a1);
}

void sub_227A8E264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *aBlock,char a30)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS2_10AppContextEEERKNS2_10MetricInfoERKNS2_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENSF_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  int v9;
  NSObject *v10;
  void *v11;
  int v12;
  int AppID;
  BOOL v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  const char *v17;
  _OWORD v18[4];
  __int128 v19;
  const void *aBlock[4];

  aBlock[3] = *(const void **)MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD *)(v2 + 48);
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*(_QWORD *)v2)
        {
LABEL_23:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v18[3] = v8;
        v19 = v8;
        v18[1] = v8;
        v18[2] = v8;
        v18[0] = v8;
        AriSdk::ARI_CsiAwdsQueryRspCb_SDK::ARI_CsiAwdsQueryRspCb_SDK((AriSdk::ARI_CsiAwdsQueryRspCb_SDK *)v18, a2);
        if (!ice::isARIResponseValid())
        {
          v11 = *(void **)(v2 + 16);
          if (!v11)
            goto LABEL_20;
          goto LABEL_19;
        }
        if (AriSdk::ARI_CsiAwdsQueryRspCb_SDK::unpack((AriSdk::ARI_CsiAwdsQueryRspCb_SDK *)v18))
        {
          v9 = 0;
          v10 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
            goto LABEL_28;
        }
        else
        {
          v12 = **((_DWORD **)&v19 + 1);
          AppID = awd::AppContext::getAppID(*(awd::AppContext **)(v2 + 24));
          if (v12)
            v14 = 0;
          else
            v14 = *(_DWORD *)v19 == AppID;
          v9 = v14;
          v10 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
LABEL_28:
            v17 = "error";
            if (v9)
              v17 = "success";
            LODWORD(aBlock[0]) = 136315138;
            *(const void **)((char *)aBlock + 4) = v17;
            _os_log_debug_impl(&dword_227A72000, v10, OS_LOG_TYPE_DEBUG, "#D Metric query %s", (uint8_t *)aBlock, 0xCu);
            v11 = *(void **)(v2 + 16);
            if (!v11)
              goto LABEL_20;
            goto LABEL_19;
          }
        }
        v11 = *(void **)(v2 + 16);
        if (!v11)
        {
LABEL_20:
          aBlock[0] = v11;
          awd::AppContext::operator()();
          if (aBlock[0])
            _Block_release(aBlock[0]);
          MEMORY[0x22E2A33C4](v18);
          goto LABEL_23;
        }
LABEL_19:
        v11 = _Block_copy(v11);
        goto LABEL_20;
      }
    }
  }
}

void sub_227A8E62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c199_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver19sendQueriableMetricENS0_INS1_10AppContextEEERKNS1_10MetricInfoERKNS1_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c199_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver19sendQueriableMetricENS0_INS1_10AppContextEEERKNS1_10MetricInfoERKNS1_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F032B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F032B78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (const void *)a1[5];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (const void *)a1[5];
  if (v5)
LABEL_6:
    _Block_release(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::init(void)::$_0>(awd::ARIAwdCommandDriver::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::init(void)::$_0,dispatch_queue_s *::default_delete<awd::ARIAwdCommandDriver::init(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count_vtbl *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint8_t buf[8];
  std::__shared_weak_count *v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  uint64_t aBlock;
  uint64_t v87;
  uint64_t (*v88)(uint64_t);
  void *v89;
  uint8_t *v90;

  v1 = *a1;
  v2 = **a1;
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_227A72000, v3, OS_LOG_TYPE_DEBUG, "#D Init", buf, 2u);
    v4 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v4)
      goto LABEL_116;
  }
  else
  {
    v4 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v4)
      goto LABEL_116;
  }
  v5 = *(std::__shared_weak_count_vtbl **)(v2 + 72);
  v6 = std::__shared_weak_count::lock(v4);
  if (!v6)
    goto LABEL_116;
  v7 = v6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = (std::__shared_weak_count *)operator new(0x38uLL);
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14[1].__vftable = v5;
  v14->__vftable = (std::__shared_weak_count_vtbl *)off_24F032BF8;
  v14[1].__shared_owners_ = (uint64_t)v7;
  v14[1].__shared_weak_owners_ = (uint64_t)awd::ARIAwdCommandDriver::handleClientStarted_sync;
  v14[2].__vftable = 0;
  v16 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v81 = (std::__shared_weak_count *)1174405120;
  v82 = ___ZN3ice6detail17wrapEventCallbackIZNS_6Client15setEventHandlerIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJEEEvNS2_5EventENSt3__110shared_ptrIT_EEMT0_FT1_DpT2_EEUlvE_vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENS8_17integral_constantIiLi0EEEOSA__block_invoke;
  v83 = &__block_descriptor_tmp_16_0;
  v84 = v14 + 1;
  v85 = v14;
  do
    v17 = __ldxr(v15);
  while (__stxr(v17 + 1, v15));
  aBlock = v16;
  v87 = 0x40000000;
  v88 = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_0;
  v89 = &unk_24F032C40;
  v90 = buf;
  v18 = _Block_copy(&aBlock);
  v19 = v85;
  if (v85)
  {
    v20 = (unint64_t *)&v85->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  do
    v22 = __ldaxr(v15);
  while (__stlxr(v22 - 1, v15));
  if (v22)
  {
    if (v18)
    {
LABEL_22:
      v23 = _Block_copy(v18);
      goto LABEL_25;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_22;
  }
  v23 = 0;
LABEL_25:
  *(_QWORD *)buf = v23;
  ice::Client::regEventHandlerInternal();
  if (*(_QWORD *)buf)
    _Block_release(*(const void **)buf);
  if (v18)
    _Block_release(v18);
  std::__shared_weak_count::__release_weak(v7);
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v26 = v1[1];
  v25 = v1[2];
  if (v25)
  {
    v27 = (unint64_t *)(v25 + 16);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = (std::__shared_weak_count *)operator new(0x30uLL);
  v29->__shared_owners_ = 0;
  v30 = (unint64_t *)&v29->__shared_owners_;
  v29->__shared_weak_owners_ = 0;
  v29->__vftable = (std::__shared_weak_count_vtbl *)off_24F032CA0;
  v29[1].__vftable = (std::__shared_weak_count_vtbl *)v2;
  v29[1].__shared_owners_ = v26;
  v29[1].__shared_weak_owners_ = v25;
  *(_QWORD *)buf = v16;
  v81 = (std::__shared_weak_count *)1174405120;
  v82 = ___ZN3ice6detail17wrapEventCallbackIZZN3awd19ARIAwdCommandDriver4initEvENK3__0clEvEUlvE_vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke;
  v83 = &__block_descriptor_tmp_19_0;
  v84 = v29 + 1;
  v85 = v29;
  do
    v31 = __ldxr(v30);
  while (__stxr(v31 + 1, v30));
  aBlock = v16;
  v87 = 0x40000000;
  v88 = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_0;
  v89 = &unk_24F032C40;
  v90 = buf;
  v32 = _Block_copy(&aBlock);
  v33 = v85;
  if (v85)
  {
    v34 = (unint64_t *)&v85->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  do
    v36 = __ldaxr(v30);
  while (__stlxr(v36 - 1, v30));
  if (v36)
  {
    if (v32)
    {
LABEL_46:
      v37 = _Block_copy(v32);
      goto LABEL_49;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if (v32)
      goto LABEL_46;
  }
  v37 = 0;
LABEL_49:
  *(_QWORD *)buf = v37;
  ice::Client::regEventHandlerInternal();
  if (*(_QWORD *)buf)
    _Block_release(*(const void **)buf);
  if (v32)
    _Block_release(v32);
  v39 = v1[1];
  v38 = v1[2];
  if (v38)
  {
    v40 = (unint64_t *)(v38 + 16);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = (std::__shared_weak_count *)operator new(0x30uLL);
  v42->__shared_owners_ = 0;
  v43 = (unint64_t *)&v42->__shared_owners_;
  v42->__shared_weak_owners_ = 0;
  v42->__vftable = (std::__shared_weak_count_vtbl *)off_24F032D20;
  v42[1].__vftable = (std::__shared_weak_count_vtbl *)v2;
  v42[1].__shared_owners_ = v39;
  v42[1].__shared_weak_owners_ = v38;
  *(_QWORD *)buf = v16;
  v81 = (std::__shared_weak_count *)1174405120;
  v82 = ___ZN3ice6detail17wrapEventCallbackIZZN3awd19ARIAwdCommandDriver4initEvENK3__0clEvEUlvE0_vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke;
  v83 = &__block_descriptor_tmp_20;
  v84 = v42 + 1;
  v85 = v42;
  do
    v44 = __ldxr(v43);
  while (__stxr(v44 + 1, v43));
  aBlock = v16;
  v87 = 0x40000000;
  v88 = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_0;
  v89 = &unk_24F032C40;
  v90 = buf;
  v45 = _Block_copy(&aBlock);
  v46 = v85;
  if (v85)
  {
    v47 = (unint64_t *)&v85->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  do
    v49 = __ldaxr(v43);
  while (__stlxr(v49 - 1, v43));
  if (v49)
  {
    if (v45)
    {
LABEL_66:
      v50 = _Block_copy(v45);
      goto LABEL_69;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    if (v45)
      goto LABEL_66;
  }
  v50 = 0;
LABEL_69:
  *(_QWORD *)buf = v50;
  ice::Client::regEventHandlerInternal();
  if (*(_QWORD *)buf)
    _Block_release(*(const void **)buf);
  if (v45)
    _Block_release(v45);
  v51 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v51)
    goto LABEL_116;
  v52 = *(_QWORD *)(v2 + 144);
  v53 = *(_QWORD *)(v2 + 72);
  v54 = std::__shared_weak_count::lock(v51);
  if (!v54)
    goto LABEL_116;
  v55 = v54;
  v56 = (unint64_t *)&v54->__shared_owners_;
  do
    v57 = __ldxr(v56);
  while (__stxr(v57 + 1, v56));
  v58 = (unint64_t *)&v54->__shared_weak_owners_;
  do
    v59 = __ldxr(v58);
  while (__stxr(v59 + 1, v58));
  do
    v60 = __ldaxr(v56);
  while (__stlxr(v60 - 1, v56));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v55);
  }
  *(_QWORD *)buf = v53;
  v81 = v55;
  do
    v61 = __ldxr(v58);
  while (__stxr(v61 + 1, v58));
  v82 = awd::ARIAwdCommandDriver::handleMetricSubmissionInd_sync;
  v83 = 0;
  ice::Client::regIndication<void ice::Client::regIndication<awd::AwdCommandDriver,awd::ARIAwdCommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<awd::AwdCommandDriver>,void (awd::ARIAwdCommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>(v52, 3452829696, (uint64_t)buf);
  if (v81)
    std::__shared_weak_count::__release_weak(v81);
  std::__shared_weak_count::__release_weak(v55);
  do
    v62 = __ldaxr(v56);
  while (__stlxr(v62 - 1, v56));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  v63 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v63
    || (v64 = *(_QWORD *)(v2 + 144), v65 = *(_QWORD *)(v2 + 72), (v66 = std::__shared_weak_count::lock(v63)) == 0))
  {
LABEL_116:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v67 = v66;
  v68 = (unint64_t *)&v66->__shared_owners_;
  do
    v69 = __ldxr(v68);
  while (__stxr(v69 + 1, v68));
  v70 = (unint64_t *)&v66->__shared_weak_owners_;
  do
    v71 = __ldxr(v70);
  while (__stxr(v71 + 1, v70));
  do
    v72 = __ldaxr(v68);
  while (__stlxr(v72 - 1, v68));
  if (!v72)
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v67);
  }
  *(_QWORD *)buf = v65;
  v81 = v67;
  do
    v73 = __ldxr(v70);
  while (__stxr(v73 + 1, v70));
  v82 = awd::ARIAwdCommandDriver::handleTriggerSubmissionInd_sync;
  v83 = 0;
  ice::Client::regIndication<void ice::Client::regIndication<awd::AwdCommandDriver,awd::ARIAwdCommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<awd::AwdCommandDriver>,void (awd::ARIAwdCommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>(v64, 3452796928, (uint64_t)buf);
  if (v81)
    std::__shared_weak_count::__release_weak(v81);
  std::__shared_weak_count::__release_weak(v67);
  do
    v74 = __ldaxr(v68);
  while (__stlxr(v74 - 1, v68));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
  }
  ice::Client::setIndShouldWake(*(ice::Client **)(v2 + 144));
  ice::Client::setIndShouldWake(*(ice::Client **)(v2 + 144));
  ice::Client::start(*(ice::Client **)(v2 + 144));
  v75 = (std::__shared_weak_count *)v1[2];
  if (v75)
    std::__shared_weak_count::__release_weak(v75);
  operator delete(v1);
  v76 = (std::__shared_weak_count *)a1[2];
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  operator delete(a1);
}

void sub_227A8EF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, void *aBlock, std::__shared_weak_count *a12)
{
  unint64_t *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  if (a12)
    std::__shared_weak_count::__release_weak(a12);
  std::__shared_weak_count::__release_weak(v14);
  do
    v16 = __ldaxr(v12);
  while (__stlxr(v16 - 1, v12));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  v17 = (std::__shared_weak_count *)v13[2];
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  operator delete(v13);
  v18 = (std::__shared_weak_count *)__p[2];
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZN3ice6detail17wrapEventCallbackIZNS_6Client15setEventHandlerIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJEEEvNS2_5EventENSt3__110shared_ptrIT_EEMT0_FT1_DpT2_EEUlvE_vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENS8_17integral_constantIiLi0EEEOSA__block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v1 = *(_QWORD **)(a1 + 32);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[1];
    if (v2)
    {
      v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        v4 = v3;
        if (*v1)
        {
          v5 = (void (*)(_QWORD *))v1[2];
          v6 = v1[3];
          v7 = (_QWORD *)(*v1 + (v6 >> 1));
          if ((v6 & 1) != 0)
            v5 = *(void (**)(_QWORD *))(*v7 + v5);
          v5(v7);
        }
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
}

void sub_227A8F1C0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c153_ZTSNSt3__110shared_ptrIZN3ice6Client15setEventHandlerIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJEEEvNS2_5EventENS0_IT_EEMT0_FT1_DpT2_EEUlvE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c153_ZTSNSt3__110shared_ptrIZN3ice6Client15setEventHandlerIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJEEEvNS2_5EventENS0_IT_EEMT0_FT1_DpT2_EEUlvE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZN3ice6Client15setEventHandlerIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJEEEvNS2_5EventENS_10shared_ptrIT_EEMT0_FT1_DpT2_EEUlvE_NS_9allocatorISH_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F032BF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZN3ice6Client15setEventHandlerIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJEEEvNS2_5EventENS_10shared_ptrIT_EEMT0_FT1_DpT2_EEUlvE_NS_9allocatorISH_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F032BF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZN3ice6Client15setEventHandlerIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJEEEvNS2_5EventENS_10shared_ptrIT_EEMT0_FT1_DpT2_EEUlvE_NS_9allocatorISH_EEE16__on_zero_sharedEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_0(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

void ___ZN3ice6detail17wrapEventCallbackIZZN3awd19ARIAwdCommandDriver4initEvENK3__0clEvEUlvE_vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2)
    {
      v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        v4 = v3;
        if (*(_QWORD *)(v1 + 8))
          awd::AwdCommandDriver::broadcastState_sync();
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
}

void sub_227A8F36C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c78_ZTSNSt3__110shared_ptrIZZN3awd19ARIAwdCommandDriver4initEvENK3__0clEvEUlvE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c78_ZTSNSt3__110shared_ptrIZZN3awd19ARIAwdCommandDriver4initEvENK3__0clEvEUlvE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F032CA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F032CA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#1}>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN3ice6detail17wrapEventCallbackIZZN3awd19ARIAwdCommandDriver4initEvENK3__0clEvEUlvE0_vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2)
    {
      v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        v4 = v3;
        if (*(_QWORD *)(v1 + 8))
          awd::AwdCommandDriver::broadcastState_sync();
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
}

void sub_227A8F4F8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c79_ZTSNSt3__110shared_ptrIZZN3awd19ARIAwdCommandDriver4initEvENK3__0clEvEUlvE0_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c79_ZTSNSt3__110shared_ptrIZZN3awd19ARIAwdCommandDriver4initEvENK3__0clEvEUlvE0_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#2}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F032D20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#2}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F032D20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#2}>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ice::Client::regIndication<void ice::Client::regIndication<awd::AwdCommandDriver,awd::ARIAwdCommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<awd::AwdCommandDriver>,void (awd::ARIAwdCommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  __int128 v5;
  unint64_t *p_shared_owners;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[5];
  std::__shared_weak_count *v15;
  _QWORD aBlock[5];

  v4 = (std::__shared_weak_count *)operator new(0x38uLL);
  v5 = *(_OWORD *)(a3 + 16);
  v4[1].std::__shared_count = *(std::__shared_count *)a3;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_24F032DA0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)&v4[1].__shared_weak_owners_ = v5;
  v7 = MEMORY[0x24BDAC760];
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 1174405120;
  v14[2] = ___ZN3ice6detail12wrapCallbackIZNS_6Client13regIndicationIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJPKhjEEEvjNSt3__110shared_ptrIT_EEMT0_FT1_DpT2_EEUlS8_jE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENS9_17integral_constantIiLi2EEEOSB__block_invoke;
  v14[3] = &__block_descriptor_tmp_21_0;
  v14[4] = v4 + 1;
  v15 = v4;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  aBlock[0] = v7;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_0;
  aBlock[3] = &unk_24F032918;
  aBlock[4] = v14;
  v9 = _Block_copy(aBlock);
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  ice::Client::regIndicationInternal();
  if (v9)
    _Block_release(v9);
}

void sub_227A8F768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void ___ZN3ice6detail12wrapCallbackIZNS_6Client13regIndicationIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJPKhjEEEvjNSt3__110shared_ptrIT_EEMT0_FT1_DpT2_EEUlS8_jE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENS9_17integral_constantIiLi2EEEOSB__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v3 = *(_QWORD **)(a1 + 32);
  if (v3)
  {
    v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      v7 = std::__shared_weak_count::lock(v4);
      if (v7)
      {
        v8 = v7;
        if (*v3)
        {
          v9 = (void (*)(_QWORD *, uint64_t, uint64_t))v3[2];
          v10 = v3[3];
          v11 = (_QWORD *)(*v3 + (v10 >> 1));
          if ((v10 & 1) != 0)
            v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*v11 + v9);
          v9(v11, a2, a3);
        }
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_227A8F830(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZN3ice6Client13regIndicationIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJPKhjEEEvjNS0_IT_EEMT0_FT1_DpT2_EEUlS8_jE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZN3ice6Client13regIndicationIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJPKhjEEEvjNS0_IT_EEMT0_FT1_DpT2_EEUlS8_jE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<void ice::Client::regIndication<awd::AwdCommandDriver,awd::ARIAwdCommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<awd::AwdCommandDriver>,void (awd::ARIAwdCommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void ice::Client::regIndication<awd::AwdCommandDriver,awd::ARIAwdCommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<awd::AwdCommandDriver>,void (awd::ARIAwdCommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F032DA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void ice::Client::regIndication<awd::AwdCommandDriver,awd::ARIAwdCommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<awd::AwdCommandDriver>,void (awd::ARIAwdCommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void ice::Client::regIndication<awd::AwdCommandDriver,awd::ARIAwdCommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<awd::AwdCommandDriver>,void (awd::ARIAwdCommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F032DA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<void ice::Client::regIndication<awd::AwdCommandDriver,awd::ARIAwdCommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<awd::AwdCommandDriver>,void (awd::ARIAwdCommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void ice::Client::regIndication<awd::AwdCommandDriver,awd::ARIAwdCommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<awd::AwdCommandDriver>,void (awd::ARIAwdCommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_227A8FA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_227A8FA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<awd::ARIAwdCommandDriver>::shared_ptr[abi:ne180100]<awd::ARIAwdCommandDriver,std::shared_ptr<awd::ARIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::ARIAwdCommandDriver>(awd::ARIAwdCommandDriver*)::{lambda(awd::ARIAwdCommandDriver*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_24F032DF0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_227A8FB60(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<awd::ARIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::ARIAwdCommandDriver>(awd::ARIAwdCommandDriver*)::{lambda(awd::ARIAwdCommandDriver*)#1}::operator() const(awd::ARIAwdCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_227A8FB80(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<awd::ARIAwdCommandDriver *,std::shared_ptr<awd::ARIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::ARIAwdCommandDriver>(awd::ARIAwdCommandDriver*)::{lambda(awd::ARIAwdCommandDriver *)#1},std::allocator<awd::ARIAwdCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<awd::ARIAwdCommandDriver *,std::shared_ptr<awd::ARIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::ARIAwdCommandDriver>(awd::ARIAwdCommandDriver*)::{lambda(awd::ARIAwdCommandDriver *)#1},std::allocator<awd::ARIAwdCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<awd::ARIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::ARIAwdCommandDriver>(awd::ARIAwdCommandDriver*)::{lambda(awd::ARIAwdCommandDriver*)#1}::operator() const(awd::ARIAwdCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<awd::ARIAwdCommandDriver *,std::shared_ptr<awd::ARIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::ARIAwdCommandDriver>(awd::ARIAwdCommandDriver*)::{lambda(awd::ARIAwdCommandDriver *)#1},std::allocator<awd::ARIAwdCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN3awd16AwdCommandDriverEE15make_shared_ptrINS1_19ARIAwdCommandDriverEE"
                     "ENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN3awd16AwdCommandDriverEE15make_shared_ptrINS1_19ARIAwdComm"
                                "andDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN3awd16AwdCommandDriverEE15make_shared_ptrINS1_19ARIAwdCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN3awd16AwdCommandDriverEE15make_shared_ptrINS1_19ARIAwdCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<awd::ARIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::ARIAwdCommandDriver>(awd::ARIAwdCommandDriver*)::{lambda(awd::ARIAwdCommandDriver*)#1}::operator() const(awd::ARIAwdCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ___ZN3ice6detail12wrapCallbackIZNK3awd19ARIAwdCommandDriver21sendGlobalSwitch_syncEbE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  int v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const char *v13;
  _OWORD v14[4];
  __int128 v15;
  uint8_t buf[4];
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = v2[2];
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*v2)
          goto LABEL_9;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v14[3] = v8;
        v15 = v8;
        v14[1] = v8;
        v14[2] = v8;
        v14[0] = v8;
        AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK::ARI_CsiAwdsGlobalSwitchRspCb_SDK((AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK *)v14, a2);
        if (ice::isARIResponseValid())
        {
          if (AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK::unpack((AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK *)v14))
          {
            v9 = 0;
            v10 = *(NSObject **)(v5 + 40);
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
              goto LABEL_8;
          }
          else
          {
            v9 = *(_DWORD *)v15;
            v10 = *(NSObject **)(v5 + 40);
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
              goto LABEL_8;
          }
          v13 = "enabled";
          if (!v9)
            v13 = "disabled";
          *(_DWORD *)buf = 136315138;
          v17 = v13;
          _os_log_debug_impl(&dword_227A72000, v10, OS_LOG_TYPE_DEBUG, "#D Global switch %s", buf, 0xCu);
        }
LABEL_8:
        MEMORY[0x22E2A3D48](v14);
LABEL_9:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void sub_227A8FDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v12;

  MEMORY[0x22E2A3D48](&a9);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c84_ZTSNSt3__110shared_ptrIZNK3awd19ARIAwdCommandDriver21sendGlobalSwitch_syncEbE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c84_ZTSNSt3__110shared_ptrIZNK3awd19ARIAwdCommandDriver21sendGlobalSwitch_syncEbE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendGlobalSwitch_sync(BOOL)::$_0,std::allocator<awd::ARIAwdCommandDriver::sendGlobalSwitch_sync(BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F032E70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendGlobalSwitch_sync(BOOL)::$_0,std::allocator<awd::ARIAwdCommandDriver::sendGlobalSwitch_sync(BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F032E70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendGlobalSwitch_sync(BOOL)::$_0,std::allocator<awd::ARIAwdCommandDriver::sendGlobalSwitch_sync(BOOL)::$_0>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

double ARICommandDriverFactory::create_default_global@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  double result;
  uint64_t v5;

  v3 = operator new(0xA8uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = off_24F032F90;
  CommandDriverFactory::CommandDriverFactory((CommandDriverFactory *)(v3 + 3));
  v3[3] = &off_24F032EC0;
  result = 0.0;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  v3[20] = 0;
  *a1 = v5;
  a1[1] = v3;
  return result;
}

void sub_227A8FF38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void ARICommandDriverFactory::ARICommandDriverFactory(ARICommandDriverFactory *this)
{
  uint64_t v1;

  CommandDriverFactory::CommandDriverFactory(this);
  *(_QWORD *)v1 = &off_24F032EC0;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_QWORD *)(v1 + 136) = 0;
}

{
  uint64_t v1;

  CommandDriverFactory::CommandDriverFactory(this);
  *(_QWORD *)v1 = &off_24F032EC0;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_QWORD *)(v1 + 136) = 0;
}

const char *ARICommandDriverFactory::getName(ARICommandDriverFactory *this)
{
  return "ari.driver.factory";
}

void ARICommandDriverFactory::createRadioCommandDriver(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  dispatch_object_t object;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[16];

  v6 = a1[13];
  if (v6)
  {
LABEL_2:
    v7 = a2[1];
    v25 = *a2;
    v26 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      v6 = a1[13];
      object = v6;
      if (!v6)
      {
        v10 = (std::__shared_weak_count *)a1[2];
        v22 = a1[1];
        v23 = v10;
        if (!v10)
        {
LABEL_18:
          radio::ARICommandDriver::create(&v25, &object, &v22, buf);
          *(_OWORD *)a3 = *(_OWORD *)buf;
          memset(buf, 0, sizeof(buf));
          v15 = v23;
          if (v23)
          {
            p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          if (object)
            dispatch_release(object);
          v18 = v26;
          if (v26)
          {
            v19 = (unint64_t *)&v26->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          return;
        }
LABEL_16:
        v13 = (unint64_t *)&v10->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        goto LABEL_18;
      }
    }
    else
    {
      object = v6;
    }
    dispatch_retain(v6);
    v10 = (std::__shared_weak_count *)a1[2];
    v22 = a1[1];
    v23 = v10;
    if (!v10)
      goto LABEL_18;
    goto LABEL_16;
  }
  v6 = dispatch_workloop_create("radio.wl");
  v11 = a1[13];
  a1[13] = v6;
  if (v11)
  {
    dispatch_release(v11);
    v6 = a1[13];
  }
  if (v6)
  {
    dispatch_retain(v6);
    v12 = a1[13];
    a1[13] = v6;
    if (!v12)
      goto LABEL_2;
    dispatch_release(v12);
    v6 = a1[13];
    if (v6)
      goto LABEL_2;
  }
  else
  {
    a1[13] = 0;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "ari.driver.factory");
  v21 = *(NSObject **)&buf[8];
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_227A72000, v21, OS_LOG_TYPE_DEFAULT, "Failed to create radio workloop!", buf, 2u);
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
}

void sub_227A901E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, char a13)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void ARICommandDriverFactory::getRadioWorkloop(ARICommandDriverFactory *this@<X0>, NSObject **a2@<X8>)
{
  NSObject *v4;
  NSObject *v5;

  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    *a2 = v4;
LABEL_3:
    dispatch_retain(v4);
    return;
  }
  v4 = dispatch_workloop_create("radio.wl");
  v5 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v4;
  if (v5)
  {
    dispatch_release(v5);
    v4 = *((_QWORD *)this + 13);
  }
  *a2 = v4;
  if (v4)
    goto LABEL_3;
}

void ARICommandDriverFactory::weakRadioCommandDriver(ARICommandDriverFactory *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  _QWORD block[5];

  v4 = *((_QWORD *)this + 11);
  if (!v4)
  {
    std::mutex::lock((std::mutex *)((char *)this + 24));
    if (*((_QWORD *)this + 11))
    {
LABEL_3:
      std::mutex::unlock((std::mutex *)((char *)this + 24));
      v4 = *((_QWORD *)this + 11);
      goto LABEL_4;
    }
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_227A72000);
    }
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_13_5;
    block[4] = &GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v9 = unk_253DF2590;
      v22 = GetABMLogServer(void)::sLogServer;
      v23 = (std::__shared_weak_count *)unk_253DF2590;
      if (unk_253DF2590)
        goto LABEL_11;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
      v9 = unk_253DF2590;
      v22 = GetABMLogServer(void)::sLogServer;
      v23 = (std::__shared_weak_count *)unk_253DF2590;
      if (unk_253DF2590)
      {
LABEL_11:
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
    }
    ARICommandDriverFactory::createRadioCommandDriver(this, &v22, (uint64_t)&v24);
    v12 = v24;
    v24 = 0uLL;
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    *(_OWORD *)((char *)this + 88) = v12;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v23;
    if (v23)
    {
      v20 = (unint64_t *)&v23->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    goto LABEL_3;
  }
LABEL_4:
  v5 = *((_QWORD *)this + 12);
  *a2 = v4;
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
}

void sub_227A9048C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void ARICommandDriverFactory::createRFSCommandDriver(ARICommandDriverFactory *this@<X0>, _OWORD *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17[2];
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20[3];
  _QWORD block[5];

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_227A72000);
  }
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_5;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v5 = unk_253DF2590;
    v18 = GetABMLogServer(void)::sLogServer;
    v19 = (std::__shared_weak_count *)unk_253DF2590;
    if (!unk_253DF2590)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v5 = unk_253DF2590;
    v18 = GetABMLogServer(void)::sLogServer;
    v19 = (std::__shared_weak_count *)unk_253DF2590;
    if (!unk_253DF2590)
      goto LABEL_6;
  }
  v6 = (unint64_t *)(v5 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_6:
  v8 = *((_QWORD *)this + 1);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v17[0] = v8;
  v17[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  radio::ARIRFSCommandDriver::create(&v18, v17, v20);
  *a2 = *(_OWORD *)v20;
  *(_OWORD *)v20 = 0uLL;
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_227A90668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ARICommandDriverFactory::weakRFSCommandDriver(ARICommandDriverFactory *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;

  v4 = *((_QWORD *)this + 14);
  if (!v4)
  {
    std::mutex::lock((std::mutex *)((char *)this + 24));
    if (!*((_QWORD *)this + 14))
    {
      ARICommandDriverFactory::createRFSCommandDriver(this, &v15);
      v8 = v15;
      v15 = 0uLL;
      v9 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
      *((_OWORD *)this + 7) = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
      if (*((_QWORD *)&v15 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    std::mutex::unlock((std::mutex *)((char *)this + 24));
    v4 = *((_QWORD *)this + 14);
  }
  v5 = *((_QWORD *)this + 15);
  *a2 = v4;
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
}

void sub_227A90788(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ARICommandDriverFactory::createCoexCommandDriver(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  std::__shared_weak_count *v17;
  __int128 v18;

  v4 = a2[1];
  v16 = *a2;
  v17 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  v15[0] = *(_QWORD *)(a1 + 8);
  v15[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  coex::ARICommandDriver::create(&v16, v15, (uint64_t *)&v18);
  *a3 = v18;
  v18 = 0uLL;
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v12 = v17;
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_227A90898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ARICommandDriverFactory::createAntennaCommandDriver(uint64_t a1@<X0>, NSObject **a2@<X1>, _OWORD *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20[2];
  dispatch_object_t object;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24[3];
  _QWORD block[5];

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_227A72000);
  }
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_5;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v7 = unk_253DF2590;
    v22 = GetABMLogServer(void)::sLogServer;
    v23 = (std::__shared_weak_count *)unk_253DF2590;
    if (!unk_253DF2590)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v7 = unk_253DF2590;
    v22 = GetABMLogServer(void)::sLogServer;
    v23 = (std::__shared_weak_count *)unk_253DF2590;
    if (!unk_253DF2590)
      goto LABEL_6;
  }
  v8 = (unint64_t *)(v7 + 8);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
LABEL_6:
  v10 = *a2;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(std::__shared_weak_count **)(a1 + 16);
  v20[0] = v11;
  v20[1] = (uint64_t)v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  antenna::ARICommandDriver::create(&v22, &object, v20, v24);
  *a3 = *(_OWORD *)v24;
  *(_OWORD *)v24 = 0uLL;
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (object)
    dispatch_release(object);
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_227A90A9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  NSObject *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v2)
    dispatch_release(v2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void ARICommandDriverFactory::createAwdCommandDriver(ARICommandDriverFactory *this@<X0>, _OWORD *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17[2];
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20[3];
  _QWORD block[5];

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_227A72000);
  }
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_5;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v5 = unk_253DF2590;
    v18 = GetABMLogServer(void)::sLogServer;
    v19 = (std::__shared_weak_count *)unk_253DF2590;
    if (!unk_253DF2590)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v5 = unk_253DF2590;
    v18 = GetABMLogServer(void)::sLogServer;
    v19 = (std::__shared_weak_count *)unk_253DF2590;
    if (!unk_253DF2590)
      goto LABEL_6;
  }
  v6 = (unint64_t *)(v5 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_6:
  v8 = *((_QWORD *)this + 1);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v17[0] = v8;
  v17[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  awd::ARIAwdCommandDriver::create(&v18, v17, v20);
  *a2 = *(_OWORD *)v20;
  *(_OWORD *)v20 = 0uLL;
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_227A90C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ARICommandDriverFactory::createHealthCommandDriver(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void ARICommandDriverFactory::createLogCommandDriver(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void ARICommandDriverFactory::createDataCommandDriver(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void ARICommandDriverFactory::weakDataCommandDriver(ARICommandDriverFactory *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v4 = *((_QWORD *)this + 16);
  if (!v4)
  {
    std::mutex::lock((std::mutex *)((char *)this + 24));
    if (!*((_QWORD *)this + 16))
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    std::mutex::unlock((std::mutex *)((char *)this + 24));
    v4 = *((_QWORD *)this + 16);
  }
  v5 = *((_QWORD *)this + 17);
  *a2 = v4;
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
}

void ARICommandDriverFactory::createCPMSCommandDriver(ARICommandDriverFactory *this@<X0>, _OWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8[2];
  __int128 v9;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v8[0] = *((_QWORD *)this + 1);
  v8[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  cpms::ARICommandDriver::create(v8, &v9);
  *a2 = v9;
  v9 = 0uLL;
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_227A90E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ARICommandDriverFactory::createCoreDumpCommandDriver(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void ARICommandDriverFactory::createDebugCommandDriver(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void ARICommandDriverFactory::createDiagCommandDriver(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void ARICommandDriverFactory::createTraceCommandDriver(ARICommandDriverFactory *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint8_t buf[8];
  uint64_t v15;
  void (*v16)(uint64_t);
  void *v17;
  uint64_t *v18;

  *a2 = 0;
  a2[1] = 0;
  if (capabilities::radio::vendor(this) == 2)
  {
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_227A72000);
    }
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    v15 = 0x40000000;
    v16 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    v17 = &__block_descriptor_tmp_13_5;
    v18 = &GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v4 = (std::__shared_weak_count *)unk_253DF2590;
      v11 = GetABMLogServer(void)::sLogServer;
      v12 = unk_253DF2590;
      if (!unk_253DF2590)
        goto LABEL_7;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
      v4 = (std::__shared_weak_count *)unk_253DF2590;
      v11 = GetABMLogServer(void)::sLogServer;
      v12 = unk_253DF2590;
      if (!unk_253DF2590)
        goto LABEL_7;
    }
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
LABEL_7:
    trace::ARICommandDriver::create(&v11, &v13);
    v7 = v13;
    v13 = 0uLL;
    *(_OWORD *)a2 = v7;
    if (v4)
    {
      v8 = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    return;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "ari.driver.factory");
  v10 = v15;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_227A72000, v10, OS_LOG_TYPE_ERROR, "Unsupported or unknown radio vendor!", buf, 2u);
  }
}

void sub_227A91004(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_227A91018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void sub_227A91034(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ARICommandDriverFactory::createDesenseCommandDriver(ARICommandDriverFactory *this@<X0>, _OWORD *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17[2];
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20[3];
  _QWORD block[5];

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_227A72000);
  }
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_5;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v5 = unk_253DF2590;
    v18 = GetABMLogServer(void)::sLogServer;
    v19 = (std::__shared_weak_count *)unk_253DF2590;
    if (!unk_253DF2590)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v5 = unk_253DF2590;
    v18 = GetABMLogServer(void)::sLogServer;
    v19 = (std::__shared_weak_count *)unk_253DF2590;
    if (!unk_253DF2590)
      goto LABEL_6;
  }
  v6 = (unint64_t *)(v5 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_6:
  v8 = *((_QWORD *)this + 1);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v17[0] = v8;
  v17[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  desense::ARICommandDriver::create(&v18, v17, v20);
  *a2 = *(_OWORD *)v20;
  *(_OWORD *)v20 = 0uLL;
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_227A91208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ARICommandDriverFactory::createCellularCertCommandDriver(_OWORD *a1@<X8>)
{
  unsigned __int8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __n128 v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD block[5];

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_227A72000);
  }
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_5;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v4 = (std::__shared_weak_count *)unk_253DF2590;
    v10 = GetABMLogServer(void)::sLogServer;
    v11 = unk_253DF2590;
    if (!unk_253DF2590)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v4 = (std::__shared_weak_count *)unk_253DF2590;
    v10 = GetABMLogServer(void)::sLogServer;
    v11 = unk_253DF2590;
    if (!unk_253DF2590)
      goto LABEL_6;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
LABEL_6:
  v7.n128_f64[0] = ARICellularCertCommandDriver::create(&v10, a1);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v4->__on_zero_shared)(v4, v7);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_227A91368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ARICommandDriverFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F032F90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ARICommandDriverFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F032F90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<ARICommandDriverFactory>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)(a1 + 24) = &off_24F032EC0;
  v2 = *(std::__shared_weak_count **)(a1 + 160);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 144);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 144);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(NSObject **)(a1 + 128);
  if (v8)
    dispatch_release(v8);
  v9 = *(std::__shared_weak_count **)(a1 + 120);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BED3B98] + 16;
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  v12 = *(std::__shared_weak_count **)(a1 + 40);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

double trace::ARICommandDriver::create@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  double result;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;

  v4 = operator new(0xB0uLL);
  v5 = (uint64_t)v4;
  v6 = a1[1];
  v13 = *a1;
  v14 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  trace::ARICommandDriver::ARICommandDriver((uint64_t)v4, &v13);
  *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<trace::ARICommandDriver>::shared_ptr[abi:ne180100]<trace::ARICommandDriver,std::shared_ptr<trace::ARICommandDriver> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriver>(trace::ARICommandDriver*)::{lambda(trace::ARICommandDriver*)#1},void>(&v15, v5);
  ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v15);
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  (*(void (**)(_QWORD))(*(_QWORD *)v15 + 200))(v15);
  result = *(double *)&v15;
  *a2 = v15;
  return result;
}

void sub_227A915C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_227A915D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_227A915F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_227A91608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t trace::ARICommandDriver::ARICommandDriver(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  NSObject *object;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v3 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  trace::CommandDriver::CommandDriver((_QWORD *)a1, &v12);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)a1 = off_24F032FE0;
  v9 = *(NSObject **)(a1 + 88);
  object = v9;
  if (v9)
    dispatch_retain(v9);
  ice::Client::create();
  if (object)
    dispatch_release(object);
  *(_WORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return a1;
}

void sub_227A91708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  trace::CommandDriver *v10;

  if (object)
    dispatch_release(object);
  trace::CommandDriver::~CommandDriver(v10);
  _Unwind_Resume(a1);
}

void sub_227A91728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *trace::CommandDriver::CommandDriver(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  _BYTE v7[16];

  *a1 = &unk_24F033490;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v7, "com.apple.telephony.abm", "trace.drv");
  v4 = dispatch_queue_create("trace.drv", 0);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = v4;
  if (v4)
  {
    v5 = v4;
    dispatch_retain(v4);
    a1[12] = 0;
    dispatch_release(v5);
  }
  else
  {
    a1[12] = 0;
  }
  ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(a1, (uint64_t)v7, a2);
  *a1 = &unk_24F033570;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v7);
  *a1 = &unk_24F033490;
  return a1;
}

void sub_227A9180C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  ctu::SharedSynchronizable<CellularCertCommandDriver>::~SharedSynchronizable(v9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

void trace::CommandDriver::~CommandDriver(trace::CommandDriver *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = &unk_24F0335B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = *((_QWORD *)this + 12);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 11);
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void trace::ARICommandDriver::~ARICommandDriver(trace::ARICommandDriver *this)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;
  NSObject *v5;
  const void *v6;
  NSObject *v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint8_t v15[16];

  *(_QWORD *)this = off_24F032FE0;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v15, 2u);
  }
  v3 = *((_QWORD *)this + 20);
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)*((_QWORD *)this + 19);
  if (v4)
    _Block_release(v4);
  v5 = *((_QWORD *)this + 18);
  if (v5)
    dispatch_release(v5);
  v6 = (const void *)*((_QWORD *)this + 17);
  if (v6)
    _Block_release(v6);
  v7 = *((_QWORD *)this + 16);
  if (v7)
    dispatch_release(v7);
  v8 = (const void *)*((_QWORD *)this + 15);
  if (v8)
    _Block_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)this = &unk_24F0335B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v12 = *((_QWORD *)this + 12);
  if (v12)
    dispatch_release(v12);
  v13 = *((_QWORD *)this + 11);
  if (v13)
    dispatch_release(v13);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
}

{
  void *v1;

  trace::ARICommandDriver::~ARICommandDriver(this);
  operator delete(v1);
}

void trace::ARICommandDriver::init(trace::ARICommandDriver *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x24BDAC760];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5trace16ARICommandDriver4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_9_0;
  v1[4] = this;
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

uint64_t ___ZN5trace16ARICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[5];
  _QWORD v11[5];
  _QWORD v12[5];
  _QWORD v13[5];
  uint8_t buf[8];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  *(_BYTE *)(v1 + 168) = capabilities::radio::supportsBBTraceV2((capabilities::radio *)v3);
  v4 = *(_QWORD *)(v1 + 104);
  v5 = MEMORY[0x24BDAC760];
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 0x40000000;
  v13[2] = ___ZN5trace16ARICommandDriver4initEv_block_invoke_1;
  v13[3] = &__block_descriptor_tmp_1;
  v13[4] = v1;
  *(_QWORD *)buf = v13;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v4, 0, (uint64_t *)buf);
  v6 = *(_QWORD *)(v1 + 104);
  v12[0] = v5;
  v12[1] = 0x40000000;
  v12[2] = ___ZN5trace16ARICommandDriver4initEv_block_invoke_2;
  v12[3] = &__block_descriptor_tmp_3;
  v12[4] = v1;
  *(_QWORD *)buf = v12;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v6, 1, (uint64_t *)buf);
  v7 = *(_QWORD *)(v1 + 104);
  v11[0] = v5;
  v11[1] = 0x40000000;
  v11[2] = ___ZN5trace16ARICommandDriver4initEv_block_invoke_4;
  v11[3] = &__block_descriptor_tmp_6;
  v11[4] = v1;
  *(_QWORD *)buf = v11;
  ice::Client::setEventHandler<void({block_pointer})(dispatch::group_session)>(v7, 2, (uint64_t *)buf);
  v8 = *(_QWORD *)(v1 + 104);
  v10[0] = v5;
  v10[1] = 0x40000000;
  v10[2] = ___ZN5trace16ARICommandDriver4initEv_block_invoke_7;
  v10[3] = &__block_descriptor_tmp_8;
  v10[4] = v1;
  *(_QWORD *)buf = v10;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v8, 3, (uint64_t *)buf);
  result = ice::Client::start(*(ice::Client **)(v1 + 104));
  *(_BYTE *)(v1 + 169) = 1;
  return result;
}

void ___ZN5trace16ARICommandDriver4initEv_block_invoke_1(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  const void *v3;
  void *v4;
  const void *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[4];
  void *aBlock;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v8[0]) = 0;
    _os_log_debug_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEBUG, "#D ARI Started event received.", (uint8_t *)v8, 2u);
    v3 = (const void *)v1[15];
    if (!v3)
      return;
  }
  else
  {
    v3 = (const void *)v1[15];
    if (!v3)
      return;
  }
  if (v1[16])
  {
    v4 = _Block_copy(v3);
    v5 = v4;
    v6 = v1[16];
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 1174405120;
    v8[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
    v8[3] = &__block_descriptor_tmp_34;
    if (v4)
    {
      aBlock = _Block_copy(v4);
      dispatch_async(v6, v8);
      v7 = aBlock;
      if (!aBlock)
      {
LABEL_9:
        if (v5)
          _Block_release(v5);
        return;
      }
    }
    else
    {
      aBlock = 0;
      dispatch_async(v6, v8);
      v7 = aBlock;
      if (!aBlock)
        goto LABEL_9;
    }
    _Block_release(v7);
    goto LABEL_9;
  }
}

void ___ZN5trace16ARICommandDriver4initEv_block_invoke_2(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v2 = 0;
    _os_log_debug_impl(&dword_227A72000, v1, OS_LOG_TYPE_DEBUG, "#D ARI Stopped event received.", v2, 2u);
  }
}

void ___ZN5trace16ARICommandDriver4initEv_block_invoke_4(uint64_t a1, NSObject **a2)
{
  _QWORD *v3;
  NSObject *v4;
  const void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  _QWORD v9[4];
  void *aBlock;
  dispatch_group_t group;

  v3 = *(_QWORD **)(a1 + 32);
  v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9[0]) = 0;
    _os_log_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEFAULT, "#I ARI LPM Enter event received", (uint8_t *)v9, 2u);
  }
  v5 = (const void *)v3[17];
  if (v5 && v3[18])
  {
    v6 = *a2;
    if (v6 && (dispatch_retain(v6), dispatch_group_enter(v6), (v5 = (const void *)v3[17]) == 0))
      v7 = 0;
    else
      v7 = _Block_copy(v5);
    v8 = v3[18];
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 1174405120;
    v9[2] = ___ZNK8dispatch8callbackIU13block_pointerFvNS_13group_sessionEEEclIJS1_EEEvDpT__block_invoke;
    v9[3] = &__block_descriptor_tmp_37;
    if (v7)
    {
      aBlock = _Block_copy(v7);
      group = v6;
      if (!v6)
        goto LABEL_12;
    }
    else
    {
      aBlock = 0;
      group = v6;
      if (!v6)
      {
LABEL_12:
        dispatch_async(v8, v9);
        if (group)
        {
          dispatch_group_leave(group);
          if (group)
            dispatch_release(group);
        }
        if (aBlock)
          _Block_release(aBlock);
        if (v7)
          _Block_release(v7);
        if (v6)
        {
          dispatch_group_leave(v6);
          dispatch_release(v6);
        }
        return;
      }
    }
    dispatch_retain(v6);
    dispatch_group_enter(v6);
    goto LABEL_12;
  }
}

void ___ZN5trace16ARICommandDriver4initEv_block_invoke_7(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  const void *v3;
  void *v4;
  const void *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[4];
  void *aBlock;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8[0]) = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I ARI LPM Exit event received", (uint8_t *)v8, 2u);
  }
  v3 = (const void *)v1[19];
  if (v3 && v1[20])
  {
    v4 = _Block_copy(v3);
    v5 = v4;
    v6 = v1[20];
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 1174405120;
    v8[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
    v8[3] = &__block_descriptor_tmp_34;
    if (v4)
    {
      aBlock = _Block_copy(v4);
      dispatch_async(v6, v8);
      v7 = aBlock;
      if (!aBlock)
      {
LABEL_10:
        if (v5)
          _Block_release(v5);
        return;
      }
    }
    else
    {
      aBlock = 0;
      dispatch_async(v6, v8);
      v7 = aBlock;
      if (!aBlock)
        goto LABEL_10;
    }
    _Block_release(v7);
    goto LABEL_10;
  }
}

void trace::ARICommandDriver::pauseTraceTraffic(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  void *aBlock;
  dispatch_object_t object;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1174405120;
  v17[2] = ___ZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v17[3] = &__block_descriptor_tmp_10_0;
  v17[4] = a1;
  v17[5] = v6;
  v18 = v9;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = *(void **)a2;
  if (*(_QWORD *)a2)
    v15 = _Block_copy(v15);
  v16 = *(NSObject **)(a2 + 8);
  aBlock = v15;
  object = v16;
  if (v16)
    dispatch_retain(v16);
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped(v5, (uint64_t)v17);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t ___ZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  _DWORD *v4;
  void *v5;
  _DWORD *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count_vtbl *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  const void *v13;
  void *v14;
  NSObject *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t *v18;
  unint64_t v19;
  const void *v20;
  unint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v33;
  NSObject *object;
  _OWORD v35[2];
  unint64_t v36;
  _OWORD v37[4];
  __int128 __p;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, const unsigned __int8 *);
  void *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  const void *aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[3] = v3;
  __p = v3;
  v37[1] = v3;
  v37[2] = v3;
  v37[0] = v3;
  AriSdk::ARI_CsiTraceProfileSelectReq_SDK::ARI_CsiTraceProfileSelectReq_SDK((AriSdk::ARI_CsiTraceProfileSelectReq_SDK *)v37);
  v4 = operator new(4uLL);
  *v4 = 0;
  v5 = (void *)__p;
  *(_QWORD *)&__p = v4;
  if (v5)
    operator delete(v5);
  v6 = operator new(4uLL);
  *v6 = 1;
  v7 = (void *)*((_QWORD *)&__p + 1);
  *((_QWORD *)&__p + 1) = v6;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD *)(v2 + 104);
  v10 = (std::__shared_weak_count_vtbl *)a1[5];
  v9 = (std::__shared_weak_count *)a1[6];
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
  }
  v13 = (const void *)a1[7];
  if (v13)
  {
    v14 = _Block_copy(v13);
    v15 = a1[8];
    v33 = v14;
    object = v15;
    if (!v15)
      goto LABEL_11;
    goto LABEL_10;
  }
  v14 = 0;
  v15 = a1[8];
  v33 = 0;
  object = v15;
  if (v15)
LABEL_10:
    dispatch_retain(v15);
LABEL_11:
  v16 = (std::__shared_weak_count *)operator new(0x40uLL);
  v16->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)off_24F033738;
  v16[1].__vftable = v10;
  v16[1].__shared_owners_ = (uint64_t)v9;
  if (v9)
  {
    v18 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (!v14)
  {
    v16[1].__shared_weak_owners_ = 0;
    v16[2].__vftable = (std::__shared_weak_count_vtbl *)v15;
    if (!v15)
      goto LABEL_17;
    goto LABEL_16;
  }
  v16[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v14);
  v16[2].__vftable = (std::__shared_weak_count_vtbl *)v15;
  if (v15)
LABEL_16:
    dispatch_retain(v15);
LABEL_17:
  v16[2].__shared_owners_ = v2;
  v20 = (const void *)MEMORY[0x24BDAC760];
  v39 = MEMORY[0x24BDAC760];
  v40 = 1174405120;
  v41 = ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_E3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v42 = &__block_descriptor_tmp_42;
  v43 = v16 + 1;
  v44 = v16;
  do
    v21 = __ldxr(p_shared_owners);
  while (__stxr(v21 + 1, p_shared_owners));
  aBlock[0] = v20;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_1;
  aBlock[3] = &unk_24F033780;
  aBlock[4] = &v39;
  v22 = _Block_copy(aBlock);
  v23 = v44;
  if (v44)
  {
    v24 = (unint64_t *)&v44->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35[0] = v27;
  v35[1] = v27;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v28 = *(std::__shared_weak_count **)(v8 + 16);
  v39 = *(_QWORD *)(v8 + 8);
  if (!v28)
  {
    v40 = 0;
LABEL_48:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v40 = (uint64_t)std::__shared_weak_count::lock(v28);
  if (!v40)
    goto LABEL_48;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v29 = (std::__shared_weak_count *)v40;
  if (v40)
  {
    v30 = (unint64_t *)(v40 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  aBlock[0] = v22;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v35);
  if (object)
    dispatch_release(object);
  if (v33)
    _Block_release(v33);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  return MEMORY[0x22E2A3E2C](v37);
}

void sub_227A92420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  const void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v4 = *(const void **)(v2 - 120);
  if (v4)
    _Block_release(v4);
  MEMORY[0x22E2A2FF8]((uint64_t *)va1);
  _ZZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_EN3__0D1Ev((uint64_t *)va);
  MEMORY[0x22E2A3E2C](va2);
  _Unwind_Resume(a1);
}

void sub_227A92454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v3 - 168);
  if (v2)
    _Block_release(v2);
  _ZZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_EN3__0D1Ev((uint64_t *)va);
  MEMORY[0x22E2A3E2C](va1);
  _Unwind_Resume(a1);
}

_QWORD *_ZZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_EN3__0D1Ev(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[2];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5trace13CommandDriverEEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5trace13CommandDriverEEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void trace::ARICommandDriver::enableSleepProfile(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1174405120;
  v7[2] = ___ZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_11_0;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

uint64_t ___ZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(_QWORD *a1)
{
  _QWORD *v2;
  __int128 v3;
  _DWORD *v4;
  void *v5;
  _DWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const void *v18;
  void *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  const void *v23;
  unint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *v36;
  NSObject *object;
  _OWORD v38[2];
  unint64_t v39;
  _OWORD v40[4];
  __int128 __p;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, const unsigned __int8 *);
  void *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  const void *aBlock[5];

  v2 = (_QWORD *)a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40[3] = v3;
  __p = v3;
  v40[1] = v3;
  v40[2] = v3;
  v40[0] = v3;
  AriSdk::ARI_CsiTraceProfileSelectReq_SDK::ARI_CsiTraceProfileSelectReq_SDK((AriSdk::ARI_CsiTraceProfileSelectReq_SDK *)v40);
  v4 = operator new(4uLL);
  *v4 = 1;
  v5 = (void *)__p;
  *(_QWORD *)&__p = v4;
  if (v5)
    operator delete(v5);
  v6 = operator new(4uLL);
  *v6 = 0;
  v7 = (void *)*((_QWORD *)&__p + 1);
  *((_QWORD *)&__p + 1) = v6;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)v2[10];
  if (!v8 || (v9 = (std::__shared_weak_count_vtbl *)v2[9], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v16 = v2[13];
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = (const void *)a1[5];
  if (v18)
  {
    v19 = _Block_copy(v18);
    v20 = a1[6];
    v36 = v19;
    object = v20;
    if (!v20)
      goto LABEL_18;
    goto LABEL_17;
  }
  v19 = 0;
  v20 = a1[6];
  v36 = 0;
  object = v20;
  if (v20)
LABEL_17:
    dispatch_retain(v20);
LABEL_18:
  v21 = (std::__shared_weak_count *)operator new(0x40uLL);
  v21->__shared_owners_ = 0;
  v22 = (unint64_t *)&v21->__shared_owners_;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)off_24F0337E0;
  v21[1].__vftable = v9;
  v21[1].__shared_owners_ = (uint64_t)v11;
  if (!v19)
  {
    v21[1].__shared_weak_owners_ = 0;
    v21[2].__vftable = (std::__shared_weak_count_vtbl *)v20;
    if (!v20)
      goto LABEL_21;
    goto LABEL_20;
  }
  v21[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v19);
  v21[2].__vftable = (std::__shared_weak_count_vtbl *)v20;
  if (v20)
LABEL_20:
    dispatch_retain(v20);
LABEL_21:
  v21[2].__shared_owners_ = (uint64_t)v2;
  v23 = (const void *)MEMORY[0x24BDAC760];
  v42 = MEMORY[0x24BDAC760];
  v43 = 1174405120;
  v44 = ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb0_E3__1vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v45 = &__block_descriptor_tmp_47;
  v46 = v21 + 1;
  v47 = v21;
  do
    v24 = __ldxr(v22);
  while (__stxr(v24 + 1, v22));
  aBlock[0] = v23;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_1;
  aBlock[3] = &unk_24F033780;
  aBlock[4] = &v42;
  v25 = _Block_copy(aBlock);
  v26 = v47;
  if (v47)
  {
    v27 = (unint64_t *)&v47->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  do
    v29 = __ldaxr(v22);
  while (__stlxr(v29 - 1, v22));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v38[0] = v30;
  v38[1] = v30;
  v39 = 0xAAAAAAAAAAAAAAAALL;
  v31 = *(std::__shared_weak_count **)(v16 + 16);
  v42 = *(_QWORD *)(v16 + 8);
  if (!v31)
  {
    v43 = 0;
LABEL_51:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v43 = (uint64_t)std::__shared_weak_count::lock(v31);
  if (!v43)
    goto LABEL_51;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v32 = (std::__shared_weak_count *)v43;
  if (v43)
  {
    v33 = (unint64_t *)(v43 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  aBlock[0] = v25;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v38);
  if (object)
    dispatch_release(object);
  if (v36)
    _Block_release(v36);
  std::__shared_weak_count::__release_weak(v11);
  return MEMORY[0x22E2A3E2C](v40);
}

void sub_227A92A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  const void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v5 = *(const void **)(v3 - 120);
  if (v5)
    _Block_release(v5);
  MEMORY[0x22E2A2FF8]((uint64_t *)va1);
  _ZZZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb0_EN3__1D1Ev((uint64_t *)va);
  std::__shared_weak_count::__release_weak(v2);
  MEMORY[0x22E2A3E2C](va2);
  _Unwind_Resume(a1);
}

_QWORD *_ZZZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb0_EN3__1D1Ev(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[2];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void __copy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void trace::ARICommandDriver::enableActiveProfile(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  void *aBlock;
  dispatch_object_t object;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1174405120;
  v17[2] = ___ZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v17[3] = &__block_descriptor_tmp_12_0;
  v17[4] = a1;
  v17[5] = v6;
  v18 = v9;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = *(void **)a2;
  if (*(_QWORD *)a2)
    v15 = _Block_copy(v15);
  v16 = *(NSObject **)(a2 + 8);
  aBlock = v15;
  object = v16;
  if (v16)
    dispatch_retain(v16);
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped(v5, (uint64_t)v17);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t ___ZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  _DWORD *v4;
  void *v5;
  _DWORD *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count_vtbl *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  const void *v13;
  void *v14;
  NSObject *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t *v18;
  unint64_t v19;
  const void *v20;
  unint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v33;
  NSObject *object;
  _OWORD v35[2];
  unint64_t v36;
  _OWORD v37[4];
  __int128 __p;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, const unsigned __int8 *);
  void *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  const void *aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[3] = v3;
  __p = v3;
  v37[1] = v3;
  v37[2] = v3;
  v37[0] = v3;
  AriSdk::ARI_CsiTraceProfileSelectReq_SDK::ARI_CsiTraceProfileSelectReq_SDK((AriSdk::ARI_CsiTraceProfileSelectReq_SDK *)v37);
  v4 = operator new(4uLL);
  *v4 = 1;
  v5 = (void *)__p;
  *(_QWORD *)&__p = v4;
  if (v5)
    operator delete(v5);
  v6 = operator new(4uLL);
  *v6 = 1;
  v7 = (void *)*((_QWORD *)&__p + 1);
  *((_QWORD *)&__p + 1) = v6;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD *)(v2 + 104);
  v10 = (std::__shared_weak_count_vtbl *)a1[5];
  v9 = (std::__shared_weak_count *)a1[6];
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
  }
  v13 = (const void *)a1[7];
  if (v13)
  {
    v14 = _Block_copy(v13);
    v15 = a1[8];
    v33 = v14;
    object = v15;
    if (!v15)
      goto LABEL_11;
    goto LABEL_10;
  }
  v14 = 0;
  v15 = a1[8];
  v33 = 0;
  object = v15;
  if (v15)
LABEL_10:
    dispatch_retain(v15);
LABEL_11:
  v16 = (std::__shared_weak_count *)operator new(0x40uLL);
  v16->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)off_24F033860;
  v16[1].__vftable = v10;
  v16[1].__shared_owners_ = (uint64_t)v9;
  if (v9)
  {
    v18 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (!v14)
  {
    v16[1].__shared_weak_owners_ = 0;
    v16[2].__vftable = (std::__shared_weak_count_vtbl *)v15;
    if (!v15)
      goto LABEL_17;
    goto LABEL_16;
  }
  v16[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v14);
  v16[2].__vftable = (std::__shared_weak_count_vtbl *)v15;
  if (v15)
LABEL_16:
    dispatch_retain(v15);
LABEL_17:
  v16[2].__shared_owners_ = v2;
  v20 = (const void *)MEMORY[0x24BDAC760];
  v39 = MEMORY[0x24BDAC760];
  v40 = 1174405120;
  v41 = ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_E3__2vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v42 = &__block_descriptor_tmp_50;
  v43 = v16 + 1;
  v44 = v16;
  do
    v21 = __ldxr(p_shared_owners);
  while (__stxr(v21 + 1, p_shared_owners));
  aBlock[0] = v20;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_1;
  aBlock[3] = &unk_24F033780;
  aBlock[4] = &v39;
  v22 = _Block_copy(aBlock);
  v23 = v44;
  if (v44)
  {
    v24 = (unint64_t *)&v44->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35[0] = v27;
  v35[1] = v27;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v28 = *(std::__shared_weak_count **)(v8 + 16);
  v39 = *(_QWORD *)(v8 + 8);
  if (!v28)
  {
    v40 = 0;
LABEL_48:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v40 = (uint64_t)std::__shared_weak_count::lock(v28);
  if (!v40)
    goto LABEL_48;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v29 = (std::__shared_weak_count *)v40;
  if (v40)
  {
    v30 = (unint64_t *)(v40 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  aBlock[0] = v22;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v35);
  if (object)
    dispatch_release(object);
  if (v33)
    _Block_release(v33);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  return MEMORY[0x22E2A3E2C](v37);
}

void sub_227A93030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  const void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v4 = *(const void **)(v2 - 120);
  if (v4)
    _Block_release(v4);
  MEMORY[0x22E2A2FF8]((uint64_t *)va1);
  _ZZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_EN3__2D1Ev((uint64_t *)va);
  MEMORY[0x22E2A3E2C](va2);
  _Unwind_Resume(a1);
}

void sub_227A93064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v3 - 168);
  if (v2)
    _Block_release(v2);
  _ZZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_EN3__2D1Ev((uint64_t *)va);
  MEMORY[0x22E2A3E2C](va1);
  _Unwind_Resume(a1);
}

_QWORD *_ZZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_EN3__2D1Ev(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[2];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void trace::ARICommandDriver::getTraceMode(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  void *aBlock;
  dispatch_object_t object;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1174405120;
  v17[2] = ___ZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEE_block_invoke;
  v17[3] = &__block_descriptor_tmp_13_0;
  v17[4] = a1;
  v17[5] = v6;
  v18 = v9;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = *(void **)a2;
  if (*(_QWORD *)a2)
    v15 = _Block_copy(v15);
  v16 = *(NSObject **)(a2 + 8);
  aBlock = v15;
  object = v16;
  if (v16)
    dispatch_retain(v16);
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped(v5, (uint64_t)v17);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_weak(v9);
}

void ___ZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count_vtbl *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  const void *v9;
  void *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  unint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  NSObject *object;
  _OWORD v32[2];
  unint64_t v33;
  _OWORD v34[4];
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, const unsigned __int8 *);
  void *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  const void *aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34[2] = v3;
  v34[3] = v3;
  v34[0] = v3;
  v34[1] = v3;
  AriSdk::ARI_CsiXsioGetReq_SDK::ARI_CsiXsioGetReq_SDK((AriSdk::ARI_CsiXsioGetReq_SDK *)v34);
  v4 = *(_QWORD *)(v2 + 104);
  v6 = (std::__shared_weak_count_vtbl *)a1[5];
  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = (const void *)a1[7];
  if (v9)
  {
    v10 = _Block_copy(v9);
    v11 = a1[8];
    v30 = v10;
    object = v11;
    if (!v11)
      goto LABEL_7;
    goto LABEL_6;
  }
  v10 = 0;
  v11 = a1[8];
  v30 = 0;
  object = v11;
  if (v11)
LABEL_6:
    dispatch_retain(v11);
LABEL_7:
  v12 = (std::__shared_weak_count *)operator new(0x40uLL);
  v13 = v12;
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_24F0338E0;
  v12[1].__vftable = v6;
  v15 = &v12[1].__vftable;
  v12[1].__shared_owners_ = (uint64_t)v5;
  if (v5)
  {
    v16 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v12[1].__shared_weak_owners_ = v2;
  if (!v10)
  {
    v12[2].__vftable = 0;
    v12[2].__shared_owners_ = (uint64_t)v11;
    if (!v11)
      goto LABEL_13;
    goto LABEL_12;
  }
  v12[2].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(v10);
  v13[2].__shared_owners_ = (uint64_t)v11;
  if (v11)
LABEL_12:
    dispatch_retain(v11);
LABEL_13:
  v18 = (const void *)MEMORY[0x24BDAC760];
  v35 = MEMORY[0x24BDAC760];
  v36 = 1174405120;
  v37 = ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_E3__3vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v38 = &__block_descriptor_tmp_53;
  v39 = v15;
  v40 = v13;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  aBlock[0] = v18;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_1;
  aBlock[3] = &unk_24F033780;
  aBlock[4] = &v35;
  v20 = _Block_copy(aBlock);
  v21 = v40;
  if (v40)
  {
    v22 = (unint64_t *)&v40->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32[0] = v25;
  v32[1] = v25;
  v33 = 0xAAAAAAAAAAAAAAAALL;
  v26 = *(std::__shared_weak_count **)(v4 + 16);
  v35 = *(_QWORD *)(v4 + 8);
  if (!v26)
  {
    v36 = 0;
LABEL_44:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v36 = (uint64_t)std::__shared_weak_count::lock(v26);
  if (!v36)
    goto LABEL_44;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v27 = (std::__shared_weak_count *)v36;
  if (v36)
  {
    v28 = (unint64_t *)(v36 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  aBlock[0] = v20;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v32);
  if (object)
    dispatch_release(object);
  if (v30)
    _Block_release(v30);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  AriSdk::ARI_CsiXsioGetReq_SDK::~ARI_CsiXsioGetReq_SDK((AriSdk::ARI_CsiXsioGetReq_SDK *)v34);
}

void sub_227A93558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  const void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v4 = *(const void **)(v2 - 120);
  if (v4)
    _Block_release(v4);
  MEMORY[0x22E2A2FF8]((uint64_t *)va1);
  _ZZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_EN3__3D1Ev((uint64_t *)va);
  AriSdk::ARI_CsiXsioGetReq_SDK::~ARI_CsiXsioGetReq_SDK((AriSdk::ARI_CsiXsioGetReq_SDK *)va2);
  _Unwind_Resume(a1);
}

void sub_227A9358C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  const void *v30;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  if (v30)
    _Block_release(v30);
  _ZZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_EN3__3D1Ev(&a10);
  AriSdk::ARI_CsiXsioGetReq_SDK::~ARI_CsiXsioGetReq_SDK((AriSdk::ARI_CsiXsioGetReq_SDK *)&a21);
  _Unwind_Resume(a1);
}

_QWORD *_ZZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_EN3__3D1Ev(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[4];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[3];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5trace13CommandDriverEEE56c90_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5trace13CommandDriverEEE56c90_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void trace::ARICommandDriver::setTraceMode(uint64_t a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  NSObject *v18;
  _QWORD v19[6];
  std::__shared_weak_count *v20;
  void *aBlock;
  dispatch_object_t object;
  int v23;

  v7 = *(_QWORD *)(a1 + 72);
  v5 = *(std::__shared_weak_count **)(a1 + 80);
  v6 = (uint64_t *)(a1 + 72);
  if (!v5 || (v10 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 1174405120;
  v19[2] = ___ZN5trace16ARICommandDriver12setTraceModeENS_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v19[3] = &__block_descriptor_tmp_14_1;
  v23 = a2;
  v19[4] = a1;
  v19[5] = v7;
  v20 = v11;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = *(void **)a3;
  if (*(_QWORD *)a3)
    v17 = _Block_copy(v17);
  v18 = *(NSObject **)(a3 + 8);
  aBlock = v17;
  object = v18;
  if (v18)
    dispatch_retain(v18);
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped(v6, (uint64_t)v19);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  std::__shared_weak_count::__release_weak(v11);
}

uint64_t ___ZN5trace16ARICommandDriver12setTraceModeENS_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  _DWORD *v4;
  void *v5;
  _DWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count_vtbl *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  const void *v12;
  void *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  unint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v32;
  NSObject *object;
  uint64_t v34;
  int v35;
  _OWORD v36[2];
  unint64_t v37;
  _OWORD v38[4];
  void *__p;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, const unsigned __int8 *);
  void *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  const void *aBlock[5];

  v2 = *(_QWORD *)(a1 + 32);
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v38[2] = v3;
  v38[3] = v3;
  v38[0] = v3;
  v38[1] = v3;
  AriSdk::ARI_CsiXsioSetReq_SDK::ARI_CsiXsioSetReq_SDK((AriSdk::ARI_CsiXsioSetReq_SDK *)v38);
  if (*(_DWORD *)(a1 + 72) != 2)
  {
    v6 = operator new(4uLL);
    *v6 = 0;
    v5 = __p;
    __p = v6;
    if (!v5)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = operator new(4uLL);
  *v4 = 2;
  v5 = __p;
  __p = v4;
  if (v5)
LABEL_5:
    operator delete(v5);
LABEL_6:
  v7 = *(_QWORD *)(v2 + 104);
  v9 = *(std::__shared_weak_count_vtbl **)(a1 + 40);
  v8 = *(std::__shared_weak_count **)(a1 + 48);
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v12 = *(const void **)(a1 + 56);
  if (v12)
  {
    v13 = _Block_copy(v12);
    v14 = *(NSObject **)(a1 + 64);
    v32 = v13;
    object = v14;
    if (!v14)
      goto LABEL_12;
    goto LABEL_11;
  }
  v13 = 0;
  v14 = *(NSObject **)(a1 + 64);
  v32 = 0;
  object = v14;
  if (v14)
LABEL_11:
    dispatch_retain(v14);
LABEL_12:
  v34 = v2;
  v35 = *(_DWORD *)(a1 + 72);
  v15 = (std::__shared_weak_count *)operator new(0x48uLL);
  v15->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)off_24F033990;
  v15[1].__vftable = v9;
  v15[1].__shared_owners_ = (uint64_t)v8;
  if (v8)
  {
    v17 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (!v13)
  {
    v15[1].__shared_weak_owners_ = 0;
    v15[2].__vftable = (std::__shared_weak_count_vtbl *)v14;
    if (!v14)
      goto LABEL_18;
    goto LABEL_17;
  }
  v15[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v13);
  v15[2].__vftable = (std::__shared_weak_count_vtbl *)v14;
  if (v14)
LABEL_17:
    dispatch_retain(v14);
LABEL_18:
  v15[2].__shared_owners_ = v34;
  LODWORD(v15[2].__shared_weak_owners_) = v35;
  v19 = (const void *)MEMORY[0x24BDAC760];
  v40 = MEMORY[0x24BDAC760];
  v41 = 1174405120;
  v42 = ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver12setTraceModeENS2_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb3_E3__4vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v43 = &__block_descriptor_tmp_57;
  v44 = v15 + 1;
  v45 = v15;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  aBlock[0] = v19;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_1;
  aBlock[3] = &unk_24F033780;
  aBlock[4] = &v40;
  v21 = _Block_copy(aBlock);
  v22 = v45;
  if (v45)
  {
    v23 = (unint64_t *)&v45->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[0] = v26;
  v36[1] = v26;
  v37 = 0xAAAAAAAAAAAAAAAALL;
  v27 = *(std::__shared_weak_count **)(v7 + 16);
  v40 = *(_QWORD *)(v7 + 8);
  if (!v27)
  {
    v41 = 0;
LABEL_49:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v41 = (uint64_t)std::__shared_weak_count::lock(v27);
  if (!v41)
    goto LABEL_49;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v28 = (std::__shared_weak_count *)v41;
  if (v41)
  {
    v29 = (unint64_t *)(v41 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  aBlock[0] = v21;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v36);
  if (object)
    dispatch_release(object);
  if (v32)
    _Block_release(v32);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return MEMORY[0x22E2A31C0](v38);
}

_QWORD *_ZZZN5trace16ARICommandDriver12setTraceModeENS_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb3_EN3__4D1Ev(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[2];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t trace::ARICommandDriver::profileMaskV1_sync(uint64_t a1, uint64_t a2, uint64_t a3, std::__shared_weak_count **a4, NSObject **a5)
{
  __int128 v10;
  uint64_t v11;
  char *v12;
  _DWORD *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  char *v28;
  std::__shared_weak_count_vtbl *v29;
  char *v30;
  size_t v31;
  char *v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  const void *v36;
  unint64_t v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v49[2];
  dispatch_object_t object[2];
  _OWORD v51[2];
  unint64_t v52;
  _OWORD v53[4];
  void *__p[2];
  __int128 v55;
  void *v56[2];
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, const unsigned __int8 *);
  void *v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  const void *aBlock[6];

  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v56 = v10;
  v57 = v10;
  *(_OWORD *)__p = v10;
  v55 = v10;
  v53[2] = v10;
  v53[3] = v10;
  v53[0] = v10;
  v53[1] = v10;
  AriSdk::ARI_CsiTraceProfileInitReq_SDK::ARI_CsiTraceProfileInitReq_SDK((AriSdk::ARI_CsiTraceProfileInitReq_SDK *)v53);
  v12 = *(char **)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v13 = operator new(4uLL);
  *v13 = v11 - (_DWORD)v12;
  v14 = __p[0];
  __p[0] = v13;
  if (v14)
    operator delete(v14);
  AriSdk::TlvArray<char,960ul>::operator=((char **)&__p[1], (char **)a2);
  v16 = *(char **)a3;
  v15 = *(_QWORD *)(a3 + 8);
  v17 = operator new(4uLL);
  *v17 = v15 - (_DWORD)v16;
  v18 = v56[0];
  v56[0] = v17;
  if (v18)
    operator delete(v18);
  AriSdk::TlvArray<char,960ul>::operator=((char **)&v56[1], (char **)a3);
  v19 = *(_QWORD *)(a1 + 104);
  v20 = a4[1];
  v49[0] = *a4;
  v49[1] = v20;
  if (v20)
  {
    p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
  }
  v23 = *a5;
  if (*a5)
    v23 = _Block_copy(v23);
  v24 = a5[1];
  object[0] = v23;
  object[1] = v24;
  if (v24)
    dispatch_retain(v24);
  v26 = *(char **)a2;
  v25 = *(_QWORD *)(a2 + 8);
  v27 = v25 - *(_QWORD *)a2;
  if (v25 != *(_QWORD *)a2)
  {
    if ((v27 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v28 = (char *)operator new(v25 - *(_QWORD *)a2);
    v29 = (std::__shared_weak_count_vtbl *)&v28[v27];
    memcpy(v28, v26, v27);
    v30 = *(char **)a3;
    v31 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v31)
      goto LABEL_15;
LABEL_18:
    v33 = 0;
    v32 = 0;
    goto LABEL_19;
  }
  v29 = 0;
  v28 = 0;
  v30 = *(char **)a3;
  v31 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (!v31)
    goto LABEL_18;
LABEL_15:
  if ((v31 & 0x8000000000000000) != 0)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v32 = (char *)operator new(v31);
  v33 = (std::__shared_weak_count_vtbl *)&v32[v31];
  memcpy(v32, v30, v31);
LABEL_19:
  v34 = (std::__shared_weak_count *)operator new(0x70uLL);
  v34[1].std::__shared_count = *(std::__shared_count *)v49;
  v34->__vftable = (std::__shared_weak_count_vtbl *)off_24F033A10;
  *(_OWORD *)&v34->__shared_owners_ = 0u;
  p_shared_owners = (unint64_t *)&v34->__shared_owners_;
  *(_OWORD *)&v34[1].__shared_weak_owners_ = *(_OWORD *)object;
  v34[2].__shared_owners_ = a1;
  v34[2].__shared_weak_owners_ = (uint64_t)v28;
  v34[3].__vftable = v29;
  v34[3].__shared_owners_ = (uint64_t)v29;
  v34[3].__shared_weak_owners_ = (uint64_t)v32;
  v34[4].__vftable = v33;
  v34[4].__shared_owners_ = (uint64_t)v33;
  v36 = (const void *)MEMORY[0x24BDAC760];
  v58 = MEMORY[0x24BDAC760];
  v59 = 1174405120;
  v60 = ___ZN3ice6detail12wrapCallbackIZN5trace16ARICommandDriver18profileMaskV1_syncENSt3__16vectorIcNS4_9allocatorIcEEEES8_NS4_8weak_ptrINS2_13CommandDriverEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENSC_5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
  v61 = &__block_descriptor_tmp_62;
  v62 = v34 + 1;
  v63 = v34;
  do
    v37 = __ldxr(p_shared_owners);
  while (__stxr(v37 + 1, p_shared_owners));
  aBlock[0] = v36;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_1;
  aBlock[3] = &unk_24F033780;
  aBlock[4] = &v58;
  v38 = _Block_copy(aBlock);
  v39 = v63;
  if (v63)
  {
    v40 = (unint64_t *)&v63->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  do
    v42 = __ldaxr(p_shared_owners);
  while (__stlxr(v42 - 1, p_shared_owners));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  *(_QWORD *)&v43 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v51[0] = v43;
  v51[1] = v43;
  v52 = 0xAAAAAAAAAAAAAAAALL;
  v44 = *(std::__shared_weak_count **)(v19 + 16);
  v58 = *(_QWORD *)(v19 + 8);
  if (!v44)
  {
    v59 = 0;
LABEL_40:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v59 = (uint64_t)std::__shared_weak_count::lock(v44);
  if (!v59)
    goto LABEL_40;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v45 = (std::__shared_weak_count *)v59;
  if (v59)
  {
    v46 = (unint64_t *)(v59 + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  aBlock[0] = v38;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v51);
  return MEMORY[0x22E2A3B14](v53);
}

void sub_227A940BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  const void *v29;

  v29 = *(const void **)(v27 - 128);
  if (v29)
    _Block_release(v29);
  MEMORY[0x22E2A2FF8](&a21);
  trace::ARICommandDriver::profileMaskV1_sync(std::vector<char>,std::vector<char>,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(&a9);
  MEMORY[0x22E2A3B14](&a27);
  _Unwind_Resume(a1);
}

void sub_227A940F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  const void *v27;
  uint64_t v28;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v28 - 176);
  if (v27)
    _Block_release(v27);
  trace::ARICommandDriver::profileMaskV1_sync(std::vector<char>,std::vector<char>,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(&a9);
  MEMORY[0x22E2A3B14](&a27);
  _Unwind_Resume(a1);
}

char **AriSdk::TlvArray<char,960ul>::operator=(char **a1, char **a2)
{
  char *v4;
  char *v5;
  const char *v7;
  void *p_p;
  void *__p;
  char v11;

  v4 = *a2;
  v5 = a2[1];
  if ((unint64_t)(v5 - v4) < 0x3C1)
  {
    if (a1 == a2)
      return a1;
    std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a1, v4, v5, v5 - v4);
    return a1;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "operator=", v5);
    if (v11 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array assignment too large(%p), got(%d) max(%d)", v7, p_p, 349, a1, a2[1] - *a2, 960);
    if ((v11 & 0x80000000) == 0)
      return a1;
    operator delete(__p);
    return a1;
  }
}

void sub_227A942FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *trace::ARICommandDriver::profileMaskV1_sync(std::vector<char>,std::vector<char>,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(_QWORD *a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  const void *v5;
  std::__shared_weak_count *v6;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = a1[3];
  if (v4)
    dispatch_release(v4);
  v5 = (const void *)a1[2];
  if (v5)
    _Block_release(v5);
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void trace::ARICommandDriver::profileMaskV2_sync(uint64_t a1, const void **a2, __int16 a3, std::__shared_weak_count **a4, NSObject **a5)
{
  uint64_t v5;
  const void *v6;
  const void *v7;
  int v9;
  int v10;
  __int128 v11;
  int v12;
  int v13;
  _WORD *v14;
  void *v15;
  _WORD *v16;
  void *v17;
  _DWORD *v18;
  void *v19;
  _DWORD *v20;
  void *v21;
  _DWORD *v22;
  uint64_t v23;
  void *v24;
  _BYTE *v25;
  _BYTE *v26;
  size_t v27;
  char *v28;
  char *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  std::__shared_weak_count **v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_weak_owners;
  unint64_t v37;
  _BYTE *v38;
  const void *v39;
  size_t v40;
  char *v41;
  NSObject *v42;
  NSObject *v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  NSObject *v58;
  unsigned int v59;
  int v60;
  std::__shared_weak_count *v64[2];
  uint64_t v65;
  __int16 v66;
  void *v67[2];
  std::__shared_weak_count_vtbl *v68;
  dispatch_object_t object[3];
  _OWORD v70[2];
  unint64_t v71;
  uint8_t buf[16];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  void *__p[2];
  void *v77[2];
  void *v78[2];
  __int128 v79;
  char *v80;
  uint64_t v81;
  void (*v82)(uint64_t, const unsigned __int8 *);
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  const void *aBlock[6];

  v5 = a1;
  v7 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    v9 = 0;
    v10 = (_DWORD)v6 - (_DWORD)v7;
    v59 = vcvtpd_u64_f64((double)((_DWORD)v6 - (_DWORD)v7) * 0.000260416667) - 1;
    v60 = (_DWORD)v6 - (_DWORD)v7;
    while (1)
    {
      *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v78 = v11;
      v79 = v11;
      v12 = 3840 * v9;
      if ((v10 - 3840 * v9) >= 0xF00)
        v13 = 3840;
      else
        v13 = v10 - 3840 * v9;
      *(_OWORD *)__p = v11;
      *(_OWORD *)v77 = v11;
      v74 = v11;
      v75 = v11;
      *(_OWORD *)buf = v11;
      v73 = v11;
      AriSdk::ARI_CsiTraceProfilePacketsReq_SDK::ARI_CsiTraceProfilePacketsReq_SDK((AriSdk::ARI_CsiTraceProfilePacketsReq_SDK *)buf);
      v14 = operator new(2uLL);
      *v14 = a3;
      v15 = __p[0];
      __p[0] = v14;
      if (v15)
        operator delete(v15);
      v16 = operator new(2uLL);
      *v16 = v9;
      v17 = __p[1];
      __p[1] = v16;
      if (v17)
        operator delete(v17);
      v18 = operator new(4uLL);
      *v18 = v10;
      v19 = v77[0];
      v77[0] = v18;
      if (v19)
        operator delete(v19);
      v20 = operator new(4uLL);
      *v20 = v12;
      v21 = v77[1];
      v77[1] = v20;
      if (v21)
        operator delete(v21);
      v22 = operator new(4uLL);
      v23 = v5;
      *v22 = v13;
      v24 = v78[0];
      v78[0] = v22;
      if (v24)
        operator delete(v24);
      v25 = a2[1];
      v26 = (char *)*a2 + v12;
      v81 = 0;
      v82 = 0;
      v80 = 0;
      v27 = v25 - v26;
      if (v25 == v26)
      {
        v28 = 0;
        v29 = 0;
        v31 = v23;
LABEL_26:
        if (v78[1])
        {
          *(void **)&v79 = v78[1];
          operator delete(v78[1]);
        }
        v78[1] = v28;
        *(_QWORD *)&v79 = v29;
        *((_QWORD *)&v79 + 1) = v29;
        goto LABEL_31;
      }
      if ((v27 & 0x8000000000000000) != 0)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[v27];
      v80 = v28;
      v82 = (void (*)(uint64_t, const unsigned __int8 *))&v28[v27];
      memmove(v28, v26, v27);
      v81 = (uint64_t)&v28[v27];
      v31 = v23;
      if (v27 < 0xF01)
        goto LABEL_26;
      AriOsa::LogSrcInfo((AriOsa *)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "operator=", v30);
      v33 = v64;
      if (v65 < 0)
        v33 = (std::__shared_weak_count **)v64[0];
      Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v32, v33, 360, &v78[1], v27, 3840);
      if ((SHIBYTE(v65) & 0x80000000) == 0)
        break;
      operator delete(v64[0]);
      if (v28)
        goto LABEL_30;
LABEL_31:
      v34 = *(_QWORD *)(v31 + 104);
      v35 = a4[1];
      v64[0] = *a4;
      v64[1] = v35;
      if (v35)
      {
        p_shared_weak_owners = (unint64_t *)&v35->__shared_weak_owners_;
        do
          v37 = __ldxr(p_shared_weak_owners);
        while (__stxr(v37 + 1, p_shared_weak_owners));
      }
      v65 = v31;
      v66 = a3;
      v67[1] = 0;
      v68 = 0;
      v67[0] = 0;
      v39 = *a2;
      v38 = a2[1];
      v40 = v38 - (_BYTE *)*a2;
      if (v38 != *a2)
      {
        if ((v40 & 0x8000000000000000) != 0)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v67[0] = operator new(v38 - (_BYTE *)*a2);
        v67[1] = v67[0];
        v41 = (char *)v67[0] + v40;
        v68 = (std::__shared_weak_count_vtbl *)((char *)v67[0] + v40);
        memcpy(v67[0], v39, v40);
        v67[1] = v41;
      }
      v42 = *a5;
      if (*a5)
        v42 = _Block_copy(v42);
      v43 = a5[1];
      object[0] = v42;
      object[1] = v43;
      if (v43)
        dispatch_retain(v43);
      v44 = (std::__shared_weak_count *)operator new(0x60uLL);
      v45 = *(_OWORD *)v67;
      v44[1].std::__shared_count = *(std::__shared_count *)v64;
      v44->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      v44->__shared_weak_owners_ = 0;
      v44->__vftable = (std::__shared_weak_count_vtbl *)off_24F033A90;
      v64[0] = 0;
      v64[1] = 0;
      v44[1].__shared_weak_owners_ = v65;
      LOWORD(v44[2].__vftable) = v66;
      *(_OWORD *)&v44[2].__shared_owners_ = v45;
      v44[3].__vftable = v68;
      v67[1] = 0;
      v68 = 0;
      v67[0] = 0;
      *(_OWORD *)&v44[3].__shared_owners_ = *(_OWORD *)object;
      object[0] = 0;
      object[1] = 0;
      v80 = (char *)MEMORY[0x24BDAC760];
      v81 = 1174405120;
      v82 = ___ZN3ice6detail12wrapCallbackIZN5trace16ARICommandDriver18profileMaskV2_syncENSt3__16vectorIcNS4_9allocatorIcEEEEtNS4_8weak_ptrINS2_13CommandDriverEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENSC_5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
      v83 = &__block_descriptor_tmp_66;
      v84 = v44 + 1;
      v85 = v44;
      do
        v47 = __ldxr(p_shared_owners);
      while (__stxr(v47 + 1, p_shared_owners));
      aBlock[0] = (const void *)MEMORY[0x24BDAC760];
      aBlock[1] = (const void *)0x40000000;
      aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_1;
      aBlock[3] = &unk_24F033780;
      aBlock[4] = &v80;
      v48 = _Block_copy(aBlock);
      v49 = v85;
      if (v85)
      {
        v50 = (unint64_t *)&v85->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      do
        v52 = __ldaxr(p_shared_owners);
      while (__stlxr(v52 - 1, p_shared_owners));
      v5 = v23;
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
      *(_QWORD *)&v53 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v53 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v70[0] = v53;
      v70[1] = v53;
      v71 = 0xAAAAAAAAAAAAAAAALL;
      v54 = *(std::__shared_weak_count **)(v34 + 16);
      v80 = *(char **)(v34 + 8);
      if (!v54)
      {
        v81 = 0;
LABEL_72:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      v81 = (uint64_t)std::__shared_weak_count::lock(v54);
      v10 = v60;
      if (!v81)
        goto LABEL_72;
      ice::SendMsgBaseProxy::SendMsgBaseProxy();
      v55 = (std::__shared_weak_count *)v81;
      if (v81)
      {
        v56 = (unint64_t *)(v81 + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      aBlock[0] = v48;
      ice::SendMsgBaseProxy::callback();
      if (aBlock[0])
        _Block_release(aBlock[0]);
      MEMORY[0x22E2A2FF8](v70);
      if (object[1])
        dispatch_release(object[1]);
      if (object[0])
        _Block_release(object[0]);
      if (v67[0])
      {
        v67[1] = v67[0];
        operator delete(v67[0]);
      }
      if (v64[1])
        std::__shared_weak_count::__release_weak(v64[1]);
      MEMORY[0x22E2A3ED4](buf);
      if (++v9 > v59)
        return;
    }
    if (!v28)
      goto LABEL_31;
LABEL_30:
    operator delete(v28);
    goto LABEL_31;
  }
  v58 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_227A72000, v58, OS_LOG_TYPE_ERROR, "Nothing have to be sent!", buf, 2u);
  }
}

void sub_227A9493C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, std::__shared_weak_count *a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  void *v38;

  if (v38)
  {
    operator delete(v38);
    MEMORY[0x22E2A3ED4](&a38);
    _Unwind_Resume(a1);
  }
  MEMORY[0x22E2A3ED4](&a38);
  _Unwind_Resume(a1);
}

_QWORD *trace::ARICommandDriver::profileMaskV2_sync(std::vector<char>,unsigned short,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  void *v4;
  std::__shared_weak_count *v5;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)a1[1];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void trace::ARICommandDriver::setTraceMasks(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  size_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  size_t v23;
  char *v24;
  char *v25;
  size_t v26;
  char *v27;
  char *v28;
  void *v29;
  NSObject *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  NSObject *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD v44[5];
  void *v45;
  void *v46;
  char *v47;
  void *__p;
  void *v49;
  char *v50;
  void *aBlock;
  dispatch_object_t object;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void *v55;
  size_t v56;
  char *v57;
  void *v58;
  size_t v59;
  char *v60;
  _QWORD block[6];
  std::__shared_weak_count *v62;

  v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v7 = a1[9], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v43 = a3;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  if (&v58 != (void **)(a2 + 8))
  {
    v15 = *(_BYTE **)(a2 + 8);
    v14 = *(_BYTE **)(a2 + 16);
    v16 = v14 - v15;
    if (v14 == v15)
    {
      v17 = 0;
    }
    else
    {
      if ((v16 & 0x8000000000000000) != 0)
        goto LABEL_65;
      v17 = (size_t)operator new(v14 - v15);
      v58 = (void *)v17;
      v59 = v17;
      v60 = (char *)(v17 + v16);
      memcpy((void *)v17, v15, v16);
      v16 += v17;
    }
    v59 = v16;
    if (&v55 != (void **)(a2 + 32))
      goto LABEL_17;
LABEL_14:
    v18 = 0;
    v19 = 0;
    goto LABEL_22;
  }
  v16 = 0;
  v17 = 0;
  if (&v55 == (void **)(a2 + 32))
    goto LABEL_14;
LABEL_17:
  v21 = *(_BYTE **)(a2 + 32);
  v20 = *(_BYTE **)(a2 + 40);
  v18 = v20 - v21;
  if (v20 == v21)
  {
    v19 = 0;
    goto LABEL_21;
  }
  if ((v18 & 0x8000000000000000) != 0)
LABEL_65:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v19 = (size_t)operator new(v20 - v21);
  v55 = (void *)v19;
  v56 = v19;
  v57 = (char *)(v19 + v18);
  memcpy((void *)v19, v21, v18);
  v18 += v19;
LABEL_21:
  v56 = v18;
LABEL_22:
  v22 = MEMORY[0x24BDAC760];
  v44[0] = MEMORY[0x24BDAC760];
  v44[1] = 1174405120;
  v44[2] = ___ZN5trace16ARICommandDriver13setTraceMasksERNS_13TraceMaskInfoEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v44[3] = &__block_descriptor_tmp_16_1;
  v44[4] = a1;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v23 = v16 - v17;
  if (v23)
  {
    if ((v23 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v24 = (char *)operator new(v23);
    v25 = &v24[v23];
    v45 = v24;
    v47 = &v24[v23];
    memcpy(v24, (const void *)v17, v23);
    v46 = v25;
  }
  __p = 0;
  v49 = 0;
  v50 = 0;
  v26 = v18 - v19;
  if (v18 != v19)
  {
    if ((v26 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v27 = (char *)operator new(v18 - v19);
    v28 = &v27[v26];
    __p = v27;
    v50 = &v27[v26];
    memcpy(v27, (const void *)v19, v18 - v19);
    v49 = v28;
  }
  v29 = *(void **)v43;
  if (*(_QWORD *)v43)
    v29 = _Block_copy(v29);
  v30 = *(NSObject **)(v43 + 8);
  aBlock = v29;
  object = v30;
  if (v30)
    dispatch_retain(v30);
  v53 = v7;
  v54 = v9;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v32 = (std::__shared_weak_count *)a1[10];
  if (!v32 || (v33 = a1[9], (v34 = std::__shared_weak_count::lock(v32)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v35 = v34;
  v36 = a1[11];
  block[0] = v22;
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_24F033698;
  v37 = (unint64_t *)&v35->__shared_owners_;
  block[5] = v33;
  v62 = v35;
  do
    v38 = __ldxr(v37);
  while (__stxr(v38 + 1, v37));
  block[4] = v44;
  dispatch_async(v36, block);
  v39 = v62;
  if (v62)
  {
    v40 = (unint64_t *)&v62->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  do
    v42 = __ldaxr(v37);
  while (__stlxr(v42 - 1, v37));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  if (v54)
    std::__shared_weak_count::__release_weak(v54);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (__p)
  {
    v49 = __p;
    operator delete(__p);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v55)
  {
    v56 = (size_t)v55;
    operator delete(v55);
  }
  if (v58)
  {
    v59 = (size_t)v58;
    operator delete(v58);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void sub_227A94EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  std::__shared_weak_count *v33;
  void *v35;

  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a29)
  {
    operator delete(a29);
    v35 = a32;
    if (!a32)
    {
LABEL_7:
      std::__shared_weak_count::__release_weak(v33);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v35 = a32;
    if (!a32)
      goto LABEL_7;
  }
  operator delete(v35);
  std::__shared_weak_count::__release_weak(v33);
  _Unwind_Resume(a1);
}

void sub_227A94F14(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,__int128 a26,CFTypeRef cf)
{
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  void *v30;
  NSObject *v31;
  void *v32;
  const void *v33;
  const void *v34;
  char *__pa;

  __cxa_begin_catch(a1);
  v29 = *(NSObject **)(v27 + 40);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)(v28 - 160) = 0;
    _os_log_error_impl(&dword_227A72000, v29, OS_LOG_TYPE_ERROR, "Invalid parameter not downcastable to TraceMaskInfo", (uint8_t *)(v28 - 160), 2u);
    if (!*(_QWORD *)a9)
      goto LABEL_17;
  }
  else if (!*(_QWORD *)a9)
  {
    goto LABEL_17;
  }
  if (*(_QWORD *)(a9 + 8))
  {
    __pa = (char *)operator new(0x38uLL);
    strcpy(__pa, "Invalid parameter not downcastable to TraceMaskInfo");
    CreateError();
    operator delete(__pa);
    CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    if (*(_QWORD *)a9)
      v30 = _Block_copy(*(const void **)a9);
    else
      v30 = 0;
    v31 = *(NSObject **)(a9 + 8);
    *(_QWORD *)(v28 - 160) = MEMORY[0x24BDAC760];
    *(_QWORD *)(v28 - 152) = 1174405120;
    *(_QWORD *)(v28 - 144) = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
    *(_QWORD *)(v28 - 136) = &__block_descriptor_tmp_40;
    if (v30)
      v32 = _Block_copy(v30);
    else
      v32 = 0;
    *(_QWORD *)(v28 - 128) = v32;
    *(_QWORD *)(v28 - 120) = 0xAAAAAAAAAAAAAAAALL;
    CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    dispatch_async(v31, (dispatch_block_t)(v28 - 160));
    v33 = *(const void **)(v28 - 120);
    if (v33)
      CFRelease(v33);
    v34 = *(const void **)(v28 - 128);
    if (v34)
      _Block_release(v34);
    if (v30)
      _Block_release(v30);
    CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  }
LABEL_17:
  __cxa_end_catch();
  JUMPOUT(0x227A94E0CLL);
}

void sub_227A950DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x227A94ECCLL);
}

void sub_227A95104()
{
  JUMPOUT(0x227A94ECCLL);
}

void ___ZN5trace16ARICommandDriver13setTraceMasksERNS_13TraceMaskInfoEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  void **v7;
  _BYTE *v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void **v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 *v24;
  _OWORD *v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void **v31;
  _BYTE *v32;
  _BYTE *v33;
  size_t v34;
  _BYTE *v35;
  _BYTE *v36;
  size_t v37;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_weak_owners;
  unint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  size_t v44;
  char *v45;
  std::__shared_weak_count *v46;
  _BYTE *v47;
  NSObject *v48;
  CFErrorRef v49;
  CFErrorRef v50;
  const void *v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  const void *v56;
  NSObject *v57;
  NSObject *v58;
  unint64_t *v59;
  unint64_t v60;
  const void *v61;
  NSObject *v62;
  NSObject *v63;
  NSObject *v64;
  NSObject *v65;
  NSObject *v66;
  std::__shared_weak_count *v67[2];
  void *v68;
  char *v69;
  char *v70;
  void *v71;
  char *v72;
  char *v73;
  NSObject *v74;
  NSObject *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  const void *v78;
  char *v79;
  char *v80;
  NSObject *v81[2];
  std::__shared_weak_count *v82[2];
  const void *v83;
  char *v84;
  char *v85;
  void *__p[2];
  int64_t v87;
  void *v88[2];
  int64_t v89;
  _BYTE buf[24];
  char *v91;
  __int128 v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    goto LABEL_39;
  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(char **)(a1 + 48);
  v6 = (unint64_t)&v4[-v5];
  if ((unint64_t)&v4[-v5] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v6 > 0x16)
  {
    v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v14 = v6 | 7;
    v15 = v14 + 1;
    v7 = (void **)operator new(v14 + 1);
    v88[1] = &v4[-v5];
    v89 = v15 | 0x8000000000000000;
    v88[0] = v7;
    if ((char *)v5 != v4)
      goto LABEL_5;
LABEL_14:
    v8 = v7;
    goto LABEL_17;
  }
  HIBYTE(v89) = (_BYTE)v4 - v5;
  v7 = v88;
  if ((char *)v5 == v4)
    goto LABEL_14;
LABEL_5:
  if (v6 < 0x20 || (unint64_t)v7 - v5 < 0x20)
  {
    v8 = v7;
    v9 = (char *)v5;
  }
  else
  {
    v8 = (char *)v7 + (v6 & 0xFFFFFFFFFFFFFFE0);
    v9 = (char *)(v5 + (v6 & 0xFFFFFFFFFFFFFFE0));
    v10 = (__int128 *)(v5 + 16);
    v11 = v7 + 2;
    v12 = v6 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v6 == (v6 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_17;
  }
  do
  {
    v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != v4);
LABEL_17:
  *v8 = 0;
  if (v89 >= 0)
    v17 = v88;
  else
    v17 = (void **)v88[0];
  v19 = *(_QWORD *)(a1 + 64);
  v18 = *(char **)(a1 + 72);
  v20 = (unint64_t)&v18[-v19];
  if ((unint64_t)&v18[-v19] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v20 <= 0x16)
  {
    HIBYTE(v87) = (_BYTE)v18 - v19;
    v21 = (char *)__p;
    if ((char *)v19 != v18)
      goto LABEL_23;
LABEL_32:
    v22 = v21;
    goto LABEL_35;
  }
  v28 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v20 | 7) != 0x17)
    v28 = v20 | 7;
  v29 = v28 + 1;
  v21 = (char *)operator new(v28 + 1);
  __p[1] = &v18[-v19];
  v87 = v29 | 0x8000000000000000;
  __p[0] = v21;
  if ((char *)v19 == v18)
    goto LABEL_32;
LABEL_23:
  if (v20 < 0x20 || (unint64_t)&v21[-v19] < 0x20)
  {
    v22 = v21;
    v23 = (char *)v19;
    do
    {
LABEL_34:
      v30 = *v23++;
      *v22++ = v30;
    }
    while (v23 != v18);
    goto LABEL_35;
  }
  v22 = &v21[v20 & 0xFFFFFFFFFFFFFFE0];
  v23 = (char *)(v19 + (v20 & 0xFFFFFFFFFFFFFFE0));
  v24 = (__int128 *)(v19 + 16);
  v25 = v21 + 16;
  v26 = v20 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v27 = *v24;
    *(v25 - 1) = *(v24 - 1);
    *v25 = v27;
    v24 += 2;
    v25 += 2;
    v26 -= 32;
  }
  while (v26);
  if (v20 != (v20 & 0xFFFFFFFFFFFFFFE0))
    goto LABEL_34;
LABEL_35:
  *v22 = 0;
  v31 = __p;
  if (v87 < 0)
    v31 = (void **)__p[0];
  *(_DWORD *)buf = 134218754;
  *(_QWORD *)&buf[4] = v6;
  *(_WORD *)&buf[12] = 2080;
  *(_QWORD *)&buf[14] = v17;
  *(_WORD *)&buf[22] = 2048;
  v91 = &v18[-v19];
  LOWORD(v92) = 2080;
  *(_QWORD *)((char *)&v92 + 2) = v31;
  _os_log_impl(&dword_227A72000, v3, OS_LOG_TYPE_DEFAULT, "#I Setting trace masks\nActive[%zu]: %s\nSleep[%zu]: %s", buf, 0x2Au);
  if (SHIBYTE(v87) < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v89) < 0)
      goto LABEL_53;
LABEL_39:
    v33 = *(_BYTE **)(a1 + 40);
    v32 = *(_BYTE **)(a1 + 48);
    v34 = v32 - v33;
    if (v32 == v33)
      goto LABEL_54;
    goto LABEL_40;
  }
  if ((SHIBYTE(v89) & 0x80000000) == 0)
    goto LABEL_39;
LABEL_53:
  operator delete(v88[0]);
  v33 = *(_BYTE **)(a1 + 40);
  v47 = *(_BYTE **)(a1 + 48);
  v34 = v47 - v33;
  if (v47 == v33)
  {
LABEL_54:
    v48 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_227A72000, v48, OS_LOG_TYPE_ERROR, "Cannot set trace mask of size zero", buf, 2u);
      if (!*(_QWORD *)(a1 + 88))
        return;
    }
    else if (!*(_QWORD *)(a1 + 88))
    {
      return;
    }
    if (!*(_QWORD *)(a1 + 96))
      return;
    v49 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 2, 0);
    v50 = v49;
    if (v49)
      CFRetain(v49);
    v51 = *(const void **)(a1 + 88);
    if (v51)
      v52 = _Block_copy(v51);
    else
      v52 = 0;
    v64 = *(NSObject **)(a1 + 96);
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    *(_QWORD *)&buf[8] = 1174405120;
    *(_QWORD *)&buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
    v91 = (char *)&__block_descriptor_tmp_40;
    if (v52)
    {
      *(_QWORD *)&v92 = _Block_copy(v52);
      *((_QWORD *)&v92 + 1) = v50;
      if (!v50)
        goto LABEL_101;
    }
    else
    {
      *(_QWORD *)&v92 = 0;
      *((_QWORD *)&v92 + 1) = v50;
      if (!v50)
      {
LABEL_101:
        dispatch_async(v64, buf);
        if (*((_QWORD *)&v92 + 1))
          CFRelease(*((CFTypeRef *)&v92 + 1));
        if ((_QWORD)v92)
          _Block_release((const void *)v92);
        if (v52)
          _Block_release(v52);
        if (v50)
        {
          CFRelease(v50);
          CFRelease(v50);
        }
        return;
      }
    }
    CFRetain(v50);
    goto LABEL_101;
  }
LABEL_40:
  v36 = *(_BYTE **)(a1 + 64);
  v35 = *(_BYTE **)(a1 + 72);
  v37 = v35 - v36;
  if (v35 == v36)
    goto LABEL_54;
  if (*(_BYTE *)(v2 + 168))
  {
    v83 = 0;
    v84 = 0;
    v85 = 0;
    if ((v34 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v38 = (char *)operator new(v34);
    v83 = v38;
    v85 = &v38[v34];
    memcpy(v38, v33, v34);
    v84 = &v38[v34];
    v39 = *(std::__shared_weak_count **)(a1 + 112);
    v82[0] = *(std::__shared_weak_count **)(a1 + 104);
    v82[1] = v39;
    if (v39)
    {
      p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
      do
        v41 = __ldxr(p_shared_weak_owners);
      while (__stxr(v41 + 1, p_shared_weak_owners));
    }
    v81[0] = 0;
    v81[1] = 0;
    trace::ARICommandDriver::profileMaskV2_sync(v2, &v83, 1, v82, v81);
    if (v39)
      std::__shared_weak_count::__release_weak(v39);
    v84 = v38;
    operator delete(v38);
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v43 = *(_BYTE **)(a1 + 64);
    v42 = *(_BYTE **)(a1 + 72);
    v44 = v42 - v43;
    if (v42 == v43)
    {
      v45 = 0;
      v46 = *(std::__shared_weak_count **)(a1 + 112);
      v76 = *(std::__shared_weak_count **)(a1 + 104);
      v77 = v46;
      if (!v46)
        goto LABEL_82;
    }
    else
    {
      if ((v44 & 0x8000000000000000) != 0)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v45 = (char *)operator new(v42 - v43);
      v78 = v45;
      v80 = &v45[v44];
      memcpy(v45, v43, v44);
      v79 = &v45[v44];
      v46 = *(std::__shared_weak_count **)(a1 + 112);
      v76 = *(std::__shared_weak_count **)(a1 + 104);
      v77 = v46;
      if (!v46)
      {
LABEL_82:
        v61 = *(const void **)(a1 + 88);
        if (v61)
        {
          v62 = _Block_copy(v61);
          v63 = *(NSObject **)(a1 + 96);
          v74 = v62;
          v75 = v63;
          if (!v63)
            goto LABEL_85;
        }
        else
        {
          v62 = 0;
          v63 = *(NSObject **)(a1 + 96);
          v74 = 0;
          v75 = v63;
          if (!v63)
          {
LABEL_85:
            trace::ARICommandDriver::profileMaskV2_sync(v2, &v78, 0, &v76, &v74);
            if (v63)
              dispatch_release(v63);
            if (v62)
              _Block_release(v62);
            if (v46)
              std::__shared_weak_count::__release_weak(v46);
            if (v45)
              goto LABEL_92;
            return;
          }
        }
        dispatch_retain(v63);
        goto LABEL_85;
      }
    }
    v59 = (unint64_t *)&v46->__shared_weak_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
    goto LABEL_82;
  }
  v71 = 0;
  v72 = 0;
  v73 = 0;
  if ((v34 & 0x8000000000000000) != 0)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v71 = operator new(v34);
  v73 = (char *)v71 + v34;
  memcpy(v71, v33, v34);
  v72 = (char *)v71 + v34;
  v69 = 0;
  v70 = 0;
  v68 = 0;
  if ((v37 & 0x8000000000000000) != 0)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v68 = operator new(v37);
  v70 = (char *)v68 + v37;
  memcpy(v68, v36, v37);
  v69 = (char *)v68 + v37;
  v53 = *(std::__shared_weak_count **)(a1 + 112);
  v67[0] = *(std::__shared_weak_count **)(a1 + 104);
  v67[1] = v53;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_weak_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = *(const void **)(a1 + 88);
  if (v56)
  {
    v57 = _Block_copy(v56);
    v58 = *(NSObject **)(a1 + 96);
    v65 = v57;
    v66 = v58;
    if (!v58)
      goto LABEL_69;
    goto LABEL_68;
  }
  v57 = 0;
  v58 = *(NSObject **)(a1 + 96);
  v65 = 0;
  v66 = v58;
  if (v58)
LABEL_68:
    dispatch_retain(v58);
LABEL_69:
  trace::ARICommandDriver::profileMaskV1_sync(v2, (uint64_t)&v71, (uint64_t)&v68, v67, &v65);
  if (v58)
    dispatch_release(v58);
  if (v57)
    _Block_release(v57);
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  if (v68)
  {
    v69 = (char *)v68;
    operator delete(v68);
  }
  v45 = (char *)v71;
  if (v71)
  {
    v72 = (char *)v71;
LABEL_92:
    operator delete(v45);
  }
}

void sub_227A95838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c39_ZTSNSt3__16vectorIcNS_9allocatorIcEEEE64c39_ZTSNSt3__16vectorIcNS_9allocatorIcEEEE88c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE104c46_ZTSNSt3__18weak_ptrIN5trace13CommandDriverEEE(_QWORD *a1, _QWORD *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  size_t v11;
  char *v12;
  char *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  v5 = (_BYTE *)a2[5];
  v4 = (_BYTE *)a2[6];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    a1[5] = v7;
    a1[6] = v7;
    v8 = &v7[v6];
    a1[7] = &v7[v6];
    memcpy(v7, v5, v6);
    a1[6] = v8;
  }
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  v10 = (_BYTE *)a2[8];
  v9 = (_BYTE *)a2[9];
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if ((v11 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    a1[8] = v12;
    a1[9] = v12;
    v13 = &v12[v11];
    a1[10] = &v12[v11];
    memcpy(v12, v10, v11);
    a1[9] = v13;
  }
  v14 = (void *)a2[11];
  if (v14)
    v14 = _Block_copy(v14);
  v15 = a2[12];
  a1[11] = v14;
  a1[12] = v15;
  if (v15)
    dispatch_retain(v15);
  v16 = a2[14];
  a1[13] = a2[13];
  a1[14] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 16);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
}

void sub_227A95A98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 72) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__16vectorIcNS_9allocatorIcEEEE64c39_ZTSNSt3__16vectorIcNS_9allocatorIcEEEE88c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE104c46_ZTSNSt3__18weak_ptrIN5trace13CommandDriverEEE(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;
  void *v5;
  void *v6;

  v2 = (std::__shared_weak_count *)a1[14];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[12];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[11];
  if (v4)
    _Block_release(v4);
  v5 = (void *)a1[8];
  if (v5)
  {
    a1[9] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[5];
  if (v6)
  {
    a1[6] = v6;
    operator delete(v6);
  }
}

void trace::ARICommandDriver::setTraceParams(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int16 v16;
  unint64_t v17;
  void *v18;
  NSObject *v19;
  _QWORD v20[6];
  std::__shared_weak_count *v21;
  void *aBlock;
  dispatch_object_t object;
  uint64_t v24;
  __int16 v25;

  v7 = *(_QWORD *)(a1 + 72);
  v5 = *(std::__shared_weak_count **)(a1 + 80);
  v6 = (uint64_t *)(a1 + 72);
  if (!v5 || (v10 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v16 = *(_WORD *)(a2 + 8);
  v20[0] = MEMORY[0x24BDAC760];
  v20[1] = 1174405120;
  v20[2] = ___ZN5trace16ARICommandDriver14setTraceParamsERNS_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v20[3] = &__block_descriptor_tmp_17;
  v25 = v16;
  v24 = *(_QWORD *)(a2 + 12);
  v20[4] = a1;
  v20[5] = v7;
  v21 = v11;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = *(void **)a3;
  if (*(_QWORD *)a3)
    v18 = _Block_copy(v18);
  v19 = *(NSObject **)(a3 + 8);
  aBlock = v18;
  object = v19;
  if (v19)
    dispatch_retain(v19);
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped(v6, (uint64_t)v20);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  std::__shared_weak_count::__release_weak(v11);
}

uint64_t ___ZN5trace16ARICommandDriver14setTraceParamsERNS_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(int32x2_t *a1)
{
  int32x2_t v2;
  __int128 v3;
  _DWORD *v4;
  void *v5;
  int v6;
  _DWORD *v7;
  void *v8;
  _DWORD *v9;
  void *v10;
  _DWORD *v11;
  void *v12;
  _DWORD *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count_vtbl *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  const void *v21;
  void *v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t *v26;
  unint64_t v27;
  const void *v28;
  unint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _OWORD v41[2];
  unint64_t v42;
  _OWORD v43[4];
  void *__p[2];
  void *v45[2];
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, const unsigned __int8 *);
  void *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  const void *aBlock[5];
  uint8_t buf[8];
  std::__shared_weak_count *v55;
  const void *v56;
  dispatch_object_t v57;
  _BYTE v58[20];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v2 = a1[4];
  v46 = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v3;
  *(_OWORD *)v45 = v3;
  v43[2] = v3;
  v43[3] = v3;
  v43[0] = v3;
  v43[1] = v3;
  AriSdk::ARI_CsiTraceModeInitReq_SDK::ARI_CsiTraceModeInitReq_SDK((AriSdk::ARI_CsiTraceModeInitReq_SDK *)v43);
  v4 = operator new(4uLL);
  *v4 = a1[10].u8[0];
  v5 = __p[0];
  __p[0] = v4;
  if (v5)
    operator delete(v5);
  v6 = a1[10].u8[1];
  v7 = operator new(4uLL);
  *v7 = v6;
  v8 = __p[1];
  __p[1] = v7;
  if (v8)
    operator delete(v8);
  v9 = operator new(4uLL);
  *v9 = a1[9].i32[0];
  v10 = v45[0];
  v45[0] = v9;
  if (v10)
    operator delete(v10);
  v11 = operator new(4uLL);
  *v11 = a1[9].i32[1];
  v12 = v45[1];
  v45[1] = v11;
  if (v12)
    operator delete(v12);
  v13 = operator new(4uLL);
  *v13 = 0;
  v14 = v46;
  v46 = v13;
  if (v14)
    operator delete(v14);
  v15 = *(NSObject **)(*(_QWORD *)&v2 + 40);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 67109120;
    _os_log_impl(&dword_227A72000, v15, OS_LOG_TYPE_DEFAULT, "#I Setting trace timeout of %u", buf, 8u);
  }
  v16 = *(_QWORD *)(*(_QWORD *)&v2 + 104);
  v18 = (std::__shared_weak_count_vtbl *)a1[5];
  v17 = (std::__shared_weak_count *)a1[6];
  *(_QWORD *)buf = v18;
  v55 = v17;
  if (v17)
  {
    p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
  }
  v21 = (const void *)a1[7];
  if (v21)
  {
    v22 = _Block_copy(v21);
    v23 = a1[8];
    v56 = v22;
    v57 = v23;
    if (!v23)
      goto LABEL_19;
    goto LABEL_18;
  }
  v22 = 0;
  v23 = a1[8];
  v56 = 0;
  v57 = v23;
  if (v23)
LABEL_18:
    dispatch_retain(v23);
LABEL_19:
  *(int32x2_t *)v58 = v2;
  *(_WORD *)&v58[8] = a1[10].i16[0];
  *(int32x2_t *)&v58[12] = vrev64_s32(a1[9]);
  v24 = (std::__shared_weak_count *)operator new(0x50uLL);
  v24->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  v24->__shared_weak_owners_ = 0;
  v24->__vftable = (std::__shared_weak_count_vtbl *)off_24F033B10;
  v24[1].__vftable = v18;
  v24[1].__shared_owners_ = (uint64_t)v17;
  if (v17)
  {
    v26 = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  if (!v22)
  {
    v24[1].__shared_weak_owners_ = 0;
    v24[2].__vftable = (std::__shared_weak_count_vtbl *)v23;
    if (!v23)
      goto LABEL_25;
    goto LABEL_24;
  }
  v24[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v22);
  v24[2].__vftable = (std::__shared_weak_count_vtbl *)v23;
  if (v23)
LABEL_24:
    dispatch_retain(v23);
LABEL_25:
  *(_OWORD *)&v24[2].__shared_owners_ = *(_OWORD *)v58;
  LODWORD(v24[3].__vftable) = *(_DWORD *)&v58[16];
  v28 = (const void *)MEMORY[0x24BDAC760];
  v47 = MEMORY[0x24BDAC760];
  v48 = 1174405120;
  v49 = ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver14setTraceParamsERNS2_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__7vEENS6_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v50 = &__block_descriptor_tmp_69;
  v51 = v24 + 1;
  v52 = v24;
  do
    v29 = __ldxr(p_shared_owners);
  while (__stxr(v29 + 1, p_shared_owners));
  aBlock[0] = v28;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_1;
  aBlock[3] = &unk_24F033780;
  aBlock[4] = &v47;
  v30 = _Block_copy(aBlock);
  v31 = v52;
  if (v52)
  {
    v32 = (unint64_t *)&v52->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  do
    v34 = __ldaxr(p_shared_owners);
  while (__stlxr(v34 - 1, p_shared_owners));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  *(_QWORD *)&v35 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41[0] = v35;
  v41[1] = v35;
  v42 = 0xAAAAAAAAAAAAAAAALL;
  v36 = *(std::__shared_weak_count **)(v16 + 16);
  v47 = *(_QWORD *)(v16 + 8);
  if (!v36)
  {
    v48 = 0;
LABEL_56:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v48 = (uint64_t)std::__shared_weak_count::lock(v36);
  if (!v48)
    goto LABEL_56;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v37 = (std::__shared_weak_count *)v48;
  if (v48)
  {
    v38 = (unint64_t *)(v48 + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  aBlock[0] = v30;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v41);
  if (v57)
    dispatch_release(v57);
  if (v56)
    _Block_release(v56);
  if (v55)
    std::__shared_weak_count::__release_weak(v55);
  return MEMORY[0x22E2A36AC](v43);
}

void sub_227A960CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *_ZZZN5trace16ARICommandDriver14setTraceParamsERNS_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_EN3__7D1Ev(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[2];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void trace::ARICommandDriver::setDriverStartedAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD v9[5];
  void *aBlock;
  dispatch_object_t object;
  _QWORD *v12;
  _QWORD block[6];

  v4 = MEMORY[0x24BDAC760];
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1174405120;
  v9[2] = ___ZN5trace16ARICommandDriver22setDriverStartedActionEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_18_1;
  v9[4] = a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
    v5 = _Block_copy(v5);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v5;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  v12 = v9;
  block[0] = v4;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_72;
  block[4] = a1 + 72;
  block[5] = &v12;
  v7 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 96))
  {
    dispatch_async_and_wait(v7, block);
    v8 = object;
    if (!object)
      goto LABEL_8;
    goto LABEL_7;
  }
  dispatch_sync(v7, block);
  v8 = object;
  if (object)
LABEL_7:
    dispatch_release(v8);
LABEL_8:
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5trace16ARICommandDriver22setDriverStartedActionEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;

  v3 = a1[4];
  v2 = (void *)a1[5];
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 120);
  *(_QWORD *)(v3 + 120) = v2;
  if (v4)
    _Block_release(v4);
  v5 = a1[6];
  if (v5)
    dispatch_retain(v5);
  v6 = *(NSObject **)(v3 + 128);
  *(_QWORD *)(v3 + 128) = v5;
  if (v6)
    dispatch_release(v6);
}

void __copy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void trace::ARICommandDriver::setLPMEnterAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD v9[5];
  void *aBlock;
  dispatch_object_t object;
  _QWORD *v12;
  _QWORD block[6];

  v4 = MEMORY[0x24BDAC760];
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1174405120;
  v9[2] = ___ZN5trace16ARICommandDriver17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS1_13group_sessionEEEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_19_1;
  v9[4] = a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
    v5 = _Block_copy(v5);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v5;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  v12 = v9;
  block[0] = v4;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_72;
  block[4] = a1 + 72;
  block[5] = &v12;
  v7 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 96))
  {
    dispatch_async_and_wait(v7, block);
    v8 = object;
    if (!object)
      goto LABEL_8;
    goto LABEL_7;
  }
  dispatch_sync(v7, block);
  v8 = object;
  if (object)
LABEL_7:
    dispatch_release(v8);
LABEL_8:
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5trace16ARICommandDriver17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS1_13group_sessionEEEE_block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;

  v3 = a1[4];
  v2 = (void *)a1[5];
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 136);
  *(_QWORD *)(v3 + 136) = v2;
  if (v4)
    _Block_release(v4);
  v5 = a1[6];
  if (v5)
    dispatch_retain(v5);
  v6 = *(NSObject **)(v3 + 144);
  *(_QWORD *)(v3 + 144) = v5;
  if (v6)
    dispatch_release(v6);
}

void __copy_helper_block_e8_40c64_ZTSN8dispatch8callbackIU13block_pointerFvNS_13group_sessionEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c64_ZTSN8dispatch8callbackIU13block_pointerFvNS_13group_sessionEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void trace::ARICommandDriver::setLPMExitAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD v9[5];
  void *aBlock;
  dispatch_object_t object;
  _QWORD *v12;
  _QWORD block[6];

  v4 = MEMORY[0x24BDAC760];
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1174405120;
  v9[2] = ___ZN5trace16ARICommandDriver16setLPMExitActionEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_20_0;
  v9[4] = a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
    v5 = _Block_copy(v5);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v5;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  v12 = v9;
  block[0] = v4;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_72;
  block[4] = a1 + 72;
  block[5] = &v12;
  v7 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 96))
  {
    dispatch_async_and_wait(v7, block);
    v8 = object;
    if (!object)
      goto LABEL_8;
    goto LABEL_7;
  }
  dispatch_sync(v7, block);
  v8 = object;
  if (object)
LABEL_7:
    dispatch_release(v8);
LABEL_8:
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5trace16ARICommandDriver16setLPMExitActionEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;

  v3 = a1[4];
  v2 = (void *)a1[5];
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 152);
  *(_QWORD *)(v3 + 152) = v2;
  if (v4)
    _Block_release(v4);
  v5 = a1[6];
  if (v5)
    dispatch_retain(v5);
  v6 = *(NSObject **)(v3 + 160);
  *(_QWORD *)(v3 + 160) = v5;
  if (v6)
    dispatch_release(v6);
}

void trace::ARICommandDriver::setETBMasks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const void *v16;
  size_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  void *v21;
  NSObject *v22;
  _QWORD v23[5];
  void *__p;
  void *v25;
  char *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *aBlock;
  dispatch_object_t object;

  v7 = *(_QWORD *)(a1 + 72);
  v5 = *(std::__shared_weak_count **)(a1 + 80);
  v6 = (uint64_t *)(a1 + 72);
  if (!v5 || (v10 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v23[0] = MEMORY[0x24BDAC760];
  v23[1] = 1174405120;
  v23[2] = ___ZN5trace16ARICommandDriver11setETBMasksENSt3__16vectorIcNS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v23[3] = &__block_descriptor_tmp_22_1;
  v23[4] = a1;
  __p = 0;
  v25 = 0;
  v26 = 0;
  v16 = *(const void **)a2;
  v17 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v17)
  {
    if ((v17 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v18 = (char *)operator new(v17);
    v19 = &v18[v17];
    __p = v18;
    v26 = &v18[v17];
    memcpy(v18, v16, v17);
    v25 = v19;
  }
  v27 = v7;
  v28 = v11;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  v21 = *(void **)a3;
  if (*(_QWORD *)a3)
    v21 = _Block_copy(v21);
  v22 = *(NSObject **)(a3 + 8);
  aBlock = v21;
  object = v22;
  if (v22)
    dispatch_retain(v22);
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped(v6, (uint64_t)v23);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  std::__shared_weak_count::__release_weak(v11);
}

void sub_227A968A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  std::__shared_weak_count *v15;

  if (__p)
    operator delete(__p);
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

void ___ZN5trace16ARICommandDriver11setETBMasksENSt3__16vectorIcNS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *p_p;
  char *v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  _BYTE *v18;
  _BYTE *v19;
  size_t v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  const void *v25;
  NSObject *v26;
  NSObject *v27;
  char *v28;
  const void *v29;
  void *v30;
  NSObject *v31;
  void *v32;
  const void *v33;
  char *v34;
  CFTypeRef cf;
  NSObject *v36;
  NSObject *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  const void *v40;
  char *v41;
  char *v42;
  void *__p;
  uint64_t v44;
  int64_t v45;
  void *v46;
  void *aBlock;
  CFTypeRef v48;
  uint8_t buf[4];
  char *v50;
  __int16 v51;
  void *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    goto LABEL_20;
  v5 = a1[5];
  v4 = (char *)a1[6];
  v6 = (unint64_t)&v4[-v5];
  if ((unint64_t)&v4[-v5] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v6 <= 0x16)
  {
    HIBYTE(v45) = (_BYTE)v4 - v5;
    p_p = (char *)&__p;
    if ((char *)v5 != v4)
      goto LABEL_5;
LABEL_14:
    v8 = p_p;
    goto LABEL_17;
  }
  v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17)
    v14 = v6 | 7;
  v15 = v14 + 1;
  p_p = (char *)operator new(v14 + 1);
  v44 = (uint64_t)&v4[-v5];
  v45 = v15 | 0x8000000000000000;
  __p = p_p;
  if ((char *)v5 == v4)
    goto LABEL_14;
LABEL_5:
  if (v6 < 0x20 || (unint64_t)&p_p[-v5] < 0x20)
  {
    v8 = p_p;
    v9 = (char *)v5;
    do
    {
LABEL_16:
      v16 = *v9++;
      *v8++ = v16;
    }
    while (v9 != v4);
    goto LABEL_17;
  }
  v8 = &p_p[v6 & 0xFFFFFFFFFFFFFFE0];
  v9 = (char *)(v5 + (v6 & 0xFFFFFFFFFFFFFFE0));
  v10 = (__int128 *)(v5 + 16);
  v11 = p_p + 16;
  v12 = v6 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v13 = *v10;
    *(v11 - 1) = *(v10 - 1);
    *v11 = v13;
    v10 += 2;
    v11 += 2;
    v12 -= 32;
  }
  while (v12);
  if (v6 != (v6 & 0xFFFFFFFFFFFFFFE0))
    goto LABEL_16;
LABEL_17:
  *v8 = 0;
  v17 = &__p;
  if (v45 < 0)
    v17 = __p;
  *(_DWORD *)buf = 134218242;
  v50 = &v4[-v5];
  v51 = 2080;
  v52 = v17;
  _os_log_impl(&dword_227A72000, v3, OS_LOG_TYPE_DEFAULT, "#I Setting ETB [%zu]: %s", buf, 0x16u);
  if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
LABEL_20:
    if (*(_BYTE *)(v2 + 168))
      goto LABEL_21;
LABEL_43:
    if (!a1[10] || !a1[11])
      return;
    v34 = (char *)operator new(0x30uLL);
    strcpy(v34, "ETB configuration works on only bb trace v2!");
    CreateError();
    v29 = (const void *)a1[10];
    if (v29)
      v30 = _Block_copy(v29);
    else
      v30 = 0;
    v31 = a1[11];
    __p = (void *)MEMORY[0x24BDAC760];
    v44 = 1174405120;
    v45 = (int64_t)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
    v46 = &__block_descriptor_tmp_40;
    if (v30)
    {
      v32 = _Block_copy(v30);
      v33 = cf;
      aBlock = v32;
      v48 = cf;
      if (!cf)
        goto LABEL_53;
    }
    else
    {
      v33 = cf;
      aBlock = 0;
      v48 = cf;
      if (!cf)
      {
LABEL_53:
        dispatch_async(v31, &__p);
        if (v48)
          CFRelease(v48);
        if (aBlock)
          _Block_release(aBlock);
        if (v30)
          _Block_release(v30);
        if (cf)
          CFRelease(cf);
        v28 = v34;
        goto LABEL_39;
      }
    }
    CFRetain(v33);
    goto LABEL_53;
  }
  operator delete(__p);
  if (!*(_BYTE *)(v2 + 168))
    goto LABEL_43;
LABEL_21:
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v19 = (_BYTE *)a1[5];
  v18 = (_BYTE *)a1[6];
  v20 = v18 - v19;
  if (v18 == v19)
  {
    v21 = 0;
    v22 = (std::__shared_weak_count *)a1[9];
    v38 = (std::__shared_weak_count *)a1[8];
    v39 = v22;
    if (!v22)
      goto LABEL_28;
    goto LABEL_26;
  }
  if ((v20 & 0x8000000000000000) != 0)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v21 = (char *)operator new(v18 - v19);
  v40 = v21;
  v42 = &v21[v20];
  memcpy(v21, v19, v20);
  v41 = &v21[v20];
  v22 = (std::__shared_weak_count *)a1[9];
  v38 = (std::__shared_weak_count *)a1[8];
  v39 = v22;
  if (v22)
  {
LABEL_26:
    p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
    do
      v24 = __ldxr(p_shared_weak_owners);
    while (__stxr(v24 + 1, p_shared_weak_owners));
  }
LABEL_28:
  v25 = (const void *)a1[10];
  if (v25)
  {
    v26 = _Block_copy(v25);
    v27 = a1[11];
    v36 = v26;
    v37 = v27;
    if (!v27)
      goto LABEL_31;
    goto LABEL_30;
  }
  v26 = 0;
  v27 = a1[11];
  v36 = 0;
  v37 = v27;
  if (v27)
LABEL_30:
    dispatch_retain(v27);
LABEL_31:
  trace::ARICommandDriver::profileMaskV2_sync(v2, &v40, 2, &v38, &v36);
  if (v27)
    dispatch_release(v27);
  if (v26)
    _Block_release(v26);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  if (v21)
  {
    v28 = v21;
LABEL_39:
    operator delete(v28);
  }
}

void sub_227A96CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c39_ZTSNSt3__16vectorIcNS_9allocatorIcEEEE64c46_ZTSNSt3__18weak_ptrIN5trace13CommandDriverEEE80c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1, _QWORD *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  v5 = (_BYTE *)a2[5];
  v4 = (_BYTE *)a2[6];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    a1[5] = v7;
    a1[6] = v7;
    v8 = &v7[v6];
    a1[7] = &v7[v6];
    memcpy(v7, v5, v6);
    a1[6] = v8;
  }
  v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = (void *)a2[10];
  if (v12)
    v12 = _Block_copy(v12);
  v13 = a2[11];
  a1[10] = v12;
  a1[11] = v13;
  if (v13)
    dispatch_retain(v13);
}

void sub_227A96E38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__16vectorIcNS_9allocatorIcEEEE64c46_ZTSNSt3__18weak_ptrIN5trace13CommandDriverEEE80c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  void *v5;

  v2 = a1[11];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[10];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[9];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  v5 = (void *)a1[5];
  if (v5)
  {
    a1[6] = v5;
    operator delete(v5);
  }
}

void trace::ARICommandDriver::start(trace::ARICommandDriver *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = ___ZN5trace16ARICommandDriver5startEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_23_0;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_72;
  block[4] = (char *)this + 72;
  block[5] = &v4;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

uint64_t ___ZN5trace16ARICommandDriver5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = ice::Client::start(*(ice::Client **)(v1 + 104));
  *(_BYTE *)(v1 + 169) = 1;
  return result;
}

void trace::ARICommandDriver::stop(trace::ARICommandDriver *this, group *a2)
{
  char *gr_name;
  char *v5;
  _QWORD v6[5];
  dispatch_group_t group;
  dispatch_object_t object;

  gr_name = a2->gr_name;
  if (a2->gr_name)
  {
    dispatch_retain((dispatch_object_t)a2->gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 1174405120;
  v6[2] = ___ZN5trace16ARICommandDriver4stopEN8dispatch5groupE_block_invoke;
  v6[3] = &__block_descriptor_tmp_24_0;
  v6[4] = this;
  group = (dispatch_group_t)gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }
  v5 = a2->gr_name;
  object = (dispatch_object_t)v5;
  if (v5)
    dispatch_retain((dispatch_object_t)v5);
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v6);
  if (object)
    dispatch_release(object);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (gr_name)
  {
    dispatch_group_leave((dispatch_group_t)gr_name);
    dispatch_release((dispatch_object_t)gr_name);
  }
}

void ___ZN5trace16ARICommandDriver4stopEN8dispatch5groupE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  ice::Client *v2;
  char *v3;
  group object;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(ice::Client **)(v1 + 104);
  v3 = *(char **)(a1 + 48);
  object.gr_name = v3;
  if (v3)
    dispatch_retain((dispatch_object_t)v3);
  ice::Client::stop(v2, &object);
  if (object.gr_name)
    dispatch_release((dispatch_object_t)object.gr_name);
  *(_BYTE *)(v1 + 169) = 0;
}

void sub_227A970A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;

  v4 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = *(NSObject **)(a1 + 40);
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
    dispatch_retain(v6);
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_release(v4);
  }
}

uint64_t trace::ARICommandDriver::isStarted(trace::ARICommandDriver *this)
{
  NSObject *v1;
  char *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  _QWORD block[6];

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = -86;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK5trace16ARICommandDriver9isStartedEv_block_invoke;
  v5[3] = &unk_24F0333B8;
  v5[4] = &v6;
  v5[5] = this;
  v10 = v5;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_72;
  block[4] = (char *)this + 72;
  block[5] = &v10;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZNK5trace16ARICommandDriver9isStartedEv_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 40) + 169);
  return result;
}

const char *trace::ARICommandDriver::toString(trace::ARICommandDriver *this, unsigned int a2)
{
  if (a2 > 2)
    return "Unknown";
  else
    return off_24F033B70[(__int16)a2];
}

uint64_t ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "trace.drv");
}

uint64_t ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

uint64_t trace::CommandDriver::sendConfig()
{
  return 0;
}

uint64_t trace::CommandDriver::isStarted(trace::CommandDriver *this)
{
  return 0;
}

_QWORD *ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = &unk_24F0335B0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_24F0324E8;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_227A973A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_24F0335B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_24F0335B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

_QWORD *ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = &unk_24F0335B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = &unk_24F0335B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

_QWORD *std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  size_t v14;
  char *v15;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_22;
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0)
LABEL_22:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    result = operator new(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    v12 = a3 - __src;
    if (v12)
      result = memcpy(result, __src, v12);
LABEL_21:
    v7[1] = &v9[v12];
    return result;
  }
  v13 = (_BYTE *)result[1];
  v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    v12 = a3 - __src;
    if (v12)
      result = memmove((void *)*result, __src, v12);
    goto LABEL_21;
  }
  v15 = &__src[v14];
  if (v13 != v9)
  {
    result = memmove((void *)*result, __src, v14);
    v9 = (char *)v7[1];
  }
  if (a3 != v15)
    result = memmove(v9, v15, a3 - v15);
  v7[1] = &v9[a3 - v15];
  return result;
}

void ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_227A9771C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_227A97738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<trace::ARICommandDriver>::shared_ptr[abi:ne180100]<trace::ARICommandDriver,std::shared_ptr<trace::ARICommandDriver> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriver>(trace::ARICommandDriver*)::{lambda(trace::ARICommandDriver*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_24F0335F0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_227A97854(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<trace::ARICommandDriver> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriver>(trace::ARICommandDriver*)::{lambda(trace::ARICommandDriver*)#1}::operator() const(trace::ARICommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_227A97874(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<trace::ARICommandDriver *,std::shared_ptr<trace::ARICommandDriver> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriver>(trace::ARICommandDriver*)::{lambda(trace::ARICommandDriver *)#1},std::allocator<trace::ARICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<trace::ARICommandDriver *,std::shared_ptr<trace::ARICommandDriver> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriver>(trace::ARICommandDriver*)::{lambda(trace::ARICommandDriver *)#1},std::allocator<trace::ARICommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<trace::ARICommandDriver> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriver>(trace::ARICommandDriver*)::{lambda(trace::ARICommandDriver*)#1}::operator() const(trace::ARICommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<trace::ARICommandDriver *,std::shared_ptr<trace::ARICommandDriver> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriver>(trace::ARICommandDriver*)::{lambda(trace::ARICommandDriver *)#1},std::allocator<trace::ARICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5trace13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt"
                     "3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5trace13CommandDriverEE15make_shared_ptrINS1_16ARICommandD"
                                "riverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5trace13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5trace13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<trace::ARICommandDriver> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriver>(trace::ARICommandDriver*)::{lambda(trace::ARICommandDriver*)#1}::operator() const(trace::ARICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvNS_13group_sessionEEEclIJS1_EEEvDpT__block_invoke(uint64_t a1)
{
  dispatch::block<void({block_pointer})(dispatch::group_session)>::operator()<dispatch::group_session const&>((uint64_t *)(a1 + 32), (NSObject **)(a1 + 40));
}

void dispatch::block<void({block_pointer})(dispatch::group_session)>::operator()<dispatch::group_session const&>(uint64_t *a1, NSObject **a2)
{
  uint64_t v2;
  NSObject *v3;
  dispatch_group_t group;

  v2 = *a1;
  v3 = *a2;
  group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  (*(void (**)(uint64_t, dispatch_group_t *))(v2 + 16))(v2, &group);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void sub_227A97A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c61_ZTSN8dispatch5blockIU13block_pointerFvNS_13group_sessionEEEE40c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  NSObject *v6;

  v4 = *(void **)(a2 + 32);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    dispatch_retain(v5);
    v6 = *(NSObject **)(a1 + 40);
    if (v6)
      dispatch_group_enter(v6);
  }
}

void __destroy_helper_block_e8_32c61_ZTSN8dispatch5blockIU13block_pointerFvNS_13group_sessionEEEE40c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;

  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 40);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(const void **)(a1 + 32);
  if (v4)
    _Block_release(v4);
}

void ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_24F033698;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIKN5trace13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIKN5trace13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(const void **)(a1 + 40);
  cf = v1;
  if (v1)
    CFRetain(v1);
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_227A97CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  CFTypeRef result;

  v4 = *(const void **)(a2 + 32);
  if (!v4)
  {
    result = *(CFTypeRef *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = result;
    if (!result)
      return result;
    return CFRetain(result);
  }
  v5 = _Block_copy(v4);
  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    _Block_release(v3);
}

void ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_E3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  int v11;
  NSObject *v12;
  CFTypeRef v13;
  const void *v14;
  CFTypeRef v15;
  void *v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  NSObject *v20;
  int v21;
  char *v22;
  CFTypeRef cf;
  _OWORD v24[4];
  int *v25;
  __int128 __p;
  void (*v27)(uint64_t);
  void *v28;
  void *aBlock;
  CFTypeRef v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = v2[4];
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*v2)
        {
LABEL_45:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v25 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v24[2] = v8;
        v24[3] = v8;
        v24[0] = v8;
        v24[1] = v8;
        AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::ARI_CsiTraceProfileSelectRspCb_SDK((AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *)v24, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        HIBYTE(v27) = 13;
        strcpy((char *)&__p, "disable trace");
        checkError((AriSdk::MsgBase *)v24, (uint64_t)&__p, &cf);
        if (SHIBYTE(v27) < 0)
        {
          operator delete((void *)__p);
          if (cf)
            v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v10 = 0;
          if (v10)
            goto LABEL_23;
        }
        else
        {
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_23;
        }
        v11 = AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::unpack((AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *)v24);
        if (v11 || *v25)
        {
          v12 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            v21 = *v25;
            LODWORD(__p) = 67109376;
            DWORD1(__p) = v11;
            WORD4(__p) = 1024;
            *(_DWORD *)((char *)&__p + 10) = v21;
            _os_log_error_impl(&dword_227A72000, v12, OS_LOG_TYPE_ERROR, "Failed to disable trace: unpackResult = %d result_code_t1 = %d", (uint8_t *)&__p, 0xEu);
          }
          v22 = (char *)operator new(0x19uLL);
          strcpy(v22, "Failed to disable trace");
          CreateError();
          v13 = cf;
          cf = (CFTypeRef)__p;
          *(_QWORD *)&__p = 0;
          if (v13)
          {
            CFRelease(v13);
            if ((_QWORD)__p)
              CFRelease((CFTypeRef)__p);
          }
          operator delete(v22);
        }
        else
        {
          v20 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p) = 0;
            _os_log_impl(&dword_227A72000, v20, OS_LOG_TYPE_DEFAULT, "#I Successfully disabled trace", (uint8_t *)&__p, 2u);
          }
        }
LABEL_23:
        v14 = (const void *)v2[2];
        if (!v14 || !v2[3])
        {
LABEL_42:
          if (cf)
            CFRelease(cf);
          MEMORY[0x22E2A3FC4](v24);
          goto LABEL_45;
        }
        v15 = cf;
        if (cf && (CFRetain(cf), (v14 = (const void *)v2[2]) == 0))
          v16 = 0;
        else
          v16 = _Block_copy(v14);
        v17 = v2[3];
        *(_QWORD *)&__p = MEMORY[0x24BDAC760];
        *((_QWORD *)&__p + 1) = 1174405120;
        v27 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
        v28 = &__block_descriptor_tmp_40;
        if (v16)
        {
          aBlock = _Block_copy(v16);
          v30 = v15;
          if (!v15)
            goto LABEL_34;
        }
        else
        {
          aBlock = 0;
          v30 = v15;
          if (!v15)
          {
LABEL_34:
            dispatch_async(v17, &__p);
            if (v30)
              CFRelease(v30);
            if (aBlock)
              _Block_release(aBlock);
            if (v16)
              _Block_release(v16);
            if (v15)
              CFRelease(v15);
            goto LABEL_42;
          }
        }
        CFRetain(v15);
        goto LABEL_34;
      }
    }
  }
}

void sub_227A980F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c157_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_E3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c157_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_E3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_E3__0NS_9allocatorISD_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F033738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_E3__0NS_9allocatorISD_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F033738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_E3__0NS_9allocatorISD_EEE16__on_zero_sharedEv(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[6];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[5];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_1(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

uint64_t ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb0_E3__1vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  int v11;
  NSObject *v12;
  CFTypeRef v13;
  const void *v14;
  CFTypeRef v15;
  void *v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  NSObject *v20;
  int v21;
  char *v22;
  CFTypeRef cf;
  _OWORD v24[4];
  int *v25;
  void *__p;
  __int128 v27;
  void *v28;
  void *aBlock;
  CFTypeRef v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = v2[4];
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*v2)
        {
LABEL_45:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v25 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v24[2] = v8;
        v24[3] = v8;
        v24[0] = v8;
        v24[1] = v8;
        AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::ARI_CsiTraceProfileSelectRspCb_SDK((AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *)v24, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p = operator new(0x19uLL);
        v27 = xmmword_227B19BA0;
        strcpy((char *)__p, "configure sleep profile");
        checkError((AriSdk::MsgBase *)v24, (uint64_t)&__p, &cf);
        if (SHIBYTE(v27) < 0)
        {
          operator delete(__p);
          if (cf)
            v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v10 = 0;
          if (v10)
            goto LABEL_23;
        }
        else
        {
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_23;
        }
        v11 = AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::unpack((AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *)v24);
        if (v11 || *v25)
        {
          v12 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            v21 = *v25;
            LODWORD(__p) = 67109376;
            HIDWORD(__p) = v11;
            LOWORD(v27) = 1024;
            *(_DWORD *)((char *)&v27 + 2) = v21;
            _os_log_error_impl(&dword_227A72000, v12, OS_LOG_TYPE_ERROR, "Failed to configure sleep profile: unpackResult = %d result_code_t1 = %d", (uint8_t *)&__p, 0xEu);
          }
          v22 = (char *)operator new(0x28uLL);
          strcpy(v22, "Failed to configure sleep profile");
          CreateError();
          v13 = cf;
          cf = __p;
          __p = 0;
          if (v13)
          {
            CFRelease(v13);
            if (__p)
              CFRelease(__p);
          }
          operator delete(v22);
        }
        else
        {
          v20 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p) = 0;
            _os_log_impl(&dword_227A72000, v20, OS_LOG_TYPE_DEFAULT, "#I Successfully configured sleep profile", (uint8_t *)&__p, 2u);
          }
        }
LABEL_23:
        v14 = (const void *)v2[2];
        if (!v14 || !v2[3])
        {
LABEL_42:
          if (cf)
            CFRelease(cf);
          MEMORY[0x22E2A3FC4](v24);
          goto LABEL_45;
        }
        v15 = cf;
        if (cf && (CFRetain(cf), (v14 = (const void *)v2[2]) == 0))
          v16 = 0;
        else
          v16 = _Block_copy(v14);
        v17 = v2[3];
        __p = (void *)MEMORY[0x24BDAC760];
        *(_QWORD *)&v27 = 1174405120;
        *((_QWORD *)&v27 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
        v28 = &__block_descriptor_tmp_40;
        if (v16)
        {
          aBlock = _Block_copy(v16);
          v30 = v15;
          if (!v15)
            goto LABEL_34;
        }
        else
        {
          aBlock = 0;
          v30 = v15;
          if (!v15)
          {
LABEL_34:
            dispatch_async(v17, &__p);
            if (v30)
              CFRelease(v30);
            if (aBlock)
              _Block_release(aBlock);
            if (v16)
              _Block_release(v16);
            if (v15)
              CFRelease(v15);
            goto LABEL_42;
          }
        }
        CFRetain(v15);
        goto LABEL_34;
      }
    }
  }
}

void sub_227A9865C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c159_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb0_E3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c159_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb0_E3__1EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb0_E3__1NS_9allocatorISD_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0337E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb0_E3__1NS_9allocatorISD_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0337E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb0_E3__1NS_9allocatorISD_EEE16__on_zero_sharedEv(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[6];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[5];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_E3__2vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  int v11;
  NSObject *v12;
  CFTypeRef v13;
  const void *v14;
  CFTypeRef v15;
  void *v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  NSObject *v20;
  int v21;
  char *v22;
  CFTypeRef cf;
  _OWORD v24[4];
  int *v25;
  void *__p[4];
  void *aBlock;
  CFTypeRef v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = v2[4];
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*v2)
        {
LABEL_45:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v25 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v24[2] = v8;
        v24[3] = v8;
        v24[0] = v8;
        v24[1] = v8;
        AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::ARI_CsiTraceProfileSelectRspCb_SDK((AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *)v24, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        strcpy((char *)__p, "configure wake profile");
        HIBYTE(__p[2]) = 22;
        checkError((AriSdk::MsgBase *)v24, (uint64_t)__p, &cf);
        if (SHIBYTE(__p[2]) < 0)
        {
          operator delete(__p[0]);
          if (cf)
            v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v10 = 0;
          if (v10)
            goto LABEL_23;
        }
        else
        {
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_23;
        }
        v11 = AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::unpack((AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *)v24);
        if (v11 || *v25)
        {
          v12 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            v21 = *v25;
            LODWORD(__p[0]) = 67109376;
            HIDWORD(__p[0]) = v11;
            LOWORD(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 2) = v21;
            _os_log_error_impl(&dword_227A72000, v12, OS_LOG_TYPE_ERROR, "Failed to configure wake profile: unpackResult = %d result_code_t1 = %d", (uint8_t *)__p, 0xEu);
          }
          v22 = (char *)operator new(0x28uLL);
          strcpy(v22, "Failed to configure wake profile");
          CreateError();
          v13 = cf;
          cf = __p[0];
          __p[0] = 0;
          if (v13)
          {
            CFRelease(v13);
            if (__p[0])
              CFRelease(__p[0]);
          }
          operator delete(v22);
        }
        else
        {
          v20 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl(&dword_227A72000, v20, OS_LOG_TYPE_DEFAULT, "#I Successfully configured wake profile", (uint8_t *)__p, 2u);
          }
        }
LABEL_23:
        v14 = (const void *)v2[2];
        if (!v14 || !v2[3])
        {
LABEL_42:
          if (cf)
            CFRelease(cf);
          MEMORY[0x22E2A3FC4](v24);
          goto LABEL_45;
        }
        v15 = cf;
        if (cf && (CFRetain(cf), (v14 = (const void *)v2[2]) == 0))
          v16 = 0;
        else
          v16 = _Block_copy(v14);
        v17 = v2[3];
        __p[0] = (void *)MEMORY[0x24BDAC760];
        __p[1] = (void *)1174405120;
        __p[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
        __p[3] = &__block_descriptor_tmp_40;
        if (v16)
        {
          aBlock = _Block_copy(v16);
          v28 = v15;
          if (!v15)
            goto LABEL_34;
        }
        else
        {
          aBlock = 0;
          v28 = v15;
          if (!v15)
          {
LABEL_34:
            dispatch_async(v17, __p);
            if (v28)
              CFRelease(v28);
            if (aBlock)
              _Block_release(aBlock);
            if (v16)
              _Block_release(v16);
            if (v15)
              CFRelease(v15);
            goto LABEL_42;
          }
        }
        CFRetain(v15);
        goto LABEL_34;
      }
    }
  }
}

void sub_227A98B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c160_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_E3__2EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c160_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_E3__2EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_E3__2NS_9allocatorISD_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F033860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_E3__2NS_9allocatorISD_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F033860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_E3__2NS_9allocatorISD_EEE16__on_zero_sharedEv(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[6];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[5];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_E3__3vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  int v11;
  NSObject *v12;
  CFTypeRef v13;
  unsigned int v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  CFTypeRef v23;
  xpc_object_t v24;
  const void *v25;
  void *v26;
  NSObject *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  NSObject *v30;
  int v31;
  char *v32;
  CFTypeRef cf;
  _OWORD v34[4];
  __int128 v35;
  __int128 __p;
  void (*v37)(_QWORD *);
  void *v38;
  void *aBlock;
  CFTypeRef v40;
  xpc_object_t object;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = v2[2];
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*v2)
        {
LABEL_65:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v34[3] = v8;
        v35 = v8;
        v34[1] = v8;
        v34[2] = v8;
        v34[0] = v8;
        AriSdk::ARI_CsiXsioGetRspCb_SDK::ARI_CsiXsioGetRspCb_SDK((AriSdk::ARI_CsiXsioGetRspCb_SDK *)v34, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        HIBYTE(v37) = 8;
        strcpy((char *)&__p, "get mode");
        checkError((AriSdk::MsgBase *)v34, (uint64_t)&__p, &cf);
        if (SHIBYTE(v37) < 0)
        {
          operator delete((void *)__p);
          if (cf)
            v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v10 = 0;
          if (v10)
            goto LABEL_23;
        }
        else
        {
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_23;
        }
        v11 = AriSdk::ARI_CsiXsioGetRspCb_SDK::unpack((AriSdk::ARI_CsiXsioGetRspCb_SDK *)v34);
        if (!v11 && !**((_DWORD **)&v35 + 1))
        {
          v14 = *(_DWORD *)v35;
          v30 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(__p) = 67109120;
            DWORD1(__p) = v14;
            _os_log_impl(&dword_227A72000, v30, OS_LOG_TYPE_DEFAULT, "#I Successfully retrieved mode (%d)", (uint8_t *)&__p, 8u);
          }
LABEL_24:
          if (!v2[3] || !v2[4])
          {
LABEL_62:
            if (cf)
              CFRelease(cf);
            MEMORY[0x22E2A32C8](v34);
            goto LABEL_65;
          }
          v15 = xpc_dictionary_create(0, 0, 0);
          if (v15 || (v15 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x22E2A4C30](v15) == MEMORY[0x24BDACFA0])
            {
              xpc_retain(v15);
              v16 = v15;
            }
            else
            {
              v16 = xpc_null_create();
            }
          }
          else
          {
            v16 = xpc_null_create();
            v15 = 0;
          }
          xpc_release(v15);
          v17 = xpc_null_create();
          xpc_release(v17);
          v18 = xpc_int64_create(v14);
          if (v18 || (v18 = xpc_null_create()) != 0)
          {
            xpc_retain(v18);
            v19 = v18;
          }
          else
          {
            v19 = xpc_null_create();
            v18 = 0;
          }
          xpc_dictionary_set_value(v16, "Mode", v19);
          v20 = xpc_null_create();
          xpc_release(v19);
          xpc_release(v20);
          if (v16)
          {
            xpc_retain(v16);
            v21 = v16;
          }
          else
          {
            v21 = xpc_null_create();
          }
          xpc_release(v18);
          xpc_release(v16);
          v22 = xpc_null_create();
          xpc_release(v22);
          v23 = cf;
          if (cf)
            CFRetain(cf);
          if (v21)
          {
            xpc_retain(v21);
            v24 = v21;
            v25 = (const void *)v2[3];
            if (v25)
            {
LABEL_42:
              v26 = _Block_copy(v25);
              goto LABEL_45;
            }
          }
          else
          {
            v24 = xpc_null_create();
            v25 = (const void *)v2[3];
            if (v25)
              goto LABEL_42;
          }
          v26 = 0;
LABEL_45:
          v27 = v2[4];
          *(_QWORD *)&__p = MEMORY[0x24BDAC760];
          *((_QWORD *)&__p + 1) = 1174405120;
          v37 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEclIJS5_S7_EEEvDpT__block_invoke;
          v38 = &__block_descriptor_tmp_56;
          if (v26)
          {
            aBlock = _Block_copy(v26);
            v40 = v23;
            if (!v23)
              goto LABEL_50;
          }
          else
          {
            aBlock = 0;
            v40 = v23;
            if (!v23)
            {
LABEL_50:
              object = v24;
              if (v24)
                xpc_retain(v24);
              else
                object = xpc_null_create();
              dispatch_async(v27, &__p);
              xpc_release(object);
              object = 0;
              if (v40)
                CFRelease(v40);
              if (aBlock)
                _Block_release(aBlock);
              if (v26)
                _Block_release(v26);
              xpc_release(v24);
              if (v23)
                CFRelease(v23);
              xpc_release(v21);
              goto LABEL_62;
            }
          }
          CFRetain(v23);
          goto LABEL_50;
        }
        v12 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          v31 = **((_DWORD **)&v35 + 1);
          LODWORD(__p) = 67109376;
          DWORD1(__p) = v11;
          WORD4(__p) = 1024;
          *(_DWORD *)((char *)&__p + 10) = v31;
          _os_log_error_impl(&dword_227A72000, v12, OS_LOG_TYPE_ERROR, "Failed to retrieve mode: unpackResult = %d result_code_t2 = %d", (uint8_t *)&__p, 0xEu);
        }
        v32 = (char *)operator new(0x19uLL);
        strcpy(v32, "Failed to retrieve mode");
        CreateError();
        v13 = cf;
        cf = (CFTypeRef)__p;
        *(_QWORD *)&__p = 0;
        if (v13)
        {
          CFRelease(v13);
          if ((_QWORD)__p)
            CFRelease((CFTypeRef)__p);
        }
        operator delete(v32);
LABEL_23:
        v14 = 0;
        goto LABEL_24;
      }
    }
  }
}

void sub_227A99240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_227A99310(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  MEMORY[0x22E2A32C8](&a13);
  JUMPOUT(0x227A99334);
}

uint64_t __copy_helper_block_e8_32c164_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_E3__3EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c164_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_E3__3EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_E3__3NS_9allocatorISF_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0338E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_E3__3NS_9allocatorISF_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0338E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_E3__3NS_9allocatorISF_EEE16__on_zero_sharedEv(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[7];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[6];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEclIJS5_S7_EEEvDpT__block_invoke(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  void *v4;
  xpc_object_t object;
  CFTypeRef cf;

  v3 = a1[4];
  v2 = (const void *)a1[5];
  cf = v2;
  if (v2)
    CFRetain(v2);
  v4 = (void *)a1[6];
  object = v4;
  if (v4)
    xpc_retain(v4);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, CFTypeRef *, xpc_object_t *))(v3 + 16))(v3, &cf, &object);
  xpc_release(object);
  object = 0;
  if (cf)
    CFRelease(cf);
}

void sub_227A994F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, CFTypeRef cf)
{
  xpc_release(object);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c87_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c15_ZTSN3xpc4dictE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  const void *v6;
  void *v7;
  xpc_object_t result;

  v4 = (const void *)a2[4];
  if (!v4)
  {
    v6 = (const void *)a2[5];
    a1[4] = 0;
    a1[5] = v6;
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = _Block_copy(v4);
  v6 = (const void *)a2[5];
  a1[4] = v5;
  a1[5] = v6;
  if (v6)
LABEL_5:
    CFRetain(v6);
LABEL_6:
  v7 = (void *)a2[6];
  a1[6] = v7;
  if (v7)
    return xpc_retain(v7);
  result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c87_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  const void *v2;
  const void *v3;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    _Block_release(v3);
}

void ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver12setTraceModeENS2_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb3_E3__4vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  int v11;
  NSObject *v12;
  CFTypeRef v13;
  const void *v14;
  CFTypeRef v15;
  void *v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  NSObject *v20;
  int v21;
  int v22;
  void *v23[3];
  CFTypeRef cf;
  _OWORD v25[4];
  int *v26;
  __int128 __p;
  void (*v28)(uint64_t);
  void *v29;
  void *aBlock;
  CFTypeRef v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD *)(v2 + 32);
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*(_QWORD *)v2)
        {
LABEL_46:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v26 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v25[2] = v8;
        v25[3] = v8;
        v25[0] = v8;
        v25[1] = v8;
        AriSdk::ARI_CsiXsioSetRspCb_SDK::ARI_CsiXsioSetRspCb_SDK((AriSdk::ARI_CsiXsioSetRspCb_SDK *)v25, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        HIBYTE(v28) = 8;
        strcpy((char *)&__p, "set mode");
        checkError((AriSdk::MsgBase *)v25, (uint64_t)&__p, &cf);
        if (SHIBYTE(v28) < 0)
        {
          operator delete((void *)__p);
          if (cf)
            v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v10 = 0;
          if (v10)
            goto LABEL_24;
        }
        else
        {
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_24;
        }
        v11 = AriSdk::ARI_CsiXsioSetRspCb_SDK::unpack((AriSdk::ARI_CsiXsioSetRspCb_SDK *)v25);
        if (v11 || *v26)
        {
          v12 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            v22 = *v26;
            LODWORD(__p) = 67109376;
            DWORD1(__p) = v11;
            WORD4(__p) = 1024;
            *(_DWORD *)((char *)&__p + 10) = v22;
            _os_log_error_impl(&dword_227A72000, v12, OS_LOG_TYPE_ERROR, "Failed to set mode: unpackResult = %d result_code_t1 = %d", (uint8_t *)&__p, 0xEu);
          }
          HIBYTE(v23[2]) = 18;
          strcpy((char *)v23, "Failed to set mode");
          CreateError();
          v13 = cf;
          cf = (CFTypeRef)__p;
          *(_QWORD *)&__p = 0;
          if (v13)
          {
            CFRelease(v13);
            if ((_QWORD)__p)
              CFRelease((CFTypeRef)__p);
          }
          if (SHIBYTE(v23[2]) < 0)
            operator delete(v23[0]);
        }
        else
        {
          v20 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            v21 = *(_DWORD *)(v2 + 40);
            LODWORD(__p) = 67109120;
            DWORD1(__p) = v21;
            _os_log_impl(&dword_227A72000, v20, OS_LOG_TYPE_DEFAULT, "#I Successfully set mode %d", (uint8_t *)&__p, 8u);
          }
        }
LABEL_24:
        v14 = *(const void **)(v2 + 16);
        if (!v14 || !*(_QWORD *)(v2 + 24))
        {
LABEL_43:
          if (cf)
            CFRelease(cf);
          MEMORY[0x22E2A32EC](v25);
          goto LABEL_46;
        }
        v15 = cf;
        if (cf && (CFRetain(cf), (v14 = *(const void **)(v2 + 16)) == 0))
          v16 = 0;
        else
          v16 = _Block_copy(v14);
        v17 = *(NSObject **)(v2 + 24);
        *(_QWORD *)&__p = MEMORY[0x24BDAC760];
        *((_QWORD *)&__p + 1) = 1174405120;
        v28 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
        v29 = &__block_descriptor_tmp_40;
        if (v16)
        {
          aBlock = _Block_copy(v16);
          v31 = v15;
          if (!v15)
            goto LABEL_35;
        }
        else
        {
          aBlock = 0;
          v31 = v15;
          if (!v15)
          {
LABEL_35:
            dispatch_async(v17, &__p);
            if (v31)
              CFRelease(v31);
            if (aBlock)
              _Block_release(aBlock);
            if (v16)
              _Block_release(v16);
            if (v15)
              CFRelease(v15);
            goto LABEL_43;
          }
        }
        CFRetain(v15);
        goto LABEL_35;
      }
    }
  }
}

void sub_227A99960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c163_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver12setTraceModeENS1_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb3_E3__4EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c163_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver12setTraceModeENS1_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb3_E3__4EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver12setTraceModeENS1_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb3_E3__4NS_9allocatorISE_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F033990;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver12setTraceModeENS1_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb3_E3__4NS_9allocatorISE_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F033990;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver12setTraceModeENS1_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb3_E3__4NS_9allocatorISE_EEE16__on_zero_sharedEv(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[6];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[5];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZN3ice6detail12wrapCallbackIZN5trace16ARICommandDriver18profileMaskV1_syncENSt3__16vectorIcNS4_9allocatorIcEEEES8_NS4_8weak_ptrINS2_13CommandDriverEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENSC_5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  int v11;
  NSObject *v12;
  CFTypeRef v13;
  void *v14;
  const void *v15;
  CFTypeRef v16;
  void *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  NSObject *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  char *v30;
  __int128 *v31;
  _OWORD *v32;
  unint64_t v33;
  __int128 v34;
  char v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  void **v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  char *v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char v50;
  void **v51;
  void *v52;
  void *v53;
  __int128 v54;
  CFTypeRef cf;
  _OWORD v56[4];
  int *v57;
  uint8_t buf[4];
  void **v59;
  __int16 v60;
  void *v61;
  void *__p[4];
  void *aBlock;
  CFTypeRef v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = v2[4];
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*v2)
        {
LABEL_47:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v57 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v56[2] = v8;
        v56[3] = v8;
        v56[0] = v8;
        v56[1] = v8;
        AriSdk::ARI_CsiTraceProfileInitRspCb_SDK::ARI_CsiTraceProfileInitRspCb_SDK((AriSdk::ARI_CsiTraceProfileInitRspCb_SDK *)v56, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        HIBYTE(__p[2]) = 18;
        strcpy((char *)__p, "update trace masks");
        checkError((AriSdk::MsgBase *)v56, (uint64_t)__p, &cf);
        if (SHIBYTE(__p[2]) < 0)
        {
          operator delete(__p[0]);
          if (cf)
            v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v10 = 0;
          if (v10)
            goto LABEL_25;
        }
        else
        {
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_25;
        }
        v11 = AriSdk::ARI_CsiTraceProfileInitRspCb_SDK::unpack((AriSdk::ARI_CsiTraceProfileInitRspCb_SDK *)v56);
        if (v11 || *v57)
        {
          v12 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            v26 = *v57;
            LODWORD(__p[0]) = 67109376;
            HIDWORD(__p[0]) = v11;
            LOWORD(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 2) = v26;
            _os_log_error_impl(&dword_227A72000, v12, OS_LOG_TYPE_ERROR, "Failed to update trace masks: unpackResult = %d result_code_t1 = %d", (uint8_t *)__p, 0xEu);
          }
          v53 = operator new(0x20uLL);
          v54 = xmmword_227B19BD0;
          strcpy((char *)v53, "Failed to update trace masks");
          CreateError();
          v13 = cf;
          cf = __p[0];
          __p[0] = 0;
          if (v13)
          {
            CFRelease(v13);
            if (__p[0])
              CFRelease(__p[0]);
          }
          if (SHIBYTE(v54) < 0)
          {
            v14 = v53;
LABEL_24:
            operator delete(v14);
            goto LABEL_25;
          }
          goto LABEL_25;
        }
        v21 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          goto LABEL_25;
        v23 = v2[5];
        v22 = (char *)v2[6];
        v24 = (unint64_t)&v22[-v23];
        if ((unint64_t)&v22[-v23] > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v24 > 0x16)
        {
          v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v24 | 7) != 0x17)
            v27 = v24 | 7;
          v28 = v27 + 1;
          v25 = operator new(v27 + 1);
          __p[1] = &v22[-v23];
          __p[2] = (void *)(v28 | 0x8000000000000000);
          __p[0] = v25;
        }
        else
        {
          HIBYTE(__p[2]) = (_BYTE)v22 - v23;
          v25 = __p;
        }
        if ((char *)v23 == v22)
        {
          v29 = v25;
          goto LABEL_69;
        }
        if (v24 < 0x20 || (unint64_t)v25 - v23 < 0x20)
        {
          v29 = v25;
          v30 = (char *)v23;
        }
        else
        {
          v29 = (char *)v25 + (v24 & 0xFFFFFFFFFFFFFFE0);
          v30 = (char *)(v23 + (v24 & 0xFFFFFFFFFFFFFFE0));
          v31 = (__int128 *)(v23 + 16);
          v32 = v25 + 1;
          v33 = v24 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v34 = *v31;
            *(v32 - 1) = *(v31 - 1);
            *v32 = v34;
            v31 += 2;
            v32 += 2;
            v33 -= 32;
          }
          while (v33);
          if (v24 == (v24 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_69:
            *v29 = 0;
            v37 = v2[8];
            v36 = (char *)v2[9];
            v38 = (unint64_t)&v36[-v37];
            if ((unint64_t)&v36[-v37] > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v39 = SHIBYTE(__p[2]);
            v40 = (void **)__p[0];
            if (v38 > 0x16)
            {
              v42 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v38 | 7) != 0x17)
                v42 = v38 | 7;
              v43 = v42 + 1;
              v41 = operator new(v42 + 1);
              *(_QWORD *)&v54 = &v36[-v37];
              *((_QWORD *)&v54 + 1) = v43 | 0x8000000000000000;
              v53 = v41;
            }
            else
            {
              HIBYTE(v54) = (_BYTE)v36 - v37;
              v41 = &v53;
            }
            if ((char *)v37 == v36)
            {
              v44 = v41;
              goto LABEL_85;
            }
            if (v38 < 0x20 || (unint64_t)v41 - v37 < 0x20)
            {
              v44 = v41;
              v45 = (char *)v37;
            }
            else
            {
              v44 = (char *)v41 + (v38 & 0xFFFFFFFFFFFFFFE0);
              v45 = (char *)(v37 + (v38 & 0xFFFFFFFFFFFFFFE0));
              v46 = (__int128 *)(v37 + 16);
              v47 = v41 + 1;
              v48 = v38 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v49 = *v46;
                *(v47 - 1) = *(v46 - 1);
                *v47 = v49;
                v46 += 2;
                v47 += 2;
                v48 -= 32;
              }
              while (v48);
              if (v38 == (v38 & 0xFFFFFFFFFFFFFFE0))
              {
LABEL_85:
                *v44 = 0;
                v51 = __p;
                if (v39 < 0)
                  v51 = v40;
                v52 = &v53;
                if (v54 < 0)
                  v52 = v53;
                *(_DWORD *)buf = 136315394;
                v59 = v51;
                v60 = 2080;
                v61 = v52;
                _os_log_impl(&dword_227A72000, v21, OS_LOG_TYPE_DEFAULT, "#I Successfully updated trace masks\nActive: %s\nSleep: %s", buf, 0x16u);
                if (SHIBYTE(v54) < 0)
                  operator delete(v53);
                if (SHIBYTE(__p[2]) < 0)
                {
                  v14 = __p[0];
                  goto LABEL_24;
                }
LABEL_25:
                v15 = (const void *)v2[2];
                if (!v15 || !v2[3])
                {
LABEL_44:
                  if (cf)
                    CFRelease(cf);
                  MEMORY[0x22E2A3E14](v56);
                  goto LABEL_47;
                }
                v16 = cf;
                if (cf && (CFRetain(cf), (v15 = (const void *)v2[2]) == 0))
                  v17 = 0;
                else
                  v17 = _Block_copy(v15);
                v18 = v2[3];
                __p[0] = (void *)MEMORY[0x24BDAC760];
                __p[1] = (void *)1174405120;
                __p[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
                __p[3] = &__block_descriptor_tmp_40;
                if (v17)
                {
                  aBlock = _Block_copy(v17);
                  v64 = v16;
                  if (!v16)
                    goto LABEL_36;
                }
                else
                {
                  aBlock = 0;
                  v64 = v16;
                  if (!v16)
                  {
LABEL_36:
                    dispatch_async(v18, __p);
                    if (v64)
                      CFRelease(v64);
                    if (aBlock)
                      _Block_release(aBlock);
                    if (v17)
                      _Block_release(v17);
                    if (v16)
                      CFRelease(v16);
                    goto LABEL_44;
                  }
                }
                CFRetain(v16);
                goto LABEL_36;
              }
            }
            do
            {
              v50 = *v45++;
              *v44++ = v50;
            }
            while (v45 != v36);
            goto LABEL_85;
          }
        }
        do
        {
          v35 = *v30++;
          *v29++ = v35;
        }
        while (v30 != v22);
        goto LABEL_69;
      }
    }
  }
}

void sub_227A9A0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v38;

  if (a35 < 0)
    operator delete(__p);
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A3E14](&a16);
  p_shared_owners = (unint64_t *)&v35->__shared_owners_;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c222_ZTSNSt3__110shared_ptrIZN5trace16ARICommandDriver18profileMaskV1_syncENS_6vectorIcNS_9allocatorIcEEEES6_NS_8weak_ptrINS1_13CommandDriverEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c222_ZTSNSt3__110shared_ptrIZN5trace16ARICommandDriver18profileMaskV1_syncENS_6vectorIcNS_9allocatorIcEEEES6_NS_8weak_ptrINS1_13CommandDriverEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<trace::ARICommandDriver::profileMaskV1_sync(std::vector<char>,std::vector<char>,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<trace::ARICommandDriver::profileMaskV1_sync(std::vector<char>,std::vector<char>,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F033A10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<trace::ARICommandDriver::profileMaskV1_sync(std::vector<char>,std::vector<char>,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<trace::ARICommandDriver::profileMaskV1_sync(std::vector<char>,std::vector<char>,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F033A10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<trace::ARICommandDriver::profileMaskV1_sync(std::vector<char>,std::vector<char>,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<trace::ARICommandDriver::profileMaskV1_sync(std::vector<char>,std::vector<char>,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  const void *v5;
  std::__shared_weak_count *v6;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = a1[6];
  if (v4)
    dispatch_release(v4);
  v5 = (const void *)a1[5];
  if (v5)
    _Block_release(v5);
  v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void ___ZN3ice6detail12wrapCallbackIZN5trace16ARICommandDriver18profileMaskV2_syncENSt3__16vectorIcNS4_9allocatorIcEEEEtNS4_8weak_ptrINS2_13CommandDriverEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENSC_5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  int v11;
  NSObject *v12;
  CFTypeRef v13;
  void *v14;
  const void *v15;
  CFTypeRef v16;
  void *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  NSObject *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  _OWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  __int128 *v32;
  _OWORD *v33;
  unint64_t v34;
  __int128 v35;
  char v36;
  const char *v37;
  void **v38;
  CFTypeRef cf;
  _OWORD v40[4];
  int *v41;
  _BYTE buf[24];
  void *__p[4];
  void *aBlock;
  CFTypeRef v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD *)(v2 + 16);
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*(_QWORD *)v2)
        {
LABEL_47:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v41 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v40[2] = v8;
        v40[3] = v8;
        v40[0] = v8;
        v40[1] = v8;
        AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK::ARI_CsiTraceProfilePacketsRspCb_SDK((AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK *)v40, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        HIBYTE(__p[2]) = 18;
        strcpy((char *)__p, "update trace masks");
        checkError((AriSdk::MsgBase *)v40, (uint64_t)__p, &cf);
        if (SHIBYTE(__p[2]) < 0)
        {
          operator delete(__p[0]);
          if (cf)
            v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v10 = 0;
          if (v10)
            goto LABEL_25;
        }
        else
        {
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_25;
        }
        v11 = AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK::unpack((AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK *)v40);
        if (v11 || *v41)
        {
          v12 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            v27 = *v41;
            LODWORD(__p[0]) = 67109376;
            HIDWORD(__p[0]) = v11;
            LOWORD(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 2) = v27;
            _os_log_error_impl(&dword_227A72000, v12, OS_LOG_TYPE_ERROR, "Failed to update trace masks: unpackResult = %d result_code_t1 = %d", (uint8_t *)__p, 0xEu);
          }
          *(_QWORD *)buf = operator new(0x20uLL);
          *(_OWORD *)&buf[8] = xmmword_227B19BD0;
          strcpy(*(char **)buf, "Failed to update trace masks");
          CreateError();
          v13 = cf;
          cf = __p[0];
          __p[0] = 0;
          if (v13)
          {
            CFRelease(v13);
            if (__p[0])
              CFRelease(__p[0]);
          }
          if ((buf[23] & 0x80000000) != 0)
          {
            v14 = *(void **)buf;
LABEL_24:
            operator delete(v14);
            goto LABEL_25;
          }
          goto LABEL_25;
        }
        v21 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          goto LABEL_25;
        v23 = *(_QWORD *)(v2 + 32);
        v22 = *(char **)(v2 + 40);
        v24 = (unint64_t)&v22[-v23];
        if ((unint64_t)&v22[-v23] >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v25 = *(unsigned __int16 *)(v2 + 24);
        if (v24 > 0x16)
        {
          v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v24 | 7) != 0x17)
            v28 = v24 | 7;
          v29 = v28 + 1;
          v26 = operator new(v28 + 1);
          __p[1] = &v22[-v23];
          __p[2] = (void *)(v29 | 0x8000000000000000);
          __p[0] = v26;
        }
        else
        {
          HIBYTE(__p[2]) = (_BYTE)v22 - v23;
          v26 = __p;
        }
        if ((char *)v23 == v22)
        {
          v30 = v26;
          goto LABEL_69;
        }
        if (v24 < 0x20 || (unint64_t)v26 - v23 < 0x20)
        {
          v30 = v26;
          v31 = (char *)v23;
        }
        else
        {
          v30 = (char *)v26 + (v24 & 0xFFFFFFFFFFFFFFE0);
          v31 = (char *)(v23 + (v24 & 0xFFFFFFFFFFFFFFE0));
          v32 = (__int128 *)(v23 + 16);
          v33 = v26 + 1;
          v34 = v24 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v35 = *v32;
            *(v33 - 1) = *(v32 - 1);
            *v33 = v35;
            v32 += 2;
            v33 += 2;
            v34 -= 32;
          }
          while (v34);
          if (v24 == (v24 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_69:
            *v30 = 0;
            v37 = "Active: ";
            if (!v25)
              v37 = "Sleep: ";
            v38 = __p;
            if (SHIBYTE(__p[2]) < 0)
              v38 = (void **)__p[0];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v37;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v38;
            _os_log_impl(&dword_227A72000, v21, OS_LOG_TYPE_DEFAULT, "#I Successfully updated trace masks\n%s%s", buf, 0x16u);
            if (SHIBYTE(__p[2]) < 0)
            {
              v14 = __p[0];
              goto LABEL_24;
            }
LABEL_25:
            v15 = *(const void **)(v2 + 56);
            if (!v15 || !*(_QWORD *)(v2 + 64))
            {
LABEL_44:
              if (cf)
                CFRelease(cf);
              MEMORY[0x22E2A40A8](v40);
              goto LABEL_47;
            }
            v16 = cf;
            if (cf && (CFRetain(cf), (v15 = *(const void **)(v2 + 56)) == 0))
              v17 = 0;
            else
              v17 = _Block_copy(v15);
            v18 = *(NSObject **)(v2 + 64);
            __p[0] = (void *)MEMORY[0x24BDAC760];
            __p[1] = (void *)1174405120;
            __p[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
            __p[3] = &__block_descriptor_tmp_40;
            if (v17)
            {
              aBlock = _Block_copy(v17);
              v45 = v16;
              if (!v16)
                goto LABEL_36;
            }
            else
            {
              aBlock = 0;
              v45 = v16;
              if (!v16)
              {
LABEL_36:
                dispatch_async(v18, __p);
                if (v45)
                  CFRelease(v45);
                if (aBlock)
                  _Block_release(aBlock);
                if (v17)
                  _Block_release(v17);
                if (v16)
                  CFRelease(v16);
                goto LABEL_44;
              }
            }
            CFRetain(v16);
            goto LABEL_36;
          }
        }
        do
        {
          v36 = *v31++;
          *v30++ = v36;
        }
        while (v31 != v22);
        goto LABEL_69;
      }
    }
  }
}

void sub_227A9A76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v36;

  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A40A8](&a11);
  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
  do
    v36 = __ldaxr(p_shared_owners);
  while (__stlxr(v36 - 1, p_shared_owners));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c220_ZTSNSt3__110shared_ptrIZN5trace16ARICommandDriver18profileMaskV2_syncENS_6vectorIcNS_9allocatorIcEEEEtNS_8weak_ptrINS1_13CommandDriverEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c220_ZTSNSt3__110shared_ptrIZN5trace16ARICommandDriver18profileMaskV2_syncENS_6vectorIcNS_9allocatorIcEEEEtNS_8weak_ptrINS1_13CommandDriverEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<trace::ARICommandDriver::profileMaskV2_sync(std::vector<char>,unsigned short,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<trace::ARICommandDriver::profileMaskV2_sync(std::vector<char>,unsigned short,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F033A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<trace::ARICommandDriver::profileMaskV2_sync(std::vector<char>,unsigned short,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<trace::ARICommandDriver::profileMaskV2_sync(std::vector<char>,unsigned short,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F033A90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<trace::ARICommandDriver::profileMaskV2_sync(std::vector<char>,unsigned short,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<trace::ARICommandDriver::profileMaskV2_sync(std::vector<char>,unsigned short,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  void *v4;
  std::__shared_weak_count *v5;

  v2 = a1[11];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[10];
  if (v3)
    _Block_release(v3);
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver14setTraceParamsERNS2_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__7vEENS6_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  int v11;
  NSObject *v12;
  CFTypeRef v13;
  const void *v14;
  CFTypeRef v15;
  void *v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  NSObject *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char *v25;
  CFTypeRef cf;
  _OWORD v27[4];
  int *v28;
  void *__p;
  _BYTE v30[24];
  void *aBlock;
  CFTypeRef v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD *)(v2 + 32);
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*(_QWORD *)v2)
        {
LABEL_45:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v28 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v27[2] = v8;
        v27[3] = v8;
        v27[0] = v8;
        v27[1] = v8;
        AriSdk::ARI_CsiTraceModeInitRspCb_SDK::ARI_CsiTraceModeInitRspCb_SDK((AriSdk::ARI_CsiTraceModeInitRspCb_SDK *)v27, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p = operator new(0x19uLL);
        *(_OWORD *)v30 = xmmword_227B19BA0;
        strcpy((char *)__p, "update trace parameters");
        checkError((AriSdk::MsgBase *)v27, (uint64_t)&__p, &cf);
        if ((v30[15] & 0x80000000) != 0)
        {
          operator delete(__p);
          if (cf)
            v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v10 = 0;
          if (v10)
            goto LABEL_23;
        }
        else
        {
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_23;
        }
        v11 = AriSdk::ARI_CsiTraceModeInitRspCb_SDK::unpack((AriSdk::ARI_CsiTraceModeInitRspCb_SDK *)v27);
        if (v11 || *v28)
        {
          v12 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            v24 = *v28;
            LODWORD(__p) = 67109376;
            HIDWORD(__p) = v11;
            *(_WORD *)v30 = 1024;
            *(_DWORD *)&v30[2] = v24;
            _os_log_error_impl(&dword_227A72000, v12, OS_LOG_TYPE_ERROR, "Failed to update trace parameters: unpackResult = %d result_code_t1 = %d", (uint8_t *)&__p, 0xEu);
          }
          v25 = (char *)operator new(0x20uLL);
          strcpy(v25, "Failed to update watermarks");
          CreateError();
          v13 = cf;
          cf = __p;
          __p = 0;
          if (v13)
          {
            CFRelease(v13);
            if (__p)
              CFRelease(__p);
          }
          operator delete(v25);
        }
        else
        {
          v20 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            v21 = *(unsigned __int8 *)(v2 + 41);
            v22 = *(_DWORD *)(v2 + 44);
            v23 = *(_DWORD *)(v2 + 48);
            __p = (void *)__PAIR64__(*(unsigned __int8 *)(v2 + 40), 67109888);
            *(_WORD *)v30 = 1024;
            *(_DWORD *)&v30[2] = v21;
            *(_WORD *)&v30[6] = 1024;
            *(_DWORD *)&v30[8] = v22;
            *(_WORD *)&v30[12] = 1024;
            *(_DWORD *)&v30[14] = v23;
            _os_log_impl(&dword_227A72000, v20, OS_LOG_TYPE_DEFAULT, "#I Successfully updated trace parameters to Enabled: %d, BackgroundMode: %d, Watermarks: %d, %d", (uint8_t *)&__p, 0x1Au);
          }
        }
LABEL_23:
        v14 = *(const void **)(v2 + 16);
        if (!v14 || !*(_QWORD *)(v2 + 24))
        {
LABEL_42:
          if (cf)
            CFRelease(cf);
          MEMORY[0x22E2A39A0](v27);
          goto LABEL_45;
        }
        v15 = cf;
        if (cf && (CFRetain(cf), (v14 = *(const void **)(v2 + 16)) == 0))
          v16 = 0;
        else
          v16 = _Block_copy(v14);
        v17 = *(NSObject **)(v2 + 24);
        __p = (void *)MEMORY[0x24BDAC760];
        *(_QWORD *)v30 = 1174405120;
        *(_QWORD *)&v30[8] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
        *(_QWORD *)&v30[16] = &__block_descriptor_tmp_40;
        if (v16)
        {
          aBlock = _Block_copy(v16);
          v32 = v15;
          if (!v15)
            goto LABEL_34;
        }
        else
        {
          aBlock = 0;
          v32 = v15;
          if (!v15)
          {
LABEL_34:
            dispatch_async(v17, &__p);
            if (v32)
              CFRelease(v32);
            if (aBlock)
              _Block_release(aBlock);
            if (v16)
              _Block_release(v16);
            if (v15)
              CFRelease(v15);
            goto LABEL_42;
          }
        }
        CFRetain(v15);
        goto LABEL_34;
      }
    }
  }
}

void sub_227A9ACF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c174_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver14setTraceParamsERNS1_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__7EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c174_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver14setTraceParamsERNS1_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__7EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver14setTraceParamsERNS1_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__7NS_9allocatorISF_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F033B10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver14setTraceParamsERNS1_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__7NS_9allocatorISF_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F033B10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver14setTraceParamsERNS1_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__7NS_9allocatorISF_EEE16__on_zero_sharedEv(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[6];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[5];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void cpms::ARICommandDriver::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  cpms::CommandDriver *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  _QWORD v16[5];

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = (cpms::CommandDriver *)operator new(0x60uLL);
  v5 = (uint64_t)v4;
  v6 = (std::__shared_weak_count *)a1[1];
  v14 = *a1;
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  cpms::ARICommandDriver::ARICommandDriver(v4, (uint64_t)&v14);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<cpms::ARICommandDriver>::shared_ptr[abi:ne180100]<cpms::ARICommandDriver,std::shared_ptr<cpms::ARICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::ARICommandDriver>(cpms::ARICommandDriver*)::{lambda(cpms::ARICommandDriver*)#1},void>(a2, v5);
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *a2;
  v13 = (uint64_t *)(*a2 + 8);
  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 0x40000000;
  v16[2] = ___ZN4cpms16ARICommandDriver4initEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_2;
  v16[4] = v12;
  ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped(v13, (uint64_t)v16);
}

void sub_227A9AFD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_227A9AFE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void cpms::ARICommandDriver::init(cpms::ARICommandDriver *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x24BDAC760];
  v1[1] = 0x40000000;
  v1[2] = ___ZN4cpms16ARICommandDriver4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_2;
  v1[4] = this;
  ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

cpms::CommandDriver *cpms::ARICommandDriver::ARICommandDriver(cpms::CommandDriver *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  NSObject *v8;
  NSObject *object;
  std::__shared_weak_count *v11;

  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  cpms::CommandDriver::CommandDriver();
  if (v11)
  {
    v6 = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_QWORD *)a1 = &off_24F033B98;
  v8 = *((_QWORD *)a1 + 3);
  object = v8;
  if (v8)
    dispatch_retain(v8);
  cpms::CommandDriver::getName(a1);
  ice::Client::create();
  if (object)
    dispatch_release(object);
  *((_QWORD *)a1 + 10) = 0;
  *((_QWORD *)a1 + 11) = 0;
  return a1;
}

void sub_227A9B12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_227A9B140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  cpms::CommandDriver *v10;

  if (object)
    dispatch_release(object);
  cpms::CommandDriver::~CommandDriver(v10);
  _Unwind_Resume(a1);
}

void cpms::CommandDriver::~CommandDriver(cpms::CommandDriver *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  *(_QWORD *)this = &unk_24F033CC8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    MEMORY[0x22E2A2D7C]((char *)this + 40);
    v5 = *((_QWORD *)this + 4);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  MEMORY[0x22E2A2D7C]((char *)this + 40);
  v5 = *((_QWORD *)this + 4);
  if (v5)
LABEL_6:
    dispatch_release(v5);
LABEL_7:
  v6 = *((_QWORD *)this + 3);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void cpms::ARICommandDriver::~ARICommandDriver(cpms::ARICommandDriver *this)
{
  char *v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint8_t v15[16];

  *(_QWORD *)this = &off_24F033B98;
  v2 = (char *)this + 40;
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_227A72000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone!", v15, 2u);
  }
  v4 = *((_QWORD *)this + 11);
  if (v4)
    dispatch_release(v4);
  v5 = (const void *)*((_QWORD *)this + 10);
  if (v5)
    _Block_release(v5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)this = &unk_24F033CC8;
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  MEMORY[0x22E2A2D7C](v2);
  v12 = *((_QWORD *)this + 4);
  if (v12)
    dispatch_release(v12);
  v13 = *((_QWORD *)this + 3);
  if (v13)
    dispatch_release(v13);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
}

{
  void *v1;

  cpms::ARICommandDriver::~ARICommandDriver(this);
  operator delete(v1);
}

uint64_t ___ZN4cpms16ARICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  void *v5;
  unint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  void *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  void *aBlock;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  void *v32;
  void **v33;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v23) = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", (uint8_t *)&v23, 2u);
  }
  v3 = (std::__shared_weak_count *)operator new(0x20uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_24F033DA8;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)v1;
  v5 = (void *)MEMORY[0x24BDAC760];
  v23 = (void *)MEMORY[0x24BDAC760];
  v24 = 1174405120;
  v25 = ___ZN3ice6detail17wrapEventCallbackIZZN4cpms16ARICommandDriver4initEvEUb_E3__0vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke;
  v26 = &__block_descriptor_tmp_1;
  v27 = v3 + 1;
  v28 = v3;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  aBlock = v5;
  v30 = 0x40000000;
  v31 = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_1;
  v32 = &unk_24F033DF0;
  v33 = &v23;
  v7 = _Block_copy(&aBlock);
  v8 = v28;
  if (v28)
  {
    v9 = (unint64_t *)&v28->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    if (v7)
    {
LABEL_13:
      v12 = _Block_copy(v7);
      goto LABEL_16;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v7)
      goto LABEL_13;
  }
  v12 = 0;
LABEL_16:
  v23 = v12;
  ice::Client::regEventHandlerInternal();
  if (v23)
    _Block_release(v23);
  if (v7)
    _Block_release(v7);
  v13 = (std::__shared_weak_count *)operator new(0x20uLL);
  v13->__shared_owners_ = 0;
  v14 = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_24F033E50;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v1;
  v23 = v5;
  v24 = 1174405120;
  v25 = ___ZN3ice6detail17wrapEventCallbackIZZN4cpms16ARICommandDriver4initEvEUb_E3__1vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke;
  v26 = &__block_descriptor_tmp_4_0;
  v27 = v13 + 1;
  v28 = v13;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  aBlock = v5;
  v30 = 0x40000000;
  v31 = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_1;
  v32 = &unk_24F033DF0;
  v33 = &v23;
  v16 = _Block_copy(&aBlock);
  v17 = v28;
  if (v28)
  {
    v18 = (unint64_t *)&v28->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  do
    v20 = __ldaxr(v14);
  while (__stlxr(v20 - 1, v14));
  if (v20)
  {
    if (v16)
    {
LABEL_30:
      v21 = _Block_copy(v16);
      goto LABEL_33;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v16)
      goto LABEL_30;
  }
  v21 = 0;
LABEL_33:
  v23 = v21;
  ice::Client::regEventHandlerInternal();
  if (v23)
    _Block_release(v23);
  if (v16)
    _Block_release(v16);
  return ice::Client::start(*(ice::Client **)(v1 + 64));
}

void sub_227A9B67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  const void *v9;

  if (aBlock)
    _Block_release(aBlock);
  if (v9)
    _Block_release(v9);
  _Unwind_Resume(exception_object);
}

void cpms::ARICommandDriver::sendPowerBudget(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  dispatch_object_t *v10;
  dispatch_object_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  NSObject *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  void *aBlock[2];
  dispatch_object_t object[2];
  __int128 v28;

  aBlock[0] = a1;
  v6 = *(void **)a3;
  if (*(_QWORD *)a3)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a3 + 8);
  aBlock[1] = v6;
  object[0] = v7;
  if (v7)
    dispatch_retain(v7);
  v8 = *(_QWORD *)(a2 + 8);
  object[1] = *(dispatch_object_t *)a2;
  *(_QWORD *)&v28 = v8;
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *((_QWORD *)&v28 + 1) = v9;
  v10 = (dispatch_object_t *)(v8 + 16);
  if (v9)
    v11 = v10;
  else
    v11 = &object[1];
  *v11 = (dispatch_object_t)&v28;
  *(_QWORD *)a2 = a2 + 8;
  v12 = (std::__shared_weak_count *)a1[2];
  if (!v12 || (v13 = a1[1], (v14 = std::__shared_weak_count::lock(v12)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v15 = v14;
  v16 = (char *)operator new(0x30uLL);
  v17 = v16;
  v18 = v16 + 24;
  v19 = *(_OWORD *)object;
  *(_OWORD *)v16 = *(_OWORD *)aBlock;
  *((_OWORD *)v16 + 1) = v19;
  v20 = v28;
  *((_QWORD *)v16 + 4) = v28;
  v28 = 0u;
  *((_QWORD *)v16 + 5) = *((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
    v18 = (_QWORD *)(v20 + 16);
  *v18 = v16 + 32;
  object[1] = (dispatch_object_t)&v28;
  v21 = a1[3];
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v23 = __ldxr(p_shared_owners);
  while (__stxr(v23 + 1, p_shared_owners));
  v24 = operator new(0x18uLL);
  *v24 = v17;
  v24[1] = v13;
  v24[2] = v15;
  dispatch_async_f(v21, v24, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&object[1], (_QWORD *)v28);
  v28 = 0uLL;
  object[1] = (dispatch_object_t)&v28;
}

void cpms::ARICommandDriver::registerPowerBudgetIndication(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *v21;
  NSObject *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (v5 = a1[1], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = *(const void **)a2;
    if (*(_QWORD *)a2)
      goto LABEL_9;
LABEL_12:
    v13 = 0;
    v14 = *(NSObject **)(a2 + 8);
    if (!v14)
      goto LABEL_14;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  v12 = *(const void **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_12;
LABEL_9:
  v13 = _Block_copy(v12);
  v14 = *(NSObject **)(a2 + 8);
  if (v14)
  {
LABEL_13:
    dispatch_retain(v14);
    goto LABEL_14;
  }
  do
LABEL_14:
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = (std::__shared_weak_count *)a1[2];
  if (!v16 || (v17 = a1[1], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  v20 = operator new(0x28uLL);
  *v20 = a1;
  v20[1] = v13;
  v20[2] = v14;
  v20[3] = v5;
  v20[4] = v7;
  v21 = (unint64_t *)&v19->__shared_owners_;
  v22 = a1[3];
  do
    v23 = __ldxr(v21);
  while (__stxr(v23 + 1, v21));
  v24 = operator new(0x18uLL);
  *v24 = v20;
  v24[1] = v17;
  v24[2] = v19;
  dispatch_async_f(v22, v24, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::ARICommandDriver::registerPowerBudgetIndication(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>(cpms::ARICommandDriver::registerPowerBudgetIndication(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::ARICommandDriver::registerPowerBudgetIndication(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0,dispatch_queue_s *::default_delete<cpms::ARICommandDriver::registerPowerBudgetIndication(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v25 = __ldaxr(v21);
  while (__stlxr(v25 - 1, v21));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void cpms::ARICommandDriver::getCurrentPower(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  unint64_t *v20;
  NSObject *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (v5 = a1[1], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  if (!*(_QWORD *)a2)
  {
    v13 = 0;
    v14 = *(NSObject **)(a2 + 8);
    if (!v14)
      goto LABEL_13;
    goto LABEL_12;
  }
  v13 = _Block_copy(*(const void **)a2);
  v14 = *(NSObject **)(a2 + 8);
  if (v14)
LABEL_12:
    dispatch_retain(v14);
LABEL_13:
  v15 = (std::__shared_weak_count *)a1[2];
  if (!v15 || (v16 = a1[1], (v17 = std::__shared_weak_count::lock(v15)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v18 = v17;
  v19 = operator new(0x28uLL);
  *v19 = a1;
  v19[1] = v5;
  v19[2] = v7;
  v19[3] = v13;
  v19[4] = v14;
  v20 = (unint64_t *)&v18->__shared_owners_;
  v21 = a1[3];
  do
    v22 = __ldxr(v20);
  while (__stxr(v22 + 1, v20));
  v23 = operator new(0x18uLL);
  *v23 = v19;
  v23[1] = v16;
  v23[2] = v18;
  dispatch_async_f(v21, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>(cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0,dispatch_queue_s *::default_delete<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v24 = __ldaxr(v20);
  while (__stlxr(v24 - 1, v20));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void cpms::ARICommandDriver::enablePowerBudgetIndication(cpms::ARICommandDriver *this, char a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _DWORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v4 || (v7 = *((_QWORD *)this + 1), (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = operator new(0x10uLL);
  *(_BYTE *)v10 = a2;
  v10[1] = a3;
  *((_QWORD *)v10 + 1) = this;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = *((_QWORD *)this + 3);
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::ARICommandDriver::enablePowerBudgetIndication(BOOL,unsigned int)::$_0>(cpms::ARICommandDriver::enablePowerBudgetIndication(BOOL,unsigned int)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::ARICommandDriver::enablePowerBudgetIndication(BOOL,unsigned int)::$_0,dispatch_queue_s *::default_delete<cpms::ARICommandDriver::enablePowerBudgetIndication(BOOL,unsigned int)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void cpms::ARICommandDriver::queryThermalID(uint64_t a1)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    v2 = 136315138;
    v3 = "virtual void cpms::ARICommandDriver::queryThermalID(QueryThermalIDCallback)";
    _os_log_error_impl(&dword_227A72000, v1, OS_LOG_TYPE_ERROR, "%s is not implemented!", (uint8_t *)&v2, 0xCu);
  }
}

void cpms::ARICommandDriver::setThermalReportFrequency(uint64_t a1)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    v2 = 136315138;
    v3 = "virtual void cpms::ARICommandDriver::setThermalReportFrequency(ThermalReportVersion, uint32_t, ThermalDataBlock"
         ", utils::Callback)";
    _os_log_error_impl(&dword_227A72000, v1, OS_LOG_TYPE_ERROR, "%s is not implemented!", (uint8_t *)&v2, 0xCu);
  }
}

void cpms::ARICommandDriver::getPowerMitigation(uint64_t a1)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    v2 = 136315138;
    v3 = "virtual void cpms::ARICommandDriver::getPowerMitigation(QueryPwrMitigationCallback)";
    _os_log_error_impl(&dword_227A72000, v1, OS_LOG_TYPE_ERROR, "%s is not implemented!", (uint8_t *)&v2, 0xCu);
  }
}

_QWORD *std::shared_ptr<cpms::ARICommandDriver>::shared_ptr[abi:ne180100]<cpms::ARICommandDriver,std::shared_ptr<cpms::ARICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::ARICommandDriver>(cpms::ARICommandDriver*)::{lambda(cpms::ARICommandDriver*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_24F033D28;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_227A9BFBC(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<cpms::ARICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::ARICommandDriver>(cpms::ARICommandDriver*)::{lambda(cpms::ARICommandDriver*)#1}::operator() const(cpms::ARICommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_227A9BFDC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<cpms::ARICommandDriver *,std::shared_ptr<cpms::ARICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::ARICommandDriver>(cpms::ARICommandDriver*)::{lambda(cpms::ARICommandDriver *)#1},std::allocator<cpms::ARICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<cpms::ARICommandDriver *,std::shared_ptr<cpms::ARICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::ARICommandDriver>(cpms::ARICommandDriver*)::{lambda(cpms::ARICommandDriver *)#1},std::allocator<cpms::ARICommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<cpms::ARICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::ARICommandDriver>(cpms::ARICommandDriver*)::{lambda(cpms::ARICommandDriver*)#1}::operator() const(cpms::ARICommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<cpms::ARICommandDriver *,std::shared_ptr<cpms::ARICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::ARICommandDriver>(cpms::ARICommandDriver*)::{lambda(cpms::ARICommandDriver *)#1},std::allocator<cpms::ARICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3"
                     "__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15make_shared_ptrINS1_16ARICommandDr"
                                "iverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<cpms::ARICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::ARICommandDriver>(cpms::ARICommandDriver*)::{lambda(cpms::ARICommandDriver*)#1}::operator() const(cpms::ARICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void ___ZN3ice6detail17wrapEventCallbackIZZN4cpms16ARICommandDriver4initEvEUb_E3__0vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(NSObject **)(*(_QWORD *)v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v3 = 0;
      _os_log_debug_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEBUG, "#D Started", v3, 2u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c68_ZTSNSt3__110shared_ptrIZZN4cpms16ARICommandDriver4initEvEUb_E3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c68_ZTSNSt3__110shared_ptrIZZN4cpms16ARICommandDriver4initEvEUb_E3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN4cpms16ARICommandDriver4initEvEUb_E3__0NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F033DA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN4cpms16ARICommandDriver4initEvEUb_E3__0NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F033DA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_1(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

void ___ZN3ice6detail17wrapEventCallbackIZZN4cpms16ARICommandDriver4initEvEUb_E3__1vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(NSObject **)(*(_QWORD *)v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v3 = 0;
      _os_log_debug_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEBUG, "#D Stopped", v3, 2u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c68_ZTSNSt3__110shared_ptrIZZN4cpms16ARICommandDriver4initEvEUb_E3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c68_ZTSNSt3__110shared_ptrIZZN4cpms16ARICommandDriver4initEvEUb_E3__1EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN4cpms16ARICommandDriver4initEvEUb_E3__1NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F033E50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN4cpms16ARICommandDriver4initEvEUb_E3__1NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F033E50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_24F033E98;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4cpms13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4cpms13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  __int128 v3;
  _DWORD *v4;
  void *v5;
  _DWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  const char *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  const void *v21;
  void *v22;
  NSObject *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  NSObject *v41;
  const void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  int v48;
  char v49;
  int v50;
  uint64_t v51;
  _OWORD v52[4];
  void *__p[2];
  _OWORD v54[2];
  _BYTE v55[24];
  std::__shared_weak_count_vtbl *v56;
  dispatch_object_t v57;
  const void *v58;
  __int128 v59;
  __int128 v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t aBlock;
  uint64_t v64;
  uint64_t (*v65)(uint64_t);
  void *v66;
  __int128 *v67;
  _BYTE v68[24];
  _BYTE *v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = **a1;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v54[0] = v3;
  v54[1] = v3;
  v52[3] = v3;
  *(_OWORD *)__p = v3;
  v52[1] = v3;
  v52[2] = v3;
  v52[0] = v3;
  AriSdk::ARI_CsiIceCltmReq_SDK::ARI_CsiIceCltmReq_SDK((AriSdk::ARI_CsiIceCltmReq_SDK *)v52);
  v4 = operator new(4uLL);
  *v4 = 0x7FFF;
  v5 = __p[0];
  __p[0] = v4;
  if (v5)
    operator delete(v5);
  v6 = operator new(4uLL);
  *v6 = 0x7FFF;
  v7 = __p[1];
  __p[1] = v6;
  if (v7)
    operator delete(v7);
  v51 = 0;
  v50 = 0;
  v69 = 0;
  v8 = operator new(0x20uLL);
  *v8 = off_24F033ED8;
  v8[1] = &v51;
  v8[2] = v52;
  v8[3] = &v50;
  v69 = v8;
  v9 = (uint64_t *)v1[3];
  v10 = v1 + 4;
  if (v9 != v1 + 4)
  {
    do
    {
      if (!v69)
        std::__throw_bad_function_call[abi:ne180100]();
      if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v69 + 48))(v69, (uint64_t)v9 + 28, v9 + 4))break;
      v12 = (uint64_t *)v9[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)v9[2];
          v14 = *v13 == (_QWORD)v9;
          v9 = v13;
        }
        while (!v14);
      }
      v9 = v13;
    }
    while (v13 != v10);
    v8 = v69;
    if (v69 == v68)
    {
      v15 = 4;
      v8 = v68;
      goto LABEL_20;
    }
    if (!v69)
      goto LABEL_21;
  }
  v15 = 5;
LABEL_20:
  (*(void (**)(void))(*v8 + 8 * v15))();
LABEL_21:
  if (v50 <= 4)
  {
    v16 = 0;
    do
    {
      v51 = 0;
      AriSdk::TlvArray<IBI_CPMS_POWER_BUDGET,5ul>::emplace_back<IBI_CPMS_POWER_BUDGET&>((char **)v54 + 1, 0, v11);
      ++v16;
    }
    while (v16 < 5 - v50);
  }
  v17 = *(_QWORD *)(v2 + 64);
  v18 = *(std::__shared_weak_count **)(v2 + 72);
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v21 = (const void *)v1[1];
  v46 = v18;
  if (v21)
  {
    v22 = _Block_copy(v21);
    v23 = v1[2];
    if (!v23)
      goto LABEL_30;
    goto LABEL_29;
  }
  v22 = 0;
  v23 = v1[2];
  if (v23)
LABEL_29:
    dispatch_retain(v23);
LABEL_30:
  strcpy(v55, "Send power budget");
  *(_DWORD *)&v55[18] = v48;
  v55[22] = v49;
  v55[23] = 17;
  if (!v22)
  {
    v24 = 0;
    v56 = 0;
    v57 = v23;
    if (!v23)
      goto LABEL_33;
    goto LABEL_32;
  }
  v24 = (std::__shared_weak_count_vtbl *)_Block_copy(v22);
  v56 = v24;
  v57 = v23;
  if (v23)
LABEL_32:
    dispatch_retain(v23);
LABEL_33:
  v25 = (std::__shared_weak_count *)operator new(0x40uLL);
  v25->__shared_owners_ = 0;
  v26 = (unint64_t *)&v25->__shared_owners_;
  v25->__shared_weak_owners_ = 0;
  v25->__vftable = (std::__shared_weak_count_vtbl *)off_24F033F98;
  v25[1].std::__shared_count = *(std::__shared_count *)v55;
  *(_QWORD *)v55 = 0;
  *(_QWORD *)&v55[8] = 0;
  v25[1].__shared_weak_owners_ = *(_QWORD *)&v55[16];
  v25[2].__vftable = v24;
  v25[2].__shared_owners_ = (uint64_t)v23;
  v56 = 0;
  v57 = 0;
  *(_QWORD *)&v55[16] = 0;
  v27 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v59 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v59 + 1) = 1174405120;
  *(_QWORD *)&v60 = ___ZN3ice6detail12wrapCallbackIZN5utils7sendMsgIN6AriSdk23ARI_CsiIceCltmRspCb_SDKEEEvNSt3__110shared_ptrINS_6ClientEEERNS4_7MsgBaseENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_vEENSI_5blockIU13block_pointerFiPhjEEENS6_17integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v60 + 1) = &__block_descriptor_tmp_11_1;
  v61 = (unint64_t)&v25[1];
  v62 = v25;
  do
    v28 = __ldxr(v26);
  while (__stxr(v28 + 1, v26));
  aBlock = v27;
  v64 = 0x40000000;
  v65 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_2;
  v66 = &unk_24F033FE0;
  v67 = &v59;
  v29 = _Block_copy(&aBlock);
  v30 = v62;
  if (v62)
  {
    v31 = (unint64_t *)&v62->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  do
    v33 = __ldaxr(v26);
  while (__stlxr(v33 - 1, v26));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  *(_QWORD *)&v34 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v34 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v59 = v34;
  v60 = v34;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v35 = *(std::__shared_weak_count **)(v17 + 16);
  aBlock = *(_QWORD *)(v17 + 8);
  if (!v35)
  {
    v64 = 0;
LABEL_83:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v64 = (uint64_t)std::__shared_weak_count::lock(v35);
  if (!v64)
    goto LABEL_83;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v36 = (std::__shared_weak_count *)v64;
  if (v64)
  {
    v37 = (unint64_t *)(v64 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v58 = v29;
  ice::SendMsgBaseProxy::callback();
  if (v58)
    _Block_release(v58);
  MEMORY[0x22E2A2FF8](&v59);
  if (v57)
    dispatch_release(v57);
  if (v56)
    _Block_release(v56);
  if ((v55[23] & 0x80000000) != 0)
    operator delete(*(void **)v55);
  if (v23)
    dispatch_release(v23);
  if (v22)
    _Block_release(v22);
  if (v46)
  {
    v39 = (unint64_t *)&v46->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  MEMORY[0x22E2A3160](v52);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(v1 + 3), (_QWORD *)v1[4]);
  v1[4] = 0;
  v1[5] = 0;
  v1[3] = (uint64_t)v10;
  v41 = v1[2];
  if (v41)
    dispatch_release(v41);
  v42 = (const void *)v1[1];
  if (v42)
    _Block_release(v42);
  operator delete(v1);
  v43 = (std::__shared_weak_count *)a1[2];
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  operator delete(a1);
}

void sub_227A9CA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AriSdk::TlvArray<IBI_CPMS_POWER_BUDGET,5ul>::emplace_back<IBI_CPMS_POWER_BUDGET&>(char **a1, uint64_t a2, const char *a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v8;
  char *v9;
  const char *v10;
  void *p_p;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  void *__p;
  char v31;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  if ((unint64_t)v5 >= 0x28)
  {
    AriOsa::LogSrcInfo((AriOsa *)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "emplace_back", a3);
    if (v31 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array is full, cannot add new values", v10, p_p, 371);
    if (v31 < 0)
      operator delete(__p);
  }
  else
  {
    v8 = (unint64_t)a1[2];
    if ((unint64_t)v3 >= v8)
    {
      v12 = v5 >> 3;
      v13 = v8 - (_QWORD)v4;
      if (v13 >> 2 <= (unint64_t)((v5 >> 3) + 1))
        v14 = v12 + 1;
      else
        v14 = v13 >> 2;
      v15 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8;
      v16 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v15)
        v16 = v14;
      if (v16 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = 8 * v16;
      v18 = operator new(8 * v16);
      v19 = &v18[8 * v12];
      v20 = &v18[v17];
      *(_QWORD *)v19 = a2;
      v9 = v19 + 8;
      if (v3 != v4)
      {
        v21 = v3 - v4 - 8;
        if (v21 < 0x58)
          goto LABEL_30;
        if ((unint64_t)(&v3[-(v5 & 0xFFFFFFFFFFFFFFF8)] - v18) < 0x20)
          goto LABEL_30;
        v22 = (v21 >> 3) + 1;
        v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        v24 = &v3[-v23];
        v19 -= v23;
        v25 = &v18[8 * v12 - 16];
        v26 = v3 - 16;
        v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v3 = v24;
        if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_30:
          do
          {
            v29 = *((_QWORD *)v3 - 1);
            v3 -= 8;
            *((_QWORD *)v19 - 1) = v29;
            v19 -= 8;
          }
          while (v3 != v4);
        }
        v3 = v4;
      }
      *a1 = v19;
      a1[1] = v9;
      a1[2] = v20;
      if (v3)
        operator delete(v3);
    }
    else
    {
      *(_QWORD *)v3 = a2;
      v9 = v3 + 8;
    }
    a1[1] = v9;
  }
}

void sub_227A9CDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_24F033ED8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_24F033ED8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::operator()(uint64_t a1, _BYTE *a2, const char *a3)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  if (a3[4])
  {
    v4 = *(_DWORD *)a3;
    v5 = *a2;
    if (v5 == 2)
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = 3;
      goto LABEL_8;
    }
    if (v5 == 1)
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = 2;
      goto LABEL_8;
    }
    if (!*a2)
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = 1;
LABEL_8:
      *(_DWORD *)v6 = v7;
      *(_DWORD *)(v6 + 4) = v4;
      AriSdk::TlvArray<IBI_CPMS_POWER_BUDGET,5ul>::emplace_back<IBI_CPMS_POWER_BUDGET&>((char **)(*(_QWORD *)(a1 + 16) + 88), *(_QWORD *)v6, a3);
      ++**(_DWORD **)(a1 + 24);
    }
  }
  return 1;
}

uint64_t std::__function::__func<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cpms16ARICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_pointerFvN3ctu"
                     "2cf11CFSharedRefI9__CFErrorEEEEEENK3$_0clEvEUlRKN3abm28BasebandCPMSPowerBudgetScaleERKNSt3__18optionalIjEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cpms16ARICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_poi"
                                "nterFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3$_0clEvEUlRKN3abm28BasebandCPMSPowerBudge"
                                "tScaleERKNSt3__18optionalIjEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cpms16ARICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3$_0clEvEUlRKN3abm28BasebandCPMSPowerBudgetScaleERKNSt3__18optionalIjEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cpms16ARICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3$_0clEvEUlRKN3abm28BasebandCPMSPowerBudgetScaleERKNSt3__18optionalIjEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target_type()
{
}

uint64_t utils::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 32);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    _Block_release(v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t ___ZN3ice6detail12wrapCallbackIZN5utils7sendMsgIN6AriSdk23ARI_CsiIceCltmRspCb_SDKEEEvNSt3__110shared_ptrINS_6ClientEEERNS4_7MsgBaseENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_vEENSI_5blockIU13block_pointerFiPhjEEENS6_17integral_constantIiLi2EEEOT__block_invoke(uint64_t result, const unsigned __int8 *a2)
{
  uint64_t v2;
  __int128 v3;
  CFTypeRef v4;
  const void *v5;
  void *v6;
  NSObject *v7;
  CFTypeRef cf;
  _OWORD v9[4];
  unint64_t v10;
  _QWORD block[4];
  void *v12;
  CFTypeRef v13;

  v2 = *(_QWORD *)(result + 32);
  if (v2)
  {
    v10 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v9[2] = v3;
    v9[3] = v3;
    v9[0] = v3;
    v9[1] = v3;
    AriSdk::ARI_CsiIceCltmRspCb_SDK::ARI_CsiIceCltmRspCb_SDK((AriSdk::ARI_CsiIceCltmRspCb_SDK *)v9, a2);
    if (!*(_QWORD *)(v2 + 24) || !*(_QWORD *)(v2 + 32))
      return MEMORY[0x22E2A325C](v9);
    cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    checkError((AriSdk::MsgBase *)v9, v2, &cf);
    v4 = cf;
    if (cf)
      CFRetain(cf);
    v5 = *(const void **)(v2 + 24);
    if (v5)
      v6 = _Block_copy(v5);
    else
      v6 = 0;
    v7 = *(NSObject **)(v2 + 32);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_0;
    block[3] = &__block_descriptor_tmp_14_2;
    if (v6)
    {
      v12 = _Block_copy(v6);
      v13 = v4;
      if (!v4)
        goto LABEL_14;
    }
    else
    {
      v12 = 0;
      v13 = v4;
      if (!v4)
      {
LABEL_14:
        dispatch_async(v7, block);
        if (v13)
          CFRelease(v13);
        if (v12)
          _Block_release(v12);
        if (v6)
          _Block_release(v6);
        if (v4)
          CFRelease(v4);
        if (cf)
          CFRelease(cf);
        return MEMORY[0x22E2A325C](v9);
      }
    }
    CFRetain(v4);
    goto LABEL_14;
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c256_ZTSNSt3__110shared_ptrIZN5utils7sendMsgIN6AriSdk23ARI_CsiIceCltmRspCb_SDKEEEvNS0_IN3ice6ClientEEERNS3_7MsgBaseENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c256_ZTSNSt3__110shared_ptrIZN5utils7sendMsgIN6AriSdk23ARI_CsiIceCltmRspCb_SDKEEEvNS0_IN3ice6ClientEEERNS3_7MsgBaseENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<void utils::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void utils::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F033F98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void utils::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void utils::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F033F98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<void utils::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void utils::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 48);
  if (v3)
    _Block_release(v3);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_2(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_0(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(const void **)(a1 + 40);
  cf = v1;
  if (v1)
    CFRetain(v1);
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_227A9D29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::ARICommandDriver::registerPowerBudgetIndication(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>(cpms::ARICommandDriver::registerPowerBudgetIndication(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::ARICommandDriver::registerPowerBudgetIndication(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0,dispatch_queue_s *::default_delete<cpms::ARICommandDriver::registerPowerBudgetIndication(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  NSObject *v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[6];
  std::__shared_weak_count *v19;
  const void *aBlock[5];

  v2 = *a1;
  v4 = **a1;
  v3 = (void *)(*a1)[1];
  if (v3)
    v3 = _Block_copy(v3);
  v5 = *(const void **)(v4 + 80);
  *(_QWORD *)(v4 + 80) = v3;
  if (v5)
    _Block_release(v5);
  v6 = v2[2];
  if (v6)
    dispatch_retain((dispatch_object_t)v2[2]);
  v7 = *(NSObject **)(v4 + 88);
  *(_QWORD *)(v4 + 88) = v6;
  if (v7)
    dispatch_release(v7);
  if (*(_QWORD *)(v4 + 80) && *(_QWORD *)(v4 + 88))
  {
    v8 = (const void *)MEMORY[0x24BDAC760];
    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 1174405120;
    v18[2] = ___ZZN4cpms16ARICommandDriver29registerPowerBudgetIndicationEN8dispatch8callbackIU13block_pointerFv10BudgetDataEEEENK3__0clEv_block_invoke;
    v18[3] = &__block_descriptor_tmp_16_2;
    v18[4] = v4;
    v18[5] = v2[3];
    v9 = (std::__shared_weak_count *)v2[4];
    v19 = v9;
    if (v9)
    {
      p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
    }
    aBlock[0] = v8;
    aBlock[1] = (const void *)0x40000000;
    aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_2;
    aBlock[3] = &unk_24F033FE0;
    aBlock[4] = v18;
    aBlock[0] = _Block_copy(aBlock);
    ice::Client::regIndicationInternal();
    if (aBlock[0])
      _Block_release(aBlock[0]);
    if (v19)
      std::__shared_weak_count::__release_weak(v19);
  }
  v12 = (std::__shared_weak_count *)v2[4];
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = v2[2];
  if (v13)
    dispatch_release(v13);
  v14 = (const void *)v2[1];
  if (v14)
    _Block_release(v14);
  operator delete(v2);
  v15 = (std::__shared_weak_count *)a1[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(a1);
}

void sub_227A9D468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock)
{
  _QWORD *v16;
  _QWORD *v17;
  std::__shared_weak_count *v19;
  NSObject *v20;
  const void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;

  if (aBlock)
    _Block_release(aBlock);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    v19 = (std::__shared_weak_count *)v17[4];
    if (!v19)
    {
LABEL_5:
      v20 = v17[2];
      if (!v20)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else
  {
    v19 = (std::__shared_weak_count *)v17[4];
    if (!v19)
      goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v19);
  v20 = v17[2];
  if (!v20)
  {
LABEL_6:
    v21 = (const void *)v17[1];
    if (!v21)
    {
LABEL_12:
      operator delete(v17);
      v22 = (std::__shared_weak_count *)v16[2];
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      operator delete(v16);
      _Unwind_Resume(a1);
    }
LABEL_11:
    _Block_release(v21);
    goto LABEL_12;
  }
LABEL_10:
  dispatch_release(v20);
  v21 = (const void *)v17[1];
  if (!v21)
    goto LABEL_12;
  goto LABEL_11;
}

void ___ZZN4cpms16ARICommandDriver29registerPowerBudgetIndicationEN8dispatch8callbackIU13block_pointerFv10BudgetDataEEEENK3__0clEv_block_invoke(_QWORD *a1, const unsigned __int8 *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  int v12;
  _BYTE *v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  uint64_t v23;
  _OWORD v24[5];
  __int128 v25;
  _QWORD block[4];
  const void *v27;
  _QWORD **v28;
  _QWORD *v29;
  uint64_t v30;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v24[4] = v11;
      v25 = v11;
      v24[2] = v11;
      v24[3] = v11;
      v24[0] = v11;
      v24[1] = v11;
      AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK::ARI_IBICpsMaxCellularPowerForRatInd_SDK((AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK *)v24, a2);
      if (!AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK::unpack((AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK *)v24)
        && *(_QWORD *)(v5 + 80)
        && *(_QWORD *)(v5 + 88))
      {
        v12 = **((_DWORD **)&v25 + 1);
        v22 = 0;
        v23 = 0;
        v13 = operator new(0x28uLL);
        v13[28] = 0;
        v13[32] = 0;
        v13[36] = 0;
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
        *((_QWORD *)v13 + 2) = &v22;
        v21 = v13;
        v22 = v13;
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v13, (uint64_t *)v13);
        ++v23;
        *((_DWORD *)v13 + 8) = v12;
        v13[36] = 1;
        v19 = 0;
        v20 = 0;
        v18 = &v19;
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v18, v13, &v22);
        v14 = *(const void **)(v5 + 80);
        if (v14)
          v15 = _Block_copy(v14);
        else
          v15 = 0;
        v16 = *(NSObject **)(v5 + 88);
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 1174405120;
        block[2] = ___ZNK8dispatch8callbackIU13block_pointerFv10BudgetDataEEclIJS1_EEEvDpT__block_invoke;
        block[3] = &__block_descriptor_tmp_17_0;
        if (v15)
          v17 = _Block_copy(v15);
        else
          v17 = 0;
        v29 = 0;
        v30 = 0;
        v27 = v17;
        v28 = &v29;
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v28, v18, &v19);
        dispatch_async(v16, block);
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v28, v29);
        v29 = 0;
        v30 = 0;
        v28 = &v29;
        if (v27)
          _Block_release(v27);
        if (v15)
          _Block_release(v15);
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v18, v19);
        v19 = 0;
        v20 = 0;
        v18 = &v19;
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v21, v22);
      }
      MEMORY[0x22E2A42B8](v24);
    }
  }
}

void sub_227A9D780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12, _QWORD *a13, uint64_t a14, char a15)
{
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  const void *v19;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v16, *(_QWORD **)(v17 - 64));
  v19 = *(const void **)(v17 - 80);
  if (v19)
    _Block_release(v19);
  if (v15)
    _Block_release(v15);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&a9, a10);
  a10 = 0;
  a11 = 0;
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&a12, a13);
  MEMORY[0x22E2A42B8](&a15);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4cpms13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4cpms13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFv10BudgetDataEEclIJS1_EEEvDpT__block_invoke(_QWORD *a1)
{
  uint64_t v1;
  _QWORD **v2;
  _QWORD *v3[2];

  v1 = a1[4];
  v3[0] = 0;
  v3[1] = 0;
  v2 = v3;
  if (&v2 != a1 + 5)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v2, (_QWORD *)a1[5], a1 + 6);
  (*(void (**)(uint64_t, _QWORD ***))(v1 + 16))(v1, &v2);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v2, v3[0]);
}

void sub_227A9D8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_227A9D8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10BudgetDataEEE40c16_ZTS10BudgetData(_QWORD *a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)(a2 + 32);
  if (v4)
    v4 = _Block_copy(v4);
  a1[6] = 0;
  a1[4] = v4;
  a1[5] = a1 + 6;
  a1[7] = 0;
  if (a1 != (_QWORD *)a2)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)(a1 + 5), *(_QWORD **)(a2 + 40), (_QWORD *)(a2 + 48));
}

void sub_227A9D944(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  const void *v4;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v2, *(_QWORD **)(v1 + 48));
  v4 = *(const void **)(v1 + 32);
  if (v4)
    _Block_release(v4);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10BudgetDataEEE40c16_ZTS10BudgetData(uint64_t a1)
{
  _QWORD *v1;
  const void *v2;

  v1 = (_QWORD *)(a1 + 48);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1 + 40, *(_QWORD **)(a1 + 48));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  v2 = (const void *)*(v1 - 2);
  if (v2)
    _Block_release(v2);
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>(cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0,dispatch_queue_s *::default_delete<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *v8;
  unint64_t v9;
  const void *v10;
  std::__shared_weak_count_vtbl *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  const void *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _OWORD v33[4];
  void *v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t aBlock;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  void *v42;
  __int128 *v43;

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[2] = v4;
  v33[3] = v4;
  v33[0] = v4;
  v33[1] = v4;
  AriSdk::ARI_IBICPMSPowerQueryReq_SDK::ARI_IBICPMSPowerQueryReq_SDK((AriSdk::ARI_IBICPMSPowerQueryReq_SDK *)v33);
  v5 = *(_QWORD *)(v3 + 64);
  v7 = (std::__shared_weak_count_vtbl *)v2[1];
  v6 = v2[2];
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = (const void *)v2[3];
  if (!v10)
  {
    v11 = 0;
    v12 = v2[4];
    if (!v12)
      goto LABEL_7;
    goto LABEL_6;
  }
  v11 = (std::__shared_weak_count_vtbl *)_Block_copy(v10);
  v12 = v2[4];
  if (v12)
LABEL_6:
    dispatch_retain(v12);
LABEL_7:
  v13 = (std::__shared_weak_count *)operator new(0x40uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_24F0340D0;
  v13[1].__vftable = v7;
  v13[1].__shared_owners_ = v6;
  v13[1].__shared_weak_owners_ = v3;
  v13[2].__vftable = v11;
  v13[2].__shared_owners_ = (uint64_t)v12;
  v15 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v35 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v35 + 1) = 1174405120;
  *(_QWORD *)&v36 = ___ZN3ice6detail12wrapCallbackIZZN4cpms16ARICommandDriver15getCurrentPowerEN8dispatch8callbackIU13block_pointerFv10BudgetDataEEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v36 + 1) = &__block_descriptor_tmp_18_2;
  v37 = (unint64_t)&v13[1];
  v38 = v13;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  aBlock = v15;
  v40 = 0x40000000;
  v41 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_2;
  v42 = &unk_24F033FE0;
  v43 = &v35;
  v17 = _Block_copy(&aBlock);
  v18 = v38;
  if (v38)
  {
    v19 = (unint64_t *)&v38->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35 = v22;
  v36 = v22;
  v37 = 0xAAAAAAAAAAAAAAAALL;
  v23 = *(std::__shared_weak_count **)(v5 + 16);
  aBlock = *(_QWORD *)(v5 + 8);
  if (!v23)
  {
    v40 = 0;
LABEL_41:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v40 = (uint64_t)std::__shared_weak_count::lock(v23);
  if (!v40)
    goto LABEL_41;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v24 = (std::__shared_weak_count *)v40;
  if (v40)
  {
    v25 = (unint64_t *)(v40 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v34 = v17;
  ice::SendMsgBaseProxy::callback();
  if (v34)
    _Block_release(v34);
  MEMORY[0x22E2A2FF8](&v35);
  AriSdk::ARI_IBICPMSPowerQueryReq_SDK::~ARI_IBICPMSPowerQueryReq_SDK((AriSdk::ARI_IBICPMSPowerQueryReq_SDK *)v33);
  v27 = v2[4];
  if (v27)
    dispatch_release(v27);
  v28 = (const void *)v2[3];
  if (v28)
    _Block_release(v28);
  v29 = (std::__shared_weak_count *)v2[2];
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  operator delete(v2);
  v30 = (std::__shared_weak_count *)a1[2];
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  operator delete(a1);
}

void sub_227A9DC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _QWORD *v26;
  _QWORD *v27;
  NSObject *v29;
  const void *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;

  if (aBlock)
    _Block_release(aBlock);
  MEMORY[0x22E2A2FF8](&a19);
  AriSdk::ARI_IBICPMSPowerQueryReq_SDK::~ARI_IBICPMSPowerQueryReq_SDK((AriSdk::ARI_IBICPMSPowerQueryReq_SDK *)&a9);
  v29 = v27[4];
  if (v29)
    dispatch_release(v29);
  v30 = (const void *)v27[3];
  if (v30)
    _Block_release(v30);
  v31 = (std::__shared_weak_count *)v27[2];
  if (v31)
    std::__shared_weak_count::__release_weak(v31);
  operator delete(v27);
  v32 = (std::__shared_weak_count *)v26[2];
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  operator delete(v26);
  _Unwind_Resume(a1);
}

void ___ZN3ice6detail12wrapCallbackIZZN4cpms16ARICommandDriver15getCurrentPowerEN8dispatch8callbackIU13block_pointerFv10BudgetDataEEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  std::string::size_type size;
  int v13;
  NSObject *v14;
  std::string *v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  const void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27[2];
  std::string v28;
  _OWORD v29[4];
  __int128 v30;
  unint64_t v31;
  _BYTE buf[24];
  void *v33;
  const void *v34;
  _QWORD **v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = v2[2];
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        v8 = *v2;
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (v10)
        {
          if (!v8)
            return;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v7);
          if (!v8)
            return;
        }
        v31 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v30 = v11;
        v29[2] = v11;
        v29[3] = v11;
        v29[0] = v11;
        v29[1] = v11;
        AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK::ARI_IBICPMSPowerQueryRspCb_SDK((AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK *)v29, a2);
        memset(&v28, 170, sizeof(v28));
        *(_QWORD *)buf = operator new(0x20uLL);
        *(_OWORD *)&buf[8] = xmmword_227B19BE0;
        strcpy(*(char **)buf, "Failed to get current power");
        checkErrorStr((AriSdk::MsgBase *)v29, (uint64_t)buf, (uint64_t)&v28);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v27[0] = 0;
        v27[1] = 0;
        v26 = v27;
        size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
        v13 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v28.__r_.__value_.__l.__size_;
        if (size)
        {
          v14 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
            if (v13 >= 0)
              v15 = &v28;
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v15;
            _os_log_error_impl(&dword_227A72000, v14, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
          }
        }
        else
        {
          v16 = AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK::unpack((AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK *)v29);
          if (v16)
          {
            v17 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v16;
              _os_log_error_impl(&dword_227A72000, v17, OS_LOG_TYPE_ERROR, "Failed to unpack query current power response: unpackResult = %d", buf, 8u);
            }
            std::string::__assign_external(&v28, "Failed to unpack to query current power", 0x27uLL);
          }
          else
          {
            v18 = v30;
            if ((*(_DWORD *)v30 - 1) < 3)
            {
              BudgetData::set((uint64_t *)&v26, (*(_BYTE *)v30 - 1), *(_DWORD *)(v30 + 4));
              if ((*(_DWORD *)(v18 + 8) - 1) <= 2)
              {
                BudgetData::set((uint64_t *)&v26, (*(_BYTE *)(v18 + 8) - 1), *(_DWORD *)(v18 + 12));
                if ((*(_DWORD *)(v18 + 16) - 1) <= 2)
                {
                  BudgetData::set((uint64_t *)&v26, (*(_BYTE *)(v18 + 16) - 1), *(_DWORD *)(v18 + 20));
                  if ((*(_DWORD *)(v18 + 24) - 1) <= 2)
                  {
                    BudgetData::set((uint64_t *)&v26, (*(_BYTE *)(v18 + 24) - 1), *(_DWORD *)(v18 + 28));
                    if ((*(_DWORD *)(v18 + 32) - 1) <= 2)
                      BudgetData::set((uint64_t *)&v26, (*(_BYTE *)(v18 + 32) - 1), *(_DWORD *)(v18 + 36));
                  }
                }
              }
            }
          }
        }
        if (v2[3] && v2[4])
        {
          v24 = 0;
          v25 = 0;
          v23 = &v24;
          std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v23, v26, v27);
          v19 = (const void *)v2[3];
          if (v19)
            v20 = _Block_copy(v19);
          else
            v20 = 0;
          v21 = v2[4];
          *(_QWORD *)buf = MEMORY[0x24BDAC760];
          *(_QWORD *)&buf[8] = 1174405120;
          *(_QWORD *)&buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFv10BudgetDataEEclIJS1_EEEvDpT__block_invoke;
          v33 = &__block_descriptor_tmp_17_0;
          if (v20)
            v22 = _Block_copy(v20);
          else
            v22 = 0;
          v36 = 0;
          v37 = 0;
          v34 = v22;
          v35 = &v36;
          std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v35, v23, &v24);
          dispatch_async(v21, buf);
          std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v35, v36);
          v36 = 0;
          v37 = 0;
          v35 = &v36;
          if (v34)
            _Block_release(v34);
          if (v20)
            _Block_release(v20);
          std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v23, v24);
          v24 = 0;
          v25 = 0;
          v23 = &v24;
        }
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v26, v27[0]);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        MEMORY[0x22E2A3B38](v29);
      }
    }
  }
}

void sub_227A9E1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&a13, a14);
  if (a21 < 0)
  {
    operator delete(__p);
    MEMORY[0x22E2A3B38](&a22);
    _Unwind_Resume(a1);
  }
  MEMORY[0x22E2A3B38](&a22);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c143_ZTSNSt3__110shared_ptrIZZN4cpms16ARICommandDriver15getCurrentPowerEN8dispatch8callbackIU13block_pointerFv10BudgetDataEEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c143_ZTSNSt3__110shared_ptrIZZN4cpms16ARICommandDriver15getCurrentPowerEN8dispatch8callbackIU13block_pointerFv10BudgetDataEEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0340D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0340D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[7];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[6];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  std::string *v9;
  unint64_t v10;
  size_t v11;
  std::string::size_type v12;
  uint64_t v13;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __n - v8)
      {
        v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v7 = operator new(v11);
          memcpy(v7, __s, __n);
          if (v8 != 22)
            operator delete(v9);
          this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
          this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_23:
          this->__r_.__value_.__l.__size_ = __n;
          goto LABEL_24;
        }
LABEL_8:
        v12 = 2 * v8;
        if (__n > 2 * v8)
          v12 = __n;
        v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v13 = v12 | 7;
        if (v12 >= 0x17)
          v11 = v13 + 1;
        else
          v11 = 23;
        goto LABEL_15;
      }
LABEL_25:
      std::string::__throw_length_error[abi:ne180100]();
    }
    v6 = HIBYTE(v10);
    v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      if (__n - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        v8 = 22;
        v9 = this;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_23;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_24:
  *((_BYTE *)v7 + __n) = 0;
  return this;
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::ARICommandDriver::enablePowerBudgetIndication(BOOL,unsigned int)::$_0>(cpms::ARICommandDriver::enablePowerBudgetIndication(BOOL,unsigned int)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::ARICommandDriver::enablePowerBudgetIndication(BOOL,unsigned int)::$_0,dispatch_queue_s *::default_delete<cpms::ARICommandDriver::enablePowerBudgetIndication(BOOL,unsigned int)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  unsigned __int8 *v1;
  _QWORD *v2;
  __int128 v3;
  _DWORD *v4;
  void *v5;
  _DWORD *v6;
  void *v7;
  int v8;
  _WORD *v9;
  void *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  _QWORD aBlock[5];
  _OWORD v40[4];
  void *__p[2];
  void *v42;
  std::string v43;
  std::__shared_count v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  void *v53;
  __int128 *v54;

  v1 = (unsigned __int8 *)*a1;
  v2 = *(_QWORD **)(*a1 + 8);
  v42 = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40[3] = v3;
  *(_OWORD *)__p = v3;
  v40[1] = v3;
  v40[2] = v3;
  v40[0] = v3;
  v37 = v1;
  AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK::ARI_IBICpsConfigureCellularPowerReportReq_SDK((AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK *)v40);
  v4 = operator new(4uLL);
  *v4 = 1;
  v5 = __p[0];
  __p[0] = v4;
  if (v5)
    operator delete(v5);
  v6 = operator new(4uLL);
  *v6 = *v1;
  v7 = __p[1];
  __p[1] = v6;
  if (v7)
    operator delete(v7);
  v8 = *((_DWORD *)v1 + 1);
  v9 = operator new(2uLL);
  *v9 = v8;
  v10 = v42;
  v42 = v9;
  if (v10)
    operator delete(v10);
  v12 = v2[8];
  v11 = (std::__shared_weak_count *)v2[9];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (char *)operator new(0x28uLL);
  strcpy(v15, "Enable CPS to enable the indication");
  v16 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZZN4cpms16ARICommandDriver27enablePowerBudgetIndicationEbjENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_23_1;
  aBlock[4] = v2;
  v17 = _Block_copy(aBlock);
  v18 = v2[3];
  if (v18)
    dispatch_retain(v18);
  std::string::__init_copy_ctor_external(&v43, v15, 0x23uLL);
  if (!v17)
  {
    v44.__vftable = 0;
    v44.__shared_owners_ = (uint64_t)v18;
    if (!v18)
      goto LABEL_15;
    goto LABEL_14;
  }
  v44.__vftable = (std::__shared_count_vtbl *)_Block_copy(v17);
  v44.__shared_owners_ = (uint64_t)v18;
  if (v18)
LABEL_14:
    dispatch_retain(v18);
LABEL_15:
  v19 = (std::__shared_weak_count *)operator new(0x40uLL);
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)off_24F034170;
  v19[1] = (std::__shared_weak_count)v43;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = 0uLL;
  v19[2].std::__shared_count = v44;
  v43.__r_.__value_.__r.__words[2] = 0;
  v44 = (std::__shared_count)0;
  *(_QWORD *)&v46 = v16;
  *((_QWORD *)&v46 + 1) = 1174405120;
  *(_QWORD *)&v47 = ___ZN3ice6detail12wrapCallbackIZN5utils7sendMsgIN6AriSdk45ARI_IBICpsConfigureCellularPowerReportRsp_SDKEEEvNSt3__110shared_ptrINS_6ClientEEERNS4_7MsgBaseENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_vEENSI_5blockIU13block_pointerFiPhjEEENS6_17integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v47 + 1) = &__block_descriptor_tmp_24_1;
  v48 = (unint64_t)&v19[1];
  v49 = v19;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v50 = v16;
  v51 = 0x40000000;
  v52 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_2;
  v53 = &unk_24F033FE0;
  v54 = &v46;
  v22 = _Block_copy(&v50);
  v23 = v49;
  if (v49)
  {
    v24 = (unint64_t *)&v49->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  do
    v26 = __ldaxr(v20);
  while (__stlxr(v26 - 1, v20));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v46 = v27;
  v47 = v27;
  v48 = 0xAAAAAAAAAAAAAAAALL;
  v28 = *(std::__shared_weak_count **)(v12 + 16);
  v50 = *(_QWORD *)(v12 + 8);
  if (!v28)
  {
    v51 = 0;
LABEL_58:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v51 = (uint64_t)std::__shared_weak_count::lock(v28);
  if (!v51)
    goto LABEL_58;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v29 = (std::__shared_weak_count *)v51;
  if (v51)
  {
    v30 = (unint64_t *)(v51 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v45 = v22;
  ice::SendMsgBaseProxy::callback();
  if (v45)
    _Block_release(v45);
  MEMORY[0x22E2A2FF8](&v46);
  if (v44.__shared_owners_)
    dispatch_release((dispatch_object_t)v44.__shared_owners_);
  if (v44.__vftable)
    _Block_release(v44.__vftable);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (v18)
    dispatch_release(v18);
  if (v17)
    _Block_release(v17);
  operator delete(v15);
  if (v11)
  {
    v32 = (unint64_t *)&v11->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  MEMORY[0x22E2A43FC](v40);
  operator delete(v37);
  v34 = (std::__shared_weak_count *)a1[2];
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(a1);
}

void sub_227A9E958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *aBlock,char a35)
{
  std::__shared_weak_count *v35;
  void *v36;
  const void *v37;
  NSObject *v38;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;

  if (aBlock)
    _Block_release(aBlock);
  MEMORY[0x22E2A2FF8](&a35);
  utils::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback((uint64_t)&a29);
  if (v38)
    dispatch_release(v38);
  if (v37)
    _Block_release(v37);
  operator delete(v36);
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  MEMORY[0x22E2A43FC](&a17);
  operator delete(__p);
  v42 = (std::__shared_weak_count *)a11[2];
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  operator delete(a11);
  _Unwind_Resume(a1);
}

void ___ZZN4cpms16ARICommandDriver27enablePowerBudgetIndicationEbjENK3__0clEv_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_error_impl(&dword_227A72000, v4, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v5, 0xCu);
    }
  }
}

uint64_t utils::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 32);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    _Block_release(v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t ___ZN3ice6detail12wrapCallbackIZN5utils7sendMsgIN6AriSdk45ARI_IBICpsConfigureCellularPowerReportRsp_SDKEEEvNSt3__110shared_ptrINS_6ClientEEERNS4_7MsgBaseENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_vEENSI_5blockIU13block_pointerFiPhjEEENS6_17integral_constantIiLi2EEEOT__block_invoke(uint64_t result, const unsigned __int8 *a2)
{
  uint64_t v2;
  __int128 v3;
  CFTypeRef v4;
  const void *v5;
  void *v6;
  NSObject *v7;
  CFTypeRef cf;
  _OWORD v9[5];
  _QWORD block[4];
  void *v11;
  CFTypeRef v12;

  v2 = *(_QWORD *)(result + 32);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v9[3] = v3;
    v9[4] = v3;
    v9[1] = v3;
    v9[2] = v3;
    v9[0] = v3;
    AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK::ARI_IBICpsConfigureCellularPowerReportRsp_SDK((AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK *)v9, a2);
    if (!*(_QWORD *)(v2 + 24) || !*(_QWORD *)(v2 + 32))
      return MEMORY[0x22E2A4414](v9);
    cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    checkError((AriSdk::MsgBase *)v9, v2, &cf);
    v4 = cf;
    if (cf)
      CFRetain(cf);
    v5 = *(const void **)(v2 + 24);
    if (v5)
      v6 = _Block_copy(v5);
    else
      v6 = 0;
    v7 = *(NSObject **)(v2 + 32);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_0;
    block[3] = &__block_descriptor_tmp_14_2;
    if (v6)
    {
      v11 = _Block_copy(v6);
      v12 = v4;
      if (!v4)
        goto LABEL_14;
    }
    else
    {
      v11 = 0;
      v12 = v4;
      if (!v4)
      {
LABEL_14:
        dispatch_async(v7, block);
        if (v12)
          CFRelease(v12);
        if (v11)
          _Block_release(v11);
        if (v6)
          _Block_release(v6);
        if (v4)
          CFRelease(v4);
        if (cf)
          CFRelease(cf);
        return MEMORY[0x22E2A4414](v9);
      }
    }
    CFRetain(v4);
    goto LABEL_14;
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c278_ZTSNSt3__110shared_ptrIZN5utils7sendMsgIN6AriSdk45ARI_IBICpsConfigureCellularPowerReportRsp_SDKEEEvNS0_IN3ice6ClientEEERNS3_7MsgBaseENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c278_ZTSNSt3__110shared_ptrIZN5utils7sendMsgIN6AriSdk45ARI_IBICpsConfigureCellularPowerReportRsp_SDKEEEvNS0_IN3ice6ClientEEERNS3_7MsgBaseENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<void utils::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void utils::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F034170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void utils::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void utils::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F034170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<void utils::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void utils::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 48);
  if (v3)
    _Block_release(v3);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void radio::ARIRFSCommandDriver::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD v22[2];
  uint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD v25[5];

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = operator new(0xF8uLL);
  v7 = (uint64_t)v6;
  v8 = (std::__shared_weak_count *)a1[1];
  v23 = *a1;
  v24 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v22[0] = v11;
  v22[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  radio::ARIRFSCommandDriver::ARIRFSCommandDriver((uint64_t)v6, (uint64_t)&v23, (uint64_t)v22);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<radio::ARIRFSCommandDriver>::shared_ptr[abi:ne180100]<radio::ARIRFSCommandDriver,std::shared_ptr<radio::ARIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::ARIRFSCommandDriver>(radio::ARIRFSCommandDriver*)::{lambda(radio::ARIRFSCommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<radio::RFSCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = v24;
  if (v24)
  {
    v18 = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *a3;
  v21 = (uint64_t *)(*a3 + 72);
  v25[0] = MEMORY[0x24BDAC760];
  v25[1] = 0x40000000;
  v25[2] = ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke;
  v25[3] = &__block_descriptor_tmp_13_2;
  v25[4] = v20;
  ctu::SharedSynchronizable<radio::RFSCommandDriver>::execute_wrapped(v21, (uint64_t)v25);
}

void sub_227A9EFA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void radio::ARIRFSCommandDriver::init(radio::ARIRFSCommandDriver *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x24BDAC760];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_13_2;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::RFSCommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

uint64_t radio::ARIRFSCommandDriver::ARIRFSCommandDriver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *object;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(std::__shared_weak_count **)(a3 + 8);
  v17 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  radio::RFSCommandDriver::RFSCommandDriver();
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *(_QWORD *)a1 = off_24F0341C0;
  v14 = *(NSObject **)(a1 + 88);
  object = v14;
  if (v14)
    dispatch_retain(v14);
  radio::RFSCommandDriver::getName((radio::RFSCommandDriver *)a1);
  ice::Client::create();
  if (object)
    dispatch_release(object);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return a1;
}

void sub_227A9F174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_227A9F190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  radio::RFSCommandDriver *v10;

  if (object)
    dispatch_release(object);
  radio::RFSCommandDriver::~RFSCommandDriver(v10);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];
  _QWORD v11[5];
  _QWORD v12[5];
  _QWORD v13[5];
  _QWORD v14[5];
  uint8_t buf[8];
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  void *v18;
  _QWORD *v19;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  v3 = *(_QWORD *)(v1 + 168);
  v4 = MEMORY[0x24BDAC760];
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 0x40000000;
  v14[2] = ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_2;
  v14[3] = &__block_descriptor_tmp_3;
  v14[4] = v1;
  *(_QWORD *)buf = v14;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v3, 0, (uint64_t *)buf);
  v5 = *(_QWORD *)(v1 + 168);
  v13[0] = v4;
  v13[1] = 0x40000000;
  v13[2] = ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_3;
  v13[3] = &__block_descriptor_tmp_4_1;
  v13[4] = v1;
  *(_QWORD *)buf = v13;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v5, 1, (uint64_t *)buf);
  v12[0] = v4;
  v12[1] = 0x40000000;
  v12[2] = ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_5;
  v12[3] = &__block_descriptor_tmp_7_0;
  v12[4] = v1;
  *(_QWORD *)buf = v4;
  v16 = 0x40000000;
  v17 = ___ZN3ice6detail12wrapCallbackIiEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke;
  v18 = &unk_24F034528;
  v19 = v12;
  *(_QWORD *)buf = _Block_copy(buf);
  ice::Client::regIndicationInternal();
  if (*(_QWORD *)buf)
    _Block_release(*(const void **)buf);
  ice::Client::setIndShouldWake(*(ice::Client **)(v1 + 168));
  v6 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_227A72000, v6, OS_LOG_TYPE_DEFAULT, "#I Enabling CsiFpPrioSyncReqInd as wakeable", buf, 2u);
  }
  v7 = *(_QWORD *)(v1 + 168);
  v11[0] = v4;
  v11[1] = 0x40000000;
  v11[2] = ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_8;
  v11[3] = &__block_descriptor_tmp_10_1;
  v11[4] = v1;
  *(_QWORD *)buf = v11;
  ice::Client::setEventHandler<void({block_pointer})(dispatch::group_session)>(v7, 2, (uint64_t *)buf);
  v8 = *(_QWORD *)(v1 + 168);
  v10[0] = v4;
  v10[1] = 0x40000000;
  v10[2] = ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_11;
  v10[3] = &__block_descriptor_tmp_12_1;
  v10[4] = v1;
  *(_QWORD *)buf = v10;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v8, 3, (uint64_t *)buf);
  return ice::Client::start(*(ice::Client **)(v1 + 168));
}

void sub_227A9F3D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 - 96);
  if (v3)
    _Block_release(v3);
  _Unwind_Resume(exception_object);
}

void ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t v8[16];
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(const void **)(v1 + 184);
  if (!v2 || !*(_QWORD *)(v1 + 192))
    goto LABEL_10;
  v3 = _Block_copy(v2);
  v4 = *(_QWORD *)(v1 + 192);
  if (v4)
    dispatch_retain(*(dispatch_object_t *)(v1 + 192));
  v11[0] = &off_24F034440;
  v11[1] = v3;
  v9 = 0;
  v10 = 0;
  v11[2] = v4;
  v12 = v11;
  ice::Client::getClientId();
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  v7 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v8 = 0;
    _os_log_debug_impl(&dword_227A72000, v7, OS_LOG_TYPE_DEBUG, "#D Started", v8, 2u);
  }
}

void sub_227A9F51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  dispatch::callback<void({block_pointer})>::~callback((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_227A9F55C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(unsigned int)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_3(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v2 = 0;
    _os_log_debug_impl(&dword_227A72000, v1, OS_LOG_TYPE_DEBUG, "#D Stopped", v2, 2u);
  }
}

uint64_t ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_5(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  __int128 v3;
  BOOL v4;
  const void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  _OWORD v11[4];
  __int128 v12;
  uint8_t buf[8];
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  void *aBlock;
  int v18;
  BOOL v19;

  v2 = *(_QWORD **)(a1 + 32);
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[3] = v3;
  v12 = v3;
  v11[1] = v3;
  v11[2] = v3;
  v11[0] = v3;
  AriSdk::ARI_CsiFpPrioSyncReqInd_SDK::ARI_CsiFpPrioSyncReqInd_SDK((AriSdk::ARI_CsiFpPrioSyncReqInd_SDK *)v11, a2);
  if ((ice::isARIResponseValid() & 1) != 0)
  {
    if (!v2[25] || !v2[26])
      goto LABEL_19;
    if (AriSdk::ARI_CsiFpPrioSyncReqInd_SDK::unpack((AriSdk::ARI_CsiFpPrioSyncReqInd_SDK *)v11)
      || !*((_QWORD *)&v12 + 1))
    {
      v4 = 0;
      v5 = (const void *)v2[25];
      if (!v5)
      {
LABEL_11:
        v6 = 0;
        goto LABEL_12;
      }
    }
    else
    {
      v4 = **((_DWORD **)&v12 + 1) != 0;
      v5 = (const void *)v2[25];
      if (!v5)
        goto LABEL_11;
    }
    v6 = _Block_copy(v5);
LABEL_12:
    v8 = v2[26];
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    v14 = 1174405120;
    v15 = ___ZNK8dispatch8callbackIU13block_pointerFvbyEEclIJbiEEEvDpT__block_invoke;
    v16 = &__block_descriptor_tmp_38;
    if (v6)
      v9 = _Block_copy(v6);
    else
      v9 = 0;
    aBlock = v9;
    v19 = v4;
    v18 = 0;
    dispatch_async(v8, buf);
    if (aBlock)
      _Block_release(aBlock);
    if (v6)
      _Block_release(v6);
    goto LABEL_19;
  }
  v7 = v2[5];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_227A72000, v7, OS_LOG_TYPE_ERROR, "Got invalid ARI indication, was expecting CsiFpPrioSyncReqInd", buf, 2u);
  }
LABEL_19:
  MEMORY[0x22E2A3634](v11);
  return 0;
}

void ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_8(uint64_t a1, NSObject **a2)
{
  _QWORD *v3;
  NSObject *v4;
  const void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  _QWORD v9[4];
  void *aBlock;
  dispatch_group_t group;

  v3 = *(_QWORD **)(a1 + 32);
  v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9[0]) = 0;
    _os_log_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEFAULT, "#I ARI LPM Enter event received", (uint8_t *)v9, 2u);
  }
  v5 = (const void *)v3[27];
  if (v5 && v3[28])
  {
    v6 = *a2;
    if (v6 && (dispatch_retain(v6), dispatch_group_enter(v6), (v5 = (const void *)v3[27]) == 0))
      v7 = 0;
    else
      v7 = _Block_copy(v5);
    v8 = v3[28];
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 1174405120;
    v9[2] = ___ZNK8dispatch8callbackIU13block_pointerFvNS_13group_sessionEEEclIJS1_EEEvDpT__block_invoke_0;
    v9[3] = &__block_descriptor_tmp_40_0;
    if (v7)
    {
      aBlock = _Block_copy(v7);
      group = v6;
      if (!v6)
        goto LABEL_12;
    }
    else
    {
      aBlock = 0;
      group = v6;
      if (!v6)
      {
LABEL_12:
        dispatch_async(v8, v9);
        if (group)
        {
          dispatch_group_leave(group);
          if (group)
            dispatch_release(group);
        }
        if (aBlock)
          _Block_release(aBlock);
        if (v7)
          _Block_release(v7);
        if (v6)
        {
          dispatch_group_leave(v6);
          dispatch_release(v6);
        }
        return;
      }
    }
    dispatch_retain(v6);
    dispatch_group_enter(v6);
    goto LABEL_12;
  }
}

void ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_11(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  const void *v3;
  void *v4;
  const void *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[4];
  void *aBlock;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8[0]) = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I ARI LPM Exit event received", (uint8_t *)v8, 2u);
  }
  v3 = (const void *)v1[29];
  if (v3 && v1[30])
  {
    v4 = _Block_copy(v3);
    v5 = v4;
    v6 = v1[30];
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 1174405120;
    v8[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke_0;
    v8[3] = &__block_descriptor_tmp_42_0;
    if (v4)
    {
      aBlock = _Block_copy(v4);
      dispatch_async(v6, v8);
      v7 = aBlock;
      if (!aBlock)
      {
LABEL_10:
        if (v5)
          _Block_release(v5);
        return;
      }
    }
    else
    {
      aBlock = 0;
      dispatch_async(v6, v8);
      v7 = aBlock;
      if (!aBlock)
        goto LABEL_10;
    }
    _Block_release(v7);
    goto LABEL_10;
  }
}

void radio::ARIRFSCommandDriver::sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  void *v5;
  NSObject *v6;
  void *__p[2];
  char v8;
  CFTypeRef cf;
  __int128 block;
  void (*v11)(uint64_t);
  void *v12;
  void *aBlock;
  CFTypeRef v14;
  CFTypeRef v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(block) = 136315138;
    *(_QWORD *)((char *)&block + 4) = "sync";
    _os_log_debug_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&block, 0xCu);
  }
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v8 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (*(_QWORD *)a3)
    v5 = _Block_copy(*(const void **)a3);
  else
    v5 = 0;
  v6 = *(NSObject **)(a3 + 8);
  *(_QWORD *)&block = MEMORY[0x24BDAC760];
  *((_QWORD *)&block + 1) = 1174405120;
  v11 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke;
  v12 = &__block_descriptor_tmp_44_0;
  if (v5)
  {
    aBlock = _Block_copy(v5);
    v14 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    aBlock = 0;
    v14 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  v15 = 0;
  dispatch_async(v6, &block);
  if (v15)
    CFRelease(v15);
  if (v14)
    CFRelease(v14);
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFRelease(cf);
}

void sub_227A9FC1C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_227A9FC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x227A9FC48);
}

const void **ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void radio::ARIRFSCommandDriver::registerRFS_sync(std::__shared_weak_count **this, int a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count_vtbl *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  _DWORD *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  const void *v19;
  unint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *shared_weak_owners;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _OWORD v31[2];
  unint64_t v32;
  _OWORD v33[4];
  void *__p;
  uint64_t shared_owners;
  uint64_t v36;
  void (*v37)(uint64_t, const unsigned __int8 *);
  void *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  const void *aBlock[5];

  if ((capabilities::ct::supportsHiSpeedFiler((capabilities::ct *)this) & 1) != 0)
  {
    if (a2)
      radio::ARIRFSCommandDriver::getRFSStatus_V2_sync((radio::ARIRFSCommandDriver *)this);
    return;
  }
  v4 = this[10];
  if (!v4 || (v5 = (std::__shared_weak_count_vtbl *)this[9], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[2] = v12;
  v33[3] = v12;
  v33[0] = v12;
  v33[1] = v12;
  AriSdk::ARI_CsiFpRegister_SDK::ARI_CsiFpRegister_SDK((AriSdk::ARI_CsiFpRegister_SDK *)v33);
  v13 = operator new(4uLL);
  *v13 = a2;
  v14 = __p;
  __p = v13;
  if (v14)
    operator delete(v14);
  v15 = this[21];
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = (std::__shared_weak_count *)operator new(0x38uLL);
  v17->__shared_owners_ = 0;
  v18 = (unint64_t *)&v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = v5;
  v17->__vftable = (std::__shared_weak_count_vtbl *)off_24F034650;
  v17[1].__shared_owners_ = (uint64_t)v7;
  v17[1].__shared_weak_owners_ = (uint64_t)this;
  LOBYTE(v17[2].__vftable) = a2;
  v19 = (const void *)MEMORY[0x24BDAC760];
  shared_owners = MEMORY[0x24BDAC760];
  v36 = 1174405120;
  v37 = ___ZN3ice6detail12wrapCallbackIZN5radio19ARIRFSCommandDriver16registerRFS_syncEbE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v38 = &__block_descriptor_tmp_46;
  v39 = v17 + 1;
  v40 = v17;
  do
    v20 = __ldxr(v18);
  while (__stxr(v20 + 1, v18));
  aBlock[0] = v19;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_3;
  aBlock[3] = &unk_24F034698;
  aBlock[4] = &shared_owners;
  v21 = _Block_copy(aBlock);
  v22 = v40;
  if (v40)
  {
    v23 = (unint64_t *)&v40->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  do
    v25 = __ldaxr(v18);
  while (__stlxr(v25 - 1, v18));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v31[0] = v26;
  v31[1] = v26;
  v32 = 0xAAAAAAAAAAAAAAAALL;
  shared_weak_owners = (std::__shared_weak_count *)v15->__shared_weak_owners_;
  shared_owners = v15->__shared_owners_;
  if (!shared_weak_owners)
  {
    v36 = 0;
LABEL_39:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v36 = (uint64_t)std::__shared_weak_count::lock(shared_weak_owners);
  if (!v36)
    goto LABEL_39;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v28 = (std::__shared_weak_count *)v36;
  if (v36)
  {
    v29 = (unint64_t *)(v36 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  aBlock[0] = v21;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v31);
  MEMORY[0x22E2A3148](v33);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_227A9FF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;
  uint64_t v16;
  const void *v18;

  v18 = *(const void **)(v16 - 104);
  if (v18)
    _Block_release(v18);
  MEMORY[0x22E2A2FF8](&a9);
  MEMORY[0x22E2A3148](&a15);
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

void sub_227A9FFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  std::__shared_weak_count *v7;
  const void *v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (v8)
    _Block_release(v8);
  MEMORY[0x22E2A3148]((uint64_t *)va);
  std::__shared_weak_count::__release_weak(v7);
  _Unwind_Resume(a1);
}

void radio::ARIRFSCommandDriver::getRFSStatus_V2_sync(radio::ARIRFSCommandDriver *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  const void *v15;
  unint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _OWORD v27[2];
  unint64_t v28;
  _OWORD v29[4];
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, const unsigned __int8 *);
  void *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  const void *aBlock[5];

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2
    || (v3 = (std::__shared_weak_count_vtbl *)*((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29[2] = v10;
  v29[3] = v10;
  v29[0] = v10;
  v29[1] = v10;
  AriSdk::ARI_CsiFpGetStatusV2_SDK::ARI_CsiFpGetStatusV2_SDK((AriSdk::ARI_CsiFpGetStatusV2_SDK *)v29);
  v11 = *((_QWORD *)this + 21);
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = (std::__shared_weak_count *)operator new(0x30uLL);
  v13->__shared_owners_ = 0;
  v14 = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_24F034778;
  v13[1].__vftable = v3;
  v13[1].__shared_owners_ = (uint64_t)v5;
  v13[1].__shared_weak_owners_ = (uint64_t)this;
  v15 = (const void *)MEMORY[0x24BDAC760];
  v30 = MEMORY[0x24BDAC760];
  v31 = 1174405120;
  v32 = ___ZN3ice6detail12wrapCallbackIZN5radio19ARIRFSCommandDriver20getRFSStatus_V2_syncEvE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v33 = &__block_descriptor_tmp_54;
  v34 = v13 + 1;
  v35 = v13;
  do
    v16 = __ldxr(v14);
  while (__stxr(v16 + 1, v14));
  aBlock[0] = v15;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_3;
  aBlock[3] = &unk_24F034698;
  aBlock[4] = &v30;
  v17 = _Block_copy(aBlock);
  v18 = v35;
  if (v35)
  {
    v19 = (unint64_t *)&v35->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  do
    v21 = __ldaxr(v14);
  while (__stlxr(v21 - 1, v14));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27[0] = v22;
  v27[1] = v22;
  v28 = 0xAAAAAAAAAAAAAAAALL;
  v23 = *(std::__shared_weak_count **)(v11 + 16);
  v30 = *(_QWORD *)(v11 + 8);
  if (!v23)
  {
    v31 = 0;
LABEL_33:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v31 = (uint64_t)std::__shared_weak_count::lock(v23);
  if (!v31)
    goto LABEL_33;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v24 = (std::__shared_weak_count *)v31;
  if (v31)
  {
    v25 = (unint64_t *)(v31 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  aBlock[0] = v17;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v27);
  AriSdk::ARI_CsiFpGetStatusV2_SDK::~ARI_CsiFpGetStatusV2_SDK((AriSdk::ARI_CsiFpGetStatusV2_SDK *)v29);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_227AA02D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;
  uint64_t v16;
  const void *v18;

  v18 = *(const void **)(v16 - 104);
  if (v18)
    _Block_release(v18);
  MEMORY[0x22E2A2FF8](&a9);
  AriSdk::ARI_CsiFpGetStatusV2_SDK::~ARI_CsiFpGetStatusV2_SDK((AriSdk::ARI_CsiFpGetStatusV2_SDK *)&a15);
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

void sub_227AA0304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  std::__shared_weak_count *v7;
  const void *v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (v8)
    _Block_release(v8);
  AriSdk::ARI_CsiFpGetStatusV2_SDK::~ARI_CsiFpGetStatusV2_SDK((AriSdk::ARI_CsiFpGetStatusV2_SDK *)va);
  std::__shared_weak_count::__release_weak(v7);
  _Unwind_Resume(a1);
}

std::string *radio::ARIRFSCommandDriver::asString@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  const std::string::value_type *v3;
  std::string::size_type v4;
  const char *v5;
  std::string *result;

  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a2 + 16) = 0xAAAAAAAAAAAAAAAALL;
  *(_BYTE *)(a2 + 23) = 7;
  strcpy((char *)a2, "Unknown");
  v3 = "cmd called in wrong state";
  v4 = 25;
  switch(a1)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 7;
      strcpy((char *)a2, "success");
      return result;
    case 1:
      *(_BYTE *)(a2 + 23) = 18;
      strcpy((char *)a2, "param out of range");
      return result;
    case 2:
      strcpy((char *)a2, "function not supported");
      *(_BYTE *)(a2 + 23) = 22;
      return result;
    case 3:
      *(_BYTE *)(a2 + 23) = 21;
      strcpy((char *)a2, "drv grp not supported");
      return result;
    case 4:
      return std::string::__assign_external((std::string *)a2, v3, v4);
    case 5:
      v3 = "driver IF not available";
      v4 = 23;
      return std::string::__assign_external((std::string *)a2, v3, v4);
    case 6:
      *(_BYTE *)(a2 + 23) = 12;
      strcpy((char *)a2, "driver error");
      return result;
    case 7:
      v5 = "driver timeout";
      goto LABEL_15;
    case 8:
      *(_BYTE *)(a2 + 23) = 20;
      strcpy((char *)a2, "driver not supported");
      return result;
    case 9:
    case 10:
    case 11:
      return result;
    case 12:
      *(_BYTE *)(a2 + 23) = 20;
      strcpy((char *)a2, "param count mismatch");
      return result;
    case 13:
      *(_BYTE *)(a2 + 23) = 18;
      strcpy((char *)a2, "cmd format invalid");
      return result;
    case 14:
      v5 = "internal error";
LABEL_15:
      *(_BYTE *)(a2 + 23) = 14;
      *(_QWORD *)a2 = *(_QWORD *)v5;
      *(_QWORD *)(a2 + 6) = *(_QWORD *)(v5 + 6);
      *(_BYTE *)(a2 + 14) = 0;
      break;
    default:
      if (a1 == 0x7FFFFFFF)
      {
        *(_BYTE *)(a2 + 23) = 17;
        strcpy((char *)a2, "ARM41 INT ENFORCE");
      }
      break;
  }
  return result;
}

void sub_227AA0604(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void radio::ARIRFSCommandDriver::getRFSStatus_sync(radio::ARIRFSCommandDriver *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  const void *v15;
  unint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _OWORD v27[2];
  unint64_t v28;
  _OWORD v29[4];
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, const unsigned __int8 *);
  void *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  const void *aBlock[5];

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2
    || (v3 = (std::__shared_weak_count_vtbl *)*((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29[2] = v10;
  v29[3] = v10;
  v29[0] = v10;
  v29[1] = v10;
  AriSdk::ARI_CsiFpGetStatus_SDK::ARI_CsiFpGetStatus_SDK((AriSdk::ARI_CsiFpGetStatus_SDK *)v29);
  v11 = *((_QWORD *)this + 21);
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = (std::__shared_weak_count *)operator new(0x30uLL);
  v13->__shared_owners_ = 0;
  v14 = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_24F0346F8;
  v13[1].__vftable = v3;
  v13[1].__shared_owners_ = (uint64_t)v5;
  v13[1].__shared_weak_owners_ = (uint64_t)this;
  v15 = (const void *)MEMORY[0x24BDAC760];
  v30 = MEMORY[0x24BDAC760];
  v31 = 1174405120;
  v32 = ___ZN3ice6detail12wrapCallbackIZN5radio19ARIRFSCommandDriver17getRFSStatus_syncEvE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v33 = &__block_descriptor_tmp_52;
  v34 = v13 + 1;
  v35 = v13;
  do
    v16 = __ldxr(v14);
  while (__stxr(v16 + 1, v14));
  aBlock[0] = v15;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_3;
  aBlock[3] = &unk_24F034698;
  aBlock[4] = &v30;
  v17 = _Block_copy(aBlock);
  v18 = v35;
  if (v35)
  {
    v19 = (unint64_t *)&v35->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  do
    v21 = __ldaxr(v14);
  while (__stlxr(v21 - 1, v14));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27[0] = v22;
  v27[1] = v22;
  v28 = 0xAAAAAAAAAAAAAAAALL;
  v23 = *(std::__shared_weak_count **)(v11 + 16);
  v30 = *(_QWORD *)(v11 + 8);
  if (!v23)
  {
    v31 = 0;
LABEL_33:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v31 = (uint64_t)std::__shared_weak_count::lock(v23);
  if (!v31)
    goto LABEL_33;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v24 = (std::__shared_weak_count *)v31;
  if (v31)
  {
    v25 = (unint64_t *)(v31 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  aBlock[0] = v17;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v27);
  AriSdk::ARI_CsiFpGetStatus_SDK::~ARI_CsiFpGetStatus_SDK((AriSdk::ARI_CsiFpGetStatus_SDK *)v29);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_227AA08A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;
  uint64_t v16;
  const void *v18;

  v18 = *(const void **)(v16 - 104);
  if (v18)
    _Block_release(v18);
  MEMORY[0x22E2A2FF8](&a9);
  AriSdk::ARI_CsiFpGetStatus_SDK::~ARI_CsiFpGetStatus_SDK((AriSdk::ARI_CsiFpGetStatus_SDK *)&a15);
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

void sub_227AA08D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  std::__shared_weak_count *v7;
  const void *v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (v8)
    _Block_release(v8);
  AriSdk::ARI_CsiFpGetStatus_SDK::~ARI_CsiFpGetStatus_SDK((AriSdk::ARI_CsiFpGetStatus_SDK *)va);
  std::__shared_weak_count::__release_weak(v7);
  _Unwind_Resume(a1);
}

void radio::ARIRFSCommandDriver::checkRFSStatus(radio::ARIRFSCommandDriver *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x24BDAC760];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio19ARIRFSCommandDriver14checkRFSStatusEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_29;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::RFSCommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN5radio19ARIRFSCommandDriver14checkRFSStatusEv_block_invoke(uint64_t a1)
{
  radio::ARIRFSCommandDriver::registerRFS_sync(*(std::__shared_weak_count ***)(a1 + 32), 1);
}

void radio::ARIRFSCommandDriver::setStartHandler(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio19ARIRFSCommandDriver15setStartHandlerEN8dispatch8callbackIU13block_pointerFvjEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_30;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<radio::RFSCommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5radio19ARIRFSCommandDriver15setStartHandlerEN8dispatch8callbackIU13block_pointerFvjEEE_block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;

  v3 = a1[4];
  v2 = (void *)a1[5];
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 184);
  *(_QWORD *)(v3 + 184) = v2;
  if (v4)
    _Block_release(v4);
  v5 = a1[6];
  if (v5)
    dispatch_retain(v5);
  v6 = *(NSObject **)(v3 + 192);
  *(_QWORD *)(v3 + 192) = v5;
  if (v6)
    dispatch_release(v6);
}

void __copy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvjEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvjEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void radio::ARIRFSCommandDriver::setLPMEnterAction(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio19ARIRFSCommandDriver17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS1_13group_sessionEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_31;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<radio::RFSCommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5radio19ARIRFSCommandDriver17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS1_13group_sessionEEEE_block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;

  v3 = a1[4];
  v2 = (void *)a1[5];
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 216);
  *(_QWORD *)(v3 + 216) = v2;
  if (v4)
    _Block_release(v4);
  v5 = a1[6];
  if (v5)
    dispatch_retain(v5);
  v6 = *(NSObject **)(v3 + 224);
  *(_QWORD *)(v3 + 224) = v5;
  if (v6)
    dispatch_release(v6);
}

void radio::ARIRFSCommandDriver::setLPMExitAction(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio19ARIRFSCommandDriver16setLPMExitActionEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_32;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<radio::RFSCommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5radio19ARIRFSCommandDriver16setLPMExitActionEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;

  v3 = a1[4];
  v2 = (void *)a1[5];
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 232);
  *(_QWORD *)(v3 + 232) = v2;
  if (v4)
    _Block_release(v4);
  v5 = a1[6];
  if (v5)
    dispatch_retain(v5);
  v6 = *(NSObject **)(v3 + 240);
  *(_QWORD *)(v3 + 240) = v5;
  if (v6)
    dispatch_release(v6);
}

void radio::ARIRFSCommandDriver::setIndicationHandler(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio19ARIRFSCommandDriver20setIndicationHandlerEN8dispatch8callbackIU13block_pointerFvbyEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_33;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<radio::RFSCommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5radio19ARIRFSCommandDriver20setIndicationHandlerEN8dispatch8callbackIU13block_pointerFvbyEEE_block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;

  v3 = a1[4];
  v2 = (void *)a1[5];
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 200);
  *(_QWORD *)(v3 + 200) = v2;
  if (v4)
    _Block_release(v4);
  v5 = a1[6];
  if (v5)
    dispatch_retain(v5);
  v6 = *(NSObject **)(v3 + 208);
  *(_QWORD *)(v3 + 208) = v5;
  if (v6)
    dispatch_release(v6);
}

void __copy_helper_block_e8_40c47_ZTSN8dispatch8callbackIU13block_pointerFvbyEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c47_ZTSN8dispatch8callbackIU13block_pointerFvbyEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void radio::ARIRFSCommandDriver::~ARIRFSCommandDriver(radio::ARIRFSCommandDriver *this)
{
  void *v1;

  radio::ARIRFSCommandDriver::~ARIRFSCommandDriver(this);
  operator delete(v1);
}

{
  NSObject *v2;
  const void *v3;
  NSObject *v4;
  const void *v5;
  NSObject *v6;
  const void *v7;
  NSObject *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *(_QWORD *)this = off_24F0341C0;
  v2 = *((_QWORD *)this + 30);
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)*((_QWORD *)this + 29);
  if (v3)
    _Block_release(v3);
  v4 = *((_QWORD *)this + 28);
  if (v4)
    dispatch_release(v4);
  v5 = (const void *)*((_QWORD *)this + 27);
  if (v5)
    _Block_release(v5);
  v6 = *((_QWORD *)this + 26);
  if (v6)
    dispatch_release(v6);
  v7 = (const void *)*((_QWORD *)this + 25);
  if (v7)
    _Block_release(v7);
  v8 = *((_QWORD *)this + 24);
  if (v8)
    dispatch_release(v8);
  v9 = (const void *)*((_QWORD *)this + 23);
  if (v9)
    _Block_release(v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v10)
    goto LABEL_21;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    radio::RFSCommandDriver::~RFSCommandDriver(this);
  }
  else
  {
LABEL_21:
    radio::RFSCommandDriver::~RFSCommandDriver(this);
  }
}

uint64_t ctu::Loggable<radio::RFSCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<radio::RFSCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(radio::RFSCommandDriver *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *Name;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  Name = (const char *)radio::RFSCommandDriver::getName(a1);
  result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, Name, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<radio::RFSCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void ctu::Loggable<radio::RFSCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_227AA11C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_227AA11E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<radio::ARIRFSCommandDriver>::shared_ptr[abi:ne180100]<radio::ARIRFSCommandDriver,std::shared_ptr<radio::ARIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::ARIRFSCommandDriver>(radio::ARIRFSCommandDriver*)::{lambda(radio::ARIRFSCommandDriver*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_24F0343F0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_227AA1300(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<radio::ARIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::ARIRFSCommandDriver>(radio::ARIRFSCommandDriver*)::{lambda(radio::ARIRFSCommandDriver*)#1}::operator() const(radio::ARIRFSCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_227AA1320(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<radio::ARIRFSCommandDriver *,std::shared_ptr<radio::ARIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::ARIRFSCommandDriver>(radio::ARIRFSCommandDriver*)::{lambda(radio::ARIRFSCommandDriver *)#1},std::allocator<radio::ARIRFSCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::ARIRFSCommandDriver *,std::shared_ptr<radio::ARIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::ARIRFSCommandDriver>(radio::ARIRFSCommandDriver*)::{lambda(radio::ARIRFSCommandDriver *)#1},std::allocator<radio::ARIRFSCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<radio::ARIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::ARIRFSCommandDriver>(radio::ARIRFSCommandDriver*)::{lambda(radio::ARIRFSCommandDriver*)#1}::operator() const(radio::ARIRFSCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<radio::ARIRFSCommandDriver *,std::shared_ptr<radio::ARIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::ARIRFSCommandDriver>(radio::ARIRFSCommandDriver*)::{lambda(radio::ARIRFSCommandDriver *)#1},std::allocator<radio::ARIRFSCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15make_shared_ptrINS1_19ARIRFSCommandDriver"
                     "EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15make_shared_ptrINS1_19ARIRFSCo"
                                "mmandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15make_shared_ptrINS1_19ARIRFSCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15make_shared_ptrINS1_19ARIRFSCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<radio::ARIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::ARIRFSCommandDriver>(radio::ARIRFSCommandDriver*)::{lambda(radio::ARIRFSCommandDriver*)#1}::operator() const(radio::ARIRFSCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *std::__function::__func<dispatch::callback<void({block_pointer})(unsigned int)>,std::allocator<dispatch::callback<void({block_pointer})(unsigned int)>>,void ()(int)>::~__func(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;

  *a1 = &off_24F034440;
  v2 = a1[2];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[1];
  if (v3)
    _Block_release(v3);
  return a1;
}

void std::__function::__func<dispatch::callback<void({block_pointer})(unsigned int)>,std::allocator<dispatch::callback<void({block_pointer})(unsigned int)>>,void ()(int)>::~__func(_QWORD *__p)
{
  NSObject *v2;
  const void *v3;

  *__p = &off_24F034440;
  v2 = __p[2];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)__p[1];
  if (v3)
    _Block_release(v3);
  operator delete(__p);
}

_QWORD *std::__function::__func<dispatch::callback<void({block_pointer})(unsigned int)>,std::allocator<dispatch::callback<void({block_pointer})(unsigned int)>>,void ()(int)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  NSObject *v4;

  v2 = operator new(0x18uLL);
  *v2 = &off_24F034440;
  v3 = *(void **)(a1 + 8);
  if (v3)
    v3 = _Block_copy(v3);
  v4 = *(NSObject **)(a1 + 16);
  v2[1] = v3;
  v2[2] = v4;
  if (v4)
    dispatch_retain(v4);
  return v2;
}

void std::__function::__func<dispatch::callback<void({block_pointer})(unsigned int)>,std::allocator<dispatch::callback<void({block_pointer})(unsigned int)>>,void ()(int)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *v4;
  NSObject *v5;

  *a2 = &off_24F034440;
  v4 = *(void **)(a1 + 8);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a1 + 16);
  a2[1] = v4;
  a2[2] = v5;
  if (v5)
    dispatch_retain(v5);
}

void std::__function::__func<dispatch::callback<void({block_pointer})(unsigned int)>,std::allocator<dispatch::callback<void({block_pointer})(unsigned int)>>,void ()(int)>::destroy(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 16);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    _Block_release(v3);
}

void std::__function::__func<dispatch::callback<void({block_pointer})(unsigned int)>,std::allocator<dispatch::callback<void({block_pointer})(unsigned int)>>,void ()(int)>::destroy_deallocate(_QWORD *__p)
{
  NSObject *v2;
  const void *v3;

  v2 = __p[2];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)__p[1];
  if (v3)
    _Block_release(v3);
  operator delete(__p);
}

void std::__function::__func<dispatch::callback<void({block_pointer})(unsigned int)>,std::allocator<dispatch::callback<void({block_pointer})(unsigned int)>>,void ()(int)>::operator()(uint64_t a1, int *a2)
{
  int v3;
  const void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[4];
  void *aBlock;
  int v10;

  v3 = *a2;
  v4 = *(const void **)(a1 + 8);
  if (v4)
    v5 = _Block_copy(v4);
  else
    v5 = 0;
  v6 = *(NSObject **)(a1 + 16);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 1174405120;
  v8[2] = ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJiEEEvDpT__block_invoke;
  v8[3] = &__block_descriptor_tmp_35;
  if (v5)
    v7 = _Block_copy(v5);
  else
    v7 = 0;
  aBlock = v7;
  v10 = v3;
  dispatch_async(v6, v8);
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
}

uint64_t std::__function::__func<dispatch::callback<void({block_pointer})(unsigned int)>,std::allocator<dispatch::callback<void({block_pointer})(unsigned int)>>,void ()(int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N8dispatch8callbackIU13block_pointerFvjEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N8dispatch8callbackIU13block_pointerFvjEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N8dispatch8callbackIU13block_pointerFvjEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N8dispatch8callbackIU13block_pointerFvjEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<dispatch::callback<void({block_pointer})(unsigned int)>,std::allocator<dispatch::callback<void({block_pointer})(unsigned int)>>,void ()(int)>::target_type()
{
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJiEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvjEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvjEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbyEEclIJbiEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 44), *(int *)(a1 + 40));
}

void *__copy_helper_block_e8_32c44_ZTSN8dispatch5blockIU13block_pointerFvbyEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c44_ZTSN8dispatch5blockIU13block_pointerFvbyEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

uint64_t ___ZN3ice6detail12wrapCallbackIiEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvNS_13group_sessionEEEclIJS1_EEEvDpT__block_invoke_0(uint64_t a1)
{
  dispatch::block<void({block_pointer})(dispatch::group_session)>::operator()<dispatch::group_session const&>((uint64_t *)(a1 + 32), (NSObject **)(a1 + 40));
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke_0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ctu::SharedSynchronizable<radio::RFSCommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_24F0345B0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c53_ZTSNSt3__110shared_ptrIKN5radio16RFSCommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c53_ZTSNSt3__110shared_ptrIKN5radio16RFSCommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke(uint64_t a1)
{
  dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary const> const&>((uint64_t *)(a1 + 32), (const void **)(a1 + 40), (const void **)(a1 + 48));
}

void dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary const> const&>(uint64_t *a1, const void **a2, const void **a3)
{
  uint64_t v4;
  const void *v5;
  const void *v6;
  CFTypeRef cf;
  CFTypeRef v8;

  v4 = *a1;
  v5 = *a2;
  v8 = v5;
  if (v5)
    CFRetain(v5);
  v6 = *a3;
  cf = v6;
  if (v6)
    CFRetain(v6);
  (*(void (**)(uint64_t, CFTypeRef *, CFTypeRef *))(v4 + 16))(v4, &v8, &cf);
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
}

void sub_227AA1A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c100_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  const void *v6;
  CFTypeRef result;

  v4 = (const void *)a2[4];
  if (!v4)
  {
    v6 = (const void *)a2[5];
    a1[4] = 0;
    a1[5] = v6;
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = _Block_copy(v4);
  v6 = (const void *)a2[5];
  a1[4] = v5;
  a1[5] = v6;
  if (v6)
LABEL_5:
    CFRetain(v6);
LABEL_6:
  result = (CFTypeRef)a2[6];
  a1[6] = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c100_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[6];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  if (v4)
    _Block_release(v4);
}

void ___ZN3ice6detail12wrapCallbackIZN5radio19ARIRFSCommandDriver16registerRFS_syncEbE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  radio::ARIRFSCommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  CFTypeRef v11;
  void *v12;
  int v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  CFTypeRef v22;
  CFTypeRef v23;
  uint64_t (*v24)(uint64_t);
  NSObject *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::string v28;
  std::string v29;
  std::string v30;
  CFTypeRef v31;
  _BYTE __p[24];
  CFTypeRef cf;
  _OWORD v34[4];
  int *v35;
  std::string v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      v5 = *(radio::ARIRFSCommandDriver **)(v2 + 16);
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*(_QWORD *)v2)
        {
LABEL_54:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v35 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v34[2] = v8;
        v34[3] = v8;
        v34[0] = v8;
        v34[1] = v8;
        AriSdk::ARI_CsiFpRegisterRsp_SDK::ARI_CsiFpRegisterRsp_SDK((AriSdk::ARI_CsiFpRegisterRsp_SDK *)v34, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)__p = operator new(0x20uLL);
        *(_OWORD *)&__p[8] = xmmword_227B1B090;
        strcpy(*(char **)__p, "registering rfs-get-status");
        checkError((AriSdk::MsgBase *)v34, (uint64_t)__p, &cf);
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if (cf)
            v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v10 = 0;
          if (v10)
            goto LABEL_43;
        }
        else
        {
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_43;
        }
        if (AriSdk::ARI_CsiFpRegisterRsp_SDK::unpack((AriSdk::ARI_CsiFpRegisterRsp_SDK *)v34))
        {
          *(_QWORD *)__p = operator new(0x40uLL);
          *(_OWORD *)&__p[8] = xmmword_227B1B0A0;
          strcpy(*(char **)__p, "Failed to unpack response in registering for RFS Get Status");
          CreateError();
          v11 = cf;
          cf = (CFTypeRef)v36.__r_.__value_.__r.__words[0];
          v36.__r_.__value_.__r.__words[0] = 0;
          if (v11)
          {
            CFRelease(v11);
            if (v36.__r_.__value_.__r.__words[0])
              CFRelease(v36.__r_.__value_.__l.__data_);
          }
          if ((__p[23] & 0x80000000) == 0)
            goto LABEL_43;
          v12 = *(void **)__p;
          goto LABEL_42;
        }
        v13 = *v35;
        if (!*v35)
          goto LABEL_43;
        radio::ARIRFSCommandDriver::asString(*v35, (uint64_t)&v29);
        v14 = std::string::insert(&v29, 0, "Error on enabling RFS Get Status result: ", 0x29uLL);
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        v16 = std::string::append(&v30, ", value: ", 9uLL);
        v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v28, v13);
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v28;
        else
          v18 = (std::string *)v28.__r_.__value_.__r.__words[0];
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
        else
          size = v28.__r_.__value_.__l.__size_;
        v20 = std::string::append(&v36, (const std::string::value_type *)v18, size);
        v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v20->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        CreateError();
        v22 = cf;
        cf = v31;
        v31 = 0;
        if (v22)
        {
          CFRelease(v22);
          if (v31)
            CFRelease(v31);
        }
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_33:
            if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_34;
            goto LABEL_39;
          }
        }
        else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_33;
        }
        operator delete(v28.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_34:
          if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_35;
          goto LABEL_40;
        }
LABEL_39:
        operator delete(v36.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_35:
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_41;
          goto LABEL_43;
        }
LABEL_40:
        operator delete(v30.__r_.__value_.__l.__data_);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_41:
          v12 = (void *)v29.__r_.__value_.__r.__words[0];
LABEL_42:
          operator delete(v12);
        }
LABEL_43:
        v23 = cf;
        if (cf)
          v24 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v24 = 0;
        if (v24)
        {
          v25 = *((_QWORD *)v5 + 5);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v36.__r_.__value_.__l.__data_) = 138412290;
            *(std::string::size_type *)((char *)v36.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
            _os_log_error_impl(&dword_227A72000, v25, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v36, 0xCu);
          }
        }
        else if (*(_BYTE *)(v2 + 24))
        {
          radio::ARIRFSCommandDriver::getRFSStatus_sync(v5);
        }
        if (cf)
          CFRelease(cf);
        MEMORY[0x22E2A3358](v34);
        goto LABEL_54;
      }
    }
  }
}

void sub_227AA1EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,CFTypeRef cf,char a35)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c80_ZTSNSt3__110shared_ptrIZN5radio19ARIRFSCommandDriver16registerRFS_syncEbE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c80_ZTSNSt3__110shared_ptrIZN5radio19ARIRFSCommandDriver16registerRFS_syncEbE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARIRFSCommandDriver::registerRFS_sync(BOOL)::$_0,std::allocator<radio::ARIRFSCommandDriver::registerRFS_sync(BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F034650;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARIRFSCommandDriver::registerRFS_sync(BOOL)::$_0,std::allocator<radio::ARIRFSCommandDriver::registerRFS_sync(BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F034650;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARIRFSCommandDriver::registerRFS_sync(BOOL)::$_0,std::allocator<radio::ARIRFSCommandDriver::registerRFS_sync(BOOL)::$_0>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_3(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

void ___ZN3ice6detail12wrapCallbackIZN5radio19ARIRFSCommandDriver17getRFSStatus_syncEvE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  radio::ARIRFSCommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  CFTypeRef v11;
  CFTypeRef v12;
  uint64_t (*v13)(uint64_t);
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type size;
  std::string *v25;
  __int128 v26;
  CFTypeRef v27;
  CFTypeRef v28;
  NSObject *v29;
  uint64_t (*v30)(uint64_t);
  NSObject *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  _BYTE *v34;
  uint64_t (*v35)(uint64_t);
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  std::string v40;
  std::string v41;
  CFTypeRef v42[2];
  std::string::size_type v43;
  CFTypeRef v44;
  CFTypeRef cf;
  _OWORD v46[4];
  __int128 v47;
  _BYTE v48[26];
  __int16 v49;
  int v50;
  std::string v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = (radio::ARIRFSCommandDriver *)v2[2];
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*v2)
        {
LABEL_54:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v46[3] = v8;
        v47 = v8;
        v46[1] = v8;
        v46[2] = v8;
        v46[0] = v8;
        AriSdk::ARI_CsiFpGetStatusRsp_SDK::ARI_CsiFpGetStatusRsp_SDK((AriSdk::ARI_CsiFpGetStatusRsp_SDK *)v46, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)v48 = operator new(0x20uLL);
        *(_OWORD *)&v48[8] = xmmword_227B1B090;
        strcpy(*(char **)v48, "registering rfs-get-status");
        checkError((AriSdk::MsgBase *)v46, (uint64_t)v48, &cf);
        if ((v48[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v48);
          if (cf)
            v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v10 = 0;
          if (v10)
            goto LABEL_45;
        }
        else
        {
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_45;
        }
        if (AriSdk::ARI_CsiFpGetStatusRsp_SDK::unpack((AriSdk::ARI_CsiFpGetStatusRsp_SDK *)v46))
        {
          *(_QWORD *)v48 = operator new(0x40uLL);
          *(_OWORD *)&v48[8] = xmmword_227B1B0A0;
          strcpy(*(char **)v48, "Failed to unpack response in registering for RFS Get Status");
          CreateError();
          v11 = cf;
          cf = v42[0];
          v42[0] = 0;
          if (v11)
            CFRelease(v11);
          if ((v48[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)v48);
            v12 = cf;
            if (cf)
              v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            else
              v13 = 0;
            if (!v13)
              goto LABEL_51;
LABEL_49:
            v31 = *((_QWORD *)v5 + 5);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v51.__r_.__value_.__l.__data_) = 138412290;
              *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
              _os_log_error_impl(&dword_227A72000, v31, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v51, 0xCu);
            }
            goto LABEL_51;
          }
          goto LABEL_45;
        }
        v14 = *(_DWORD *)v47;
        v16 = **((_DWORD **)&v47 + 1);
        v15 = *(_DWORD *)(*((_QWORD *)&v47 + 1) + 4);
        v18 = *(_DWORD *)(*((_QWORD *)&v47 + 1) + 8);
        v17 = *(_DWORD *)(*((_QWORD *)&v47 + 1) + 12);
        v36 = *(_OWORD *)(*((_QWORD *)&v47 + 1) + 16);
        v37 = *(_OWORD *)(*((_QWORD *)&v47 + 1) + 32);
        v38 = *(_OWORD *)(*((_QWORD *)&v47 + 1) + 48);
        v39 = *(_QWORD *)(*((_QWORD *)&v47 + 1) + 64);
        if (!*(_DWORD *)v47)
          goto LABEL_39;
        radio::ARIRFSCommandDriver::asString(v14, (uint64_t)&v41);
        v19 = std::string::insert(&v41, 0, "Error on getting RFS Status result: ", 0x24uLL);
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        v21 = std::string::append(&v51, ", value: ", 9uLL);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        *(_QWORD *)&v48[16] = *((_QWORD *)&v21->__r_.__value_.__l + 2);
        *(_OWORD *)v48 = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v40, v14);
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v40;
        else
          v23 = (std::string *)v40.__r_.__value_.__r.__words[0];
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
        else
          size = v40.__r_.__value_.__l.__size_;
        v25 = std::string::append((std::string *)v48, (const std::string::value_type *)v23, size);
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v43 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)v42 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        CreateError();
        v28 = v44;
        v27 = cf;
        v44 = 0;
        cf = v28;
        if (v27)
        {
          CFRelease(v27);
          if (v44)
            CFRelease(v44);
        }
        if (SHIBYTE(v43) < 0)
        {
          operator delete((void *)v42[0]);
          if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_36:
            if ((v48[23] & 0x80000000) == 0)
              goto LABEL_37;
            goto LABEL_61;
          }
        }
        else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_36;
        }
        operator delete(v40.__r_.__value_.__l.__data_);
        if ((v48[23] & 0x80000000) == 0)
        {
LABEL_37:
          if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_38;
LABEL_62:
          operator delete(v51.__r_.__value_.__l.__data_);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_63;
LABEL_39:
          v29 = *((_QWORD *)v5 + 5);
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
            goto LABEL_40;
          goto LABEL_64;
        }
LABEL_61:
        operator delete(*(void **)v48);
        if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_38:
          if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_39;
LABEL_63:
          operator delete(v41.__r_.__value_.__l.__data_);
          v29 = *((_QWORD *)v5 + 5);
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
LABEL_40:
            if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
              goto LABEL_41;
            goto LABEL_69;
          }
LABEL_64:
          radio::ARIRFSCommandDriver::asString(v14, (uint64_t)v48);
          v34 = v48;
          if (v48[23] < 0)
            v34 = *(_BYTE **)v48;
          LODWORD(v51.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
          _os_log_debug_impl(&dword_227A72000, v29, OS_LOG_TYPE_DEBUG, "#D RFS Status: %s\n", (uint8_t *)&v51, 0xCu);
          if ((v48[23] & 0x80000000) != 0)
            operator delete(*(void **)v48);
          v29 = *((_QWORD *)v5 + 5);
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
LABEL_41:
            if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
              goto LABEL_42;
            goto LABEL_70;
          }
LABEL_69:
          *(_QWORD *)v48 = 67110144;
          *(_WORD *)&v48[8] = 1024;
          *(_DWORD *)&v48[10] = v16;
          *(_WORD *)&v48[14] = 1024;
          *(_DWORD *)&v48[16] = v15;
          *(_WORD *)&v48[20] = 1024;
          *(_DWORD *)&v48[22] = v18;
          v49 = 1024;
          v50 = v17;
          _os_log_debug_impl(&dword_227A72000, v29, OS_LOG_TYPE_DEBUG, "#D \tTable[%d]\tError Code: %d, Data Type: %d, Offset: %d Group ID: %d\n", v48, 0x20u);
          v29 = *((_QWORD *)v5 + 5);
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
LABEL_42:
            if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
              goto LABEL_43;
            goto LABEL_71;
          }
LABEL_70:
          *(_QWORD *)v48 = 0x104000500;
          *(_WORD *)&v48[8] = 1024;
          *(_DWORD *)&v48[10] = v36;
          *(_WORD *)&v48[14] = 1024;
          *(_DWORD *)&v48[16] = DWORD1(v36);
          *(_WORD *)&v48[20] = 1024;
          *(_DWORD *)&v48[22] = DWORD2(v36);
          v49 = 1024;
          v50 = HIDWORD(v36);
          _os_log_debug_impl(&dword_227A72000, v29, OS_LOG_TYPE_DEBUG, "#D \tTable[%d]\tError Code: %d, Data Type: %d, Offset: %d Group ID: %d\n", v48, 0x20u);
          v29 = *((_QWORD *)v5 + 5);
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
LABEL_43:
            if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
              goto LABEL_44;
LABEL_72:
            *(_DWORD *)v48 = 67109120;
            *(_DWORD *)&v48[4] = v38;
            _os_log_debug_impl(&dword_227A72000, v29, OS_LOG_TYPE_DEBUG, "#D \tNumber of Errors: %d\n", v48, 8u);
            v29 = *((_QWORD *)v5 + 5);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
              goto LABEL_73;
LABEL_45:
            v12 = cf;
            if (cf)
              v30 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            else
              v30 = 0;
            if (v30)
              goto LABEL_49;
            goto LABEL_51;
          }
LABEL_71:
          *(_QWORD *)v48 = 0x204000500;
          *(_WORD *)&v48[8] = 1024;
          *(_DWORD *)&v48[10] = v37;
          *(_WORD *)&v48[14] = 1024;
          *(_DWORD *)&v48[16] = DWORD1(v37);
          *(_WORD *)&v48[20] = 1024;
          *(_DWORD *)&v48[22] = DWORD2(v37);
          v49 = 1024;
          v50 = HIDWORD(v37);
          _os_log_debug_impl(&dword_227A72000, v29, OS_LOG_TYPE_DEBUG, "#D \tTable[%d]\tError Code: %d, Data Type: %d, Offset: %d Group ID: %d\n", v48, 0x20u);
          v29 = *((_QWORD *)v5 + 5);
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
LABEL_44:
            if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
              goto LABEL_45;
LABEL_73:
            *(_DWORD *)v48 = 67110144;
            *(_DWORD *)&v48[4] = DWORD1(v38);
            *(_WORD *)&v48[8] = 1024;
            *(_DWORD *)&v48[10] = DWORD2(v38);
            *(_WORD *)&v48[14] = 1024;
            *(_DWORD *)&v48[16] = HIDWORD(v38);
            *(_WORD *)&v48[20] = 1024;
            *(_DWORD *)&v48[22] = v39;
            v49 = 1024;
            v50 = HIDWORD(v39);
            _os_log_debug_impl(&dword_227A72000, v29, OS_LOG_TYPE_DEBUG, "#D \tSpare: [%d,%d,%d,%d,%d]\n", v48, 0x20u);
            v12 = cf;
            if (cf)
              v35 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            else
              v35 = 0;
            if (v35)
              goto LABEL_49;
LABEL_51:
            radio::ARIRFSCommandDriver::registerRFS_sync(v5, 0);
            if (cf)
              CFRelease(cf);
            MEMORY[0x22E2A3400](v46);
            goto LABEL_54;
          }
          goto LABEL_72;
        }
        goto LABEL_62;
      }
    }
  }
}

void sub_227AA2898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,CFTypeRef cf,char a38)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c81_ZTSNSt3__110shared_ptrIZN5radio19ARIRFSCommandDriver17getRFSStatus_syncEvE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c81_ZTSNSt3__110shared_ptrIZN5radio19ARIRFSCommandDriver17getRFSStatus_syncEvE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARIRFSCommandDriver::getRFSStatus_sync(void)::$_0,std::allocator<radio::ARIRFSCommandDriver::getRFSStatus_sync(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0346F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARIRFSCommandDriver::getRFSStatus_sync(void)::$_0,std::allocator<radio::ARIRFSCommandDriver::getRFSStatus_sync(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0346F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARIRFSCommandDriver::getRFSStatus_sync(void)::$_0,std::allocator<radio::ARIRFSCommandDriver::getRFSStatus_sync(void)::$_0>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN3ice6detail12wrapCallbackIZN5radio19ARIRFSCommandDriver20getRFSStatus_V2_syncEvE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  CFTypeRef v11;
  CFTypeRef v12;
  uint64_t (*v13)(uint64_t);
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type size;
  std::string *v25;
  __int128 v26;
  CFTypeRef v27;
  CFTypeRef v28;
  NSObject *v29;
  uint64_t (*v30)(uint64_t);
  NSObject *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  _BYTE *v34;
  uint64_t (*v35)(uint64_t);
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  std::string v39;
  std::string v40;
  CFTypeRef v41[2];
  std::string::size_type v42;
  CFTypeRef v43;
  CFTypeRef cf;
  _OWORD v45[4];
  __int128 v46;
  _BYTE v47[26];
  __int16 v48;
  int v49;
  std::string v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = v2[2];
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*v2)
        {
LABEL_54:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v45[3] = v8;
        v46 = v8;
        v45[1] = v8;
        v45[2] = v8;
        v45[0] = v8;
        AriSdk::ARI_CsiFpGetStatusRspV2_SDK::ARI_CsiFpGetStatusRspV2_SDK((AriSdk::ARI_CsiFpGetStatusRspV2_SDK *)v45, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)v47 = operator new(0x20uLL);
        *(_OWORD *)&v47[8] = xmmword_227B1B090;
        strcpy(*(char **)v47, "registering rfs-get-status");
        checkError((AriSdk::MsgBase *)v45, (uint64_t)v47, &cf);
        if ((v47[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v47);
          if (cf)
            v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v10 = 0;
          if (v10)
            goto LABEL_45;
        }
        else
        {
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_45;
        }
        if (AriSdk::ARI_CsiFpGetStatusRspV2_SDK::unpack((AriSdk::ARI_CsiFpGetStatusRspV2_SDK *)v45))
        {
          *(_QWORD *)v47 = operator new(0x40uLL);
          *(_OWORD *)&v47[8] = xmmword_227B1B0A0;
          strcpy(*(char **)v47, "Failed to unpack response in registering for RFS Get Status");
          CreateError();
          v11 = cf;
          cf = v41[0];
          v41[0] = 0;
          if (v11)
            CFRelease(v11);
          if ((v47[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)v47);
            v12 = cf;
            if (cf)
              v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            else
              v13 = 0;
            if (!v13)
              goto LABEL_51;
LABEL_49:
            v31 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v50.__r_.__value_.__l.__data_) = 138412290;
              *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
              _os_log_error_impl(&dword_227A72000, v31, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v50, 0xCu);
              v12 = cf;
            }
            goto LABEL_51;
          }
          goto LABEL_45;
        }
        v14 = *(_DWORD *)v46;
        v16 = **((_DWORD **)&v46 + 1);
        v15 = *(_DWORD *)(*((_QWORD *)&v46 + 1) + 4);
        v18 = *(_DWORD *)(*((_QWORD *)&v46 + 1) + 8);
        v17 = *(_DWORD *)(*((_QWORD *)&v46 + 1) + 12);
        v36 = *(_OWORD *)(*((_QWORD *)&v46 + 1) + 16);
        v37 = *(_OWORD *)(*((_QWORD *)&v46 + 1) + 32);
        v38 = *(_QWORD *)(*((_QWORD *)&v46 + 1) + 64);
        if (!*(_DWORD *)v46)
          goto LABEL_39;
        radio::ARIRFSCommandDriver::asString(v14, (uint64_t)&v40);
        v19 = std::string::insert(&v40, 0, "Error on getting RFS Status result: ", 0x24uLL);
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        v21 = std::string::append(&v50, ", value: ", 9uLL);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        *(_QWORD *)&v47[16] = *((_QWORD *)&v21->__r_.__value_.__l + 2);
        *(_OWORD *)v47 = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v39, v14);
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v39;
        else
          v23 = (std::string *)v39.__r_.__value_.__r.__words[0];
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        else
          size = v39.__r_.__value_.__l.__size_;
        v25 = std::string::append((std::string *)v47, (const std::string::value_type *)v23, size);
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v42 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)v41 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        CreateError();
        v28 = v43;
        v27 = cf;
        v43 = 0;
        cf = v28;
        if (v27)
        {
          CFRelease(v27);
          if (v43)
            CFRelease(v43);
        }
        if (SHIBYTE(v42) < 0)
        {
          operator delete((void *)v41[0]);
          if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_36:
            if ((v47[23] & 0x80000000) == 0)
              goto LABEL_37;
            goto LABEL_61;
          }
        }
        else if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_36;
        }
        operator delete(v39.__r_.__value_.__l.__data_);
        if ((v47[23] & 0x80000000) == 0)
        {
LABEL_37:
          if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_38;
LABEL_62:
          operator delete(v50.__r_.__value_.__l.__data_);
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_63;
LABEL_39:
          v29 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
            goto LABEL_40;
          goto LABEL_64;
        }
LABEL_61:
        operator delete(*(void **)v47);
        if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_38:
          if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_39;
LABEL_63:
          operator delete(v40.__r_.__value_.__l.__data_);
          v29 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
LABEL_40:
            if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
              goto LABEL_41;
            goto LABEL_69;
          }
LABEL_64:
          radio::ARIRFSCommandDriver::asString(v14, (uint64_t)v47);
          v34 = v47;
          if (v47[23] < 0)
            v34 = *(_BYTE **)v47;
          LODWORD(v50.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
          _os_log_debug_impl(&dword_227A72000, v29, OS_LOG_TYPE_DEBUG, "#D RFS Status: %s\n", (uint8_t *)&v50, 0xCu);
          if ((v47[23] & 0x80000000) != 0)
            operator delete(*(void **)v47);
          v29 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
LABEL_41:
            if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
              goto LABEL_42;
            goto LABEL_70;
          }
LABEL_69:
          *(_QWORD *)v47 = 67110144;
          *(_WORD *)&v47[8] = 1024;
          *(_DWORD *)&v47[10] = v16;
          *(_WORD *)&v47[14] = 1024;
          *(_DWORD *)&v47[16] = v15;
          *(_WORD *)&v47[20] = 1024;
          *(_DWORD *)&v47[22] = v18;
          v48 = 1024;
          v49 = v17;
          _os_log_debug_impl(&dword_227A72000, v29, OS_LOG_TYPE_DEBUG, "#D \tTable[%d]\tError Code: %d, Data Type: %d, Offset: %d Group ID: %d\n", v47, 0x20u);
          v29 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
LABEL_42:
            if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
              goto LABEL_43;
            goto LABEL_71;
          }
LABEL_70:
          *(_QWORD *)v47 = 0x104000500;
          *(_WORD *)&v47[8] = 1024;
          *(_DWORD *)&v47[10] = v36;
          *(_WORD *)&v47[14] = 1024;
          *(_DWORD *)&v47[16] = DWORD1(v36);
          *(_WORD *)&v47[20] = 1024;
          *(_DWORD *)&v47[22] = DWORD2(v36);
          v48 = 1024;
          v49 = HIDWORD(v36);
          _os_log_debug_impl(&dword_227A72000, v29, OS_LOG_TYPE_DEBUG, "#D \tTable[%d]\tError Code: %d, Data Type: %d, Offset: %d Group ID: %d\n", v47, 0x20u);
          v29 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
LABEL_43:
            if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
              goto LABEL_44;
LABEL_72:
            *(_DWORD *)v47 = 67109120;
            *(_DWORD *)&v47[4] = v38;
            _os_log_debug_impl(&dword_227A72000, v29, OS_LOG_TYPE_DEBUG, "#D \tNumber of Errors: %d\n", v47, 8u);
            v29 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
              goto LABEL_73;
LABEL_45:
            v12 = cf;
            if (cf)
              v30 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            else
              v30 = 0;
            if (v30)
              goto LABEL_49;
            goto LABEL_51;
          }
LABEL_71:
          *(_QWORD *)v47 = 0x204000500;
          *(_WORD *)&v47[8] = 1024;
          *(_DWORD *)&v47[10] = v37;
          *(_WORD *)&v47[14] = 1024;
          *(_DWORD *)&v47[16] = DWORD1(v37);
          *(_WORD *)&v47[20] = 1024;
          *(_DWORD *)&v47[22] = DWORD2(v37);
          v48 = 1024;
          v49 = HIDWORD(v37);
          _os_log_debug_impl(&dword_227A72000, v29, OS_LOG_TYPE_DEBUG, "#D \tTable[%d]\tError Code: %d, Data Type: %d, Offset: %d Group ID: %d\n", v47, 0x20u);
          v29 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
LABEL_44:
            if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
              goto LABEL_45;
LABEL_73:
            *(_DWORD *)v47 = 67110144;
            *(_DWORD *)&v47[4] = HIDWORD(v38);
            *(_WORD *)&v47[8] = 1024;
            *(_WORD *)&v47[14] = 1024;
            *(_WORD *)&v47[20] = 1024;
            v48 = 1024;
            _os_log_debug_impl(&dword_227A72000, v29, OS_LOG_TYPE_DEBUG, "#D \tSpare: [%d,%d,%d,%d,%d]\n", v47, 0x20u);
            v12 = cf;
            if (cf)
              v35 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            else
              v35 = 0;
            if (v35)
              goto LABEL_49;
LABEL_51:
            if (v12)
              CFRelease(v12);
            MEMORY[0x22E2A3610](v45);
            goto LABEL_54;
          }
          goto LABEL_72;
        }
        goto LABEL_62;
      }
    }
  }
}

void sub_227AA3200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,CFTypeRef cf,char a36)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c84_ZTSNSt3__110shared_ptrIZN5radio19ARIRFSCommandDriver20getRFSStatus_V2_syncEvE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c84_ZTSNSt3__110shared_ptrIZN5radio19ARIRFSCommandDriver20getRFSStatus_V2_syncEvE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARIRFSCommandDriver::getRFSStatus_V2_sync(void)::$_0,std::allocator<radio::ARIRFSCommandDriver::getRFSStatus_V2_sync(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F034778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARIRFSCommandDriver::getRFSStatus_V2_sync(void)::$_0,std::allocator<radio::ARIRFSCommandDriver::getRFSStatus_V2_sync(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F034778;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARIRFSCommandDriver::getRFSStatus_V2_sync(void)::$_0,std::allocator<radio::ARIRFSCommandDriver::getRFSStatus_V2_sync(void)::$_0>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

std::string *abm::trace::getBasebandTraceDirSuffix@<X0>(abm::trace *this@<X0>, std::string *a2@<X8>)
{
  int v2;
  std::string *result;
  char **v5;

  v2 = (int)this;
  memset(a2, 170, sizeof(std::string));
  *((_BYTE *)&a2->__r_.__value_.__s + 23) = 0;
  a2->__r_.__value_.__s.__data_[0] = 0;
  result = (std::string *)capabilities::radio::vendor(this);
  if (((_DWORD)result - 2) >= 2)
  {
    if ((_DWORD)result != 1)
      return result;
    if (v2)
    {
      *((_BYTE *)&a2->__r_.__value_.__s + 23) = 5;
      strcpy((char *)a2, "-qdss");
      return result;
    }
    v5 = &abm::trace::kEURTraceSnapshotDirectorySuffix;
  }
  else
  {
    v5 = &abm::trace::kICETraceSnapshotDirectorySuffix;
  }
  return std::string::__assign_external(a2, *v5);
}

void sub_227AA34D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void abm::trace::getCoreDumpDirSuffix(std::string *a1@<X8>)
{
  unsigned __int8 v3;
  capabilities::radio *v4;
  int v5;
  char **v6;

  v3 = atomic_load((unsigned __int8 *)&_MergedGlobals_0);
  if ((v3 & 1) == 0)
  {
    v4 = (capabilities::radio *)__cxa_guard_acquire(&_MergedGlobals_0);
    if ((_DWORD)v4)
    {
      v5 = capabilities::radio::maverick(v4);
      v6 = &abm::trace::kEURCoreDumpSnapshotDirectorySuffix;
      if (!v5)
        v6 = &abm::trace::kCoreDumpSnapshotDirectorySuffix;
      std::string::basic_string[abi:ne180100]<0>(&xmmword_253DF24B0, *v6);
      __cxa_guard_release(&_MergedGlobals_0);
    }
  }
  if (byte_253DF24C7 < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)xmmword_253DF24B0, *((std::string::size_type *)&xmmword_253DF24B0 + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = xmmword_253DF24B0;
    a1->__r_.__value_.__r.__words[2] = unk_253DF24C0;
  }
}

void sub_227AA3658(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_MergedGlobals_0);
  _Unwind_Resume(a1);
}

uint64_t abm::trace::isSupported(uint64_t a1)
{
  const char *v1;
  int v2;
  capabilities::radio *v3;
  const char *v4;
  capabilities::radio *v5;
  const char *v6;
  capabilities::radio *v7;
  capabilities::trace *v8;
  capabilities::trace *v9;

  v1 = (const char *)a1;
  v2 = *(char *)(a1 + 23);
  if (v2 < 0)
  {
    v3 = (capabilities::radio *)strcasecmp(*(const char **)a1, (const char *)abm::trace::kDIAG);
    if ((_DWORD)v3)
    {
LABEL_3:
      v4 = v1;
      if ((v2 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v3 = (capabilities::radio *)strcasecmp((const char *)a1, (const char *)abm::trace::kDIAG);
    if ((_DWORD)v3)
      goto LABEL_3;
  }
  if ((capabilities::radio::maverick(v3) & 1) != 0)
    return 1;
  LOBYTE(v2) = v1[23];
  v4 = v1;
  if ((v2 & 0x80) == 0)
  {
LABEL_4:
    v5 = (capabilities::radio *)strcasecmp(v4, (const char *)abm::trace::kICETrace);
    if ((_DWORD)v5)
      goto LABEL_5;
LABEL_12:
    if ((capabilities::radio::ice(v5) & 1) != 0)
      return 1;
    LOBYTE(v2) = v1[23];
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_11:
  v5 = (capabilities::radio *)strcasecmp(*(const char **)v1, (const char *)abm::trace::kICETrace);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_5:
  if ((v2 & 0x80) == 0)
  {
LABEL_6:
    v6 = v1;
    if (!strcasecmp(v1, (const char *)abm::trace::kBasebandTrace))
      return 1;
    goto LABEL_15;
  }
LABEL_14:
  v6 = *(const char **)v1;
  if (!strcasecmp(*(const char **)v1, (const char *)abm::trace::kBasebandTrace))
    return 1;
LABEL_15:
  v7 = (capabilities::radio *)strcasecmp(v6, (const char *)abm::trace::kEURCoreDump);
  if ((_DWORD)v7)
  {
    if ((v2 & 0x80) == 0)
      goto LABEL_17;
  }
  else
  {
    if ((capabilities::radio::maverick(v7) & 1) != 0)
      return 1;
    if ((v1[23] & 0x80) == 0)
    {
LABEL_17:
      if (!strcasecmp(v1, (const char *)abm::trace::kCoreDump)
        || !strcasecmp(v1, (const char *)abm::trace::kSystemLogs))
      {
        return 1;
      }
      v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kCompression);
      if (!(_DWORD)v8)
        return capabilities::trace::allowed(v8);
      v9 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kBasebandIPC);
      if ((_DWORD)v9)
      {
        v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kIPC);
        if (!(_DWORD)v8)
          return capabilities::trace::allowed(v8);
        v8 = (capabilities::trace *)strcasecmp(v1, "KernelPCI");
        if (!(_DWORD)v8)
          return capabilities::trace::allowed(v8);
        v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kTapToRadar);
        if (!(_DWORD)v8)
          return capabilities::trace::allowed(v8);
        goto LABEL_34;
      }
      return capabilities::trace::supportsBasebandIPCTrace(v9);
    }
  }
  v1 = *(const char **)v1;
  if (!strcasecmp(v1, (const char *)abm::trace::kCoreDump) || !strcasecmp(v1, (const char *)abm::trace::kSystemLogs))
    return 1;
  v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kCompression);
  if (!(_DWORD)v8)
    return capabilities::trace::allowed(v8);
  v9 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kBasebandIPC);
  if ((_DWORD)v9)
  {
    v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kIPC);
    if (!(_DWORD)v8)
      return capabilities::trace::allowed(v8);
    v8 = (capabilities::trace *)strcasecmp(v1, "KernelPCI");
    if (!(_DWORD)v8)
      return capabilities::trace::allowed(v8);
    v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kTapToRadar);
    if (!(_DWORD)v8)
      return capabilities::trace::allowed(v8);
LABEL_34:
    if (strcasecmp(v1, (const char *)abm::trace::kProfile))
    {
      v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kTraceTailspin);
      if ((_DWORD)v8)
      {
        v8 = (capabilities::trace *)strcasecmp(v1, "Settings");
        if ((_DWORD)v8)
        {
          v8 = (capabilities::trace *)strcasecmp(v1, "LogFilter");
          if ((_DWORD)v8)
            return 0;
        }
      }
      return capabilities::trace::allowed(v8);
    }
    return 1;
  }
  return capabilities::trace::supportsBasebandIPCTrace(v9);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

void abm::debug::registerLogServer(uint64_t a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  block[4] = a1;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce != -1)
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
}

void ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  xpc_object_t value;
  xpc_object_t v3;
  uint64_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  capabilities::abs *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  capabilities::radio *v26;
  capabilities::radio *v27;

  ctu::LogServer::getConfig(**(ctu::LogServer ***)(a1 + 32));
  value = xpc_dictionary_get_value((xpc_object_t)0xAAAAAAAAAAAAAAAALL, "kDomainLogLevels");
  v3 = value;
  v4 = MEMORY[0x24BDACFA0];
  if (value)
  {
    xpc_retain(value);
  }
  else
  {
    v3 = xpc_null_create();
    if (!v3)
    {
      v5 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x22E2A4C30](v3) == v4)
  {
    xpc_retain(v3);
    v5 = v3;
  }
  else
  {
    v5 = xpc_null_create();
  }
LABEL_8:
  xpc_release(v3);
  if (MEMORY[0x22E2A4C30](v5) == v4)
  {
    v7 = v5;
  }
  else
  {
    v6 = xpc_dictionary_create(0, 0, 0);
    if (v6 || (v6 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x22E2A4C30](v6) == v4)
      {
        xpc_retain(v6);
        v7 = v6;
      }
      else
      {
        v7 = xpc_null_create();
      }
    }
    else
    {
      v7 = xpc_null_create();
      v6 = 0;
    }
    xpc_release(v6);
    v8 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v8);
  }
  v9 = xpc_int64_create(1);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v7, "libetl", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_int64_create(1);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v7, "libtu", v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(1);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v7, "trace.diag.cfg", v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = xpc_int64_create(1);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v7, "trace.diag.svc", v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = xpc_int64_create(1);
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(v7, "libktl", v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  if (v7)
  {
    xpc_retain(v7);
    v19 = v7;
  }
  else
  {
    v19 = xpc_null_create();
  }
  xpc_dictionary_set_value((xpc_object_t)0xAAAAAAAAAAAAAAAALL, "kDomainLogLevels", v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  xpc_retain((xpc_object_t)0xAAAAAAAAAAAAAAAALL);
  ctu::LogServer::updateConfig();
  xpc_release((xpc_object_t)0xAAAAAAAAAAAAAAAALL);
  v21 = (capabilities::abs *)operator new(0x10uLL);
  v22 = *(_QWORD **)(a1 + 32);
  *(_QWORD *)v21 = *v22;
  v23 = v22[1];
  *((_QWORD *)v21 + 1) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 16);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  _MergedGlobals_1 = (uint64_t)v21;
  if (!qword_253DF24D0)
  {
    v21 = (capabilities::abs *)os_log_create("com.apple.telephony.abm", "libtu");
    qword_253DF24D0 = (uint64_t)v21;
  }
  capabilities::abs::TUDebugFlags(v21);
  TelephonyUtilDebugSetFlags();
  v26 = (capabilities::radio *)TelephonyUtilDebugRegisterDelegate();
  v27 = (capabilities::radio *)capabilities::radio::ice(v26);
  if ((_DWORD)v27)
  {
    if (!qword_253DF24D8)
      qword_253DF24D8 = (uint64_t)os_log_create("com.apple.telephony.abm", "libktl");
    KTLDebugRegisterDelegate();
    KTLDebugSetFlags();
  }
  else
  {
    capabilities::radio::maverick(v27);
  }
  if (!qword_253DF24E0)
    qword_253DF24E0 = (uint64_t)os_log_create("com.apple.telephony.abm", "bbu");
  BBUpdaterRegisterGlobalLogSink();
  xpc_release(v7);
  xpc_release((xpc_object_t)0xAAAAAAAAAAAAAAAALL);
}

void sub_227AA3E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  xpc_release(a10);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrintTelephonyUtil(abm::debug *this, const char *a2, const char *a3, char *a4)
{
  abm::debug::handleDebugPrint(20, 0, this, (uint64_t)a2, (uint64_t)a3);
}

void abm::debug::handleDebugPrintBinaryTelephonyUtil(uint64_t a1, int a2, uint64_t a3, int a4)
{
  const char *v6;
  const char *v7;

  v6 = "misc";
  if (!a2)
    v6 = "send";
  if (a2 == 1)
    v7 = "recv";
  else
    v7 = v6;
  abm::debug::handleDebugPrintBinary(a1, 0, (uint64_t)v7, a3, a4);
}

void abm::debug::handleDebugPrintKTL(abm::debug *this, const char *a2, const char *a3, char *a4)
{
  abm::debug::handleDebugPrint(20, 2, this, (uint64_t)a2, (uint64_t)a3);
}

void abm::debug::handleErrorPrintKTL(abm::debug *this, const char *a2, const char *a3, char *a4)
{
  abm::debug::handleDebugPrint(80, 2, this, (uint64_t)a2, (uint64_t)a3);
}

void abm::debug::handleDebugPrintBinaryKTL(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  const char *v6;

  if (a2 > 3)
    v6 = "";
  else
    v6 = off_24F034870[a2];
  abm::debug::handleDebugPrintBinary(a1, 2, (uint64_t)v6, a3, a4);
}

uint64_t abm::debug::handleDebugPrintBBU(abm::debug *this, void *a2, const char *a3, const char *a4)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  abm::debug *v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  void **v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void *__dst[3];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *__p[2];
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35 = 0xAAAAAAAAAAAAAAAALL;
  v45 = v5;
  v44 = v5;
  v43 = v5;
  v42 = v5;
  v41 = v5;
  v40 = v5;
  v39 = v5;
  v38 = v5;
  v37 = v5;
  *(_OWORD *)__p = v5;
  v34 = v5;
  v31 = v5;
  v32 = v5;
  v29 = v5;
  v30 = v5;
  v6 = MEMORY[0x24BEDB870];
  v7 = MEMORY[0x24BEDB870] + 64;
  v36 = MEMORY[0x24BEDB870] + 64;
  v8 = (uint64_t *)MEMORY[0x24BEDB800];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v28 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v28 + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v10, &v29);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v28 = v6 + 24;
  v36 = v7;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v29 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v34 = 0u;
  LODWORD(v35) = 16;
  v12 = (_QWORD *)std::ostream::operator<<();
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)":", 1);
  v14 = strlen(a3);
  v15 = (abm::debug *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)a3, v14);
  memset(__dst, 170, sizeof(__dst));
  if ((v35 & 0x10) != 0)
  {
    v21 = *((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1) < (unint64_t)v32)
    {
      *((_QWORD *)&v34 + 1) = v32;
      v21 = v32;
    }
    v22 = (const void *)*((_QWORD *)&v31 + 1);
    v19 = v21 - *((_QWORD *)&v31 + 1);
    if ((unint64_t)(v21 - *((_QWORD *)&v31 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v35 & 8) == 0)
    {
      v19 = 0;
      HIBYTE(__dst[2]) = 0;
      v20 = __dst;
      goto LABEL_14;
    }
    v22 = (const void *)v30;
    v19 = v31 - v30;
    if ((_QWORD)v31 - (_QWORD)v30 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_22:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    v20 = (void **)operator new(v23 + 1);
    __dst[1] = (void *)v19;
    __dst[2] = (void *)(v24 | 0x8000000000000000);
    __dst[0] = v20;
    goto LABEL_13;
  }
  HIBYTE(__dst[2]) = v19;
  v20 = __dst;
  if (v19)
LABEL_13:
    v15 = (abm::debug *)memmove(v20, v22, v19);
LABEL_14:
  *((_BYTE *)v20 + v19) = 0;
  v25 = __dst;
  if (SHIBYTE(__dst[2]) < 0)
    v25 = (void **)__dst[0];
  abm::debug::handleDebugPrintBBUHelper(v15, v16, v17, v18, v25);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  v28 = *v8;
  *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = v8[3];
  *(_QWORD *)&v29 = v11 + 16;
  if (SBYTE7(v34) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22E2A47D4](&v36);
}

void sub_227AA4258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrint(uint64_t a1, int a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v11;
  __int128 v12;
  uint64_t v13;
  ctu::Clock *v14;
  std::string *v15;
  const char *v16;
  size_t v17;
  void *v18;
  void **v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::string *v24;
  int v25;
  size_t size;
  std::string *data;
  _BYTE *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  char *v31;
  int v32;
  char *v33;
  std::string::size_type v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  NSObject *v40;
  std::string::__raw *v41;
  std::string::size_type v42;
  std::string::pointer v43;
  NSObject *v44;
  std::string::__raw *v45;
  std::string::__raw *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  std::string::pointer v52;
  std::__shared_weak_count *v53;
  void *__dst[2];
  unint64_t v55;
  std::string *v56;
  std::__shared_weak_count *v57;
  _OWORD v58[3];
  unint64_t v59;
  std::__shared_weak_count *v61;
  uint8_t buf[4];
  std::string::__raw *v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)_MergedGlobals_1;
  if (!_MergedGlobals_1)
    return;
  v6 = *(std::__shared_weak_count **)(_MergedGlobals_1 + 8);
  if (!v6)
    return;
  v11 = std::__shared_weak_count::lock(v6);
  v61 = v11;
  if (!v11)
    return;
  if (!*v5)
  {
    v20 = v11;
LABEL_73:
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    return;
  }
  v59 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v58[1] = v12;
  v58[2] = v12;
  v58[0] = v12;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v58);
  if (a3 && *a3)
  {
    v13 = MEMORY[0x22E2A2FC8](v58, a3);
    MEMORY[0x22E2A2FC8](v13, ": ");
  }
  MEMORY[0x22E2A2E0C](&v56, a4, a5);
  ctu::operator<<();
  v14 = (ctu::Clock *)MEMORY[0x22E2A2E24](&v56);
  ctu::Clock::now_in_nanoseconds(v14);
  v15 = (std::string *)operator new(0x60uLL);
  v16 = abm::debug::kLogDomainMap[a2];
  v17 = strlen(v16);
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v21 = v17 | 7;
    v22 = v21 + 1;
    v19 = (void **)operator new(v21 + 1);
    __dst[1] = v18;
    v55 = v22 | 0x8000000000000000;
    __dst[0] = v19;
    goto LABEL_16;
  }
  HIBYTE(v55) = v17;
  v19 = __dst;
  if (v17)
LABEL_16:
    memmove(v19, v16, (size_t)v18);
  *((_BYTE *)v18 + (_QWORD)v19) = 0;
  MEMORY[0x22E2A2DF4](v58);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v58);
  ctu::LogMessage::LogMessage();
  v56 = v15;
  v23 = (std::__shared_weak_count *)operator new(0x20uLL);
  v23->__vftable = (std::__shared_weak_count_vtbl *)off_24F034830;
  v23->__shared_owners_ = 0;
  v23->__shared_weak_owners_ = 0;
  v23[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
  v57 = v23;
  if (SHIBYTE(v55) < 0)
  {
    operator delete(__dst[0]);
    v24 = v15 + 2;
    v25 = SHIBYTE(v15[2].__r_.__value_.__r.__words[2]);
    if ((v25 & 0x80000000) == 0)
      goto LABEL_19;
  }
  else
  {
    v24 = v15 + 2;
    v25 = SHIBYTE(v15[2].__r_.__value_.__r.__words[2]);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_19:
      size = v25;
      data = v24;
      goto LABEL_22;
    }
  }
  data = (std::string *)v15[2].__r_.__value_.__l.__data_;
  size = v15[2].__r_.__value_.__l.__size_;
LABEL_22:
  v28 = memchr(data, 10, size);
  if (v28)
    v29 = (unint64_t)v28;
  else
    v29 = (unint64_t)data + size;
  if (v29 - (_QWORD)data != size)
  {
    v30 = (unsigned __int8 *)(v29 + 1);
    if ((std::string *)(v29 + 1) != (std::string *)((char *)data + size))
    {
      v31 = (char *)data + size + ~v29;
      do
      {
        v32 = *v30;
        if (v32 != 10)
          *(_BYTE *)v29++ = v32;
        ++v30;
        --v31;
      }
      while (v31);
      LOBYTE(v25) = *((_BYTE *)&v15[2].__r_.__value_.__s + 23);
    }
  }
  if ((v25 & 0x80) == 0)
  {
    v33 = (char *)v24 + v25;
    v34 = v29 - (_QWORD)v24;
    if (v25 >= v29 - (unint64_t)v24)
      goto LABEL_34;
LABEL_52:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  v43 = v15[2].__r_.__value_.__l.__data_;
  v42 = v15[2].__r_.__value_.__l.__size_;
  v33 = &v43[v42];
  v34 = v29 - (_QWORD)v43;
  if (v42 < v29 - (unint64_t)v43)
    goto LABEL_52;
LABEL_34:
  if (&v33[-v29] == (char *)-1)
  {
    if ((v25 & 0x80) != 0)
    {
      v52 = v15[2].__r_.__value_.__l.__data_;
      v15[2].__r_.__value_.__l.__size_ = v34;
      v52[v34] = 0;
      v35 = v57;
      v53 = v57;
      if (!v57)
        goto LABEL_38;
    }
    else
    {
      *((_BYTE *)&v15[2].__r_.__value_.__s + 23) = v34 & 0x7F;
      v24->__r_.__value_.__s.__data_[v34] = 0;
      v35 = v57;
      v53 = v57;
      if (!v57)
        goto LABEL_38;
    }
  }
  else
  {
    std::string::__erase_external_with_move(v24, v34, (std::string::size_type)&v33[-v29]);
    v35 = v57;
    v53 = v57;
    if (!v57)
      goto LABEL_38;
  }
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
LABEL_38:
  ctu::LogServer::log();
  if (v53)
  {
    v38 = (unint64_t *)&v53->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (a2)
  {
    if (a2 == 2)
    {
      v44 = qword_253DF24D8;
      if (qword_253DF24D8 && os_log_type_enabled((os_log_t)qword_253DF24D8, OS_LOG_TYPE_DEBUG))
      {
        v45 = (std::string::__raw *)&v56[2];
        if (SHIBYTE(v56[2].__r_.__value_.__r.__words[2]) < 0)
          v45 = (std::string::__raw *)v45->__words[0];
        *(_DWORD *)buf = 136315138;
        v63 = v45;
        _os_log_debug_impl(&dword_227A72000, v44, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
      }
    }
    else if (a2 == 3)
    {
      v40 = qword_253DF24E0;
      if (qword_253DF24E0)
      {
        if (os_log_type_enabled((os_log_t)qword_253DF24E0, OS_LOG_TYPE_DEFAULT))
        {
          v41 = (std::string::__raw *)&v56[2];
          if (SHIBYTE(v56[2].__r_.__value_.__r.__words[2]) < 0)
            v41 = (std::string::__raw *)v41->__words[0];
          *(_DWORD *)buf = 136315138;
          v63 = v41;
LABEL_66:
          _os_log_impl(&dword_227A72000, v40, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }
      }
    }
  }
  else
  {
    v40 = qword_253DF24D0;
    if (qword_253DF24D0 && os_log_type_enabled((os_log_t)qword_253DF24D0, OS_LOG_TYPE_DEFAULT))
    {
      v46 = (std::string::__raw *)&v56[2];
      if (SHIBYTE(v56[2].__r_.__value_.__r.__words[2]) < 0)
        v46 = (std::string::__raw *)v46->__words[0];
      *(_DWORD *)buf = 136315138;
      v63 = v46;
      goto LABEL_66;
    }
  }
  v47 = v57;
  if (v57)
  {
    v48 = (unint64_t *)&v57->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  MEMORY[0x22E2A2E24](v58);
  v20 = v61;
  if (v61)
    goto LABEL_73;
}

void sub_227AA482C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  MEMORY[0x22E2A2E24](&a24);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v24 - 128);
  _Unwind_Resume(a1);
}

void sub_227AA48C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v1 - 128);
  _Unwind_Resume(a1);
}

void sub_227AA48D8()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x227AA4920);
}

void sub_227AA4904(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  if (a16 < 0)
    operator delete(__p);
  operator delete(v16);
  JUMPOUT(0x227AA4920);
}

void std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000227B1B139)
    return a1 + 24;
  if (((v3 & 0x8000000227B1B139 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000227B1B139))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000227B1B139 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::string::__erase_external_with_move(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  int v4;
  std::string::size_type size;
  std::string *v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string::size_type v9;

  if (!__n)
    return;
  v4 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
    v7 = size - __pos;
    if (size - __pos >= __n)
      v8 = __n;
    else
      v8 = size - __pos;
    if (size - __pos <= __n)
      goto LABEL_8;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v6 = this;
    v7 = size - __pos;
    if (size - __pos >= __n)
      v8 = __n;
    else
      v8 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
    if (v7 <= __n)
      goto LABEL_8;
  }
  memmove((char *)v6 + __pos, (char *)v6 + __pos + v8, v7 - v8);
  LOBYTE(v4) = *((_BYTE *)&this->__r_.__value_.__s + 23);
LABEL_8:
  v9 = size - v8;
  if ((v4 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = v9;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
  v6->__r_.__value_.__s.__data_[v9] = 0;
}

void abm::debug::handleDebugPrintBinary(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ctu::Clock *v17;
  std::__shared_weak_count_vtbl *v18;
  const char *v19;
  size_t v20;
  void *v21;
  void **v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  void **v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *__dst[2];
  unint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  void *__p[2];
  uint64_t v43;
  _OWORD v44[3];
  unint64_t v45;
  std::__shared_weak_count *v47;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  void **v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)_MergedGlobals_1;
  if (!_MergedGlobals_1)
    return;
  v7 = *(std::__shared_weak_count **)(_MergedGlobals_1 + 8);
  if (!v7)
    return;
  v11 = std::__shared_weak_count::lock(v7);
  v47 = v11;
  if (!v11)
    return;
  if (!*v5)
  {
    v23 = v11;
LABEL_39:
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    return;
  }
  v45 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v44[1] = v12;
  v44[2] = v12;
  v44[0] = v12;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v44);
  v13 = MEMORY[0x22E2A2FC8](v44, a1);
  MEMORY[0x22E2A2FC8](v13, " (");
  v14 = ctu::operator<<();
  v15 = MEMORY[0x22E2A2FC8](v14, ") ");
  v16 = MEMORY[0x22E2A2FC8](v15, a3);
  MEMORY[0x22E2A2FC8](v16, "\n");
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v43 = 0xAAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAA00;
  ctu::assign();
  v17 = (ctu::Clock *)MEMORY[0x22E2A2FD4](v44, __p);
  ctu::Clock::now_in_nanoseconds(v17);
  v18 = (std::__shared_weak_count_vtbl *)operator new(0x60uLL);
  v19 = abm::debug::kLogDomainMap[a2];
  v20 = strlen(v19);
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v24 = v20 | 7;
    v25 = v24 + 1;
    v22 = (void **)operator new(v24 + 1);
    __dst[1] = v21;
    v39 = v25 | 0x8000000000000000;
    __dst[0] = v22;
    goto LABEL_13;
  }
  HIBYTE(v39) = v20;
  v22 = __dst;
  if (v20)
LABEL_13:
    memmove(v22, v19, (size_t)v21);
  *((_BYTE *)v21 + (_QWORD)v22) = 0;
  MEMORY[0x22E2A2DF4](v44);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v44);
  ctu::LogMessage::LogMessage();
  v40 = v18;
  v26 = (std::__shared_weak_count *)operator new(0x20uLL);
  v26->__shared_owners_ = 0;
  v27 = (unint64_t *)&v26->__shared_owners_;
  v26->__vftable = (std::__shared_weak_count_vtbl *)off_24F034830;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v18;
  v41 = v26;
  if (SHIBYTE(v39) < 0)
    operator delete(__dst[0]);
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  ctu::LogServer::log();
  if (v26)
  {
    v29 = (unint64_t *)&v26->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (a2)
  {
    if (a2 == 2)
    {
      v31 = qword_253DF24D8;
      if (qword_253DF24D8)
      {
        if (os_log_type_enabled((os_log_t)qword_253DF24D8, OS_LOG_TYPE_DEBUG))
        {
          v32 = __p;
          if (v43 < 0)
            v32 = (void **)__p[0];
          goto LABEL_46;
        }
      }
    }
  }
  else
  {
    v31 = qword_253DF24D0;
    if (qword_253DF24D0 && os_log_type_enabled((os_log_t)qword_253DF24D0, OS_LOG_TYPE_DEBUG))
    {
      v32 = __p;
      if (v43 < 0)
        v32 = (void **)__p[0];
LABEL_46:
      *(_DWORD *)buf = 67109634;
      v49 = a5;
      v50 = 2080;
      v51 = a3;
      v52 = 2080;
      v53 = v32;
      _os_log_debug_impl(&dword_227A72000, v31, OS_LOG_TYPE_DEBUG, "(%d) %s: %s", buf, 0x1Cu);
      v33 = v41;
      if (!v41)
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  v33 = v41;
  if (!v41)
    goto LABEL_36;
LABEL_32:
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_36:
  if (SHIBYTE(v43) < 0)
    operator delete(__p[0]);
  MEMORY[0x22E2A2E24](v44);
  v23 = v47;
  if (v47)
    goto LABEL_39;
}

void sub_227AA4EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a24 < 0)
  {
    operator delete(__p);
    MEMORY[0x22E2A2E24](&a25);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
    _Unwind_Resume(a1);
  }
  MEMORY[0x22E2A2E24](&a25);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrintBBUHelper(abm::debug *this, void *a2, uint64_t a3, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  abm::debug::handleDebugPrint(20, 3, "", (uint64_t)"%s", (uint64_t)va);
}

uint64_t desense::ARICommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  desense::CommandDriver *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  std::__shared_weak_count *v23;

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = (desense::CommandDriver *)operator new(0xD0uLL);
  v7 = (uint64_t)v6;
  v8 = (std::__shared_weak_count *)a1[1];
  v22 = *a1;
  v23 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v21[0] = v11;
  v21[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  desense::ARICommandDriver::ARICommandDriver(v6, (uint64_t)&v22, (uint64_t)v21);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<desense::ARICommandDriver>::shared_ptr[abi:ne180100]<desense::ARICommandDriver,std::shared_ptr<desense::ARICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::ARICommandDriver>(desense::ARICommandDriver*)::{lambda(desense::ARICommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 64))(*a3);
}

void sub_227AA50E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_227AA50FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

desense::CommandDriver *desense::ARICommandDriver::ARICommandDriver(desense::CommandDriver *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *object;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(std::__shared_weak_count **)(a3 + 8);
  v17 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  desense::CommandDriver::CommandDriver();
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *(_QWORD *)a1 = off_24F0348A0;
  v14 = *((_QWORD *)a1 + 11);
  object = v14;
  if (v14)
    dispatch_retain(v14);
  desense::CommandDriver::getName(a1);
  ice::Client::create();
  if (object)
    dispatch_release(object);
  return a1;
}

void sub_227AA5264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_227AA5280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  void **v10;

  if (object)
    dispatch_release(object);
  desense::CommandDriver::~CommandDriver(v10);
  _Unwind_Resume(a1);
}

void desense::CommandDriver::~CommandDriver(void **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  NSObject *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;

  *this = off_24F034A00;
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
  v2 = (std::__shared_weak_count *)this[20];
  if (!v2)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this[16] = &off_24F034A58;
    v5 = (unsigned int *)this[18];
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_7:
    this[16] = &off_24F034A58;
    v5 = (unsigned int *)this[18];
    if (!v5)
      goto LABEL_16;
  }
  v6 = v5 + 2;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    v9 = v5 + 3;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
  }
LABEL_16:
  this[13] = &off_24F034B18;
  v12 = (unsigned int *)this[15];
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
      v16 = v12 + 3;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 24))(v12);
    }
  }
  *this = off_24F034B88;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v19 = this[12];
  if (v19)
    dispatch_release(v19);
  v20 = this[11];
  if (v20)
    dispatch_release(v20);
  v21 = (std::__shared_weak_count *)this[10];
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

void desense::ARICommandDriver::~ARICommandDriver(desense::ARICommandDriver *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint8_t v6[16];

  *(_QWORD *)this = off_24F0348A0;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v6, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    desense::CommandDriver::~CommandDriver((void **)this);
  }
  else
  {
LABEL_7:
    desense::CommandDriver::~CommandDriver((void **)this);
  }
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint8_t v6[16];

  *(_QWORD *)this = off_24F0348A0;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v6, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    desense::CommandDriver::~CommandDriver((void **)this);
  }
  else
  {
LABEL_7:
    desense::CommandDriver::~CommandDriver((void **)this);
  }
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;
  uint8_t v7[16];

  *(_QWORD *)this = off_24F0348A0;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v7, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  desense::CommandDriver::~CommandDriver((void **)this);
  operator delete(v6);
}

void desense::ARICommandDriver::init(desense::ARICommandDriver *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[5];
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v2 = MEMORY[0x24BDAC760];
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 0x40000000;
  v14[2] = ___ZN7desense16ARICommandDriver4initEv_block_invoke;
  v14[3] = &__block_descriptor_tmp_5_1;
  v14[4] = this;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v3 || (v4 = *((_QWORD *)this + 9), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  v7 = *((_QWORD *)this + 11);
  block[0] = v2;
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN7desense13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_24F034F28;
  block[5] = v4;
  v16 = v6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  block[4] = v14;
  dispatch_async(v7, block);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

uint64_t ___ZN7desense16ARICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v27;
  _QWORD v28[5];
  _QWORD v29[5];
  uint8_t buf[8];
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  void *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  _QWORD aBlock[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  v3 = *(_QWORD *)(v1 + 192);
  v4 = MEMORY[0x24BDAC760];
  v29[0] = MEMORY[0x24BDAC760];
  v29[1] = 0x40000000;
  v29[2] = ___ZN7desense16ARICommandDriver4initEv_block_invoke_2;
  v29[3] = &__block_descriptor_tmp_5;
  v29[4] = v1;
  *(_QWORD *)buf = v29;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v3, 0, (uint64_t *)buf);
  v5 = *(_QWORD *)(v1 + 192);
  v28[0] = v4;
  v28[1] = 0x40000000;
  v28[2] = ___ZN7desense16ARICommandDriver4initEv_block_invoke_3;
  v28[3] = &__block_descriptor_tmp_4_2;
  v28[4] = v1;
  *(_QWORD *)buf = v28;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v5, 1, (uint64_t *)buf);
  v7 = *(std::__shared_weak_count_vtbl **)(v1 + 72);
  v6 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v6 || (v8 = std::__shared_weak_count::lock(v6), (v27 = v8) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = (std::__shared_weak_count *)operator new(0x38uLL);
  v16->__shared_owners_ = 0;
  v17 = (unint64_t *)&v16->__shared_owners_;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = v7;
  v16->__vftable = (std::__shared_weak_count_vtbl *)off_24F034EB8;
  v16[1].__shared_owners_ = (uint64_t)v9;
  v16[1].__shared_weak_owners_ = (uint64_t)desense::ARICommandDriver::handleCurrentFrequencyInfoIndication_sync;
  v16[2].__vftable = 0;
  *(_QWORD *)buf = v4;
  v31 = 1174405120;
  v32 = ___ZN3ice6detail12wrapCallbackIZNS_6Client13regIndicationIN7desense13CommandDriverENS4_16ARICommandDriverEvJPKhjEEEvjNSt3__110shared_ptrIT_EEMT0_FT1_DpT2_EEUlS8_jE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENS9_17integral_constantIiLi2EEEOSB__block_invoke;
  v33 = &__block_descriptor_tmp_10_2;
  v34 = v16 + 1;
  v35 = v16;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_4;
  aBlock[3] = &unk_24F034F00;
  aBlock[4] = buf;
  v19 = _Block_copy(aBlock);
  v20 = v35;
  if (v35)
  {
    v21 = (unint64_t *)&v35->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  do
    v23 = __ldaxr(v17);
  while (__stlxr(v23 - 1, v17));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  *(_QWORD *)buf = v19;
  ice::Client::regIndicationInternal();
  if (*(_QWORD *)buf)
    _Block_release(*(const void **)buf);
  std::__shared_weak_count::__release_weak(v9);
  if (v27)
  {
    v24 = (unint64_t *)&v27->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return ice::Client::start(*(ice::Client **)(v1 + 192));
}

void sub_227AA5AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *aBlock)
{
  std::__shared_weak_count *v21;

  if (aBlock)
    _Block_release(aBlock);
  std::__shared_weak_count::__release_weak(v21);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7desense16ARICommandDriver4initEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  __int128 v4;
  pthread_mutex_t *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  char *v21;
  char *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  __int128 v30;
  uint64_t **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  _QWORD v50[4];
  __int128 v51;
  __int128 v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t **v56;
  unsigned int *v57;
  int v58;
  __int128 v59;
  __int128 v60;
  std::runtime_error v61;
  uint8_t buf[16];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  void *__p[2];
  pthread_mutex_t *v73[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unint64_t v77;
  uint64_t v78;
  uint8_t *v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEBUG, "#D Started", buf, 2u);
  }
  v3 = *(_QWORD *)(v1 + 112);
  v58 = 0;
  v56 = 0;
  v57 = 0;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v70 = v4;
  v71 = v4;
  v68 = v4;
  v69 = v4;
  v66 = v4;
  v67 = v4;
  v64 = v4;
  v65 = v4;
  *(_OWORD *)buf = v4;
  v63 = v4;
  v5 = *(pthread_mutex_t **)(v3 + 24);
  __p[0] = (void *)10;
  __p[1] = buf;
  v73[0] = 0;
  v73[1] = v5;
  pthread_mutex_lock(v5);
  v6 = *(unsigned int **)(v3 + 8);
  if (!v6)
  {
    v8 = *(uint64_t ***)v3;
    goto LABEL_16;
  }
  v7 = atomic_load(v6 + 2);
  v8 = *(uint64_t ***)v3;
  if (v7 == 1)
  {
    v9 = *v8;
    v10 = *(_QWORD *)(v3 + 16);
    if ((uint64_t *)v10 == *v8)
    {
      v10 = v9[1];
      *(_QWORD *)&v59 = v10;
      if (v9 == (uint64_t *)v10)
      {
LABEL_12:
        *(_QWORD *)(v3 + 16) = v10;
        goto LABEL_13;
      }
    }
    else
    {
      *(_QWORD *)&v59 = *(_QWORD *)(v3 + 16);
    }
    v11 = *(_QWORD *)(v10 + 16);
    if (*(_BYTE *)(v11 + 24))
    {
      v10 = *(_QWORD *)(v10 + 8);
    }
    else
    {
      v10 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v11 + 64), (uint64_t **)&v59);
      v8 = *(uint64_t ***)v3;
    }
    goto LABEL_12;
  }
LABEL_13:
  v6 = *(unsigned int **)(v3 + 8);
  if (v6)
  {
    v12 = v6 + 2;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
LABEL_16:
  v14 = v57;
  v56 = v8;
  v57 = v6;
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
      v18 = v14 + 3;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
    }
  }
  pthread_mutex_unlock(v73[1]);
  v21 = (char *)__p[1];
  if (__p[1])
  {
    if ((uint64_t)&v73[0][-1].__opaque[55] >= 0)
    {
      v22 = (char *)__p[1] + 16 * (uint64_t)v73[0];
      do
      {
        v23 = (unsigned int *)*((_QWORD *)v22 - 1);
        if (v23)
        {
          v24 = v23 + 2;
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
            v27 = v23 + 3;
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
              (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 24))(v23);
          }
        }
        v22 -= 16;
      }
      while (v22 > v21);
    }
    if (__p[0] >= (void *)0xB)
      operator delete(__p[1]);
  }
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v75 = v30;
  v76 = v30;
  *(_OWORD *)v73 = v30;
  v74 = v30;
  v71 = v30;
  *(_OWORD *)__p = v30;
  v69 = v30;
  v70 = v30;
  v67 = v30;
  v68 = v30;
  v65 = v30;
  v66 = v30;
  v63 = v30;
  v64 = v30;
  *(_OWORD *)buf = v30;
  buf[0] = 0;
  v77 = 0xAAAAAAAAAAAAAAAALL;
  v78 = 10;
  v79 = &buf[8];
  v80 = 0;
  v81 = &v58;
  v82 = 0;
  v83 = 0;
  v31 = v56;
  v32 = (uint64_t)*v56;
  v53 = buf;
  v54 = v3;
  v55 = v32;
  *(_QWORD *)&v51 = *(_QWORD *)(v32 + 8);
  *((_QWORD *)&v51 + 1) = v32;
  *(_QWORD *)&v52 = buf;
  *((_QWORD *)&v52 + 1) = v32;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v51);
  v50[0] = *v31;
  v50[1] = v50[0];
  v50[2] = buf;
  v50[3] = v50[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(v50);
  v59 = v51;
  v60 = v52;
  v33 = v50[0];
  v34 = v51;
  if ((_QWORD)v51 == v50[0])
  {
    if (HIDWORD(v82) <= v82)
      goto LABEL_58;
LABEL_57:
    boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(v54, v55);
    goto LABEL_58;
  }
  v35 = (_BYTE *)v60;
  if (!*(_BYTE *)v60)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v51 + 16) + 32);
    v37 = *(_QWORD *)(v36 + 24);
    if (!v37)
    {
      std::runtime_error::runtime_error(&v61, "call to empty boost::function");
      v61.__vftable = (std::runtime_error_vtbl *)&unk_24F034D70;
      boost::throw_exception<boost::bad_function_call>(&v61);
    }
    (*(void (**)(uint64_t, _QWORD))((v37 & 0xFFFFFFFFFFFFFFFELL) + 8))(v36 + 32, **(unsigned int **)(v60 + 272));
    if (!*v35)
      *v35 = 1;
  }
  *(_QWORD *)&v59 = *(_QWORD *)(v34 + 8);
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v59);
  v38 = v60;
  if (*(_BYTE *)v60)
    *(_BYTE *)v60 = 0;
  for (i = v59; (_QWORD)v59 != v33; i = v59)
  {
    v40 = *(_QWORD *)(*(_QWORD *)(i + 16) + 32);
    v41 = *(_QWORD *)(v40 + 24);
    if (!v41)
    {
      std::runtime_error::runtime_error(&v61, "call to empty boost::function");
      v61.__vftable = (std::runtime_error_vtbl *)&unk_24F034D70;
      boost::throw_exception<boost::bad_function_call>(&v61);
    }
    (*(void (**)(uint64_t, _QWORD))((v41 & 0xFFFFFFFFFFFFFFFELL) + 8))(v40 + 32, **(unsigned int **)(v38 + 272));
    if (!*(_BYTE *)v38)
      *(_BYTE *)v38 = 1;
    *(_QWORD *)&v59 = *(_QWORD *)(i + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v59);
    v38 = v60;
    if (*(_BYTE *)v60)
      *(_BYTE *)v60 = 0;
  }
  if (*((_DWORD *)v53 + 71) > *((_DWORD *)v53 + 70))
    goto LABEL_57;
LABEL_58:
  result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>>::~slot_call_iterator_cache((uint64_t)buf);
  v43 = v57;
  if (v57)
  {
    v44 = v57 + 2;
    do
    {
      v45 = __ldaxr(v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v44));
    if (!v46)
    {
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v43 + 16))(v43);
      v47 = v43 + 3;
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v43 + 24))(v43);
    }
  }
  return result;
}

void sub_227AA6070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a29);
  JUMPOUT(0x227AA61E4);
}

void sub_227AA6080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::runtime_error a27)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  std::runtime_error::~runtime_error(&a27);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v29);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>>::~slot_call_iterator_cache((uint64_t)&v31);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v30);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a23 + 16));
  __cxa_rethrow();
}

void sub_227AA60E0(_Unwind_Exception *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v4);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>>::~slot_call_iterator_cache((uint64_t)&v6);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v5);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x227AA60B0);
}

void sub_227AA6118(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,unint64_t a49,char *__p,uint64_t a51)
{
  char *v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;

  if (__p)
  {
    if (a51 - 1 >= 0)
    {
      v51 = &__p[16 * a51];
      do
      {
        v52 = (unsigned int *)*((_QWORD *)v51 - 1);
        if (v52)
        {
          v53 = v52 + 2;
          do
          {
            v54 = __ldaxr(v53);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v53));
          if (!v55)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 16))(v52);
            v56 = v52 + 3;
            do
            {
              v57 = __ldaxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
              (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 24))(v52);
          }
        }
        v51 -= 16;
      }
      while (v51 > __p);
    }
    if (a49 >= 0xB)
      operator delete(__p);
  }
  JUMPOUT(0x227AA61E4);
}

void sub_227AA61C0(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x227AA61ECLL);
}

void ___ZN7desense16ARICommandDriver4initEv_block_invoke_3(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v2 = 0;
    _os_log_debug_impl(&dword_227A72000, v1, OS_LOG_TYPE_DEBUG, "#D Stopped", v2, 2u);
  }
}

uint64_t desense::ARICommandDriver::handleCurrentFrequencyInfoIndication_sync(desense::ARICommandDriver *this, const unsigned __int8 *a2)
{
  __int128 v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  unsigned int v69;
  _QWORD *v70;
  uint64_t v71;
  unsigned int v72;
  _QWORD *v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t **v76;
  uint64_t **v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *n;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t **v91;
  uint64_t **v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *m;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t **v106;
  uint64_t **v107;
  unint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *k;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  unint64_t v120;
  uint64_t **v121;
  uint64_t **v122;
  unint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t *j;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  unint64_t v135;
  uint64_t **v136;
  uint64_t **v137;
  unint64_t v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t *i;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE *v172;
  _QWORD **v173;
  _QWORD *v174[2];
  uint64_t **v175;
  uint64_t *v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  uint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  _OWORD v193[4];
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _BYTE buf[24];
  uint64_t v200;

  v200 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v197 = v3;
  v198 = v3;
  v195 = v3;
  v196 = v3;
  v193[3] = v3;
  v194 = v3;
  v193[1] = v3;
  v193[2] = v3;
  v193[0] = v3;
  AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *)v193, a2);
  v4 = AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::unpack((AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *)v193);
  v5 = v4;
  if ((_DWORD)v4)
  {
    v6 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = asString();
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v5;
      v8 = "#N Could not unpack IBIMsAccCurrentFreqInfoIndCb: %s (%d)";
LABEL_7:
      _os_log_impl(&dword_227A72000, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 0x12u);
      return MEMORY[0x22E2A415C](v193);
    }
    return MEMORY[0x22E2A415C](v193);
  }
  if (!**((_DWORD **)&v194 + 1))
  {
    *(_QWORD *)buf = buf;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0;
    v190 = &v190;
    v191 = &v190;
    v192 = 0;
    v187 = &v187;
    v188 = &v187;
    v189 = 0;
    v184 = &v184;
    v185 = &v184;
    v186 = 0;
    v181 = &v181;
    v182 = &v181;
    v183 = 0;
    v178 = &v178;
    v179 = &v178;
    v180 = 0;
    if (**((_BYTE **)&v195 + 1))
    {
      v12 = 0;
      if (**((_BYTE **)&v195 + 1) == 1)
        v13 = 1;
      else
        v13 = 2;
      v14 = (_DWORD *)(*((_QWORD *)&v195 + 1) + 12);
      v15 = buf;
      do
      {
        v16 = *v14;
        v4 = (uint64_t)operator new(0x20uLL);
        v17 = *((_QWORD *)v14 - 1);
        *(_QWORD *)(v4 + 8) = buf;
        *(_QWORD *)(v4 + 16) = v17;
        *(_DWORD *)(v4 + 24) = v16;
        *(_QWORD *)v4 = v15;
        *((_QWORD *)v15 + 1) = v4;
        ++v12;
        *(_QWORD *)buf = v4;
        *(_QWORD *)&buf[16] = v12;
        v14 += 3;
        v15 = (_BYTE *)v4;
      }
      while (v13 != v12);
    }
    v18 = capabilities::abs::nonPrimaryDLServingCellBandwidthMaxValue((capabilities::abs *)v4);
    v19 = *(unsigned __int8 *)v196;
    if (v19 >= 0x14)
      v19 = 20;
    if (v19)
    {
      v20 = 0;
      v21 = v190;
      v22 = 12 * v19;
      v23 = v192 + 1;
      do
      {
        v24 = v196 + v20;
        v25 = *(_DWORD *)(v196 + v20 + 12);
        v26 = operator new(0x20uLL);
        v27 = *(_QWORD *)(v24 + 4);
        v26[1] = &v190;
        v26[2] = v27;
        if (v25 >= v18)
          v28 = v18;
        else
          v28 = v25;
        *((_DWORD *)v26 + 6) = v28;
        *v26 = v21;
        v21[1] = v26;
        v190 = v26;
        v192 = v23;
        v20 += 12;
        ++v23;
        v21 = v26;
      }
      while (v22 != v20);
    }
    v29 = **((_BYTE **)&v196 + 1);
    if (v29 >= 0x40)
      v29 = 64;
    if (v29)
    {
      v30 = 0;
      v31 = v187;
      v32 = 12 * v29;
      v33 = v189 + 1;
      do
      {
        v34 = *((_QWORD *)&v196 + 1) + v30;
        v35 = *(_DWORD *)(*((_QWORD *)&v196 + 1) + v30 + 12);
        v36 = operator new(0x20uLL);
        v37 = *(_QWORD *)(v34 + 4);
        v36[1] = &v187;
        v36[2] = v37;
        if (v35 >= v18)
          v38 = v18;
        else
          v38 = v35;
        *((_DWORD *)v36 + 6) = v38;
        *v36 = v31;
        v31[1] = v36;
        v187 = v36;
        v189 = v33;
        v30 += 12;
        ++v33;
        v31 = v36;
      }
      while (v32 != v30);
    }
    v39 = *(unsigned __int8 *)v197;
    if (v39 >= 0x64)
      v39 = 100;
    if (v39)
    {
      v40 = 0;
      v41 = v184;
      v42 = 12 * v39;
      v43 = v186 + 1;
      do
      {
        v44 = v197 + v40;
        v45 = *(_DWORD *)(v197 + v40 + 12);
        v46 = operator new(0x20uLL);
        v47 = *(_QWORD *)(v44 + 4);
        v46[1] = &v184;
        v46[2] = v47;
        if (v45 >= v18)
          v48 = v18;
        else
          v48 = v45;
        *((_DWORD *)v46 + 6) = v48;
        *v46 = v41;
        v41[1] = v46;
        v184 = v46;
        v186 = v43;
        v40 += 12;
        ++v43;
        v41 = v46;
      }
      while (v42 != v40);
    }
    v49 = **((_BYTE **)&v197 + 1);
    if (v49 >= 0x46)
      v49 = 70;
    if (v49)
    {
      v50 = 0;
      v51 = v181;
      v52 = 12 * v49;
      v53 = v183 + 1;
      do
      {
        v54 = *((_QWORD *)&v197 + 1) + v50;
        v55 = *(_DWORD *)(*((_QWORD *)&v197 + 1) + v50 + 12);
        v56 = operator new(0x20uLL);
        v57 = *(_QWORD *)(v54 + 4);
        v56[1] = &v181;
        v56[2] = v57;
        if (v55 >= v18)
          v58 = v18;
        else
          v58 = v55;
        *((_DWORD *)v56 + 6) = v58;
        *v56 = v51;
        v51[1] = v56;
        v181 = v56;
        v183 = v53;
        v50 += 12;
        ++v53;
        v51 = v56;
      }
      while (v52 != v50);
    }
    v59 = v195;
    if (*(unsigned __int8 *)v195 >= 4u)
      v60 = 4;
    else
      v60 = *(unsigned __int8 *)v195;
    if ((_DWORD)v60)
    {
      v61 = v178;
      v62 = v180;
      v63 = *(_DWORD *)(v195 + 12);
      v64 = operator new(0x20uLL);
      v65 = *(_QWORD *)(v59 + 4);
      v64[6] = v63;
      *((_QWORD *)v64 + 1) = &v178;
      *((_QWORD *)v64 + 2) = v65;
      *(_QWORD *)v64 = v61;
      v61[1] = v64;
      v178 = v64;
      v180 = v62 + 1;
      if ((_DWORD)v60 != 1)
      {
        v66 = v60 - 1;
        v67 = (unsigned int *)(v195 + 24);
        v68 = v62 + 2;
        do
        {
          v69 = *v67;
          v70 = operator new(0x20uLL);
          v71 = *((_QWORD *)v67 - 1);
          v70[1] = &v178;
          v70[2] = v71;
          if (v69 >= v18)
            v72 = v18;
          else
            v72 = v69;
          *((_DWORD *)v70 + 6) = v72;
          *v70 = v64;
          *((_QWORD *)v64 + 1) = v70;
          v178 = v70;
          v180 = v68;
          v67 += 3;
          ++v68;
          v64 = v70;
          --v66;
        }
        while (v66);
      }
    }
    v176 = 0;
    v177 = 0;
    v175 = &v176;
    v73 = operator new(0x40uLL);
    v73[4] = *MEMORY[0x24BED3AE8];
    v73[5] = v73 + 5;
    v73[6] = v73 + 5;
    v73[7] = 0;
    *v73 = 0;
    v73[1] = 0;
    v73[2] = &v176;
    v175 = (uint64_t **)v73;
    v176 = v73;
    *((_BYTE *)v73 + 24) = 1;
    v177 = 1;
    std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v73 + 5, v73 + 5, *(uint64_t *)&buf[8], (uint64_t)buf);
    v74 = v176;
    v75 = *MEMORY[0x24BED3AE0];
    v76 = &v176;
    v77 = &v176;
    if (v176)
    {
      while (1)
      {
        while (1)
        {
          v77 = (uint64_t **)v74;
          v78 = v74[4];
          if (v75 >= v78)
            break;
          v74 = *v77;
          v76 = v77;
          if (!*v77)
            goto LABEL_64;
        }
        if (v78 >= v75)
          break;
        v74 = v77[1];
        if (!v74)
        {
          v76 = v77 + 1;
          goto LABEL_64;
        }
      }
      v79 = (uint64_t *)v77;
      v81 = (uint64_t *)(v77 + 5);
      if (v81 == (uint64_t *)&v190)
      {
LABEL_83:
        v89 = v176;
        v90 = *MEMORY[0x24BED3AF0];
        v91 = &v176;
        v92 = &v176;
        if (v176)
        {
          while (1)
          {
            while (1)
            {
              v92 = (uint64_t **)v89;
              v93 = v89[4];
              if (v90 >= v93)
                break;
              v89 = *v92;
              v91 = v92;
              if (!*v92)
                goto LABEL_90;
            }
            if (v93 >= v90)
              break;
            v89 = v92[1];
            if (!v89)
            {
              v91 = v92 + 1;
              goto LABEL_90;
            }
          }
          v94 = (uint64_t *)v92;
          v96 = (uint64_t *)(v92 + 5);
          if (v96 == (uint64_t *)&v187)
          {
LABEL_109:
            v104 = v176;
            v105 = *MEMORY[0x24BED3B00];
            v106 = &v176;
            v107 = &v176;
            if (v176)
            {
              while (1)
              {
                while (1)
                {
                  v107 = (uint64_t **)v104;
                  v108 = v104[4];
                  if (v105 >= v108)
                    break;
                  v104 = *v107;
                  v106 = v107;
                  if (!*v107)
                    goto LABEL_116;
                }
                if (v108 >= v105)
                  break;
                v104 = v107[1];
                if (!v104)
                {
                  v106 = v107 + 1;
                  goto LABEL_116;
                }
              }
              v109 = (uint64_t *)v107;
              v111 = (uint64_t *)(v107 + 5);
              if (v111 == (uint64_t *)&v184)
              {
LABEL_135:
                v119 = v176;
                v120 = *MEMORY[0x24BED3AD8];
                v121 = &v176;
                v122 = &v176;
                if (v176)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v122 = (uint64_t **)v119;
                      v123 = v119[4];
                      if (v120 >= v123)
                        break;
                      v119 = *v122;
                      v121 = v122;
                      if (!*v122)
                        goto LABEL_142;
                    }
                    if (v123 >= v120)
                      break;
                    v119 = v122[1];
                    if (!v119)
                    {
                      v121 = v122 + 1;
                      goto LABEL_142;
                    }
                  }
                  v124 = (uint64_t *)v122;
                  v126 = (uint64_t *)(v122 + 5);
                  if (v126 == (uint64_t *)&v181)
                  {
LABEL_161:
                    v134 = v176;
                    v135 = *MEMORY[0x24BED3AF8];
                    v136 = &v176;
                    v137 = &v176;
                    if (v176)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          v137 = (uint64_t **)v134;
                          v138 = v134[4];
                          if (v135 >= v138)
                            break;
                          v134 = *v137;
                          v136 = v137;
                          if (!*v137)
                            goto LABEL_168;
                        }
                        if (v138 >= v135)
                          break;
                        v134 = v137[1];
                        if (!v134)
                        {
                          v136 = v137 + 1;
                          goto LABEL_168;
                        }
                      }
                      v139 = (uint64_t *)v137;
                      v141 = (uint64_t *)(v137 + 5);
                      if (v141 == (uint64_t *)&v178)
                        goto LABEL_187;
                    }
                    else
                    {
LABEL_168:
                      v139 = (uint64_t *)operator new(0x40uLL);
                      v139[4] = v135;
                      v139[5] = (uint64_t)(v139 + 5);
                      v139[6] = (uint64_t)(v139 + 5);
                      v139[7] = 0;
                      *v139 = 0;
                      v139[1] = 0;
                      v139[2] = (uint64_t)v137;
                      *v136 = v139;
                      v140 = v139;
                      if (*v175)
                      {
                        v175 = (uint64_t **)*v175;
                        v140 = *v136;
                      }
                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v140);
                      ++v177;
                      v141 = v139 + 5;
                      if (v139 + 5 == (uint64_t *)&v178)
                        goto LABEL_187;
                    }
                    v142 = (uint64_t)v179;
                    for (i = (uint64_t *)v139[6]; (_QWORD **)v142 != &v178 && i != v141; i = (uint64_t *)i[1])
                    {
                      i[2] = *(_QWORD *)(v142 + 16);
                      *((_DWORD *)i + 6) = *(_DWORD *)(v142 + 24);
                      v142 = *(_QWORD *)(v142 + 8);
                    }
                    if (i == v141)
                    {
                      std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v141, v141, v142, (uint64_t)&v178);
                    }
                    else
                    {
                      v146 = v139[5];
                      v147 = *i;
                      *(_QWORD *)(v147 + 8) = *(_QWORD *)(v146 + 8);
                      **(_QWORD **)(v146 + 8) = v147;
                      do
                      {
                        v148 = (uint64_t *)i[1];
                        --v139[7];
                        operator delete(i);
                        i = v148;
                      }
                      while (v148 != v141);
                    }
LABEL_187:
                    v174[0] = 0;
                    v174[1] = 0;
                    v173 = v174;
                    std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v173, v175, &v176);
                    desense::ARICommandDriver::sendFrequencyReport_sync((uint64_t)this, (uint64_t)&v173, 0);
                    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v174[0]);
                    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v176);
                    if (v180)
                    {
                      v150 = v178;
                      v149 = v179;
                      v151 = *v179;
                      *(_QWORD *)(v151 + 8) = v178[1];
                      *(_QWORD *)v150[1] = v151;
                      v180 = 0;
                      if (v149 != &v178)
                      {
                        do
                        {
                          v152 = (_QWORD *)v149[1];
                          operator delete(v149);
                          v149 = v152;
                        }
                        while (v152 != &v178);
                      }
                    }
                    if (v183)
                    {
                      v154 = v181;
                      v153 = v182;
                      v155 = *v182;
                      *(_QWORD *)(v155 + 8) = v181[1];
                      *(_QWORD *)v154[1] = v155;
                      v183 = 0;
                      if (v153 != &v181)
                      {
                        do
                        {
                          v156 = (_QWORD *)v153[1];
                          operator delete(v153);
                          v153 = v156;
                        }
                        while (v156 != &v181);
                      }
                    }
                    if (v186)
                    {
                      v158 = v184;
                      v157 = v185;
                      v159 = *v185;
                      *(_QWORD *)(v159 + 8) = v184[1];
                      *(_QWORD *)v158[1] = v159;
                      v186 = 0;
                      if (v157 != &v184)
                      {
                        do
                        {
                          v160 = (_QWORD *)v157[1];
                          operator delete(v157);
                          v157 = v160;
                        }
                        while (v160 != &v184);
                      }
                    }
                    if (v189)
                    {
                      v162 = v187;
                      v161 = v188;
                      v163 = *v188;
                      *(_QWORD *)(v163 + 8) = v187[1];
                      *(_QWORD *)v162[1] = v163;
                      v189 = 0;
                      if (v161 != &v187)
                      {
                        do
                        {
                          v164 = (_QWORD *)v161[1];
                          operator delete(v161);
                          v161 = v164;
                        }
                        while (v164 != &v187);
                      }
                    }
                    if (v192)
                    {
                      v166 = v190;
                      v165 = v191;
                      v167 = *v191;
                      *(_QWORD *)(v167 + 8) = v190[1];
                      *(_QWORD *)v166[1] = v167;
                      v192 = 0;
                      if (v165 != &v190)
                      {
                        do
                        {
                          v168 = (_QWORD *)v165[1];
                          operator delete(v165);
                          v165 = v168;
                        }
                        while (v168 != &v190);
                      }
                    }
                    if (*(_QWORD *)&buf[16])
                    {
                      v170 = *(_QWORD *)buf;
                      v169 = *(_QWORD **)&buf[8];
                      v171 = **(_QWORD **)&buf[8];
                      *(_QWORD *)(v171 + 8) = *(_QWORD *)(*(_QWORD *)buf + 8);
                      **(_QWORD **)(v170 + 8) = v171;
                      *(_QWORD *)&buf[16] = 0;
                      if (v169 != (_QWORD *)buf)
                      {
                        do
                        {
                          v172 = (_BYTE *)v169[1];
                          operator delete(v169);
                          v169 = v172;
                        }
                        while (v172 != buf);
                      }
                    }
                    return MEMORY[0x22E2A415C](v193);
                  }
                }
                else
                {
LABEL_142:
                  v124 = (uint64_t *)operator new(0x40uLL);
                  v124[4] = v120;
                  v124[5] = (uint64_t)(v124 + 5);
                  v124[6] = (uint64_t)(v124 + 5);
                  v124[7] = 0;
                  *v124 = 0;
                  v124[1] = 0;
                  v124[2] = (uint64_t)v122;
                  *v121 = v124;
                  v125 = v124;
                  if (*v175)
                  {
                    v175 = (uint64_t **)*v175;
                    v125 = *v121;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v125);
                  ++v177;
                  v126 = v124 + 5;
                  if (v124 + 5 == (uint64_t *)&v181)
                    goto LABEL_161;
                }
                v127 = (uint64_t)v182;
                for (j = (uint64_t *)v124[6]; (_QWORD **)v127 != &v181 && j != v126; j = (uint64_t *)j[1])
                {
                  j[2] = *(_QWORD *)(v127 + 16);
                  *((_DWORD *)j + 6) = *(_DWORD *)(v127 + 24);
                  v127 = *(_QWORD *)(v127 + 8);
                }
                if (j == v126)
                {
                  std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v126, v126, v127, (uint64_t)&v181);
                }
                else
                {
                  v131 = v124[5];
                  v132 = *j;
                  *(_QWORD *)(v132 + 8) = *(_QWORD *)(v131 + 8);
                  **(_QWORD **)(v131 + 8) = v132;
                  do
                  {
                    v133 = (uint64_t *)j[1];
                    --v124[7];
                    operator delete(j);
                    j = v133;
                  }
                  while (v133 != v126);
                }
                goto LABEL_161;
              }
            }
            else
            {
LABEL_116:
              v109 = (uint64_t *)operator new(0x40uLL);
              v109[4] = v105;
              v109[5] = (uint64_t)(v109 + 5);
              v109[6] = (uint64_t)(v109 + 5);
              v109[7] = 0;
              *v109 = 0;
              v109[1] = 0;
              v109[2] = (uint64_t)v107;
              *v106 = v109;
              v110 = v109;
              if (*v175)
              {
                v175 = (uint64_t **)*v175;
                v110 = *v106;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v110);
              ++v177;
              v111 = v109 + 5;
              if (v109 + 5 == (uint64_t *)&v184)
                goto LABEL_135;
            }
            v112 = (uint64_t)v185;
            for (k = (uint64_t *)v109[6]; (_QWORD **)v112 != &v184 && k != v111; k = (uint64_t *)k[1])
            {
              k[2] = *(_QWORD *)(v112 + 16);
              *((_DWORD *)k + 6) = *(_DWORD *)(v112 + 24);
              v112 = *(_QWORD *)(v112 + 8);
            }
            if (k == v111)
            {
              std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v111, v111, v112, (uint64_t)&v184);
            }
            else
            {
              v116 = v109[5];
              v117 = *k;
              *(_QWORD *)(v117 + 8) = *(_QWORD *)(v116 + 8);
              **(_QWORD **)(v116 + 8) = v117;
              do
              {
                v118 = (uint64_t *)k[1];
                --v109[7];
                operator delete(k);
                k = v118;
              }
              while (v118 != v111);
            }
            goto LABEL_135;
          }
        }
        else
        {
LABEL_90:
          v94 = (uint64_t *)operator new(0x40uLL);
          v94[4] = v90;
          v94[5] = (uint64_t)(v94 + 5);
          v94[6] = (uint64_t)(v94 + 5);
          v94[7] = 0;
          *v94 = 0;
          v94[1] = 0;
          v94[2] = (uint64_t)v92;
          *v91 = v94;
          v95 = v94;
          if (*v175)
          {
            v175 = (uint64_t **)*v175;
            v95 = *v91;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v95);
          ++v177;
          v96 = v94 + 5;
          if (v94 + 5 == (uint64_t *)&v187)
            goto LABEL_109;
        }
        v97 = (uint64_t)v188;
        for (m = (uint64_t *)v94[6]; (_QWORD **)v97 != &v187 && m != v96; m = (uint64_t *)m[1])
        {
          m[2] = *(_QWORD *)(v97 + 16);
          *((_DWORD *)m + 6) = *(_DWORD *)(v97 + 24);
          v97 = *(_QWORD *)(v97 + 8);
        }
        if (m == v96)
        {
          std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v96, v96, v97, (uint64_t)&v187);
        }
        else
        {
          v101 = v94[5];
          v102 = *m;
          *(_QWORD *)(v102 + 8) = *(_QWORD *)(v101 + 8);
          **(_QWORD **)(v101 + 8) = v102;
          do
          {
            v103 = (uint64_t *)m[1];
            --v94[7];
            operator delete(m);
            m = v103;
          }
          while (v103 != v96);
        }
        goto LABEL_109;
      }
    }
    else
    {
LABEL_64:
      v79 = (uint64_t *)operator new(0x40uLL);
      v79[4] = v75;
      v79[5] = (uint64_t)(v79 + 5);
      v79[6] = (uint64_t)(v79 + 5);
      v79[7] = 0;
      *v79 = 0;
      v79[1] = 0;
      v79[2] = (uint64_t)v77;
      *v76 = v79;
      v80 = v79;
      if (*v175)
      {
        v175 = (uint64_t **)*v175;
        v80 = *v76;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v80);
      ++v177;
      v81 = v79 + 5;
      if (v79 + 5 == (uint64_t *)&v190)
        goto LABEL_83;
    }
    v82 = (uint64_t)v191;
    for (n = (uint64_t *)v79[6]; (_QWORD **)v82 != &v190 && n != v81; n = (uint64_t *)n[1])
    {
      n[2] = *(_QWORD *)(v82 + 16);
      *((_DWORD *)n + 6) = *(_DWORD *)(v82 + 24);
      v82 = *(_QWORD *)(v82 + 8);
    }
    if (n == v81)
    {
      std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v81, v81, v82, (uint64_t)&v190);
    }
    else
    {
      v86 = v79[5];
      v87 = *n;
      *(_QWORD *)(v87 + 8) = *(_QWORD *)(v86 + 8);
      **(_QWORD **)(v86 + 8) = v87;
      do
      {
        v88 = (uint64_t *)n[1];
        --v79[7];
        operator delete(n);
        n = v88;
      }
      while (v88 != v81);
    }
    goto LABEL_83;
  }
  v6 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v9 = asString();
    v10 = **((_DWORD **)&v194 + 1);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    v8 = "#N Current frequency info indication failed: %s (%d)";
    goto LABEL_7;
  }
  return MEMORY[0x22E2A415C](v193);
}

void sub_227AA7018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a16);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a19);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a22);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a25);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a28);
  std::list<std::pair<unsigned long long,unsigned int>>::~list((uint64_t *)(v31 - 112));
  MEMORY[0x22E2A415C](&a31);
  _Unwind_Resume(a1);
}

uint64_t desense::ARICommandDriver::setFrequencyReportingMode(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  NSObject *v5;
  __int128 v6;
  _DWORD *v7;
  void *v8;
  _DWORD *v9;
  void *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  const void *v24;
  unint64_t v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  NSObject *v31;
  uint64_t v32;
  _DWORD *v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v42;
  _OWORD v43[2];
  unint64_t v44;
  const void *aBlock[5];
  uint8_t buf[16];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *__p[2];
  __int128 v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  void *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = a1[5];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = desense::asString();
    _os_log_impl(&dword_227A72000, v5, OS_LOG_TYPE_DEFAULT, "#I Set Frequency reporting mode: %s", buf, 0xCu);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v49 = v6;
  *(_OWORD *)__p = v6;
  v47 = v6;
  v48 = v6;
  *(_OWORD *)buf = v6;
  AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK::ARI_IBIMsAccCurrentFreqInfoReq_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK *)buf);
  v7 = operator new(4uLL);
  *v7 = 0;
  v8 = __p[0];
  __p[0] = v7;
  if (v8)
    operator delete(v8);
  if (a3 < 3)
  {
    v9 = operator new(4uLL);
    *v9 = a3;
    v10 = __p[1];
    __p[1] = v9;
    if (v10)
      operator delete(v10);
    v11 = a1[24];
    v13 = (std::__shared_weak_count_vtbl *)a1[9];
    v12 = (std::__shared_weak_count *)a1[10];
    if (!v12 || (v14 = std::__shared_weak_count::lock(v12), (v42 = v14) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v15 = v14;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldxr(p_shared_weak_owners);
    while (__stxr(v21 + 1, p_shared_weak_owners));
    v22 = (std::__shared_weak_count *)operator new(0x38uLL);
    v22->__shared_owners_ = 0;
    v23 = (unint64_t *)&v22->__shared_owners_;
    v22->__shared_weak_owners_ = 0;
    v22[1].__vftable = v13;
    v22->__vftable = (std::__shared_weak_count_vtbl *)off_24F034F98;
    v22[1].__shared_owners_ = (uint64_t)v15;
    v22[1].__shared_weak_owners_ = (uint64_t)desense::ARICommandDriver::handleSetFrequencyReportingModeResponse_sync;
    v22[2].__vftable = 0;
    v24 = (const void *)MEMORY[0x24BDAC760];
    *(_QWORD *)&v51 = MEMORY[0x24BDAC760];
    *((_QWORD *)&v51 + 1) = 1174405120;
    v52 = ___ZN3ice6detail12wrapCallbackIZNS_6Client4sendIN6AriSdk34ARI_IBIMsAccCurrentFreqInfoReq_SDKEN7desense13CommandDriverENS6_16ARICommandDriverEvJPKhjEEENS_16SendMsgBaseProxyERT_NSt3__110shared_ptrIT0_EEMT1_FT2_DpT3_EEUlSA_jE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENSE_17integral_constantIiLi2EEEOSC__block_invoke;
    v53 = &__block_descriptor_tmp_14_3;
    v54 = v22 + 1;
    v55 = v22;
    do
      v25 = __ldxr(v23);
    while (__stxr(v25 + 1, v23));
    aBlock[0] = v24;
    aBlock[1] = (const void *)0x40000000;
    aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_4;
    aBlock[3] = &unk_24F034F00;
    aBlock[4] = &v51;
    v26 = _Block_copy(aBlock);
    v27 = v55;
    if (v55)
    {
      v28 = (unint64_t *)&v55->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    do
      v30 = __ldaxr(v23);
    while (__stlxr(v30 - 1, v23));
    if (v30)
    {
      if (__p[0])
        goto LABEL_33;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if (__p[0])
        goto LABEL_33;
    }
    v33 = operator new(4uLL);
    *v33 = 0;
    __p[0] = v33;
LABEL_33:
    v44 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v34 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v34 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v43[0] = v34;
    v43[1] = v34;
    v35 = *(std::__shared_weak_count **)(v11 + 16);
    *(_QWORD *)&v51 = *(_QWORD *)(v11 + 8);
    if (v35)
    {
      *((_QWORD *)&v51 + 1) = std::__shared_weak_count::lock(v35);
      if (*((_QWORD *)&v51 + 1))
      {
        ice::SendMsgBaseProxy::SendMsgBaseProxy();
        v36 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
        if (*((_QWORD *)&v51 + 1))
        {
          v37 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        aBlock[0] = v26;
        ice::SendMsgBaseProxy::callback();
        if (aBlock[0])
          _Block_release(aBlock[0]);
        std::__shared_weak_count::__release_weak(v15);
        MEMORY[0x22E2A2FF8](v43);
        if (v42)
        {
          v39 = (unint64_t *)&v42->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        return MEMORY[0x22E2A3FDC](buf);
      }
    }
    else
    {
      *((_QWORD *)&v51 + 1) = 0;
    }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v31 = a1[5];
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    v32 = desense::asString();
    LODWORD(v51) = 136315138;
    *(_QWORD *)((char *)&v51 + 4) = v32;
    _os_log_impl(&dword_227A72000, v31, OS_LOG_TYPE_DEFAULT, "#N Unhandled frequency reporting mode: %s", (uint8_t *)&v51, 0xCu);
  }
  return MEMORY[0x22E2A3FDC](buf);
}

uint64_t desense::ARICommandDriver::handleSetFrequencyReportingModeResponse_sync(desense::ARICommandDriver *this, const unsigned __int8 *a2)
{
  __int128 v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  unsigned int v69;
  _QWORD *v70;
  uint64_t v71;
  unsigned int v72;
  _QWORD *v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t **v76;
  uint64_t **v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *n;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t **v91;
  uint64_t **v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *m;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t **v106;
  uint64_t **v107;
  unint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *k;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  unint64_t v120;
  uint64_t **v121;
  uint64_t **v122;
  unint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t *j;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  unint64_t v135;
  uint64_t **v136;
  uint64_t **v137;
  unint64_t v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t *i;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE *v172;
  _QWORD **v173;
  _QWORD *v174[2];
  uint64_t **v175;
  uint64_t *v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  uint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  _OWORD v193[4];
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _BYTE buf[24];
  uint64_t v200;

  v200 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v197 = v3;
  v198 = v3;
  v195 = v3;
  v196 = v3;
  v193[3] = v3;
  v194 = v3;
  v193[1] = v3;
  v193[2] = v3;
  v193[0] = v3;
  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v193, a2);
  if ((ice::isARIResponseValid() & 1) == 0)
    return MEMORY[0x22E2A4180](v193);
  v4 = AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::unpack((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v193);
  v5 = v4;
  if ((_DWORD)v4)
  {
    v6 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = asString();
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v5;
      v8 = "#N Could not unpack IBIMsAccCurrentFreqInfoRspCb: %s (%d)";
LABEL_8:
      _os_log_impl(&dword_227A72000, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 0x12u);
      return MEMORY[0x22E2A4180](v193);
    }
    return MEMORY[0x22E2A4180](v193);
  }
  if (!**((_DWORD **)&v194 + 1))
  {
    *(_QWORD *)buf = buf;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0;
    v190 = &v190;
    v191 = &v190;
    v192 = 0;
    v187 = &v187;
    v188 = &v187;
    v189 = 0;
    v184 = &v184;
    v185 = &v184;
    v186 = 0;
    v181 = &v181;
    v182 = &v181;
    v183 = 0;
    v178 = &v178;
    v179 = &v178;
    v180 = 0;
    if (**((_BYTE **)&v195 + 1))
    {
      v12 = 0;
      if (**((_BYTE **)&v195 + 1) == 1)
        v13 = 1;
      else
        v13 = 2;
      v14 = (_DWORD *)(*((_QWORD *)&v195 + 1) + 12);
      v15 = buf;
      do
      {
        v16 = *v14;
        v4 = (uint64_t)operator new(0x20uLL);
        v17 = *((_QWORD *)v14 - 1);
        *(_QWORD *)(v4 + 8) = buf;
        *(_QWORD *)(v4 + 16) = v17;
        *(_DWORD *)(v4 + 24) = v16;
        *(_QWORD *)v4 = v15;
        *((_QWORD *)v15 + 1) = v4;
        ++v12;
        *(_QWORD *)buf = v4;
        *(_QWORD *)&buf[16] = v12;
        v14 += 3;
        v15 = (_BYTE *)v4;
      }
      while (v13 != v12);
    }
    v18 = capabilities::abs::nonPrimaryDLServingCellBandwidthMaxValue((capabilities::abs *)v4);
    v19 = *(unsigned __int8 *)v196;
    if (v19 >= 0x14)
      v19 = 20;
    if (v19)
    {
      v20 = 0;
      v21 = v190;
      v22 = 12 * v19;
      v23 = v192 + 1;
      do
      {
        v24 = v196 + v20;
        v25 = *(_DWORD *)(v196 + v20 + 12);
        v26 = operator new(0x20uLL);
        v27 = *(_QWORD *)(v24 + 4);
        v26[1] = &v190;
        v26[2] = v27;
        if (v25 >= v18)
          v28 = v18;
        else
          v28 = v25;
        *((_DWORD *)v26 + 6) = v28;
        *v26 = v21;
        v21[1] = v26;
        v190 = v26;
        v192 = v23;
        v20 += 12;
        ++v23;
        v21 = v26;
      }
      while (v22 != v20);
    }
    v29 = **((_BYTE **)&v196 + 1);
    if (v29 >= 0x40)
      v29 = 64;
    if (v29)
    {
      v30 = 0;
      v31 = v187;
      v32 = 12 * v29;
      v33 = v189 + 1;
      do
      {
        v34 = *((_QWORD *)&v196 + 1) + v30;
        v35 = *(_DWORD *)(*((_QWORD *)&v196 + 1) + v30 + 12);
        v36 = operator new(0x20uLL);
        v37 = *(_QWORD *)(v34 + 4);
        v36[1] = &v187;
        v36[2] = v37;
        if (v35 >= v18)
          v38 = v18;
        else
          v38 = v35;
        *((_DWORD *)v36 + 6) = v38;
        *v36 = v31;
        v31[1] = v36;
        v187 = v36;
        v189 = v33;
        v30 += 12;
        ++v33;
        v31 = v36;
      }
      while (v32 != v30);
    }
    v39 = *(unsigned __int8 *)v197;
    if (v39 >= 0x64)
      v39 = 100;
    if (v39)
    {
      v40 = 0;
      v41 = v184;
      v42 = 12 * v39;
      v43 = v186 + 1;
      do
      {
        v44 = v197 + v40;
        v45 = *(_DWORD *)(v197 + v40 + 12);
        v46 = operator new(0x20uLL);
        v47 = *(_QWORD *)(v44 + 4);
        v46[1] = &v184;
        v46[2] = v47;
        if (v45 >= v18)
          v48 = v18;
        else
          v48 = v45;
        *((_DWORD *)v46 + 6) = v48;
        *v46 = v41;
        v41[1] = v46;
        v184 = v46;
        v186 = v43;
        v40 += 12;
        ++v43;
        v41 = v46;
      }
      while (v42 != v40);
    }
    v49 = **((_BYTE **)&v197 + 1);
    if (v49 >= 0x46)
      v49 = 70;
    if (v49)
    {
      v50 = 0;
      v51 = v181;
      v52 = 12 * v49;
      v53 = v183 + 1;
      do
      {
        v54 = *((_QWORD *)&v197 + 1) + v50;
        v55 = *(_DWORD *)(*((_QWORD *)&v197 + 1) + v50 + 12);
        v56 = operator new(0x20uLL);
        v57 = *(_QWORD *)(v54 + 4);
        v56[1] = &v181;
        v56[2] = v57;
        if (v55 >= v18)
          v58 = v18;
        else
          v58 = v55;
        *((_DWORD *)v56 + 6) = v58;
        *v56 = v51;
        v51[1] = v56;
        v181 = v56;
        v183 = v53;
        v50 += 12;
        ++v53;
        v51 = v56;
      }
      while (v52 != v50);
    }
    v59 = v195;
    if (*(unsigned __int8 *)v195 >= 4u)
      v60 = 4;
    else
      v60 = *(unsigned __int8 *)v195;
    if ((_DWORD)v60)
    {
      v61 = v178;
      v62 = v180;
      v63 = *(_DWORD *)(v195 + 12);
      v64 = operator new(0x20uLL);
      v65 = *(_QWORD *)(v59 + 4);
      v64[6] = v63;
      *((_QWORD *)v64 + 1) = &v178;
      *((_QWORD *)v64 + 2) = v65;
      *(_QWORD *)v64 = v61;
      v61[1] = v64;
      v178 = v64;
      v180 = v62 + 1;
      if ((_DWORD)v60 != 1)
      {
        v66 = v60 - 1;
        v67 = (unsigned int *)(v195 + 24);
        v68 = v62 + 2;
        do
        {
          v69 = *v67;
          v70 = operator new(0x20uLL);
          v71 = *((_QWORD *)v67 - 1);
          v70[1] = &v178;
          v70[2] = v71;
          if (v69 >= v18)
            v72 = v18;
          else
            v72 = v69;
          *((_DWORD *)v70 + 6) = v72;
          *v70 = v64;
          *((_QWORD *)v64 + 1) = v70;
          v178 = v70;
          v180 = v68;
          v67 += 3;
          ++v68;
          v64 = v70;
          --v66;
        }
        while (v66);
      }
    }
    v176 = 0;
    v177 = 0;
    v175 = &v176;
    v73 = operator new(0x40uLL);
    v73[4] = *MEMORY[0x24BED3AE8];
    v73[5] = v73 + 5;
    v73[6] = v73 + 5;
    v73[7] = 0;
    *v73 = 0;
    v73[1] = 0;
    v73[2] = &v176;
    v175 = (uint64_t **)v73;
    v176 = v73;
    *((_BYTE *)v73 + 24) = 1;
    v177 = 1;
    std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v73 + 5, v73 + 5, *(uint64_t *)&buf[8], (uint64_t)buf);
    v74 = v176;
    v75 = *MEMORY[0x24BED3AE0];
    v76 = &v176;
    v77 = &v176;
    if (v176)
    {
      while (1)
      {
        while (1)
        {
          v77 = (uint64_t **)v74;
          v78 = v74[4];
          if (v75 >= v78)
            break;
          v74 = *v77;
          v76 = v77;
          if (!*v77)
            goto LABEL_65;
        }
        if (v78 >= v75)
          break;
        v74 = v77[1];
        if (!v74)
        {
          v76 = v77 + 1;
          goto LABEL_65;
        }
      }
      v79 = (uint64_t *)v77;
      v81 = (uint64_t *)(v77 + 5);
      if (v81 == (uint64_t *)&v190)
      {
LABEL_84:
        v89 = v176;
        v90 = *MEMORY[0x24BED3AF0];
        v91 = &v176;
        v92 = &v176;
        if (v176)
        {
          while (1)
          {
            while (1)
            {
              v92 = (uint64_t **)v89;
              v93 = v89[4];
              if (v90 >= v93)
                break;
              v89 = *v92;
              v91 = v92;
              if (!*v92)
                goto LABEL_91;
            }
            if (v93 >= v90)
              break;
            v89 = v92[1];
            if (!v89)
            {
              v91 = v92 + 1;
              goto LABEL_91;
            }
          }
          v94 = (uint64_t *)v92;
          v96 = (uint64_t *)(v92 + 5);
          if (v96 == (uint64_t *)&v187)
          {
LABEL_110:
            v104 = v176;
            v105 = *MEMORY[0x24BED3B00];
            v106 = &v176;
            v107 = &v176;
            if (v176)
            {
              while (1)
              {
                while (1)
                {
                  v107 = (uint64_t **)v104;
                  v108 = v104[4];
                  if (v105 >= v108)
                    break;
                  v104 = *v107;
                  v106 = v107;
                  if (!*v107)
                    goto LABEL_117;
                }
                if (v108 >= v105)
                  break;
                v104 = v107[1];
                if (!v104)
                {
                  v106 = v107 + 1;
                  goto LABEL_117;
                }
              }
              v109 = (uint64_t *)v107;
              v111 = (uint64_t *)(v107 + 5);
              if (v111 == (uint64_t *)&v184)
              {
LABEL_136:
                v119 = v176;
                v120 = *MEMORY[0x24BED3AD8];
                v121 = &v176;
                v122 = &v176;
                if (v176)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v122 = (uint64_t **)v119;
                      v123 = v119[4];
                      if (v120 >= v123)
                        break;
                      v119 = *v122;
                      v121 = v122;
                      if (!*v122)
                        goto LABEL_143;
                    }
                    if (v123 >= v120)
                      break;
                    v119 = v122[1];
                    if (!v119)
                    {
                      v121 = v122 + 1;
                      goto LABEL_143;
                    }
                  }
                  v124 = (uint64_t *)v122;
                  v126 = (uint64_t *)(v122 + 5);
                  if (v126 == (uint64_t *)&v181)
                  {
LABEL_162:
                    v134 = v176;
                    v135 = *MEMORY[0x24BED3AF8];
                    v136 = &v176;
                    v137 = &v176;
                    if (v176)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          v137 = (uint64_t **)v134;
                          v138 = v134[4];
                          if (v135 >= v138)
                            break;
                          v134 = *v137;
                          v136 = v137;
                          if (!*v137)
                            goto LABEL_169;
                        }
                        if (v138 >= v135)
                          break;
                        v134 = v137[1];
                        if (!v134)
                        {
                          v136 = v137 + 1;
                          goto LABEL_169;
                        }
                      }
                      v139 = (uint64_t *)v137;
                      v141 = (uint64_t *)(v137 + 5);
                      if (v141 == (uint64_t *)&v178)
                        goto LABEL_188;
                    }
                    else
                    {
LABEL_169:
                      v139 = (uint64_t *)operator new(0x40uLL);
                      v139[4] = v135;
                      v139[5] = (uint64_t)(v139 + 5);
                      v139[6] = (uint64_t)(v139 + 5);
                      v139[7] = 0;
                      *v139 = 0;
                      v139[1] = 0;
                      v139[2] = (uint64_t)v137;
                      *v136 = v139;
                      v140 = v139;
                      if (*v175)
                      {
                        v175 = (uint64_t **)*v175;
                        v140 = *v136;
                      }
                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v140);
                      ++v177;
                      v141 = v139 + 5;
                      if (v139 + 5 == (uint64_t *)&v178)
                        goto LABEL_188;
                    }
                    v142 = (uint64_t)v179;
                    for (i = (uint64_t *)v139[6]; (_QWORD **)v142 != &v178 && i != v141; i = (uint64_t *)i[1])
                    {
                      i[2] = *(_QWORD *)(v142 + 16);
                      *((_DWORD *)i + 6) = *(_DWORD *)(v142 + 24);
                      v142 = *(_QWORD *)(v142 + 8);
                    }
                    if (i == v141)
                    {
                      std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v141, v141, v142, (uint64_t)&v178);
                    }
                    else
                    {
                      v146 = v139[5];
                      v147 = *i;
                      *(_QWORD *)(v147 + 8) = *(_QWORD *)(v146 + 8);
                      **(_QWORD **)(v146 + 8) = v147;
                      do
                      {
                        v148 = (uint64_t *)i[1];
                        --v139[7];
                        operator delete(i);
                        i = v148;
                      }
                      while (v148 != v141);
                    }
LABEL_188:
                    v174[0] = 0;
                    v174[1] = 0;
                    v173 = v174;
                    std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v173, v175, &v176);
                    desense::ARICommandDriver::sendFrequencyReport_sync((uint64_t)this, (uint64_t)&v173, 0);
                    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v174[0]);
                    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v176);
                    if (v180)
                    {
                      v150 = v178;
                      v149 = v179;
                      v151 = *v179;
                      *(_QWORD *)(v151 + 8) = v178[1];
                      *(_QWORD *)v150[1] = v151;
                      v180 = 0;
                      if (v149 != &v178)
                      {
                        do
                        {
                          v152 = (_QWORD *)v149[1];
                          operator delete(v149);
                          v149 = v152;
                        }
                        while (v152 != &v178);
                      }
                    }
                    if (v183)
                    {
                      v154 = v181;
                      v153 = v182;
                      v155 = *v182;
                      *(_QWORD *)(v155 + 8) = v181[1];
                      *(_QWORD *)v154[1] = v155;
                      v183 = 0;
                      if (v153 != &v181)
                      {
                        do
                        {
                          v156 = (_QWORD *)v153[1];
                          operator delete(v153);
                          v153 = v156;
                        }
                        while (v156 != &v181);
                      }
                    }
                    if (v186)
                    {
                      v158 = v184;
                      v157 = v185;
                      v159 = *v185;
                      *(_QWORD *)(v159 + 8) = v184[1];
                      *(_QWORD *)v158[1] = v159;
                      v186 = 0;
                      if (v157 != &v184)
                      {
                        do
                        {
                          v160 = (_QWORD *)v157[1];
                          operator delete(v157);
                          v157 = v160;
                        }
                        while (v160 != &v184);
                      }
                    }
                    if (v189)
                    {
                      v162 = v187;
                      v161 = v188;
                      v163 = *v188;
                      *(_QWORD *)(v163 + 8) = v187[1];
                      *(_QWORD *)v162[1] = v163;
                      v189 = 0;
                      if (v161 != &v187)
                      {
                        do
                        {
                          v164 = (_QWORD *)v161[1];
                          operator delete(v161);
                          v161 = v164;
                        }
                        while (v164 != &v187);
                      }
                    }
                    if (v192)
                    {
                      v166 = v190;
                      v165 = v191;
                      v167 = *v191;
                      *(_QWORD *)(v167 + 8) = v190[1];
                      *(_QWORD *)v166[1] = v167;
                      v192 = 0;
                      if (v165 != &v190)
                      {
                        do
                        {
                          v168 = (_QWORD *)v165[1];
                          operator delete(v165);
                          v165 = v168;
                        }
                        while (v168 != &v190);
                      }
                    }
                    if (*(_QWORD *)&buf[16])
                    {
                      v170 = *(_QWORD *)buf;
                      v169 = *(_QWORD **)&buf[8];
                      v171 = **(_QWORD **)&buf[8];
                      *(_QWORD *)(v171 + 8) = *(_QWORD *)(*(_QWORD *)buf + 8);
                      **(_QWORD **)(v170 + 8) = v171;
                      *(_QWORD *)&buf[16] = 0;
                      if (v169 != (_QWORD *)buf)
                      {
                        do
                        {
                          v172 = (_BYTE *)v169[1];
                          operator delete(v169);
                          v169 = v172;
                        }
                        while (v172 != buf);
                      }
                    }
                    return MEMORY[0x22E2A4180](v193);
                  }
                }
                else
                {
LABEL_143:
                  v124 = (uint64_t *)operator new(0x40uLL);
                  v124[4] = v120;
                  v124[5] = (uint64_t)(v124 + 5);
                  v124[6] = (uint64_t)(v124 + 5);
                  v124[7] = 0;
                  *v124 = 0;
                  v124[1] = 0;
                  v124[2] = (uint64_t)v122;
                  *v121 = v124;
                  v125 = v124;
                  if (*v175)
                  {
                    v175 = (uint64_t **)*v175;
                    v125 = *v121;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v125);
                  ++v177;
                  v126 = v124 + 5;
                  if (v124 + 5 == (uint64_t *)&v181)
                    goto LABEL_162;
                }
                v127 = (uint64_t)v182;
                for (j = (uint64_t *)v124[6]; (_QWORD **)v127 != &v181 && j != v126; j = (uint64_t *)j[1])
                {
                  j[2] = *(_QWORD *)(v127 + 16);
                  *((_DWORD *)j + 6) = *(_DWORD *)(v127 + 24);
                  v127 = *(_QWORD *)(v127 + 8);
                }
                if (j == v126)
                {
                  std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v126, v126, v127, (uint64_t)&v181);
                }
                else
                {
                  v131 = v124[5];
                  v132 = *j;
                  *(_QWORD *)(v132 + 8) = *(_QWORD *)(v131 + 8);
                  **(_QWORD **)(v131 + 8) = v132;
                  do
                  {
                    v133 = (uint64_t *)j[1];
                    --v124[7];
                    operator delete(j);
                    j = v133;
                  }
                  while (v133 != v126);
                }
                goto LABEL_162;
              }
            }
            else
            {
LABEL_117:
              v109 = (uint64_t *)operator new(0x40uLL);
              v109[4] = v105;
              v109[5] = (uint64_t)(v109 + 5);
              v109[6] = (uint64_t)(v109 + 5);
              v109[7] = 0;
              *v109 = 0;
              v109[1] = 0;
              v109[2] = (uint64_t)v107;
              *v106 = v109;
              v110 = v109;
              if (*v175)
              {
                v175 = (uint64_t **)*v175;
                v110 = *v106;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v110);
              ++v177;
              v111 = v109 + 5;
              if (v109 + 5 == (uint64_t *)&v184)
                goto LABEL_136;
            }
            v112 = (uint64_t)v185;
            for (k = (uint64_t *)v109[6]; (_QWORD **)v112 != &v184 && k != v111; k = (uint64_t *)k[1])
            {
              k[2] = *(_QWORD *)(v112 + 16);
              *((_DWORD *)k + 6) = *(_DWORD *)(v112 + 24);
              v112 = *(_QWORD *)(v112 + 8);
            }
            if (k == v111)
            {
              std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v111, v111, v112, (uint64_t)&v184);
            }
            else
            {
              v116 = v109[5];
              v117 = *k;
              *(_QWORD *)(v117 + 8) = *(_QWORD *)(v116 + 8);
              **(_QWORD **)(v116 + 8) = v117;
              do
              {
                v118 = (uint64_t *)k[1];
                --v109[7];
                operator delete(k);
                k = v118;
              }
              while (v118 != v111);
            }
            goto LABEL_136;
          }
        }
        else
        {
LABEL_91:
          v94 = (uint64_t *)operator new(0x40uLL);
          v94[4] = v90;
          v94[5] = (uint64_t)(v94 + 5);
          v94[6] = (uint64_t)(v94 + 5);
          v94[7] = 0;
          *v94 = 0;
          v94[1] = 0;
          v94[2] = (uint64_t)v92;
          *v91 = v94;
          v95 = v94;
          if (*v175)
          {
            v175 = (uint64_t **)*v175;
            v95 = *v91;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v95);
          ++v177;
          v96 = v94 + 5;
          if (v94 + 5 == (uint64_t *)&v187)
            goto LABEL_110;
        }
        v97 = (uint64_t)v188;
        for (m = (uint64_t *)v94[6]; (_QWORD **)v97 != &v187 && m != v96; m = (uint64_t *)m[1])
        {
          m[2] = *(_QWORD *)(v97 + 16);
          *((_DWORD *)m + 6) = *(_DWORD *)(v97 + 24);
          v97 = *(_QWORD *)(v97 + 8);
        }
        if (m == v96)
        {
          std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v96, v96, v97, (uint64_t)&v187);
        }
        else
        {
          v101 = v94[5];
          v102 = *m;
          *(_QWORD *)(v102 + 8) = *(_QWORD *)(v101 + 8);
          **(_QWORD **)(v101 + 8) = v102;
          do
          {
            v103 = (uint64_t *)m[1];
            --v94[7];
            operator delete(m);
            m = v103;
          }
          while (v103 != v96);
        }
        goto LABEL_110;
      }
    }
    else
    {
LABEL_65:
      v79 = (uint64_t *)operator new(0x40uLL);
      v79[4] = v75;
      v79[5] = (uint64_t)(v79 + 5);
      v79[6] = (uint64_t)(v79 + 5);
      v79[7] = 0;
      *v79 = 0;
      v79[1] = 0;
      v79[2] = (uint64_t)v77;
      *v76 = v79;
      v80 = v79;
      if (*v175)
      {
        v175 = (uint64_t **)*v175;
        v80 = *v76;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v80);
      ++v177;
      v81 = v79 + 5;
      if (v79 + 5 == (uint64_t *)&v190)
        goto LABEL_84;
    }
    v82 = (uint64_t)v191;
    for (n = (uint64_t *)v79[6]; (_QWORD **)v82 != &v190 && n != v81; n = (uint64_t *)n[1])
    {
      n[2] = *(_QWORD *)(v82 + 16);
      *((_DWORD *)n + 6) = *(_DWORD *)(v82 + 24);
      v82 = *(_QWORD *)(v82 + 8);
    }
    if (n == v81)
    {
      std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v81, v81, v82, (uint64_t)&v190);
    }
    else
    {
      v86 = v79[5];
      v87 = *n;
      *(_QWORD *)(v87 + 8) = *(_QWORD *)(v86 + 8);
      **(_QWORD **)(v86 + 8) = v87;
      do
      {
        v88 = (uint64_t *)n[1];
        --v79[7];
        operator delete(n);
        n = v88;
      }
      while (v88 != v81);
    }
    goto LABEL_84;
  }
  v6 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v9 = asString();
    v10 = **((_DWORD **)&v194 + 1);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    v8 = "#N Set frequency reporting mode request failed: %s (%d)";
    goto LABEL_8;
  }
  return MEMORY[0x22E2A4180](v193);
}

void sub_227AA8394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a16);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a19);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a22);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a25);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a28);
  std::list<std::pair<unsigned long long,unsigned int>>::~list((uint64_t *)(v31 - 112));
  MEMORY[0x22E2A4180](&a31);
  _Unwind_Resume(a1);
}

uint64_t desense::ARICommandDriver::registerFrequencyReporting(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2, 1);
}

void desense::ARICommandDriver::sendFrequencyReport_sync(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  __int128 v8;
  pthread_mutex_t *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  char *v25;
  char *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  __int128 v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, _QWORD ***, uint64_t);
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, _QWORD ***, uint64_t);
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  _QWORD *v59;
  _QWORD *v60[2];
  _QWORD **v61;
  _QWORD *v62[2];
  _QWORD v63[4];
  __int128 v64;
  __int128 v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t **v69;
  unsigned int *v70;
  int v71;
  __int128 v72;
  __int128 v73;
  _QWORD **v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD **v77;
  _QWORD *v78;
  uint64_t v79;
  std::runtime_error v80;
  uint8_t buf[16];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  void *__p[2];
  pthread_mutex_t *v92[2];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  unint64_t v96;
  uint64_t v97;
  uint8_t *v98;
  uint64_t v99;
  _QWORD *v100;
  int *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 16))
    return;
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a3;
    _os_log_impl(&dword_227A72000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending frequency report for SubId=%d", buf, 8u);
  }
  v60[0] = 0;
  v60[1] = 0;
  v59 = v60;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v59, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  v7 = *(_QWORD *)(a1 + 136);
  v62[0] = 0;
  v62[1] = 0;
  v61 = v62;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v61, v59, v60);
  v71 = a3;
  v69 = 0;
  v70 = 0;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v89 = v8;
  v90 = v8;
  v87 = v8;
  v88 = v8;
  v85 = v8;
  v86 = v8;
  v83 = v8;
  v84 = v8;
  *(_OWORD *)buf = v8;
  v82 = v8;
  v9 = *(pthread_mutex_t **)(v7 + 24);
  __p[0] = (void *)10;
  __p[1] = buf;
  v92[0] = 0;
  v92[1] = v9;
  pthread_mutex_lock(v9);
  v10 = *(unsigned int **)(v7 + 8);
  if (!v10)
  {
    v12 = *(uint64_t ***)v7;
    goto LABEL_17;
  }
  v11 = atomic_load(v10 + 2);
  v12 = *(uint64_t ***)v7;
  if (v11 == 1)
  {
    v13 = *v12;
    v14 = *(_QWORD *)(v7 + 16);
    if ((uint64_t *)v14 == *v12)
    {
      v14 = v13[1];
      *(_QWORD *)&v72 = v14;
      if (v13 == (uint64_t *)v14)
      {
LABEL_13:
        *(_QWORD *)(v7 + 16) = v14;
        goto LABEL_14;
      }
    }
    else
    {
      *(_QWORD *)&v72 = *(_QWORD *)(v7 + 16);
    }
    v15 = *(_QWORD *)(v14 + 16);
    if (*(_BYTE *)(v15 + 24))
    {
      v14 = *(_QWORD *)(v14 + 8);
    }
    else
    {
      v14 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::erase(v13, (int *)(v15 + 64), (uint64_t **)&v72);
      v12 = *(uint64_t ***)v7;
    }
    goto LABEL_13;
  }
LABEL_14:
  v10 = *(unsigned int **)(v7 + 8);
  if (v10)
  {
    v16 = v10 + 2;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
LABEL_17:
  v18 = v70;
  v69 = v12;
  v70 = v10;
  if (v18)
  {
    v19 = v18 + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
      v22 = v18 + 3;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
        (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 24))(v18);
    }
  }
  pthread_mutex_unlock(v92[1]);
  v25 = (char *)__p[1];
  if (__p[1])
  {
    if ((uint64_t)&v92[0][-1].__opaque[55] >= 0)
    {
      v26 = (char *)__p[1] + 16 * (uint64_t)v92[0];
      do
      {
        v27 = (unsigned int *)*((_QWORD *)v26 - 1);
        if (v27)
        {
          v28 = v27 + 2;
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 16))(v27);
            v31 = v27 + 3;
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
              (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
          }
        }
        v26 -= 16;
      }
      while (v26 > v25);
    }
    if (__p[0] >= (void *)0xB)
      operator delete(__p[1]);
  }
  *(_QWORD *)&v34 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v34 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v94 = v34;
  v95 = v34;
  *(_OWORD *)v92 = v34;
  v93 = v34;
  v90 = v34;
  *(_OWORD *)__p = v34;
  v88 = v34;
  v89 = v34;
  v86 = v34;
  v87 = v34;
  v84 = v34;
  v85 = v34;
  v82 = v34;
  v83 = v34;
  *(_OWORD *)buf = v34;
  buf[0] = 0;
  v96 = 0xAAAAAAAAAAAAAAAALL;
  v97 = 10;
  v98 = &buf[8];
  v99 = 0;
  v100 = &v61;
  v101 = &v71;
  v102 = 0;
  v103 = 0;
  v35 = v69;
  v36 = (uint64_t)*v69;
  v66 = buf;
  v67 = v7;
  v68 = v36;
  *(_QWORD *)&v64 = *(_QWORD *)(v36 + 8);
  *((_QWORD *)&v64 + 1) = v36;
  *(_QWORD *)&v65 = buf;
  *((_QWORD *)&v65 + 1) = v36;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v64);
  v63[0] = *v35;
  v63[1] = v63[0];
  v63[2] = buf;
  v63[3] = v63[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(v63);
  v72 = v64;
  v73 = v65;
  v37 = v63[0];
  v38 = v64;
  if ((_QWORD)v64 != v63[0])
  {
    v39 = v73;
    if (!*(_BYTE *)v73)
    {
      v40 = *(_QWORD *)(*(_QWORD *)(v64 + 16) + 32);
      v41 = *(_QWORD *)(v73 + 272);
      v75 = 0;
      v76 = 0;
      v74 = &v75;
      std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v74, *(_QWORD **)v41, (_QWORD *)(v41 + 8));
      v42 = *(_QWORD *)(v40 + 24);
      if (!v42)
      {
        std::runtime_error::runtime_error(&v80, "call to empty boost::function");
        v80.__vftable = (std::runtime_error_vtbl *)&unk_24F034D70;
        boost::throw_exception<boost::bad_function_call>(&v80);
      }
      v43 = **(unsigned int **)(v39 + 280);
      v44 = *(void (**)(uint64_t, _QWORD ***, uint64_t))((v42 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v77 = v74;
      v78 = v75;
      v79 = v76;
      if (v76)
      {
        v75[2] = &v78;
        v74 = &v75;
        v75 = 0;
        v76 = 0;
      }
      else
      {
        v77 = &v78;
      }
      v44(v40 + 32, &v77, v43);
      std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v78);
      std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v75);
      if (!*(_BYTE *)v39)
        *(_BYTE *)v39 = 1;
    }
    *(_QWORD *)&v72 = *(_QWORD *)(v38 + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v72);
    v45 = v73;
    if (*(_BYTE *)v73)
      *(_BYTE *)v73 = 0;
    for (i = v72; (_QWORD)v72 != v37; i = v72)
    {
      v47 = *(_QWORD *)(*(_QWORD *)(i + 16) + 32);
      v48 = *(_QWORD *)(v45 + 272);
      v75 = 0;
      v76 = 0;
      v74 = &v75;
      std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v74, *(_QWORD **)v48, (_QWORD *)(v48 + 8));
      v49 = *(_QWORD *)(v47 + 24);
      if (!v49)
      {
        std::runtime_error::runtime_error(&v80, "call to empty boost::function");
        v80.__vftable = (std::runtime_error_vtbl *)&unk_24F034D70;
        boost::throw_exception<boost::bad_function_call>(&v80);
      }
      v50 = **(unsigned int **)(v45 + 280);
      v51 = *(void (**)(uint64_t, _QWORD ***, uint64_t))((v49 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v77 = v74;
      v78 = v75;
      v79 = v76;
      if (v76)
      {
        v75[2] = &v78;
        v74 = &v75;
        v75 = 0;
        v76 = 0;
      }
      else
      {
        v77 = &v78;
      }
      v51(v47 + 32, &v77, v50);
      std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v78);
      std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v75);
      if (!*(_BYTE *)v45)
        *(_BYTE *)v45 = 1;
      *(_QWORD *)&v72 = *(_QWORD *)(i + 8);
      boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v72);
      v45 = v73;
      if (*(_BYTE *)v73)
        *(_BYTE *)v73 = 0;
    }
    if (*((_DWORD *)v66 + 73) <= *((_DWORD *)v66 + 72))
      goto LABEL_65;
    goto LABEL_64;
  }
  if (HIDWORD(v102) > v102)
LABEL_64:
    boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(v67, v68);
LABEL_65:
  boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)buf);
  v52 = v70;
  if (v70)
  {
    v53 = v70 + 2;
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 16))(v52);
      v56 = v52 + 3;
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (!v58)
        (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 24))(v52);
    }
  }
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v62[0]);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v60[0]);
}

void sub_227AA8B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a41);
  JUMPOUT(0x227AA8CF0);
}

void sub_227AA8B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,_QWORD *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::runtime_error a39)
{
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  std::runtime_error::~runtime_error(&a39);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a34);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v43);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)&v45);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v44);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v42);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v41);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a29 + 16));
  __cxa_rethrow();
}

void sub_227AA8BE0(_Unwind_Exception *a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v6);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)&v8);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v7);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v5);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v4);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x227AA8BB0);
}

void sub_227AA8C14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,unint64_t a61,char *__p,uint64_t a63)
{
  char *v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;

  if (__p)
  {
    if (a63 - 1 >= 0)
    {
      v63 = &__p[16 * a63];
      do
      {
        v64 = (unsigned int *)*((_QWORD *)v63 - 1);
        if (v64)
        {
          v65 = v64 + 2;
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (!v67)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 16))(v64);
            v68 = v64 + 3;
            do
            {
              v69 = __ldaxr(v68);
              v70 = v69 - 1;
            }
            while (__stlxr(v70, v68));
            if (!v70)
              (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 24))(v64);
          }
        }
        v63 -= 16;
      }
      while (v63 > __p);
    }
    if (a61 >= 0xB)
      operator delete(__p);
  }
  JUMPOUT(0x227AA8CF0);
}

void sub_227AA8CB8()
{
  JUMPOUT(0x227AA8CF8);
}

void sub_227AA8CC0()
{
  JUMPOUT(0x227AA8D00);
}

void sub_227AA8CCC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x227AA8D08);
}

uint64_t *std::list<std::pair<unsigned long long,unsigned int>>::~list(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(desense::CommandDriver *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *Name;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  Name = (const char *)desense::CommandDriver::getName(a1);
  result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, Name, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *boost::signals2::signal<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::~signal(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_24F034A58;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

_QWORD *boost::signals2::signal<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::~signal(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_24F034B18;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::~signal(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *__p = &off_24F034A58;
  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void boost::signals2::signal<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::~signal(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *__p = &off_24F034B18;
  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_24F034B88;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_24F034B88;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1)
  {
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(*a1);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a1[1]);
    if (a1[7])
    {
      v3 = a1[5];
      v2 = (uint64_t *)a1[6];
      v4 = *v2;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
      **(_QWORD **)(v3 + 8) = v4;
      a1[7] = 0;
      if (v2 != a1 + 5)
      {
        do
        {
          v5 = (uint64_t *)v2[1];
          operator delete(v2);
          v2 = v5;
        }
        while (v5 != a1 + 5);
      }
    }
    operator delete(a1);
  }
}

_QWORD *std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD **v25;

  if (a2 != a3)
  {
    v3 = a2;
    v4 = result + 1;
    v24 = a3;
    v25 = (_QWORD **)result;
    while (1)
    {
      v5 = (uint64_t *)result[1];
      v6 = v4;
      if ((_QWORD *)*result != v4)
      {
        v7 = (_QWORD *)result[1];
        v8 = v4;
        if (v5)
        {
          do
          {
            v6 = v7;
            v7 = (_QWORD *)v7[1];
          }
          while (v7);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v8[2];
            v9 = *v6 == (_QWORD)v8;
            v8 = v6;
          }
          while (v9);
        }
        v10 = v3[4];
        if (v6[4] >= v10)
          break;
      }
      if (v5)
        v11 = (uint64_t **)v6;
      else
        v11 = (uint64_t **)v4;
      if (v5)
        v12 = (uint64_t **)(v6 + 1);
      else
        v12 = (uint64_t **)v4;
      if (!*v12)
        goto LABEL_25;
LABEL_31:
      v22 = (_QWORD *)v3[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v3[2];
          v9 = *v23 == (_QWORD)v3;
          v3 = v23;
        }
        while (!v9);
      }
      v3 = v23;
      result = v25;
      if (v23 == a3)
        return result;
    }
    v12 = (uint64_t **)v4;
    v11 = (uint64_t **)v4;
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          v11 = (uint64_t **)v5;
          v13 = v5[4];
          if (v13 <= v10)
            break;
          v5 = *v11;
          v12 = v11;
          if (!*v11)
            goto LABEL_25;
        }
        if (v13 >= v10)
          goto LABEL_31;
        v5 = v11[1];
        if (!v5)
        {
          v12 = v11 + 1;
          break;
        }
      }
    }
LABEL_25:
    v14 = (uint64_t *)operator new(0x40uLL);
    v15 = v14;
    v16 = v14 + 5;
    v14[4] = v3[4];
    v14[5] = (uint64_t)(v14 + 5);
    v14[6] = (uint64_t)(v14 + 5);
    v14[7] = 0;
    v17 = v3[6];
    if ((_QWORD *)v17 != v3 + 5)
    {
      v18 = 1;
      v19 = v14 + 5;
      do
      {
        v20 = operator new(0x20uLL);
        v20[1] = *(_OWORD *)(v17 + 16);
        *(_QWORD *)v20 = v19;
        *((_QWORD *)v20 + 1) = v16;
        v19[1] = v20;
        v15[5] = (uint64_t)v20;
        v15[7] = v18;
        v17 = *(_QWORD *)(v17 + 8);
        ++v18;
        v19 = v20;
      }
      while ((_QWORD *)v17 != v3 + 5);
    }
    *v15 = 0;
    v15[1] = 0;
    v15[2] = (uint64_t)v11;
    *v12 = v15;
    v21 = (_QWORD *)**v25;
    if (v21)
    {
      *v25 = v21;
      v15 = *v12;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v25[1], v15);
    v25[2] = (_QWORD *)((char *)v25[2] + 1);
    a3 = v24;
    goto LABEL_31;
  }
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

void ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_227AA9674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_227AA9690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<desense::ARICommandDriver>::shared_ptr[abi:ne180100]<desense::ARICommandDriver,std::shared_ptr<desense::ARICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::ARICommandDriver>(desense::ARICommandDriver*)::{lambda(desense::ARICommandDriver*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_24F034BC8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_227AA97AC(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<desense::ARICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::ARICommandDriver>(desense::ARICommandDriver*)::{lambda(desense::ARICommandDriver*)#1}::operator() const(desense::ARICommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_227AA97CC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<desense::ARICommandDriver *,std::shared_ptr<desense::ARICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::ARICommandDriver>(desense::ARICommandDriver*)::{lambda(desense::ARICommandDriver *)#1},std::allocator<desense::ARICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<desense::ARICommandDriver *,std::shared_ptr<desense::ARICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::ARICommandDriver>(desense::ARICommandDriver*)::{lambda(desense::ARICommandDriver *)#1},std::allocator<desense::ARICommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<desense::ARICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::ARICommandDriver>(desense::ARICommandDriver*)::{lambda(desense::ARICommandDriver*)#1}::operator() const(desense::ARICommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<desense::ARICommandDriver *,std::shared_ptr<desense::ARICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::ARICommandDriver>(desense::ARICommandDriver*)::{lambda(desense::ARICommandDriver *)#1},std::allocator<desense::ARICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN7desense13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEEN"
                     "St3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN7desense13CommandDriverEE15make_shared_ptrINS1_16ARIComman"
                                "dDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN7desense13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN7desense13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<desense::ARICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::ARICommandDriver>(desense::ARICommandDriver*)::{lambda(desense::ARICommandDriver*)#1}::operator() const(desense::ARICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 184));
  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      v4 = v2 + 16 * v3;
      do
      {
        v5 = *(unsigned int **)(v4 - 8);
        if (v5)
        {
          v6 = v5 + 2;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = v5 + 3;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(_QWORD *)(a1 + 160) >= 0xBuLL)
      operator delete(*(void **)(a1 + 168));
  }
  return a1;
}

uint64_t *boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280))
    boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<void>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  int v27;
  uint64_t ***v28;
  BOOL v29;
  BOOL v30;
  uint64_t ***v31;
  uint64_t *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;

  v7 = (uint64_t **)(a1 + 4);
  v6 = a1[4];
  if (!v6)
  {
    v23 = (uint64_t *)a1[10];
    if (v23 != *a3)
      goto LABEL_80;
    v24 = (uint64_t *)v23[1];
    v25 = (uint64_t **)(a1 + 4);
    v10 = a1 + 4;
    if (v24 != a1)
      goto LABEL_76;
    goto LABEL_55;
  }
  v8 = *a2;
  v9 = a2[2];
  v10 = a1 + 4;
  v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        v17 = *(_DWORD *)(v11 + 32);
        v18 = v17 < 1;
        if (v17 == 1)
          v18 = *(_DWORD *)(v11 + 40) < v9;
        if (!v18)
          break;
        v11 = *(_QWORD *)(v11 + 8);
        if (!v11)
          goto LABEL_19;
      }
      v10 = (uint64_t *)v11;
      v11 = *(_QWORD *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      v12 = *(_DWORD *)(v11 + 32);
      v13 = v12 == v8;
      v14 = v12 < v8;
      if (v12 >= v8)
        v15 = (uint64_t *)v11;
      else
        v15 = (uint64_t *)(v11 + 8);
      if (v14)
        v16 = v10;
      else
        v16 = (uint64_t *)v11;
      if (v13)
      {
        v15 = (uint64_t *)v11;
        v10 = (uint64_t *)v11;
      }
      else
      {
        v10 = v16;
      }
      v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  v19 = (uint64_t *)v10[6];
  if (v19 != *a3)
    goto LABEL_80;
  v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    v21 = (uint64_t *)a1[4];
    while (1)
    {
      v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10))
          goto LABEL_27;
LABEL_22:
        v21 = (uint64_t *)v21[1];
        if (!v21)
          goto LABEL_42;
      }
      else
      {
        if (v22 <= 1)
          goto LABEL_22;
LABEL_27:
        v20 = (uint64_t **)v21;
        v21 = (uint64_t *)*v21;
        if (!v21)
          goto LABEL_42;
      }
    }
  }
  v26 = (uint64_t **)a1[4];
  do
  {
    v27 = *((_DWORD *)v26 + 8);
    v28 = (uint64_t ***)(v26 + 1);
    v29 = v8 == v27;
    v30 = v8 < v27;
    if (v8 >= v27)
      v31 = (uint64_t ***)(v26 + 1);
    else
      v31 = (uint64_t ***)v26;
    if (!v30)
      v26 = v20;
    if (v29)
      v31 = v28;
    else
      v20 = v26;
    v26 = *v31;
  }
  while (*v31);
LABEL_42:
  v24 = (uint64_t *)v19[1];
  v32 = a1;
  if (v20 != v7)
    v32 = v20[6];
  if (v24 == v32)
  {
LABEL_55:
    v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        v38 = v37;
        v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      v41 = v10;
      do
      {
        v38 = (uint64_t *)v41[2];
        v13 = *v38 == (_QWORD)v41;
        v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10)
      a1[3] = (uint64_t)v38;
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  v33 = *a2;
  if (*a2 == 1)
  {
    v34 = a2[2];
    while (1)
    {
      v25 = (uint64_t **)v6;
      v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(_QWORD *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        v6 = *(_QWORD *)v6;
        if (!*v25)
        {
          v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1)
          goto LABEL_47;
LABEL_53:
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
        {
          v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39)
    goto LABEL_79;
  while (v33 >= v39)
  {
    if (v39 >= v33)
      goto LABEL_79;
    v40 = *(_QWORD *)(v6 + 8);
    if (!v40)
    {
      v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    v39 = *(_DWORD *)(v40 + 32);
    v6 = v40;
    if (v33 == v39)
    {
      *(_QWORD *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  v40 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
    goto LABEL_61;
  v7 = (uint64_t **)v6;
LABEL_75:
  v25 = (uint64_t **)v6;
LABEL_76:
  v6 = (uint64_t)operator new(0x38uLL);
  *(_QWORD *)(v6 + 32) = *(_QWORD *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = v25;
  *v7 = (uint64_t *)v6;
  v42 = *(_QWORD *)a1[3];
  v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(_QWORD *)(v6 + 48) = v24;
LABEL_80:
  v44 = *a3;
  v45 = **a3;
  v46 = (*a3)[1];
  *(_QWORD *)(v45 + 8) = v46;
  *(_QWORD *)v44[1] = v45;
  --a1[2];
  v47 = (unsigned int *)v44[3];
  if (v47)
  {
    v48 = v47 + 2;
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 16))(v47);
      v51 = v47 + 3;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
        (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 24))(v47);
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  v4 = (_QWORD *)a1;
  if (a2 >= 0xB)
  {
    if (a2 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(16 * a2);
  }
  v6 = *(_QWORD **)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  if (v5)
  {
    v7 = &v6[2 * v5];
    v8 = v4;
    do
    {
      v9 = v6[1];
      *v8 = *v6;
      v8[1] = v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v6 += 2;
      v8 += 2;
    }
    while (v6 != v7);
    v6 = *(_QWORD **)(a1 + 168);
  }
  if (v6)
  {
    v12 = *(_QWORD *)(a1 + 176);
    if (v12 - 1 >= 0)
    {
      v13 = &v6[2 * v12];
      do
      {
        v14 = (unsigned int *)*(v13 - 1);
        if (v14)
        {
          v15 = v14 + 2;
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
            v18 = v14 + 3;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
              (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
          }
        }
        v13 -= 2;
      }
      while (v13 > v6);
    }
    if (*(_QWORD *)(a1 + 160) >= 0xBuLL)
      operator delete(*(void **)(a1 + 168));
  }
  *(_QWORD *)(a1 + 160) = a2;
  *(_QWORD *)(a1 + 168) = v4;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 != v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v16 = (_QWORD *)*v7;
      if (*v7)
        goto LABEL_48;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v20 = (uint64_t *)v7[1];
      *v14 = v20;
      if (v20)
        v20[2] = (uint64_t)v14;
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      v14[2] = v7;
      if (result == (uint64_t *)v14)
        result = v7;
      v7 = *v14;
      v16 = (_QWORD *)**v14;
      if (v16)
      {
LABEL_48:
        if (!*((_BYTE *)v16 + 24))
          goto LABEL_71;
      }
    }
    v21 = (uint64_t *)v7[1];
    if (v21 && !*((_BYTE *)v21 + 24))
    {
      if (v16 && !*((_BYTE *)v16 + 24))
      {
LABEL_71:
        v21 = v7;
      }
      else
      {
        *((_BYTE *)v21 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = *v21;
        v7[1] = *v21;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v21[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
        *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        v16 = v7;
      }
      v27 = (uint64_t *)v21[2];
      *((_BYTE *)v21 + 24) = *((_BYTE *)v27 + 24);
      *((_BYTE *)v27 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v28 = *v27;
      v29 = *(_QWORD *)(*v27 + 8);
      *v27 = v29;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      *(_QWORD *)(v28 + 16) = v27[2];
      *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v28;
      *(_QWORD *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v15 = (_QWORD *)*v7;
    if (!*v7)
    {
LABEL_38:
      v19 = (uint64_t *)v7[1];
      if (v19 && !*((_BYTE *)v19 + 24))
        goto LABEL_67;
      *((_BYTE *)v7 + 24) = 0;
      v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        v12 = result;
LABEL_61:
        *((_BYTE *)v12 + 24) = 1;
        return result;
      }
      if (!*((_BYTE *)v12 + 24))
        goto LABEL_61;
      goto LABEL_24;
    }
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v17 = v14[1];
    v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18)
      v18[2] = (uint64_t)v14;
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
    *v17 = (uint64_t)v14;
    v14[2] = v17;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
    v15 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_38;
  }
  if (*((_BYTE *)v15 + 24))
    goto LABEL_38;
  v19 = (uint64_t *)v7[1];
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_67:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v23 = v15[1];
    *v7 = v23;
    if (v23)
      *(_QWORD *)(v23 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v19 = v7;
  }
  v24 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v24 + 24);
  *(_BYTE *)(v24 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v25 = *(uint64_t **)(v24 + 8);
  v26 = *v25;
  *(_QWORD *)(v24 + 8) = *v25;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  v25[2] = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v25;
  *v25 = v24;
  *(_QWORD *)(v24 + 16) = v25;
  return result;
}

void boost::signals2::detail::connection_body_base::disconnect(boost::signals2::detail::connection_body_base *this)
{
  __int128 v2;
  char *v3;
  char *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _OWORD v12[10];
  unint64_t v13;
  void *__p;
  uint64_t v15;
  boost::signals2::detail::connection_body_base *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12[8] = v2;
  v12[9] = v2;
  v12[6] = v2;
  v12[7] = v2;
  v12[4] = v2;
  v12[5] = v2;
  v12[2] = v2;
  v12[3] = v2;
  v12[0] = v2;
  v12[1] = v2;
  v13 = 10;
  __p = v12;
  v15 = 0;
  v16 = this;
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(_QWORD *)this + 24))(this);
  if (*((_BYTE *)this + 24))
  {
    *((_BYTE *)this + 24) = 0;
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(this, v12);
  }
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(_QWORD *)v16 + 32))(v16);
  v3 = (char *)__p;
  if (__p)
  {
    if (v15 - 1 >= 0)
    {
      v4 = (char *)__p + 16 * v15;
      do
      {
        v5 = (unsigned int *)*((_QWORD *)v4 - 1);
        if (v5)
        {
          v6 = v5 + 2;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = v5 + 3;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
          }
        }
        v4 -= 16;
      }
      while (v4 > v3);
    }
    if (v13 >= 0xB)
      operator delete(__p);
  }
}

void sub_227AAA47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_227AAA490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::throw_exception<boost::bad_function_call>(const std::runtime_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_227AAA590(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &unk_24F034D40;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_24F034CC8;
  *(_QWORD *)(a1 + 8) = &unk_24F034CF8;
  *(_QWORD *)(a1 + 24) = &unk_24F034D20;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24F034D98;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

char *boost::wrapexcept<boost::bad_function_call>::clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24F034D40;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *((_QWORD *)v2 + 1) = &unk_24F034D70;
  *((_QWORD *)v2 + 3) = &unk_24F034D98;
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v2 + 4) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_24F034CC8;
  *((_QWORD *)v2 + 1) = &unk_24F034CF8;
  *((_QWORD *)v2 + 3) = &unk_24F034D20;
  boost::exception_detail::copy_boost_exception((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_227AAA724(_Unwind_Exception *a1)
{
  void *v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_227AAA740(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_227AAA798(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24F034D98;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  operator delete((void *)a1);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_24F034D98;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_24F034D98;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
  operator delete(&this[-1].__imp_);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24F034D98;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24F034D98;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete(&a1[-2].__imp_);
}

void boost::bad_function_call::~bad_function_call(std::runtime_error *this)
{
  void *v1;

  std::runtime_error::~runtime_error(this);
  operator delete(v1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24F034D40;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &unk_24F034D70;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_24F034D98;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_24F034CC8;
  *(_QWORD *)(a1 + 8) = &unk_24F034CF8;
  *(_QWORD *)(a1 + 24) = &unk_24F034D20;
  return a1;
}

void sub_227AAAA24(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    v5 = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    result = *(_QWORD *)(a1 + 8);
    if (!result)
      goto LABEL_9;
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
  v5 = v7;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
LABEL_8:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
LABEL_9:
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_227AAAB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 32))(*(_QWORD *)(a1 + 184));
  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      v4 = v2 + 16 * v3;
      do
      {
        v5 = *(unsigned int **)(v4 - 8);
        if (v5)
        {
          v6 = v5 + 2;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = v5 + 3;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(_QWORD *)(a1 + 160) >= 0xBuLL)
      operator delete(*(void **)(a1 + 168));
  }
  return a1;
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(_DWORD *a1, _QWORD *a2)
{
  int v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;

  v2 = a1[7] - 1;
  a1[7] = v2;
  if (!v2)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 40))(&v16);
    v4 = a2[22];
    if (v4 == a2[20] && v4 != -1)
    {
      if (4 * v4 <= (unint64_t)(v4 + 1))
        v5 = v4 + 1;
      else
        v5 = 4 * v4;
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)a2, v5);
      v4 = a2[22];
    }
    v6 = *((_QWORD *)&v16 + 1);
    *(_OWORD *)(a2[21] + 16 * v4) = v16;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      v4 = a2[22];
    }
    a2[22] = v4 + 1;
    v9 = (unsigned int *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
  }
}

void sub_227AAAD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::shared_ptr<void>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int i;
  unsigned int v30;
  uint64_t v31;
  char v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD v84[6];

  v84[3] = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  if (*a1 == a1[3])
    return;
  if (v1 == a1[1])
    goto LABEL_94;
  while (1)
  {
    v3 = a1[2];
    v4 = *(_QWORD *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        v17 = *(_QWORD *)(v3 + 264);
      }
      else
      {
        v5 = *(_QWORD *)(v3 + 256);
        v6 = v5 + 24 * v4;
        v7 = v6;
        do
        {
          v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            v9 = *(unsigned int **)(v6 - 8);
            if (v9)
            {
              v10 = v9 + 2;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
                v13 = v9 + 3;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v6 - 16);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          v6 = v7;
        }
        while (v7 > v5);
        v17 = *(_QWORD *)(v3 + 264);
        v1 = *a1;
      }
      *(_QWORD *)(v3 + 264) = v17 - v4;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v82 = v18;
    v83 = v18;
    v80 = v18;
    v81 = v18;
    v78 = v18;
    v79 = v18;
    v76 = v18;
    v77 = v18;
    v74 = v18;
    v75 = v18;
    v72 = v18;
    v73 = v18;
    v19 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)&v82 = 10;
    *((_QWORD *)&v82 + 1) = &v72;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = v19;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *a1;
    v21 = *(_QWORD *)(*a1 + 16);
    v22 = a1[2];
    v23 = *(uint64_t **)(v21 + 32);
    if (v23)
    {
      v24 = *v23;
      if (*v23 != v23[1])
      {
        v25 = (_QWORD *)(v22 + 8);
        while (1)
        {
          memset(v84, 170, 24);
          v26 = *(_DWORD *)v24 ^ (*(int *)v24 >> 31);
          if (v26 == 2)
          {
            (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v24 + 8) + 16))(&v71);
            v84[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
            LODWORD(v84[0]) = 1;
            if (v71)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
              if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
                goto LABEL_47;
LABEL_40:
              v31 = *(_QWORD *)(v24 + 16);
              if (!v31)
                goto LABEL_48;
              if (!atomic_load((unsigned int *)(v31 + 8)))
                goto LABEL_48;
LABEL_42:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v25, (uint64_t)v84);
              v33 = 0;
              if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
                goto LABEL_51;
              goto LABEL_43;
            }
LABEL_39:
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          if (v26 != 1)
          {
            LODWORD(v84[0]) = 0;
            v84[1] = 0;
            v84[2] = 0;
            goto LABEL_39;
          }
          v27 = *(_QWORD *)(v24 + 16);
          if (!v27)
          {
LABEL_46:
            v84[1] = 0;
            v84[2] = v27;
            LODWORD(v84[0]) = 0;
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          v28 = (unsigned int *)(v27 + 8);
          for (i = *(_DWORD *)(v27 + 8); ; i = v30)
          {
            if (!i)
            {
              v27 = 0;
              goto LABEL_46;
            }
            v30 = __ldxr(v28);
            if (v30 != i)
            {
              __clrex();
              continue;
            }
            if (!__stxr(i + 1, v28))
              break;
          }
          v84[1] = *(_QWORD *)(v24 + 8);
          v84[2] = v27;
          LODWORD(v84[0]) = 0;
          if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) != 2)
            goto LABEL_40;
LABEL_47:
          if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v24 + 8) + 24))(*(_QWORD *)(v24 + 8)))
            goto LABEL_42;
LABEL_48:
          if (*(_BYTE *)(v21 + 24))
          {
            *(_BYTE *)(v21 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v21, &v72);
          }
          v33 = 1;
          if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
          {
LABEL_51:
            v34 = (unsigned int *)v84[2];
            if (v84[2])
            {
              v35 = (unsigned int *)(v84[2] + 8);
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
                v38 = v34 + 3;
                do
                {
                  v39 = __ldaxr(v38);
                  v40 = v39 - 1;
                }
                while (__stlxr(v40, v38));
                if (!v40)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 24))(v34);
              }
            }
            goto LABEL_59;
          }
LABEL_43:
          if (v84[1])
            (*(void (**)(_QWORD))(*(_QWORD *)v84[1] + 8))(v84[1]);
LABEL_59:
          if ((v33 & 1) == 0)
          {
            v24 += 24;
            if (v24 != *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8))
              continue;
          }
          v20 = *a1;
          v21 = *(_QWORD *)(*a1 + 16);
          v22 = a1[2];
          break;
        }
      }
    }
    if (*(_BYTE *)(v21 + 24))
    {
      ++*(_DWORD *)(v22 + 280);
      v41 = *(_QWORD *)(v21 + 16);
      if (v41)
      {
        if (atomic_load((unsigned int *)(v41 + 8)))
        {
          v43 = 1;
          goto LABEL_76;
        }
        v22 = a1[2];
        v20 = *a1;
      }
      a1[3] = v20;
      if (a1[1] == v20)
      {
        v46 = *(_DWORD **)(v22 + 288);
        if (v46)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v46, &v72);
        v43 = 0;
        *(_QWORD *)(v22 + 288) = 0;
      }
      else
      {
        v44 = *(_QWORD *)(v20 + 16);
        v45 = *(_DWORD **)(v22 + 288);
        if (v45)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v45, &v72);
        *(_QWORD *)(v22 + 288) = v44;
        v43 = 0;
        if (v44)
          ++*(_DWORD *)(v44 + 28);
      }
    }
    else
    {
      ++*(_DWORD *)(v22 + 284);
      v43 = 1;
    }
LABEL_76:
    (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
    v47 = *((_QWORD *)&v82 + 1);
    if (*((_QWORD *)&v82 + 1))
    {
      if ((uint64_t)v83 - 1 >= 0)
      {
        v48 = *((_QWORD *)&v82 + 1) + 16 * v83;
        do
        {
          v49 = *(unsigned int **)(v48 - 8);
          if (v49)
          {
            v50 = v49 + 2;
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 16))(v49);
              v53 = v49 + 3;
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
                (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 24))(v49);
            }
          }
          v48 -= 16;
        }
        while (v48 > v47);
      }
      if ((unint64_t)v82 >= 0xB)
        operator delete(*((void **)&v82 + 1));
    }
    v1 = *a1;
    v56 = a1[1];
    if (!v43)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    *a1 = v1;
    if (v1 == v56)
    {
      v1 = v56;
LABEL_94:
      v57 = a1[3];
      if (v57 != v1)
      {
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v80 = v58;
        v81 = v58;
        v78 = v58;
        v79 = v58;
        v76 = v58;
        v77 = v58;
        v74 = v58;
        v75 = v58;
        v72 = v58;
        v73 = v58;
        v59 = *(_QWORD *)(v57 + 16);
        *(_QWORD *)&v82 = 10;
        *((_QWORD *)&v82 + 1) = &v72;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = v59;
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
        v60 = a1[2];
        a1[3] = a1[1];
        v61 = *(_DWORD **)(v60 + 288);
        if (v61)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v61, &v72);
        *(_QWORD *)(v60 + 288) = 0;
        (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
        v62 = *((_QWORD *)&v82 + 1);
        if (*((_QWORD *)&v82 + 1))
        {
          if ((uint64_t)v83 - 1 >= 0)
          {
            v63 = *((_QWORD *)&v82 + 1) + 16 * v83;
            do
            {
              v64 = *(unsigned int **)(v63 - 8);
              if (v64)
              {
                v65 = v64 + 2;
                do
                {
                  v66 = __ldaxr(v65);
                  v67 = v66 - 1;
                }
                while (__stlxr(v67, v65));
                if (!v67)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 16))(v64);
                  v68 = v64 + 3;
                  do
                  {
                    v69 = __ldaxr(v68);
                    v70 = v69 - 1;
                  }
                  while (__stlxr(v70, v68));
                  if (!v70)
                    (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 24))(v64);
                }
              }
              v63 -= 16;
            }
            while (v63 > v62);
          }
          if ((unint64_t)v82 >= 0xB)
            operator delete(*((void **)&v82 + 1));
        }
      }
      return;
    }
  }
  if (v1 == v56)
    goto LABEL_94;
}

void sub_227AAB3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_227AAB3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;

  if (*(_DWORD *)a1 == *(int *)a1 >> 31)
  {
    v2 = *(unsigned int **)(a1 + 16);
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    return a1;
  }
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

uint64_t boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  v4 = a1[32];
  if (v4 == a1[30])
  {
    if (v4 == -1)
    {
      v6 = (_QWORD *)a1[31];
    }
    else
    {
      if (4 * v4 <= (unint64_t)(v4 + 1))
        v5 = v4 + 1;
      else
        v5 = 4 * v4;
      v6 = a1;
      if (v5 >= 0xB)
      {
        if (v5 >= 0xAAAAAAAAAAAAAABLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v6 = operator new(24 * v5);
      }
      std::uninitialized_copy[abi:ne180100]<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr> *,boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr> *>(a1[31], a1[31] + 24 * v4, (uint64_t)v6);
      boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy(a1);
      a1[30] = v5;
      a1[31] = v6;
      v4 = a1[32];
    }
    v7 = &v6[3 * v4 + 1];
    result = *(_QWORD *)(a2 + 8);
    if (*(_DWORD *)a2 == *(int *)a2 >> 31)
    {
      *v7 = result;
      v12 = *(_QWORD *)(a2 + 16);
      v6[3 * v4 + 2] = v12;
      if (v12)
      {
        v13 = (unsigned int *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      goto LABEL_22;
    }
LABEL_21:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    *v7 = result;
    goto LABEL_22;
  }
  v6 = (_QWORD *)a1[31];
  v7 = &v6[3 * v4 + 1];
  result = *(_QWORD *)(a2 + 8);
  if (*(_DWORD *)a2 != *(int *)a2 >> 31)
    goto LABEL_21;
  *v7 = result;
  v9 = *(_QWORD *)(a2 + 16);
  v6[3 * v4 + 2] = v9;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
LABEL_22:
  LODWORD(v6[3 * v4]) = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  ++a1[32];
  return result;
}

void boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v1 = a1[31];
  if (v1)
  {
    v3 = a1[32];
    if (v3 - 1 >= 0)
    {
      v4 = v1 + 24 * v3;
      v5 = v4;
      do
      {
        v6 = *(_DWORD *)(v5 - 24);
        v5 -= 24;
        if (v6 == v6 >> 31)
        {
          v7 = *(unsigned int **)(v4 - 8);
          if (v7)
          {
            v8 = v7 + 2;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
              v11 = v7 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
            }
          }
        }
        else
        {
          v14 = *(_QWORD *)(v4 - 16);
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
        v4 = v5;
      }
      while (v5 > v1);
    }
    if (a1[30] >= 0xBuLL)
      operator delete((void *)a1[31]);
  }
}

uint64_t std::uninitialized_copy[abi:ne180100]<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr> *,boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  if (a1 == a2)
    return a3;
  v4 = a1;
  v5 = a3;
  do
  {
    v7 = *(_QWORD *)(v4 + 8);
    if (*(_DWORD *)v4 == *(int *)v4 >> 31)
    {
      v8 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v5 + 8) = v7;
      *(_QWORD *)(v5 + 16) = v8;
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
    }
    else
    {
      *(_QWORD *)(v5 + 8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
    v6 = *(_DWORD *)v4;
    v4 += 24;
    *(_DWORD *)v5 = v6 ^ (v6 >> 31);
    v5 += 24;
  }
  while (v4 != a2);
  return v5;
}

void boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  __int128 v4;
  pthread_mutex_t *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  int v47;
  int v48;
  _QWORD *v49;
  __int128 v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t *v83;
  _OWORD v84[10];
  unint64_t v85;
  void *__p;
  uint64_t v87;
  pthread_mutex_t *v88;
  uint64_t v89;

  v3 = (uint64_t **)a1;
  v89 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v84[8] = v4;
  v84[9] = v4;
  v84[6] = v4;
  v84[7] = v4;
  v84[4] = v4;
  v84[5] = v4;
  v84[2] = v4;
  v84[3] = v4;
  v84[0] = v4;
  v84[1] = v4;
  v5 = *(pthread_mutex_t **)(a1 + 24);
  v85 = 10;
  __p = v84;
  v87 = 0;
  v88 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2)
    goto LABEL_101;
  v6 = v3[1];
  if (!v6 || (v7 = atomic_load((unsigned int *)v6 + 2), v7 != 1))
  {
    v82 = (uint64_t *)operator new(0x20uLL);
    v8 = *v3;
    v9 = **v3;
    v10 = operator new(0x40uLL);
    v11 = v10;
    *v10 = v10;
    v10[1] = v10;
    v10[2] = 0;
    v12 = *(_QWORD **)(v9 + 8);
    if (v12 != (_QWORD *)v9)
    {
      v13 = 0;
      v14 = v10;
      do
      {
        v15 = operator new(0x20uLL);
        v15[2] = v12[2];
        v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          v17 = (unsigned int *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          v14 = (_QWORD *)*v11;
          v13 = v11[2];
        }
        *v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        *v11 = v15;
        v11[2] = ++v13;
        v12 = (_QWORD *)v12[1];
        v14 = v15;
      }
      while (v12 != (_QWORD *)v9);
    }
    v80 = v8;
    v81 = v3;
    v11[3] = 0;
    v19 = (_QWORD **)(v11 + 3);
    v11[4] = 0;
    v20 = v11 + 4;
    v11[5] = 0;
    *((_BYTE *)v11 + 48) = *(_BYTE *)(v9 + 48);
    v11[3] = v11 + 4;
    v21 = *(_QWORD **)(v9 + 24);
    v22 = (_QWORD *)(v9 + 32);
    if (v21 == (_QWORD *)(v9 + 32))
    {
LABEL_12:
      *((_BYTE *)v11 + 56) = *(_BYTE *)(v9 + 56);
      v23 = *(_QWORD **)(v9 + 24);
      if (v23 != v22)
      {
        v24 = (_QWORD *)v11[3];
        v25 = v11[1];
        do
        {
          v24[6] = v25;
          v26 = v9;
          if (v23 != v22)
            v26 = v23[6];
          v27 = (_QWORD *)v23[1];
          v28 = v27;
          v29 = v23;
          if (v27)
          {
            do
            {
              v30 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v30 = (_QWORD *)v29[2];
              v31 = *v30 == (_QWORD)v29;
              v29 = v30;
            }
            while (!v31);
          }
          v32 = v9;
          if (v30 != v22)
            v32 = v30[6];
          while (v26 != v32)
          {
            v26 = *(_QWORD *)(v26 + 8);
            v25 = *(_QWORD *)(v25 + 8);
          }
          if (v27)
          {
            do
            {
              v33 = v27;
              v27 = (_QWORD *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v33 = (_QWORD *)v23[2];
              v31 = *v33 == (_QWORD)v23;
              v23 = v33;
            }
            while (!v31);
          }
          v34 = (_QWORD *)v24[1];
          if (v34)
          {
            do
            {
              v35 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (_QWORD *)v24[2];
              v31 = *v35 == (_QWORD)v24;
              v24 = v35;
            }
            while (!v31);
          }
          v23 = v33;
          v24 = v35;
        }
        while (v33 != v22);
      }
      *v82 = (uint64_t)v11;
      v82[1] = 0;
      v55 = operator new(0x18uLL);
      v55[1] = 0x100000001;
      *v55 = off_24F034E28;
      v55[2] = v11;
      v82[1] = (uint64_t)v55;
      v3 = v81;
      v82[2] = v80[2];
      v56 = v80[3];
      v82[3] = v56;
      if (v56)
      {
        v57 = (unsigned int *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = (uint64_t *)operator new(0x18uLL);
      v59[1] = 0x100000001;
      *v59 = (uint64_t)off_24F034DB8;
      v59[2] = (uint64_t)v82;
      v60 = (unsigned int *)v81[1];
      *v81 = v82;
      v81[1] = v59;
      if (v60)
      {
        v61 = v60 + 2;
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 16))(v60);
          v64 = v60 + 3;
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
            (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 24))(v60);
        }
      }
      goto LABEL_95;
    }
    while (1)
    {
      v36 = *((_DWORD *)v21 + 8);
      v37 = (_QWORD *)*v20;
      v38 = v11 + 4;
      if (*v19 != v20)
      {
        v39 = (_QWORD *)*v20;
        v40 = v11 + 4;
        if (v37)
        {
          do
          {
            v38 = v39;
            v39 = (_QWORD *)v39[1];
          }
          while (v39);
        }
        else
        {
          do
          {
            v38 = (_QWORD *)v40[2];
            v31 = *v38 == (_QWORD)v40;
            v40 = v38;
          }
          while (v31);
        }
        v41 = *((_DWORD *)v21 + 10);
        v42 = *((_DWORD *)v38 + 8);
        if (v42 == v36)
        {
          if (v36 != 1)
            goto LABEL_57;
          if (*((_DWORD *)v38 + 10) >= v41)
          {
            v43 = (_QWORD *)*v20;
            v44 = v11 + 4;
            v45 = v11 + 4;
            if (v37)
              goto LABEL_61;
LABEL_68:
            v49 = operator new(0x38uLL);
            v50 = *((_OWORD *)v21 + 2);
            v49[6] = v21[6];
            *((_OWORD *)v49 + 2) = v50;
            *v49 = 0;
            v49[1] = 0;
            v49[2] = v45;
            *v44 = v49;
            v51 = (_QWORD *)**v19;
            if (v51)
            {
              *v19 = v51;
              v49 = (_QWORD *)*v44;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v49);
            ++v11[5];
            goto LABEL_71;
          }
        }
        else if (v42 >= v36)
        {
LABEL_57:
          v44 = v11 + 4;
          v45 = v11 + 4;
          if (!v37)
            goto LABEL_68;
          v43 = (_QWORD *)*v20;
          if (v36 != 1)
          {
            v46 = *((_DWORD *)v37 + 8);
            v45 = (_QWORD *)*v20;
            while (v36 != v46)
            {
              if (v36 < v46)
              {
                v54 = *v45;
                v44 = v45;
                if (!*v45)
                  goto LABEL_68;
              }
              else
              {
                if (v46 >= v36)
                  goto LABEL_71;
                v54 = v45[1];
                if (!v54)
                  goto LABEL_67;
              }
              v46 = *(_DWORD *)(v54 + 32);
              v45 = (_QWORD *)v54;
            }
            goto LABEL_71;
          }
          while (1)
          {
LABEL_61:
            v45 = v43;
            v47 = *((_DWORD *)v43 + 8);
            if (v47 == 1)
            {
              v48 = *((_DWORD *)v43 + 10);
              if (v48 > v41)
                goto LABEL_60;
              if (v48 >= v41)
                goto LABEL_71;
            }
            else if (v47 > 1)
            {
LABEL_60:
              v43 = (_QWORD *)*v43;
              v44 = v45;
              if (!*v45)
                goto LABEL_68;
              continue;
            }
            v43 = (_QWORD *)v43[1];
            if (!v43)
            {
LABEL_67:
              v44 = v45 + 1;
              goto LABEL_68;
            }
          }
        }
      }
      if (v37)
        v45 = v38;
      else
        v45 = v11 + 4;
      if (v37)
        v44 = v38 + 1;
      else
        v44 = v11 + 4;
      if (!*v44)
        goto LABEL_68;
LABEL_71:
      v52 = (_QWORD *)v21[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (_QWORD *)v21[2];
          v31 = *v53 == (_QWORD)v21;
          v21 = v53;
        }
        while (!v31);
      }
      v21 = v53;
      if (v53 == v22)
        goto LABEL_12;
    }
  }
LABEL_95:
  v67 = (uint64_t **)*v3;
  v68 = (uint64_t *)**v3;
  v69 = (uint64_t *)v68[1];
  v83 = v69;
  if (v68 != v69)
  {
    do
    {
      while (1)
      {
        v70 = v69[2];
        if (!*(_BYTE *)(v70 + 24))
          break;
        v69 = (uint64_t *)v69[1];
        v83 = v69;
        v68 = *v67;
        if (v69 == *v67)
          goto LABEL_100;
      }
      v69 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::erase(v68, (int *)(v70 + 64), &v83);
      v67 = (uint64_t **)*v3;
      v83 = v69;
      v68 = *v67;
    }
    while (v69 != *v67);
  }
LABEL_100:
  v3[2] = v69;
LABEL_101:
  pthread_mutex_unlock(v88);
  v71 = (char *)__p;
  if (__p)
  {
    if (v87 - 1 >= 0)
    {
      v72 = (char *)__p + 16 * v87;
      do
      {
        v73 = (unsigned int *)*((_QWORD *)v72 - 1);
        if (v73)
        {
          v74 = v73 + 2;
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 16))(v73);
            v77 = v73 + 3;
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
              (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 24))(v73);
          }
        }
        v72 -= 16;
      }
      while (v72 > v71);
    }
    if (v85 >= 0xB)
      operator delete(__p);
  }
}

void sub_227AAC088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v14[10];
  unint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[8] = v3;
    v14[9] = v3;
    v14[6] = v3;
    v14[7] = v3;
    v14[4] = v3;
    v14[5] = v3;
    v14[2] = v3;
    v14[3] = v3;
    v14[0] = v3;
    v14[1] = v3;
    v15 = 10;
    __p = v14;
    v17 = 0;
    v18 = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v4 = (char *)__p;
    if (__p)
    {
      if (v17 - 1 >= 0)
      {
        v5 = (char *)__p + 16 * v17;
        do
        {
          v6 = (unsigned int *)*((_QWORD *)v5 - 1);
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v15 >= 0xB)
        operator delete(__p);
    }
  }
  boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
    *(_BYTE *)a1 = 0;
  return a1;
}

void sub_227AAC8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN3ice6detail12wrapCallbackIZNS_6Client13regIndicationIN7desense13CommandDriverENS4_16ARICommandDriverEvJPKhjEEEvjNSt3__110shared_ptrIT_EEMT0_FT1_DpT2_EEUlS8_jE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENS9_17integral_constantIiLi2EEEOSB__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v3 = *(_QWORD **)(a1 + 32);
  if (v3)
  {
    v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      v7 = std::__shared_weak_count::lock(v4);
      if (v7)
      {
        v8 = v7;
        if (*v3)
        {
          v9 = (void (*)(_QWORD *, uint64_t, uint64_t))v3[2];
          v10 = v3[3];
          v11 = (_QWORD *)(*v3 + (v10 >> 1));
          if ((v10 & 1) != 0)
            v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*v11 + v9);
          v9(v11, a2, a3);
        }
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_227AACA70(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c146_ZTSNSt3__110shared_ptrIZN3ice6Client13regIndicationIN7desense13CommandDriverENS4_16ARICommandDriverEvJPKhjEEEvjNS0_IT_EEMT0_FT1_DpT2_EEUlS8_jE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c146_ZTSNSt3__110shared_ptrIZN3ice6Client13regIndicationIN7desense13CommandDriverENS4_16ARICommandDriverEvJPKhjEEEvjNS0_IT_EEMT0_FT1_DpT2_EEUlS8_jE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<void ice::Client::regIndication<desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void ice::Client::regIndication<desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F034EB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void ice::Client::regIndication<desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void ice::Client::regIndication<desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F034EB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<void ice::Client::regIndication<desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void ice::Client::regIndication<desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_4(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN7desense13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIKN7desense13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIKN7desense13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN3ice6detail12wrapCallbackIZNS_6Client4sendIN6AriSdk34ARI_IBIMsAccCurrentFreqInfoReq_SDKEN7desense13CommandDriverENS6_16ARICommandDriverEvJPKhjEEENS_16SendMsgBaseProxyERT_NSt3__110shared_ptrIT0_EEMT1_FT2_DpT3_EEUlSA_jE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENSE_17integral_constantIiLi2EEEOSC__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v3 = *(_QWORD **)(a1 + 32);
  if (v3)
  {
    v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      v7 = std::__shared_weak_count::lock(v4);
      if (v7)
      {
        v8 = v7;
        if (*v3)
        {
          v9 = (void (*)(_QWORD *, uint64_t, uint64_t))v3[2];
          v10 = v3[3];
          v11 = (_QWORD *)(*v3 + (v10 >> 1));
          if ((v10 & 1) != 0)
            v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*v11 + v9);
          v9(v11, a2, a3);
        }
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_227AACCBC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c206_ZTSNSt3__110shared_ptrIZN3ice6Client4sendIN6AriSdk34ARI_IBIMsAccCurrentFreqInfoReq_SDKEN7desense13CommandDriverENS6_16ARICommandDriverEvJPKhjEEENS1_16SendMsgBaseProxyERT_NS0_IT0_EEMT1_FT2_DpT3_EEUlSA_jE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c206_ZTSNSt3__110shared_ptrIZN3ice6Client4sendIN6AriSdk34ARI_IBIMsAccCurrentFreqInfoReq_SDKEN7desense13CommandDriverENS6_16ARICommandDriverEvJPKhjEEENS1_16SendMsgBaseProxyERT_NS0_IT0_EEMT1_FT2_DpT3_EEUlSA_jE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<ice::SendMsgBaseProxy ice::Client::send<AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK,desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK &,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1},std::allocator<ice::SendMsgBaseProxy ice::Client::send<AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK,desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK &,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F034F98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ice::SendMsgBaseProxy ice::Client::send<AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK,desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK &,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1},std::allocator<ice::SendMsgBaseProxy ice::Client::send<AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK,desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK &,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F034F98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<ice::SendMsgBaseProxy ice::Client::send<AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK,desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK &,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1},std::allocator<ice::SendMsgBaseProxy ice::Client::send<AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK,desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK &,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

_QWORD *std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(_QWORD *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  if (a3 != a4)
  {
    v7 = result;
    result = operator new(0x20uLL);
    v8 = result;
    *result = 0;
    result[1] = 0;
    *((_OWORD *)result + 1) = *(_OWORD *)(a3 + 16);
    v9 = *(_QWORD *)(a3 + 8);
    v10 = 1;
    if (v9 != a4)
    {
      v11 = result;
      do
      {
        result = operator new(0x20uLL);
        *result = v11;
        result[1] = 0;
        *((_OWORD *)result + 1) = *(_OWORD *)(v9 + 16);
        v11[1] = result;
        ++v10;
        v9 = *(_QWORD *)(v9 + 8);
        v11 = result;
      }
      while (v9 != a4);
    }
    v12 = *a2;
    *(_QWORD *)(v12 + 8) = v8;
    *v8 = v12;
    *a2 = (uint64_t)result;
    result[1] = a2;
    v7[2] += v10;
  }
  return result;
}

void sub_227AACE80(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_227AACEA0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 292) > *(_DWORD *)(*a1 + 288))
    boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  int v27;
  uint64_t ***v28;
  BOOL v29;
  BOOL v30;
  uint64_t ***v31;
  uint64_t *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;

  v7 = (uint64_t **)(a1 + 4);
  v6 = a1[4];
  if (!v6)
  {
    v23 = (uint64_t *)a1[10];
    if (v23 != *a3)
      goto LABEL_80;
    v24 = (uint64_t *)v23[1];
    v25 = (uint64_t **)(a1 + 4);
    v10 = a1 + 4;
    if (v24 != a1)
      goto LABEL_76;
    goto LABEL_55;
  }
  v8 = *a2;
  v9 = a2[2];
  v10 = a1 + 4;
  v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        v17 = *(_DWORD *)(v11 + 32);
        v18 = v17 < 1;
        if (v17 == 1)
          v18 = *(_DWORD *)(v11 + 40) < v9;
        if (!v18)
          break;
        v11 = *(_QWORD *)(v11 + 8);
        if (!v11)
          goto LABEL_19;
      }
      v10 = (uint64_t *)v11;
      v11 = *(_QWORD *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      v12 = *(_DWORD *)(v11 + 32);
      v13 = v12 == v8;
      v14 = v12 < v8;
      if (v12 >= v8)
        v15 = (uint64_t *)v11;
      else
        v15 = (uint64_t *)(v11 + 8);
      if (v14)
        v16 = v10;
      else
        v16 = (uint64_t *)v11;
      if (v13)
      {
        v15 = (uint64_t *)v11;
        v10 = (uint64_t *)v11;
      }
      else
      {
        v10 = v16;
      }
      v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  v19 = (uint64_t *)v10[6];
  if (v19 != *a3)
    goto LABEL_80;
  v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    v21 = (uint64_t *)a1[4];
    while (1)
    {
      v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10))
          goto LABEL_27;
LABEL_22:
        v21 = (uint64_t *)v21[1];
        if (!v21)
          goto LABEL_42;
      }
      else
      {
        if (v22 <= 1)
          goto LABEL_22;
LABEL_27:
        v20 = (uint64_t **)v21;
        v21 = (uint64_t *)*v21;
        if (!v21)
          goto LABEL_42;
      }
    }
  }
  v26 = (uint64_t **)a1[4];
  do
  {
    v27 = *((_DWORD *)v26 + 8);
    v28 = (uint64_t ***)(v26 + 1);
    v29 = v8 == v27;
    v30 = v8 < v27;
    if (v8 >= v27)
      v31 = (uint64_t ***)(v26 + 1);
    else
      v31 = (uint64_t ***)v26;
    if (!v30)
      v26 = v20;
    if (v29)
      v31 = v28;
    else
      v20 = v26;
    v26 = *v31;
  }
  while (*v31);
LABEL_42:
  v24 = (uint64_t *)v19[1];
  v32 = a1;
  if (v20 != v7)
    v32 = v20[6];
  if (v24 == v32)
  {
LABEL_55:
    v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        v38 = v37;
        v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      v41 = v10;
      do
      {
        v38 = (uint64_t *)v41[2];
        v13 = *v38 == (_QWORD)v41;
        v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10)
      a1[3] = (uint64_t)v38;
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  v33 = *a2;
  if (*a2 == 1)
  {
    v34 = a2[2];
    while (1)
    {
      v25 = (uint64_t **)v6;
      v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(_QWORD *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        v6 = *(_QWORD *)v6;
        if (!*v25)
        {
          v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1)
          goto LABEL_47;
LABEL_53:
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
        {
          v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39)
    goto LABEL_79;
  while (v33 >= v39)
  {
    if (v39 >= v33)
      goto LABEL_79;
    v40 = *(_QWORD *)(v6 + 8);
    if (!v40)
    {
      v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    v39 = *(_DWORD *)(v40 + 32);
    v6 = v40;
    if (v33 == v39)
    {
      *(_QWORD *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  v40 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
    goto LABEL_61;
  v7 = (uint64_t **)v6;
LABEL_75:
  v25 = (uint64_t **)v6;
LABEL_76:
  v6 = (uint64_t)operator new(0x38uLL);
  *(_QWORD *)(v6 + 32) = *(_QWORD *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = v25;
  *v7 = (uint64_t *)v6;
  v42 = *(_QWORD *)a1[3];
  v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(_QWORD *)(v6 + 48) = v24;
LABEL_80:
  v44 = *a3;
  v45 = **a3;
  v46 = (*a3)[1];
  *(_QWORD *)(v45 + 8) = v46;
  *(_QWORD *)v44[1] = v45;
  --a1[2];
  v47 = (unsigned int *)v44[3];
  if (v47)
  {
    v48 = v47 + 2;
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 16))(v47);
      v51 = v47 + 3;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
        (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 24))(v47);
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int i;
  unsigned int v30;
  uint64_t v31;
  char v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD v84[6];

  v84[3] = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  if (*a1 == a1[3])
    return;
  if (v1 == a1[1])
    goto LABEL_94;
  while (1)
  {
    v3 = a1[2];
    v4 = *(_QWORD *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        v17 = *(_QWORD *)(v3 + 264);
      }
      else
      {
        v5 = *(_QWORD *)(v3 + 256);
        v6 = v5 + 24 * v4;
        v7 = v6;
        do
        {
          v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            v9 = *(unsigned int **)(v6 - 8);
            if (v9)
            {
              v10 = v9 + 2;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
                v13 = v9 + 3;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v6 - 16);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          v6 = v7;
        }
        while (v7 > v5);
        v17 = *(_QWORD *)(v3 + 264);
        v1 = *a1;
      }
      *(_QWORD *)(v3 + 264) = v17 - v4;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v82 = v18;
    v83 = v18;
    v80 = v18;
    v81 = v18;
    v78 = v18;
    v79 = v18;
    v76 = v18;
    v77 = v18;
    v74 = v18;
    v75 = v18;
    v72 = v18;
    v73 = v18;
    v19 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)&v82 = 10;
    *((_QWORD *)&v82 + 1) = &v72;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = v19;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *a1;
    v21 = *(_QWORD *)(*a1 + 16);
    v22 = a1[2];
    v23 = *(uint64_t **)(v21 + 32);
    if (v23)
    {
      v24 = *v23;
      if (*v23 != v23[1])
      {
        v25 = (_QWORD *)(v22 + 8);
        while (1)
        {
          memset(v84, 170, 24);
          v26 = *(_DWORD *)v24 ^ (*(int *)v24 >> 31);
          if (v26 == 2)
          {
            (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v24 + 8) + 16))(&v71);
            v84[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
            LODWORD(v84[0]) = 1;
            if (v71)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
              if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
                goto LABEL_47;
LABEL_40:
              v31 = *(_QWORD *)(v24 + 16);
              if (!v31)
                goto LABEL_48;
              if (!atomic_load((unsigned int *)(v31 + 8)))
                goto LABEL_48;
LABEL_42:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v25, (uint64_t)v84);
              v33 = 0;
              if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
                goto LABEL_51;
              goto LABEL_43;
            }
LABEL_39:
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          if (v26 != 1)
          {
            LODWORD(v84[0]) = 0;
            v84[1] = 0;
            v84[2] = 0;
            goto LABEL_39;
          }
          v27 = *(_QWORD *)(v24 + 16);
          if (!v27)
          {
LABEL_46:
            v84[1] = 0;
            v84[2] = v27;
            LODWORD(v84[0]) = 0;
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          v28 = (unsigned int *)(v27 + 8);
          for (i = *(_DWORD *)(v27 + 8); ; i = v30)
          {
            if (!i)
            {
              v27 = 0;
              goto LABEL_46;
            }
            v30 = __ldxr(v28);
            if (v30 != i)
            {
              __clrex();
              continue;
            }
            if (!__stxr(i + 1, v28))
              break;
          }
          v84[1] = *(_QWORD *)(v24 + 8);
          v84[2] = v27;
          LODWORD(v84[0]) = 0;
          if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) != 2)
            goto LABEL_40;
LABEL_47:
          if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v24 + 8) + 24))(*(_QWORD *)(v24 + 8)))
            goto LABEL_42;
LABEL_48:
          if (*(_BYTE *)(v21 + 24))
          {
            *(_BYTE *)(v21 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v21, &v72);
          }
          v33 = 1;
          if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
          {
LABEL_51:
            v34 = (unsigned int *)v84[2];
            if (v84[2])
            {
              v35 = (unsigned int *)(v84[2] + 8);
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
                v38 = v34 + 3;
                do
                {
                  v39 = __ldaxr(v38);
                  v40 = v39 - 1;
                }
                while (__stlxr(v40, v38));
                if (!v40)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 24))(v34);
              }
            }
            goto LABEL_59;
          }
LABEL_43:
          if (v84[1])
            (*(void (**)(_QWORD))(*(_QWORD *)v84[1] + 8))(v84[1]);
LABEL_59:
          if ((v33 & 1) == 0)
          {
            v24 += 24;
            if (v24 != *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8))
              continue;
          }
          v20 = *a1;
          v21 = *(_QWORD *)(*a1 + 16);
          v22 = a1[2];
          break;
        }
      }
    }
    if (*(_BYTE *)(v21 + 24))
    {
      ++*(_DWORD *)(v22 + 288);
      v41 = *(_QWORD *)(v21 + 16);
      if (v41)
      {
        if (atomic_load((unsigned int *)(v41 + 8)))
        {
          v43 = 1;
          goto LABEL_76;
        }
        v22 = a1[2];
        v20 = *a1;
      }
      a1[3] = v20;
      if (a1[1] == v20)
      {
        v46 = *(_DWORD **)(v22 + 296);
        if (v46)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v46, &v72);
        v43 = 0;
        *(_QWORD *)(v22 + 296) = 0;
      }
      else
      {
        v44 = *(_QWORD *)(v20 + 16);
        v45 = *(_DWORD **)(v22 + 296);
        if (v45)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v45, &v72);
        *(_QWORD *)(v22 + 296) = v44;
        v43 = 0;
        if (v44)
          ++*(_DWORD *)(v44 + 28);
      }
    }
    else
    {
      ++*(_DWORD *)(v22 + 292);
      v43 = 1;
    }
LABEL_76:
    (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
    v47 = *((_QWORD *)&v82 + 1);
    if (*((_QWORD *)&v82 + 1))
    {
      if ((uint64_t)v83 - 1 >= 0)
      {
        v48 = *((_QWORD *)&v82 + 1) + 16 * v83;
        do
        {
          v49 = *(unsigned int **)(v48 - 8);
          if (v49)
          {
            v50 = v49 + 2;
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 16))(v49);
              v53 = v49 + 3;
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
                (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 24))(v49);
            }
          }
          v48 -= 16;
        }
        while (v48 > v47);
      }
      if ((unint64_t)v82 >= 0xB)
        operator delete(*((void **)&v82 + 1));
    }
    v1 = *a1;
    v56 = a1[1];
    if (!v43)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    *a1 = v1;
    if (v1 == v56)
    {
      v1 = v56;
LABEL_94:
      v57 = a1[3];
      if (v57 != v1)
      {
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v80 = v58;
        v81 = v58;
        v78 = v58;
        v79 = v58;
        v76 = v58;
        v77 = v58;
        v74 = v58;
        v75 = v58;
        v72 = v58;
        v73 = v58;
        v59 = *(_QWORD *)(v57 + 16);
        *(_QWORD *)&v82 = 10;
        *((_QWORD *)&v82 + 1) = &v72;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = v59;
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
        v60 = a1[2];
        a1[3] = a1[1];
        v61 = *(_DWORD **)(v60 + 296);
        if (v61)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v61, &v72);
        *(_QWORD *)(v60 + 296) = 0;
        (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
        v62 = *((_QWORD *)&v82 + 1);
        if (*((_QWORD *)&v82 + 1))
        {
          if ((uint64_t)v83 - 1 >= 0)
          {
            v63 = *((_QWORD *)&v82 + 1) + 16 * v83;
            do
            {
              v64 = *(unsigned int **)(v63 - 8);
              if (v64)
              {
                v65 = v64 + 2;
                do
                {
                  v66 = __ldaxr(v65);
                  v67 = v66 - 1;
                }
                while (__stlxr(v67, v65));
                if (!v67)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 16))(v64);
                  v68 = v64 + 3;
                  do
                  {
                    v69 = __ldaxr(v68);
                    v70 = v69 - 1;
                  }
                  while (__stlxr(v70, v68));
                  if (!v70)
                    (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 24))(v64);
                }
              }
              v63 -= 16;
            }
            while (v63 > v62);
          }
          if ((unint64_t)v82 >= 0xB)
            operator delete(*((void **)&v82 + 1));
        }
      }
      return;
    }
  }
  if (v1 == v56)
    goto LABEL_94;
}

void sub_227AAD968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_227AAD97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  __int128 v4;
  pthread_mutex_t *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  int v47;
  int v48;
  _QWORD *v49;
  __int128 v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t *v83;
  _OWORD v84[10];
  unint64_t v85;
  void *__p;
  uint64_t v87;
  pthread_mutex_t *v88;
  uint64_t v89;

  v3 = (uint64_t **)a1;
  v89 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v84[8] = v4;
  v84[9] = v4;
  v84[6] = v4;
  v84[7] = v4;
  v84[4] = v4;
  v84[5] = v4;
  v84[2] = v4;
  v84[3] = v4;
  v84[0] = v4;
  v84[1] = v4;
  v5 = *(pthread_mutex_t **)(a1 + 24);
  v85 = 10;
  __p = v84;
  v87 = 0;
  v88 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2)
    goto LABEL_101;
  v6 = v3[1];
  if (!v6 || (v7 = atomic_load((unsigned int *)v6 + 2), v7 != 1))
  {
    v82 = (uint64_t *)operator new(0x20uLL);
    v8 = *v3;
    v9 = **v3;
    v10 = operator new(0x40uLL);
    v11 = v10;
    *v10 = v10;
    v10[1] = v10;
    v10[2] = 0;
    v12 = *(_QWORD **)(v9 + 8);
    if (v12 != (_QWORD *)v9)
    {
      v13 = 0;
      v14 = v10;
      do
      {
        v15 = operator new(0x20uLL);
        v15[2] = v12[2];
        v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          v17 = (unsigned int *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          v14 = (_QWORD *)*v11;
          v13 = v11[2];
        }
        *v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        *v11 = v15;
        v11[2] = ++v13;
        v12 = (_QWORD *)v12[1];
        v14 = v15;
      }
      while (v12 != (_QWORD *)v9);
    }
    v80 = v8;
    v81 = v3;
    v11[3] = 0;
    v19 = (_QWORD **)(v11 + 3);
    v11[4] = 0;
    v20 = v11 + 4;
    v11[5] = 0;
    *((_BYTE *)v11 + 48) = *(_BYTE *)(v9 + 48);
    v11[3] = v11 + 4;
    v21 = *(_QWORD **)(v9 + 24);
    v22 = (_QWORD *)(v9 + 32);
    if (v21 == (_QWORD *)(v9 + 32))
    {
LABEL_12:
      *((_BYTE *)v11 + 56) = *(_BYTE *)(v9 + 56);
      v23 = *(_QWORD **)(v9 + 24);
      if (v23 != v22)
      {
        v24 = (_QWORD *)v11[3];
        v25 = v11[1];
        do
        {
          v24[6] = v25;
          v26 = v9;
          if (v23 != v22)
            v26 = v23[6];
          v27 = (_QWORD *)v23[1];
          v28 = v27;
          v29 = v23;
          if (v27)
          {
            do
            {
              v30 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v30 = (_QWORD *)v29[2];
              v31 = *v30 == (_QWORD)v29;
              v29 = v30;
            }
            while (!v31);
          }
          v32 = v9;
          if (v30 != v22)
            v32 = v30[6];
          while (v26 != v32)
          {
            v26 = *(_QWORD *)(v26 + 8);
            v25 = *(_QWORD *)(v25 + 8);
          }
          if (v27)
          {
            do
            {
              v33 = v27;
              v27 = (_QWORD *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v33 = (_QWORD *)v23[2];
              v31 = *v33 == (_QWORD)v23;
              v23 = v33;
            }
            while (!v31);
          }
          v34 = (_QWORD *)v24[1];
          if (v34)
          {
            do
            {
              v35 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (_QWORD *)v24[2];
              v31 = *v35 == (_QWORD)v24;
              v24 = v35;
            }
            while (!v31);
          }
          v23 = v33;
          v24 = v35;
        }
        while (v33 != v22);
      }
      *v82 = (uint64_t)v11;
      v82[1] = 0;
      v55 = operator new(0x18uLL);
      v55[1] = 0x100000001;
      *v55 = off_24F035048;
      v55[2] = v11;
      v82[1] = (uint64_t)v55;
      v3 = v81;
      v82[2] = v80[2];
      v56 = v80[3];
      v82[3] = v56;
      if (v56)
      {
        v57 = (unsigned int *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = (uint64_t *)operator new(0x18uLL);
      v59[1] = 0x100000001;
      *v59 = (uint64_t)off_24F034FE8;
      v59[2] = (uint64_t)v82;
      v60 = (unsigned int *)v81[1];
      *v81 = v82;
      v81[1] = v59;
      if (v60)
      {
        v61 = v60 + 2;
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 16))(v60);
          v64 = v60 + 3;
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
            (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 24))(v60);
        }
      }
      goto LABEL_95;
    }
    while (1)
    {
      v36 = *((_DWORD *)v21 + 8);
      v37 = (_QWORD *)*v20;
      v38 = v11 + 4;
      if (*v19 != v20)
      {
        v39 = (_QWORD *)*v20;
        v40 = v11 + 4;
        if (v37)
        {
          do
          {
            v38 = v39;
            v39 = (_QWORD *)v39[1];
          }
          while (v39);
        }
        else
        {
          do
          {
            v38 = (_QWORD *)v40[2];
            v31 = *v38 == (_QWORD)v40;
            v40 = v38;
          }
          while (v31);
        }
        v41 = *((_DWORD *)v21 + 10);
        v42 = *((_DWORD *)v38 + 8);
        if (v42 == v36)
        {
          if (v36 != 1)
            goto LABEL_57;
          if (*((_DWORD *)v38 + 10) >= v41)
          {
            v43 = (_QWORD *)*v20;
            v44 = v11 + 4;
            v45 = v11 + 4;
            if (v37)
              goto LABEL_61;
LABEL_68:
            v49 = operator new(0x38uLL);
            v50 = *((_OWORD *)v21 + 2);
            v49[6] = v21[6];
            *((_OWORD *)v49 + 2) = v50;
            *v49 = 0;
            v49[1] = 0;
            v49[2] = v45;
            *v44 = v49;
            v51 = (_QWORD *)**v19;
            if (v51)
            {
              *v19 = v51;
              v49 = (_QWORD *)*v44;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v49);
            ++v11[5];
            goto LABEL_71;
          }
        }
        else if (v42 >= v36)
        {
LABEL_57:
          v44 = v11 + 4;
          v45 = v11 + 4;
          if (!v37)
            goto LABEL_68;
          v43 = (_QWORD *)*v20;
          if (v36 != 1)
          {
            v46 = *((_DWORD *)v37 + 8);
            v45 = (_QWORD *)*v20;
            while (v36 != v46)
            {
              if (v36 < v46)
              {
                v54 = *v45;
                v44 = v45;
                if (!*v45)
                  goto LABEL_68;
              }
              else
              {
                if (v46 >= v36)
                  goto LABEL_71;
                v54 = v45[1];
                if (!v54)
                  goto LABEL_67;
              }
              v46 = *(_DWORD *)(v54 + 32);
              v45 = (_QWORD *)v54;
            }
            goto LABEL_71;
          }
          while (1)
          {
LABEL_61:
            v45 = v43;
            v47 = *((_DWORD *)v43 + 8);
            if (v47 == 1)
            {
              v48 = *((_DWORD *)v43 + 10);
              if (v48 > v41)
                goto LABEL_60;
              if (v48 >= v41)
                goto LABEL_71;
            }
            else if (v47 > 1)
            {
LABEL_60:
              v43 = (_QWORD *)*v43;
              v44 = v45;
              if (!*v45)
                goto LABEL_68;
              continue;
            }
            v43 = (_QWORD *)v43[1];
            if (!v43)
            {
LABEL_67:
              v44 = v45 + 1;
              goto LABEL_68;
            }
          }
        }
      }
      if (v37)
        v45 = v38;
      else
        v45 = v11 + 4;
      if (v37)
        v44 = v38 + 1;
      else
        v44 = v11 + 4;
      if (!*v44)
        goto LABEL_68;
LABEL_71:
      v52 = (_QWORD *)v21[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (_QWORD *)v21[2];
          v31 = *v53 == (_QWORD)v21;
          v21 = v53;
        }
        while (!v31);
      }
      v21 = v53;
      if (v53 == v22)
        goto LABEL_12;
    }
  }
LABEL_95:
  v67 = (uint64_t **)*v3;
  v68 = (uint64_t *)**v3;
  v69 = (uint64_t *)v68[1];
  v83 = v69;
  if (v68 != v69)
  {
    do
    {
      while (1)
      {
        v70 = v69[2];
        if (!*(_BYTE *)(v70 + 24))
          break;
        v69 = (uint64_t *)v69[1];
        v83 = v69;
        v68 = *v67;
        if (v69 == *v67)
          goto LABEL_100;
      }
      v69 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::erase(v68, (int *)(v70 + 64), &v83);
      v67 = (uint64_t **)*v3;
      v83 = v69;
      v68 = *v67;
    }
    while (v69 != *v67);
  }
LABEL_100:
  v3[2] = v69;
LABEL_101:
  pthread_mutex_unlock(v88);
  v71 = (char *)__p;
  if (__p)
  {
    if (v87 - 1 >= 0)
    {
      v72 = (char *)__p + 16 * v87;
      do
      {
        v73 = (unsigned int *)*((_QWORD *)v72 - 1);
        if (v73)
        {
          v74 = v73 + 2;
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 16))(v73);
            v77 = v73 + 3;
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
              (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 24))(v73);
          }
        }
        v72 -= 16;
      }
      while (v72 > v71);
    }
    if (v85 >= 0xB)
      operator delete(__p);
  }
}

void sub_227AAE188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v14[10];
  unint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 296);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[8] = v3;
    v14[9] = v3;
    v14[6] = v3;
    v14[7] = v3;
    v14[4] = v3;
    v14[5] = v3;
    v14[2] = v3;
    v14[3] = v3;
    v14[0] = v3;
    v14[1] = v3;
    v15 = 10;
    __p = v14;
    v17 = 0;
    v18 = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 296), v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v4 = (char *)__p;
    if (__p)
    {
      if (v17 - 1 >= 0)
      {
        v5 = (char *)__p + 16 * v17;
        do
        {
          v6 = (unsigned int *)*((_QWORD *)v5 - 1);
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v15 >= 0xB)
        operator delete(__p);
    }
  }
  boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
    *(_BYTE *)a1 = 0;
  return a1;
}

void sub_227AAE9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t antenna::ARICommandDriver::create@<X0>(uint64_t *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  antenna::CommandDriver *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v23[2];
  dispatch_object_t object;
  uint64_t v25;
  std::__shared_weak_count *v26;

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = (antenna::CommandDriver *)operator new(0xF8uLL);
  v9 = (std::__shared_weak_count *)a1[1];
  v25 = *a1;
  v26 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *a2;
  object = v12;
  if (v12)
    dispatch_retain(v12);
  v13 = *a3;
  v14 = (std::__shared_weak_count *)a3[1];
  v23[0] = v13;
  v23[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  antenna::ARICommandDriver::ARICommandDriver(v8, (uint64_t)&v25, &object, (uint64_t)v23);
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<antenna::ARICommandDriver>::shared_ptr[abi:ne180100]<antenna::ARICommandDriver,std::shared_ptr<antenna::ARICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::ARICommandDriver>(antenna::ARICommandDriver*)::{lambda(antenna::ARICommandDriver*)#1},void>(a4, (uint64_t)v8);
  ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a4);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (object)
    dispatch_release(object);
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a4 + 72))(*a4);
}

void sub_227AAEBE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_227AAEBF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v3)
    dispatch_release(v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

antenna::CommandDriver *antenna::ARICommandDriver::ARICommandDriver(antenna::CommandDriver *a1, uint64_t a2, dispatch_object_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  NSObject *v18;
  std::__shared_weak_count *v19;
  NSObject *object;
  std::__shared_weak_count *v21;

  v6 = *(std::__shared_weak_count **)(a2 + 8);
  v21 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  object = *a3;
  if (*a3)
    dispatch_retain(*a3);
  v9 = *(std::__shared_weak_count **)(a4 + 8);
  v19 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  antenna::CommandDriver::CommandDriver();
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (object)
    dispatch_release(object);
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *(_QWORD *)a1 = off_24F0350A8;
  v16 = *((_QWORD *)a1 + 11);
  v18 = v16;
  if (v16)
    dispatch_retain(v16);
  antenna::CommandDriver::getName(a1);
  ice::Client::create();
  if (v18)
    dispatch_release(v18);
  *((_QWORD *)a1 + 27) = 0;
  *((_QWORD *)a1 + 25) = 0;
  *((_QWORD *)a1 + 26) = (char *)a1 + 216;
  *((_QWORD *)a1 + 29) = 0;
  *((_QWORD *)a1 + 30) = 0;
  *((_QWORD *)a1 + 28) = 0;
  return a1;
}

void sub_227AAEDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, char a13)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_227AAEDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  void **v9;

  if (object)
    dispatch_release(object);
  antenna::CommandDriver::~CommandDriver(v9);
  _Unwind_Resume(a1);
}

void antenna::CommandDriver::~CommandDriver(void **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;

  *this = off_24F0351D0;
  if (*((char *)this + 183) < 0)
  {
    operator delete(this[20]);
    v2 = (std::__shared_weak_count *)this[19];
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = (std::__shared_weak_count *)this[19];
    if (!v2)
      goto LABEL_8;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)this[17];
    if (!v5)
      goto LABEL_14;
    goto LABEL_9;
  }
LABEL_8:
  v5 = (std::__shared_weak_count *)this[17];
  if (!v5)
    goto LABEL_14;
LABEL_9:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_14:
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy(this[14]);
  *this = off_24F035230;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v8 = this[12];
  if (v8)
    dispatch_release(v8);
  v9 = this[11];
  if (v9)
    dispatch_release(v9);
  v10 = (std::__shared_weak_count *)this[10];
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

void antenna::ARICommandDriver::~ARICommandDriver(antenna::ARICommandDriver *this)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint8_t v8[16];

  *(_QWORD *)this = off_24F0350A8;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v8, 2u);
  }
  v3 = *((_QWORD *)this + 30);
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)*((_QWORD *)this + 29);
  if (v4)
    _Block_release(v4);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy(*((_QWORD **)this + 27));
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (!v5)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    antenna::CommandDriver::~CommandDriver((void **)this);
  }
  else
  {
LABEL_11:
    antenna::CommandDriver::~CommandDriver((void **)this);
  }
}

{
  void *v1;

  antenna::ARICommandDriver::~ARICommandDriver(this);
  operator delete(v1);
}

uint64_t dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void antenna::ARICommandDriver::init(antenna::ARICommandDriver *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[5];
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v2 = MEMORY[0x24BDAC760];
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 0x40000000;
  v14[2] = ___ZN7antenna16ARICommandDriver4initEv_block_invoke;
  v14[3] = &__block_descriptor_tmp_6;
  v14[4] = this;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v3 || (v4 = *((_QWORD *)this + 9), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  v7 = *((_QWORD *)this + 11);
  block[0] = v2;
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_24F0354E0;
  block[5] = v4;
  v16 = v6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  block[4] = v14;
  dispatch_async(v7, block);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

uint64_t ___ZN7antenna16ARICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t **v3;
  uint64_t **v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  _QWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t **v25;
  _QWORD *v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int *v31;
  uint64_t **v32;
  _QWORD *v33;
  unsigned int *v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t **v39;
  _QWORD *v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned int *v45;
  uint64_t **v46;
  _QWORD *v47;
  unsigned int *v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t **v53;
  _QWORD *v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned int *v59;
  uint64_t **v60;
  _QWORD *v61;
  unsigned int *v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t **v67;
  _QWORD *v68;
  unsigned int v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  unsigned int *v73;
  uint64_t **v74;
  _QWORD *v75;
  unsigned int *v76;
  unsigned int v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t **v81;
  _QWORD *v82;
  unsigned int v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t *v86;
  unsigned int *v87;
  _QWORD *v88;
  unsigned int v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t *v92;
  int *v93;
  uint64_t **v94;
  uint64_t **v95;
  _QWORD *v96;
  int *v97;
  int v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t **v102;
  _QWORD *v103;
  int v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t **v109;
  _QWORD *v110;
  int *v111;
  int v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t **v116;
  _QWORD *v117;
  int v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t *v121;
  int *v122;
  _QWORD *v123;
  int v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t *v127;
  std::__shared_weak_count *v128;
  unint64_t *p_shared_owners;
  void *v130;
  unint64_t v131;
  void *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  void *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  void *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  void *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  void *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  void *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  void *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  void *v164;
  void *v166;
  uint64_t v167;
  void *v168;
  void *v169;
  std::__shared_weak_count *v170;
  std::__shared_weak_count *v171;
  void *aBlock;
  uint64_t v173;
  uint64_t (*v174)(uint64_t);
  void *v175;
  void **v176;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = (uint64_t **)(v1 + 112);
  v2 = *(unsigned int **)(v1 + 112);
  v4 = (uint64_t **)(v1 + 112);
  v5 = (_QWORD *)(v1 + 112);
  if (v2)
  {
    v6 = *(unsigned int **)(v1 + 112);
    while (1)
    {
      while (1)
      {
        v5 = v6;
        v7 = v6[7];
        if (v7 < 2)
          break;
        v6 = (unsigned int *)*v5;
        v4 = (uint64_t **)v5;
        if (!*v5)
          goto LABEL_8;
      }
      if (v7)
        break;
      v6 = (unsigned int *)v5[1];
      if (!v6)
      {
        v4 = (uint64_t **)(v5 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v8 = v5;
    v5 = operator new(0x28uLL);
    *(_QWORD *)((char *)v5 + 28) = 1;
    *v5 = 0;
    v5[1] = 0;
    v5[2] = v8;
    *v4 = v5;
    v9 = **(_QWORD **)(v1 + 104);
    v10 = v5;
    if (v9)
    {
      *(_QWORD *)(v1 + 104) = v9;
      v10 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v10);
    v2 = *(unsigned int **)(v1 + 112);
    ++*(_QWORD *)(v1 + 120);
  }
  *((_DWORD *)v5 + 8) = 2;
  v11 = (uint64_t **)(v1 + 112);
  v12 = (_QWORD *)(v1 + 112);
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        v12 = v2;
        v13 = v2[7];
        if (v13 < 3)
          break;
        v2 = (unsigned int *)*v12;
        v11 = (uint64_t **)v12;
        if (!*v12)
          goto LABEL_18;
      }
      if (v13 == 2)
        break;
      v2 = (unsigned int *)v12[1];
      if (!v2)
      {
        v11 = (uint64_t **)(v12 + 1);
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    v14 = v12;
    v12 = operator new(0x28uLL);
    *(_QWORD *)((char *)v12 + 28) = 2;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *v11 = v12;
    v15 = **(_QWORD **)(v1 + 104);
    v16 = v12;
    if (v15)
    {
      *(_QWORD *)(v1 + 104) = v15;
      v16 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v16);
    ++*(_QWORD *)(v1 + 120);
  }
  *((_DWORD *)v12 + 8) = 16;
  v17 = *v3;
  v18 = (uint64_t **)(v1 + 112);
  v19 = (_QWORD *)(v1 + 112);
  if (*v3)
  {
    v20 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        v19 = v20;
        v21 = v20[7];
        if (v21 < 5)
          break;
        v20 = (unsigned int *)*v19;
        v18 = (uint64_t **)v19;
        if (!*v19)
          goto LABEL_28;
      }
      if (v21 == 4)
        break;
      v20 = (unsigned int *)v19[1];
      if (!v20)
      {
        v18 = (uint64_t **)(v19 + 1);
        goto LABEL_28;
      }
    }
  }
  else
  {
LABEL_28:
    v22 = v19;
    v19 = operator new(0x28uLL);
    *(_QWORD *)((char *)v19 + 28) = 4;
    *v19 = 0;
    v19[1] = 0;
    v19[2] = v22;
    *v18 = v19;
    v23 = **(_QWORD **)(v1 + 104);
    v24 = v19;
    if (v23)
    {
      *(_QWORD *)(v1 + 104) = v23;
      v24 = *v18;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v24);
    v17 = *(uint64_t **)(v1 + 112);
    ++*(_QWORD *)(v1 + 120);
  }
  *((_DWORD *)v19 + 8) = 32;
  v25 = (uint64_t **)(v1 + 112);
  v26 = (_QWORD *)(v1 + 112);
  if (v17)
  {
    while (1)
    {
      while (1)
      {
        v26 = v17;
        v27 = *((_DWORD *)v17 + 7);
        if (v27 < 0x21)
          break;
        v17 = (uint64_t *)*v26;
        v25 = (uint64_t **)v26;
        if (!*v26)
          goto LABEL_38;
      }
      if (v27 == 32)
        break;
      v17 = (uint64_t *)v26[1];
      if (!v17)
      {
        v25 = (uint64_t **)(v26 + 1);
        goto LABEL_38;
      }
    }
  }
  else
  {
LABEL_38:
    v28 = v26;
    v26 = operator new(0x28uLL);
    *(_QWORD *)((char *)v26 + 28) = 32;
    *v26 = 0;
    v26[1] = 0;
    v26[2] = v28;
    *v25 = v26;
    v29 = **(_QWORD **)(v1 + 104);
    v30 = v26;
    if (v29)
    {
      *(_QWORD *)(v1 + 104) = v29;
      v30 = *v25;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v30);
    ++*(_QWORD *)(v1 + 120);
  }
  *((_DWORD *)v26 + 8) = 256;
  v31 = (unsigned int *)*v3;
  v32 = (uint64_t **)(v1 + 112);
  v33 = (_QWORD *)(v1 + 112);
  if (*v3)
  {
    v34 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        v33 = v34;
        v35 = v34[7];
        if (v35 < 0x11)
          break;
        v34 = (unsigned int *)*v33;
        v32 = (uint64_t **)v33;
        if (!*v33)
          goto LABEL_48;
      }
      if (v35 == 16)
        break;
      v34 = (unsigned int *)v33[1];
      if (!v34)
      {
        v32 = (uint64_t **)(v33 + 1);
        goto LABEL_48;
      }
    }
  }
  else
  {
LABEL_48:
    v36 = v33;
    v33 = operator new(0x28uLL);
    *(_QWORD *)((char *)v33 + 28) = 16;
    *v33 = 0;
    v33[1] = 0;
    v33[2] = v36;
    *v32 = v33;
    v37 = **(_QWORD **)(v1 + 104);
    v38 = v33;
    if (v37)
    {
      *(_QWORD *)(v1 + 104) = v37;
      v38 = *v32;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v38);
    v31 = *(unsigned int **)(v1 + 112);
    ++*(_QWORD *)(v1 + 120);
  }
  *((_DWORD *)v33 + 8) = 1024;
  v39 = (uint64_t **)(v1 + 112);
  v40 = (_QWORD *)(v1 + 112);
  if (v31)
  {
    while (1)
    {
      while (1)
      {
        v40 = v31;
        v41 = v31[7];
        if (v41 < 9)
          break;
        v31 = (unsigned int *)*v40;
        v39 = (uint64_t **)v40;
        if (!*v40)
          goto LABEL_58;
      }
      if (v41 == 8)
        break;
      v31 = (unsigned int *)v40[1];
      if (!v31)
      {
        v39 = (uint64_t **)(v40 + 1);
        goto LABEL_58;
      }
    }
  }
  else
  {
LABEL_58:
    v42 = v40;
    v40 = operator new(0x28uLL);
    *(_QWORD *)((char *)v40 + 28) = 8;
    *v40 = 0;
    v40[1] = 0;
    v40[2] = v42;
    *v39 = v40;
    v43 = **(_QWORD **)(v1 + 104);
    v44 = v40;
    if (v43)
    {
      *(_QWORD *)(v1 + 104) = v43;
      v44 = *v39;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v44);
    ++*(_QWORD *)(v1 + 120);
  }
  *((_DWORD *)v40 + 8) = 64;
  v45 = (unsigned int *)*v3;
  v46 = (uint64_t **)(v1 + 112);
  v47 = (_QWORD *)(v1 + 112);
  if (*v3)
  {
    v48 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        v47 = v48;
        v49 = v48[7];
        if (v49 < 0x41)
          break;
        v48 = (unsigned int *)*v47;
        v46 = (uint64_t **)v47;
        if (!*v47)
          goto LABEL_68;
      }
      if (v49 == 64)
        break;
      v48 = (unsigned int *)v47[1];
      if (!v48)
      {
        v46 = (uint64_t **)(v47 + 1);
        goto LABEL_68;
      }
    }
  }
  else
  {
LABEL_68:
    v50 = v47;
    v47 = operator new(0x28uLL);
    *(_QWORD *)((char *)v47 + 28) = 64;
    *v47 = 0;
    v47[1] = 0;
    v47[2] = v50;
    *v46 = v47;
    v51 = **(_QWORD **)(v1 + 104);
    v52 = v47;
    if (v51)
    {
      *(_QWORD *)(v1 + 104) = v51;
      v52 = *v46;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v52);
    v45 = *(unsigned int **)(v1 + 112);
    ++*(_QWORD *)(v1 + 120);
  }
  *((_DWORD *)v47 + 8) = 2048;
  v53 = (uint64_t **)(v1 + 112);
  v54 = (_QWORD *)(v1 + 112);
  if (v45)
  {
    while (1)
    {
      while (1)
      {
        v54 = v45;
        v55 = v45[7];
        if (v55 < 0x81)
          break;
        v45 = (unsigned int *)*v54;
        v53 = (uint64_t **)v54;
        if (!*v54)
          goto LABEL_78;
      }
      if (v55 == 128)
        break;
      v45 = (unsigned int *)v54[1];
      if (!v45)
      {
        v53 = (uint64_t **)(v54 + 1);
        goto LABEL_78;
      }
    }
  }
  else
  {
LABEL_78:
    v56 = v54;
    v54 = operator new(0x28uLL);
    *(_QWORD *)((char *)v54 + 28) = 128;
    *v54 = 0;
    v54[1] = 0;
    v54[2] = v56;
    *v53 = v54;
    v57 = **(_QWORD **)(v1 + 104);
    v58 = v54;
    if (v57)
    {
      *(_QWORD *)(v1 + 104) = v57;
      v58 = *v53;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v58);
    ++*(_QWORD *)(v1 + 120);
  }
  *((_DWORD *)v54 + 8) = 4096;
  v59 = (unsigned int *)*v3;
  v60 = (uint64_t **)(v1 + 112);
  v61 = (_QWORD *)(v1 + 112);
  if (*v3)
  {
    v62 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        v61 = v62;
        v63 = v62[7];
        if (v63 < 0x101)
          break;
        v62 = (unsigned int *)*v61;
        v60 = (uint64_t **)v61;
        if (!*v61)
          goto LABEL_88;
      }
      if (v63 == 256)
        break;
      v62 = (unsigned int *)v61[1];
      if (!v62)
      {
        v60 = (uint64_t **)(v61 + 1);
        goto LABEL_88;
      }
    }
  }
  else
  {
LABEL_88:
    v64 = v61;
    v61 = operator new(0x28uLL);
    *(_QWORD *)((char *)v61 + 28) = 256;
    *v61 = 0;
    v61[1] = 0;
    v61[2] = v64;
    *v60 = v61;
    v65 = **(_QWORD **)(v1 + 104);
    v66 = v61;
    if (v65)
    {
      *(_QWORD *)(v1 + 104) = v65;
      v66 = *v60;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v66);
    v59 = *(unsigned int **)(v1 + 112);
    ++*(_QWORD *)(v1 + 120);
  }
  *((_DWORD *)v61 + 8) = 0x2000;
  v67 = (uint64_t **)(v1 + 112);
  v68 = (_QWORD *)(v1 + 112);
  if (v59)
  {
    while (1)
    {
      while (1)
      {
        v68 = v59;
        v69 = v59[7];
        if (v69 < 0x201)
          break;
        v59 = (unsigned int *)*v68;
        v67 = (uint64_t **)v68;
        if (!*v68)
          goto LABEL_98;
      }
      if (v69 == 512)
        break;
      v59 = (unsigned int *)v68[1];
      if (!v59)
      {
        v67 = (uint64_t **)(v68 + 1);
        goto LABEL_98;
      }
    }
  }
  else
  {
LABEL_98:
    v70 = v68;
    v68 = operator new(0x28uLL);
    *(_QWORD *)((char *)v68 + 28) = 512;
    *v68 = 0;
    v68[1] = 0;
    v68[2] = v70;
    *v67 = v68;
    v71 = **(_QWORD **)(v1 + 104);
    v72 = v68;
    if (v71)
    {
      *(_QWORD *)(v1 + 104) = v71;
      v72 = *v67;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v72);
    ++*(_QWORD *)(v1 + 120);
  }
  *((_DWORD *)v68 + 8) = 0x4000;
  v73 = (unsigned int *)*v3;
  v74 = (uint64_t **)(v1 + 112);
  v75 = (_QWORD *)(v1 + 112);
  if (*v3)
  {
    v76 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        v75 = v76;
        v77 = v76[7];
        if (v77 < 0x401)
          break;
        v76 = (unsigned int *)*v75;
        v74 = (uint64_t **)v75;
        if (!*v75)
          goto LABEL_108;
      }
      if (v77 == 1024)
        break;
      v76 = (unsigned int *)v75[1];
      if (!v76)
      {
        v74 = (uint64_t **)(v75 + 1);
        goto LABEL_108;
      }
    }
  }
  else
  {
LABEL_108:
    v78 = v75;
    v75 = operator new(0x28uLL);
    *(_QWORD *)((char *)v75 + 28) = 1024;
    *v75 = 0;
    v75[1] = 0;
    v75[2] = v78;
    *v74 = v75;
    v79 = **(_QWORD **)(v1 + 104);
    v80 = v75;
    if (v79)
    {
      *(_QWORD *)(v1 + 104) = v79;
      v80 = *v74;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v80);
    v73 = *(unsigned int **)(v1 + 112);
    ++*(_QWORD *)(v1 + 120);
  }
  *((_DWORD *)v75 + 8) = 0x8000;
  v81 = (uint64_t **)(v1 + 112);
  v82 = (_QWORD *)(v1 + 112);
  if (v73)
  {
    while (1)
    {
      while (1)
      {
        v82 = v73;
        v83 = v73[7];
        if (v83 < 0x801)
          break;
        v73 = (unsigned int *)*v82;
        v81 = (uint64_t **)v82;
        if (!*v82)
          goto LABEL_118;
      }
      if (v83 == 2048)
        break;
      v73 = (unsigned int *)v82[1];
      if (!v73)
      {
        v81 = (uint64_t **)(v82 + 1);
        goto LABEL_118;
      }
    }
  }
  else
  {
LABEL_118:
    v84 = v82;
    v82 = operator new(0x28uLL);
    *(_QWORD *)((char *)v82 + 28) = 2048;
    *v82 = 0;
    v82[1] = 0;
    v82[2] = v84;
    *v81 = v82;
    v85 = **(_QWORD **)(v1 + 104);
    v86 = v82;
    if (v85)
    {
      *(_QWORD *)(v1 + 104) = v85;
      v86 = *v81;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v86);
    ++*(_QWORD *)(v1 + 120);
  }
  *((_DWORD *)v82 + 8) = 0x10000;
  v87 = (unsigned int *)*v3;
  v88 = (_QWORD *)(v1 + 112);
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v88 = v87;
        v89 = v87[7];
        if (v89 <= 0x1000)
          break;
        v87 = (unsigned int *)*v88;
        v3 = (uint64_t **)v88;
        if (!*v88)
          goto LABEL_128;
      }
      if (v89 == 4096)
        break;
      v87 = (unsigned int *)v88[1];
      if (!v87)
      {
        v3 = (uint64_t **)(v88 + 1);
        goto LABEL_128;
      }
    }
  }
  else
  {
LABEL_128:
    v90 = v88;
    v88 = operator new(0x28uLL);
    *(_QWORD *)((char *)v88 + 28) = 4096;
    *v88 = 0;
    v88[1] = 0;
    v88[2] = v90;
    *v3 = v88;
    v91 = **(_QWORD **)(v1 + 104);
    v92 = v88;
    if (v91)
    {
      *(_QWORD *)(v1 + 104) = v91;
      v92 = *v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v92);
    ++*(_QWORD *)(v1 + 120);
  }
  *((_DWORD *)v88 + 8) = 0x20000;
  v94 = (uint64_t **)(v1 + 216);
  v93 = *(int **)(v1 + 216);
  v95 = (uint64_t **)(v1 + 216);
  v96 = (_QWORD *)(v1 + 216);
  if (v93)
  {
    v97 = *(int **)(v1 + 216);
    while (1)
    {
      while (1)
      {
        v96 = v97;
        v98 = v97[7];
        if (v98 < 1)
          break;
        v97 = (int *)*v96;
        v95 = (uint64_t **)v96;
        if (!*v96)
          goto LABEL_138;
      }
      if ((v98 & 0x80000000) == 0)
        break;
      v97 = (int *)v96[1];
      if (!v97)
      {
        v95 = (uint64_t **)(v96 + 1);
        goto LABEL_138;
      }
    }
  }
  else
  {
LABEL_138:
    v99 = v96;
    v96 = operator new(0x28uLL);
    *((_DWORD *)v96 + 7) = 0;
    *((_DWORD *)v96 + 8) = 0;
    *v96 = 0;
    v96[1] = 0;
    v96[2] = v99;
    *v95 = v96;
    v100 = **(_QWORD **)(v1 + 208);
    v101 = v96;
    if (v100)
    {
      *(_QWORD *)(v1 + 208) = v100;
      v101 = *v95;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 216), v101);
    v93 = *(int **)(v1 + 216);
    ++*(_QWORD *)(v1 + 224);
  }
  *((_DWORD *)v96 + 8) = 2;
  v102 = (uint64_t **)(v1 + 216);
  v103 = (_QWORD *)(v1 + 216);
  if (v93)
  {
    while (1)
    {
      while (1)
      {
        v103 = v93;
        v104 = v93[7];
        if (v104 < 2)
          break;
        v93 = (int *)*v103;
        v102 = (uint64_t **)v103;
        if (!*v103)
          goto LABEL_148;
      }
      if (v104 == 1)
        break;
      v93 = (int *)v103[1];
      if (!v93)
      {
        v102 = (uint64_t **)(v103 + 1);
        goto LABEL_148;
      }
    }
  }
  else
  {
LABEL_148:
    v105 = v103;
    v103 = operator new(0x28uLL);
    *(_QWORD *)((char *)v103 + 28) = 1;
    *v103 = 0;
    v103[1] = 0;
    v103[2] = v105;
    *v102 = v103;
    v106 = **(_QWORD **)(v1 + 208);
    v107 = v103;
    if (v106)
    {
      *(_QWORD *)(v1 + 208) = v106;
      v107 = *v102;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 216), v107);
    ++*(_QWORD *)(v1 + 224);
  }
  *((_DWORD *)v103 + 8) = 3;
  v108 = *v94;
  v109 = (uint64_t **)(v1 + 216);
  v110 = (_QWORD *)(v1 + 216);
  if (*v94)
  {
    v111 = (int *)*v94;
    while (1)
    {
      while (1)
      {
        v110 = v111;
        v112 = v111[7];
        if (v112 < 3)
          break;
        v111 = (int *)*v110;
        v109 = (uint64_t **)v110;
        if (!*v110)
          goto LABEL_158;
      }
      if (v112 == 2)
        break;
      v111 = (int *)v110[1];
      if (!v111)
      {
        v109 = (uint64_t **)(v110 + 1);
        goto LABEL_158;
      }
    }
  }
  else
  {
LABEL_158:
    v113 = v110;
    v110 = operator new(0x28uLL);
    *(_QWORD *)((char *)v110 + 28) = 2;
    *v110 = 0;
    v110[1] = 0;
    v110[2] = v113;
    *v109 = v110;
    v114 = **(_QWORD **)(v1 + 208);
    v115 = v110;
    if (v114)
    {
      *(_QWORD *)(v1 + 208) = v114;
      v115 = *v109;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 216), v115);
    v108 = *(uint64_t **)(v1 + 216);
    ++*(_QWORD *)(v1 + 224);
  }
  *((_DWORD *)v110 + 8) = 0;
  v116 = (uint64_t **)(v1 + 216);
  v117 = (_QWORD *)(v1 + 216);
  if (v108)
  {
    while (1)
    {
      while (1)
      {
        v117 = v108;
        v118 = *((_DWORD *)v108 + 7);
        if (v118 < 4)
          break;
        v108 = (uint64_t *)*v117;
        v116 = (uint64_t **)v117;
        if (!*v117)
          goto LABEL_168;
      }
      if (v118 == 3)
        break;
      v108 = (uint64_t *)v117[1];
      if (!v108)
      {
        v116 = (uint64_t **)(v117 + 1);
        goto LABEL_168;
      }
    }
  }
  else
  {
LABEL_168:
    v119 = v117;
    v117 = operator new(0x28uLL);
    *(_QWORD *)((char *)v117 + 28) = 3;
    *v117 = 0;
    v117[1] = 0;
    v117[2] = v119;
    *v116 = v117;
    v120 = **(_QWORD **)(v1 + 208);
    v121 = v117;
    if (v120)
    {
      *(_QWORD *)(v1 + 208) = v120;
      v121 = *v116;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 216), v121);
    ++*(_QWORD *)(v1 + 224);
  }
  *((_DWORD *)v117 + 8) = 1;
  v122 = (int *)*v94;
  v123 = (_QWORD *)(v1 + 216);
  if (*v94)
  {
    while (1)
    {
      while (1)
      {
        v123 = v122;
        v124 = v122[7];
        if (v124 < 5)
          break;
        v122 = (int *)*v123;
        v94 = (uint64_t **)v123;
        if (!*v123)
          goto LABEL_178;
      }
      if (v124 == 4)
        break;
      v122 = (int *)v123[1];
      if (!v122)
      {
        v94 = (uint64_t **)(v123 + 1);
        goto LABEL_178;
      }
    }
  }
  else
  {
LABEL_178:
    v125 = v123;
    v123 = operator new(0x28uLL);
    *(_QWORD *)((char *)v123 + 28) = 4;
    *v123 = 0;
    v123[1] = 0;
    v123[2] = v125;
    *v94 = v123;
    v126 = **(_QWORD **)(v1 + 208);
    v127 = v123;
    if (v126)
    {
      *(_QWORD *)(v1 + 208) = v126;
      v127 = *v94;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 216), v127);
    ++*(_QWORD *)(v1 + 224);
  }
  *((_DWORD *)v123 + 8) = 255;
  v128 = (std::__shared_weak_count *)operator new(0x20uLL);
  v128->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v128->__shared_owners_;
  v128->__shared_weak_owners_ = 0;
  v128->__vftable = (std::__shared_weak_count_vtbl *)off_24F0352F0;
  v128[1].__vftable = (std::__shared_weak_count_vtbl *)v1;
  v130 = (void *)MEMORY[0x24BDAC760];
  v166 = (void *)MEMORY[0x24BDAC760];
  v167 = 1174405120;
  v168 = ___ZN3ice6detail17wrapEventCallbackIZZN7antenna16ARICommandDriver4initEvEUb_E3__0vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke;
  v169 = &__block_descriptor_tmp_4_3;
  v170 = v128 + 1;
  v171 = v128;
  do
    v131 = __ldxr(p_shared_owners);
  while (__stxr(v131 + 1, p_shared_owners));
  aBlock = v130;
  v173 = 0x40000000;
  v174 = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_2;
  v175 = &unk_24F035338;
  v176 = &v166;
  v132 = _Block_copy(&aBlock);
  v133 = v171;
  if (v171)
  {
    v134 = (unint64_t *)&v171->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  do
    v136 = __ldaxr(p_shared_owners);
  while (__stlxr(v136 - 1, p_shared_owners));
  if (v136)
  {
    if (v132)
    {
LABEL_191:
      v137 = _Block_copy(v132);
      goto LABEL_194;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
    std::__shared_weak_count::__release_weak(v128);
    if (v132)
      goto LABEL_191;
  }
  v137 = 0;
LABEL_194:
  v166 = v137;
  ice::Client::regEventHandlerInternal();
  if (v166)
    _Block_release(v166);
  if (v132)
    _Block_release(v132);
  v138 = (std::__shared_weak_count *)operator new(0x20uLL);
  v138->__shared_owners_ = 0;
  v139 = (unint64_t *)&v138->__shared_owners_;
  v138->__shared_weak_owners_ = 0;
  v138->__vftable = (std::__shared_weak_count_vtbl *)off_24F035398;
  v138[1].__vftable = (std::__shared_weak_count_vtbl *)v1;
  v166 = v130;
  v167 = 1174405120;
  v168 = ___ZN3ice6detail17wrapEventCallbackIZZN7antenna16ARICommandDriver4initEvEUb_E3__1vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke;
  v169 = &__block_descriptor_tmp_7_1;
  v170 = v138 + 1;
  v171 = v138;
  do
    v140 = __ldxr(v139);
  while (__stxr(v140 + 1, v139));
  aBlock = v130;
  v173 = 0x40000000;
  v174 = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_2;
  v175 = &unk_24F035338;
  v176 = &v166;
  v141 = _Block_copy(&aBlock);
  v142 = v171;
  if (v171)
  {
    v143 = (unint64_t *)&v171->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  do
    v145 = __ldaxr(v139);
  while (__stlxr(v145 - 1, v139));
  if (v145)
  {
    if (v141)
    {
LABEL_208:
      v146 = _Block_copy(v141);
      goto LABEL_211;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
    std::__shared_weak_count::__release_weak(v138);
    if (v141)
      goto LABEL_208;
  }
  v146 = 0;
LABEL_211:
  v166 = v146;
  ice::Client::regEventHandlerInternal();
  if (v166)
    _Block_release(v166);
  if (v141)
    _Block_release(v141);
  v147 = (std::__shared_weak_count *)operator new(0x20uLL);
  v147->__shared_owners_ = 0;
  v148 = (unint64_t *)&v147->__shared_owners_;
  v147->__shared_weak_owners_ = 0;
  v147->__vftable = (std::__shared_weak_count_vtbl *)off_24F035418;
  v147[1].__vftable = (std::__shared_weak_count_vtbl *)v1;
  v166 = v130;
  v167 = 1174405120;
  v168 = ___ZN3ice6detail17wrapEventCallbackIZZN7antenna16ARICommandDriver4initEvEUb_E3__2vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke;
  v169 = &__block_descriptor_tmp_8_0;
  v170 = v147 + 1;
  v171 = v147;
  do
    v149 = __ldxr(v148);
  while (__stxr(v149 + 1, v148));
  aBlock = v130;
  v173 = 0x40000000;
  v174 = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_2;
  v175 = &unk_24F035338;
  v176 = &v166;
  v150 = _Block_copy(&aBlock);
  v151 = v171;
  if (v171)
  {
    v152 = (unint64_t *)&v171->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  do
    v154 = __ldaxr(v148);
  while (__stlxr(v154 - 1, v148));
  if (v154)
  {
    if (v150)
    {
LABEL_225:
      v155 = _Block_copy(v150);
      goto LABEL_228;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
    std::__shared_weak_count::__release_weak(v147);
    if (v150)
      goto LABEL_225;
  }
  v155 = 0;
LABEL_228:
  v166 = v155;
  ice::Client::regEventHandlerInternal();
  if (v166)
    _Block_release(v166);
  if (v150)
    _Block_release(v150);
  v156 = (std::__shared_weak_count *)operator new(0x20uLL);
  v156->__shared_owners_ = 0;
  v157 = (unint64_t *)&v156->__shared_owners_;
  v156->__shared_weak_owners_ = 0;
  v156->__vftable = (std::__shared_weak_count_vtbl *)off_24F035498;
  v156[1].__vftable = (std::__shared_weak_count_vtbl *)v1;
  v166 = v130;
  v167 = 1174405120;
  v168 = ___ZN3ice6detail17wrapEventCallbackIZZN7antenna16ARICommandDriver4initEvEUb_E3__3vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke;
  v169 = &__block_descriptor_tmp_9_1;
  v170 = v156 + 1;
  v171 = v156;
  do
    v158 = __ldxr(v157);
  while (__stxr(v158 + 1, v157));
  aBlock = v130;
  v173 = 0x40000000;
  v174 = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_2;
  v175 = &unk_24F035338;
  v176 = &v166;
  v159 = _Block_copy(&aBlock);
  v160 = v171;
  if (v171)
  {
    v161 = (unint64_t *)&v171->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  do
    v163 = __ldaxr(v157);
  while (__stlxr(v163 - 1, v157));
  if (v163)
  {
    if (v159)
    {
LABEL_242:
      v164 = _Block_copy(v159);
      goto LABEL_245;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
    std::__shared_weak_count::__release_weak(v156);
    if (v159)
      goto LABEL_242;
  }
  v164 = 0;
LABEL_245:
  v166 = v164;
  ice::Client::regEventHandlerInternal();
  if (v166)
    _Block_release(v166);
  if (v159)
    _Block_release(v159);
  return ice::Client::start(*(ice::Client **)(v1 + 184));
}

void sub_227AB01DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  const void *v10;

  if (aBlock)
    _Block_release(aBlock);
  if (v10)
    _Block_release(v10);
  _Unwind_Resume(exception_object);
}

void antenna::ARICommandDriver::perform(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  xpc_object_t v5;
  const void *v6;
  void *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  xpc_object_t v14;
  unint64_t *p_shared_owners;
  NSObject *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v5 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v6 = *(const void **)a3;
    if (*(_QWORD *)a3)
      goto LABEL_3;
LABEL_15:
    v7 = 0;
    v8 = *(NSObject **)(a3 + 8);
    if (!v8)
      goto LABEL_5;
    goto LABEL_4;
  }
  v5 = xpc_null_create();
  v6 = *(const void **)a3;
  if (!*(_QWORD *)a3)
    goto LABEL_15;
LABEL_3:
  v7 = _Block_copy(v6);
  v8 = *(NSObject **)(a3 + 8);
  if (v8)
LABEL_4:
    dispatch_retain(v8);
LABEL_5:
  v9 = (std::__shared_weak_count *)a1[10];
  if (!v9 || (v10 = a1[9], (v11 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  v13 = operator new(0x20uLL);
  *v13 = v5;
  v14 = xpc_null_create();
  v13[1] = a1;
  v13[2] = v7;
  v13[3] = v8;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v16 = a1[11];
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = operator new(0x18uLL);
  *v18 = v13;
  v18[1] = v10;
  v18[2] = v12;
  dispatch_async_f(v16, v18, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<antenna::ARICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0>(antenna::ARICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::ARICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0,dispatch_queue_s::default_delete<antenna::ARICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  xpc_release(v14);
}

uint64_t antenna::ARICommandDriver::txPowerCappingEnable_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  __int128 v6;
  const char *v7;
  xpc_object_t value;
  int v9;
  _DWORD *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint64_t on_zero_shared_weak;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  const void *(__cdecl *get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  unint64_t v23;
  void *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *aBlock;
  NSObject *v42;
  _OWORD v43[4];
  void *__p;
  std::__shared_weak_count_vtbl *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  int v48;
  void *v49;
  dispatch_object_t v50;
  void *v51;
  xpc_object_t object[2];
  __int128 v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t);
  void *v59;
  xpc_object_t *v60;

  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v43[2] = v6;
  v43[3] = v6;
  v43[0] = v6;
  v43[1] = v6;
  AriSdk::ARI_CsiIceSarEnableReq_SDK::ARI_CsiIceSarEnableReq_SDK((AriSdk::ARI_CsiIceSarEnableReq_SDK *)v43);
  v7 = (const char *)*MEMORY[0x24BED3A28];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED3A28]))
  {
    value = xpc_dictionary_get_value(*a2, v7);
    object[0] = value;
    if (value)
      xpc_retain(value);
    else
      object[0] = xpc_null_create();
    v9 = xpc::dyn_cast_or_default();
    xpc_release(object[0]);
  }
  else
  {
    v9 = 0;
  }
  v10 = operator new(4uLL);
  *v10 = v9;
  v11 = __p;
  __p = v10;
  if (v11)
    operator delete(v11);
  v12 = *(void **)a3;
  if (*(_QWORD *)a3)
    v12 = _Block_copy(v12);
  v13 = *(NSObject **)(a3 + 8);
  aBlock = v12;
  v42 = v13;
  if (v13)
    dispatch_retain(v13);
  v14 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v14
    || (on_zero_shared_weak = (uint64_t)a1[1].__on_zero_shared_weak, (v16 = std::__shared_weak_count::lock(v14)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v17 = v16;
  p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v17);
  }
  get_deleter = a1[4].__get_deleter;
  v45 = a1;
  v46 = on_zero_shared_weak;
  v47 = v17;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  v48 = -184221696;
  if (!aBlock)
  {
    v24 = 0;
    v25 = v42;
    v49 = 0;
    v50 = v42;
    if (!v42)
      goto LABEL_26;
    goto LABEL_25;
  }
  v24 = _Block_copy(aBlock);
  v25 = v42;
  v49 = v24;
  v50 = v42;
  if (v42)
LABEL_25:
    dispatch_retain(v25);
LABEL_26:
  v26 = (std::__shared_weak_count *)operator new(0x48uLL);
  v26->__shared_owners_ = 0;
  v27 = (unint64_t *)&v26->__shared_owners_;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = a1;
  v26->__vftable = (std::__shared_weak_count_vtbl *)off_24F035550;
  v26[1].__shared_owners_ = on_zero_shared_weak;
  v26[1].__shared_weak_owners_ = (uint64_t)v17;
  v46 = 0;
  v47 = 0;
  LODWORD(v26[2].__vftable) = -184221696;
  v26[2].__shared_owners_ = (uint64_t)v24;
  v26[2].__shared_weak_owners_ = (uint64_t)v25;
  v49 = 0;
  v50 = 0;
  v28 = MEMORY[0x24BDAC760];
  object[0] = (xpc_object_t)MEMORY[0x24BDAC760];
  object[1] = (xpc_object_t)1174405120;
  *(_QWORD *)&v53 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk28ARI_CsiIceSarEnableRspCb_SDKENS5_26ARI_CsiIceSarEnableReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v53 + 1) = &__block_descriptor_tmp_12_3;
  v54 = (unint64_t)&v26[1];
  v55 = v26;
  do
    v29 = __ldxr(v27);
  while (__stxr(v29 + 1, v27));
  v56 = v28;
  v57 = 0x40000000;
  v58 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  v59 = &unk_24F035598;
  v60 = object;
  v30 = _Block_copy(&v56);
  v31 = v55;
  if (v55)
  {
    v32 = (unint64_t *)&v55->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  do
    v34 = __ldaxr(v27);
  while (__stlxr(v34 - 1, v27));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  *(_QWORD *)&v35 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)object = v35;
  v53 = v35;
  v54 = 0xAAAAAAAAAAAAAAAALL;
  v36 = (std::__shared_weak_count *)*((_QWORD *)get_deleter + 2);
  v56 = *((_QWORD *)get_deleter + 1);
  if (!v36)
  {
    v57 = 0;
LABEL_60:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v57 = (uint64_t)std::__shared_weak_count::lock(v36);
  if (!v57)
    goto LABEL_60;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v37 = (std::__shared_weak_count *)v57;
  if (v57)
  {
    v38 = (unint64_t *)(v57 + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v51 = v30;
  ice::SendMsgBaseProxy::callback();
  if (v51)
    _Block_release(v51);
  MEMORY[0x22E2A2FF8](object);
  if (v50)
    dispatch_release(v50);
  if (v49)
    _Block_release(v49);
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  std::__shared_weak_count::__release_weak(v17);
  if (v42)
    dispatch_release(v42);
  if (aBlock)
    _Block_release(aBlock);
  return MEMORY[0x22E2A34CC](v43);
}

void sub_227AB07D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,xpc_object_t object)
{
  xpc_release(object);
  MEMORY[0x22E2A34CC](&a11);
  _Unwind_Resume(a1);
}

void antenna::ARICommandDriver::transmitIndicationRegister_sync(std::__shared_weak_count_vtbl *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  void *v6;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  xpc_object_t v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  xpc_object_t object;
  char v31;
  void *aBlock;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  void *v35;
  void **v36;

  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_24F0355F8;
  v4[1].__vftable = a1;
  v6 = (void *)MEMORY[0x24BDAC760];
  v25 = (void *)MEMORY[0x24BDAC760];
  v26 = 1174405120;
  v27 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v28 = &__block_descriptor_tmp_15;
  v29 = &v4[1];
  object = v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  aBlock = v6;
  v33 = 0x40000000;
  v34 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  v35 = &unk_24F035598;
  v36 = &v25;
  v8 = _Block_copy(&aBlock);
  v9 = (std::__shared_weak_count *)object;
  if (object)
  {
    v10 = (unint64_t *)((char *)object + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  v25 = v8;
  ice::Client::regIndicationInternal();
  if (v25)
    _Block_release(v25);
  v13 = (std::__shared_weak_count *)operator new(0x20uLL);
  v13->__shared_owners_ = 0;
  v14 = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_24F035678;
  v13[1].__vftable = a1;
  v25 = v6;
  v26 = 1174405120;
  v27 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__1vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v28 = &__block_descriptor_tmp_16_3;
  v29 = &v13[1];
  object = v13;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  aBlock = v6;
  v33 = 0x40000000;
  v34 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  v35 = &unk_24F035598;
  v36 = &v25;
  v16 = _Block_copy(&aBlock);
  v17 = (std::__shared_weak_count *)object;
  if (object)
  {
    v18 = (unint64_t *)((char *)object + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  do
    v20 = __ldaxr(v14);
  while (__stlxr(v20 - 1, v14));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  v25 = v16;
  ice::Client::regIndicationInternal();
  if (v25)
    _Block_release(v25);
  v21 = xpc_null_create();
  if (*(_QWORD *)a2)
    v22 = _Block_copy(*(const void **)a2);
  else
    v22 = 0;
  v23 = *(NSObject **)(a2 + 8);
  v25 = v6;
  v26 = 1174405120;
  v27 = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  v28 = &__block_descriptor_tmp_17_1;
  if (v22)
  {
    v24 = _Block_copy(v22);
    v31 = 1;
    v29 = v24;
    object = v21;
    if (v21)
    {
LABEL_30:
      xpc_retain(v21);
      goto LABEL_33;
    }
  }
  else
  {
    v31 = 1;
    v29 = 0;
    object = v21;
    if (v21)
      goto LABEL_30;
  }
  object = xpc_null_create();
LABEL_33:
  dispatch_async(v23, &v25);
  xpc_release(object);
  object = 0;
  if (v29)
    _Block_release(v29);
  if (v22)
    _Block_release(v22);
  xpc_release(v21);
}

void sub_227AB0C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void antenna::ARICommandDriver::transmitIndicationEnable_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  xpc_object_t value;
  size_t v7;
  void **v8;
  __int128 v9;
  const char *v10;
  xpc_object_t v11;
  int v12;
  _DWORD *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  const void *(__cdecl *v25)(const std::__shared_weak_count *__hidden, const std::type_info *);
  unint64_t v26;
  void *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  const char *v45;
  xpc_object_t v46;
  int v47;
  _DWORD *v48;
  void *v49;
  void *v50;
  NSObject *v51;
  std::__shared_weak_count *v52;
  uint64_t on_zero_shared_weak;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_weak_owners;
  unint64_t v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  const void *(__cdecl *get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  unint64_t v61;
  void *v62;
  NSObject *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  void *aBlock;
  NSObject *v79;
  xpc_object_t object[2];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  void *__p[2];
  void *v85;
  dispatch_object_t v86;
  void *v87[3];
  std::__shared_weak_count_vtbl *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  int v91;
  void *v92;
  dispatch_object_t v93;
  void *v94;
  __int128 v95;
  __int128 v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t);
  void *v102;
  __int128 *v103;

  memset(v87, 170, sizeof(v87));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED3A70]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  if (SHIBYTE(v87[2]) >= 0)
    v7 = HIBYTE(v87[2]);
  else
    v7 = (size_t)v87[1];
  if (v7 == strlen((const char *)*MEMORY[0x24BED3A78]))
  {
    v8 = SHIBYTE(v87[2]) >= 0 ? v87 : (void **)v87[0];
    if (!memcmp(v8, (const void *)*MEMORY[0x24BED3A78], v7))
    {
      __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v44 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v44 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v82 = v44;
      v83 = v44;
      *(_OWORD *)object = v44;
      v81 = v44;
      AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK::ARI_CsiIceBBTxStateIndEnableReq_SDK((AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK *)object);
      v45 = (const char *)*MEMORY[0x24BED3A50];
      if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED3A50]))
      {
        v46 = xpc_dictionary_get_value(*a2, v45);
        *(_QWORD *)&v95 = v46;
        if (v46)
          xpc_retain(v46);
        else
          *(_QWORD *)&v95 = xpc_null_create();
        v47 = xpc::dyn_cast_or_default();
        xpc_release((xpc_object_t)v95);
      }
      else
      {
        v47 = 0;
      }
      v48 = operator new(4uLL);
      *v48 = v47;
      v49 = __p[0];
      __p[0] = v48;
      if (v49)
        operator delete(v49);
      v50 = *(void **)a3;
      if (*(_QWORD *)a3)
        v50 = _Block_copy(v50);
      v51 = *(NSObject **)(a3 + 8);
      v85 = v50;
      v86 = v51;
      if (v51)
        dispatch_retain(v51);
      v52 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
      if (!v52
        || (on_zero_shared_weak = (uint64_t)a1[1].__on_zero_shared_weak,
            (v54 = std::__shared_weak_count::lock(v52)) == 0))
      {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      v55 = v54;
      p_shared_weak_owners = (unint64_t *)&v54->__shared_weak_owners_;
      do
        v57 = __ldxr(p_shared_weak_owners);
      while (__stxr(v57 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v59 = __ldaxr(p_shared_owners);
      while (__stlxr(v59 - 1, p_shared_owners));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v55);
      }
      get_deleter = a1[4].__get_deleter;
      v88 = a1;
      v89 = on_zero_shared_weak;
      v90 = v55;
      do
        v61 = __ldxr(p_shared_weak_owners);
      while (__stxr(v61 + 1, p_shared_weak_owners));
      v91 = -184156160;
      if (v85)
      {
        v62 = _Block_copy(v85);
        v63 = v86;
        v92 = v62;
        v93 = v86;
        if (!v86)
        {
LABEL_99:
          v64 = (std::__shared_weak_count *)operator new(0x48uLL);
          v64->__shared_owners_ = 0;
          v65 = (unint64_t *)&v64->__shared_owners_;
          v64->__shared_weak_owners_ = 0;
          v64[1].__vftable = a1;
          v64->__vftable = (std::__shared_weak_count_vtbl *)off_24F035728;
          v64[1].__shared_owners_ = on_zero_shared_weak;
          v64[1].__shared_weak_owners_ = (uint64_t)v55;
          v89 = 0;
          v90 = 0;
          LODWORD(v64[2].__vftable) = -184156160;
          v64[2].__shared_owners_ = (uint64_t)v62;
          v64[2].__shared_weak_owners_ = (uint64_t)v63;
          v92 = 0;
          v93 = 0;
          v66 = MEMORY[0x24BDAC760];
          *(_QWORD *)&v95 = MEMORY[0x24BDAC760];
          *((_QWORD *)&v95 + 1) = 1174405120;
          *(_QWORD *)&v96 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk37ARI_CsiIceBBTxStateIndEnableRspCb_SDKENS5_35ARI_CsiIceBBTxStateIndEnableReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
          *((_QWORD *)&v96 + 1) = &__block_descriptor_tmp_18_3;
          v97 = (unint64_t)&v64[1];
          v98 = v64;
          do
            v67 = __ldxr(v65);
          while (__stxr(v67 + 1, v65));
          v99 = v66;
          v100 = 0x40000000;
          v101 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
          v102 = &unk_24F035598;
          v103 = &v95;
          v68 = _Block_copy(&v99);
          v69 = v98;
          if (v98)
          {
            v70 = (unint64_t *)&v98->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          do
            v72 = __ldaxr(v65);
          while (__stlxr(v72 - 1, v65));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
          *(_QWORD *)&v73 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v73 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v95 = v73;
          v96 = v73;
          v97 = 0xAAAAAAAAAAAAAAAALL;
          v74 = (std::__shared_weak_count *)*((_QWORD *)get_deleter + 2);
          v99 = *((_QWORD *)get_deleter + 1);
          if (v74)
          {
            v100 = (uint64_t)std::__shared_weak_count::lock(v74);
            if (v100)
            {
              ice::SendMsgBaseProxy::SendMsgBaseProxy();
              v75 = (std::__shared_weak_count *)v100;
              if (v100)
              {
                v76 = (unint64_t *)(v100 + 8);
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
              v94 = v68;
              ice::SendMsgBaseProxy::callback();
              if (v94)
                _Block_release(v94);
              MEMORY[0x22E2A2FF8](&v95);
              if (v93)
                dispatch_release(v93);
              if (v92)
                _Block_release(v92);
              if (v90)
                std::__shared_weak_count::__release_weak(v90);
              std::__shared_weak_count::__release_weak(v55);
              if (v86)
                dispatch_release(v86);
              if (v85)
                _Block_release(v85);
              MEMORY[0x22E2A4030](object);
              if (SHIBYTE(v87[2]) < 0)
                goto LABEL_72;
              return;
            }
          }
          else
          {
            v100 = 0;
          }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
      }
      else
      {
        v62 = 0;
        v63 = v86;
        v92 = 0;
        v93 = v86;
        if (!v86)
          goto LABEL_99;
      }
      dispatch_retain(v63);
      goto LABEL_99;
    }
  }
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v83 = v9;
  *(_OWORD *)__p = v9;
  v81 = v9;
  v82 = v9;
  *(_OWORD *)object = v9;
  AriSdk::ARI_IBICallPsTransmitStateReq_SDK::ARI_IBICallPsTransmitStateReq_SDK((AriSdk::ARI_IBICallPsTransmitStateReq_SDK *)object);
  v10 = (const char *)*MEMORY[0x24BED3A50];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED3A50]))
  {
    v11 = xpc_dictionary_get_value(*a2, v10);
    *(_QWORD *)&v95 = v11;
    if (v11)
      xpc_retain(v11);
    else
      *(_QWORD *)&v95 = xpc_null_create();
    v12 = xpc::dyn_cast_or_default();
    xpc_release((xpc_object_t)v95);
  }
  else
  {
    v12 = 0;
  }
  v13 = operator new(4uLL);
  *v13 = v12;
  v14 = __p[1];
  __p[1] = v13;
  if (v14)
    operator delete(v14);
  v15 = *(void **)a3;
  if (*(_QWORD *)a3)
    v15 = _Block_copy(v15);
  v16 = *(NSObject **)(a3 + 8);
  aBlock = v15;
  v79 = v16;
  if (v16)
    dispatch_retain(v16);
  v17 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v17 || (v18 = (uint64_t)a1[1].__on_zero_shared_weak, (v19 = std::__shared_weak_count::lock(v17)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v20 = v19;
  v21 = (unint64_t *)&v19->__shared_weak_owners_;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  v23 = (unint64_t *)&v19->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v20);
  }
  v25 = a1[4].__get_deleter;
  v88 = a1;
  v89 = v18;
  v90 = v20;
  do
    v26 = __ldxr(v21);
  while (__stxr(v26 + 1, v21));
  v91 = 219709440;
  if (!aBlock)
  {
    v27 = 0;
    v28 = v79;
    v92 = 0;
    v93 = v79;
    if (!v79)
      goto LABEL_37;
    goto LABEL_36;
  }
  v27 = _Block_copy(aBlock);
  v28 = v79;
  v92 = v27;
  v93 = v79;
  if (v79)
LABEL_36:
    dispatch_retain(v28);
LABEL_37:
  v29 = (std::__shared_weak_count *)operator new(0x48uLL);
  v29->__shared_owners_ = 0;
  v30 = (unint64_t *)&v29->__shared_owners_;
  v29->__shared_weak_owners_ = 0;
  v29[1].__vftable = a1;
  v29->__vftable = (std::__shared_weak_count_vtbl *)off_24F0357A8;
  v29[1].__shared_owners_ = v18;
  v29[1].__shared_weak_owners_ = (uint64_t)v20;
  v89 = 0;
  v90 = 0;
  LODWORD(v29[2].__vftable) = 219709440;
  v29[2].__shared_owners_ = (uint64_t)v27;
  v29[2].__shared_weak_owners_ = (uint64_t)v28;
  v92 = 0;
  v93 = 0;
  v31 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v95 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v95 + 1) = 1174405120;
  *(_QWORD *)&v96 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk35ARI_IBICallPsTransmitStateRspCb_SDKENS5_33ARI_IBICallPsTransmitStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v96 + 1) = &__block_descriptor_tmp_20_1;
  v97 = (unint64_t)&v29[1];
  v98 = v29;
  do
    v32 = __ldxr(v30);
  while (__stxr(v32 + 1, v30));
  v99 = v31;
  v100 = 0x40000000;
  v101 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  v102 = &unk_24F035598;
  v103 = &v95;
  v33 = _Block_copy(&v99);
  v34 = v98;
  if (v98)
  {
    v35 = (unint64_t *)&v98->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  do
    v37 = __ldaxr(v30);
  while (__stlxr(v37 - 1, v30));
  if (v37)
  {
    if (__p[0])
      goto LABEL_52;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if (__p[0])
      goto LABEL_52;
  }
  v38 = operator new(4uLL);
  *v38 = 0;
  __p[0] = v38;
LABEL_52:
  v97 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v95 = v39;
  v96 = v39;
  v40 = (std::__shared_weak_count *)*((_QWORD *)v25 + 2);
  v99 = *((_QWORD *)v25 + 1);
  if (!v40)
  {
    v100 = 0;
LABEL_134:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v100 = (uint64_t)std::__shared_weak_count::lock(v40);
  if (!v100)
    goto LABEL_134;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v41 = (std::__shared_weak_count *)v100;
  if (v100)
  {
    v42 = (unint64_t *)(v100 + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v94 = v33;
  ice::SendMsgBaseProxy::callback();
  if (v94)
    _Block_release(v94);
  MEMORY[0x22E2A2FF8](&v95);
  if (v93)
    dispatch_release(v93);
  if (v92)
    _Block_release(v92);
  if (v90)
    std::__shared_weak_count::__release_weak(v90);
  std::__shared_weak_count::__release_weak(v20);
  if (v79)
    dispatch_release(v79);
  if (aBlock)
    _Block_release(aBlock);
  MEMORY[0x22E2A3EEC](object);
  if (SHIBYTE(v87[2]) < 0)
LABEL_72:
    operator delete(v87[0]);
}

void sub_227AB14A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *aBlock)
{
  uint64_t v35;

  xpc_release(*(xpc_object_t *)(v35 - 176));
  MEMORY[0x22E2A4030](&object);
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t antenna::ARICommandDriver::txPowerCapping_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  __int128 v6;
  const char *v7;
  xpc_object_t value;
  _DWORD *v9;
  void *v10;
  _DWORD *v11;
  void *v12;
  int v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  void *v24;
  _DWORD *v25;
  void *v26;
  const char *v27;
  xpc_object_t v28;
  int v29;
  _DWORD *v30;
  const char *v31;
  xpc_object_t v32;
  int v33;
  void *v34;
  NSObject *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_weak_owners;
  unint64_t v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  NSObject *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *aBlock;
  NSObject *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  void *__p[2];
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  int v73;
  void *v74;
  dispatch_object_t v75;
  void *v76;
  xpc_object_t object[2];
  __int128 v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t);
  void *v84;
  xpc_object_t *v85;

  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v68 = v6;
  *(_OWORD *)__p = v6;
  v66 = v6;
  v67 = v6;
  v65 = v6;
  AriSdk::ARI_CsiIceSarReq_SDK::ARI_CsiIceSarReq_SDK((AriSdk::ARI_CsiIceSarReq_SDK *)&v65);
  v7 = (const char *)*MEMORY[0x24BED3A98];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED3A98]))
  {
    value = xpc_dictionary_get_value(*a2, v7);
    object[0] = value;
    if (value)
      xpc_retain(value);
    else
      object[0] = xpc_null_create();
    v13 = xpc::dyn_cast_or_default();
    xpc_release(object[0]);
    v15 = (uint64_t **)(a1 + 216);
    v14 = *(uint64_t **)(a1 + 216);
    if (v14)
    {
      do
      {
        while (1)
        {
          v16 = (uint64_t **)v14;
          v17 = *((_DWORD *)v14 + 7);
          if (v17 <= v13)
            break;
          v14 = *v16;
          v15 = v16;
          if (!*v16)
            goto LABEL_18;
        }
        if (v17 >= v13)
        {
          v21 = v16;
          goto LABEL_23;
        }
        v14 = v16[1];
      }
      while (v14);
      v15 = v16 + 1;
    }
    else
    {
      v16 = (uint64_t **)(a1 + 216);
    }
LABEL_18:
    v21 = operator new(0x28uLL);
    v21[7] = v13;
    v21[8] = 0;
    *(_QWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = 0;
    *((_QWORD *)v21 + 2) = v16;
    *v15 = (uint64_t *)v21;
    v18 = **(_QWORD **)(a1 + 208);
    v19 = (uint64_t *)v21;
    if (v18)
    {
      *(_QWORD *)(a1 + 208) = v18;
      v19 = *v15;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 216), v19);
    ++*(_QWORD *)(a1 + 224);
LABEL_23:
    v22 = v21[8];
    v23 = operator new(4uLL);
    *v23 = v22;
    v24 = __p[0];
    __p[0] = v23;
    if (v24)
      operator delete(v24);
    v25 = operator new(4uLL);
    *v25 = 0;
    v26 = __p[1];
    __p[1] = v25;
    if (v26)
      operator delete(v26);
    v27 = (const char *)*MEMORY[0x24BED3AC8];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED3AC8]))
    {
      v28 = xpc_dictionary_get_value(*a2, v27);
      object[0] = v28;
      if (v28)
        xpc_retain(v28);
      else
        object[0] = xpc_null_create();
      v29 = xpc::dyn_cast_or_default();
      xpc_release(object[0]);
      v30 = operator new(4uLL);
      *v30 = v29;
      v12 = __p[1];
      __p[1] = v30;
      if (v12)
        goto LABEL_32;
    }
    goto LABEL_33;
  }
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED3A10]))
  {
    v9 = operator new(4uLL);
    *v9 = 0;
    v10 = __p[0];
    __p[0] = v9;
    if (!v10)
      goto LABEL_7;
    goto LABEL_6;
  }
  v20 = operator new(4uLL);
  *v20 = 1;
  v10 = __p[0];
  __p[0] = v20;
  if (v10)
LABEL_6:
    operator delete(v10);
LABEL_7:
  v11 = operator new(4uLL);
  *v11 = 0;
  v12 = __p[1];
  __p[1] = v11;
  if (v12)
LABEL_32:
    operator delete(v12);
LABEL_33:
  v31 = (const char *)*MEMORY[0x24BED3958];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED3958]))
  {
    v32 = xpc_dictionary_get_value(*a2, v31);
    object[0] = v32;
    if (v32)
      xpc_retain(v32);
    else
      object[0] = xpc_null_create();
    v33 = xpc::dyn_cast_or_default();
    xpc_release(object[0]);
    HIDWORD(v66) = v33;
  }
  v34 = *(void **)a3;
  if (*(_QWORD *)a3)
    v34 = _Block_copy(v34);
  v35 = *(NSObject **)(a3 + 8);
  aBlock = v34;
  v64 = v35;
  if (v35)
    dispatch_retain(v35);
  v36 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v36 || (v37 = *(_QWORD *)(a1 + 72), (v38 = std::__shared_weak_count::lock(v36)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v39 = v38;
  p_shared_weak_owners = (unint64_t *)&v38->__shared_weak_owners_;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v38->__shared_owners_;
  do
    v43 = __ldaxr(p_shared_owners);
  while (__stlxr(v43 - 1, p_shared_owners));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v39);
  }
  v44 = *(_QWORD *)(a1 + 184);
  v70 = a1;
  v71 = v37;
  v72 = v39;
  do
    v45 = __ldxr(p_shared_weak_owners);
  while (__stxr(v45 + 1, p_shared_weak_owners));
  v73 = -184385536;
  if (!aBlock)
  {
    v46 = 0;
    v47 = v64;
    v74 = 0;
    v75 = v64;
    if (!v64)
      goto LABEL_55;
    goto LABEL_54;
  }
  v46 = _Block_copy(aBlock);
  v47 = v64;
  v74 = v46;
  v75 = v64;
  if (v64)
LABEL_54:
    dispatch_retain(v47);
LABEL_55:
  v48 = (std::__shared_weak_count *)operator new(0x48uLL);
  v48->__shared_owners_ = 0;
  v49 = (unint64_t *)&v48->__shared_owners_;
  v48->__shared_weak_owners_ = 0;
  v48[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v48->__vftable = (std::__shared_weak_count_vtbl *)off_24F035828;
  v48[1].__shared_owners_ = v37;
  v48[1].__shared_weak_owners_ = (uint64_t)v39;
  v71 = 0;
  v72 = 0;
  LODWORD(v48[2].__vftable) = -184385536;
  v48[2].__shared_owners_ = (uint64_t)v46;
  v48[2].__shared_weak_owners_ = (uint64_t)v47;
  v74 = 0;
  v75 = 0;
  v50 = MEMORY[0x24BDAC760];
  object[0] = (xpc_object_t)MEMORY[0x24BDAC760];
  object[1] = (xpc_object_t)1174405120;
  *(_QWORD *)&v78 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk22ARI_CsiIceSarRspCb_SDKENS5_20ARI_CsiIceSarReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v78 + 1) = &__block_descriptor_tmp_22_2;
  v79 = (unint64_t)&v48[1];
  v80 = v48;
  do
    v51 = __ldxr(v49);
  while (__stxr(v51 + 1, v49));
  v81 = v50;
  v82 = 0x40000000;
  v83 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  v84 = &unk_24F035598;
  v85 = object;
  v52 = _Block_copy(&v81);
  v53 = v80;
  if (v80)
  {
    v54 = (unint64_t *)&v80->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  do
    v56 = __ldaxr(v49);
  while (__stlxr(v56 - 1, v49));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  *(_QWORD *)&v57 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v57 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)object = v57;
  v78 = v57;
  v79 = 0xAAAAAAAAAAAAAAAALL;
  v58 = *(std::__shared_weak_count **)(v44 + 16);
  v81 = *(_QWORD *)(v44 + 8);
  if (!v58)
  {
    v82 = 0;
LABEL_89:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v82 = (uint64_t)std::__shared_weak_count::lock(v58);
  if (!v82)
    goto LABEL_89;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v59 = (std::__shared_weak_count *)v82;
  if (v82)
  {
    v60 = (unint64_t *)(v82 + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v76 = v52;
  ice::SendMsgBaseProxy::callback();
  if (v76)
    _Block_release(v76);
  MEMORY[0x22E2A2FF8](object);
  if (v75)
    dispatch_release(v75);
  if (v74)
    _Block_release(v74);
  if (v72)
    std::__shared_weak_count::__release_weak(v72);
  std::__shared_weak_count::__release_weak(v39);
  if (v64)
    dispatch_release(v64);
  if (aBlock)
    _Block_release(aBlock);
  return MEMORY[0x22E2A3130](&v65);
}

xpc_object_t antenna::ARICommandDriver::txPowerConfiguration_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  const char *v6;
  xpc_object_t value;
  const char **v8;
  const char **v9;
  __int128 v10;
  xpc_object_t v11;
  int v12;
  _DWORD *v13;
  void *v14;
  const char *v15;
  xpc_object_t v16;
  int v17;
  _DWORD *v18;
  void *v19;
  const char *v20;
  xpc_object_t v21;
  int v22;
  _DWORD *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  xpc_object_t result;
  const char *v28;
  __int128 v29;
  xpc_object_t v30;
  unsigned __int16 v31;
  _DWORD *v32;
  void *v33;
  const void *v34;
  NSObject *v35;
  std::__shared_weak_count *v36;
  void (__cdecl *on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_weak_owners;
  unint64_t v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  const void *(__cdecl *get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  unint64_t v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  void *aBlock;
  NSObject *object;
  void *v63;
  NSObject *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  void *__p[2];
  void *v70[2];
  __int128 v71;
  std::__shared_weak_count_vtbl *v72;
  void (__cdecl *v73)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v74;
  int v75;
  void *v76;
  dispatch_object_t v77;
  const void *v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t);
  void *v86;
  __int128 *v87;

  v6 = (const char *)*MEMORY[0x24BED3AB0];
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED3AB0]);
  v8 = (const char **)MEMORY[0x24BED3AA8];
  v9 = (const char **)MEMORY[0x24BED3AC0];
  if (value || xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED3AA8]) || xpc_dictionary_get_value(*a2, *v9))
  {
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v70 = v10;
    v71 = v10;
    v68 = v10;
    *(_OWORD *)__p = v10;
    v66 = v10;
    v67 = v10;
    v65 = v10;
    AriSdk::ARI_CsiIceCltmReq_SDK::ARI_CsiIceCltmReq_SDK((AriSdk::ARI_CsiIceCltmReq_SDK *)&v65);
    if (xpc_dictionary_get_value(*a2, v6))
    {
      v11 = xpc_dictionary_get_value(*a2, v6);
      *(_QWORD *)&v79 = v11;
      if (v11)
        xpc_retain(v11);
      else
        *(_QWORD *)&v79 = xpc_null_create();
      v12 = xpc::dyn_cast_or_default();
      v13 = operator new(4uLL);
      *v13 = v12;
      v14 = __p[0];
      __p[0] = v13;
      if (v14)
        operator delete(v14);
      xpc_release((xpc_object_t)v79);
    }
    v15 = *v8;
    if (xpc_dictionary_get_value(*a2, *v8))
    {
      v16 = xpc_dictionary_get_value(*a2, v15);
      *(_QWORD *)&v79 = v16;
      if (v16)
        xpc_retain(v16);
      else
        *(_QWORD *)&v79 = xpc_null_create();
      v17 = xpc::dyn_cast_or_default();
      v18 = operator new(4uLL);
      *v18 = v17;
      v19 = __p[1];
      __p[1] = v18;
      if (v19)
        operator delete(v19);
      xpc_release((xpc_object_t)v79);
    }
    v20 = *v9;
    if (xpc_dictionary_get_value(*a2, *v9))
    {
      v21 = xpc_dictionary_get_value(*a2, v20);
      *(_QWORD *)&v79 = v21;
      if (v21)
        xpc_retain(v21);
      else
        *(_QWORD *)&v79 = xpc_null_create();
      v22 = xpc::dyn_cast_or_default();
      v23 = operator new(4uLL);
      *v23 = v22;
      v24 = v70[0];
      v70[0] = v23;
      if (v24)
        operator delete(v24);
      xpc_release((xpc_object_t)v79);
    }
    if (*(_QWORD *)a3)
    {
      v25 = _Block_copy(*(const void **)a3);
      v26 = *(NSObject **)(a3 + 8);
      v63 = v25;
      v64 = v26;
      if (!v26)
      {
LABEL_28:
        antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(a1, (uint64_t)&v65, (uint64_t)&v63);
        if (v26)
          dispatch_release(v26);
        if (v25)
          _Block_release(v25);
        return (xpc_object_t)MEMORY[0x22E2A3160](&v65);
      }
    }
    else
    {
      v25 = 0;
      v26 = *(NSObject **)(a3 + 8);
      v63 = 0;
      v64 = v26;
      if (!v26)
        goto LABEL_28;
    }
    dispatch_retain(v26);
    goto LABEL_28;
  }
  v28 = (const char *)*MEMORY[0x24BED3AA0];
  result = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED3AA0]);
  if (!result)
    return result;
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v67 = v29;
  v68 = v29;
  v65 = v29;
  v66 = v29;
  AriSdk::ARI_CsiIceSarWaitTimeReq_SDK::ARI_CsiIceSarWaitTimeReq_SDK((AriSdk::ARI_CsiIceSarWaitTimeReq_SDK *)&v65);
  v30 = xpc_dictionary_get_value(*a2, v28);
  *(_QWORD *)&v79 = v30;
  if (v30)
    xpc_retain(v30);
  else
    *(_QWORD *)&v79 = xpc_null_create();
  v31 = xpc::dyn_cast_or_default();
  xpc_release((xpc_object_t)v79);
  v32 = operator new(4uLL);
  *v32 = v31;
  v33 = __p[0];
  __p[0] = v32;
  if (v33)
    operator delete(v33);
  v34 = *(const void **)a3;
  if (*(_QWORD *)a3)
    v34 = _Block_copy(v34);
  v35 = *(NSObject **)(a3 + 8);
  aBlock = (void *)v34;
  object = v35;
  if (v35)
    dispatch_retain(v35);
  v36 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v36 || (on_zero_shared_weak = a1[1].__on_zero_shared_weak, (v38 = std::__shared_weak_count::lock(v36)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v39 = v38;
  p_shared_weak_owners = (unint64_t *)&v38->__shared_weak_owners_;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v38->__shared_owners_;
  do
    v43 = __ldaxr(p_shared_owners);
  while (__stlxr(v43 - 1, p_shared_owners));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v39);
  }
  get_deleter = a1[4].__get_deleter;
  v72 = a1;
  v73 = on_zero_shared_weak;
  v74 = v39;
  do
    v45 = __ldxr(p_shared_weak_owners);
  while (__stxr(v45 + 1, p_shared_weak_owners));
  v75 = -184352768;
  if (aBlock)
    v46 = _Block_copy(aBlock);
  else
    v46 = 0;
  v76 = v46;
  v77 = object;
  if (object)
    dispatch_retain(object);
  v47 = (std::__shared_weak_count *)operator new(0x48uLL);
  v47->__shared_owners_ = 0;
  v48 = (unint64_t *)&v47->__shared_owners_;
  v47->__shared_weak_owners_ = 0;
  v47[1].__vftable = a1;
  v47->__vftable = (std::__shared_weak_count_vtbl *)off_24F035928;
  v47[1].__shared_owners_ = (uint64_t)on_zero_shared_weak;
  v47[1].__shared_weak_owners_ = (uint64_t)v39;
  v73 = 0;
  v74 = 0;
  LODWORD(v47[2].__vftable) = -184352768;
  v47[2].__shared_owners_ = (uint64_t)v46;
  v47[2].__shared_weak_owners_ = (uint64_t)object;
  v76 = 0;
  v77 = 0;
  v49 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v79 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v79 + 1) = 1174405120;
  *(_QWORD *)&v80 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk30ARI_CsiIceSarWaitTimeRspCb_SDKENS5_28ARI_CsiIceSarWaitTimeReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v80 + 1) = &__block_descriptor_tmp_26;
  v81 = (unint64_t)&v47[1];
  v82 = v47;
  do
    v50 = __ldxr(v48);
  while (__stxr(v50 + 1, v48));
  v83 = v49;
  v84 = 0x40000000;
  v85 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  v86 = &unk_24F035598;
  v87 = &v79;
  v51 = _Block_copy(&v83);
  v52 = v82;
  if (v82)
  {
    v53 = (unint64_t *)&v82->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  do
    v55 = __ldaxr(v48);
  while (__stlxr(v55 - 1, v48));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  *(_QWORD *)&v56 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v56 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v79 = v56;
  v80 = v56;
  v81 = 0xAAAAAAAAAAAAAAAALL;
  v57 = (std::__shared_weak_count *)*((_QWORD *)get_deleter + 2);
  v83 = *((_QWORD *)get_deleter + 1);
  if (!v57)
  {
    v84 = 0;
LABEL_93:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v84 = (uint64_t)std::__shared_weak_count::lock(v57);
  if (!v84)
    goto LABEL_93;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v58 = (std::__shared_weak_count *)v84;
  if (v84)
  {
    v59 = (unint64_t *)(v84 + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v78 = v51;
  ice::SendMsgBaseProxy::callback();
  if (v78)
    _Block_release(v78);
  MEMORY[0x22E2A2FF8](&v79);
  if (v77)
    dispatch_release(v77);
  if (v76)
    _Block_release(v76);
  if (v74)
    std::__shared_weak_count::__release_weak(v74);
  std::__shared_weak_count::__release_weak(v39);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  return (xpc_object_t)MEMORY[0x22E2A37A8](&v65);
}

void sub_227AB23FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  std::__shared_weak_count *v28;
  uint64_t v29;
  const void *v31;

  v31 = *(const void **)(v29 - 184);
  if (v31)
    _Block_release(v31);
  MEMORY[0x22E2A2FF8](v29 - 176);
  antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(&a28);
  std::__shared_weak_count::__release_weak(v28);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a9);
  MEMORY[0x22E2A37A8](&a13);
  _Unwind_Resume(a1);
}

void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(std::__shared_weak_count_vtbl *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t on_zero_shared_weak;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const void *(__cdecl *get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  unint64_t v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  const void *v19;
  unint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _OWORD v31[2];
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, const unsigned __int8 *);
  void *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  const void *aBlock[6];

  v4 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v4
    || (on_zero_shared_weak = (uint64_t)a1[1].__on_zero_shared_weak, (v7 = std::__shared_weak_count::lock(v4)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  get_deleter = a1[4].__get_deleter;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  if (!*(_QWORD *)a3)
  {
    v15 = 0;
    v16 = *(NSObject **)(a3 + 8);
    if (!v16)
      goto LABEL_14;
    goto LABEL_13;
  }
  v15 = _Block_copy(*(const void **)a3);
  v16 = *(NSObject **)(a3 + 8);
  if (v16)
LABEL_13:
    dispatch_retain(v16);
LABEL_14:
  v17 = (std::__shared_weak_count *)operator new(0x48uLL);
  v17->__shared_owners_ = 0;
  v18 = (unint64_t *)&v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = a1;
  v17->__vftable = (std::__shared_weak_count_vtbl *)off_24F0358A8;
  v17[1].__shared_owners_ = on_zero_shared_weak;
  v17[1].__shared_weak_owners_ = (uint64_t)v8;
  LODWORD(v17[2].__vftable) = -184418304;
  v17[2].__shared_owners_ = (uint64_t)v15;
  v17[2].__shared_weak_owners_ = (uint64_t)v16;
  v19 = (const void *)MEMORY[0x24BDAC760];
  v33 = MEMORY[0x24BDAC760];
  v34 = 1174405120;
  v35 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk23ARI_CsiIceCltmRspCb_SDKENS5_21ARI_CsiIceCltmReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v36 = &__block_descriptor_tmp_24_2;
  v37 = v17 + 1;
  v38 = v17;
  do
    v20 = __ldxr(v18);
  while (__stxr(v20 + 1, v18));
  aBlock[0] = v19;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  aBlock[3] = &unk_24F035598;
  aBlock[4] = &v33;
  v21 = _Block_copy(aBlock);
  v22 = v38;
  if (v38)
  {
    v23 = (unint64_t *)&v38->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  do
    v25 = __ldaxr(v18);
  while (__stlxr(v25 - 1, v18));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v31[0] = v26;
  v31[1] = v26;
  v32 = 0xAAAAAAAAAAAAAAAALL;
  v27 = (std::__shared_weak_count *)*((_QWORD *)get_deleter + 2);
  v33 = *((_QWORD *)get_deleter + 1);
  if (!v27)
  {
    v34 = 0;
LABEL_38:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v34 = (uint64_t)std::__shared_weak_count::lock(v27);
  if (!v34)
    goto LABEL_38;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v28 = (std::__shared_weak_count *)v34;
  if (v34)
  {
    v29 = (unint64_t *)(v34 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  aBlock[0] = v21;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v31);
  std::__shared_weak_count::__release_weak(v8);
}

void sub_227AB28C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  const void *v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v6 = *(const void **)(v4 - 128);
  if (v6)
    _Block_release(v6);
  MEMORY[0x22E2A2FF8](va1);
  antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback((uint64_t *)va);
  std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(a1);
}

void sub_227AB28F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  const void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (v4)
    _Block_release(v4);
  antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback((uint64_t *)va);
  std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(a1);
}

uint64_t antenna::ARICommandDriver::getE75AccessoryType(antenna::ARICommandDriver *this, __int16 a2)
{
  uint64_t v4;
  char *v5;
  uint64_t **v6;
  char *v7;
  unsigned int v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t **v13;
  char *v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  char *v20;
  uint64_t **v21;
  char *v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t **v28;
  char *v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t **v35;
  char *v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  char *v41;
  uint64_t **v42;
  char *v43;
  unsigned int v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  uint64_t **v49;
  char *v50;
  unsigned int v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  uint64_t **v56;
  char *v57;
  unsigned int v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  uint64_t **v63;
  char *v64;
  unsigned int v65;
  char *v66;
  uint64_t v67;
  uint64_t *v68;
  char *v69;
  uint64_t **v70;
  char *v71;
  unsigned int v72;
  char *v73;
  uint64_t v74;
  uint64_t *v75;
  char *v76;
  uint64_t **v77;
  char *v78;
  unsigned int v79;
  char *v80;
  uint64_t v81;
  uint64_t *v82;
  char *v83;
  uint64_t **v84;
  char *v85;
  unsigned int v86;
  char *v87;
  uint64_t v88;
  uint64_t *v89;
  char *v90;
  uint64_t **v91;
  char *v92;
  unsigned int v93;
  char *v94;
  uint64_t v95;
  uint64_t *v96;

  if ((a2 & 2) == 0)
  {
    v4 = 0;
    if ((a2 & 4) == 0)
      goto LABEL_26;
    goto LABEL_15;
  }
  v6 = (uint64_t **)((char *)this + 112);
  v5 = (char *)*((_QWORD *)this + 14);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 < 3)
          break;
        v5 = *(char **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_11;
      }
      if (v8 == 2)
        break;
      v5 = (char *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_11;
      }
    }
  }
  else
  {
    v7 = (char *)this + 112;
LABEL_11:
    v9 = v7;
    v7 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v7 + 28) = 2;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v10 = **((_QWORD **)this + 13);
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *((_QWORD *)this + 13) = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v11);
    ++*((_QWORD *)this + 15);
  }
  v4 = *((unsigned int *)v7 + 8);
  if ((a2 & 4) != 0)
  {
LABEL_15:
    v13 = (uint64_t **)((char *)this + 112);
    v12 = (char *)*((_QWORD *)this + 14);
    if (v12)
    {
      while (1)
      {
        while (1)
        {
          v14 = v12;
          v15 = *((_DWORD *)v12 + 7);
          if (v15 < 5)
            break;
          v12 = *(char **)v14;
          v13 = (uint64_t **)v14;
          if (!*(_QWORD *)v14)
            goto LABEL_22;
        }
        if (v15 == 4)
          break;
        v12 = (char *)*((_QWORD *)v14 + 1);
        if (!v12)
        {
          v13 = (uint64_t **)(v14 + 8);
          goto LABEL_22;
        }
      }
    }
    else
    {
      v14 = (char *)this + 112;
LABEL_22:
      v16 = v14;
      v14 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v14 + 28) = 4;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = v16;
      *v13 = (uint64_t *)v14;
      v17 = **((_QWORD **)this + 13);
      v18 = (uint64_t *)v14;
      if (v17)
      {
        *((_QWORD *)this + 13) = v17;
        v18 = *v13;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v18);
      ++*((_QWORD *)this + 15);
    }
    v4 = *((_DWORD *)v14 + 8) | v4;
  }
LABEL_26:
  if ((a2 & 8) != 0)
  {
    v21 = (uint64_t **)((char *)this + 112);
    v20 = (char *)*((_QWORD *)this + 14);
    if (v20)
    {
      while (1)
      {
        while (1)
        {
          v22 = v20;
          v23 = *((_DWORD *)v20 + 7);
          if (v23 < 9)
            break;
          v20 = *(char **)v22;
          v21 = (uint64_t **)v22;
          if (!*(_QWORD *)v22)
            goto LABEL_45;
        }
        if (v23 == 8)
          break;
        v20 = (char *)*((_QWORD *)v22 + 1);
        if (!v20)
        {
          v21 = (uint64_t **)(v22 + 8);
          goto LABEL_45;
        }
      }
    }
    else
    {
      v22 = (char *)this + 112;
LABEL_45:
      v24 = v22;
      v22 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v22 + 28) = 8;
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = v24;
      *v21 = (uint64_t *)v22;
      v25 = **((_QWORD **)this + 13);
      v26 = (uint64_t *)v22;
      if (v25)
      {
        *((_QWORD *)this + 13) = v25;
        v26 = *v21;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v26);
      ++*((_QWORD *)this + 15);
    }
    v4 = *((_DWORD *)v22 + 8) | v4;
    if ((a2 & 0x10) == 0)
    {
LABEL_28:
      if ((a2 & 0x20) == 0)
        goto LABEL_29;
      goto LABEL_60;
    }
  }
  else if ((a2 & 0x10) == 0)
  {
    goto LABEL_28;
  }
  v28 = (uint64_t **)((char *)this + 112);
  v27 = (char *)*((_QWORD *)this + 14);
  if (v27)
  {
    while (1)
    {
      while (1)
      {
        v29 = v27;
        v30 = *((_DWORD *)v27 + 7);
        if (v30 < 0x11)
          break;
        v27 = *(char **)v29;
        v28 = (uint64_t **)v29;
        if (!*(_QWORD *)v29)
          goto LABEL_56;
      }
      if (v30 == 16)
        break;
      v27 = (char *)*((_QWORD *)v29 + 1);
      if (!v27)
      {
        v28 = (uint64_t **)(v29 + 8);
        goto LABEL_56;
      }
    }
  }
  else
  {
    v29 = (char *)this + 112;
LABEL_56:
    v31 = v29;
    v29 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v29 + 28) = 16;
    *(_QWORD *)v29 = 0;
    *((_QWORD *)v29 + 1) = 0;
    *((_QWORD *)v29 + 2) = v31;
    *v28 = (uint64_t *)v29;
    v32 = **((_QWORD **)this + 13);
    v33 = (uint64_t *)v29;
    if (v32)
    {
      *((_QWORD *)this + 13) = v32;
      v33 = *v28;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v33);
    ++*((_QWORD *)this + 15);
  }
  v4 = *((_DWORD *)v29 + 8) | v4;
  if ((a2 & 0x20) == 0)
  {
LABEL_29:
    if ((a2 & 0x40) == 0)
      goto LABEL_30;
    goto LABEL_71;
  }
LABEL_60:
  v35 = (uint64_t **)((char *)this + 112);
  v34 = (char *)*((_QWORD *)this + 14);
  if (v34)
  {
    while (1)
    {
      while (1)
      {
        v36 = v34;
        v37 = *((_DWORD *)v34 + 7);
        if (v37 < 0x21)
          break;
        v34 = *(char **)v36;
        v35 = (uint64_t **)v36;
        if (!*(_QWORD *)v36)
          goto LABEL_67;
      }
      if (v37 == 32)
        break;
      v34 = (char *)*((_QWORD *)v36 + 1);
      if (!v34)
      {
        v35 = (uint64_t **)(v36 + 8);
        goto LABEL_67;
      }
    }
  }
  else
  {
    v36 = (char *)this + 112;
LABEL_67:
    v38 = v36;
    v36 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v36 + 28) = 32;
    *(_QWORD *)v36 = 0;
    *((_QWORD *)v36 + 1) = 0;
    *((_QWORD *)v36 + 2) = v38;
    *v35 = (uint64_t *)v36;
    v39 = **((_QWORD **)this + 13);
    v40 = (uint64_t *)v36;
    if (v39)
    {
      *((_QWORD *)this + 13) = v39;
      v40 = *v35;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v40);
    ++*((_QWORD *)this + 15);
  }
  v4 = *((_DWORD *)v36 + 8) | v4;
  if ((a2 & 0x40) == 0)
  {
LABEL_30:
    if ((a2 & 0x80) == 0)
      goto LABEL_31;
    goto LABEL_82;
  }
LABEL_71:
  v42 = (uint64_t **)((char *)this + 112);
  v41 = (char *)*((_QWORD *)this + 14);
  if (v41)
  {
    while (1)
    {
      while (1)
      {
        v43 = v41;
        v44 = *((_DWORD *)v41 + 7);
        if (v44 < 0x41)
          break;
        v41 = *(char **)v43;
        v42 = (uint64_t **)v43;
        if (!*(_QWORD *)v43)
          goto LABEL_78;
      }
      if (v44 == 64)
        break;
      v41 = (char *)*((_QWORD *)v43 + 1);
      if (!v41)
      {
        v42 = (uint64_t **)(v43 + 8);
        goto LABEL_78;
      }
    }
  }
  else
  {
    v43 = (char *)this + 112;
LABEL_78:
    v45 = v43;
    v43 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v43 + 28) = 64;
    *(_QWORD *)v43 = 0;
    *((_QWORD *)v43 + 1) = 0;
    *((_QWORD *)v43 + 2) = v45;
    *v42 = (uint64_t *)v43;
    v46 = **((_QWORD **)this + 13);
    v47 = (uint64_t *)v43;
    if (v46)
    {
      *((_QWORD *)this + 13) = v46;
      v47 = *v42;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v47);
    ++*((_QWORD *)this + 15);
  }
  v4 = *((_DWORD *)v43 + 8) | v4;
  if ((a2 & 0x80) == 0)
  {
LABEL_31:
    if ((a2 & 0x100) == 0)
      goto LABEL_32;
    goto LABEL_93;
  }
LABEL_82:
  v49 = (uint64_t **)((char *)this + 112);
  v48 = (char *)*((_QWORD *)this + 14);
  if (v48)
  {
    while (1)
    {
      while (1)
      {
        v50 = v48;
        v51 = *((_DWORD *)v48 + 7);
        if (v51 < 0x81)
          break;
        v48 = *(char **)v50;
        v49 = (uint64_t **)v50;
        if (!*(_QWORD *)v50)
          goto LABEL_89;
      }
      if (v51 == 128)
        break;
      v48 = (char *)*((_QWORD *)v50 + 1);
      if (!v48)
      {
        v49 = (uint64_t **)(v50 + 8);
        goto LABEL_89;
      }
    }
  }
  else
  {
    v50 = (char *)this + 112;
LABEL_89:
    v52 = v50;
    v50 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v50 + 28) = 128;
    *(_QWORD *)v50 = 0;
    *((_QWORD *)v50 + 1) = 0;
    *((_QWORD *)v50 + 2) = v52;
    *v49 = (uint64_t *)v50;
    v53 = **((_QWORD **)this + 13);
    v54 = (uint64_t *)v50;
    if (v53)
    {
      *((_QWORD *)this + 13) = v53;
      v54 = *v49;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v54);
    ++*((_QWORD *)this + 15);
  }
  v4 = *((_DWORD *)v50 + 8) | v4;
  if ((a2 & 0x100) == 0)
  {
LABEL_32:
    if ((a2 & 0x200) == 0)
      goto LABEL_33;
    goto LABEL_104;
  }
LABEL_93:
  v56 = (uint64_t **)((char *)this + 112);
  v55 = (char *)*((_QWORD *)this + 14);
  if (v55)
  {
    while (1)
    {
      while (1)
      {
        v57 = v55;
        v58 = *((_DWORD *)v55 + 7);
        if (v58 < 0x101)
          break;
        v55 = *(char **)v57;
        v56 = (uint64_t **)v57;
        if (!*(_QWORD *)v57)
          goto LABEL_100;
      }
      if (v58 == 256)
        break;
      v55 = (char *)*((_QWORD *)v57 + 1);
      if (!v55)
      {
        v56 = (uint64_t **)(v57 + 8);
        goto LABEL_100;
      }
    }
  }
  else
  {
    v57 = (char *)this + 112;
LABEL_100:
    v59 = v57;
    v57 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v57 + 28) = 256;
    *(_QWORD *)v57 = 0;
    *((_QWORD *)v57 + 1) = 0;
    *((_QWORD *)v57 + 2) = v59;
    *v56 = (uint64_t *)v57;
    v60 = **((_QWORD **)this + 13);
    v61 = (uint64_t *)v57;
    if (v60)
    {
      *((_QWORD *)this + 13) = v60;
      v61 = *v56;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v61);
    ++*((_QWORD *)this + 15);
  }
  v4 = *((_DWORD *)v57 + 8) | v4;
  if ((a2 & 0x200) == 0)
  {
LABEL_33:
    if ((a2 & 0x400) == 0)
      goto LABEL_34;
    goto LABEL_115;
  }
LABEL_104:
  v63 = (uint64_t **)((char *)this + 112);
  v62 = (char *)*((_QWORD *)this + 14);
  if (v62)
  {
    while (1)
    {
      while (1)
      {
        v64 = v62;
        v65 = *((_DWORD *)v62 + 7);
        if (v65 < 0x201)
          break;
        v62 = *(char **)v64;
        v63 = (uint64_t **)v64;
        if (!*(_QWORD *)v64)
          goto LABEL_111;
      }
      if (v65 == 512)
        break;
      v62 = (char *)*((_QWORD *)v64 + 1);
      if (!v62)
      {
        v63 = (uint64_t **)(v64 + 8);
        goto LABEL_111;
      }
    }
  }
  else
  {
    v64 = (char *)this + 112;
LABEL_111:
    v66 = v64;
    v64 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v64 + 28) = 512;
    *(_QWORD *)v64 = 0;
    *((_QWORD *)v64 + 1) = 0;
    *((_QWORD *)v64 + 2) = v66;
    *v63 = (uint64_t *)v64;
    v67 = **((_QWORD **)this + 13);
    v68 = (uint64_t *)v64;
    if (v67)
    {
      *((_QWORD *)this + 13) = v67;
      v68 = *v63;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v68);
    ++*((_QWORD *)this + 15);
  }
  v4 = *((_DWORD *)v64 + 8) | v4;
  if ((a2 & 0x400) == 0)
  {
LABEL_34:
    if ((a2 & 0x800) == 0)
      goto LABEL_35;
    goto LABEL_126;
  }
LABEL_115:
  v70 = (uint64_t **)((char *)this + 112);
  v69 = (char *)*((_QWORD *)this + 14);
  if (v69)
  {
    while (1)
    {
      while (1)
      {
        v71 = v69;
        v72 = *((_DWORD *)v69 + 7);
        if (v72 < 0x401)
          break;
        v69 = *(char **)v71;
        v70 = (uint64_t **)v71;
        if (!*(_QWORD *)v71)
          goto LABEL_122;
      }
      if (v72 == 1024)
        break;
      v69 = (char *)*((_QWORD *)v71 + 1);
      if (!v69)
      {
        v70 = (uint64_t **)(v71 + 8);
        goto LABEL_122;
      }
    }
  }
  else
  {
    v71 = (char *)this + 112;
LABEL_122:
    v73 = v71;
    v71 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v71 + 28) = 1024;
    *(_QWORD *)v71 = 0;
    *((_QWORD *)v71 + 1) = 0;
    *((_QWORD *)v71 + 2) = v73;
    *v70 = (uint64_t *)v71;
    v74 = **((_QWORD **)this + 13);
    v75 = (uint64_t *)v71;
    if (v74)
    {
      *((_QWORD *)this + 13) = v74;
      v75 = *v70;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v75);
    ++*((_QWORD *)this + 15);
  }
  v4 = *((_DWORD *)v71 + 8) | v4;
  if ((a2 & 0x800) == 0)
  {
LABEL_35:
    if ((a2 & 0x1000) == 0)
      goto LABEL_36;
LABEL_137:
    v84 = (uint64_t **)((char *)this + 112);
    v83 = (char *)*((_QWORD *)this + 14);
    if (v83)
    {
      while (1)
      {
        while (1)
        {
          v85 = v83;
          v86 = *((_DWORD *)v83 + 7);
          if (v86 <= 0x1000)
            break;
          v83 = *(char **)v85;
          v84 = (uint64_t **)v85;
          if (!*(_QWORD *)v85)
            goto LABEL_144;
        }
        if (v86 == 4096)
          break;
        v83 = (char *)*((_QWORD *)v85 + 1);
        if (!v83)
        {
          v84 = (uint64_t **)(v85 + 8);
          goto LABEL_144;
        }
      }
    }
    else
    {
      v85 = (char *)this + 112;
LABEL_144:
      v87 = v85;
      v85 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v85 + 28) = 4096;
      *(_QWORD *)v85 = 0;
      *((_QWORD *)v85 + 1) = 0;
      *((_QWORD *)v85 + 2) = v87;
      *v84 = (uint64_t *)v85;
      v88 = **((_QWORD **)this + 13);
      v89 = (uint64_t *)v85;
      if (v88)
      {
        *((_QWORD *)this + 13) = v88;
        v89 = *v84;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v89);
      ++*((_QWORD *)this + 15);
    }
    v4 = *((_DWORD *)v85 + 8) | v4;
    if ((_DWORD)v4)
      return v4;
    goto LABEL_148;
  }
LABEL_126:
  v77 = (uint64_t **)((char *)this + 112);
  v76 = (char *)*((_QWORD *)this + 14);
  if (v76)
  {
    while (1)
    {
      while (1)
      {
        v78 = v76;
        v79 = *((_DWORD *)v76 + 7);
        if (v79 < 0x801)
          break;
        v76 = *(char **)v78;
        v77 = (uint64_t **)v78;
        if (!*(_QWORD *)v78)
          goto LABEL_133;
      }
      if (v79 == 2048)
        break;
      v76 = (char *)*((_QWORD *)v78 + 1);
      if (!v76)
      {
        v77 = (uint64_t **)(v78 + 8);
        goto LABEL_133;
      }
    }
  }
  else
  {
    v78 = (char *)this + 112;
LABEL_133:
    v80 = v78;
    v78 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v78 + 28) = 2048;
    *(_QWORD *)v78 = 0;
    *((_QWORD *)v78 + 1) = 0;
    *((_QWORD *)v78 + 2) = v80;
    *v77 = (uint64_t *)v78;
    v81 = **((_QWORD **)this + 13);
    v82 = (uint64_t *)v78;
    if (v81)
    {
      *((_QWORD *)this + 13) = v81;
      v82 = *v77;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v82);
    ++*((_QWORD *)this + 15);
  }
  v4 = *((_DWORD *)v78 + 8) | v4;
  if ((a2 & 0x1000) != 0)
    goto LABEL_137;
LABEL_36:
  if ((_DWORD)v4)
    return v4;
LABEL_148:
  v91 = (uint64_t **)((char *)this + 112);
  v90 = (char *)*((_QWORD *)this + 14);
  if (v90)
  {
    while (1)
    {
      while (1)
      {
        v92 = v90;
        v93 = *((_DWORD *)v90 + 7);
        if (v93 < 2)
          break;
        v90 = *(char **)v92;
        v91 = (uint64_t **)v92;
        if (!*(_QWORD *)v92)
          goto LABEL_155;
      }
      if (v93)
        break;
      v90 = (char *)*((_QWORD *)v92 + 1);
      if (!v90)
      {
        v91 = (uint64_t **)(v92 + 8);
        goto LABEL_155;
      }
    }
  }
  else
  {
    v92 = (char *)this + 112;
LABEL_155:
    v94 = v92;
    v92 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v92 + 28) = 1;
    *(_QWORD *)v92 = 0;
    *((_QWORD *)v92 + 1) = 0;
    *((_QWORD *)v92 + 2) = v94;
    *v91 = (uint64_t *)v92;
    v95 = **((_QWORD **)this + 13);
    v96 = (uint64_t *)v92;
    if (v95)
    {
      *((_QWORD *)this + 13) = v95;
      v96 = *v91;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v96);
    ++*((_QWORD *)this + 15);
  }
  return *((unsigned int *)v92 + 8);
}

uint64_t antenna::ARICommandDriver::sendAccessoryReportRF_sync(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  unsigned int v6;
  NSObject *v7;
  _DWORD *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *aBlock;
  NSObject *object;
  _OWORD v41[4];
  void *__p;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  int v46;
  void *v47;
  dispatch_object_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  void *v53;
  uint8_t *v54;
  uint8_t buf[16];
  __int128 v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41[2] = v4;
  v41[3] = v4;
  v41[0] = v4;
  v41[1] = v4;
  AriSdk::ARI_CsiIceAccessoryStateReq_SDK::ARI_CsiIceAccessoryStateReq_SDK((AriSdk::ARI_CsiIceAccessoryStateReq_SDK *)v41);
  v5 = *(_DWORD *)(a1 + 200);
  if ((v5 & 0x7FFFFFFF) != 0)
    v6 = v5 | 0x80000000;
  else
    v6 = 0;
  *(_DWORD *)(a1 + 200) = v6;
  v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v6;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v6;
    _os_log_impl(&dword_227A72000, v7, OS_LOG_TYPE_DEFAULT, "#I fAccessory for RF: 0x%08x(%d)\n", buf, 0xEu);
  }
  v8 = operator new(4uLL);
  *v8 = *(_DWORD *)(a1 + 200);
  v9 = __p;
  __p = v8;
  if (v9)
    operator delete(v9);
  v10 = *(void **)a2;
  if (*(_QWORD *)a2)
    v10 = _Block_copy(v10);
  v11 = *(NSObject **)(a2 + 8);
  aBlock = v10;
  object = v11;
  if (v11)
    dispatch_retain(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12 || (v13 = *(_QWORD *)(a1 + 72), (v14 = std::__shared_weak_count::lock(v12)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v15 = v14;
  p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  v20 = *(_QWORD *)(a1 + 184);
  v43 = a1;
  v44 = v13;
  v45 = v15;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v46 = -184451072;
  if (!aBlock)
  {
    v22 = 0;
    v23 = object;
    v47 = 0;
    v48 = object;
    if (!object)
      goto LABEL_25;
    goto LABEL_24;
  }
  v22 = _Block_copy(aBlock);
  v23 = object;
  v47 = v22;
  v48 = object;
  if (object)
LABEL_24:
    dispatch_retain(v23);
LABEL_25:
  v24 = (std::__shared_weak_count *)operator new(0x48uLL);
  v24->__shared_owners_ = 0;
  v25 = (unint64_t *)&v24->__shared_owners_;
  v24->__shared_weak_owners_ = 0;
  v24[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v24->__vftable = (std::__shared_weak_count_vtbl *)off_24F0359A8;
  v24[1].__shared_owners_ = v13;
  v24[1].__shared_weak_owners_ = (uint64_t)v15;
  v44 = 0;
  v45 = 0;
  LODWORD(v24[2].__vftable) = -184451072;
  v24[2].__shared_owners_ = (uint64_t)v22;
  v24[2].__shared_weak_owners_ = (uint64_t)v23;
  v47 = 0;
  v48 = 0;
  v26 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 1174405120;
  *(_QWORD *)&v56 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk33ARI_CsiIceAccessoryStateRspCb_SDKENS5_31ARI_CsiIceAccessoryStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v56 + 1) = &__block_descriptor_tmp_28;
  v57 = (unint64_t)&v24[1];
  v58 = v24;
  do
    v27 = __ldxr(v25);
  while (__stxr(v27 + 1, v25));
  v50 = v26;
  v51 = 0x40000000;
  v52 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  v53 = &unk_24F035598;
  v54 = buf;
  v28 = _Block_copy(&v50);
  v29 = v58;
  if (v58)
  {
    v30 = (unint64_t *)&v58->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  do
    v32 = __ldaxr(v25);
  while (__stlxr(v32 - 1, v25));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  *(_QWORD *)&v33 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)buf = v33;
  v56 = v33;
  v57 = 0xAAAAAAAAAAAAAAAALL;
  v34 = *(std::__shared_weak_count **)(v20 + 16);
  v50 = *(_QWORD *)(v20 + 8);
  if (!v34)
  {
    v51 = 0;
LABEL_59:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v51 = (uint64_t)std::__shared_weak_count::lock(v34);
  if (!v51)
    goto LABEL_59;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v35 = (std::__shared_weak_count *)v51;
  if (v51)
  {
    v36 = (unint64_t *)(v51 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v49 = v28;
  ice::SendMsgBaseProxy::callback();
  if (v49)
    _Block_release(v49);
  MEMORY[0x22E2A2FF8](buf);
  if (v48)
    dispatch_release(v48);
  if (v47)
    _Block_release(v47);
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v15);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  return MEMORY[0x22E2A3B68](v41);
}

void sub_227AB3628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_227AB36E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a9);
  MEMORY[0x22E2A3B68](&a11);
  _Unwind_Resume(a1);
}

uint64_t antenna::ARICommandDriver::sendAccessoryReportARTD_sync(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  unsigned int v6;
  NSObject *v7;
  _DWORD *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *aBlock;
  NSObject *object;
  _OWORD v41[4];
  void *__p;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  int v46;
  void *v47;
  dispatch_object_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  void *v53;
  uint8_t *v54;
  uint8_t buf[16];
  __int128 v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41[2] = v4;
  v41[3] = v4;
  v41[0] = v4;
  v41[1] = v4;
  AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK::ARI_CsiIceAccessoryStateArtdReq_SDK((AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK *)v41);
  v5 = *(_DWORD *)(a1 + 204);
  if ((v5 & 0x7FFFFFFF) != 0)
    v6 = v5 | 0x80000000;
  else
    v6 = 0;
  *(_DWORD *)(a1 + 204) = v6;
  v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v6;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v6;
    _os_log_impl(&dword_227A72000, v7, OS_LOG_TYPE_DEFAULT, "#I fAccessory for ARTD: 0x%08x(%d)\n", buf, 0xEu);
  }
  v8 = operator new(4uLL);
  *v8 = *(_DWORD *)(a1 + 204);
  v9 = __p;
  __p = v8;
  if (v9)
    operator delete(v9);
  v10 = *(void **)a2;
  if (*(_QWORD *)a2)
    v10 = _Block_copy(v10);
  v11 = *(NSObject **)(a2 + 8);
  aBlock = v10;
  object = v11;
  if (v11)
    dispatch_retain(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12 || (v13 = *(_QWORD *)(a1 + 72), (v14 = std::__shared_weak_count::lock(v12)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v15 = v14;
  p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  v20 = *(_QWORD *)(a1 + 184);
  v43 = a1;
  v44 = v13;
  v45 = v15;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v46 = -183697408;
  if (!aBlock)
  {
    v22 = 0;
    v23 = object;
    v47 = 0;
    v48 = object;
    if (!object)
      goto LABEL_25;
    goto LABEL_24;
  }
  v22 = _Block_copy(aBlock);
  v23 = object;
  v47 = v22;
  v48 = object;
  if (object)
LABEL_24:
    dispatch_retain(v23);
LABEL_25:
  v24 = (std::__shared_weak_count *)operator new(0x48uLL);
  v24->__shared_owners_ = 0;
  v25 = (unint64_t *)&v24->__shared_owners_;
  v24->__shared_weak_owners_ = 0;
  v24[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v24->__vftable = (std::__shared_weak_count_vtbl *)off_24F035A28;
  v24[1].__shared_owners_ = v13;
  v24[1].__shared_weak_owners_ = (uint64_t)v15;
  v44 = 0;
  v45 = 0;
  LODWORD(v24[2].__vftable) = -183697408;
  v24[2].__shared_owners_ = (uint64_t)v22;
  v24[2].__shared_weak_owners_ = (uint64_t)v23;
  v47 = 0;
  v48 = 0;
  v26 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 1174405120;
  *(_QWORD *)&v56 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk37ARI_CsiIceAccessoryStateArtdRspCb_SDKENS5_35ARI_CsiIceAccessoryStateArtdReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v56 + 1) = &__block_descriptor_tmp_30_0;
  v57 = (unint64_t)&v24[1];
  v58 = v24;
  do
    v27 = __ldxr(v25);
  while (__stxr(v27 + 1, v25));
  v50 = v26;
  v51 = 0x40000000;
  v52 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  v53 = &unk_24F035598;
  v54 = buf;
  v28 = _Block_copy(&v50);
  v29 = v58;
  if (v58)
  {
    v30 = (unint64_t *)&v58->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  do
    v32 = __ldaxr(v25);
  while (__stlxr(v32 - 1, v25));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  *(_QWORD *)&v33 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)buf = v33;
  v56 = v33;
  v57 = 0xAAAAAAAAAAAAAAAALL;
  v34 = *(std::__shared_weak_count **)(v20 + 16);
  v50 = *(_QWORD *)(v20 + 8);
  if (!v34)
  {
    v51 = 0;
LABEL_59:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v51 = (uint64_t)std::__shared_weak_count::lock(v34);
  if (!v51)
    goto LABEL_59;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v35 = (std::__shared_weak_count *)v51;
  if (v51)
  {
    v36 = (unint64_t *)(v51 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v49 = v28;
  ice::SendMsgBaseProxy::callback();
  if (v49)
    _Block_release(v49);
  MEMORY[0x22E2A2FF8](buf);
  if (v48)
    dispatch_release(v48);
  if (v47)
    _Block_release(v47);
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v15);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  return MEMORY[0x22E2A4018](v41);
}

void sub_227AB3B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_227AB3BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a9);
  MEMORY[0x22E2A4018](&a11);
  _Unwind_Resume(a1);
}

void antenna::ARICommandDriver::e75AccessoryStatusRF_sync(antenna::ARICommandDriver *a1, xpc_object_t *a2, uint64_t a3)
{
  const char *v6;
  xpc_object_t value;
  __int16 v8;
  int v9;
  const char *v10;
  xpc_object_t v11;
  __int16 v12;
  void *v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  xpc_object_t object;

  v6 = (const char *)*MEMORY[0x24BED3A00];
  if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED3A00]))
    return;
  value = xpc_dictionary_get_value(*a2, v6);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v8 = xpc::dyn_cast_or_default();
  xpc_release(object);
  v9 = *((_DWORD *)a1 + 50);
  if (v8)
  {
    *((_DWORD *)a1 + 50) = v9 | 2;
    v10 = (const char *)*MEMORY[0x24BED39D0];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED39D0]))
    {
      *((_DWORD *)a1 + 50) &= 0x8000000F;
      v11 = xpc_dictionary_get_value(*a2, v10);
      object = v11;
      if (v11)
        xpc_retain(v11);
      else
        object = xpc_null_create();
      v12 = xpc::dyn_cast_or_default();
      *((_DWORD *)a1 + 50) |= antenna::ARICommandDriver::getE75AccessoryType(a1, v12);
      xpc_release(object);
    }
  }
  else
  {
    *((_DWORD *)a1 + 50) = v9 & 0x8000000D;
  }
  if (!*(_QWORD *)a3)
  {
    v13 = 0;
    v14 = *(NSObject **)(a3 + 8);
    v15 = 0;
    v16 = v14;
    if (!v14)
      goto LABEL_15;
    goto LABEL_14;
  }
  v13 = _Block_copy(*(const void **)a3);
  v14 = *(NSObject **)(a3 + 8);
  v15 = v13;
  v16 = v14;
  if (v14)
LABEL_14:
    dispatch_retain(v14);
LABEL_15:
  antenna::ARICommandDriver::sendAccessoryReportRF_sync((uint64_t)a1, (uint64_t)&v15);
  if (v14)
    dispatch_release(v14);
  if (v13)
    _Block_release(v13);
}

void sub_227AB3D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void antenna::ARICommandDriver::e75AccessoryStatusARTD_sync(antenna::ARICommandDriver *a1, xpc_object_t *a2, uint64_t a3)
{
  const char *v6;
  xpc_object_t value;
  __int16 v8;
  int v9;
  const char *v10;
  xpc_object_t v11;
  __int16 v12;
  void *v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  xpc_object_t object;

  v6 = (const char *)*MEMORY[0x24BED3A00];
  if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED3A00]))
    return;
  value = xpc_dictionary_get_value(*a2, v6);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v8 = xpc::dyn_cast_or_default();
  xpc_release(object);
  v9 = *((_DWORD *)a1 + 51);
  if (v8)
  {
    *((_DWORD *)a1 + 51) = v9 | 2;
    v10 = (const char *)*MEMORY[0x24BED39D0];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED39D0]))
    {
      *((_DWORD *)a1 + 51) &= 0x8000000F;
      v11 = xpc_dictionary_get_value(*a2, v10);
      object = v11;
      if (v11)
        xpc_retain(v11);
      else
        object = xpc_null_create();
      v12 = xpc::dyn_cast_or_default();
      *((_DWORD *)a1 + 51) |= antenna::ARICommandDriver::getE75AccessoryType(a1, v12);
      xpc_release(object);
    }
  }
  else
  {
    *((_DWORD *)a1 + 51) = v9 & 0x8000000D;
  }
  if (!*(_QWORD *)a3)
  {
    v13 = 0;
    v14 = *(NSObject **)(a3 + 8);
    v15 = 0;
    v16 = v14;
    if (!v14)
      goto LABEL_15;
    goto LABEL_14;
  }
  v13 = _Block_copy(*(const void **)a3);
  v14 = *(NSObject **)(a3 + 8);
  v15 = v13;
  v16 = v14;
  if (v14)
LABEL_14:
    dispatch_retain(v14);
LABEL_15:
  antenna::ARICommandDriver::sendAccessoryReportARTD_sync((uint64_t)a1, (uint64_t)&v15);
  if (v14)
    dispatch_release(v14);
  if (v13)
    _Block_release(v13);
}

void sub_227AB3F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void antenna::ARICommandDriver::videoAccessoryStatus_sync(int8x8_t *a1, xpc_object_t *a2, uint64_t a3)
{
  const char *v6;
  xpc_object_t value;
  int v8;
  unsigned int v9;
  void *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  xpc_object_t object;

  v6 = (const char *)*MEMORY[0x24BED3A30];
  if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED3A30]))
    return;
  value = xpc_dictionary_get_value(*a2, v6);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v8 = xpc::dyn_cast_or_default();
  xpc_release(object);
  if (v8)
    v9 = 4;
  else
    v9 = 0;
  a1[25] = vorr_s8((int8x8_t)(*(_QWORD *)&a1[25] & 0xFFFFFFFBFFFFFFFBLL), (int8x8_t)vdup_n_s32(v9));
  if (*(_QWORD *)a3)
  {
    v10 = _Block_copy(*(const void **)a3);
    v11 = *(NSObject **)(a3 + 8);
    v16 = v10;
    v17 = v11;
    if (!v11)
      goto LABEL_11;
    goto LABEL_10;
  }
  v10 = 0;
  v11 = *(NSObject **)(a3 + 8);
  v16 = 0;
  v17 = v11;
  if (v11)
LABEL_10:
    dispatch_retain(v11);
LABEL_11:
  antenna::ARICommandDriver::sendAccessoryReportRF_sync((uint64_t)a1, (uint64_t)&v16);
  if (v11)
    dispatch_release(v11);
  if (v10)
    _Block_release(v10);
  if (!*(_QWORD *)a3)
  {
    v12 = 0;
    v13 = *(NSObject **)(a3 + 8);
    v14 = 0;
    v15 = v13;
    if (!v13)
      goto LABEL_18;
    goto LABEL_17;
  }
  v12 = _Block_copy(*(const void **)a3);
  v13 = *(NSObject **)(a3 + 8);
  v14 = v12;
  v15 = v13;
  if (v13)
LABEL_17:
    dispatch_retain(v13);
LABEL_18:
  antenna::ARICommandDriver::sendAccessoryReportARTD_sync((uint64_t)a1, (uint64_t)&v14);
  if (v13)
    dispatch_release(v13);
  if (v12)
    _Block_release(v12);
}

void sub_227AB4110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_227AB4134(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
  xpc_release(object);
  JUMPOUT(0x227AB4128);
}

void antenna::ARICommandDriver::wiredPortNotification_sync(int8x8_t *a1, xpc_object_t *a2, uint64_t a3)
{
  const char *v6;
  xpc_object_t value;
  int v8;
  unsigned int v9;
  void *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  xpc_object_t object;

  v6 = (const char *)*MEMORY[0x24BED3978];
  if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED3978]))
    return;
  value = xpc_dictionary_get_value(*a2, v6);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v8 = xpc::dyn_cast_or_default();
  xpc_release(object);
  if (v8)
    v9 = 8;
  else
    v9 = 0;
  a1[25] = vorr_s8((int8x8_t)(*(_QWORD *)&a1[25] & 0xFFFFFFF7FFFFFFF7), (int8x8_t)vdup_n_s32(v9));
  if (*(_QWORD *)a3)
  {
    v10 = _Block_copy(*(const void **)a3);
    v11 = *(NSObject **)(a3 + 8);
    v16 = v10;
    v17 = v11;
    if (!v11)
      goto LABEL_11;
    goto LABEL_10;
  }
  v10 = 0;
  v11 = *(NSObject **)(a3 + 8);
  v16 = 0;
  v17 = v11;
  if (v11)
LABEL_10:
    dispatch_retain(v11);
LABEL_11:
  antenna::ARICommandDriver::sendAccessoryReportRF_sync((uint64_t)a1, (uint64_t)&v16);
  if (v11)
    dispatch_release(v11);
  if (v10)
    _Block_release(v10);
  if (!*(_QWORD *)a3)
  {
    v12 = 0;
    v13 = *(NSObject **)(a3 + 8);
    v14 = 0;
    v15 = v13;
    if (!v13)
      goto LABEL_18;
    goto LABEL_17;
  }
  v12 = _Block_copy(*(const void **)a3);
  v13 = *(NSObject **)(a3 + 8);
  v14 = v12;
  v15 = v13;
  if (v13)
LABEL_17:
    dispatch_retain(v13);
LABEL_18:
  antenna::ARICommandDriver::sendAccessoryReportARTD_sync((uint64_t)a1, (uint64_t)&v14);
  if (v13)
    dispatch_release(v13);
  if (v12)
    _Block_release(v12);
}

void sub_227AB42C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_227AB42E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
  xpc_release(object);
  JUMPOUT(0x227AB42D8);
}

void antenna::ARICommandDriver::speakerState_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  const char *v6;
  __int128 v7;
  xpc_object_t value;
  NSObject *v9;
  xpc_object_t v10;
  void *v11;
  int v12;
  _DWORD *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t on_zero_shared_weak;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  const void *(__cdecl *get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  unint64_t v26;
  void *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  NSObject *v43;
  void *v44;
  char *v45;
  size_t v46;
  size_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  void *aBlock;
  NSObject *object;
  _BYTE block[32];
  xpc_object_t v55[2];
  __int128 v56;
  void *__p;
  std::__shared_weak_count_vtbl *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  int v61;
  void *v62;
  dispatch_object_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  void *v68;
  uint8_t *v69;
  uint8_t buf[16];
  __int128 v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v6 = (const char *)*MEMORY[0x24BED39B0];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED39B0]))
  {
    __p = (void *)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v55 = v7;
    v56 = v7;
    *(_OWORD *)block = v7;
    *(_OWORD *)&block[16] = v7;
    AriSdk::ARI_CsiIceSpeakerStateReq_SDK::ARI_CsiIceSpeakerStateReq_SDK((AriSdk::ARI_CsiIceSpeakerStateReq_SDK *)block);
    value = xpc_dictionary_get_value(*a2, v6);
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    v12 = xpc::dyn_cast_or_default();
    xpc_release(*(xpc_object_t *)buf);
    v13 = operator new(4uLL);
    *v13 = v12;
    v14 = __p;
    __p = v13;
    if (v14)
      operator delete(v14);
    v15 = *(void **)a3;
    if (*(_QWORD *)a3)
      v15 = _Block_copy(v15);
    v16 = *(NSObject **)(a3 + 8);
    aBlock = v15;
    object = v16;
    if (v16)
      dispatch_retain(v16);
    v17 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
    if (!v17
      || (on_zero_shared_weak = (uint64_t)a1[1].__on_zero_shared_weak, (v19 = std::__shared_weak_count::lock(v17)) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    v20 = v19;
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v20);
    }
    get_deleter = a1[4].__get_deleter;
    v58 = a1;
    v59 = on_zero_shared_weak;
    v60 = v20;
    do
      v26 = __ldxr(p_shared_weak_owners);
    while (__stxr(v26 + 1, p_shared_weak_owners));
    v61 = -183664640;
    if (aBlock)
    {
      v27 = _Block_copy(aBlock);
      v28 = object;
      v62 = v27;
      v63 = object;
      if (!object)
      {
LABEL_27:
        v29 = (std::__shared_weak_count *)operator new(0x48uLL);
        v29->__shared_owners_ = 0;
        v30 = (unint64_t *)&v29->__shared_owners_;
        v29->__shared_weak_owners_ = 0;
        v29[1].__vftable = a1;
        v29->__vftable = (std::__shared_weak_count_vtbl *)off_24F035AA8;
        v29[1].__shared_owners_ = on_zero_shared_weak;
        v29[1].__shared_weak_owners_ = (uint64_t)v20;
        v59 = 0;
        v60 = 0;
        LODWORD(v29[2].__vftable) = -183664640;
        v29[2].__shared_owners_ = (uint64_t)v27;
        v29[2].__shared_weak_owners_ = (uint64_t)v28;
        v62 = 0;
        v63 = 0;
        v31 = MEMORY[0x24BDAC760];
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 1174405120;
        *(_QWORD *)&v71 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk31ARI_CsiIceSpeakerStateRspCb_SDKENS5_29ARI_CsiIceSpeakerStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
        *((_QWORD *)&v71 + 1) = &__block_descriptor_tmp_32_0;
        v72 = (unint64_t)&v29[1];
        v73 = v29;
        do
          v32 = __ldxr(v30);
        while (__stxr(v32 + 1, v30));
        v65 = v31;
        v66 = 0x40000000;
        v67 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
        v68 = &unk_24F035598;
        v69 = buf;
        v33 = _Block_copy(&v65);
        v34 = v73;
        if (v73)
        {
          v35 = (unint64_t *)&v73->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        do
          v37 = __ldaxr(v30);
        while (__stlxr(v37 - 1, v30));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
        *(_QWORD *)&v38 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v38 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)buf = v38;
        v71 = v38;
        v72 = 0xAAAAAAAAAAAAAAAALL;
        v39 = (std::__shared_weak_count *)*((_QWORD *)get_deleter + 2);
        v65 = *((_QWORD *)get_deleter + 1);
        if (v39)
        {
          v66 = (uint64_t)std::__shared_weak_count::lock(v39);
          if (v66)
          {
            ice::SendMsgBaseProxy::SendMsgBaseProxy();
            v40 = (std::__shared_weak_count *)v66;
            if (v66)
            {
              v41 = (unint64_t *)(v66 + 8);
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            v64 = v33;
            ice::SendMsgBaseProxy::callback();
            if (v64)
              _Block_release(v64);
            MEMORY[0x22E2A2FF8](buf);
            if (v63)
              dispatch_release(v63);
            if (v62)
              _Block_release(v62);
            if (v60)
              std::__shared_weak_count::__release_weak(v60);
            std::__shared_weak_count::__release_weak(v20);
            if (object)
              dispatch_release(object);
            if (aBlock)
              _Block_release(aBlock);
            MEMORY[0x22E2A391C](block);
            return;
          }
        }
        else
        {
          v66 = 0;
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
    }
    else
    {
      v27 = 0;
      v28 = object;
      v62 = 0;
      v63 = object;
      if (!object)
        goto LABEL_27;
    }
    dispatch_retain(v28);
    goto LABEL_27;
  }
  v9 = a1[1].~__shared_weak_count;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v45 = (char *)MEMORY[0x22E2A4BF4](*a2);
    memset(block, 170, 24);
    v46 = strlen(v45);
    if (v46 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v47 = v46;
    if (v46 >= 0x17)
    {
      v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17)
        v49 = v46 | 7;
      v50 = v49 + 1;
      v48 = operator new(v49 + 1);
      *(_QWORD *)&block[8] = v47;
      *(_QWORD *)&block[16] = v50 | 0x8000000000000000;
      *(_QWORD *)block = v48;
    }
    else
    {
      block[23] = v46;
      v48 = block;
      if (!v46)
        goto LABEL_78;
    }
    memcpy(v48, v45, v47);
LABEL_78:
    v48[v47] = 0;
    free(v45);
    v51 = block;
    if (block[23] < 0)
      v51 = *(_BYTE **)block;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v51;
    _os_log_error_impl(&dword_227A72000, v9, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", buf, 0xCu);
    if ((block[23] & 0x80000000) != 0)
      operator delete(*(void **)block);
  }
  v10 = xpc_null_create();
  if (*(_QWORD *)a3)
    v11 = _Block_copy(*(const void **)a3);
  else
    v11 = 0;
  v43 = *(NSObject **)(a3 + 8);
  *(_QWORD *)block = MEMORY[0x24BDAC760];
  *(_QWORD *)&block[8] = 1174405120;
  *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  *(_QWORD *)&block[24] = &__block_descriptor_tmp_17_1;
  if (!v11)
  {
    LOBYTE(v56) = 0;
    v55[0] = 0;
    v55[1] = v10;
    if (v10)
      goto LABEL_62;
LABEL_64:
    v55[1] = xpc_null_create();
    goto LABEL_65;
  }
  v44 = _Block_copy(v11);
  LOBYTE(v56) = 0;
  v55[0] = v44;
  v55[1] = v10;
  if (!v10)
    goto LABEL_64;
LABEL_62:
  xpc_retain(v10);
LABEL_65:
  dispatch_async(v43, block);
  xpc_release(v55[1]);
  v55[1] = 0;
  if (v55[0])
    _Block_release(v55[0]);
  if (v11)
    _Block_release(v11);
  xpc_release(v10);
}

void sub_227AB48D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::ARICommandDriver::handDetectionState_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  const char *v6;
  __int128 v7;
  xpc_object_t value;
  NSObject *v9;
  xpc_object_t v10;
  void *v11;
  unsigned __int8 v12;
  _DWORD *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t on_zero_shared_weak;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  const void *(__cdecl *get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  unint64_t v26;
  void *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  NSObject *v43;
  void *v44;
  char *v45;
  size_t v46;
  size_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  void *aBlock;
  NSObject *object;
  _BYTE block[32];
  xpc_object_t v55[2];
  __int128 v56;
  void *__p;
  std::__shared_weak_count_vtbl *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  int v61;
  void *v62;
  dispatch_object_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  void *v68;
  uint8_t *v69;
  uint8_t buf[16];
  __int128 v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v6 = (const char *)*MEMORY[0x24BED3A08];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED3A08]))
  {
    __p = (void *)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v55 = v7;
    v56 = v7;
    *(_OWORD *)block = v7;
    *(_OWORD *)&block[16] = v7;
    AriSdk::ARI_CsiIceGripStateReq_SDK::ARI_CsiIceGripStateReq_SDK((AriSdk::ARI_CsiIceGripStateReq_SDK *)block);
    value = xpc_dictionary_get_value(*a2, v6);
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    v12 = xpc::dyn_cast_or_default();
    xpc_release(*(xpc_object_t *)buf);
    v13 = operator new(4uLL);
    *v13 = v12;
    v14 = __p;
    __p = v13;
    if (v14)
      operator delete(v14);
    v15 = *(void **)a3;
    if (*(_QWORD *)a3)
      v15 = _Block_copy(v15);
    v16 = *(NSObject **)(a3 + 8);
    aBlock = v15;
    object = v16;
    if (v16)
      dispatch_retain(v16);
    v17 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
    if (!v17
      || (on_zero_shared_weak = (uint64_t)a1[1].__on_zero_shared_weak, (v19 = std::__shared_weak_count::lock(v17)) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    v20 = v19;
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v20);
    }
    get_deleter = a1[4].__get_deleter;
    v58 = a1;
    v59 = on_zero_shared_weak;
    v60 = v20;
    do
      v26 = __ldxr(p_shared_weak_owners);
    while (__stxr(v26 + 1, p_shared_weak_owners));
    v61 = -183599104;
    if (aBlock)
    {
      v27 = _Block_copy(aBlock);
      v28 = object;
      v62 = v27;
      v63 = object;
      if (!object)
      {
LABEL_27:
        v29 = (std::__shared_weak_count *)operator new(0x48uLL);
        v29->__shared_owners_ = 0;
        v30 = (unint64_t *)&v29->__shared_owners_;
        v29->__shared_weak_owners_ = 0;
        v29[1].__vftable = a1;
        v29->__vftable = (std::__shared_weak_count_vtbl *)off_24F035B28;
        v29[1].__shared_owners_ = on_zero_shared_weak;
        v29[1].__shared_weak_owners_ = (uint64_t)v20;
        v59 = 0;
        v60 = 0;
        LODWORD(v29[2].__vftable) = -183599104;
        v29[2].__shared_owners_ = (uint64_t)v27;
        v29[2].__shared_weak_owners_ = (uint64_t)v28;
        v62 = 0;
        v63 = 0;
        v31 = MEMORY[0x24BDAC760];
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 1174405120;
        *(_QWORD *)&v71 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk28ARI_CsiIceGripStateRspCb_SDKENS5_26ARI_CsiIceGripStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
        *((_QWORD *)&v71 + 1) = &__block_descriptor_tmp_34_0;
        v72 = (unint64_t)&v29[1];
        v73 = v29;
        do
          v32 = __ldxr(v30);
        while (__stxr(v32 + 1, v30));
        v65 = v31;
        v66 = 0x40000000;
        v67 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
        v68 = &unk_24F035598;
        v69 = buf;
        v33 = _Block_copy(&v65);
        v34 = v73;
        if (v73)
        {
          v35 = (unint64_t *)&v73->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        do
          v37 = __ldaxr(v30);
        while (__stlxr(v37 - 1, v30));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
        *(_QWORD *)&v38 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v38 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)buf = v38;
        v71 = v38;
        v72 = 0xAAAAAAAAAAAAAAAALL;
        v39 = (std::__shared_weak_count *)*((_QWORD *)get_deleter + 2);
        v65 = *((_QWORD *)get_deleter + 1);
        if (v39)
        {
          v66 = (uint64_t)std::__shared_weak_count::lock(v39);
          if (v66)
          {
            ice::SendMsgBaseProxy::SendMsgBaseProxy();
            v40 = (std::__shared_weak_count *)v66;
            if (v66)
            {
              v41 = (unint64_t *)(v66 + 8);
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            v64 = v33;
            ice::SendMsgBaseProxy::callback();
            if (v64)
              _Block_release(v64);
            MEMORY[0x22E2A2FF8](buf);
            if (v63)
              dispatch_release(v63);
            if (v62)
              _Block_release(v62);
            if (v60)
              std::__shared_weak_count::__release_weak(v60);
            std::__shared_weak_count::__release_weak(v20);
            if (object)
              dispatch_release(object);
            if (aBlock)
              _Block_release(aBlock);
            MEMORY[0x22E2A34B4](block);
            return;
          }
        }
        else
        {
          v66 = 0;
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
    }
    else
    {
      v27 = 0;
      v28 = object;
      v62 = 0;
      v63 = object;
      if (!object)
        goto LABEL_27;
    }
    dispatch_retain(v28);
    goto LABEL_27;
  }
  v9 = a1[1].~__shared_weak_count;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v45 = (char *)MEMORY[0x22E2A4BF4](*a2);
    memset(block, 170, 24);
    v46 = strlen(v45);
    if (v46 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v47 = v46;
    if (v46 >= 0x17)
    {
      v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17)
        v49 = v46 | 7;
      v50 = v49 + 1;
      v48 = operator new(v49 + 1);
      *(_QWORD *)&block[8] = v47;
      *(_QWORD *)&block[16] = v50 | 0x8000000000000000;
      *(_QWORD *)block = v48;
    }
    else
    {
      block[23] = v46;
      v48 = block;
      if (!v46)
        goto LABEL_78;
    }
    memcpy(v48, v45, v47);
LABEL_78:
    v48[v47] = 0;
    free(v45);
    v51 = block;
    if (block[23] < 0)
      v51 = *(_BYTE **)block;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v51;
    _os_log_error_impl(&dword_227A72000, v9, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", buf, 0xCu);
    if ((block[23] & 0x80000000) != 0)
      operator delete(*(void **)block);
  }
  v10 = xpc_null_create();
  if (*(_QWORD *)a3)
    v11 = _Block_copy(*(const void **)a3);
  else
    v11 = 0;
  v43 = *(NSObject **)(a3 + 8);
  *(_QWORD *)block = MEMORY[0x24BDAC760];
  *(_QWORD *)&block[8] = 1174405120;
  *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  *(_QWORD *)&block[24] = &__block_descriptor_tmp_17_1;
  if (!v11)
  {
    LOBYTE(v56) = 0;
    v55[0] = 0;
    v55[1] = v10;
    if (v10)
      goto LABEL_62;
LABEL_64:
    v55[1] = xpc_null_create();
    goto LABEL_65;
  }
  v44 = _Block_copy(v11);
  LOBYTE(v56) = 0;
  v55[0] = v44;
  v55[1] = v10;
  if (!v10)
    goto LABEL_64;
LABEL_62:
  xpc_retain(v10);
LABEL_65:
  dispatch_async(v43, block);
  xpc_release(v55[1]);
  v55[1] = 0;
  if (v55[0])
    _Block_release(v55[0]);
  if (v11)
    _Block_release(v11);
  xpc_release(v10);
}

void sub_227AB4FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::ARICommandDriver::powerSourceState_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  const char *v6;
  __int128 v7;
  xpc_object_t value;
  NSObject *v9;
  xpc_object_t v10;
  void *v11;
  int v12;
  _DWORD *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t on_zero_shared_weak;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  const void *(__cdecl *get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  unint64_t v26;
  void *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  NSObject *v43;
  void *v44;
  char *v45;
  size_t v46;
  size_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  void *aBlock;
  NSObject *object;
  _BYTE block[32];
  xpc_object_t v55[2];
  __int128 v56;
  void *__p;
  std::__shared_weak_count_vtbl *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  int v61;
  void *v62;
  dispatch_object_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  void *v68;
  uint8_t *v69;
  uint8_t buf[16];
  __int128 v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v6 = (const char *)*MEMORY[0x24BED39D8];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED39D8]))
  {
    __p = (void *)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v55 = v7;
    v56 = v7;
    *(_OWORD *)block = v7;
    *(_OWORD *)&block[16] = v7;
    AriSdk::ARI_CsiIcePowerSourceStateReq_SDK::ARI_CsiIcePowerSourceStateReq_SDK((AriSdk::ARI_CsiIcePowerSourceStateReq_SDK *)block);
    value = xpc_dictionary_get_value(*a2, v6);
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    v12 = xpc::dyn_cast_or_default();
    v13 = operator new(4uLL);
    *v13 = v12;
    v14 = __p;
    __p = v13;
    if (v14)
      operator delete(v14);
    xpc_release(*(xpc_object_t *)buf);
    v15 = *(void **)a3;
    if (*(_QWORD *)a3)
      v15 = _Block_copy(v15);
    v16 = *(NSObject **)(a3 + 8);
    aBlock = v15;
    object = v16;
    if (v16)
      dispatch_retain(v16);
    v17 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
    if (!v17
      || (on_zero_shared_weak = (uint64_t)a1[1].__on_zero_shared_weak, (v19 = std::__shared_weak_count::lock(v17)) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    v20 = v19;
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v20);
    }
    get_deleter = a1[4].__get_deleter;
    v58 = a1;
    v59 = on_zero_shared_weak;
    v60 = v20;
    do
      v26 = __ldxr(p_shared_weak_owners);
    while (__stxr(v26 + 1, p_shared_weak_owners));
    v61 = -183533568;
    if (aBlock)
    {
      v27 = _Block_copy(aBlock);
      v28 = object;
      v62 = v27;
      v63 = object;
      if (!object)
      {
LABEL_27:
        v29 = (std::__shared_weak_count *)operator new(0x48uLL);
        v29->__shared_owners_ = 0;
        v30 = (unint64_t *)&v29->__shared_owners_;
        v29->__shared_weak_owners_ = 0;
        v29[1].__vftable = a1;
        v29->__vftable = (std::__shared_weak_count_vtbl *)off_24F035BA8;
        v29[1].__shared_owners_ = on_zero_shared_weak;
        v29[1].__shared_weak_owners_ = (uint64_t)v20;
        v59 = 0;
        v60 = 0;
        LODWORD(v29[2].__vftable) = -183533568;
        v29[2].__shared_owners_ = (uint64_t)v27;
        v29[2].__shared_weak_owners_ = (uint64_t)v28;
        v62 = 0;
        v63 = 0;
        v31 = MEMORY[0x24BDAC760];
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 1174405120;
        *(_QWORD *)&v71 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk35ARI_CsiIcePowerSourceStateRspCb_SDKENS5_33ARI_CsiIcePowerSourceStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
        *((_QWORD *)&v71 + 1) = &__block_descriptor_tmp_36;
        v72 = (unint64_t)&v29[1];
        v73 = v29;
        do
          v32 = __ldxr(v30);
        while (__stxr(v32 + 1, v30));
        v65 = v31;
        v66 = 0x40000000;
        v67 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
        v68 = &unk_24F035598;
        v69 = buf;
        v33 = _Block_copy(&v65);
        v34 = v73;
        if (v73)
        {
          v35 = (unint64_t *)&v73->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        do
          v37 = __ldaxr(v30);
        while (__stlxr(v37 - 1, v30));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
        *(_QWORD *)&v38 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v38 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)buf = v38;
        v71 = v38;
        v72 = 0xAAAAAAAAAAAAAAAALL;
        v39 = (std::__shared_weak_count *)*((_QWORD *)get_deleter + 2);
        v65 = *((_QWORD *)get_deleter + 1);
        if (v39)
        {
          v66 = (uint64_t)std::__shared_weak_count::lock(v39);
          if (v66)
          {
            ice::SendMsgBaseProxy::SendMsgBaseProxy();
            v40 = (std::__shared_weak_count *)v66;
            if (v66)
            {
              v41 = (unint64_t *)(v66 + 8);
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            v64 = v33;
            ice::SendMsgBaseProxy::callback();
            if (v64)
              _Block_release(v64);
            MEMORY[0x22E2A2FF8](buf);
            if (v63)
              dispatch_release(v63);
            if (v62)
              _Block_release(v62);
            if (v60)
              std::__shared_weak_count::__release_weak(v60);
            std::__shared_weak_count::__release_weak(v20);
            if (object)
              dispatch_release(object);
            if (aBlock)
              _Block_release(aBlock);
            MEMORY[0x22E2A3EBC](block);
            return;
          }
        }
        else
        {
          v66 = 0;
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
    }
    else
    {
      v27 = 0;
      v28 = object;
      v62 = 0;
      v63 = object;
      if (!object)
        goto LABEL_27;
    }
    dispatch_retain(v28);
    goto LABEL_27;
  }
  v9 = a1[1].~__shared_weak_count;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v45 = (char *)MEMORY[0x22E2A4BF4](*a2);
    memset(block, 170, 24);
    v46 = strlen(v45);
    if (v46 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v47 = v46;
    if (v46 >= 0x17)
    {
      v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17)
        v49 = v46 | 7;
      v50 = v49 + 1;
      v48 = operator new(v49 + 1);
      *(_QWORD *)&block[8] = v47;
      *(_QWORD *)&block[16] = v50 | 0x8000000000000000;
      *(_QWORD *)block = v48;
    }
    else
    {
      block[23] = v46;
      v48 = block;
      if (!v46)
        goto LABEL_78;
    }
    memcpy(v48, v45, v47);
LABEL_78:
    v48[v47] = 0;
    free(v45);
    v51 = block;
    if (block[23] < 0)
      v51 = *(_BYTE **)block;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v51;
    _os_log_error_impl(&dword_227A72000, v9, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", buf, 0xCu);
    if ((block[23] & 0x80000000) != 0)
      operator delete(*(void **)block);
  }
  v10 = xpc_null_create();
  if (*(_QWORD *)a3)
    v11 = _Block_copy(*(const void **)a3);
  else
    v11 = 0;
  v43 = *(NSObject **)(a3 + 8);
  *(_QWORD *)block = MEMORY[0x24BDAC760];
  *(_QWORD *)&block[8] = 1174405120;
  *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  *(_QWORD *)&block[24] = &__block_descriptor_tmp_17_1;
  if (!v11)
  {
    LOBYTE(v56) = 0;
    v55[0] = 0;
    v55[1] = v10;
    if (v10)
      goto LABEL_62;
LABEL_64:
    v55[1] = xpc_null_create();
    goto LABEL_65;
  }
  v44 = _Block_copy(v11);
  LOBYTE(v56) = 0;
  v55[0] = v44;
  v55[1] = v10;
  if (!v10)
    goto LABEL_64;
LABEL_62:
  xpc_retain(v10);
LABEL_65:
  dispatch_async(v43, block);
  xpc_release(v55[1]);
  v55[1] = 0;
  if (v55[0])
    _Block_release(v55[0]);
  if (v11)
    _Block_release(v11);
  xpc_release(v10);
}

void sub_227AB569C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::ARICommandDriver::ppmEnable_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  const char *v6;
  __int128 v7;
  xpc_object_t value;
  NSObject *v9;
  xpc_object_t v10;
  void *v11;
  int v12;
  _DWORD *v13;
  void *v14;
  xpc_object_t v15;
  __int16 v16;
  _WORD *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  uint64_t on_zero_shared_weak;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_weak_owners;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  const void *(__cdecl *get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  unint64_t v30;
  void *v31;
  NSObject *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _DWORD *v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  NSObject *v48;
  void *v49;
  char *v50;
  size_t v51;
  size_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  void *aBlock;
  NSObject *object;
  _BYTE block[32];
  xpc_object_t v60[2];
  __int128 v61;
  void *__p[2];
  void *v63;
  std::__shared_weak_count_vtbl *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  int v67;
  void *v68;
  dispatch_object_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t);
  void *v74;
  uint8_t *v75;
  uint8_t buf[16];
  __int128 v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v6 = (const char *)*MEMORY[0x24BED3970];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED3970]))
  {
    v63 = (void *)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v61 = v7;
    *(_OWORD *)__p = v7;
    *(_OWORD *)&block[16] = v7;
    *(_OWORD *)v60 = v7;
    *(_OWORD *)block = v7;
    AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK::ARI_IBICpsConfigureCellularPowerReportReq_SDK((AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK *)block);
    value = xpc_dictionary_get_value(*a2, v6);
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    v12 = xpc::dyn_cast_or_default();
    xpc_release(*(xpc_object_t *)buf);
    v13 = operator new(4uLL);
    *v13 = v12;
    v14 = __p[1];
    __p[1] = v13;
    if (v14)
      operator delete(v14);
    if (v12)
    {
      v15 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED3990]);
      *(_QWORD *)buf = v15;
      if (v15)
        xpc_retain(v15);
      else
        *(_QWORD *)buf = xpc_null_create();
      v16 = xpc::dyn_cast_or_default();
      xpc_release(*(xpc_object_t *)buf);
    }
    else
    {
      v16 = 0;
    }
    v17 = operator new(2uLL);
    *v17 = v16;
    v18 = v63;
    v63 = v17;
    if (v18)
      operator delete(v18);
    v19 = *(void **)a3;
    if (*(_QWORD *)a3)
      v19 = _Block_copy(v19);
    v20 = *(NSObject **)(a3 + 8);
    aBlock = v19;
    object = v20;
    if (v20)
      dispatch_retain(v20);
    v21 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
    if (!v21
      || (on_zero_shared_weak = (uint64_t)a1[1].__on_zero_shared_weak, (v23 = std::__shared_weak_count::lock(v21)) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    v24 = v23;
    p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
    do
      v26 = __ldxr(p_shared_weak_owners);
    while (__stxr(v26 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v24);
    }
    get_deleter = a1[4].__get_deleter;
    v64 = a1;
    v65 = on_zero_shared_weak;
    v66 = v24;
    do
      v30 = __ldxr(p_shared_weak_owners);
    while (__stxr(v30 + 1, p_shared_weak_owners));
    v67 = 1023442944;
    if (aBlock)
    {
      v31 = _Block_copy(aBlock);
      v32 = object;
      v68 = v31;
      v69 = object;
      if (!object)
      {
LABEL_35:
        v33 = (std::__shared_weak_count *)operator new(0x48uLL);
        v33->__shared_owners_ = 0;
        v34 = (unint64_t *)&v33->__shared_owners_;
        v33->__shared_weak_owners_ = 0;
        v33[1].__vftable = a1;
        v33->__vftable = (std::__shared_weak_count_vtbl *)off_24F035C28;
        v33[1].__shared_owners_ = on_zero_shared_weak;
        v33[1].__shared_weak_owners_ = (uint64_t)v24;
        v65 = 0;
        v66 = 0;
        LODWORD(v33[2].__vftable) = 1023442944;
        v33[2].__shared_owners_ = (uint64_t)v31;
        v33[2].__shared_weak_owners_ = (uint64_t)v32;
        v68 = 0;
        v69 = 0;
        v35 = MEMORY[0x24BDAC760];
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 1174405120;
        *(_QWORD *)&v77 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk45ARI_IBICpsConfigureCellularPowerReportRsp_SDKENS5_45ARI_IBICpsConfigureCellularPowerReportReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
        *((_QWORD *)&v77 + 1) = &__block_descriptor_tmp_38_0;
        v78 = (unint64_t)&v33[1];
        v79 = v33;
        do
          v36 = __ldxr(v34);
        while (__stxr(v36 + 1, v34));
        v71 = v35;
        v72 = 0x40000000;
        v73 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
        v74 = &unk_24F035598;
        v75 = buf;
        v37 = _Block_copy(&v71);
        v38 = v79;
        if (v79)
        {
          v39 = (unint64_t *)&v79->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        do
          v41 = __ldaxr(v34);
        while (__stlxr(v41 - 1, v34));
        if (v41)
        {
          if (__p[0])
            goto LABEL_50;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
          if (__p[0])
            goto LABEL_50;
        }
        v42 = operator new(4uLL);
        *v42 = 0;
        __p[0] = v42;
LABEL_50:
        v78 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v43 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)buf = v43;
        v77 = v43;
        v44 = (std::__shared_weak_count *)*((_QWORD *)get_deleter + 2);
        v71 = *((_QWORD *)get_deleter + 1);
        if (v44)
        {
          v72 = (uint64_t)std::__shared_weak_count::lock(v44);
          if (v72)
          {
            ice::SendMsgBaseProxy::SendMsgBaseProxy();
            v45 = (std::__shared_weak_count *)v72;
            if (v72)
            {
              v46 = (unint64_t *)(v72 + 8);
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
            v70 = v37;
            ice::SendMsgBaseProxy::callback();
            if (v70)
              _Block_release(v70);
            MEMORY[0x22E2A2FF8](buf);
            if (v69)
              dispatch_release(v69);
            if (v68)
              _Block_release(v68);
            if (v66)
              std::__shared_weak_count::__release_weak(v66);
            std::__shared_weak_count::__release_weak(v24);
            if (object)
              dispatch_release(object);
            if (aBlock)
              _Block_release(aBlock);
            MEMORY[0x22E2A43FC](block);
            return;
          }
        }
        else
        {
          v72 = 0;
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
    }
    else
    {
      v31 = 0;
      v32 = object;
      v68 = 0;
      v69 = object;
      if (!object)
        goto LABEL_35;
    }
    dispatch_retain(v32);
    goto LABEL_35;
  }
  v9 = a1[1].~__shared_weak_count;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v50 = (char *)MEMORY[0x22E2A4BF4](*a2);
    memset(block, 170, 24);
    v51 = strlen(v50);
    if (v51 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v52 = v51;
    if (v51 >= 0x17)
    {
      v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v51 | 7) != 0x17)
        v54 = v51 | 7;
      v55 = v54 + 1;
      v53 = operator new(v54 + 1);
      *(_QWORD *)&block[8] = v52;
      *(_QWORD *)&block[16] = v55 | 0x8000000000000000;
      *(_QWORD *)block = v53;
    }
    else
    {
      block[23] = v51;
      v53 = block;
      if (!v51)
        goto LABEL_89;
    }
    memcpy(v53, v50, v52);
LABEL_89:
    v53[v52] = 0;
    free(v50);
    v56 = block;
    if (block[23] < 0)
      v56 = *(_BYTE **)block;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v56;
    _os_log_error_impl(&dword_227A72000, v9, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", buf, 0xCu);
    if ((block[23] & 0x80000000) != 0)
      operator delete(*(void **)block);
  }
  v10 = xpc_null_create();
  if (*(_QWORD *)a3)
    v11 = _Block_copy(*(const void **)a3);
  else
    v11 = 0;
  v48 = *(NSObject **)(a3 + 8);
  *(_QWORD *)block = MEMORY[0x24BDAC760];
  *(_QWORD *)&block[8] = 1174405120;
  *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  *(_QWORD *)&block[24] = &__block_descriptor_tmp_17_1;
  if (!v11)
  {
    LOBYTE(v61) = 0;
    v60[0] = 0;
    v60[1] = v10;
    if (v10)
      goto LABEL_73;
LABEL_75:
    v60[1] = xpc_null_create();
    goto LABEL_76;
  }
  v49 = _Block_copy(v11);
  LOBYTE(v61) = 0;
  v60[0] = v49;
  v60[1] = v10;
  if (!v10)
    goto LABEL_75;
LABEL_73:
  xpc_retain(v10);
LABEL_76:
  dispatch_async(v48, block);
  xpc_release(v60[1]);
  v60[1] = 0;
  if (v60[0])
    _Block_release(v60[0]);
  if (v11)
    _Block_release(v11);
  xpc_release(v10);
}

void sub_227AB5E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *aBlock,char a30)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::ARICommandDriver::ppmRegisterIndication_sync(std::__shared_weak_count_vtbl *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  void (__cdecl *on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  NSObject *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  void *v24[5];
  std::__shared_weak_count *v25;
  _QWORD aBlock[5];

  v3 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
    v11 = *(void **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_12;
    goto LABEL_11;
  }
  v11 = *(void **)a2;
  if (*(_QWORD *)a2)
LABEL_11:
    v11 = _Block_copy(v11);
LABEL_12:
  on_zero_shared_weak = a1[5].__on_zero_shared_weak;
  a1[5].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  if (on_zero_shared_weak)
    _Block_release(on_zero_shared_weak);
  v13 = *(NSObject **)(a2 + 8);
  if (v13)
    dispatch_retain(v13);
  v14 = a1[6].~__shared_weak_count;
  a1[6].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  if (v14)
    dispatch_release(v14);
  v15 = (std::__shared_weak_count *)operator new(0x20uLL);
  v15->__shared_owners_ = 0;
  v16 = (unint64_t *)&v15->__shared_owners_;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)off_24F035CA8;
  v15[1].__vftable = a1;
  v17 = MEMORY[0x24BDAC760];
  v24[0] = (void *)MEMORY[0x24BDAC760];
  v24[1] = (void *)1174405120;
  v24[2] = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver26ppmRegisterIndication_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v24[3] = &__block_descriptor_tmp_40_1;
  v24[4] = &v15[1];
  v25 = v15;
  do
    v18 = __ldxr(v16);
  while (__stxr(v18 + 1, v16));
  aBlock[0] = v17;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  aBlock[3] = &unk_24F035598;
  aBlock[4] = v24;
  v19 = _Block_copy(aBlock);
  v20 = v25;
  if (v25)
  {
    v21 = (unint64_t *)&v25->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  do
    v23 = __ldaxr(v16);
  while (__stlxr(v23 - 1, v16));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  v24[0] = v19;
  ice::Client::regIndicationInternal();
  if (v24[0])
    _Block_release(v24[0]);
  std::__shared_weak_count::__release_weak(v6);
}

void sub_227AB617C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  std::__shared_weak_count *v10;

  if (aBlock)
    _Block_release(aBlock);
  std::__shared_weak_count::__release_weak(v10);
  _Unwind_Resume(a1);
}

uint64_t antenna::ARICommandDriver::workoutInfo_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  xpc_object_t value;
  unsigned int v7;
  xpc_object_t v8;
  int v9;
  xpc_object_t v10;
  int v11;
  xpc_object_t v12;
  int v13;
  NSObject *v14;
  __int128 v15;
  _DWORD *v16;
  void *v17;
  _DWORD *v18;
  void *v19;
  _DWORD *v20;
  void *v21;
  _DWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_weak_owners;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  std::__shared_weak_count_vtbl *v34;
  NSObject *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  const void *v38;
  unint64_t v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _OWORD v52[2];
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, const unsigned __int8 *);
  void *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  const void *aBlock[5];
  __int128 object;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void *v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  value = xpc_dictionary_get_value(*a2, "kKeyWorkoutType");
  *(_QWORD *)&object = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&object = xpc_null_create();
  v7 = xpc::dyn_cast_or_default();
  xpc_release((xpc_object_t)object);
  v8 = xpc_dictionary_get_value(*a2, "kKeyWorkoutState");
  *(_QWORD *)&object = v8;
  if (v8)
    xpc_retain(v8);
  else
    *(_QWORD *)&object = xpc_null_create();
  v9 = xpc::dyn_cast_or_default();
  xpc_release((xpc_object_t)object);
  v10 = xpc_dictionary_get_value(*a2, "kKeyWorkoutLocation");
  *(_QWORD *)&object = v10;
  if (v10)
    xpc_retain(v10);
  else
    *(_QWORD *)&object = xpc_null_create();
  v11 = xpc::dyn_cast_or_default();
  xpc_release((xpc_object_t)object);
  v12 = xpc_dictionary_get_value(*a2, "kKeySwimLocation");
  *(_QWORD *)&object = v12;
  if (v12)
    xpc_retain(v12);
  else
    *(_QWORD *)&object = xpc_null_create();
  v13 = xpc::dyn_cast_or_default();
  xpc_release((xpc_object_t)object);
  v14 = a1[5];
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)&object = __PAIR64__(v7, 67109888);
    WORD4(object) = 1024;
    *(_DWORD *)((char *)&object + 10) = v9;
    HIWORD(object) = 1024;
    LODWORD(v62) = v11;
    WORD2(v62) = 1024;
    *(_DWORD *)((char *)&v62 + 6) = v13;
    _os_log_impl(&dword_227A72000, v14, OS_LOG_TYPE_DEFAULT, "#I Workout info: Type=%d State=%d Loc=%d SwimLoc=%d", (uint8_t *)&object, 0x1Au);
  }
  v67 = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v65 = v15;
  v66 = v15;
  v63 = v15;
  v64 = v15;
  object = v15;
  v62 = v15;
  AriSdk::ARI_IBICpsHealthActivityReq_SDK::ARI_IBICpsHealthActivityReq_SDK((AriSdk::ARI_IBICpsHealthActivityReq_SDK *)&object);
  v16 = operator new(4uLL);
  *v16 = v7;
  v17 = (void *)*((_QWORD *)&v65 + 1);
  *((_QWORD *)&v65 + 1) = v16;
  if (v17)
    operator delete(v17);
  v18 = operator new(4uLL);
  *v18 = v9;
  v19 = (void *)v66;
  *(_QWORD *)&v66 = v18;
  if (v19)
    operator delete(v19);
  if (v11)
  {
    v20 = operator new(4uLL);
    *v20 = v11;
    v21 = (void *)*((_QWORD *)&v66 + 1);
    *((_QWORD *)&v66 + 1) = v20;
    if (v21)
      operator delete(v21);
  }
  if (v13)
  {
    v22 = operator new(4uLL);
    *v22 = v13;
    v23 = v67;
    v67 = v22;
    if (v23)
      operator delete(v23);
  }
  v24 = (std::__shared_weak_count *)a1[10];
  if (!v24 || (v25 = (std::__shared_weak_count_vtbl *)a1[9], (v26 = std::__shared_weak_count::lock(v24)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v27 = v26;
  p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
  do
    v29 = __ldxr(p_shared_weak_owners);
  while (__stxr(v29 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    v31 = __ldaxr(p_shared_owners);
  while (__stlxr(v31 - 1, p_shared_owners));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v27);
  }
  v32 = a1[23];
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  if (!*(_QWORD *)a3)
  {
    v34 = 0;
    v35 = *(NSObject **)(a3 + 8);
    if (!v35)
      goto LABEL_38;
    goto LABEL_37;
  }
  v34 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a3);
  v35 = *(NSObject **)(a3 + 8);
  if (v35)
LABEL_37:
    dispatch_retain(v35);
LABEL_38:
  v36 = (std::__shared_weak_count *)operator new(0x40uLL);
  v36->__shared_owners_ = 0;
  v37 = (unint64_t *)&v36->__shared_owners_;
  v36->__shared_weak_owners_ = 0;
  v36->__vftable = (std::__shared_weak_count_vtbl *)off_24F035D28;
  v36[1].__vftable = v25;
  v36[1].__shared_owners_ = (uint64_t)v27;
  v36[1].__shared_weak_owners_ = (uint64_t)a1;
  v36[2].__vftable = v34;
  v36[2].__shared_owners_ = (uint64_t)v35;
  v38 = (const void *)MEMORY[0x24BDAC760];
  v54 = MEMORY[0x24BDAC760];
  v55 = 1174405120;
  v56 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS4_6objectEEEEE3__0vEENS8_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v57 = &__block_descriptor_tmp_42_1;
  v58 = v36 + 1;
  v59 = v36;
  do
    v39 = __ldxr(v37);
  while (__stxr(v39 + 1, v37));
  aBlock[0] = v38;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  aBlock[3] = &unk_24F035598;
  aBlock[4] = &v54;
  v40 = _Block_copy(aBlock);
  v41 = v59;
  if (v59)
  {
    v42 = (unint64_t *)&v59->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  do
    v44 = __ldaxr(v37);
  while (__stlxr(v44 - 1, v37));
  if (v44)
  {
    if ((_QWORD)v65)
      goto LABEL_53;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    if ((_QWORD)v65)
      goto LABEL_53;
  }
  v45 = operator new(4uLL);
  *v45 = 0;
  *(_QWORD *)&v65 = v45;
LABEL_53:
  v53 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v46 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v46 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v52[0] = v46;
  v52[1] = v46;
  v47 = *(std::__shared_weak_count **)(v32 + 16);
  v54 = *(_QWORD *)(v32 + 8);
  if (!v47)
  {
    v55 = 0;
LABEL_65:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v55 = (uint64_t)std::__shared_weak_count::lock(v47);
  if (!v55)
    goto LABEL_65;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v48 = (std::__shared_weak_count *)v55;
  if (v55)
  {
    v49 = (unint64_t *)(v55 + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  aBlock[0] = v40;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v52);
  std::__shared_weak_count::__release_weak(v27);
  return MEMORY[0x22E2A3CC4](&object);
}

void sub_227AB66F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *antenna::ARICommandDriver::workoutInfo_sync(xpc::dict const&,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0::~$_0(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[4];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[3];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void antenna::ARICommandDriver::cpmsPowerLevel_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  const char *v6;
  __int128 v7;
  _DWORD *v8;
  void *v9;
  _DWORD *v10;
  void *v11;
  xpc_object_t value;
  NSObject *v13;
  xpc_object_t v14;
  void *v15;
  int v16;
  _DWORD *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  NSObject *v24;
  xpc_object_t object;
  __int128 block;
  __int128 v27;
  xpc_object_t aBlock[2];
  __int128 v29;
  void *__p[2];
  void *v31[2];
  __int128 v32;

  v6 = (const char *)*MEMORY[0x24BED39F0];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x24BED39F0]))
  {
    *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v31 = v7;
    v32 = v7;
    v29 = v7;
    *(_OWORD *)__p = v7;
    v27 = v7;
    *(_OWORD *)aBlock = v7;
    block = v7;
    AriSdk::ARI_CsiIceCltmReq_SDK::ARI_CsiIceCltmReq_SDK((AriSdk::ARI_CsiIceCltmReq_SDK *)&block);
    v8 = operator new(4uLL);
    *v8 = 0x7FFF;
    v9 = __p[0];
    __p[0] = v8;
    if (v9)
      operator delete(v9);
    v10 = operator new(4uLL);
    *v10 = 0x7FFF;
    v11 = __p[1];
    __p[1] = v10;
    if (v11)
      operator delete(v11);
    value = xpc_dictionary_get_value(*a2, v6);
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    v16 = xpc::dyn_cast_or_default();
    v17 = operator new(4uLL);
    *v17 = v16;
    v18 = v31[0];
    v31[0] = v17;
    if (v18)
      operator delete(v18);
    xpc_release(object);
    if (*(_QWORD *)a3)
    {
      v19 = _Block_copy(*(const void **)a3);
      v20 = *(NSObject **)(a3 + 8);
      v23 = v19;
      v24 = v20;
      if (!v20)
      {
LABEL_18:
        antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(a1, (uint64_t)&block, (uint64_t)&v23);
        if (v20)
          dispatch_release(v20);
        if (v19)
          _Block_release(v19);
        MEMORY[0x22E2A3160](&block);
        return;
      }
    }
    else
    {
      v19 = 0;
      v20 = *(NSObject **)(a3 + 8);
      v23 = 0;
      v24 = v20;
      if (!v20)
        goto LABEL_18;
    }
    dispatch_retain(v20);
    goto LABEL_18;
  }
  v13 = a1[1].~__shared_weak_count;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    LOWORD(block) = 0;
    _os_log_error_impl(&dword_227A72000, v13, OS_LOG_TYPE_ERROR, "CPMS Power Level argument is missing!", (uint8_t *)&block, 2u);
  }
  v14 = xpc_null_create();
  if (*(_QWORD *)a3)
    v15 = _Block_copy(*(const void **)a3);
  else
    v15 = 0;
  v21 = *(NSObject **)(a3 + 8);
  *(_QWORD *)&block = MEMORY[0x24BDAC760];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v27 = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  *((_QWORD *)&v27 + 1) = &__block_descriptor_tmp_17_1;
  if (!v15)
  {
    LOBYTE(v29) = 0;
    aBlock[0] = 0;
    aBlock[1] = v14;
    if (v14)
      goto LABEL_28;
LABEL_30:
    aBlock[1] = xpc_null_create();
    goto LABEL_31;
  }
  v22 = _Block_copy(v15);
  LOBYTE(v29) = 0;
  aBlock[0] = v22;
  aBlock[1] = v14;
  if (!v14)
    goto LABEL_30;
LABEL_28:
  xpc_retain(v14);
LABEL_31:
  dispatch_async(v21, &block);
  xpc_release(aBlock[1]);
  aBlock[1] = 0;
  if (aBlock[0])
    _Block_release(aBlock[0]);
  if (v15)
    _Block_release(v15);
  xpc_release(v14);
}

void sub_227AB6B60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)va);
  MEMORY[0x22E2A3160](va1);
  _Unwind_Resume(a1);
}

void antenna::ARICommandDriver::sendSensorID(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v2 = 0;
    _os_log_error_impl(&dword_227A72000, v1, OS_LOG_TYPE_ERROR, "Not implemented for this product", v2, 2u);
  }
}

uint64_t antenna::ARICommandDriver::stewieSARWaitTime(std::__shared_weak_count_vtbl *a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  uint64_t on_zero_shared_weak;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  const void *(__cdecl *get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  unint64_t v20;
  void *v21;
  NSObject *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *aBlock;
  NSObject *object;
  _OWORD v40[4];
  void *__p;
  std::__shared_weak_count_vtbl *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  int v45;
  void *v46;
  dispatch_object_t v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  void *v56;
  __int128 *v57;

  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40[2] = v6;
  v40[3] = v6;
  v40[0] = v6;
  v40[1] = v6;
  AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK::ARI_IBIStwSarBackoffTimeReq_SDK((AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK *)v40);
  v7 = operator new(8uLL);
  *v7 = a2;
  v8 = __p;
  __p = v7;
  if (v8)
    operator delete(v8);
  v9 = *(void **)a3;
  if (*(_QWORD *)a3)
    v9 = _Block_copy(v9);
  v10 = *(NSObject **)(a3 + 8);
  aBlock = v9;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  v11 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v11
    || (on_zero_shared_weak = (uint64_t)a1[1].__on_zero_shared_weak, (v13 = std::__shared_weak_count::lock(v11)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v14 = v13;
  p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  get_deleter = a1[4].__get_deleter;
  v42 = a1;
  v43 = on_zero_shared_weak;
  v44 = v14;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  v45 = -653262848;
  if (!aBlock)
  {
    v21 = 0;
    v22 = object;
    v46 = 0;
    v47 = object;
    if (!object)
      goto LABEL_20;
    goto LABEL_19;
  }
  v21 = _Block_copy(aBlock);
  v22 = object;
  v46 = v21;
  v47 = object;
  if (object)
LABEL_19:
    dispatch_retain(v22);
LABEL_20:
  v23 = (std::__shared_weak_count *)operator new(0x48uLL);
  v23->__shared_owners_ = 0;
  v24 = (unint64_t *)&v23->__shared_owners_;
  v23->__shared_weak_owners_ = 0;
  v23[1].__vftable = a1;
  v23->__vftable = (std::__shared_weak_count_vtbl *)off_24F035DA8;
  v23[1].__shared_owners_ = on_zero_shared_weak;
  v23[1].__shared_weak_owners_ = (uint64_t)v14;
  v43 = 0;
  v44 = 0;
  LODWORD(v23[2].__vftable) = -653262848;
  v23[2].__shared_owners_ = (uint64_t)v21;
  v23[2].__shared_weak_owners_ = (uint64_t)v22;
  v46 = 0;
  v47 = 0;
  v25 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v49 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v49 + 1) = 1174405120;
  *(_QWORD *)&v50 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk33ARI_IBIStwSarBackoffTimeRspCb_SDKENS5_31ARI_IBIStwSarBackoffTimeReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v50 + 1) = &__block_descriptor_tmp_44_1;
  v51 = (unint64_t)&v23[1];
  v52 = v23;
  do
    v26 = __ldxr(v24);
  while (__stxr(v26 + 1, v24));
  v53 = v25;
  v54 = 0x40000000;
  v55 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  v56 = &unk_24F035598;
  v57 = &v49;
  v27 = _Block_copy(&v53);
  v28 = v52;
  if (v52)
  {
    v29 = (unint64_t *)&v52->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  do
    v31 = __ldaxr(v24);
  while (__stlxr(v31 - 1, v24));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v49 = v32;
  v50 = v32;
  v51 = 0xAAAAAAAAAAAAAAAALL;
  v33 = (std::__shared_weak_count *)*((_QWORD *)get_deleter + 2);
  v53 = *((_QWORD *)get_deleter + 1);
  if (!v33)
  {
    v54 = 0;
LABEL_54:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v54 = (uint64_t)std::__shared_weak_count::lock(v33);
  if (!v54)
    goto LABEL_54;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v34 = (std::__shared_weak_count *)v54;
  if (v54)
  {
    v35 = (unint64_t *)(v54 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v48 = v27;
  ice::SendMsgBaseProxy::callback();
  if (v48)
    _Block_release(v48);
  MEMORY[0x22E2A2FF8](&v49);
  if (v47)
    dispatch_release(v47);
  if (v46)
    _Block_release(v46);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  std::__shared_weak_count::__release_weak(v14);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  return MEMORY[0x22E2A3D00](v40);
}

void sub_227AB6FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,char a27)
{
  std::__shared_weak_count *v27;

  if (aBlock)
    _Block_release(aBlock);
  MEMORY[0x22E2A2FF8](&a27);
  antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(&a20);
  std::__shared_weak_count::__release_weak(v27);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a9);
  MEMORY[0x22E2A3D00](&a11);
  _Unwind_Resume(a1);
}

void sub_227AB7064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a9);
  MEMORY[0x22E2A3D00](&a11);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(antenna::CommandDriver *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *Name;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  Name = (const char *)antenna::CommandDriver::getName(a1);
  result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, Name, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_24F035230;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_24F035230;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_227AB72A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_227AB72C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<antenna::ARICommandDriver>::shared_ptr[abi:ne180100]<antenna::ARICommandDriver,std::shared_ptr<antenna::ARICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::ARICommandDriver>(antenna::ARICommandDriver*)::{lambda(antenna::ARICommandDriver*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_24F035270;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_227AB73E0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<antenna::ARICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::ARICommandDriver>(antenna::ARICommandDriver*)::{lambda(antenna::ARICommandDriver*)#1}::operator() const(antenna::ARICommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_227AB7400(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<antenna::ARICommandDriver *,std::shared_ptr<antenna::ARICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::ARICommandDriver>(antenna::ARICommandDriver*)::{lambda(antenna::ARICommandDriver *)#1},std::allocator<antenna::ARICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<antenna::ARICommandDriver *,std::shared_ptr<antenna::ARICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::ARICommandDriver>(antenna::ARICommandDriver*)::{lambda(antenna::ARICommandDriver *)#1},std::allocator<antenna::ARICommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<antenna::ARICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::ARICommandDriver>(antenna::ARICommandDriver*)::{lambda(antenna::ARICommandDriver*)#1}::operator() const(antenna::ARICommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<antenna::ARICommandDriver *,std::shared_ptr<antenna::ARICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::ARICommandDriver>(antenna::ARICommandDriver*)::{lambda(antenna::ARICommandDriver *)#1},std::allocator<antenna::ARICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEEN"
                     "St3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15make_shared_ptrINS1_16ARIComman"
                                "dDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<antenna::ARICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::ARICommandDriver>(antenna::ARICommandDriver*)::{lambda(antenna::ARICommandDriver*)#1}::operator() const(antenna::ARICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ___ZN3ice6detail17wrapEventCallbackIZZN7antenna16ARICommandDriver4initEvEUb_E3__0vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(NSObject **)(*(_QWORD *)v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v3 = 0;
      _os_log_debug_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEBUG, "#D ICE Client has been started!", v3, 2u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c71_ZTSNSt3__110shared_ptrIZZN7antenna16ARICommandDriver4initEvEUb_E3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c71_ZTSNSt3__110shared_ptrIZZN7antenna16ARICommandDriver4initEvEUb_E3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7antenna16ARICommandDriver4initEvEUb_E3__0NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0352F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7antenna16ARICommandDriver4initEvEUb_E3__0NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0352F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_2(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

uint64_t __copy_helper_block_e8_32c71_ZTSNSt3__110shared_ptrIZZN7antenna16ARICommandDriver4initEvEUb_E3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c71_ZTSNSt3__110shared_ptrIZZN7antenna16ARICommandDriver4initEvEUb_E3__1EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7antenna16ARICommandDriver4initEvEUb_E3__1NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F035398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7antenna16ARICommandDriver4initEvEUb_E3__1NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F035398;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void ___ZN3ice6detail17wrapEventCallbackIZZN7antenna16ARICommandDriver4initEvEUb_E3__2vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(NSObject **)(*(_QWORD *)v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v3 = 0;
      _os_log_debug_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEBUG, "#D ICE Client is entering low power!", v3, 2u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c71_ZTSNSt3__110shared_ptrIZZN7antenna16ARICommandDriver4initEvEUb_E3__2EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c71_ZTSNSt3__110shared_ptrIZZN7antenna16ARICommandDriver4initEvEUb_E3__2EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7antenna16ARICommandDriver4initEvEUb_E3__2NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F035418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7antenna16ARICommandDriver4initEvEUb_E3__2NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F035418;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void ___ZN3ice6detail17wrapEventCallbackIZZN7antenna16ARICommandDriver4initEvEUb_E3__3vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(NSObject **)(*(_QWORD *)v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v3 = 0;
      _os_log_debug_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEBUG, "#D ICE Client is exiting low power!", v3, 2u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c71_ZTSNSt3__110shared_ptrIZZN7antenna16ARICommandDriver4initEvEUb_E3__3EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c71_ZTSNSt3__110shared_ptrIZZN7antenna16ARICommandDriver4initEvEUb_E3__3EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7antenna16ARICommandDriver4initEvEUb_E3__3NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F035498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7antenna16ARICommandDriver4initEvEUb_E3__3NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F035498;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIKN7antenna13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIKN7antenna13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<antenna::ARICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0>(antenna::ARICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::ARICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0,dispatch_queue_s::default_delete<antenna::ARICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count_vtbl *v3;
  xpc_object_t value;
  size_t v5;
  const void *v6;
  const void *v7;
  const void **v8;
  const void *v9;
  size_t v10;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  size_t v16;
  const void *v17;
  void *v18;
  NSObject *v19;
  const void *v20;
  const void *v21;
  NSObject *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  size_t v27;
  const void *v28;
  const void *v29;
  NSObject *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  size_t v35;
  const void *v36;
  const void *v37;
  NSObject *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  size_t v43;
  const void *v44;
  const void *v45;
  size_t v46;
  const void *v47;
  const void **v48;
  const void *v49;
  size_t v50;
  const void *v51;
  size_t v52;
  const void *v53;
  const void **v54;
  const void *v55;
  NSObject *v56;
  size_t v57;
  const void *v58;
  size_t v59;
  const void *v60;
  const void **v61;
  const void *v62;
  NSObject *v63;
  size_t v64;
  const void *v65;
  size_t v66;
  const void *v67;
  const void **v68;
  const void *v69;
  NSObject *v70;
  size_t v71;
  const void *v72;
  size_t v73;
  const void *v74;
  const void **v75;
  const void *v76;
  NSObject *v77;
  size_t v78;
  const void *v79;
  size_t v80;
  const void *v81;
  const void **v82;
  const void *v83;
  size_t v84;
  const void *v85;
  size_t v86;
  const void *v87;
  const void **v88;
  const void *v89;
  size_t v90;
  const void *v91;
  size_t v92;
  const void *v93;
  const void **v94;
  const void *v95;
  size_t v96;
  const void *v97;
  size_t v98;
  const void *v99;
  const void **v100;
  const void *v101;
  size_t v102;
  const void *v103;
  size_t v104;
  const void *v105;
  const void **v106;
  const void *v107;
  size_t v108;
  const void *v109;
  size_t v110;
  const void *v111;
  const void **v112;
  size_t v113;
  const void *v114;
  NSObject *v115;
  const void *v116;
  std::__shared_weak_count *v117;
  unint64_t *p_shared_owners;
  unint64_t v119;
  xpc_object_t object;
  NSObject *v121;
  const void *__s1[3];

  v2 = *a1;
  v3 = *(std::__shared_weak_count_vtbl **)(*a1 + 8);
  memset(__s1, 170, sizeof(__s1));
  value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x24BED3950]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default();
  xpc_release(object);
  v5 = strlen((const char *)*MEMORY[0x24BED3A40]);
  v6 = (const void *)v5;
  v7 = (const void *)HIBYTE(__s1[2]);
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v5 != -1)
    {
      v8 = __s1;
      v9 = (const void *)HIBYTE(__s1[2]);
      goto LABEL_9;
    }
LABEL_311:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v5 == -1)
    goto LABEL_311;
  v8 = (const void **)__s1[0];
  v9 = __s1[1];
LABEL_9:
  if (v9 >= v6)
    v10 = (size_t)v6;
  else
    v10 = (size_t)v9;
  if (!memcmp(v8, (const void *)*MEMORY[0x24BED3A40], v10) && v9 == v6)
  {
    v17 = *(const void **)(v2 + 16);
    if (v17)
    {
      v18 = _Block_copy(v17);
      v19 = *(NSObject **)(v2 + 24);
      object = v18;
      v121 = v19;
      if (!v19)
        goto LABEL_26;
    }
    else
    {
      v18 = 0;
      v19 = *(NSObject **)(v2 + 24);
      object = 0;
      v121 = v19;
      if (!v19)
      {
LABEL_26:
        antenna::ARICommandDriver::txPowerCappingEnable_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
        if (v19)
          dispatch_release(v19);
        if (v18)
          goto LABEL_298;
        goto LABEL_299;
      }
    }
    dispatch_retain(v19);
    goto LABEL_26;
  }
  v12 = (const void *)*MEMORY[0x24BED3AB8];
  v13 = (const void *)strlen((const char *)*MEMORY[0x24BED3AB8]);
  v14 = v13;
  if ((v7 & 0x80) == 0)
  {
    if (v13 != (const void *)-1)
    {
      v15 = v7;
      if (v7 >= v13)
        v16 = (size_t)v13;
      else
        v16 = (size_t)v7;
      if (memcmp(__s1, v12, v16))
        goto LABEL_43;
LABEL_35:
      if (v15 != v14)
        goto LABEL_43;
      v21 = *(const void **)(v2 + 16);
      if (v21)
      {
        v18 = _Block_copy(v21);
        v22 = *(NSObject **)(v2 + 24);
        object = v18;
        v121 = v22;
        if (!v22)
          goto LABEL_39;
      }
      else
      {
        v18 = 0;
        v22 = *(NSObject **)(v2 + 24);
        object = 0;
        v121 = v22;
        if (!v22)
        {
LABEL_39:
          antenna::ARICommandDriver::transmitIndicationRegister_sync(v3, (uint64_t)&object);
          if (v22)
            dispatch_release(v22);
          if (v18)
            goto LABEL_298;
          goto LABEL_299;
        }
      }
      dispatch_retain(v22);
      goto LABEL_39;
    }
LABEL_312:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v13 == (const void *)-1)
    goto LABEL_312;
  v15 = __s1[1];
  if (__s1[1] >= v13)
    v20 = v13;
  else
    v20 = __s1[1];
  if (!memcmp(__s1[0], v12, (size_t)v20))
    goto LABEL_35;
LABEL_43:
  v23 = (const void *)*MEMORY[0x24BED3A88];
  v24 = (const void *)strlen((const char *)*MEMORY[0x24BED3A88]);
  v25 = v24;
  if ((v7 & 0x80) == 0)
  {
    if (v24 != (const void *)-1)
    {
      v26 = v7;
      if (v7 >= v24)
        v27 = (size_t)v24;
      else
        v27 = (size_t)v7;
      if (memcmp(__s1, v23, v27))
        goto LABEL_65;
LABEL_57:
      if (v26 != v25)
        goto LABEL_65;
      v29 = *(const void **)(v2 + 16);
      if (v29)
      {
        v18 = _Block_copy(v29);
        v30 = *(NSObject **)(v2 + 24);
        object = v18;
        v121 = v30;
        if (!v30)
          goto LABEL_61;
      }
      else
      {
        v18 = 0;
        v30 = *(NSObject **)(v2 + 24);
        object = 0;
        v121 = v30;
        if (!v30)
        {
LABEL_61:
          antenna::ARICommandDriver::transmitIndicationEnable_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
          if (v30)
            dispatch_release(v30);
          if (v18)
            goto LABEL_298;
          goto LABEL_299;
        }
      }
      dispatch_retain(v30);
      goto LABEL_61;
    }
LABEL_313:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 == (const void *)-1)
    goto LABEL_313;
  v26 = __s1[1];
  if (__s1[1] >= v24)
    v28 = v24;
  else
    v28 = __s1[1];
  if (!memcmp(__s1[0], v23, (size_t)v28))
    goto LABEL_57;
LABEL_65:
  v31 = (const void *)*MEMORY[0x24BED39F8];
  v32 = (const void *)strlen((const char *)*MEMORY[0x24BED39F8]);
  v33 = v32;
  if ((v7 & 0x80) == 0)
  {
    if (v32 != (const void *)-1)
    {
      v34 = v7;
      if (v7 >= v32)
        v35 = (size_t)v32;
      else
        v35 = (size_t)v7;
      if (memcmp(__s1, v31, v35))
        goto LABEL_87;
LABEL_79:
      if (v34 != v33)
        goto LABEL_87;
      v37 = *(const void **)(v2 + 16);
      if (v37)
      {
        v18 = _Block_copy(v37);
        v38 = *(NSObject **)(v2 + 24);
        object = v18;
        v121 = v38;
        if (!v38)
          goto LABEL_83;
      }
      else
      {
        v18 = 0;
        v38 = *(NSObject **)(v2 + 24);
        object = 0;
        v121 = v38;
        if (!v38)
        {
LABEL_83:
          antenna::ARICommandDriver::txPowerCapping_sync((uint64_t)v3, (xpc_object_t *)v2, (uint64_t)&object);
          if (v38)
            dispatch_release(v38);
          if (v18)
            goto LABEL_298;
          goto LABEL_299;
        }
      }
      dispatch_retain(v38);
      goto LABEL_83;
    }
LABEL_314:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v32 == (const void *)-1)
    goto LABEL_314;
  v34 = __s1[1];
  if (__s1[1] >= v32)
    v36 = v32;
  else
    v36 = __s1[1];
  if (!memcmp(__s1[0], v31, (size_t)v36))
    goto LABEL_79;
LABEL_87:
  v39 = (const void *)*MEMORY[0x24BED3A48];
  v40 = (const void *)strlen((const char *)*MEMORY[0x24BED3A48]);
  v41 = v40;
  if ((v7 & 0x80) != 0)
  {
    if (v40 != (const void *)-1)
    {
      v42 = __s1[1];
      if (__s1[1] >= v40)
        v44 = v40;
      else
        v44 = __s1[1];
      if (memcmp(__s1[0], v39, (size_t)v44))
        goto LABEL_104;
      goto LABEL_101;
    }
LABEL_315:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v40 == (const void *)-1)
    goto LABEL_315;
  v42 = v7;
  if (v7 >= v40)
    v43 = (size_t)v40;
  else
    v43 = (size_t)v7;
  if (memcmp(__s1, v39, v43))
    goto LABEL_104;
LABEL_101:
  if (v42 == v41)
  {
    v45 = *(const void **)(v2 + 16);
    if (v45)
      v18 = _Block_copy(v45);
    else
      v18 = 0;
    v56 = *(NSObject **)(v2 + 24);
    object = v18;
    v121 = v56;
    if (v56)
      dispatch_retain(v56);
    antenna::ARICommandDriver::txPowerConfiguration_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
    if (v56)
      dispatch_release(v56);
    if (v18)
      goto LABEL_298;
    goto LABEL_299;
  }
LABEL_104:
  v46 = strlen((const char *)*MEMORY[0x24BED3A80]);
  v47 = (const void *)v46;
  if ((v7 & 0x80) == 0)
  {
    if (v46 != -1)
    {
      v48 = __s1;
      v49 = v7;
      goto LABEL_111;
    }
LABEL_316:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v46 == -1)
    goto LABEL_316;
  v48 = (const void **)__s1[0];
  v49 = __s1[1];
LABEL_111:
  if (v49 >= v47)
    v50 = (size_t)v47;
  else
    v50 = (size_t)v49;
  if (memcmp(v48, (const void *)*MEMORY[0x24BED3A80], v50) || v49 != v47)
  {
    v52 = strlen((const char *)*MEMORY[0x24BED3A90]);
    v53 = (const void *)v52;
    if ((v7 & 0x80) != 0)
    {
      if (v52 != -1)
      {
        v54 = (const void **)__s1[0];
        v55 = __s1[1];
LABEL_130:
        if (v55 >= v53)
          v57 = (size_t)v53;
        else
          v57 = (size_t)v55;
        if (!memcmp(v54, (const void *)*MEMORY[0x24BED3A90], v57) && v55 == v53)
        {
          v58 = *(const void **)(v2 + 16);
          if (v58)
            v18 = _Block_copy(v58);
          else
            v18 = 0;
          v70 = *(NSObject **)(v2 + 24);
          object = v18;
          v121 = v70;
          if (v70)
            dispatch_retain(v70);
          antenna::ARICommandDriver::e75AccessoryStatusARTD_sync((antenna::ARICommandDriver *)v3, (xpc_object_t *)v2, (uint64_t)&object);
          if (v70)
            dispatch_release(v70);
          if (v18)
            goto LABEL_298;
          goto LABEL_299;
        }
        v59 = strlen((const char *)*MEMORY[0x24BED39E0]);
        v60 = (const void *)v59;
        if ((v7 & 0x80) != 0)
        {
          if (v59 != -1)
          {
            v61 = (const void **)__s1[0];
            v62 = __s1[1];
LABEL_149:
            if (v62 >= v60)
              v64 = (size_t)v60;
            else
              v64 = (size_t)v62;
            if (!memcmp(v61, (const void *)*MEMORY[0x24BED39E0], v64) && v62 == v60)
            {
              v65 = *(const void **)(v2 + 16);
              if (v65)
                v18 = _Block_copy(v65);
              else
                v18 = 0;
              v77 = *(NSObject **)(v2 + 24);
              object = v18;
              v121 = v77;
              if (v77)
                dispatch_retain(v77);
              antenna::ARICommandDriver::videoAccessoryStatus_sync((int8x8_t *)v3, (xpc_object_t *)v2, (uint64_t)&object);
              goto LABEL_295;
            }
            v66 = strlen((const char *)*MEMORY[0x24BED3A68]);
            v67 = (const void *)v66;
            if ((v7 & 0x80) != 0)
            {
              if (v66 != -1)
              {
                v68 = (const void **)__s1[0];
                v69 = __s1[1];
LABEL_168:
                if (v69 >= v67)
                  v71 = (size_t)v67;
                else
                  v71 = (size_t)v69;
                if (!memcmp(v68, (const void *)*MEMORY[0x24BED3A68], v71) && v69 == v67)
                {
                  v72 = *(const void **)(v2 + 16);
                  if (v72)
                    v18 = _Block_copy(v72);
                  else
                    v18 = 0;
                  v77 = *(NSObject **)(v2 + 24);
                  object = v18;
                  v121 = v77;
                  if (v77)
                    dispatch_retain(v77);
                  antenna::ARICommandDriver::wiredPortNotification_sync((int8x8_t *)v3, (xpc_object_t *)v2, (uint64_t)&object);
                  goto LABEL_295;
                }
                v73 = strlen((const char *)*MEMORY[0x24BED39C8]);
                v74 = (const void *)v73;
                if ((v7 & 0x80) != 0)
                {
                  if (v73 != -1)
                  {
                    v75 = (const void **)__s1[0];
                    v76 = __s1[1];
LABEL_184:
                    if (v76 >= v74)
                      v78 = (size_t)v74;
                    else
                      v78 = (size_t)v76;
                    if (!memcmp(v75, (const void *)*MEMORY[0x24BED39C8], v78) && v76 == v74)
                    {
                      v79 = *(const void **)(v2 + 16);
                      if (v79)
                        v18 = _Block_copy(v79);
                      else
                        v18 = 0;
                      v77 = *(NSObject **)(v2 + 24);
                      object = v18;
                      v121 = v77;
                      if (v77)
                        dispatch_retain(v77);
                      antenna::ARICommandDriver::speakerState_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                      goto LABEL_295;
                    }
                    v80 = strlen((const char *)*MEMORY[0x24BED3A38]);
                    v81 = (const void *)v80;
                    if ((v7 & 0x80) != 0)
                    {
                      if (v80 != -1)
                      {
                        v82 = (const void **)__s1[0];
                        v83 = __s1[1];
LABEL_200:
                        if (v83 >= v81)
                          v84 = (size_t)v81;
                        else
                          v84 = (size_t)v83;
                        if (!memcmp(v82, (const void *)*MEMORY[0x24BED3A38], v84) && v83 == v81)
                        {
                          v85 = *(const void **)(v2 + 16);
                          if (v85)
                            v18 = _Block_copy(v85);
                          else
                            v18 = 0;
                          v77 = *(NSObject **)(v2 + 24);
                          object = v18;
                          v121 = v77;
                          if (v77)
                            dispatch_retain(v77);
                          antenna::ARICommandDriver::handDetectionState_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                          goto LABEL_295;
                        }
                        v86 = strlen((const char *)*MEMORY[0x24BED3A20]);
                        v87 = (const void *)v86;
                        if ((v7 & 0x80) != 0)
                        {
                          if (v86 != -1)
                          {
                            v88 = (const void **)__s1[0];
                            v89 = __s1[1];
LABEL_216:
                            if (v89 >= v87)
                              v90 = (size_t)v87;
                            else
                              v90 = (size_t)v89;
                            if (!memcmp(v88, (const void *)*MEMORY[0x24BED3A20], v90) && v89 == v87)
                            {
                              v91 = *(const void **)(v2 + 16);
                              if (v91)
                                v18 = _Block_copy(v91);
                              else
                                v18 = 0;
                              v77 = *(NSObject **)(v2 + 24);
                              object = v18;
                              v121 = v77;
                              if (v77)
                                dispatch_retain(v77);
                              antenna::ARICommandDriver::powerSourceState_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                              goto LABEL_295;
                            }
                            v92 = strlen((const char *)*MEMORY[0x24BED39B8]);
                            v93 = (const void *)v92;
                            if ((v7 & 0x80) != 0)
                            {
                              if (v92 != -1)
                              {
                                v94 = (const void **)__s1[0];
                                v95 = __s1[1];
LABEL_232:
                                if (v95 >= v93)
                                  v96 = (size_t)v93;
                                else
                                  v96 = (size_t)v95;
                                if (!memcmp(v94, (const void *)*MEMORY[0x24BED39B8], v96) && v95 == v93)
                                {
                                  v97 = *(const void **)(v2 + 16);
                                  if (v97)
                                    v18 = _Block_copy(v97);
                                  else
                                    v18 = 0;
                                  v77 = *(NSObject **)(v2 + 24);
                                  object = v18;
                                  v121 = v77;
                                  if (v77)
                                    dispatch_retain(v77);
                                  antenna::ARICommandDriver::ppmEnable_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                                  goto LABEL_295;
                                }
                                v98 = strlen((const char *)*MEMORY[0x24BED3A60]);
                                v99 = (const void *)v98;
                                if ((v7 & 0x80) != 0)
                                {
                                  if (v98 != -1)
                                  {
                                    v100 = (const void **)__s1[0];
                                    v101 = __s1[1];
LABEL_248:
                                    if (v101 >= v99)
                                      v102 = (size_t)v99;
                                    else
                                      v102 = (size_t)v101;
                                    if (!memcmp(v100, (const void *)*MEMORY[0x24BED3A60], v102) && v101 == v99)
                                    {
                                      v103 = *(const void **)(v2 + 16);
                                      if (v103)
                                        v18 = _Block_copy(v103);
                                      else
                                        v18 = 0;
                                      v77 = *(NSObject **)(v2 + 24);
                                      object = v18;
                                      v121 = v77;
                                      if (v77)
                                        dispatch_retain(v77);
                                      antenna::ARICommandDriver::ppmRegisterIndication_sync(v3, (uint64_t)&object);
                                      goto LABEL_295;
                                    }
                                    v104 = strlen((const char *)*MEMORY[0x24BED39C0]);
                                    v105 = (const void *)v104;
                                    if ((v7 & 0x80) != 0)
                                    {
                                      if (v104 != -1)
                                      {
                                        v106 = (const void **)__s1[0];
                                        v107 = __s1[1];
LABEL_264:
                                        if (v107 >= v105)
                                          v108 = (size_t)v105;
                                        else
                                          v108 = (size_t)v107;
                                        if (!memcmp(v106, (const void *)*MEMORY[0x24BED39C0], v108) && v107 == v105)
                                        {
                                          v109 = *(const void **)(v2 + 16);
                                          if (v109)
                                            v18 = _Block_copy(v109);
                                          else
                                            v18 = 0;
                                          v77 = *(NSObject **)(v2 + 24);
                                          object = v18;
                                          v121 = v77;
                                          if (v77)
                                            dispatch_retain(v77);
                                          antenna::ARICommandDriver::workoutInfo_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
LABEL_295:
                                          if (v77)
                                          {
                                            dispatch_release(v77);
                                            v18 = object;
                                          }
                                          if (v18)
                                            goto LABEL_298;
                                          goto LABEL_299;
                                        }
                                        v110 = strlen((const char *)*MEMORY[0x24BED3A58]);
                                        v111 = (const void *)v110;
                                        if ((v7 & 0x80) != 0)
                                        {
                                          if (v110 != -1)
                                          {
                                            v112 = (const void **)__s1[0];
                                            v7 = __s1[1];
                                            goto LABEL_280;
                                          }
                                        }
                                        else if (v110 != -1)
                                        {
                                          v112 = __s1;
LABEL_280:
                                          if (v7 >= v111)
                                            v113 = (size_t)v111;
                                          else
                                            v113 = (size_t)v7;
                                          if (memcmp(v112, (const void *)*MEMORY[0x24BED3A58], v113) || v7 != v111)
                                            goto LABEL_299;
                                          v114 = *(const void **)(v2 + 16);
                                          if (v114)
                                            v18 = _Block_copy(v114);
                                          else
                                            v18 = 0;
                                          v77 = *(NSObject **)(v2 + 24);
                                          object = v18;
                                          v121 = v77;
                                          if (v77)
                                            dispatch_retain(v77);
                                          antenna::ARICommandDriver::cpmsPowerLevel_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                                          goto LABEL_295;
                                        }
                                        std::string::__throw_out_of_range[abi:ne180100]();
                                      }
                                    }
                                    else if (v104 != -1)
                                    {
                                      v106 = __s1;
                                      v107 = v7;
                                      goto LABEL_264;
                                    }
                                    std::string::__throw_out_of_range[abi:ne180100]();
                                  }
                                }
                                else if (v98 != -1)
                                {
                                  v100 = __s1;
                                  v101 = v7;
                                  goto LABEL_248;
                                }
                                std::string::__throw_out_of_range[abi:ne180100]();
                              }
                            }
                            else if (v92 != -1)
                            {
                              v94 = __s1;
                              v95 = v7;
                              goto LABEL_232;
                            }
                            std::string::__throw_out_of_range[abi:ne180100]();
                          }
                        }
                        else if (v86 != -1)
                        {
                          v88 = __s1;
                          v89 = v7;
                          goto LABEL_216;
                        }
                        std::string::__throw_out_of_range[abi:ne180100]();
                      }
                    }
                    else if (v80 != -1)
                    {
                      v82 = __s1;
                      v83 = v7;
                      goto LABEL_200;
                    }
                    std::string::__throw_out_of_range[abi:ne180100]();
                  }
                }
                else if (v73 != -1)
                {
                  v75 = __s1;
                  v76 = v7;
                  goto LABEL_184;
                }
                std::string::__throw_out_of_range[abi:ne180100]();
              }
            }
            else if (v66 != -1)
            {
              v68 = __s1;
              v69 = v7;
              goto LABEL_168;
            }
            std::string::__throw_out_of_range[abi:ne180100]();
          }
        }
        else if (v59 != -1)
        {
          v61 = __s1;
          v62 = v7;
          goto LABEL_149;
        }
        std::string::__throw_out_of_range[abi:ne180100]();
      }
    }
    else if (v52 != -1)
    {
      v54 = __s1;
      v55 = v7;
      goto LABEL_130;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  v51 = *(const void **)(v2 + 16);
  if (v51)
    v18 = _Block_copy(v51);
  else
    v18 = 0;
  v63 = *(NSObject **)(v2 + 24);
  object = v18;
  v121 = v63;
  if (v63)
    dispatch_retain(v63);
  antenna::ARICommandDriver::e75AccessoryStatusRF_sync((antenna::ARICommandDriver *)v3, (xpc_object_t *)v2, (uint64_t)&object);
  if (v63)
    dispatch_release(v63);
  if (v18)
LABEL_298:
    _Block_release(v18);
LABEL_299:
  if (SHIBYTE(__s1[2]) < 0)
    operator delete((void *)__s1[0]);
  v115 = *(NSObject **)(v2 + 24);
  if (v115)
    dispatch_release(v115);
  v116 = *(const void **)(v2 + 16);
  if (v116)
    _Block_release(v116);
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  v117 = (std::__shared_weak_count *)a1[2];
  if (v117)
  {
    p_shared_owners = (unint64_t *)&v117->__shared_owners_;
    do
      v119 = __ldaxr(p_shared_owners);
    while (__stlxr(v119 - 1, p_shared_owners));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  operator delete(a1);
}

void sub_227AB86A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;
  uint64_t v18;
  xpc_object_t v19;
  NSObject *v20;
  NSObject *v22;
  const void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  if (v20)
  {
    dispatch_release(v20);
    v19 = object;
  }
  if (v19)
    _Block_release(v19);
  if (a17 < 0)
    operator delete(__p);
  v22 = *(NSObject **)(v18 + 24);
  if (v22)
    dispatch_release(v22);
  v23 = *(const void **)(v18 + 16);
  if (v23)
    _Block_release(v23);
  xpc_release(*(xpc_object_t *)v18);
  operator delete((void *)v18);
  v24 = (std::__shared_weak_count *)v17[2];
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

_QWORD *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[5];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[4];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk28ARI_CsiIceSarEnableRspCb_SDKENS5_26ARI_CsiIceSarEnableReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t GMID;
  Ari *v11;
  char v12;
  NSObject *v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  _OWORD v30[4];
  unint64_t v31;
  uint8_t buf[4];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        v8 = (_QWORD *)v2[1];
        if (!v8)
          goto LABEL_25;
        v31 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v30[2] = v9;
        v30[3] = v9;
        v30[0] = v9;
        v30[1] = v9;
        AriSdk::ARI_CsiIceSarEnableRspCb_SDK::ARI_CsiIceSarEnableRspCb_SDK((AriSdk::ARI_CsiIceSarEnableRspCb_SDK *)v30, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_24:
          MEMORY[0x22E2A3790](v30);
LABEL_25:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v30);
        v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
        if ((_DWORD)v11 == 67600384 || (_DWORD)v11 != *((_DWORD *)v2 + 6))
        {
          v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v29 = Ari::MsgNameById(v11);
            *(_DWORD *)buf = 136315138;
            v33 = v29;
            _os_log_error_impl(&dword_227A72000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          v12 = 0;
        }
        else
        {
          v12 = 1;
        }
        v14 = (const void *)v2[4];
        if (v14)
        {
          v15 = _Block_copy(v14);
          v16 = v2[5];
          if (!v16)
            goto LABEL_16;
        }
        else
        {
          v15 = 0;
          v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x18uLL);
            *v21 = v15;
            v21[1] = v16;
            *((_BYTE *)v21 + 16) = v12;
            v22 = v8[11];
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            v25 = operator new(0x18uLL);
            *v25 = v21;
            v25[1] = v18;
            v25[2] = v20;
            dispatch_async_f(v22, v25, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            do
              v26 = __ldaxr(v23);
            while (__stlxr(v26 - 1, v23));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_24;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_227AB8B00(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c207_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk28ARI_CsiIceSarEnableRspCb_SDKENS4_26ARI_CsiIceSarEnableReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c207_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk28ARI_CsiIceSarEnableRspCb_SDKENS4_26ARI_CsiIceSarEnableReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F035550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F035550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = *a1;
  v3 = *(_BYTE *)(*a1 + 16);
  v4 = xpc_null_create();
  if (*(_QWORD *)v2)
    v5 = _Block_copy(*(const void **)v2);
  else
    v5 = 0;
  v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_17_1;
  if (v5)
  {
    v14 = v3;
    aBlock = _Block_copy(v5);
    object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_6;
  }
  object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
  v7 = *(NSObject **)(v2 + 8);
  if (v7)
    dispatch_release(v7);
  if (*(_QWORD *)v2)
    _Block_release(*(const void **)v2);
  operator delete((void *)v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

uint64_t ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t result, const unsigned __int8 *a2)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  unint64_t GMID;
  uint64_t v6;
  NSObject *v7;
  _OWORD v8[4];
  unint64_t v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(result + 32);
  if (v2)
  {
    v3 = *v2;
    v9 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[2] = v4;
    v8[3] = v4;
    v8[0] = v4;
    v8[1] = v4;
    AriSdk::ARI_CsiIceBBTxStateInd_SDK::ARI_CsiIceBBTxStateInd_SDK((AriSdk::ARI_CsiIceBBTxStateInd_SDK *)v8, a2);
    GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v8);
    if ((ice::isARIResponseValid() & 1) != 0)
    {
      if (!AriSdk::ARI_CsiIceBBTxStateInd_SDK::unpack((AriSdk::ARI_CsiIceBBTxStateInd_SDK *)v8)
        && (int)antenna::CommandDriver::convertModeToState() <= 1)
      {
        v6 = *(_QWORD *)(v3 + 144);
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      }
    }
    else
    {
      v7 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109376;
        v11 = (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26);
        v12 = 1024;
        v13 = -175800320;
        _os_log_error_impl(&dword_227A72000, v7, OS_LOG_TYPE_ERROR, "Got unexpected message 0x%0x, expected CsiIceBBTxStateInd (0x%0x)", buf, 0xEu);
      }
    }
    return MEMORY[0x22E2A349C](v8);
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<antenna::ARICommandDriver::transmitIndicationRegister_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0,std::allocator<antenna::ARICommandDriver::transmitIndicationRegister_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0355F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<antenna::ARICommandDriver::transmitIndicationRegister_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0,std::allocator<antenna::ARICommandDriver::transmitIndicationRegister_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0355F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__1vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t result, const unsigned __int8 *a2)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  unint64_t GMID;
  uint64_t v6;
  NSObject *v7;
  _OWORD v8[4];
  __int128 v9;
  unsigned int *v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(result + 32);
  if (v2)
  {
    v3 = *v2;
    v10 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[3] = v4;
    v9 = v4;
    v8[1] = v4;
    v8[2] = v4;
    v8[0] = v4;
    AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK::ARI_IBICallPsTransmitStateIndCb_SDK((AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK *)v8, a2);
    GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v8);
    if ((ice::isARIResponseValid() & 1) != 0)
    {
      if (!AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK::unpack((AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK *)v8))
      {
        v6 = *(_QWORD *)(v3 + 144);
        if (v6)
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 16))(v6, **((_DWORD **)&v9 + 1), *v10);
      }
    }
    else
    {
      v7 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109376;
        v12 = (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26);
        v13 = 1024;
        v14 = 227016704;
        _os_log_error_impl(&dword_227A72000, v7, OS_LOG_TYPE_ERROR, "Got unexpected message 0x%0x, expected IBICallPsTransmitStateIndCb (0x%0x)", buf, 0xEu);
      }
    }
    return MEMORY[0x22E2A40E4](v8);
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__1EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<antenna::ARICommandDriver::transmitIndicationRegister_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_1,std::allocator<antenna::ARICommandDriver::transmitIndicationRegister_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F035678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<antenna::ARICommandDriver::transmitIndicationRegister_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_1,std::allocator<antenna::ARICommandDriver::transmitIndicationRegister_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F035678;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke(uint64_t a1)
{
  int v1;
  void *v2;
  uint64_t v3;
  xpc_object_t object;

  v1 = *(unsigned __int8 *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  object = v2;
  if (v2)
    xpc_retain(v2);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, BOOL, xpc_object_t *))(v3 + 16))(v3, v1 != 0, &object);
  xpc_release(object);
}

void sub_227AB9304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c56_ZTSN8dispatch5blockIU13block_pointerFvbN3xpc6objectEEEE40c17_ZTSN3xpc6objectE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  void *v6;
  xpc_object_t result;

  v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  else
  {
    v6 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  result = xpc_null_create();
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c56_ZTSN8dispatch5blockIU13block_pointerFvbN3xpc6objectEEEE40c17_ZTSN3xpc6objectE(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
}

_QWORD *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[5];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[4];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk37ARI_CsiIceBBTxStateIndEnableRspCb_SDKENS5_35ARI_CsiIceBBTxStateIndEnableReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t GMID;
  Ari *v11;
  char v12;
  NSObject *v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  _OWORD v30[4];
  unint64_t v31;
  uint8_t buf[4];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        v8 = (_QWORD *)v2[1];
        if (!v8)
          goto LABEL_25;
        v31 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v30[2] = v9;
        v30[3] = v9;
        v30[0] = v9;
        v30[1] = v9;
        AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK::ARI_CsiIceBBTxStateIndEnableRspCb_SDK((AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK *)v30, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_24:
          MEMORY[0x22E2A41C8](v30);
LABEL_25:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v30);
        v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
        if ((_DWORD)v11 == 67600384 || (_DWORD)v11 != *((_DWORD *)v2 + 6))
        {
          v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v29 = Ari::MsgNameById(v11);
            *(_DWORD *)buf = 136315138;
            v33 = v29;
            _os_log_error_impl(&dword_227A72000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          v12 = 0;
        }
        else
        {
          v12 = 1;
        }
        v14 = (const void *)v2[4];
        if (v14)
        {
          v15 = _Block_copy(v14);
          v16 = v2[5];
          if (!v16)
            goto LABEL_16;
        }
        else
        {
          v15 = 0;
          v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x18uLL);
            *v21 = v15;
            v21[1] = v16;
            *((_BYTE *)v21 + 16) = v12;
            v22 = v8[11];
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            v25 = operator new(0x18uLL);
            *v25 = v21;
            v25[1] = v18;
            v25[2] = v20;
            dispatch_async_f(v22, v25, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            do
              v26 = __ldaxr(v23);
            while (__stlxr(v26 - 1, v23));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_24;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_227AB966C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c225_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk37ARI_CsiIceBBTxStateIndEnableRspCb_SDKENS4_35ARI_CsiIceBBTxStateIndEnableReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c225_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk37ARI_CsiIceBBTxStateIndEnableRspCb_SDKENS4_35ARI_CsiIceBBTxStateIndEnableReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F035728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F035728;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = *a1;
  v3 = *(_BYTE *)(*a1 + 16);
  v4 = xpc_null_create();
  if (*(_QWORD *)v2)
    v5 = _Block_copy(*(const void **)v2);
  else
    v5 = 0;
  v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_17_1;
  if (v5)
  {
    v14 = v3;
    aBlock = _Block_copy(v5);
    object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_6;
  }
  object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
  v7 = *(NSObject **)(v2 + 8);
  if (v7)
    dispatch_release(v7);
  if (*(_QWORD *)v2)
    _Block_release(*(const void **)v2);
  operator delete((void *)v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

_QWORD *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[5];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[4];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk35ARI_IBICallPsTransmitStateRspCb_SDKENS5_33ARI_IBICallPsTransmitStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t GMID;
  Ari *v11;
  char v12;
  NSObject *v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  _OWORD v30[5];
  uint8_t buf[4];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        v8 = (_QWORD *)v2[1];
        if (!v8)
          goto LABEL_25;
        *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v30[3] = v9;
        v30[4] = v9;
        v30[1] = v9;
        v30[2] = v9;
        v30[0] = v9;
        AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK::ARI_IBICallPsTransmitStateRspCb_SDK((AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK *)v30, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_24:
          MEMORY[0x22E2A40FC](v30);
LABEL_25:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v30);
        v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
        if ((_DWORD)v11 == 67600384 || (_DWORD)v11 != *((_DWORD *)v2 + 6))
        {
          v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v29 = Ari::MsgNameById(v11);
            *(_DWORD *)buf = 136315138;
            v32 = v29;
            _os_log_error_impl(&dword_227A72000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          v12 = 0;
        }
        else
        {
          v12 = 1;
        }
        v14 = (const void *)v2[4];
        if (v14)
        {
          v15 = _Block_copy(v14);
          v16 = v2[5];
          if (!v16)
            goto LABEL_16;
        }
        else
        {
          v15 = 0;
          v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x18uLL);
            *v21 = v15;
            v21[1] = v16;
            *((_BYTE *)v21 + 16) = v12;
            v22 = v8[11];
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            v25 = operator new(0x18uLL);
            *v25 = v21;
            v25[1] = v18;
            v25[2] = v20;
            dispatch_async_f(v22, v25, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            do
              v26 = __ldaxr(v23);
            while (__stlxr(v26 - 1, v23));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_24;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_227AB9BFC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c221_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk35ARI_IBICallPsTransmitStateRspCb_SDKENS4_33ARI_IBICallPsTransmitStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c221_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk35ARI_IBICallPsTransmitStateRspCb_SDKENS4_33ARI_IBICallPsTransmitStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0357A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0357A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = *a1;
  v3 = *(_BYTE *)(*a1 + 16);
  v4 = xpc_null_create();
  if (*(_QWORD *)v2)
    v5 = _Block_copy(*(const void **)v2);
  else
    v5 = 0;
  v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_17_1;
  if (v5)
  {
    v14 = v3;
    aBlock = _Block_copy(v5);
    object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_6;
  }
  object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
  v7 = *(NSObject **)(v2 + 8);
  if (v7)
    dispatch_release(v7);
  if (*(_QWORD *)v2)
    _Block_release(*(const void **)v2);
  operator delete((void *)v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

_QWORD *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[5];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[4];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk22ARI_CsiIceSarRspCb_SDKENS5_20ARI_CsiIceSarReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t GMID;
  Ari *v11;
  char v12;
  NSObject *v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  _OWORD v30[4];
  unint64_t v31;
  uint8_t buf[4];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        v8 = (_QWORD *)v2[1];
        if (!v8)
          goto LABEL_25;
        v31 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v30[2] = v9;
        v30[3] = v9;
        v30[0] = v9;
        v30[1] = v9;
        AriSdk::ARI_CsiIceSarRspCb_SDK::ARI_CsiIceSarRspCb_SDK((AriSdk::ARI_CsiIceSarRspCb_SDK *)v30, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_24:
          MEMORY[0x22E2A3208](v30);
LABEL_25:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v30);
        v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
        if ((_DWORD)v11 == 67600384 || (_DWORD)v11 != *((_DWORD *)v2 + 6))
        {
          v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v29 = Ari::MsgNameById(v11);
            *(_DWORD *)buf = 136315138;
            v33 = v29;
            _os_log_error_impl(&dword_227A72000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          v12 = 0;
        }
        else
        {
          v12 = 1;
        }
        v14 = (const void *)v2[4];
        if (v14)
        {
          v15 = _Block_copy(v14);
          v16 = v2[5];
          if (!v16)
            goto LABEL_16;
        }
        else
        {
          v15 = 0;
          v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x18uLL);
            *v21 = v15;
            v21[1] = v16;
            *((_BYTE *)v21 + 16) = v12;
            v22 = v8[11];
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            v25 = operator new(0x18uLL);
            *v25 = v21;
            v25[1] = v18;
            v25[2] = v20;
            dispatch_async_f(v22, v25, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            do
              v26 = __ldaxr(v23);
            while (__stlxr(v26 - 1, v23));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_24;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_227ABA190(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c195_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk22ARI_CsiIceSarRspCb_SDKENS4_20ARI_CsiIceSarReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c195_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk22ARI_CsiIceSarRspCb_SDKENS4_20ARI_CsiIceSarReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F035828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F035828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = *a1;
  v3 = *(_BYTE *)(*a1 + 16);
  v4 = xpc_null_create();
  if (*(_QWORD *)v2)
    v5 = _Block_copy(*(const void **)v2);
  else
    v5 = 0;
  v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_17_1;
  if (v5)
  {
    v14 = v3;
    aBlock = _Block_copy(v5);
    object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_6;
  }
  object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
  v7 = *(NSObject **)(v2 + 8);
  if (v7)
    dispatch_release(v7);
  if (*(_QWORD *)v2)
    _Block_release(*(const void **)v2);
  operator delete((void *)v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

_QWORD *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[5];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[4];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk23ARI_CsiIceCltmRspCb_SDKENS5_21ARI_CsiIceCltmReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t GMID;
  Ari *v11;
  char v12;
  NSObject *v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  _OWORD v30[4];
  unint64_t v31;
  uint8_t buf[4];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        v8 = (_QWORD *)v2[1];
        if (!v8)
          goto LABEL_25;
        v31 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v30[2] = v9;
        v30[3] = v9;
        v30[0] = v9;
        v30[1] = v9;
        AriSdk::ARI_CsiIceCltmRspCb_SDK::ARI_CsiIceCltmRspCb_SDK((AriSdk::ARI_CsiIceCltmRspCb_SDK *)v30, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_24:
          MEMORY[0x22E2A325C](v30);
LABEL_25:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v30);
        v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
        if ((_DWORD)v11 == 67600384 || (_DWORD)v11 != *((_DWORD *)v2 + 6))
        {
          v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v29 = Ari::MsgNameById(v11);
            *(_DWORD *)buf = 136315138;
            v33 = v29;
            _os_log_error_impl(&dword_227A72000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          v12 = 0;
        }
        else
        {
          v12 = 1;
        }
        v14 = (const void *)v2[4];
        if (v14)
        {
          v15 = _Block_copy(v14);
          v16 = v2[5];
          if (!v16)
            goto LABEL_16;
        }
        else
        {
          v15 = 0;
          v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x18uLL);
            *v21 = v15;
            v21[1] = v16;
            *((_BYTE *)v21 + 16) = v12;
            v22 = v8[11];
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            v25 = operator new(0x18uLL);
            *v25 = v21;
            v25[1] = v18;
            v25[2] = v20;
            dispatch_async_f(v22, v25, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            do
              v26 = __ldaxr(v23);
            while (__stlxr(v26 - 1, v23));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_24;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_227ABA724(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c197_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk23ARI_CsiIceCltmRspCb_SDKENS4_21ARI_CsiIceCltmReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c197_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk23ARI_CsiIceCltmRspCb_SDKENS4_21ARI_CsiIceCltmReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0358A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0358A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = *a1;
  v3 = *(_BYTE *)(*a1 + 16);
  v4 = xpc_null_create();
  if (*(_QWORD *)v2)
    v5 = _Block_copy(*(const void **)v2);
  else
    v5 = 0;
  v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_17_1;
  if (v5)
  {
    v14 = v3;
    aBlock = _Block_copy(v5);
    object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_6;
  }
  object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
  v7 = *(NSObject **)(v2 + 8);
  if (v7)
    dispatch_release(v7);
  if (*(_QWORD *)v2)
    _Block_release(*(const void **)v2);
  operator delete((void *)v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

_QWORD *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[5];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[4];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk30ARI_CsiIceSarWaitTimeRspCb_SDKENS5_28ARI_CsiIceSarWaitTimeReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t GMID;
  Ari *v11;
  char v12;
  NSObject *v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  _OWORD v30[4];
  unint64_t v31;
  uint8_t buf[4];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        v8 = (_QWORD *)v2[1];
        if (!v8)
          goto LABEL_25;
        v31 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v30[2] = v9;
        v30[3] = v9;
        v30[0] = v9;
        v30[1] = v9;
        AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK::ARI_CsiIceSarWaitTimeRspCb_SDK((AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK *)v30, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_24:
          MEMORY[0x22E2A3A6C](v30);
LABEL_25:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v30);
        v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
        if ((_DWORD)v11 == 67600384 || (_DWORD)v11 != *((_DWORD *)v2 + 6))
        {
          v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v29 = Ari::MsgNameById(v11);
            *(_DWORD *)buf = 136315138;
            v33 = v29;
            _os_log_error_impl(&dword_227A72000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          v12 = 0;
        }
        else
        {
          v12 = 1;
        }
        v14 = (const void *)v2[4];
        if (v14)
        {
          v15 = _Block_copy(v14);
          v16 = v2[5];
          if (!v16)
            goto LABEL_16;
        }
        else
        {
          v15 = 0;
          v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x18uLL);
            *v21 = v15;
            v21[1] = v16;
            *((_BYTE *)v21 + 16) = v12;
            v22 = v8[11];
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            v25 = operator new(0x18uLL);
            *v25 = v21;
            v25[1] = v18;
            v25[2] = v20;
            dispatch_async_f(v22, v25, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            do
              v26 = __ldaxr(v23);
            while (__stlxr(v26 - 1, v23));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_24;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_227ABACB8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c211_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk30ARI_CsiIceSarWaitTimeRspCb_SDKENS4_28ARI_CsiIceSarWaitTimeReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c211_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk30ARI_CsiIceSarWaitTimeRspCb_SDKENS4_28ARI_CsiIceSarWaitTimeReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F035928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F035928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = *a1;
  v3 = *(_BYTE *)(*a1 + 16);
  v4 = xpc_null_create();
  if (*(_QWORD *)v2)
    v5 = _Block_copy(*(const void **)v2);
  else
    v5 = 0;
  v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_17_1;
  if (v5)
  {
    v14 = v3;
    aBlock = _Block_copy(v5);
    object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_6;
  }
  object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
  v7 = *(NSObject **)(v2 + 8);
  if (v7)
    dispatch_release(v7);
  if (*(_QWORD *)v2)
    _Block_release(*(const void **)v2);
  operator delete((void *)v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

_QWORD *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[5];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[4];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk33ARI_CsiIceAccessoryStateRspCb_SDKENS5_31ARI_CsiIceAccessoryStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t GMID;
  Ari *v11;
  char v12;
  NSObject *v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  _OWORD v30[4];
  unint64_t v31;
  uint8_t buf[4];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        v8 = (_QWORD *)v2[1];
        if (!v8)
          goto LABEL_25;
        v31 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v30[2] = v9;
        v30[3] = v9;
        v30[0] = v9;
        v30[1] = v9;
        AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK::ARI_CsiIceAccessoryStateRspCb_SDK((AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK *)v30, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_24:
          MEMORY[0x22E2A3E5C](v30);
LABEL_25:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v30);
        v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
        if ((_DWORD)v11 == 67600384 || (_DWORD)v11 != *((_DWORD *)v2 + 6))
        {
          v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v29 = Ari::MsgNameById(v11);
            *(_DWORD *)buf = 136315138;
            v33 = v29;
            _os_log_error_impl(&dword_227A72000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          v12 = 0;
        }
        else
        {
          v12 = 1;
        }
        v14 = (const void *)v2[4];
        if (v14)
        {
          v15 = _Block_copy(v14);
          v16 = v2[5];
          if (!v16)
            goto LABEL_16;
        }
        else
        {
          v15 = 0;
          v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x18uLL);
            *v21 = v15;
            v21[1] = v16;
            *((_BYTE *)v21 + 16) = v12;
            v22 = v8[11];
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            v25 = operator new(0x18uLL);
            *v25 = v21;
            v25[1] = v18;
            v25[2] = v20;
            dispatch_async_f(v22, v25, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            do
              v26 = __ldaxr(v23);
            while (__stlxr(v26 - 1, v23));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_24;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_227ABB24C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c217_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk33ARI_CsiIceAccessoryStateRspCb_SDKENS4_31ARI_CsiIceAccessoryStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c217_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk33ARI_CsiIceAccessoryStateRspCb_SDKENS4_31ARI_CsiIceAccessoryStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0359A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0359A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = *a1;
  v3 = *(_BYTE *)(*a1 + 16);
  v4 = xpc_null_create();
  if (*(_QWORD *)v2)
    v5 = _Block_copy(*(const void **)v2);
  else
    v5 = 0;
  v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_17_1;
  if (v5)
  {
    v14 = v3;
    aBlock = _Block_copy(v5);
    object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_6;
  }
  object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
  v7 = *(NSObject **)(v2 + 8);
  if (v7)
    dispatch_release(v7);
  if (*(_QWORD *)v2)
    _Block_release(*(const void **)v2);
  operator delete((void *)v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

_QWORD *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[5];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[4];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk37ARI_CsiIceAccessoryStateArtdRspCb_SDKENS5_35ARI_CsiIceAccessoryStateArtdReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t GMID;
  Ari *v11;
  char v12;
  NSObject *v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  _OWORD v30[4];
  unint64_t v31;
  uint8_t buf[4];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        v8 = (_QWORD *)v2[1];
        if (!v8)
          goto LABEL_25;
        v31 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v30[2] = v9;
        v30[3] = v9;
        v30[0] = v9;
        v30[1] = v9;
        AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK::ARI_CsiIceAccessoryStateArtdRspCb_SDK((AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK *)v30, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_24:
          MEMORY[0x22E2A41B0](v30);
LABEL_25:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v30);
        v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
        if ((_DWORD)v11 == 67600384 || (_DWORD)v11 != *((_DWORD *)v2 + 6))
        {
          v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v29 = Ari::MsgNameById(v11);
            *(_DWORD *)buf = 136315138;
            v33 = v29;
            _os_log_error_impl(&dword_227A72000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          v12 = 0;
        }
        else
        {
          v12 = 1;
        }
        v14 = (const void *)v2[4];
        if (v14)
        {
          v15 = _Block_copy(v14);
          v16 = v2[5];
          if (!v16)
            goto LABEL_16;
        }
        else
        {
          v15 = 0;
          v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x18uLL);
            *v21 = v15;
            v21[1] = v16;
            *((_BYTE *)v21 + 16) = v12;
            v22 = v8[11];
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            v25 = operator new(0x18uLL);
            *v25 = v21;
            v25[1] = v18;
            v25[2] = v20;
            dispatch_async_f(v22, v25, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            do
              v26 = __ldaxr(v23);
            while (__stlxr(v26 - 1, v23));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_24;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_227ABB7E0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c225_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk37ARI_CsiIceAccessoryStateArtdRspCb_SDKENS4_35ARI_CsiIceAccessoryStateArtdReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c225_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk37ARI_CsiIceAccessoryStateArtdRspCb_SDKENS4_35ARI_CsiIceAccessoryStateArtdReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F035A28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F035A28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = *a1;
  v3 = *(_BYTE *)(*a1 + 16);
  v4 = xpc_null_create();
  if (*(_QWORD *)v2)
    v5 = _Block_copy(*(const void **)v2);
  else
    v5 = 0;
  v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_17_1;
  if (v5)
  {
    v14 = v3;
    aBlock = _Block_copy(v5);
    object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_6;
  }
  object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
  v7 = *(NSObject **)(v2 + 8);
  if (v7)
    dispatch_release(v7);
  if (*(_QWORD *)v2)
    _Block_release(*(const void **)v2);
  operator delete((void *)v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

_QWORD *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[5];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[4];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk31ARI_CsiIceSpeakerStateRspCb_SDKENS5_29ARI_CsiIceSpeakerStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t GMID;
  Ari *v11;
  char v12;
  NSObject *v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  _OWORD v30[4];
  unint64_t v31;
  uint8_t buf[4];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        v8 = (_QWORD *)v2[1];
        if (!v8)
          goto LABEL_25;
        v31 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v30[2] = v9;
        v30[3] = v9;
        v30[0] = v9;
        v30[1] = v9;
        AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK::ARI_CsiIceSpeakerStateRspCb_SDK((AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK *)v30, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_24:
          MEMORY[0x22E2A3C1C](v30);
LABEL_25:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v30);
        v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
        if ((_DWORD)v11 == 67600384 || (_DWORD)v11 != *((_DWORD *)v2 + 6))
        {
          v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v29 = Ari::MsgNameById(v11);
            *(_DWORD *)buf = 136315138;
            v33 = v29;
            _os_log_error_impl(&dword_227A72000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          v12 = 0;
        }
        else
        {
          v12 = 1;
        }
        v14 = (const void *)v2[4];
        if (v14)
        {
          v15 = _Block_copy(v14);
          v16 = v2[5];
          if (!v16)
            goto LABEL_16;
        }
        else
        {
          v15 = 0;
          v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x18uLL);
            *v21 = v15;
            v21[1] = v16;
            *((_BYTE *)v21 + 16) = v12;
            v22 = v8[11];
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            v25 = operator new(0x18uLL);
            *v25 = v21;
            v25[1] = v18;
            v25[2] = v20;
            dispatch_async_f(v22, v25, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            do
              v26 = __ldaxr(v23);
            while (__stlxr(v26 - 1, v23));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_24;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_227ABBD74(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c213_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk31ARI_CsiIceSpeakerStateRspCb_SDKENS4_29ARI_CsiIceSpeakerStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c213_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk31ARI_CsiIceSpeakerStateRspCb_SDKENS4_29ARI_CsiIceSpeakerStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F035AA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F035AA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = *a1;
  v3 = *(_BYTE *)(*a1 + 16);
  v4 = xpc_null_create();
  if (*(_QWORD *)v2)
    v5 = _Block_copy(*(const void **)v2);
  else
    v5 = 0;
  v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_17_1;
  if (v5)
  {
    v14 = v3;
    aBlock = _Block_copy(v5);
    object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_6;
  }
  object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
  v7 = *(NSObject **)(v2 + 8);
  if (v7)
    dispatch_release(v7);
  if (*(_QWORD *)v2)
    _Block_release(*(const void **)v2);
  operator delete((void *)v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

_QWORD *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[5];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[4];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk28ARI_CsiIceGripStateRspCb_SDKENS5_26ARI_CsiIceGripStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t GMID;
  Ari *v11;
  char v12;
  NSObject *v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  _OWORD v30[4];
  unint64_t v31;
  uint8_t buf[4];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        v8 = (_QWORD *)v2[1];
        if (!v8)
          goto LABEL_25;
        v31 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v30[2] = v9;
        v30[3] = v9;
        v30[0] = v9;
        v30[1] = v9;
        AriSdk::ARI_CsiIceGripStateRspCb_SDK::ARI_CsiIceGripStateRspCb_SDK((AriSdk::ARI_CsiIceGripStateRspCb_SDK *)v30, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_24:
          MEMORY[0x22E2A3760](v30);
LABEL_25:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v30);
        v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
        if ((_DWORD)v11 == 67600384 || (_DWORD)v11 != *((_DWORD *)v2 + 6))
        {
          v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v29 = Ari::MsgNameById(v11);
            *(_DWORD *)buf = 136315138;
            v33 = v29;
            _os_log_error_impl(&dword_227A72000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          v12 = 0;
        }
        else
        {
          v12 = 1;
        }
        v14 = (const void *)v2[4];
        if (v14)
        {
          v15 = _Block_copy(v14);
          v16 = v2[5];
          if (!v16)
            goto LABEL_16;
        }
        else
        {
          v15 = 0;
          v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x18uLL);
            *v21 = v15;
            v21[1] = v16;
            *((_BYTE *)v21 + 16) = v12;
            v22 = v8[11];
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            v25 = operator new(0x18uLL);
            *v25 = v21;
            v25[1] = v18;
            v25[2] = v20;
            dispatch_async_f(v22, v25, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            do
              v26 = __ldaxr(v23);
            while (__stlxr(v26 - 1, v23));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_24;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_227ABC308(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c207_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk28ARI_CsiIceGripStateRspCb_SDKENS4_26ARI_CsiIceGripStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c207_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk28ARI_CsiIceGripStateRspCb_SDKENS4_26ARI_CsiIceGripStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F035B28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F035B28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = *a1;
  v3 = *(_BYTE *)(*a1 + 16);
  v4 = xpc_null_create();
  if (*(_QWORD *)v2)
    v5 = _Block_copy(*(const void **)v2);
  else
    v5 = 0;
  v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_17_1;
  if (v5)
  {
    v14 = v3;
    aBlock = _Block_copy(v5);
    object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_6;
  }
  object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
  v7 = *(NSObject **)(v2 + 8);
  if (v7)
    dispatch_release(v7);
  if (*(_QWORD *)v2)
    _Block_release(*(const void **)v2);
  operator delete((void *)v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

_QWORD *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[5];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[4];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk35ARI_CsiIcePowerSourceStateRspCb_SDKENS5_33ARI_CsiIcePowerSourceStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t GMID;
  Ari *v11;
  char v12;
  NSObject *v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  _OWORD v30[4];
  unint64_t v31;
  uint8_t buf[4];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        v8 = (_QWORD *)v2[1];
        if (!v8)
          goto LABEL_25;
        v31 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v30[2] = v9;
        v30[3] = v9;
        v30[0] = v9;
        v30[1] = v9;
        AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK::ARI_CsiIcePowerSourceStateRspCb_SDK((AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK *)v30, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_24:
          MEMORY[0x22E2A406C](v30);
LABEL_25:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v30);
        v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
        if ((_DWORD)v11 == 67600384 || (_DWORD)v11 != *((_DWORD *)v2 + 6))
        {
          v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v29 = Ari::MsgNameById(v11);
            *(_DWORD *)buf = 136315138;
            v33 = v29;
            _os_log_error_impl(&dword_227A72000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          v12 = 0;
        }
        else
        {
          v12 = 1;
        }
        v14 = (const void *)v2[4];
        if (v14)
        {
          v15 = _Block_copy(v14);
          v16 = v2[5];
          if (!v16)
            goto LABEL_16;
        }
        else
        {
          v15 = 0;
          v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x18uLL);
            *v21 = v15;
            v21[1] = v16;
            *((_BYTE *)v21 + 16) = v12;
            v22 = v8[11];
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            v25 = operator new(0x18uLL);
            *v25 = v21;
            v25[1] = v18;
            v25[2] = v20;
            dispatch_async_f(v22, v25, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            do
              v26 = __ldaxr(v23);
            while (__stlxr(v26 - 1, v23));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_24;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_227ABC89C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c221_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk35ARI_CsiIcePowerSourceStateRspCb_SDKENS4_33ARI_CsiIcePowerSourceStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c221_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk35ARI_CsiIcePowerSourceStateRspCb_SDKENS4_33ARI_CsiIcePowerSourceStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F035BA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F035BA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = *a1;
  v3 = *(_BYTE *)(*a1 + 16);
  v4 = xpc_null_create();
  if (*(_QWORD *)v2)
    v5 = _Block_copy(*(const void **)v2);
  else
    v5 = 0;
  v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_17_1;
  if (v5)
  {
    v14 = v3;
    aBlock = _Block_copy(v5);
    object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_6;
  }
  object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
  v7 = *(NSObject **)(v2 + 8);
  if (v7)
    dispatch_release(v7);
  if (*(_QWORD *)v2)
    _Block_release(*(const void **)v2);
  operator delete((void *)v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

_QWORD *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[5];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[4];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk45ARI_IBICpsConfigureCellularPowerReportRsp_SDKENS5_45ARI_IBICpsConfigureCellularPowerReportReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t GMID;
  Ari *v11;
  char v12;
  NSObject *v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  _OWORD v30[5];
  uint8_t buf[4];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        v8 = (_QWORD *)v2[1];
        if (!v8)
          goto LABEL_25;
        *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v30[3] = v9;
        v30[4] = v9;
        v30[1] = v9;
        v30[2] = v9;
        v30[0] = v9;
        AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK::ARI_IBICpsConfigureCellularPowerReportRsp_SDK((AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK *)v30, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_24:
          MEMORY[0x22E2A4414](v30);
LABEL_25:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v30);
        v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
        if ((_DWORD)v11 == 67600384 || (_DWORD)v11 != *((_DWORD *)v2 + 6))
        {
          v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v29 = Ari::MsgNameById(v11);
            *(_DWORD *)buf = 136315138;
            v32 = v29;
            _os_log_error_impl(&dword_227A72000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          v12 = 0;
        }
        else
        {
          v12 = 1;
        }
        v14 = (const void *)v2[4];
        if (v14)
        {
          v15 = _Block_copy(v14);
          v16 = v2[5];
          if (!v16)
            goto LABEL_16;
        }
        else
        {
          v15 = 0;
          v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x18uLL);
            *v21 = v15;
            v21[1] = v16;
            *((_BYTE *)v21 + 16) = v12;
            v22 = v8[11];
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            v25 = operator new(0x18uLL);
            *v25 = v21;
            v25[1] = v18;
            v25[2] = v20;
            dispatch_async_f(v22, v25, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            do
              v26 = __ldaxr(v23);
            while (__stlxr(v26 - 1, v23));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_24;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_227ABCE2C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c243_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk45ARI_IBICpsConfigureCellularPowerReportRsp_SDKENS4_45ARI_IBICpsConfigureCellularPowerReportReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c243_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk45ARI_IBICpsConfigureCellularPowerReportRsp_SDKENS4_45ARI_IBICpsConfigureCellularPowerReportReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F035C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F035C28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = *a1;
  v3 = *(_BYTE *)(*a1 + 16);
  v4 = xpc_null_create();
  if (*(_QWORD *)v2)
    v5 = _Block_copy(*(const void **)v2);
  else
    v5 = 0;
  v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_17_1;
  if (v5)
  {
    v14 = v3;
    aBlock = _Block_copy(v5);
    object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_6;
  }
  object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
  v7 = *(NSObject **)(v2 + 8);
  if (v7)
    dispatch_release(v7);
  if (*(_QWORD *)v2)
    _Block_release(*(const void **)v2);
  operator delete((void *)v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

uint64_t ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver26ppmRegisterIndication_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t result, const unsigned __int8 *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  __int128 v4;
  unint64_t GMID;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  NSObject *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const void *v17;
  int64_t v18;
  char *v19;
  xpc_object_t v20;
  xpc_object_t v21;
  uint64_t v22;
  uint64_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  const void *v36;
  void *v37;
  NSObject *v38;
  void *v39;
  _OWORD v40[4];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint8_t buf[8];
  uint64_t v47;
  void (*v48)(uint64_t);
  void *v49;
  const void *v50;
  xpc_object_t v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(result + 32);
  if (v2)
  {
    v3 = (_QWORD *)*v2;
    *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v44 = v4;
    v45 = v4;
    v42 = v4;
    v43 = v4;
    v40[3] = v4;
    v41 = v4;
    v40[1] = v4;
    v40[2] = v4;
    v40[0] = v4;
    AriSdk::ARI_IBICpsCellularPowerReportInd_SDK::ARI_IBICpsCellularPowerReportInd_SDK((AriSdk::ARI_IBICpsCellularPowerReportInd_SDK *)v40, a2);
    GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v40);
    if ((ice::isARIResponseValid() & 1) == 0)
    {
      v10 = v3[5];
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26);
        LOWORD(v47) = 1024;
        *(_DWORD *)((char *)&v47 + 2) = 1031831552;
        v7 = "Got unexpected message 0x%0x, expected IBICpsCellularPowerReportInd (0x%0x)";
        v8 = v10;
        v9 = 14;
        goto LABEL_8;
      }
      return MEMORY[0x22E2A4138](v40);
    }
    if (AriSdk::ARI_IBICpsCellularPowerReportInd_SDK::unpack((AriSdk::ARI_IBICpsCellularPowerReportInd_SDK *)v40))
    {
      v6 = v3[5];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v7 = "Failed to unpack PPM data from Baseband.";
        v8 = v6;
        v9 = 2;
LABEL_8:
        _os_log_error_impl(&dword_227A72000, v8, OS_LOG_TYPE_ERROR, v7, buf, v9);
        return MEMORY[0x22E2A4138](v40);
      }
      return MEMORY[0x22E2A4138](v40);
    }
    v11 = xpc_dictionary_create(0, 0, 0);
    if (v11 || (v11 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x22E2A4C30](v11) == MEMORY[0x24BDACFA0])
      {
        xpc_retain(v11);
        v12 = v11;
      }
      else
      {
        v12 = xpc_null_create();
      }
    }
    else
    {
      v12 = xpc_null_create();
      v11 = 0;
    }
    xpc_release(v11);
    if (*((_QWORD *)&v41 + 1))
    {
      v13 = xpc_int64_create(**((_DWORD **)&v41 + 1));
      if (!v13)
        v13 = xpc_null_create();
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x24BED3A18], v13);
      v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
    }
    if ((_QWORD)v42)
    {
      v15 = xpc_int64_create(*(unsigned int *)v42);
      if (!v15)
        v15 = xpc_null_create();
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x24BED39A8], v15);
      v16 = xpc_null_create();
      xpc_release(v15);
      xpc_release(v16);
    }
    v17 = (const void *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1) && *((_QWORD *)&v42 + 1) != (_QWORD)v43)
    {
      v18 = v43 - *((_QWORD *)&v42 + 1);
      if ((uint64_t)(v43 - *((_QWORD *)&v42 + 1)) < 0)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v19 = (char *)operator new(v43 - *((_QWORD *)&v42 + 1));
      memmove(v19, v17, v18);
      v20 = xpc_array_create(0, 0);
      if (v20 || (v20 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x22E2A4C30](v20) == MEMORY[0x24BDACF78])
        {
          xpc_retain(v20);
          v21 = v20;
        }
        else
        {
          v21 = xpc_null_create();
        }
      }
      else
      {
        v21 = xpc_null_create();
        v20 = 0;
      }
      xpc_release(v20);
      v22 = 0;
      v23 = 4 * (v18 >> 2);
      do
      {
        v24 = xpc_int64_create(*(unsigned int *)&v19[v22]);
        if (!v24)
          v24 = xpc_null_create();
        xpc_array_append_value(v21, v24);
        xpc_release(v24);
        v22 += 4;
      }
      while (v23 != v22);
      if (v21)
      {
        xpc_retain(v21);
        v25 = v21;
      }
      else
      {
        v25 = xpc_null_create();
      }
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x24BED39A0], v25);
      v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
      xpc_release(v21);
      operator delete(v19);
    }
    if ((_QWORD)v44)
    {
      v27 = xpc_int64_create(*(int *)v44);
      if (!v27)
        v27 = xpc_null_create();
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x24BED3988], v27);
      v28 = xpc_null_create();
      xpc_release(v27);
      xpc_release(v28);
    }
    if (*((_QWORD *)&v44 + 1))
    {
      v29 = xpc_int64_create(**((_DWORD **)&v44 + 1));
      if (!v29)
        v29 = xpc_null_create();
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x24BED39E8], v29);
      v30 = xpc_null_create();
      xpc_release(v29);
      xpc_release(v30);
    }
    if ((_QWORD)v45)
    {
      v31 = xpc_int64_create(*(unsigned int *)v45);
      if (!v31)
        v31 = xpc_null_create();
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x24BED3998], v31);
      v32 = xpc_null_create();
      xpc_release(v31);
      xpc_release(v32);
    }
    if (*((_QWORD *)&v45 + 1))
    {
      v33 = xpc_int64_create(**((_DWORD **)&v45 + 1));
      if (!v33)
        v33 = xpc_null_create();
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x24BED3980], v33);
      v34 = xpc_null_create();
      xpc_release(v33);
      xpc_release(v34);
    }
    if (v12)
    {
      xpc_retain(v12);
      v35 = v12;
      v36 = (const void *)v3[29];
      if (v36)
      {
LABEL_58:
        v37 = _Block_copy(v36);
        goto LABEL_61;
      }
    }
    else
    {
      v35 = xpc_null_create();
      v36 = (const void *)v3[29];
      if (v36)
        goto LABEL_58;
    }
    v37 = 0;
LABEL_61:
    v38 = v3[30];
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    v47 = 1174405120;
    v48 = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
    v49 = &__block_descriptor_tmp_17_1;
    if (v37)
    {
      v39 = _Block_copy(v37);
      v52 = 1;
      v50 = v39;
      v51 = v35;
      if (v35)
      {
LABEL_63:
        xpc_retain(v35);
LABEL_66:
        dispatch_async(v38, buf);
        xpc_release(v51);
        v51 = 0;
        if (v50)
          _Block_release(v50);
        if (v37)
          _Block_release(v37);
        xpc_release(v35);
        xpc_release(v12);
        return MEMORY[0x22E2A4138](v40);
      }
    }
    else
    {
      v52 = 1;
      v50 = 0;
      v51 = v35;
      if (v35)
        goto LABEL_63;
    }
    v51 = xpc_null_create();
    goto LABEL_66;
  }
  return result;
}

void sub_227ABD704(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c143_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver26ppmRegisterIndication_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c143_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver26ppmRegisterIndication_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<antenna::ARICommandDriver::ppmRegisterIndication_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0,std::allocator<antenna::ARICommandDriver::ppmRegisterIndication_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F035CA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<antenna::ARICommandDriver::ppmRegisterIndication_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0,std::allocator<antenna::ARICommandDriver::ppmRegisterIndication_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F035CA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS4_6objectEEEEE3__0vEENS8_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  void *v8;
  NSObject *v9;
  xpc_object_t v10;
  const void *v11;
  void *v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  const void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  int v23;
  NSObject *v24;
  const void *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  const void *v29;
  void *v30;
  NSObject *v31;
  void *v32;
  NSObject *v33;
  void *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void *v37[3];
  __int128 block;
  __int128 v39;
  xpc_object_t object[2];
  __int128 v41;
  __int128 v42;
  _BYTE __p[24];
  void *v44;
  void *aBlock;
  xpc_object_t v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    return;
  v3 = (std::__shared_weak_count *)v2[1];
  if (v3)
  {
    v5 = v2[2];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6 && *v2)
    {
      *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v41 = v7;
      v42 = v7;
      v39 = v7;
      *(_OWORD *)object = v7;
      block = v7;
      AriSdk::ARI_IBICpsHealthActivityRsp_SDK::ARI_IBICpsHealthActivityRsp_SDK((AriSdk::ARI_IBICpsHealthActivityRsp_SDK *)&block, a2);
      memset(v37, 170, sizeof(v37));
      __p[23] = 17;
      strcpy(__p, "set workout state");
      checkErrorStr((AriSdk::MsgBase *)&block, (uint64_t)__p, (uint64_t)v37);
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        v17 = (void *)HIBYTE(v37[2]);
        if (SHIBYTE(v37[2]) < 0)
          v17 = v37[1];
        if (v17)
        {
LABEL_9:
          v9 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__p = 0;
            _os_log_error_impl(&dword_227A72000, v9, OS_LOG_TYPE_ERROR, "Failed to set workout state (response error)", __p, 2u);
          }
          v10 = xpc_null_create();
          v11 = (const void *)v2[3];
          if (v11)
            v12 = _Block_copy(v11);
          else
            v12 = 0;
          v21 = v2[4];
          *(_QWORD *)__p = MEMORY[0x24BDAC760];
          *(_QWORD *)&__p[8] = 1174405120;
          *(_QWORD *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
          v44 = &__block_descriptor_tmp_17_1;
          if (v12)
          {
            v22 = _Block_copy(v12);
            v47 = 0;
            aBlock = v22;
            v46 = v10;
            if (v10)
            {
LABEL_39:
              xpc_retain(v10);
LABEL_42:
              dispatch_async(v21, __p);
              xpc_release(v46);
              v46 = 0;
              if (aBlock)
                _Block_release(aBlock);
              if (v12)
                _Block_release(v12);
LABEL_89:
              xpc_release(v10);
              if (SHIBYTE(v37[2]) < 0)
                operator delete(v37[0]);
              MEMORY[0x22E2A3CE8](&block);
LABEL_92:
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v36 = __ldaxr(p_shared_owners);
              while (__stlxr(v36 - 1, p_shared_owners));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
              return;
            }
          }
          else
          {
            v47 = 0;
            aBlock = 0;
            v46 = v10;
            if (v10)
              goto LABEL_39;
          }
          v46 = xpc_null_create();
          goto LABEL_42;
        }
      }
      else
      {
        v8 = (void *)HIBYTE(v37[2]);
        if (SHIBYTE(v37[2]) < 0)
          v8 = v37[1];
        if (v8)
          goto LABEL_9;
      }
      if (AriSdk::ARI_IBICpsHealthActivityRsp_SDK::unpack((AriSdk::ARI_IBICpsHealthActivityRsp_SDK *)&block))
      {
        v18 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__p = 0;
          _os_log_error_impl(&dword_227A72000, v18, OS_LOG_TYPE_ERROR, "Failed to set workout state (unpack error)", __p, 2u);
        }
        v10 = xpc_null_create();
        v19 = (const void *)v2[3];
        if (v19)
          v20 = _Block_copy(v19);
        else
          v20 = 0;
        v27 = v2[4];
        *(_QWORD *)__p = MEMORY[0x24BDAC760];
        *(_QWORD *)&__p[8] = 1174405120;
        *(_QWORD *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
        v44 = &__block_descriptor_tmp_17_1;
        if (v20)
          v28 = _Block_copy(v20);
        else
          v28 = 0;
        v47 = 0;
        aBlock = v28;
        v46 = v10;
        if (v10)
          xpc_retain(v10);
        else
          v46 = xpc_null_create();
        dispatch_async(v27, __p);
        xpc_release(v46);
        v46 = 0;
        if (aBlock)
          _Block_release(aBlock);
        if (v20)
          _Block_release(v20);
      }
      else
      {
        v23 = **((_DWORD **)&v42 + 1);
        if (**((_DWORD **)&v42 + 1))
        {
          v24 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 67109120;
            *(_DWORD *)&__p[4] = v23;
            _os_log_error_impl(&dword_227A72000, v24, OS_LOG_TYPE_ERROR, "Failed to set workout state (result error: %d)", __p, 8u);
          }
          v10 = xpc_null_create();
          v25 = (const void *)v2[3];
          if (v25)
            v26 = _Block_copy(v25);
          else
            v26 = 0;
          v31 = v2[4];
          *(_QWORD *)__p = MEMORY[0x24BDAC760];
          *(_QWORD *)&__p[8] = 1174405120;
          *(_QWORD *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
          v44 = &__block_descriptor_tmp_17_1;
          if (v26)
            v32 = _Block_copy(v26);
          else
            v32 = 0;
          v47 = 0;
          aBlock = v32;
          v46 = v10;
          if (v10)
            xpc_retain(v10);
          else
            v46 = xpc_null_create();
          dispatch_async(v31, __p);
          xpc_release(v46);
          v46 = 0;
          if (aBlock)
            _Block_release(aBlock);
          if (v26)
            _Block_release(v26);
        }
        else
        {
          v10 = xpc_null_create();
          v29 = (const void *)v2[3];
          if (v29)
            v30 = _Block_copy(v29);
          else
            v30 = 0;
          v33 = v2[4];
          *(_QWORD *)__p = MEMORY[0x24BDAC760];
          *(_QWORD *)&__p[8] = 1174405120;
          *(_QWORD *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
          v44 = &__block_descriptor_tmp_17_1;
          if (v30)
            v34 = _Block_copy(v30);
          else
            v34 = 0;
          v47 = 1;
          aBlock = v34;
          v46 = v10;
          if (v10)
            xpc_retain(v10);
          else
            v46 = xpc_null_create();
          dispatch_async(v33, __p);
          xpc_release(v46);
          v46 = 0;
          if (aBlock)
            _Block_release(aBlock);
          if (v30)
            _Block_release(v30);
        }
      }
      goto LABEL_89;
    }
  }
  else
  {
    v6 = 0;
  }
  v13 = xpc_null_create();
  v14 = (const void *)v2[3];
  if (v14)
    v15 = _Block_copy(v14);
  else
    v15 = 0;
  v16 = v2[4];
  *(_QWORD *)&block = MEMORY[0x24BDAC760];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v39 = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  *((_QWORD *)&v39 + 1) = &__block_descriptor_tmp_17_1;
  if (v15)
  {
    LOBYTE(v41) = 0;
    object[0] = _Block_copy(v15);
    object[1] = v13;
    if (v13)
    {
LABEL_19:
      xpc_retain(v13);
      goto LABEL_22;
    }
  }
  else
  {
    LOBYTE(v41) = 0;
    object[0] = 0;
    object[1] = v13;
    if (v13)
      goto LABEL_19;
  }
  object[1] = xpc_null_create();
LABEL_22:
  dispatch_async(v16, &block);
  xpc_release(object[1]);
  object[1] = 0;
  if (object[0])
    _Block_release(object[0]);
  if (v15)
    _Block_release(v15);
  xpc_release(v13);
  if (v6)
    goto LABEL_92;
}

void sub_227ABDF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c145_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS3_6objectEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c145_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS3_6objectEEEEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<antenna::ARICommandDriver::workoutInfo_sync(xpc::dict const&,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0,std::allocator<antenna::ARICommandDriver::workoutInfo_sync(xpc::dict const&,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F035D28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<antenna::ARICommandDriver::workoutInfo_sync(xpc::dict const&,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0,std::allocator<antenna::ARICommandDriver::workoutInfo_sync(xpc::dict const&,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F035D28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<antenna::ARICommandDriver::workoutInfo_sync(xpc::dict const&,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0,std::allocator<antenna::ARICommandDriver::workoutInfo_sync(xpc::dict const&,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[7];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[6];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

_QWORD *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[5];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[4];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk33ARI_IBIStwSarBackoffTimeRspCb_SDKENS5_31ARI_IBIStwSarBackoffTimeReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t GMID;
  Ari *v11;
  char v12;
  NSObject *v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  _OWORD v30[5];
  uint8_t buf[4];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        v8 = (_QWORD *)v2[1];
        if (!v8)
          goto LABEL_25;
        *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v30[3] = v9;
        v30[4] = v9;
        v30[1] = v9;
        v30[2] = v9;
        v30[0] = v9;
        AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK::ARI_IBIStwSarBackoffTimeRspCb_SDK((AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK *)v30, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_24:
          MEMORY[0x22E2A3F1C](v30);
LABEL_25:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v30);
        v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
        if ((_DWORD)v11 == 67600384 || (_DWORD)v11 != *((_DWORD *)v2 + 6))
        {
          v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v29 = Ari::MsgNameById(v11);
            *(_DWORD *)buf = 136315138;
            v32 = v29;
            _os_log_error_impl(&dword_227A72000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          v12 = 0;
        }
        else
        {
          v12 = 1;
        }
        v14 = (const void *)v2[4];
        if (v14)
        {
          v15 = _Block_copy(v14);
          v16 = v2[5];
          if (!v16)
            goto LABEL_16;
        }
        else
        {
          v15 = 0;
          v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x18uLL);
            *v21 = v15;
            v21[1] = v16;
            *((_BYTE *)v21 + 16) = v12;
            v22 = v8[11];
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            v25 = operator new(0x18uLL);
            *v25 = v21;
            v25[1] = v18;
            v25[2] = v20;
            dispatch_async_f(v22, v25, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            do
              v26 = __ldaxr(v23);
            while (__stlxr(v26 - 1, v23));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_24;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_227ABE40C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c217_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk33ARI_IBIStwSarBackoffTimeRspCb_SDKENS4_31ARI_IBIStwSarBackoffTimeReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c217_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk33ARI_IBIStwSarBackoffTimeRspCb_SDKENS4_31ARI_IBIStwSarBackoffTimeReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F035DA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F035DA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = *a1;
  v3 = *(_BYTE *)(*a1 + 16);
  v4 = xpc_null_create();
  if (*(_QWORD *)v2)
    v5 = _Block_copy(*(const void **)v2);
  else
    v5 = 0;
  v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_17_1;
  if (v5)
  {
    v14 = v3;
    aBlock = _Block_copy(v5);
    object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_6;
  }
  object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
  v7 = *(NSObject **)(v2 + 8);
  if (v7)
    dispatch_release(v7);
  if (*(_QWORD *)v2)
    _Block_release(*(const void **)v2);
  operator delete((void *)v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

uint64_t std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long>>::~vector[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t coex::ARICommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  coex::CommandDriver *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  std::__shared_weak_count *v23;

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = (coex::CommandDriver *)operator new(0xE8uLL);
  v7 = (uint64_t)v6;
  v8 = (std::__shared_weak_count *)a1[1];
  v22 = *a1;
  v23 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v21[0] = v11;
  v21[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  coex::ARICommandDriver::ARICommandDriver(v6, (uint64_t)&v22, (uint64_t)v21);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<coex::ARICommandDriver>::shared_ptr[abi:ne180100]<coex::ARICommandDriver,std::shared_ptr<coex::ARICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::ARICommandDriver>(coex::ARICommandDriver*)::{lambda(coex::ARICommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 80))(*a3);
}

void sub_227ABE864(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_227ABE878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

coex::CommandDriver *coex::ARICommandDriver::ARICommandDriver(coex::CommandDriver *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *object;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(std::__shared_weak_count **)(a3 + 8);
  v17 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  coex::CommandDriver::CommandDriver();
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *(_QWORD *)a1 = off_24F035DF8;
  v14 = *((_QWORD *)a1 + 11);
  object = v14;
  if (v14)
    dispatch_retain(v14);
  coex::CommandDriver::getName(a1);
  ice::Client::create();
  if (object)
    dispatch_release(object);
  *((_QWORD *)a1 + 26) = 0;
  *((_QWORD *)a1 + 27) = 0;
  *((_QWORD *)a1 + 28) = 0;
  return a1;
}

void sub_227ABE9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_227ABEA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  void **v10;

  if (object)
    dispatch_release(object);
  coex::CommandDriver::~CommandDriver(v10);
  _Unwind_Resume(a1);
}

void coex::CommandDriver::~CommandDriver(void **this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  NSObject *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;

  *this = off_24F0360B8;
  if (*((char *)this + 191) < 0)
  {
    operator delete(this[21]);
    this[18] = &off_24F036120;
    v2 = (unsigned int *)this[20];
    if (!v2)
      goto LABEL_12;
  }
  else
  {
    this[18] = &off_24F036120;
    v2 = (unsigned int *)this[20];
    if (!v2)
      goto LABEL_12;
  }
  v3 = v2 + 2;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    v6 = v2 + 3;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
  }
LABEL_12:
  this[15] = &off_24F036190;
  v9 = (unsigned int *)this[17];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  v16 = (std::__shared_weak_count *)this[14];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *this = off_24F036200;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v19 = this[12];
  if (v19)
    dispatch_release(v19);
  v20 = this[11];
  if (v20)
    dispatch_release(v20);
  v21 = (std::__shared_weak_count *)this[10];
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

void coex::ARICommandDriver::~ARICommandDriver(coex::ARICommandDriver *this)
{
  NSObject *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];

  *(_QWORD *)this = off_24F035DF8;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v9, 2u);
  }
  v3 = (const void *)*((_QWORD *)this + 28);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 27);
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 26);
  if (v5)
    CFRelease(v5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v6)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    coex::CommandDriver::~CommandDriver((void **)this);
  }
  else
  {
LABEL_13:
    coex::CommandDriver::~CommandDriver((void **)this);
  }
}

{
  void *v1;

  coex::ARICommandDriver::~ARICommandDriver(this);
  operator delete(v1);
}

void coex::ARICommandDriver::init(coex::ARICommandDriver *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x24BDAC760];
  v1[1] = 0x40000000;
  v1[2] = ___ZN4coex16ARICommandDriver4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_6_1;
  v1[4] = this;
  ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

uint64_t ___ZN4coex16ARICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  __int128 v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  __int128 v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  __int128 v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  __int128 v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  __int128 v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  __int128 v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  __int128 v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD v134[5];
  _QWORD v135[5];
  uint8_t buf[8];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  v3 = (_QWORD *)qword_253DF24F8;
  if (qword_253DF24F8 >= (unint64_t)qword_253DF2500)
  {
    v5 = qword_253DF24F0;
    v6 = 0xAAAAAAAAAAAAAAABLL * ((qword_253DF24F8 - qword_253DF24F0) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    if (0x5555555555555556 * ((qword_253DF2500 - qword_253DF24F0) >> 3) > v7)
      v7 = 0x5555555555555556 * ((qword_253DF2500 - qword_253DF24F0) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((qword_253DF2500 - qword_253DF24F0) >> 3) >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    else
      v8 = v7;
    if (v8)
    {
      if (v8 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_238;
      v9 = operator new(24 * v8);
    }
    else
    {
      v9 = 0;
    }
    v10 = (uint64_t)v9 + 24 * v6;
    *(_OWORD *)v10 = xmmword_227B1D190;
    *(_QWORD *)(v10 + 16) = 8;
    v4 = (_QWORD *)(v10 + 24);
    if (v3 != (_QWORD *)v5)
    {
      do
      {
        v11 = *(_OWORD *)(v3 - 3);
        *(_QWORD *)(v10 - 8) = *(v3 - 1);
        *(_OWORD *)(v10 - 24) = v11;
        v10 -= 24;
        v3 -= 3;
      }
      while (v3 != (_QWORD *)v5);
      v3 = (_QWORD *)qword_253DF24F0;
    }
    qword_253DF24F0 = v10;
    qword_253DF24F8 = (uint64_t)v4;
    qword_253DF2500 = (uint64_t)v9 + 24 * v8;
    if (v3)
      operator delete(v3);
  }
  else
  {
    *(_OWORD *)qword_253DF24F8 = xmmword_227B1D190;
    v3[2] = 8;
    v4 = v3 + 3;
  }
  qword_253DF24F8 = (uint64_t)v4;
  if ((unint64_t)v4 >= qword_253DF2500)
  {
    v14 = qword_253DF24F0;
    v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - qword_253DF24F0) >> 3);
    v16 = v15 + 1;
    if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_237;
    if (0x5555555555555556 * ((qword_253DF2500 - qword_253DF24F0) >> 3) > v16)
      v16 = 0x5555555555555556 * ((qword_253DF2500 - qword_253DF24F0) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((qword_253DF2500 - qword_253DF24F0) >> 3) >= 0x555555555555555)
      v17 = 0xAAAAAAAAAAAAAAALL;
    else
      v17 = v16;
    if (v17)
    {
      if (v17 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_238;
      v18 = operator new(24 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = (uint64_t)v18 + 24 * v15;
    *(_OWORD *)v19 = xmmword_227B1D1A0;
    *(_QWORD *)(v19 + 16) = 32;
    v12 = (_QWORD *)(v19 + 24);
    if (v4 == (_QWORD *)v14)
    {
      qword_253DF24F0 = v19;
      qword_253DF24F8 = v19 + 24;
      qword_253DF2500 = (uint64_t)v18 + 24 * v17;
    }
    else
    {
      do
      {
        v20 = *(_OWORD *)(v4 - 3);
        *(_QWORD *)(v19 - 8) = *(v4 - 1);
        *(_OWORD *)(v19 - 24) = v20;
        v19 -= 24;
        v4 -= 3;
      }
      while (v4 != (_QWORD *)v14);
      v4 = (_QWORD *)qword_253DF24F0;
      qword_253DF24F0 = v19;
      qword_253DF24F8 = (uint64_t)v12;
      qword_253DF2500 = (uint64_t)v18 + 24 * v17;
      if (!v4)
      {
        qword_253DF24F8 = (uint64_t)v12;
        v13 = qword_253DF2500;
        if ((unint64_t)v12 >= qword_253DF2500)
          goto LABEL_41;
        goto LABEL_37;
      }
    }
    operator delete(v4);
    qword_253DF24F8 = (uint64_t)v12;
    v13 = qword_253DF2500;
    if ((unint64_t)v12 >= qword_253DF2500)
      goto LABEL_41;
LABEL_37:
    *(_OWORD *)v12 = xmmword_227B1D1B0;
    v12[2] = 16;
    v21 = v12 + 3;
    qword_253DF24F8 = (uint64_t)(v12 + 3);
    v22 = qword_253DF2500;
    if ((unint64_t)(v12 + 3) < qword_253DF2500)
      goto LABEL_55;
    goto LABEL_59;
  }
  *(_OWORD *)v4 = xmmword_227B1D1A0;
  v4[2] = 32;
  v12 = v4 + 3;
  qword_253DF24F8 = (uint64_t)(v4 + 3);
  v13 = qword_253DF2500;
  if ((unint64_t)(v4 + 3) < qword_253DF2500)
    goto LABEL_37;
LABEL_41:
  v23 = qword_253DF24F0;
  v24 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - qword_253DF24F0) >> 3);
  v25 = v24 + 1;
  if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_237;
  v26 = 0xAAAAAAAAAAAAAAABLL * ((v13 - qword_253DF24F0) >> 3);
  if (2 * v26 > v25)
    v25 = 2 * v26;
  if (v26 >= 0x555555555555555)
    v27 = 0xAAAAAAAAAAAAAAALL;
  else
    v27 = v25;
  if (v27)
  {
    if (v27 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_238;
    v28 = operator new(24 * v27);
  }
  else
  {
    v28 = 0;
  }
  v29 = (uint64_t)v28 + 24 * v24;
  *(_OWORD *)v29 = xmmword_227B1D1B0;
  *(_QWORD *)(v29 + 16) = 16;
  v21 = (_QWORD *)(v29 + 24);
  if (v12 == (_QWORD *)v23)
  {
    qword_253DF24F0 = v29;
    qword_253DF24F8 = v29 + 24;
    qword_253DF2500 = (uint64_t)v28 + 24 * v27;
  }
  else
  {
    do
    {
      v30 = *(_OWORD *)(v12 - 3);
      *(_QWORD *)(v29 - 8) = *(v12 - 1);
      *(_OWORD *)(v29 - 24) = v30;
      v29 -= 24;
      v12 -= 3;
    }
    while (v12 != (_QWORD *)v23);
    v12 = (_QWORD *)qword_253DF24F0;
    qword_253DF24F0 = v29;
    qword_253DF24F8 = (uint64_t)v21;
    qword_253DF2500 = (uint64_t)v28 + 24 * v27;
    if (!v12)
    {
      qword_253DF24F8 = (uint64_t)v21;
      v22 = qword_253DF2500;
      if ((unint64_t)v21 < qword_253DF2500)
        goto LABEL_55;
LABEL_59:
      v33 = qword_253DF24F0;
      v34 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v21 - qword_253DF24F0) >> 3);
      v35 = v34 + 1;
      if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_237;
      v36 = 0xAAAAAAAAAAAAAAABLL * ((v22 - qword_253DF24F0) >> 3);
      if (2 * v36 > v35)
        v35 = 2 * v36;
      if (v36 >= 0x555555555555555)
        v37 = 0xAAAAAAAAAAAAAAALL;
      else
        v37 = v35;
      if (v37)
      {
        if (v37 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_238;
        v38 = operator new(24 * v37);
      }
      else
      {
        v38 = 0;
      }
      v39 = (uint64_t)v38 + 24 * v34;
      *(_OWORD *)v39 = xmmword_227B1D1C0;
      *(_QWORD *)(v39 + 16) = 4160749568;
      v31 = (_QWORD *)(v39 + 24);
      if (v21 == (_QWORD *)v33)
      {
        qword_253DF24F0 = v39;
        qword_253DF24F8 = v39 + 24;
        qword_253DF2500 = (uint64_t)v38 + 24 * v37;
      }
      else
      {
        do
        {
          v40 = *(_OWORD *)(v21 - 3);
          *(_QWORD *)(v39 - 8) = *(v21 - 1);
          *(_OWORD *)(v39 - 24) = v40;
          v39 -= 24;
          v21 -= 3;
        }
        while (v21 != (_QWORD *)v33);
        v21 = (_QWORD *)qword_253DF24F0;
        qword_253DF24F0 = v39;
        qword_253DF24F8 = (uint64_t)v31;
        qword_253DF2500 = (uint64_t)v38 + 24 * v37;
        if (!v21)
        {
          qword_253DF24F8 = (uint64_t)v31;
          v32 = qword_253DF2500;
          if ((unint64_t)v31 >= qword_253DF2500)
            goto LABEL_77;
          goto LABEL_73;
        }
      }
      operator delete(v21);
      qword_253DF24F8 = (uint64_t)v31;
      v32 = qword_253DF2500;
      if ((unint64_t)v31 >= qword_253DF2500)
        goto LABEL_77;
LABEL_73:
      *(_OWORD *)v31 = xmmword_227B1D1D0;
      v31[2] = 0xFF000000000000;
      v41 = v31 + 3;
      qword_253DF24F8 = (uint64_t)(v31 + 3);
      v42 = qword_253DF2500;
      if ((unint64_t)(v31 + 3) < qword_253DF2500)
        goto LABEL_91;
      goto LABEL_95;
    }
  }
  operator delete(v12);
  qword_253DF24F8 = (uint64_t)v21;
  v22 = qword_253DF2500;
  if ((unint64_t)v21 >= qword_253DF2500)
    goto LABEL_59;
LABEL_55:
  *(_OWORD *)v21 = xmmword_227B1D1C0;
  v21[2] = 4160749568;
  v31 = v21 + 3;
  qword_253DF24F8 = (uint64_t)(v21 + 3);
  v32 = qword_253DF2500;
  if ((unint64_t)(v21 + 3) < qword_253DF2500)
    goto LABEL_73;
LABEL_77:
  v43 = qword_253DF24F0;
  v44 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v31 - qword_253DF24F0) >> 3);
  v45 = v44 + 1;
  if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_237;
  v46 = 0xAAAAAAAAAAAAAAABLL * ((v32 - qword_253DF24F0) >> 3);
  if (2 * v46 > v45)
    v45 = 2 * v46;
  if (v46 >= 0x555555555555555)
    v47 = 0xAAAAAAAAAAAAAAALL;
  else
    v47 = v45;
  if (v47)
  {
    if (v47 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_238;
    v48 = operator new(24 * v47);
  }
  else
  {
    v48 = 0;
  }
  v49 = (uint64_t)v48 + 24 * v44;
  *(_OWORD *)v49 = xmmword_227B1D1D0;
  *(_QWORD *)(v49 + 16) = 0xFF000000000000;
  v41 = (_QWORD *)(v49 + 24);
  if (v31 == (_QWORD *)v43)
  {
    qword_253DF24F0 = v49;
    qword_253DF24F8 = v49 + 24;
    qword_253DF2500 = (uint64_t)v48 + 24 * v47;
  }
  else
  {
    do
    {
      v50 = *(_OWORD *)(v31 - 3);
      *(_QWORD *)(v49 - 8) = *(v31 - 1);
      *(_OWORD *)(v49 - 24) = v50;
      v49 -= 24;
      v31 -= 3;
    }
    while (v31 != (_QWORD *)v43);
    v31 = (_QWORD *)qword_253DF24F0;
    qword_253DF24F0 = v49;
    qword_253DF24F8 = (uint64_t)v41;
    qword_253DF2500 = (uint64_t)v48 + 24 * v47;
    if (!v31)
    {
      qword_253DF24F8 = (uint64_t)v41;
      v42 = qword_253DF2500;
      if ((unint64_t)v41 < qword_253DF2500)
        goto LABEL_91;
LABEL_95:
      v53 = qword_253DF24F0;
      v54 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v41 - qword_253DF24F0) >> 3);
      v55 = v54 + 1;
      if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_237;
      v56 = 0xAAAAAAAAAAAAAAABLL * ((v42 - qword_253DF24F0) >> 3);
      if (2 * v56 > v55)
        v55 = 2 * v56;
      if (v56 >= 0x555555555555555)
        v57 = 0xAAAAAAAAAAAAAAALL;
      else
        v57 = v55;
      if (v57)
      {
        if (v57 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_238;
        v58 = operator new(24 * v57);
      }
      else
      {
        v58 = 0;
      }
      v59 = (uint64_t)v58 + 24 * v54;
      *(_OWORD *)v59 = xmmword_227B1D1E0;
      *(_QWORD *)(v59 + 16) = 0x800000000000000;
      v51 = (_QWORD *)(v59 + 24);
      if (v41 == (_QWORD *)v53)
      {
        qword_253DF24F0 = v59;
        qword_253DF24F8 = v59 + 24;
        qword_253DF2500 = (uint64_t)v58 + 24 * v57;
      }
      else
      {
        do
        {
          v60 = *(_OWORD *)(v41 - 3);
          *(_QWORD *)(v59 - 8) = *(v41 - 1);
          *(_OWORD *)(v59 - 24) = v60;
          v59 -= 24;
          v41 -= 3;
        }
        while (v41 != (_QWORD *)v53);
        v41 = (_QWORD *)qword_253DF24F0;
        qword_253DF24F0 = v59;
        qword_253DF24F8 = (uint64_t)v51;
        qword_253DF2500 = (uint64_t)v58 + 24 * v57;
        if (!v41)
        {
          qword_253DF24F8 = (uint64_t)v51;
          v52 = qword_253DF2500;
          if ((unint64_t)v51 >= qword_253DF2500)
            goto LABEL_113;
          goto LABEL_109;
        }
      }
      operator delete(v41);
      qword_253DF24F8 = (uint64_t)v51;
      v52 = qword_253DF2500;
      if ((unint64_t)v51 >= qword_253DF2500)
        goto LABEL_113;
LABEL_109:
      *(_OWORD *)v51 = xmmword_227B1D1F0;
      v51[2] = 0x1000000000000000;
      v61 = v51 + 3;
      qword_253DF24F8 = (uint64_t)(v51 + 3);
      v62 = qword_253DF2500;
      if ((unint64_t)(v51 + 3) < qword_253DF2500)
        goto LABEL_127;
      goto LABEL_131;
    }
  }
  operator delete(v31);
  qword_253DF24F8 = (uint64_t)v41;
  v42 = qword_253DF2500;
  if ((unint64_t)v41 >= qword_253DF2500)
    goto LABEL_95;
LABEL_91:
  *(_OWORD *)v41 = xmmword_227B1D1E0;
  v41[2] = 0x800000000000000;
  v51 = v41 + 3;
  qword_253DF24F8 = (uint64_t)(v41 + 3);
  v52 = qword_253DF2500;
  if ((unint64_t)(v41 + 3) < qword_253DF2500)
    goto LABEL_109;
LABEL_113:
  v63 = qword_253DF24F0;
  v64 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v51 - qword_253DF24F0) >> 3);
  v65 = v64 + 1;
  if (v64 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_237;
  v66 = 0xAAAAAAAAAAAAAAABLL * ((v52 - qword_253DF24F0) >> 3);
  if (2 * v66 > v65)
    v65 = 2 * v66;
  if (v66 >= 0x555555555555555)
    v67 = 0xAAAAAAAAAAAAAAALL;
  else
    v67 = v65;
  if (v67)
  {
    if (v67 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_238;
    v68 = operator new(24 * v67);
  }
  else
  {
    v68 = 0;
  }
  v69 = (uint64_t)v68 + 24 * v64;
  *(_OWORD *)v69 = xmmword_227B1D1F0;
  *(_QWORD *)(v69 + 16) = 0x1000000000000000;
  v61 = (_QWORD *)(v69 + 24);
  if (v51 == (_QWORD *)v63)
  {
    qword_253DF24F0 = v69;
    qword_253DF24F8 = v69 + 24;
    qword_253DF2500 = (uint64_t)v68 + 24 * v67;
  }
  else
  {
    do
    {
      v70 = *(_OWORD *)(v51 - 3);
      *(_QWORD *)(v69 - 8) = *(v51 - 1);
      *(_OWORD *)(v69 - 24) = v70;
      v69 -= 24;
      v51 -= 3;
    }
    while (v51 != (_QWORD *)v63);
    v51 = (_QWORD *)qword_253DF24F0;
    qword_253DF24F0 = v69;
    qword_253DF24F8 = (uint64_t)v61;
    qword_253DF2500 = (uint64_t)v68 + 24 * v67;
    if (!v51)
    {
      qword_253DF24F8 = (uint64_t)v61;
      v62 = qword_253DF2500;
      if ((unint64_t)v61 < qword_253DF2500)
        goto LABEL_127;
LABEL_131:
      v73 = qword_253DF24F0;
      v74 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v61 - qword_253DF24F0) >> 3);
      v75 = v74 + 1;
      if (v74 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_237;
      v76 = 0xAAAAAAAAAAAAAAABLL * ((v62 - qword_253DF24F0) >> 3);
      if (2 * v76 > v75)
        v75 = 2 * v76;
      if (v76 >= 0x555555555555555)
        v77 = 0xAAAAAAAAAAAAAAALL;
      else
        v77 = v75;
      if (v77)
      {
        if (v77 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_238;
        v78 = operator new(24 * v77);
      }
      else
      {
        v78 = 0;
      }
      v79 = (uint64_t)v78 + 24 * v74;
      *(_OWORD *)v79 = xmmword_227B1D200;
      *(_QWORD *)(v79 + 16) = 0xFF00000000;
      v71 = (_QWORD *)(v79 + 24);
      if (v61 == (_QWORD *)v73)
      {
        qword_253DF24F0 = v79;
        qword_253DF24F8 = v79 + 24;
        qword_253DF2500 = (uint64_t)v78 + 24 * v77;
      }
      else
      {
        do
        {
          v80 = *(_OWORD *)(v61 - 3);
          *(_QWORD *)(v79 - 8) = *(v61 - 1);
          *(_OWORD *)(v79 - 24) = v80;
          v79 -= 24;
          v61 -= 3;
        }
        while (v61 != (_QWORD *)v73);
        v61 = (_QWORD *)qword_253DF24F0;
        qword_253DF24F0 = v79;
        qword_253DF24F8 = (uint64_t)v71;
        qword_253DF2500 = (uint64_t)v78 + 24 * v77;
        if (!v61)
        {
          qword_253DF24F8 = (uint64_t)v71;
          v72 = qword_253DF2500;
          if ((unint64_t)v71 >= qword_253DF2500)
            goto LABEL_149;
          goto LABEL_145;
        }
      }
      operator delete(v61);
      qword_253DF24F8 = (uint64_t)v71;
      v72 = qword_253DF2500;
      if ((unint64_t)v71 >= qword_253DF2500)
        goto LABEL_149;
LABEL_145:
      *(_OWORD *)v71 = xmmword_227B1D210;
      v71[2] = 0x2000000000000000;
      v81 = v71 + 3;
      qword_253DF24F8 = (uint64_t)(v71 + 3);
      v82 = qword_253DF2500;
      if ((unint64_t)(v71 + 3) < qword_253DF2500)
        goto LABEL_163;
      goto LABEL_167;
    }
  }
  operator delete(v51);
  qword_253DF24F8 = (uint64_t)v61;
  v62 = qword_253DF2500;
  if ((unint64_t)v61 >= qword_253DF2500)
    goto LABEL_131;
LABEL_127:
  *(_OWORD *)v61 = xmmword_227B1D200;
  v61[2] = 0xFF00000000;
  v71 = v61 + 3;
  qword_253DF24F8 = (uint64_t)(v61 + 3);
  v72 = qword_253DF2500;
  if ((unint64_t)(v61 + 3) < qword_253DF2500)
    goto LABEL_145;
LABEL_149:
  v83 = qword_253DF24F0;
  v84 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v71 - qword_253DF24F0) >> 3);
  v85 = v84 + 1;
  if (v84 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_237;
  v86 = 0xAAAAAAAAAAAAAAABLL * ((v72 - qword_253DF24F0) >> 3);
  if (2 * v86 > v85)
    v85 = 2 * v86;
  if (v86 >= 0x555555555555555)
    v87 = 0xAAAAAAAAAAAAAAALL;
  else
    v87 = v85;
  if (v87)
  {
    if (v87 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_238;
    v88 = operator new(24 * v87);
  }
  else
  {
    v88 = 0;
  }
  v89 = (uint64_t)v88 + 24 * v84;
  *(_OWORD *)v89 = xmmword_227B1D210;
  *(_QWORD *)(v89 + 16) = 0x2000000000000000;
  v81 = (_QWORD *)(v89 + 24);
  if (v71 == (_QWORD *)v83)
  {
    qword_253DF24F0 = v89;
    qword_253DF24F8 = v89 + 24;
    qword_253DF2500 = (uint64_t)v88 + 24 * v87;
  }
  else
  {
    do
    {
      v90 = *(_OWORD *)(v71 - 3);
      *(_QWORD *)(v89 - 8) = *(v71 - 1);
      *(_OWORD *)(v89 - 24) = v90;
      v89 -= 24;
      v71 -= 3;
    }
    while (v71 != (_QWORD *)v83);
    v71 = (_QWORD *)qword_253DF24F0;
    qword_253DF24F0 = v89;
    qword_253DF24F8 = (uint64_t)v81;
    qword_253DF2500 = (uint64_t)v88 + 24 * v87;
    if (!v71)
    {
      qword_253DF24F8 = (uint64_t)v81;
      v82 = qword_253DF2500;
      if ((unint64_t)v81 < qword_253DF2500)
        goto LABEL_163;
LABEL_167:
      v93 = qword_253DF24F0;
      v94 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v81 - qword_253DF24F0) >> 3);
      v95 = v94 + 1;
      if (v94 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_237;
      v96 = 0xAAAAAAAAAAAAAAABLL * ((v82 - qword_253DF24F0) >> 3);
      if (2 * v96 > v95)
        v95 = 2 * v96;
      if (v96 >= 0x555555555555555)
        v97 = 0xAAAAAAAAAAAAAAALL;
      else
        v97 = v95;
      if (v97)
      {
        if (v97 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_238;
        v98 = operator new(24 * v97);
      }
      else
      {
        v98 = 0;
      }
      v99 = (uint64_t)v98 + 24 * v94;
      *(_OWORD *)v99 = xmmword_227B1D220;
      *(_QWORD *)(v99 + 16) = 0x1000000;
      v91 = (_QWORD *)(v99 + 24);
      if (v81 == (_QWORD *)v93)
      {
        qword_253DF24F0 = v99;
        qword_253DF24F8 = v99 + 24;
        qword_253DF2500 = (uint64_t)v98 + 24 * v97;
      }
      else
      {
        do
        {
          v100 = *(_OWORD *)(v81 - 3);
          *(_QWORD *)(v99 - 8) = *(v81 - 1);
          *(_OWORD *)(v99 - 24) = v100;
          v99 -= 24;
          v81 -= 3;
        }
        while (v81 != (_QWORD *)v93);
        v81 = (_QWORD *)qword_253DF24F0;
        qword_253DF24F0 = v99;
        qword_253DF24F8 = (uint64_t)v91;
        qword_253DF2500 = (uint64_t)v98 + 24 * v97;
        if (!v81)
        {
          qword_253DF24F8 = (uint64_t)v91;
          v92 = qword_253DF2500;
          if ((unint64_t)v91 >= qword_253DF2500)
            goto LABEL_185;
          goto LABEL_181;
        }
      }
      operator delete(v81);
      qword_253DF24F8 = (uint64_t)v91;
      v92 = qword_253DF2500;
      if ((unint64_t)v91 >= qword_253DF2500)
        goto LABEL_185;
LABEL_181:
      *(_OWORD *)v91 = xmmword_227B1D230;
      v91[2] = 0xC000000000000000;
      v101 = (char *)(v91 + 3);
      qword_253DF24F8 = (uint64_t)(v91 + 3);
      v102 = qword_253DF2500;
      if ((unint64_t)(v91 + 3) < qword_253DF2500)
        goto LABEL_199;
      goto LABEL_203;
    }
  }
  operator delete(v71);
  qword_253DF24F8 = (uint64_t)v81;
  v82 = qword_253DF2500;
  if ((unint64_t)v81 >= qword_253DF2500)
    goto LABEL_167;
LABEL_163:
  *(_OWORD *)v81 = xmmword_227B1D220;
  v81[2] = 0x1000000;
  v91 = v81 + 3;
  qword_253DF24F8 = (uint64_t)(v81 + 3);
  v92 = qword_253DF2500;
  if ((unint64_t)(v81 + 3) < qword_253DF2500)
    goto LABEL_181;
LABEL_185:
  v103 = qword_253DF24F0;
  v104 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v91 - qword_253DF24F0) >> 3);
  v105 = v104 + 1;
  if (v104 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_237;
  v106 = 0xAAAAAAAAAAAAAAABLL * ((v92 - qword_253DF24F0) >> 3);
  if (2 * v106 > v105)
    v105 = 2 * v106;
  if (v106 >= 0x555555555555555)
    v107 = 0xAAAAAAAAAAAAAAALL;
  else
    v107 = v105;
  if (v107)
  {
    if (v107 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_238;
    v108 = operator new(24 * v107);
  }
  else
  {
    v108 = 0;
  }
  v109 = (uint64_t)v108 + 24 * v104;
  *(_OWORD *)v109 = xmmword_227B1D230;
  *(_QWORD *)(v109 + 16) = 0xC000000000000000;
  v101 = (char *)(v109 + 24);
  if (v91 == (_QWORD *)v103)
  {
    qword_253DF24F0 = v109;
    qword_253DF24F8 = v109 + 24;
    qword_253DF2500 = (uint64_t)v108 + 24 * v107;
  }
  else
  {
    do
    {
      v110 = *(_OWORD *)(v91 - 3);
      *(_QWORD *)(v109 - 8) = *(v91 - 1);
      *(_OWORD *)(v109 - 24) = v110;
      v109 -= 24;
      v91 -= 3;
    }
    while (v91 != (_QWORD *)v103);
    v91 = (_QWORD *)qword_253DF24F0;
    qword_253DF24F0 = v109;
    qword_253DF24F8 = (uint64_t)v101;
    qword_253DF2500 = (uint64_t)v108 + 24 * v107;
    if (!v91)
    {
      qword_253DF24F8 = (uint64_t)v101;
      v102 = qword_253DF2500;
      if ((unint64_t)v101 < qword_253DF2500)
        goto LABEL_199;
LABEL_203:
      v113 = qword_253DF24F0;
      v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v101[-qword_253DF24F0] >> 3);
      v115 = v114 + 1;
      if (v114 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_237;
      v116 = 0xAAAAAAAAAAAAAAABLL * ((v102 - qword_253DF24F0) >> 3);
      if (2 * v116 > v115)
        v115 = 2 * v116;
      if (v116 >= 0x555555555555555)
        v117 = 0xAAAAAAAAAAAAAAALL;
      else
        v117 = v115;
      if (v117)
      {
        if (v117 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_238;
        v118 = operator new(24 * v117);
      }
      else
      {
        v118 = 0;
      }
      v119 = (uint64_t)v118 + 24 * v114;
      *(_OWORD *)v119 = xmmword_227B1D240;
      *(_QWORD *)(v119 + 16) = 16711680;
      v111 = (char *)(v119 + 24);
      if (v101 == (char *)v113)
      {
        qword_253DF24F0 = v119;
        qword_253DF24F8 = v119 + 24;
        qword_253DF2500 = (uint64_t)v118 + 24 * v117;
      }
      else
      {
        do
        {
          v120 = *(_OWORD *)(v101 - 24);
          *(_QWORD *)(v119 - 8) = *((_QWORD *)v101 - 1);
          *(_OWORD *)(v119 - 24) = v120;
          v119 -= 24;
          v101 -= 24;
        }
        while (v101 != (char *)v113);
        v101 = (char *)qword_253DF24F0;
        qword_253DF24F0 = v119;
        qword_253DF24F8 = (uint64_t)v111;
        qword_253DF2500 = (uint64_t)v118 + 24 * v117;
        if (!v101)
        {
          qword_253DF24F8 = (uint64_t)v111;
          v112 = qword_253DF2500;
          if ((unint64_t)v111 >= qword_253DF2500)
            goto LABEL_220;
          goto LABEL_217;
        }
      }
      operator delete(v101);
      qword_253DF24F8 = (uint64_t)v111;
      v112 = qword_253DF2500;
      if ((unint64_t)v111 >= qword_253DF2500)
        goto LABEL_220;
LABEL_217:
      *(_OWORD *)v111 = xmmword_227B1D250;
      *((_QWORD *)v111 + 2) = 65280;
      v121 = (uint64_t)(v111 + 24);
      goto LABEL_236;
    }
  }
  operator delete(v91);
  qword_253DF24F8 = (uint64_t)v101;
  v102 = qword_253DF2500;
  if ((unint64_t)v101 >= qword_253DF2500)
    goto LABEL_203;
LABEL_199:
  *(_OWORD *)v101 = xmmword_227B1D240;
  *((_QWORD *)v101 + 2) = 16711680;
  v111 = v101 + 24;
  qword_253DF24F8 = (uint64_t)(v101 + 24);
  v112 = qword_253DF2500;
  if ((unint64_t)(v101 + 24) < qword_253DF2500)
    goto LABEL_217;
LABEL_220:
  v122 = qword_253DF24F0;
  v123 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v111[-qword_253DF24F0] >> 3);
  v124 = v123 + 1;
  if (v123 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_237:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v125 = 0xAAAAAAAAAAAAAAABLL * ((v112 - qword_253DF24F0) >> 3);
  if (2 * v125 > v124)
    v124 = 2 * v125;
  if (v125 >= 0x555555555555555)
    v126 = 0xAAAAAAAAAAAAAAALL;
  else
    v126 = v124;
  if (v126)
  {
    if (v126 <= 0xAAAAAAAAAAAAAAALL)
    {
      v127 = operator new(24 * v126);
      goto LABEL_230;
    }
LABEL_238:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v127 = 0;
LABEL_230:
  v128 = (uint64_t)v127 + 24 * v123;
  *(_OWORD *)v128 = xmmword_227B1D250;
  *(_QWORD *)(v128 + 16) = 65280;
  v121 = v128 + 24;
  if (v111 == (char *)v122)
  {
    qword_253DF24F0 = (uint64_t)v127 + 24 * v123;
    qword_253DF24F8 = v128 + 24;
    qword_253DF2500 = (uint64_t)v127 + 24 * v126;
LABEL_235:
    operator delete(v111);
    goto LABEL_236;
  }
  do
  {
    v129 = *(_OWORD *)(v111 - 24);
    *(_QWORD *)(v128 - 8) = *((_QWORD *)v111 - 1);
    *(_OWORD *)(v128 - 24) = v129;
    v128 -= 24;
    v111 -= 24;
  }
  while (v111 != (char *)v122);
  v111 = (char *)qword_253DF24F0;
  qword_253DF24F0 = v128;
  qword_253DF24F8 = v121;
  qword_253DF2500 = (uint64_t)v127 + 24 * v126;
  if (v111)
    goto LABEL_235;
LABEL_236:
  qword_253DF24F8 = v121;
  v130 = *(_QWORD *)(v1 + 192);
  v131 = MEMORY[0x24BDAC760];
  v135[0] = MEMORY[0x24BDAC760];
  v135[1] = 0x40000000;
  v135[2] = ___ZN4coex16ARICommandDriver4initEv_block_invoke_3;
  v135[3] = &__block_descriptor_tmp_7;
  v135[4] = v1;
  *(_QWORD *)buf = v135;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v130, 0, (uint64_t *)buf);
  v132 = *(_QWORD *)(v1 + 192);
  v134[0] = v131;
  v134[1] = 0x40000000;
  v134[2] = ___ZN4coex16ARICommandDriver4initEv_block_invoke_4;
  v134[3] = &__block_descriptor_tmp_5_2;
  v134[4] = v1;
  *(_QWORD *)buf = v134;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v132, 1, (uint64_t *)buf);
  return ice::Client::start(*(ice::Client **)(v1 + 192));
}

uint64_t ___ZN4coex16ARICommandDriver4initEv_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  __int128 v4;
  pthread_mutex_t *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  __int128 v30;
  uint64_t **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  _QWORD v50[4];
  __int128 v51;
  __int128 v52;
  __int128 *p_buf;
  uint64_t v54;
  uint64_t v55;
  uint64_t **v56;
  unsigned int *v57;
  __int128 v58;
  __int128 v59;
  std::runtime_error v60;
  __int128 buf;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEBUG, "#D Started", (uint8_t *)&buf, 2u);
  }
  v3 = *(_QWORD *)(v1 + 128);
  v56 = 0;
  v57 = 0;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = v4;
  v70 = v4;
  v67 = v4;
  v68 = v4;
  v65 = v4;
  v66 = v4;
  v63 = v4;
  v64 = v4;
  buf = v4;
  v62 = v4;
  v5 = *(pthread_mutex_t **)(v3 + 24);
  *(_QWORD *)&v71 = 10;
  *((_QWORD *)&v71 + 1) = &buf;
  *(_QWORD *)&v72 = 0;
  *((_QWORD *)&v72 + 1) = v5;
  pthread_mutex_lock(v5);
  v6 = *(unsigned int **)(v3 + 8);
  if (!v6)
  {
    v8 = *(uint64_t ***)v3;
    goto LABEL_16;
  }
  v7 = atomic_load(v6 + 2);
  v8 = *(uint64_t ***)v3;
  if (v7 == 1)
  {
    v9 = *v8;
    v10 = *(_QWORD *)(v3 + 16);
    if ((uint64_t *)v10 == *v8)
    {
      v10 = v9[1];
      *(_QWORD *)&v58 = v10;
      if (v9 == (uint64_t *)v10)
      {
LABEL_12:
        *(_QWORD *)(v3 + 16) = v10;
        goto LABEL_13;
      }
    }
    else
    {
      *(_QWORD *)&v58 = *(_QWORD *)(v3 + 16);
    }
    v11 = *(_QWORD *)(v10 + 16);
    if (*(_BYTE *)(v11 + 24))
    {
      v10 = *(_QWORD *)(v10 + 8);
    }
    else
    {
      v10 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v11 + 64), (uint64_t **)&v58);
      v8 = *(uint64_t ***)v3;
    }
    goto LABEL_12;
  }
LABEL_13:
  v6 = *(unsigned int **)(v3 + 8);
  if (v6)
  {
    v12 = v6 + 2;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
LABEL_16:
  v14 = v57;
  v56 = v8;
  v57 = v6;
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
      v18 = v14 + 3;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
    }
  }
  pthread_mutex_unlock(*((pthread_mutex_t **)&v72 + 1));
  v21 = *((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    if ((uint64_t)v72 - 1 >= 0)
    {
      v22 = *((_QWORD *)&v71 + 1) + 16 * v72;
      do
      {
        v23 = *(unsigned int **)(v22 - 8);
        if (v23)
        {
          v24 = v23 + 2;
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
            v27 = v23 + 3;
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
              (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 24))(v23);
          }
        }
        v22 -= 16;
      }
      while (v22 > v21);
    }
    if ((unint64_t)v71 >= 0xB)
      operator delete(*((void **)&v71 + 1));
  }
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v80 = v30;
  v75 = v30;
  v76 = 0xAAAAAAAAAAAAAAAALL;
  v73 = v30;
  v74 = v30;
  v71 = v30;
  v72 = v30;
  v69 = v30;
  v70 = v30;
  v67 = v30;
  v68 = v30;
  v65 = v30;
  v66 = v30;
  v63 = v30;
  v64 = v30;
  buf = v30;
  v62 = v30;
  LOBYTE(buf) = 0;
  v77 = 10;
  v78 = (char *)&buf + 8;
  *(_QWORD *)((char *)&v80 + 4) = 0;
  v79 = 0;
  v81 = 0;
  v31 = v56;
  v32 = (uint64_t)*v56;
  p_buf = &buf;
  v54 = v3;
  v55 = v32;
  *(_QWORD *)&v51 = *(_QWORD *)(v32 + 8);
  *((_QWORD *)&v51 + 1) = v32;
  *(_QWORD *)&v52 = &buf;
  *((_QWORD *)&v52 + 1) = v32;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(&v51);
  v50[0] = *v31;
  v50[1] = v50[0];
  v50[2] = &buf;
  v50[3] = v50[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(v50);
  v58 = v51;
  v59 = v52;
  v33 = v50[0];
  v34 = v51;
  if ((_QWORD)v51 == v50[0])
  {
    if (DWORD2(v80) <= DWORD1(v80))
      goto LABEL_58;
LABEL_57:
    boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::force_cleanup_connections(v54, v55);
    goto LABEL_58;
  }
  v35 = (_BYTE *)v59;
  if (!*(_BYTE *)v59)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v51 + 16) + 32);
    v37 = *(_QWORD *)(v36 + 24);
    if (!v37)
    {
      std::runtime_error::runtime_error(&v60, "call to empty boost::function");
      v60.__vftable = (std::runtime_error_vtbl *)&unk_24F034D70;
      boost::throw_exception<boost::bad_function_call>(&v60);
    }
    (*(void (**)(uint64_t))((v37 & 0xFFFFFFFFFFFFFFFELL) + 8))(v36 + 32);
    if (!*v35)
      *v35 = 1;
  }
  *(_QWORD *)&v58 = *(_QWORD *)(v34 + 8);
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(&v58);
  v38 = (_BYTE *)v59;
  if (*(_BYTE *)v59)
    *(_BYTE *)v59 = 0;
  for (i = v58; (_QWORD)v58 != v33; i = v58)
  {
    v40 = *(_QWORD *)(*(_QWORD *)(i + 16) + 32);
    v41 = *(_QWORD *)(v40 + 24);
    if (!v41)
    {
      std::runtime_error::runtime_error(&v60, "call to empty boost::function");
      v60.__vftable = (std::runtime_error_vtbl *)&unk_24F034D70;
      boost::throw_exception<boost::bad_function_call>(&v60);
    }
    (*(void (**)(uint64_t))((v41 & 0xFFFFFFFFFFFFFFFELL) + 8))(v40 + 32);
    if (!*v38)
      *v38 = 1;
    *(_QWORD *)&v58 = *(_QWORD *)(i + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(&v58);
    v38 = (_BYTE *)v59;
    if (*(_BYTE *)v59)
      *(_BYTE *)v59 = 0;
  }
  if (*((_DWORD *)p_buf + 70) > *((_DWORD *)p_buf + 69))
    goto LABEL_57;
LABEL_58:
  result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>>::~slot_call_iterator_cache((uint64_t)&buf);
  v43 = v57;
  if (v57)
  {
    v44 = v57 + 2;
    do
    {
      v45 = __ldaxr(v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v44));
    if (!v46)
    {
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v43 + 16))(v43);
      v47 = v43 + 3;
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v43 + 24))(v43);
    }
  }
  return result;
}

void sub_227AC0314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a29);
  JUMPOUT(0x227AC0488);
}

void sub_227AC0324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::runtime_error a27)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  std::runtime_error::~runtime_error(&a27);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v29);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>>::~slot_call_iterator_cache((uint64_t)&v31);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v30);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a23 + 16));
  __cxa_rethrow();
}

void sub_227AC0384(_Unwind_Exception *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v4);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>>::~slot_call_iterator_cache((uint64_t)&v6);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v5);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x227AC0354);
}

void sub_227AC03BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,unint64_t a49,char *__p,uint64_t a51)
{
  char *v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;

  if (__p)
  {
    if (a51 - 1 >= 0)
    {
      v51 = &__p[16 * a51];
      do
      {
        v52 = (unsigned int *)*((_QWORD *)v51 - 1);
        if (v52)
        {
          v53 = v52 + 2;
          do
          {
            v54 = __ldaxr(v53);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v53));
          if (!v55)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 16))(v52);
            v56 = v52 + 3;
            do
            {
              v57 = __ldaxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
              (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 24))(v52);
          }
        }
        v51 -= 16;
      }
      while (v51 > __p);
    }
    if (a49 >= 0xB)
      operator delete(__p);
  }
  JUMPOUT(0x227AC0488);
}

void sub_227AC0464(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x227AC0490);
}

void ___ZN4coex16ARICommandDriver4initEv_block_invoke_4(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v2 = 0;
    _os_log_debug_impl(&dword_227A72000, v1, OS_LOG_TYPE_DEBUG, "#D Stopped", v2, 2u);
  }
}

void coex::ARICommandDriver::set(uint64_t a1, const void **a2, int a3, uint64_t a4)
{
  const void *v7;
  void *v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD v11[5];
  CFTypeRef cf;
  void *aBlock;
  dispatch_object_t object;
  int v15;

  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1174405120;
  v11[2] = ___ZN4coex16ARICommandDriver3setEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  v11[3] = &__block_descriptor_tmp_7_2;
  v7 = *a2;
  v11[4] = a1;
  cf = v7;
  if (v7)
    CFRetain(v7);
  v15 = a3;
  v8 = *(void **)a4;
  if (*(_QWORD *)a4)
    v8 = _Block_copy(v8);
  v9 = (uint64_t *)(a1 + 72);
  v10 = *(NSObject **)(a4 + 8);
  aBlock = v8;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped(v9, (uint64_t)v11);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
}

void ___ZN4coex16ARICommandDriver3setEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1)
{
  const __CFDictionary *v2;
  uint64_t v3;
  int v4;
  const void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  const __CFDictionary *v10;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(const __CFDictionary **)(a1 + 40);
  v10 = v2;
  if (v2)
    CFRetain(v2);
  v4 = *(_DWORD *)(a1 + 64);
  v5 = *(const void **)(a1 + 48);
  if (v5)
  {
    v6 = _Block_copy(v5);
    v7 = *(NSObject **)(a1 + 56);
    v8 = v6;
    v9 = v7;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  v7 = *(NSObject **)(a1 + 56);
  v8 = 0;
  v9 = v7;
  if (v7)
LABEL_5:
    dispatch_retain(v7);
LABEL_6:
  coex::ARICommandDriver::set_sync(v3, &v10, v4, (uint64_t)&v8);
  if (v7)
    dispatch_release(v7);
  if (v6)
    _Block_release(v6);
  if (v2)
    CFRelease(v2);
}

void sub_227AC06AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void coex::ARICommandDriver::set_sync(uint64_t a1, const __CFDictionary **a2, int a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  CFTypeID v19;
  CFTypeID TypeID;
  uint64_t v21;
  const void *v22;
  const void *v23;
  CFTypeID v24;
  CFTypeID v25;
  const __CFDictionary *v26;
  void *v27;
  const void *v28;
  const void *v29;
  CFTypeID v30;
  CFTypeID v31;
  void *v32;
  const void *v33;
  const void *v34;
  CFTypeID v35;
  CFTypeID v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  const void *v41;
  CFTypeID v42;
  CFTypeID v43;
  void *v44;
  const void *v45;
  const void *v46;
  CFTypeID v47;
  CFTypeID v48;
  const void *v49;
  char v50;
  void *v51;
  const void *v52;
  CFTypeID v53;
  CFTypeID v54;
  const void *v55;
  const void *v56;
  CFTypeID v57;
  CFTypeID v58;
  void *v59;
  const void *v60;
  const void *v61;
  CFTypeID v62;
  CFTypeID v63;
  void *v64;
  const void *v65;
  const void *v66;
  CFTypeID v67;
  CFTypeID v68;
  void *v69;
  const void *v70;
  const void *v71;
  CFTypeID v72;
  CFTypeID v73;
  void *v74;
  NSObject *v75;
  _QWORD block[5];
  void *v77;
  NSObject *v78;
  const __CFDictionary *v79;
  void *v80;
  NSObject *v81;
  const __CFDictionary *v82;
  void *v83;
  NSObject *v84;
  const __CFDictionary *v85;
  void *v86;
  NSObject *v87;
  const __CFDictionary *v88;
  void *v89;
  NSObject *v90;
  const __CFDictionary *v91;
  const __CFDictionary *v92;
  void *v93;
  NSObject *v94;
  const __CFDictionary *v95;
  void *v96;
  NSObject *v97;
  const void *v98;
  void *v99;
  NSObject *v100;
  const __CFDictionary *v101;
  void *v102;
  NSObject *v103;
  const __CFDictionary *v104;
  _QWORD v105[2];
  _QWORD aBlock[5];
  dispatch_object_t v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD v110[5];
  const void *v111;
  dispatch_object_t v112;

  v8 = dispatch_group_create();
  v9 = v8;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(v9);
  }
  v110[0] = 0;
  v110[1] = v110;
  v110[2] = 0x3802000000;
  v110[3] = __Block_byref_object_copy_;
  v110[4] = __Block_byref_object_dispose_;
  v111 = (const void *)0xAAAAAAAAAAAAAAAALL;
  v112 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v10 = *(void **)a4;
  if (*(_QWORD *)a4)
    v10 = _Block_copy(v10);
  v11 = *(NSObject **)(a4 + 8);
  v111 = v10;
  v112 = v11;
  if (v11)
    dispatch_retain(v11);
  v12 = MEMORY[0x24BDAC760];
  v108 = 0xAAAAAAAAAAAAAAAALL;
  v109 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex16ARICommandDriver8set_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  aBlock[3] = &unk_24F035F78;
  v107 = v9;
  if (v9)
  {
    dispatch_retain(v9);
    dispatch_group_enter(v107);
  }
  aBlock[4] = v110;
  v13 = _Block_copy(aBlock);
  v14 = *(NSObject **)(a1 + 88);
  if (v14)
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  if (v13)
  {
    v15 = _Block_copy(v13);
    v108 = (unint64_t)v15;
    v109 = (unint64_t)v14;
    if (!v14)
      goto LABEL_14;
    goto LABEL_13;
  }
  v15 = 0;
  v108 = 0;
  v109 = (unint64_t)v14;
  if (v14)
  {
LABEL_13:
    dispatch_retain(v14);
    dispatch_release(v14);
  }
LABEL_14:
  if (v13)
    _Block_release(v13);
  v105[0] = 0xAAAAAAAAAAAAAAAALL;
  v105[1] = 0xAAAAAAAAAAAAAAAALL;
  v16 = ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v105, *a2);
  v17 = (const void *)(*(uint64_t (**)(uint64_t, _QWORD))v105[0])(v16, *MEMORY[0x24BED3698]);
  v18 = v17;
  if (v17)
  {
    v19 = CFGetTypeID(v17);
    TypeID = CFDictionaryGetTypeID();
    CFRelease(v18);
    if (v19 == TypeID)
      goto LABEL_20;
  }
  v22 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v105[0])(v105, *MEMORY[0x24BED35E0]);
  v23 = v22;
  if (v22)
  {
    v24 = CFGetTypeID(v22);
    v25 = CFDictionaryGetTypeID();
    CFRelease(v23);
    if (v24 == v25)
    {
LABEL_20:
      v26 = *a2;
      v104 = v26;
      if (v26)
        CFRetain(v26);
      if (v15)
      {
        v27 = _Block_copy(v15);
        v102 = v27;
        v103 = v14;
        if (!v14)
        {
LABEL_25:
          coex::ARICommandDriver::setWLANState_sync(a1, v21, (uint64_t)&v102);
          if (v14)
            dispatch_release(v14);
          if (v27)
            _Block_release(v27);
          if (v26)
            CFRelease(v26);
          goto LABEL_31;
        }
      }
      else
      {
        v27 = 0;
        v102 = 0;
        v103 = v14;
        if (!v14)
          goto LABEL_25;
      }
      dispatch_retain(v14);
      goto LABEL_25;
    }
  }
LABEL_31:
  v28 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v105[0])(v105, *MEMORY[0x24BED3530]);
  v29 = v28;
  if (!v28)
    goto LABEL_41;
  v30 = CFGetTypeID(v28);
  v31 = CFDictionaryGetTypeID();
  CFRelease(v29);
  if (v30 != v31)
    goto LABEL_41;
  v101 = (const __CFDictionary *)v29;
  CFRetain(v29);
  if (!v15)
  {
    v32 = 0;
    v99 = 0;
    v100 = v14;
    if (!v14)
      goto LABEL_36;
    goto LABEL_35;
  }
  v32 = _Block_copy(v15);
  v99 = v32;
  v100 = v14;
  if (v14)
LABEL_35:
    dispatch_retain(v14);
LABEL_36:
  coex::ARICommandDriver::setPolicy_sync(a1, &v101, a3, (uint64_t)&v99);
  if (v14)
    dispatch_release(v14);
  if (v32)
    _Block_release(v32);
  CFRelease(v29);
LABEL_41:
  v33 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v105[0])(v105, *MEMORY[0x24BED35A8]);
  v34 = v33;
  if (!v33)
    goto LABEL_51;
  v35 = CFGetTypeID(v33);
  v36 = CFDictionaryGetTypeID();
  CFRelease(v34);
  if (v35 != v36)
    goto LABEL_51;
  v98 = v34;
  CFRetain(v34);
  if (!v15)
  {
    v39 = 0;
    v96 = 0;
    v97 = v14;
    if (!v14)
      goto LABEL_46;
    goto LABEL_45;
  }
  v39 = _Block_copy(v15);
  v96 = v39;
  v97 = v14;
  if (v14)
LABEL_45:
    dispatch_retain(v14);
LABEL_46:
  coex::ARICommandDriver::setBandFilterInfo_sync(a1, v37, v38, (uint64_t)&v96);
  if (v14)
    dispatch_release(v14);
  if (v39)
    _Block_release(v39);
  CFRelease(v34);
LABEL_51:
  v40 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v105[0])(v105, *MEMORY[0x24BED3678]);
  v41 = v40;
  if (!v40)
    goto LABEL_61;
  v42 = CFGetTypeID(v40);
  v43 = CFDictionaryGetTypeID();
  CFRelease(v41);
  if (v42 != v43)
    goto LABEL_61;
  v95 = (const __CFDictionary *)v41;
  CFRetain(v41);
  if (!v15)
  {
    v44 = 0;
    v93 = 0;
    v94 = v14;
    if (!v14)
      goto LABEL_56;
    goto LABEL_55;
  }
  v44 = _Block_copy(v15);
  v93 = v44;
  v94 = v14;
  if (v14)
LABEL_55:
    dispatch_retain(v14);
LABEL_56:
  coex::ARICommandDriver::setScanFreqBandFilter_sync((_QWORD *)a1, &v95, a3, (uint64_t)&v93);
  if (v14)
    dispatch_release(v14);
  if (v44)
    _Block_release(v44);
  CFRelease(v41);
LABEL_61:
  v45 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v105[0])(v105, *MEMORY[0x24BED3570]);
  v46 = v45;
  if (v45)
  {
    v47 = CFGetTypeID(v45);
    v48 = CFDictionaryGetTypeID();
    CFRelease(v46);
    if (v47 == v48)
    {
      v92 = (const __CFDictionary *)v46;
      CFRetain(v46);
      v49 = 0;
      v91 = 0;
      v50 = 1;
      if (v15)
        goto LABEL_64;
LABEL_77:
      v51 = 0;
      v89 = 0;
      v90 = v14;
      if (!v14)
        goto LABEL_66;
      goto LABEL_65;
    }
  }
  v52 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v105[0])(v105, *MEMORY[0x24BED3580]);
  v49 = v52;
  if (!v52)
    goto LABEL_79;
  v53 = CFGetTypeID(v52);
  v54 = CFDictionaryGetTypeID();
  CFRelease(v49);
  if (v53 != v54)
    goto LABEL_79;
  v91 = (const __CFDictionary *)v49;
  v92 = 0;
  CFRetain(v49);
  v46 = 0;
  v50 = 0;
  if (!v15)
    goto LABEL_77;
LABEL_64:
  v51 = _Block_copy(v15);
  v89 = v51;
  v90 = v14;
  if (v14)
LABEL_65:
    dispatch_retain(v14);
LABEL_66:
  coex::ARICommandDriver::setLinkQualityMode_sync((_QWORD *)a1, &v92, &v91, a3, (uint64_t)&v89);
  if (v14)
    dispatch_release(v14);
  if (v51)
    _Block_release(v51);
  if ((v50 & 1) == 0)
    CFRelease(v49);
  if (v46)
    CFRelease(v46);
LABEL_79:
  v55 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v105[0])(v105, *MEMORY[0x24BED3598]);
  v56 = v55;
  if (!v55)
    goto LABEL_89;
  v57 = CFGetTypeID(v55);
  v58 = CFDictionaryGetTypeID();
  CFRelease(v56);
  if (v57 != v58)
    goto LABEL_89;
  v88 = (const __CFDictionary *)v56;
  CFRetain(v56);
  if (!v15)
  {
    v59 = 0;
    v86 = 0;
    v87 = v14;
    if (!v14)
      goto LABEL_84;
    goto LABEL_83;
  }
  v59 = _Block_copy(v15);
  v86 = v59;
  v87 = v14;
  if (v14)
LABEL_83:
    dispatch_retain(v14);
LABEL_84:
  coex::ARICommandDriver::setWiFiStatus_sync((_QWORD *)a1, &v88, (uint64_t)&v86);
  if (v14)
    dispatch_release(v14);
  if (v59)
    _Block_release(v59);
  CFRelease(v56);
LABEL_89:
  v60 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v105[0])(v105, *MEMORY[0x24BED3578]);
  v61 = v60;
  if (!v60)
    goto LABEL_99;
  v62 = CFGetTypeID(v60);
  v63 = CFDictionaryGetTypeID();
  CFRelease(v61);
  if (v62 != v63)
    goto LABEL_99;
  v85 = (const __CFDictionary *)v61;
  CFRetain(v61);
  if (!v15)
  {
    v64 = 0;
    v83 = 0;
    v84 = v14;
    if (!v14)
      goto LABEL_94;
    goto LABEL_93;
  }
  v64 = _Block_copy(v15);
  v83 = v64;
  v84 = v14;
  if (v14)
LABEL_93:
    dispatch_retain(v14);
LABEL_94:
  coex::ARICommandDriver::setLAAConfig_sync((_QWORD *)a1, &v85, a3, (uint64_t)&v83);
  if (v14)
    dispatch_release(v14);
  if (v64)
    _Block_release(v64);
  CFRelease(v61);
LABEL_99:
  v65 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v105[0])(v105, *MEMORY[0x24BED3638]);
  v66 = v65;
  if (!v65)
    goto LABEL_109;
  v67 = CFGetTypeID(v65);
  v68 = CFDictionaryGetTypeID();
  CFRelease(v66);
  if (v67 != v68)
    goto LABEL_109;
  v82 = (const __CFDictionary *)v66;
  CFRetain(v66);
  if (!v15)
  {
    v69 = 0;
    v80 = 0;
    v81 = v14;
    if (!v14)
      goto LABEL_104;
    goto LABEL_103;
  }
  v69 = _Block_copy(v15);
  v80 = v69;
  v81 = v14;
  if (v14)
LABEL_103:
    dispatch_retain(v14);
LABEL_104:
  coex::ARICommandDriver::setFCMBCMAntennaMode_sync((_QWORD *)a1, &v82, (uint64_t)&v80);
  if (v14)
    dispatch_release(v14);
  if (v69)
    _Block_release(v69);
  CFRelease(v66);
LABEL_109:
  v70 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v105[0])(v105, *MEMORY[0x24BED35B0]);
  v71 = v70;
  if (!v70)
    goto LABEL_119;
  v72 = CFGetTypeID(v70);
  v73 = CFDictionaryGetTypeID();
  CFRelease(v71);
  if (v72 != v73)
    goto LABEL_119;
  v79 = (const __CFDictionary *)v71;
  CFRetain(v71);
  if (!v15)
  {
    v74 = 0;
    v77 = 0;
    v78 = v14;
    if (!v14)
      goto LABEL_114;
    goto LABEL_113;
  }
  v74 = _Block_copy(v15);
  v77 = v74;
  v78 = v14;
  if (v14)
LABEL_113:
    dispatch_retain(v14);
LABEL_114:
  coex::ARICommandDriver::setRC1Duration_sync((_QWORD *)a1, &v79, a3, (uint64_t)&v77);
  if (v14)
    dispatch_release(v14);
  if (v74)
    _Block_release(v74);
  CFRelease(v71);
LABEL_119:
  v75 = *(NSObject **)(a1 + 88);
  block[0] = v12;
  block[1] = 0x40000000;
  block[2] = ___ZN4coex16ARICommandDriver8set_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_13;
  block[3] = &unk_24F035FB0;
  block[4] = v110;
  dispatch_group_notify(v9, v75, block);
  MEMORY[0x22E2A2E9C](v105);
  if (v14)
    dispatch_release(v14);
  if (v15)
    _Block_release(v15);
  if (v107)
  {
    dispatch_group_leave(v107);
    if (v107)
      dispatch_release(v107);
  }
  _Block_object_dispose(v110, 8);
  if (v112)
    dispatch_release(v112);
  if (v111)
    _Block_release(v111);
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
    dispatch_release(v9);
  }
}

void sub_227AC1080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  NSObject *v7;
  uint64_t v8;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  MEMORY[0x22E2A2E9C](v8 - 224);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)(v8 - 160));
  v10 = *(NSObject **)(v8 - 168);
  if (v10)
  {
    dispatch_group_leave(v10);
    v11 = *(NSObject **)(v8 - 168);
    if (v11)
      dispatch_release(v11);
  }
  _Block_object_dispose((const void *)(v8 - 144), 8);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)(v8 - 104));
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
    dispatch_release(v7);
  }
  _Unwind_Resume(a1);
}

void coex::CommandDriver::Callback::~Callback(coex::CommandDriver::Callback *this)
{
  NSObject *v2;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)this)
    _Block_release(*(const void **)this);
}

void __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE48c35_ZTSN4coex13CommandDriver8CallbackE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  NSObject *v6;

  v4 = (const void *)a2[5];
  a1[5] = v4;
  if (v4)
    CFRetain(v4);
  v5 = (void *)a2[6];
  if (v5)
    v5 = _Block_copy(v5);
  v6 = a2[7];
  a1[6] = v5;
  a1[7] = v6;
  if (v6)
    dispatch_retain(v6);
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE48c35_ZTSN4coex13CommandDriver8CallbackE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  const void *v4;

  v2 = a1[7];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[6];
  if (v3)
    _Block_release(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
}

void coex::ARICommandDriver::get(uint64_t a1, const void **a2, int a3, uint64_t a4)
{
  const void *v7;
  void *v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD v11[5];
  CFTypeRef cf;
  void *aBlock;
  dispatch_object_t object;
  int v15;

  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1174405120;
  v11[2] = ___ZN4coex16ARICommandDriver3getEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  v11[3] = &__block_descriptor_tmp_8_1;
  v7 = *a2;
  v11[4] = a1;
  cf = v7;
  if (v7)
    CFRetain(v7);
  v15 = a3;
  v8 = *(void **)a4;
  if (*(_QWORD *)a4)
    v8 = _Block_copy(v8);
  v9 = (uint64_t *)(a1 + 72);
  v10 = *(NSObject **)(a4 + 8);
  aBlock = v8;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped(v9, (uint64_t)v11);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
}

void ___ZN4coex16ARICommandDriver3getEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  const __CFDictionary *v4;
  uint64_t v5;
  const void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  const __CFDictionary *v11;

  v5 = a1[4];
  v4 = (const __CFDictionary *)a1[5];
  v11 = v4;
  if (v4)
    CFRetain(v4);
  v6 = (const void *)a1[6];
  if (v6)
  {
    v7 = _Block_copy(v6);
    v8 = a1[7];
    v9 = v7;
    v10 = v8;
    if (!v8)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 0;
  v8 = a1[7];
  v9 = 0;
  v10 = v8;
  if (v8)
LABEL_5:
    dispatch_retain(v8);
LABEL_6:
  coex::ARICommandDriver::get_sync(v5, &v11, a3, (uint64_t)&v9);
  if (v8)
    dispatch_release(v8);
  if (v7)
    _Block_release(v7);
  if (v4)
    CFRelease(v4);
}

void sub_227AC14BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t coex::ARICommandDriver::get_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  NSObject *v8;
  void *v10;
  NSObject *v11;
  _QWORD v12[2];

  v12[0] = 0xAAAAAAAAAAAAAAAALL;
  v12[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v12, *a2);
  if (!ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v12, (const __CFString *)*MEMORY[0x24BED3658]))return MEMORY[0x22E2A2E9C](v12);
  if (!*(_QWORD *)a4)
  {
    v7 = 0;
    v8 = *(NSObject **)(a4 + 8);
    v10 = 0;
    v11 = v8;
    if (!v8)
      goto LABEL_5;
    goto LABEL_4;
  }
  v7 = _Block_copy(*(const void **)a4);
  v8 = *(NSObject **)(a4 + 8);
  v10 = v7;
  v11 = v8;
  if (v8)
LABEL_4:
    dispatch_retain(v8);
LABEL_5:
  coex::ARICommandDriver::getScanFreqBandFilter_sync(a1, v6, (uint64_t)&v10);
  if (v8)
    dispatch_release(v8);
  if (v7)
    _Block_release(v7);
  return MEMORY[0x22E2A2E9C](v12);
}

void sub_227AC15A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)&a9);
  MEMORY[0x22E2A2E9C](&a11);
  _Unwind_Resume(a1);
}

void coex::ARICommandDriver::poll(uint64_t a1, const void **a2, int a3)
{
  const void *v5;
  _QWORD v6[5];
  CFTypeRef cf;
  int v8;

  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 1174405120;
  v6[2] = ___ZN4coex16ARICommandDriver4pollEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdE_block_invoke;
  v6[3] = &__block_descriptor_tmp_9_2;
  v5 = *a2;
  v6[4] = a1;
  cf = v5;
  if (v5)
    CFRetain(v5);
  v8 = a3;
  ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v6);
  if (cf)
    CFRelease(cf);
}

void ___ZN4coex16ARICommandDriver4pollEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdE_block_invoke(uint64_t a1)
{
  const __CFDictionary *v2;
  _QWORD *v3;
  const __CFDictionary *v4;

  v3 = *(_QWORD **)(a1 + 32);
  v2 = *(const __CFDictionary **)(a1 + 40);
  v4 = v2;
  if (v2)
    CFRetain(v2);
  coex::ARICommandDriver::poll_sync(v3, &v4, *(_DWORD *)(a1 + 48));
  if (v2)
    CFRelease(v2);
}

void sub_227AC16C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t coex::ARICommandDriver::poll_sync(_QWORD *a1, const __CFDictionary **a2, int a3)
{
  NSObject *v6;
  unsigned int *v7;
  unsigned int *v8;
  CFTypeID v9;
  const __CFNumber *v10;
  int v11;
  NSObject *v12;
  unsigned int *v13;
  unsigned int *v14;
  CFTypeID v15;
  const __CFNumber *v16;
  int v17;
  NSObject *v18;
  const __CFDictionary *v20;
  int v21;
  int v22;
  uint8_t buf[32];
  uint8_t v24[4];
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = a1[5];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v20 = *a2;
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = a3;
    *(_WORD *)&buf[8] = 2112;
    *(_QWORD *)&buf[10] = v20;
    _os_log_debug_impl(&dword_227A72000, v6, OS_LOG_TYPE_DEBUG, "#D Polling for sim[%d]:\n%@", buf, 0x12u);
  }
  memset(buf, 170, 16);
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, *a2);
  if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x24BED3590]))coex::ARICommandDriver::pollWWANState_sync(a1, a3);
  v22 = -1431655766;
  v7 = (unsigned int *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x24BED35F8]);
  v8 = v7;
  if (v7)
  {
    v9 = CFGetTypeID(v7);
    v11 = v9 == CFNumberGetTypeID() ? ctu::cf::assign((ctu::cf *)&v22, v8, v10) : 0;
    CFRelease(v8);
    if (v11)
    {
      v12 = a1[5];
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v24 = 136315138;
        v25 = "pollWLANScanState_sync";
        _os_log_debug_impl(&dword_227A72000, v12, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", v24, 0xCu);
      }
    }
  }
  v21 = -1431655766;
  v13 = (unsigned int *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x24BED36B0]);
  v14 = v13;
  if (v13)
  {
    v15 = CFGetTypeID(v13);
    v17 = v15 == CFNumberGetTypeID() ? ctu::cf::assign((ctu::cf *)&v21, v14, v16) : 0;
    CFRelease(v14);
    if (v17)
    {
      v18 = a1[5];
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v24 = 136315138;
        v25 = "pollWLANConnState_sync";
        _os_log_debug_impl(&dword_227A72000, v18, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", v24, 0xCu);
      }
    }
  }
  if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x24BED3550]))coex::ARICommandDriver::pollPolicy_sync((uint64_t)a1, a3);
  if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x24BED35C8]))coex::ARICommandDriver::pollLinkQuality_sync(a1, a3);
  return MEMORY[0x22E2A2E9C](buf);
}

CFTypeRef __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

void coex::ARICommandDriver::setIndications(uint64_t a1, const void **a2, uint64_t a3)
{
  const void *v5;
  void *v6;
  uint64_t *v7;
  NSObject *v8;
  _QWORD v9[5];
  CFTypeRef cf;
  void *aBlock;
  dispatch_object_t object;

  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1174405120;
  v9[2] = ___ZN4coex16ARICommandDriver14setIndicationsEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v9[3] = &__block_descriptor_tmp_10_4;
  v5 = *a2;
  v9[4] = a1;
  cf = v5;
  if (v5)
    CFRetain(v5);
  v6 = *(void **)a3;
  if (*(_QWORD *)a3)
    v6 = _Block_copy(v6);
  v7 = (uint64_t *)(a1 + 72);
  v8 = *(NSObject **)(a3 + 8);
  aBlock = v6;
  object = v8;
  if (v8)
    dispatch_retain(v8);
  ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped(v7, (uint64_t)v9);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
}

void ___ZN4coex16ARICommandDriver14setIndicationsEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(_QWORD *a1)
{
  coex::ARICommandDriver *v2;
  CFTypeRef *v3;
  const void **v4;
  CFTypeRef v5;
  const void *v6;
  const void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;

  v2 = (coex::ARICommandDriver *)a1[4];
  v3 = (CFTypeRef *)(a1 + 5);
  v4 = (const void **)((char *)v2 + 208);
  if ((_QWORD *)((char *)v2 + 208) != a1 + 5)
  {
    v5 = *v3;
    if (*v3)
      CFRetain(*v3);
    v6 = *v4;
    *v4 = v5;
    if (v6)
      CFRelease(v6);
  }
  v7 = (const void *)a1[6];
  if (v7)
  {
    v8 = _Block_copy(v7);
    v9 = a1[7];
    v10 = v8;
    v11 = v9;
    if (!v9)
      goto LABEL_9;
    goto LABEL_8;
  }
  v8 = 0;
  v9 = a1[7];
  v10 = 0;
  v11 = v9;
  if (v9)
LABEL_8:
    dispatch_retain(v9);
LABEL_9:
  coex::ARICommandDriver::setIndications_sync(v2, (uint64_t)&v10);
  if (v9)
    dispatch_release(v9);
  if (v8)
    _Block_release(v8);
}

void sub_227AC1BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)&a9);
  _Unwind_Resume(a1);
}

uint64_t coex::ARICommandDriver::setIndications_sync(coex::ARICommandDriver *a1, uint64_t a2)
{
  NSObject *v4;
  __int128 v5;
  _DWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  const void *v22;
  unint64_t v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _OWORD v36[2];
  unint64_t v37;
  uint8_t buf[16];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, const unsigned __int8 *);
  void *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  const void *aBlock[5];

  coex::ARICommandDriver::registerWWANStateIndication_sync(a1);
  v4 = *((_QWORD *)a1 + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to enable coex indications", buf, 2u);
  }
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41 = v5;
  v42 = v5;
  v39 = v5;
  v40 = v5;
  *(_OWORD *)buf = v5;
  AriSdk::ARI_CsiIdcControlEventReq_SDK::ARI_CsiIdcControlEventReq_SDK((AriSdk::ARI_CsiIdcControlEventReq_SDK *)buf);
  v6 = operator new(4uLL);
  *v6 = 1;
  v7 = (void *)*((_QWORD *)&v42 + 1);
  *((_QWORD *)&v42 + 1) = v6;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 10);
  if (!v8
    || (v9 = (std::__shared_weak_count_vtbl *)*((_QWORD *)a1 + 9), (v10 = std::__shared_weak_count::lock(v8)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v16 = *((_QWORD *)a1 + 24);
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  if (!*(_QWORD *)a2)
  {
    v18 = 0;
    v19 = *(NSObject **)(a2 + 8);
    if (!v19)
      goto LABEL_18;
    goto LABEL_17;
  }
  v18 = _Block_copy(*(const void **)a2);
  v19 = *(NSObject **)(a2 + 8);
  if (v19)
LABEL_17:
    dispatch_retain(v19);
LABEL_18:
  v20 = (std::__shared_weak_count *)operator new(0x40uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)off_24F0363E8;
  v20[1].__vftable = v9;
  v20[1].__shared_owners_ = (uint64_t)v11;
  v20[1].__shared_weak_owners_ = (uint64_t)v18;
  v20[2].__vftable = (std::__shared_weak_count_vtbl *)v19;
  v20[2].__shared_owners_ = (uint64_t)a1;
  v22 = (const void *)MEMORY[0x24BDAC760];
  v43 = MEMORY[0x24BDAC760];
  v44 = 1174405120;
  v45 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver19setIndications_syncENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v46 = &__block_descriptor_tmp_25_1;
  v47 = v20 + 1;
  v48 = v20;
  do
    v23 = __ldxr(v21);
  while (__stxr(v23 + 1, v21));
  aBlock[0] = v22;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_24F036430;
  aBlock[4] = &v43;
  v24 = _Block_copy(aBlock);
  v25 = v48;
  if (v48)
  {
    v26 = (unint64_t *)&v48->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  do
    v28 = __ldaxr(v21);
  while (__stlxr(v28 - 1, v21));
  if (v28)
  {
    if ((_QWORD)v42)
      goto LABEL_33;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if ((_QWORD)v42)
      goto LABEL_33;
  }
  v29 = operator new(4uLL);
  *v29 = 0;
  *(_QWORD *)&v42 = v29;
LABEL_33:
  v37 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[0] = v30;
  v36[1] = v30;
  v31 = *(std::__shared_weak_count **)(v16 + 16);
  v43 = *(_QWORD *)(v16 + 8);
  if (!v31)
  {
    v44 = 0;
LABEL_45:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v44 = (uint64_t)std::__shared_weak_count::lock(v31);
  if (!v44)
    goto LABEL_45;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v32 = (std::__shared_weak_count *)v44;
  if (v44)
  {
    v33 = (unint64_t *)(v44 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  aBlock[0] = v24;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v36);
  std::__shared_weak_count::__release_weak(v11);
  return MEMORY[0x22E2A394C](buf);
}

void sub_227AC1F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  const void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v5 = *(const void **)(v3 - 120);
  if (v5)
    _Block_release(v5);
  MEMORY[0x22E2A2FF8]((uint64_t *)va1);
  coex::ARICommandDriver::setIndications_sync(coex::CommandDriver::Callback)::$_0::~$_0((uint64_t *)va);
  std::__shared_weak_count::__release_weak(v2);
  MEMORY[0x22E2A394C](va2);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void ___ZN4coex16ARICommandDriver8set_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, const void **a2, const void **a3)
{
  const void *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v10;
  uint64_t v11;
  const void *v12;
  NSObject *v13;
  const void *v14;
  const void *v15;

  v3 = *a2;
  v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v4 = 0;
  if (v4)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = *(_QWORD *)(v6 + 40);
    v7 = v6 + 40;
    if (v8)
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48))
      {
        v15 = *a2;
        if (v3)
          CFRetain(v3);
        v10 = *a3;
        v14 = v10;
        if (v10)
        {
          CFRetain(v10);
          coex::CommandDriver::Callback::operator()(v7, &v15, &v14);
          CFRelease(v10);
          if (!v3)
            goto LABEL_13;
        }
        else
        {
          coex::CommandDriver::Callback::operator()(v7, &v15, &v14);
          if (!v3)
          {
LABEL_13:
            v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            v12 = *(const void **)(v11 + 40);
            *(_QWORD *)(v11 + 40) = 0;
            if (v12)
              _Block_release(v12);
            v13 = *(NSObject **)(v11 + 48);
            *(_QWORD *)(v11 + 48) = 0;
            if (v13)
              dispatch_release(v13);
            return;
          }
        }
        CFRelease(v3);
        goto LABEL_13;
      }
    }
  }
}

void coex::CommandDriver::Callback::operator()(uint64_t a1, const void **a2, const void **a3)
{
  const void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  const void *v10;
  const void *v11;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v14;
  CFTypeRef cf;

  v6 = *(const void **)a1;
  if (v6)
    v7 = _Block_copy(v6);
  else
    v7 = 0;
  v8 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK4coex13CommandDriver8CallbackclEN3ctu2cf11CFSharedRefI9__CFErrorEENS4_IK14__CFDictionaryEE_block_invoke;
  block[3] = &__block_descriptor_tmp_18_4;
  if (!v7)
  {
    v10 = *a2;
    aBlock = 0;
    v14 = v10;
    if (!v10)
      goto LABEL_9;
    goto LABEL_8;
  }
  v9 = _Block_copy(v7);
  v10 = *a2;
  aBlock = v9;
  v14 = v10;
  if (v10)
LABEL_8:
    CFRetain(v10);
LABEL_9:
  v11 = *a3;
  cf = v11;
  if (v11)
    CFRetain(v11);
  dispatch_async(v8, block);
  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  if (aBlock)
    _Block_release(aBlock);
  if (v7)
    _Block_release(v7);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 40);
    if (v3)
      dispatch_release(v3);
  }
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void coex::ARICommandDriver::setWLANState_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  CFTypeRef v5;
  CFTypeRef v6;
  const void *v7;
  CFTypeRef v8;
  void *__p[2];
  char v10;
  CFTypeRef cf[4];

  cf[3] = *(CFTypeRef *)MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(cf[0]) = 136315138;
    *(CFTypeRef *)((char *)cf + 4) = "setWLANState_sync";
    _os_log_debug_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)cf, 0xCu);
  }
  cf[0] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v10 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  v5 = cf[0];
  v8 = cf[0];
  if (!cf[0])
  {
    v7 = 0;
    coex::CommandDriver::Callback::operator()(a3, &v8, &v7);
    v6 = cf[0];
    if (!cf[0])
      return;
    goto LABEL_7;
  }
  CFRetain(cf[0]);
  v7 = 0;
  coex::CommandDriver::Callback::operator()(a3, &v8, &v7);
  CFRelease(v5);
  v6 = cf[0];
  if (cf[0])
LABEL_7:
    CFRelease(v6);
}

void sub_227AC245C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t coex::ARICommandDriver::setPolicy_sync(uint64_t a1, const __CFDictionary **a2, int a3, uint64_t a4)
{
  NSObject *v7;
  __int128 v8;
  _DWORD *v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t i;
  NSObject *v15;
  const void *v16;
  char Int;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  NSObject *v23;
  _BYTE *v24;
  void *v25;
  __int128 v26;
  const __CFArray *v27;
  const void *v28;
  const __CFArray *v29;
  const __CFArray *v30;
  uint64_t (*v31)(uint64_t);
  unint64_t Count;
  uint64_t v33;
  CFIndex v34;
  uint8_t *v35;
  const void *v36;
  const __CFArray *v37;
  unsigned int *ValueAtIndex;
  unsigned int *v39;
  CFTypeID v40;
  const __CFNumber *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  CFTypeID v44;
  const __CFNumber *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  CFTypeID v48;
  const __CFNumber *v49;
  signed __int8 *v50;
  signed __int8 *v51;
  CFTypeID v52;
  const __CFNumber *v53;
  signed __int8 *v54;
  signed __int8 *v55;
  CFTypeID v56;
  const __CFNumber *v57;
  signed __int8 *v58;
  signed __int8 *v59;
  CFTypeID v60;
  const __CFNumber *v61;
  signed __int8 *v62;
  signed __int8 *v63;
  CFTypeID v64;
  const __CFNumber *v65;
  void *v66;
  void *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unsigned int v72;
  unint64_t *p_shared_weak_owners;
  unint64_t v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  std::__shared_weak_count_vtbl *v79;
  NSObject *v80;
  const void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  const void *v84;
  unint64_t v85;
  void *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  _DWORD *v91;
  __int128 v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  NSObject *v97;
  __int128 v98;
  _DWORD *v99;
  void *v100;
  char v101;
  _BYTE *v102;
  void *v103;
  char v104;
  _BYTE *v105;
  void *v106;
  char v107;
  _BYTE *v108;
  void *v109;
  char v110;
  _BYTE *v111;
  void *v112;
  char v113;
  _BYTE *v114;
  void *v115;
  char v116;
  _BYTE *v117;
  void *v118;
  int v119;
  _DWORD *v120;
  void *v121;
  uint64_t v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  _DWORD *v132;
  __int128 v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  __CFString *v139;
  __CFString *v140;
  __CFString *v141;
  int v142;
  int v143;
  uint8_t Bool;
  const void **v145;
  _QWORD *v147;
  __CFString *v148;
  const __CFArray *v149;
  const __CFArray *v150;
  const __CFArray *v151;
  char theArray;
  const __CFArray *theArraya;
  _OWORD v154[2];
  unint64_t v155;
  _OWORD v156[2];
  unint64_t v157;
  const void *v158;
  const __CFArray *v159;
  const __CFArray *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD v164[2];
  CFTypeRef v165;
  CFTypeRef cf;
  CFTypeRef v167;
  _OWORD v168[4];
  void *__p[2];
  void *v170;
  _QWORD v171[2];
  int v172;
  const __CFArray *v173;
  uint64_t v174;
  void (*v175)(uint64_t, const unsigned __int8 *);
  void *v176;
  std::__shared_weak_count *v177;
  std::__shared_weak_count *v178;
  const void *aBlock;
  uint64_t v180;
  uint64_t (*v181)(uint64_t);
  void *v182;
  const __CFArray **v183;
  uint8_t buf[392];
  uint64_t v185;

  v185 = *MEMORY[0x24BDAC8D0];
  v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a3;
    _os_log_debug_impl(&dword_227A72000, v7, OS_LOG_TYPE_DEBUG, "#D Set Policy request for sim[%d]", buf, 8u);
  }
  v171[0] = 0xAAAAAAAAAAAAAAAALL;
  v171[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v171, *a2);
  v170 = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v168[3] = v8;
  *(_OWORD *)__p = v8;
  v168[1] = v8;
  v168[2] = v8;
  v168[0] = v8;
  AriSdk::ARI_CsiIdcSetRTConfigReq_SDK::ARI_CsiIdcSetRTConfigReq_SDK((AriSdk::ARI_CsiIdcSetRTConfigReq_SDK *)v168);
  v9 = operator new(4uLL);
  *v9 = a3;
  v10 = __p[0];
  __p[0] = v9;
  if (v10)
    operator delete(v10);
  v11 = (const void *)ctu::cf::map_adapter::copyCFDataRef((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED3500]);
  cf = v11;
  v167 = v11;
  if (v11)
    CFRetain(v11);
  v12 = coex::util::data_to_uint64();
  if (cf)
    CFRelease(cf);
  v142 = a3;
  v13 = (_QWORD *)qword_253DF24F0;
  v147 = (_QWORD *)a1;
  v145 = (const void **)a2;
  for (i = -1; v13 != (_QWORD *)qword_253DF24F8; v13 += 3)
  {
    if ((*v13 & v12) != 0)
      i &= v13[1];
    else
      i |= v13[2];
  }
  v15 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = i;
    _os_log_impl(&dword_227A72000, v15, OS_LOG_TYPE_DEFAULT, "#I Policy bitmap; CxM=0x%llx ICE=0x%llx ", buf, 0x16u);
  }
  Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED3700]);
  v141 = (__CFString *)*MEMORY[0x24BED3718];
  v143 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED3718]);
  v16 = (const void *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED36C8]);
  v164[1] = 0xAAAAAAAAAAAAAAAALL;
  v165 = v16;
  v164[0] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v164, (const __CFDictionary *)v16);
  theArray = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v164, (const __CFString *)*MEMORY[0x24BED3548]);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED3750]);
  v140 = (__CFString *)*MEMORY[0x24BED35A0];
  v18 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED35A0]);
  v139 = (__CFString *)*MEMORY[0x24BED3560];
  v19 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED3560]);
  v20 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED3740]);
  v21 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED36E0]);
  if ((v12 & 8) != 0)
    v22 = 0;
  else
    v22 = 5;
  v23 = v147[5];
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v22;
    _os_log_impl(&dword_227A72000, v23, OS_LOG_TYPE_DEFAULT, "#I Event bitmap;CxM=0x%llx ICE=0x%x ", buf, 0x12u);
  }
  v24 = operator new(0x14uLL);
  *(_QWORD *)v24 = i;
  v24[8] = theArray;
  v24[9] = Int;
  v24[10] = v18;
  v24[11] = v19;
  v24[12] = v20;
  v24[13] = v21;
  *((_WORD *)v24 + 7) = -21846;
  *((_DWORD *)v24 + 4) = v22;
  v25 = __p[1];
  __p[1] = v24;
  if (v25)
    operator delete(v25);
  if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED36A0]))
  {
    *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&buf[360] = v26;
    *(_OWORD *)&buf[376] = v26;
    *(_OWORD *)&buf[328] = v26;
    *(_OWORD *)&buf[344] = v26;
    *(_OWORD *)&buf[296] = v26;
    *(_OWORD *)&buf[312] = v26;
    *(_OWORD *)&buf[264] = v26;
    *(_OWORD *)&buf[280] = v26;
    *(_OWORD *)&buf[248] = v26;
    *(_OWORD *)&buf[232] = v26;
    *(_OWORD *)&buf[216] = v26;
    *(_OWORD *)&buf[200] = v26;
    *(_OWORD *)&buf[184] = v26;
    *(_OWORD *)&buf[168] = v26;
    *(_OWORD *)&buf[152] = v26;
    *(_OWORD *)&buf[136] = v26;
    *(_OWORD *)&buf[120] = v26;
    *(_OWORD *)&buf[104] = v26;
    *(_OWORD *)&buf[88] = v26;
    *(_OWORD *)&buf[72] = v26;
    *(_OWORD *)&buf[56] = v26;
    *(_OWORD *)&buf[40] = v26;
    *(_OWORD *)&buf[24] = v26;
    *(_OWORD *)&buf[8] = v26;
    *(_DWORD *)buf = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED3648]);
    *(_DWORD *)&buf[4] = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED3618]);
    v148 = (__CFString *)*MEMORY[0x24BED35D8];
    v27 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED35D8]);
    v173 = v27;
    v28 = (const void *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED3720]);
    aBlock = v28;
    v163 = ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED3730]);
    v162 = ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED3738]);
    v161 = ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED3710]);
    v29 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED3728]);
    v149 = (const __CFArray *)v161;
    v150 = (const __CFArray *)v162;
    v151 = (const __CFArray *)v28;
    theArraya = (const __CFArray *)v163;
    v160 = v29;
    v30 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED3708]);
    v159 = v30;
    v31 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    if (!v27)
      v31 = 0;
    if (v31)
    {
      Count = CFArrayGetCount(v27);
      v33 = Count >= 0x20 ? 32 : Count;
      if (v33)
      {
        v34 = 0;
        v35 = &buf[17];
        do
        {
          v36 = (const void *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v171, v148);
          v158 = v36;
          v37 = v27;
          ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(v27, v34);
          v39 = ValueAtIndex;
          v172 = 0;
          if (ValueAtIndex)
          {
            v40 = CFGetTypeID(ValueAtIndex);
            if (v40 == CFNumberGetTypeID())
              ctu::cf::assign((ctu::cf *)&v172, v39, v41);
          }
          *(_DWORD *)(v35 - 9) = v172;
          v42 = (unsigned __int8 *)CFArrayGetValueAtIndex(theArraya, v34);
          v43 = v42;
          LOBYTE(v172) = 0;
          if (v42)
          {
            v44 = CFGetTypeID(v42);
            if (v44 == CFNumberGetTypeID())
              ctu::cf::assign((ctu::cf *)&v172, v43, v45);
          }
          *(v35 - 5) = v172;
          v46 = (unsigned __int8 *)CFArrayGetValueAtIndex(v151, v34);
          v47 = v46;
          LOBYTE(v172) = 0;
          if (v46)
          {
            v48 = CFGetTypeID(v46);
            if (v48 == CFNumberGetTypeID())
              ctu::cf::assign((ctu::cf *)&v172, v47, v49);
          }
          *(v35 - 4) = v172;
          v50 = (signed __int8 *)CFArrayGetValueAtIndex(v150, v34);
          v51 = v50;
          LOBYTE(v172) = 0;
          if (v50)
          {
            v52 = CFGetTypeID(v50);
            if (v52 == CFNumberGetTypeID())
              ctu::cf::assign((ctu::cf *)&v172, v51, v53);
          }
          *(v35 - 3) = v172;
          v54 = (signed __int8 *)CFArrayGetValueAtIndex(v149, v34);
          v55 = v54;
          LOBYTE(v172) = 0;
          if (v54)
          {
            v56 = CFGetTypeID(v54);
            if (v56 == CFNumberGetTypeID())
              ctu::cf::assign((ctu::cf *)&v172, v55, v57);
          }
          *(v35 - 2) = v172;
          v58 = (signed __int8 *)CFArrayGetValueAtIndex(v29, v34);
          v59 = v58;
          LOBYTE(v172) = 0;
          if (v58)
          {
            v60 = CFGetTypeID(v58);
            if (v60 == CFNumberGetTypeID())
              ctu::cf::assign((ctu::cf *)&v172, v59, v61);
          }
          *(v35 - 1) = v172;
          v62 = (signed __int8 *)CFArrayGetValueAtIndex(v30, v34);
          v63 = v62;
          LOBYTE(v172) = 0;
          if (v62)
          {
            v64 = CFGetTypeID(v62);
            if (v64 == CFNumberGetTypeID())
              ctu::cf::assign((ctu::cf *)&v172, v63, v65);
          }
          *v35 = v172;
          if (v36)
            CFRelease(v36);
          ++v34;
          v35 += 12;
          v27 = v37;
        }
        while (v33 != v34);
      }
    }
    v66 = operator new(0x188uLL);
    memcpy(v66, buf, 0x188uLL);
    v67 = v170;
    v170 = v66;
    if (v67)
      operator delete(v67);
    if (v30)
      CFRelease(v30);
    if (v29)
      CFRelease(v29);
    if (v149)
      CFRelease(v149);
    if (v150)
      CFRelease(v150);
    if (theArraya)
      CFRelease(theArraya);
    if (v151)
      CFRelease(v151);
    if (v27)
      CFRelease(v27);
  }
  v68 = (std::__shared_weak_count *)v147[10];
  if (!v68 || (v69 = (std::__shared_weak_count_vtbl *)v147[9], (v70 = std::__shared_weak_count::lock(v68)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v71 = v70;
  v72 = (v12 >> 15) & 1;
  p_shared_weak_owners = (unint64_t *)&v70->__shared_weak_owners_;
  do
    v74 = __ldxr(p_shared_weak_owners);
  while (__stxr(v74 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v70->__shared_owners_;
  do
    v76 = __ldaxr(p_shared_owners);
  while (__stlxr(v76 - 1, p_shared_owners));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v71);
  }
  v77 = v147[24];
  *(_QWORD *)buf = v69;
  *(_QWORD *)&buf[8] = v71;
  do
    v78 = __ldxr(p_shared_weak_owners);
  while (__stxr(v78 + 1, p_shared_weak_owners));
  *(_QWORD *)&buf[16] = v147;
  if (*(_QWORD *)a4)
  {
    v79 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a4);
    v80 = *(NSObject **)(a4 + 8);
    *(_QWORD *)&buf[24] = v79;
    *(_QWORD *)&buf[32] = v80;
    if (!v80)
      goto LABEL_85;
    goto LABEL_84;
  }
  v79 = 0;
  v80 = *(NSObject **)(a4 + 8);
  *(_QWORD *)&buf[24] = 0;
  *(_QWORD *)&buf[32] = v80;
  if (v80)
LABEL_84:
    dispatch_retain(v80);
LABEL_85:
  v81 = *v145;
  *(_QWORD *)&buf[40] = v81;
  if (v81)
    CFRetain(v81);
  buf[48] = Bool;
  buf[49] = v72;
  v82 = (std::__shared_weak_count *)operator new(0x50uLL);
  v82->__shared_owners_ = 0;
  v83 = (unint64_t *)&v82->__shared_owners_;
  v82->__shared_weak_owners_ = 0;
  v82->__vftable = (std::__shared_weak_count_vtbl *)off_24F036610;
  v82[1].__vftable = v69;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v82[1].__shared_owners_ = (uint64_t)v71;
  v82[1].__shared_weak_owners_ = (uint64_t)v147;
  v82[2].__vftable = v79;
  v82[2].__shared_owners_ = (uint64_t)v80;
  *(_QWORD *)&buf[32] = 0;
  *(_QWORD *)&buf[24] = 0;
  v82[2].__shared_weak_owners_ = (uint64_t)v81;
  *(_QWORD *)&buf[40] = 0;
  LOWORD(v82[3].__vftable) = *(_WORD *)&buf[48];
  v84 = (const void *)MEMORY[0x24BDAC760];
  v173 = (const __CFArray *)MEMORY[0x24BDAC760];
  v174 = 1174405120;
  v175 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v176 = &__block_descriptor_tmp_42_2;
  v177 = v82 + 1;
  v178 = v82;
  do
    v85 = __ldxr(v83);
  while (__stxr(v85 + 1, v83));
  aBlock = v84;
  v180 = 0x40000000;
  v181 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  v182 = &unk_24F036430;
  v183 = &v173;
  v86 = _Block_copy(&aBlock);
  v87 = v178;
  if (v178)
  {
    v88 = (unint64_t *)&v178->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  do
    v90 = __ldaxr(v83);
  while (__stlxr(v90 - 1, v83));
  if (v90)
  {
    if (__p[0])
      goto LABEL_102;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
    std::__shared_weak_count::__release_weak(v82);
    if (__p[0])
      goto LABEL_102;
  }
  v91 = operator new(4uLL);
  *v91 = 0;
  __p[0] = v91;
LABEL_102:
  v157 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v92 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v92 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v156[0] = v92;
  v156[1] = v92;
  v93 = *(std::__shared_weak_count **)(v77 + 16);
  v173 = *(const __CFArray **)(v77 + 8);
  if (!v93)
  {
    v174 = 0;
LABEL_170:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v174 = (uint64_t)std::__shared_weak_count::lock(v93);
  if (!v174)
    goto LABEL_170;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v94 = (std::__shared_weak_count *)v174;
  if (v174)
  {
    v95 = (unint64_t *)(v174 + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  aBlock = v86;
  ice::SendMsgBaseProxy::callback();
  if (aBlock)
    _Block_release(aBlock);
  MEMORY[0x22E2A2FF8](v156);
  if (*(_QWORD *)&buf[40])
    CFRelease(*(CFTypeRef *)&buf[40]);
  if (*(_QWORD *)&buf[32])
    dispatch_release(*(dispatch_object_t *)&buf[32]);
  if (*(_QWORD *)&buf[24])
    _Block_release(*(const void **)&buf[24]);
  if (*(_QWORD *)&buf[8])
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  if (v143)
  {
    v97 = v147[5];
    if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v142;
      _os_log_debug_impl(&dword_227A72000, v97, OS_LOG_TYPE_DEBUG, "#D Set TxPower Limit Threshold for sim[%d]", buf, 8u);
    }
    *(_QWORD *)&v98 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v98 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&buf[96] = v98;
    *(_OWORD *)&buf[112] = v98;
    *(_OWORD *)&buf[64] = v98;
    *(_OWORD *)&buf[80] = v98;
    *(_OWORD *)&buf[32] = v98;
    *(_OWORD *)&buf[48] = v98;
    *(_OWORD *)buf = v98;
    *(_OWORD *)&buf[16] = v98;
    AriSdk::ARI_CsiIdcSetTxPowerLimitReq_SDK::ARI_CsiIdcSetTxPowerLimitReq_SDK((AriSdk::ARI_CsiIdcSetTxPowerLimitReq_SDK *)buf);
    v99 = operator new(4uLL);
    *v99 = v142;
    v100 = *(void **)&buf[64];
    *(_QWORD *)&buf[64] = v99;
    if (v100)
      operator delete(v100);
    v101 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED3680]);
    v102 = operator new(1uLL);
    *v102 = v101;
    v103 = *(void **)&buf[72];
    *(_QWORD *)&buf[72] = v102;
    if (v103)
      operator delete(v103);
    v104 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED3640]);
    v105 = operator new(1uLL);
    *v105 = v104;
    v106 = *(void **)&buf[80];
    *(_QWORD *)&buf[80] = v105;
    if (v106)
      operator delete(v106);
    v107 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v171, v140);
    v108 = operator new(1uLL);
    *v108 = v107;
    v109 = *(void **)&buf[88];
    *(_QWORD *)&buf[88] = v108;
    if (v109)
      operator delete(v109);
    v110 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v171, v139);
    v111 = operator new(1uLL);
    *v111 = v110;
    v112 = *(void **)&buf[96];
    *(_QWORD *)&buf[96] = v111;
    if (v112)
      operator delete(v112);
    v113 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED36C0]);
    v114 = operator new(1uLL);
    *v114 = v113;
    v115 = *(void **)&buf[104];
    *(_QWORD *)&buf[104] = v114;
    if (v115)
      operator delete(v115);
    v116 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v171, (const __CFString *)*MEMORY[0x24BED3688]);
    v117 = operator new(1uLL);
    *v117 = v116;
    v118 = *(void **)&buf[112];
    *(_QWORD *)&buf[112] = v117;
    if (v118)
      operator delete(v118);
    v119 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v171, v141);
    v120 = operator new(4uLL);
    *v120 = v119;
    v121 = *(void **)&buf[120];
    *(_QWORD *)&buf[120] = v120;
    if (v121)
      operator delete(v121);
    v122 = v147[24];
    do
      v123 = __ldxr(p_shared_weak_owners);
    while (__stxr(v123 + 1, p_shared_weak_owners));
    v124 = (std::__shared_weak_count *)operator new(0x30uLL);
    v124->__shared_owners_ = 0;
    v125 = (unint64_t *)&v124->__shared_owners_;
    v124->__shared_weak_owners_ = 0;
    v124->__vftable = (std::__shared_weak_count_vtbl *)off_24F036690;
    v124[1].__vftable = v69;
    v124[1].__shared_owners_ = (uint64_t)v71;
    v124[1].__shared_weak_owners_ = (uint64_t)v147;
    v173 = (const __CFArray *)v84;
    v174 = 1174405120;
    v175 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__1vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
    v176 = &__block_descriptor_tmp_46_0;
    v177 = v124 + 1;
    v178 = v124;
    do
      v126 = __ldxr(v125);
    while (__stxr(v126 + 1, v125));
    aBlock = v84;
    v180 = 0x40000000;
    v181 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
    v182 = &unk_24F036430;
    v183 = &v173;
    v127 = _Block_copy(&aBlock);
    v128 = v178;
    if (v178)
    {
      v129 = (unint64_t *)&v178->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    do
      v131 = __ldaxr(v125);
    while (__stlxr(v131 - 1, v125));
    if (v131)
    {
      if (*(_QWORD *)&buf[64])
        goto LABEL_153;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
      if (*(_QWORD *)&buf[64])
        goto LABEL_153;
    }
    v132 = operator new(4uLL);
    *v132 = 0;
    *(_QWORD *)&buf[64] = v132;
LABEL_153:
    v155 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v133 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v133 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v154[0] = v133;
    v154[1] = v133;
    v134 = *(std::__shared_weak_count **)(v122 + 16);
    v173 = *(const __CFArray **)(v122 + 8);
    if (v134)
    {
      v174 = (uint64_t)std::__shared_weak_count::lock(v134);
      if (v174)
      {
        ice::SendMsgBaseProxy::SendMsgBaseProxy();
        v135 = (std::__shared_weak_count *)v174;
        if (v174)
        {
          v136 = (unint64_t *)(v174 + 8);
          do
            v137 = __ldaxr(v136);
          while (__stlxr(v137 - 1, v136));
          if (!v137)
          {
            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
            std::__shared_weak_count::__release_weak(v135);
          }
        }
        aBlock = v127;
        ice::SendMsgBaseProxy::callback();
        if (aBlock)
          _Block_release(aBlock);
        MEMORY[0x22E2A2FF8](v154);
        MEMORY[0x22E2A3DCC](buf);
        goto LABEL_163;
      }
    }
    else
    {
      v174 = 0;
    }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
LABEL_163:
  std::__shared_weak_count::__release_weak(v71);
  MEMORY[0x22E2A2E9C](v164);
  if (v165)
    CFRelease(v165);
  if (v167)
    CFRelease(v167);
  MEMORY[0x22E2A37C0](v168);
  return MEMORY[0x22E2A2E9C](v171);
}

void sub_227AC33FC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void coex::ARICommandDriver::setBandFilterInfo_sync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  CFTypeRef v6;
  CFTypeRef v7;
  const void *v8;
  CFTypeRef v9;
  void *__p[2];
  char v11;
  CFTypeRef cf[4];

  cf[3] = *(CFTypeRef *)MEMORY[0x24BDAC8D0];
  v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(cf[0]) = 136315138;
    *(CFTypeRef *)((char *)cf + 4) = "setBandFilterInfo_sync";
    _os_log_debug_impl(&dword_227A72000, v5, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)cf, 0xCu);
  }
  cf[0] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v11 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  v6 = cf[0];
  v9 = cf[0];
  if (!cf[0])
  {
    v8 = 0;
    coex::CommandDriver::Callback::operator()(a4, &v9, &v8);
    v7 = cf[0];
    if (!cf[0])
      return;
    goto LABEL_7;
  }
  CFRetain(cf[0]);
  v8 = 0;
  coex::CommandDriver::Callback::operator()(a4, &v9, &v8);
  CFRelease(v6);
  v7 = cf[0];
  if (cf[0])
LABEL_7:
    CFRelease(v7);
}

void sub_227AC37FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t coex::ARICommandDriver::setScanFreqBandFilter_sync(_QWORD *a1, const __CFDictionary **a2, int a3, uint64_t a4)
{
  NSObject *v8;
  const __CFArray *v9;
  uint64_t (*v10)(uint64_t);
  __int128 v11;
  _DWORD *v12;
  void *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count_vtbl *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::__shared_weak_count_vtbl *v29;
  NSObject *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  const void *v33;
  unint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  const __CFDictionary *v47;
  _OWORD v48[2];
  unint64_t v49;
  CFArrayRef v50;
  _OWORD v51[4];
  __int128 __p;
  const __CFArray *v53;
  _QWORD v54[2];
  const void *aBlock[5];
  _BYTE buf[32];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v47 = *a2;
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = a3;
    *(_WORD *)&buf[8] = 2112;
    *(_QWORD *)&buf[10] = v47;
    _os_log_debug_impl(&dword_227A72000, v8, OS_LOG_TYPE_DEBUG, "#D Setting Scan Frequency Band filter info for sim[%d]: %@", buf, 0x12u);
  }
  v54[0] = 0xAAAAAAAAAAAAAAAALL;
  v54[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v54, *a2);
  v9 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v54, (const __CFString *)*MEMORY[0x24BED3610]);
  v53 = v9;
  v10 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  if (!v9)
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v51[3] = v11;
    __p = v11;
    v51[1] = v11;
    v51[2] = v11;
    v51[0] = v11;
    AriSdk::ARI_CsiIdcRTSetScanFreqReq_SDK::ARI_CsiIdcRTSetScanFreqReq_SDK((AriSdk::ARI_CsiIdcRTSetScanFreqReq_SDK *)v51);
    v12 = operator new(4uLL);
    *v12 = a3;
    v13 = (void *)__p;
    *(_QWORD *)&__p = v12;
    if (v13)
      operator delete(v13);
    v50 = v9;
    if (v9)
      CFRetain(v9);
    coex::ARICommandDriver::convertScanFrequencies_sync((uint64_t)a1, &v50, buf);
    v14 = operator new(0x60uLL);
    v15 = v58;
    v14[2] = v57;
    v14[3] = v15;
    v16 = v60;
    v14[4] = v59;
    v14[5] = v16;
    v17 = *(_OWORD *)&buf[16];
    *v14 = *(_OWORD *)buf;
    v14[1] = v17;
    v18 = (void *)*((_QWORD *)&__p + 1);
    *((_QWORD *)&__p + 1) = v14;
    if (v18)
      operator delete(v18);
    if (v9)
      CFRelease(v9);
    v19 = (std::__shared_weak_count *)a1[10];
    if (!v19 || (v20 = (std::__shared_weak_count_vtbl *)a1[9], (v21 = std::__shared_weak_count::lock(v19)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v22 = v21;
    p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
    do
      v24 = __ldxr(p_shared_weak_owners);
    while (__stxr(v24 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v22);
    }
    v27 = a1[24];
    do
      v28 = __ldxr(p_shared_weak_owners);
    while (__stxr(v28 + 1, p_shared_weak_owners));
    if (*(_QWORD *)a4)
    {
      v29 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a4);
      v30 = *(NSObject **)(a4 + 8);
      if (!v30)
      {
LABEL_27:
        v31 = (std::__shared_weak_count *)operator new(0x40uLL);
        v31->__shared_owners_ = 0;
        v32 = (unint64_t *)&v31->__shared_owners_;
        v31->__shared_weak_owners_ = 0;
        v31->__vftable = (std::__shared_weak_count_vtbl *)off_24F036990;
        v31[1].__vftable = v20;
        v31[1].__shared_owners_ = (uint64_t)v22;
        v31[1].__shared_weak_owners_ = (uint64_t)a1;
        v31[2].__vftable = v29;
        v31[2].__shared_owners_ = (uint64_t)v30;
        v33 = (const void *)MEMORY[0x24BDAC760];
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 1174405120;
        *(_QWORD *)&buf[16] = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
        *(_QWORD *)&buf[24] = &__block_descriptor_tmp_72_0;
        *(_QWORD *)&v57 = v31 + 1;
        *((_QWORD *)&v57 + 1) = v31;
        do
          v34 = __ldxr(v32);
        while (__stxr(v34 + 1, v32));
        aBlock[0] = v33;
        aBlock[1] = (const void *)0x40000000;
        aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
        aBlock[3] = &unk_24F036430;
        aBlock[4] = buf;
        v35 = _Block_copy(aBlock);
        v36 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
        if (*((_QWORD *)&v57 + 1))
        {
          v37 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        do
          v39 = __ldaxr(v32);
        while (__stlxr(v39 - 1, v32));
        if (v39)
        {
          if ((_QWORD)__p)
            goto LABEL_42;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
          if ((_QWORD)__p)
            goto LABEL_42;
        }
        v40 = operator new(4uLL);
        *v40 = 0;
        *(_QWORD *)&__p = v40;
LABEL_42:
        v49 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v41 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v48[0] = v41;
        v48[1] = v41;
        v42 = *(std::__shared_weak_count **)(v27 + 16);
        *(_QWORD *)buf = *(_QWORD *)(v27 + 8);
        if (v42)
        {
          *(_QWORD *)&buf[8] = std::__shared_weak_count::lock(v42);
          if (*(_QWORD *)&buf[8])
          {
            ice::SendMsgBaseProxy::SendMsgBaseProxy();
            v43 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v44 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            aBlock[0] = v35;
            ice::SendMsgBaseProxy::callback();
            if (aBlock[0])
              _Block_release(aBlock[0]);
            MEMORY[0x22E2A2FF8](v48);
            std::__shared_weak_count::__release_weak(v22);
            MEMORY[0x22E2A3A9C](v51);
            v9 = v53;
            goto LABEL_52;
          }
        }
        else
        {
          *(_QWORD *)&buf[8] = 0;
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
    }
    else
    {
      v29 = 0;
      v30 = *(NSObject **)(a4 + 8);
      if (!v30)
        goto LABEL_27;
    }
    dispatch_retain(v30);
    goto LABEL_27;
  }
LABEL_52:
  if (v9)
    CFRelease(v9);
  return MEMORY[0x22E2A2E9C](v54);
}

void sub_227AC3CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *aBlock)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t coex::ARICommandDriver::setLinkQualityMode_sync(_QWORD *a1, const __CFDictionary **a2, const __CFDictionary **a3, int a4, uint64_t a5)
{
  const __CFDictionary *v9;
  uint64_t (*v10)(uint64_t);
  NSObject *v12;
  char Int;
  char v14;
  const __CFDictionary *v15;
  uint64_t (*v16)(uint64_t);
  unsigned int v17;
  unsigned int v18;
  uint64_t (*v19)(uint64_t);
  NSObject *v20;
  double v21;
  double v22;
  __int128 v23;
  _DWORD *v24;
  void *v25;
  _BYTE *v26;
  void *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_weak_owners;
  unint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  NSObject *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  const void *v42;
  unint64_t v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  _DWORD *v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _OWORD v56[2];
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, const unsigned __int8 *);
  void *v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  const void *aBlock[5];
  _BYTE buf[32];
  __int128 v66;
  __int128 v67;
  __int128 __p;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  if (*a2)
    v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  else
    v10 = 0;
  if (v10)
  {
    v12 = a1[5];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = a4;
      *(_WORD *)&buf[8] = 2112;
      *(_QWORD *)&buf[10] = v9;
      _os_log_debug_impl(&dword_227A72000, v12, OS_LOG_TYPE_DEBUG, "#D Setting BLER with for sim[%d]: %@", buf, 0x12u);
      v9 = *a2;
    }
    memset(buf, 170, 16);
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v9);
    if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x24BED3758]))
    {
      Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x24BED3540]);
      v14 = 2;
    }
    else
    {
      Int = 0;
      v14 = 0;
    }
    MEMORY[0x22E2A2E9C](buf);
    v15 = *a3;
    if (*a3)
      v19 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v19 = 0;
    if (v19)
      goto LABEL_19;
LABEL_13:
    v17 = 0;
    v18 = 0;
    goto LABEL_28;
  }
  Int = 0;
  v14 = 0;
  v15 = *a3;
  if (*a3)
    v16 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  else
    v16 = 0;
  if (!v16)
    goto LABEL_13;
LABEL_19:
  v20 = a1[5];
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = a4;
    *(_WORD *)&buf[8] = 2112;
    *(_QWORD *)&buf[10] = v15;
    _os_log_debug_impl(&dword_227A72000, v20, OS_LOG_TYPE_DEBUG, "#D Setting SINR with for sim[%d]: %@", buf, 0x12u);
    v15 = *a3;
  }
  memset(buf, 170, 16);
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v15);
  if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x24BED3758]))
  {
    v21 = 0.0;
    ctu::cf::map_adapter::getDouble((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x24BED3760], 0.0);
    v14 |= 1u;
    if (v22 >= 0.0)
    {
      v21 = v22;
      if (v22 > 1.0)
        v21 = 1.0;
    }
    v18 = (v21 * 10000.0);
    v17 = (10000.0 - v21 * 10000.0);
  }
  else
  {
    v17 = 0;
    v18 = 0;
    v14 &= 2u;
  }
  MEMORY[0x22E2A2E9C](buf);
LABEL_28:
  *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v67 = v23;
  __p = v23;
  *(_OWORD *)&buf[16] = v23;
  v66 = v23;
  *(_OWORD *)buf = v23;
  AriSdk::ARI_CsiIdcRTSetLinkQualityReportConfigReq_SDK::ARI_CsiIdcRTSetLinkQualityReportConfigReq_SDK((AriSdk::ARI_CsiIdcRTSetLinkQualityReportConfigReq_SDK *)buf);
  v24 = operator new(4uLL);
  *v24 = a4;
  v25 = (void *)__p;
  *(_QWORD *)&__p = v24;
  if (v25)
    operator delete(v25);
  v26 = operator new(0xCuLL);
  *v26 = v14;
  v26[1] = Int;
  *((_WORD *)v26 + 1) = 0;
  *((_DWORD *)v26 + 1) = v17;
  *((_DWORD *)v26 + 2) = v18;
  v27 = (void *)*((_QWORD *)&__p + 1);
  *((_QWORD *)&__p + 1) = v26;
  if (v27)
    operator delete(v27);
  v28 = (std::__shared_weak_count *)a1[10];
  if (!v28 || (v29 = (std::__shared_weak_count_vtbl *)a1[9], (v30 = std::__shared_weak_count::lock(v28)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v31 = v30;
  p_shared_weak_owners = (unint64_t *)&v30->__shared_weak_owners_;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v31);
  }
  v36 = a1[24];
  do
    v37 = __ldxr(p_shared_weak_owners);
  while (__stxr(v37 + 1, p_shared_weak_owners));
  if (!*(_QWORD *)a5)
  {
    v38 = 0;
    v39 = *(NSObject **)(a5 + 8);
    if (!v39)
      goto LABEL_45;
    goto LABEL_44;
  }
  v38 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a5);
  v39 = *(NSObject **)(a5 + 8);
  if (v39)
LABEL_44:
    dispatch_retain(v39);
LABEL_45:
  v40 = (std::__shared_weak_count *)operator new(0x40uLL);
  v40->__shared_owners_ = 0;
  v41 = (unint64_t *)&v40->__shared_owners_;
  v40->__shared_weak_owners_ = 0;
  v40->__vftable = (std::__shared_weak_count_vtbl *)off_24F036910;
  v40[1].__vftable = v29;
  v40[1].__shared_owners_ = (uint64_t)v31;
  v40[1].__shared_weak_owners_ = (uint64_t)a1;
  v40[2].__vftable = v38;
  v40[2].__shared_owners_ = (uint64_t)v39;
  v42 = (const void *)MEMORY[0x24BDAC760];
  v58 = MEMORY[0x24BDAC760];
  v59 = 1174405120;
  v60 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver23setLinkQualityMode_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEES9_NS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v61 = &__block_descriptor_tmp_68;
  v62 = v40 + 1;
  v63 = v40;
  do
    v43 = __ldxr(v41);
  while (__stxr(v43 + 1, v41));
  aBlock[0] = v42;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_24F036430;
  aBlock[4] = &v58;
  v44 = _Block_copy(aBlock);
  v45 = v63;
  if (v63)
  {
    v46 = (unint64_t *)&v63->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  do
    v48 = __ldaxr(v41);
  while (__stlxr(v48 - 1, v41));
  if (v48)
  {
    if ((_QWORD)__p)
      goto LABEL_60;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    if ((_QWORD)__p)
      goto LABEL_60;
  }
  v49 = operator new(4uLL);
  *v49 = 0;
  *(_QWORD *)&__p = v49;
LABEL_60:
  v57 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v50 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v50 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v56[0] = v50;
  v56[1] = v50;
  v51 = *(std::__shared_weak_count **)(v36 + 16);
  v58 = *(_QWORD *)(v36 + 8);
  if (!v51)
  {
    v59 = 0;
LABEL_72:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v59 = (uint64_t)std::__shared_weak_count::lock(v51);
  if (!v59)
    goto LABEL_72;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v52 = (std::__shared_weak_count *)v59;
  if (v59)
  {
    v53 = (unint64_t *)(v59 + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  aBlock[0] = v44;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v56);
  std::__shared_weak_count::__release_weak(v31);
  return MEMORY[0x22E2A43E4](buf);
}

uint64_t coex::ARICommandDriver::setWiFiStatus_sync(_QWORD *a1, const __CFDictionary **a2, uint64_t a3)
{
  __int128 v6;
  _DWORD *v7;
  void *v8;
  int Int;
  _DWORD *v10;
  void *v11;
  int v12;
  _DWORD *v13;
  void *v14;
  int v15;
  _DWORD *v16;
  void *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  NSObject *v29;
  const __CFDictionary *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  const void *v33;
  unint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _OWORD v47[2];
  unint64_t v48;
  _OWORD v49[4];
  void *__p[2];
  void *v51[2];
  _QWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, const unsigned __int8 *);
  void *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  const void *aBlock[5];

  v52[0] = 0xAAAAAAAAAAAAAAAALL;
  v52[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v52, *a2);
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v6;
  *(_OWORD *)v51 = v6;
  v49[2] = v6;
  v49[3] = v6;
  v49[0] = v6;
  v49[1] = v6;
  AriSdk::ARI_CsiIdcSetWifiStatusReq_SDK::ARI_CsiIdcSetWifiStatusReq_SDK((AriSdk::ARI_CsiIdcSetWifiStatusReq_SDK *)v49);
  v7 = operator new(4uLL);
  *v7 = 0;
  v8 = __p[0];
  __p[0] = v7;
  if (v8)
    operator delete(v8);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v52, (const __CFString *)*MEMORY[0x24BED35C0]);
  v10 = operator new(4uLL);
  *v10 = Int;
  v11 = __p[1];
  __p[1] = v10;
  if (v11)
    operator delete(v11);
  v12 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v52, (const __CFString *)*MEMORY[0x24BED3508]);
  v13 = operator new(4uLL);
  *v13 = v12;
  v14 = v51[0];
  v51[0] = v13;
  if (v14)
    operator delete(v14);
  v15 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v52, (const __CFString *)*MEMORY[0x24BED3520]);
  v16 = operator new(4uLL);
  *v16 = v15;
  v17 = v51[1];
  v51[1] = v16;
  if (v17)
    operator delete(v17);
  v18 = (std::__shared_weak_count *)a1[10];
  if (!v18 || (v19 = (std::__shared_weak_count_vtbl *)a1[9], (v20 = std::__shared_weak_count::lock(v18)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v21 = v20;
  p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v21);
  }
  v26 = a1[24];
  do
    v27 = __ldxr(p_shared_weak_owners);
  while (__stxr(v27 + 1, p_shared_weak_owners));
  if (*(_QWORD *)a3)
  {
    v28 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a3);
    v29 = *(NSObject **)(a3 + 8);
    if (!v29)
      goto LABEL_22;
    goto LABEL_21;
  }
  v28 = 0;
  v29 = *(NSObject **)(a3 + 8);
  if (v29)
LABEL_21:
    dispatch_retain(v29);
LABEL_22:
  v30 = *a2;
  if (*a2)
    CFRetain(v30);
  v31 = (std::__shared_weak_count *)operator new(0x48uLL);
  v31->__shared_owners_ = 0;
  v32 = (unint64_t *)&v31->__shared_owners_;
  v31->__shared_weak_owners_ = 0;
  v31->__vftable = (std::__shared_weak_count_vtbl *)off_24F036790;
  v31[1].__vftable = v19;
  v31[1].__shared_owners_ = (uint64_t)v21;
  v31[1].__shared_weak_owners_ = (uint64_t)a1;
  v31[2].__vftable = v28;
  v31[2].__shared_owners_ = (uint64_t)v29;
  v31[2].__shared_weak_owners_ = (uint64_t)v30;
  v33 = (const void *)MEMORY[0x24BDAC760];
  v53 = MEMORY[0x24BDAC760];
  v54 = 1174405120;
  v55 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver18setWiFiStatus_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v56 = &__block_descriptor_tmp_54_0;
  v57 = v31 + 1;
  v58 = v31;
  do
    v34 = __ldxr(v32);
  while (__stxr(v34 + 1, v32));
  aBlock[0] = v33;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_24F036430;
  aBlock[4] = &v53;
  v35 = _Block_copy(aBlock);
  v36 = v58;
  if (v58)
  {
    v37 = (unint64_t *)&v58->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  do
    v39 = __ldaxr(v32);
  while (__stlxr(v39 - 1, v32));
  if (v39)
  {
    if (__p[0])
      goto LABEL_39;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    if (__p[0])
      goto LABEL_39;
  }
  v40 = operator new(4uLL);
  *v40 = 0;
  __p[0] = v40;
LABEL_39:
  v48 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v41 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47[0] = v41;
  v47[1] = v41;
  v42 = *(std::__shared_weak_count **)(v26 + 16);
  v53 = *(_QWORD *)(v26 + 8);
  if (!v42)
  {
    v54 = 0;
LABEL_51:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v54 = (uint64_t)std::__shared_weak_count::lock(v42);
  if (!v54)
    goto LABEL_51;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v43 = (std::__shared_weak_count *)v54;
  if (v54)
  {
    v44 = (unint64_t *)(v54 + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  aBlock[0] = v35;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v47);
  std::__shared_weak_count::__release_weak(v21);
  MEMORY[0x22E2A3AD8](v49);
  return MEMORY[0x22E2A2E9C](v52);
}

void sub_227AC4910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__shared_weak_count *v21;
  uint64_t v22;
  const void *v24;

  v24 = *(const void **)(v22 - 120);
  if (v24)
    _Block_release(v24);
  MEMORY[0x22E2A2FF8](&a15);
  coex::ARICommandDriver::setWiFiStatus_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0::~$_0(&a9);
  std::__shared_weak_count::__release_weak(v21);
  MEMORY[0x22E2A3AD8](&a21);
  MEMORY[0x22E2A2E9C](v22 - 184);
  _Unwind_Resume(a1);
}

uint64_t coex::ARICommandDriver::setLAAConfig_sync(_QWORD *a1, const __CFDictionary **a2, int a3, uint64_t a4)
{
  __int128 v8;
  _DWORD *v9;
  void *v10;
  int Bool;
  _DWORD *v12;
  void *v13;
  char Int;
  _BYTE *v15;
  void *v16;
  char v17;
  _BYTE *v18;
  void *v19;
  char v20;
  _BYTE *v21;
  void *v22;
  __int16 v23;
  _WORD *v24;
  void *v25;
  __int16 v26;
  _WORD *v27;
  void *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_weak_owners;
  unint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  std::__shared_weak_count_vtbl *v39;
  NSObject *v40;
  const __CFDictionary *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  const void *v44;
  unint64_t v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  _DWORD *v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _OWORD v58[2];
  unint64_t v59;
  _OWORD v60[4];
  void *__p[2];
  void *v62[2];
  void *v63[2];
  void *v64;
  _QWORD v65[2];
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, const unsigned __int8 *);
  void *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  const void *aBlock[5];

  v65[0] = 0xAAAAAAAAAAAAAAAALL;
  v65[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v65, *a2);
  v64 = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v62 = v8;
  *(_OWORD *)v63 = v8;
  v60[3] = v8;
  *(_OWORD *)__p = v8;
  v60[1] = v8;
  v60[2] = v8;
  v60[0] = v8;
  AriSdk::ARI_CsiIdcSetLaaConfigReq_SDK::ARI_CsiIdcSetLaaConfigReq_SDK((AriSdk::ARI_CsiIdcSetLaaConfigReq_SDK *)v60);
  v9 = operator new(4uLL);
  *v9 = a3;
  v10 = __p[0];
  __p[0] = v9;
  if (v10)
    operator delete(v10);
  Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v65, (const __CFString *)*MEMORY[0x24BED3628]);
  v12 = operator new(4uLL);
  *v12 = Bool;
  v13 = __p[1];
  __p[1] = v12;
  if (v13)
    operator delete(v13);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v65, (const __CFString *)*MEMORY[0x24BED36D8]);
  v15 = operator new(1uLL);
  *v15 = Int;
  v16 = v62[0];
  v62[0] = v15;
  if (v16)
    operator delete(v16);
  v17 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v65, (const __CFString *)*MEMORY[0x24BED3630]);
  v18 = operator new(1uLL);
  *v18 = v17;
  v19 = v62[1];
  v62[1] = v18;
  if (v19)
    operator delete(v19);
  v20 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v65, (const __CFString *)*MEMORY[0x24BED3668]);
  v21 = operator new(1uLL);
  *v21 = v20;
  v22 = v63[0];
  v63[0] = v21;
  if (v22)
    operator delete(v22);
  v23 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v65, (const __CFString *)*MEMORY[0x24BED3620]);
  v24 = operator new(2uLL);
  *v24 = v23;
  v25 = v63[1];
  v63[1] = v24;
  if (v25)
    operator delete(v25);
  v26 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v65, (const __CFString *)*MEMORY[0x24BED36A8]);
  v27 = operator new(2uLL);
  *v27 = v26;
  v28 = v64;
  v64 = v27;
  if (v28)
    operator delete(v28);
  v29 = (std::__shared_weak_count *)a1[10];
  if (!v29 || (v30 = (std::__shared_weak_count_vtbl *)a1[9], (v31 = std::__shared_weak_count::lock(v29)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v32 = v31;
  p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
  do
    v34 = __ldxr(p_shared_weak_owners);
  while (__stxr(v34 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v31->__shared_owners_;
  do
    v36 = __ldaxr(p_shared_owners);
  while (__stlxr(v36 - 1, p_shared_owners));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v32);
  }
  v37 = a1[24];
  do
    v38 = __ldxr(p_shared_weak_owners);
  while (__stxr(v38 + 1, p_shared_weak_owners));
  if (*(_QWORD *)a4)
  {
    v39 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a4);
    v40 = *(NSObject **)(a4 + 8);
    if (!v40)
      goto LABEL_28;
    goto LABEL_27;
  }
  v39 = 0;
  v40 = *(NSObject **)(a4 + 8);
  if (v40)
LABEL_27:
    dispatch_retain(v40);
LABEL_28:
  v41 = *a2;
  if (*a2)
    CFRetain(v41);
  v42 = (std::__shared_weak_count *)operator new(0x48uLL);
  v42->__shared_owners_ = 0;
  v43 = (unint64_t *)&v42->__shared_owners_;
  v42->__shared_weak_owners_ = 0;
  v42->__vftable = (std::__shared_weak_count_vtbl *)off_24F036810;
  v42[1].__vftable = v30;
  v42[1].__shared_owners_ = (uint64_t)v32;
  v42[1].__shared_weak_owners_ = (uint64_t)a1;
  v42[2].__vftable = v39;
  v42[2].__shared_owners_ = (uint64_t)v40;
  v42[2].__shared_weak_owners_ = (uint64_t)v41;
  v44 = (const void *)MEMORY[0x24BDAC760];
  v66 = MEMORY[0x24BDAC760];
  v67 = 1174405120;
  v68 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver17setLAAConfig_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v69 = &__block_descriptor_tmp_58;
  v70 = v42 + 1;
  v71 = v42;
  do
    v45 = __ldxr(v43);
  while (__stxr(v45 + 1, v43));
  aBlock[0] = v44;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_24F036430;
  aBlock[4] = &v66;
  v46 = _Block_copy(aBlock);
  v47 = v71;
  if (v71)
  {
    v48 = (unint64_t *)&v71->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  do
    v50 = __ldaxr(v43);
  while (__stlxr(v50 - 1, v43));
  if (v50)
  {
    if (__p[0])
      goto LABEL_45;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    if (__p[0])
      goto LABEL_45;
  }
  v51 = operator new(4uLL);
  *v51 = 0;
  __p[0] = v51;
LABEL_45:
  v59 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v52 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v52 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v58[0] = v52;
  v58[1] = v52;
  v53 = *(std::__shared_weak_count **)(v37 + 16);
  v66 = *(_QWORD *)(v37 + 8);
  if (!v53)
  {
    v67 = 0;
LABEL_57:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v67 = (uint64_t)std::__shared_weak_count::lock(v53);
  if (!v67)
    goto LABEL_57;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v54 = (std::__shared_weak_count *)v67;
  if (v67)
  {
    v55 = (unint64_t *)(v67 + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  aBlock[0] = v46;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v58);
  std::__shared_weak_count::__release_weak(v32);
  MEMORY[0x22E2A3964](v60);
  return MEMORY[0x22E2A2E9C](v65);
}

void sub_227AC4EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__shared_weak_count *v21;
  uint64_t v22;
  const void *v24;

  v24 = *(const void **)(v22 - 120);
  if (v24)
    _Block_release(v24);
  MEMORY[0x22E2A2FF8](&a15);
  coex::ARICommandDriver::setLAAConfig_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0::~$_0(&a9);
  std::__shared_weak_count::__release_weak(v21);
  MEMORY[0x22E2A3964](&a21);
  MEMORY[0x22E2A2E9C](v22 - 184);
  _Unwind_Resume(a1);
}

uint64_t coex::ARICommandDriver::setFCMBCMAntennaMode_sync(_QWORD *a1, const __CFDictionary **a2, uint64_t a3)
{
  __int128 v4;
  int Int;
  _DWORD *v6;
  void *v7;
  const void *v8;
  CFIndex Count;
  CFIndex v10;
  uint64_t v11;
  const void *ValueAtIndex;
  const void *v13;
  CFTypeID v14;
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;
  const char *v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  const char *v24;
  void **v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  _BYTE *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  __int128 *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_weak_owners;
  unint64_t v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  std::__shared_weak_count_vtbl *v50;
  NSObject *v51;
  const __CFDictionary *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  const void *v55;
  unint64_t v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v70;
  uint64_t v71;
  __CFString *v72;
  __CFString *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  _QWORD *v76;
  void *v77;
  dispatch_object_t object;
  CFTypeRef cf;
  _OWORD v80[2];
  unint64_t v81;
  CFTypeRef v82;
  _OWORD v83[4];
  void *__p[2];
  __int128 v85;
  _QWORD v86[2];
  void **v87;
  uint64_t v88;
  void (*v89)(uint64_t, const unsigned __int8 *);
  void *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  const void *aBlock[6];

  v86[0] = 0xAAAAAAAAAAAAAAAALL;
  v86[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v86, *a2);
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v4;
  v85 = v4;
  v83[2] = v4;
  v83[3] = v4;
  v83[0] = v4;
  v83[1] = v4;
  AriSdk::ARI_IBIRfSetAntennaPortMappingReq_SDK::ARI_IBIRfSetAntennaPortMappingReq_SDK((AriSdk::ARI_IBIRfSetAntennaPortMappingReq_SDK *)v83);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v86, (const __CFString *)*MEMORY[0x24BED36D0]);
  v6 = operator new(4uLL);
  *v6 = Int;
  v7 = __p[0];
  __p[0] = v6;
  if (v7)
    operator delete(v7);
  v8 = (const void *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v86, (const __CFString *)*MEMORY[0x24BED3748]);
  v82 = v8;
  Count = CFArrayGetCount((CFArrayRef)v8);
  if (Count >= 1)
  {
    v10 = 0;
    v11 = 50;
    if (Count < 50)
      v11 = Count;
    v71 = v11;
    v73 = (__CFString *)*MEMORY[0x24BED36F0];
    v72 = (__CFString *)*MEMORY[0x24BED36F8];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v8, v10);
      v13 = ValueAtIndex;
      if (ValueAtIndex && (v14 = CFGetTypeID(ValueAtIndex), v14 == CFDictionaryGetTypeID()))
      {
        aBlock[0] = v13;
        CFRetain(v13);
      }
      else
      {
        v13 = 0;
        aBlock[0] = 0;
      }
      v15 = a1;
      v74 = 0xAAAAAAAAAAAAAAAALL;
      v75 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v74, (const __CFDictionary *)v13);
      v16 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)&v74, v73);
      v17 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)&v74, v72);
      v20 = __p[1];
      v19 = (_BYTE *)v85;
      v21 = v85 - (unint64_t)__p[1];
      if ((unint64_t)v85 - (unint64_t)__p[1] >= 0x190)
      {
        AriOsa::LogSrcInfo((AriOsa *)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "emplace_back", v18);
        v25 = (void **)&v87;
        if (SHIBYTE(v89) < 0)
          v25 = v87;
        Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array is full, cannot add new values", v24, v25, 371);
        if (SHIBYTE(v89) < 0)
          operator delete(v87);
        goto LABEL_38;
      }
      v22 = v16 | (unint64_t)(v17 << 32) | 0xAAAAAA00;
      if ((unint64_t)v85 >= *((_QWORD *)&v85 + 1))
        break;
      *(_QWORD *)v85 = v22;
      v23 = v19 + 8;
LABEL_37:
      *(_QWORD *)&v85 = v23;
LABEL_38:
      MEMORY[0x22E2A2E9C](&v74);
      if (v13)
        CFRelease(v13);
      if (++v10 == v71)
        goto LABEL_40;
    }
    v26 = v21 >> 3;
    v27 = *((_QWORD *)&v85 + 1) - (unint64_t)__p[1];
    if ((uint64_t)(*((_QWORD *)&v85 + 1) - (unint64_t)__p[1]) >> 2 <= (unint64_t)((v21 >> 3) + 1))
      v28 = v26 + 1;
    else
      v28 = v27 >> 2;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    if (v28 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v70 = v28;
    v29 = operator new(8 * v28);
    v30 = (uint64_t *)&v29[8 * v26];
    *v30 = v22;
    v23 = v30 + 1;
    if (v19 != v20)
    {
      v31 = v19 - v20 - 8;
      if (v31 < 0x58)
        goto LABEL_93;
      if ((unint64_t)(&v19[-(v21 & 0xFFFFFFFFFFFFFFF8)] - v29) < 0x20)
        goto LABEL_93;
      v32 = (v31 >> 3) + 1;
      v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
      v34 = &v19[-v33];
      v30 = (uint64_t *)((char *)v30 - v33);
      v35 = &v29[8 * v26 - 16];
      v36 = (__int128 *)(v19 - 16);
      v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v38 = *v36;
        *(v35 - 1) = *(v36 - 1);
        *v35 = v38;
        v35 -= 2;
        v36 -= 2;
        v37 -= 4;
      }
      while (v37);
      v19 = v34;
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_93:
        do
        {
          v39 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *--v30 = v39;
        }
        while (v19 != v20);
        v19 = v20;
        a1 = v15;
        __p[1] = v30;
        *(_QWORD *)&v85 = v23;
        *((_QWORD *)&v85 + 1) = &v29[8 * v70];
        if (!v20)
          goto LABEL_37;
LABEL_36:
        operator delete(v19);
        goto LABEL_37;
      }
      v19 = v20;
    }
    a1 = v15;
    __p[1] = v30;
    *(_QWORD *)&v85 = v23;
    *((_QWORD *)&v85 + 1) = &v29[8 * v70];
    if (!v19)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_40:
  v40 = (std::__shared_weak_count *)a1[10];
  if (!v40 || (v41 = (std::__shared_weak_count_vtbl *)a1[9], (v42 = std::__shared_weak_count::lock(v40)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v43 = v42;
  p_shared_weak_owners = (unint64_t *)&v42->__shared_weak_owners_;
  do
    v45 = __ldxr(p_shared_weak_owners);
  while (__stxr(v45 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v42->__shared_owners_;
  do
    v47 = __ldaxr(p_shared_owners);
  while (__stlxr(v47 - 1, p_shared_owners));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v43);
  }
  v48 = a1[24];
  v74 = (unint64_t)v41;
  v75 = v43;
  do
    v49 = __ldxr(p_shared_weak_owners);
  while (__stxr(v49 + 1, p_shared_weak_owners));
  v76 = a1;
  if (*(_QWORD *)a3)
  {
    v50 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a3);
    v51 = *(NSObject **)(a3 + 8);
    v77 = v50;
    object = v51;
    if (!v51)
      goto LABEL_53;
    goto LABEL_52;
  }
  v50 = 0;
  v51 = *(NSObject **)(a3 + 8);
  v77 = 0;
  object = v51;
  if (v51)
LABEL_52:
    dispatch_retain(v51);
LABEL_53:
  v52 = *a2;
  cf = v52;
  if (v52)
    CFRetain(v52);
  v53 = (std::__shared_weak_count *)operator new(0x48uLL);
  v53->__shared_owners_ = 0;
  v54 = (unint64_t *)&v53->__shared_owners_;
  v53->__shared_weak_owners_ = 0;
  v53->__vftable = (std::__shared_weak_count_vtbl *)off_24F036890;
  v53[1].__vftable = v41;
  v74 = 0;
  v75 = 0;
  v53[1].__shared_owners_ = (uint64_t)v43;
  v53[1].__shared_weak_owners_ = (uint64_t)a1;
  v53[2].__vftable = v50;
  v53[2].__shared_owners_ = (uint64_t)v51;
  v77 = 0;
  object = 0;
  v53[2].__shared_weak_owners_ = (uint64_t)v52;
  cf = 0;
  v55 = (const void *)MEMORY[0x24BDAC760];
  v87 = (void **)MEMORY[0x24BDAC760];
  v88 = 1174405120;
  v89 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver25setFCMBCMAntennaMode_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v90 = &__block_descriptor_tmp_64;
  v91 = v53 + 1;
  v92 = v53;
  do
    v56 = __ldxr(v54);
  while (__stxr(v56 + 1, v54));
  aBlock[0] = v55;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_24F036430;
  aBlock[4] = &v87;
  v57 = _Block_copy(aBlock);
  v58 = v92;
  if (v92)
  {
    v59 = (unint64_t *)&v92->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  do
    v61 = __ldaxr(v54);
  while (__stlxr(v61 - 1, v54));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
  *(_QWORD *)&v62 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v62 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v80[0] = v62;
  v80[1] = v62;
  v81 = 0xAAAAAAAAAAAAAAAALL;
  v63 = *(std::__shared_weak_count **)(v48 + 16);
  v87 = *(void ***)(v48 + 8);
  if (!v63)
  {
    v88 = 0;
LABEL_90:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v88 = (uint64_t)std::__shared_weak_count::lock(v63);
  if (!v88)
    goto LABEL_90;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v64 = (std::__shared_weak_count *)v88;
  if (v88)
  {
    v65 = (unint64_t *)(v88 + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  aBlock[0] = v57;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v80);
  if (cf)
    CFRelease(cf);
  if (object)
    dispatch_release(object);
  if (v77)
    _Block_release(v77);
  if (v75)
    std::__shared_weak_count::__release_weak(v75);
  std::__shared_weak_count::__release_weak(v43);
  if (v82)
    CFRelease(v82);
  MEMORY[0x22E2A421C](v83);
  return MEMORY[0x22E2A2E9C](v86);
}

void sub_227AC5628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,const void *a28,char a29)
{
  std::__shared_weak_count *v29;
  uint64_t v30;
  const void *v32;

  v32 = *(const void **)(v30 - 128);
  if (v32)
    _Block_release(v32);
  MEMORY[0x22E2A2FF8](&a23);
  coex::ARICommandDriver::setFCMBCMAntennaMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0::~$_0(&a17);
  std::__shared_weak_count::__release_weak(v29);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a28);
  MEMORY[0x22E2A421C](&a29);
  MEMORY[0x22E2A2E9C](v30 - 192);
  _Unwind_Resume(a1);
}

uint64_t coex::ARICommandDriver::setRC1Duration_sync(_QWORD *a1, const __CFDictionary **a2, int a3, uint64_t a4)
{
  NSObject *v8;
  int Int;
  __int128 v10;
  _DWORD *v11;
  void *v12;
  _DWORD *v13;
  void *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count_vtbl *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  NSObject *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  const void *v29;
  unint64_t v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  const __CFDictionary *v43;
  _OWORD v44[2];
  unint64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, const unsigned __int8 *);
  void *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  const void *aBlock[5];
  _BYTE buf[32];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v43 = *a2;
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = a3;
    *(_WORD *)&buf[8] = 2112;
    *(_QWORD *)&buf[10] = v43;
    _os_log_debug_impl(&dword_227A72000, v8, OS_LOG_TYPE_DEBUG, "#D Setting RC1 duration for sim[%d]: %@", buf, 0x12u);
  }
  v46[0] = 0xAAAAAAAAAAAAAAAALL;
  v46[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v46, *a2);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v46, (const __CFString *)*MEMORY[0x24BED3568]);
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v56 = v10;
  v57 = v10;
  *(_OWORD *)&buf[16] = v10;
  v55 = v10;
  *(_OWORD *)buf = v10;
  AriSdk::ARI_CsiIdcSetRadio1Req_SDK::ARI_CsiIdcSetRadio1Req_SDK((AriSdk::ARI_CsiIdcSetRadio1Req_SDK *)buf);
  v11 = operator new(4uLL);
  *v11 = a3;
  v12 = (void *)v57;
  *(_QWORD *)&v57 = v11;
  if (v12)
    operator delete(v12);
  v13 = operator new(4uLL);
  *v13 = Int;
  v14 = (void *)*((_QWORD *)&v57 + 1);
  *((_QWORD *)&v57 + 1) = v13;
  if (v14)
    operator delete(v14);
  v15 = (std::__shared_weak_count *)a1[10];
  if (!v15 || (v16 = (std::__shared_weak_count_vtbl *)a1[9], (v17 = std::__shared_weak_count::lock(v15)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v18 = v17;
  p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v18);
  }
  v23 = a1[24];
  do
    v24 = __ldxr(p_shared_weak_owners);
  while (__stxr(v24 + 1, p_shared_weak_owners));
  if (!*(_QWORD *)a4)
  {
    v25 = 0;
    v26 = *(NSObject **)(a4 + 8);
    if (!v26)
      goto LABEL_20;
    goto LABEL_19;
  }
  v25 = _Block_copy(*(const void **)a4);
  v26 = *(NSObject **)(a4 + 8);
  if (v26)
LABEL_19:
    dispatch_retain(v26);
LABEL_20:
  v27 = (std::__shared_weak_count *)operator new(0x38uLL);
  v27->__shared_owners_ = 0;
  v28 = (unint64_t *)&v27->__shared_owners_;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)off_24F036A10;
  v27[1].__vftable = v16;
  v27[1].__shared_owners_ = (uint64_t)v18;
  v27[1].__shared_weak_owners_ = (uint64_t)v25;
  v27[2].__vftable = (std::__shared_weak_count_vtbl *)v26;
  v29 = (const void *)MEMORY[0x24BDAC760];
  v47 = MEMORY[0x24BDAC760];
  v48 = 1174405120;
  v49 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver19setRC1Duration_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v50 = &__block_descriptor_tmp_76;
  v51 = v27 + 1;
  v52 = v27;
  do
    v30 = __ldxr(v28);
  while (__stxr(v30 + 1, v28));
  aBlock[0] = v29;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_24F036430;
  aBlock[4] = &v47;
  v31 = _Block_copy(aBlock);
  v32 = v52;
  if (v52)
  {
    v33 = (unint64_t *)&v52->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  do
    v35 = __ldaxr(v28);
  while (__stlxr(v35 - 1, v28));
  if (v35)
  {
    if ((_QWORD)v57)
      goto LABEL_35;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if ((_QWORD)v57)
      goto LABEL_35;
  }
  v36 = operator new(4uLL);
  *v36 = 0;
  *(_QWORD *)&v57 = v36;
LABEL_35:
  v45 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v37 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v44[0] = v37;
  v44[1] = v37;
  v38 = *(std::__shared_weak_count **)(v23 + 16);
  v47 = *(_QWORD *)(v23 + 8);
  if (!v38)
  {
    v48 = 0;
LABEL_47:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v48 = (uint64_t)std::__shared_weak_count::lock(v38);
  if (!v48)
    goto LABEL_47;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v39 = (std::__shared_weak_count *)v48;
  if (v48)
  {
    v40 = (unint64_t *)(v48 + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  aBlock[0] = v31;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v44);
  std::__shared_weak_count::__release_weak(v18);
  MEMORY[0x22E2A34E4](buf);
  return MEMORY[0x22E2A2E9C](v46);
}

void sub_227AC5B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex16ARICommandDriver8set_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_13(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  const void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_QWORD *)(v1 + 40))
  {
    if (*(_QWORD *)(v1 + 48))
    {
      v2 = 0;
      v3 = 0;
      coex::CommandDriver::Callback::operator()(v1 + 40, &v3, &v2);
    }
  }
}

void coex::ARICommandDriver::getScanFreqBandFilter_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  CFTypeRef v5;
  CFTypeRef v6;
  const void *v7;
  CFTypeRef v8;
  void *__p[2];
  char v10;
  CFTypeRef cf[4];

  cf[3] = *(CFTypeRef *)MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(cf[0]) = 136315138;
    *(CFTypeRef *)((char *)cf + 4) = "getScanFreqBandFilter_sync";
    _os_log_debug_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)cf, 0xCu);
  }
  cf[0] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v10 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  v5 = cf[0];
  v8 = cf[0];
  if (!cf[0])
  {
    v7 = 0;
    coex::CommandDriver::Callback::operator()(a3, &v8, &v7);
    v6 = cf[0];
    if (!cf[0])
      return;
    goto LABEL_7;
  }
  CFRetain(cf[0]);
  v7 = 0;
  coex::CommandDriver::Callback::operator()(a3, &v8, &v7);
  CFRelease(v5);
  v6 = cf[0];
  if (cf[0])
LABEL_7:
    CFRelease(v6);
}

void sub_227AC5DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t coex::ARICommandDriver::pollWWANState_sync(_QWORD *a1, int a2)
{
  NSObject *v4;
  __int128 v5;
  _DWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  const void *v20;
  unint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _DWORD *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _OWORD v34[2];
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, const unsigned __int8 *);
  void *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  const void *aBlock[5];
  uint8_t buf[16];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *__p;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_debug_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEBUG, "#D Polling WWAN state for sim[%d]", buf, 8u);
  }
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v45 = v5;
  v46 = v5;
  *(_OWORD *)buf = v5;
  v44 = v5;
  AriSdk::ARI_CsiIdcGetCellConfigReq_SDK::ARI_CsiIdcGetCellConfigReq_SDK((AriSdk::ARI_CsiIdcGetCellConfigReq_SDK *)buf);
  v6 = operator new(4uLL);
  *v6 = a2;
  v7 = __p;
  __p = v6;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)a1[10];
  if (!v8 || (v9 = (std::__shared_weak_count_vtbl *)a1[9], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v16 = a1[24];
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = (std::__shared_weak_count *)operator new(0x30uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)off_24F036510;
  v18[1].__vftable = v9;
  v18[1].__shared_owners_ = (uint64_t)v11;
  v18[1].__shared_weak_owners_ = (uint64_t)a1;
  v20 = (const void *)MEMORY[0x24BDAC760];
  v36 = MEMORY[0x24BDAC760];
  v37 = 1174405120;
  v38 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver18pollWWANState_syncENS2_5SubIdEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v39 = &__block_descriptor_tmp_36_0;
  v40 = v18 + 1;
  v41 = v18;
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  aBlock[0] = v20;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_24F036430;
  aBlock[4] = &v36;
  v22 = _Block_copy(aBlock);
  v23 = v41;
  if (v41)
  {
    v24 = (unint64_t *)&v41->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  do
    v26 = __ldaxr(v19);
  while (__stlxr(v26 - 1, v19));
  if (v26)
  {
    if (__p)
      goto LABEL_28;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (__p)
      goto LABEL_28;
  }
  v27 = operator new(4uLL);
  *v27 = 0;
  __p = v27;
LABEL_28:
  v35 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v28 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34[0] = v28;
  v34[1] = v28;
  v29 = *(std::__shared_weak_count **)(v16 + 16);
  v36 = *(_QWORD *)(v16 + 8);
  if (!v29)
  {
    v37 = 0;
LABEL_40:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v37 = (uint64_t)std::__shared_weak_count::lock(v29);
  if (!v37)
    goto LABEL_40;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v30 = (std::__shared_weak_count *)v37;
  if (v37)
  {
    v31 = (unint64_t *)(v37 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  aBlock[0] = v22;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v34);
  std::__shared_weak_count::__release_weak(v11);
  return MEMORY[0x22E2A3A84](buf);
}

void sub_227AC6164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *aBlock,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void coex::ARICommandDriver::pollWLANScanState_sync(coex::ARICommandDriver *this)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    v2 = 136315138;
    v3 = "pollWLANScanState_sync";
    _os_log_debug_impl(&dword_227A72000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void coex::ARICommandDriver::pollWLANConnState_sync(coex::ARICommandDriver *this)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    v2 = 136315138;
    v3 = "pollWLANConnState_sync";
    _os_log_debug_impl(&dword_227A72000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void coex::ARICommandDriver::pollPolicy_sync(uint64_t a1, int a2)
{
  NSObject *v4;
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  CFMutableDictionaryRef v8;
  CFMutableDictionaryRef v9;
  CFTypeID v10;
  __CFDictionary *v11;
  __CFDictionary *v12;
  CFMutableDictionaryRef v13;
  uint8_t buf[8];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_debug_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEBUG, "#D Polling Policy for sim[%d]", buf, 8u);
  }
  *(_QWORD *)buf = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v7 = Mutable;
  if (Mutable)
    *(_QWORD *)buf = Mutable;
  v13 = 0;
  v8 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v9 = v8;
  if (v8)
    v13 = v8;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v7, (CFTypeRef)*MEMORY[0x24BED3550], v8);
  if (v7 && (v10 = CFGetTypeID(v7), v10 == CFDictionaryGetTypeID()))
  {
    v12 = v7;
    CFRetain(v7);
    v11 = v7;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  coex::ARICommandDriver::sendStateUpdate_sync(a1, (const void **)&v12, a2);
  if (v11)
    CFRelease(v11);
  if (v9)
  {
    CFRelease(v9);
    v7 = *(__CFDictionary **)buf;
  }
  if (v7)
    CFRelease(v7);
}

void sub_227AC6544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t coex::ARICommandDriver::pollLinkQuality_sync(_QWORD *a1, int a2)
{
  NSObject *v4;
  __int128 v5;
  _DWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  const void *v20;
  unint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _DWORD *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _OWORD v34[2];
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, const unsigned __int8 *);
  void *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  const void *aBlock[5];
  uint8_t buf[16];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *__p;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_debug_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEBUG, "#D Polling Link quality for sim[%d]", buf, 8u);
  }
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v45 = v5;
  v46 = v5;
  *(_OWORD *)buf = v5;
  v44 = v5;
  AriSdk::ARI_CsiIdcRTGetLinkQualityReportReq_SDK::ARI_CsiIdcRTGetLinkQualityReportReq_SDK((AriSdk::ARI_CsiIdcRTGetLinkQualityReportReq_SDK *)buf);
  v6 = operator new(4uLL);
  *v6 = a2;
  v7 = __p;
  __p = v6;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)a1[10];
  if (!v8 || (v9 = (std::__shared_weak_count_vtbl *)a1[9], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v16 = a1[24];
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = (std::__shared_weak_count *)operator new(0x30uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)off_24F036590;
  v18[1].__vftable = v9;
  v18[1].__shared_owners_ = (uint64_t)v11;
  v18[1].__shared_weak_owners_ = (uint64_t)a1;
  v20 = (const void *)MEMORY[0x24BDAC760];
  v36 = MEMORY[0x24BDAC760];
  v37 = 1174405120;
  v38 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver20pollLinkQuality_syncENS2_5SubIdEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v39 = &__block_descriptor_tmp_40_2;
  v40 = v18 + 1;
  v41 = v18;
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  aBlock[0] = v20;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_24F036430;
  aBlock[4] = &v36;
  v22 = _Block_copy(aBlock);
  v23 = v41;
  if (v41)
  {
    v24 = (unint64_t *)&v41->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  do
    v26 = __ldaxr(v19);
  while (__stlxr(v26 - 1, v19));
  if (v26)
  {
    if (__p)
      goto LABEL_28;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (__p)
      goto LABEL_28;
  }
  v27 = operator new(4uLL);
  *v27 = 0;
  __p = v27;
LABEL_28:
  v35 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v28 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34[0] = v28;
  v34[1] = v28;
  v29 = *(std::__shared_weak_count **)(v16 + 16);
  v36 = *(_QWORD *)(v16 + 8);
  if (!v29)
  {
    v37 = 0;
LABEL_40:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v37 = (uint64_t)std::__shared_weak_count::lock(v29);
  if (!v37)
    goto LABEL_40;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v30 = (std::__shared_weak_count *)v37;
  if (v37)
  {
    v31 = (unint64_t *)(v37 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  aBlock[0] = v22;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v34);
  std::__shared_weak_count::__release_weak(v11);
  return MEMORY[0x22E2A427C](buf);
}

void sub_227AC68E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *aBlock,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void coex::ARICommandDriver::updateIndications_sync(coex::ARICommandDriver *this, group *a2)
{
  char *gr_name;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  _QWORD aBlock[4];
  dispatch_group_t group;
  unint64_t v12;
  unint64_t v13;

  gr_name = a2->gr_name;
  if (a2->gr_name)
  {
    dispatch_retain((dispatch_object_t)a2->gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }
  v12 = 0xAAAAAAAAAAAAAAAALL;
  v13 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex16ARICommandDriver22updateIndications_syncEN8dispatch5groupE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_15_0;
  group = (dispatch_group_t)gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }
  v4 = _Block_copy(aBlock);
  v5 = *((_QWORD *)this + 11);
  if (v5)
    dispatch_retain(*((dispatch_object_t *)this + 11));
  if (v4)
  {
    v6 = _Block_copy(v4);
    v12 = (unint64_t)v6;
    v13 = (unint64_t)v5;
    if (!v5)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v12 = 0;
  v13 = (unint64_t)v5;
  if (v5)
  {
LABEL_9:
    dispatch_retain(v5);
    dispatch_release(v5);
  }
LABEL_10:
  if (v4)
    _Block_release(v4);
  if (v6)
  {
    v7 = _Block_copy(v6);
    v8 = v7;
    v9 = v5;
    if (!v5)
      goto LABEL_15;
    goto LABEL_14;
  }
  v7 = 0;
  v8 = 0;
  v9 = v5;
  if (v5)
LABEL_14:
    dispatch_retain(v5);
LABEL_15:
  coex::ARICommandDriver::setIndications_sync(this, (uint64_t)&v8);
  if (v5)
    dispatch_release(v5);
  if (v7)
    _Block_release(v7);
  if (v5)
    dispatch_release(v5);
  if (v6)
    _Block_release(v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (gr_name)
  {
    dispatch_group_leave((dispatch_group_t)gr_name);
    dispatch_release((dispatch_object_t)gr_name);
  }
}

void sub_227AC6B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_group_t group, char a17)
{
  NSObject *v17;

  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)&a10);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)&a17);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v17)
  {
    dispatch_group_leave(v17);
    dispatch_release(v17);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 32);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void __destroy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 32);
    if (v3)
      dispatch_release(v3);
  }
}

void coex::ARICommandDriver::registerWWANStateIndication_sync(coex::ARICommandDriver *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  void *v12[5];
  std::__shared_weak_count *v13;
  _QWORD aBlock[5];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12[0]) = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I Request to register for WWAN state indication", (uint8_t *)v12, 2u);
  }
  v3 = (std::__shared_weak_count *)operator new(0x20uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_24F036490;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)this;
  v5 = MEMORY[0x24BDAC760];
  v12[0] = (void *)MEMORY[0x24BDAC760];
  v12[1] = (void *)1174405120;
  v12[2] = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver32registerWWANStateIndication_syncEvE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v12[3] = &__block_descriptor_tmp_32_1;
  v12[4] = &v3[1];
  v13 = v3;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  aBlock[0] = v5;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_24F036430;
  aBlock[4] = v12;
  v7 = _Block_copy(aBlock);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  v12[0] = v7;
  ice::Client::regIndicationInternal();
  if (v12[0])
    _Block_release(v12[0]);
}

void sub_227AC6DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

_QWORD *coex::ARICommandDriver::setIndications_sync(coex::CommandDriver::Callback)::$_0::~$_0(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[2];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void coex::ARICommandDriver::sendStateUpdate_sync(uint64_t a1, const void **a2, int a3)
{
  const void *v3;
  uint64_t (*v4)(uint64_t);
  NSObject *v8;
  uint64_t v9;
  __int128 v10;
  pthread_mutex_t *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  char *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  __int128 v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CFTypeRef *v43;
  CFTypeRef v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, CFTypeRef *, uint64_t);
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  CFTypeRef *v51;
  CFTypeRef v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, CFTypeRef *, uint64_t);
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  CFTypeRef v63;
  _QWORD v64[4];
  __int128 v65;
  __int128 v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  unsigned int *v71;
  int v72;
  __int128 v73;
  __int128 v74;
  CFTypeRef cf;
  std::runtime_error v76;
  _BYTE buf[32];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  void *__p[2];
  pthread_mutex_t *v87[2];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  unint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  CFTypeRef *v95;
  int *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!*a2)
    v4 = 0;
  if (v4)
  {
    v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = a3;
      *(_WORD *)&buf[8] = 2112;
      *(_QWORD *)&buf[10] = v3;
      _os_log_impl(&dword_227A72000, v8, OS_LOG_TYPE_DEFAULT, "#I Update for SubId=%d -> %@", buf, 0x12u);
      v3 = *a2;
    }
    if (v3)
    {
      CFRetain(v3);
      v9 = *(_QWORD *)(a1 + 152);
      v63 = v3;
      CFRetain(v3);
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 152);
      v63 = 0;
    }
    v72 = a3;
    v70 = 0;
    v71 = 0;
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v84 = v10;
    v85 = v10;
    v82 = v10;
    v83 = v10;
    v80 = v10;
    v81 = v10;
    v78 = v10;
    v79 = v10;
    *(_OWORD *)buf = v10;
    *(_OWORD *)&buf[16] = v10;
    v11 = *(pthread_mutex_t **)(v9 + 24);
    __p[0] = (void *)10;
    __p[1] = buf;
    v87[0] = 0;
    v87[1] = v11;
    pthread_mutex_lock(v11);
    v12 = *(unsigned int **)(v9 + 8);
    if (!v12)
    {
      v14 = *(uint64_t ***)v9;
      goto LABEL_22;
    }
    v13 = atomic_load(v12 + 2);
    v14 = *(uint64_t ***)v9;
    if (v13 != 1)
    {
LABEL_19:
      v12 = *(unsigned int **)(v9 + 8);
      if (v12)
      {
        v18 = v12 + 2;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
LABEL_22:
      v20 = v71;
      v70 = v14;
      v71 = v12;
      if (v20)
      {
        v21 = v20 + 2;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
          v24 = v20 + 3;
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
            (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 24))(v20);
        }
      }
      pthread_mutex_unlock(v87[1]);
      v27 = (char *)__p[1];
      if (__p[1])
      {
        if ((uint64_t)&v87[0][-1].__opaque[55] >= 0)
        {
          v28 = (char *)__p[1] + 16 * (uint64_t)v87[0];
          do
          {
            v29 = (unsigned int *)*((_QWORD *)v28 - 1);
            if (v29)
            {
              v30 = v29 + 2;
              do
              {
                v31 = __ldaxr(v30);
                v32 = v31 - 1;
              }
              while (__stlxr(v32, v30));
              if (!v32)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 16))(v29);
                v33 = v29 + 3;
                do
                {
                  v34 = __ldaxr(v33);
                  v35 = v34 - 1;
                }
                while (__stlxr(v35, v33));
                if (!v35)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 24))(v29);
              }
            }
            v28 -= 16;
          }
          while (v28 > v27);
        }
        if (__p[0] >= (void *)0xB)
          operator delete(__p[1]);
      }
      *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v89 = v36;
      v90 = v36;
      *(_OWORD *)v87 = v36;
      v88 = v36;
      v85 = v36;
      *(_OWORD *)__p = v36;
      v83 = v36;
      v84 = v36;
      v81 = v36;
      v82 = v36;
      v79 = v36;
      v80 = v36;
      *(_OWORD *)&buf[16] = v36;
      v78 = v36;
      *(_OWORD *)buf = v36;
      buf[0] = 0;
      v91 = 0xAAAAAAAAAAAAAAAALL;
      v92 = 10;
      v93 = &buf[8];
      v94 = 0;
      v95 = &v63;
      v96 = &v72;
      v97 = 0;
      v98 = 0;
      v37 = v70;
      v38 = (uint64_t)*v70;
      v67 = buf;
      v68 = v9;
      v69 = v38;
      *(_QWORD *)&v65 = *(_QWORD *)(v38 + 8);
      *((_QWORD *)&v65 + 1) = v38;
      *(_QWORD *)&v66 = buf;
      *((_QWORD *)&v66 + 1) = v38;
      boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v65);
      v64[0] = *v37;
      v64[1] = v64[0];
      v64[2] = buf;
      v64[3] = v64[0];
      boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(v64);
      v73 = v65;
      v74 = v66;
      v39 = v64[0];
      v40 = v65;
      if ((_QWORD)v65 == v64[0])
      {
        if (HIDWORD(v97) <= v97)
          goto LABEL_72;
      }
      else
      {
        v41 = v74;
        if (!*(_BYTE *)v74)
        {
          v42 = *(_QWORD *)(*(_QWORD *)(v65 + 16) + 32);
          v43 = *(CFTypeRef **)(v74 + 272);
          v44 = *v43;
          if (*v43)
            CFRetain(*v43);
          v45 = *(_QWORD *)(v42 + 24);
          if (!v45)
          {
            std::runtime_error::runtime_error(&v76, "call to empty boost::function");
            v76.__vftable = (std::runtime_error_vtbl *)&unk_24F034D70;
            boost::throw_exception<boost::bad_function_call>(&v76);
          }
          v46 = **(unsigned int **)(v41 + 280);
          v47 = *(void (**)(uint64_t, CFTypeRef *, uint64_t))((v45 & 0xFFFFFFFFFFFFFFFELL) + 8);
          cf = v44;
          v47(v42 + 32, &cf, v46);
          if (cf)
            CFRelease(cf);
          if (!*(_BYTE *)v41)
            *(_BYTE *)v41 = 1;
        }
        *(_QWORD *)&v73 = *(_QWORD *)(v40 + 8);
        boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v73);
        v48 = v74;
        if (*(_BYTE *)v74)
          *(_BYTE *)v74 = 0;
        for (i = v73; (_QWORD)v73 != v39; i = v73)
        {
          v50 = *(_QWORD *)(*(_QWORD *)(i + 16) + 32);
          v51 = *(CFTypeRef **)(v48 + 272);
          v52 = *v51;
          if (*v51)
            CFRetain(*v51);
          v53 = *(_QWORD *)(v50 + 24);
          if (!v53)
          {
            std::runtime_error::runtime_error(&v76, "call to empty boost::function");
            v76.__vftable = (std::runtime_error_vtbl *)&unk_24F034D70;
            boost::throw_exception<boost::bad_function_call>(&v76);
          }
          v54 = **(unsigned int **)(v48 + 280);
          v55 = *(void (**)(uint64_t, CFTypeRef *, uint64_t))((v53 & 0xFFFFFFFFFFFFFFFELL) + 8);
          cf = v52;
          v55(v50 + 32, &cf, v54);
          if (cf)
            CFRelease(cf);
          if (!*(_BYTE *)v48)
            *(_BYTE *)v48 = 1;
          *(_QWORD *)&v73 = *(_QWORD *)(i + 8);
          boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v73);
          v48 = v74;
          if (*(_BYTE *)v74)
            *(_BYTE *)v74 = 0;
        }
        if (*((_DWORD *)v67 + 73) <= *((_DWORD *)v67 + 72))
          goto LABEL_72;
      }
      boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(v68, v69);
LABEL_72:
      boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)buf);
      v56 = v71;
      if (v71)
      {
        v57 = v71 + 2;
        do
        {
          v58 = __ldaxr(v57);
          v59 = v58 - 1;
        }
        while (__stlxr(v59, v57));
        if (!v59)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 16))(v56);
          v60 = v56 + 3;
          do
          {
            v61 = __ldaxr(v60);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, v60));
          if (!v62)
            (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 24))(v56);
        }
      }
      if (v63)
        CFRelease(v63);
      if (v3)
        CFRelease(v3);
      return;
    }
    v15 = *v14;
    v16 = *(_QWORD *)(v9 + 16);
    if ((uint64_t *)v16 == *v14)
    {
      v16 = v15[1];
      *(_QWORD *)&v73 = v16;
      if (v15 == (uint64_t *)v16)
      {
LABEL_18:
        *(_QWORD *)(v9 + 16) = v16;
        goto LABEL_19;
      }
    }
    else
    {
      *(_QWORD *)&v73 = *(_QWORD *)(v9 + 16);
    }
    v17 = *(_QWORD *)(v16 + 16);
    if (*(_BYTE *)(v17 + 24))
    {
      v16 = *(_QWORD *)(v16 + 8);
    }
    else
    {
      v16 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::erase(v15, (int *)(v17 + 64), (uint64_t **)&v73);
      v14 = *(uint64_t ***)v9;
    }
    goto LABEL_18;
  }
}

void sub_227AC74AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a33);
  JUMPOUT(0x227AC7660);
}

void sub_227AC74BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,std::runtime_error a31)
{
  const void *v31;
  const void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  std::runtime_error::~runtime_error(&a31);
  if (v31)
    CFRelease(v31);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v36);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)&v38);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v37);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v35);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v34);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a25 + 16));
  __cxa_rethrow();
}

void sub_227AC7548(_Unwind_Exception *a1, int a2)
{
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v6);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)&v8);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v7);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v5);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v4);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x227AC7518);
}

void sub_227AC758C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,unint64_t a53,char *__p,uint64_t a55)
{
  char *v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;

  if (__p)
  {
    if (a55 - 1 >= 0)
    {
      v55 = &__p[16 * a55];
      do
      {
        v56 = (unsigned int *)*((_QWORD *)v55 - 1);
        if (v56)
        {
          v57 = v56 + 2;
          do
          {
            v58 = __ldaxr(v57);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v57));
          if (!v59)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 16))(v56);
            v60 = v56 + 3;
            do
            {
              v61 = __ldaxr(v60);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v60));
            if (!v62)
              (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 24))(v56);
          }
        }
        v55 -= 16;
      }
      while (v55 > __p);
    }
    if (a53 >= 0xB)
      operator delete(__p);
  }
  JUMPOUT(0x227AC7660);
}

void sub_227AC763C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x227AC7678);
}

const void **ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

const void **ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0::~$_0(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  const void *v4;
  std::__shared_weak_count *v5;

  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = a1[4];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[3];
  if (v4)
    _Block_release(v4);
  v5 = (std::__shared_weak_count *)a1[1];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t coex::ARICommandDriver::setGPSState_sync(_QWORD *a1, int a2, const void **a3)
{
  NSObject *v6;
  __int128 v7;
  _DWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  const void *v23;
  unint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _OWORD v36[2];
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, const unsigned __int8 *);
  void *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  const void *aBlock[5];
  uint8_t buf[16];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v6 = a1[5];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_227A72000, v6, OS_LOG_TYPE_DEFAULT, "#I GPS Active: %d", buf, 8u);
  }
  v49 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47 = v7;
  v48 = v7;
  *(_OWORD *)buf = v7;
  v46 = v7;
  AriSdk::ARI_CsiIceGpsStateReq_SDK::ARI_CsiIceGpsStateReq_SDK((AriSdk::ARI_CsiIceGpsStateReq_SDK *)buf);
  v8 = operator new(4uLL);
  *v8 = a2;
  v9 = (void *)v49;
  v49 = (unint64_t)v8;
  if (v9)
    operator delete(v9);
  v10 = (std::__shared_weak_count *)a1[10];
  if (!v10 || (v11 = (std::__shared_weak_count_vtbl *)a1[9], (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v18 = a1[24];
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  v20 = (std::__shared_weak_count_vtbl *)*a3;
  if (v20)
    CFRetain(v20);
  v21 = (std::__shared_weak_count *)operator new(0x38uLL);
  v21->__shared_owners_ = 0;
  v22 = (unint64_t *)&v21->__shared_owners_;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)off_24F036710;
  v21[1].__vftable = v11;
  v21[1].__shared_owners_ = (uint64_t)v13;
  v21[1].__shared_weak_owners_ = (uint64_t)a1;
  v21[2].__vftable = v20;
  v23 = (const void *)MEMORY[0x24BDAC760];
  v38 = MEMORY[0x24BDAC760];
  v39 = 1174405120;
  v40 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver16setGPSState_syncEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v41 = &__block_descriptor_tmp_50_0;
  v42 = v21 + 1;
  v43 = v21;
  do
    v24 = __ldxr(v22);
  while (__stxr(v24 + 1, v22));
  aBlock[0] = v23;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_24F036430;
  aBlock[4] = &v38;
  v25 = _Block_copy(aBlock);
  v26 = v43;
  if (v43)
  {
    v27 = (unint64_t *)&v43->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  do
    v29 = __ldaxr(v22);
  while (__stlxr(v29 - 1, v22));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[0] = v30;
  v36[1] = v30;
  v37 = 0xAAAAAAAAAAAAAAAALL;
  v31 = *(std::__shared_weak_count **)(v18 + 16);
  v38 = *(_QWORD *)(v18 + 8);
  if (!v31)
  {
    v39 = 0;
LABEL_39:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v39 = (uint64_t)std::__shared_weak_count::lock(v31);
  if (!v39)
    goto LABEL_39;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v32 = (std::__shared_weak_count *)v39;
  if (v39)
  {
    v33 = (unint64_t *)(v39 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  aBlock[0] = v25;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v36);
  std::__shared_weak_count::__release_weak(v13);
  return MEMORY[0x22E2A3430](buf);
}

void sub_227AC7AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t coex::ARICommandDriver::setGPSState_sync(BOOL,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0::~$_0(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

_QWORD *coex::ARICommandDriver::setWiFiStatus_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0::~$_0(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  const void *v4;
  std::__shared_weak_count *v5;

  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = a1[4];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[3];
  if (v4)
    _Block_release(v4);
  v5 = (std::__shared_weak_count *)a1[1];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *coex::ARICommandDriver::setLAAConfig_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0::~$_0(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  const void *v4;
  std::__shared_weak_count *v5;

  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = a1[4];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[3];
  if (v4)
    _Block_release(v4);
  v5 = (std::__shared_weak_count *)a1[1];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *coex::ARICommandDriver::setFCMBCMAntennaMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0::~$_0(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  const void *v4;
  std::__shared_weak_count *v5;

  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = a1[4];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[3];
  if (v4)
    _Block_release(v4);
  v5 = (std::__shared_weak_count *)a1[1];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *coex::ARICommandDriver::setLinkQualityMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0::~$_0(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[4];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[3];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void coex::ARICommandDriver::convertScanFrequencies_sync(uint64_t a1@<X0>, CFArrayRef *a2@<X1>, _OWORD *a3@<X8>)
{
  _OWORD *v5;
  unint64_t Count;
  uint64_t v7;
  NSObject *v8;
  CFIndex v9;
  const __CFString *v10;
  const __CFString *v11;
  const void *ValueAtIndex;
  const void *v13;
  CFTypeID v14;
  uint64_t v15;
  int Int;
  uint64_t v17;
  uint8_t buf[24];
  uint64_t v19;

  v5 = a3;
  v19 = *MEMORY[0x24BDAC8D0];
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  Count = CFArrayGetCount(*a2);
  v7 = Count;
  if (Count >= 0x11)
  {
    v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2048;
      v7 = 16;
      *(_QWORD *)&buf[14] = 16;
      _os_log_error_impl(&dword_227A72000, v8, OS_LOG_TYPE_ERROR, "Source bands is too big for ScanFreqConfig struct (%zu) vs max (%zu).  Truncating...", buf, 0x16u);
    }
    else
    {
      v7 = 16;
    }
    goto LABEL_5;
  }
  if (Count)
  {
LABEL_5:
    v9 = 0;
    v10 = (const __CFString *)*MEMORY[0x24BED35C0];
    v11 = (const __CFString *)*MEMORY[0x24BED3520];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*a2, v9);
      v13 = ValueAtIndex;
      if (!ValueAtIndex)
        break;
      v14 = CFGetTypeID(ValueAtIndex);
      if (v14 != CFDictionaryGetTypeID())
        break;
      CFRetain(v13);
      CFRetain(v13);
      v15 = (uint64_t)ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      if (!v13)
        v15 = 0;
      if (!v15)
        goto LABEL_14;
      memset(buf, 170, 16);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, (const __CFDictionary *)v13);
      Int = (unsigned __int16)ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, v10);
      v17 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, v11);
      MEMORY[0x22E2A2E9C](buf);
      v15 = 1;
LABEL_15:
      *(_DWORD *)v5 = v15 | (Int << 16);
      *((_WORD *)v5 + 2) = ((v17 << 32) | (unint64_t)(v15 << 40)) >> 32;
      if (v13)
      {
        CFRelease(v13);
        CFRelease(v13);
      }
      ++v9;
      v5 = (_OWORD *)((char *)v5 + 6);
      if (v7 == v9)
        return;
    }
    v13 = 0;
    v15 = 0;
LABEL_14:
    v17 = 0;
    Int = 0;
    goto LABEL_15;
  }
}

void sub_227AC7F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *coex::ARICommandDriver::setScanFreqBandFilter_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0::~$_0(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[4];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[3];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

_QWORD *coex::ARICommandDriver::setRC1Duration_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0::~$_0(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[2];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(coex::CommandDriver *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *Name;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  Name = (const char *)coex::CommandDriver::getName(a1);
  result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, Name, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::~signal(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_24F036120;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

_QWORD *boost::signals2::signal<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::~signal(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_24F036190;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::~signal(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *__p = &off_24F036120;
  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void boost::signals2::signal<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::~signal(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *__p = &off_24F036190;
  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_24F036200;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_24F036200;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ___ZNK4coex13CommandDriver8CallbackclEN3ctu2cf11CFSharedRefI9__CFErrorEENS4_IK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary const> const&>((uint64_t *)(a1 + 32), (const void **)(a1 + 40), (const void **)(a1 + 48));
}

void ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_227AC84EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_227AC8508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<coex::ARICommandDriver>::shared_ptr[abi:ne180100]<coex::ARICommandDriver,std::shared_ptr<coex::ARICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::ARICommandDriver>(coex::ARICommandDriver*)::{lambda(coex::ARICommandDriver*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_24F036270;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_227AC8624(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<coex::ARICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::ARICommandDriver>(coex::ARICommandDriver*)::{lambda(coex::ARICommandDriver*)#1}::operator() const(coex::ARICommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_227AC8644(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<coex::ARICommandDriver *,std::shared_ptr<coex::ARICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::ARICommandDriver>(coex::ARICommandDriver*)::{lambda(coex::ARICommandDriver *)#1},std::allocator<coex::ARICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<coex::ARICommandDriver *,std::shared_ptr<coex::ARICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::ARICommandDriver>(coex::ARICommandDriver*)::{lambda(coex::ARICommandDriver *)#1},std::allocator<coex::ARICommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<coex::ARICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::ARICommandDriver>(coex::ARICommandDriver*)::{lambda(coex::ARICommandDriver*)#1}::operator() const(coex::ARICommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<coex::ARICommandDriver *,std::shared_ptr<coex::ARICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::ARICommandDriver>(coex::ARICommandDriver*)::{lambda(coex::ARICommandDriver *)#1},std::allocator<coex::ARICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4coex13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3"
                     "__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4coex13CommandDriverEE15make_shared_ptrINS1_16ARICommandDr"
                                "iverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4coex13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4coex13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<coex::ARICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::ARICommandDriver>(coex::ARICommandDriver*)::{lambda(coex::ARICommandDriver*)#1}::operator() const(coex::ARICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 280) > *(_DWORD *)(*a1 + 276))
    boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  int v27;
  uint64_t ***v28;
  BOOL v29;
  BOOL v30;
  uint64_t ***v31;
  uint64_t *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;

  v7 = (uint64_t **)(a1 + 4);
  v6 = a1[4];
  if (!v6)
  {
    v23 = (uint64_t *)a1[10];
    if (v23 != *a3)
      goto LABEL_80;
    v24 = (uint64_t *)v23[1];
    v25 = (uint64_t **)(a1 + 4);
    v10 = a1 + 4;
    if (v24 != a1)
      goto LABEL_76;
    goto LABEL_55;
  }
  v8 = *a2;
  v9 = a2[2];
  v10 = a1 + 4;
  v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        v17 = *(_DWORD *)(v11 + 32);
        v18 = v17 < 1;
        if (v17 == 1)
          v18 = *(_DWORD *)(v11 + 40) < v9;
        if (!v18)
          break;
        v11 = *(_QWORD *)(v11 + 8);
        if (!v11)
          goto LABEL_19;
      }
      v10 = (uint64_t *)v11;
      v11 = *(_QWORD *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      v12 = *(_DWORD *)(v11 + 32);
      v13 = v12 == v8;
      v14 = v12 < v8;
      if (v12 >= v8)
        v15 = (uint64_t *)v11;
      else
        v15 = (uint64_t *)(v11 + 8);
      if (v14)
        v16 = v10;
      else
        v16 = (uint64_t *)v11;
      if (v13)
      {
        v15 = (uint64_t *)v11;
        v10 = (uint64_t *)v11;
      }
      else
      {
        v10 = v16;
      }
      v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  v19 = (uint64_t *)v10[6];
  if (v19 != *a3)
    goto LABEL_80;
  v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    v21 = (uint64_t *)a1[4];
    while (1)
    {
      v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10))
          goto LABEL_27;
LABEL_22:
        v21 = (uint64_t *)v21[1];
        if (!v21)
          goto LABEL_42;
      }
      else
      {
        if (v22 <= 1)
          goto LABEL_22;
LABEL_27:
        v20 = (uint64_t **)v21;
        v21 = (uint64_t *)*v21;
        if (!v21)
          goto LABEL_42;
      }
    }
  }
  v26 = (uint64_t **)a1[4];
  do
  {
    v27 = *((_DWORD *)v26 + 8);
    v28 = (uint64_t ***)(v26 + 1);
    v29 = v8 == v27;
    v30 = v8 < v27;
    if (v8 >= v27)
      v31 = (uint64_t ***)(v26 + 1);
    else
      v31 = (uint64_t ***)v26;
    if (!v30)
      v26 = v20;
    if (v29)
      v31 = v28;
    else
      v20 = v26;
    v26 = *v31;
  }
  while (*v31);
LABEL_42:
  v24 = (uint64_t *)v19[1];
  v32 = a1;
  if (v20 != v7)
    v32 = v20[6];
  if (v24 == v32)
  {
LABEL_55:
    v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        v38 = v37;
        v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      v41 = v10;
      do
      {
        v38 = (uint64_t *)v41[2];
        v13 = *v38 == (_QWORD)v41;
        v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10)
      a1[3] = (uint64_t)v38;
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  v33 = *a2;
  if (*a2 == 1)
  {
    v34 = a2[2];
    while (1)
    {
      v25 = (uint64_t **)v6;
      v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(_QWORD *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        v6 = *(_QWORD *)v6;
        if (!*v25)
        {
          v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1)
          goto LABEL_47;
LABEL_53:
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
        {
          v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39)
    goto LABEL_79;
  while (v33 >= v39)
  {
    if (v39 >= v33)
      goto LABEL_79;
    v40 = *(_QWORD *)(v6 + 8);
    if (!v40)
    {
      v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    v39 = *(_DWORD *)(v40 + 32);
    v6 = v40;
    if (v33 == v39)
    {
      *(_QWORD *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  v40 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
    goto LABEL_61;
  v7 = (uint64_t **)v6;
LABEL_75:
  v25 = (uint64_t **)v6;
LABEL_76:
  v6 = (uint64_t)operator new(0x38uLL);
  *(_QWORD *)(v6 + 32) = *(_QWORD *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = v25;
  *v7 = (uint64_t *)v6;
  v42 = *(_QWORD *)a1[3];
  v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(_QWORD *)(v6 + 48) = v24;
LABEL_80:
  v44 = *a3;
  v45 = **a3;
  v46 = (*a3)[1];
  *(_QWORD *)(v45 + 8) = v46;
  *(_QWORD *)v44[1] = v45;
  --a1[2];
  v47 = (unsigned int *)v44[3];
  if (v47)
  {
    v48 = v47 + 2;
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 16))(v47);
      v51 = v47 + 3;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
        (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 24))(v47);
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int i;
  unsigned int v30;
  uint64_t v31;
  char v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD v84[6];

  v84[3] = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  if (*a1 == a1[3])
    return;
  if (v1 == a1[1])
    goto LABEL_94;
  while (1)
  {
    v3 = a1[2];
    v4 = *(_QWORD *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        v17 = *(_QWORD *)(v3 + 264);
      }
      else
      {
        v5 = *(_QWORD *)(v3 + 256);
        v6 = v5 + 24 * v4;
        v7 = v6;
        do
        {
          v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            v9 = *(unsigned int **)(v6 - 8);
            if (v9)
            {
              v10 = v9 + 2;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
                v13 = v9 + 3;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v6 - 16);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          v6 = v7;
        }
        while (v7 > v5);
        v17 = *(_QWORD *)(v3 + 264);
        v1 = *a1;
      }
      *(_QWORD *)(v3 + 264) = v17 - v4;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v82 = v18;
    v83 = v18;
    v80 = v18;
    v81 = v18;
    v78 = v18;
    v79 = v18;
    v76 = v18;
    v77 = v18;
    v74 = v18;
    v75 = v18;
    v72 = v18;
    v73 = v18;
    v19 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)&v82 = 10;
    *((_QWORD *)&v82 + 1) = &v72;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = v19;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *a1;
    v21 = *(_QWORD *)(*a1 + 16);
    v22 = a1[2];
    v23 = *(uint64_t **)(v21 + 32);
    if (v23)
    {
      v24 = *v23;
      if (*v23 != v23[1])
      {
        v25 = (_QWORD *)(v22 + 8);
        while (1)
        {
          memset(v84, 170, 24);
          v26 = *(_DWORD *)v24 ^ (*(int *)v24 >> 31);
          if (v26 == 2)
          {
            (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v24 + 8) + 16))(&v71);
            v84[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
            LODWORD(v84[0]) = 1;
            if (v71)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
              if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
                goto LABEL_47;
LABEL_40:
              v31 = *(_QWORD *)(v24 + 16);
              if (!v31)
                goto LABEL_48;
              if (!atomic_load((unsigned int *)(v31 + 8)))
                goto LABEL_48;
LABEL_42:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v25, (uint64_t)v84);
              v33 = 0;
              if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
                goto LABEL_51;
              goto LABEL_43;
            }
LABEL_39:
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          if (v26 != 1)
          {
            LODWORD(v84[0]) = 0;
            v84[1] = 0;
            v84[2] = 0;
            goto LABEL_39;
          }
          v27 = *(_QWORD *)(v24 + 16);
          if (!v27)
          {
LABEL_46:
            v84[1] = 0;
            v84[2] = v27;
            LODWORD(v84[0]) = 0;
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          v28 = (unsigned int *)(v27 + 8);
          for (i = *(_DWORD *)(v27 + 8); ; i = v30)
          {
            if (!i)
            {
              v27 = 0;
              goto LABEL_46;
            }
            v30 = __ldxr(v28);
            if (v30 != i)
            {
              __clrex();
              continue;
            }
            if (!__stxr(i + 1, v28))
              break;
          }
          v84[1] = *(_QWORD *)(v24 + 8);
          v84[2] = v27;
          LODWORD(v84[0]) = 0;
          if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) != 2)
            goto LABEL_40;
LABEL_47:
          if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v24 + 8) + 24))(*(_QWORD *)(v24 + 8)))
            goto LABEL_42;
LABEL_48:
          if (*(_BYTE *)(v21 + 24))
          {
            *(_BYTE *)(v21 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v21, &v72);
          }
          v33 = 1;
          if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
          {
LABEL_51:
            v34 = (unsigned int *)v84[2];
            if (v84[2])
            {
              v35 = (unsigned int *)(v84[2] + 8);
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
                v38 = v34 + 3;
                do
                {
                  v39 = __ldaxr(v38);
                  v40 = v39 - 1;
                }
                while (__stlxr(v40, v38));
                if (!v40)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 24))(v34);
              }
            }
            goto LABEL_59;
          }
LABEL_43:
          if (v84[1])
            (*(void (**)(_QWORD))(*(_QWORD *)v84[1] + 8))(v84[1]);
LABEL_59:
          if ((v33 & 1) == 0)
          {
            v24 += 24;
            if (v24 != *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8))
              continue;
          }
          v20 = *a1;
          v21 = *(_QWORD *)(*a1 + 16);
          v22 = a1[2];
          break;
        }
      }
    }
    if (*(_BYTE *)(v21 + 24))
    {
      ++*(_DWORD *)(v22 + 276);
      v41 = *(_QWORD *)(v21 + 16);
      if (v41)
      {
        if (atomic_load((unsigned int *)(v41 + 8)))
        {
          v43 = 1;
          goto LABEL_76;
        }
        v22 = a1[2];
        v20 = *a1;
      }
      a1[3] = v20;
      if (a1[1] == v20)
      {
        v46 = *(_DWORD **)(v22 + 288);
        if (v46)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v46, &v72);
        v43 = 0;
        *(_QWORD *)(v22 + 288) = 0;
      }
      else
      {
        v44 = *(_QWORD *)(v20 + 16);
        v45 = *(_DWORD **)(v22 + 288);
        if (v45)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v45, &v72);
        *(_QWORD *)(v22 + 288) = v44;
        v43 = 0;
        if (v44)
          ++*(_DWORD *)(v44 + 28);
      }
    }
    else
    {
      ++*(_DWORD *)(v22 + 280);
      v43 = 1;
    }
LABEL_76:
    (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
    v47 = *((_QWORD *)&v82 + 1);
    if (*((_QWORD *)&v82 + 1))
    {
      if ((uint64_t)v83 - 1 >= 0)
      {
        v48 = *((_QWORD *)&v82 + 1) + 16 * v83;
        do
        {
          v49 = *(unsigned int **)(v48 - 8);
          if (v49)
          {
            v50 = v49 + 2;
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 16))(v49);
              v53 = v49 + 3;
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
                (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 24))(v49);
            }
          }
          v48 -= 16;
        }
        while (v48 > v47);
      }
      if ((unint64_t)v82 >= 0xB)
        operator delete(*((void **)&v82 + 1));
    }
    v1 = *a1;
    v56 = a1[1];
    if (!v43)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    *a1 = v1;
    if (v1 == v56)
    {
      v1 = v56;
LABEL_94:
      v57 = a1[3];
      if (v57 != v1)
      {
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v80 = v58;
        v81 = v58;
        v78 = v58;
        v79 = v58;
        v76 = v58;
        v77 = v58;
        v74 = v58;
        v75 = v58;
        v72 = v58;
        v73 = v58;
        v59 = *(_QWORD *)(v57 + 16);
        *(_QWORD *)&v82 = 10;
        *((_QWORD *)&v82 + 1) = &v72;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = v59;
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
        v60 = a1[2];
        a1[3] = a1[1];
        v61 = *(_DWORD **)(v60 + 288);
        if (v61)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v61, &v72);
        *(_QWORD *)(v60 + 288) = 0;
        (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
        v62 = *((_QWORD *)&v82 + 1);
        if (*((_QWORD *)&v82 + 1))
        {
          if ((uint64_t)v83 - 1 >= 0)
          {
            v63 = *((_QWORD *)&v82 + 1) + 16 * v83;
            do
            {
              v64 = *(unsigned int **)(v63 - 8);
              if (v64)
              {
                v65 = v64 + 2;
                do
                {
                  v66 = __ldaxr(v65);
                  v67 = v66 - 1;
                }
                while (__stlxr(v67, v65));
                if (!v67)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 16))(v64);
                  v68 = v64 + 3;
                  do
                  {
                    v69 = __ldaxr(v68);
                    v70 = v69 - 1;
                  }
                  while (__stlxr(v70, v68));
                  if (!v70)
                    (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 24))(v64);
                }
              }
              v63 -= 16;
            }
            while (v63 > v62);
          }
          if ((unint64_t)v82 >= 0xB)
            operator delete(*((void **)&v82 + 1));
        }
      }
      return;
    }
  }
  if (v1 == v56)
    goto LABEL_94;
}

void sub_227AC91BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_227AC91D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  __int128 v4;
  pthread_mutex_t *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  int v47;
  int v48;
  _QWORD *v49;
  __int128 v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t *v83;
  _OWORD v84[10];
  unint64_t v85;
  void *__p;
  uint64_t v87;
  pthread_mutex_t *v88;
  uint64_t v89;

  v3 = (uint64_t **)a1;
  v89 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v84[8] = v4;
  v84[9] = v4;
  v84[6] = v4;
  v84[7] = v4;
  v84[4] = v4;
  v84[5] = v4;
  v84[2] = v4;
  v84[3] = v4;
  v84[0] = v4;
  v84[1] = v4;
  v5 = *(pthread_mutex_t **)(a1 + 24);
  v85 = 10;
  __p = v84;
  v87 = 0;
  v88 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2)
    goto LABEL_101;
  v6 = v3[1];
  if (!v6 || (v7 = atomic_load((unsigned int *)v6 + 2), v7 != 1))
  {
    v82 = (uint64_t *)operator new(0x20uLL);
    v8 = *v3;
    v9 = **v3;
    v10 = operator new(0x40uLL);
    v11 = v10;
    *v10 = v10;
    v10[1] = v10;
    v10[2] = 0;
    v12 = *(_QWORD **)(v9 + 8);
    if (v12 != (_QWORD *)v9)
    {
      v13 = 0;
      v14 = v10;
      do
      {
        v15 = operator new(0x20uLL);
        v15[2] = v12[2];
        v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          v17 = (unsigned int *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          v14 = (_QWORD *)*v11;
          v13 = v11[2];
        }
        *v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        *v11 = v15;
        v11[2] = ++v13;
        v12 = (_QWORD *)v12[1];
        v14 = v15;
      }
      while (v12 != (_QWORD *)v9);
    }
    v80 = v8;
    v81 = v3;
    v11[3] = 0;
    v19 = (_QWORD **)(v11 + 3);
    v11[4] = 0;
    v20 = v11 + 4;
    v11[5] = 0;
    *((_BYTE *)v11 + 48) = *(_BYTE *)(v9 + 48);
    v11[3] = v11 + 4;
    v21 = *(_QWORD **)(v9 + 24);
    v22 = (_QWORD *)(v9 + 32);
    if (v21 == (_QWORD *)(v9 + 32))
    {
LABEL_12:
      *((_BYTE *)v11 + 56) = *(_BYTE *)(v9 + 56);
      v23 = *(_QWORD **)(v9 + 24);
      if (v23 != v22)
      {
        v24 = (_QWORD *)v11[3];
        v25 = v11[1];
        do
        {
          v24[6] = v25;
          v26 = v9;
          if (v23 != v22)
            v26 = v23[6];
          v27 = (_QWORD *)v23[1];
          v28 = v27;
          v29 = v23;
          if (v27)
          {
            do
            {
              v30 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v30 = (_QWORD *)v29[2];
              v31 = *v30 == (_QWORD)v29;
              v29 = v30;
            }
            while (!v31);
          }
          v32 = v9;
          if (v30 != v22)
            v32 = v30[6];
          while (v26 != v32)
          {
            v26 = *(_QWORD *)(v26 + 8);
            v25 = *(_QWORD *)(v25 + 8);
          }
          if (v27)
          {
            do
            {
              v33 = v27;
              v27 = (_QWORD *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v33 = (_QWORD *)v23[2];
              v31 = *v33 == (_QWORD)v23;
              v23 = v33;
            }
            while (!v31);
          }
          v34 = (_QWORD *)v24[1];
          if (v34)
          {
            do
            {
              v35 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (_QWORD *)v24[2];
              v31 = *v35 == (_QWORD)v24;
              v24 = v35;
            }
            while (!v31);
          }
          v23 = v33;
          v24 = v35;
        }
        while (v33 != v22);
      }
      *v82 = (uint64_t)v11;
      v82[1] = 0;
      v55 = operator new(0x18uLL);
      v55[1] = 0x100000001;
      *v55 = off_24F036320;
      v55[2] = v11;
      v82[1] = (uint64_t)v55;
      v3 = v81;
      v82[2] = v80[2];
      v56 = v80[3];
      v82[3] = v56;
      if (v56)
      {
        v57 = (unsigned int *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = (uint64_t *)operator new(0x18uLL);
      v59[1] = 0x100000001;
      *v59 = (uint64_t)off_24F0362C0;
      v59[2] = (uint64_t)v82;
      v60 = (unsigned int *)v81[1];
      *v81 = v82;
      v81[1] = v59;
      if (v60)
      {
        v61 = v60 + 2;
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 16))(v60);
          v64 = v60 + 3;
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
            (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 24))(v60);
        }
      }
      goto LABEL_95;
    }
    while (1)
    {
      v36 = *((_DWORD *)v21 + 8);
      v37 = (_QWORD *)*v20;
      v38 = v11 + 4;
      if (*v19 != v20)
      {
        v39 = (_QWORD *)*v20;
        v40 = v11 + 4;
        if (v37)
        {
          do
          {
            v38 = v39;
            v39 = (_QWORD *)v39[1];
          }
          while (v39);
        }
        else
        {
          do
          {
            v38 = (_QWORD *)v40[2];
            v31 = *v38 == (_QWORD)v40;
            v40 = v38;
          }
          while (v31);
        }
        v41 = *((_DWORD *)v21 + 10);
        v42 = *((_DWORD *)v38 + 8);
        if (v42 == v36)
        {
          if (v36 != 1)
            goto LABEL_57;
          if (*((_DWORD *)v38 + 10) >= v41)
          {
            v43 = (_QWORD *)*v20;
            v44 = v11 + 4;
            v45 = v11 + 4;
            if (v37)
              goto LABEL_61;
LABEL_68:
            v49 = operator new(0x38uLL);
            v50 = *((_OWORD *)v21 + 2);
            v49[6] = v21[6];
            *((_OWORD *)v49 + 2) = v50;
            *v49 = 0;
            v49[1] = 0;
            v49[2] = v45;
            *v44 = v49;
            v51 = (_QWORD *)**v19;
            if (v51)
            {
              *v19 = v51;
              v49 = (_QWORD *)*v44;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v49);
            ++v11[5];
            goto LABEL_71;
          }
        }
        else if (v42 >= v36)
        {
LABEL_57:
          v44 = v11 + 4;
          v45 = v11 + 4;
          if (!v37)
            goto LABEL_68;
          v43 = (_QWORD *)*v20;
          if (v36 != 1)
          {
            v46 = *((_DWORD *)v37 + 8);
            v45 = (_QWORD *)*v20;
            while (v36 != v46)
            {
              if (v36 < v46)
              {
                v54 = *v45;
                v44 = v45;
                if (!*v45)
                  goto LABEL_68;
              }
              else
              {
                if (v46 >= v36)
                  goto LABEL_71;
                v54 = v45[1];
                if (!v54)
                  goto LABEL_67;
              }
              v46 = *(_DWORD *)(v54 + 32);
              v45 = (_QWORD *)v54;
            }
            goto LABEL_71;
          }
          while (1)
          {
LABEL_61:
            v45 = v43;
            v47 = *((_DWORD *)v43 + 8);
            if (v47 == 1)
            {
              v48 = *((_DWORD *)v43 + 10);
              if (v48 > v41)
                goto LABEL_60;
              if (v48 >= v41)
                goto LABEL_71;
            }
            else if (v47 > 1)
            {
LABEL_60:
              v43 = (_QWORD *)*v43;
              v44 = v45;
              if (!*v45)
                goto LABEL_68;
              continue;
            }
            v43 = (_QWORD *)v43[1];
            if (!v43)
            {
LABEL_67:
              v44 = v45 + 1;
              goto LABEL_68;
            }
          }
        }
      }
      if (v37)
        v45 = v38;
      else
        v45 = v11 + 4;
      if (v37)
        v44 = v38 + 1;
      else
        v44 = v11 + 4;
      if (!*v44)
        goto LABEL_68;
LABEL_71:
      v52 = (_QWORD *)v21[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (_QWORD *)v21[2];
          v31 = *v53 == (_QWORD)v21;
          v21 = v53;
        }
        while (!v31);
      }
      v21 = v53;
      if (v53 == v22)
        goto LABEL_12;
    }
  }
LABEL_95:
  v67 = (uint64_t **)*v3;
  v68 = (uint64_t *)**v3;
  v69 = (uint64_t *)v68[1];
  v83 = v69;
  if (v68 != v69)
  {
    do
    {
      while (1)
      {
        v70 = v69[2];
        if (!*(_BYTE *)(v70 + 24))
          break;
        v69 = (uint64_t *)v69[1];
        v83 = v69;
        v68 = *v67;
        if (v69 == *v67)
          goto LABEL_100;
      }
      v69 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::erase(v68, (int *)(v70 + 64), &v83);
      v67 = (uint64_t **)*v3;
      v83 = v69;
      v68 = *v67;
    }
    while (v69 != *v67);
  }
LABEL_100:
  v3[2] = v69;
LABEL_101:
  pthread_mutex_unlock(v88);
  v71 = (char *)__p;
  if (__p)
  {
    if (v87 - 1 >= 0)
    {
      v72 = (char *)__p + 16 * v87;
      do
      {
        v73 = (unsigned int *)*((_QWORD *)v72 - 1);
        if (v73)
        {
          v74 = v73 + 2;
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 16))(v73);
            v77 = v73 + 3;
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
              (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 24))(v73);
          }
        }
        v72 -= 16;
      }
      while (v72 > v71);
    }
    if (v85 >= 0xB)
      operator delete(__p);
  }
}

void sub_227AC99DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v14[10];
  unint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[8] = v3;
    v14[9] = v3;
    v14[6] = v3;
    v14[7] = v3;
    v14[4] = v3;
    v14[5] = v3;
    v14[2] = v3;
    v14[3] = v3;
    v14[0] = v3;
    v14[1] = v3;
    v15 = 10;
    __p = v14;
    v17 = 0;
    v18 = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v4 = (char *)__p;
    if (__p)
    {
      if (v17 - 1 >= 0)
      {
        v5 = (char *)__p + 16 * v17;
        do
        {
          v6 = (unsigned int *)*((_QWORD *)v5 - 1);
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v15 >= 0xB)
        operator delete(__p);
    }
  }
  boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
    *(_BYTE *)a1 = 0;
  return a1;
}

void sub_227ACA204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4coex13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_24F036378;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4coex13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4coex13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4coex13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver19setIndications_syncENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  CFMutableDictionaryRef Mutable;
  uint64_t (*v10)(uint64_t);
  NSObject *v11;
  CFTypeRef v12;
  NSObject *v13;
  CFTypeRef v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  const void *v17;
  CFTypeRef v18;
  void *__p;
  __int128 v20;
  CFTypeRef cf;
  _OWORD v22[4];
  __int128 v23;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = v2[4];
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*v2)
        {
LABEL_30:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v22[3] = v8;
        v23 = v8;
        v22[1] = v8;
        v22[2] = v8;
        v22[0] = v8;
        AriSdk::ARI_CsiIdcControlEventRspCb_SDK::ARI_CsiIdcControlEventRspCb_SDK((AriSdk::ARI_CsiIdcControlEventRspCb_SDK *)v22, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p = operator new(0x19uLL);
        v20 = xmmword_227B19BA0;
        strcpy((char *)__p, "enable coex indications");
        coex::checkError(&cf, (AriSdk::MsgBase *)v22, 1224998912, (uint64_t)&__p);
        if (SHIBYTE(v20) < 0)
          operator delete(__p);
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (cf)
          v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v10 = 0;
        if (!v10)
        {
          if (AriSdk::ARI_CsiIdcControlEventRspCb_SDK::unpack((AriSdk::ARI_CsiIdcControlEventRspCb_SDK *)v22))
          {
            v11 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              LOWORD(__p) = 0;
              _os_log_error_impl(&dword_227A72000, v11, OS_LOG_TYPE_ERROR, "Failed to enable coex indications", (uint8_t *)&__p, 2u);
            }
            __p = operator new(0x38uLL);
            v20 = xmmword_227B1D260;
            strcpy((char *)__p, "Failed to enable coex indications (unpack error)");
            CreateError();
            v12 = cf;
            cf = v18;
            v18 = 0;
            if (!v12)
              goto LABEL_20;
            goto LABEL_15;
          }
          v13 = *(NSObject **)(v5 + 40);
          if (**((_DWORD **)&v23 + 1))
          {
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              LOWORD(__p) = 0;
              _os_log_error_impl(&dword_227A72000, v13, OS_LOG_TYPE_ERROR, "Failed to enable coex indications", (uint8_t *)&__p, 2u);
            }
            __p = operator new(0x38uLL);
            v20 = xmmword_227B1D260;
            strcpy((char *)__p, "Failed to enable coex indications (result error)");
            CreateError();
            v12 = cf;
            cf = v18;
            v18 = 0;
            if (!v12)
              goto LABEL_20;
LABEL_15:
            CFRelease(v12);
LABEL_20:
            if (SHIBYTE(v20) < 0)
              operator delete(__p);
            goto LABEL_22;
          }
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p) = 0;
            _os_log_impl(&dword_227A72000, v13, OS_LOG_TYPE_DEFAULT, "#I Successfully enabled coex indications", (uint8_t *)&__p, 2u);
          }
        }
LABEL_22:
        v14 = cf;
        v18 = cf;
        if (cf)
        {
          CFRetain(cf);
          v17 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 2), &v18, &v17);
          CFRelease(v14);
          if (!Mutable)
            goto LABEL_27;
        }
        else
        {
          v17 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 2), &v18, &v17);
          if (!Mutable)
          {
LABEL_27:
            if (cf)
              CFRelease(cf);
            MEMORY[0x22E2A3C64](v22);
            goto LABEL_30;
          }
        }
        CFRelease(Mutable);
        goto LABEL_27;
      }
    }
  }
}

void sub_227ACA808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  std::__shared_weak_count *v18;
  const void *v19;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (v19)
    CFRelease(v19);
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A3C64](&a18);
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c107_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver19setIndications_syncENS1_13CommandDriver8CallbackEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c107_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver19setIndications_syncENS1_13CommandDriver8CallbackEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setIndications_sync(coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setIndications_sync(coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0363E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setIndications_sync(coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setIndications_sync(coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0363E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setIndications_sync(coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setIndications_sync(coex::CommandDriver::Callback)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[6];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[5];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

unint64_t coex::checkError(CFTypeRef *a1, AriSdk::MsgBase *this, int a3, uint64_t a4)
{
  unint64_t result;
  int v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  std::ios_base *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  CFTypeRef v27;
  void *__dst[2];
  unint64_t v29;
  CFTypeRef cf;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *__p[2];
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  *a1 = 0;
  result = AriSdk::MsgBase::getGMID(this);
  v8 = (result >> 17) & 0xFFFF8000 | ((_DWORD)result << 26);
  if (v8 != 67600384 && v8 == a3)
    return result;
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v48 = v10;
  v47 = v10;
  v46 = v10;
  v45 = v10;
  v44 = v10;
  v43 = v10;
  v42 = v10;
  v41 = v10;
  v40 = v10;
  *(_OWORD *)__p = v10;
  v37 = v10;
  v34 = v10;
  v35 = v10;
  v32 = v10;
  v33 = v10;
  v11 = MEMORY[0x24BEDB870];
  v12 = MEMORY[0x24BEDB870] + 64;
  v39 = MEMORY[0x24BEDB870] + 64;
  v13 = (uint64_t *)MEMORY[0x24BEDB800];
  v14 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v31 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v31 + *(_QWORD *)(v31 - 24)) = v14;
  v15 = (std::ios_base *)((char *)&v31 + *(_QWORD *)(v31 - 24));
  std::ios_base::init(v15, &v32);
  v15[1].__vftable = 0;
  v15[1].__fmtflags_ = -1;
  v31 = v11 + 24;
  v39 = v12;
  std::streambuf::basic_streambuf();
  v16 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v32 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v37 = 0u;
  LODWORD(v38) = 16;
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Failed to ", 10);
  v18 = *(char *)(a4 + 23);
  if (v18 >= 0)
    v19 = a4;
  else
    v19 = *(_QWORD *)a4;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a4 + 23);
  else
    v20 = *(_QWORD *)(a4 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
  if ((v38 & 0x10) != 0)
  {
    v23 = *((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1) < (unint64_t)v35)
    {
      *((_QWORD *)&v37 + 1) = v35;
      v23 = v35;
    }
    v24 = (const void *)*((_QWORD *)&v34 + 1);
    v21 = v23 - *((_QWORD *)&v34 + 1);
    if ((unint64_t)(v23 - *((_QWORD *)&v34 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_36;
  }
  else
  {
    if ((v38 & 8) == 0)
    {
      v21 = 0;
      HIBYTE(v29) = 0;
      v22 = __dst;
      goto LABEL_24;
    }
    v24 = (const void *)v33;
    v21 = v34 - v33;
    if ((_QWORD)v34 - (_QWORD)v33 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_36:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v21 >= 0x17)
  {
    v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v25 = v21 | 7;
    v26 = v25 + 1;
    v22 = (void **)operator new(v25 + 1);
    __dst[1] = (void *)v21;
    v29 = v26 | 0x8000000000000000;
    __dst[0] = v22;
    goto LABEL_23;
  }
  HIBYTE(v29) = v21;
  v22 = __dst;
  if (v21)
LABEL_23:
    memmove(v22, v24, v21);
LABEL_24:
  *((_BYTE *)v22 + v21) = 0;
  CreateError();
  if (&cf == a1)
    goto LABEL_27;
  v27 = *a1;
  *a1 = cf;
  cf = 0;
  if (v27)
  {
    CFRelease(v27);
LABEL_27:
    if (cf)
      CFRelease(cf);
  }
  if (SHIBYTE(v29) < 0)
    operator delete(__dst[0]);
  v31 = *v13;
  *(uint64_t *)((char *)&v31 + *(_QWORD *)(v31 - 24)) = v13[3];
  *(_QWORD *)&v32 = v16 + 16;
  if (SBYTE7(v37) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22E2A47D4](&v39);
}

void sub_227ACACDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  const void **v17;

  if (a15 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a17);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v17);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a17);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v17);
  _Unwind_Resume(a1);
}

void sub_227ACAD6C(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFDictionary *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_227ACADFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_227ACAE20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver32registerWWANStateIndication_syncEvE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t result, const unsigned __int8 *a2)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  uint64_t (*v7)(uint64_t);
  CFTypeRef v8;
  int v9;
  __CFDictionary *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t (*v12)(uint64_t);
  CFTypeID v13;
  __CFDictionary *v14;
  CFMutableDictionaryRef v15;
  __CFDictionary *v16;
  void *v17;
  CFTypeRef v18;
  void *__p;
  __int128 v20;
  CFTypeRef cf;
  _OWORD v22[4];
  __int128 v23;
  __int128 v24;
  unint64_t v25;

  v2 = *(uint64_t **)(result + 32);
  if (!v2)
    return result;
  v3 = *v2;
  v25 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23 = v4;
  v24 = v4;
  v22[2] = v4;
  v22[3] = v4;
  v22[0] = v4;
  v22[1] = v4;
  AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK::ARI_CsiIdcCellConfigEventIndCb_SDK((AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK *)v22, a2);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  __p = operator new(0x20uLL);
  v20 = xmmword_227B1D270;
  strcpy((char *)__p, "get right WWAN state indication");
  coex::checkError(&cf, (AriSdk::MsgBase *)v22, 1233158144, (uint64_t)&__p);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (cf)
    v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v7 = 0;
  if (v7)
    goto LABEL_15;
  if (AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK::unpack((AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK *)v22))
  {
    __p = operator new(0x30uLL);
    v20 = xmmword_227B19B90;
    strcpy((char *)__p, "Invalid WWAN state indication (unpack error)");
    CreateError();
    v8 = cf;
    cf = v18;
    v18 = 0;
    if (!v8)
      goto LABEL_13;
  }
  else
  {
    if (!**((_DWORD **)&v23 + 1))
    {
      v15 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      v16 = v15;
      if (v15)
        v10 = v15;
      else
        v10 = Mutable;
      if (v15 && Mutable)
      {
        CFRelease(Mutable);
        v10 = v16;
      }
      v9 = *(_DWORD *)v23;
      coex::fetch_cell_config_info((__CFDictionary **)&__p, (const void *)v24, *((_OWORD **)&v24 + 1));
      v17 = __p;
      ctu::cf::insert<__CFString const*,__CFDictionary const*>(v10, (CFTypeRef)*MEMORY[0x24BED35D0], __p);
      if (v17)
        CFRelease(v17);
      goto LABEL_16;
    }
    __p = operator new(0x30uLL);
    v20 = xmmword_227B19B90;
    strcpy((char *)__p, "Invalid WWAN state indication (result error)");
    CreateError();
    v8 = cf;
    cf = v18;
    v18 = 0;
    if (!v8)
      goto LABEL_13;
  }
  CFRelease(v8);
LABEL_13:
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
LABEL_15:
  v9 = 0;
  v10 = Mutable;
LABEL_16:
  if (cf)
    v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v11 = 0;
  if (v11)
    ctu::cf::insert<__CFString const*,__CFError *>(v10, (CFTypeRef)*MEMORY[0x24BED3528], cf);
  v12 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!v10)
    v12 = 0;
  if (v12)
  {
    if (v10 && (v13 = CFGetTypeID(v10), v13 == CFDictionaryGetTypeID()))
    {
      v18 = v10;
      CFRetain(v10);
      v14 = v10;
    }
    else
    {
      v14 = 0;
      v18 = 0;
    }
    coex::ARICommandDriver::sendStateUpdate_sync(v3, &v18, v9);
    if (v14)
      CFRelease(v14);
  }
  if (v10)
    CFRelease(v10);
  if (cf)
    CFRelease(cf);
  return MEMORY[0x22E2A3F7C](v22);
}

void sub_227ACB19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  const void *v18;
  const void *v19;

  if (v18)
    CFRelease(v18);
  if (v19)
    CFRelease(v19);
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A3F7C](&a18);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c92_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver32registerWWANStateIndication_syncEvE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c92_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver32registerWWANStateIndication_syncEvE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::registerWWANStateIndication_sync(void)::$_0,std::allocator<coex::ARICommandDriver::registerWWANStateIndication_sync(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F036490;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::registerWWANStateIndication_sync(void)::$_0,std::allocator<coex::ARICommandDriver::registerWWANStateIndication_sync(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F036490;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void coex::fetch_cell_config_info(__CFDictionary **a1, const void *a2, _OWORD *a3)
{
  const __CFAllocator *v6;
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  __CFArray *v9;
  __CFDictionary *v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFMutableDictionaryRef v13;
  __CFDictionary *v14;
  CFTypeID v15;
  __CFDictionary *v16;
  __CFArray *v17;
  __CFArray *v18;
  CFMutableDictionaryRef v19;
  __CFDictionary *v20;
  uint64_t (*v21)(uint64_t);
  uint64_t (*v22)(uint64_t);
  CFMutableDictionaryRef v23;
  __CFDictionary *v24;
  uint64_t (*v25)(uint64_t);
  __CFArray *v26;
  uint64_t (*v27)(uint64_t);
  CFTypeRef v28;
  CFTypeID v29;
  CFTypeRef v30;
  uint64_t (*v31)(uint64_t);
  CFTypeRef v32;
  CFTypeID v33;
  CFTypeRef v34;
  uint64_t (*v35)(uint64_t);
  CFMutableArrayRef v36;
  __CFArray *v37;
  uint64_t i;
  CFMutableArrayRef v39;
  uint64_t (*v40)(uint64_t);
  CFMutableArrayRef v41;
  uint64_t (*v42)(uint64_t);
  CFTypeID v43;
  const __CFArray *v44;
  uint64_t (*v45)(uint64_t);
  __int128 v46;
  __CFDictionary *v47;
  CFTypeID v48;
  CFTypeRef v49;
  CFMutableArrayRef v50;
  CFTypeRef v51[2];
  __int128 v52;
  CFTypeRef v53;
  CFTypeRef v54;
  CFTypeRef v55;
  __CFArray *v56;
  CFTypeRef v57;
  CFTypeRef cf;
  unsigned int __dst[168];
  __CFDictionary *v60;
  CFMutableArrayRef v61;

  v60 = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v8 = Mutable;
  if (Mutable)
    v60 = Mutable;
  memcpy(__dst, a2, sizeof(__dst));
  v61 = 0;
  v9 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v10 = v9;
  if (v9)
    v61 = v9;
  coex::fetch_freq_and_bandwidth((coex *)v51);
  v11 = v51[0];
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v10, (CFTypeRef)*MEMORY[0x24BED3600], v51[0]);
  if (v11)
    CFRelease(v11);
  coex::fetch_freq_and_bandwidth((coex *)v51);
  v12 = v51[0];
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v10, (CFTypeRef)*MEMORY[0x24BED35E8], v51[0]);
  if (v12)
    CFRelease(v12);
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v8, (CFTypeRef)*MEMORY[0x24BED3608], v10);
  if (v10)
    CFRelease(v10);
  v51[0] = 0;
  v13 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v14 = v13;
  if (v13)
    v51[0] = v13;
  ctu::cf::insert<__CFString const*,unsigned char>(v13, (CFTypeRef)*MEMORY[0x24BED3558], LOBYTE(__dst[6]), v6);
  if (HIBYTE(__dst[3]) != 240)
    ctu::cf::insert<__CFString const*,unsigned char>(v14, (CFTypeRef)*MEMORY[0x24BED3538], HIBYTE(__dst[3]), v6);
  if (BYTE2(__dst[3]) != 240)
    ctu::cf::insert<__CFString const*,unsigned char>(v14, (CFTypeRef)*MEMORY[0x24BED35B8], BYTE2(__dst[3]), v6);
  ctu::cf::insert<__CFString const*,unsigned int>(v14, (CFTypeRef)*MEMORY[0x24BED3518], __dst[4], v6);
  ctu::cf::insert<__CFString const*,unsigned int>(v14, (CFTypeRef)*MEMORY[0x24BED3510], __dst[5], v6);
  if (v14)
  {
    v15 = CFGetTypeID(v14);
    if (v15 == CFDictionaryGetTypeID())
    {
      v61 = v14;
      CFRetain(v14);
      v16 = v14;
    }
    else
    {
      v16 = 0;
      v61 = 0;
    }
    CFRelease(v14);
  }
  else
  {
    v16 = 0;
    v61 = 0;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v8, (CFTypeRef)*MEMORY[0x24BED35F0], v16);
  if (v61)
    CFRelease(v61);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  coex::fetch_basic_cell_config_list((CFMutableArrayRef *)&cf, (uint64_t)&__dst[7], (uint64_t)&__dst[15], 4);
  v17 = (__CFArray *)cf;
  v56 = (__CFArray *)cf;
  v57 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  if (cf)
    CFRetain(cf);
  if (__dst[0] || LOWORD(__dst[1]))
  {
    v51[0] = 0;
    v19 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v20 = v19;
    if (v19)
      v51[0] = v19;
    ctu::cf::insert<__CFString const*,unsigned int>(v19, (CFTypeRef)*MEMORY[0x24BED35C0], __dst[0], v6);
    ctu::cf::insert<__CFString const*,int>(v20, (CFTypeRef)*MEMORY[0x24BED3520], 1000 * LOWORD(__dst[1]), v6);
    ctu::cf::insert<__CFString const*,unsigned int>(v20, (CFTypeRef)*MEMORY[0x24BED3588], 1u, v6);
    if (v17)
      v21 = ctu::SharedRef<__CFArray,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray>::get;
    else
      v21 = 0;
    if (v21 || (v50 = CFArrayCreateMutable(v6, 0, MEMORY[0x24BDBD690]), (v18 = v50) == 0))
    {
      v18 = v17;
    }
    else
    {
      v56 = v50;
      if (v17)
        CFRelease(v17);
    }
    CFArrayAppendValue(v18, v20);
    if (v20)
      CFRelease(v20);
  }
  else
  {
    v18 = v17;
  }
  if (!__dst[2] && !LOWORD(__dst[3]))
  {
    v56 = 0;
    v57 = v18;
    if (v18)
      v22 = ctu::SharedRef<__CFArray,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray>::get;
    else
      v22 = 0;
    if (!v22)
      goto LABEL_61;
    goto LABEL_59;
  }
  v51[0] = 0;
  v23 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v24 = v23;
  if (v23)
    v51[0] = v23;
  ctu::cf::insert<__CFString const*,unsigned int>(v23, (CFTypeRef)*MEMORY[0x24BED35C0], __dst[2], v6);
  ctu::cf::insert<__CFString const*,int>(v24, (CFTypeRef)*MEMORY[0x24BED3520], 1000 * LOWORD(__dst[3]), v6);
  ctu::cf::insert<__CFString const*,unsigned int>(v24, (CFTypeRef)*MEMORY[0x24BED3588], 2u, v6);
  if (v18)
    v25 = ctu::SharedRef<__CFArray,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray>::get;
  else
    v25 = 0;
  if (v25 || (v26 = CFArrayCreateMutable(v6, 0, MEMORY[0x24BDBD690])) == 0)
  {
    v26 = v18;
  }
  else
  {
    v56 = v26;
    if (v18)
    {
      CFRelease(v18);
      v26 = v56;
    }
  }
  CFArrayAppendValue(v26, v24);
  if (v24)
    CFRelease(v24);
  v18 = v56;
  v56 = 0;
  v57 = v18;
  if (v18)
    v27 = ctu::SharedRef<__CFArray,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray>::get;
  else
    v27 = 0;
  if (v27)
  {
LABEL_59:
    if (CFArrayGetCount(v18))
      ctu::cf::insert<__CFString const*,__CFArray *>(v60, (CFTypeRef)*MEMORY[0x24BED3670], v57);
  }
LABEL_61:
  coex::fetch_basic_cell_config_list((CFMutableArrayRef *)v51, (uint64_t)&__dst[23], (uint64_t)&__dst[29], 3);
  v28 = v51[0];
  if (!v51[0] || (v29 = CFGetTypeID(v51[0]), v29 != CFArrayGetTypeID()))
  {
    v28 = 0;
    v55 = 0;
    v30 = v51[0];
    if (!v51[0])
      goto LABEL_67;
    goto LABEL_66;
  }
  v55 = v28;
  CFRetain(v28);
  v30 = v51[0];
  if (v51[0])
LABEL_66:
    CFRelease(v30);
LABEL_67:
  if (v28)
    v31 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  else
    v31 = 0;
  if (v31 && CFArrayGetCount((CFArrayRef)v28))
    ctu::cf::insert<__CFString const*,__CFArray const*>(v60, (CFTypeRef)*MEMORY[0x24BED36B8], v28);
  coex::fetch_basic_cell_config_list((CFMutableArrayRef *)v51, (uint64_t)&__dst[37], (uint64_t)&__dst[35], 1);
  v32 = v51[0];
  if (!v51[0] || (v33 = CFGetTypeID(v51[0]), v33 != CFArrayGetTypeID()))
  {
    v32 = 0;
    v54 = 0;
    v34 = v51[0];
    if (!v51[0])
      goto LABEL_79;
    goto LABEL_78;
  }
  v54 = v32;
  CFRetain(v32);
  v34 = v51[0];
  if (v51[0])
LABEL_78:
    CFRelease(v34);
LABEL_79:
  if (v32)
    v35 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  else
    v35 = 0;
  if (v35 && CFArrayGetCount((CFArrayRef)v32))
    ctu::cf::insert<__CFString const*,__CFArray const*>(v60, (CFTypeRef)*MEMORY[0x24BED36E8], v32);
  v53 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v51[0] = 0;
  v36 = CFArrayCreateMutable(v6, 0, MEMORY[0x24BDBD690]);
  v37 = v36;
  if (v36)
    v51[0] = v36;
  for (i = 0; i != 64; ++i)
  {
    v61 = (CFMutableArrayRef)0xAAAAAAAAAAAAAAAALL;
    coex::fetch_gsm_cell_config((coex *)&v61, __dst[i + 104], 1u);
    v39 = v61;
    if (v61)
      v40 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v40 = 0;
    if (v40)
      CFArrayAppendValue(v37, v61);
    if (v39)
      CFRelease(v39);
    v61 = (CFMutableArrayRef)0xAAAAAAAAAAAAAAAALL;
    coex::fetch_gsm_cell_config((coex *)&v61, __dst[i + 40], 2u);
    v41 = v61;
    if (v61)
      v42 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v42 = 0;
    if (v42)
      CFArrayAppendValue(v37, v61);
    if (v41)
      CFRelease(v41);
  }
  if (v37)
  {
    v43 = CFGetTypeID(v37);
    if (v43 == CFArrayGetTypeID())
    {
      v53 = v37;
      CFRetain(v37);
      v44 = v37;
    }
    else
    {
      v44 = 0;
      v53 = 0;
    }
    CFRelease(v37);
  }
  else
  {
    v44 = 0;
    v53 = 0;
  }
  if (v44)
    v45 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  else
    v45 = 0;
  if (v45 && CFArrayGetCount(v44))
    ctu::cf::insert<__CFString const*,__CFArray const*>(v60, (CFTypeRef)*MEMORY[0x24BED3650], v53);
  if (a3)
  {
    v46 = a3[1];
    *(_OWORD *)v51 = *a3;
    v52 = v46;
    coex::fetch_basic_cell_config_list(&v61, (uint64_t)v51, (uint64_t)&v51[1], 1);
    v47 = v60;
    ctu::cf::insert<__CFString const*,__CFArray *>(v60, (CFTypeRef)*MEMORY[0x24BED3690], v61);
    if (v61)
      CFRelease(v61);
    coex::fetch_basic_cell_config_list(&v61, (uint64_t)&v52, (uint64_t)&v52 + 8, 1);
    ctu::cf::insert<__CFString const*,__CFArray *>(v47, (CFTypeRef)*MEMORY[0x24BED3660], v61);
    if (v61)
      CFRelease(v61);
    if (!v47)
    {
LABEL_126:
      *a1 = 0;
      v49 = v53;
      if (!v53)
        goto LABEL_128;
      goto LABEL_127;
    }
  }
  else
  {
    v47 = v60;
    if (!v60)
      goto LABEL_126;
  }
  v48 = CFGetTypeID(v47);
  if (v48 != CFDictionaryGetTypeID())
    goto LABEL_126;
  *a1 = v47;
  CFRetain(v47);
  v49 = v53;
  if (v53)
LABEL_127:
    CFRelease(v49);
LABEL_128:
  if (v54)
    CFRelease(v54);
  if (v55)
    CFRelease(v55);
  if (v57)
    CFRelease(v57);
  if (cf)
    CFRelease(cf);
  if (v47)
    CFRelease(v47);
}

void sub_227ACBBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  const void *v7;
  va_list va;
  const void *v9;
  va_list va1;
  const void *v11;
  va_list va2;
  uint64_t v13;
  const void *v14;
  va_list va3;
  va_list va4;

  va_start(va4, a5);
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v9 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v11 = va_arg(va3, const void *);
  v13 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v14 = va_arg(va4, const void *);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va2);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va3);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va4);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v5 - 96));
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFDictionary const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_227ACBE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_227ACBE80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::fetch_basic_cell_config_list(CFMutableArrayRef *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  void *v10;
  uint64_t (*v11)(uint64_t);
  void *v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  uint64_t (*v17)(uint64_t);
  void *value;

  *a1 = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v9 = Mutable;
  if (Mutable)
    *a1 = Mutable;
  if (a2)
  {
    if (a3)
    {
      do
      {
        value = (void *)0xAAAAAAAAAAAAAAAALL;
        coex::fetch_cell_config((CFMutableDictionaryRef *)&value, a2, 1u);
        v10 = value;
        if (value)
          v11 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        else
          v11 = 0;
        if (v11)
          CFArrayAppendValue(v9, value);
        if (v10)
          CFRelease(v10);
        value = (void *)0xAAAAAAAAAAAAAAAALL;
        coex::fetch_cell_config((CFMutableDictionaryRef *)&value, a3, 2u);
        v12 = value;
        if (value)
          v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        else
          v13 = 0;
        if (v13)
          CFArrayAppendValue(v9, value);
        if (v12)
          CFRelease(v12);
        a3 += 8;
        a2 += 8;
        --a4;
      }
      while (a4);
    }
    else
    {
      do
      {
        value = (void *)0xAAAAAAAAAAAAAAAALL;
        coex::fetch_cell_config((CFMutableDictionaryRef *)&value, a2, 1u);
        v16 = value;
        if (value)
          v17 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        else
          v17 = 0;
        if (v17)
          CFArrayAppendValue(v9, value);
        if (v16)
          CFRelease(v16);
        a2 += 8;
        --a4;
      }
      while (a4);
    }
  }
  else if (a3)
  {
    do
    {
      value = (void *)0xAAAAAAAAAAAAAAAALL;
      coex::fetch_cell_config((CFMutableDictionaryRef *)&value, a3, 2u);
      v14 = value;
      if (value)
        v15 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      else
        v15 = 0;
      if (v15)
        CFArrayAppendValue(v9, value);
      if (v14)
        CFRelease(v14);
      a3 += 8;
      --a4;
    }
    while (a4);
  }
}

void sub_227ACC068(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void sub_227ACC080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void **v2;
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(v2);
  _Unwind_Resume(a1);
}

void sub_227ACC0DC(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void sub_227ACC0F0(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t ctu::SharedRef<__CFArray,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void coex::fetch_freq_and_bandwidth(coex *this)
{
  const __CFAllocator *v2;
  CFNumberRef v3;
  CFNumberRef v4;
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  CFTypeID v7;
  _QWORD v8[2];
  __CFDictionary *v9;
  int valuePtr;

  v9 = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  LODWORD(v8[0]) = 0;
  v3 = CFNumberCreate(v2, kCFNumberIntType, v8);
  v8[1] = v3;
  v9 = 0;
  valuePtr = 0;
  v4 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
  v8[0] = v4;
  v9 = 0;
  Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v6 = Mutable;
  if (Mutable)
    v9 = Mutable;
  ctu::cf::insert<__CFString const*,__CFNumber const*>(Mutable, (CFTypeRef)*MEMORY[0x24BED35C0], v3);
  ctu::cf::insert<__CFString const*,__CFNumber const*>(v6, (CFTypeRef)*MEMORY[0x24BED3520], v4);
  if (v6)
  {
    v7 = CFGetTypeID(v6);
    if (v7 == CFDictionaryGetTypeID())
    {
      *(_QWORD *)this = v6;
      CFRetain(v6);
    }
    else
    {
      *(_QWORD *)this = 0;
    }
    CFRelease(v6);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  if (v4)
    CFRelease(v4);
  if (v3)
    CFRelease(v3);
}

void sub_227ACC27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, const void *a11)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a11);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(&a9);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void ctu::cf::insert<__CFString const*,__CFNumber const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_227ACC384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_227ACC3A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,unsigned char>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_227ACC458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_227ACC47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::insert<__CFString const*,unsigned int>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  BOOL v10;
  uint64_t v11;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  v9 = v8;
  if (cf)
    v10 = v8 == 0;
  else
    v10 = 1;
  v11 = !v10;
  if (v10)
  {
    if (!v8)
      goto LABEL_13;
  }
  else
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  CFRelease(v9);
LABEL_13:
  if (cf)
    CFRelease(cf);
  return v11;
}

void sub_227ACC538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_227ACC55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::fetch_cell_config(CFMutableDictionaryRef *a1, uint64_t a2, unsigned int a3)
{
  CFMutableDictionaryRef Mutable;
  BOOL v5;
  const __CFAllocator *v8;
  CFTypeID v9;

  Mutable = 0;
  if (*(_DWORD *)a2)
    v5 = 0;
  else
    v5 = *(unsigned __int16 *)(a2 + 4) == 0;
  if (!v5
    && (v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240],
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]), ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x24BED35C0], *(_DWORD *)a2, v8), ctu::cf::insert<__CFString const*,int>(Mutable, (CFTypeRef)*MEMORY[0x24BED3520], 1000 * *(unsigned __int16 *)(a2 + 4), v8), ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x24BED3588], a3, v8), Mutable)&& (v9 = CFGetTypeID(Mutable), v9 == CFDictionaryGetTypeID()))
  {
    *a1 = Mutable;
    CFRetain(Mutable);
  }
  else
  {
    *a1 = 0;
    if (!Mutable)
      return;
  }
  CFRelease(Mutable);
}

void sub_227ACC69C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_227ACC6B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_227ACC6C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::insert<__CFString const*,int>(__CFDictionary *a1, CFTypeRef cf, int a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  BOOL v10;
  uint64_t v11;
  int valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
  v9 = v8;
  if (cf)
    v10 = v8 == 0;
  else
    v10 = 1;
  v11 = !v10;
  if (v10)
  {
    if (!v8)
      goto LABEL_13;
  }
  else
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  CFRelease(v9);
LABEL_13:
  if (cf)
    CFRelease(cf);
  return v11;
}

void sub_227ACC780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_227ACC7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFArray *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_227ACC834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_227ACC858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFArray const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_227ACC8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_227ACC90C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::fetch_gsm_cell_config(coex *this, unsigned int a2, unsigned int a3)
{
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  CFTypeID v8;

  if (a2
    && (v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240],
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]), ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x24BED35C0], a2, v6), ctu::cf::insert<__CFString const*,int>(Mutable, (CFTypeRef)*MEMORY[0x24BED3520], 200000, v6), ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x24BED3588], a3, v6), Mutable))
  {
    v8 = CFGetTypeID(Mutable);
    if (v8 == CFDictionaryGetTypeID())
    {
      *(_QWORD *)this = Mutable;
      CFRetain(Mutable);
    }
    else
    {
      *(_QWORD *)this = 0;
    }
    CFRelease(Mutable);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void sub_227ACCA4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_227ACCA60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_227ACCA74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFError *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_227ACCB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_227ACCB28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver18pollWWANState_syncENS2_5SubIdEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  __CFDictionary *Mutable;
  uint64_t (*v10)(uint64_t);
  CFTypeRef v11;
  int v12;
  uint64_t (*v13)(uint64_t);
  uint64_t (*v14)(uint64_t);
  CFTypeID v15;
  __CFDictionary *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  const void *v19;
  CFTypeRef v20;
  _BYTE __p[24];
  CFTypeRef cf;
  _OWORD v23[4];
  __int128 v24;
  __int128 v25;
  unint64_t v26;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = v2[2];
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*v2)
        {
LABEL_38:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v26 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v24 = v8;
        v25 = v8;
        v23[2] = v8;
        v23[3] = v8;
        v23[0] = v8;
        v23[1] = v8;
        AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK::ARI_CsiIdcGetCellConfigRspCb_SDK((AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK *)v23, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p[23] = 14;
        strcpy(__p, "get WWAN state");
        coex::checkError(&cf, (AriSdk::MsgBase *)v23, 1224769536, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (cf)
          v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v10 = 0;
        if (v10)
          goto LABEL_18;
        if (AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK::unpack((AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK *)v23))
        {
          *(_QWORD *)__p = operator new(0x28uLL);
          *(_OWORD *)&__p[8] = xmmword_227B1D280;
          strcpy(*(char **)__p, "Failed to get WWAN state (unpack error)");
          CreateError();
          v11 = cf;
          cf = v20;
          v20 = 0;
          if (!v11)
            goto LABEL_16;
        }
        else
        {
          if (!**((_DWORD **)&v24 + 1))
          {
            v12 = *(_DWORD *)v24;
            coex::fetch_cell_config_info((__CFDictionary **)__p, (const void *)v25, *((_OWORD **)&v25 + 1));
            v19 = *(const void **)__p;
            ctu::cf::insert<__CFString const*,__CFDictionary const*>(Mutable, (CFTypeRef)*MEMORY[0x24BED3590], *(CFTypeRef *)__p);
            if (v19)
              CFRelease(v19);
            goto LABEL_19;
          }
          *(_QWORD *)__p = operator new(0x28uLL);
          *(_OWORD *)&__p[8] = xmmword_227B1D280;
          strcpy(*(char **)__p, "Failed to get WWAN state (result error)");
          CreateError();
          v11 = cf;
          cf = v20;
          v20 = 0;
          if (!v11)
            goto LABEL_16;
        }
        CFRelease(v11);
LABEL_16:
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
LABEL_18:
        v12 = 0;
LABEL_19:
        if (cf)
          v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v13 = 0;
        if (v13)
          ctu::cf::insert<__CFString const*,__CFError *>(Mutable, (CFTypeRef)*MEMORY[0x24BED3528], cf);
        v14 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
        if (!Mutable)
          v14 = 0;
        if (v14)
        {
          if (Mutable && (v15 = CFGetTypeID(Mutable), v15 == CFDictionaryGetTypeID()))
          {
            v20 = Mutable;
            CFRetain(Mutable);
            v16 = Mutable;
          }
          else
          {
            v16 = 0;
            v20 = 0;
          }
          coex::ARICommandDriver::sendStateUpdate_sync(v5, &v20, v12);
          if (v16)
            CFRelease(v16);
        }
        if (Mutable)
          CFRelease(Mutable);
        if (cf)
          CFRelease(cf);
        MEMORY[0x22E2A3D90](v23);
        goto LABEL_38;
      }
    }
  }
}

void sub_227ACCE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  std::__shared_weak_count *v18;
  const void *v19;
  const void *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  if (v20)
    CFRelease(v20);
  if (v19)
    CFRelease(v19);
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A3D90](&a18);
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c88_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver18pollWWANState_syncENS1_5SubIdEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c88_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver18pollWWANState_syncENS1_5SubIdEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::pollWWANState_sync(coex::SubId)::$_0,std::allocator<coex::ARICommandDriver::pollWWANState_sync(coex::SubId)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F036510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::pollWWANState_sync(coex::SubId)::$_0,std::allocator<coex::ARICommandDriver::pollWWANState_sync(coex::SubId)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F036510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::pollWWANState_sync(coex::SubId)::$_0,std::allocator<coex::ARICommandDriver::pollWWANState_sync(coex::SubId)::$_0>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver20pollLinkQuality_syncENS2_5SubIdEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  __CFDictionary *Mutable;
  CFTypeID v11;
  int v12;
  __CFDictionary *v13;
  uint64_t (*v14)(uint64_t);
  NSObject *v15;
  const char *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  char __p[17];
  char v20;
  CFTypeRef cf;
  _OWORD v22[4];
  __int128 v23;
  unint64_t v24;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = v2[2];
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*v2)
        {
LABEL_32:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v24 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v22[3] = v8;
        v23 = v8;
        v22[1] = v8;
        v22[2] = v8;
        v22[0] = v8;
        AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK((AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK *)v22, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        v20 = 16;
        strcpy(__p, "get link quality");
        coex::checkError(&cf, (AriSdk::MsgBase *)v22, 1224867840, (uint64_t)__p);
        if (v20 < 0)
        {
          operator delete(*(void **)__p);
          if (cf)
            v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v14 = 0;
          if (v14)
          {
LABEL_10:
            Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
            ctu::cf::insert<__CFString const*,__CFError *>(Mutable, (CFTypeRef)*MEMORY[0x24BED3528], cf);
            if (Mutable)
            {
              v11 = CFGetTypeID(Mutable);
              if (v11 == CFDictionaryGetTypeID())
              {
                *(_QWORD *)__p = Mutable;
                CFRetain(Mutable);
                v12 = 0;
                v13 = Mutable;
LABEL_25:
                coex::ARICommandDriver::sendStateUpdate_sync(v5, (const void **)__p, v12);
                if (v13)
                  CFRelease(v13);
                if (Mutable)
                  CFRelease(Mutable);
                if (cf)
                  CFRelease(cf);
                MEMORY[0x22E2A42F4](v22);
                goto LABEL_32;
              }
            }
            goto LABEL_23;
          }
        }
        else
        {
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_10;
        }
        if (AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK::unpack((AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK *)v22))
        {
          v15 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
LABEL_22:
            Mutable = 0;
LABEL_23:
            v12 = 0;
LABEL_24:
            v13 = 0;
            *(_QWORD *)__p = 0;
            goto LABEL_25;
          }
          *(_WORD *)__p = 0;
          v16 = "Failed to get link quality report (unpack error)";
        }
        else
        {
          if (!**((_DWORD **)&v23 + 1))
          {
            Mutable = 0;
            v12 = *(_DWORD *)v23;
            goto LABEL_24;
          }
          v15 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            goto LABEL_22;
          *(_WORD *)__p = 0;
          v16 = "Failed to get link quality report (result error)";
        }
        _os_log_error_impl(&dword_227A72000, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)__p, 2u);
        goto LABEL_22;
      }
    }
  }
}

void sub_227ACD2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16)
{
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A42F4](&a16);
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c90_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver20pollLinkQuality_syncENS1_5SubIdEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c90_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver20pollLinkQuality_syncENS1_5SubIdEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::pollLinkQuality_sync(coex::SubId)::$_0,std::allocator<coex::ARICommandDriver::pollLinkQuality_sync(coex::SubId)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F036590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::pollLinkQuality_sync(coex::SubId)::$_0,std::allocator<coex::ARICommandDriver::pollLinkQuality_sync(coex::SubId)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F036590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::pollLinkQuality_sync(coex::SubId)::$_0,std::allocator<coex::ARICommandDriver::pollLinkQuality_sync(coex::SubId)::$_0>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  CFMutableDictionaryRef Mutable;
  uint64_t (*v10)(uint64_t);
  CFTypeRef v11;
  CFTypeRef v12;
  uint64_t (*v13)(uint64_t);
  const void *v14;
  int v15;
  const void *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  CFTypeRef *v19;
  const void **v20;
  CFTypeRef v21;
  const void *v22;
  const void *v23;
  const void *v24;
  CFTypeRef v25;
  _BYTE __p[24];
  CFTypeRef cf;
  _OWORD v28[4];
  __int128 v29;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD **)(v2 + 16);
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*(_QWORD *)v2)
        {
LABEL_37:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v28[3] = v8;
        v29 = v8;
        v28[1] = v8;
        v28[2] = v8;
        v28[0] = v8;
        AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK::ARI_CsiIdcSetRTConfigRspCb_SDK((AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK *)v28, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p[23] = 10;
        strcpy(__p, "set policy");
        coex::checkError(&cf, (AriSdk::MsgBase *)v28, 1224802304, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (cf)
          v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v10 = 0;
        if (!v10)
        {
          if (AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK::unpack((AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK *)v28))
          {
            *(_QWORD *)__p = operator new(0x28uLL);
            *(_OWORD *)&__p[8] = xmmword_227B1D290;
            strcpy(*(char **)__p, "Failed to set policy (unpack error)");
            CreateError();
            v11 = cf;
            cf = v25;
            v25 = 0;
            if (!v11)
              goto LABEL_16;
            goto LABEL_13;
          }
          if (**((_DWORD **)&v29 + 1))
          {
            *(_QWORD *)__p = operator new(0x28uLL);
            *(_OWORD *)&__p[8] = xmmword_227B1D290;
            strcpy(*(char **)__p, "Failed to set policy (result error)");
            CreateError();
            v11 = cf;
            cf = v25;
            v25 = 0;
            if (!v11)
            {
LABEL_16:
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              goto LABEL_18;
            }
LABEL_13:
            CFRelease(v11);
            goto LABEL_16;
          }
          v19 = (CFTypeRef *)(v2 + 40);
          v20 = (const void **)(v5 + 28);
          if (v5 + 28 != (_QWORD *)(v2 + 40))
          {
            v21 = *v19;
            if (*v19)
              CFRetain(*v19);
            v22 = *v20;
            *v20 = v21;
            if (v22)
              CFRelease(v22);
          }
        }
LABEL_18:
        v12 = cf;
        if (cf)
          v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v13 = 0;
        if (v13)
        {
          v14 = (const void *)v5[28];
          v5[28] = 0;
          if (v14)
          {
            CFRelease(v14);
            v12 = cf;
          }
        }
        v25 = v12;
        if (v12)
        {
          CFRetain(v12);
          v24 = 0;
          coex::CommandDriver::Callback::operator()(v2 + 24, &v25, &v24);
          CFRelease(v12);
          if (!*(_BYTE *)(v2 + 48))
            goto LABEL_32;
        }
        else
        {
          v24 = 0;
          coex::CommandDriver::Callback::operator()(v2 + 24, &v25, &v24);
          if (!*(_BYTE *)(v2 + 48))
          {
LABEL_32:
            if (Mutable)
              CFRelease(Mutable);
            if (cf)
              CFRelease(cf);
            MEMORY[0x22E2A3AC0](v28);
            goto LABEL_37;
          }
        }
        v15 = *(unsigned __int8 *)(v2 + 49);
        v16 = *(const void **)(v2 + 40);
        v23 = v16;
        if (v16)
          CFRetain(v16);
        coex::ARICommandDriver::setGPSState_sync(v5, v15 != 0, &v23);
        if (v16)
          CFRelease(v16);
        goto LABEL_32;
      }
    }
  }
}

void sub_227ACD7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, CFTypeRef cf, char a20)
{
  std::__shared_weak_count *v20;
  const void *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;

  if (a18 < 0)
    operator delete(__p);
  if (v21)
    CFRelease(v21);
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A3AC0](&a20);
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c154_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c154_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F036610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F036610;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  const void *v4;
  std::__shared_weak_count *v5;

  v2 = (const void *)a1[8];
  if (v2)
    CFRelease(v2);
  v3 = a1[7];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[6];
  if (v4)
    _Block_release(v4);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__1vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  CFMutableDictionaryRef Mutable;
  uint64_t (*v9)(uint64_t);
  CFTypeRef v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  CFTypeRef v13;
  void *__p;
  __int128 v15;
  CFTypeRef cf;
  _OWORD v17[4];
  __int128 v18;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (!*v2)
        {
LABEL_23:
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v17[3] = v7;
        v18 = v7;
        v17[1] = v7;
        v17[2] = v7;
        v17[0] = v7;
        AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK::ARI_CsiIdcSetTxPowerLimitRspCb_SDK((AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK *)v17, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p = operator new(0x20uLL);
        v15 = xmmword_227B19BE0;
        strcpy((char *)__p, "set txpower-limit threshold");
        coex::checkError(&cf, (AriSdk::MsgBase *)v17, 1225261056, (uint64_t)&__p);
        if (SHIBYTE(v15) < 0)
          operator delete(__p);
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (cf)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        if (!v9)
        {
          if (AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK::unpack((AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK *)v17))
          {
            __p = operator new(0x38uLL);
            v15 = xmmword_227B1D2A0;
            strcpy((char *)__p, "Failed to set txpower-limit threshold (unpack error)");
            CreateError();
            v10 = cf;
            cf = v13;
            if (!v10)
              goto LABEL_16;
            goto LABEL_13;
          }
          if (**((_DWORD **)&v18 + 1))
          {
            __p = operator new(0x38uLL);
            v15 = xmmword_227B1D2A0;
            strcpy((char *)__p, "Failed to set txpower-limit threshold (result error)");
            CreateError();
            v10 = cf;
            cf = v13;
            if (!v10)
            {
LABEL_16:
              if (SHIBYTE(v15) < 0)
                operator delete(__p);
              goto LABEL_18;
            }
LABEL_13:
            CFRelease(v10);
            goto LABEL_16;
          }
        }
LABEL_18:
        if (Mutable)
          CFRelease(Mutable);
        if (cf)
          CFRelease(cf);
        MEMORY[0x22E2A3FA0](v17);
        goto LABEL_23;
      }
    }
  }
}

void sub_227ACDC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  std::__shared_weak_count *v18;
  const void *v19;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (v19)
    CFRelease(v19);
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A3FA0](&a18);
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c154_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c154_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__1EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_1,std::allocator<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F036690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_1,std::allocator<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F036690;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_1,std::allocator<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_1>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver16setGPSState_syncEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  CFTypeRef v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  CFTypeRef *v14;
  const void **v15;
  CFTypeRef v16;
  const void *v17;
  CFTypeRef v18;
  _BYTE __p[24];
  CFTypeRef cf;
  _OWORD v21[4];
  _DWORD *v22;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = v2[2];
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*v2)
        {
LABEL_25:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v22 = (_DWORD *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v21[2] = v8;
        v21[3] = v8;
        v21[0] = v8;
        v21[1] = v8;
        AriSdk::ARI_CsiIceGpsStateRspCb_SDK::ARI_CsiIceGpsStateRspCb_SDK((AriSdk::ARI_CsiIceGpsStateRspCb_SDK *)v21, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p[23] = 13;
        strcpy(__p, "set gps state");
        coex::checkError(&cf, (AriSdk::MsgBase *)v21, -183566336, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if (cf)
            v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v10 = 0;
          if (!v10)
          {
LABEL_15:
            if (AriSdk::ARI_CsiIceGpsStateRspCb_SDK::unpack((AriSdk::ARI_CsiIceGpsStateRspCb_SDK *)v21))
            {
              *(_QWORD *)__p = operator new(0x28uLL);
              *(_OWORD *)&__p[8] = xmmword_227B1D2B0;
              strcpy(*(char **)__p, "Failed to set gps state (unpack error)");
              CreateError();
              v11 = cf;
              cf = v18;
              if (!v11)
                goto LABEL_20;
            }
            else
            {
              if (!*v22)
              {
                v14 = (CFTypeRef *)(v2 + 3);
                v15 = (const void **)(v5 + 224);
                if ((_QWORD *)(v5 + 224) != v2 + 3)
                {
                  v16 = *v14;
                  if (*v14)
                    CFRetain(*v14);
                  v17 = *v15;
                  *v15 = v16;
                  if (v17)
                    CFRelease(v17);
                }
                goto LABEL_22;
              }
              *(_QWORD *)__p = operator new(0x28uLL);
              *(_OWORD *)&__p[8] = xmmword_227B1D2B0;
              strcpy(*(char **)__p, "Failed to set gps state (result error)");
              CreateError();
              v11 = cf;
              cf = v18;
              if (!v11)
                goto LABEL_20;
            }
            CFRelease(v11);
LABEL_20:
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
        }
        else
        {
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (!v9)
            goto LABEL_15;
        }
LABEL_22:
        if (cf)
          CFRelease(cf);
        MEMORY[0x22E2A3694](v21);
        goto LABEL_25;
      }
    }
  }
}

void sub_227ACE08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v21;

  if (a16 < 0)
    operator delete(__p);
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A3694](&a18);
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c117_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver16setGPSState_syncEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c117_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver16setGPSState_syncEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setGPSState_sync(BOOL,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,std::allocator<coex::ARICommandDriver::setGPSState_sync(BOOL,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F036710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setGPSState_sync(BOOL,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,std::allocator<coex::ARICommandDriver::setGPSState_sync(BOOL,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F036710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setGPSState_sync(BOOL,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,std::allocator<coex::ARICommandDriver::setGPSState_sync(BOOL,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>::__on_zero_shared(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver18setWiFiStatus_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  uint64_t (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t);
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void *v15;
  CFTypeRef v16;
  _BYTE __p[24];
  CFTypeRef cf;
  _OWORD v19[4];
  __int128 v20;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (!*v2)
          goto LABEL_28;
        *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v19[3] = v7;
        v20 = v7;
        v19[1] = v7;
        v19[2] = v7;
        v19[0] = v7;
        AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK::ARI_CsiIdcSetWifiStatusRspCb_SDK((AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK *)v19, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p[23] = 15;
        strcpy(__p, "set wifi status");
        coex::checkError(&cf, (AriSdk::MsgBase *)v19, 1225162752, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (!v9)
          {
LABEL_15:
            if (AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK::unpack((AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK *)v19))
            {
              *(_QWORD *)__p = operator new(0x30uLL);
              *(_OWORD *)&__p[8] = xmmword_227B1D2C0;
              strcpy(*(char **)__p, "Failed to set wifi status (unpack error)");
              CreateError();
              v10 = cf;
              cf = v16;
              v16 = 0;
              if (!v10)
                goto LABEL_20;
            }
            else
            {
              if (!**((_DWORD **)&v20 + 1))
                goto LABEL_22;
              *(_QWORD *)__p = operator new(0x30uLL);
              *(_OWORD *)&__p[8] = xmmword_227B1D2C0;
              strcpy(*(char **)__p, "Failed to set wifi status (result error)");
              CreateError();
              v10 = cf;
              cf = v16;
              v16 = 0;
              if (!v10)
                goto LABEL_20;
            }
            CFRelease(v10);
LABEL_20:
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
        }
        else
        {
          if (cf)
            v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v8 = 0;
          if (!v8)
            goto LABEL_15;
        }
LABEL_22:
        v11 = cf;
        v16 = cf;
        if (cf)
        {
          CFRetain(cf);
          v15 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v16, &v15);
          CFRelease(v11);
          v12 = cf;
          if (!cf)
            goto LABEL_27;
        }
        else
        {
          v15 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v16, &v15);
          v12 = cf;
          if (!cf)
          {
LABEL_27:
            MEMORY[0x22E2A3DF0](v19);
LABEL_28:
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            return;
          }
        }
        CFRelease(v12);
        goto LABEL_27;
      }
    }
  }
}

void sub_227ACE4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v21;

  if (a16 < 0)
    operator delete(__p);
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A3DF0](&a18);
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c147_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver18setWiFiStatus_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_13CommandDriver8CallbackEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c147_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver18setWiFiStatus_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_13CommandDriver8CallbackEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setWiFiStatus_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setWiFiStatus_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F036790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setWiFiStatus_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setWiFiStatus_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F036790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setWiFiStatus_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setWiFiStatus_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  const void *v4;
  std::__shared_weak_count *v5;

  v2 = (const void *)a1[8];
  if (v2)
    CFRelease(v2);
  v3 = a1[7];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[6];
  if (v4)
    _Block_release(v4);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver17setLAAConfig_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  uint64_t (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t);
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void *v15;
  CFTypeRef v16;
  _BYTE __p[24];
  CFTypeRef cf;
  _OWORD v19[4];
  __int128 v20;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (!*v2)
          goto LABEL_28;
        *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v19[3] = v7;
        v20 = v7;
        v19[1] = v7;
        v19[2] = v7;
        v19[0] = v7;
        AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK::ARI_CsiIdcSetLaaConfigRspCb_SDK((AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK *)v19, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p[23] = 14;
        strcpy(__p, "set LAA config");
        coex::checkError(&cf, (AriSdk::MsgBase *)v19, 1225293824, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (!v9)
          {
LABEL_15:
            if (AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK::unpack((AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK *)v19))
            {
              *(_QWORD *)__p = operator new(0x28uLL);
              *(_OWORD *)&__p[8] = xmmword_227B1D280;
              strcpy(*(char **)__p, "Failed to set LAA config (unpack error)");
              CreateError();
              v10 = cf;
              cf = v16;
              v16 = 0;
              if (!v10)
                goto LABEL_20;
            }
            else
            {
              if (!**((_DWORD **)&v20 + 1))
                goto LABEL_22;
              *(_QWORD *)__p = operator new(0x28uLL);
              *(_OWORD *)&__p[8] = xmmword_227B1D280;
              strcpy(*(char **)__p, "Failed to set LAA config (result error)");
              CreateError();
              v10 = cf;
              cf = v16;
              v16 = 0;
              if (!v10)
                goto LABEL_20;
            }
            CFRelease(v10);
LABEL_20:
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
        }
        else
        {
          if (cf)
            v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v8 = 0;
          if (!v8)
            goto LABEL_15;
        }
LABEL_22:
        v11 = cf;
        v16 = cf;
        if (cf)
        {
          CFRetain(cf);
          v15 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v16, &v15);
          CFRelease(v11);
          v12 = cf;
          if (!cf)
            goto LABEL_27;
        }
        else
        {
          v15 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v16, &v15);
          v12 = cf;
          if (!cf)
          {
LABEL_27:
            MEMORY[0x22E2A3C88](v19);
LABEL_28:
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            return;
          }
        }
        CFRelease(v12);
        goto LABEL_27;
      }
    }
  }
}

void sub_227ACE928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v21;

  if (a16 < 0)
    operator delete(__p);
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A3C88](&a18);
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c157_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver17setLAAConfig_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c157_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver17setLAAConfig_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setLAAConfig_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setLAAConfig_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F036810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setLAAConfig_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setLAAConfig_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F036810;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setLAAConfig_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setLAAConfig_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  const void *v4;
  std::__shared_weak_count *v5;

  v2 = (const void *)a1[8];
  if (v2)
    CFRelease(v2);
  v3 = a1[7];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[6];
  if (v4)
    _Block_release(v4);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver25setFCMBCMAntennaMode_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  uint64_t (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t);
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void *v15;
  CFTypeRef v16;
  void *__p;
  __int128 v18;
  CFTypeRef cf;
  _OWORD v20[4];
  _DWORD *v21;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (!*v2)
          goto LABEL_28;
        v21 = (_DWORD *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v20[2] = v7;
        v20[3] = v7;
        v20[0] = v7;
        v20[1] = v7;
        AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK::ARI_IBIRfSetAntennaPortMappingResp_SDK((AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK *)v20, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p = operator new(0x20uLL);
        v18 = xmmword_227B1D2D0;
        strcpy((char *)__p, "set FCM BCM Antenna mode");
        coex::checkError(&cf, (AriSdk::MsgBase *)v20, 84508672, (uint64_t)&__p);
        if (SHIBYTE(v18) < 0)
        {
          operator delete(__p);
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (!v9)
          {
LABEL_15:
            if (AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK::unpack((AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK *)v20))
            {
              __p = operator new(0x38uLL);
              v18 = xmmword_227B1D2E0;
              strcpy((char *)__p, "Failed to set FCM BCM Antenna mode (unpack error)");
              CreateError();
              v10 = cf;
              cf = v16;
              v16 = 0;
              if (!v10)
                goto LABEL_20;
            }
            else
            {
              if (!*v21)
                goto LABEL_22;
              __p = operator new(0x38uLL);
              v18 = xmmword_227B1D2E0;
              strcpy((char *)__p, "Failed to set FCM BCM Antenna mode (status error)");
              CreateError();
              v10 = cf;
              cf = v16;
              v16 = 0;
              if (!v10)
                goto LABEL_20;
            }
            CFRelease(v10);
LABEL_20:
            if (SHIBYTE(v18) < 0)
              operator delete(__p);
          }
        }
        else
        {
          if (cf)
            v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v8 = 0;
          if (!v8)
            goto LABEL_15;
        }
LABEL_22:
        v11 = cf;
        v16 = cf;
        if (cf)
        {
          CFRetain(cf);
          v15 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v16, &v15);
          CFRelease(v11);
          v12 = cf;
          if (!cf)
            goto LABEL_27;
        }
        else
        {
          v15 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v16, &v15);
          v12 = cf;
          if (!cf)
          {
LABEL_27:
            MEMORY[0x22E2A4240](v20);
LABEL_28:
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            return;
          }
        }
        CFRelease(v12);
        goto LABEL_27;
      }
    }
  }
}

void sub_227ACEDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v21;

  if (a16 < 0)
    operator delete(__p);
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A4240](&a18);
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c154_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver25setFCMBCMAntennaMode_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_13CommandDriver8CallbackEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c154_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver25setFCMBCMAntennaMode_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_13CommandDriver8CallbackEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setFCMBCMAntennaMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setFCMBCMAntennaMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F036890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setFCMBCMAntennaMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setFCMBCMAntennaMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F036890;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setFCMBCMAntennaMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setFCMBCMAntennaMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  const void *v4;
  std::__shared_weak_count *v5;

  v2 = (const void *)a1[8];
  if (v2)
    CFRelease(v2);
  v3 = a1[7];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[6];
  if (v4)
    _Block_release(v4);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver23setLinkQualityMode_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEES9_NS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  CFMutableDictionaryRef Mutable;
  uint64_t (*v9)(uint64_t);
  CFTypeRef v10;
  CFTypeRef v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void *v14;
  CFTypeRef v15;
  _BYTE __p[24];
  CFTypeRef cf;
  _OWORD v18[4];
  __int128 v19;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (!*v2)
        {
LABEL_26:
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v18[3] = v7;
        v19 = v7;
        v18[1] = v7;
        v18[2] = v7;
        v18[0] = v7;
        AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK((AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK *)v18, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p[23] = 16;
        strcpy(__p, "set link quality");
        coex::checkError(&cf, (AriSdk::MsgBase *)v18, 1224835072, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (cf)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        if (v9)
        {
LABEL_18:
          v11 = cf;
          v15 = cf;
          if (cf)
          {
            CFRetain(cf);
            v14 = 0;
            coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v15, &v14);
            CFRelease(v11);
            if (!Mutable)
              goto LABEL_23;
          }
          else
          {
            v14 = 0;
            coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v15, &v14);
            if (!Mutable)
            {
LABEL_23:
              if (cf)
                CFRelease(cf);
              MEMORY[0x22E2A4318](v18);
              goto LABEL_26;
            }
          }
          CFRelease(Mutable);
          goto LABEL_23;
        }
        if (AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK::unpack((AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK *)v18))
        {
          *(_QWORD *)__p = operator new(0x30uLL);
          *(_OWORD *)&__p[8] = xmmword_227B1D2F0;
          strcpy(*(char **)__p, "Failed to set link quality (unpack error)");
          CreateError();
          v10 = cf;
          cf = v15;
          v15 = 0;
          if (!v10)
            goto LABEL_16;
        }
        else
        {
          if (!**((_DWORD **)&v19 + 1))
            goto LABEL_18;
          *(_QWORD *)__p = operator new(0x30uLL);
          *(_OWORD *)&__p[8] = xmmword_227B1D2F0;
          strcpy(*(char **)__p, "Failed to set link quality (result error)");
          CreateError();
          v10 = cf;
          cf = v15;
          v15 = 0;
          if (!v10)
            goto LABEL_16;
        }
        CFRelease(v10);
LABEL_16:
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        goto LABEL_18;
      }
    }
  }
}

void sub_227ACF220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  std::__shared_weak_count *v18;
  const void *v19;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (v19)
    CFRelease(v19);
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A4318](&a18);
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c166_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver23setLinkQualityMode_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEES8_NS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c166_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver23setLinkQualityMode_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEES8_NS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setLinkQualityMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setLinkQualityMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F036910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setLinkQualityMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setLinkQualityMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F036910;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setLinkQualityMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setLinkQualityMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[7];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[6];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  uint64_t (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t);
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void *v15;
  CFTypeRef v16;
  void *__p;
  __int128 v18;
  CFTypeRef cf;
  _OWORD v20[4];
  __int128 v21;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (!*v2)
          goto LABEL_28;
        *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v20[3] = v7;
        v21 = v7;
        v20[1] = v7;
        v20[2] = v7;
        v20[0] = v7;
        AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK::ARI_CsiIdcRTSetScanFreqRspCb_SDK((AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK *)v20, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p = operator new(0x20uLL);
        v18 = xmmword_227B1D300;
        strcpy((char *)__p, "set scan freq band filter");
        coex::checkError(&cf, (AriSdk::MsgBase *)v20, 1224900608, (uint64_t)&__p);
        if (SHIBYTE(v18) < 0)
        {
          operator delete(__p);
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (!v9)
          {
LABEL_15:
            if (AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK::unpack((AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK *)v20))
            {
              __p = operator new(0x38uLL);
              v18 = xmmword_227B1D310;
              strcpy((char *)__p, "Failed to set scan freq band filter (unpack error)");
              CreateError();
              v10 = cf;
              cf = v16;
              v16 = 0;
              if (!v10)
                goto LABEL_20;
            }
            else
            {
              if (!**((_DWORD **)&v21 + 1))
                goto LABEL_22;
              __p = operator new(0x38uLL);
              v18 = xmmword_227B1D310;
              strcpy((char *)__p, "Failed to set scan freq band filter (result error)");
              CreateError();
              v10 = cf;
              cf = v16;
              v16 = 0;
              if (!v10)
                goto LABEL_20;
            }
            CFRelease(v10);
LABEL_20:
            if (SHIBYTE(v18) < 0)
              operator delete(__p);
          }
        }
        else
        {
          if (cf)
            v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v8 = 0;
          if (!v8)
            goto LABEL_15;
        }
LABEL_22:
        v11 = cf;
        v16 = cf;
        if (cf)
        {
          CFRetain(cf);
          v15 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v16, &v15);
          CFRelease(v11);
          v12 = cf;
          if (!cf)
            goto LABEL_27;
        }
        else
        {
          v15 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v16, &v15);
          v12 = cf;
          if (!cf)
          {
LABEL_27:
            MEMORY[0x22E2A3DB4](v20);
LABEL_28:
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            return;
          }
        }
        CFRelease(v12);
        goto LABEL_27;
      }
    }
  }
}

void sub_227ACF6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v21;

  if (a16 < 0)
    operator delete(__p);
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A3DB4](&a18);
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c166_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c166_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setScanFreqBandFilter_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setScanFreqBandFilter_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F036990;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setScanFreqBandFilter_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setScanFreqBandFilter_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F036990;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setScanFreqBandFilter_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setScanFreqBandFilter_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[7];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[6];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver19setRC1Duration_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  uint64_t (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t);
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void *v15;
  CFTypeRef v16;
  _BYTE __p[24];
  CFTypeRef cf;
  _OWORD v19[4];
  __int128 v20;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (!*v2)
          goto LABEL_28;
        *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v19[3] = v7;
        v20 = v7;
        v19[1] = v7;
        v19[2] = v7;
        v19[0] = v7;
        AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK::ARI_CsiIdcSetRadio1RspCb_SDK((AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK *)v19, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p[23] = 16;
        strcpy(__p, "set rc1 duration");
        coex::checkError(&cf, (AriSdk::MsgBase *)v19, 1225326592, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (!v9)
          {
LABEL_15:
            if (AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK::unpack((AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK *)v19))
            {
              *(_QWORD *)__p = operator new(0x30uLL);
              *(_OWORD *)&__p[8] = xmmword_227B1D2F0;
              strcpy(*(char **)__p, "Failed to set rc1 duration (unpack error)");
              CreateError();
              v10 = cf;
              cf = v16;
              v16 = 0;
              if (!v10)
                goto LABEL_20;
            }
            else
            {
              if (!**((_DWORD **)&v20 + 1))
                goto LABEL_22;
              *(_QWORD *)__p = operator new(0x30uLL);
              *(_OWORD *)&__p[8] = xmmword_227B1D2F0;
              strcpy(*(char **)__p, "Failed to set rc1 duration (result error)");
              CreateError();
              v10 = cf;
              cf = v16;
              v16 = 0;
              if (!v10)
                goto LABEL_20;
            }
            CFRelease(v10);
LABEL_20:
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
        }
        else
        {
          if (cf)
            v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v8 = 0;
          if (!v8)
            goto LABEL_15;
        }
LABEL_22:
        v11 = cf;
        v16 = cf;
        if (cf)
        {
          CFRetain(cf);
          v15 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 2), &v16, &v15);
          CFRelease(v11);
          v12 = cf;
          if (!cf)
            goto LABEL_27;
        }
        else
        {
          v15 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 2), &v16, &v15);
          v12 = cf;
          if (!cf)
          {
LABEL_27:
            MEMORY[0x22E2A37E4](v19);
LABEL_28:
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            return;
          }
        }
        CFRelease(v12);
        goto LABEL_27;
      }
    }
  }
}

void sub_227ACFAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v21;

  if (a16 < 0)
    operator delete(__p);
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A37E4](&a18);
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c159_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver19setRC1Duration_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c159_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver19setRC1Duration_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setRC1Duration_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setRC1Duration_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F036A10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setRC1Duration_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setRC1Duration_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F036A10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setRC1Duration_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setRC1Duration_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[6];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[5];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 292) > *(_DWORD *)(*a1 + 288))
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  int v27;
  uint64_t ***v28;
  BOOL v29;
  BOOL v30;
  uint64_t ***v31;
  uint64_t *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;

  v7 = (uint64_t **)(a1 + 4);
  v6 = a1[4];
  if (!v6)
  {
    v23 = (uint64_t *)a1[10];
    if (v23 != *a3)
      goto LABEL_80;
    v24 = (uint64_t *)v23[1];
    v25 = (uint64_t **)(a1 + 4);
    v10 = a1 + 4;
    if (v24 != a1)
      goto LABEL_76;
    goto LABEL_55;
  }
  v8 = *a2;
  v9 = a2[2];
  v10 = a1 + 4;
  v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        v17 = *(_DWORD *)(v11 + 32);
        v18 = v17 < 1;
        if (v17 == 1)
          v18 = *(_DWORD *)(v11 + 40) < v9;
        if (!v18)
          break;
        v11 = *(_QWORD *)(v11 + 8);
        if (!v11)
          goto LABEL_19;
      }
      v10 = (uint64_t *)v11;
      v11 = *(_QWORD *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      v12 = *(_DWORD *)(v11 + 32);
      v13 = v12 == v8;
      v14 = v12 < v8;
      if (v12 >= v8)
        v15 = (uint64_t *)v11;
      else
        v15 = (uint64_t *)(v11 + 8);
      if (v14)
        v16 = v10;
      else
        v16 = (uint64_t *)v11;
      if (v13)
      {
        v15 = (uint64_t *)v11;
        v10 = (uint64_t *)v11;
      }
      else
      {
        v10 = v16;
      }
      v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  v19 = (uint64_t *)v10[6];
  if (v19 != *a3)
    goto LABEL_80;
  v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    v21 = (uint64_t *)a1[4];
    while (1)
    {
      v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10))
          goto LABEL_27;
LABEL_22:
        v21 = (uint64_t *)v21[1];
        if (!v21)
          goto LABEL_42;
      }
      else
      {
        if (v22 <= 1)
          goto LABEL_22;
LABEL_27:
        v20 = (uint64_t **)v21;
        v21 = (uint64_t *)*v21;
        if (!v21)
          goto LABEL_42;
      }
    }
  }
  v26 = (uint64_t **)a1[4];
  do
  {
    v27 = *((_DWORD *)v26 + 8);
    v28 = (uint64_t ***)(v26 + 1);
    v29 = v8 == v27;
    v30 = v8 < v27;
    if (v8 >= v27)
      v31 = (uint64_t ***)(v26 + 1);
    else
      v31 = (uint64_t ***)v26;
    if (!v30)
      v26 = v20;
    if (v29)
      v31 = v28;
    else
      v20 = v26;
    v26 = *v31;
  }
  while (*v31);
LABEL_42:
  v24 = (uint64_t *)v19[1];
  v32 = a1;
  if (v20 != v7)
    v32 = v20[6];
  if (v24 == v32)
  {
LABEL_55:
    v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        v38 = v37;
        v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      v41 = v10;
      do
      {
        v38 = (uint64_t *)v41[2];
        v13 = *v38 == (_QWORD)v41;
        v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10)
      a1[3] = (uint64_t)v38;
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  v33 = *a2;
  if (*a2 == 1)
  {
    v34 = a2[2];
    while (1)
    {
      v25 = (uint64_t **)v6;
      v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(_QWORD *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        v6 = *(_QWORD *)v6;
        if (!*v25)
        {
          v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1)
          goto LABEL_47;
LABEL_53:
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
        {
          v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39)
    goto LABEL_79;
  while (v33 >= v39)
  {
    if (v39 >= v33)
      goto LABEL_79;
    v40 = *(_QWORD *)(v6 + 8);
    if (!v40)
    {
      v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    v39 = *(_DWORD *)(v40 + 32);
    v6 = v40;
    if (v33 == v39)
    {
      *(_QWORD *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  v40 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
    goto LABEL_61;
  v7 = (uint64_t **)v6;
LABEL_75:
  v25 = (uint64_t **)v6;
LABEL_76:
  v6 = (uint64_t)operator new(0x38uLL);
  *(_QWORD *)(v6 + 32) = *(_QWORD *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = v25;
  *v7 = (uint64_t *)v6;
  v42 = *(_QWORD *)a1[3];
  v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(_QWORD *)(v6 + 48) = v24;
LABEL_80:
  v44 = *a3;
  v45 = **a3;
  v46 = (*a3)[1];
  *(_QWORD *)(v45 + 8) = v46;
  *(_QWORD *)v44[1] = v45;
  --a1[2];
  v47 = (unsigned int *)v44[3];
  if (v47)
  {
    v48 = v47 + 2;
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 16))(v47);
      v51 = v47 + 3;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
        (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 24))(v47);
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int i;
  unsigned int v30;
  uint64_t v31;
  char v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD v84[6];

  v84[3] = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  if (*a1 == a1[3])
    return;
  if (v1 == a1[1])
    goto LABEL_94;
  while (1)
  {
    v3 = a1[2];
    v4 = *(_QWORD *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        v17 = *(_QWORD *)(v3 + 264);
      }
      else
      {
        v5 = *(_QWORD *)(v3 + 256);
        v6 = v5 + 24 * v4;
        v7 = v6;
        do
        {
          v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            v9 = *(unsigned int **)(v6 - 8);
            if (v9)
            {
              v10 = v9 + 2;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
                v13 = v9 + 3;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v6 - 16);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          v6 = v7;
        }
        while (v7 > v5);
        v17 = *(_QWORD *)(v3 + 264);
        v1 = *a1;
      }
      *(_QWORD *)(v3 + 264) = v17 - v4;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v82 = v18;
    v83 = v18;
    v80 = v18;
    v81 = v18;
    v78 = v18;
    v79 = v18;
    v76 = v18;
    v77 = v18;
    v74 = v18;
    v75 = v18;
    v72 = v18;
    v73 = v18;
    v19 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)&v82 = 10;
    *((_QWORD *)&v82 + 1) = &v72;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = v19;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *a1;
    v21 = *(_QWORD *)(*a1 + 16);
    v22 = a1[2];
    v23 = *(uint64_t **)(v21 + 32);
    if (v23)
    {
      v24 = *v23;
      if (*v23 != v23[1])
      {
        v25 = (_QWORD *)(v22 + 8);
        while (1)
        {
          memset(v84, 170, 24);
          v26 = *(_DWORD *)v24 ^ (*(int *)v24 >> 31);
          if (v26 == 2)
          {
            (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v24 + 8) + 16))(&v71);
            v84[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
            LODWORD(v84[0]) = 1;
            if (v71)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
              if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
                goto LABEL_47;
LABEL_40:
              v31 = *(_QWORD *)(v24 + 16);
              if (!v31)
                goto LABEL_48;
              if (!atomic_load((unsigned int *)(v31 + 8)))
                goto LABEL_48;
LABEL_42:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v25, (uint64_t)v84);
              v33 = 0;
              if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
                goto LABEL_51;
              goto LABEL_43;
            }
LABEL_39:
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          if (v26 != 1)
          {
            LODWORD(v84[0]) = 0;
            v84[1] = 0;
            v84[2] = 0;
            goto LABEL_39;
          }
          v27 = *(_QWORD *)(v24 + 16);
          if (!v27)
          {
LABEL_46:
            v84[1] = 0;
            v84[2] = v27;
            LODWORD(v84[0]) = 0;
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          v28 = (unsigned int *)(v27 + 8);
          for (i = *(_DWORD *)(v27 + 8); ; i = v30)
          {
            if (!i)
            {
              v27 = 0;
              goto LABEL_46;
            }
            v30 = __ldxr(v28);
            if (v30 != i)
            {
              __clrex();
              continue;
            }
            if (!__stxr(i + 1, v28))
              break;
          }
          v84[1] = *(_QWORD *)(v24 + 8);
          v84[2] = v27;
          LODWORD(v84[0]) = 0;
          if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) != 2)
            goto LABEL_40;
LABEL_47:
          if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v24 + 8) + 24))(*(_QWORD *)(v24 + 8)))
            goto LABEL_42;
LABEL_48:
          if (*(_BYTE *)(v21 + 24))
          {
            *(_BYTE *)(v21 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v21, &v72);
          }
          v33 = 1;
          if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
          {
LABEL_51:
            v34 = (unsigned int *)v84[2];
            if (v84[2])
            {
              v35 = (unsigned int *)(v84[2] + 8);
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
                v38 = v34 + 3;
                do
                {
                  v39 = __ldaxr(v38);
                  v40 = v39 - 1;
                }
                while (__stlxr(v40, v38));
                if (!v40)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 24))(v34);
              }
            }
            goto LABEL_59;
          }
LABEL_43:
          if (v84[1])
            (*(void (**)(_QWORD))(*(_QWORD *)v84[1] + 8))(v84[1]);
LABEL_59:
          if ((v33 & 1) == 0)
          {
            v24 += 24;
            if (v24 != *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8))
              continue;
          }
          v20 = *a1;
          v21 = *(_QWORD *)(*a1 + 16);
          v22 = a1[2];
          break;
        }
      }
    }
    if (*(_BYTE *)(v21 + 24))
    {
      ++*(_DWORD *)(v22 + 288);
      v41 = *(_QWORD *)(v21 + 16);
      if (v41)
      {
        if (atomic_load((unsigned int *)(v41 + 8)))
        {
          v43 = 1;
          goto LABEL_76;
        }
        v22 = a1[2];
        v20 = *a1;
      }
      a1[3] = v20;
      if (a1[1] == v20)
      {
        v46 = *(_DWORD **)(v22 + 296);
        if (v46)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v46, &v72);
        v43 = 0;
        *(_QWORD *)(v22 + 296) = 0;
      }
      else
      {
        v44 = *(_QWORD *)(v20 + 16);
        v45 = *(_DWORD **)(v22 + 296);
        if (v45)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v45, &v72);
        *(_QWORD *)(v22 + 296) = v44;
        v43 = 0;
        if (v44)
          ++*(_DWORD *)(v44 + 28);
      }
    }
    else
    {
      ++*(_DWORD *)(v22 + 292);
      v43 = 1;
    }
LABEL_76:
    (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
    v47 = *((_QWORD *)&v82 + 1);
    if (*((_QWORD *)&v82 + 1))
    {
      if ((uint64_t)v83 - 1 >= 0)
      {
        v48 = *((_QWORD *)&v82 + 1) + 16 * v83;
        do
        {
          v49 = *(unsigned int **)(v48 - 8);
          if (v49)
          {
            v50 = v49 + 2;
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 16))(v49);
              v53 = v49 + 3;
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
                (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 24))(v49);
            }
          }
          v48 -= 16;
        }
        while (v48 > v47);
      }
      if ((unint64_t)v82 >= 0xB)
        operator delete(*((void **)&v82 + 1));
    }
    v1 = *a1;
    v56 = a1[1];
    if (!v43)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    *a1 = v1;
    if (v1 == v56)
    {
      v1 = v56;
LABEL_94:
      v57 = a1[3];
      if (v57 != v1)
      {
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v80 = v58;
        v81 = v58;
        v78 = v58;
        v79 = v58;
        v76 = v58;
        v77 = v58;
        v74 = v58;
        v75 = v58;
        v72 = v58;
        v73 = v58;
        v59 = *(_QWORD *)(v57 + 16);
        *(_QWORD *)&v82 = 10;
        *((_QWORD *)&v82 + 1) = &v72;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = v59;
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
        v60 = a1[2];
        a1[3] = a1[1];
        v61 = *(_DWORD **)(v60 + 296);
        if (v61)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v61, &v72);
        *(_QWORD *)(v60 + 296) = 0;
        (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
        v62 = *((_QWORD *)&v82 + 1);
        if (*((_QWORD *)&v82 + 1))
        {
          if ((uint64_t)v83 - 1 >= 0)
          {
            v63 = *((_QWORD *)&v82 + 1) + 16 * v83;
            do
            {
              v64 = *(unsigned int **)(v63 - 8);
              if (v64)
              {
                v65 = v64 + 2;
                do
                {
                  v66 = __ldaxr(v65);
                  v67 = v66 - 1;
                }
                while (__stlxr(v67, v65));
                if (!v67)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 16))(v64);
                  v68 = v64 + 3;
                  do
                  {
                    v69 = __ldaxr(v68);
                    v70 = v69 - 1;
                  }
                  while (__stlxr(v70, v68));
                  if (!v70)
                    (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 24))(v64);
                }
              }
              v63 -= 16;
            }
            while (v63 > v62);
          }
          if ((unint64_t)v82 >= 0xB)
            operator delete(*((void **)&v82 + 1));
        }
      }
      return;
    }
  }
  if (v1 == v56)
    goto LABEL_94;
}

void sub_227AD0754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_227AD0768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  __int128 v4;
  pthread_mutex_t *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  int v47;
  int v48;
  _QWORD *v49;
  __int128 v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t *v83;
  _OWORD v84[10];
  unint64_t v85;
  void *__p;
  uint64_t v87;
  pthread_mutex_t *v88;
  uint64_t v89;

  v3 = (uint64_t **)a1;
  v89 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v84[8] = v4;
  v84[9] = v4;
  v84[6] = v4;
  v84[7] = v4;
  v84[4] = v4;
  v84[5] = v4;
  v84[2] = v4;
  v84[3] = v4;
  v84[0] = v4;
  v84[1] = v4;
  v5 = *(pthread_mutex_t **)(a1 + 24);
  v85 = 10;
  __p = v84;
  v87 = 0;
  v88 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2)
    goto LABEL_101;
  v6 = v3[1];
  if (!v6 || (v7 = atomic_load((unsigned int *)v6 + 2), v7 != 1))
  {
    v82 = (uint64_t *)operator new(0x20uLL);
    v8 = *v3;
    v9 = **v3;
    v10 = operator new(0x40uLL);
    v11 = v10;
    *v10 = v10;
    v10[1] = v10;
    v10[2] = 0;
    v12 = *(_QWORD **)(v9 + 8);
    if (v12 != (_QWORD *)v9)
    {
      v13 = 0;
      v14 = v10;
      do
      {
        v15 = operator new(0x20uLL);
        v15[2] = v12[2];
        v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          v17 = (unsigned int *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          v14 = (_QWORD *)*v11;
          v13 = v11[2];
        }
        *v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        *v11 = v15;
        v11[2] = ++v13;
        v12 = (_QWORD *)v12[1];
        v14 = v15;
      }
      while (v12 != (_QWORD *)v9);
    }
    v80 = v8;
    v81 = v3;
    v11[3] = 0;
    v19 = (_QWORD **)(v11 + 3);
    v11[4] = 0;
    v20 = v11 + 4;
    v11[5] = 0;
    *((_BYTE *)v11 + 48) = *(_BYTE *)(v9 + 48);
    v11[3] = v11 + 4;
    v21 = *(_QWORD **)(v9 + 24);
    v22 = (_QWORD *)(v9 + 32);
    if (v21 == (_QWORD *)(v9 + 32))
    {
LABEL_12:
      *((_BYTE *)v11 + 56) = *(_BYTE *)(v9 + 56);
      v23 = *(_QWORD **)(v9 + 24);
      if (v23 != v22)
      {
        v24 = (_QWORD *)v11[3];
        v25 = v11[1];
        do
        {
          v24[6] = v25;
          v26 = v9;
          if (v23 != v22)
            v26 = v23[6];
          v27 = (_QWORD *)v23[1];
          v28 = v27;
          v29 = v23;
          if (v27)
          {
            do
            {
              v30 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v30 = (_QWORD *)v29[2];
              v31 = *v30 == (_QWORD)v29;
              v29 = v30;
            }
            while (!v31);
          }
          v32 = v9;
          if (v30 != v22)
            v32 = v30[6];
          while (v26 != v32)
          {
            v26 = *(_QWORD *)(v26 + 8);
            v25 = *(_QWORD *)(v25 + 8);
          }
          if (v27)
          {
            do
            {
              v33 = v27;
              v27 = (_QWORD *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v33 = (_QWORD *)v23[2];
              v31 = *v33 == (_QWORD)v23;
              v23 = v33;
            }
            while (!v31);
          }
          v34 = (_QWORD *)v24[1];
          if (v34)
          {
            do
            {
              v35 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (_QWORD *)v24[2];
              v31 = *v35 == (_QWORD)v24;
              v24 = v35;
            }
            while (!v31);
          }
          v23 = v33;
          v24 = v35;
        }
        while (v33 != v22);
      }
      *v82 = (uint64_t)v11;
      v82[1] = 0;
      v55 = operator new(0x18uLL);
      v55[1] = 0x100000001;
      *v55 = off_24F036AC0;
      v55[2] = v11;
      v82[1] = (uint64_t)v55;
      v3 = v81;
      v82[2] = v80[2];
      v56 = v80[3];
      v82[3] = v56;
      if (v56)
      {
        v57 = (unsigned int *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = (uint64_t *)operator new(0x18uLL);
      v59[1] = 0x100000001;
      *v59 = (uint64_t)off_24F036A60;
      v59[2] = (uint64_t)v82;
      v60 = (unsigned int *)v81[1];
      *v81 = v82;
      v81[1] = v59;
      if (v60)
      {
        v61 = v60 + 2;
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 16))(v60);
          v64 = v60 + 3;
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
            (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 24))(v60);
        }
      }
      goto LABEL_95;
    }
    while (1)
    {
      v36 = *((_DWORD *)v21 + 8);
      v37 = (_QWORD *)*v20;
      v38 = v11 + 4;
      if (*v19 != v20)
      {
        v39 = (_QWORD *)*v20;
        v40 = v11 + 4;
        if (v37)
        {
          do
          {
            v38 = v39;
            v39 = (_QWORD *)v39[1];
          }
          while (v39);
        }
        else
        {
          do
          {
            v38 = (_QWORD *)v40[2];
            v31 = *v38 == (_QWORD)v40;
            v40 = v38;
          }
          while (v31);
        }
        v41 = *((_DWORD *)v21 + 10);
        v42 = *((_DWORD *)v38 + 8);
        if (v42 == v36)
        {
          if (v36 != 1)
            goto LABEL_57;
          if (*((_DWORD *)v38 + 10) >= v41)
          {
            v43 = (_QWORD *)*v20;
            v44 = v11 + 4;
            v45 = v11 + 4;
            if (v37)
              goto LABEL_61;
LABEL_68:
            v49 = operator new(0x38uLL);
            v50 = *((_OWORD *)v21 + 2);
            v49[6] = v21[6];
            *((_OWORD *)v49 + 2) = v50;
            *v49 = 0;
            v49[1] = 0;
            v49[2] = v45;
            *v44 = v49;
            v51 = (_QWORD *)**v19;
            if (v51)
            {
              *v19 = v51;
              v49 = (_QWORD *)*v44;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v49);
            ++v11[5];
            goto LABEL_71;
          }
        }
        else if (v42 >= v36)
        {
LABEL_57:
          v44 = v11 + 4;
          v45 = v11 + 4;
          if (!v37)
            goto LABEL_68;
          v43 = (_QWORD *)*v20;
          if (v36 != 1)
          {
            v46 = *((_DWORD *)v37 + 8);
            v45 = (_QWORD *)*v20;
            while (v36 != v46)
            {
              if (v36 < v46)
              {
                v54 = *v45;
                v44 = v45;
                if (!*v45)
                  goto LABEL_68;
              }
              else
              {
                if (v46 >= v36)
                  goto LABEL_71;
                v54 = v45[1];
                if (!v54)
                  goto LABEL_67;
              }
              v46 = *(_DWORD *)(v54 + 32);
              v45 = (_QWORD *)v54;
            }
            goto LABEL_71;
          }
          while (1)
          {
LABEL_61:
            v45 = v43;
            v47 = *((_DWORD *)v43 + 8);
            if (v47 == 1)
            {
              v48 = *((_DWORD *)v43 + 10);
              if (v48 > v41)
                goto LABEL_60;
              if (v48 >= v41)
                goto LABEL_71;
            }
            else if (v47 > 1)
            {
LABEL_60:
              v43 = (_QWORD *)*v43;
              v44 = v45;
              if (!*v45)
                goto LABEL_68;
              continue;
            }
            v43 = (_QWORD *)v43[1];
            if (!v43)
            {
LABEL_67:
              v44 = v45 + 1;
              goto LABEL_68;
            }
          }
        }
      }
      if (v37)
        v45 = v38;
      else
        v45 = v11 + 4;
      if (v37)
        v44 = v38 + 1;
      else
        v44 = v11 + 4;
      if (!*v44)
        goto LABEL_68;
LABEL_71:
      v52 = (_QWORD *)v21[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (_QWORD *)v21[2];
          v31 = *v53 == (_QWORD)v21;
          v21 = v53;
        }
        while (!v31);
      }
      v21 = v53;
      if (v53 == v22)
        goto LABEL_12;
    }
  }
LABEL_95:
  v67 = (uint64_t **)*v3;
  v68 = (uint64_t *)**v3;
  v69 = (uint64_t *)v68[1];
  v83 = v69;
  if (v68 != v69)
  {
    do
    {
      while (1)
      {
        v70 = v69[2];
        if (!*(_BYTE *)(v70 + 24))
          break;
        v69 = (uint64_t *)v69[1];
        v83 = v69;
        v68 = *v67;
        if (v69 == *v67)
          goto LABEL_100;
      }
      v69 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::erase(v68, (int *)(v70 + 64), &v83);
      v67 = (uint64_t **)*v3;
      v83 = v69;
      v68 = *v67;
    }
    while (v69 != *v67);
  }
LABEL_100:
  v3[2] = v69;
LABEL_101:
  pthread_mutex_unlock(v88);
  v71 = (char *)__p;
  if (__p)
  {
    if (v87 - 1 >= 0)
    {
      v72 = (char *)__p + 16 * v87;
      do
      {
        v73 = (unsigned int *)*((_QWORD *)v72 - 1);
        if (v73)
        {
          v74 = v73 + 2;
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 16))(v73);
            v77 = v73 + 3;
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
              (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 24))(v73);
          }
        }
        v72 -= 16;
      }
      while (v72 > v71);
    }
    if (v85 >= 0xB)
      operator delete(__p);
  }
}

void sub_227AD0F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v14[10];
  unint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 296);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[8] = v3;
    v14[9] = v3;
    v14[6] = v3;
    v14[7] = v3;
    v14[4] = v3;
    v14[5] = v3;
    v14[2] = v3;
    v14[3] = v3;
    v14[0] = v3;
    v14[1] = v3;
    v15 = 10;
    __p = v14;
    v17 = 0;
    v18 = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 296), v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v4 = (char *)__p;
    if (__p)
    {
      if (v17 - 1 >= 0)
      {
        v5 = (char *)__p + 16 * v17;
        do
        {
          v6 = (unsigned int *)*((_QWORD *)v5 - 1);
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v15 >= 0xB)
        operator delete(__p);
    }
  }
  boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
    *(_BYTE *)a1 = 0;
  return a1;
}

void sub_227AD179C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t _GLOBAL__sub_I_ARICoexCommandDriver_cpp()
{
  return __cxa_atexit((void (*)(void *))std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long>>::~vector[abi:ne180100], &qword_253DF24F0, &dword_227A72000);
}

void BudgetData::BudgetData(BudgetData *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
}

{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
}

void BudgetData::~BudgetData(BudgetData *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 8);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 2) = 0;
  *v2 = 0;
}

{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 8);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 2) = 0;
  *v2 = 0;
}

void BudgetData::BudgetData(BudgetData *this, const BudgetData *a2)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  if (this != a2)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  if (this != a2)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

void sub_227AD1964(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_227AD19C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *BudgetData::BudgetData(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  result[2] = 0;
  result[1] = 0;
  *result = result + 1;
  *result = *(_QWORD *)a2;
  *(_QWORD *)a2 = result + 1;
  v2 = result[1];
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  if (result[2])
    v3 = (_QWORD *)(result[1] + 16);
  else
    v3 = result;
  *v3 = result + 1;
  *(_QWORD *)a2 = a2 + 8;
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;

  result[2] = 0;
  result[1] = 0;
  *result = result + 1;
  *result = *(_QWORD *)a2;
  *(_QWORD *)a2 = result + 1;
  v2 = result[1];
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  if (result[2])
    v3 = (_QWORD *)(result[1] + 16);
  else
    v3 = result;
  *v3 = result + 1;
  *(_QWORD *)a2 = a2 + 8;
  return result;
}

uint64_t BudgetData::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

uint64_t BudgetData::get(uint64_t **a1, unsigned int a2)
{
  char v2;
  unsigned __int8 *v4;
  uint64_t **v5;
  _QWORD *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;

  v2 = a2;
  v5 = a1 + 1;
  v4 = (unsigned __int8 *)a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = v4[28];
        if (v7 <= a2)
          break;
        v4 = (unsigned __int8 *)*v6;
        v5 = (uint64_t **)v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = (unsigned __int8 *)v6[1];
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = v6;
    v6 = operator new(0x28uLL);
    *((_BYTE *)v6 + 28) = v2;
    *((_BYTE *)v6 + 32) = 0;
    *((_BYTE *)v6 + 36) = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = v6;
    v9 = (uint64_t *)**a1;
    v10 = v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6[4];
}

uint64_t *BudgetData::set(uint64_t *result, unsigned int a2, int a3)
{
  char v4;
  uint64_t *v5;
  unsigned __int8 *v6;
  uint64_t **v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;

  v4 = a2;
  v5 = result;
  v7 = (uint64_t **)(result + 1);
  v6 = (unsigned __int8 *)result[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = v6[28];
        if (v9 <= a2)
          break;
        v6 = (unsigned __int8 *)*v8;
        v7 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v6 = (unsigned __int8 *)v8[1];
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = result + 1;
LABEL_8:
    v10 = v8;
    v8 = operator new(0x28uLL);
    *((_BYTE *)v8 + 28) = v4;
    *((_BYTE *)v8 + 32) = 0;
    *((_BYTE *)v8 + 36) = 0;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v7 = v8;
    v11 = *(_QWORD *)*v5;
    v12 = v8;
    if (v11)
    {
      *v5 = v11;
      v12 = *v7;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v12);
    ++v5[2];
  }
  *((_DWORD *)v8 + 8) = a3;
  *((_BYTE *)v8 + 36) = 1;
  return result;
}

void BudgetData::clear(BudgetData *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 8);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 2) = 0;
  *v2 = 0;
}

_QWORD *BudgetData::for_each(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = result + 1;
  v3 = (_QWORD *)*result;
  if ((_QWORD *)*result != result + 1)
  {
    do
    {
      v5 = *(_QWORD *)(a2 + 24);
      if (!v5)
        std::__throw_bad_function_call[abi:ne180100]();
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v5 + 48))(v5, (uint64_t)v3 + 28, v3 + 4);
      if (!(_DWORD)result)
        break;
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v2);
  }
  return result;
}

void std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

